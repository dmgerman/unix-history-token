begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_ZFS_IOCTL_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_ZFS_IOCTL_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_include
include|#
directive|include
file|<sys/cred.h>
end_include

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/zio.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Property values for snapdir  */
define|#
directive|define
name|ZFS_SNAPDIR_HIDDEN
value|0
define|#
directive|define
name|ZFS_SNAPDIR_VISIBLE
value|1
define|#
directive|define
name|DMU_BACKUP_VERSION
value|(1ULL)
define|#
directive|define
name|DMU_BACKUP_MAGIC
value|0x2F5bacbacULL
comment|/*  * zfs ioctl command structure  */
typedef|typedef
struct|struct
name|dmu_replay_record
block|{
enum|enum
block|{
name|DRR_BEGIN
block|,
name|DRR_OBJECT
block|,
name|DRR_FREEOBJECTS
block|,
name|DRR_WRITE
block|,
name|DRR_FREE
block|,
name|DRR_END
block|, 	}
name|drr_type
enum|;
name|uint32_t
name|drr_pad
decl_stmt|;
union|union
block|{
struct|struct
name|drr_begin
block|{
name|uint64_t
name|drr_magic
decl_stmt|;
name|uint64_t
name|drr_version
decl_stmt|;
name|uint64_t
name|drr_creation_time
decl_stmt|;
name|dmu_objset_type_t
name|drr_type
decl_stmt|;
name|uint32_t
name|drr_pad
decl_stmt|;
name|uint64_t
name|drr_toguid
decl_stmt|;
name|uint64_t
name|drr_fromguid
decl_stmt|;
name|char
name|drr_toname
index|[
name|MAXNAMELEN
index|]
decl_stmt|;
block|}
name|drr_begin
struct|;
struct|struct
name|drr_end
block|{
name|zio_cksum_t
name|drr_checksum
decl_stmt|;
block|}
name|drr_end
struct|;
struct|struct
name|drr_object
block|{
name|uint64_t
name|drr_object
decl_stmt|;
name|dmu_object_type_t
name|drr_type
decl_stmt|;
name|dmu_object_type_t
name|drr_bonustype
decl_stmt|;
name|uint32_t
name|drr_blksz
decl_stmt|;
name|uint32_t
name|drr_bonuslen
decl_stmt|;
name|uint8_t
name|drr_checksum
decl_stmt|;
name|uint8_t
name|drr_compress
decl_stmt|;
name|uint8_t
name|drr_pad
index|[
literal|6
index|]
decl_stmt|;
comment|/* bonus content follows */
block|}
name|drr_object
struct|;
struct|struct
name|drr_freeobjects
block|{
name|uint64_t
name|drr_firstobj
decl_stmt|;
name|uint64_t
name|drr_numobjs
decl_stmt|;
block|}
name|drr_freeobjects
struct|;
struct|struct
name|drr_write
block|{
name|uint64_t
name|drr_object
decl_stmt|;
name|dmu_object_type_t
name|drr_type
decl_stmt|;
name|uint32_t
name|drr_pad
decl_stmt|;
name|uint64_t
name|drr_offset
decl_stmt|;
name|uint64_t
name|drr_length
decl_stmt|;
comment|/* content follows */
block|}
name|drr_write
struct|;
struct|struct
name|drr_free
block|{
name|uint64_t
name|drr_object
decl_stmt|;
name|uint64_t
name|drr_offset
decl_stmt|;
name|uint64_t
name|drr_length
decl_stmt|;
block|}
name|drr_free
struct|;
block|}
name|drr_u
union|;
block|}
name|dmu_replay_record_t
typedef|;
typedef|typedef
struct|struct
name|zinject_record
block|{
name|uint64_t
name|zi_objset
decl_stmt|;
name|uint64_t
name|zi_object
decl_stmt|;
name|uint64_t
name|zi_start
decl_stmt|;
name|uint64_t
name|zi_end
decl_stmt|;
name|uint64_t
name|zi_guid
decl_stmt|;
name|uint32_t
name|zi_level
decl_stmt|;
name|uint32_t
name|zi_error
decl_stmt|;
name|uint64_t
name|zi_type
decl_stmt|;
name|uint32_t
name|zi_freq
decl_stmt|;
block|}
name|zinject_record_t
typedef|;
define|#
directive|define
name|ZINJECT_NULL
value|0x1
define|#
directive|define
name|ZINJECT_FLUSH_ARC
value|0x2
define|#
directive|define
name|ZINJECT_UNLOAD_SPA
value|0x4
typedef|typedef
struct|struct
name|zfs_cmd
block|{
name|char
name|zc_name
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|char
name|zc_value
index|[
name|MAXPATHLEN
operator|*
literal|2
index|]
decl_stmt|;
name|uint64_t
name|zc_guid
decl_stmt|;
name|uint64_t
name|zc_nvlist_src
decl_stmt|;
comment|/* really (char *) */
name|uint64_t
name|zc_nvlist_src_size
decl_stmt|;
name|uint64_t
name|zc_nvlist_dst
decl_stmt|;
comment|/* really (char *) */
name|uint64_t
name|zc_nvlist_dst_size
decl_stmt|;
name|uint64_t
name|zc_cookie
decl_stmt|;
name|uint64_t
name|zc_cred
decl_stmt|;
name|uint64_t
name|zc_dev
decl_stmt|;
name|uint64_t
name|zc_objset_type
decl_stmt|;
name|uint64_t
name|zc_history
decl_stmt|;
comment|/* really (char *) */
name|uint64_t
name|zc_history_len
decl_stmt|;
name|uint64_t
name|zc_history_offset
decl_stmt|;
name|uint64_t
name|zc_obj
decl_stmt|;
name|uint64_t
name|zc_jailid
decl_stmt|;
name|dmu_objset_stats_t
name|zc_objset_stats
decl_stmt|;
name|struct
name|drr_begin
name|zc_begin_record
decl_stmt|;
name|zinject_record_t
name|zc_inject_record
decl_stmt|;
block|}
name|zfs_cmd_t
typedef|;
ifdef|#
directive|ifdef
name|_KERNEL
typedef|typedef
struct|struct
name|zfs_create_data
block|{
name|cred_t
modifier|*
name|zc_cred
decl_stmt|;
name|dev_t
name|zc_dev
decl_stmt|;
name|nvlist_t
modifier|*
name|zc_props
decl_stmt|;
block|}
name|zfs_create_data_t
typedef|;
endif|#
directive|endif
define|#
directive|define
name|ZVOL_MAX_MINOR
value|(1<< 16)
define|#
directive|define
name|ZFS_MIN_MINOR
value|(ZVOL_MAX_MINOR + 1)
ifdef|#
directive|ifdef
name|_KERNEL
specifier|extern
name|int
name|zfs_secpolicy_write
parameter_list|(
specifier|const
name|char
modifier|*
name|dataset
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_busy
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unmount_snap
parameter_list|(
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* _KERNEL */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_ZFS_IOCTL_H */
end_comment

end_unit

