begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2001 Tobias Weingartner  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $OpenBSD: hash.h,v 1.4 2004/05/25 18:37:23 jmc Exp $  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_HASH_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_HASH_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_comment
comment|/* Convenience */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HASHINIT
end_ifndef

begin_define
define|#
directive|define
name|HASHINIT
value|5381
end_define

begin_define
define|#
directive|define
name|HASHSTEP
parameter_list|(
name|x
parameter_list|,
name|c
parameter_list|)
value|(((x<< 5) + x) + (c))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Return a 32-bit hash of the given buffer.  The init  * value should be 0, or the previous hash value to extend  * the previous hash.  */
end_comment

begin_function
specifier|static
name|__inline
name|uint32_t
name|hash32_buf
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|uint32_t
name|hash
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|p
init|=
name|buf
decl_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
name|hash
operator|=
name|HASHSTEP
argument_list|(
name|hash
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
end_function

begin_comment
comment|/*  * Return a 32-bit hash of the given string.  */
end_comment

begin_function
specifier|static
name|__inline
name|uint32_t
name|hash32_str
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|uint32_t
name|hash
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|p
init|=
name|buf
decl_stmt|;
while|while
condition|(
operator|*
name|p
condition|)
name|hash
operator|=
name|HASHSTEP
argument_list|(
name|hash
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
end_function

begin_comment
comment|/*  * Return a 32-bit hash of the given string, limited by N.  */
end_comment

begin_function
specifier|static
name|__inline
name|uint32_t
name|hash32_strn
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|uint32_t
name|hash
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|p
init|=
name|buf
decl_stmt|;
while|while
condition|(
operator|*
name|p
operator|&&
name|len
operator|--
condition|)
name|hash
operator|=
name|HASHSTEP
argument_list|(
name|hash
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
return|return
name|hash
return|;
block|}
end_function

begin_comment
comment|/*  * Return a 32-bit hash of the given string terminated by C,  * (as well as 0).  This is mainly here as a helper for the  * namei() hashing of path name parts.  */
end_comment

begin_function
specifier|static
name|__inline
name|uint32_t
name|hash32_stre
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|end
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|ep
parameter_list|,
name|uint32_t
name|hash
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|p
init|=
name|buf
decl_stmt|;
while|while
condition|(
operator|*
name|p
operator|&&
operator|(
operator|*
name|p
operator|!=
name|end
operator|)
condition|)
name|hash
operator|=
name|HASHSTEP
argument_list|(
name|hash
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|ep
condition|)
operator|*
name|ep
operator|=
name|p
expr_stmt|;
return|return
name|hash
return|;
block|}
end_function

begin_comment
comment|/*  * Return a 32-bit hash of the given string, limited by N,  * and terminated by C (as well as 0).  This is mainly here  * as a helper for the namei() hashing of path name parts.  */
end_comment

begin_function
specifier|static
name|__inline
name|uint32_t
name|hash32_strne
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|end
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|ep
parameter_list|,
name|uint32_t
name|hash
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|p
init|=
name|buf
decl_stmt|;
while|while
condition|(
operator|*
name|p
operator|&&
operator|(
operator|*
name|p
operator|!=
name|end
operator|)
operator|&&
name|len
operator|--
condition|)
name|hash
operator|=
name|HASHSTEP
argument_list|(
name|hash
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|ep
condition|)
operator|*
name|ep
operator|=
name|p
expr_stmt|;
return|return
name|hash
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_SYS_HASH_H_ */
end_comment

end_unit

