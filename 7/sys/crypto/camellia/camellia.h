begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* camellia.h ver 1.1.0  *  * Copyright (c) 2006  * NTT (Nippon Telegraph and Telephone Corporation) . All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *   notice, this list of conditions and the following disclaimer as  *   the first lines of this file unmodified.  * 2. Redistributions in binary form must reproduce the above copyright  *   notice, this list of conditions and the following disclaimer in the  *   documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY NTT ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL NTT BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CAMELLIA_H
end_ifndef

begin_define
define|#
directive|define
name|_CAMELLIA_H
end_define

begin_define
define|#
directive|define
name|CAMELLIA_BLOCK_SIZE
value|16
end_define

begin_define
define|#
directive|define
name|CAMELLIA_SUBKEYWORD
value|68
end_define

begin_comment
comment|/* (34*8/4) */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|bits
decl_stmt|;
comment|/* key-length */
name|uint32_t
name|subkey
index|[
name|CAMELLIA_SUBKEYWORD
index|]
decl_stmt|;
comment|/* encrypt/decrypt key schedule */
block|}
name|camellia_ctx
typedef|;
end_typedef

begin_function_decl
name|void
name|camellia_set_key
parameter_list|(
name|camellia_ctx
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|camellia_decrypt
parameter_list|(
specifier|const
name|camellia_ctx
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|,
name|u_char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|camellia_encrypt
parameter_list|(
specifier|const
name|camellia_ctx
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|,
name|u_char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|Camellia_Ekeygen
parameter_list|(
specifier|const
name|int
name|keyBitLength
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|rawKey
parameter_list|,
name|uint32_t
modifier|*
name|subkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|Camellia_EncryptBlock
parameter_list|(
specifier|const
name|int
name|keyBitLength
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|plaintext
parameter_list|,
specifier|const
name|uint32_t
modifier|*
name|subkey
parameter_list|,
name|unsigned
name|char
modifier|*
name|cipherText
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|Camellia_DecryptBlock
parameter_list|(
specifier|const
name|int
name|keyBitLength
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|cipherText
parameter_list|,
specifier|const
name|uint32_t
modifier|*
name|subkey
parameter_list|,
name|unsigned
name|char
modifier|*
name|plaintext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|camellia_setup128
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|uint32_t
modifier|*
name|subkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|camellia_setup192
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|uint32_t
modifier|*
name|subkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|camellia_setup256
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|uint32_t
modifier|*
name|subkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|camellia_encrypt128
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|subkey
parameter_list|,
name|uint32_t
modifier|*
name|io
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|camellia_encrypt256
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|subkey
parameter_list|,
name|uint32_t
modifier|*
name|io
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|camellia_decrypt128
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|subkey
parameter_list|,
name|uint32_t
modifier|*
name|io
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|camellia_decrypt256
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|subkey
parameter_list|,
name|uint32_t
modifier|*
name|io
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CAMELLIA_H */
end_comment

end_unit

