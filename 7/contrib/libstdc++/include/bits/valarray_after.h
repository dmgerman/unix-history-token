begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The template and inlines for the -*- C++ -*- internal _Meta class.
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/** @file valarray_after.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_comment
comment|// Written by Gabriel Dos Reis<Gabriel.Dos-Reis@cmla.ens-cachan.fr>
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_VALARRAY_AFTER_H
end_ifndef

begin_define
define|#
directive|define
name|_VALARRAY_AFTER_H
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_macro
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
argument|std
argument_list|)
end_macro

begin_comment
comment|//
end_comment

begin_comment
comment|// gslice_array closure.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|class
name|_GBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|value_type
expr_stmt|;
name|_GBase
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_M_expr
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_index
argument_list|(
argument|__i
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_expr
index|[
name|_M_index
index|[
name|__i
index|]
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_index
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Dom
modifier|&
name|_M_expr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|_M_index
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
name|class
name|_GBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
name|_Tp
name|value_type
typedef|;
name|_GBase
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
name|__a
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_M_array
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_index
argument_list|(
argument|__i
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_array
operator|.
name|_M_data
index|[
name|_M_index
index|[
name|__i
index|]
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_index
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|_Array
operator|<
name|_Tp
operator|>
name|_M_array
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|_M_index
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_GClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_GBase
operator|<
name|_Dom
operator|>
block|{
typedef|typedef
name|_GBase
operator|<
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_GClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__i
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_GClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_GBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_GBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_GClos
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
name|__a
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__i
argument_list|)
block|{}
end_expr_stmt

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// indirect_array closure
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|class
name|_IBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|value_type
expr_stmt|;
name|_IBase
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_M_expr
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_index
argument_list|(
argument|__i
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_expr
index|[
name|_M_index
index|[
name|__i
index|]
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_index
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Dom
modifier|&
name|_M_expr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|_M_index
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_IClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_IBase
operator|<
name|_Dom
operator|>
block|{
typedef|typedef
name|_IBase
operator|<
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_IClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__i
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_IClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_IBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_IBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_expr_stmt
name|_IClos
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__a
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__i
argument_list|)
block|{}
end_expr_stmt

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// class _Expr
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
name|class
name|_Expr
block|{
name|public
operator|:
typedef|typedef
name|_Tp
name|value_type
typedef|;
name|_Expr
argument_list|(
specifier|const
name|_Clos
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|_Clos
operator|&
name|operator
argument_list|()
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|value_type
name|operator
index|[]
argument_list|(
name|size_t
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|operator
index|[]
operator|(
name|slice
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_Expr
operator|<
name|_UnClos
operator|<
name|__unary_plus
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Clos
operator|>
operator|,
name|value_type
operator|>
name|operator
operator|+
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_Expr
operator|<
name|_UnClos
operator|<
name|__negate
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Clos
operator|>
operator|,
name|value_type
operator|>
name|operator
operator|-
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_Expr
operator|<
name|_UnClos
operator|<
name|__bitwise_not
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Clos
operator|>
operator|,
name|value_type
operator|>
name|operator
operator|~
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_Expr
operator|<
name|_UnClos
operator|<
name|__logical_not
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Clos
operator|>
operator|,
name|bool
operator|>
name|operator
operator|!
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|value_type
name|sum
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|shift
argument_list|(
argument|int
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|cshift
argument_list|(
argument|int
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|value_type
name|min
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|value_type
name|max
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|apply
argument_list|(
argument|value_type (*)(const value_type&)
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|apply
argument_list|(
argument|value_type (*)(value_type)
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Clos
name|_M_closure
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|_Expr
argument_list|(
specifier|const
name|_Clos
operator|&
name|__c
argument_list|)
operator|:
name|_M_closure
argument_list|(
argument|__c
argument_list|)
block|{}
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
specifier|const
name|_Clos
operator|&
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
argument_list|()
operator|(
operator|)
specifier|const
block|{
return|return
name|_M_closure
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_closure
index|[
name|__i
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|slice
name|__s
operator|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__v
operator|=
name|valarray
operator|<
name|_Tp
operator|>
operator|(
operator|*
name|this
operator|)
index|[
name|__s
index|]
block|;
return|return
name|__v
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
name|__gs
operator|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__v
operator|=
name|valarray
operator|<
name|_Tp
operator|>
operator|(
operator|*
name|this
operator|)
index|[
name|__gs
index|]
block|;
return|return
name|__v
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
name|__m
operator|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__v
operator|=
name|valarray
operator|<
name|_Tp
operator|>
operator|(
operator|*
name|this
operator|)
index|[
name|__m
index|]
block|;
return|return
name|__v
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
operator|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__v
operator|=
name|valarray
operator|<
name|_Tp
operator|>
operator|(
operator|*
name|this
operator|)
index|[
name|__i
index|]
block|;
return|return
name|__v
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|size_t
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_closure
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|shift
argument_list|(
argument|int __n
argument_list|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__v
operator|=
name|valarray
operator|<
name|_Tp
operator|>
operator|(
operator|*
name|this
operator|)
operator|.
name|shift
argument_list|(
name|__n
argument_list|)
block|;
return|return
name|__v
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|cshift
argument_list|(
argument|int __n
argument_list|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__v
operator|=
name|valarray
operator|<
name|_Tp
operator|>
operator|(
operator|*
name|this
operator|)
operator|.
name|cshift
argument_list|(
name|__n
argument_list|)
block|;
return|return
name|__v
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|apply
argument_list|(
argument|_Tp __f(const _Tp&)
argument_list|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__v
operator|=
name|valarray
operator|<
name|_Tp
operator|>
operator|(
operator|*
name|this
operator|)
operator|.
name|apply
argument_list|(
name|__f
argument_list|)
block|;
return|return
name|__v
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|apply
argument_list|(
argument|_Tp __f(_Tp)
argument_list|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__v
operator|=
name|valarray
operator|<
name|_Tp
operator|>
operator|(
operator|*
name|this
operator|)
operator|.
name|apply
argument_list|(
name|__f
argument_list|)
block|;
return|return
name|__v
return|;
block|}
end_expr_stmt

begin_comment
comment|// XXX: replace this with a more robust summation algorithm.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|sum
argument_list|()
specifier|const
block|{
name|size_t
name|__n
operator|=
name|_M_closure
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
name|__n
operator|==
literal|0
condition|)
return|return
name|_Tp
argument_list|()
return|;
else|else
block|{
name|_Tp
name|__s
init|=
name|_M_closure
index|[
operator|--
name|__n
index|]
decl_stmt|;
while|while
condition|(
name|__n
operator|!=
literal|0
condition|)
name|__s
operator|+=
name|_M_closure
index|[
operator|--
name|__n
index|]
expr_stmt|;
return|return
name|__s
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|min
argument_list|()
specifier|const
block|{
return|return
name|__valarray_min
argument_list|(
name|_M_closure
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|max
argument_list|()
specifier|const
block|{
return|return
name|__valarray_max
argument_list|(
name|_M_closure
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_UnClos
operator|<
name|__logical_not
operator|,
name|_Expr
operator|,
name|_Dom
operator|>
operator|,
name|bool
operator|>
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|::
name|operator
operator|!
operator|(
operator|)
specifier|const
block|{
typedef|typedef
name|_UnClos
operator|<
name|__logical_not
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Dom
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
name|this
operator|->
name|_M_closure
argument_list|)
operator|)
return|;
end_return

begin_define
unit|}
define|#
directive|define
name|_DEFINE_EXPR_UNARY_OPERATOR
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<class _Dom, typename _Tp>                                      \     inline _Expr<_UnClos<_Name, std::_Expr, _Dom>, _Tp>                   \     _Expr<_Dom, _Tp>::operator _Op() const                                \     {                                                                     \       typedef _UnClos<_Name, std::_Expr, _Dom> _Closure;                  \       return _Expr<_Closure, _Tp>(_Closure(this->_M_closure));            \     }
end_define

begin_expr_stmt
unit|_DEFINE_EXPR_UNARY_OPERATOR
operator|(
operator|+
operator|,
name|__unary_plus
operator|)
name|_DEFINE_EXPR_UNARY_OPERATOR
argument_list|(
argument|-
argument_list|,
argument|__negate
argument_list|)
name|_DEFINE_EXPR_UNARY_OPERATOR
argument_list|(
argument|~
argument_list|,
argument|__bitwise_not
argument_list|)
undef|#
directive|undef
name|_DEFINE_EXPR_UNARY_OPERATOR
define|#
directive|define
name|_DEFINE_EXPR_BINARY_OPERATOR
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<class _Dom1, class _Dom2>					\     inline _Expr<_BinClos<_Name, _Expr, _Expr, _Dom1, _Dom2>,           \            typename __fun<_Name, typename _Dom1::value_type>::result_type> \     operator _Op(const _Expr<_Dom1, typename _Dom1::value_type>& __v,   \ 	         const _Expr<_Dom2, typename _Dom2::value_type>& __w)   \     {                                                                   \       typedef typename _Dom1::value_type _Arg;                          \       typedef typename __fun<_Name, _Arg>::result_type _Value;          \       typedef _BinClos<_Name, _Expr, _Expr, _Dom1, _Dom2> _Closure;     \       return _Expr<_Closure, _Value>(_Closure(__v(), __w()));           \     }                                                                   \                                                                         \   template<class _Dom>                                                  \     inline _Expr<_BinClos<_Name, _Expr, _Constant, _Dom,                \                           typename _Dom::value_type>,                   \              typename __fun<_Name, typename _Dom::value_type>::result_type> \     operator _Op(const _Expr<_Dom, typename _Dom::value_type>& __v,     \                  const typename _Dom::value_type& __t)                  \     {                                                                   \       typedef typename _Dom::value_type _Arg;                           \       typedef typename __fun<_Name, _Arg>::result_type _Value;          \       typedef _BinClos<_Name, _Expr, _Constant, _Dom, _Arg> _Closure;   \       return _Expr<_Closure, _Value>(_Closure(__v(), __t));             \     }                                                                   \                                                                         \   template<class _Dom>                                                  \     inline _Expr<_BinClos<_Name, _Constant, _Expr,                      \                           typename _Dom::value_type, _Dom>,             \              typename __fun<_Name, typename _Dom::value_type>::result_type> \     operator _Op(const typename _Dom::value_type& __t,                  \                  const _Expr<_Dom, typename _Dom::value_type>& __v)     \     {                                                                   \       typedef typename _Dom::value_type _Arg;                           \       typedef typename __fun<_Name, _Arg>::result_type _Value;          \       typedef _BinClos<_Name, _Constant, _Expr, _Arg, _Dom> _Closure;   \       return _Expr<_Closure, _Value>(_Closure(__t, __v()));             \     }                                                                   \                                                                         \   template<class _Dom>                                                  \     inline _Expr<_BinClos<_Name, _Expr, _ValArray,                      \                           _Dom, typename _Dom::value_type>,             \              typename __fun<_Name, typename _Dom::value_type>::result_type> \     operator _Op(const _Expr<_Dom,typename _Dom::value_type>& __e,      \                  const valarray<typename _Dom::value_type>& __v)        \     {                                                                   \       typedef typename _Dom::value_type _Arg;                           \       typedef typename __fun<_Name, _Arg>::result_type _Value;          \       typedef _BinClos<_Name, _Expr, _ValArray, _Dom, _Arg> _Closure;   \       return _Expr<_Closure, _Value>(_Closure(__e(), __v));             \     }                                                                   \                                                                         \   template<class _Dom>                                                  \     inline _Expr<_BinClos<_Name, _ValArray, _Expr,                      \                  typename _Dom::value_type, _Dom>,                      \              typename __fun<_Name, typename _Dom::value_type>::result_type> \     operator _Op(const valarray<typename _Dom::value_type>& __v,        \                  const _Expr<_Dom, typename _Dom::value_type>& __e)     \     {                                                                   \       typedef typename _Dom::value_type _Tp;                            \       typedef typename __fun<_Name, _Tp>::result_type _Value;           \       typedef _BinClos<_Name, _ValArray, _Expr, _Tp, _Dom> _Closure;    \       return _Expr<_Closure, _Value>(_Closure(__v, __e ()));            \     }
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|+
argument_list|,
argument|__plus
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|-
argument_list|,
argument|__minus
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|*
argument_list|,
argument|__multiplies
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|/
argument_list|,
argument|__divides
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|%
argument_list|,
argument|__modulus
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|^
argument_list|,
argument|__bitwise_xor
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|&
argument_list|,
argument|__bitwise_and
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument||
argument_list|,
argument|__bitwise_or
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|<<
argument_list|,
argument|__shift_left
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|>>
argument_list|,
argument|__shift_right
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|&&
argument_list|,
argument|__logical_and
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|||
argument_list|,
argument|__logical_or
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|==
argument_list|,
argument|__equal_to
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|!=
argument_list|,
argument|__not_equal_to
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|<
argument_list|,
argument|__less
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|>
argument_list|,
argument|__greater
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|<=
argument_list|,
argument|__less_equal
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|>=
argument_list|,
argument|__greater_equal
argument_list|)
undef|#
directive|undef
name|_DEFINE_EXPR_BINARY_OPERATOR
define|#
directive|define
name|_DEFINE_EXPR_UNARY_FUNCTION
parameter_list|(
name|_Name
parameter_list|)
define|\
value|template<class _Dom>                                                   \     inline _Expr<_UnClos<__##_Name, _Expr, _Dom>,                        \                  typename _Dom::value_type>                              \     _Name(const _Expr<_Dom, typename _Dom::value_type>& __e)             \     {                                                                    \       typedef typename _Dom::value_type _Tp;                             \       typedef _UnClos<__##_Name, _Expr, _Dom> _Closure;                  \       return _Expr<_Closure, _Tp>(_Closure(__e()));                      \     }                                                                    \                                                                          \   template<typename _Tp>                                                 \     inline _Expr<_UnClos<__##_Name, _ValArray, _Tp>, _Tp>                \     _Name(const valarray<_Tp>& __v)                                      \     {                                                                    \       typedef _UnClos<__##_Name, _ValArray, _Tp> _Closure;               \       return _Expr<_Closure, _Tp>(_Closure(__v));                        \     }
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|abs
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|cos
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|acos
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|cosh
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|sin
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|asin
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|sinh
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|tan
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|tanh
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|atan
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|exp
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|log
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|log10
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|sqrt
argument_list|)
undef|#
directive|undef
name|_DEFINE_EXPR_UNARY_FUNCTION
define|#
directive|define
name|_DEFINE_EXPR_BINARY_FUNCTION
parameter_list|(
name|_Fun
parameter_list|)
define|\
value|template<class _Dom1, class _Dom2>                                   \     inline _Expr<_BinClos<__##_Fun, _Expr, _Expr, _Dom1, _Dom2>,       \ 		 typename _Dom1::value_type>                           \     _Fun(const _Expr<_Dom1, typename _Dom1::value_type>& __e1,         \ 	  const _Expr<_Dom2, typename _Dom2::value_type>& __e2)        \     {                                                                  \       typedef typename _Dom1::value_type _Tp;                          \       typedef _BinClos<__##_Fun, _Expr, _Expr, _Dom1, _Dom2> _Closure; \       return _Expr<_Closure, _Tp>(_Closure(__e1(), __e2()));           \     }                                                                  \                                                                        \   template<class _Dom>                                                 \     inline _Expr<_BinClos<__##_Fun, _Expr, _ValArray, _Dom,            \ 			  typename _Dom::value_type>,                  \ 		 typename _Dom::value_type>                            \     _Fun(const _Expr<_Dom, typename _Dom::value_type>& __e,            \ 	 const valarray<typename _Dom::value_type>& __v)               \     {                                                                  \       typedef typename _Dom::value_type _Tp;                           \       typedef _BinClos<__##_Fun, _Expr, _ValArray, _Dom, _Tp> _Closure; \       return _Expr<_Closure, _Tp>(_Closure(__e(), __v));               \     }                                                                  \                                                                        \   template<class _Dom>                                                 \     inline _Expr<_BinClos<__##_Fun, _ValArray, _Expr,                  \ 			  typename _Dom::value_type, _Dom>,            \ 		 typename _Dom::value_type>                            \     _Fun(const valarray<typename _Dom::valarray>& __v,                 \ 	 const _Expr<_Dom, typename _Dom::value_type>& __e)            \     {                                                                  \       typedef typename _Dom::value_type _Tp;                           \       typedef _BinClos<__##_Fun, _ValArray, _Expr, _Tp, _Dom> _Closure; \       return _Expr<_Closure, _Tp>(_Closure(__v, __e()));               \     }                                                                  \                                                                        \   template<class _Dom>                                                 \     inline _Expr<_BinClos<__##_Fun, _Expr, _Constant, _Dom,            \ 			  typename _Dom::value_type>,                  \ 		 typename _Dom::value_type>                            \     _Fun(const _Expr<_Dom, typename _Dom::value_type>& __e,            \ 	 const typename _Dom::value_type& __t)                         \     {                                                                  \       typedef typename _Dom::value_type _Tp;                           \       typedef _BinClos<__##_Fun, _Expr, _Constant, _Dom, _Tp> _Closure;\       return _Expr<_Closure, _Tp>(_Closure(__e(), __t));               \     }                                                                  \                                                                        \   template<class _Dom>                                                 \     inline _Expr<_BinClos<__##_Fun, _Constant, _Expr,                  \ 			  typename _Dom::value_type, _Dom>,            \ 		 typename _Dom::value_type>                            \     _Fun(const typename _Dom::value_type& __t,                         \ 	 const _Expr<_Dom, typename _Dom::value_type>& __e)            \     {                                                                  \       typedef typename _Dom::value_type _Tp;                           \       typedef _BinClos<__##_Fun, _Constant, _Expr, _Tp, _Dom> _Closure; \       return _Expr<_Closure, _Tp>(_Closure(__t, __e()));               \     }                                                                  \                                                                        \   template<typename _Tp>                                               \     inline _Expr<_BinClos<__##_Fun, _ValArray, _ValArray, _Tp, _Tp>, _Tp> \     _Fun(const valarray<_Tp>& __v, const valarray<_Tp>& __w)           \     {                                                                  \       typedef _BinClos<__##_Fun, _ValArray, _ValArray, _Tp, _Tp> _Closure; \       return _Expr<_Closure, _Tp>(_Closure(__v, __w));                 \     }                                                                  \                                                                        \   template<typename _Tp>                                               \     inline _Expr<_BinClos<__##_Fun, _ValArray, _Constant, _Tp, _Tp>, _Tp> \     _Fun(const valarray<_Tp>& __v, const _Tp& __t)                     \     {                                                                  \       typedef _BinClos<__##_Fun, _ValArray, _Constant, _Tp, _Tp> _Closure; \       return _Expr<_Closure, _Tp>(_Closure(__v, __t));                 \     }                                                                  \ 								       \   template<typename _Tp>                                               \     inline _Expr<_BinClos<__##_Fun, _Constant, _ValArray, _Tp, _Tp>, _Tp> \     _Fun(const _Tp& __t, const valarray<_Tp>& __v)                     \     {                                                                  \       typedef _BinClos<__##_Fun, _Constant, _ValArray, _Tp, _Tp> _Closure; \       return _Expr<_Closure, _Tp>(_Closure(__t, __v));                 \     }
name|_DEFINE_EXPR_BINARY_FUNCTION
argument_list|(
argument|atan2
argument_list|)
name|_DEFINE_EXPR_BINARY_FUNCTION
argument_list|(
argument|pow
argument_list|)
undef|#
directive|undef
name|_DEFINE_EXPR_BINARY_FUNCTION
name|_GLIBCXX_END_NAMESPACE
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CPP_VALARRAY_AFTER_H */
end_comment

end_unit

