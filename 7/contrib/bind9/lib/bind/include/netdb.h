begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * ++Copyright++ 1980, 1983, 1988, 1993  * -  * Copyright (c) 1980, 1983, 1988, 1993  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the University of  *	California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * -  * Portions Copyright (c) 1993 by Digital Equipment Corporation.  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies, and that  * the name of Digital Equipment Corporation not be used in advertising or  * publicity pertaining to distribution of the document or software without  * specific, written prior permission.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND DIGITAL EQUIPMENT CORP. DISCLAIMS ALL  * WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS.   IN NO EVENT SHALL DIGITAL EQUIPMENT  * CORPORATION BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL  * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR  * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS  * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS  * SOFTWARE.  * -  * Portions Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    This product includes software developed by WIDE Project and  *    its contributors.  * 4. Neither the name of the project nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * -  * --Copyright--  */
end_comment

begin_comment
comment|/*  *      @(#)netdb.h	8.1 (Berkeley) 6/2/93  *	$Id: netdb.h,v 1.15.18.6 2006/10/02 01:23:09 marka Exp $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NETDB_H_
end_ifndef

begin_define
define|#
directive|define
name|_NETDB_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_if
if|#
directive|if
operator|(
operator|!
name|defined
argument_list|(
name|BSD
argument_list|)
operator|)
operator|||
operator|(
name|BSD
operator|<
literal|199306
operator|)
end_if

begin_include
include|#
directive|include
file|<sys/bitypes.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_HEQUIV
end_ifndef

begin_define
define|#
directive|define
name|_PATH_HEQUIV
value|"/etc/hosts.equiv"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_HOSTS
end_ifndef

begin_define
define|#
directive|define
name|_PATH_HOSTS
value|"/etc/hosts"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_NETWORKS
end_ifndef

begin_define
define|#
directive|define
name|_PATH_NETWORKS
value|"/etc/networks"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_PROTOCOLS
end_ifndef

begin_define
define|#
directive|define
name|_PATH_PROTOCOLS
value|"/etc/protocols"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_SERVICES
end_ifndef

begin_define
define|#
directive|define
name|_PATH_SERVICES
value|"/etc/services"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|__GLIBC__
operator|>
literal|2
operator|||
name|__GLIBC__
operator|==
literal|2
operator|&&
name|__GLIBC_MINOR__
operator|>=
literal|3
operator|)
end_if

begin_define
define|#
directive|define
name|__h_errno
value|__h_errno_location
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|__BEGIN_DECLS
specifier|extern
name|int
modifier|*
name|__h_errno
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|__END_DECLS
if|#
directive|if
name|defined
argument_list|(
name|_REENTRANT
argument_list|)
operator|||
expr|\
operator|(
name|__GLIBC__
operator|>
literal|2
operator|||
name|__GLIBC__
operator|==
literal|2
operator|&&
name|__GLIBC_MINOR__
operator|>=
literal|3
operator|)
define|#
directive|define
name|h_errno
value|(*__h_errno())
else|#
directive|else
specifier|extern
name|int
name|h_errno
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*%  * Structures returned by network data base library.  All addresses are  * supplied in host order, and returned in network order (suitable for  * use in system calls).  */
end_comment

begin_struct
struct|struct
name|hostent
block|{
name|char
modifier|*
name|h_name
decl_stmt|;
comment|/*%< official name of host */
name|char
modifier|*
modifier|*
name|h_aliases
decl_stmt|;
comment|/*%< alias list */
name|int
name|h_addrtype
decl_stmt|;
comment|/*%< host address type */
name|int
name|h_length
decl_stmt|;
comment|/*%< length of address */
name|char
modifier|*
modifier|*
name|h_addr_list
decl_stmt|;
comment|/*%< list of addresses from name server */
define|#
directive|define
name|h_addr
value|h_addr_list[0]
comment|/*%< address, for backward compatiblity */
block|}
struct|;
end_struct

begin_comment
comment|/*%  * Assumption here is that a network number  * fits in an unsigned long -- probably a poor one.  */
end_comment

begin_struct
struct|struct
name|netent
block|{
name|char
modifier|*
name|n_name
decl_stmt|;
comment|/*%< official name of net */
name|char
modifier|*
modifier|*
name|n_aliases
decl_stmt|;
comment|/*%< alias list */
name|int
name|n_addrtype
decl_stmt|;
comment|/*%< net address type */
name|unsigned
name|long
name|n_net
decl_stmt|;
comment|/*%< network # */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|servent
block|{
name|char
modifier|*
name|s_name
decl_stmt|;
comment|/*%< official service name */
name|char
modifier|*
modifier|*
name|s_aliases
decl_stmt|;
comment|/*%< alias list */
name|int
name|s_port
decl_stmt|;
comment|/*%< port # */
name|char
modifier|*
name|s_proto
decl_stmt|;
comment|/*%< protocol to use */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|protoent
block|{
name|char
modifier|*
name|p_name
decl_stmt|;
comment|/*%< official protocol name */
name|char
modifier|*
modifier|*
name|p_aliases
decl_stmt|;
comment|/*%< alias list */
name|int
name|p_proto
decl_stmt|;
comment|/*%< protocol # */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|addrinfo
block|{
name|int
name|ai_flags
decl_stmt|;
comment|/*%< AI_PASSIVE, AI_CANONNAME */
name|int
name|ai_family
decl_stmt|;
comment|/*%< PF_xxx */
name|int
name|ai_socktype
decl_stmt|;
comment|/*%< SOCK_xxx */
name|int
name|ai_protocol
decl_stmt|;
comment|/*%< 0 or IPPROTO_xxx for IPv4 and IPv6 */
if|#
directive|if
name|defined
argument_list|(
name|sun
argument_list|)
operator|&&
name|defined
argument_list|(
name|_SOCKLEN_T
argument_list|)
ifdef|#
directive|ifdef
name|__sparcv9
name|int
name|_ai_pad
decl_stmt|;
endif|#
directive|endif
name|socklen_t
name|ai_addrlen
decl_stmt|;
else|#
directive|else
name|size_t
name|ai_addrlen
decl_stmt|;
comment|/*%< length of ai_addr */
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__linux
name|struct
name|sockaddr
modifier|*
name|ai_addr
decl_stmt|;
comment|/*%< binary address */
name|char
modifier|*
name|ai_canonname
decl_stmt|;
comment|/*%< canonical name for hostname */
else|#
directive|else
name|char
modifier|*
name|ai_canonname
decl_stmt|;
comment|/*%< canonical name for hostname */
name|struct
name|sockaddr
modifier|*
name|ai_addr
decl_stmt|;
comment|/*%< binary address */
endif|#
directive|endif
name|struct
name|addrinfo
modifier|*
name|ai_next
decl_stmt|;
comment|/*%< next structure in linked list */
block|}
struct|;
end_struct

begin_comment
comment|/*%  * Error return codes from gethostbyname() and gethostbyaddr()  * (left in extern int h_errno).  */
end_comment

begin_define
define|#
directive|define
name|NETDB_INTERNAL
value|-1
end_define

begin_comment
comment|/*%< see errno */
end_comment

begin_define
define|#
directive|define
name|NETDB_SUCCESS
value|0
end_define

begin_comment
comment|/*%< no problem */
end_comment

begin_define
define|#
directive|define
name|HOST_NOT_FOUND
value|1
end_define

begin_comment
comment|/*%< Authoritative Answer Host not found */
end_comment

begin_define
define|#
directive|define
name|TRY_AGAIN
value|2
end_define

begin_comment
comment|/*%< Non-Authoritive Host not found, or SERVERFAIL */
end_comment

begin_define
define|#
directive|define
name|NO_RECOVERY
value|3
end_define

begin_comment
comment|/*%< Non recoverable errors, FORMERR, REFUSED, NOTIMP */
end_comment

begin_define
define|#
directive|define
name|NO_DATA
value|4
end_define

begin_comment
comment|/*%< Valid name, no data record of requested type */
end_comment

begin_define
define|#
directive|define
name|NO_ADDRESS
value|NO_DATA
end_define

begin_comment
comment|/*%< no address, look for MX record */
end_comment

begin_comment
comment|/*  * Error return codes from getaddrinfo()  */
end_comment

begin_define
define|#
directive|define
name|EAI_ADDRFAMILY
value|1
end_define

begin_comment
comment|/*%< address family for hostname not supported */
end_comment

begin_define
define|#
directive|define
name|EAI_AGAIN
value|2
end_define

begin_comment
comment|/*%< temporary failure in name resolution */
end_comment

begin_define
define|#
directive|define
name|EAI_BADFLAGS
value|3
end_define

begin_comment
comment|/*%< invalid value for ai_flags */
end_comment

begin_define
define|#
directive|define
name|EAI_FAIL
value|4
end_define

begin_comment
comment|/*%< non-recoverable failure in name resolution */
end_comment

begin_define
define|#
directive|define
name|EAI_FAMILY
value|5
end_define

begin_comment
comment|/*%< ai_family not supported */
end_comment

begin_define
define|#
directive|define
name|EAI_MEMORY
value|6
end_define

begin_comment
comment|/*%< memory allocation failure */
end_comment

begin_define
define|#
directive|define
name|EAI_NODATA
value|7
end_define

begin_comment
comment|/*%< no address associated with hostname */
end_comment

begin_define
define|#
directive|define
name|EAI_NONAME
value|8
end_define

begin_comment
comment|/*%< hostname nor servname provided, or not known */
end_comment

begin_define
define|#
directive|define
name|EAI_SERVICE
value|9
end_define

begin_comment
comment|/*%< servname not supported for ai_socktype */
end_comment

begin_define
define|#
directive|define
name|EAI_SOCKTYPE
value|10
end_define

begin_comment
comment|/*%< ai_socktype not supported */
end_comment

begin_define
define|#
directive|define
name|EAI_SYSTEM
value|11
end_define

begin_comment
comment|/*%< system error returned in errno */
end_comment

begin_define
define|#
directive|define
name|EAI_BADHINTS
value|12
end_define

begin_define
define|#
directive|define
name|EAI_PROTOCOL
value|13
end_define

begin_define
define|#
directive|define
name|EAI_MAX
value|14
end_define

begin_comment
comment|/*%  * Flag values for getaddrinfo()  */
end_comment

begin_define
define|#
directive|define
name|AI_PASSIVE
value|0x00000001
end_define

begin_define
define|#
directive|define
name|AI_CANONNAME
value|0x00000002
end_define

begin_define
define|#
directive|define
name|AI_NUMERICHOST
value|0x00000004
end_define

begin_define
define|#
directive|define
name|AI_MASK
value|0x00000007
end_define

begin_comment
comment|/*%  * Flag values for getipnodebyname()  */
end_comment

begin_define
define|#
directive|define
name|AI_V4MAPPED
value|0x00000008
end_define

begin_define
define|#
directive|define
name|AI_ALL
value|0x00000010
end_define

begin_define
define|#
directive|define
name|AI_ADDRCONFIG
value|0x00000020
end_define

begin_define
define|#
directive|define
name|AI_DEFAULT
value|(AI_V4MAPPED|AI_ADDRCONFIG)
end_define

begin_comment
comment|/*%  * Constants for getnameinfo()  */
end_comment

begin_define
define|#
directive|define
name|NI_MAXHOST
value|1025
end_define

begin_define
define|#
directive|define
name|NI_MAXSERV
value|32
end_define

begin_comment
comment|/*%  * Flag values for getnameinfo()  */
end_comment

begin_define
define|#
directive|define
name|NI_NOFQDN
value|0x00000001
end_define

begin_define
define|#
directive|define
name|NI_NUMERICHOST
value|0x00000002
end_define

begin_define
define|#
directive|define
name|NI_NAMEREQD
value|0x00000004
end_define

begin_define
define|#
directive|define
name|NI_NUMERICSERV
value|0x00000008
end_define

begin_define
define|#
directive|define
name|NI_DGRAM
value|0x00000010
end_define

begin_define
define|#
directive|define
name|NI_WITHSCOPEID
value|0x00000020
end_define

begin_define
define|#
directive|define
name|NI_NUMERICSCOPE
value|0x00000040
end_define

begin_comment
comment|/*%  * Scope delimit character  */
end_comment

begin_define
define|#
directive|define
name|SCOPE_DELIMITER
value|'%'
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_REENTRANT
end_ifdef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__hpux
argument_list|)
operator|||
name|defined
argument_list|(
name|__osf__
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
end_if

begin_define
define|#
directive|define
name|_MAXALIASES
value|35
end_define

begin_define
define|#
directive|define
name|_MAXLINELEN
value|1024
end_define

begin_define
define|#
directive|define
name|_MAXADDRS
value|35
end_define

begin_define
define|#
directive|define
name|_HOSTBUFSIZE
value|(BUFSIZ + 1)
end_define

begin_struct
struct|struct
name|hostent_data
block|{
name|struct
name|in_addr
name|host_addr
decl_stmt|;
name|char
modifier|*
name|h_addr_ptrs
index|[
name|_MAXADDRS
operator|+
literal|1
index|]
decl_stmt|;
name|char
name|hostaddr
index|[
name|_MAXADDRS
index|]
decl_stmt|;
name|char
name|hostbuf
index|[
name|_HOSTBUFSIZE
index|]
decl_stmt|;
name|char
modifier|*
name|host_aliases
index|[
name|_MAXALIASES
index|]
decl_stmt|;
name|char
modifier|*
name|host_addrs
index|[
literal|2
index|]
decl_stmt|;
name|FILE
modifier|*
name|hostf
decl_stmt|;
ifdef|#
directive|ifdef
name|__osf__
name|int
name|svc_gethostflag
decl_stmt|;
name|int
name|svc_gethostbind
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__hpux
name|short
name|_nsw_src
decl_stmt|;
name|short
name|_flags
decl_stmt|;
name|char
modifier|*
name|current
decl_stmt|;
name|int
name|currentlen
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|netent_data
block|{
name|FILE
modifier|*
name|net_fp
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__osf__
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
name|char
name|line
index|[
name|_MAXLINELEN
index|]
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__hpux
name|char
name|line
index|[
name|_MAXLINELEN
operator|+
literal|1
index|]
decl_stmt|;
endif|#
directive|endif
name|char
modifier|*
name|net_aliases
index|[
name|_MAXALIASES
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|__osf__
name|int
name|_net_stayopen
decl_stmt|;
name|int
name|svc_getnetflag
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__hpux
name|short
name|_nsw_src
decl_stmt|;
name|short
name|_flags
decl_stmt|;
name|char
modifier|*
name|current
decl_stmt|;
name|int
name|currentlen
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|_AIX
name|int
name|_net_stayopen
decl_stmt|;
name|char
modifier|*
name|current
decl_stmt|;
name|int
name|currentlen
decl_stmt|;
name|void
modifier|*
name|_net_reserv1
decl_stmt|;
comment|/* reserved for future use */
name|void
modifier|*
name|_net_reserv2
decl_stmt|;
comment|/* reserved for future use */
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|protoent_data
block|{
name|FILE
modifier|*
name|proto_fp
decl_stmt|;
ifdef|#
directive|ifdef
name|_AIX
name|int
name|_proto_stayopen
decl_stmt|;
name|char
name|line
index|[
name|_MAXLINELEN
index|]
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__osf__
name|char
name|line
index|[
literal|1024
index|]
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__hpux
name|char
name|line
index|[
name|_MAXLINELEN
operator|+
literal|1
index|]
decl_stmt|;
endif|#
directive|endif
name|char
modifier|*
name|proto_aliases
index|[
name|_MAXALIASES
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|__osf__
name|int
name|_proto_stayopen
decl_stmt|;
name|int
name|svc_getprotoflag
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__hpux
name|short
name|_nsw_src
decl_stmt|;
name|short
name|_flags
decl_stmt|;
name|char
modifier|*
name|current
decl_stmt|;
name|int
name|currentlen
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|_AIX
name|int
name|currentlen
decl_stmt|;
name|char
modifier|*
name|current
decl_stmt|;
name|void
modifier|*
name|_proto_reserv1
decl_stmt|;
comment|/* reserved for future use */
name|void
modifier|*
name|_proto_reserv2
decl_stmt|;
comment|/* reserved for future use */
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|servent_data
block|{
name|FILE
modifier|*
name|serv_fp
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__osf__
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
name|char
name|line
index|[
name|_MAXLINELEN
index|]
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__hpux
name|char
name|line
index|[
name|_MAXLINELEN
operator|+
literal|1
index|]
decl_stmt|;
endif|#
directive|endif
name|char
modifier|*
name|serv_aliases
index|[
name|_MAXALIASES
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|__osf__
name|int
name|_serv_stayopen
decl_stmt|;
name|int
name|svc_getservflag
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__hpux
name|short
name|_nsw_src
decl_stmt|;
name|short
name|_flags
decl_stmt|;
name|char
modifier|*
name|current
decl_stmt|;
name|int
name|currentlen
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|_AIX
name|int
name|_serv_stayopen
decl_stmt|;
name|char
modifier|*
name|current
decl_stmt|;
name|int
name|currentlen
decl_stmt|;
name|void
modifier|*
name|_serv_reserv1
decl_stmt|;
comment|/* reserved for future use */
name|void
modifier|*
name|_serv_reserv2
decl_stmt|;
comment|/* reserved for future use */
endif|#
directive|endif
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|__BEGIN_DECLS
name|void
name|endhostent
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|endnetent
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|endprotoent
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|endservent
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|freehostent
name|__P
argument_list|(
operator|(
expr|struct
name|hostent
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|gethostbyaddr
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|gethostbyname
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|gethostbyname2
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|gethostent
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|getipnodebyaddr
name|__P
argument_list|(
operator|(
specifier|const
name|void
operator|*
operator|,
name|size_t
operator|,
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|getipnodebyname
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|netent
modifier|*
name|getnetbyaddr
name|__P
argument_list|(
operator|(
name|unsigned
name|long
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|netent
modifier|*
name|getnetbyname
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|netent
modifier|*
name|getnetent
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|protoent
modifier|*
name|getprotobyname
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|protoent
modifier|*
name|getprotobynumber
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|protoent
modifier|*
name|getprotoent
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|servent
modifier|*
name|getservbyname
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|servent
modifier|*
name|getservbyport
name|__P
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|servent
modifier|*
name|getservent
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|herror
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|hstrerror
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|sethostent
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* void		sethostfile __P((const char *)); */
end_comment

begin_decl_stmt
name|void
name|setnetent
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|setprotoent
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|setservent
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getaddrinfo
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
expr|struct
name|addrinfo
operator|*
operator|,
expr|struct
name|addrinfo
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getnameinfo
name|__P
argument_list|(
operator|(
specifier|const
expr|struct
name|sockaddr
operator|*
operator|,
name|size_t
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|freeaddrinfo
name|__P
argument_list|(
operator|(
expr|struct
name|addrinfo
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|gai_strerror
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|getipnodebyname
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|getipnodebyaddr
name|__P
argument_list|(
operator|(
specifier|const
name|void
operator|*
operator|,
name|size_t
operator|,
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|freehostent
name|__P
argument_list|(
operator|(
expr|struct
name|hostent
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GLIBC__
end_ifdef

begin_decl_stmt
name|int
name|getnetgrent
name|__P
argument_list|(
operator|(
comment|/* const */
name|char
operator|*
operator|*
operator|,
comment|/* const */
name|char
operator|*
operator|*
operator|,
comment|/* const */
name|char
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|setnetgrent
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|endnetgrent
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|innetgr
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_REENTRANT
end_ifdef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__hpux
argument_list|)
operator|||
name|defined
argument_list|(
name|__osf__
argument_list|)
operator|||
name|defined
argument_list|(
name|_AIX
argument_list|)
end_if

begin_decl_stmt
name|int
name|gethostbyaddr_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|,
expr|struct
name|hostent
operator|*
operator|,
expr|struct
name|hostent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gethostbyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|hostent
operator|*
operator|,
expr|struct
name|hostent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gethostent_r
name|__P
argument_list|(
operator|(
expr|struct
name|hostent
operator|*
operator|,
expr|struct
name|hostent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_AIX
argument_list|)
end_if

begin_decl_stmt
name|void
name|sethostent_r
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|hostent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|int
name|sethostent_r
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|hostent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__hpux
argument_list|)
end_if

begin_decl_stmt
name|int
name|endhostent_r
name|__P
argument_list|(
operator|(
expr|struct
name|hostent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|void
name|endhostent_r
name|__P
argument_list|(
operator|(
expr|struct
name|hostent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__hpux
argument_list|)
operator|||
name|defined
argument_list|(
name|__osf__
argument_list|)
end_if

begin_decl_stmt
name|int
name|getnetbyaddr_r
name|__P
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
expr|struct
name|netent
operator|*
operator|,
expr|struct
name|netent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|int
name|getnetbyaddr_r
name|__P
argument_list|(
operator|(
name|long
operator|,
name|int
operator|,
expr|struct
name|netent
operator|*
operator|,
expr|struct
name|netent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|int
name|getnetbyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|netent
operator|*
operator|,
expr|struct
name|netent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getnetent_r
name|__P
argument_list|(
operator|(
expr|struct
name|netent
operator|*
operator|,
expr|struct
name|netent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|setnetent_r
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|netent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__hpux
end_ifdef

begin_decl_stmt
name|int
name|endnetent_r
name|__P
argument_list|(
operator|(
expr|struct
name|netent_data
operator|*
name|buffer
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|void
name|endnetent_r
name|__P
argument_list|(
operator|(
expr|struct
name|netent_data
operator|*
name|buffer
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|int
name|getprotobyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|protoent
operator|*
operator|,
expr|struct
name|protoent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getprotobynumber_r
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|protoent
operator|*
operator|,
expr|struct
name|protoent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getprotoent_r
name|__P
argument_list|(
operator|(
expr|struct
name|protoent
operator|*
operator|,
expr|struct
name|protoent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|setprotoent_r
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|protoent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__hpux
end_ifdef

begin_decl_stmt
name|int
name|endprotoent_r
name|__P
argument_list|(
operator|(
expr|struct
name|protoent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|void
name|endprotoent_r
name|__P
argument_list|(
operator|(
expr|struct
name|protoent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|int
name|getservbyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
expr|struct
name|servent
operator|*
operator|,
expr|struct
name|servent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getservbyport_r
name|__P
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|char
operator|*
operator|,
expr|struct
name|servent
operator|*
operator|,
expr|struct
name|servent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getservent_r
name|__P
argument_list|(
operator|(
expr|struct
name|servent
operator|*
operator|,
expr|struct
name|servent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|setservent_r
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|servent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__hpux
end_ifdef

begin_decl_stmt
name|int
name|endservent_r
name|__P
argument_list|(
operator|(
expr|struct
name|servent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|void
name|endservent_r
name|__P
argument_list|(
operator|(
expr|struct
name|servent_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_AIX
end_ifdef

begin_decl_stmt
name|int
name|setnetgrent_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|void
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|endnetgrent_r
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Note: AIX's netdb.h declares innetgr_r() as:   *	int innetgr_r(char *, char *, char *, char *, struct innetgr_data *);  */
end_comment

begin_decl_stmt
name|int
name|innetgr_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* defined(sun) || defined(bsdi) */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|&&
operator|(
name|__FreeBSD_version
operator|+
literal|0
operator|>=
literal|601103
operator|)
end_if

begin_decl_stmt
name|int
name|gethostbyaddr_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|,
expr|struct
name|hostent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|hostent
operator|*
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gethostbyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|hostent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|hostent
operator|*
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gethostent_r
name|__P
argument_list|(
operator|(
expr|struct
name|hostent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|hostent
operator|*
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|gethostbyaddr_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|,
expr|struct
name|hostent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|gethostbyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|hostent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hostent
modifier|*
name|gethostent_r
name|__P
argument_list|(
operator|(
expr|struct
name|hostent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|void
name|sethostent_r
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|endhostent_r
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|&&
operator|(
name|__FreeBSD_version
operator|+
literal|0
operator|>=
literal|601103
operator|)
end_if

begin_decl_stmt
name|int
name|getnetbyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|netent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|netent
operator|*
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getnetbyaddr_r
name|__P
argument_list|(
operator|(
name|unsigned
name|long
name|int
operator|,
name|int
operator|,
expr|struct
name|netent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|netent
operator|*
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getnetent_r
name|__P
argument_list|(
operator|(
expr|struct
name|netent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|netent
operator|*
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|struct
name|netent
modifier|*
name|getnetbyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|netent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|netent
modifier|*
name|getnetbyaddr_r
name|__P
argument_list|(
operator|(
name|long
operator|,
name|int
operator|,
expr|struct
name|netent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|netent
modifier|*
name|getnetent_r
name|__P
argument_list|(
operator|(
expr|struct
name|netent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|void
name|setnetent_r
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|endnetent_r
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|&&
operator|(
name|__FreeBSD_version
operator|+
literal|0
operator|>=
literal|601103
operator|)
end_if

begin_decl_stmt
name|int
name|getprotobyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|protoent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|protoent
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getprotobynumber_r
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|protoent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|protoent
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getprotoent_r
name|__P
argument_list|(
operator|(
expr|struct
name|protoent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|protoent
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|struct
name|protoent
modifier|*
name|getprotobyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|protoent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|protoent
modifier|*
name|getprotobynumber_r
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|protoent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|protoent
modifier|*
name|getprotoent_r
name|__P
argument_list|(
operator|(
expr|struct
name|protoent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|void
name|setprotoent_r
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|endprotoent_r
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|&&
operator|(
name|__FreeBSD_version
operator|+
literal|0
operator|>=
literal|601103
operator|)
end_if

begin_decl_stmt
name|int
name|getservbyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
specifier|const
name|char
operator|*
operator|,
expr|struct
name|servent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|servent
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getservbyport_r
name|__P
argument_list|(
operator|(
name|int
name|port
operator|,
specifier|const
name|char
operator|*
operator|,
expr|struct
name|servent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|servent
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getservent_r
name|__P
argument_list|(
operator|(
expr|struct
name|servent
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|servent
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|struct
name|servent
modifier|*
name|getservbyname_r
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
specifier|const
name|char
operator|*
operator|,
expr|struct
name|servent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|servent
modifier|*
name|getservbyport_r
name|__P
argument_list|(
operator|(
name|int
name|port
operator|,
specifier|const
name|char
operator|*
operator|,
expr|struct
name|servent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|servent
modifier|*
name|getservent_r
name|__P
argument_list|(
operator|(
expr|struct
name|servent
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|void
name|setservent_r
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|endservent_r
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GLIBC__
end_ifdef

begin_decl_stmt
name|int
name|getnetgrent_r
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|__END_DECLS
end_macro

begin_comment
comment|/* This is nec'y to make this include file properly replace the sun version. */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|sun
end_ifdef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNU_LIBRARY__
end_ifdef

begin_include
include|#
directive|include
file|<rpc/netdb.h>
end_include

begin_else
else|#
directive|else
end_else

begin_struct
struct|struct
name|rpcent
block|{
name|char
modifier|*
name|r_name
decl_stmt|;
comment|/*%< name of server for this rpc program */
name|char
modifier|*
modifier|*
name|r_aliases
decl_stmt|;
comment|/*%< alias list */
name|int
name|r_number
decl_stmt|;
comment|/*%< rpc program number */
block|}
struct|;
end_struct

begin_decl_stmt
name|struct
name|rpcent
modifier|*
name|getrpcbyname
argument_list|()
decl_stmt|,
modifier|*
name|getrpcbynumber
argument_list|()
decl_stmt|,
modifier|*
name|getrpcent
argument_list|()
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GNU_LIBRARY__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* sun */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_NETDB_H_ */
end_comment

begin_comment
comment|/*! \file */
end_comment

end_unit

