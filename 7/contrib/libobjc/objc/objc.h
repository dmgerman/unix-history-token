begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Basic data types for Objective C.    Copyright (C) 1993, 1995, 1996, 2004 Free Software Foundation, Inc.  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with files    compiled with GCC to produce an executable, this does not cause    the resulting executable to be covered by the GNU General Public License.    This exception does not however invalidate any other reasons why    the executable file might be covered by the GNU General Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__objc_INCLUDE_GNU
end_ifndef

begin_define
define|#
directive|define
name|__objc_INCLUDE_GNU
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<stddef.h>
comment|/* ** Definition of the boolean type.   */
ifdef|#
directive|ifdef
name|__vxworks
typedef|typedef
name|int
name|BOOL
typedef|;
else|#
directive|else
typedef|typedef
name|unsigned
name|char
name|BOOL
typedef|;
endif|#
directive|endif
define|#
directive|define
name|YES
value|(BOOL)1
define|#
directive|define
name|NO
value|(BOOL)0
comment|/* ** Definition of a selector.  Selectors themselves are not unique, but ** the sel_id is a unique identifier. */
typedef|typedef
specifier|const
struct|struct
name|objc_selector
block|{
name|void
modifier|*
name|sel_id
decl_stmt|;
specifier|const
name|char
modifier|*
name|sel_types
decl_stmt|;
block|}
typedef|*
name|SEL
typedef|;
specifier|inline
specifier|static
name|BOOL
name|sel_eq
parameter_list|(
name|SEL
name|s1
parameter_list|,
name|SEL
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|0
operator|||
name|s2
operator|==
literal|0
condition|)
return|return
name|s1
operator|==
name|s2
return|;
else|else
return|return
name|s1
operator|->
name|sel_id
operator|==
name|s2
operator|->
name|sel_id
return|;
block|}
comment|/* ** ObjC uses this typedef for untyped instances. */
typedef|typedef
struct|struct
name|objc_object
block|{
name|struct
name|objc_class
modifier|*
name|class_pointer
decl_stmt|;
block|}
typedef|*
name|id
typedef|;
comment|/* ** Definition of method type.  When retrieving the implementation of a ** method, this is type of the pointer returned.  The idea of the ** definition of IMP is to represent a 'pointer to a general function ** taking an id, a SEL, followed by other unspecified arguments'.  You ** must always cast an IMP to a pointer to a function taking the ** appropriate, specific types for that function, before calling it - ** to make sure the appropriate arguments are passed to it.  The code ** generated by the compiler to perform method calls automatically ** does this cast inside method calls. */
typedef|typedef
name|id
function_decl|(
modifier|*
name|IMP
function_decl|)
parameter_list|(
name|id
parameter_list|,
name|SEL
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* ** More simple types... */
define|#
directive|define
name|nil
value|(id)0
comment|/* id of Nil instance */
define|#
directive|define
name|Nil
value|(Class)0
comment|/* id of Nil class */
typedef|typedef
name|char
modifier|*
name|STR
typedef|;
comment|/* String alias */
comment|/* ** The compiler generates one of these structures for each class.   **  ** This structure is the definition for classes.  **  ** This structure is generated by the compiler in the executable and used by ** the run-time during normal messaging operations.  Therefore some members ** change type. The compiler generates "char* const" and places a string in ** the following member variables:  super_class.  */
typedef|typedef
name|struct
name|objc_class
modifier|*
name|MetaClass
typedef|;
typedef|typedef
name|struct
name|objc_class
modifier|*
name|Class
typedef|;
struct|struct
name|objc_class
block|{
name|MetaClass
name|class_pointer
decl_stmt|;
comment|/* Pointer to the class's                                                 meta class. */
name|struct
name|objc_class
modifier|*
name|super_class
decl_stmt|;
comment|/* Pointer to the super                                                  class. NULL for class                                                  Object. */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Name of the class. */
name|long
name|version
decl_stmt|;
comment|/* Unknown. */
name|unsigned
name|long
name|info
decl_stmt|;
comment|/* Bit mask.  See class masks                                                  defined above. */
name|long
name|instance_size
decl_stmt|;
comment|/* Size in bytes of the class.                                                   The sum of the class  						definition and all super  						class definitions. */
name|struct
name|objc_ivar_list
modifier|*
name|ivars
decl_stmt|;
comment|/* Pointer to a structure that                                                 describes the instance                                                  variables in the class                                                 definition.  NULL indicates                                                 no instance variables.  Does                                                 not include super class                                                 variables. */
name|struct
name|objc_method_list
modifier|*
name|methods
decl_stmt|;
comment|/* Linked list of instance                                                 methods defined for the                                                  class. */
name|struct
name|sarray
modifier|*
name|dtable
decl_stmt|;
comment|/* Pointer to instance  					         method dispatch table. */
name|struct
name|objc_class
modifier|*
name|subclass_list
decl_stmt|;
comment|/* Subclasses */
name|struct
name|objc_class
modifier|*
name|sibling_class
decl_stmt|;
name|struct
name|objc_protocol_list
modifier|*
name|protocols
decl_stmt|;
comment|/* Protocols conformed to */
name|void
modifier|*
name|gc_object_type
decl_stmt|;
block|}
struct|;
ifndef|#
directive|ifndef
name|__OBJC__
typedef|typedef
struct|struct
name|objc_protocol
block|{
name|struct
name|objc_class
modifier|*
name|class_pointer
decl_stmt|;
name|char
modifier|*
name|protocol_name
decl_stmt|;
name|struct
name|objc_protocol_list
modifier|*
name|protocol_list
decl_stmt|;
name|struct
name|objc_method_description_list
modifier|*
name|instance_methods
decl_stmt|,
modifier|*
name|class_methods
decl_stmt|;
block|}
name|Protocol
typedef|;
else|#
directive|else
comment|/* __OBJC__ */
block|@
name|class
name|Protocol
decl_stmt|;
endif|#
directive|endif
typedef|typedef
name|void
modifier|*
name|retval_t
typedef|;
comment|/* return value */
typedef|typedef
name|void
function_decl|(
modifier|*
name|apply_t
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* function pointer */
typedef|typedef
union|union
name|arglist
block|{
name|char
modifier|*
name|arg_ptr
decl_stmt|;
name|char
name|arg_regs
index|[
sizeof|sizeof
argument_list|(
name|char
operator|*
argument_list|)
index|]
decl_stmt|;
block|}
typedef|*
name|arglist_t
typedef|;
comment|/* argument frame */
name|IMP
name|objc_msg_lookup
parameter_list|(
name|id
name|receiver
parameter_list|,
name|SEL
name|op
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not __objc_INCLUDE_GNU */
end_comment

end_unit

