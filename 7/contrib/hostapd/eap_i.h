begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * hostapd / EAP Authenticator state machine internal structures (RFC 4137)  * Copyright (c) 2004-2005, Jouni Malinen<j@w1.fi>  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License version 2 as  * published by the Free Software Foundation.  *  * Alternatively, this software may be distributed under the terms of BSD  * license.  *  * See README and COPYING for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EAP_I_H
end_ifndef

begin_define
define|#
directive|define
name|EAP_I_H
end_define

begin_include
include|#
directive|include
file|"eap.h"
end_include

begin_comment
comment|/* RFC 4137 - EAP Standalone Authenticator */
end_comment

begin_comment
comment|/**  * struct eap_method - EAP method interface  * This structure defines the EAP method interface. Each method will need to  * register its own EAP type, EAP name, and set of function pointers for method  * specific operations. This interface is based on section 5.4 of RFC 4137.  */
end_comment

begin_struct
struct|struct
name|eap_method
block|{
name|int
name|vendor
decl_stmt|;
name|EapType
name|method
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|initPickUp
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|u8
modifier|*
function_decl|(
modifier|*
name|buildReq
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|id
parameter_list|,
name|size_t
modifier|*
name|reqDataLen
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|getTimeout
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|Boolean
function_decl|(
modifier|*
name|check
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|u8
modifier|*
name|respData
parameter_list|,
name|size_t
name|respDataLen
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|process
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|u8
modifier|*
name|respData
parameter_list|,
name|size_t
name|respDataLen
parameter_list|)
function_decl|;
name|Boolean
function_decl|(
modifier|*
name|isDone
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|u8
modifier|*
function_decl|(
modifier|*
name|getKey
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/* isSuccess is not specified in draft-ietf-eap-statemachine-05.txt, 	 * but it is useful in implementing Policy.getDecision() */
name|Boolean
function_decl|(
modifier|*
name|isSuccess
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * free - Free EAP method data 	 * @method: Pointer to the method data registered with 	 * eap_server_method_register(). 	 * 	 * This function will be called when the EAP method is being 	 * unregistered. If the EAP method allocated resources during 	 * registration (e.g., allocated struct eap_method), they should be 	 * freed in this function. No other method functions will be called 	 * after this call. If this function is not defined (i.e., function 	 * pointer is %NULL), a default handler is used to release the method 	 * data with free(method). This is suitable for most cases. 	 */
name|void
function_decl|(
modifier|*
name|free
function_decl|)
parameter_list|(
name|struct
name|eap_method
modifier|*
name|method
parameter_list|)
function_decl|;
define|#
directive|define
name|EAP_SERVER_METHOD_INTERFACE_VERSION
value|1
comment|/** 	 * version - Version of the EAP server method interface 	 * 	 * The EAP server method implementation should set this variable to 	 * EAP_SERVER_METHOD_INTERFACE_VERSION. This is used to verify that the 	 * EAP method is using supported API version when using dynamically 	 * loadable EAP methods. 	 */
name|int
name|version
decl_stmt|;
comment|/** 	 * next - Pointer to the next EAP method 	 * 	 * This variable is used internally in the EAP method registration code 	 * to create a linked list of registered EAP methods. 	 */
name|struct
name|eap_method
modifier|*
name|next
decl_stmt|;
comment|/** 	 * get_emsk - Get EAP method specific keying extended material (EMSK) 	 * @sm: Pointer to EAP state machine allocated with eap_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * @len: Pointer to a variable to store EMSK length 	 * Returns: EMSK or %NULL if not available 	 * 	 * This function can be used to get the extended keying material from 	 * the EAP method. The key may already be stored in the method-specific 	 * private data or this function may derive the key. 	 */
name|u8
modifier|*
function_decl|(
modifier|*
name|get_emsk
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct eap_sm - EAP server state machine data  */
end_comment

begin_struct
struct|struct
name|eap_sm
block|{
enum|enum
block|{
name|EAP_DISABLED
block|,
name|EAP_INITIALIZE
block|,
name|EAP_IDLE
block|,
name|EAP_RECEIVED
block|,
name|EAP_INTEGRITY_CHECK
block|,
name|EAP_METHOD_RESPONSE
block|,
name|EAP_METHOD_REQUEST
block|,
name|EAP_PROPOSE_METHOD
block|,
name|EAP_SELECT_ACTION
block|,
name|EAP_SEND_REQUEST
block|,
name|EAP_DISCARD
block|,
name|EAP_NAK
block|,
name|EAP_RETRANSMIT
block|,
name|EAP_SUCCESS
block|,
name|EAP_FAILURE
block|,
name|EAP_TIMEOUT_FAILURE
block|,
name|EAP_PICK_UP_METHOD
block|}
name|EAP_state
enum|;
comment|/* Constants */
name|int
name|MaxRetrans
decl_stmt|;
comment|/* Lower layer to standalone authenticator variables */
comment|/* eapResp: eapol_sm->be_auth.eapResp */
comment|/* portEnabled: eapol_sm->portEnabled */
comment|/* eapRestart: eapol_sm->auth_pae.eapRestart */
name|u8
modifier|*
name|eapRespData
decl_stmt|;
name|size_t
name|eapRespDataLen
decl_stmt|;
name|int
name|retransWhile
decl_stmt|;
name|int
name|eapSRTT
decl_stmt|;
name|int
name|eapRTTVAR
decl_stmt|;
comment|/* Standalone authenticator to lower layer variables */
comment|/* eapReq: eapol_sm->be_auth.eapReq */
comment|/* eapNoReq: eapol_sm->be_auth.eapNoReq */
comment|/* eapSuccess: eapol_sm->eapSuccess */
comment|/* eapFail: eapol_sm->eapFail */
comment|/* eapTimeout: eapol_sm->eapTimeout */
name|u8
modifier|*
name|eapReqData
decl_stmt|;
name|size_t
name|eapReqDataLen
decl_stmt|;
name|u8
modifier|*
name|eapKeyData
decl_stmt|;
comment|/* also eapKeyAvailable (boolean) */
name|size_t
name|eapKeyDataLen
decl_stmt|;
comment|/* Standalone authenticator state machine local variables */
comment|/* Long-term (maintained betwen packets) */
name|EapType
name|currentMethod
decl_stmt|;
name|int
name|currentId
decl_stmt|;
enum|enum
block|{
name|METHOD_PROPOSED
block|,
name|METHOD_CONTINUE
block|,
name|METHOD_END
block|}
name|methodState
enum|;
name|int
name|retransCount
decl_stmt|;
name|u8
modifier|*
name|lastReqData
decl_stmt|;
name|size_t
name|lastReqDataLen
decl_stmt|;
name|int
name|methodTimeout
decl_stmt|;
comment|/* Short-term (not maintained between packets) */
name|Boolean
name|rxResp
decl_stmt|;
name|int
name|respId
decl_stmt|;
name|EapType
name|respMethod
decl_stmt|;
name|int
name|respVendor
decl_stmt|;
name|u32
name|respVendorMethod
decl_stmt|;
name|Boolean
name|ignore
decl_stmt|;
enum|enum
block|{
name|DECISION_SUCCESS
block|,
name|DECISION_FAILURE
block|,
name|DECISION_CONTINUE
block|}
name|decision
enum|;
comment|/* Miscellaneous variables */
specifier|const
name|struct
name|eap_method
modifier|*
name|m
decl_stmt|;
comment|/* selected EAP method */
comment|/* not defined in draft-ietf-eap-statemachine-02 */
name|Boolean
name|changed
decl_stmt|;
name|void
modifier|*
name|eapol_ctx
decl_stmt|,
modifier|*
name|msg_ctx
decl_stmt|;
name|struct
name|eapol_callbacks
modifier|*
name|eapol_cb
decl_stmt|;
name|void
modifier|*
name|eap_method_priv
decl_stmt|;
name|u8
modifier|*
name|identity
decl_stmt|;
name|size_t
name|identity_len
decl_stmt|;
name|int
name|lastId
decl_stmt|;
comment|/* Identifier used in the last EAP-Packet */
name|struct
name|eap_user
modifier|*
name|user
decl_stmt|;
name|int
name|user_eap_method_index
decl_stmt|;
name|int
name|init_phase2
decl_stmt|;
name|void
modifier|*
name|ssl_ctx
decl_stmt|;
enum|enum
block|{
name|TLV_REQ_NONE
block|,
name|TLV_REQ_SUCCESS
block|,
name|TLV_REQ_FAILURE
block|}
name|tlv_request
enum|;
name|void
modifier|*
name|eap_sim_db_priv
decl_stmt|;
name|Boolean
name|backend_auth
decl_stmt|;
name|Boolean
name|update_user
decl_stmt|;
name|int
name|num_rounds
decl_stmt|;
enum|enum
block|{
name|METHOD_PENDING_NONE
block|,
name|METHOD_PENDING_WAIT
block|,
name|METHOD_PENDING_CONT
block|}
name|method_pending
enum|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|eap_user_get
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
specifier|const
name|u8
modifier|*
name|identity
parameter_list|,
name|size_t
name|identity_len
parameter_list|,
name|int
name|phase2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_sm_process_nak
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|u8
modifier|*
name|nak_list
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u8
modifier|*
name|eap_hdr_validate
parameter_list|(
name|int
name|vendor
parameter_list|,
name|EapType
name|eap_type
parameter_list|,
specifier|const
name|u8
modifier|*
name|msg
parameter_list|,
name|size_t
name|msglen
parameter_list|,
name|size_t
modifier|*
name|plen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|eap_hdr
modifier|*
name|eap_msg_alloc
parameter_list|(
name|int
name|vendor
parameter_list|,
name|EapType
name|type
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|,
name|size_t
name|payload_len
parameter_list|,
name|u8
name|code
parameter_list|,
name|u8
name|identifier
parameter_list|,
name|u8
modifier|*
modifier|*
name|payload
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EAP_I_H */
end_comment

end_unit

