begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*  * hostapd / EAP Standalone Authenticator state machine (RFC 4137)  * Copyright (c) 2004-2005, Jouni Malinen<j@w1.fi>  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License version 2 as  * published by the Free Software Foundation.  *  * Alternatively, this software may be distributed under the terms of BSD  * license.  *  * See README and COPYING for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EAP_H
end_ifndef

begin_define
define|#
directive|define
name|EAP_H
end_define

begin_include
include|#
directive|include
file|"defs.h"
end_include

begin_include
include|#
directive|include
file|"eap_defs.h"
end_include

begin_include
include|#
directive|include
file|"eap_methods.h"
end_include

begin_struct_decl
struct_decl|struct
name|eap_sm
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|EAP_MAX_METHODS
value|8
end_define

begin_struct
struct|struct
name|eap_user
block|{
struct|struct
block|{
name|int
name|vendor
decl_stmt|;
name|u32
name|method
decl_stmt|;
block|}
name|methods
index|[
name|EAP_MAX_METHODS
index|]
struct|;
name|u8
modifier|*
name|password
decl_stmt|;
name|size_t
name|password_len
decl_stmt|;
name|int
name|password_hash
decl_stmt|;
comment|/* whether password is hashed with 			    * nt_password_hash() */
name|int
name|phase2
decl_stmt|;
name|int
name|force_version
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|eapol_bool_var
block|{
name|EAPOL_eapSuccess
block|,
name|EAPOL_eapRestart
block|,
name|EAPOL_eapFail
block|,
name|EAPOL_eapResp
block|,
name|EAPOL_eapReq
block|,
name|EAPOL_eapNoReq
block|,
name|EAPOL_portEnabled
block|,
name|EAPOL_eapTimeout
block|}
enum|;
end_enum

begin_struct
struct|struct
name|eapol_callbacks
block|{
name|Boolean
function_decl|(
modifier|*
name|get_bool
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|enum
name|eapol_bool_var
name|variable
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_bool
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|enum
name|eapol_bool_var
name|variable
parameter_list|,
name|Boolean
name|value
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_eapReqData
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|eapReqData
parameter_list|,
name|size_t
name|eapReqDataLen
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_eapKeyData
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|eapKeyData
parameter_list|,
name|size_t
name|eapKeyDataLen
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_eap_user
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|identity
parameter_list|,
name|size_t
name|identity_len
parameter_list|,
name|int
name|phase2
parameter_list|,
name|struct
name|eap_user
modifier|*
name|user
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|get_eap_req_id_text
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|eap_config
block|{
name|void
modifier|*
name|ssl_ctx
decl_stmt|;
name|void
modifier|*
name|eap_sim_db_priv
decl_stmt|;
name|Boolean
name|backend_auth
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|EAP_SERVER
end_ifdef

begin_function_decl
name|struct
name|eap_sm
modifier|*
name|eap_sm_init
parameter_list|(
name|void
modifier|*
name|eapol_ctx
parameter_list|,
name|struct
name|eapol_callbacks
modifier|*
name|eapol_cb
parameter_list|,
name|struct
name|eap_config
modifier|*
name|eap_conf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_sm_deinit
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_sm_step
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_set_eapRespData
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
specifier|const
name|u8
modifier|*
name|eapRespData
parameter_list|,
name|size_t
name|eapRespDataLen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_sm_notify_cached
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_sm_pending_cb
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_sm_method_pending
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* EAP_SERVER */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|eap_sm
modifier|*
name|eap_sm_init
parameter_list|(
name|void
modifier|*
name|eapol_ctx
parameter_list|,
name|struct
name|eapol_callbacks
modifier|*
name|eapol_cb
parameter_list|,
name|struct
name|eap_config
modifier|*
name|eap_conf
parameter_list|)
block|{
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|eap_sm_deinit
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|int
name|eap_sm_step
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|eap_set_eapRespData
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
specifier|const
name|u8
modifier|*
name|eapRespData
parameter_list|,
name|size_t
name|eapRespDataLen
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|eap_sm_notify_cached
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|eap_sm_pending_cb
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|int
name|eap_sm_method_pending
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EAP_SERVER */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EAP_H */
end_comment

end_unit

