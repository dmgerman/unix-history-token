begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Kernel core dump functions below target vector, for GDB on FreeBSD/sparc64.    Copyright 1986, 1987, 1989, 1991, 1992, 1993, 1994, 1995    Free Software Foundation, Inc.  This file is part of GDB.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|SPARC_INTREG_SIZE
value|8
end_define

begin_function
specifier|static
name|void
name|fetch_kcore_registers
parameter_list|(
name|struct
name|pcb
modifier|*
name|pcbp
parameter_list|)
block|{
specifier|static
name|struct
name|frame
name|top
decl_stmt|;
name|CORE_ADDR
name|f_addr
decl_stmt|;
name|int
name|i
decl_stmt|;
comment|/* Get the register values out of the sys pcb and store them where      `read_register' will find them.  */
comment|/*    * XXX many registers aren't available.    * XXX for the non-core case, the registers are stale - they are for    *     the last context switch to the debugger.    * XXX do something with the floating-point registers?    */
name|supply_register
argument_list|(
name|SP_REGNUM
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|pcbp
operator|->
name|pcb_ufp
argument_list|)
expr_stmt|;
name|supply_register
argument_list|(
name|PC_REGNUM
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|pcbp
operator|->
name|pcb_pc
argument_list|)
expr_stmt|;
name|f_addr
operator|=
name|extract_address
argument_list|(
operator|&
name|pcbp
operator|->
name|pcb_ufp
argument_list|,
name|SPARC_INTREG_SIZE
argument_list|)
expr_stmt|;
comment|/* Load the previous frame by hand (XXX) and supply it. */
name|read_memory
argument_list|(
name|f_addr
operator|+
name|SPOFF
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|top
argument_list|,
sizeof|sizeof
argument_list|(
name|top
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
name|supply_register
argument_list|(
name|i
operator|+
name|L0_REGNUM
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|top
operator|.
name|fr_local
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
name|supply_register
argument_list|(
name|i
operator|+
name|I0_REGNUM
argument_list|,
operator|(
name|char
operator|*
operator|)
operator|&
name|top
operator|.
name|fr_in
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|CORE_ADDR
name|fbsd_kern_frame_saved_pc
parameter_list|(
name|struct
name|frame_info
modifier|*
name|fi
parameter_list|)
block|{
name|struct
name|minimal_symbol
modifier|*
name|sym
decl_stmt|;
name|CORE_ADDR
name|frame
decl_stmt|,
name|pc_addr
decl_stmt|,
name|pc
decl_stmt|;
name|char
modifier|*
name|buf
decl_stmt|;
name|buf
operator|=
name|alloca
argument_list|(
name|MAX_REGISTER_RAW_SIZE
argument_list|)
expr_stmt|;
comment|/* XXX: duplicates fi->extra_info->bottom. */
name|frame
operator|=
operator|(
name|fi
operator|->
name|next
operator|!=
name|NULL
operator|)
condition|?
name|fi
operator|->
name|next
operator|->
name|frame
else|:
name|read_sp
argument_list|()
expr_stmt|;
name|pc_addr
operator|=
name|frame
operator|+
name|offsetof
argument_list|(
expr|struct
name|frame
argument_list|,
name|fr_in
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
define|#
directive|define
name|READ_PC
parameter_list|(
name|pc
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|)
value|do { \   read_memory (a, b, SPARC_INTREG_SIZE); \   pc = extract_address (b, SPARC_INTREG_SIZE); \ } while (0)
name|READ_PC
argument_list|(
name|pc
argument_list|,
name|pc_addr
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|sym
operator|=
name|lookup_minimal_symbol_by_pc
argument_list|(
name|pc
argument_list|)
expr_stmt|;
if|if
condition|(
name|sym
operator|!=
name|NULL
condition|)
block|{
if|if
condition|(
name|strncmp
argument_list|(
name|SYMBOL_NAME
argument_list|(
name|sym
argument_list|)
argument_list|,
literal|"tl0_"
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
operator|||
name|strcmp
argument_list|(
name|SYMBOL_NAME
argument_list|(
name|sym
argument_list|)
argument_list|,
literal|"btext"
argument_list|)
operator|==
literal|0
operator|||
name|strcmp
argument_list|(
name|SYMBOL_NAME
argument_list|(
name|sym
argument_list|)
argument_list|,
literal|"mp_startup"
argument_list|)
operator|==
literal|0
operator|||
name|strcmp
argument_list|(
name|SYMBOL_NAME
argument_list|(
name|sym
argument_list|)
argument_list|,
literal|"fork_trampoline"
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|/* 	   * Ugly kluge: user space addresses aren't separated from kernel 	   * ones by range; if encountering a trap from user space, just 	   * return a 0 to stop the trace. 	   * Do the same for entry points of kernel processes to avoid 	   * printing garbage. 	   */
name|pc
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|strncmp
argument_list|(
name|SYMBOL_NAME
argument_list|(
name|sym
argument_list|)
argument_list|,
literal|"tl1_"
argument_list|,
literal|4
argument_list|)
operator|==
literal|0
condition|)
block|{
name|pc_addr
operator|=
name|fi
operator|->
name|frame
operator|+
sizeof|sizeof
argument_list|(
expr|struct
name|frame
argument_list|)
operator|+
name|offsetof
argument_list|(
expr|struct
name|trapframe
argument_list|,
name|tf_tpc
argument_list|)
expr_stmt|;
name|READ_PC
argument_list|(
name|pc
argument_list|,
name|pc_addr
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|pc
operator|)
return|;
block|}
end_function

end_unit

