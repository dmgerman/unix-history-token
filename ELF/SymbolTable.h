begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SymbolTable.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_SYMBOL_TABLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_SYMBOL_TABLE_H
end_define

begin_include
include|#
directive|include
file|"InputFiles.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/MapVector.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf2
block|{
name|class
name|Lazy
decl_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSectionBase
expr_stmt|;
struct_decl|struct
name|Symbol
struct_decl|;
name|class
name|Undefined
decl_stmt|;
comment|// SymbolTable is a bucket of all known symbols, including defined,
comment|// undefined, or lazy symbols (the last one is symbols in archive
comment|// files whose archive members are not yet loaded).
comment|//
comment|// We put all symbols of all files to a SymbolTable, and the
comment|// SymbolTable selects the "best" symbols if there are name
comment|// conflicts. For example, obviously, a defined symbol is better than
comment|// an undefined symbol. Or, if there's a conflict between a lazy and a
comment|// undefined, it'll read an archive member to read a real definition
comment|// to replace the lazy symbol. The logic is implemented in resolve().
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SymbolTable
block|{
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym
name|Elf_Sym
expr_stmt|;
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
name|public
label|:
name|void
name|addFile
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|InputFile
operator|>
name|File
argument_list|)
decl_stmt|;
specifier|const
name|llvm
operator|::
name|MapVector
operator|<
name|StringRef
operator|,
name|Symbol
operator|*
operator|>
operator|&
name|getSymbols
argument_list|()
specifier|const
block|{
return|return
name|Symtab
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|ObjectFile
operator|<
name|ELFT
operator|>>>
operator|&
name|getObjectFiles
argument_list|()
specifier|const
block|{
return|return
name|ObjectFiles
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|SharedFile
operator|<
name|ELFT
operator|>>>
operator|&
name|getSharedFiles
argument_list|()
specifier|const
block|{
return|return
name|SharedFiles
return|;
block|}
name|SymbolBody
modifier|*
name|addUndefined
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
name|SymbolBody
modifier|*
name|addUndefinedOpt
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
name|SymbolBody
modifier|*
name|addAbsolute
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|Elf_Sym
modifier|&
name|ESym
parameter_list|)
function_decl|;
name|SymbolBody
modifier|*
name|addSynthetic
argument_list|(
name|StringRef
name|Name
argument_list|,
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|&
name|Section
argument_list|,
name|uintX_t
name|Value
argument_list|)
decl_stmt|;
name|SymbolBody
modifier|*
name|addIgnored
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
name|SymbolBody
modifier|*
name|addIgnoredStrong
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
name|void
name|scanShlibUndefined
parameter_list|()
function_decl|;
name|SymbolBody
modifier|*
name|find
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
name|void
name|wrap
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
name|ELFFileBase
operator|<
name|ELFT
operator|>
operator|*
name|findFile
argument_list|(
name|SymbolBody
operator|*
name|B
argument_list|)
expr_stmt|;
name|private
label|:
name|Symbol
modifier|*
name|insert
parameter_list|(
name|SymbolBody
modifier|*
name|New
parameter_list|)
function_decl|;
name|void
name|addLazy
parameter_list|(
name|Lazy
modifier|*
name|New
parameter_list|)
function_decl|;
name|void
name|addMemberFile
parameter_list|(
name|Undefined
modifier|*
name|Undef
parameter_list|,
name|Lazy
modifier|*
name|L
parameter_list|)
function_decl|;
name|void
name|resolve
parameter_list|(
name|SymbolBody
modifier|*
name|Body
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|conflictMsg
argument_list|(
name|SymbolBody
operator|*
name|Old
argument_list|,
name|SymbolBody
operator|*
name|New
argument_list|)
expr_stmt|;
comment|// The order the global symbols are in is not defined. We can use an arbitrary
comment|// order, but it has to be reproducible. That is true even when cross linking.
comment|// The default hashing of StringRef produces different results on 32 and 64
comment|// bit systems so we use a MapVector. That is arbitrary, deterministic but
comment|// a bit inefficient.
comment|// FIXME: Experiment with passing in a custom hashing or sorting the symbols
comment|// once symbol resolution is finished.
name|llvm
operator|::
name|MapVector
operator|<
name|StringRef
operator|,
name|Symbol
operator|*
operator|>
name|Symtab
expr_stmt|;
name|llvm
operator|::
name|BumpPtrAllocator
name|Alloc
expr_stmt|;
comment|// Comdat groups define "link once" sections. If two comdat groups have the
comment|// same name, only one of them is linked, and the other is ignored. This set
comment|// is used to uniquify them.
name|llvm
operator|::
name|DenseSet
operator|<
name|StringRef
operator|>
name|ComdatGroups
expr_stmt|;
comment|// The symbol table owns all file objects.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|ArchiveFile
operator|>>
name|ArchiveFiles
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|ObjectFile
operator|<
name|ELFT
operator|>>>
name|ObjectFiles
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|SharedFile
operator|<
name|ELFT
operator|>>>
name|SharedFiles
expr_stmt|;
comment|// Set of .so files to not link the same shared object file more than once.
name|llvm
operator|::
name|DenseSet
operator|<
name|StringRef
operator|>
name|SoNames
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace elf2
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

