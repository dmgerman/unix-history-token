begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Config.h -------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_CONFIG_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_CONFIG_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/MapVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|class
name|InputFile
decl_stmt|;
struct_decl|struct
name|Symbol
struct_decl|;
enum|enum
name|ELFKind
block|{
name|ELFNoneKind
block|,
name|ELF32LEKind
block|,
name|ELF32BEKind
block|,
name|ELF64LEKind
block|,
name|ELF64BEKind
block|}
enum|;
name|enum
name|class
name|BuildIdKind
block|{
name|None
operator|,
name|Fnv1
operator|,
name|Md5
operator|,
name|Sha1
operator|,
name|Hexstring
block|}
empty_stmt|;
name|enum
name|class
name|UnresolvedPolicy
block|{
name|NoUndef
operator|,
name|Error
operator|,
name|Warn
operator|,
name|Ignore
block|}
empty_stmt|;
struct|struct
name|SymbolVersion
block|{
name|llvm
operator|::
name|StringRef
name|Name
expr_stmt|;
name|bool
name|IsExternCpp
decl_stmt|;
block|}
struct|;
comment|// This struct contains symbols version definition that
comment|// can be found in version script if it is used for link.
struct|struct
name|VersionDefinition
block|{
name|VersionDefinition
argument_list|(
argument|llvm::StringRef Name
argument_list|,
argument|size_t Id
argument_list|)
block|:
name|Name
argument_list|(
name|Name
argument_list|)
operator|,
name|Id
argument_list|(
argument|Id
argument_list|)
block|{}
name|llvm
operator|::
name|StringRef
name|Name
expr_stmt|;
name|size_t
name|Id
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|SymbolVersion
operator|>
name|Globals
expr_stmt|;
name|size_t
name|NameOff
decl_stmt|;
comment|// Offset in string table.
block|}
struct|;
comment|// This struct contains the global configuration for the linker.
comment|// Most fields are direct mapping from the command line options
comment|// and such fields have the same name as the corresponding options.
comment|// Most fields are initialized by the driver.
struct|struct
name|Configuration
block|{
name|Symbol
modifier|*
name|EntrySym
init|=
name|nullptr
decl_stmt|;
name|InputFile
modifier|*
name|FirstElf
init|=
name|nullptr
decl_stmt|;
name|llvm
operator|::
name|StringRef
name|DynamicLinker
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Entry
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Emulation
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Fini
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Init
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|LtoAAPipeline
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|LtoNewPmPasses
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|OutputFile
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|SoName
expr_stmt|;
name|llvm
operator|::
name|StringRef
name|Sysroot
expr_stmt|;
name|std
operator|::
name|string
name|RPath
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|VersionDefinition
operator|>
name|VersionDefinitions
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|llvm
operator|::
name|StringRef
operator|>
name|DynamicList
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|llvm
operator|::
name|StringRef
operator|>
name|SearchPaths
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|llvm
operator|::
name|StringRef
operator|>
name|Undefined
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|SymbolVersion
operator|>
name|VersionScriptGlobals
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|BuildIdVector
expr_stmt|;
name|bool
name|AllowMultipleDefinition
decl_stmt|;
name|bool
name|AsNeeded
init|=
name|false
decl_stmt|;
name|bool
name|Bsymbolic
decl_stmt|;
name|bool
name|BsymbolicFunctions
decl_stmt|;
name|bool
name|Demangle
init|=
name|true
decl_stmt|;
name|bool
name|DisableVerify
decl_stmt|;
name|bool
name|DiscardAll
decl_stmt|;
name|bool
name|DiscardLocals
decl_stmt|;
name|bool
name|DiscardNone
decl_stmt|;
name|bool
name|EhFrameHdr
decl_stmt|;
name|bool
name|EnableNewDtags
decl_stmt|;
name|bool
name|ExportDynamic
decl_stmt|;
name|bool
name|FatalWarnings
decl_stmt|;
name|bool
name|GcSections
decl_stmt|;
name|bool
name|GnuHash
init|=
name|false
decl_stmt|;
name|bool
name|ICF
decl_stmt|;
name|bool
name|Mips64EL
init|=
name|false
decl_stmt|;
name|bool
name|NoGnuUnique
decl_stmt|;
name|bool
name|NoUndefinedVersion
decl_stmt|;
name|bool
name|Pic
decl_stmt|;
name|bool
name|Pie
decl_stmt|;
name|bool
name|PrintGcSections
decl_stmt|;
name|bool
name|Rela
decl_stmt|;
name|bool
name|Relocatable
decl_stmt|;
name|bool
name|SaveTemps
decl_stmt|;
name|bool
name|Shared
decl_stmt|;
name|bool
name|Static
init|=
name|false
decl_stmt|;
name|bool
name|StripAll
decl_stmt|;
name|bool
name|StripDebug
decl_stmt|;
name|bool
name|SysvHash
init|=
name|true
decl_stmt|;
name|bool
name|Threads
decl_stmt|;
name|bool
name|Trace
decl_stmt|;
name|bool
name|Verbose
decl_stmt|;
name|bool
name|WarnCommon
decl_stmt|;
name|bool
name|ZCombreloc
decl_stmt|;
name|bool
name|ZExecStack
decl_stmt|;
name|bool
name|ZNodelete
decl_stmt|;
name|bool
name|ZNow
decl_stmt|;
name|bool
name|ZOrigin
decl_stmt|;
name|bool
name|ZRelro
decl_stmt|;
name|UnresolvedPolicy
name|UnresolvedSymbols
decl_stmt|;
name|BuildIdKind
name|BuildId
init|=
name|BuildIdKind
operator|::
name|None
decl_stmt|;
name|ELFKind
name|EKind
init|=
name|ELFNoneKind
decl_stmt|;
name|uint16_t
name|DefaultSymbolVersion
init|=
name|llvm
operator|::
name|ELF
operator|::
name|VER_NDX_GLOBAL
decl_stmt|;
name|uint16_t
name|EMachine
init|=
name|llvm
operator|::
name|ELF
operator|::
name|EM_NONE
decl_stmt|;
name|uint64_t
name|EntryAddr
init|=
operator|-
literal|1
decl_stmt|;
name|uint64_t
name|ImageBase
decl_stmt|;
name|unsigned
name|LtoJobs
decl_stmt|;
name|unsigned
name|LtoO
decl_stmt|;
name|unsigned
name|Optimize
decl_stmt|;
block|}
struct|;
comment|// The only instance of Configuration struct.
specifier|extern
name|Configuration
modifier|*
name|Config
decl_stmt|;
block|}
comment|// namespace elf
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

