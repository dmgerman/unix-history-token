begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- OutputSections.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_OUTPUT_SECTIONS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_OUTPUT_SECTIONS_H
end_define

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/MapVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/StringTableBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_include
include|#
directive|include
file|"Config.h"
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf2
block|{
name|class
name|SymbolBody
decl_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SymbolTable
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SymbolTableSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|StringTableSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|EHInputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InputSectionBase
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MergeInputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsReginfoInputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ObjectFile
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|DefinedRegular
expr_stmt|;
comment|// Flag to force GOT to be in output if we have relocations
comment|// that relies on its address.
specifier|extern
name|bool
name|HasGotOffRel
decl_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
specifier|static
specifier|inline
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|getAddend
argument_list|(
argument|const typename llvm::object::ELFFile<ELFT>::Elf_Rel&Rel
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
specifier|static
specifier|inline
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|getAddend
argument_list|(
argument|const typename llvm::object::ELFFile<ELFT>::Elf_Rela&Rel
argument_list|)
block|{
return|return
name|Rel
operator|.
name|r_addend
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|getSymVA
argument_list|(
specifier|const
name|SymbolBody
operator|&
name|S
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|,
name|bool
name|IsRela
operator|>
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|getLocalRelTarget
argument_list|(
argument|const ObjectFile<ELFT>&File
argument_list|,
argument|const llvm::object::Elf_Rel_Impl<ELFT
argument_list|,
argument|IsRela>&Rel
argument_list|,
argument|typename llvm::object::ELFFile<ELFT>::uintX_t Addend
argument_list|)
expr_stmt|;
name|bool
name|canBePreempted
parameter_list|(
specifier|const
name|SymbolBody
modifier|*
name|Body
parameter_list|,
name|bool
name|NeedsGot
parameter_list|)
function_decl|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|shouldKeepInSymtab
argument_list|(
argument|const ObjectFile<ELFT>&File
argument_list|,
argument|StringRef Name
argument_list|,
argument|const typename llvm::object::ELFFile<ELFT>::Elf_Sym&Sym
argument_list|)
expr_stmt|;
comment|// This represents a section in an output file.
comment|// Different sub classes represent different types of sections. Some contain
comment|// input sections, others are created by the linker.
comment|// The writer creates multiple OutputSections and assign them unique,
comment|// non-overlapping file offsets and VAs.
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSectionBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
name|Elf_Shdr
expr_stmt|;
name|OutputSectionBase
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t sh_type
argument_list|,
argument|uintX_t sh_flags
argument_list|)
empty_stmt|;
name|void
name|setVA
parameter_list|(
name|uintX_t
name|VA
parameter_list|)
block|{
name|Header
operator|.
name|sh_addr
operator|=
name|VA
expr_stmt|;
block|}
name|uintX_t
name|getVA
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|sh_addr
return|;
block|}
name|void
name|setFileOffset
parameter_list|(
name|uintX_t
name|Off
parameter_list|)
block|{
name|Header
operator|.
name|sh_offset
operator|=
name|Off
expr_stmt|;
block|}
name|void
name|writeHeaderTo
parameter_list|(
name|Elf_Shdr
modifier|*
name|SHdr
parameter_list|)
function_decl|;
name|StringRef
name|getName
parameter_list|()
block|{
return|return
name|Name
return|;
block|}
name|virtual
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|C
argument_list|)
block|{}
name|unsigned
name|SectionIndex
decl_stmt|;
comment|// Returns the size of the section in the output file.
name|uintX_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|sh_size
return|;
block|}
name|void
name|setSize
parameter_list|(
name|uintX_t
name|Val
parameter_list|)
block|{
name|Header
operator|.
name|sh_size
operator|=
name|Val
expr_stmt|;
block|}
name|uintX_t
name|getFlags
parameter_list|()
block|{
return|return
name|Header
operator|.
name|sh_flags
return|;
block|}
name|uintX_t
name|getFileOff
parameter_list|()
block|{
return|return
name|Header
operator|.
name|sh_offset
return|;
block|}
name|uintX_t
name|getAlign
parameter_list|()
block|{
comment|// The ELF spec states that a value of 0 means the section has no alignment
comment|// constraits.
return|return
name|std
operator|::
name|max
operator|<
name|uintX_t
operator|>
operator|(
name|Header
operator|.
name|sh_addralign
operator|,
literal|1
operator|)
return|;
block|}
name|uint32_t
name|getType
parameter_list|()
block|{
return|return
name|Header
operator|.
name|sh_type
return|;
block|}
name|void
name|updateAlign
parameter_list|(
name|uintX_t
name|Align
parameter_list|)
block|{
if|if
condition|(
name|Align
operator|>
name|Header
operator|.
name|sh_addralign
condition|)
name|Header
operator|.
name|sh_addralign
operator|=
name|Align
expr_stmt|;
block|}
name|virtual
name|void
name|finalize
parameter_list|()
block|{}
name|virtual
name|void
name|writeTo
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
operator|~
name|OutputSectionBase
argument_list|()
operator|=
expr|default
expr_stmt|;
name|protected
label|:
name|StringRef
name|Name
decl_stmt|;
name|Elf_Shdr
name|Header
decl_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|GotSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|OutputSectionBase
operator|<
name|ELFT
operator|>
name|Base
expr_stmt|;
typedef|typedef
name|typename
name|Base
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
name|public
label|:
name|GotSection
argument_list|()
expr_stmt|;
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
name|void
name|addEntry
parameter_list|(
name|SymbolBody
modifier|*
name|Sym
parameter_list|)
function_decl|;
name|bool
name|addDynTlsEntry
parameter_list|(
name|SymbolBody
modifier|*
name|Sym
parameter_list|)
function_decl|;
name|bool
name|addCurrentModuleTlsIndex
parameter_list|()
function_decl|;
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Entries
operator|.
name|empty
argument_list|()
return|;
block|}
name|uintX_t
name|getEntryAddr
argument_list|(
specifier|const
name|SymbolBody
operator|&
name|B
argument_list|)
decl|const
decl_stmt|;
name|uintX_t
name|getGlobalDynAddr
argument_list|(
specifier|const
name|SymbolBody
operator|&
name|B
argument_list|)
decl|const
decl_stmt|;
name|uintX_t
name|getNumEntries
argument_list|()
specifier|const
block|{
return|return
name|Entries
operator|.
name|size
argument_list|()
return|;
block|}
comment|// Returns the symbol which corresponds to the first entry of the global part
comment|// of GOT on MIPS platform. It is required to fill up MIPS-specific dynamic
comment|// table properties.
comment|// Returns nullptr if the global part is empty.
specifier|const
name|SymbolBody
operator|*
name|getMipsFirstGlobalEntry
argument_list|()
specifier|const
expr_stmt|;
comment|// Returns the number of entries in the local part of GOT including
comment|// the number of reserved entries. This method is MIPS-specific.
name|unsigned
name|getMipsLocalEntriesNum
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|getLocalTlsIndexVA
parameter_list|()
block|{
return|return
name|Base
operator|::
name|getVA
argument_list|()
operator|+
name|LocalTlsIndexOff
return|;
block|}
name|private
label|:
name|std
operator|::
name|vector
operator|<
specifier|const
name|SymbolBody
operator|*
operator|>
name|Entries
expr_stmt|;
name|uint32_t
name|LocalTlsIndexOff
init|=
operator|-
literal|1
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|GotPltSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
name|public
operator|:
name|GotPltSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|addEntry
parameter_list|(
name|SymbolBody
modifier|*
name|Sym
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uintX_t
name|getEntryAddr
argument_list|(
specifier|const
name|SymbolBody
operator|&
name|B
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
specifier|const
name|SymbolBody
operator|*
operator|>
name|Entries
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|PltSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|OutputSectionBase
operator|<
name|ELFT
operator|>
name|Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Base
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|PltSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|addEntry
parameter_list|(
name|SymbolBody
modifier|*
name|Sym
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Entries
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|uintX_t
name|getEntryAddr
argument_list|(
specifier|const
name|SymbolBody
operator|&
name|B
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|SymbolBody
operator|*
operator|,
name|unsigned
operator|>>
name|Entries
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
expr|struct
name|DynamicReloc
block|{
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rel
name|Elf_Rel
expr_stmt|;
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|C
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Rel
modifier|*
name|RI
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SymbolTableSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
name|Elf_Shdr
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym
name|Elf_Sym
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym_Range
name|Elf_Sym_Range
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
end_typedef

begin_expr_stmt
name|SymbolTableSection
argument_list|(
name|SymbolTable
operator|<
name|ELFT
operator|>
operator|&
name|Table
argument_list|,
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|&
name|StrTabSec
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|addLocalSymbol
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|addSymbol
parameter_list|(
name|SymbolBody
modifier|*
name|Body
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|&
name|getStrTabSec
argument_list|()
specifier|const
block|{
return|return
name|StrTabSec
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getNumSymbols
argument_list|()
specifier|const
block|{
return|return
name|NumVisible
operator|+
literal|1
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ArrayRef
operator|<
name|SymbolBody
operator|*
operator|>
name|getSymbols
argument_list|()
specifier|const
block|{
return|return
name|Symbols
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_function_decl
name|void
name|writeLocalSymbols
parameter_list|(
name|uint8_t
modifier|*
modifier|&
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|writeGlobalSymbols
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|uint8_t
name|getSymbolBinding
parameter_list|(
name|SymbolBody
modifier|*
name|Body
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|SymbolTable
operator|<
name|ELFT
operator|>
operator|&
name|Table
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|&
name|StrTabSec
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|SymbolBody
operator|*
operator|>
name|Symbols
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|NumVisible
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|NumLocals
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|RelocationSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rel
name|Elf_Rel
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rela
name|Elf_Rela
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_macro
name|RelocationSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|bool IsRela
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|void
name|addReloc
argument_list|(
specifier|const
name|DynamicReloc
operator|<
name|ELFT
operator|>
operator|&
name|Reloc
argument_list|)
block|{
name|Relocs
operator|.
name|push_back
argument_list|(
name|Reloc
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function_decl
name|unsigned
name|getRelocOffset
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|bool
name|hasRelocs
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Relocs
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isRela
argument_list|()
specifier|const
block|{
return|return
name|IsRela
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|bool
name|Static
init|=
name|false
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_function_decl
name|bool
name|applyTlsDynamicReloc
parameter_list|(
name|SymbolBody
modifier|*
name|Body
parameter_list|,
name|uint32_t
name|Type
parameter_list|,
name|Elf_Rel
modifier|*
name|P
parameter_list|,
name|Elf_Rel
modifier|*
name|N
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|DynamicReloc
operator|<
name|ELFT
operator|>>
name|Relocs
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|bool
name|IsRela
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
name|Elf_Shdr
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym
name|Elf_Sym
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rel
name|Elf_Rel
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rela
name|Elf_Rela
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
end_typedef

begin_macro
name|OutputSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t sh_type
argument_list|,
argument|uintX_t sh_flags
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|C
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|InputSection
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|Sections
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MergeOutputSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
name|bool
name|shouldTailMerge
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|MergeOutputSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t sh_type
argument_list|,
argument|uintX_t sh_flags
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|unsigned
name|getOffset
parameter_list|(
name|StringRef
name|Val
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|llvm
operator|::
name|StringTableBuilder
name|Builder
block|{
name|llvm
operator|::
name|StringTableBuilder
operator|::
name|RAW
block|}
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// FDE or CIE
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
expr|struct
name|EHRegion
block|{
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
name|EHRegion
argument_list|(
argument|EHInputSection<ELFT> *S
argument_list|,
argument|unsigned Index
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|StringRef
name|data
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|EHInputSection
operator|<
name|ELFT
operator|>
operator|*
name|S
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|Index
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
expr|struct
name|Cie
operator|:
name|public
name|EHRegion
operator|<
name|ELFT
operator|>
block|{
name|Cie
argument_list|(
argument|EHInputSection<ELFT> *S
argument_list|,
argument|unsigned Index
argument_list|)
block|;
name|std
operator|::
name|vector
operator|<
name|EHRegion
operator|<
name|ELFT
operator|>>
name|Fdes
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|EHOutputSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rel
name|Elf_Rel
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rela
name|Elf_Rela
expr_stmt|;
end_typedef

begin_macro
name|EHOutputSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t sh_type
argument_list|,
argument|uintX_t sh_flags
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|bool
name|IsRela
operator|>
name|void
name|addSectionAux
argument_list|(
name|EHInputSection
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|,
name|llvm
operator|::
name|iterator_range
operator|<
specifier|const
name|llvm
operator|::
name|object
operator|::
name|Elf_Rel_Impl
operator|<
name|ELFT
argument_list|,
name|IsRela
operator|>
operator|*
operator|>
name|Rels
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|uintX_t
name|readEntryLength
argument_list|(
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|D
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|EHInputSection
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|Sections
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|Cie
operator|<
name|ELFT
operator|>>
name|Cies
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Maps CIE content + personality to a index in Cies.
end_comment

begin_expr_stmt
name|llvm
operator|::
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|StringRef
operator|,
name|StringRef
operator|>
operator|,
name|unsigned
operator|>
name|CieMap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InterpSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|InterpSection
argument_list|()
block|;
name|void
name|writeTo
argument_list|(
argument|uint8_t *Buf
argument_list|)
name|override
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|StringTableSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
name|StringTableSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|bool Dynamic
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
name|void
name|add
parameter_list|(
name|StringRef
name|S
parameter_list|)
block|{
name|StrTabBuilder
operator|.
name|add
argument_list|(
name|S
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|size_t
name|getOffset
argument_list|(
name|StringRef
name|S
argument_list|)
decl|const
block|{
return|return
name|StrTabBuilder
operator|.
name|getOffset
argument_list|(
name|S
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|StringRef
name|data
argument_list|()
specifier|const
block|{
return|return
name|StrTabBuilder
operator|.
name|data
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|finalize
parameter_list|()
function|override
block|{
name|StrTabBuilder
operator|.
name|finalize
argument_list|()
expr_stmt|;
name|this
operator|->
name|Header
operator|.
name|sh_size
operator|=
name|StrTabBuilder
operator|.
name|data
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|bool
name|isDynamic
argument_list|()
specifier|const
block|{
return|return
name|Dynamic
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|bool
name|Dynamic
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|llvm
operator|::
name|StringTableBuilder
name|StrTabBuilder
block|{
name|llvm
operator|::
name|StringTableBuilder
operator|::
name|ELF
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|HashTableSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Word
name|Elf_Word
expr_stmt|;
name|public
operator|:
name|HashTableSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// Outputs GNU Hash section. For detailed explanation see:
end_comment

begin_comment
comment|// https://blogs.oracle.com/ali/entry/gnu_hash_elf_sections
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|GnuHashTableSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Off
name|Elf_Off
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Word
name|Elf_Word
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|GnuHashTableSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Adds symbols to the hash table.
end_comment

begin_comment
comment|// Sorts the input to satisfy GNU hash section requirements.
end_comment

begin_decl_stmt
name|void
name|addSymbols
argument_list|(
name|std
operator|::
name|vector
operator|<
name|SymbolBody
operator|*
operator|>
operator|&
name|Symbols
argument_list|)
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_function_decl
specifier|static
name|unsigned
name|calcNBuckets
parameter_list|(
name|unsigned
name|NumHashed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|unsigned
name|calcMaskWords
parameter_list|(
name|unsigned
name|NumHashed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|writeHeader
parameter_list|(
name|uint8_t
modifier|*
modifier|&
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|writeBloomFilter
parameter_list|(
name|uint8_t
modifier|*
modifier|&
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|writeHashTable
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|HashedSymbolData
block|{
name|SymbolBody
modifier|*
name|Body
decl_stmt|;
name|uint32_t
name|Hash
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|HashedSymbolData
operator|>
name|HashedSymbols
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|MaskWords
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|NBuckets
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|Shift2
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|DynamicSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|OutputSectionBase
operator|<
name|ELFT
operator|>
name|Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Dyn
name|Elf_Dyn
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rel
name|Elf_Rel
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rela
name|Elf_Rela
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Shdr
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Sym
name|Elf_Sym
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|DynamicSection
argument_list|(
name|SymbolTable
operator|<
name|ELFT
operator|>
operator|&
name|SymTab
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|PreInitArraySec
operator|=
name|nullptr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|InitArraySec
operator|=
name|nullptr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|FiniArraySec
operator|=
name|nullptr
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|SymbolTable
operator|<
name|ELFT
operator|>
operator|&
name|SymTab
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|SymbolBody
modifier|*
name|InitSym
init|=
name|nullptr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|SymbolBody
modifier|*
name|FiniSym
init|=
name|nullptr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|DtFlags
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|DtFlags1
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsReginfoOutputSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_RegInfo
operator|<
name|ELFT
operator|>
name|Elf_Mips_RegInfo
expr_stmt|;
name|public
operator|:
name|MipsReginfoOutputSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|uint32_t
name|GeneralMask
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// All output sections that are hadnled by the linker specially are
end_comment

begin_comment
comment|// globally accessible. Writer initializes them, so don't use them
end_comment

begin_comment
comment|// until Writer is initialized.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
expr|struct
name|Out
block|{
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|uintX_t
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Phdr
name|Elf_Phdr
expr_stmt|;
end_typedef

begin_expr_stmt
specifier|static
name|DynamicSection
operator|<
name|ELFT
operator|>
operator|*
name|Dynamic
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|GnuHashTableSection
operator|<
name|ELFT
operator|>
operator|*
name|GnuHashTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|GotPltSection
operator|<
name|ELFT
operator|>
operator|*
name|GotPlt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|GotSection
operator|<
name|ELFT
operator|>
operator|*
name|Got
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|HashTableSection
operator|<
name|ELFT
operator|>
operator|*
name|HashTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|InterpSection
operator|<
name|ELFT
operator|>
operator|*
name|Interp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Bss
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|MipsRldMap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|Opd
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|uint8_t
modifier|*
name|OpdBuf
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|PltSection
operator|<
name|ELFT
operator|>
operator|*
name|Plt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|RelocationSection
operator|<
name|ELFT
operator|>
operator|*
name|RelaDyn
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|RelocationSection
operator|<
name|ELFT
operator|>
operator|*
name|RelaPlt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|DynStrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|ShStrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|StrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|SymbolTableSection
operator|<
name|ELFT
operator|>
operator|*
name|DynSymTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|SymbolTableSection
operator|<
name|ELFT
operator|>
operator|*
name|SymTab
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|Elf_Phdr
modifier|*
name|TlsPhdr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|DynamicSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Dynamic
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|GnuHashTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|GnuHashTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|GotPltSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|GotPlt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|GotSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Got
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|HashTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|HashTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|InterpSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Interp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Bss
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|MipsRldMap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Opd
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint8_t
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|OpdBuf
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|PltSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Plt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|RelocationSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|RelaDyn
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|RelocationSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|RelaPlt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|DynStrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|ShStrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|StrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|SymbolTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|DynSymTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|SymbolTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|SymTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Phdr
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|TlsPhdr
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// namespace elf2
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_ELF_OUTPUT_SECTIONS_H
end_comment

end_unit

