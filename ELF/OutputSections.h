begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- OutputSections.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_OUTPUT_SECTIONS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_OUTPUT_SECTIONS_H
end_define

begin_include
include|#
directive|include
file|"Config.h"
end_include

begin_include
include|#
directive|include
file|"Relocations.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/StringTableBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
struct_decl|struct
name|PhdrEntry
struct_decl|;
name|class
name|SymbolBody
decl_stmt|;
struct_decl|struct
name|EhSectionPiece
struct_decl|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|EhInputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InputSectionBase
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MergeInputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ObjectFile
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SharedFile
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SharedSymbol
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|DefinedRegular
expr_stmt|;
comment|// This represents a section in an output file.
comment|// Different sub classes represent different types of sections. Some contain
comment|// input sections, others are created by the linker.
comment|// The writer creates multiple OutputSections and assign them unique,
comment|// non-overlapping file offsets and VAs.
name|class
name|OutputSectionBase
block|{
name|public
label|:
enum|enum
name|Kind
block|{
name|Base
block|,
name|EHFrame
block|,
name|Merge
block|,
name|Regular
block|,   }
enum|;
name|OutputSectionBase
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t Type
argument_list|,
argument|uint64_t Flags
argument_list|)
empty_stmt|;
name|void
name|setLMAOffset
parameter_list|(
name|uint64_t
name|LMAOff
parameter_list|)
block|{
name|LMAOffset
operator|=
name|LMAOff
expr_stmt|;
block|}
name|uint64_t
name|getLMA
argument_list|()
specifier|const
block|{
return|return
name|Addr
operator|+
name|LMAOffset
return|;
block|}
name|template
operator|<
name|typename
name|ELFT
operator|>
name|void
name|writeHeaderTo
argument_list|(
argument|typename ELFT::Shdr *SHdr
argument_list|)
expr_stmt|;
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|virtual
name|void
name|addSection
parameter_list|(
name|InputSectionData
modifier|*
name|C
parameter_list|)
block|{}
name|virtual
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Base
return|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|OutputSectionBase
modifier|*
name|B
parameter_list|)
block|{
return|return
name|B
operator|->
name|getKind
argument_list|()
operator|==
name|Base
return|;
block|}
name|unsigned
name|SectionIndex
decl_stmt|;
name|uint32_t
name|getPhdrFlags
argument_list|()
specifier|const
expr_stmt|;
name|void
name|updateAlignment
parameter_list|(
name|uint64_t
name|Alignment
parameter_list|)
block|{
if|if
condition|(
name|Alignment
operator|>
name|Addralign
condition|)
name|Addralign
operator|=
name|Alignment
expr_stmt|;
block|}
comment|// If true, this section will be page aligned on disk.
comment|// Typically the first section of each PT_LOAD segment has this flag.
name|bool
name|PageAlign
init|=
name|false
decl_stmt|;
comment|// Pointer to the first section in PT_LOAD segment, which this section
comment|// also resides in. This field is used to correctly compute file offset
comment|// of a section. When two sections share the same load segment, difference
comment|// between their file offsets should be equal to difference between their
comment|// virtual addresses. To compute some section offset we use the following
comment|// formula: Off = Off_first + VA - VA_first.
name|OutputSectionBase
modifier|*
name|FirstInPtLoad
init|=
name|nullptr
decl_stmt|;
name|virtual
name|void
name|finalize
parameter_list|()
block|{}
name|virtual
name|void
name|assignOffsets
parameter_list|()
block|{}
name|virtual
name|void
name|writeTo
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|)
block|{}
name|virtual
operator|~
name|OutputSectionBase
argument_list|()
operator|=
expr|default
expr_stmt|;
name|StringRef
name|Name
decl_stmt|;
comment|// The following fields correspond to Elf_Shdr members.
name|uint64_t
name|Size
init|=
literal|0
decl_stmt|;
name|uint64_t
name|Entsize
init|=
literal|0
decl_stmt|;
name|uint64_t
name|Addralign
init|=
literal|0
decl_stmt|;
name|uint64_t
name|Offset
init|=
literal|0
decl_stmt|;
name|uint64_t
name|Flags
init|=
literal|0
decl_stmt|;
name|uint64_t
name|LMAOffset
init|=
literal|0
decl_stmt|;
name|uint64_t
name|Addr
init|=
literal|0
decl_stmt|;
name|uint32_t
name|ShName
init|=
literal|0
decl_stmt|;
name|uint32_t
name|Type
init|=
literal|0
decl_stmt|;
name|uint32_t
name|Info
init|=
literal|0
decl_stmt|;
name|uint32_t
name|Link
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSection
name|final
operator|:
name|public
name|OutputSectionBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Sym
name|Elf_Sym
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rel
name|Elf_Rel
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rela
name|Elf_Rela
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
name|OutputSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t Type
argument_list|,
argument|uintX_t Flags
argument_list|)
empty_stmt|;
name|void
name|addSection
argument_list|(
name|InputSectionData
operator|*
name|C
argument_list|)
name|override
decl_stmt|;
name|void
name|sort
argument_list|(
name|std
operator|::
name|function
operator|<
name|int
argument_list|(
name|InputSection
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|)
operator|>
name|Order
argument_list|)
decl_stmt|;
name|void
name|sortInitFini
parameter_list|()
function_decl|;
name|void
name|sortCtorsDtors
parameter_list|()
function_decl|;
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
name|void
name|assignOffsets
argument_list|()
name|override
expr_stmt|;
name|Kind
name|getKind
argument_list|()
specifier|const
name|override
block|{
return|return
name|Regular
return|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|OutputSectionBase
modifier|*
name|B
parameter_list|)
block|{
return|return
name|B
operator|->
name|getKind
argument_list|()
operator|==
name|Regular
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|InputSection
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|Sections
expr_stmt|;
comment|// Location in the output buffer.
name|uint8_t
modifier|*
name|Loc
init|=
name|nullptr
decl_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MergeOutputSection
name|final
operator|:
name|public
name|OutputSectionBase
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
name|public
operator|:
name|MergeOutputSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t Type
argument_list|,
argument|uintX_t Flags
argument_list|,
argument|uintX_t Alignment
argument_list|)
expr_stmt|;
name|void
name|addSection
argument_list|(
name|InputSectionData
operator|*
name|S
argument_list|)
name|override
decl_stmt|;
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
name|bool
name|shouldTailMerge
argument_list|()
specifier|const
expr_stmt|;
name|Kind
name|getKind
argument_list|()
specifier|const
name|override
block|{
return|return
name|Merge
return|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|OutputSectionBase
modifier|*
name|B
parameter_list|)
block|{
return|return
name|B
operator|->
name|getKind
argument_list|()
operator|==
name|Merge
return|;
block|}
name|private
label|:
name|void
name|finalizeTailMerge
parameter_list|()
function_decl|;
name|void
name|finalizeNoTailMerge
parameter_list|()
function_decl|;
name|llvm
operator|::
name|StringTableBuilder
name|Builder
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|MergeInputSection
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|Sections
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_struct
struct|struct
name|CieRecord
block|{
name|EhSectionPiece
modifier|*
name|Piece
init|=
name|nullptr
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|EhSectionPiece
operator|*
operator|>
name|FdePieces
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|// Output section for .eh_frame.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|EhOutputSection
name|final
operator|:
name|public
name|OutputSectionBase
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rel
name|Elf_Rel
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rela
name|Elf_Rela
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|EhOutputSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Sections
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionData
operator|*
name|S
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Kind
name|getKind
argument_list|()
specifier|const
name|override
block|{
return|return
name|EHFrame
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|OutputSectionBase
modifier|*
name|B
parameter_list|)
block|{
return|return
name|B
operator|->
name|getKind
argument_list|()
operator|==
name|EHFrame
return|;
block|}
end_function

begin_decl_stmt
name|size_t
name|NumFdes
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|class
name|RelTy
operator|>
name|void
name|addSectionAux
argument_list|(
name|EhInputSection
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|,
name|llvm
operator|::
name|ArrayRef
operator|<
name|RelTy
operator|>
name|Rels
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RelTy
operator|>
name|CieRecord
operator|*
name|addCie
argument_list|(
name|EhSectionPiece
operator|&
name|Piece
argument_list|,
name|ArrayRef
operator|<
name|RelTy
operator|>
name|Rels
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RelTy
operator|>
name|bool
name|isFdeLive
argument_list|(
name|EhSectionPiece
operator|&
name|Piece
argument_list|,
name|ArrayRef
operator|<
name|RelTy
operator|>
name|Rels
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|uintX_t
name|getFdePc
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|,
name|size_t
name|Off
parameter_list|,
name|uint8_t
name|Enc
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|EhInputSection
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|Sections
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|CieRecord
operator|*
operator|>
name|Cies
expr_stmt|;
end_expr_stmt

begin_comment
comment|// CIE records are uniquified by their contents and personality functions.
end_comment

begin_expr_stmt
name|llvm
operator|::
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|,
name|SymbolBody
operator|*
operator|>
operator|,
name|CieRecord
operator|>
name|CieMap
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// All output sections that are hadnled by the linker specially are
end_comment

begin_comment
comment|// globally accessible. Writer initializes them, so don't use them
end_comment

begin_comment
comment|// until Writer is initialized.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
expr|struct
name|Out
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Phdr
name|Elf_Phdr
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|uint8_t
name|First
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|EhOutputSection
operator|<
name|ELFT
operator|>
operator|*
name|EhFrame
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Bss
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|OutputSectionBase
modifier|*
name|Opd
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|uint8_t
modifier|*
name|OpdBuf
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|PhdrEntry
modifier|*
name|TlsPhdr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|OutputSectionBase
modifier|*
name|DebugInfo
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|OutputSectionBase
modifier|*
name|ElfHeader
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|OutputSectionBase
modifier|*
name|ProgramHeaders
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|OutputSectionBase
modifier|*
name|PreinitArray
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|OutputSectionBase
modifier|*
name|InitArray
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|OutputSectionBase
modifier|*
name|FiniArray
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|bool
name|Is64Bits
operator|>
expr|struct
name|SectionKey
block|{
typedef|typedef
name|typename
name|std
operator|::
name|conditional
operator|<
name|Is64Bits
operator|,
name|uint64_t
operator|,
name|uint32_t
operator|>
operator|::
name|type
name|uintX_t
expr_stmt|;
name|StringRef
name|Name
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint32_t
name|Type
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uintX_t
name|Flags
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uintX_t
name|Alignment
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// This class knows how to create an output section for a given
end_comment

begin_comment
comment|// input section. Output section type is determined by various
end_comment

begin_comment
comment|// factors, including input section's sh_flags, sh_type and
end_comment

begin_comment
comment|// linker scripts.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSectionFactory
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|elf
operator|::
name|SectionKey
operator|<
name|ELFT
operator|::
name|Is64Bits
operator|>
name|Key
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|pair
operator|<
name|OutputSectionBase
operator|*
operator|,
name|bool
operator|>
name|create
argument_list|(
argument|InputSectionBase<ELFT> *C
argument_list|,
argument|StringRef OutsecName
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|pair
operator|<
name|OutputSectionBase
operator|*
operator|,
name|bool
operator|>
name|create
argument_list|(
specifier|const
name|SectionKey
operator|<
name|ELFT
operator|::
name|Is64Bits
operator|>
operator|&
name|Key
argument_list|,
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|C
argument_list|)
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|llvm
operator|::
name|SmallDenseMap
operator|<
name|Key
operator|,
name|OutputSectionBase
operator|*
operator|>
name|Map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint64_t
name|getHeaderSize
argument_list|()
block|{
if|if
condition|(
name|Config
operator|->
name|OFormatBinary
condition|)
return|return
literal|0
return|;
end_expr_stmt

begin_return
return|return
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|ElfHeader
operator|->
name|Size
operator|+
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|ProgramHeaders
operator|->
name|Size
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|uint8_t
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|First
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|EhOutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|EhFrame
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Bss
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Opd
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint8_t
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|OpdBuf
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|PhdrEntry
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|TlsPhdr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|DebugInfo
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|ElfHeader
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|ProgramHeaders
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|PreinitArray
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|InitArray
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|FiniArray
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// namespace elf
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|bool
name|Is64Bits
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|lld
operator|::
name|elf
operator|::
name|SectionKey
operator|<
name|Is64Bits
operator|>>
block|{
typedef|typedef
name|typename
name|lld
operator|::
name|elf
operator|::
name|SectionKey
operator|<
name|Is64Bits
operator|>
name|Key
expr_stmt|;
specifier|static
name|Key
name|getEmptyKey
argument_list|()
expr_stmt|;
specifier|static
name|Key
name|getTombstoneKey
parameter_list|()
function_decl|;
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|Key
modifier|&
name|Val
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|Key
modifier|&
name|LHS
parameter_list|,
specifier|const
name|Key
modifier|&
name|RHS
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

