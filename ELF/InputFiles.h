begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- InputFiles.h ---------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_INPUT_FILES_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_INPUT_FILES_H
end_define

begin_include
include|#
directive|include
file|"Config.h"
end_include

begin_include
include|#
directive|include
file|"InputSection.h"
end_include

begin_include
include|#
directive|include
file|"Error.h"
end_include

begin_include
include|#
directive|include
file|"Symbols.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Reproduce.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/CachedHashString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Comdat.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Archive.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/IRObjectFile.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|DWARFDebugLine
decl_stmt|;
name|class
name|TarWriter
decl_stmt|;
struct_decl|struct
name|DILineInfo
struct_decl|;
name|namespace
name|lto
block|{
name|class
name|InputFile
decl_stmt|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|class
name|InputFile
decl_stmt|;
block|}
comment|// Returns "(internal)", "foo.a(bar.o)" or "baz.o".
name|std
operator|::
name|string
name|toString
argument_list|(
specifier|const
name|elf
operator|::
name|InputFile
operator|*
name|F
argument_list|)
expr_stmt|;
name|namespace
name|elf
block|{
name|using
name|llvm
operator|::
name|object
operator|::
name|Archive
expr_stmt|;
name|class
name|Lazy
decl_stmt|;
name|class
name|SymbolBody
decl_stmt|;
comment|// If -reproduce option is given, all input files are written
comment|// to this tar archive.
extern|extern llvm::TarWriter *Tar;
comment|// Opens a given file.
name|llvm
operator|::
name|Optional
operator|<
name|MemoryBufferRef
operator|>
name|readFile
argument_list|(
argument|StringRef Path
argument_list|)
expr_stmt|;
comment|// The root class of input files.
name|class
name|InputFile
block|{
name|public
label|:
enum|enum
name|Kind
block|{
name|ObjectKind
block|,
name|SharedKind
block|,
name|LazyObjectKind
block|,
name|ArchiveKind
block|,
name|BitcodeKind
block|,
name|BinaryKind
block|,   }
enum|;
name|Kind
name|kind
argument_list|()
specifier|const
block|{
return|return
name|FileKind
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|MB
operator|.
name|getBufferIdentifier
argument_list|()
return|;
block|}
name|MemoryBufferRef
name|MB
decl_stmt|;
comment|// Returns sections. It is a runtime error to call this function
comment|// on files that don't have the notion of sections.
name|ArrayRef
operator|<
name|InputSectionBase
operator|*
operator|>
name|getSections
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|FileKind
operator|==
name|ObjectKind
operator|||
name|FileKind
operator|==
name|BinaryKind
argument_list|)
block|;
return|return
name|Sections
return|;
block|}
comment|// Filename of .a which contained this file. If this file was
comment|// not in an archive file, it is the empty string. We use this
comment|// string for creating error messages.
name|StringRef
name|ArchiveName
decl_stmt|;
comment|// If this is an architecture-specific file, the following members
comment|// have ELF type (i.e. ELF{32,64}{LE,BE}) and target machine type.
name|ELFKind
name|EKind
init|=
name|ELFNoneKind
decl_stmt|;
name|uint16_t
name|EMachine
init|=
name|llvm
operator|::
name|ELF
operator|::
name|EM_NONE
decl_stmt|;
name|uint8_t
name|OSABI
init|=
literal|0
decl_stmt|;
comment|// Cache for toString(). Only toString() should use this member.
name|mutable
name|std
operator|::
name|string
name|ToStringCache
expr_stmt|;
name|protected
label|:
name|InputFile
argument_list|(
argument|Kind K
argument_list|,
argument|MemoryBufferRef M
argument_list|)
empty_stmt|;
name|std
operator|::
name|vector
operator|<
name|InputSectionBase
operator|*
operator|>
name|Sections
expr_stmt|;
name|private
label|:
specifier|const
name|Kind
name|FileKind
decl_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|ELFFileBase
operator|:
name|public
name|InputFile
block|{
name|public
operator|:
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Sym
name|Elf_Sym
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Word
name|Elf_Word
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|SymRange
name|Elf_Sym_Range
expr_stmt|;
name|ELFFileBase
argument_list|(
argument|Kind K
argument_list|,
argument|MemoryBufferRef M
argument_list|)
empty_stmt|;
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|InputFile
modifier|*
name|F
parameter_list|)
block|{
name|Kind
name|K
init|=
name|F
operator|->
name|kind
argument_list|()
decl_stmt|;
return|return
name|K
operator|==
name|ObjectKind
operator|||
name|K
operator|==
name|SharedKind
return|;
block|}
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
name|getObj
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|(
name|MB
operator|.
name|getBuffer
argument_list|()
operator|)
return|;
block|}
name|StringRef
name|getStringTable
argument_list|()
specifier|const
block|{
return|return
name|StringTable
return|;
block|}
name|uint32_t
name|getSectionIndex
argument_list|(
specifier|const
name|Elf_Sym
operator|&
name|Sym
argument_list|)
decl|const
decl_stmt|;
name|Elf_Sym_Range
name|getGlobalSymbols
parameter_list|()
function_decl|;
name|protected
label|:
name|ArrayRef
operator|<
name|Elf_Sym
operator|>
name|Symbols
expr_stmt|;
name|uint32_t
name|FirstNonLocal
init|=
literal|0
decl_stmt|;
name|ArrayRef
operator|<
name|Elf_Word
operator|>
name|SymtabSHNDX
expr_stmt|;
name|StringRef
name|StringTable
decl_stmt|;
name|void
name|initSymtab
argument_list|(
name|ArrayRef
operator|<
name|Elf_Shdr
operator|>
name|Sections
argument_list|,
specifier|const
name|Elf_Shdr
operator|*
name|Symtab
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
comment|// .o file.
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ObjectFile
operator|:
name|public
name|ELFFileBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|ELFFileBase
operator|<
name|ELFT
operator|>
name|Base
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rel
name|Elf_Rel
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rela
name|Elf_Rela
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Sym
name|Elf_Sym
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Word
name|Elf_Word
expr_stmt|;
name|StringRef
name|getShtGroupSignature
argument_list|(
name|ArrayRef
operator|<
name|Elf_Shdr
operator|>
name|Sections
argument_list|,
specifier|const
name|Elf_Shdr
operator|&
name|Sec
argument_list|)
decl_stmt|;
name|ArrayRef
operator|<
name|Elf_Word
operator|>
name|getShtGroupEntries
argument_list|(
specifier|const
name|Elf_Shdr
operator|&
name|Sec
argument_list|)
expr_stmt|;
name|public
label|:
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|InputFile
modifier|*
name|F
parameter_list|)
block|{
return|return
name|F
operator|->
name|kind
argument_list|()
operator|==
name|Base
operator|::
name|ObjectKind
return|;
block|}
name|ArrayRef
operator|<
name|SymbolBody
operator|*
operator|>
name|getSymbols
argument_list|()
expr_stmt|;
name|ArrayRef
operator|<
name|SymbolBody
operator|*
operator|>
name|getLocalSymbols
argument_list|()
expr_stmt|;
name|ObjectFile
argument_list|(
argument|MemoryBufferRef M
argument_list|,
argument|StringRef ArchiveName
argument_list|)
empty_stmt|;
name|void
name|parse
argument_list|(
name|llvm
operator|::
name|DenseSet
operator|<
name|llvm
operator|::
name|CachedHashStringRef
operator|>
operator|&
name|ComdatGroups
argument_list|)
decl_stmt|;
name|InputSectionBase
modifier|*
name|getSection
argument_list|(
specifier|const
name|Elf_Sym
operator|&
name|Sym
argument_list|)
decl|const
decl_stmt|;
name|SymbolBody
modifier|&
name|getSymbolBody
argument_list|(
name|uint32_t
name|SymbolIndex
argument_list|)
decl|const
block|{
if|if
condition|(
name|SymbolIndex
operator|>=
name|SymbolBodies
operator|.
name|size
argument_list|()
condition|)
name|fatal
argument_list|(
name|toString
argument_list|(
name|this
argument_list|)
operator|+
literal|": invalid symbol index"
argument_list|)
expr_stmt|;
return|return
operator|*
name|SymbolBodies
index|[
name|SymbolIndex
index|]
return|;
block|}
name|template
operator|<
name|typename
name|RelT
operator|>
name|SymbolBody
operator|&
name|getRelocTargetSym
argument_list|(
argument|const RelT&Rel
argument_list|)
specifier|const
block|{
name|uint32_t
name|SymIndex
operator|=
name|Rel
operator|.
name|getSymbol
argument_list|(
name|Config
operator|->
name|IsMips64EL
argument_list|)
block|;
return|return
name|getSymbolBody
argument_list|(
name|SymIndex
argument_list|)
return|;
block|}
comment|// Returns source line information for a given offset.
comment|// If no information is available, returns "".
name|std
operator|::
name|string
name|getLineInfo
argument_list|(
argument|InputSectionBase *S
argument_list|,
argument|uint64_t Offset
argument_list|)
expr_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|llvm
operator|::
name|DILineInfo
operator|>
name|getDILineInfo
argument_list|(
name|InputSectionBase
operator|*
argument_list|,
name|uint64_t
argument_list|)
expr_stmt|;
comment|// MIPS GP0 value defined by this file. This value represents the gp value
comment|// used to create the relocatable object and required to support
comment|// R_MIPS_GPREL16 / R_MIPS_GPREL32 relocations.
name|uint32_t
name|MipsGp0
init|=
literal|0
decl_stmt|;
comment|// Name of source file obtained from STT_FILE symbol value,
comment|// or empty string if there is no such symbol in object file
comment|// symbol table.
name|StringRef
name|SourceFile
decl_stmt|;
name|private
label|:
name|void
name|initializeSections
argument_list|(
name|llvm
operator|::
name|DenseSet
operator|<
name|llvm
operator|::
name|CachedHashStringRef
operator|>
operator|&
name|ComdatGroups
argument_list|)
decl_stmt|;
name|void
name|initializeSymbols
parameter_list|()
function_decl|;
name|void
name|initializeDwarfLine
parameter_list|()
function_decl|;
name|InputSectionBase
modifier|*
name|getRelocTarget
parameter_list|(
specifier|const
name|Elf_Shdr
modifier|&
name|Sec
parameter_list|)
function_decl|;
name|InputSectionBase
modifier|*
name|createInputSection
parameter_list|(
specifier|const
name|Elf_Shdr
modifier|&
name|Sec
parameter_list|)
function_decl|;
name|StringRef
name|getSectionName
parameter_list|(
specifier|const
name|Elf_Shdr
modifier|&
name|Sec
parameter_list|)
function_decl|;
name|bool
name|shouldMerge
parameter_list|(
specifier|const
name|Elf_Shdr
modifier|&
name|Sec
parameter_list|)
function_decl|;
name|SymbolBody
modifier|*
name|createSymbolBody
parameter_list|(
specifier|const
name|Elf_Sym
modifier|*
name|Sym
parameter_list|)
function_decl|;
comment|// List of all symbols referenced or defined by this file.
name|std
operator|::
name|vector
operator|<
name|SymbolBody
operator|*
operator|>
name|SymbolBodies
expr_stmt|;
comment|// .shstrtab contents.
name|StringRef
name|SectionStringTable
decl_stmt|;
comment|// Debugging information to retrieve source file and line for error
comment|// reporting. Linker may find reasonable number of errors in a
comment|// single object file, so we cache debugging information in order to
comment|// parse it only once for each object file we link.
name|std
operator|::
name|unique_ptr
operator|<
name|llvm
operator|::
name|DWARFDebugLine
operator|>
name|DwarfLine
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// LazyObjectFile is analogous to ArchiveFile in the sense that
end_comment

begin_comment
comment|// the file contains lazy symbols. The difference is that
end_comment

begin_comment
comment|// LazyObjectFile wraps a single file instead of multiple files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class is used for --start-lib and --end-lib options which
end_comment

begin_comment
comment|// instruct the linker to link object files between them with the
end_comment

begin_comment
comment|// archive file semantics.
end_comment

begin_decl_stmt
name|class
name|LazyObjectFile
range|:
name|public
name|InputFile
block|{
name|public
operator|:
name|LazyObjectFile
argument_list|(
argument|MemoryBufferRef M
argument_list|,
argument|StringRef ArchiveName
argument_list|,
argument|uint64_t OffsetInArchive
argument_list|)
operator|:
name|InputFile
argument_list|(
name|LazyObjectKind
argument_list|,
name|M
argument_list|)
block|,
name|OffsetInArchive
argument_list|(
argument|OffsetInArchive
argument_list|)
block|{
name|this
operator|->
name|ArchiveName
operator|=
name|ArchiveName
block|;   }
specifier|static
name|bool
name|classof
argument_list|(
argument|const InputFile *F
argument_list|)
block|{
return|return
name|F
operator|->
name|kind
argument_list|()
operator|==
name|LazyObjectKind
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|parse
argument_list|()
block|;
name|MemoryBufferRef
name|getBuffer
argument_list|()
block|;
name|InputFile
operator|*
name|fetch
argument_list|()
block|;
name|private
operator|:
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|getSymbols
argument_list|()
block|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|getElfSymbols
argument_list|()
block|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|getBitcodeSymbols
argument_list|()
block|;
name|bool
name|Seen
operator|=
name|false
block|;
name|uint64_t
name|OffsetInArchive
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// An ArchiveFile object represents a .a file.
end_comment

begin_decl_stmt
name|class
name|ArchiveFile
range|:
name|public
name|InputFile
block|{
name|public
operator|:
name|explicit
name|ArchiveFile
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|Archive
operator|>
operator|&&
name|File
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const InputFile *F
argument_list|)
block|{
return|return
name|F
operator|->
name|kind
argument_list|()
operator|==
name|ArchiveKind
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|parse
argument_list|()
block|;
comment|// Returns a memory buffer for a given symbol and the offset in the archive
comment|// for the member. An empty memory buffer and an offset of zero
comment|// is returned if we have already returned the same memory buffer.
comment|// (So that we don't instantiate same members more than once.)
name|std
operator|::
name|pair
operator|<
name|MemoryBufferRef
block|,
name|uint64_t
operator|>
name|getMember
argument_list|(
specifier|const
name|Archive
operator|::
name|Symbol
operator|*
name|Sym
argument_list|)
block|;
name|private
operator|:
name|std
operator|::
name|unique_ptr
operator|<
name|Archive
operator|>
name|File
block|;
name|llvm
operator|::
name|DenseSet
operator|<
name|uint64_t
operator|>
name|Seen
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|BitcodeFile
range|:
name|public
name|InputFile
block|{
name|public
operator|:
name|BitcodeFile
argument_list|(
argument|MemoryBufferRef M
argument_list|,
argument|StringRef ArchiveName
argument_list|,
argument|uint64_t OffsetInArchive
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const InputFile *F
argument_list|)
block|{
return|return
name|F
operator|->
name|kind
argument_list|()
operator|==
name|BitcodeKind
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|parse
argument_list|(
name|llvm
operator|::
name|DenseSet
operator|<
name|llvm
operator|::
name|CachedHashStringRef
operator|>
operator|&
name|ComdatGroups
argument_list|)
block|;
name|ArrayRef
operator|<
name|Symbol
operator|*
operator|>
name|getSymbols
argument_list|()
block|{
return|return
name|Symbols
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|llvm
operator|::
name|lto
operator|::
name|InputFile
operator|>
name|Obj
block|;
name|private
operator|:
name|std
operator|::
name|vector
operator|<
name|Symbol
operator|*
operator|>
name|Symbols
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// .so file.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SharedFile
operator|:
name|public
name|ELFFileBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|ELFFileBase
operator|<
name|ELFT
operator|>
name|Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Dyn
name|Elf_Dyn
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Sym
name|Elf_Sym
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|SymRange
name|Elf_Sym_Range
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Verdef
name|Elf_Verdef
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Versym
name|Elf_Versym
expr_stmt|;
end_typedef

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|Undefs
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|VersymSec
init|=
name|nullptr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|VerdefSec
init|=
name|nullptr
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|string
name|SoName
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|getSection
argument_list|(
specifier|const
name|Elf_Sym
operator|&
name|Sym
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|llvm
operator|::
name|ArrayRef
operator|<
name|StringRef
operator|>
name|getUndefinedSymbols
argument_list|()
block|{
return|return
name|Undefs
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|InputFile
modifier|*
name|F
parameter_list|)
block|{
return|return
name|F
operator|->
name|kind
argument_list|()
operator|==
name|Base
operator|::
name|SharedKind
return|;
block|}
end_function

begin_macro
name|SharedFile
argument_list|(
argument|MemoryBufferRef M
argument_list|,
argument|StringRef DefaultSoName
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|parseSoName
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|parseRest
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
specifier|const
name|Elf_Verdef
operator|*
operator|>
name|parseVerdefs
argument_list|(
specifier|const
name|Elf_Versym
operator|*
operator|&
name|Versym
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|NeededVer
block|{
comment|// The string table offset of the version name in the output file.
name|size_t
name|StrTab
decl_stmt|;
comment|// The version identifier for this version name.
name|uint16_t
name|Index
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|// Mapping from Elf_Verdef data structures to information about Elf_Vernaux
end_comment

begin_comment
comment|// data structures in the output file.
end_comment

begin_expr_stmt
name|std
operator|::
name|map
operator|<
specifier|const
name|Elf_Verdef
operator|*
operator|,
name|NeededVer
operator|>
name|VerdefMap
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Used for --as-needed
end_comment

begin_decl_stmt
name|bool
name|AsNeeded
init|=
name|false
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|IsUsed
init|=
name|false
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|bool
name|isNeeded
argument_list|()
specifier|const
block|{
return|return
operator|!
name|AsNeeded
operator|||
name|IsUsed
return|;
block|}
end_expr_stmt

begin_decl_stmt
unit|};
name|class
name|BinaryFile
range|:
name|public
name|InputFile
block|{
name|public
operator|:
name|explicit
name|BinaryFile
argument_list|(
argument|MemoryBufferRef M
argument_list|)
operator|:
name|InputFile
argument_list|(
argument|BinaryKind
argument_list|,
argument|M
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const InputFile *F
argument_list|)
block|{
return|return
name|F
operator|->
name|kind
argument_list|()
operator|==
name|BinaryKind
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|parse
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_function_decl
name|InputFile
modifier|*
name|createObjectFile
parameter_list|(
name|MemoryBufferRef
name|MB
parameter_list|,
name|StringRef
name|ArchiveName
init|=
literal|""
parameter_list|,
name|uint64_t
name|OffsetInArchive
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|InputFile
modifier|*
name|createSharedFile
parameter_list|(
name|MemoryBufferRef
name|MB
parameter_list|,
name|StringRef
name|DefaultSoName
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|}
comment|// namespace elf
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

