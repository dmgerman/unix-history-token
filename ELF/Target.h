begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Target.h -------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_TARGET_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_TARGET_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf2
block|{
name|class
name|SymbolBody
decl_stmt|;
name|class
name|TargetInfo
block|{
name|public
label|:
name|unsigned
name|getPageSize
argument_list|()
specifier|const
block|{
return|return
name|PageSize
return|;
block|}
name|uint64_t
name|getVAStart
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|getCopyReloc
argument_list|()
specifier|const
block|{
return|return
name|CopyReloc
return|;
block|}
name|unsigned
name|getGotReloc
argument_list|()
specifier|const
block|{
return|return
name|GotReloc
return|;
block|}
name|unsigned
name|getPltReloc
argument_list|()
specifier|const
block|{
return|return
name|PltReloc
return|;
block|}
name|unsigned
name|getRelativeReloc
argument_list|()
specifier|const
block|{
return|return
name|RelativeReloc
return|;
block|}
name|unsigned
name|getIRelativeReloc
argument_list|()
specifier|const
block|{
return|return
name|IRelativeReloc
return|;
block|}
name|bool
name|isTlsLocalDynamicReloc
argument_list|(
name|unsigned
name|Type
argument_list|)
decl|const
block|{
return|return
name|Type
operator|==
name|TlsLocalDynamicReloc
return|;
block|}
name|bool
name|isTlsGlobalDynamicReloc
argument_list|(
name|unsigned
name|Type
argument_list|)
decl|const
block|{
return|return
name|Type
operator|==
name|TlsGlobalDynamicReloc
return|;
block|}
name|unsigned
name|getTlsModuleIndexReloc
argument_list|()
specifier|const
block|{
return|return
name|TlsModuleIndexReloc
return|;
block|}
name|unsigned
name|getTlsOffsetReloc
argument_list|()
specifier|const
block|{
return|return
name|TlsOffsetReloc
return|;
block|}
name|unsigned
name|getPltZeroEntrySize
argument_list|()
specifier|const
block|{
return|return
name|PltZeroEntrySize
return|;
block|}
name|unsigned
name|getPltEntrySize
argument_list|()
specifier|const
block|{
return|return
name|PltEntrySize
return|;
block|}
name|bool
name|supportsLazyRelocations
argument_list|()
specifier|const
block|{
return|return
name|LazyRelocations
return|;
block|}
name|unsigned
name|getGotHeaderEntriesNum
argument_list|()
specifier|const
block|{
return|return
name|GotHeaderEntriesNum
return|;
block|}
name|unsigned
name|getGotPltHeaderEntriesNum
argument_list|()
specifier|const
block|{
return|return
name|GotPltHeaderEntriesNum
return|;
block|}
name|virtual
name|unsigned
name|getDynReloc
argument_list|(
name|unsigned
name|Type
argument_list|)
decl|const
block|{
return|return
name|Type
return|;
block|}
name|virtual
name|bool
name|isTlsDynReloc
argument_list|(
name|unsigned
name|Type
argument_list|,
specifier|const
name|SymbolBody
operator|&
name|S
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|unsigned
name|getTlsGotReloc
argument_list|(
name|unsigned
name|Type
operator|=
operator|-
literal|1
argument_list|)
decl|const
block|{
return|return
name|TlsGotReloc
return|;
block|}
name|virtual
name|void
name|writeGotHeaderEntries
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|writeGotPltHeaderEntries
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|void
name|writeGotPltEntry
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|,
name|uint64_t
name|Plt
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|writePltZeroEntry
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|,
name|uint64_t
name|GotEntryAddr
argument_list|,
name|uint64_t
name|PltEntryAddr
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|writePltEntry
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|,
name|uint64_t
name|GotAddr
argument_list|,
name|uint64_t
name|GotEntryAddr
argument_list|,
name|uint64_t
name|PltEntryAddr
argument_list|,
name|int32_t
name|Index
argument_list|,
name|unsigned
name|RelOff
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|// Returns true if a relocation is relative to the place being relocated,
comment|// such as relocations used for PC-relative instructions. Such relocations
comment|// need not be fixed up if an image is loaded to a different address than
comment|// the link-time address. So we don't have to emit a relocation for the
comment|// dynamic linker if isRelRelative returns true.
name|virtual
name|bool
name|isRelRelative
argument_list|(
name|uint32_t
name|Type
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|isSizeReloc
argument_list|(
name|uint32_t
name|Type
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|relocNeedsDynRelative
argument_list|(
name|unsigned
name|Type
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|relocNeedsGot
argument_list|(
name|uint32_t
name|Type
argument_list|,
specifier|const
name|SymbolBody
operator|&
name|S
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|relocNeedsPlt
argument_list|(
name|uint32_t
name|Type
argument_list|,
specifier|const
name|SymbolBody
operator|&
name|S
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|relocateOne
argument_list|(
name|uint8_t
operator|*
name|Loc
argument_list|,
name|uint8_t
operator|*
name|BufEnd
argument_list|,
name|uint32_t
name|Type
argument_list|,
name|uint64_t
name|P
argument_list|,
name|uint64_t
name|SA
argument_list|,
name|uint64_t
name|ZA
operator|=
literal|0
argument_list|,
name|uint8_t
operator|*
name|PairedLoc
operator|=
name|nullptr
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|isGotRelative
argument_list|(
name|uint32_t
name|Type
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|isTlsOptimized
argument_list|(
name|unsigned
name|Type
argument_list|,
specifier|const
name|SymbolBody
operator|*
name|S
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|needsCopyRel
argument_list|(
name|uint32_t
name|Type
argument_list|,
specifier|const
name|SymbolBody
operator|&
name|S
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|unsigned
name|relocateTlsOptimize
argument_list|(
name|uint8_t
operator|*
name|Loc
argument_list|,
name|uint8_t
operator|*
name|BufEnd
argument_list|,
name|uint32_t
name|Type
argument_list|,
name|uint64_t
name|P
argument_list|,
name|uint64_t
name|SA
argument_list|,
specifier|const
name|SymbolBody
operator|&
name|S
argument_list|)
decl|const
decl_stmt|;
name|virtual
operator|~
name|TargetInfo
argument_list|()
expr_stmt|;
name|protected
label|:
name|unsigned
name|PageSize
init|=
literal|4096
decl_stmt|;
comment|// On freebsd x86_64 the first page cannot be mmaped.
comment|// On linux that is controled by vm.mmap_min_addr. At least on some x86_64
comment|// installs that is 65536, so the first 15 pages cannot be used.
comment|// Given that, the smallest value that can be used in here is 0x10000.
comment|// If using 2MB pages, the smallest page aligned address that works is
comment|// 0x200000, but it looks like every OS uses 4k pages for executables.
name|uint64_t
name|VAStart
init|=
literal|0x10000
decl_stmt|;
name|unsigned
name|CopyReloc
decl_stmt|;
name|unsigned
name|PCRelReloc
decl_stmt|;
name|unsigned
name|GotReloc
decl_stmt|;
name|unsigned
name|PltReloc
decl_stmt|;
name|unsigned
name|RelativeReloc
decl_stmt|;
name|unsigned
name|IRelativeReloc
decl_stmt|;
name|unsigned
name|TlsGotReloc
init|=
literal|0
decl_stmt|;
name|unsigned
name|TlsLocalDynamicReloc
init|=
literal|0
decl_stmt|;
name|unsigned
name|TlsGlobalDynamicReloc
init|=
literal|0
decl_stmt|;
name|unsigned
name|TlsModuleIndexReloc
decl_stmt|;
name|unsigned
name|TlsOffsetReloc
decl_stmt|;
name|unsigned
name|PltEntrySize
init|=
literal|8
decl_stmt|;
name|unsigned
name|PltZeroEntrySize
init|=
literal|0
decl_stmt|;
name|unsigned
name|GotHeaderEntriesNum
init|=
literal|0
decl_stmt|;
name|unsigned
name|GotPltHeaderEntriesNum
init|=
literal|3
decl_stmt|;
name|bool
name|LazyRelocations
init|=
name|false
decl_stmt|;
block|}
empty_stmt|;
name|uint64_t
name|getPPC64TocBase
parameter_list|()
function_decl|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|uintX_t
name|getMipsGpAddr
argument_list|()
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|isGnuIFunc
argument_list|(
specifier|const
name|SymbolBody
operator|&
name|S
argument_list|)
expr_stmt|;
extern|extern std::unique_ptr<TargetInfo> Target;
name|TargetInfo
modifier|*
name|createTarget
parameter_list|()
function_decl|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

