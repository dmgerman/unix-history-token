begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: h_common.h,v 1.2 2016/11/19 02:30:54 kamil Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2016 The NetBSD Foundation, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|H_COMMON_H
end_ifndef

begin_define
define|#
directive|define
name|H_COMMON_H
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<dlfcn.h>
end_include

begin_include
include|#
directive|include
file|<pthread_dbg.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<atf-c.h>
end_include

begin_define
define|#
directive|define
name|PTHREAD_REQUIRE
parameter_list|(
name|x
parameter_list|)
define|\
value|do { \         int ret = (x); \         ATF_REQUIRE_MSG(ret == 0, "%s: %s", #x, strerror(ret)); \     } while (0)
end_define

begin_define
define|#
directive|define
name|PTHREAD_REQUIRE_STATUS
parameter_list|(
name|x
parameter_list|,
name|v
parameter_list|)
define|\
value|do { \         int ret = (x); \         ATF_REQUIRE_MSG(ret == (v), "%s: %s", #x, strerror(ret)); \     } while (0)
end_define

begin_function
specifier|static
name|int
name|__used
name|dummy_proc_read
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|caddr_t
name|addr
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
return|return
name|TD_ERR_ERR
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__used
name|dummy_proc_write
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|caddr_t
name|addr
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
return|return
name|TD_ERR_ERR
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__used
name|dummy_proc_lookup
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
specifier|const
name|char
modifier|*
name|sym
parameter_list|,
name|caddr_t
modifier|*
name|addr
parameter_list|)
block|{
return|return
name|TD_ERR_ERR
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__used
name|dummy_proc_regsize
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|regset
parameter_list|,
name|size_t
modifier|*
name|size
parameter_list|)
block|{
return|return
name|TD_ERR_ERR
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__used
name|dummy_proc_getregs
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|regset
parameter_list|,
name|int
name|lwp
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
block|{
return|return
name|TD_ERR_ERR
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__used
name|dummy_proc_setregs
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|regset
parameter_list|,
name|int
name|lwp
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
block|{
return|return
name|TD_ERR_ERR
return|;
block|}
end_function

begin_comment
comment|/* Minimalistic basic implementation */
end_comment

begin_function
specifier|static
name|int
name|__used
name|basic_proc_read
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|caddr_t
name|addr
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|memcpy
argument_list|(
name|buf
argument_list|,
name|addr
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|TD_ERR_OK
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__used
name|basic_proc_write
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|caddr_t
name|addr
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|memcpy
argument_list|(
name|addr
argument_list|,
name|buf
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|TD_ERR_OK
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__used
name|basic_proc_lookup
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
specifier|const
name|char
modifier|*
name|sym
parameter_list|,
name|caddr_t
modifier|*
name|addr
parameter_list|)
block|{
name|void
modifier|*
name|handle
decl_stmt|;
name|void
modifier|*
name|symbol
decl_stmt|;
name|ATF_REQUIRE_MSG
argument_list|(
operator|(
name|handle
operator|=
name|dlopen
argument_list|(
name|NULL
argument_list|,
name|RTLD_LOCAL
operator||
name|RTLD_LAZY
argument_list|)
operator|)
operator|!=
name|NULL
argument_list|,
literal|"dlopen(3) failed: %s"
argument_list|,
name|dlerror
argument_list|()
argument_list|)
expr_stmt|;
name|symbol
operator|=
name|dlsym
argument_list|(
name|handle
argument_list|,
name|sym
argument_list|)
expr_stmt|;
name|ATF_REQUIRE_MSG
argument_list|(
name|dlclose
argument_list|(
name|handle
argument_list|)
operator|==
literal|0
argument_list|,
literal|"dlclose(3) failed: %s"
argument_list|,
name|dlerror
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|symbol
condition|)
return|return
name|TD_ERR_NOSYM
return|;
operator|*
name|addr
operator|=
operator|(
name|caddr_t
operator|)
operator|(
name|uintptr_t
operator|)
name|symbol
expr_stmt|;
return|return
name|TD_ERR_OK
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// H_COMMON_H
end_comment

end_unit

