begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: msg.h,v 1.1 2016/12/05 20:10:10 christos Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2016 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Christos Zoulas.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_struct
struct|struct
name|msg_fds
block|{
name|int
name|pfd
index|[
literal|2
index|]
decl_stmt|;
name|int
name|cfd
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|CLOSEFD
parameter_list|(
name|fd
parameter_list|)
value|do { \ 	if (fd != -1) { \ 		close(fd); \ 		fd = -1; \ 	} \ } while (
comment|/*CONSTCOND*/
value|0)
end_define

begin_function
specifier|static
name|int
name|msg_open
parameter_list|(
name|struct
name|msg_fds
modifier|*
name|fds
parameter_list|)
block|{
if|if
condition|(
name|pipe
argument_list|(
name|fds
operator|->
name|pfd
argument_list|)
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|pipe
argument_list|(
name|fds
operator|->
name|cfd
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|close
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|msg_close
parameter_list|(
name|struct
name|msg_fds
modifier|*
name|fds
parameter_list|)
block|{
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|int
name|msg_write_child
parameter_list|(
specifier|const
name|char
modifier|*
name|info
parameter_list|,
name|struct
name|msg_fds
modifier|*
name|fds
parameter_list|,
name|void
modifier|*
name|msg
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|ssize_t
name|rv
decl_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Send %s\n"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|rv
operator|=
name|write
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|1
index|]
argument_list|,
name|msg
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|rv
operator|!=
operator|(
name|ssize_t
operator|)
name|len
condition|)
return|return
literal|1
return|;
comment|//	printf("Wait %s\n", info);
name|rv
operator|=
name|read
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|0
index|]
argument_list|,
name|msg
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|rv
operator|!=
operator|(
name|ssize_t
operator|)
name|len
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|msg_write_parent
parameter_list|(
specifier|const
name|char
modifier|*
name|info
parameter_list|,
name|struct
name|msg_fds
modifier|*
name|fds
parameter_list|,
name|void
modifier|*
name|msg
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|ssize_t
name|rv
decl_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Send %s\n"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|rv
operator|=
name|write
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|1
index|]
argument_list|,
name|msg
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|rv
operator|!=
operator|(
name|ssize_t
operator|)
name|len
condition|)
return|return
literal|1
return|;
comment|//	printf("Wait %s\n", info);
name|rv
operator|=
name|read
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|0
index|]
argument_list|,
name|msg
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|rv
operator|!=
operator|(
name|ssize_t
operator|)
name|len
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|msg_read_parent
parameter_list|(
specifier|const
name|char
modifier|*
name|info
parameter_list|,
name|struct
name|msg_fds
modifier|*
name|fds
parameter_list|,
name|void
modifier|*
name|msg
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|ssize_t
name|rv
decl_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Wait %s\n"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|rv
operator|=
name|read
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|0
index|]
argument_list|,
name|msg
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|rv
operator|!=
operator|(
name|ssize_t
operator|)
name|len
condition|)
return|return
literal|1
return|;
comment|//	printf("Send %s\n", info);
name|rv
operator|=
name|write
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|1
index|]
argument_list|,
name|msg
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|rv
operator|!=
operator|(
name|ssize_t
operator|)
name|len
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|msg_read_child
parameter_list|(
specifier|const
name|char
modifier|*
name|info
parameter_list|,
name|struct
name|msg_fds
modifier|*
name|fds
parameter_list|,
name|void
modifier|*
name|msg
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|ssize_t
name|rv
decl_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|CLOSEFD
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Wait %s\n"
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|rv
operator|=
name|read
argument_list|(
name|fds
operator|->
name|cfd
index|[
literal|0
index|]
argument_list|,
name|msg
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|rv
operator|!=
operator|(
name|ssize_t
operator|)
name|len
condition|)
return|return
literal|1
return|;
comment|//	printf("Send %s\n", info);
name|rv
operator|=
name|write
argument_list|(
name|fds
operator|->
name|pfd
index|[
literal|1
index|]
argument_list|,
name|msg
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|rv
operator|!=
operator|(
name|ssize_t
operator|)
name|len
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function

end_unit

