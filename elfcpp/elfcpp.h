begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// elfcpp.h -- main header file for elfcpp    -*- C++ -*-
end_comment

begin_comment
comment|// This is the external interface for elfcpp.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ELFCPP_H
end_ifndef

begin_define
define|#
directive|define
name|ELFCPP_H
end_define

begin_include
include|#
directive|include
file|"elfcpp_config.h"
end_include

begin_include
include|#
directive|include
file|"elfcpp_swap.h"
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_decl_stmt
name|namespace
name|elfcpp
block|{
comment|// Basic ELF types.
comment|// These types are always the same size.
typedef|typedef
name|uint16_t
name|Elf_Half
typedef|;
typedef|typedef
name|uint32_t
name|Elf_Word
typedef|;
typedef|typedef
name|int32_t
name|Elf_Sword
typedef|;
typedef|typedef
name|uint64_t
name|Elf_Xword
typedef|;
typedef|typedef
name|int64_t
name|Elf_Sxword
typedef|;
comment|// These types vary in size depending on the ELF file class.  The
comment|// template parameter should be 32 or 64.
name|template
operator|<
name|int
name|size
operator|>
expr|struct
name|Elf_types
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|Elf_types
operator|<
literal|32
operator|>
block|{
typedef|typedef
name|uint32_t
name|Elf_Addr
typedef|;
typedef|typedef
name|uint32_t
name|Elf_Off
typedef|;
typedef|typedef
name|uint32_t
name|Elf_WXword
typedef|;
typedef|typedef
name|int32_t
name|Elf_Swxword
typedef|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|Elf_types
operator|<
literal|64
operator|>
block|{
typedef|typedef
name|uint64_t
name|Elf_Addr
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|uint64_t
name|Elf_Off
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|Elf_WXword
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int64_t
name|Elf_Swxword
typedef|;
end_typedef

begin_comment
unit|};
comment|// Offsets within the Ehdr e_ident field.
end_comment

begin_decl_stmt
specifier|const
name|int
name|EI_MAG0
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_MAG1
init|=
literal|1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_MAG2
init|=
literal|2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_MAG3
init|=
literal|3
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_CLASS
init|=
literal|4
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_DATA
init|=
literal|5
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_VERSION
init|=
literal|6
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_OSABI
init|=
literal|7
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_ABIVERSION
init|=
literal|8
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_PAD
init|=
literal|9
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|EI_NIDENT
init|=
literal|16
decl_stmt|;
end_decl_stmt

begin_comment
comment|// The valid values found in Ehdr e_ident[EI_MAG0 through EI_MAG3].
end_comment

begin_decl_stmt
specifier|const
name|int
name|ELFMAG0
init|=
literal|0x7f
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|ELFMAG1
init|=
literal|'E'
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|ELFMAG2
init|=
literal|'L'
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|ELFMAG3
init|=
literal|'F'
decl_stmt|;
end_decl_stmt

begin_comment
comment|// The valid values found in Ehdr e_ident[EI_CLASS].
end_comment

begin_enum
enum|enum
block|{
name|ELFCLASSNONE
init|=
literal|0
block|,
name|ELFCLASS32
init|=
literal|1
block|,
name|ELFCLASS64
init|=
literal|2
block|}
enum|;
end_enum

begin_comment
comment|// The valid values found in Ehdr e_ident[EI_DATA].
end_comment

begin_enum
enum|enum
block|{
name|ELFDATANONE
init|=
literal|0
block|,
name|ELFDATA2LSB
init|=
literal|1
block|,
name|ELFDATA2MSB
init|=
literal|2
block|}
enum|;
end_enum

begin_comment
comment|// The valid values found in Ehdr e_ident[EI_VERSION] and e_version.
end_comment

begin_enum
enum|enum
block|{
name|EV_NONE
init|=
literal|0
block|,
name|EV_CURRENT
init|=
literal|1
block|}
enum|;
end_enum

begin_comment
comment|// The valid values found in Ehdr e_ident[EI_OSABI].
end_comment

begin_enum
enum|enum
name|ELFOSABI
block|{
name|ELFOSABI_NONE
init|=
literal|0
block|,
name|ELFOSABI_HPUX
init|=
literal|1
block|,
name|ELFOSABI_NETBSD
init|=
literal|2
block|,
comment|// ELFOSABI_LINUX is not listed in the ELF standard.
name|ELFOSABI_LINUX
init|=
literal|3
block|,
comment|// ELFOSABI_HURD is not listed in the ELF standard.
name|ELFOSABI_HURD
init|=
literal|4
block|,
name|ELFOSABI_SOLARIS
init|=
literal|6
block|,
name|ELFOSABI_AIX
init|=
literal|7
block|,
name|ELFOSABI_IRIX
init|=
literal|8
block|,
name|ELFOSABI_FREEBSD
init|=
literal|9
block|,
name|ELFOSABI_TRU64
init|=
literal|10
block|,
name|ELFOSABI_MODESTO
init|=
literal|11
block|,
name|ELFOSABI_OPENBSD
init|=
literal|12
block|,
name|ELFOSABI_OPENVMS
init|=
literal|13
block|,
name|ELFOSABI_NSK
init|=
literal|14
block|,
name|ELFOSABI_AROS
init|=
literal|15
block|,
comment|// A GNU extension for the ARM.
name|ELFOSABI_ARM
init|=
literal|97
block|,
comment|// A GNU extension for the MSP.
name|ELFOSABI_STANDALONE
init|=
literal|255
block|}
enum|;
end_enum

begin_comment
comment|// The valid values found in the Ehdr e_type field.
end_comment

begin_enum
enum|enum
name|ET
block|{
name|ET_NONE
init|=
literal|0
block|,
name|ET_REL
init|=
literal|1
block|,
name|ET_EXEC
init|=
literal|2
block|,
name|ET_DYN
init|=
literal|3
block|,
name|ET_CORE
init|=
literal|4
block|,
name|ET_LOOS
init|=
literal|0xfe00
block|,
name|ET_HIOS
init|=
literal|0xfeff
block|,
name|ET_LOPROC
init|=
literal|0xff00
block|,
name|ET_HIPROC
init|=
literal|0xffff
block|}
enum|;
end_enum

begin_comment
comment|// The valid values found in the Ehdr e_machine field.
end_comment

begin_enum
enum|enum
name|EM
block|{
name|EM_NONE
init|=
literal|0
block|,
name|EM_M32
init|=
literal|1
block|,
name|EM_SPARC
init|=
literal|2
block|,
name|EM_386
init|=
literal|3
block|,
name|EM_68K
init|=
literal|4
block|,
name|EM_88K
init|=
literal|5
block|,
comment|// 6 used to be EM_486
name|EM_860
init|=
literal|7
block|,
name|EM_MIPS
init|=
literal|8
block|,
name|EM_S370
init|=
literal|9
block|,
name|EM_MIPS_RS3_LE
init|=
literal|10
block|,
comment|// 11 was the old Sparc V9 ABI.
comment|// 12 through 14 are reserved.
name|EM_PARISC
init|=
literal|15
block|,
comment|// 16 is reserved.
comment|// Some old PowerPC object files use 17.
name|EM_VPP500
init|=
literal|17
block|,
name|EM_SPARC32PLUS
init|=
literal|18
block|,
name|EM_960
init|=
literal|19
block|,
name|EM_PPC
init|=
literal|20
block|,
name|EM_PPC64
init|=
literal|21
block|,
name|EM_S390
init|=
literal|22
block|,
comment|// 23 through 35 are served.
name|EM_V800
init|=
literal|36
block|,
name|EM_FR20
init|=
literal|37
block|,
name|EM_RH32
init|=
literal|38
block|,
name|EM_RCE
init|=
literal|39
block|,
name|EM_ARM
init|=
literal|40
block|,
name|EM_ALPHA
init|=
literal|41
block|,
name|EM_SH
init|=
literal|42
block|,
name|EM_SPARCV9
init|=
literal|43
block|,
name|EM_TRICORE
init|=
literal|44
block|,
name|EM_ARC
init|=
literal|45
block|,
name|EM_H8_300
init|=
literal|46
block|,
name|EM_H8_300H
init|=
literal|47
block|,
name|EM_H8S
init|=
literal|48
block|,
name|EM_H8_500
init|=
literal|49
block|,
name|EM_IA_64
init|=
literal|50
block|,
name|EM_MIPS_X
init|=
literal|51
block|,
name|EM_COLDFIRE
init|=
literal|52
block|,
name|EM_68HC12
init|=
literal|53
block|,
name|EM_MMA
init|=
literal|54
block|,
name|EM_PCP
init|=
literal|55
block|,
name|EM_NCPU
init|=
literal|56
block|,
name|EM_NDR1
init|=
literal|57
block|,
name|EM_STARCORE
init|=
literal|58
block|,
name|EM_ME16
init|=
literal|59
block|,
name|EM_ST100
init|=
literal|60
block|,
name|EM_TINYJ
init|=
literal|61
block|,
name|EM_X86_64
init|=
literal|62
block|,
name|EM_PDSP
init|=
literal|63
block|,
name|EM_PDP10
init|=
literal|64
block|,
name|EM_PDP11
init|=
literal|65
block|,
name|EM_FX66
init|=
literal|66
block|,
name|EM_ST9PLUS
init|=
literal|67
block|,
name|EM_ST7
init|=
literal|68
block|,
name|EM_68HC16
init|=
literal|69
block|,
name|EM_68HC11
init|=
literal|70
block|,
name|EM_68HC08
init|=
literal|71
block|,
name|EM_68HC05
init|=
literal|72
block|,
name|EM_SVX
init|=
literal|73
block|,
name|EM_ST19
init|=
literal|74
block|,
name|EM_VAX
init|=
literal|75
block|,
name|EM_CRIS
init|=
literal|76
block|,
name|EM_JAVELIN
init|=
literal|77
block|,
name|EM_FIREPATH
init|=
literal|78
block|,
name|EM_ZSP
init|=
literal|79
block|,
name|EM_MMIX
init|=
literal|80
block|,
name|EM_HUANY
init|=
literal|81
block|,
name|EM_PRISM
init|=
literal|82
block|,
name|EM_AVR
init|=
literal|83
block|,
name|EM_FR30
init|=
literal|84
block|,
name|EM_D10V
init|=
literal|85
block|,
name|EM_D30V
init|=
literal|86
block|,
name|EM_V850
init|=
literal|87
block|,
name|EM_M32R
init|=
literal|88
block|,
name|EM_MN10300
init|=
literal|89
block|,
name|EM_MN10200
init|=
literal|90
block|,
name|EM_PJ
init|=
literal|91
block|,
name|EM_OPENRISC
init|=
literal|92
block|,
name|EM_ARC_A5
init|=
literal|93
block|,
name|EM_XTENSA
init|=
literal|94
block|,
name|EM_VIDEOCORE
init|=
literal|95
block|,
name|EM_TMM_GPP
init|=
literal|96
block|,
name|EM_NS32K
init|=
literal|97
block|,
name|EM_TPC
init|=
literal|98
block|,
comment|// Some old picoJava object files use 99 (EM_PJ is correct).
name|EM_SNP1K
init|=
literal|99
block|,
name|EM_ST200
init|=
literal|100
block|,
name|EM_IP2K
init|=
literal|101
block|,
name|EM_MAX
init|=
literal|102
block|,
name|EM_CR
init|=
literal|103
block|,
name|EM_F2MC16
init|=
literal|104
block|,
name|EM_MSP430
init|=
literal|105
block|,
name|EM_BLACKFIN
init|=
literal|106
block|,
name|EM_SE_C33
init|=
literal|107
block|,
name|EM_SEP
init|=
literal|108
block|,
name|EM_ARCA
init|=
literal|109
block|,
name|EM_UNICORE
init|=
literal|110
block|,
name|EM_ALTERA_NIOS2
init|=
literal|113
block|,
name|EM_CRX
init|=
literal|114
block|,
comment|// The Morph MT.
name|EM_MT
init|=
literal|0x2530
block|,
comment|// DLX.
name|EM_DLX
init|=
literal|0x5aa5
block|,
comment|// FRV.
name|EM_FRV
init|=
literal|0x5441
block|,
comment|// Infineon Technologies 16-bit microcontroller with C166-V2 core.
name|EM_X16X
init|=
literal|0x4688
block|,
comment|// Xstorym16
name|EM_XSTORMY16
init|=
literal|0xad45
block|,
comment|// Renesas M32C
name|EM_M32C
init|=
literal|0xfeb0
block|,
comment|// Vitesse IQ2000
name|EM_IQ2000
init|=
literal|0xfeba
block|,
comment|// NIOS
name|EM_NIOS32
init|=
literal|0xfebb
comment|// Old AVR objects used 0x1057 (EM_AVR is correct).
comment|// Old MSP430 objects used 0x1059 (EM_MSP430 is correct).
comment|// Old FR30 objects used 0x3330 (EM_FR30 is correct).
comment|// Old OpenRISC objects used 0x3426 and 0x8472 (EM_OPENRISC is correct).
comment|// Old D10V objects used 0x7650 (EM_D10V is correct).
comment|// Old D30V objects used 0x7676 (EM_D30V is correct).
comment|// Old IP2X objects used 0x8217 (EM_IP2K is correct).
comment|// Old PowerPC objects used 0x9025 (EM_PPC is correct).
comment|// Old Alpha objects used 0x9026 (EM_ALPHA is correct).
comment|// Old M32R objects used 0x9041 (EM_M32R is correct).
comment|// Old V850 objects used 0x9080 (EM_V850 is correct).
comment|// Old S/390 objects used 0xa390 (EM_S390 is correct).
comment|// Old Xtensa objects used 0xabc7 (EM_XTENSA is correct).
comment|// Old MN10300 objects used 0xbeef (EM_MN10300 is correct).
comment|// Old MN10200 objects used 0xdead (EM_MN10200 is correct).
block|}
enum|;
end_enum

begin_comment
comment|// Special section indices.
end_comment

begin_enum
enum|enum
block|{
name|SHN_UNDEF
init|=
literal|0
block|,
name|SHN_LORESERVE
init|=
literal|0xff00
block|,
name|SHN_LOPROC
init|=
literal|0xff00
block|,
name|SHN_HIPROC
init|=
literal|0xff1f
block|,
name|SHN_LOOS
init|=
literal|0xff20
block|,
name|SHN_HIOS
init|=
literal|0xff3f
block|,
name|SHN_ABS
init|=
literal|0xfff1
block|,
name|SHN_COMMON
init|=
literal|0xfff2
block|,
name|SHN_XINDEX
init|=
literal|0xffff
block|,
name|SHN_HIRESERVE
init|=
literal|0xffff
block|}
enum|;
end_enum

begin_comment
comment|// The valid values found in the Shdr sh_type field.
end_comment

begin_enum
enum|enum
name|SHT
block|{
name|SHT_NULL
init|=
literal|0
block|,
name|SHT_PROGBITS
init|=
literal|1
block|,
name|SHT_SYMTAB
init|=
literal|2
block|,
name|SHT_STRTAB
init|=
literal|3
block|,
name|SHT_RELA
init|=
literal|4
block|,
name|SHT_HASH
init|=
literal|5
block|,
name|SHT_DYNAMIC
init|=
literal|6
block|,
name|SHT_NOTE
init|=
literal|7
block|,
name|SHT_NOBITS
init|=
literal|8
block|,
name|SHT_REL
init|=
literal|9
block|,
name|SHT_SHLIB
init|=
literal|10
block|,
name|SHT_DYNSYM
init|=
literal|11
block|,
name|SHT_INIT_ARRAY
init|=
literal|14
block|,
name|SHT_FINI_ARRAY
init|=
literal|15
block|,
name|SHT_PREINIT_ARRAY
init|=
literal|16
block|,
name|SHT_GROUP
init|=
literal|17
block|,
name|SHT_SYMTAB_SHNDX
init|=
literal|18
block|,
name|SHT_LOOS
init|=
literal|0x60000000
block|,
name|SHT_HIOS
init|=
literal|0x6fffffff
block|,
name|SHT_LOPROC
init|=
literal|0x70000000
block|,
name|SHT_HIPROC
init|=
literal|0x7fffffff
block|,
name|SHT_LOUSER
init|=
literal|0x80000000
block|,
name|SHT_HIUSER
init|=
literal|0xffffffff
block|,
comment|// The remaining values are not in the standard.
comment|// List of prelink dependencies.
name|SHT_GNU_LIBLIST
init|=
literal|0x6ffffff7
block|,
comment|// Versions defined by file.
name|SHT_SUNW_verdef
init|=
literal|0x6ffffffd
block|,
name|SHT_GNU_verdef
init|=
literal|0x6ffffffd
block|,
comment|// Versions needed by file.
name|SHT_SUNW_verneed
init|=
literal|0x6ffffffe
block|,
name|SHT_GNU_verneed
init|=
literal|0x6ffffffe
block|,
comment|// Symbol versions,
name|SHT_SUNW_versym
init|=
literal|0x6fffffff
block|,
name|SHT_GNU_versym
init|=
literal|0x6fffffff
block|, }
enum|;
end_enum

begin_comment
comment|// The valid bit flags found in the Shdr sh_flags field.
end_comment

begin_enum
enum|enum
name|SHF
block|{
name|SHF_WRITE
init|=
literal|0x1
block|,
name|SHF_ALLOC
init|=
literal|0x2
block|,
name|SHF_EXECINSTR
init|=
literal|0x4
block|,
name|SHF_MERGE
init|=
literal|0x10
block|,
name|SHF_STRINGS
init|=
literal|0x20
block|,
name|SHF_INFO_LINK
init|=
literal|0x40
block|,
name|SHF_LINK_ORDER
init|=
literal|0x80
block|,
name|SHF_OS_NONCONFORMING
init|=
literal|0x100
block|,
name|SHF_GROUP
init|=
literal|0x200
block|,
name|SHF_TLS
init|=
literal|0x400
block|,
name|SHF_MASKOS
init|=
literal|0x0ff00000
block|,
name|SHF_MASKPROC
init|=
literal|0xf0000000
block|}
enum|;
end_enum

begin_comment
comment|// Bit flags which appear in the first 32-bit word of the section data
end_comment

begin_comment
comment|// of a SHT_GROUP section.
end_comment

begin_enum
enum|enum
block|{
name|GRP_COMDAT
init|=
literal|0x1
block|,
name|GRP_MASKOS
init|=
literal|0x0ff00000
block|,
name|GRP_MASKPROC
init|=
literal|0xf0000000
block|}
enum|;
end_enum

begin_comment
comment|// The valid values found in the Phdr p_type field.
end_comment

begin_enum
enum|enum
name|PT
block|{
name|PT_NULL
init|=
literal|0
block|,
name|PT_LOAD
init|=
literal|1
block|,
name|PT_DYNAMIC
init|=
literal|2
block|,
name|PT_INTERP
init|=
literal|3
block|,
name|PT_NOTE
init|=
literal|4
block|,
name|PT_SHLIB
init|=
literal|5
block|,
name|PT_PHDR
init|=
literal|6
block|,
name|PT_TLS
init|=
literal|7
block|,
name|PT_LOOS
init|=
literal|0x60000000
block|,
name|PT_HIOS
init|=
literal|0x6fffffff
block|,
name|PT_LOPROC
init|=
literal|0x70000000
block|,
name|PT_HIPROC
init|=
literal|0x7fffffff
block|,
comment|// The remaining values are not in the standard.
comment|// Frame unwind information.
name|PT_GNU_EH_FRAME
init|=
literal|0x6474e550
block|,
name|PT_SUNW_EH_FRAME
init|=
literal|0x6474e550
block|,
comment|// Stack flags.
name|PT_GNU_STACK
init|=
literal|0x6474e551
block|,
comment|// Read only after relocation.
name|PT_GNU_RELRO
init|=
literal|0x6474e552
block|}
enum|;
end_enum

begin_comment
comment|// The valid bit flags found in the Phdr p_flags field.
end_comment

begin_enum
enum|enum
name|PF
block|{
name|PF_X
init|=
literal|0x1
block|,
name|PF_W
init|=
literal|0x2
block|,
name|PF_R
init|=
literal|0x4
block|,
name|PF_MASKOS
init|=
literal|0x0ff00000
block|,
name|PF_MASKPROC
init|=
literal|0xf0000000
block|}
enum|;
end_enum

begin_comment
comment|// Symbol binding from Sym st_info field.
end_comment

begin_enum
enum|enum
name|STB
block|{
name|STB_LOCAL
init|=
literal|0
block|,
name|STB_GLOBAL
init|=
literal|1
block|,
name|STB_WEAK
init|=
literal|2
block|,
name|STB_LOOS
init|=
literal|10
block|,
name|STB_HIOS
init|=
literal|12
block|,
name|STB_LOPROC
init|=
literal|13
block|,
name|STB_HIPROC
init|=
literal|15
block|}
enum|;
end_enum

begin_comment
comment|// Symbol types from Sym st_info field.
end_comment

begin_enum
enum|enum
name|STT
block|{
name|STT_NOTYPE
init|=
literal|0
block|,
name|STT_OBJECT
init|=
literal|1
block|,
name|STT_FUNC
init|=
literal|2
block|,
name|STT_SECTION
init|=
literal|3
block|,
name|STT_FILE
init|=
literal|4
block|,
name|STT_COMMON
init|=
literal|5
block|,
name|STT_TLS
init|=
literal|6
block|,
name|STT_LOOS
init|=
literal|10
block|,
name|STT_HIOS
init|=
literal|12
block|,
name|STT_LOPROC
init|=
literal|13
block|,
name|STT_HIPROC
init|=
literal|15
block|}
enum|;
end_enum

begin_function
specifier|inline
name|STB
name|elf_st_bind
parameter_list|(
name|unsigned
name|char
name|info
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|STB
operator|>
operator|(
name|info
operator|>>
literal|4
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|STT
name|elf_st_type
parameter_list|(
name|unsigned
name|char
name|info
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|STT
operator|>
operator|(
name|info
operator|&
literal|0xf
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|unsigned
name|char
name|elf_st_info
parameter_list|(
name|STB
name|bind
parameter_list|,
name|STT
name|type
parameter_list|)
block|{
return|return
operator|(
operator|(
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|bind
operator|)
operator|<<
literal|4
operator|)
operator|+
operator|(
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|type
operator|)
operator|&
literal|0xf
operator|)
operator|)
return|;
block|}
end_function

begin_comment
comment|// Symbol visibility from Sym st_other field.
end_comment

begin_enum
enum|enum
name|STV
block|{
name|STV_DEFAULT
init|=
literal|0
block|,
name|STV_INTERNAL
init|=
literal|1
block|,
name|STV_HIDDEN
init|=
literal|2
block|,
name|STV_PROTECTED
init|=
literal|3
block|}
enum|;
end_enum

begin_function
specifier|inline
name|STV
name|elf_st_visibility
parameter_list|(
name|unsigned
name|char
name|other
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|STV
operator|>
operator|(
name|other
operator|&
literal|0x3
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|unsigned
name|char
name|elf_st_nonvis
parameter_list|(
name|unsigned
name|char
name|other
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|STV
operator|>
operator|(
name|other
operator|>>
literal|2
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|unsigned
name|char
name|elf_st_other
parameter_list|(
name|STV
name|vis
parameter_list|,
name|unsigned
name|char
name|nonvis
parameter_list|)
block|{
return|return
operator|(
operator|(
name|nonvis
operator|<<
literal|2
operator|)
operator|+
operator|(
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|vis
operator|)
operator|&
literal|3
operator|)
operator|)
return|;
block|}
end_function

begin_comment
comment|// Reloc information from Rel/Rela r_info field.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|unsigned
name|int
name|elf_r_sym
argument_list|(
argument|typename Elf_types<size>::Elf_WXword
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|unsigned
name|int
name|elf_r_sym
operator|<
literal|32
operator|>
operator|(
name|Elf_Word
name|v
operator|)
block|{
return|return
name|v
operator|>>
literal|8
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|unsigned
name|int
name|elf_r_sym
operator|<
literal|64
operator|>
operator|(
name|Elf_Xword
name|v
operator|)
block|{
return|return
name|v
operator|>>
literal|32
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|unsigned
name|int
name|elf_r_type
argument_list|(
argument|typename Elf_types<size>::Elf_WXword
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|unsigned
name|int
name|elf_r_type
operator|<
literal|32
operator|>
operator|(
name|Elf_Word
name|v
operator|)
block|{
return|return
name|v
operator|&
literal|0xff
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|unsigned
name|int
name|elf_r_type
operator|<
literal|64
operator|>
operator|(
name|Elf_Xword
name|v
operator|)
block|{
return|return
name|v
operator|&
literal|0xffffffff
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|>
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|elf_r_info
argument_list|(
argument|unsigned int s
argument_list|,
argument|unsigned int t
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|Elf_Word
name|elf_r_info
operator|<
literal|32
operator|>
operator|(
name|unsigned
name|int
name|s
operator|,
name|unsigned
name|int
name|t
operator|)
block|{
return|return
operator|(
name|s
operator|<<
literal|8
operator|)
operator|+
operator|(
name|t
operator|&
literal|0xff
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|Elf_Xword
name|elf_r_info
operator|<
literal|64
operator|>
operator|(
name|unsigned
name|int
name|s
operator|,
name|unsigned
name|int
name|t
operator|)
block|{
return|return
operator|(
name|static_cast
operator|<
name|Elf_Xword
operator|>
operator|(
name|s
operator|)
operator|<<
literal|32
operator|)
operator|+
operator|(
name|t
operator|&
literal|0xffffffff
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Dynamic tags found in the PT_DYNAMIC segment.
end_comment

begin_enum
enum|enum
name|DT
block|{
name|DT_NULL
init|=
literal|0
block|,
name|DT_NEEDED
init|=
literal|1
block|,
name|DT_PLTRELSZ
init|=
literal|2
block|,
name|DT_PLTGOT
init|=
literal|3
block|,
name|DT_HASH
init|=
literal|4
block|,
name|DT_STRTAB
init|=
literal|5
block|,
name|DT_SYMTAB
init|=
literal|6
block|,
name|DT_RELA
init|=
literal|7
block|,
name|DT_RELASZ
init|=
literal|8
block|,
name|DT_RELAENT
init|=
literal|9
block|,
name|DT_STRSZ
init|=
literal|10
block|,
name|DT_SYMENT
init|=
literal|11
block|,
name|DT_INIT
init|=
literal|12
block|,
name|DT_FINI
init|=
literal|13
block|,
name|DT_SONAME
init|=
literal|14
block|,
name|DT_RPATH
init|=
literal|15
block|,
name|DT_SYMBOLIC
init|=
literal|16
block|,
name|DT_REL
init|=
literal|17
block|,
name|DT_RELSZ
init|=
literal|18
block|,
name|DT_RELENT
init|=
literal|19
block|,
name|DT_PLTREL
init|=
literal|20
block|,
name|DT_DEBUG
init|=
literal|21
block|,
name|DT_TEXTREL
init|=
literal|22
block|,
name|DT_JMPREL
init|=
literal|23
block|,
name|DT_BIND_NOW
init|=
literal|24
block|,
name|DT_INIT_ARRAY
init|=
literal|25
block|,
name|DT_FINI_ARRAY
init|=
literal|26
block|,
name|DT_INIT_ARRAYSZ
init|=
literal|27
block|,
name|DT_FINI_ARRAYSZ
init|=
literal|28
block|,
name|DT_RUNPATH
init|=
literal|29
block|,
name|DT_FLAGS
init|=
literal|30
block|,
name|DT_ENCODING
init|=
literal|32
block|,
name|DT_PREINIT_ARRAY
init|=
literal|33
block|,
name|DT_PREINIT_ARRAYSZ
init|=
literal|33
block|,
name|DT_LOOS
init|=
literal|0x6000000d
block|,
name|DT_HIOS
init|=
literal|0x6ffff000
block|,
name|DT_LOPROC
init|=
literal|0x70000000
block|,
name|DT_HIPROC
init|=
literal|0x7fffffff
block|,
comment|// The remaining values are extensions used by GNU or Solaris.
name|DT_VALRNGLO
init|=
literal|0x6ffffd00
block|,
name|DT_GNU_PRELINKED
init|=
literal|0x6ffffdf5
block|,
name|DT_GNU_CONFLICTSZ
init|=
literal|0x6ffffdf6
block|,
name|DT_GNU_LIBLISTSZ
init|=
literal|0x6ffffdf7
block|,
name|DT_CHECKSUM
init|=
literal|0x6ffffdf8
block|,
name|DT_PLTPADSZ
init|=
literal|0x6ffffdf9
block|,
name|DT_MOVEENT
init|=
literal|0x6ffffdfa
block|,
name|DT_MOVESZ
init|=
literal|0x6ffffdfb
block|,
name|DT_FEATURE
init|=
literal|0x6ffffdfc
block|,
name|DT_POSFLAG_1
init|=
literal|0x6ffffdfd
block|,
name|DT_SYMINSZ
init|=
literal|0x6ffffdfe
block|,
name|DT_SYMINENT
init|=
literal|0x6ffffdff
block|,
name|DT_VALRNGHI
init|=
literal|0x6ffffdff
block|,
name|DT_ADDRRNGLO
init|=
literal|0x6ffffe00
block|,
name|DT_GNU_HASH
init|=
literal|0x6ffffef5
block|,
name|DT_TLSDESC_PLT
init|=
literal|0x6ffffef6
block|,
name|DT_TLSDESC_GOT
init|=
literal|0x6ffffef7
block|,
name|DT_GNU_CONFLICT
init|=
literal|0x6ffffef8
block|,
name|DT_GNU_LIBLIST
init|=
literal|0x6ffffef9
block|,
name|DT_CONFIG
init|=
literal|0x6ffffefa
block|,
name|DT_DEPAUDIT
init|=
literal|0x6ffffefb
block|,
name|DT_AUDIT
init|=
literal|0x6ffffefc
block|,
name|DT_PLTPAD
init|=
literal|0x6ffffefd
block|,
name|DT_MOVETAB
init|=
literal|0x6ffffefe
block|,
name|DT_SYMINFO
init|=
literal|0x6ffffeff
block|,
name|DT_ADDRRNGHI
init|=
literal|0x6ffffeff
block|,
name|DT_RELACOUNT
init|=
literal|0x6ffffff9
block|,
name|DT_RELCOUNT
init|=
literal|0x6ffffffa
block|,
name|DT_FLAGS_1
init|=
literal|0x6ffffffb
block|,
name|DT_VERDEF
init|=
literal|0x6ffffffc
block|,
name|DT_VERDEFNUM
init|=
literal|0x6ffffffd
block|,
name|DT_VERNEED
init|=
literal|0x6ffffffe
block|,
name|DT_VERNEEDNUM
init|=
literal|0x6fffffff
block|,
name|DT_VERSYM
init|=
literal|0x6ffffff0
block|,
name|DT_AUXILIARY
init|=
literal|0x7ffffffd
block|,
name|DT_USED
init|=
literal|0x7ffffffe
block|,
name|DT_FILTER
init|=
literal|0x7fffffff
block|}
enum|;
end_enum

begin_comment
comment|// Flags found in the DT_FLAGS dynamic element.
end_comment

begin_enum
enum|enum
name|DF
block|{
name|DF_ORIGIN
init|=
literal|0x1
block|,
name|DF_SYMBOLIC
init|=
literal|0x2
block|,
name|DF_TEXTREL
init|=
literal|0x4
block|,
name|DF_BIND_NOW
init|=
literal|0x8
block|,
name|DF_STATIC_TLS
init|=
literal|0x10
block|}
enum|;
end_enum

begin_comment
comment|// Version numbers which appear in the vd_version field of a Verdef
end_comment

begin_comment
comment|// structure.
end_comment

begin_decl_stmt
specifier|const
name|int
name|VER_DEF_NONE
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|VER_DEF_CURRENT
init|=
literal|1
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Version numbers which appear in the vn_version field of a Verneed
end_comment

begin_comment
comment|// structure.
end_comment

begin_decl_stmt
specifier|const
name|int
name|VER_NEED_NONE
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|VER_NEED_CURRENT
init|=
literal|1
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Bit flags which appear in vd_flags of Verdef and vna_flags of
end_comment

begin_comment
comment|// Vernaux.
end_comment

begin_decl_stmt
specifier|const
name|int
name|VER_FLG_BASE
init|=
literal|0x1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|VER_FLG_WEAK
init|=
literal|0x2
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Special constants found in the SHT_GNU_versym entries.
end_comment

begin_decl_stmt
specifier|const
name|int
name|VER_NDX_LOCAL
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|int
name|VER_NDX_GLOBAL
init|=
literal|1
decl_stmt|;
end_decl_stmt

begin_comment
comment|// A SHT_GNU_versym section holds 16-bit words.  This bit is set if
end_comment

begin_comment
comment|// the symbol is hidden and can only be seen when referenced using an
end_comment

begin_comment
comment|// explicit version number.  This is a GNU extension.
end_comment

begin_decl_stmt
specifier|const
name|int
name|VERSYM_HIDDEN
init|=
literal|0x8000
decl_stmt|;
end_decl_stmt

begin_comment
comment|// This is the mask for the rest of the data in a word read from a
end_comment

begin_comment
comment|// SHT_GNU_versym section.
end_comment

begin_decl_stmt
specifier|const
name|int
name|VERSYM_VERSION
init|=
literal|0x7fff
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// End namespace elfcpp.
end_comment

begin_comment
comment|// Include internal details after defining the types.
end_comment

begin_include
include|#
directive|include
file|"elfcpp_internal.h"
end_include

begin_macro
unit|namespace
name|elfcpp
end_macro

begin_block
block|{
comment|// The offset of the ELF file header in the ELF file.
specifier|const
name|int
name|file_header_offset
init|=
literal|0
decl_stmt|;
comment|// ELF structure sizes.
name|template
operator|<
name|int
name|size
operator|>
expr|struct
name|Elf_sizes
block|{
comment|// Size of ELF file header.
specifier|static
specifier|const
name|int
name|ehdr_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Ehdr_data
operator|<
name|size
operator|>
argument_list|)
block|;
comment|// Size of ELF segment header.
specifier|static
specifier|const
name|int
name|phdr_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Phdr_data
operator|<
name|size
operator|>
argument_list|)
block|;
comment|// Size of ELF section header.
specifier|static
specifier|const
name|int
name|shdr_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Shdr_data
operator|<
name|size
operator|>
argument_list|)
block|;
comment|// Size of ELF symbol table entry.
specifier|static
specifier|const
name|int
name|sym_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Sym_data
operator|<
name|size
operator|>
argument_list|)
block|;
comment|// Sizes of ELF reloc entries.
specifier|static
specifier|const
name|int
name|rel_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Rel_data
operator|<
name|size
operator|>
argument_list|)
block|;
specifier|static
specifier|const
name|int
name|rela_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Rela_data
operator|<
name|size
operator|>
argument_list|)
block|;
comment|// Size of ELF dynamic entry.
specifier|static
specifier|const
name|int
name|dyn_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Dyn_data
operator|<
name|size
operator|>
argument_list|)
block|;
comment|// Size of ELF version structures.
specifier|static
specifier|const
name|int
name|verdef_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Verdef_data
argument_list|)
block|;
specifier|static
specifier|const
name|int
name|verdaux_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Verdaux_data
argument_list|)
block|;
specifier|static
specifier|const
name|int
name|verneed_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Verneed_data
argument_list|)
block|;
specifier|static
specifier|const
name|int
name|vernaux_size
operator|=
sizeof|sizeof
argument_list|(
name|internal
operator|::
name|Vernaux_data
argument_list|)
block|; }
expr_stmt|;
comment|// Accessor class for the ELF file header.
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Ehdr
block|{
name|public
operator|:
name|Ehdr
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Ehdr_data<size>*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Ehdr
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Ehdr_data<size>*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
specifier|const
name|unsigned
name|char
operator|*
name|get_e_ident
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|p_
operator|->
name|e_ident
return|;
block|}
name|Elf_Half
name|get_e_type
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_type
argument_list|)
return|;
block|}
name|Elf_Half
name|get_e_machine
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_machine
argument_list|)
return|;
block|}
name|Elf_Word
name|get_e_version
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_version
argument_list|)
return|;
block|}
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Addr
name|get_e_entry
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_entry
argument_list|)
return|;
block|}
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Off
name|get_e_phoff
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_phoff
argument_list|)
return|;
block|}
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Off
name|get_e_shoff
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_shoff
argument_list|)
return|;
block|}
name|Elf_Word
name|get_e_flags
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_flags
argument_list|)
return|;
block|}
name|Elf_Half
name|get_e_ehsize
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_ehsize
argument_list|)
return|;
block|}
name|Elf_Half
name|get_e_phentsize
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_phentsize
argument_list|)
return|;
block|}
name|Elf_Half
name|get_e_phnum
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_phnum
argument_list|)
return|;
block|}
name|Elf_Half
name|get_e_shentsize
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_shentsize
argument_list|)
return|;
block|}
name|Elf_Half
name|get_e_shnum
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_shnum
argument_list|)
return|;
block|}
name|Elf_Half
name|get_e_shstrndx
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_shstrndx
argument_list|)
return|;
block|}
name|private
label|:
specifier|const
name|internal
operator|::
name|Ehdr_data
operator|<
name|size
operator|>
operator|*
name|p_
expr_stmt|;
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Write class for the ELF file header.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Ehdr_write
block|{
name|public
operator|:
name|Ehdr_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Ehdr_data<size>*>(p)
argument_list|)
block|{ }
name|void
name|put_e_ident
argument_list|(
argument|const unsigned char v[EI_NIDENT]
argument_list|)
specifier|const
block|{
name|memcpy
argument_list|(
name|this
operator|->
name|p_
operator|->
name|e_ident
argument_list|,
name|v
argument_list|,
name|EI_NIDENT
argument_list|)
block|; }
name|void
name|put_e_type
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_type
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_machine
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_machine
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_version
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_version
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_entry
argument_list|(
argument|typename Elf_types<size>::Elf_Addr v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_entry
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_phoff
argument_list|(
argument|typename Elf_types<size>::Elf_Off v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_phoff
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_shoff
argument_list|(
argument|typename Elf_types<size>::Elf_Off v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_shoff
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_flags
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_flags
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_ehsize
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_ehsize
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_phentsize
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_phentsize
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_phnum
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_phnum
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_shentsize
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_shentsize
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_shnum
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_shnum
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_e_shstrndx
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|e_shstrndx
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Ehdr_data
operator|<
name|size
operator|>
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessor class for an ELF section header.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Shdr
block|{
name|public
operator|:
name|Shdr
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Shdr_data<size>*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Shdr
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Shdr_data<size>*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|Elf_Word
name|get_sh_name
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_name
argument_list|)
return|;
block|}
name|Elf_Word
name|get_sh_type
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_type
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_sh_flags
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_flags
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Addr
name|get_sh_addr
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_addr
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Off
name|get_sh_offset
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_offset
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_sh_size
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_size
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_sh_link
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_link
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_sh_info
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_info
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_sh_addralign
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_addralign
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_sh_entsize
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|sh_entsize
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Shdr_data
operator|<
name|size
operator|>
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// Write class for an ELF section header.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Shdr_write
block|{
name|public
operator|:
name|Shdr_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Shdr_data<size>*>(p)
argument_list|)
block|{ }
name|void
name|put_sh_name
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_name
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_sh_type
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_type
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_sh_flags
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_flags
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_sh_addr
argument_list|(
argument|typename Elf_types<size>::Elf_Addr v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_addr
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_sh_offset
argument_list|(
argument|typename Elf_types<size>::Elf_Off v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_offset
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_sh_size
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_size
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_sh_link
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_link
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_sh_info
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_info
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_sh_addralign
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_addralign
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_sh_entsize
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|sh_entsize
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Shdr_data
operator|<
name|size
operator|>
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessor class for an ELF segment header.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Phdr
block|{
name|public
operator|:
name|Phdr
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Phdr_data<size>*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Phdr
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Phdr_data<size>*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|Elf_Word
name|get_p_type
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|p_type
argument_list|)
return|;
block|}
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Off
name|get_p_offset
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|p_offset
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Addr
name|get_p_vaddr
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|p_vaddr
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Addr
name|get_p_paddr
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|p_paddr
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_p_filesz
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|p_filesz
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_p_memsz
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|p_memsz
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_p_flags
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|p_flags
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_p_align
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|p_align
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Phdr_data
operator|<
name|size
operator|>
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// Write class for an ELF segment header.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Phdr_write
block|{
name|public
operator|:
name|Phdr_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Phdr_data<size>*>(p)
argument_list|)
block|{ }
name|void
name|put_p_type
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|p_type
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_p_offset
argument_list|(
argument|typename Elf_types<size>::Elf_Off v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|p_offset
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_p_vaddr
argument_list|(
argument|typename Elf_types<size>::Elf_Addr v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|p_vaddr
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_p_paddr
argument_list|(
argument|typename Elf_types<size>::Elf_Addr v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|p_paddr
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_p_filesz
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|p_filesz
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_p_memsz
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|p_memsz
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_p_flags
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|p_flags
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_p_align
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|p_align
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Phdr_data
operator|<
name|size
operator|>
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessor class for an ELF symbol table entry.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Sym
block|{
name|public
operator|:
name|Sym
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Sym_data<size>*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Sym
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Sym_data<size>*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|Elf_Word
name|get_st_name
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|st_name
argument_list|)
return|;
block|}
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Addr
name|get_st_value
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|st_value
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_st_size
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|st_size
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|char
name|get_st_info
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|p_
operator|->
name|st_info
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|STB
name|get_st_bind
argument_list|()
specifier|const
block|{
return|return
name|elf_st_bind
argument_list|(
name|this
operator|->
name|get_st_info
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|STT
name|get_st_type
argument_list|()
specifier|const
block|{
return|return
name|elf_st_type
argument_list|(
name|this
operator|->
name|get_st_info
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|char
name|get_st_other
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|p_
operator|->
name|st_other
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|STV
name|get_st_visibility
argument_list|()
specifier|const
block|{
return|return
name|elf_st_visibility
argument_list|(
name|this
operator|->
name|get_st_other
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|char
name|get_st_nonvis
argument_list|()
specifier|const
block|{
return|return
name|elf_st_nonvis
argument_list|(
name|this
operator|->
name|get_st_other
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Half
name|get_st_shndx
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|st_shndx
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Sym_data
operator|<
name|size
operator|>
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// Writer class for an ELF symbol table entry.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Sym_write
block|{
name|public
operator|:
name|Sym_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Sym_data<size>*>(p)
argument_list|)
block|{ }
name|void
name|put_st_name
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|st_name
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_st_value
argument_list|(
argument|typename Elf_types<size>::Elf_Addr v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|st_value
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_st_size
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|st_size
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_st_info
argument_list|(
argument|unsigned char v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|st_info
operator|=
name|v
block|; }
name|void
name|put_st_info
argument_list|(
argument|STB bind
argument_list|,
argument|STT type
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|st_info
operator|=
name|elf_st_info
argument_list|(
name|bind
argument_list|,
name|type
argument_list|)
block|; }
name|void
name|put_st_other
argument_list|(
argument|unsigned char v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|st_other
operator|=
name|v
block|; }
name|void
name|put_st_other
argument_list|(
argument|STV vis
argument_list|,
argument|unsigned char nonvis
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|st_other
operator|=
name|elf_st_other
argument_list|(
name|vis
argument_list|,
name|nonvis
argument_list|)
block|; }
name|void
name|put_st_shndx
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|st_shndx
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|Sym
operator|<
name|size
block|,
name|big_endian
operator|>
name|sym
argument_list|()
block|{
return|return
name|Sym
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|(
name|reinterpret_cast
operator|<
name|unsigned
name|char
operator|*
operator|>
operator|(
name|this
operator|->
name|p_
operator|)
operator|)
return|;
block|}
name|private
operator|:
name|internal
operator|::
name|Sym_data
operator|<
name|size
operator|>
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// Accessor classes for an ELF REL relocation entry.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Rel
block|{
name|public
operator|:
name|Rel
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Rel_data<size>*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Rel
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Rel_data<size>*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Addr
name|get_r_offset
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|r_offset
argument_list|)
return|;
block|}
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_r_info
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|r_info
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Rel_data
operator|<
name|size
operator|>
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// Writer class for an ELF Rel relocation.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Rel_write
block|{
name|public
operator|:
name|Rel_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Rel_data<size>*>(p)
argument_list|)
block|{ }
name|void
name|put_r_offset
argument_list|(
argument|typename Elf_types<size>::Elf_Addr v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|r_offset
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_r_info
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|r_info
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Rel_data
operator|<
name|size
operator|>
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessor class for an ELF Rela relocation.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Rela
block|{
name|public
operator|:
name|Rela
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Rela_data<size>*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Rela
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Rela_data<size>*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Addr
name|get_r_offset
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|r_offset
argument_list|)
return|;
block|}
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_r_info
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|r_info
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Swxword
name|get_r_addend
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|r_addend
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Rela_data
operator|<
name|size
operator|>
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// Writer class for an ELF Rela relocation.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Rela_write
block|{
name|public
operator|:
name|Rela_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Rela_data<size>*>(p)
argument_list|)
block|{ }
name|void
name|put_r_offset
argument_list|(
argument|typename Elf_types<size>::Elf_Addr v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|r_offset
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_r_info
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|r_info
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_r_addend
argument_list|(
argument|typename Elf_types<size>::Elf_Swxword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|r_addend
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Rela_data
operator|<
name|size
operator|>
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessor classes for entries in the ELF SHT_DYNAMIC section aka
end_comment

begin_comment
comment|// PT_DYNAMIC segment.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Dyn
block|{
name|public
operator|:
name|Dyn
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Dyn_data<size>*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Dyn
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Dyn_data<size>*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Swxword
name|get_d_tag
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|d_tag
argument_list|)
return|;
block|}
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|get_d_val
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|d_val
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_Addr
name|get_d_ptr
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|d_val
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Dyn_data
operator|<
name|size
operator|>
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// Write class for an entry in the SHT_DYNAMIC section.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Dyn_write
block|{
name|public
operator|:
name|Dyn_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Dyn_data<size>*>(p)
argument_list|)
block|{ }
name|void
name|put_d_tag
argument_list|(
argument|typename Elf_types<size>::Elf_Swxword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|d_tag
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_d_val
argument_list|(
argument|typename Elf_types<size>::Elf_WXword v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|d_val
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|put_d_ptr
argument_list|(
argument|typename Elf_types<size>::Elf_Addr v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|d_val
operator|=
name|Convert
operator|<
name|size
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Dyn_data
operator|<
name|size
operator|>
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessor classes for entries in the ELF SHT_GNU_verdef section.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Verdef
block|{
name|public
operator|:
name|Verdef
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Verdef_data*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Verdef
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Verdef_data*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|Elf_Half
name|get_vd_version
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vd_version
argument_list|)
return|;
block|}
name|Elf_Half
name|get_vd_flags
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vd_flags
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Half
name|get_vd_ndx
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vd_ndx
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Half
name|get_vd_cnt
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vd_cnt
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_vd_hash
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vd_hash
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_vd_aux
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vd_aux
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_vd_next
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vd_next
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Verdef_data
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Verdef_write
block|{
name|public
operator|:
name|Verdef_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Verdef_data*>(p)
argument_list|)
block|{ }
name|void
name|set_vd_version
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vd_version
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vd_flags
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vd_flags
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vd_ndx
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vd_ndx
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vd_cnt
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vd_cnt
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vd_hash
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vd_hash
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vd_aux
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vd_aux
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vd_next
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vd_next
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Verdef_data
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessor classes for auxiliary entries in the ELF SHT_GNU_verdef
end_comment

begin_comment
comment|// section.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Verdaux
block|{
name|public
operator|:
name|Verdaux
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Verdaux_data*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Verdaux
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Verdaux_data*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|Elf_Word
name|get_vda_name
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vda_name
argument_list|)
return|;
block|}
name|Elf_Word
name|get_vda_next
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vda_next
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Verdaux_data
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Verdaux_write
block|{
name|public
operator|:
name|Verdaux_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Verdaux_data*>(p)
argument_list|)
block|{ }
name|void
name|set_vda_name
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vda_name
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vda_next
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vda_next
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Verdaux_data
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessor classes for entries in the ELF SHT_GNU_verneed section.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Verneed
block|{
name|public
operator|:
name|Verneed
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Verneed_data*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Verneed
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Verneed_data*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|Elf_Half
name|get_vn_version
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vn_version
argument_list|)
return|;
block|}
name|Elf_Half
name|get_vn_cnt
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vn_cnt
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_vn_file
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vn_file
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_vn_aux
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vn_aux
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_vn_next
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vn_next
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Verneed_data
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Verneed_write
block|{
name|public
operator|:
name|Verneed_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Verneed_data*>(p)
argument_list|)
block|{ }
name|void
name|set_vn_version
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vn_version
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vn_cnt
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vn_cnt
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vn_file
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vn_file
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vn_aux
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vn_aux
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vn_next
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vn_next
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Verneed_data
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessor classes for auxiliary entries in the ELF SHT_GNU_verneed
end_comment

begin_comment
comment|// section.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Vernaux
block|{
name|public
operator|:
name|Vernaux
argument_list|(
argument|const unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Vernaux_data*>(p)
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|File
operator|>
name|Vernaux
argument_list|(
argument|File* file
argument_list|,
argument|typename File::Location loc
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<const internal::Vernaux_data*>( 	   file->view(loc.file_offset, loc.data_size).data())
argument_list|)
block|{ }
name|Elf_Word
name|get_vna_hash
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vna_hash
argument_list|)
return|;
block|}
name|Elf_Half
name|get_vna_flags
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vna_flags
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Half
name|get_vna_other
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|16
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vna_other
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_vna_name
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vna_name
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Elf_Word
name|get_vna_next
argument_list|()
specifier|const
block|{
return|return
name|Convert
operator|<
literal|32
operator|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|this
operator|->
name|p_
operator|->
name|vna_next
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|internal
operator|::
name|Vernaux_data
operator|*
name|p_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|>
name|class
name|Vernaux_write
block|{
name|public
operator|:
name|Vernaux_write
argument_list|(
argument|unsigned char* p
argument_list|)
operator|:
name|p_
argument_list|(
argument|reinterpret_cast<internal::Vernaux_data*>(p)
argument_list|)
block|{ }
name|void
name|set_vna_hash
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vna_hash
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vna_flags
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vna_flags
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vna_other
argument_list|(
argument|Elf_Half v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vna_other
operator|=
name|Convert
operator|<
literal|16
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vna_name
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vna_name
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|set_vna_next
argument_list|(
argument|Elf_Word v
argument_list|)
block|{
name|this
operator|->
name|p_
operator|->
name|vna_next
operator|=
name|Convert
operator|<
literal|32
block|,
name|big_endian
operator|>
operator|::
name|convert_host
argument_list|(
name|v
argument_list|)
block|; }
name|private
operator|:
name|internal
operator|::
name|Vernaux_data
operator|*
name|p_
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// End namespace elfcpp.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !defined(ELFPCP_H)
end_comment

end_unit

