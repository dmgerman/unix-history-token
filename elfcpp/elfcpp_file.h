begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// elfcpp_file.h -- file access for elfcpp   -*- C++ -*-
end_comment

begin_comment
comment|// This header file defines the class Elf_file which can be used to
end_comment

begin_comment
comment|// read useful data from an ELF file.  The functions here are all
end_comment

begin_comment
comment|// templates which take a file interface object as a parameter.  This
end_comment

begin_comment
comment|// type must have a subtype View.  This type must support two methods:
end_comment

begin_comment
comment|//     View view(off_t file_offset, off_t data_size)
end_comment

begin_comment
comment|// returns a View for the specified part of the file.
end_comment

begin_comment
comment|//     void error(const char* printf_format, ...)
end_comment

begin_comment
comment|// prints an error message and does not return.  The subtype View must
end_comment

begin_comment
comment|// support a method
end_comment

begin_comment
comment|//     const unsigned char* data()
end_comment

begin_comment
comment|// which returns a pointer to a buffer containing the requested data.
end_comment

begin_comment
comment|// This general interface is used to read data from the file.  Objects
end_comment

begin_comment
comment|// of type View will never survive longer than the elfcpp function.
end_comment

begin_comment
comment|// Some of these functions must return a reference to part of the
end_comment

begin_comment
comment|// file.  To use these, the file interface must support a subtype
end_comment

begin_comment
comment|// Location:
end_comment

begin_comment
comment|//    Location(off_t file_offset, off_t data_size)
end_comment

begin_comment
comment|// To use this in conjunction with the accessors types Shdr, etc., the
end_comment

begin_comment
comment|// file interface should support an overload of view:
end_comment

begin_comment
comment|//    View view(Location)
end_comment

begin_comment
comment|// This permits writing
end_comment

begin_comment
comment|//    elfcpp::Shdr shdr(file, ef.section_header(n));
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ELFPCP_FILE_H
end_ifndef

begin_define
define|#
directive|define
name|ELFCPP_FILE_H
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_decl_stmt
name|namespace
name|elfcpp
block|{
comment|// This object is used to read an ELF file.
comment|//   SIZE: The size of file, 32 or 64.
comment|//   BIG_ENDIAN: Whether the file is in big-endian format.
comment|//   FILE: A file reading type as described above.
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|File
operator|>
name|class
name|Elf_file
block|{
name|private
operator|:
typedef|typedef
name|Elf_file
operator|<
name|size
operator|,
name|big_endian
operator|,
name|File
operator|>
name|This
expr_stmt|;
name|public
operator|:
specifier|static
specifier|const
name|int
name|ehdr_size
operator|=
name|Elf_sizes
operator|<
name|size
operator|>
operator|::
name|ehdr_size
expr_stmt|;
specifier|static
specifier|const
name|int
name|phdr_size
init|=
name|Elf_sizes
operator|<
name|size
operator|>
operator|::
name|phdr_size
decl_stmt|;
specifier|static
specifier|const
name|int
name|shdr_size
init|=
name|Elf_sizes
operator|<
name|size
operator|>
operator|::
name|shdr_size
decl_stmt|;
specifier|static
specifier|const
name|int
name|sym_size
init|=
name|Elf_sizes
operator|<
name|size
operator|>
operator|::
name|sym_size
decl_stmt|;
specifier|static
specifier|const
name|int
name|rel_size
init|=
name|Elf_sizes
operator|<
name|size
operator|>
operator|::
name|rel_size
decl_stmt|;
specifier|static
specifier|const
name|int
name|rela_size
init|=
name|Elf_sizes
operator|<
name|size
operator|>
operator|::
name|rela_size
decl_stmt|;
typedef|typedef
name|Ehdr
operator|<
name|size
operator|,
name|big_endian
operator|>
name|Ef_ehdr
expr_stmt|;
typedef|typedef
name|Phdr
operator|<
name|size
operator|,
name|big_endian
operator|>
name|Ef_phdr
expr_stmt|;
typedef|typedef
name|Shdr
operator|<
name|size
operator|,
name|big_endian
operator|>
name|Ef_shdr
expr_stmt|;
typedef|typedef
name|Sym
operator|<
name|size
operator|,
name|big_endian
operator|>
name|Ef_sym
expr_stmt|;
comment|// Construct an Elf_file given an ELF file header.
name|Elf_file
argument_list|(
argument|File* file
argument_list|,
argument|const Ef_ehdr& ehdr
argument_list|)
block|{
name|this
operator|->
name|construct
argument_list|(
name|file
argument_list|,
name|ehdr
argument_list|)
expr_stmt|;
block|}
comment|// Construct an ELF file.
specifier|inline
name|Elf_file
argument_list|(
name|File
operator|*
name|file
argument_list|)
expr_stmt|;
comment|// Return the file offset to the section headers.
name|off_t
name|shoff
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|shoff_
return|;
block|}
comment|// Return the number of sections.
name|unsigned
name|int
name|shnum
parameter_list|()
block|{
name|this
operator|->
name|initialize_shnum
argument_list|()
expr_stmt|;
return|return
name|this
operator|->
name|shnum_
return|;
block|}
comment|// Return the section index of the section name string table.
name|unsigned
name|int
name|shstrndx
parameter_list|()
block|{
name|this
operator|->
name|initialize_shnum
argument_list|()
expr_stmt|;
return|return
name|this
operator|->
name|shstrndx_
return|;
block|}
comment|// Return the location of the header of section SHNDX.
name|typename
name|File
operator|::
name|Location
name|section_header
argument_list|(
argument|unsigned int shndx
argument_list|)
block|{
return|return
name|typename
name|File
operator|::
name|Location
argument_list|(
name|this
operator|->
name|section_header_offset
argument_list|(
name|shndx
argument_list|)
argument_list|,
name|shdr_size
argument_list|)
return|;
block|}
comment|// Return the name of section SHNDX.
name|std
operator|::
name|string
name|section_name
argument_list|(
argument|unsigned int shndx
argument_list|)
expr_stmt|;
comment|// Return the location of the contents of section SHNDX.
name|typename
name|File
operator|::
name|Location
name|section_contents
argument_list|(
argument|unsigned int shndx
argument_list|)
expr_stmt|;
comment|// Return the flags of section SHNDX.
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|section_flags
argument_list|(
argument|unsigned int shndx
argument_list|)
expr_stmt|;
name|private
label|:
comment|// Shared constructor code.
name|void
name|construct
parameter_list|(
name|File
modifier|*
name|file
parameter_list|,
specifier|const
name|Ef_ehdr
modifier|&
name|ehdr
parameter_list|)
function_decl|;
comment|// Initialize shnum_ and shstrndx_.
name|void
name|initialize_shnum
parameter_list|()
function_decl|;
comment|// Return the file offset of the header of section SHNDX.
name|off_t
name|section_header_offset
parameter_list|(
name|unsigned
name|int
name|shndx
parameter_list|)
function_decl|;
comment|// The file we are reading.
name|File
modifier|*
name|file_
decl_stmt|;
comment|// The file offset to the section headers.
name|off_t
name|shoff_
decl_stmt|;
comment|// The number of sections.
name|unsigned
name|int
name|shnum_
decl_stmt|;
comment|// The section index of the section name string table.
name|unsigned
name|int
name|shstrndx_
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Template function definitions.
end_comment

begin_comment
comment|// Construct an Elf_file given an ELF file header.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|File
operator|>
name|void
name|Elf_file
operator|<
name|size
operator|,
name|big_endian
operator|,
name|File
operator|>
operator|::
name|construct
argument_list|(
argument|File* file
argument_list|,
argument|const Ef_ehdr& ehdr
argument_list|)
block|{
name|this
operator|->
name|file_
operator|=
name|file
block|;
name|this
operator|->
name|shoff_
operator|=
name|ehdr
operator|.
name|get_e_shoff
argument_list|()
block|;
name|this
operator|->
name|shnum_
operator|=
name|ehdr
operator|.
name|get_e_shnum
argument_list|()
block|;
name|this
operator|->
name|shstrndx_
operator|=
name|ehdr
operator|.
name|get_e_shstrndx
argument_list|()
block|;
if|if
condition|(
name|ehdr
operator|.
name|get_e_ehsize
argument_list|()
operator|!=
name|This
operator|::
name|ehdr_size
condition|)
name|file
operator|->
name|error
argument_list|(
name|_
argument_list|(
literal|"bad e_ehsize (%d != %d)"
argument_list|)
argument_list|,
name|ehdr
operator|.
name|get_e_ehsize
argument_list|()
argument_list|,
name|This
operator|::
name|ehdr_size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ehdr
operator|.
name|get_e_shentsize
argument_list|()
operator|!=
name|This
operator|::
name|shdr_size
condition|)
name|file
operator|->
name|error
argument_list|(
name|_
argument_list|(
literal|"bad e_shentsize (%d != %d)"
argument_list|)
argument_list|,
name|ehdr
operator|.
name|get_e_shentsize
argument_list|()
argument_list|,
name|This
operator|::
name|shdr_size
argument_list|)
expr_stmt|;
end_if

begin_comment
unit|}
comment|// Construct an ELF file.
end_comment

begin_expr_stmt
unit|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|File
operator|>
specifier|inline
name|Elf_file
operator|<
name|size
operator|,
name|big_endian
operator|,
name|File
operator|>
operator|::
name|Elf_file
argument_list|(
argument|File* file
argument_list|)
block|{
name|typename
name|File
operator|::
name|View
name|v
argument_list|(
name|file
operator|->
name|view
argument_list|(
name|file_header_offset
argument_list|,
name|This
operator|::
name|ehdr_size
argument_list|)
argument_list|)
block|;
name|this
operator|->
name|construct
argument_list|(
name|file
argument_list|,
name|Ef_ehdr
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
block|; }
comment|// Initialize the shnum_ and shstrndx_ fields, handling overflow.
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|File
operator|>
name|void
name|Elf_file
operator|<
name|size
operator|,
name|big_endian
operator|,
name|File
operator|>
operator|::
name|initialize_shnum
argument_list|()
block|{
if|if
condition|(
operator|(
name|this
operator|->
name|shnum_
operator|==
literal|0
operator|||
name|this
operator|->
name|shstrndx_
operator|==
name|SHN_XINDEX
operator|)
operator|&&
name|this
operator|->
name|shoff_
operator|!=
literal|0
condition|)
block|{
name|typename
name|File
operator|::
name|View
name|v
argument_list|(
name|this
operator|->
name|file_
operator|->
name|view
argument_list|(
name|this
operator|->
name|shoff_
argument_list|,
name|This
operator|::
name|shdr_size
argument_list|)
argument_list|)
expr_stmt|;
name|Ef_shdr
name|shdr
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|->
name|shnum_
operator|==
literal|0
condition|)
name|this
operator|->
name|shnum_
operator|=
name|shdr
operator|.
name|get_sh_size
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|->
name|shstrndx_
operator|==
name|SHN_XINDEX
condition|)
name|this
operator|->
name|shstrndx_
operator|=
name|shdr
operator|.
name|get_sh_link
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// Return the file offset of the section header of section SHNDX.
end_comment

begin_expr_stmt
unit|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|File
operator|>
name|off_t
name|Elf_file
operator|<
name|size
operator|,
name|big_endian
operator|,
name|File
operator|>
operator|::
name|section_header_offset
argument_list|(
argument|unsigned int shndx
argument_list|)
block|{
if|if
condition|(
name|shndx
operator|>=
name|this
operator|->
name|shnum
argument_list|()
condition|)
name|this
operator|->
name|file_
operator|->
name|error
argument_list|(
name|_
argument_list|(
literal|"section_header_offset: bad shndx %u>= %u"
argument_list|)
argument_list|,
name|shndx
argument_list|,
name|this
operator|->
name|shnum
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|this
operator|->
name|shoff_
operator|+
name|This
operator|::
name|shdr_size
operator|*
name|shndx
return|;
end_return

begin_comment
unit|}
comment|// Return the name of section SHNDX.
end_comment

begin_expr_stmt
unit|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|File
operator|>
name|std
operator|::
name|string
name|Elf_file
operator|<
name|size
operator|,
name|big_endian
operator|,
name|File
operator|>
operator|::
name|section_name
argument_list|(
argument|unsigned int shndx
argument_list|)
block|{
name|File
operator|*
specifier|const
name|file
operator|=
name|this
operator|->
name|file_
block|;
comment|// Get the section name offset.
name|unsigned
name|int
name|sh_name
block|;
block|{
name|typename
name|File
operator|::
name|View
name|v
argument_list|(
name|file
operator|->
name|view
argument_list|(
name|this
operator|->
name|section_header_offset
argument_list|(
name|shndx
argument_list|)
argument_list|,
name|This
operator|::
name|shdr_size
argument_list|)
argument_list|)
block|;
name|Ef_shdr
name|shdr
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
block|;
name|sh_name
operator|=
name|shdr
operator|.
name|get_sh_name
argument_list|()
block|;   }
comment|// Get the file offset for the section name string table data.
name|off_t
name|shstr_off
block|;
name|off_t
name|shstr_size
block|;
block|{
specifier|const
name|unsigned
name|int
name|shstrndx
operator|=
name|this
operator|->
name|shstrndx_
block|;
name|typename
name|File
operator|::
name|View
name|v
argument_list|(
name|file
operator|->
name|view
argument_list|(
name|this
operator|->
name|section_header_offset
argument_list|(
name|shstrndx
argument_list|)
argument_list|,
name|This
operator|::
name|shdr_size
argument_list|)
argument_list|)
block|;
name|Ef_shdr
name|shstr_shdr
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
block|;
name|shstr_off
operator|=
name|shstr_shdr
operator|.
name|get_sh_offset
argument_list|()
block|;
name|shstr_size
operator|=
name|shstr_shdr
operator|.
name|get_sh_size
argument_list|()
block|;   }
if|if
condition|(
name|sh_name
operator|>=
name|shstr_size
condition|)
name|file
operator|->
name|error
argument_list|(
name|_
argument_list|(
literal|"bad section name offset for section %u: %u"
argument_list|)
argument_list|,
name|shndx
argument_list|,
name|sh_name
argument_list|)
expr_stmt|;
name|typename
name|File
operator|::
name|View
name|v
argument_list|(
name|file
operator|->
name|view
argument_list|(
name|shstr_off
argument_list|,
name|shstr_size
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|char
modifier|*
name|datau
init|=
name|v
operator|.
name|data
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|data
init|=
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|datau
operator|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|void
modifier|*
name|p
init|=
operator|::
name|memchr
argument_list|(
name|data
operator|+
name|sh_name
argument_list|,
literal|'\0'
argument_list|,
name|shstr_size
operator|-
name|sh_name
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|p
operator|==
name|NULL
condition|)
name|file
operator|->
name|error
argument_list|(
name|_
argument_list|(
literal|"missing null terminator for name of section %u"
argument_list|)
argument_list|,
name|shndx
argument_list|)
expr_stmt|;
end_if

begin_decl_stmt
name|size_t
name|len
init|=
name|static_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|p
operator|)
operator|-
operator|(
name|data
operator|+
name|sh_name
operator|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|std
operator|::
name|string
argument_list|(
name|data
operator|+
name|sh_name
argument_list|,
name|len
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// Return the contents of section SHNDX.
end_comment

begin_expr_stmt
unit|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|File
operator|>
name|typename
name|File
operator|::
name|Location
name|Elf_file
operator|<
name|size
operator|,
name|big_endian
operator|,
name|File
operator|>
operator|::
name|section_contents
argument_list|(
argument|unsigned int shndx
argument_list|)
block|{
name|File
operator|*
specifier|const
name|file
operator|=
name|this
operator|->
name|file_
block|;
if|if
condition|(
name|shndx
operator|>=
name|this
operator|->
name|shnum
argument_list|()
condition|)
name|file
operator|->
name|error
argument_list|(
name|_
argument_list|(
literal|"section_contents: bad shndx %u>= %u"
argument_list|)
argument_list|,
name|shndx
argument_list|,
name|this
operator|->
name|shnum
argument_list|()
argument_list|)
expr_stmt|;
name|typename
name|File
operator|::
name|View
name|v
argument_list|(
name|file
operator|->
name|view
argument_list|(
name|this
operator|->
name|section_header_offset
argument_list|(
name|shndx
argument_list|)
argument_list|,
name|This
operator|::
name|shdr_size
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Ef_shdr
name|shdr
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|typename
name|File
operator|::
name|Location
argument_list|(
name|shdr
operator|.
name|get_sh_offset
argument_list|()
argument_list|,
name|shdr
operator|.
name|get_sh_size
argument_list|()
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// Return the section flags of section SHNDX.
end_comment

begin_expr_stmt
unit|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|File
operator|>
name|typename
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|Elf_file
operator|<
name|size
operator|,
name|big_endian
operator|,
name|File
operator|>
operator|::
name|section_flags
argument_list|(
argument|unsigned int shndx
argument_list|)
block|{
name|File
operator|*
specifier|const
name|file
operator|=
name|this
operator|->
name|file_
block|;
if|if
condition|(
name|shndx
operator|>=
name|this
operator|->
name|shnum
argument_list|()
condition|)
name|file
operator|->
name|error
argument_list|(
name|_
argument_list|(
literal|"section_flags: bad shndx %u>= %u"
argument_list|)
argument_list|,
name|shndx
argument_list|,
name|this
operator|->
name|shnum
argument_list|()
argument_list|)
expr_stmt|;
name|typename
name|File
operator|::
name|View
name|v
argument_list|(
name|file
operator|->
name|view
argument_list|(
name|this
operator|->
name|section_header_offset
argument_list|(
name|shndx
argument_list|)
argument_list|,
name|This
operator|::
name|shdr_size
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Ef_shdr
name|shdr
argument_list|(
name|v
operator|.
name|data
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|shdr
operator|.
name|get_sh_flags
argument_list|()
return|;
end_return

begin_comment
unit|}  }
comment|// End namespace elfcpp.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !defined(ELFCPP_FILE_H)
end_comment

end_unit

