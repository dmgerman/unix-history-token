begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2015, Juniper Networks, Inc.  * All rights reserved.  * This SOFTWARE is licensed under the LICENSE provided in the  * ../Copyright file. By downloading, installing, copying, or otherwise  * using the SOFTWARE, you agree to be bound by the terms of that  * LICENSE.  * Phil Shafer, August 2015  */
end_comment

begin_comment
comment|/*  * This file is an _internal_ part of the libxo plumbing, not suitable  * for external use.  It is not considered part of the libxo API and  * will not be a stable part of that API.  Mine, not your's, dude...  * The real hope is that something like this will become a standard part  * of libc and I can kill this off.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XO_BUF_H
end_ifndef

begin_define
define|#
directive|define
name|XO_BUF_H
end_define

begin_define
define|#
directive|define
name|XO_BUFSIZ
value|(8*1024)
end_define

begin_comment
comment|/* Initial buffer size */
end_comment

begin_define
define|#
directive|define
name|XO_BUF_HIGH_WATER
value|(XO_BUFSIZ - 512)
end_define

begin_comment
comment|/* When to auto-flush */
end_comment

begin_comment
comment|/*  * xo_buffer_t: a memory buffer that can be grown as needed.  We  * use them for building format strings and output data.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xo_buffer_s
block|{
name|char
modifier|*
name|xb_bufp
decl_stmt|;
comment|/* Buffer memory */
name|char
modifier|*
name|xb_curp
decl_stmt|;
comment|/* Current insertion point */
name|ssize_t
name|xb_size
decl_stmt|;
comment|/* Size of buffer */
block|}
name|xo_buffer_t
typedef|;
end_typedef

begin_comment
comment|/*  * Initialize the contents of an xo_buffer_t.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|xo_buf_init
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|)
block|{
name|xbp
operator|->
name|xb_size
operator|=
name|XO_BUFSIZ
expr_stmt|;
name|xbp
operator|->
name|xb_bufp
operator|=
name|xo_realloc
argument_list|(
name|NULL
argument_list|,
name|xbp
operator|->
name|xb_size
argument_list|)
expr_stmt|;
name|xbp
operator|->
name|xb_curp
operator|=
name|xbp
operator|->
name|xb_bufp
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Reset the buffer to empty  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|xo_buf_reset
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|)
block|{
name|xbp
operator|->
name|xb_curp
operator|=
name|xbp
operator|->
name|xb_bufp
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Return the number of bytes left in the buffer  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|xo_buf_left
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|)
block|{
return|return
name|xbp
operator|->
name|xb_size
operator|-
operator|(
name|xbp
operator|->
name|xb_curp
operator|-
name|xbp
operator|->
name|xb_bufp
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * See if the buffer to empty  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|xo_buf_is_empty
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|)
block|{
return|return
operator|(
name|xbp
operator|->
name|xb_curp
operator|==
name|xbp
operator|->
name|xb_bufp
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Return the current offset  */
end_comment

begin_function
specifier|static
specifier|inline
name|unsigned
name|xo_buf_offset
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|)
block|{
return|return
name|xbp
condition|?
operator|(
name|xbp
operator|->
name|xb_curp
operator|-
name|xbp
operator|->
name|xb_bufp
operator|)
else|:
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|xo_buf_data
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|,
name|unsigned
name|offset
parameter_list|)
block|{
if|if
condition|(
name|xbp
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
return|return
name|xbp
operator|->
name|xb_bufp
operator|+
name|offset
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|xo_buf_cur
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|)
block|{
if|if
condition|(
name|xbp
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
return|return
name|xbp
operator|->
name|xb_curp
return|;
block|}
end_function

begin_comment
comment|/*  * Initialize the contents of an xo_buffer_t.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|xo_buf_cleanup
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|)
block|{
if|if
condition|(
name|xbp
operator|->
name|xb_bufp
condition|)
name|xo_free
argument_list|(
name|xbp
operator|->
name|xb_bufp
argument_list|)
expr_stmt|;
name|bzero
argument_list|(
name|xbp
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|xbp
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Does the buffer have room for the given number of bytes of data?  * If not, realloc the buffer to make room.  If that fails, we  * return 0 to tell the caller they are in trouble.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|xo_buf_has_room
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|,
name|ssize_t
name|len
parameter_list|)
block|{
if|if
condition|(
name|xbp
operator|->
name|xb_curp
operator|+
name|len
operator|>=
name|xbp
operator|->
name|xb_bufp
operator|+
name|xbp
operator|->
name|xb_size
condition|)
block|{
name|ssize_t
name|sz
init|=
name|xbp
operator|->
name|xb_size
operator|+
name|XO_BUFSIZ
decl_stmt|;
name|char
modifier|*
name|bp
init|=
name|xo_realloc
argument_list|(
name|xbp
operator|->
name|xb_bufp
argument_list|,
name|sz
argument_list|)
decl_stmt|;
if|if
condition|(
name|bp
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
name|xbp
operator|->
name|xb_curp
operator|=
name|bp
operator|+
operator|(
name|xbp
operator|->
name|xb_curp
operator|-
name|xbp
operator|->
name|xb_bufp
operator|)
expr_stmt|;
name|xbp
operator|->
name|xb_bufp
operator|=
name|bp
expr_stmt|;
name|xbp
operator|->
name|xb_size
operator|=
name|sz
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
end_function

begin_comment
comment|/*  * Append the given string to the given buffer  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|xo_buf_append
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|ssize_t
name|len
parameter_list|)
block|{
if|if
condition|(
operator|!
name|xo_buf_has_room
argument_list|(
name|xbp
argument_list|,
name|len
argument_list|)
condition|)
return|return;
name|memcpy
argument_list|(
name|xbp
operator|->
name|xb_curp
argument_list|,
name|str
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|xbp
operator|->
name|xb_curp
operator|+=
name|len
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Append the given NUL-terminated string to the given buffer  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|xo_buf_append_str
parameter_list|(
name|xo_buffer_t
modifier|*
name|xbp
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
name|ssize_t
name|len
init|=
name|strlen
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|xo_buf_has_room
argument_list|(
name|xbp
argument_list|,
name|len
argument_list|)
condition|)
return|return;
name|memcpy
argument_list|(
name|xbp
operator|->
name|xb_curp
argument_list|,
name|str
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|xbp
operator|->
name|xb_curp
operator|+=
name|len
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XO_BUF_H */
end_comment

end_unit

