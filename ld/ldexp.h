begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ldexp.h -    Copyright 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001, 2002,    2003, 2004, 2005 Free Software Foundation, Inc.     This file is part of GLD, the Gnu Linker.     GLD is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     GLD is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with GLD; see the file COPYING.  If not, write to the Free    Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA    02110-1301, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDEXP_H
end_ifndef

begin_define
define|#
directive|define
name|LDEXP_H
end_define

begin_comment
comment|/* The result of an expression tree */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|bfd_vma
name|value
decl_stmt|;
name|char
modifier|*
name|str
decl_stmt|;
name|asection
modifier|*
name|section
decl_stmt|;
name|bfd_boolean
name|valid_p
decl_stmt|;
block|}
name|etree_value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|node_code
decl_stmt|;
enum|enum
block|{
name|etree_binary
block|,
name|etree_trinary
block|,
name|etree_unary
block|,
name|etree_name
block|,
name|etree_assign
block|,
name|etree_provide
block|,
name|etree_provided
block|,
name|etree_value
block|,
name|etree_assert
block|,
name|etree_rel
block|}
name|node_class
enum|;
block|}
name|node_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|etree_union
block|{
name|node_type
name|type
decl_stmt|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|union
name|etree_union
modifier|*
name|lhs
decl_stmt|;
name|union
name|etree_union
modifier|*
name|rhs
decl_stmt|;
block|}
name|binary
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|union
name|etree_union
modifier|*
name|cond
decl_stmt|;
name|union
name|etree_union
modifier|*
name|lhs
decl_stmt|;
name|union
name|etree_union
modifier|*
name|rhs
decl_stmt|;
block|}
name|trinary
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|dst
decl_stmt|;
name|union
name|etree_union
modifier|*
name|src
decl_stmt|;
name|bfd_boolean
name|hidden
decl_stmt|;
block|}
name|assign
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|union
name|etree_union
modifier|*
name|child
decl_stmt|;
block|}
name|unary
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
name|name
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|bfd_vma
name|value
decl_stmt|;
name|char
modifier|*
name|str
decl_stmt|;
block|}
name|value
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|asection
modifier|*
name|section
decl_stmt|;
name|bfd_vma
name|value
decl_stmt|;
block|}
name|rel
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|union
name|etree_union
modifier|*
name|child
decl_stmt|;
specifier|const
name|char
modifier|*
name|message
decl_stmt|;
block|}
name|assert_s
struct|;
block|}
name|etree_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|lang_first_phase_enum
block|,
name|lang_mark_phase_enum
block|,
name|lang_allocating_phase_enum
block|,
name|lang_final_phase_enum
block|}
name|lang_phase_type
typedef|;
end_typedef

begin_struct
struct|struct
name|ldexp_control
block|{
comment|/* Modify expression evaluation depending on this.  */
name|lang_phase_type
name|phase
decl_stmt|;
comment|/* Principally used for diagnostics.  */
name|bfd_boolean
name|assigning_to_dot
decl_stmt|;
comment|/* Working results.  */
name|etree_value_type
name|result
decl_stmt|;
name|bfd_vma
name|dot
decl_stmt|;
comment|/* Current dot and section passed to ldexp folder.  */
name|bfd_vma
modifier|*
name|dotp
decl_stmt|;
name|asection
modifier|*
name|section
decl_stmt|;
comment|/* State machine and results for DATASEG.  */
struct|struct
block|{
enum|enum
block|{
name|exp_dataseg_none
block|,
name|exp_dataseg_align_seen
block|,
name|exp_dataseg_relro_seen
block|,
name|exp_dataseg_end_seen
block|,
name|exp_dataseg_relro_adjust
block|,
name|exp_dataseg_adjust
block|}
name|phase
enum|;
name|bfd_vma
name|base
decl_stmt|,
name|min_base
decl_stmt|,
name|relro_end
decl_stmt|,
name|end
decl_stmt|,
name|pagesize
decl_stmt|,
name|maxpagesize
decl_stmt|;
block|}
name|dataseg
struct|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|ldexp_control
name|expld
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* A maps from a segment name to a base address.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|segment_struct
block|{
comment|/* The next segment in the linked list.  */
name|struct
name|segment_struct
modifier|*
name|next
decl_stmt|;
comment|/* The name of the sgement.  */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* The base address for the segment.  */
name|bfd_vma
name|value
decl_stmt|;
comment|/* True if a SEGMENT_START directive corresponding to this segment      has been seen.  */
name|bfd_boolean
name|used
decl_stmt|;
block|}
name|segment_type
typedef|;
end_typedef

begin_comment
comment|/* The segments specified by the user on the command-line.  */
end_comment

begin_decl_stmt
specifier|extern
name|segment_type
modifier|*
name|segments
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|struct
name|_fill_type
name|fill_type
typedef|;
end_typedef

begin_function_decl
name|etree_type
modifier|*
name|exp_intop
parameter_list|(
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|etree_type
modifier|*
name|exp_bigintop
parameter_list|(
name|bfd_vma
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|etree_type
modifier|*
name|exp_relop
parameter_list|(
name|asection
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|exp_fold_tree
parameter_list|(
name|etree_type
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd_vma
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|etree_type
modifier|*
name|exp_binop
parameter_list|(
name|int
parameter_list|,
name|etree_type
modifier|*
parameter_list|,
name|etree_type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|etree_type
modifier|*
name|exp_trinop
parameter_list|(
name|int
parameter_list|,
name|etree_type
modifier|*
parameter_list|,
name|etree_type
modifier|*
parameter_list|,
name|etree_type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|etree_type
modifier|*
name|exp_unop
parameter_list|(
name|int
parameter_list|,
name|etree_type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|etree_type
modifier|*
name|exp_nameop
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|etree_type
modifier|*
name|exp_assop
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|etree_type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|etree_type
modifier|*
name|exp_provide
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|etree_type
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|etree_type
modifier|*
name|exp_assert
parameter_list|(
name|etree_type
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|exp_print_tree
parameter_list|(
name|etree_type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_vma
name|exp_get_vma
parameter_list|(
name|etree_type
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exp_get_value_int
parameter_list|(
name|etree_type
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|fill_type
modifier|*
name|exp_get_fill
parameter_list|(
name|etree_type
modifier|*
parameter_list|,
name|fill_type
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_vma
name|exp_get_abs_int
parameter_list|(
name|etree_type
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

