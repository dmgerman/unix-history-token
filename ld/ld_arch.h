begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011,2012 Kai Wang  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $Id: ld_arch.h 2913 2013-02-16 07:15:24Z kaiwang27 $  */
end_comment

begin_define
define|#
directive|define
name|MAX_ARCH_NAME_LEN
value|64
end_define

begin_define
define|#
directive|define
name|MAX_TARGET_NAME_LEN
value|128
end_define

begin_struct_decl
struct_decl|struct
name|ld_input_section
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ld_reloc_entry
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ld_arch
block|{
name|char
name|name
index|[
name|MAX_ARCH_NAME_LEN
operator|+
literal|1
index|]
decl_stmt|;
name|char
modifier|*
name|script
decl_stmt|;
specifier|const
name|char
modifier|*
name|interp
decl_stmt|;
name|uint64_t
function_decl|(
modifier|*
name|get_max_page_size
function_decl|)
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|)
function_decl|;
name|uint64_t
function_decl|(
modifier|*
name|get_common_page_size
function_decl|)
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|scan_reloc
function_decl|)
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|struct
name|ld_input_section
modifier|*
parameter_list|,
name|struct
name|ld_reloc_entry
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|adjust_reloc
function_decl|)
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|struct
name|ld_input_section
modifier|*
parameter_list|,
name|struct
name|ld_reloc_entry
modifier|*
parameter_list|,
name|struct
name|ld_symbol
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|process_reloc
function_decl|)
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|struct
name|ld_input_section
modifier|*
parameter_list|,
name|struct
name|ld_reloc_entry
modifier|*
parameter_list|,
name|struct
name|ld_symbol
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|finalize_reloc
function_decl|)
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|struct
name|ld_input_section
modifier|*
parameter_list|,
name|struct
name|ld_reloc_entry
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|finalize_got_and_plt
function_decl|)
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|is_absolute_reloc
function_decl|)
parameter_list|(
name|uint64_t
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|is_relative_reloc
function_decl|)
parameter_list|(
name|uint64_t
parameter_list|)
function_decl|;
name|unsigned
name|char
name|reloc_is_64bit
decl_stmt|;
name|unsigned
name|char
name|reloc_is_rela
decl_stmt|;
name|size_t
name|reloc_entsize
decl_stmt|;
name|UT_hash_handle
name|hh
decl_stmt|;
name|struct
name|ld_arch
modifier|*
name|alias
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|ld_arch_init
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ld_arch_equal
parameter_list|(
name|struct
name|ld_arch
modifier|*
parameter_list|,
name|struct
name|ld_arch
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_arch
modifier|*
name|ld_arch_find
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_arch
modifier|*
name|ld_arch_guess_arch_name
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ld_arch_set
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ld_arch_set_from_target
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ld_arch_verify
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

end_unit

