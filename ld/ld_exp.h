begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011,2012 Kai Wang  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $Id: ld_exp.h 2525 2012-07-17 17:36:19Z kaiwang27 $  */
end_comment

begin_enum
enum|enum
name|ld_exp_op
block|{
name|LEOP_ABS
block|,
name|LEOP_ADD
block|,
name|LEOP_ADDR
block|,
name|LEOP_ALIGN
block|,
name|LEOP_ALIGNOF
block|,
name|LEOP_AND
block|,
name|LEOP_ASSIGN
block|,
name|LEOP_BLOCK
block|,
name|LEOP_CONSTANT
block|,
name|LEOP_DIV
block|,
name|LEOP_DSA
block|,
name|LEOP_DSE
block|,
name|LEOP_DSRE
block|,
name|LEOP_DEFINED
block|,
name|LEOP_EQUAL
block|,
name|LEOP_GE
block|,
name|LEOP_GREATER
block|,
name|LEOP_LENGTH
block|,
name|LEOP_LE
block|,
name|LEOP_LESSER
block|,
name|LEOP_LOADADDR
block|,
name|LEOP_LOGICAL_AND
block|,
name|LEOP_LOGICAL_OR
block|,
name|LEOP_LSHIFT
block|,
name|LEOP_MAX
block|,
name|LEOP_MIN
block|,
name|LEOP_MINUS
block|,
name|LEOP_MOD
block|,
name|LEOP_MUL
block|,
name|LEOP_NE
block|,
name|LEOP_NEGATION
block|,
name|LEOP_NEXT
block|,
name|LEOP_NOT
block|,
name|LEOP_OR
block|,
name|LEOP_ORIGIN
block|,
name|LEOP_RSHIFT
block|,
name|LEOP_SEGMENT_START
block|,
name|LEOP_SIZEOF
block|,
name|LEOP_SIZEOF_HEADERS
block|,
name|LEOP_SECTION_NAME
block|,
name|LEOP_SUBSTRACT
block|,
name|LEOP_SYMBOL
block|,
name|LEOP_SYMBOLIC_CONSTANT
block|,
name|LEOP_TRINARY
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ld_exp
block|{
name|enum
name|ld_exp_op
name|le_op
decl_stmt|;
comment|/* expression operator */
name|struct
name|ld_exp
modifier|*
name|le_e1
decl_stmt|;
comment|/* fisrt operand */
name|struct
name|ld_exp
modifier|*
name|le_e2
decl_stmt|;
comment|/* second operand */
name|struct
name|ld_exp
modifier|*
name|le_e3
decl_stmt|;
comment|/* third operand */
name|struct
name|ld_script_assign
modifier|*
name|le_assign
decl_stmt|;
comment|/* assignment */
name|char
modifier|*
name|le_name
decl_stmt|;
comment|/* symbol/section name */
name|unsigned
name|le_par
decl_stmt|;
comment|/* parenthesis */
name|int64_t
name|le_val
decl_stmt|;
comment|/* constant value */
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|ld_exp
modifier|*
name|ld_exp_assign
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|struct
name|ld_script_assign
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_exp
modifier|*
name|ld_exp_binary
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|enum
name|ld_exp_op
parameter_list|,
name|struct
name|ld_exp
modifier|*
parameter_list|,
name|struct
name|ld_exp
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_exp
modifier|*
name|ld_exp_constant
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|int64_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int64_t
name|ld_exp_eval
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|struct
name|ld_exp
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ld_exp_dump
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|struct
name|ld_exp
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_exp
modifier|*
name|ld_exp_name
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_exp
modifier|*
name|ld_exp_sizeof_headers
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_exp
modifier|*
name|ld_exp_symbol
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_exp
modifier|*
name|ld_exp_symbolic_constant
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_exp
modifier|*
name|ld_exp_trinary
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|struct
name|ld_exp
modifier|*
parameter_list|,
name|struct
name|ld_exp
modifier|*
parameter_list|,
name|struct
name|ld_exp
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ld_exp
modifier|*
name|ld_exp_unary
parameter_list|(
name|struct
name|ld
modifier|*
parameter_list|,
name|enum
name|ld_exp_op
parameter_list|,
name|struct
name|ld_exp
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ld_exp_free
parameter_list|(
name|struct
name|ld_exp
modifier|*
parameter_list|)
function_decl|;
end_function_decl

end_unit

