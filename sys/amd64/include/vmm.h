begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011 NetApp, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY NETAPP, INC ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL NETAPP, INC OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_VMM_H_
end_ifndef

begin_define
define|#
directive|define
name|_VMM_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_define
define|#
directive|define
name|VM_MAX_NAMELEN
value|32
end_define

begin_struct_decl
struct_decl|struct
name|vm
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vm_memory_segment
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|seg_desc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vm_exit
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vm_run
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vhpet
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vioapic
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vlapic
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vmspace
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vm_object
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|pmap
struct_decl|;
end_struct_decl

begin_enum_decl
enum_decl|enum
name|x2apic_state
enum_decl|;
end_enum_decl

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmm_init_func_t
function_decl|)
parameter_list|(
name|int
name|ipinum
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmm_cleanup_func_t
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|vmm_resume_func_t
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
modifier|*
function_decl|(
modifier|*
name|vmi_init_func_t
function_decl|)
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|struct
name|pmap
modifier|*
name|pmap
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmi_run_func_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|register_t
name|rip
parameter_list|,
name|struct
name|pmap
modifier|*
name|pmap
parameter_list|,
name|void
modifier|*
name|rendezvous_cookie
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|vmi_cleanup_func_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmi_get_register_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|num
parameter_list|,
name|uint64_t
modifier|*
name|retval
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmi_set_register_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|num
parameter_list|,
name|uint64_t
name|val
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmi_get_desc_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|num
parameter_list|,
name|struct
name|seg_desc
modifier|*
name|desc
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmi_set_desc_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|num
parameter_list|,
name|struct
name|seg_desc
modifier|*
name|desc
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmi_inject_event_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|vector
parameter_list|,
name|uint32_t
name|code
parameter_list|,
name|int
name|code_valid
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmi_get_cap_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|num
parameter_list|,
name|int
modifier|*
name|retval
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vmi_set_cap_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|num
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|vmspace
modifier|*
function_decl|(
modifier|*
name|vmi_vmspace_alloc
function_decl|)
parameter_list|(
name|vm_offset_t
name|min
parameter_list|,
name|vm_offset_t
name|max
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|vmi_vmspace_free
function_decl|)
parameter_list|(
name|struct
name|vmspace
modifier|*
name|vmspace
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|vlapic
modifier|*
function_decl|(
modifier|*
name|vmi_vlapic_init
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|int
name|vcpu
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|vmi_vlapic_cleanup
function_decl|)
parameter_list|(
name|void
modifier|*
name|vmi
parameter_list|,
name|struct
name|vlapic
modifier|*
name|vlapic
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|vmm_ops
block|{
name|vmm_init_func_t
name|init
decl_stmt|;
comment|/* module wide initialization */
name|vmm_cleanup_func_t
name|cleanup
decl_stmt|;
name|vmm_resume_func_t
name|resume
decl_stmt|;
name|vmi_init_func_t
name|vminit
decl_stmt|;
comment|/* vm-specific initialization */
name|vmi_run_func_t
name|vmrun
decl_stmt|;
name|vmi_cleanup_func_t
name|vmcleanup
decl_stmt|;
name|vmi_get_register_t
name|vmgetreg
decl_stmt|;
name|vmi_set_register_t
name|vmsetreg
decl_stmt|;
name|vmi_get_desc_t
name|vmgetdesc
decl_stmt|;
name|vmi_set_desc_t
name|vmsetdesc
decl_stmt|;
name|vmi_inject_event_t
name|vminject
decl_stmt|;
name|vmi_get_cap_t
name|vmgetcap
decl_stmt|;
name|vmi_set_cap_t
name|vmsetcap
decl_stmt|;
name|vmi_vmspace_alloc
name|vmspace_alloc
decl_stmt|;
name|vmi_vmspace_free
name|vmspace_free
decl_stmt|;
name|vmi_vlapic_init
name|vlapic_init
decl_stmt|;
name|vmi_vlapic_cleanup
name|vlapic_cleanup
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vmm_ops
name|vmm_ops_intel
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|vmm_ops
name|vmm_ops_amd
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|vm_create
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|vm
modifier|*
modifier|*
name|retvm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vm_destroy
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|vm_name
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_malloc
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|vm_paddr_t
name|gpa
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_map_mmio
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|vm_paddr_t
name|gpa
parameter_list|,
name|size_t
name|len
parameter_list|,
name|vm_paddr_t
name|hpa
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_unmap_mmio
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|vm_paddr_t
name|gpa
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|vm_gpa_hold
parameter_list|(
name|struct
name|vm
modifier|*
parameter_list|,
name|vm_paddr_t
name|gpa
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|prot
parameter_list|,
name|void
modifier|*
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vm_gpa_release
parameter_list|(
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_gpabase2memseg
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|vm_paddr_t
name|gpabase
parameter_list|,
name|struct
name|vm_memory_segment
modifier|*
name|seg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_get_memobj
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|vm_paddr_t
name|gpa
parameter_list|,
name|size_t
name|len
parameter_list|,
name|vm_offset_t
modifier|*
name|offset
parameter_list|,
name|struct
name|vm_object
modifier|*
modifier|*
name|object
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|boolean_t
name|vm_mem_allocated
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|vm_paddr_t
name|gpa
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_get_register
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint64_t
modifier|*
name|retval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_set_register
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint64_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_get_seg_desc
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|reg
parameter_list|,
name|struct
name|seg_desc
modifier|*
name|ret_desc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_set_seg_desc
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|reg
parameter_list|,
name|struct
name|seg_desc
modifier|*
name|desc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_run
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|struct
name|vm_run
modifier|*
name|vmrun
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_inject_event
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|vector
parameter_list|,
name|uint32_t
name|error_code
parameter_list|,
name|int
name|error_code_valid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_inject_nmi
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_nmi_pending
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpuid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vm_nmi_clear
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpuid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
modifier|*
name|vm_guest_msrs
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|vlapic
modifier|*
name|vm_lapic
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|vioapic
modifier|*
name|vm_ioapic
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|vhpet
modifier|*
name|vm_hpet
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_get_capability
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|type
parameter_list|,
name|int
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_set_capability
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_get_x2apic_state
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|enum
name|x2apic_state
modifier|*
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_set_x2apic_state
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|enum
name|x2apic_state
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_apicid2vcpuid
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|apicid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vm_activate_cpu
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|cpuset_t
name|vm_active_cpus
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|vm_exit
modifier|*
name|vm_exitinfo
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpuid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Rendezvous all vcpus specified in 'dest' and execute 'func(arg)'.  * The rendezvous 'func(arg)' is not allowed to do anything that will  * cause the thread to be put to sleep.  *  * If the rendezvous is being initiated from a vcpu context then the  * 'vcpuid' must refer to that vcpu, otherwise it should be set to -1.  *  * The caller cannot hold any locks when initiating the rendezvous.  *  * The implementation of this API may cause vcpus other than those specified  * by 'dest' to be stalled. The caller should not rely on any vcpus making  * forward progress when the rendezvous is in progress.  */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|vm_rendezvous_func_t
function_decl|)
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpuid
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|void
name|vm_smp_rendezvous
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpuid
parameter_list|,
name|cpuset_t
name|dest
parameter_list|,
name|vm_rendezvous_func_t
name|func
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|vcpu_rendezvous_pending
parameter_list|(
name|void
modifier|*
name|rendezvous_cookie
parameter_list|)
block|{
return|return
operator|(
operator|*
operator|(
name|uintptr_t
operator|*
operator|)
name|rendezvous_cookie
operator|!=
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Return 1 if device indicated by bus/slot/func is supposed to be a  * pci passthrough device.  *  * Return 0 otherwise.  */
end_comment

begin_function_decl
name|int
name|vmm_is_pptdev
parameter_list|(
name|int
name|bus
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|func
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|vm_iommu_domain
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|vcpu_state
block|{
name|VCPU_IDLE
block|,
name|VCPU_FROZEN
block|,
name|VCPU_RUNNING
block|,
name|VCPU_SLEEPING
block|, }
enum|;
end_enum

begin_function_decl
name|int
name|vcpu_set_state
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|enum
name|vcpu_state
name|state
parameter_list|,
name|bool
name|from_idle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|vcpu_state
name|vcpu_get_state
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
modifier|*
name|hostcpu
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|int
name|__inline
name|vcpu_is_running
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
modifier|*
name|hostcpu
parameter_list|)
block|{
return|return
operator|(
name|vcpu_get_state
argument_list|(
name|vm
argument_list|,
name|vcpu
argument_list|,
name|hostcpu
argument_list|)
operator|==
name|VCPU_RUNNING
operator|)
return|;
block|}
end_function

begin_function_decl
name|void
modifier|*
name|vcpu_stats
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vcpu_notify_event
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|vcpuid
parameter_list|,
name|bool
name|lapic_intr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|vmspace
modifier|*
name|vm_get_vmspace
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_assign_pptdev
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|bus
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|func
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vm_unassign_pptdev
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|bus
parameter_list|,
name|int
name|slot
parameter_list|,
name|int
name|func
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* KERNEL */
end_comment

begin_include
include|#
directive|include
file|<machine/vmm_instruction_emul.h>
end_include

begin_define
define|#
directive|define
name|VM_MAXCPU
value|16
end_define

begin_comment
comment|/* maximum virtual cpus */
end_comment

begin_comment
comment|/*  * Identifiers for events that can be injected into the VM  */
end_comment

begin_enum
enum|enum
name|vm_event_type
block|{
name|VM_EVENT_NONE
block|,
name|VM_HW_INTR
block|,
name|VM_NMI
block|,
name|VM_HW_EXCEPTION
block|,
name|VM_SW_INTR
block|,
name|VM_PRIV_SW_EXCEPTION
block|,
name|VM_SW_EXCEPTION
block|,
name|VM_EVENT_MAX
block|}
enum|;
end_enum

begin_comment
comment|/*  * Identifiers for architecturally defined registers.  */
end_comment

begin_enum
enum|enum
name|vm_reg_name
block|{
name|VM_REG_GUEST_RAX
block|,
name|VM_REG_GUEST_RBX
block|,
name|VM_REG_GUEST_RCX
block|,
name|VM_REG_GUEST_RDX
block|,
name|VM_REG_GUEST_RSI
block|,
name|VM_REG_GUEST_RDI
block|,
name|VM_REG_GUEST_RBP
block|,
name|VM_REG_GUEST_R8
block|,
name|VM_REG_GUEST_R9
block|,
name|VM_REG_GUEST_R10
block|,
name|VM_REG_GUEST_R11
block|,
name|VM_REG_GUEST_R12
block|,
name|VM_REG_GUEST_R13
block|,
name|VM_REG_GUEST_R14
block|,
name|VM_REG_GUEST_R15
block|,
name|VM_REG_GUEST_CR0
block|,
name|VM_REG_GUEST_CR3
block|,
name|VM_REG_GUEST_CR4
block|,
name|VM_REG_GUEST_DR7
block|,
name|VM_REG_GUEST_RSP
block|,
name|VM_REG_GUEST_RIP
block|,
name|VM_REG_GUEST_RFLAGS
block|,
name|VM_REG_GUEST_ES
block|,
name|VM_REG_GUEST_CS
block|,
name|VM_REG_GUEST_SS
block|,
name|VM_REG_GUEST_DS
block|,
name|VM_REG_GUEST_FS
block|,
name|VM_REG_GUEST_GS
block|,
name|VM_REG_GUEST_LDTR
block|,
name|VM_REG_GUEST_TR
block|,
name|VM_REG_GUEST_IDTR
block|,
name|VM_REG_GUEST_GDTR
block|,
name|VM_REG_GUEST_EFER
block|,
name|VM_REG_LAST
block|}
enum|;
end_enum

begin_comment
comment|/*  * Identifiers for optional vmm capabilities  */
end_comment

begin_enum
enum|enum
name|vm_cap_type
block|{
name|VM_CAP_HALT_EXIT
block|,
name|VM_CAP_MTRAP_EXIT
block|,
name|VM_CAP_PAUSE_EXIT
block|,
name|VM_CAP_UNRESTRICTED_GUEST
block|,
name|VM_CAP_ENABLE_INVPCID
block|,
name|VM_CAP_MAX
block|}
enum|;
end_enum

begin_enum
enum|enum
name|x2apic_state
block|{
name|X2APIC_ENABLED
block|,
name|X2APIC_AVAILABLE
block|,
name|X2APIC_DISABLED
block|,
name|X2APIC_STATE_LAST
block|}
enum|;
end_enum

begin_comment
comment|/*  * The 'access' field has the format specified in Table 21-2 of the Intel  * Architecture Manual vol 3b.  *  * XXX The contents of the 'access' field are architecturally defined except  * bit 16 - Segment Unusable.  */
end_comment

begin_struct
struct|struct
name|seg_desc
block|{
name|uint64_t
name|base
decl_stmt|;
name|uint32_t
name|limit
decl_stmt|;
name|uint32_t
name|access
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|vm_exitcode
block|{
name|VM_EXITCODE_INOUT
block|,
name|VM_EXITCODE_VMX
block|,
name|VM_EXITCODE_BOGUS
block|,
name|VM_EXITCODE_RDMSR
block|,
name|VM_EXITCODE_WRMSR
block|,
name|VM_EXITCODE_HLT
block|,
name|VM_EXITCODE_MTRAP
block|,
name|VM_EXITCODE_PAUSE
block|,
name|VM_EXITCODE_PAGING
block|,
name|VM_EXITCODE_INST_EMUL
block|,
name|VM_EXITCODE_SPINUP_AP
block|,
name|VM_EXITCODE_SPINDOWN_CPU
block|,
name|VM_EXITCODE_RENDEZVOUS
block|,
name|VM_EXITCODE_IOAPIC_EOI
block|,
name|VM_EXITCODE_MAX
block|}
enum|;
end_enum

begin_struct
struct|struct
name|vm_exit
block|{
name|enum
name|vm_exitcode
name|exitcode
decl_stmt|;
name|int
name|inst_length
decl_stmt|;
comment|/* 0 means unknown */
name|uint64_t
name|rip
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint16_t
name|bytes
range|:
literal|3
decl_stmt|;
comment|/* 1 or 2 or 4 */
name|uint16_t
name|in
range|:
literal|1
decl_stmt|;
comment|/* out is 0, in is 1 */
name|uint16_t
name|string
range|:
literal|1
decl_stmt|;
name|uint16_t
name|rep
range|:
literal|1
decl_stmt|;
name|uint16_t
name|port
decl_stmt|;
name|uint32_t
name|eax
decl_stmt|;
comment|/* valid for out */
block|}
name|inout
struct|;
struct|struct
block|{
name|uint64_t
name|gpa
decl_stmt|;
name|int
name|fault_type
decl_stmt|;
block|}
name|paging
struct|;
struct|struct
block|{
name|uint64_t
name|gpa
decl_stmt|;
name|uint64_t
name|gla
decl_stmt|;
name|uint64_t
name|cr3
decl_stmt|;
name|struct
name|vie
name|vie
decl_stmt|;
block|}
name|inst_emul
struct|;
comment|/* 		 * VMX specific payload. Used when there is no "better" 		 * exitcode to represent the VM-exit. 		 */
struct|struct
block|{
name|int
name|status
decl_stmt|;
comment|/* vmx inst status */
comment|/* 			 * 'exit_reason' and 'exit_qualification' are valid 			 * only if 'status' is zero. 			 */
name|uint32_t
name|exit_reason
decl_stmt|;
name|uint64_t
name|exit_qualification
decl_stmt|;
comment|/* 			 * 'inst_error' and 'inst_type' are valid 			 * only if 'status' is non-zero. 			 */
name|int
name|inst_type
decl_stmt|;
name|int
name|inst_error
decl_stmt|;
block|}
name|vmx
struct|;
struct|struct
block|{
name|uint32_t
name|code
decl_stmt|;
comment|/* ecx value */
name|uint64_t
name|wval
decl_stmt|;
block|}
name|msr
struct|;
struct|struct
block|{
name|int
name|vcpu
decl_stmt|;
name|uint64_t
name|rip
decl_stmt|;
block|}
name|spinup_ap
struct|;
struct|struct
block|{
name|uint64_t
name|rflags
decl_stmt|;
block|}
name|hlt
struct|;
struct|struct
block|{
name|int
name|vector
decl_stmt|;
block|}
name|ioapic_eoi
struct|;
block|}
name|u
union|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _VMM_H_ */
end_comment

end_unit

