begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Functions to provide access to special i386 instructions.  * XXX - bezillions more are defined in locore.s but are not declared anywhere.  *  *	$Id: cpufunc.h,v 1.3 1993/10/16 14:39:08 rgrimes Exp $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_CPUFUNC_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_CPUFUNC_H_
value|1
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_function
specifier|static
name|__inline
name|int
name|bdb
parameter_list|(
name|void
parameter_list|)
block|{
specifier|extern
name|int
name|bdb_exists
decl_stmt|;
if|if
condition|(
operator|!
name|bdb_exists
condition|)
return|return
operator|(
literal|0
operator|)
return|;
asm|__asm("int $3");
return|return
operator|(
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|disable_intr
parameter_list|(
name|void
parameter_list|)
block|{
asm|__asm __volatile("cli");
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|enable_intr
parameter_list|(
name|void
parameter_list|)
block|{
asm|__asm __volatile("sti");
block|}
end_function

begin_comment
comment|/*  * This roundabout method of returning a u_char helps stop gcc-1.40 from  * generating unnecessary movzbl's.  */
end_comment

begin_define
define|#
directive|define
name|inb
parameter_list|(
name|port
parameter_list|)
value|((u_char) u_int_inb(port))
end_define

begin_function
specifier|static
name|__inline
name|u_int
name|u_int_inb
parameter_list|(
name|u_int
name|port
parameter_list|)
block|{
name|u_char
name|data
decl_stmt|;
comment|/* 	 * We use %%dx and not %1 here because i/o is done at %dx and not at 	 * %edx, while gcc-2.2.2 generates inferior code (movw instead of movl) 	 * if we tell it to load (u_short) port. 	 */
asm|__asm __volatile("inb %%dx,%0" : "=a" (data) : "d" (port));
return|return
name|data
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outb
parameter_list|(
name|u_int
name|port
parameter_list|,
name|u_char
name|data
parameter_list|)
block|{
specifier|register
name|u_char
name|al
name|asm
argument_list|(
literal|"ax"
argument_list|)
decl_stmt|;
name|al
operator|=
name|data
expr_stmt|;
comment|/* help gcc-1.40's register allocator */
asm|__asm __volatile("outb %0,%%dx" : : "a" (al), "d" (port));
block|}
end_function

begin_function
specifier|static
name|__inline__
name|imin
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
name|int
name|a
decl_stmt|,
name|b
decl_stmt|;
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|imax
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
name|int
name|a
decl_stmt|,
name|b
decl_stmt|;
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|unsigned
name|int
name|min
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
name|unsigned
name|int
name|a
decl_stmt|,
name|b
decl_stmt|;
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|unsigned
name|int
name|max
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
name|unsigned
name|int
name|a
decl_stmt|,
name|b
decl_stmt|;
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|long
name|lmin
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
name|long
name|a
decl_stmt|,
name|b
decl_stmt|;
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|long
name|lmax
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
name|long
name|a
decl_stmt|,
name|b
decl_stmt|;
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|unsigned
name|long
name|ulmin
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
name|unsigned
name|long
name|a
decl_stmt|,
name|b
decl_stmt|;
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|unsigned
name|long
name|ulmax
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
name|unsigned
name|long
name|a
decl_stmt|,
name|b
decl_stmt|;
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|ffs
parameter_list|(
name|mask
parameter_list|)
specifier|register
name|long
name|mask
decl_stmt|;
block|{
specifier|register
name|int
name|bit
decl_stmt|;
if|if
condition|(
operator|!
name|mask
condition|)
return|return
operator|(
literal|0
operator|)
return|;
for|for
control|(
name|bit
operator|=
literal|1
init|;
condition|;
operator|++
name|bit
control|)
block|{
if|if
condition|(
name|mask
operator|&
literal|0x01
condition|)
return|return
operator|(
name|bit
operator|)
return|;
name|mask
operator|>>=
literal|1
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline__
name|bcmp
parameter_list|(
name|v1
parameter_list|,
name|v2
parameter_list|,
name|len
parameter_list|)
name|void
modifier|*
name|v1
decl_stmt|,
decl|*
name|v2
decl_stmt|;
end_function

begin_decl_stmt
specifier|register
name|unsigned
name|len
decl_stmt|;
end_decl_stmt

begin_block
block|{
specifier|register
name|u_char
modifier|*
name|s1
init|=
name|v1
decl_stmt|,
modifier|*
name|s2
init|=
name|v2
decl_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
if|if
condition|(
operator|*
name|s1
operator|++
operator|!=
operator|*
name|s2
operator|++
condition|)
return|return
operator|(
literal|1
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_block

begin_function
specifier|static
name|__inline__
name|size_t
name|strlen
parameter_list|(
name|s1
parameter_list|)
specifier|register
name|__const__
name|char
modifier|*
name|s1
decl_stmt|;
block|{
specifier|register
name|size_t
name|len
decl_stmt|;
for|for
control|(
name|len
operator|=
literal|0
init|;
operator|*
name|s1
operator|++
operator|!=
literal|'\0'
condition|;
name|len
operator|++
control|)
empty_stmt|;
return|return
operator|(
name|len
operator|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* not __GNUC__ */
end_comment

begin_decl_stmt
name|int
name|bdb
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|disable_intr
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|enable_intr
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_char
name|inb
name|__P
argument_list|(
operator|(
name|u_int
name|port
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|outb
name|__P
argument_list|(
operator|(
name|u_int
name|port
operator|,
name|u_int
name|data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* XXX - incompat */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GNUC__ */
end_comment

begin_define
define|#
directive|define
name|really_u_int
value|int
end_define

begin_comment
comment|/* XXX */
end_comment

begin_define
define|#
directive|define
name|really_void
value|int
end_define

begin_comment
comment|/* XXX */
end_comment

begin_decl_stmt
name|void
name|load_cr0
name|__P
argument_list|(
operator|(
name|u_int
name|cr0
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|really_u_int
name|rcr0
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|notyet
end_ifdef

begin_decl_stmt
name|really_void
name|setidt
name|__P
argument_list|(
operator|(
name|int
name|idx
operator|,
comment|/*XXX*/
name|caddr_t
name|func
operator|,
name|int
name|typ
operator|,
name|int
name|dpl
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_undef
undef|#
directive|undef
name|really_u_int
end_undef

begin_undef
undef|#
directive|undef
name|really_void
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MACHINE_CPUFUNC_H_ */
end_comment

end_unit

