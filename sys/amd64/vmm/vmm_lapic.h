begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011 NetApp, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY NETAPP, INC ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL NETAPP, INC OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_VMM_LAPIC_H_
end_ifndef

begin_define
define|#
directive|define
name|_VMM_LAPIC_H_
end_define

begin_struct_decl
struct_decl|struct
name|vm
struct_decl|;
end_struct_decl

begin_function_decl
name|boolean_t
name|lapic_msr
parameter_list|(
name|u_int
name|num
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|lapic_rdmsr
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|,
name|u_int
name|msr
parameter_list|,
name|uint64_t
modifier|*
name|rval
parameter_list|,
name|bool
modifier|*
name|retu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|lapic_wrmsr
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|,
name|u_int
name|msr
parameter_list|,
name|uint64_t
name|wval
parameter_list|,
name|bool
modifier|*
name|retu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|lapic_mmio_read
parameter_list|(
name|void
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|,
name|uint64_t
name|gpa
parameter_list|,
name|uint64_t
modifier|*
name|rval
parameter_list|,
name|int
name|size
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|lapic_mmio_write
parameter_list|(
name|void
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|,
name|uint64_t
name|gpa
parameter_list|,
name|uint64_t
name|wval
parameter_list|,
name|int
name|size
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Returns a vector between 32 and 255 if an interrupt is pending in the  * IRR that can be delivered based on the current state of ISR and TPR.  *  * Note that the vector does not automatically transition to the ISR as a  * result of calling this function.  *  * Returns -1 if there is no eligible vector that can be delivered to the  * guest at this time.  */
end_comment

begin_function_decl
name|int
name|lapic_pending_intr
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Transition 'vector' from IRR to ISR. This function is called with the  * vector returned by 'lapic_pending_intr()' when the guest is able to  * accept this interrupt (i.e. RFLAGS.IF = 1 and no conditions exist that  * block interrupt delivery).  */
end_comment

begin_function_decl
name|void
name|lapic_intr_accepted
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|,
name|int
name|vector
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Signals to the LAPIC that an interrupt at 'vector' needs to be generated  * to the 'cpu', the state is recorded in IRR.  */
end_comment

begin_function_decl
name|int
name|lapic_set_intr
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|,
name|int
name|vector
parameter_list|,
name|bool
name|trig
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|LAPIC_TRIG_LEVEL
value|true
end_define

begin_define
define|#
directive|define
name|LAPIC_TRIG_EDGE
value|false
end_define

begin_function
specifier|static
name|__inline
name|int
name|lapic_intr_level
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|,
name|int
name|vector
parameter_list|)
block|{
return|return
operator|(
name|lapic_set_intr
argument_list|(
name|vm
argument_list|,
name|cpu
argument_list|,
name|vector
argument_list|,
name|LAPIC_TRIG_LEVEL
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|lapic_intr_edge
parameter_list|(
name|struct
name|vm
modifier|*
name|vm
parameter_list|,
name|int
name|cpu
parameter_list|,
name|int
name|vector
parameter_list|)
block|{
return|return
operator|(
name|lapic_set_intr
argument_list|(
name|vm
argument_list|,
name|cpu
argument_list|,
name|vector
argument_list|,
name|LAPIC_TRIG_EDGE
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

