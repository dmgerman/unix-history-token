begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011 NetApp, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY NETAPP, INC ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL NETAPP, INC OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_VDEV_H_
end_ifndef

begin_define
define|#
directive|define
name|_VDEV_H_
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|BYTE
init|=
literal|1
block|,
name|WORD
init|=
literal|2
block|,
name|DWORD
init|=
literal|4
block|,
name|QWORD
init|=
literal|8
block|, }
name|opsize_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|MMIO_READ
init|=
literal|1
block|,
name|MMIO_WRITE
init|=
literal|2
block|, }
name|region_attr_t
typedef|;
end_typedef

begin_struct
struct|struct
name|io_region
block|{
name|uint64_t
name|base
decl_stmt|;
name|uint64_t
name|len
decl_stmt|;
name|region_attr_t
name|attr
decl_stmt|;
name|int
name|vcpu
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vdev_init_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|dev
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vdev_reset_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|dev
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vdev_halt_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|dev
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vdev_memread_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|dev
parameter_list|,
name|uint64_t
name|gpa
parameter_list|,
name|opsize_t
name|size
parameter_list|,
name|uint64_t
modifier|*
name|data
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|vdev_memwrite_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|dev
parameter_list|,
name|uint64_t
name|gpa
parameter_list|,
name|opsize_t
name|size
parameter_list|,
name|uint64_t
name|data
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|vdev_ops
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|vdev_init_t
name|init
decl_stmt|;
name|vdev_reset_t
name|reset
decl_stmt|;
name|vdev_halt_t
name|halt
decl_stmt|;
name|vdev_memread_t
name|memread
decl_stmt|;
name|vdev_memwrite_t
name|memwrite
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|vdev_vm_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vdev_vm_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vdev_register
parameter_list|(
name|struct
name|vdev_ops
modifier|*
name|ops
parameter_list|,
name|void
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vdev_unregister
parameter_list|(
name|void
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vdev_register_region
parameter_list|(
name|struct
name|vdev_ops
modifier|*
name|ops
parameter_list|,
name|void
modifier|*
name|dev
parameter_list|,
name|struct
name|io_region
modifier|*
name|io
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vdev_unregister_region
parameter_list|(
name|void
modifier|*
name|dev
parameter_list|,
name|struct
name|io_region
modifier|*
name|io
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vdev_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vdev_reset
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vdev_halt
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vdev_memread
parameter_list|(
name|uint64_t
name|gpa
parameter_list|,
name|opsize_t
name|size
parameter_list|,
name|uint64_t
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|vdev_memwrite
parameter_list|(
name|uint64_t
name|gpa
parameter_list|,
name|opsize_t
name|size
parameter_list|,
name|uint64_t
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _VDEV_H_ */
end_comment

end_unit

