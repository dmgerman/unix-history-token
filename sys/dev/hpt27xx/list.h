begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005-2011 HighPoint Technologies, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<dev/hpt27xx/hpt27xx_config.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|_HPT_LIST_H_
end_ifndef

begin_define
define|#
directive|define
name|_HPT_LIST_H_
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_LIST_H
end_ifndef

begin_ifndef
ifndef|#
directive|ifndef
name|HPT_INLINE
end_ifndef

begin_define
define|#
directive|define
name|HPT_INLINE
value|__inline
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|list_head
block|{
name|struct
name|list_head
modifier|*
name|next
decl_stmt|,
modifier|*
name|prev
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|INIT_LIST_HEAD
parameter_list|(
name|ptr
parameter_list|)
value|do { (ptr)->next = (ptr); (ptr)->prev = (ptr); } while (0)
end_define

begin_function
specifier|static
name|HPT_INLINE
name|void
name|__list_add
parameter_list|(
name|struct
name|list_head
modifier|*
name|_new
parameter_list|,
name|struct
name|list_head
modifier|*
name|prev
parameter_list|,
name|struct
name|list_head
modifier|*
name|next
parameter_list|)
block|{
name|next
operator|->
name|prev
operator|=
name|_new
expr_stmt|;
name|_new
operator|->
name|next
operator|=
name|next
expr_stmt|;
name|_new
operator|->
name|prev
operator|=
name|prev
expr_stmt|;
name|prev
operator|->
name|next
operator|=
name|_new
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|HPT_INLINE
name|void
name|list_add
parameter_list|(
name|struct
name|list_head
modifier|*
name|_new
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|__list_add
argument_list|(
name|_new
argument_list|,
name|head
argument_list|,
name|head
operator|->
name|next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|HPT_INLINE
name|void
name|list_add_tail
parameter_list|(
name|struct
name|list_head
modifier|*
name|_new
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|__list_add
argument_list|(
name|_new
argument_list|,
name|head
operator|->
name|prev
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|HPT_INLINE
name|void
name|__list_del
parameter_list|(
name|struct
name|list_head
modifier|*
name|prev
parameter_list|,
name|struct
name|list_head
modifier|*
name|next
parameter_list|)
block|{
name|next
operator|->
name|prev
operator|=
name|prev
expr_stmt|;
name|prev
operator|->
name|next
operator|=
name|next
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|HPT_INLINE
name|void
name|list_del
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|)
block|{
name|__list_del
argument_list|(
name|entry
operator|->
name|prev
argument_list|,
name|entry
operator|->
name|next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|HPT_INLINE
name|void
name|list_del_init
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|)
block|{
name|__list_del
argument_list|(
name|entry
operator|->
name|prev
argument_list|,
name|entry
operator|->
name|next
argument_list|)
expr_stmt|;
name|INIT_LIST_HEAD
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|HPT_INLINE
name|int
name|list_empty
parameter_list|(
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|HPT_ASSERT
argument_list|(
operator|!
operator|(
name|head
operator|->
name|next
operator|==
name|head
operator|&&
name|head
operator|->
name|prev
operator|!=
name|head
operator|)
argument_list|)
expr_stmt|;
return|return
name|head
operator|->
name|next
operator|==
name|head
return|;
block|}
end_function

begin_function
specifier|static
name|HPT_INLINE
name|void
name|__list_splice
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|struct
name|list_head
modifier|*
name|first
init|=
name|list
operator|->
name|next
decl_stmt|;
name|struct
name|list_head
modifier|*
name|last
init|=
name|list
operator|->
name|prev
decl_stmt|;
name|struct
name|list_head
modifier|*
name|at
init|=
name|head
operator|->
name|next
decl_stmt|;
name|first
operator|->
name|prev
operator|=
name|head
expr_stmt|;
name|head
operator|->
name|next
operator|=
name|first
expr_stmt|;
name|last
operator|->
name|next
operator|=
name|at
expr_stmt|;
name|at
operator|->
name|prev
operator|=
name|last
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|HPT_INLINE
name|void
name|list_splice
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
if|if
condition|(
operator|!
name|list_empty
argument_list|(
name|list
argument_list|)
condition|)
name|__list_splice
argument_list|(
name|list
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|HPT_INLINE
name|void
name|list_splice_init
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
if|if
condition|(
operator|!
name|list_empty
argument_list|(
name|list
argument_list|)
condition|)
block|{
name|__list_splice
argument_list|(
name|list
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|INIT_LIST_HEAD
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_define
define|#
directive|define
name|list_entry
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|((type *)((char *)(ptr)-(HPT_UPTR)(&((type *)0)->member)))
end_define

begin_define
define|#
directive|define
name|list_for_each
parameter_list|(
name|pos
parameter_list|,
name|head
parameter_list|)
define|\
value|for (pos = (head)->next; pos != (head); pos = pos->next)
end_define

begin_define
define|#
directive|define
name|list_for_each_safe
parameter_list|(
name|pos
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|)
define|\
value|for (pos = (head)->next, n = pos->next; pos != (head); \ 		pos = n, n = pos->next)
end_define

begin_define
define|#
directive|define
name|get_first_item
parameter_list|(
name|attached
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|((type *)((char *)((attached)->next)-(HPT_UPTR)(&((type *)0)->member)))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

