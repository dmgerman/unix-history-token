begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*      $FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2004-2006  *      Damien Bergamini<damien.bergamini@free.fr>. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_define
define|#
directive|define
name|IPW_MAX_NSEG
value|1
end_define

begin_struct
struct|struct
name|ipw_soft_bd
block|{
name|struct
name|ipw_bd
modifier|*
name|bd
decl_stmt|;
name|int
name|type
decl_stmt|;
define|#
directive|define
name|IPW_SBD_TYPE_NOASSOC
value|0
define|#
directive|define
name|IPW_SBD_TYPE_COMMAND
value|1
define|#
directive|define
name|IPW_SBD_TYPE_HEADER
value|2
define|#
directive|define
name|IPW_SBD_TYPE_DATA
value|3
name|void
modifier|*
name|priv
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ipw_soft_hdr
block|{
name|struct
name|ipw_hdr
name|hdr
decl_stmt|;
name|bus_dmamap_t
name|map
decl_stmt|;
name|SLIST_ENTRY
argument_list|(
argument|ipw_soft_hdr
argument_list|)
name|next
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ipw_soft_buf
block|{
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
name|bus_dmamap_t
name|map
decl_stmt|;
name|SLIST_ENTRY
argument_list|(
argument|ipw_soft_buf
argument_list|)
name|next
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ipw_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|uint8_t
name|wr_antsignal
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IPW_RX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_DB_ANTSIGNAL))
end_define

begin_struct
struct|struct
name|ipw_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IPW_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL))
end_define

begin_struct
struct|struct
name|ipw_softc
block|{
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|struct
name|ieee80211com
name|sc_ic
decl_stmt|;
name|int
function_decl|(
modifier|*
name|sc_newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211com
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|struct
name|task
name|sc_init_task
decl_stmt|;
name|struct
name|task
name|sc_scan_task
decl_stmt|;
name|struct
name|task
name|sc_chan_task
decl_stmt|;
name|struct
name|task
name|sc_assoc_task
decl_stmt|;
name|struct
name|task
name|sc_disassoc_task
decl_stmt|;
name|struct
name|callout
name|sc_wdtimer
decl_stmt|;
comment|/* watchdog timer */
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|IPW_FLAG_FW_INITED
value|(1<< 0)
define|#
directive|define
name|IPW_FLAG_INIT_LOCKED
value|(1<< 1)
define|#
directive|define
name|IPW_FLAG_HAS_RADIO_SWITCH
value|(1<< 2)
define|#
directive|define
name|IPW_FLAG_HACK
value|(1<< 3)
define|#
directive|define
name|IPW_FLAG_SCANNING
value|(1<< 4)
define|#
directive|define
name|IPW_FLAG_ENABLED
value|(1<< 5)
define|#
directive|define
name|IPW_FLAG_BUSY
value|(1<< 6)
define|#
directive|define
name|IPW_FLAG_ASSOCIATED
value|(1<< 7)
name|int
name|irq_rid
decl_stmt|;
name|int
name|mem_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq
decl_stmt|;
name|struct
name|resource
modifier|*
name|mem
decl_stmt|;
name|bus_space_tag_t
name|sc_st
decl_stmt|;
name|bus_space_handle_t
name|sc_sh
decl_stmt|;
name|void
modifier|*
name|sc_ih
decl_stmt|;
specifier|const
name|struct
name|firmware
modifier|*
name|sc_firmware
decl_stmt|;
name|int
name|sc_tx_timer
decl_stmt|;
name|int
name|sc_scan_timer
decl_stmt|;
name|bus_dma_tag_t
name|tbd_dmat
decl_stmt|;
name|bus_dma_tag_t
name|rbd_dmat
decl_stmt|;
name|bus_dma_tag_t
name|status_dmat
decl_stmt|;
name|bus_dma_tag_t
name|cmd_dmat
decl_stmt|;
name|bus_dma_tag_t
name|hdr_dmat
decl_stmt|;
name|bus_dma_tag_t
name|txbuf_dmat
decl_stmt|;
name|bus_dma_tag_t
name|rxbuf_dmat
decl_stmt|;
name|bus_dmamap_t
name|tbd_map
decl_stmt|;
name|bus_dmamap_t
name|rbd_map
decl_stmt|;
name|bus_dmamap_t
name|status_map
decl_stmt|;
name|bus_dmamap_t
name|cmd_map
decl_stmt|;
name|bus_addr_t
name|tbd_phys
decl_stmt|;
name|bus_addr_t
name|rbd_phys
decl_stmt|;
name|bus_addr_t
name|status_phys
decl_stmt|;
name|struct
name|ipw_bd
modifier|*
name|tbd_list
decl_stmt|;
name|struct
name|ipw_bd
modifier|*
name|rbd_list
decl_stmt|;
name|struct
name|ipw_status
modifier|*
name|status_list
decl_stmt|;
name|struct
name|ipw_cmd
name|cmd
decl_stmt|;
name|struct
name|ipw_soft_bd
name|stbd_list
index|[
name|IPW_NTBD
index|]
decl_stmt|;
name|struct
name|ipw_soft_buf
name|tx_sbuf_list
index|[
name|IPW_NDATA
index|]
decl_stmt|;
name|struct
name|ipw_soft_hdr
name|shdr_list
index|[
name|IPW_NDATA
index|]
decl_stmt|;
name|struct
name|ipw_soft_bd
name|srbd_list
index|[
name|IPW_NRBD
index|]
decl_stmt|;
name|struct
name|ipw_soft_buf
name|rx_sbuf_list
index|[
name|IPW_NRBD
index|]
decl_stmt|;
name|SLIST_HEAD
argument_list|(
argument_list|,
argument|ipw_soft_hdr
argument_list|)
name|free_shdr
expr_stmt|;
name|SLIST_HEAD
argument_list|(
argument_list|,
argument|ipw_soft_buf
argument_list|)
name|free_sbuf
expr_stmt|;
name|uint32_t
name|table1_base
decl_stmt|;
name|uint32_t
name|table2_base
decl_stmt|;
name|uint32_t
name|txcur
decl_stmt|;
name|uint32_t
name|txold
decl_stmt|;
name|uint32_t
name|rxcur
decl_stmt|;
name|int
name|txfree
decl_stmt|;
name|int
name|dwelltime
decl_stmt|;
name|struct
name|bpf_if
modifier|*
name|sc_drvbpf
decl_stmt|;
union|union
block|{
name|struct
name|ipw_rx_radiotap_header
name|th
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|64
index|]
decl_stmt|;
block|}
name|sc_rxtapu
union|;
define|#
directive|define
name|sc_rxtap
value|sc_rxtapu.th
name|int
name|sc_rxtap_len
decl_stmt|;
union|union
block|{
name|struct
name|ipw_tx_radiotap_header
name|th
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|64
index|]
decl_stmt|;
block|}
name|sc_txtapu
union|;
define|#
directive|define
name|sc_txtap
value|sc_txtapu.th
name|int
name|sc_txtap_len
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * NB.: This models the only instance of async locking in ipw_init_locked  *	and must be kept in sync.  */
end_comment

begin_define
define|#
directive|define
name|IPW_LOCK_DECL
value|int	__waslocked = 0
end_define

begin_define
define|#
directive|define
name|IPW_LOCK
parameter_list|(
name|sc
parameter_list|)
value|do {				\ 	if (!(__waslocked = mtx_owned(&(sc)->sc_mtx)))	\ 		mtx_lock(&sc->sc_mtx);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|IPW_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|do {				\ 	if (!__waslocked)				\ 		mtx_unlock(&sc->sc_mtx);		\ } while (0)
end_define

begin_define
define|#
directive|define
name|IPW_LOCK_ASSERT
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, MA_OWNED)
end_define

end_unit

