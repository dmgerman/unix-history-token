begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003, 2004 Marcel Moolenaar  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEV_UART_CPU_H_
end_ifndef

begin_define
define|#
directive|define
name|_DEV_UART_CPU_H_
end_define

begin_include
include|#
directive|include
file|<sys/kdb.h>
end_include

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_struct_decl
struct_decl|struct
name|uart_softc
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * Low-level operations for use by console and/or debug port support.  */
end_comment

begin_struct
struct|struct
name|uart_ops
block|{
name|int
function_decl|(
modifier|*
name|probe
function_decl|)
parameter_list|(
name|struct
name|uart_bas
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|uart_bas
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|term
function_decl|)
parameter_list|(
name|struct
name|uart_bas
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|putc
function_decl|)
parameter_list|(
name|struct
name|uart_bas
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|rxready
function_decl|)
parameter_list|(
name|struct
name|uart_bas
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|getc
function_decl|)
parameter_list|(
name|struct
name|uart_bas
modifier|*
parameter_list|,
name|struct
name|mtx
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|bus_space_tag_t
name|uart_bus_space_io
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bus_space_tag_t
name|uart_bus_space_mem
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Console and debug port device info.  */
end_comment

begin_struct
struct|struct
name|uart_devinfo
block|{
name|SLIST_ENTRY
argument_list|(
argument|uart_devinfo
argument_list|)
name|next
expr_stmt|;
name|struct
name|uart_ops
modifier|*
name|ops
decl_stmt|;
name|struct
name|uart_bas
name|bas
decl_stmt|;
name|int
name|baudrate
decl_stmt|;
name|int
name|databits
decl_stmt|;
name|int
name|stopbits
decl_stmt|;
name|int
name|parity
decl_stmt|;
name|int
name|type
decl_stmt|;
define|#
directive|define
name|UART_DEV_CONSOLE
value|0
define|#
directive|define
name|UART_DEV_DBGPORT
value|1
define|#
directive|define
name|UART_DEV_KEYBOARD
value|2
name|int
function_decl|(
modifier|*
name|attach
function_decl|)
parameter_list|(
name|struct
name|uart_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|detach
function_decl|)
parameter_list|(
name|struct
name|uart_softc
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|cookie
decl_stmt|;
comment|/* Type dependent use. */
name|struct
name|mtx
modifier|*
name|hwmtx
decl_stmt|;
name|struct
name|uart_softc
modifier|*
name|sc
decl_stmt|;
comment|/* valid only from start of attach */
block|}
struct|;
end_struct

begin_function_decl
name|int
name|uart_cpu_eqres
parameter_list|(
name|struct
name|uart_bas
modifier|*
parameter_list|,
name|struct
name|uart_bas
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|uart_cpu_getdev
parameter_list|(
name|int
parameter_list|,
name|struct
name|uart_devinfo
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|uart_getenv
parameter_list|(
name|int
parameter_list|,
name|struct
name|uart_devinfo
modifier|*
parameter_list|,
name|struct
name|uart_class
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|uart_getname
parameter_list|(
name|struct
name|uart_class
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|uart_ops
modifier|*
name|uart_getops
parameter_list|(
name|struct
name|uart_class
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|uart_getrange
parameter_list|(
name|struct
name|uart_class
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|uart_add_sysdev
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Operations for low-level access to the UART. Primarily for use  * by console and debug port logic.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|uart_lock
parameter_list|(
name|struct
name|mtx
modifier|*
name|hwmtx
parameter_list|)
block|{
if|if
condition|(
operator|!
name|kdb_active
operator|&&
name|hwmtx
operator|!=
name|NULL
condition|)
name|mtx_lock_spin
argument_list|(
name|hwmtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|uart_unlock
parameter_list|(
name|struct
name|mtx
modifier|*
name|hwmtx
parameter_list|)
block|{
if|if
condition|(
operator|!
name|kdb_active
operator|&&
name|hwmtx
operator|!=
name|NULL
condition|)
name|mtx_unlock_spin
argument_list|(
name|hwmtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|uart_probe
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
name|di
parameter_list|)
block|{
name|int
name|res
decl_stmt|;
name|uart_lock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
name|res
operator|=
name|di
operator|->
name|ops
operator|->
name|probe
argument_list|(
operator|&
name|di
operator|->
name|bas
argument_list|)
expr_stmt|;
name|uart_unlock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
return|return
operator|(
name|res
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|uart_init
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
name|di
parameter_list|)
block|{
name|uart_lock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
name|di
operator|->
name|ops
operator|->
name|init
argument_list|(
operator|&
name|di
operator|->
name|bas
argument_list|,
name|di
operator|->
name|baudrate
argument_list|,
name|di
operator|->
name|databits
argument_list|,
name|di
operator|->
name|stopbits
argument_list|,
name|di
operator|->
name|parity
argument_list|)
expr_stmt|;
name|uart_unlock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|uart_term
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
name|di
parameter_list|)
block|{
name|uart_lock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
name|di
operator|->
name|ops
operator|->
name|term
argument_list|(
operator|&
name|di
operator|->
name|bas
argument_list|)
expr_stmt|;
name|uart_unlock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|uart_putc
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
name|di
parameter_list|,
name|int
name|c
parameter_list|)
block|{
name|uart_lock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
name|di
operator|->
name|ops
operator|->
name|putc
argument_list|(
operator|&
name|di
operator|->
name|bas
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|uart_unlock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|uart_rxready
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
name|di
parameter_list|)
block|{
name|int
name|res
decl_stmt|;
name|uart_lock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
name|res
operator|=
name|di
operator|->
name|ops
operator|->
name|rxready
argument_list|(
operator|&
name|di
operator|->
name|bas
argument_list|)
expr_stmt|;
name|uart_unlock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
return|return
operator|(
name|res
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|uart_poll
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
name|di
parameter_list|)
block|{
name|int
name|res
decl_stmt|;
name|uart_lock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
if|if
condition|(
name|di
operator|->
name|ops
operator|->
name|rxready
argument_list|(
operator|&
name|di
operator|->
name|bas
argument_list|)
condition|)
name|res
operator|=
name|di
operator|->
name|ops
operator|->
name|getc
argument_list|(
operator|&
name|di
operator|->
name|bas
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
else|else
name|res
operator|=
operator|-
literal|1
expr_stmt|;
name|uart_unlock
argument_list|(
name|di
operator|->
name|hwmtx
argument_list|)
expr_stmt|;
return|return
operator|(
name|res
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|uart_getc
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
name|di
parameter_list|)
block|{
return|return
operator|(
name|di
operator|->
name|ops
operator|->
name|getc
argument_list|(
operator|&
name|di
operator|->
name|bas
argument_list|,
name|di
operator|->
name|hwmtx
argument_list|)
operator|)
return|;
block|}
end_function

begin_function_decl
name|void
name|uart_grab
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
name|di
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|uart_ungrab
parameter_list|(
name|struct
name|uart_devinfo
modifier|*
name|di
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEV_UART_CPU_H_ */
end_comment

end_unit

