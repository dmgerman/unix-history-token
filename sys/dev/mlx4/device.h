begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2006, 2007 Cisco Systems, Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *	- Redistributions of source code must retain the above  *	  copyright notice, this list of conditions and the following  *	  disclaimer.  *  *	- Redistributions in binary form must reproduce the above  *	  copyright notice, this list of conditions and the following  *	  disclaimer in the documentation and/or other materials  *	  provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX4_DEVICE_H
end_ifndef

begin_define
define|#
directive|define
name|MLX4_DEVICE_H
end_define

begin_include
include|#
directive|include
file|<linux/pci.h>
end_include

begin_include
include|#
directive|include
file|<linux/completion.h>
end_include

begin_include
include|#
directive|include
file|<linux/radix-tree.h>
end_include

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/bitops.h>
end_include

begin_include
include|#
directive|include
file|<linux/workqueue.h>
end_include

begin_include
include|#
directive|include
file|<linux/if_ether.h>
end_include

begin_include
include|#
directive|include
file|<linux/mutex.h>
end_include

begin_include
include|#
directive|include
file|<asm/atomic.h>
end_include

begin_include
include|#
directive|include
file|<linux/clocksource.h>
end_include

begin_define
define|#
directive|define
name|DEFAULT_UAR_PAGE_SHIFT
value|12
end_define

begin_define
define|#
directive|define
name|MAX_MSIX_P_PORT
value|17
end_define

begin_define
define|#
directive|define
name|MAX_MSIX
value|64
end_define

begin_define
define|#
directive|define
name|MIN_MSIX_P_PORT
value|5
end_define

begin_define
define|#
directive|define
name|MLX4_IS_LEGACY_EQ_MODE
parameter_list|(
name|dev_cap
parameter_list|)
value|((dev_cap).num_comp_vectors< \ 					 (dev_cap).num_ports * MIN_MSIX_P_PORT)
end_define

begin_define
define|#
directive|define
name|MLX4_MAX_100M_UNITS_VAL
value|255
end_define

begin_comment
comment|/* 						 * work around: can't set values 						 * greater then this value when 						 * using 100 Mbps units. 						 */
end_comment

begin_define
define|#
directive|define
name|MLX4_RATELIMIT_100M_UNITS
value|3
end_define

begin_comment
comment|/* 100 Mbps */
end_comment

begin_define
define|#
directive|define
name|MLX4_RATELIMIT_1G_UNITS
value|4
end_define

begin_comment
comment|/* 1 Gbps */
end_comment

begin_define
define|#
directive|define
name|MLX4_RATELIMIT_DEFAULT
value|0x00ff
end_define

begin_define
define|#
directive|define
name|MLX4_ROCE_MAX_GIDS
value|128
end_define

begin_define
define|#
directive|define
name|MLX4_ROCE_PF_GIDS
value|16
end_define

begin_define
define|#
directive|define
name|CORE_CLOCK_MASK
value|0xffffffffffffULL
end_define

begin_enum
enum|enum
block|{
name|MLX4_FLAG_MSI_X
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX4_FLAG_OLD_PORT_CMDS
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX4_FLAG_MASTER
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX4_FLAG_SLAVE
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX4_FLAG_SRIOV
init|=
literal|1
operator|<<
literal|4
block|,
name|MLX4_FLAG_OLD_REG_MAC
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX4_FLAG_BONDED
init|=
literal|1
operator|<<
literal|7
block|,
name|MLX4_FLAG_SECURE_HOST
init|=
literal|1
operator|<<
literal|8
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_PORT_CAP_IS_SM
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX4_PORT_CAP_DEV_MGMT_SUP
init|=
literal|1
operator|<<
literal|19
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_MAX_PORTS
init|=
literal|2
block|,
name|MLX4_MAX_PORT_PKEYS
init|=
literal|128
block|,
name|MLX4_MAX_PORT_GIDS
init|=
literal|128
block|}
enum|;
end_enum

begin_comment
comment|/* base qkey for use in sriov tunnel-qp/proxy-qp communication.  * These qkeys must not be allowed for general use. This is a 64k range,  * and to test for violation, we use the mask (protect against future chg).  */
end_comment

begin_define
define|#
directive|define
name|MLX4_RESERVED_QKEY_BASE
value|(0xFFFF0000)
end_define

begin_define
define|#
directive|define
name|MLX4_RESERVED_QKEY_MASK
value|(0xFFFF0000)
end_define

begin_enum
enum|enum
block|{
name|MLX4_BOARD_ID_LEN
init|=
literal|64
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_MAX_NUM_PF
init|=
literal|16
block|,
name|MLX4_MAX_NUM_VF
init|=
literal|126
block|,
name|MLX4_MAX_NUM_VF_P_PORT
init|=
literal|64
block|,
name|MLX4_MFUNC_MAX
init|=
literal|128
block|,
name|MLX4_MAX_EQ_NUM
init|=
literal|1024
block|,
name|MLX4_MFUNC_EQ_NUM
init|=
literal|4
block|,
name|MLX4_MFUNC_MAX_EQES
init|=
literal|8
block|,
name|MLX4_MFUNC_EQE_MASK
init|=
operator|(
name|MLX4_MFUNC_MAX_EQES
operator|-
literal|1
operator|)
block|}
enum|;
end_enum

begin_comment
comment|/* Driver supports 3 different device methods to manage traffic steering:  *	-device managed - High level API for ib and eth flow steering. FW is  *			  managing flow steering tables.  *	- B0 steering mode - Common low level API for ib and (if supported) eth.  *	- A0 steering mode - Limited low level API for eth. In case of IB,  *			     B0 mode is in use.  */
end_comment

begin_enum
enum|enum
block|{
name|MLX4_STEERING_MODE_A0
block|,
name|MLX4_STEERING_MODE_B0
block|,
name|MLX4_STEERING_MODE_DEVICE_MANAGED
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_STEERING_DMFS_A0_DEFAULT
block|,
name|MLX4_STEERING_DMFS_A0_DYNAMIC
block|,
name|MLX4_STEERING_DMFS_A0_STATIC
block|,
name|MLX4_STEERING_DMFS_A0_DISABLE
block|,
name|MLX4_STEERING_DMFS_A0_NOT_SUPPORTED
block|}
enum|;
end_enum

begin_function
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|mlx4_steering_mode_str
parameter_list|(
name|int
name|steering_mode
parameter_list|)
block|{
switch|switch
condition|(
name|steering_mode
condition|)
block|{
case|case
name|MLX4_STEERING_MODE_A0
case|:
return|return
literal|"A0 steering"
return|;
case|case
name|MLX4_STEERING_MODE_B0
case|:
return|return
literal|"B0 steering"
return|;
case|case
name|MLX4_STEERING_MODE_DEVICE_MANAGED
case|:
return|return
literal|"Device managed flow steering"
return|;
default|default:
return|return
literal|"Unrecognize steering mode"
return|;
block|}
block|}
end_function

begin_enum
enum|enum
block|{
name|MLX4_TUNNEL_OFFLOAD_MODE_NONE
block|,
name|MLX4_TUNNEL_OFFLOAD_MODE_VXLAN
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_DEV_CAP_FLAG_RC
init|=
literal|1LL
operator|<<
literal|0
block|,
name|MLX4_DEV_CAP_FLAG_UC
init|=
literal|1LL
operator|<<
literal|1
block|,
name|MLX4_DEV_CAP_FLAG_UD
init|=
literal|1LL
operator|<<
literal|2
block|,
name|MLX4_DEV_CAP_FLAG_XRC
init|=
literal|1LL
operator|<<
literal|3
block|,
name|MLX4_DEV_CAP_FLAG_SRQ
init|=
literal|1LL
operator|<<
literal|6
block|,
name|MLX4_DEV_CAP_FLAG_IPOIB_CSUM
init|=
literal|1LL
operator|<<
literal|7
block|,
name|MLX4_DEV_CAP_FLAG_BAD_PKEY_CNTR
init|=
literal|1LL
operator|<<
literal|8
block|,
name|MLX4_DEV_CAP_FLAG_BAD_QKEY_CNTR
init|=
literal|1LL
operator|<<
literal|9
block|,
name|MLX4_DEV_CAP_FLAG_DPDP
init|=
literal|1LL
operator|<<
literal|12
block|,
name|MLX4_DEV_CAP_FLAG_BLH
init|=
literal|1LL
operator|<<
literal|15
block|,
name|MLX4_DEV_CAP_FLAG_MEM_WINDOW
init|=
literal|1LL
operator|<<
literal|16
block|,
name|MLX4_DEV_CAP_FLAG_APM
init|=
literal|1LL
operator|<<
literal|17
block|,
name|MLX4_DEV_CAP_FLAG_ATOMIC
init|=
literal|1LL
operator|<<
literal|18
block|,
name|MLX4_DEV_CAP_FLAG_RAW_MCAST
init|=
literal|1LL
operator|<<
literal|19
block|,
name|MLX4_DEV_CAP_FLAG_UD_AV_PORT
init|=
literal|1LL
operator|<<
literal|20
block|,
name|MLX4_DEV_CAP_FLAG_UD_MCAST
init|=
literal|1LL
operator|<<
literal|21
block|,
name|MLX4_DEV_CAP_FLAG_IBOE
init|=
literal|1LL
operator|<<
literal|30
block|,
name|MLX4_DEV_CAP_FLAG_UC_LOOPBACK
init|=
literal|1LL
operator|<<
literal|32
block|,
name|MLX4_DEV_CAP_FLAG_FCS_KEEP
init|=
literal|1LL
operator|<<
literal|34
block|,
name|MLX4_DEV_CAP_FLAG_WOL_PORT1
init|=
literal|1LL
operator|<<
literal|37
block|,
name|MLX4_DEV_CAP_FLAG_WOL_PORT2
init|=
literal|1LL
operator|<<
literal|38
block|,
name|MLX4_DEV_CAP_FLAG_UDP_RSS
init|=
literal|1LL
operator|<<
literal|40
block|,
name|MLX4_DEV_CAP_FLAG_VEP_UC_STEER
init|=
literal|1LL
operator|<<
literal|41
block|,
name|MLX4_DEV_CAP_FLAG_VEP_MC_STEER
init|=
literal|1LL
operator|<<
literal|42
block|,
name|MLX4_DEV_CAP_FLAG_COUNTERS
init|=
literal|1LL
operator|<<
literal|48
block|,
name|MLX4_DEV_CAP_FLAG_RSS_IP_FRAG
init|=
literal|1LL
operator|<<
literal|52
block|,
name|MLX4_DEV_CAP_FLAG_SET_ETH_SCHED
init|=
literal|1LL
operator|<<
literal|53
block|,
name|MLX4_DEV_CAP_FLAG_SENSE_SUPPORT
init|=
literal|1LL
operator|<<
literal|55
block|,
name|MLX4_DEV_CAP_FLAG_PORT_MNG_CHG_EV
init|=
literal|1LL
operator|<<
literal|59
block|,
name|MLX4_DEV_CAP_FLAG_64B_EQE
init|=
literal|1LL
operator|<<
literal|61
block|,
name|MLX4_DEV_CAP_FLAG_64B_CQE
init|=
literal|1LL
operator|<<
literal|62
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_DEV_CAP_FLAG2_RSS
init|=
literal|1LL
operator|<<
literal|0
block|,
name|MLX4_DEV_CAP_FLAG2_RSS_TOP
init|=
literal|1LL
operator|<<
literal|1
block|,
name|MLX4_DEV_CAP_FLAG2_RSS_XOR
init|=
literal|1LL
operator|<<
literal|2
block|,
name|MLX4_DEV_CAP_FLAG2_FS_EN
init|=
literal|1LL
operator|<<
literal|3
block|,
name|MLX4_DEV_CAP_FLAG2_REASSIGN_MAC_EN
init|=
literal|1LL
operator|<<
literal|4
block|,
name|MLX4_DEV_CAP_FLAG2_TS
init|=
literal|1LL
operator|<<
literal|5
block|,
name|MLX4_DEV_CAP_FLAG2_VLAN_CONTROL
init|=
literal|1LL
operator|<<
literal|6
block|,
name|MLX4_DEV_CAP_FLAG2_FSM
init|=
literal|1LL
operator|<<
literal|7
block|,
name|MLX4_DEV_CAP_FLAG2_UPDATE_QP
init|=
literal|1LL
operator|<<
literal|8
block|,
name|MLX4_DEV_CAP_FLAG2_DMFS_IPOIB
init|=
literal|1LL
operator|<<
literal|9
block|,
name|MLX4_DEV_CAP_FLAG2_VXLAN_OFFLOADS
init|=
literal|1LL
operator|<<
literal|10
block|,
name|MLX4_DEV_CAP_FLAG2_MAD_DEMUX
init|=
literal|1LL
operator|<<
literal|11
block|,
name|MLX4_DEV_CAP_FLAG2_CQE_STRIDE
init|=
literal|1LL
operator|<<
literal|12
block|,
name|MLX4_DEV_CAP_FLAG2_EQE_STRIDE
init|=
literal|1LL
operator|<<
literal|13
block|,
name|MLX4_DEV_CAP_FLAG2_ETH_PROT_CTRL
init|=
literal|1LL
operator|<<
literal|14
block|,
name|MLX4_DEV_CAP_FLAG2_ETH_BACKPL_AN_REP
init|=
literal|1LL
operator|<<
literal|15
block|,
name|MLX4_DEV_CAP_FLAG2_CONFIG_DEV
init|=
literal|1LL
operator|<<
literal|16
block|,
name|MLX4_DEV_CAP_FLAG2_SYS_EQS
init|=
literal|1LL
operator|<<
literal|17
block|,
name|MLX4_DEV_CAP_FLAG2_80_VFS
init|=
literal|1LL
operator|<<
literal|18
block|,
name|MLX4_DEV_CAP_FLAG2_FS_A0
init|=
literal|1LL
operator|<<
literal|19
block|,
name|MLX4_DEV_CAP_FLAG2_RECOVERABLE_ERROR_EVENT
init|=
literal|1LL
operator|<<
literal|20
block|,
name|MLX4_DEV_CAP_FLAG2_PORT_REMAP
init|=
literal|1LL
operator|<<
literal|21
block|,
name|MLX4_DEV_CAP_FLAG2_QCN
init|=
literal|1LL
operator|<<
literal|22
block|,
name|MLX4_DEV_CAP_FLAG2_QP_RATE_LIMIT
init|=
literal|1LL
operator|<<
literal|23
block|,
name|MLX4_DEV_CAP_FLAG2_FLOWSTATS_EN
init|=
literal|1LL
operator|<<
literal|24
block|,
name|MLX4_DEV_CAP_FLAG2_QOS_VPP
init|=
literal|1LL
operator|<<
literal|25
block|,
name|MLX4_DEV_CAP_FLAG2_ETS_CFG
init|=
literal|1LL
operator|<<
literal|26
block|,
name|MLX4_DEV_CAP_FLAG2_PORT_BEACON
init|=
literal|1LL
operator|<<
literal|27
block|,
name|MLX4_DEV_CAP_FLAG2_IGNORE_FCS
init|=
literal|1LL
operator|<<
literal|28
block|,
name|MLX4_DEV_CAP_FLAG2_PHV_EN
init|=
literal|1LL
operator|<<
literal|29
block|,
name|MLX4_DEV_CAP_FLAG2_SKIP_OUTER_VLAN
init|=
literal|1LL
operator|<<
literal|30
block|,
name|MLX4_DEV_CAP_FLAG2_UPDATE_QP_SRC_CHECK_LB
init|=
literal|1ULL
operator|<<
literal|31
block|,
name|MLX4_DEV_CAP_FLAG2_LB_SRC_CHK
init|=
literal|1ULL
operator|<<
literal|32
block|,
name|MLX4_DEV_CAP_FLAG2_ROCE_V1_V2
init|=
literal|1ULL
operator|<<
literal|33
block|,
name|MLX4_DEV_CAP_FLAG2_DMFS_UC_MC_SNIFFER
init|=
literal|1ULL
operator|<<
literal|34
block|,
name|MLX4_DEV_CAP_FLAG2_DIAG_PER_PORT
init|=
literal|1ULL
operator|<<
literal|35
block|,
name|MLX4_DEV_CAP_FLAG2_SVLAN_BY_QP
init|=
literal|1ULL
operator|<<
literal|36
block|,
name|MLX4_DEV_CAP_FLAG2_SL_TO_VL_CHANGE_EVENT
init|=
literal|1ULL
operator|<<
literal|37
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_QUERY_FUNC_FLAGS_BF_RES_QP
init|=
literal|1LL
operator|<<
literal|0
block|,
name|MLX4_QUERY_FUNC_FLAGS_A0_RES_QP
init|=
literal|1LL
operator|<<
literal|1
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_VF_CAP_FLAG_RESET
init|=
literal|1
operator|<<
literal|0
block|}
enum|;
end_enum

begin_comment
comment|/* bit enums for an 8-bit flags field indicating special use  * QPs which require special handling in qp_reserve_range.  * Currently, this only includes QPs used by the ETH interface,  * where we expect to use blueflame.  These QPs must not have  * bits 6 and 7 set in their qp number.  *  * This enum may use only bits 0..7.  */
end_comment

begin_enum
enum|enum
block|{
name|MLX4_RESERVE_A0_QP
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX4_RESERVE_ETH_BF_QP
init|=
literal|1
operator|<<
literal|7
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_DEV_CAP_64B_EQE_ENABLED
init|=
literal|1LL
operator|<<
literal|0
block|,
name|MLX4_DEV_CAP_64B_CQE_ENABLED
init|=
literal|1LL
operator|<<
literal|1
block|,
name|MLX4_DEV_CAP_CQE_STRIDE_ENABLED
init|=
literal|1LL
operator|<<
literal|2
block|,
name|MLX4_DEV_CAP_EQE_STRIDE_ENABLED
init|=
literal|1LL
operator|<<
literal|3
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_USER_DEV_CAP_LARGE_CQE
init|=
literal|1L
operator|<<
literal|0
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_FUNC_CAP_64B_EQE_CQE
init|=
literal|1L
operator|<<
literal|0
block|,
name|MLX4_FUNC_CAP_EQE_CQE_STRIDE
init|=
literal|1L
operator|<<
literal|1
block|,
name|MLX4_FUNC_CAP_DMFS_A0_STATIC
init|=
literal|1L
operator|<<
literal|2
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|MLX4_ATTR_EXTENDED_PORT_INFO
value|cpu_to_be16(0xff90)
end_define

begin_enum
enum|enum
block|{
name|MLX4_BMME_FLAG_WIN_TYPE_2B
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX4_BMME_FLAG_LOCAL_INV
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX4_BMME_FLAG_REMOTE_INV
init|=
literal|1
operator|<<
literal|7
block|,
name|MLX4_BMME_FLAG_TYPE_2_WIN
init|=
literal|1
operator|<<
literal|9
block|,
name|MLX4_BMME_FLAG_RESERVED_LKEY
init|=
literal|1
operator|<<
literal|10
block|,
name|MLX4_BMME_FLAG_FAST_REG_WR
init|=
literal|1
operator|<<
literal|11
block|,
name|MLX4_BMME_FLAG_ROCE_V1_V2
init|=
literal|1
operator|<<
literal|19
block|,
name|MLX4_BMME_FLAG_PORT_REMAP
init|=
literal|1
operator|<<
literal|24
block|,
name|MLX4_BMME_FLAG_VSD_INIT2RTR
init|=
literal|1
operator|<<
literal|28
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_FLAG_PORT_REMAP
init|=
name|MLX4_BMME_FLAG_PORT_REMAP
block|,
name|MLX4_FLAG_ROCE_V1_V2
init|=
name|MLX4_BMME_FLAG_ROCE_V1_V2
block|}
enum|;
end_enum

begin_enum
enum|enum
name|mlx4_event
block|{
name|MLX4_EVENT_TYPE_COMP
init|=
literal|0x00
block|,
name|MLX4_EVENT_TYPE_PATH_MIG
init|=
literal|0x01
block|,
name|MLX4_EVENT_TYPE_COMM_EST
init|=
literal|0x02
block|,
name|MLX4_EVENT_TYPE_SQ_DRAINED
init|=
literal|0x03
block|,
name|MLX4_EVENT_TYPE_SRQ_QP_LAST_WQE
init|=
literal|0x13
block|,
name|MLX4_EVENT_TYPE_SRQ_LIMIT
init|=
literal|0x14
block|,
name|MLX4_EVENT_TYPE_CQ_ERROR
init|=
literal|0x04
block|,
name|MLX4_EVENT_TYPE_WQ_CATAS_ERROR
init|=
literal|0x05
block|,
name|MLX4_EVENT_TYPE_EEC_CATAS_ERROR
init|=
literal|0x06
block|,
name|MLX4_EVENT_TYPE_PATH_MIG_FAILED
init|=
literal|0x07
block|,
name|MLX4_EVENT_TYPE_WQ_INVAL_REQ_ERROR
init|=
literal|0x10
block|,
name|MLX4_EVENT_TYPE_WQ_ACCESS_ERROR
init|=
literal|0x11
block|,
name|MLX4_EVENT_TYPE_SRQ_CATAS_ERROR
init|=
literal|0x12
block|,
name|MLX4_EVENT_TYPE_LOCAL_CATAS_ERROR
init|=
literal|0x08
block|,
name|MLX4_EVENT_TYPE_PORT_CHANGE
init|=
literal|0x09
block|,
name|MLX4_EVENT_TYPE_EQ_OVERFLOW
init|=
literal|0x0f
block|,
name|MLX4_EVENT_TYPE_ECC_DETECT
init|=
literal|0x0e
block|,
name|MLX4_EVENT_TYPE_CMD
init|=
literal|0x0a
block|,
name|MLX4_EVENT_TYPE_VEP_UPDATE
init|=
literal|0x19
block|,
name|MLX4_EVENT_TYPE_COMM_CHANNEL
init|=
literal|0x18
block|,
name|MLX4_EVENT_TYPE_OP_REQUIRED
init|=
literal|0x1a
block|,
name|MLX4_EVENT_TYPE_FATAL_WARNING
init|=
literal|0x1b
block|,
name|MLX4_EVENT_TYPE_FLR_EVENT
init|=
literal|0x1c
block|,
name|MLX4_EVENT_TYPE_PORT_MNG_CHG_EVENT
init|=
literal|0x1d
block|,
name|MLX4_EVENT_TYPE_RECOVERABLE_ERROR_EVENT
init|=
literal|0x3e
block|,
name|MLX4_EVENT_TYPE_NONE
init|=
literal|0xff
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_PORT_CHANGE_SUBTYPE_DOWN
init|=
literal|1
block|,
name|MLX4_PORT_CHANGE_SUBTYPE_ACTIVE
init|=
literal|4
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_RECOVERABLE_ERROR_EVENT_SUBTYPE_BAD_CABLE
init|=
literal|1
block|,
name|MLX4_RECOVERABLE_ERROR_EVENT_SUBTYPE_UNSUPPORTED_CABLE
init|=
literal|2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_FATAL_WARNING_SUBTYPE_WARMING
init|=
literal|0
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|slave_port_state
block|{
name|SLAVE_PORT_DOWN
init|=
literal|0
block|,
name|SLAVE_PENDING_UP
block|,
name|SLAVE_PORT_UP
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|slave_port_gen_event
block|{
name|SLAVE_PORT_GEN_EVENT_DOWN
init|=
literal|0
block|,
name|SLAVE_PORT_GEN_EVENT_UP
block|,
name|SLAVE_PORT_GEN_EVENT_NONE
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|slave_port_state_event
block|{
name|MLX4_PORT_STATE_DEV_EVENT_PORT_DOWN
block|,
name|MLX4_PORT_STATE_DEV_EVENT_PORT_UP
block|,
name|MLX4_PORT_STATE_IB_PORT_STATE_EVENT_GID_VALID
block|,
name|MLX4_PORT_STATE_IB_EVENT_GID_INVALID
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_PERM_LOCAL_READ
init|=
literal|1
operator|<<
literal|10
block|,
name|MLX4_PERM_LOCAL_WRITE
init|=
literal|1
operator|<<
literal|11
block|,
name|MLX4_PERM_REMOTE_READ
init|=
literal|1
operator|<<
literal|12
block|,
name|MLX4_PERM_REMOTE_WRITE
init|=
literal|1
operator|<<
literal|13
block|,
name|MLX4_PERM_ATOMIC
init|=
literal|1
operator|<<
literal|14
block|,
name|MLX4_PERM_BIND_MW
init|=
literal|1
operator|<<
literal|15
block|,
name|MLX4_PERM_MASK
init|=
literal|0xFC00
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_OPCODE_NOP
init|=
literal|0x00
block|,
name|MLX4_OPCODE_SEND_INVAL
init|=
literal|0x01
block|,
name|MLX4_OPCODE_RDMA_WRITE
init|=
literal|0x08
block|,
name|MLX4_OPCODE_RDMA_WRITE_IMM
init|=
literal|0x09
block|,
name|MLX4_OPCODE_SEND
init|=
literal|0x0a
block|,
name|MLX4_OPCODE_SEND_IMM
init|=
literal|0x0b
block|,
name|MLX4_OPCODE_LSO
init|=
literal|0x0e
block|,
name|MLX4_OPCODE_RDMA_READ
init|=
literal|0x10
block|,
name|MLX4_OPCODE_ATOMIC_CS
init|=
literal|0x11
block|,
name|MLX4_OPCODE_ATOMIC_FA
init|=
literal|0x12
block|,
name|MLX4_OPCODE_MASKED_ATOMIC_CS
init|=
literal|0x14
block|,
name|MLX4_OPCODE_MASKED_ATOMIC_FA
init|=
literal|0x15
block|,
name|MLX4_OPCODE_BIND_MW
init|=
literal|0x18
block|,
name|MLX4_OPCODE_FMR
init|=
literal|0x19
block|,
name|MLX4_OPCODE_LOCAL_INVAL
init|=
literal|0x1b
block|,
name|MLX4_OPCODE_CONFIG_CMD
init|=
literal|0x1f
block|,
name|MLX4_RECV_OPCODE_RDMA_WRITE_IMM
init|=
literal|0x00
block|,
name|MLX4_RECV_OPCODE_SEND
init|=
literal|0x01
block|,
name|MLX4_RECV_OPCODE_SEND_IMM
init|=
literal|0x02
block|,
name|MLX4_RECV_OPCODE_SEND_INVAL
init|=
literal|0x03
block|,
name|MLX4_CQE_OPCODE_ERROR
init|=
literal|0x1e
block|,
name|MLX4_CQE_OPCODE_RESIZE
init|=
literal|0x16
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_STAT_RATE_OFFSET
init|=
literal|5
block|}
enum|;
end_enum

begin_enum
enum|enum
name|mlx4_protocol
block|{
name|MLX4_PROT_IB_IPV6
init|=
literal|0
block|,
name|MLX4_PROT_ETH
block|,
name|MLX4_PROT_IB_IPV4
block|,
name|MLX4_PROT_FCOE
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_MTT_FLAG_PRESENT
init|=
literal|1
block|}
enum|;
end_enum

begin_enum
enum|enum
name|mlx4_qp_region
block|{
name|MLX4_QP_REGION_FW
init|=
literal|0
block|,
name|MLX4_QP_REGION_RSS_RAW_ETH
block|,
name|MLX4_QP_REGION_BOTTOM
init|=
name|MLX4_QP_REGION_RSS_RAW_ETH
block|,
name|MLX4_QP_REGION_ETH_ADDR
block|,
name|MLX4_QP_REGION_FC_ADDR
block|,
name|MLX4_QP_REGION_FC_EXCH
block|,
name|MLX4_NUM_QP_REGION
block|}
enum|;
end_enum

begin_enum
enum|enum
name|mlx4_port_type
block|{
name|MLX4_PORT_TYPE_NONE
init|=
literal|0
block|,
name|MLX4_PORT_TYPE_IB
init|=
literal|1
block|,
name|MLX4_PORT_TYPE_ETH
init|=
literal|2
block|,
name|MLX4_PORT_TYPE_AUTO
init|=
literal|3
block|}
enum|;
end_enum

begin_enum
enum|enum
name|mlx4_special_vlan_idx
block|{
name|MLX4_NO_VLAN_IDX
init|=
literal|0
block|,
name|MLX4_VLAN_MISS_IDX
block|,
name|MLX4_VLAN_REGULAR
block|}
enum|;
end_enum

begin_enum
enum|enum
name|mlx4_steer_type
block|{
name|MLX4_MC_STEER
init|=
literal|0
block|,
name|MLX4_UC_STEER
block|,
name|MLX4_NUM_STEERS
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_NUM_FEXCH
init|=
literal|64
operator|*
literal|1024
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_MAX_FAST_REG_PAGES
init|=
literal|511
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
comment|/* 	 * Max wqe size for rdma read is 512 bytes, so this 	 * limits our max_sge_rd as the wqe needs to fit: 	 * - ctrl segment (16 bytes) 	 * - rdma segment (16 bytes) 	 * - scatter elements (16 bytes each) 	 */
name|MLX4_MAX_SGE_RD
init|=
operator|(
literal|512
operator|-
literal|16
operator|-
literal|16
operator|)
operator|/
literal|16
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_DEV_PMC_SUBTYPE_GUID_INFO
init|=
literal|0x14
block|,
name|MLX4_DEV_PMC_SUBTYPE_PORT_INFO
init|=
literal|0x15
block|,
name|MLX4_DEV_PMC_SUBTYPE_PKEY_TABLE
init|=
literal|0x16
block|,
name|MLX4_DEV_PMC_SUBTYPE_SL_TO_VL_MAP
init|=
literal|0x17
block|, }
enum|;
end_enum

begin_comment
comment|/* Port mgmt change event handling */
end_comment

begin_enum
enum|enum
block|{
name|MLX4_EQ_PORT_INFO_MSTR_SM_LID_CHANGE_MASK
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX4_EQ_PORT_INFO_GID_PFX_CHANGE_MASK
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX4_EQ_PORT_INFO_LID_CHANGE_MASK
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX4_EQ_PORT_INFO_CLIENT_REREG_MASK
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX4_EQ_PORT_INFO_MSTR_SM_SL_CHANGE_MASK
init|=
literal|1
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_union
union|union
name|sl2vl_tbl_to_u64
block|{
name|u8
name|sl8
index|[
literal|8
index|]
decl_stmt|;
name|u64
name|sl64
decl_stmt|;
block|}
union|;
end_union

begin_enum
enum|enum
block|{
name|MLX4_DEVICE_STATE_UP
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX4_DEVICE_STATE_INTERNAL_ERROR
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_INTERFACE_STATE_UP
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX4_INTERFACE_STATE_DELETION
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|MSTR_SM_CHANGE_MASK
value|(MLX4_EQ_PORT_INFO_MSTR_SM_SL_CHANGE_MASK | \ 			     MLX4_EQ_PORT_INFO_MSTR_SM_LID_CHANGE_MASK)
end_define

begin_enum
enum|enum
name|mlx4_module_id
block|{
name|MLX4_MODULE_ID_SFP
init|=
literal|0x3
block|,
name|MLX4_MODULE_ID_QSFP
init|=
literal|0xC
block|,
name|MLX4_MODULE_ID_QSFP_PLUS
init|=
literal|0xD
block|,
name|MLX4_MODULE_ID_QSFP28
init|=
literal|0x11
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
comment|/* rl */
name|MLX4_QP_RATE_LIMIT_NONE
init|=
literal|0
block|,
name|MLX4_QP_RATE_LIMIT_KBS
init|=
literal|1
block|,
name|MLX4_QP_RATE_LIMIT_MBS
init|=
literal|2
block|,
name|MLX4_QP_RATE_LIMIT_GBS
init|=
literal|3
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_rate_limit_caps
block|{
name|u16
name|num_rates
decl_stmt|;
comment|/* Number of different rates */
name|u8
name|min_unit
decl_stmt|;
name|u16
name|min_val
decl_stmt|;
name|u8
name|max_unit
decl_stmt|;
name|u16
name|max_val
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|u64
name|mlx4_fw_ver
parameter_list|(
name|u64
name|major
parameter_list|,
name|u64
name|minor
parameter_list|,
name|u64
name|subminor
parameter_list|)
block|{
return|return
operator|(
name|major
operator|<<
literal|32
operator|)
operator||
operator|(
name|minor
operator|<<
literal|16
operator|)
operator||
name|subminor
return|;
block|}
end_function

begin_struct
struct|struct
name|mlx4_phys_caps
block|{
name|u32
name|gid_phys_table_len
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u32
name|pkey_phys_table_len
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u32
name|num_phys_eqs
decl_stmt|;
name|u32
name|base_sqpn
decl_stmt|;
name|u32
name|base_proxy_sqpn
decl_stmt|;
name|u32
name|base_tunnel_sqpn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_caps
block|{
name|u64
name|fw_ver
decl_stmt|;
name|u32
name|function
decl_stmt|;
name|int
name|num_ports
decl_stmt|;
name|int
name|vl_cap
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|ib_mtu_cap
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|__be32
name|ib_port_def_cap
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u64
name|def_mac
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|eth_mtu_cap
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|gid_table_len
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|pkey_table_len
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|trans_type
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|vendor_oui
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|wavelength
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u64
name|trans_code
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|local_ca_ack_delay
decl_stmt|;
name|int
name|num_uars
decl_stmt|;
name|u32
name|uar_page_size
decl_stmt|;
name|int
name|bf_reg_size
decl_stmt|;
name|int
name|bf_regs_per_page
decl_stmt|;
name|int
name|max_sq_sg
decl_stmt|;
name|int
name|max_rq_sg
decl_stmt|;
name|int
name|num_qps
decl_stmt|;
name|int
name|max_wqes
decl_stmt|;
name|int
name|max_sq_desc_sz
decl_stmt|;
name|int
name|max_rq_desc_sz
decl_stmt|;
name|int
name|max_qp_init_rdma
decl_stmt|;
name|int
name|max_qp_dest_rdma
decl_stmt|;
name|int
name|max_tc_eth
decl_stmt|;
name|u32
modifier|*
name|qp0_qkey
decl_stmt|;
name|u32
modifier|*
name|qp0_proxy
decl_stmt|;
name|u32
modifier|*
name|qp1_proxy
decl_stmt|;
name|u32
modifier|*
name|qp0_tunnel
decl_stmt|;
name|u32
modifier|*
name|qp1_tunnel
decl_stmt|;
name|int
name|num_srqs
decl_stmt|;
name|int
name|max_srq_wqes
decl_stmt|;
name|int
name|max_srq_sge
decl_stmt|;
name|int
name|reserved_srqs
decl_stmt|;
name|int
name|num_cqs
decl_stmt|;
name|int
name|max_cqes
decl_stmt|;
name|int
name|reserved_cqs
decl_stmt|;
name|int
name|num_sys_eqs
decl_stmt|;
name|int
name|num_eqs
decl_stmt|;
name|int
name|reserved_eqs
decl_stmt|;
name|int
name|num_comp_vectors
decl_stmt|;
name|int
name|num_mpts
decl_stmt|;
name|int
name|max_fmr_maps
decl_stmt|;
name|int
name|num_mtts
decl_stmt|;
name|int
name|fmr_reserved_mtts
decl_stmt|;
name|int
name|reserved_mtts
decl_stmt|;
name|int
name|reserved_mrws
decl_stmt|;
name|int
name|reserved_uars
decl_stmt|;
name|int
name|num_mgms
decl_stmt|;
name|int
name|num_amgms
decl_stmt|;
name|int
name|reserved_mcgs
decl_stmt|;
name|int
name|num_qp_per_mgm
decl_stmt|;
name|int
name|steering_mode
decl_stmt|;
name|int
name|dmfs_high_steer_mode
decl_stmt|;
name|int
name|fs_log_max_ucast_qp_range_size
decl_stmt|;
name|int
name|num_pds
decl_stmt|;
name|int
name|reserved_pds
decl_stmt|;
name|int
name|max_xrcds
decl_stmt|;
name|int
name|reserved_xrcds
decl_stmt|;
name|int
name|mtt_entry_sz
decl_stmt|;
name|u32
name|max_msg_sz
decl_stmt|;
name|u32
name|page_size_cap
decl_stmt|;
name|u64
name|flags
decl_stmt|;
name|u64
name|flags2
decl_stmt|;
name|u32
name|bmme_flags
decl_stmt|;
name|u32
name|reserved_lkey
decl_stmt|;
name|u16
name|stat_rate_support
decl_stmt|;
name|u8
name|port_width_cap
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|max_gso_sz
decl_stmt|;
name|int
name|max_rss_tbl_sz
decl_stmt|;
name|int
name|reserved_qps_cnt
index|[
name|MLX4_NUM_QP_REGION
index|]
decl_stmt|;
name|int
name|reserved_qps
decl_stmt|;
name|int
name|reserved_qps_base
index|[
name|MLX4_NUM_QP_REGION
index|]
decl_stmt|;
name|int
name|log_num_macs
decl_stmt|;
name|int
name|log_num_vlans
decl_stmt|;
name|enum
name|mlx4_port_type
name|port_type
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u8
name|supported_type
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u8
name|suggested_type
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u8
name|default_sense
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u32
name|port_mask
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|enum
name|mlx4_port_type
name|possible_type
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u32
name|max_counters
decl_stmt|;
name|u8
name|port_ib_mtu
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u16
name|sqp_demux
decl_stmt|;
name|u32
name|eqe_size
decl_stmt|;
name|u32
name|cqe_size
decl_stmt|;
name|u8
name|eqe_factor
decl_stmt|;
name|u32
name|userspace_caps
decl_stmt|;
comment|/* userspace must be aware of these */
name|u32
name|function_caps
decl_stmt|;
comment|/* VFs must be aware of these */
name|u16
name|hca_core_clock
decl_stmt|;
name|u64
name|phys_port_id
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|tunnel_offload_mode
decl_stmt|;
name|u8
name|rx_checksum_flags_port
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u8
name|phv_bit
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u8
name|alloc_res_qp_mask
decl_stmt|;
name|u32
name|dmfs_high_rate_qpn_base
decl_stmt|;
name|u32
name|dmfs_high_rate_qpn_range
decl_stmt|;
name|u32
name|vf_caps
decl_stmt|;
name|struct
name|mlx4_rate_limit_caps
name|rl_caps
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_buf_list
block|{
name|void
modifier|*
name|buf
decl_stmt|;
name|dma_addr_t
name|map
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_buf
block|{
name|struct
name|mlx4_buf_list
name|direct
decl_stmt|;
name|struct
name|mlx4_buf_list
modifier|*
name|page_list
decl_stmt|;
name|int
name|nbufs
decl_stmt|;
name|int
name|npages
decl_stmt|;
name|int
name|page_shift
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_mtt
block|{
name|u32
name|offset
decl_stmt|;
name|int
name|order
decl_stmt|;
name|int
name|page_shift
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX4_DB_PER_PAGE
init|=
name|PAGE_SIZE
operator|/
literal|4
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_db_pgdir
block|{
name|struct
name|list_head
name|list
decl_stmt|;
name|DECLARE_BITMAP
argument_list|(
name|order0
argument_list|,
name|MLX4_DB_PER_PAGE
argument_list|)
expr_stmt|;
name|DECLARE_BITMAP
argument_list|(
name|order1
argument_list|,
name|MLX4_DB_PER_PAGE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|unsigned
name|long
modifier|*
name|bits
index|[
literal|2
index|]
decl_stmt|;
name|__be32
modifier|*
name|db_page
decl_stmt|;
name|dma_addr_t
name|db_dma
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|mlx4_ib_user_db_page
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|mlx4_db
block|{
name|__be32
modifier|*
name|db
decl_stmt|;
union|union
block|{
name|struct
name|mlx4_db_pgdir
modifier|*
name|pgdir
decl_stmt|;
name|struct
name|mlx4_ib_user_db_page
modifier|*
name|user_page
decl_stmt|;
block|}
name|u
union|;
name|dma_addr_t
name|dma
decl_stmt|;
name|int
name|index
decl_stmt|;
name|int
name|order
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_hwq_resources
block|{
name|struct
name|mlx4_db
name|db
decl_stmt|;
name|struct
name|mlx4_mtt
name|mtt
decl_stmt|;
name|struct
name|mlx4_buf
name|buf
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_mr
block|{
name|struct
name|mlx4_mtt
name|mtt
decl_stmt|;
name|u64
name|iova
decl_stmt|;
name|u64
name|size
decl_stmt|;
name|u32
name|key
decl_stmt|;
name|u32
name|pd
decl_stmt|;
name|u32
name|access
decl_stmt|;
name|int
name|enabled
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx4_mw_type
block|{
name|MLX4_MW_TYPE_1
init|=
literal|1
block|,
name|MLX4_MW_TYPE_2
init|=
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_mw
block|{
name|u32
name|key
decl_stmt|;
name|u32
name|pd
decl_stmt|;
name|enum
name|mlx4_mw_type
name|type
decl_stmt|;
name|int
name|enabled
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_fmr
block|{
name|struct
name|mlx4_mr
name|mr
decl_stmt|;
name|struct
name|mlx4_mpt_entry
modifier|*
name|mpt
decl_stmt|;
name|__be64
modifier|*
name|mtts
decl_stmt|;
name|dma_addr_t
name|dma_handle
decl_stmt|;
name|int
name|max_pages
decl_stmt|;
name|int
name|max_maps
decl_stmt|;
name|int
name|maps
decl_stmt|;
name|u8
name|page_shift
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_uar
block|{
name|unsigned
name|long
name|pfn
decl_stmt|;
name|int
name|index
decl_stmt|;
name|struct
name|list_head
name|bf_list
decl_stmt|;
name|unsigned
name|free_bf_bmap
decl_stmt|;
name|void
name|__iomem
modifier|*
name|map
decl_stmt|;
name|void
name|__iomem
modifier|*
name|bf_map
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_bf
block|{
name|unsigned
name|int
name|offset
decl_stmt|;
name|int
name|buf_size
decl_stmt|;
name|struct
name|mlx4_uar
modifier|*
name|uar
decl_stmt|;
name|void
name|__iomem
modifier|*
name|reg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_cq
block|{
name|void
function_decl|(
modifier|*
name|comp
function_decl|)
parameter_list|(
name|struct
name|mlx4_cq
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|event
function_decl|)
parameter_list|(
name|struct
name|mlx4_cq
modifier|*
parameter_list|,
name|enum
name|mlx4_event
parameter_list|)
function_decl|;
name|struct
name|mlx4_uar
modifier|*
name|uar
decl_stmt|;
name|u32
name|cons_index
decl_stmt|;
name|u16
name|irq
decl_stmt|;
name|__be32
modifier|*
name|set_ci_db
decl_stmt|;
name|__be32
modifier|*
name|arm_db
decl_stmt|;
name|int
name|arm_sn
decl_stmt|;
name|int
name|cqn
decl_stmt|;
name|unsigned
name|vector
decl_stmt|;
name|atomic_t
name|refcount
decl_stmt|;
name|struct
name|completion
name|free
decl_stmt|;
name|int
name|reset_notify_added
decl_stmt|;
name|struct
name|list_head
name|reset_notify
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_qp
block|{
name|void
function_decl|(
modifier|*
name|event
function_decl|)
parameter_list|(
name|struct
name|mlx4_qp
modifier|*
parameter_list|,
name|enum
name|mlx4_event
parameter_list|)
function_decl|;
name|int
name|qpn
decl_stmt|;
name|atomic_t
name|refcount
decl_stmt|;
name|struct
name|completion
name|free
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_srq
block|{
name|void
function_decl|(
modifier|*
name|event
function_decl|)
parameter_list|(
name|struct
name|mlx4_srq
modifier|*
parameter_list|,
name|enum
name|mlx4_event
parameter_list|)
function_decl|;
name|int
name|srqn
decl_stmt|;
name|int
name|max
decl_stmt|;
name|int
name|max_gs
decl_stmt|;
name|int
name|wqe_shift
decl_stmt|;
name|atomic_t
name|refcount
decl_stmt|;
name|struct
name|completion
name|free
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_av
block|{
name|__be32
name|port_pd
decl_stmt|;
name|u8
name|reserved1
decl_stmt|;
name|u8
name|g_slid
decl_stmt|;
name|__be16
name|dlid
decl_stmt|;
name|u8
name|reserved2
decl_stmt|;
name|u8
name|gid_index
decl_stmt|;
name|u8
name|stat_rate
decl_stmt|;
name|u8
name|hop_limit
decl_stmt|;
name|__be32
name|sl_tclass_flowlabel
decl_stmt|;
name|u8
name|dgid
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_eth_av
block|{
name|__be32
name|port_pd
decl_stmt|;
name|u8
name|reserved1
decl_stmt|;
name|u8
name|smac_idx
decl_stmt|;
name|u16
name|reserved2
decl_stmt|;
name|u8
name|reserved3
decl_stmt|;
name|u8
name|gid_index
decl_stmt|;
name|u8
name|stat_rate
decl_stmt|;
name|u8
name|hop_limit
decl_stmt|;
name|__be32
name|sl_tclass_flowlabel
decl_stmt|;
name|u8
name|dgid
index|[
literal|16
index|]
decl_stmt|;
name|u8
name|s_mac
index|[
literal|6
index|]
decl_stmt|;
name|u8
name|reserved4
index|[
literal|2
index|]
decl_stmt|;
name|__be16
name|vlan
decl_stmt|;
name|u8
name|mac
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_union
union|union
name|mlx4_ext_av
block|{
name|struct
name|mlx4_av
name|ib
decl_stmt|;
name|struct
name|mlx4_eth_av
name|eth
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/* Counters should be saturate once they reach their maximum value */
end_comment

begin_define
define|#
directive|define
name|ASSIGN_32BIT_COUNTER
parameter_list|(
name|counter
parameter_list|,
name|value
parameter_list|)
value|do {	\ 	if ((value)> U32_MAX)				\ 		counter = cpu_to_be32(U32_MAX);		\ 	else						\ 		counter = cpu_to_be32(value);		\ } while (0)
end_define

begin_struct
struct|struct
name|mlx4_counter
block|{
name|u8
name|reserved1
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|counter_mode
decl_stmt|;
name|__be32
name|num_ifc
decl_stmt|;
name|u32
name|reserved2
index|[
literal|2
index|]
decl_stmt|;
name|__be64
name|rx_frames
decl_stmt|;
name|__be64
name|rx_bytes
decl_stmt|;
name|__be64
name|tx_frames
decl_stmt|;
name|__be64
name|tx_bytes
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_quotas
block|{
name|int
name|qp
decl_stmt|;
name|int
name|cq
decl_stmt|;
name|int
name|srq
decl_stmt|;
name|int
name|mpt
decl_stmt|;
name|int
name|mtt
decl_stmt|;
name|int
name|counter
decl_stmt|;
name|int
name|xrcd
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_vf_dev
block|{
name|u8
name|min_port
decl_stmt|;
name|u8
name|n_ports
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx4_pci_status
block|{
name|MLX4_PCI_STATUS_DISABLED
block|,
name|MLX4_PCI_STATUS_ENABLED
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_dev_persistent
block|{
name|struct
name|pci_dev
modifier|*
name|pdev
decl_stmt|;
name|struct
name|mlx4_dev
modifier|*
name|dev
decl_stmt|;
name|int
name|nvfs
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|num_vfs
decl_stmt|;
name|enum
name|mlx4_port_type
name|curr_port_type
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|enum
name|mlx4_port_type
name|curr_port_poss_type
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|struct
name|work_struct
name|catas_work
decl_stmt|;
name|struct
name|workqueue_struct
modifier|*
name|catas_wq
decl_stmt|;
name|struct
name|mutex
name|device_state_mutex
decl_stmt|;
comment|/* protect HW state */
name|u8
name|state
decl_stmt|;
name|struct
name|mutex
name|interface_state_mutex
decl_stmt|;
comment|/* protect SW state */
name|u8
name|interface_state
decl_stmt|;
name|struct
name|mutex
name|pci_status_mutex
decl_stmt|;
comment|/* sync pci state */
name|enum
name|mlx4_pci_status
name|pci_status
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_dev
block|{
name|struct
name|mlx4_dev_persistent
modifier|*
name|persist
decl_stmt|;
name|unsigned
name|long
name|flags
decl_stmt|;
name|unsigned
name|long
name|num_slaves
decl_stmt|;
name|struct
name|mlx4_caps
name|caps
decl_stmt|;
name|struct
name|mlx4_phys_caps
name|phys_caps
decl_stmt|;
name|struct
name|mlx4_quotas
name|quotas
decl_stmt|;
name|struct
name|radix_tree_root
name|qp_table_tree
decl_stmt|;
name|u8
name|rev_id
decl_stmt|;
name|u8
name|port_random_macs
decl_stmt|;
name|char
name|board_id
index|[
name|MLX4_BOARD_ID_LEN
index|]
decl_stmt|;
name|int
name|numa_node
decl_stmt|;
name|int
name|oper_log_mgm_entry_size
decl_stmt|;
name|u64
name|regid_promisc_array
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u64
name|regid_allmulti_array
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|struct
name|mlx4_vf_dev
modifier|*
name|dev_vfs
decl_stmt|;
name|u8
name|uar_page_shift
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_clock_params
block|{
name|u64
name|offset
decl_stmt|;
name|u8
name|bar
decl_stmt|;
name|u8
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_eqe
block|{
name|u8
name|reserved1
decl_stmt|;
name|u8
name|type
decl_stmt|;
name|u8
name|reserved2
decl_stmt|;
name|u8
name|subtype
decl_stmt|;
union|union
block|{
name|u32
name|raw
index|[
literal|6
index|]
decl_stmt|;
struct|struct
block|{
name|__be32
name|cqn
decl_stmt|;
block|}
name|__packed
name|comp
struct|;
struct|struct
block|{
name|u16
name|reserved1
decl_stmt|;
name|__be16
name|token
decl_stmt|;
name|u32
name|reserved2
decl_stmt|;
name|u8
name|reserved3
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|status
decl_stmt|;
name|__be64
name|out_param
decl_stmt|;
block|}
name|__packed
name|cmd
struct|;
struct|struct
block|{
name|__be32
name|qpn
decl_stmt|;
block|}
name|__packed
name|qp
struct|;
struct|struct
block|{
name|__be32
name|srqn
decl_stmt|;
block|}
name|__packed
name|srq
struct|;
struct|struct
block|{
name|__be32
name|cqn
decl_stmt|;
name|u32
name|reserved1
decl_stmt|;
name|u8
name|reserved2
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|syndrome
decl_stmt|;
block|}
name|__packed
name|cq_err
struct|;
struct|struct
block|{
name|u32
name|reserved1
index|[
literal|2
index|]
decl_stmt|;
name|__be32
name|port
decl_stmt|;
block|}
name|__packed
name|port_change
struct|;
struct|struct
block|{
define|#
directive|define
name|COMM_CHANNEL_BIT_ARRAY_SIZE
value|4
name|u32
name|reserved
decl_stmt|;
name|u32
name|bit_vec
index|[
name|COMM_CHANNEL_BIT_ARRAY_SIZE
index|]
decl_stmt|;
block|}
name|__packed
name|comm_channel_arm
struct|;
struct|struct
block|{
name|u8
name|port
decl_stmt|;
name|u8
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|__be64
name|mac
decl_stmt|;
block|}
name|__packed
name|mac_update
struct|;
struct|struct
block|{
name|__be32
name|slave_id
decl_stmt|;
block|}
name|__packed
name|flr_event
struct|;
struct|struct
block|{
name|__be16
name|current_temperature
decl_stmt|;
name|__be16
name|warning_threshold
decl_stmt|;
block|}
name|__packed
name|warming
struct|;
struct|struct
block|{
name|u8
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|port
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|__be16
name|mstr_sm_lid
decl_stmt|;
name|__be16
name|port_lid
decl_stmt|;
name|__be32
name|changed_attr
decl_stmt|;
name|u8
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|mstr_sm_sl
decl_stmt|;
name|__be64
name|gid_prefix
decl_stmt|;
block|}
name|__packed
name|port_info
struct|;
struct|struct
block|{
name|__be32
name|block_ptr
decl_stmt|;
name|__be32
name|tbl_entries_mask
decl_stmt|;
block|}
name|__packed
name|tbl_change_info
struct|;
struct|struct
block|{
name|u8
name|sl2vl_table
index|[
literal|8
index|]
decl_stmt|;
block|}
name|__packed
name|sl2vl_tbl_change_info
struct|;
block|}
name|params
union|;
block|}
name|__packed
name|port_mgmt_change
struct|;
struct|struct
block|{
name|u8
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|port
decl_stmt|;
name|u32
name|reserved1
index|[
literal|5
index|]
decl_stmt|;
block|}
name|__packed
name|bad_cable
struct|;
block|}
name|event
union|;
name|u8
name|slave_id
decl_stmt|;
name|u8
name|reserved3
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|owner
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_init_port_param
block|{
name|int
name|set_guid0
decl_stmt|;
name|int
name|set_node_guid
decl_stmt|;
name|int
name|set_si_guid
decl_stmt|;
name|u16
name|mtu
decl_stmt|;
name|int
name|port_width_cap
decl_stmt|;
name|u16
name|vl_cap
decl_stmt|;
name|u16
name|max_gid
decl_stmt|;
name|u16
name|max_pkey
decl_stmt|;
name|u64
name|guid0
decl_stmt|;
name|u64
name|node_guid
decl_stmt|;
name|u64
name|si_guid
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MAD_IFC_DATA_SZ
value|192
end_define

begin_comment
comment|/* MAD IFC Mailbox */
end_comment

begin_struct
struct|struct
name|mlx4_mad_ifc
block|{
name|u8
name|base_version
decl_stmt|;
name|u8
name|mgmt_class
decl_stmt|;
name|u8
name|class_version
decl_stmt|;
name|u8
name|method
decl_stmt|;
name|__be16
name|status
decl_stmt|;
name|__be16
name|class_specific
decl_stmt|;
name|__be64
name|tid
decl_stmt|;
name|__be16
name|attr_id
decl_stmt|;
name|__be16
name|resv
decl_stmt|;
name|__be32
name|attr_mod
decl_stmt|;
name|__be64
name|mkey
decl_stmt|;
name|__be16
name|dr_slid
decl_stmt|;
name|__be16
name|dr_dlid
decl_stmt|;
name|u8
name|reserved
index|[
literal|28
index|]
decl_stmt|;
name|u8
name|data
index|[
name|MAD_IFC_DATA_SZ
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|mlx4_foreach_port
parameter_list|(
name|port
parameter_list|,
name|dev
parameter_list|,
name|type
parameter_list|)
define|\
value|for ((port) = 1; (port)<= (dev)->caps.num_ports; (port)++)	\ 		if ((type) == (dev)->caps.port_mask[(port)])
end_define

begin_define
define|#
directive|define
name|mlx4_foreach_ib_transport_port
parameter_list|(
name|port
parameter_list|,
name|dev
parameter_list|)
define|\
value|for ((port) = 1; (port)<= (dev)->caps.num_ports; (port)++)       \ 		if (((dev)->caps.port_mask[port] == MLX4_PORT_TYPE_IB) || \ 			((dev)->caps.flags& MLX4_DEV_CAP_FLAG_IBOE) || \ 			((dev)->caps.flags2& MLX4_DEV_CAP_FLAG2_ROCE_V1_V2))
end_define

begin_define
define|#
directive|define
name|MLX4_INVALID_SLAVE_ID
value|0xFF
end_define

begin_define
define|#
directive|define
name|MLX4_SINK_COUNTER_INDEX
parameter_list|(
name|dev
parameter_list|)
value|(dev->caps.max_counters - 1)
end_define

begin_function_decl
name|void
name|handle_port_mgmt_change_event
parameter_list|(
name|struct
name|work_struct
modifier|*
name|work
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_master_func_num
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
block|{
return|return
name|dev
operator|->
name|caps
operator|.
name|function
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_is_master
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
block|{
return|return
name|dev
operator|->
name|flags
operator|&
name|MLX4_FLAG_MASTER
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_num_reserved_sqps
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
block|{
return|return
name|dev
operator|->
name|phys_caps
operator|.
name|base_sqpn
operator|+
literal|8
operator|+
literal|16
operator|*
name|MLX4_MFUNC_MAX
operator|*
operator|!
operator|!
name|mlx4_is_master
argument_list|(
name|dev
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_is_qp_reserved
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|qpn
parameter_list|)
block|{
return|return
operator|(
name|qpn
operator|<
name|dev
operator|->
name|phys_caps
operator|.
name|base_sqpn
operator|+
literal|8
operator|+
literal|16
operator|*
name|MLX4_MFUNC_MAX
operator|*
operator|!
operator|!
name|mlx4_is_master
argument_list|(
name|dev
argument_list|)
operator|&&
name|qpn
operator|>=
name|dev
operator|->
name|phys_caps
operator|.
name|base_sqpn
operator|)
operator|||
operator|(
name|qpn
operator|<
name|dev
operator|->
name|caps
operator|.
name|reserved_qps_cnt
index|[
name|MLX4_QP_REGION_FW
index|]
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_is_guest_proxy
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|u32
name|qpn
parameter_list|)
block|{
name|int
name|guest_proxy_base
init|=
name|dev
operator|->
name|phys_caps
operator|.
name|base_proxy_sqpn
operator|+
name|slave
operator|*
literal|8
decl_stmt|;
if|if
condition|(
name|qpn
operator|>=
name|guest_proxy_base
operator|&&
name|qpn
operator|<
name|guest_proxy_base
operator|+
literal|8
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_is_mfunc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
block|{
return|return
name|dev
operator|->
name|flags
operator|&
operator|(
name|MLX4_FLAG_SLAVE
operator||
name|MLX4_FLAG_MASTER
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_is_slave
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
block|{
return|return
name|dev
operator|->
name|flags
operator|&
name|MLX4_FLAG_SLAVE
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_is_eth
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
name|dev
operator|->
name|caps
operator|.
name|port_type
index|[
name|port
index|]
operator|==
name|MLX4_PORT_TYPE_IB
condition|?
literal|0
else|:
literal|1
return|;
block|}
end_function

begin_function_decl
name|int
name|mlx4_buf_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|max_direct
parameter_list|,
name|struct
name|mlx4_buf
modifier|*
name|buf
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_buf_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|size
parameter_list|,
name|struct
name|mlx4_buf
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|mlx4_buf_offset
parameter_list|(
name|struct
name|mlx4_buf
modifier|*
name|buf
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|BITS_PER_LONG
operator|==
literal|64
operator|||
name|buf
operator|->
name|nbufs
operator|==
literal|1
condition|)
return|return
operator|(
name|u8
operator|*
operator|)
name|buf
operator|->
name|direct
operator|.
name|buf
operator|+
name|offset
return|;
else|else
return|return
operator|(
name|u8
operator|*
operator|)
name|buf
operator|->
name|page_list
index|[
name|offset
operator|>>
name|PAGE_SHIFT
index|]
operator|.
name|buf
operator|+
operator|(
name|offset
operator|&
operator|(
name|PAGE_SIZE
operator|-
literal|1
operator|)
operator|)
return|;
block|}
end_function

begin_function_decl
name|int
name|mlx4_pd_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
modifier|*
name|pdn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_pd_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|pdn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_xrcd_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
modifier|*
name|xrcdn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_xrcd_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|xrcdn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_uar_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_uar
modifier|*
name|uar
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_uar_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_uar
modifier|*
name|uar
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_bf_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_bf
modifier|*
name|bf
parameter_list|,
name|int
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_bf_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_bf
modifier|*
name|bf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mtt_init
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|npages
parameter_list|,
name|int
name|page_shift
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_mtt_cleanup
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u64
name|mlx4_mtt_addr
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mr_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|pd
parameter_list|,
name|u64
name|iova
parameter_list|,
name|u64
name|size
parameter_list|,
name|u32
name|access
parameter_list|,
name|int
name|npages
parameter_list|,
name|int
name|page_shift
parameter_list|,
name|struct
name|mlx4_mr
modifier|*
name|mr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mr_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mr
modifier|*
name|mr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mr_enable
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mr
modifier|*
name|mr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mw_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|pd
parameter_list|,
name|enum
name|mlx4_mw_type
name|type
parameter_list|,
name|struct
name|mlx4_mw
modifier|*
name|mw
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_mw_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mw
modifier|*
name|mw
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mw_enable
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mw
modifier|*
name|mw
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_write_mtt
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|,
name|int
name|start_index
parameter_list|,
name|int
name|npages
parameter_list|,
name|u64
modifier|*
name|page_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_buf_write_mtt
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|,
name|struct
name|mlx4_buf
modifier|*
name|buf
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_db_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_db
modifier|*
name|db
parameter_list|,
name|int
name|order
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_db_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_db
modifier|*
name|db
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_alloc_hwq_res
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_hwq_resources
modifier|*
name|wqres
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|max_direct
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_free_hwq_res
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|mdev
parameter_list|,
name|struct
name|mlx4_hwq_resources
modifier|*
name|wqres
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_cq_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|nent
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|,
name|struct
name|mlx4_uar
modifier|*
name|uar
parameter_list|,
name|u64
name|db_rec
parameter_list|,
name|struct
name|mlx4_cq
modifier|*
name|cq
parameter_list|,
name|unsigned
name|vector
parameter_list|,
name|int
name|collapsed
parameter_list|,
name|int
name|timestamp_en
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_cq_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_qp_reserve_range
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|cnt
parameter_list|,
name|int
name|align
parameter_list|,
name|int
modifier|*
name|base
parameter_list|,
name|u8
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_qp_release_range
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|base_qpn
parameter_list|,
name|int
name|cnt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_qp_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|qpn
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_qp_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_srq_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|pdn
parameter_list|,
name|u32
name|cqn
parameter_list|,
name|u16
name|xrcdn
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|,
name|u64
name|db_rec
parameter_list|,
name|struct
name|mlx4_srq
modifier|*
name|srq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_srq_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_srq
modifier|*
name|srq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_srq_arm
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_srq
modifier|*
name|srq
parameter_list|,
name|int
name|limit_watermark
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_srq_query
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_srq
modifier|*
name|srq
parameter_list|,
name|int
modifier|*
name|limit_watermark
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_INIT_PORT
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_CLOSE_PORT
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_unicast_attach
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|,
name|u8
name|gid
index|[
literal|16
index|]
parameter_list|,
name|int
name|block_mcast_loopback
parameter_list|,
name|enum
name|mlx4_protocol
name|prot
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_unicast_detach
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|,
name|u8
name|gid
index|[
literal|16
index|]
parameter_list|,
name|enum
name|mlx4_protocol
name|prot
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_multicast_attach
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|,
name|u8
name|gid
index|[
literal|16
index|]
parameter_list|,
name|u8
name|port
parameter_list|,
name|int
name|block_mcast_loopback
parameter_list|,
name|enum
name|mlx4_protocol
name|protocol
parameter_list|,
name|u64
modifier|*
name|reg_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_multicast_detach
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|,
name|u8
name|gid
index|[
literal|16
index|]
parameter_list|,
name|enum
name|mlx4_protocol
name|protocol
parameter_list|,
name|u64
name|reg_id
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
block|{
name|MLX4_DOMAIN_UVERBS
init|=
literal|0x1000
block|,
name|MLX4_DOMAIN_ETHTOOL
init|=
literal|0x2000
block|,
name|MLX4_DOMAIN_RFS
init|=
literal|0x3000
block|,
name|MLX4_DOMAIN_NIC
init|=
literal|0x5000
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx4_net_trans_rule_id
block|{
name|MLX4_NET_TRANS_RULE_ID_ETH
init|=
literal|0
block|,
name|MLX4_NET_TRANS_RULE_ID_IB
block|,
name|MLX4_NET_TRANS_RULE_ID_IPV6
block|,
name|MLX4_NET_TRANS_RULE_ID_IPV4
block|,
name|MLX4_NET_TRANS_RULE_ID_TCP
block|,
name|MLX4_NET_TRANS_RULE_ID_UDP
block|,
name|MLX4_NET_TRANS_RULE_ID_VXLAN
block|,
name|MLX4_NET_TRANS_RULE_NUM
block|,
comment|/* should be last */
name|MLX4_NET_TRANS_RULE_DUMMY
init|=
operator|-
literal|1
block|,
comment|/* force enum to be signed */
block|}
enum|;
end_enum

begin_decl_stmt
specifier|extern
specifier|const
name|u16
name|__sw_id_hw
index|[]
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|map_hw_to_sw_id
parameter_list|(
name|u16
name|header_id
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|MLX4_NET_TRANS_RULE_NUM
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|header_id
operator|==
name|__sw_id_hw
index|[
name|i
index|]
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
name|EINVAL
return|;
block|}
end_function

begin_enum
enum|enum
name|mlx4_net_trans_promisc_mode
block|{
name|MLX4_FS_REGULAR
init|=
literal|1
block|,
name|MLX4_FS_ALL_DEFAULT
block|,
name|MLX4_FS_MC_DEFAULT
block|,
name|MLX4_FS_MIRROR_RX_PORT
block|,
name|MLX4_FS_MIRROR_SX_PORT
block|,
name|MLX4_FS_UC_SNIFFER
block|,
name|MLX4_FS_MC_SNIFFER
block|,
name|MLX4_FS_MODE_NUM
block|,
comment|/* should be last */
name|MLX4_FS_MODE_DUMMY
init|=
operator|-
literal|1
block|,
comment|/* force enum to be signed */
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_spec_eth
block|{
name|u8
name|dst_mac
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|dst_mac_msk
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|src_mac
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|src_mac_msk
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|ether_type_enable
decl_stmt|;
name|__be16
name|ether_type
decl_stmt|;
name|__be16
name|vlan_id_msk
decl_stmt|;
name|__be16
name|vlan_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_spec_tcp_udp
block|{
name|__be16
name|dst_port
decl_stmt|;
name|__be16
name|dst_port_msk
decl_stmt|;
name|__be16
name|src_port
decl_stmt|;
name|__be16
name|src_port_msk
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_spec_ipv4
block|{
name|__be32
name|dst_ip
decl_stmt|;
name|__be32
name|dst_ip_msk
decl_stmt|;
name|__be32
name|src_ip
decl_stmt|;
name|__be32
name|src_ip_msk
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_spec_ib
block|{
name|__be32
name|l3_qpn
decl_stmt|;
name|__be32
name|qpn_msk
decl_stmt|;
name|u8
name|dst_gid
index|[
literal|16
index|]
decl_stmt|;
name|u8
name|dst_gid_msk
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_spec_vxlan
block|{
name|__be32
name|vni
decl_stmt|;
name|__be32
name|vni_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_spec_list
block|{
name|struct
name|list_head
name|list
decl_stmt|;
name|enum
name|mlx4_net_trans_rule_id
name|id
decl_stmt|;
union|union
block|{
name|struct
name|mlx4_spec_eth
name|eth
decl_stmt|;
name|struct
name|mlx4_spec_ib
name|ib
decl_stmt|;
name|struct
name|mlx4_spec_ipv4
name|ipv4
decl_stmt|;
name|struct
name|mlx4_spec_tcp_udp
name|tcp_udp
decl_stmt|;
name|struct
name|mlx4_spec_vxlan
name|vxlan
decl_stmt|;
block|}
union|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx4_net_trans_hw_rule_queue
block|{
name|MLX4_NET_TRANS_Q_FIFO
block|,
name|MLX4_NET_TRANS_Q_LIFO
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_net_trans_rule
block|{
name|struct
name|list_head
name|list
decl_stmt|;
name|enum
name|mlx4_net_trans_hw_rule_queue
name|queue_mode
decl_stmt|;
name|bool
name|exclusive
decl_stmt|;
name|bool
name|allow_loopback
decl_stmt|;
name|enum
name|mlx4_net_trans_promisc_mode
name|promisc_mode
decl_stmt|;
name|u8
name|port
decl_stmt|;
name|u16
name|priority
decl_stmt|;
name|u32
name|qpn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_net_trans_rule_hw_ctrl
block|{
name|__be16
name|prio
decl_stmt|;
name|u8
name|type
decl_stmt|;
name|u8
name|flags
decl_stmt|;
name|u8
name|rsvd1
decl_stmt|;
name|u8
name|funcid
decl_stmt|;
name|u8
name|vep
decl_stmt|;
name|u8
name|port
decl_stmt|;
name|__be32
name|qpn
decl_stmt|;
name|__be32
name|rsvd2
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_net_trans_rule_hw_ib
block|{
name|u8
name|size
decl_stmt|;
name|u8
name|rsvd1
decl_stmt|;
name|__be16
name|id
decl_stmt|;
name|u32
name|rsvd2
decl_stmt|;
name|__be32
name|l3_qpn
decl_stmt|;
name|__be32
name|qpn_mask
decl_stmt|;
name|u8
name|dst_gid
index|[
literal|16
index|]
decl_stmt|;
name|u8
name|dst_gid_msk
index|[
literal|16
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_net_trans_rule_hw_eth
block|{
name|u8
name|size
decl_stmt|;
name|u8
name|rsvd
decl_stmt|;
name|__be16
name|id
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|6
index|]
decl_stmt|;
name|u8
name|dst_mac
index|[
literal|6
index|]
decl_stmt|;
name|u16
name|rsvd2
decl_stmt|;
name|u8
name|dst_mac_msk
index|[
literal|6
index|]
decl_stmt|;
name|u16
name|rsvd3
decl_stmt|;
name|u8
name|src_mac
index|[
literal|6
index|]
decl_stmt|;
name|u16
name|rsvd4
decl_stmt|;
name|u8
name|src_mac_msk
index|[
literal|6
index|]
decl_stmt|;
name|u8
name|rsvd5
decl_stmt|;
name|u8
name|ether_type_enable
decl_stmt|;
name|__be16
name|ether_type
decl_stmt|;
name|__be16
name|vlan_tag_msk
decl_stmt|;
name|__be16
name|vlan_tag
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_net_trans_rule_hw_tcp_udp
block|{
name|u8
name|size
decl_stmt|;
name|u8
name|rsvd
decl_stmt|;
name|__be16
name|id
decl_stmt|;
name|__be16
name|rsvd1
index|[
literal|3
index|]
decl_stmt|;
name|__be16
name|dst_port
decl_stmt|;
name|__be16
name|rsvd2
decl_stmt|;
name|__be16
name|dst_port_msk
decl_stmt|;
name|__be16
name|rsvd3
decl_stmt|;
name|__be16
name|src_port
decl_stmt|;
name|__be16
name|rsvd4
decl_stmt|;
name|__be16
name|src_port_msk
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_net_trans_rule_hw_ipv4
block|{
name|u8
name|size
decl_stmt|;
name|u8
name|rsvd
decl_stmt|;
name|__be16
name|id
decl_stmt|;
name|__be32
name|rsvd1
decl_stmt|;
name|__be32
name|dst_ip
decl_stmt|;
name|__be32
name|dst_ip_msk
decl_stmt|;
name|__be32
name|src_ip
decl_stmt|;
name|__be32
name|src_ip_msk
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_net_trans_rule_hw_vxlan
block|{
name|u8
name|size
decl_stmt|;
name|u8
name|rsvd
decl_stmt|;
name|__be16
name|id
decl_stmt|;
name|__be32
name|rsvd1
decl_stmt|;
name|__be32
name|vni
decl_stmt|;
name|__be32
name|vni_mask
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|_rule_hw
block|{
union|union
block|{
struct|struct
block|{
name|u8
name|size
decl_stmt|;
name|u8
name|rsvd
decl_stmt|;
name|__be16
name|id
decl_stmt|;
block|}
struct|;
name|struct
name|mlx4_net_trans_rule_hw_eth
name|eth
decl_stmt|;
name|struct
name|mlx4_net_trans_rule_hw_ib
name|ib
decl_stmt|;
name|struct
name|mlx4_net_trans_rule_hw_ipv4
name|ipv4
decl_stmt|;
name|struct
name|mlx4_net_trans_rule_hw_tcp_udp
name|tcp_udp
decl_stmt|;
name|struct
name|mlx4_net_trans_rule_hw_vxlan
name|vxlan
decl_stmt|;
block|}
union|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|VXLAN_STEER_BY_OUTER_MAC
init|=
literal|1
operator|<<
literal|0
block|,
name|VXLAN_STEER_BY_OUTER_VLAN
init|=
literal|1
operator|<<
literal|1
block|,
name|VXLAN_STEER_BY_VSID_VNI
init|=
literal|1
operator|<<
literal|2
block|,
name|VXLAN_STEER_BY_INNER_MAC
init|=
literal|1
operator|<<
literal|3
block|,
name|VXLAN_STEER_BY_INNER_VLAN
init|=
literal|1
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_OP_MOD_QUERY_TRANSPORT_CI_ERRORS
init|=
literal|0x2
block|, }
enum|;
end_enum

begin_function_decl
name|int
name|mlx4_flow_steer_promisc_add
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u32
name|qpn
parameter_list|,
name|enum
name|mlx4_net_trans_promisc_mode
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_flow_steer_promisc_remove
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|enum
name|mlx4_net_trans_promisc_mode
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_multicast_promisc_add
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|qpn
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_multicast_promisc_remove
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|qpn
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_unicast_promisc_add
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|qpn
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_unicast_promisc_remove
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|qpn
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_SET_MCAST_FLTR
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u64
name|mac
parameter_list|,
name|u64
name|clear
parameter_list|,
name|u8
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_register_mac
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u64
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_unregister_mac
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u64
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_base_qpn
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__mlx4_replace_mac
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|int
name|qpn
parameter_list|,
name|u64
name|new_mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_SET_PORT_general
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|int
name|mtu
parameter_list|,
name|u8
name|pptx
parameter_list|,
name|u8
name|pfctx
parameter_list|,
name|u8
name|pprx
parameter_list|,
name|u8
name|pfcrx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_SET_PORT_qpn_calc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u32
name|base_qpn
parameter_list|,
name|u8
name|promisc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_SET_PORT_BEACON
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u16
name|time
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_SET_PORT_fcs_check
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u8
name|ignore_fcs_value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_SET_PORT_VXLAN
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u8
name|steering
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|set_phv_bit
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|int
name|new_val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|get_phv_bit
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|int
modifier|*
name|phv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_is_vlan_offload_disabled
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|bool
modifier|*
name|vlan_offload_disabled
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_find_cached_mac
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u64
name|mac
parameter_list|,
name|int
modifier|*
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_find_cached_vlan
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u16
name|vid
parameter_list|,
name|int
modifier|*
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_register_vlan
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u16
name|vlan
parameter_list|,
name|int
modifier|*
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_unregister_vlan
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u16
name|vlan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_map_phys_fmr
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_fmr
modifier|*
name|fmr
parameter_list|,
name|u64
modifier|*
name|page_list
parameter_list|,
name|int
name|npages
parameter_list|,
name|u64
name|iova
parameter_list|,
name|u32
modifier|*
name|lkey
parameter_list|,
name|u32
modifier|*
name|rkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_fmr_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|pd
parameter_list|,
name|u32
name|access
parameter_list|,
name|int
name|max_pages
parameter_list|,
name|int
name|max_maps
parameter_list|,
name|u8
name|page_shift
parameter_list|,
name|struct
name|mlx4_fmr
modifier|*
name|fmr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_fmr_enable
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_fmr
modifier|*
name|fmr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_fmr_unmap
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_fmr
modifier|*
name|fmr
parameter_list|,
name|u32
modifier|*
name|lkey
parameter_list|,
name|u32
modifier|*
name|rkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_fmr_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_fmr
modifier|*
name|fmr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_SYNC_TPT
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_test_interrupt
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|vector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_test_async
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_query_diag_counters
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|op_modifier
parameter_list|,
specifier|const
name|u32
name|offset
index|[]
parameter_list|,
name|u32
name|value
index|[]
parameter_list|,
name|size_t
name|array_len
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u32
name|mlx4_get_eqs_per_port
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|mlx4_is_eq_vector_valid
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|int
name|vector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_assign_eq
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|int
modifier|*
name|vector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_release_eq
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|vec
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_is_eq_shared
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|vector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_eq_get_irq
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|vec
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_phys_port_id
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_wol_read
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u64
modifier|*
name|config
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_wol_write
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u64
name|config
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_counter_alloc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
modifier|*
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_counter_free
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_default_counter_index
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_set_admin_guid
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|__be64
name|guid
parameter_list|,
name|int
name|entry
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__be64
name|mlx4_get_admin_guid
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|entry
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_set_random_admin_guid
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|entry
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_flow_attach
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_net_trans_rule
modifier|*
name|rule
parameter_list|,
name|u64
modifier|*
name|reg_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_flow_detach
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u64
name|reg_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_map_sw_to_hw_steering_mode
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|mlx4_net_trans_promisc_mode
name|flow_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_map_sw_to_hw_steering_id
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|mlx4_net_trans_rule_id
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_hw_rule_sz
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|mlx4_net_trans_rule_id
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_tunnel_steer_add
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|unsigned
name|char
modifier|*
name|addr
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|qpn
parameter_list|,
name|u16
name|prio
parameter_list|,
name|u64
modifier|*
name|reg_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_sync_pkey_table
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_parav_qkey
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|qpn
parameter_list|,
name|u32
modifier|*
name|qkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_is_slave_active
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_gen_pkey_eqe
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_gen_guid_change_eqe
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_gen_slaves_port_mgt_ev
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|int
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_gen_port_state_change_eqe
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|u8
name|port
parameter_list|,
name|u8
name|port_subtype_change
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|slave_port_state
name|mlx4_get_slave_port_state
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|set_and_calc_slave_port_state
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|u8
name|port
parameter_list|,
name|int
name|event
parameter_list|,
name|enum
name|slave_port_gen_event
modifier|*
name|gen_event
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_put_slave_node_guid
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|__be64
name|guid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__be64
name|mlx4_get_slave_node_guid
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_slave_from_roce_gid
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|port
parameter_list|,
name|u8
modifier|*
name|gid
parameter_list|,
name|int
modifier|*
name|slave_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_roce_gid_from_slave
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|slave_id
parameter_list|,
name|u8
modifier|*
name|gid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_FLOW_STEERING_IB_UC_QP_RANGE
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|min_range_qpn
parameter_list|,
name|u32
name|max_range_qpn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|s64
name|mlx4_read_clock
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|mlx4_active_ports
block|{
name|DECLARE_BITMAP
argument_list|(
name|ports
argument_list|,
name|MLX4_MAX_PORTS
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Returns a bitmap of the physical ports which are assigned to slave */
end_comment

begin_function_decl
name|struct
name|mlx4_active_ports
name|mlx4_get_active_ports
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Returns the physical port that represents the virtual port of the slave, */
end_comment

begin_comment
comment|/* or a value< 0 in case of an error. If a slave has 2 ports, the identity */
end_comment

begin_comment
comment|/* mapping is returned.							    */
end_comment

begin_function_decl
name|int
name|mlx4_slave_convert_port
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|mlx4_slaves_pport
block|{
name|DECLARE_BITMAP
argument_list|(
name|slaves
argument_list|,
name|MLX4_MFUNC_MAX
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Returns a bitmap of all slaves that are assigned to port. */
end_comment

begin_function_decl
name|struct
name|mlx4_slaves_pport
name|mlx4_phys_to_slaves_pport
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Returns a bitmap of all slaves that are assigned exactly to all the */
end_comment

begin_comment
comment|/* the ports that are set in crit_ports.			       */
end_comment

begin_function_decl
name|struct
name|mlx4_slaves_pport
name|mlx4_phys_to_slaves_pport_actv
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
specifier|const
name|struct
name|mlx4_active_ports
modifier|*
name|crit_ports
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Returns the slave's virtual port that represents the physical port. */
end_comment

begin_function_decl
name|int
name|mlx4_phys_to_slave_port
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_base_gid_ix
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_config_vxlan_port
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|__be16
name|udp_port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_disable_rx_port_check
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|bool
name|dis
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_config_roce_v2_port
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u16
name|udp_port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_virt2phy_port_map
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|port1
parameter_list|,
name|u32
name|port2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_vf_smi_enabled
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_vf_get_enable_smi_admin
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_vf_set_enable_smi_admin
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|slave
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mr_hw_get_mpt
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mr
modifier|*
name|mmr
parameter_list|,
name|struct
name|mlx4_mpt_entry
modifier|*
modifier|*
modifier|*
name|mpt_entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mr_hw_write_mpt
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mr
modifier|*
name|mmr
parameter_list|,
name|struct
name|mlx4_mpt_entry
modifier|*
modifier|*
name|mpt_entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mr_hw_change_pd
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mpt_entry
modifier|*
name|mpt_entry
parameter_list|,
name|u32
name|pdn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mr_hw_change_access
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mpt_entry
modifier|*
name|mpt_entry
parameter_list|,
name|u32
name|access
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_mr_hw_put_mpt
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mpt_entry
modifier|*
modifier|*
name|mpt_entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_mr_rereg_mem_cleanup
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mr
modifier|*
name|mr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_mr_rereg_mem_write
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mr
modifier|*
name|mr
parameter_list|,
name|u64
name|iova
parameter_list|,
name|u64
name|size
parameter_list|,
name|int
name|npages
parameter_list|,
name|int
name|page_shift
parameter_list|,
name|struct
name|mlx4_mpt_entry
modifier|*
name|mpt_entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_module_info
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u16
name|offset
parameter_list|,
name|u16
name|size
parameter_list|,
name|u8
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_max_tc
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Returns true if running in low memory profile (kdump kernel) */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_low_memory_profile
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_comment
comment|/* ACCESS REG commands */
end_comment

begin_enum
enum|enum
name|mlx4_access_reg_method
block|{
name|MLX4_ACCESS_REG_QUERY
init|=
literal|0x1
block|,
name|MLX4_ACCESS_REG_WRITE
init|=
literal|0x2
block|, }
enum|;
end_enum

begin_comment
comment|/* ACCESS PTYS Reg command */
end_comment

begin_enum
enum|enum
name|mlx4_ptys_proto
block|{
name|MLX4_PTYS_IB
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX4_PTYS_EN
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_ptys_reg
block|{
name|u8
name|resrvd1
decl_stmt|;
name|u8
name|local_port
decl_stmt|;
name|u8
name|resrvd2
decl_stmt|;
name|u8
name|proto_mask
decl_stmt|;
name|__be32
name|resrvd3
index|[
literal|2
index|]
decl_stmt|;
name|__be32
name|eth_proto_cap
decl_stmt|;
name|__be16
name|ib_width_cap
decl_stmt|;
name|__be16
name|ib_speed_cap
decl_stmt|;
name|__be32
name|resrvd4
decl_stmt|;
name|__be32
name|eth_proto_admin
decl_stmt|;
name|__be16
name|ib_width_admin
decl_stmt|;
name|__be16
name|ib_speed_admin
decl_stmt|;
name|__be32
name|resrvd5
decl_stmt|;
name|__be32
name|eth_proto_oper
decl_stmt|;
name|__be16
name|ib_width_oper
decl_stmt|;
name|__be16
name|ib_speed_oper
decl_stmt|;
name|__be32
name|resrvd6
decl_stmt|;
name|__be32
name|eth_proto_lp_adv
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_function_decl
name|int
name|mlx4_ACCESS_PTYS_REG
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|mlx4_access_reg_method
name|method
parameter_list|,
name|struct
name|mlx4_ptys_reg
modifier|*
name|ptys_reg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_internal_clock_params
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_clock_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_to_hw_uar_index
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|index
operator|<<
operator|(
name|PAGE_SHIFT
operator|-
name|dev
operator|->
name|uar_page_shift
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_get_num_reserved_uar
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
block|{
comment|/* The first 128 UARs are used for EQ doorbells */
return|return
operator|(
literal|128
operator|>>
operator|(
name|PAGE_SHIFT
operator|-
name|dev
operator|->
name|uar_page_shift
operator|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX4_DEVICE_H */
end_comment

end_unit

