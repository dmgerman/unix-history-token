begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2007, 2014 Mellanox Technologies. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MLX4_EN_H_
end_ifndef

begin_define
define|#
directive|define
name|_MLX4_EN_H_
end_define

begin_include
include|#
directive|include
file|<linux/bitops.h>
end_include

begin_include
include|#
directive|include
file|<linux/compiler.h>
end_include

begin_include
include|#
directive|include
file|<linux/list.h>
end_include

begin_include
include|#
directive|include
file|<linux/mutex.h>
end_include

begin_include
include|#
directive|include
file|<linux/kobject.h>
end_include

begin_include
include|#
directive|include
file|<linux/netdevice.h>
end_include

begin_include
include|#
directive|include
file|<linux/if_vlan.h>
end_include

begin_include
include|#
directive|include
file|<linux/if_ether.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_MLX4_EN_DCB
end_ifdef

begin_include
include|#
directive|include
file|<linux/dcbnl.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<dev/mlx4/device.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx4/qp.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx4/cq.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx4/srq.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx4/doorbell.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx4/cmd.h>
end_include

begin_include
include|#
directive|include
file|<netinet/tcp_lro.h>
end_include

begin_include
include|#
directive|include
file|"en_port.h"
end_include

begin_include
include|#
directive|include
file|<dev/mlx4/stats.h>
end_include

begin_define
define|#
directive|define
name|DRV_NAME
value|"mlx4_en"
end_define

begin_define
define|#
directive|define
name|MLX4_EN_MSG_LEVEL
value|(NETIF_MSG_LINK | NETIF_MSG_IFDOWN)
end_define

begin_comment
comment|/*  * Device constants  */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_PAGE_SHIFT
value|12
end_define

begin_define
define|#
directive|define
name|MLX4_EN_PAGE_SIZE
value|(1<< MLX4_EN_PAGE_SHIFT)
end_define

begin_define
define|#
directive|define
name|MLX4_NET_IP_ALIGN
value|2
end_define

begin_comment
comment|/* bytes */
end_comment

begin_define
define|#
directive|define
name|DEF_RX_RINGS
value|16
end_define

begin_define
define|#
directive|define
name|MAX_RX_RINGS
value|128
end_define

begin_define
define|#
directive|define
name|MIN_RX_RINGS
value|4
end_define

begin_define
define|#
directive|define
name|TXBB_SIZE
value|64
end_define

begin_define
define|#
directive|define
name|HEADROOM
value|(2048 / TXBB_SIZE + 1)
end_define

begin_define
define|#
directive|define
name|STAMP_STRIDE
value|64
end_define

begin_define
define|#
directive|define
name|STAMP_DWORDS
value|(STAMP_STRIDE / 4)
end_define

begin_define
define|#
directive|define
name|STAMP_SHIFT
value|31
end_define

begin_define
define|#
directive|define
name|STAMP_VAL
value|0x7fffffff
end_define

begin_define
define|#
directive|define
name|STATS_DELAY
value|(HZ / 4)
end_define

begin_define
define|#
directive|define
name|SERVICE_TASK_DELAY
value|(HZ / 4)
end_define

begin_define
define|#
directive|define
name|MAX_NUM_OF_FS_RULES
value|256
end_define

begin_define
define|#
directive|define
name|MLX4_EN_FILTER_HASH_SHIFT
value|4
end_define

begin_define
define|#
directive|define
name|MLX4_EN_FILTER_EXPIRY_QUOTA
value|60
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_NET_RX_BUSY_POLL
end_ifdef

begin_define
define|#
directive|define
name|LL_EXTENDED_STATS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* vlan valid range */
end_comment

begin_define
define|#
directive|define
name|VLAN_MIN_VALUE
value|1
end_define

begin_define
define|#
directive|define
name|VLAN_MAX_VALUE
value|4094
end_define

begin_comment
comment|/*  * OS related constants and tunables  */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_WATCHDOG_TIMEOUT
value|(15 * HZ)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_ALLOC_SIZE
value|PAGE_ALIGN(PAGE_SIZE)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_ALLOC_ORDER
value|get_order(MLX4_EN_ALLOC_SIZE)
end_define

begin_enum
enum|enum
name|mlx4_en_alloc_type
block|{
name|MLX4_EN_ALLOC_NEW
init|=
literal|0
block|,
name|MLX4_EN_ALLOC_REPLACEMENT
init|=
literal|1
block|, }
enum|;
end_enum

begin_comment
comment|/* Maximum ring sizes */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_DEF_TX_QUEUE_SIZE
value|4096
end_define

begin_comment
comment|/* Minimum packet number till arming the CQ */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_MIN_RX_ARM
value|2048
end_define

begin_define
define|#
directive|define
name|MLX4_EN_MIN_TX_ARM
value|2048
end_define

begin_comment
comment|/* Maximum ring sizes */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_MAX_TX_SIZE
value|8192
end_define

begin_define
define|#
directive|define
name|MLX4_EN_MAX_RX_SIZE
value|8192
end_define

begin_comment
comment|/* Minimum ring sizes */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_MIN_RX_SIZE
value|(4096 / TXBB_SIZE)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_MIN_TX_SIZE
value|(4096 / TXBB_SIZE)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_SMALL_PKT_SIZE
value|64
end_define

begin_define
define|#
directive|define
name|MLX4_EN_MAX_TX_RING_P_UP
value|32
end_define

begin_define
define|#
directive|define
name|MLX4_EN_NUM_UP
value|1
end_define

begin_define
define|#
directive|define
name|MAX_TX_RINGS
value|(MLX4_EN_MAX_TX_RING_P_UP * \ 					MLX4_EN_NUM_UP)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_DEF_TX_RING_SIZE
value|1024
end_define

begin_define
define|#
directive|define
name|MLX4_EN_DEF_RX_RING_SIZE
value|1024
end_define

begin_comment
comment|/* Target number of bytes to coalesce with interrupt moderation */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_RX_COAL_TARGET
value|0x20000
end_define

begin_define
define|#
directive|define
name|MLX4_EN_RX_COAL_TIME
value|0x10
end_define

begin_define
define|#
directive|define
name|MLX4_EN_TX_COAL_PKTS
value|64
end_define

begin_define
define|#
directive|define
name|MLX4_EN_TX_COAL_TIME
value|64
end_define

begin_define
define|#
directive|define
name|MLX4_EN_RX_RATE_LOW
value|400000
end_define

begin_define
define|#
directive|define
name|MLX4_EN_RX_COAL_TIME_LOW
value|0
end_define

begin_define
define|#
directive|define
name|MLX4_EN_RX_RATE_HIGH
value|450000
end_define

begin_define
define|#
directive|define
name|MLX4_EN_RX_COAL_TIME_HIGH
value|128
end_define

begin_define
define|#
directive|define
name|MLX4_EN_RX_SIZE_THRESH
value|1024
end_define

begin_define
define|#
directive|define
name|MLX4_EN_RX_RATE_THRESH
value|(1000000 / MLX4_EN_RX_COAL_TIME_HIGH)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_SAMPLE_INTERVAL
value|0
end_define

begin_define
define|#
directive|define
name|MLX4_EN_AVG_PKT_SMALL
value|256
end_define

begin_define
define|#
directive|define
name|MLX4_EN_AUTO_CONF
value|0xffff
end_define

begin_define
define|#
directive|define
name|MLX4_EN_DEF_RX_PAUSE
value|1
end_define

begin_define
define|#
directive|define
name|MLX4_EN_DEF_TX_PAUSE
value|1
end_define

begin_comment
comment|/* Interval between successive polls in the Tx routine when polling is used    instead of interrupts (in per-core Tx rings) - should be power of 2 */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_TX_POLL_MODER
value|16
end_define

begin_define
define|#
directive|define
name|MLX4_EN_TX_POLL_TIMEOUT
value|(HZ / 4)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_64_ALIGN
value|(64 - NET_SKB_PAD)
end_define

begin_define
define|#
directive|define
name|SMALL_PACKET_SIZE
value|(256 - NET_IP_ALIGN)
end_define

begin_define
define|#
directive|define
name|HEADER_COPY_SIZE
value|(128)
end_define

begin_define
define|#
directive|define
name|MLX4_LOOPBACK_TEST_PAYLOAD
value|(HEADER_COPY_SIZE - ETHER_HDR_LEN)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_MIN_MTU
value|46
end_define

begin_define
define|#
directive|define
name|ETH_BCAST
value|0xffffffffffffULL
end_define

begin_define
define|#
directive|define
name|MLX4_EN_LOOPBACK_RETRIES
value|5
end_define

begin_define
define|#
directive|define
name|MLX4_EN_LOOPBACK_TIMEOUT
value|100
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|MLX4_EN_PERF_STAT
end_ifdef

begin_comment
comment|/* Number of samples to 'average' */
end_comment

begin_define
define|#
directive|define
name|AVG_SIZE
value|128
end_define

begin_define
define|#
directive|define
name|AVG_FACTOR
value|1024
end_define

begin_define
define|#
directive|define
name|INC_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|)
value|(++(cnt))
end_define

begin_define
define|#
directive|define
name|ADD_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|,
name|add
parameter_list|)
value|((cnt) += (add))
end_define

begin_define
define|#
directive|define
name|AVG_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|,
name|sample
parameter_list|)
define|\
value|((cnt) = ((cnt) * (AVG_SIZE - 1) + (sample) * AVG_FACTOR) / AVG_SIZE)
end_define

begin_define
define|#
directive|define
name|GET_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|)
value|(cnt)
end_define

begin_define
define|#
directive|define
name|GET_AVG_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|)
value|((cnt) / AVG_FACTOR)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|INC_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|)
value|do {} while (0)
end_define

begin_define
define|#
directive|define
name|ADD_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|,
name|add
parameter_list|)
value|do {} while (0)
end_define

begin_define
define|#
directive|define
name|AVG_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|,
name|sample
parameter_list|)
value|do {} while (0)
end_define

begin_define
define|#
directive|define
name|GET_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|)
value|(0)
end_define

begin_define
define|#
directive|define
name|GET_AVG_PERF_COUNTER
parameter_list|(
name|cnt
parameter_list|)
value|(0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX4_EN_PERF_STAT */
end_comment

begin_comment
comment|/*  * Configurables  */
end_comment

begin_enum
enum|enum
name|cq_type
block|{
name|RX
init|=
literal|0
block|,
name|TX
init|=
literal|1
block|, }
enum|;
end_enum

begin_comment
comment|/*  * Useful macros  */
end_comment

begin_define
define|#
directive|define
name|ROUNDUP_LOG2
parameter_list|(
name|x
parameter_list|)
value|ilog2(roundup_pow_of_two(x))
end_define

begin_define
define|#
directive|define
name|XNOR
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|(!(x) == !(y))
end_define

begin_define
define|#
directive|define
name|ILLEGAL_MAC
parameter_list|(
name|addr
parameter_list|)
value|(addr == 0xffffffffffffULL || addr == 0x0)
end_define

begin_struct
struct|struct
name|mlx4_en_tx_info
block|{
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mb
decl_stmt|;
name|u32
name|nr_txbb
decl_stmt|;
name|u32
name|nr_bytes
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MLX4_EN_BIT_DESC_OWN
value|0x80000000
end_define

begin_define
define|#
directive|define
name|CTRL_SIZE
value|sizeof(struct mlx4_wqe_ctrl_seg)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_MEMTYPE_PAD
value|0x100
end_define

begin_define
define|#
directive|define
name|DS_SIZE
value|sizeof(struct mlx4_wqe_data_seg)
end_define

begin_struct
struct|struct
name|mlx4_en_tx_desc
block|{
name|struct
name|mlx4_wqe_ctrl_seg
name|ctrl
decl_stmt|;
union|union
block|{
name|struct
name|mlx4_wqe_data_seg
name|data
decl_stmt|;
comment|/* at least one data segment */
name|struct
name|mlx4_wqe_lso_seg
name|lso
decl_stmt|;
name|struct
name|mlx4_wqe_inline_seg
name|inl
decl_stmt|;
block|}
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MLX4_EN_USE_SRQ
value|0x01000000
end_define

begin_define
define|#
directive|define
name|MLX4_EN_RX_BUDGET
value|64
end_define

begin_define
define|#
directive|define
name|MLX4_EN_TX_MAX_DESC_SIZE
value|512
end_define

begin_comment
comment|/* bytes */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_TX_MAX_MBUF_SIZE
value|65536
end_define

begin_comment
comment|/* bytes */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_TX_MAX_PAYLOAD_SIZE
value|65536
end_define

begin_comment
comment|/* bytes */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_TX_MAX_MBUF_FRAGS
define|\
value|((MLX4_EN_TX_MAX_DESC_SIZE - 128) / DS_SIZE_ALIGNMENT)
end_define

begin_comment
comment|/* units */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_TX_WQE_MAX_WQEBBS
define|\
value|(MLX4_EN_TX_MAX_DESC_SIZE / TXBB_SIZE)
end_define

begin_comment
comment|/* units */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_CX3_LOW_ID
value|0x1000
end_define

begin_define
define|#
directive|define
name|MLX4_EN_CX3_HIGH_ID
value|0x1005
end_define

begin_struct
struct|struct
name|mlx4_en_tx_ring
block|{
name|spinlock_t
name|tx_lock
decl_stmt|;
name|bus_dma_tag_t
name|dma_tag
decl_stmt|;
name|struct
name|mlx4_hwq_resources
name|wqres
decl_stmt|;
name|u32
name|size
decl_stmt|;
comment|/* number of TXBBs */
name|u32
name|size_mask
decl_stmt|;
name|u16
name|stride
decl_stmt|;
name|u16
name|cqn
decl_stmt|;
comment|/* index of port CQ associated with this ring */
name|u32
name|prod
decl_stmt|;
name|u32
name|cons
decl_stmt|;
name|u32
name|buf_size
decl_stmt|;
name|u32
name|doorbell_qpn
decl_stmt|;
name|u8
modifier|*
name|buf
decl_stmt|;
name|u16
name|poll_cnt
decl_stmt|;
name|int
name|blocked
decl_stmt|;
name|struct
name|mlx4_en_tx_info
modifier|*
name|tx_info
decl_stmt|;
name|u8
name|queue_index
decl_stmt|;
name|cpuset_t
name|affinity_mask
decl_stmt|;
name|struct
name|buf_ring
modifier|*
name|br
decl_stmt|;
name|u32
name|last_nr_txbb
decl_stmt|;
name|struct
name|mlx4_qp
name|qp
decl_stmt|;
name|struct
name|mlx4_qp_context
name|context
decl_stmt|;
name|int
name|qpn
decl_stmt|;
name|enum
name|mlx4_qp_state
name|qp_state
decl_stmt|;
name|struct
name|mlx4_srq
name|dummy
decl_stmt|;
name|unsigned
name|long
name|bytes
decl_stmt|;
name|unsigned
name|long
name|packets
decl_stmt|;
name|unsigned
name|long
name|tx_csum
decl_stmt|;
name|unsigned
name|long
name|queue_stopped
decl_stmt|;
name|unsigned
name|long
name|oversized_packets
decl_stmt|;
name|unsigned
name|long
name|wake_queue
decl_stmt|;
name|unsigned
name|long
name|tso_packets
decl_stmt|;
name|unsigned
name|long
name|defrag_attempts
decl_stmt|;
name|struct
name|mlx4_bf
name|bf
decl_stmt|;
name|bool
name|bf_enabled
decl_stmt|;
name|int
name|hwtstamp_tx_type
decl_stmt|;
name|spinlock_t
name|comp_lock
decl_stmt|;
name|int
name|inline_thold
decl_stmt|;
name|u64
name|watchdog_time
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_rx_desc
block|{
comment|/* actual number of entries depends on rx ring stride */
name|struct
name|mlx4_wqe_data_seg
name|data
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_rx_mbuf
block|{
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mbuf
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_rx_spare
block|{
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mbuf
decl_stmt|;
name|u64
name|paddr_be
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_rx_ring
block|{
name|struct
name|mlx4_hwq_resources
name|wqres
decl_stmt|;
name|bus_dma_tag_t
name|dma_tag
decl_stmt|;
name|struct
name|mlx4_en_rx_spare
name|spare
decl_stmt|;
name|u32
name|size
decl_stmt|;
comment|/* number of Rx descs*/
name|u32
name|actual_size
decl_stmt|;
name|u32
name|size_mask
decl_stmt|;
name|u16
name|stride
decl_stmt|;
name|u16
name|log_stride
decl_stmt|;
name|u16
name|cqn
decl_stmt|;
comment|/* index of port CQ associated with this ring */
name|u32
name|prod
decl_stmt|;
name|u32
name|cons
decl_stmt|;
name|u32
name|buf_size
decl_stmt|;
name|u8
name|fcs_del
decl_stmt|;
name|u32
name|rx_mb_size
decl_stmt|;
name|int
name|qpn
decl_stmt|;
name|u8
modifier|*
name|buf
decl_stmt|;
name|struct
name|mlx4_en_rx_mbuf
modifier|*
name|mbuf
decl_stmt|;
name|unsigned
name|long
name|errors
decl_stmt|;
name|unsigned
name|long
name|bytes
decl_stmt|;
name|unsigned
name|long
name|packets
decl_stmt|;
ifdef|#
directive|ifdef
name|LL_EXTENDED_STATS
name|unsigned
name|long
name|yields
decl_stmt|;
name|unsigned
name|long
name|misses
decl_stmt|;
name|unsigned
name|long
name|cleaned
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|long
name|csum_ok
decl_stmt|;
name|unsigned
name|long
name|csum_none
decl_stmt|;
name|int
name|hwtstamp_rx_filter
decl_stmt|;
name|int
name|numa_node
decl_stmt|;
name|struct
name|lro_ctrl
name|lro
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_en_can_lro
parameter_list|(
name|__be16
name|status
parameter_list|)
block|{
specifier|const
name|__be16
name|status_all
init|=
name|cpu_to_be16
argument_list|(
name|MLX4_CQE_STATUS_IPV4
operator||
name|MLX4_CQE_STATUS_IPV4F
operator||
name|MLX4_CQE_STATUS_IPV6
operator||
name|MLX4_CQE_STATUS_IPV4OPT
operator||
name|MLX4_CQE_STATUS_TCP
operator||
name|MLX4_CQE_STATUS_UDP
operator||
name|MLX4_CQE_STATUS_IPOK
argument_list|)
decl_stmt|;
specifier|const
name|__be16
name|status_ipv4_ipok_tcp
init|=
name|cpu_to_be16
argument_list|(
name|MLX4_CQE_STATUS_IPV4
operator||
name|MLX4_CQE_STATUS_IPOK
operator||
name|MLX4_CQE_STATUS_TCP
argument_list|)
decl_stmt|;
specifier|const
name|__be16
name|status_ipv6_ipok_tcp
init|=
name|cpu_to_be16
argument_list|(
name|MLX4_CQE_STATUS_IPV6
operator||
name|MLX4_CQE_STATUS_IPOK
operator||
name|MLX4_CQE_STATUS_TCP
argument_list|)
decl_stmt|;
name|status
operator|&=
name|status_all
expr_stmt|;
return|return
operator|(
name|status
operator|==
name|status_ipv4_ipok_tcp
operator|||
name|status
operator|==
name|status_ipv6_ipok_tcp
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|mlx4_en_cq
block|{
name|struct
name|mlx4_cq
name|mcq
decl_stmt|;
name|struct
name|mlx4_hwq_resources
name|wqres
decl_stmt|;
name|int
name|ring
decl_stmt|;
name|spinlock_t
name|lock
decl_stmt|;
name|struct
name|net_device
modifier|*
name|dev
decl_stmt|;
comment|/* Per-core Tx cq processing support */
name|struct
name|timer_list
name|timer
decl_stmt|;
name|int
name|size
decl_stmt|;
name|int
name|buf_size
decl_stmt|;
name|unsigned
name|vector
decl_stmt|;
name|enum
name|cq_type
name|is_tx
decl_stmt|;
name|u16
name|moder_time
decl_stmt|;
name|u16
name|moder_cnt
decl_stmt|;
name|struct
name|mlx4_cqe
modifier|*
name|buf
decl_stmt|;
name|struct
name|task
name|cq_task
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|tq
decl_stmt|;
define|#
directive|define
name|MLX4_EN_OPCODE_ERROR
value|0x1e
name|u32
name|tot_rx
decl_stmt|;
name|u32
name|tot_tx
decl_stmt|;
name|u32
name|curr_poll_rx_cpu_id
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_NET_RX_BUSY_POLL
name|unsigned
name|int
name|state
decl_stmt|;
define|#
directive|define
name|MLX4_EN_CQ_STATEIDLE
value|0
define|#
directive|define
name|MLX4_EN_CQ_STATENAPI
value|1
comment|/* NAPI owns this CQ */
define|#
directive|define
name|MLX4_EN_CQ_STATEPOLL
value|2
comment|/* poll owns this CQ */
define|#
directive|define
name|MLX4_CQ_LOCKED
value|(MLX4_EN_CQ_STATENAPI | MLX4_EN_CQ_STATEPOLL)
define|#
directive|define
name|MLX4_EN_CQ_STATENAPI_YIELD
value|4
comment|/* NAPI yielded this CQ */
define|#
directive|define
name|MLX4_EN_CQ_STATEPOLL_YIELD
value|8
comment|/* poll yielded this CQ */
define|#
directive|define
name|CQ_YIELD
value|(MLX4_EN_CQ_STATENAPI_YIELD | MLX4_EN_CQ_STATEPOLL_YIELD)
define|#
directive|define
name|CQ_USER_PEND
value|(MLX4_EN_CQ_STATEPOLL | MLX4_EN_CQ_STATEPOLL_YIELD)
name|spinlock_t
name|poll_lock
decl_stmt|;
comment|/* protects from LLS/napi conflicts */
endif|#
directive|endif
comment|/* CONFIG_NET_RX_BUSY_POLL */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_port_profile
block|{
name|u32
name|flags
decl_stmt|;
name|u32
name|tx_ring_num
decl_stmt|;
name|u32
name|rx_ring_num
decl_stmt|;
name|u32
name|tx_ring_size
decl_stmt|;
name|u32
name|rx_ring_size
decl_stmt|;
name|u8
name|rx_pause
decl_stmt|;
name|u8
name|rx_ppp
decl_stmt|;
name|u8
name|tx_pause
decl_stmt|;
name|u8
name|tx_ppp
decl_stmt|;
name|int
name|rss_rings
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_profile
block|{
name|int
name|rss_xor
decl_stmt|;
name|int
name|udp_rss
decl_stmt|;
name|u8
name|rss_mask
decl_stmt|;
name|u32
name|active_ports
decl_stmt|;
name|u32
name|small_pkt_int
decl_stmt|;
name|u8
name|no_reset
decl_stmt|;
name|u8
name|num_tx_rings_p_up
decl_stmt|;
name|struct
name|mlx4_en_port_profile
name|prof
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_dev
block|{
name|struct
name|mlx4_dev
modifier|*
name|dev
decl_stmt|;
name|struct
name|pci_dev
modifier|*
name|pdev
decl_stmt|;
name|struct
name|mutex
name|state_lock
decl_stmt|;
name|struct
name|net_device
modifier|*
name|pndev
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|u32
name|port_cnt
decl_stmt|;
name|bool
name|device_up
decl_stmt|;
name|struct
name|mlx4_en_profile
name|profile
decl_stmt|;
name|u32
name|LSO_support
decl_stmt|;
name|struct
name|workqueue_struct
modifier|*
name|workqueue
decl_stmt|;
name|struct
name|device
modifier|*
name|dma_device
decl_stmt|;
name|void
name|__iomem
modifier|*
name|uar_map
decl_stmt|;
name|struct
name|mlx4_uar
name|priv_uar
decl_stmt|;
name|struct
name|mlx4_mr
name|mr
decl_stmt|;
name|u32
name|priv_pdn
decl_stmt|;
name|spinlock_t
name|uar_lock
decl_stmt|;
name|u8
name|mac_removed
index|[
name|MLX4_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
name|unsigned
name|long
name|last_overflow_check
decl_stmt|;
name|unsigned
name|long
name|overflow_period
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_rss_map
block|{
name|int
name|base_qpn
decl_stmt|;
name|struct
name|mlx4_qp
name|qps
index|[
name|MAX_RX_RINGS
index|]
decl_stmt|;
name|enum
name|mlx4_qp_state
name|state
index|[
name|MAX_RX_RINGS
index|]
decl_stmt|;
name|struct
name|mlx4_qp
name|indir_qp
decl_stmt|;
name|enum
name|mlx4_qp_state
name|indir_state
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_port_state
block|{
name|int
name|link_state
decl_stmt|;
name|int
name|link_speed
decl_stmt|;
name|int
name|transciver
decl_stmt|;
name|int
name|autoneg
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx4_en_mclist_act
block|{
name|MCLIST_NONE
block|,
name|MCLIST_REM
block|,
name|MCLIST_ADD
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_en_mc_list
block|{
name|struct
name|list_head
name|list
decl_stmt|;
name|enum
name|mlx4_en_mclist_act
name|action
decl_stmt|;
name|u8
name|addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u64
name|reg_id
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_MLX4_EN_DCB
end_ifdef

begin_comment
comment|/* Minimal TC BW - setting to 0 will block traffic */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_BW_MIN
value|1
end_define

begin_define
define|#
directive|define
name|MLX4_EN_BW_MAX
value|100
end_define

begin_comment
comment|/* Utilize 100% of the line */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_TC_ETS
value|7
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_enum
enum|enum
block|{
name|MLX4_EN_FLAG_PROMISC
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|MLX4_EN_FLAG_MC_PROMISC
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
comment|/* whether we need to enable hardware loopback by putting dmac 	 * in Tx WQE 	 */
name|MLX4_EN_FLAG_ENABLE_HW_LOOPBACK
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
comment|/* whether we need to drop packets that hardware loopback-ed */
name|MLX4_EN_FLAG_RX_FILTER_NEEDED
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|MLX4_EN_FLAG_FORCE_PROMISC
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
ifdef|#
directive|ifdef
name|CONFIG_MLX4_EN_DCB
name|MLX4_EN_FLAG_DCB_ENABLED
init|=
operator|(
literal|1
operator|<<
literal|5
operator|)
endif|#
directive|endif
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|MLX4_EN_MAC_HASH_SIZE
value|(1<< BITS_PER_BYTE)
end_define

begin_define
define|#
directive|define
name|MLX4_EN_MAC_HASH_IDX
value|5
end_define

begin_struct
struct|struct
name|en_port
block|{
name|struct
name|kobject
name|kobj
decl_stmt|;
name|struct
name|mlx4_dev
modifier|*
name|dev
decl_stmt|;
name|u8
name|port_num
decl_stmt|;
name|u8
name|vport_num
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_en_priv
block|{
name|struct
name|mlx4_en_dev
modifier|*
name|mdev
decl_stmt|;
name|struct
name|mlx4_en_port_profile
modifier|*
name|prof
decl_stmt|;
name|struct
name|net_device
modifier|*
name|dev
decl_stmt|;
name|unsigned
name|long
name|active_vlans
index|[
name|BITS_TO_LONGS
argument_list|(
name|VLAN_N_VID
argument_list|)
index|]
decl_stmt|;
name|struct
name|mlx4_en_port_state
name|port_state
decl_stmt|;
name|spinlock_t
name|stats_lock
decl_stmt|;
comment|/* To allow rules removal while port is going down */
name|struct
name|list_head
name|ethtool_list
decl_stmt|;
name|unsigned
name|long
name|last_moder_packets
index|[
name|MAX_RX_RINGS
index|]
decl_stmt|;
name|unsigned
name|long
name|last_moder_tx_packets
decl_stmt|;
name|unsigned
name|long
name|last_moder_bytes
index|[
name|MAX_RX_RINGS
index|]
decl_stmt|;
name|unsigned
name|long
name|last_moder_jiffies
decl_stmt|;
name|int
name|last_moder_time
index|[
name|MAX_RX_RINGS
index|]
decl_stmt|;
name|u16
name|rx_usecs
decl_stmt|;
name|u16
name|rx_frames
decl_stmt|;
name|u16
name|tx_usecs
decl_stmt|;
name|u16
name|tx_frames
decl_stmt|;
name|u32
name|pkt_rate_low
decl_stmt|;
name|u32
name|rx_usecs_low
decl_stmt|;
name|u32
name|pkt_rate_high
decl_stmt|;
name|u32
name|rx_usecs_high
decl_stmt|;
name|u32
name|sample_interval
decl_stmt|;
name|u32
name|adaptive_rx_coal
decl_stmt|;
name|u32
name|msg_enable
decl_stmt|;
name|u32
name|loopback_ok
decl_stmt|;
name|u32
name|validate_loopback
decl_stmt|;
name|struct
name|mlx4_hwq_resources
name|res
decl_stmt|;
name|int
name|link_state
decl_stmt|;
name|int
name|last_link_state
decl_stmt|;
name|bool
name|port_up
decl_stmt|;
name|int
name|port
decl_stmt|;
name|int
name|registered
decl_stmt|;
name|int
name|allocated
decl_stmt|;
name|int
name|stride
decl_stmt|;
name|unsigned
name|char
name|current_mac
index|[
name|ETH_ALEN
operator|+
literal|2
index|]
decl_stmt|;
name|u64
name|mac
decl_stmt|;
name|int
name|mac_index
decl_stmt|;
name|unsigned
name|max_mtu
decl_stmt|;
name|int
name|base_qpn
decl_stmt|;
name|int
name|cqe_factor
decl_stmt|;
name|struct
name|mlx4_en_rss_map
name|rss_map
decl_stmt|;
name|u32
name|flags
decl_stmt|;
name|u8
name|num_tx_rings_p_up
decl_stmt|;
name|u32
name|tx_ring_num
decl_stmt|;
name|u32
name|rx_ring_num
decl_stmt|;
name|u32
name|rx_mb_size
decl_stmt|;
name|struct
name|mlx4_en_tx_ring
modifier|*
modifier|*
name|tx_ring
decl_stmt|;
name|struct
name|mlx4_en_rx_ring
modifier|*
name|rx_ring
index|[
name|MAX_RX_RINGS
index|]
decl_stmt|;
name|struct
name|mlx4_en_cq
modifier|*
modifier|*
name|tx_cq
decl_stmt|;
name|struct
name|mlx4_en_cq
modifier|*
name|rx_cq
index|[
name|MAX_RX_RINGS
index|]
decl_stmt|;
name|struct
name|mlx4_qp
name|drop_qp
decl_stmt|;
name|struct
name|work_struct
name|rx_mode_task
decl_stmt|;
name|struct
name|work_struct
name|watchdog_task
decl_stmt|;
name|struct
name|work_struct
name|linkstate_task
decl_stmt|;
name|struct
name|delayed_work
name|stats_task
decl_stmt|;
name|struct
name|delayed_work
name|service_task
decl_stmt|;
name|struct
name|mlx4_en_perf_stats
name|pstats
decl_stmt|;
name|struct
name|mlx4_en_pkt_stats
name|pkstats
decl_stmt|;
name|struct
name|mlx4_en_pkt_stats
name|pkstats_last
decl_stmt|;
name|struct
name|mlx4_en_flow_stats
name|flowstats
index|[
name|MLX4_NUM_PRIORITIES
index|]
decl_stmt|;
name|struct
name|mlx4_en_port_stats
name|port_stats
decl_stmt|;
name|struct
name|mlx4_en_vport_stats
name|vport_stats
decl_stmt|;
name|struct
name|mlx4_en_vf_stats
name|vf_stats
decl_stmt|;
name|struct
name|list_head
name|mc_list
decl_stmt|;
name|struct
name|list_head
name|curr_list
decl_stmt|;
name|u64
name|broadcast_id
decl_stmt|;
name|struct
name|mlx4_en_stat_out_mbox
name|hw_stats
decl_stmt|;
name|int
name|vids
index|[
literal|128
index|]
decl_stmt|;
name|bool
name|wol
decl_stmt|;
name|struct
name|device
modifier|*
name|ddev
decl_stmt|;
name|struct
name|dentry
modifier|*
name|dev_root
decl_stmt|;
name|u32
name|counter_index
decl_stmt|;
name|eventhandler_tag
name|vlan_attach
decl_stmt|;
name|eventhandler_tag
name|vlan_detach
decl_stmt|;
name|struct
name|callout
name|watchdog_timer
decl_stmt|;
name|struct
name|ifmedia
name|media
decl_stmt|;
specifier|volatile
name|int
name|blocked
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|conf_sysctl
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|stat_sysctl
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|conf_ctx
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|stat_ctx
decl_stmt|;
define|#
directive|define
name|MLX4_EN_MAC_HASH_IDX
value|5
name|struct
name|hlist_head
name|mac_hash
index|[
name|MLX4_EN_MAC_HASH_SIZE
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_MLX4_EN_DCB
name|struct
name|ieee_ets
name|ets
decl_stmt|;
name|u16
name|maxrate
index|[
name|IEEE_8021QAZ_MAX_TCS
index|]
decl_stmt|;
name|u8
name|dcbx_cap
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_RFS_ACCEL
name|spinlock_t
name|filters_lock
decl_stmt|;
name|int
name|last_filter_id
decl_stmt|;
name|struct
name|list_head
name|filters
decl_stmt|;
name|struct
name|hlist_head
name|filter_hash
index|[
literal|1
operator|<<
name|MLX4_EN_FILTER_HASH_SHIFT
index|]
decl_stmt|;
endif|#
directive|endif
name|struct
name|en_port
modifier|*
name|vf_ports
index|[
name|MLX4_MAX_NUM_VF
index|]
decl_stmt|;
name|unsigned
name|long
name|last_ifq_jiffies
decl_stmt|;
name|u64
name|if_counters_rx_errors
decl_stmt|;
name|u64
name|if_counters_rx_no_buffer
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx4_en_wol
block|{
name|MLX4_EN_WOL_MAGIC
init|=
operator|(
literal|1ULL
operator|<<
literal|61
operator|)
block|,
name|MLX4_EN_WOL_ENABLED
init|=
operator|(
literal|1ULL
operator|<<
literal|62
operator|)
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_mac_entry
block|{
name|struct
name|hlist_node
name|hlist
decl_stmt|;
name|unsigned
name|char
name|mac
index|[
name|ETH_ALEN
operator|+
literal|2
index|]
decl_stmt|;
name|u64
name|reg_id
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_NET_RX_BUSY_POLL
end_ifdef

begin_function
specifier|static
specifier|inline
name|void
name|mlx4_en_cq_init_lock
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
name|spin_lock_init
argument_list|(
operator|&
name|cq
operator|->
name|poll_lock
argument_list|)
expr_stmt|;
name|cq
operator|->
name|state
operator|=
name|MLX4_EN_CQ_STATEIDLE
expr_stmt|;
block|}
end_function

begin_comment
comment|/* called from the device poll rutine to get ownership of a cq */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_lock_napi
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
name|int
name|rc
init|=
name|true
decl_stmt|;
name|spin_lock
argument_list|(
operator|&
name|cq
operator|->
name|poll_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|cq
operator|->
name|state
operator|&
name|MLX4_CQ_LOCKED
condition|)
block|{
name|WARN_ON
argument_list|(
name|cq
operator|->
name|state
operator|&
name|MLX4_EN_CQ_STATENAPI
argument_list|)
expr_stmt|;
name|cq
operator|->
name|state
operator||=
name|MLX4_EN_CQ_STATENAPI_YIELD
expr_stmt|;
name|rc
operator|=
name|false
expr_stmt|;
block|}
else|else
comment|/* we don't care if someone yielded */
name|cq
operator|->
name|state
operator|=
name|MLX4_EN_CQ_STATENAPI
expr_stmt|;
name|spin_unlock
argument_list|(
operator|&
name|cq
operator|->
name|poll_lock
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function

begin_comment
comment|/* returns true is someone tried to get the cq while napi had it */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_unlock_napi
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
name|int
name|rc
init|=
name|false
decl_stmt|;
name|spin_lock
argument_list|(
operator|&
name|cq
operator|->
name|poll_lock
argument_list|)
expr_stmt|;
name|WARN_ON
argument_list|(
name|cq
operator|->
name|state
operator|&
operator|(
name|MLX4_EN_CQ_STATEPOLL
operator||
name|MLX4_EN_CQ_STATENAPI_YIELD
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cq
operator|->
name|state
operator|&
name|MLX4_EN_CQ_STATEPOLL_YIELD
condition|)
name|rc
operator|=
name|true
expr_stmt|;
name|cq
operator|->
name|state
operator|=
name|MLX4_EN_CQ_STATEIDLE
expr_stmt|;
name|spin_unlock
argument_list|(
operator|&
name|cq
operator|->
name|poll_lock
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function

begin_comment
comment|/* called from mlx4_en_low_latency_poll() */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_lock_poll
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
name|int
name|rc
init|=
name|true
decl_stmt|;
name|spin_lock_bh
argument_list|(
operator|&
name|cq
operator|->
name|poll_lock
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|cq
operator|->
name|state
operator|&
name|MLX4_CQ_LOCKED
operator|)
condition|)
block|{
name|struct
name|net_device
modifier|*
name|dev
init|=
name|cq
operator|->
name|dev
decl_stmt|;
name|struct
name|mlx4_en_priv
modifier|*
name|priv
init|=
name|netdev_priv
argument_list|(
name|dev
argument_list|)
decl_stmt|;
name|struct
name|mlx4_en_rx_ring
modifier|*
name|rx_ring
init|=
name|priv
operator|->
name|rx_ring
index|[
name|cq
operator|->
name|ring
index|]
decl_stmt|;
name|cq
operator|->
name|state
operator||=
name|MLX4_EN_CQ_STATEPOLL_YIELD
expr_stmt|;
name|rc
operator|=
name|false
expr_stmt|;
ifdef|#
directive|ifdef
name|LL_EXTENDED_STATS
name|rx_ring
operator|->
name|yields
operator|++
expr_stmt|;
endif|#
directive|endif
block|}
else|else
comment|/* preserve yield marks */
name|cq
operator|->
name|state
operator||=
name|MLX4_EN_CQ_STATEPOLL
expr_stmt|;
name|spin_unlock_bh
argument_list|(
operator|&
name|cq
operator|->
name|poll_lock
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function

begin_comment
comment|/* returns true if someone tried to get the cq while it was locked */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_unlock_poll
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
name|int
name|rc
init|=
name|false
decl_stmt|;
name|spin_lock_bh
argument_list|(
operator|&
name|cq
operator|->
name|poll_lock
argument_list|)
expr_stmt|;
name|WARN_ON
argument_list|(
name|cq
operator|->
name|state
operator|&
operator|(
name|MLX4_EN_CQ_STATENAPI
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cq
operator|->
name|state
operator|&
name|MLX4_EN_CQ_STATEPOLL_YIELD
condition|)
name|rc
operator|=
name|true
expr_stmt|;
name|cq
operator|->
name|state
operator|=
name|MLX4_EN_CQ_STATEIDLE
expr_stmt|;
name|spin_unlock_bh
argument_list|(
operator|&
name|cq
operator|->
name|poll_lock
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function

begin_comment
comment|/* true if a socket is polling, even if it did not get the lock */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_ll_polling
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
name|WARN_ON
argument_list|(
operator|!
operator|(
name|cq
operator|->
name|state
operator|&
name|MLX4_CQ_LOCKED
operator|)
argument_list|)
expr_stmt|;
return|return
name|cq
operator|->
name|state
operator|&
name|CQ_USER_PEND
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
specifier|inline
name|void
name|mlx4_en_cq_init_lock
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_lock_napi
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|true
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_unlock_napi
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_lock_poll
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_unlock_poll
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|mlx4_en_cq_ll_polling
parameter_list|(
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_NET_RX_BUSY_POLL */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_WOL_DO_MODIFY
value|(1ULL<< 63)
end_define

begin_function_decl
name|void
name|mlx4_en_destroy_netdev
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_init_netdev
parameter_list|(
name|struct
name|mlx4_en_dev
modifier|*
name|mdev
parameter_list|,
name|int
name|port
parameter_list|,
name|struct
name|mlx4_en_port_profile
modifier|*
name|prof
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_start_port
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_stop_port
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_free_resources
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_alloc_resources
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_pre_config
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_create_cq
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_cq
modifier|*
modifier|*
name|pcq
parameter_list|,
name|int
name|entries
parameter_list|,
name|int
name|ring
parameter_list|,
name|enum
name|cq_type
name|mode
parameter_list|,
name|int
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_destroy_cq
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_cq
modifier|*
modifier|*
name|pcq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_activate_cq
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|,
name|int
name|cq_idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_deactivate_cq
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_set_cq_moder
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_arm_cq
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_tx_irq
parameter_list|(
name|struct
name|mlx4_cq
modifier|*
name|mcq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u16
name|mlx4_en_select_queue
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
name|struct
name|mbuf
modifier|*
name|mb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_transmit
parameter_list|(
name|struct
name|ifnet
modifier|*
name|dev
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_create_tx_ring
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_tx_ring
modifier|*
modifier|*
name|pring
parameter_list|,
name|u32
name|size
parameter_list|,
name|u16
name|stride
parameter_list|,
name|int
name|node
parameter_list|,
name|int
name|queue_idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_destroy_tx_ring
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_tx_ring
modifier|*
modifier|*
name|pring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_activate_tx_ring
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_tx_ring
modifier|*
name|ring
parameter_list|,
name|int
name|cq
parameter_list|,
name|int
name|user_prio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_deactivate_tx_ring
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_tx_ring
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_qflush
parameter_list|(
name|struct
name|ifnet
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_create_rx_ring
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_rx_ring
modifier|*
modifier|*
name|pring
parameter_list|,
name|u32
name|size
parameter_list|,
name|int
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_destroy_rx_ring
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_rx_ring
modifier|*
modifier|*
name|pring
parameter_list|,
name|u32
name|size
parameter_list|,
name|u16
name|stride
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_tx_que
parameter_list|(
name|void
modifier|*
name|context
parameter_list|,
name|int
name|pending
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_rx_que
parameter_list|(
name|void
modifier|*
name|context
parameter_list|,
name|int
name|pending
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_activate_rx_rings
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_deactivate_rx_ring
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_rx_ring
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_process_rx_cq
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_en_cq
modifier|*
name|cq
parameter_list|,
name|int
name|budget
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_poll_tx_cq
parameter_list|(
name|unsigned
name|long
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_fill_qp_context
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|stride
parameter_list|,
name|int
name|is_tx
parameter_list|,
name|int
name|rss
parameter_list|,
name|int
name|qpn
parameter_list|,
name|int
name|cqn
parameter_list|,
name|int
name|user_prio
parameter_list|,
name|struct
name|mlx4_qp_context
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_sqp_event
parameter_list|(
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|,
name|enum
name|mlx4_event
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_map_buffer
parameter_list|(
name|struct
name|mlx4_buf
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_unmap_buffer
parameter_list|(
name|struct
name|mlx4_buf
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_calc_rx_buf
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u32
modifier|*
name|mlx4_en_get_rss_key
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|u16
modifier|*
name|keylen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u8
name|mlx4_en_get_rss_mask
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_config_rss_steer
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_release_rss_steer
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_create_drop_qp
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_destroy_drop_qp
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_free_tx_buf
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_en_tx_ring
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_rx_irq
parameter_list|(
name|struct
name|mlx4_cq
modifier|*
name|mcq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_SET_MCAST_FLTR
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u64
name|mac
parameter_list|,
name|u64
name|clear
parameter_list|,
name|u8
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_SET_VLAN_FLTR
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_DUMP_ETH_STATS
parameter_list|(
name|struct
name|mlx4_en_dev
modifier|*
name|mdev
parameter_list|,
name|u8
name|port
parameter_list|,
name|u8
name|reset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_QUERY_PORT
parameter_list|(
name|struct
name|mlx4_en_dev
modifier|*
name|mdev
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_get_vport_stats
parameter_list|(
name|struct
name|mlx4_en_dev
modifier|*
name|mdev
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_create_debug_files
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_delete_debug_files
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_en_register_debugfs
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_unregister_debugfs
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_MLX4_EN_DCB
end_ifdef

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|dcbnl_rtnl_ops
name|mlx4_en_dcbnl_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|dcbnl_rtnl_ops
name|mlx4_en_dcbnl_pfc_ops
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|mlx4_en_setup_tc
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
name|u8
name|up
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_RFS_ACCEL
end_ifdef

begin_function_decl
name|void
name|mlx4_en_cleanup_filters
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|struct
name|mlx4_en_rx_ring
modifier|*
name|rx_ring
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|MLX4_EN_NUM_SELF_TEST
value|5
end_define

begin_function_decl
name|void
name|mlx4_en_ex_selftest
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
name|u32
modifier|*
name|flags
parameter_list|,
name|u64
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_ptp_overflow_check
parameter_list|(
name|struct
name|mlx4_en_dev
modifier|*
name|mdev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Functions for time stamping  */
end_comment

begin_define
define|#
directive|define
name|SKBTX_HW_TSTAMP
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|SKBTX_IN_PROGRESS
value|(1<< 2)
end_define

begin_function_decl
name|u64
name|mlx4_en_get_cqe_ts
parameter_list|(
name|struct
name|mlx4_cqe
modifier|*
name|cqe
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Functions for caching and restoring statistics */
end_comment

begin_function_decl
name|int
name|mlx4_en_get_sset_count
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
name|int
name|sset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_en_restore_ethtool_stats
parameter_list|(
name|struct
name|mlx4_en_priv
modifier|*
name|priv
parameter_list|,
name|u64
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Globals  */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|ethtool_ops
name|mlx4_en_ethtool_ops
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Defines for link speed - needed by selftest  */
end_comment

begin_define
define|#
directive|define
name|MLX4_EN_LINK_SPEED_1G
value|1000
end_define

begin_define
define|#
directive|define
name|MLX4_EN_LINK_SPEED_10G
value|10000
end_define

begin_define
define|#
directive|define
name|MLX4_EN_LINK_SPEED_40G
value|40000
end_define

begin_enum
enum|enum
block|{
name|NETIF_MSG_DRV
init|=
literal|0x0001
block|,
name|NETIF_MSG_PROBE
init|=
literal|0x0002
block|,
name|NETIF_MSG_LINK
init|=
literal|0x0004
block|,
name|NETIF_MSG_TIMER
init|=
literal|0x0008
block|,
name|NETIF_MSG_IFDOWN
init|=
literal|0x0010
block|,
name|NETIF_MSG_IFUP
init|=
literal|0x0020
block|,
name|NETIF_MSG_RX_ERR
init|=
literal|0x0040
block|,
name|NETIF_MSG_TX_ERR
init|=
literal|0x0080
block|,
name|NETIF_MSG_TX_QUEUED
init|=
literal|0x0100
block|,
name|NETIF_MSG_INTR
init|=
literal|0x0200
block|,
name|NETIF_MSG_TX_DONE
init|=
literal|0x0400
block|,
name|NETIF_MSG_RX_STATUS
init|=
literal|0x0800
block|,
name|NETIF_MSG_PKTDATA
init|=
literal|0x1000
block|,
name|NETIF_MSG_HW
init|=
literal|0x2000
block|,
name|NETIF_MSG_WOL
init|=
literal|0x4000
block|, }
enum|;
end_enum

begin_comment
comment|/*  * printk / logging functions  */
end_comment

begin_define
define|#
directive|define
name|en_print
parameter_list|(
name|level
parameter_list|,
name|priv
parameter_list|,
name|format
parameter_list|,
name|arg
modifier|...
parameter_list|)
define|\
value|{                                                       \         if ((priv)->registered)                                 \                 printk(level "%s: %s: " format, DRV_NAME,       \                         (priv->dev)->if_xname, ## arg); \         else                                                    \                 printk(level "%s: %s: Port %d: " format,        \                         DRV_NAME, dev_name(&priv->mdev->pdev->dev), \                         (priv)->port, ## arg);                  \         }
end_define

begin_define
define|#
directive|define
name|en_dbg
parameter_list|(
name|mlevel
parameter_list|,
name|priv
parameter_list|,
name|format
parameter_list|,
name|arg
modifier|...
parameter_list|)
define|\
value|do {								\ 	if (NETIF_MSG_##mlevel& priv->msg_enable)		\ 		en_print(KERN_DEBUG, priv, format, ##arg);	\ } while (0)
end_define

begin_define
define|#
directive|define
name|en_warn
parameter_list|(
name|priv
parameter_list|,
name|format
parameter_list|,
name|arg
modifier|...
parameter_list|)
define|\
value|en_print(KERN_WARNING, priv, format, ##arg)
end_define

begin_define
define|#
directive|define
name|en_err
parameter_list|(
name|priv
parameter_list|,
name|format
parameter_list|,
name|arg
modifier|...
parameter_list|)
define|\
value|en_print(KERN_ERR, priv, format, ##arg)
end_define

begin_define
define|#
directive|define
name|en_info
parameter_list|(
name|priv
parameter_list|,
name|format
parameter_list|,
name|arg
modifier|...
parameter_list|)
define|\
value|en_print(KERN_INFO, priv, format, ## arg)
end_define

begin_define
define|#
directive|define
name|mlx4_err
parameter_list|(
name|mdev
parameter_list|,
name|format
parameter_list|,
name|arg
modifier|...
parameter_list|)
define|\
value|pr_err("%s %s: " format, DRV_NAME,		\ 	       dev_name(&mdev->pdev->dev), ##arg)
end_define

begin_define
define|#
directive|define
name|mlx4_info
parameter_list|(
name|mdev
parameter_list|,
name|format
parameter_list|,
name|arg
modifier|...
parameter_list|)
define|\
value|pr_info("%s %s: " format, DRV_NAME,		\ 		dev_name(&mdev->pdev->dev), ##arg)
end_define

begin_define
define|#
directive|define
name|mlx4_warn
parameter_list|(
name|mdev
parameter_list|,
name|format
parameter_list|,
name|arg
modifier|...
parameter_list|)
define|\
value|pr_warning("%s %s: " format, DRV_NAME,		\ 		   dev_name(&mdev->pdev->dev), ##arg)
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

