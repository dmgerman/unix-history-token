begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005, 2006, 2007, 2008, 2014 Mellanox Technologies. All rights reserved.  * Copyright (c) 2006, 2007 Cisco Systems, Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX4_ICM_H
end_ifndef

begin_define
define|#
directive|define
name|MLX4_ICM_H
end_define

begin_include
include|#
directive|include
file|<linux/list.h>
end_include

begin_include
include|#
directive|include
file|<linux/pci.h>
end_include

begin_include
include|#
directive|include
file|<linux/mutex.h>
end_include

begin_include
include|#
directive|include
file|<linux/scatterlist.h>
end_include

begin_define
define|#
directive|define
name|MLX4_ICM_CHUNK_LEN
define|\
value|((256 - sizeof (struct list_head) - 2 * sizeof (int)) /		\ 	 (sizeof (struct scatterlist)))
end_define

begin_enum
enum|enum
block|{
name|MLX4_ICM_PAGE_SHIFT
init|=
literal|12
block|,
name|MLX4_ICM_PAGE_SIZE
init|=
literal|1
operator|<<
name|MLX4_ICM_PAGE_SHIFT
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_icm_chunk
block|{
name|struct
name|list_head
name|list
decl_stmt|;
name|int
name|npages
decl_stmt|;
name|int
name|nsg
decl_stmt|;
name|struct
name|scatterlist
name|mem
index|[
name|MLX4_ICM_CHUNK_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_icm
block|{
name|struct
name|list_head
name|chunk_list
decl_stmt|;
name|int
name|refcount
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_icm_iter
block|{
name|struct
name|mlx4_icm
modifier|*
name|icm
decl_stmt|;
name|struct
name|mlx4_icm_chunk
modifier|*
name|chunk
decl_stmt|;
name|int
name|page_idx
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|mlx4_dev
struct_decl|;
end_struct_decl

begin_function_decl
name|struct
name|mlx4_icm
modifier|*
name|mlx4_alloc_icm
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|int
name|npages
parameter_list|,
name|gfp_t
name|gfp_mask
parameter_list|,
name|int
name|coherent
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_free_icm
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_icm
modifier|*
name|icm
parameter_list|,
name|int
name|coherent
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_table_get
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_icm_table
modifier|*
name|table
parameter_list|,
name|u32
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_table_put
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_icm_table
modifier|*
name|table
parameter_list|,
name|u32
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_table_get_range
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_icm_table
modifier|*
name|table
parameter_list|,
name|u32
name|start
parameter_list|,
name|u32
name|end
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_table_put_range
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_icm_table
modifier|*
name|table
parameter_list|,
name|u32
name|start
parameter_list|,
name|u32
name|end
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_init_icm_table
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_icm_table
modifier|*
name|table
parameter_list|,
name|u64
name|virt
parameter_list|,
name|int
name|obj_size
parameter_list|,
name|u64
name|nobj
parameter_list|,
name|int
name|reserved
parameter_list|,
name|int
name|use_lowmem
parameter_list|,
name|int
name|use_coherent
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_cleanup_icm_table
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_icm_table
modifier|*
name|table
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mlx4_table_find
parameter_list|(
name|struct
name|mlx4_icm_table
modifier|*
name|table
parameter_list|,
name|u32
name|obj
parameter_list|,
name|dma_addr_t
modifier|*
name|dma_handle
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|mlx4_icm_first
parameter_list|(
name|struct
name|mlx4_icm
modifier|*
name|icm
parameter_list|,
name|struct
name|mlx4_icm_iter
modifier|*
name|iter
parameter_list|)
block|{
name|iter
operator|->
name|icm
operator|=
name|icm
expr_stmt|;
name|iter
operator|->
name|chunk
operator|=
name|list_empty
argument_list|(
operator|&
name|icm
operator|->
name|chunk_list
argument_list|)
condition|?
name|NULL
else|:
name|list_entry
argument_list|(
name|icm
operator|->
name|chunk_list
operator|.
name|next
argument_list|,
expr|struct
name|mlx4_icm_chunk
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|iter
operator|->
name|page_idx
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mlx4_icm_last
parameter_list|(
name|struct
name|mlx4_icm_iter
modifier|*
name|iter
parameter_list|)
block|{
return|return
operator|!
name|iter
operator|->
name|chunk
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mlx4_icm_next
parameter_list|(
name|struct
name|mlx4_icm_iter
modifier|*
name|iter
parameter_list|)
block|{
if|if
condition|(
operator|++
name|iter
operator|->
name|page_idx
operator|>=
name|iter
operator|->
name|chunk
operator|->
name|nsg
condition|)
block|{
if|if
condition|(
name|iter
operator|->
name|chunk
operator|->
name|list
operator|.
name|next
operator|==
operator|&
name|iter
operator|->
name|icm
operator|->
name|chunk_list
condition|)
block|{
name|iter
operator|->
name|chunk
operator|=
name|NULL
expr_stmt|;
return|return;
block|}
name|iter
operator|->
name|chunk
operator|=
name|list_entry
argument_list|(
name|iter
operator|->
name|chunk
operator|->
name|list
operator|.
name|next
argument_list|,
expr|struct
name|mlx4_icm_chunk
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|iter
operator|->
name|page_idx
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|dma_addr_t
name|mlx4_icm_addr
parameter_list|(
name|struct
name|mlx4_icm_iter
modifier|*
name|iter
parameter_list|)
block|{
return|return
name|sg_dma_address
argument_list|(
operator|&
name|iter
operator|->
name|chunk
operator|->
name|mem
index|[
name|iter
operator|->
name|page_idx
index|]
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|mlx4_icm_size
parameter_list|(
name|struct
name|mlx4_icm_iter
modifier|*
name|iter
parameter_list|)
block|{
return|return
name|sg_dma_len
argument_list|(
operator|&
name|iter
operator|->
name|chunk
operator|->
name|mem
index|[
name|iter
operator|->
name|page_idx
index|]
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|int
name|mlx4_MAP_ICM_AUX
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_icm
modifier|*
name|icm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_UNMAP_ICM_AUX
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX4_ICM_H */
end_comment

end_unit

