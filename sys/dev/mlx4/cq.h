begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2007 Cisco Systems, Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *	- Redistributions of source code must retain the above  *	  copyright notice, this list of conditions and the following  *	  disclaimer.  *  *	- Redistributions in binary form must reproduce the above  *	  copyright notice, this list of conditions and the following  *	  disclaimer in the documentation and/or other materials  *	  provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX4_CQ_H
end_ifndef

begin_define
define|#
directive|define
name|MLX4_CQ_H
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx4/device.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx4/doorbell.h>
end_include

begin_struct
struct|struct
name|mlx4_cqe
block|{
name|__be32
name|vlan_my_qpn
decl_stmt|;
name|__be32
name|immed_rss_invalid
decl_stmt|;
name|__be32
name|g_mlpath_rqpn
decl_stmt|;
name|__be16
name|sl_vid
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|__be16
name|rlid
decl_stmt|;
name|__be16
name|status
decl_stmt|;
name|u8
name|ipv6_ext_mask
decl_stmt|;
name|u8
name|badfcs_enc
decl_stmt|;
block|}
struct|;
name|u8
name|smac
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
union|;
name|__be32
name|byte_cnt
decl_stmt|;
name|__be16
name|wqe_index
decl_stmt|;
name|__be16
name|checksum
decl_stmt|;
name|u8
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|owner_sr_opcode
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_err_cqe
block|{
name|__be32
name|my_qpn
decl_stmt|;
name|u32
name|reserved1
index|[
literal|5
index|]
decl_stmt|;
name|__be16
name|wqe_index
decl_stmt|;
name|u8
name|vendor_err_syndrome
decl_stmt|;
name|u8
name|syndrome
decl_stmt|;
name|u8
name|reserved2
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|owner_sr_opcode
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_ts_cqe
block|{
name|__be32
name|vlan_my_qpn
decl_stmt|;
name|__be32
name|immed_rss_invalid
decl_stmt|;
name|__be32
name|g_mlpath_rqpn
decl_stmt|;
name|__be32
name|timestamp_hi
decl_stmt|;
name|__be16
name|status
decl_stmt|;
name|u8
name|ipv6_ext_mask
decl_stmt|;
name|u8
name|badfcs_enc
decl_stmt|;
name|__be32
name|byte_cnt
decl_stmt|;
name|__be16
name|wqe_index
decl_stmt|;
name|__be16
name|checksum
decl_stmt|;
name|u8
name|reserved
decl_stmt|;
name|__be16
name|timestamp_lo
decl_stmt|;
name|u8
name|owner_sr_opcode
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX4_CQE_L2_TUNNEL_IPOK
init|=
literal|1
operator|<<
literal|31
block|,
name|MLX4_CQE_CVLAN_PRESENT_MASK
init|=
literal|1
operator|<<
literal|29
block|,
name|MLX4_CQE_SVLAN_PRESENT_MASK
init|=
literal|1
operator|<<
literal|30
block|,
name|MLX4_CQE_L2_TUNNEL
init|=
literal|1
operator|<<
literal|27
block|,
name|MLX4_CQE_L2_TUNNEL_CSUM
init|=
literal|1
operator|<<
literal|26
block|,
name|MLX4_CQE_L2_TUNNEL_IPV4
init|=
literal|1
operator|<<
literal|25
block|,
name|MLX4_CQE_QPN_MASK
init|=
literal|0xffffff
block|,
name|MLX4_CQE_VID_MASK
init|=
literal|0xfff
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_CQE_OWNER_MASK
init|=
literal|0x80
block|,
name|MLX4_CQE_IS_SEND_MASK
init|=
literal|0x40
block|,
name|MLX4_CQE_OPCODE_MASK
init|=
literal|0x1f
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_CQE_SYNDROME_LOCAL_LENGTH_ERR
init|=
literal|0x01
block|,
name|MLX4_CQE_SYNDROME_LOCAL_QP_OP_ERR
init|=
literal|0x02
block|,
name|MLX4_CQE_SYNDROME_LOCAL_PROT_ERR
init|=
literal|0x04
block|,
name|MLX4_CQE_SYNDROME_WR_FLUSH_ERR
init|=
literal|0x05
block|,
name|MLX4_CQE_SYNDROME_MW_BIND_ERR
init|=
literal|0x06
block|,
name|MLX4_CQE_SYNDROME_BAD_RESP_ERR
init|=
literal|0x10
block|,
name|MLX4_CQE_SYNDROME_LOCAL_ACCESS_ERR
init|=
literal|0x11
block|,
name|MLX4_CQE_SYNDROME_REMOTE_INVAL_REQ_ERR
init|=
literal|0x12
block|,
name|MLX4_CQE_SYNDROME_REMOTE_ACCESS_ERR
init|=
literal|0x13
block|,
name|MLX4_CQE_SYNDROME_REMOTE_OP_ERR
init|=
literal|0x14
block|,
name|MLX4_CQE_SYNDROME_TRANSPORT_RETRY_EXC_ERR
init|=
literal|0x15
block|,
name|MLX4_CQE_SYNDROME_RNR_RETRY_EXC_ERR
init|=
literal|0x16
block|,
name|MLX4_CQE_SYNDROME_REMOTE_ABORTED_ERR
init|=
literal|0x22
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_CQE_STATUS_IPV4
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX4_CQE_STATUS_IPV4F
init|=
literal|1
operator|<<
literal|7
block|,
name|MLX4_CQE_STATUS_IPV6
init|=
literal|1
operator|<<
literal|8
block|,
name|MLX4_CQE_STATUS_IPV4OPT
init|=
literal|1
operator|<<
literal|9
block|,
name|MLX4_CQE_STATUS_TCP
init|=
literal|1
operator|<<
literal|10
block|,
name|MLX4_CQE_STATUS_UDP
init|=
literal|1
operator|<<
literal|11
block|,
name|MLX4_CQE_STATUS_IPOK
init|=
literal|1
operator|<<
literal|12
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_CQE_LLC
init|=
literal|1
block|,
name|MLX4_CQE_SNAP
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX4_CQE_BAD_FCS
init|=
literal|1
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_function
specifier|static
specifier|inline
name|void
name|mlx4_cq_arm
parameter_list|(
name|struct
name|mlx4_cq
modifier|*
name|cq
parameter_list|,
name|u32
name|cmd
parameter_list|,
name|u8
name|__iomem
modifier|*
name|uar_page
parameter_list|,
name|spinlock_t
modifier|*
name|doorbell_lock
parameter_list|)
block|{
name|__be32
name|doorbell
index|[
literal|2
index|]
decl_stmt|;
name|u32
name|sn
decl_stmt|;
name|u32
name|ci
decl_stmt|;
name|sn
operator|=
name|cq
operator|->
name|arm_sn
operator|&
literal|3
expr_stmt|;
name|ci
operator|=
name|cq
operator|->
name|cons_index
operator|&
literal|0xffffff
expr_stmt|;
operator|*
name|cq
operator|->
name|arm_db
operator|=
name|cpu_to_be32
argument_list|(
name|sn
operator|<<
literal|28
operator||
name|cmd
operator||
name|ci
argument_list|)
expr_stmt|;
comment|/* 	 * Make sure that the doorbell record in host memory is 	 * written before ringing the doorbell via PCI MMIO. 	 */
name|wmb
argument_list|()
expr_stmt|;
name|doorbell
index|[
literal|0
index|]
operator|=
name|cpu_to_be32
argument_list|(
name|sn
operator|<<
literal|28
operator||
name|cmd
operator||
name|cq
operator|->
name|cqn
argument_list|)
expr_stmt|;
name|doorbell
index|[
literal|1
index|]
operator|=
name|cpu_to_be32
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|mlx4_write64
argument_list|(
name|doorbell
argument_list|,
name|uar_page
operator|+
name|MLX4_CQ_DOORBELL
argument_list|,
name|doorbell_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mlx4_cq_set_ci
parameter_list|(
name|struct
name|mlx4_cq
modifier|*
name|cq
parameter_list|)
block|{
operator|*
name|cq
operator|->
name|set_ci_db
operator|=
name|cpu_to_be32
argument_list|(
name|cq
operator|->
name|cons_index
operator|&
literal|0xffffff
argument_list|)
expr_stmt|;
block|}
end_function

begin_enum
enum|enum
block|{
name|MLX4_CQ_DB_REQ_NOT_SOL
init|=
literal|1
operator|<<
literal|24
block|,
name|MLX4_CQ_DB_REQ_NOT
init|=
literal|2
operator|<<
literal|24
block|}
enum|;
end_enum

begin_function_decl
name|int
name|mlx4_cq_modify
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_cq
modifier|*
name|cq
parameter_list|,
name|u16
name|count
parameter_list|,
name|u16
name|period
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_cq_resize
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_cq
modifier|*
name|cq
parameter_list|,
name|int
name|entries
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX4_CQ_H */
end_comment

end_unit

