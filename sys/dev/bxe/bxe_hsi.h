begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007-2011 Broadcom Corporation. All rights reserved.  *  *    Gary Zambrano<zambrano@broadcom.com>  *    David Christensen<davidch@broadcom.com>  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of Broadcom Corporation nor the name of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written consent.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS'  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  * THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_struct
struct|struct
name|license_key
block|{
name|uint32_t
name|reserved
index|[
literal|6
index|]
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|max_iscsi_init_conn
decl_stmt|;
name|uint16_t
name|max_iscsi_trgt_conn
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|max_iscsi_trgt_conn
decl_stmt|;
name|uint16_t
name|max_iscsi_init_conn
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|reserved_a
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PORT_0
value|0
end_define

begin_define
define|#
directive|define
name|PORT_1
value|1
end_define

begin_define
define|#
directive|define
name|PORT_MAX
value|2
end_define

begin_comment
comment|/*  * Shared HW configuration  */
end_comment

begin_struct
struct|struct
name|shared_hw_cfg
block|{
comment|/* NVRAM Offset */
comment|/* Up to 16 bytes of NULL-terminated string */
name|uint8_t
name|part_num
index|[
literal|16
index|]
decl_stmt|;
comment|/* 0x104 */
name|uint32_t
name|config
decl_stmt|;
comment|/* 0x114 */
define|#
directive|define
name|SHARED_HW_CFG_MDIO_VOLTAGE_MASK
value|0x00000001
define|#
directive|define
name|SHARED_HW_CFG_MDIO_VOLTAGE_SHIFT
value|0
define|#
directive|define
name|SHARED_HW_CFG_MDIO_VOLTAGE_1_2V
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_MDIO_VOLTAGE_2_5V
value|0x00000001
define|#
directive|define
name|SHARED_HW_CFG_MCP_RST_ON_CORE_RST_EN
value|0x00000002
define|#
directive|define
name|SHARED_HW_CFG_PORT_SWAP
value|0x00000004
define|#
directive|define
name|SHARED_HW_CFG_BEACON_WOL_EN
value|0x00000008
define|#
directive|define
name|SHARED_HW_CFG_MFW_SELECT_MASK
value|0x00000700
define|#
directive|define
name|SHARED_HW_CFG_MFW_SELECT_SHIFT
value|8
comment|/* 	 * Whatever MFW found in NVM 	 * (if multiple found, priority order is: NC-SI, UMP, IPMI) 	 */
define|#
directive|define
name|SHARED_HW_CFG_MFW_SELECT_DEFAULT
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_MFW_SELECT_NC_SI
value|0x00000100
define|#
directive|define
name|SHARED_HW_CFG_MFW_SELECT_UMP
value|0x00000200
define|#
directive|define
name|SHARED_HW_CFG_MFW_SELECT_IPMI
value|0x00000300
comment|/* 	 * Use SPIO4 as an arbiter between: 0-NC_SI, 1-IPMI 	 * (can only be used when an add-in board, not BMC, pulls-down SPIO4). 	 */
define|#
directive|define
name|SHARED_HW_CFG_MFW_SELECT_SPIO4_NC_SI_IPMI
value|0x00000400
comment|/* 	 * Use SPIO4 as an arbiter between: 0-UMP, 1-IPMI 	 * (can only be used when an add-in board, not BMC, pulls-down SPIO4). 	 */
define|#
directive|define
name|SHARED_HW_CFG_MFW_SELECT_SPIO4_UMP_IPMI
value|0x00000500
comment|/* 	 * Use SPIO4 as an arbiter between: 0-NC-SI, 1-UMP 	 * (can only be used when an add-in board, not BMC, pulls-down SPIO4). 	 */
define|#
directive|define
name|SHARED_HW_CFG_MFW_SELECT_SPIO4_NC_SI_UMP
value|0x00000600
define|#
directive|define
name|SHARED_HW_CFG_LED_MODE_MASK
value|0x000f0000
define|#
directive|define
name|SHARED_HW_CFG_LED_MODE_SHIFT
value|16
define|#
directive|define
name|SHARED_HW_CFG_LED_MAC1
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY1
value|0x00010000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY2
value|0x00020000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY3
value|0x00030000
define|#
directive|define
name|SHARED_HW_CFG_LED_MAC2
value|0x00040000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY4
value|0x00050000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY5
value|0x00060000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY6
value|0x00070000
define|#
directive|define
name|SHARED_HW_CFG_LED_MAC3
value|0x00080000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY7
value|0x00090000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY9
value|0x000a0000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY11
value|0x000b0000
define|#
directive|define
name|SHARED_HW_CFG_LED_MAC4
value|0x000c0000
define|#
directive|define
name|SHARED_HW_CFG_LED_PHY8
value|0x000d0000
define|#
directive|define
name|SHARED_HW_CFG_AN_ENABLE_MASK
value|0x3f000000
define|#
directive|define
name|SHARED_HW_CFG_AN_ENABLE_SHIFT
value|24
define|#
directive|define
name|SHARED_HW_CFG_AN_ENABLE_CL37
value|0x01000000
define|#
directive|define
name|SHARED_HW_CFG_AN_ENABLE_CL73
value|0x02000000
define|#
directive|define
name|SHARED_HW_CFG_AN_ENABLE_BAM
value|0x04000000
define|#
directive|define
name|SHARED_HW_CFG_AN_ENABLE_PARALLEL_DETECTION
value|0x08000000
define|#
directive|define
name|SHARED_HW_CFG_AN_EN_SGMII_FIBER_AUTO_DETECT
value|0x10000000
define|#
directive|define
name|SHARED_HW_CFG_AN_ENABLE_REMOTE_PHY
value|0x20000000
name|uint32_t
name|config2
decl_stmt|;
comment|/* 0x118 */
comment|/* one time auto detect grace period (in sec) */
define|#
directive|define
name|SHARED_HW_CFG_GRACE_PERIOD_MASK
value|0x000000ff
define|#
directive|define
name|SHARED_HW_CFG_GRACE_PERIOD_SHIFT
value|0
define|#
directive|define
name|SHARED_HW_CFG_PCIE_GEN2_ENABLED
value|0x00000100
comment|/* 	 * The default value for the core clock is 250MHz and it is 	 * achieved by setting the clock change to 4. 	 */
define|#
directive|define
name|SHARED_HW_CFG_CLOCK_CHANGE_MASK
value|0x00000e00
define|#
directive|define
name|SHARED_HW_CFG_CLOCK_CHANGE_SHIFT
value|9
define|#
directive|define
name|SHARED_HW_CFG_SMBUS_TIMING_100KHZ
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_SMBUS_TIMING_400KHZ
value|0x00001000
define|#
directive|define
name|SHARED_HW_CFG_HIDE_PORT1
value|0x00002000
define|#
directive|define
name|SHARED_HW_CFG_WOL_CAPABLE_DISABLED
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_WOL_CAPABLE_ENABLED
value|0x00004000
comment|/* Output low when PERST is asserted. */
define|#
directive|define
name|SHARED_HW_CFG_SPIO4_FOLLOW_PERST_DISABLED
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_SPIO4_FOLLOW_PERST_ENABLED
value|0x00008000
define|#
directive|define
name|SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_MASK
value|0x00070000
define|#
directive|define
name|SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_SHIFT
value|16
define|#
directive|define
name|SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_HW
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_0DB
value|0x00010000
comment|/*    0dB */
define|#
directive|define
name|SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_3_5DB
value|0x00020000
comment|/* -3.5dB */
define|#
directive|define
name|SHARED_HW_CFG_PCIE_GEN2_PREEMPHASIS_6_0DB
value|0x00030000
comment|/* -6.0dB */
comment|/* 	 * The fan failure mechanism is usually related to the PHY type 	 * since the power consumption of the board is determined by the PHY. 	 * Currently, fan is required for most designs with SFX7101, BCM8727 	 * and BCM8481. If a fan is not required for a board which uses one 	 * of those PHYs, this field should be set to "Disabled". If a fan is 	 * required for a different PHY type, this option should be set to 	 * "Enabled". 	 * The fan failure indication is expected on 	 * SPIO5. 	 */
define|#
directive|define
name|SHARED_HW_CFG_FAN_FAILURE_MASK
value|0x00180000
define|#
directive|define
name|SHARED_HW_CFG_FAN_FAILURE_SHIFT
value|19
define|#
directive|define
name|SHARED_HW_CFG_FAN_FAILURE_PHY_TYPE
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_FAN_FAILURE_DISABLED
value|0x00080000
define|#
directive|define
name|SHARED_HW_CFG_FAN_FAILURE_ENABLED
value|0x00100000
comment|/*  ASPM Power Management support */
define|#
directive|define
name|SHARED_HW_CFG_ASPM_SUPPORT_MASK
value|0x00600000
define|#
directive|define
name|SHARED_HW_CFG_ASPM_SUPPORT_SHIFT
value|21
define|#
directive|define
name|SHARED_HW_CFG_ASPM_SUPPORT_L0S_L1_ENABLED
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_ASPM_SUPPORT_L0S_DISABLED
value|0x00200000
define|#
directive|define
name|SHARED_HW_CFG_ASPM_SUPPORT_L1_DISABLED
value|0x00400000
define|#
directive|define
name|SHARED_HW_CFG_ASPM_SUPPORT_L0S_L1_DISABLED
value|0x00600000
comment|/* 	 * The value of PM_TL_IGNORE_REQS (bit0) in PCI register 	 * tl_control_0 (register 0x2800). 	 */
define|#
directive|define
name|SHARED_HW_CFG_PREVENT_L1_ENTRY_DISABLED
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_PREVENT_L1_ENTRY_ENABLED
value|0x00800000
name|uint32_t
name|power_dissipated
decl_stmt|;
comment|/* 0x11c */
define|#
directive|define
name|SHARED_HW_CFG_POWER_DIS_CMN_MASK
value|0xff000000
define|#
directive|define
name|SHARED_HW_CFG_POWER_DIS_CMN_SHIFT
value|24
define|#
directive|define
name|SHARED_HW_CFG_POWER_MGNT_SCALE_MASK
value|0x00ff0000
define|#
directive|define
name|SHARED_HW_CFG_POWER_MGNT_SCALE_SHIFT
value|16
define|#
directive|define
name|SHARED_HW_CFG_POWER_MGNT_UNKNOWN_SCALE
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_POWER_MGNT_DOT_1_WATT
value|0x00010000
define|#
directive|define
name|SHARED_HW_CFG_POWER_MGNT_DOT_01_WATT
value|0x00020000
define|#
directive|define
name|SHARED_HW_CFG_POWER_MGNT_DOT_001_WATT
value|0x00030000
name|uint32_t
name|ump_nc_si_config
decl_stmt|;
comment|/* 0x120 */
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_MII_MODE_MASK
value|0x00000003
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_MII_MODE_SHIFT
value|0
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_MII_MODE_MAC
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_MII_MODE_PHY
value|0x00000001
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_MII_MODE_MII
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_MII_MODE_RMII
value|0x00000002
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_NUM_DEVS_MASK
value|0x00000f00
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_NUM_DEVS_SHIFT
value|8
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_EXT_PHY_TYPE_MASK
value|0x00ff0000
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_EXT_PHY_TYPE_SHIFT
value|16
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_EXT_PHY_TYPE_NONE
value|0x00000000
define|#
directive|define
name|SHARED_HW_CFG_UMP_NC_SI_EXT_PHY_TYPE_BCM5221
value|0x00010000
name|uint32_t
name|board
decl_stmt|;
comment|/* 0x124 */
define|#
directive|define
name|SHARED_HW_CFG_BOARD_REV_MASK
value|0x00ff0000
define|#
directive|define
name|SHARED_HW_CFG_BOARD_REV_SHIFT
value|16
define|#
directive|define
name|SHARED_HW_CFG_BOARD_MAJOR_VER_MASK
value|0x0f000000
define|#
directive|define
name|SHARED_HW_CFG_BOARD_MAJOR_VER_SHIFT
value|24
define|#
directive|define
name|SHARED_HW_CFG_BOARD_MINOR_VER_MASK
value|0xf0000000
define|#
directive|define
name|SHARED_HW_CFG_BOARD_MINOR_VER_SHIFT
value|28
name|uint32_t
name|reserved
decl_stmt|;
comment|/* 0x128 */
block|}
struct|;
end_struct

begin_comment
comment|/*  * Port HW configuration  */
end_comment

begin_struct
struct|struct
name|port_hw_cfg
block|{
comment|/* port 0: 0x12c  port 1: 0x2bc */
name|uint32_t
name|pci_id
decl_stmt|;
define|#
directive|define
name|PORT_HW_CFG_PCI_VENDOR_ID_MASK
value|0xffff0000
define|#
directive|define
name|PORT_HW_CFG_PCI_DEVICE_ID_MASK
value|0x0000ffff
name|uint32_t
name|pci_sub_id
decl_stmt|;
define|#
directive|define
name|PORT_HW_CFG_PCI_SUBSYS_DEVICE_ID_MASK
value|0xffff0000
define|#
directive|define
name|PORT_HW_CFG_PCI_SUBSYS_VENDOR_ID_MASK
value|0x0000ffff
name|uint32_t
name|power_dissipated
decl_stmt|;
define|#
directive|define
name|PORT_HW_CFG_POWER_DIS_D3_MASK
value|0xff000000
define|#
directive|define
name|PORT_HW_CFG_POWER_DIS_D3_SHIFT
value|24
define|#
directive|define
name|PORT_HW_CFG_POWER_DIS_D2_MASK
value|0x00ff0000
define|#
directive|define
name|PORT_HW_CFG_POWER_DIS_D2_SHIFT
value|16
define|#
directive|define
name|PORT_HW_CFG_POWER_DIS_D1_MASK
value|0x0000ff00
define|#
directive|define
name|PORT_HW_CFG_POWER_DIS_D1_SHIFT
value|8
define|#
directive|define
name|PORT_HW_CFG_POWER_DIS_D0_MASK
value|0x000000ff
define|#
directive|define
name|PORT_HW_CFG_POWER_DIS_D0_SHIFT
value|0
name|uint32_t
name|power_consumed
decl_stmt|;
define|#
directive|define
name|PORT_HW_CFG_POWER_CONS_D3_MASK
value|0xff000000
define|#
directive|define
name|PORT_HW_CFG_POWER_CONS_D3_SHIFT
value|24
define|#
directive|define
name|PORT_HW_CFG_POWER_CONS_D2_MASK
value|0x00ff0000
define|#
directive|define
name|PORT_HW_CFG_POWER_CONS_D2_SHIFT
value|16
define|#
directive|define
name|PORT_HW_CFG_POWER_CONS_D1_MASK
value|0x0000ff00
define|#
directive|define
name|PORT_HW_CFG_POWER_CONS_D1_SHIFT
value|8
define|#
directive|define
name|PORT_HW_CFG_POWER_CONS_D0_MASK
value|0x000000ff
define|#
directive|define
name|PORT_HW_CFG_POWER_CONS_D0_SHIFT
value|0
name|uint32_t
name|mac_upper
decl_stmt|;
define|#
directive|define
name|PORT_HW_CFG_UPPERMAC_MASK
value|0x0000ffff
define|#
directive|define
name|PORT_HW_CFG_UPPERMAC_SHIFT
value|0
name|uint32_t
name|mac_lower
decl_stmt|;
name|uint32_t
name|iscsi_mac_upper
decl_stmt|;
comment|/* Upper 16 bits are always zeroes */
name|uint32_t
name|iscsi_mac_lower
decl_stmt|;
name|uint32_t
name|rdma_mac_upper
decl_stmt|;
comment|/* Upper 16 bits are always zeroes */
name|uint32_t
name|rdma_mac_lower
decl_stmt|;
name|uint32_t
name|serdes_config
decl_stmt|;
define|#
directive|define
name|PORT_HW_CFG_SERDES_TX_DRV_PRE_EMPHASIS_MASK
value|0x0000ffff
define|#
directive|define
name|PORT_HW_CFG_SERDES_TX_DRV_PRE_EMPHASIS_SHIFT
value|0
define|#
directive|define
name|PORT_HW_CFG_SERDES_RX_DRV_EQUALIZER_MASK
value|0xffff0000
define|#
directive|define
name|PORT_HW_CFG_SERDES_RX_DRV_EQUALIZER_SHIFT
value|16
name|uint32_t
name|reserved0
index|[
literal|16
index|]
decl_stmt|;
comment|/* 0x158 */
comment|/* 	 * 4 times 16 bits for all 4 lanes. In case external PHY is present 	 * (not direct mode), those values will not take effect on the 4 XGXS 	 * lanes. For some external PHYs (such as 8706 and 8726) the values 	 * will be used to configure the external PHY -- in those cases, not 	 * all 4 values are needed. 	 */
name|uint16_t
name|xgxs_config_rx
index|[
literal|4
index|]
decl_stmt|;
comment|/* 0x198 */
name|uint16_t
name|xgxs_config_tx
index|[
literal|4
index|]
decl_stmt|;
comment|/* 0x1A0 */
name|uint32_t
name|reserved1
index|[
literal|64
index|]
decl_stmt|;
comment|/* 0x1A8 */
name|uint32_t
name|lane_config
decl_stmt|;
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_MASK
value|0x0000ffff
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_SHIFT
value|0
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_TX_MASK
value|0x000000ff
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_TX_SHIFT
value|0
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_RX_MASK
value|0x0000ff00
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_RX_SHIFT
value|8
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_MASTER_MASK
value|0x0000c000
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_MASTER_SHIFT
value|14
comment|/* AN and forced */
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_01230123
value|0x00001b1b
comment|/* forced only */
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_01233210
value|0x00001be4
comment|/* forced only */
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_31203120
value|0x0000d8d8
comment|/* forced only */
define|#
directive|define
name|PORT_HW_CFG_LANE_SWAP_CFG_32103210
value|0x0000e4e4
name|uint32_t
name|external_phy_config
decl_stmt|;
define|#
directive|define
name|PORT_HW_CFG_SERDES_EXT_PHY_TYPE_MASK
value|0xff000000
define|#
directive|define
name|PORT_HW_CFG_SERDES_EXT_PHY_TYPE_SHIFT
value|24
define|#
directive|define
name|PORT_HW_CFG_SERDES_EXT_PHY_TYPE_DIRECT
value|0x00000000
define|#
directive|define
name|PORT_HW_CFG_SERDES_EXT_PHY_TYPE_BCM5482
value|0x01000000
define|#
directive|define
name|PORT_HW_CFG_SERDES_EXT_PHY_TYPE_NOT_CONN
value|0xff000000
define|#
directive|define
name|PORT_HW_CFG_SERDES_EXT_PHY_ADDR_MASK
value|0x00ff0000
define|#
directive|define
name|PORT_HW_CFG_SERDES_EXT_PHY_ADDR_SHIFT
value|16
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_MASK
value|0x0000ff00
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_SHIFT
value|8
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_DIRECT
value|0x00000000
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8071
value|0x00000100
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8072
value|0x00000200
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8073
value|0x00000300
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8705
value|0x00000400
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8706
value|0x00000500
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8726
value|0x00000600
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8481
value|0x00000700
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_SFX7101
value|0x00000800
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8727
value|0x00000900
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM8727_NOC
value|0x00000a00
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_BCM84823
value|0x00000b00
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_FAILURE
value|0x0000fd00
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_TYPE_NOT_CONN
value|0x0000ff00
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_ADDR_MASK
value|0x000000ff
define|#
directive|define
name|PORT_HW_CFG_XGXS_EXT_PHY_ADDR_SHIFT
value|0
name|uint32_t
name|speed_capability_mask
decl_stmt|;
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_MASK
value|0xffff0000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_SHIFT
value|16
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_10M_FULL
value|0x00010000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_10M_HALF
value|0x00020000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_100M_HALF
value|0x00040000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_100M_FULL
value|0x00080000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_1G
value|0x00100000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_2_5G
value|0x00200000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_10G
value|0x00400000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_12G
value|0x00800000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_12_5G
value|0x01000000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_13G
value|0x02000000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_15G
value|0x04000000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_16G
value|0x08000000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D0_RESERVED
value|0xf0000000
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_MASK
value|0x0000ffff
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_SHIFT
value|0
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_10M_FULL
value|0x00000001
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_10M_HALF
value|0x00000002
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_100M_HALF
value|0x00000004
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_100M_FULL
value|0x00000008
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_1G
value|0x00000010
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_2_5G
value|0x00000020
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_10G
value|0x00000040
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_12G
value|0x00000080
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_12_5G
value|0x00000100
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_13G
value|0x00000200
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_15G
value|0x00000400
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_16G
value|0x00000800
define|#
directive|define
name|PORT_HW_CFG_SPEED_CAPABILITY_D3_RESERVED
value|0x0000f000
comment|/* A place to hold the original MAC address as a backup. */
name|uint32_t
name|backup_mac_upper
decl_stmt|;
comment|/* 0x2B4 */
name|uint32_t
name|backup_mac_lower
decl_stmt|;
comment|/* 0x2B8 */
block|}
struct|;
end_struct

begin_comment
comment|/*  * Shared Feature configuration  */
end_comment

begin_struct
struct|struct
name|shared_feat_cfg
block|{
comment|/* NVRAM Offset */
name|uint32_t
name|config
decl_stmt|;
comment|/* 0x450 */
define|#
directive|define
name|SHARED_FEATURE_BMC_ECHO_MODE_EN
value|0x00000001
comment|/* 	 * Use the values from options 47 and 48 instead of the HW default 	 * values. 	 */
define|#
directive|define
name|SHARED_FEAT_CFG_OVERRIDE_PREEMPHASIS_CFG_DISABLED
value|0x00000000
define|#
directive|define
name|SHARED_FEAT_CFG_OVERRIDE_PREEMPHASIS_CFG_ENABLED
value|0x00000002
define|#
directive|define
name|SHARED_FEAT_CFG_NCSI_ID_METHOD_SPIO
value|0x00000000
define|#
directive|define
name|SHARED_FEAT_CFG_NCSI_ID_METHOD_NVRAM
value|0x00000008
define|#
directive|define
name|SHARED_FEAT_CFG_NCSI_ID_MASK
value|0x00000030
define|#
directive|define
name|SHARED_FEAT_CFG_NCSI_ID_SHIFT
value|4
comment|/* 	 * Override the OTP back to single function mode. When using GPIO, 	 * high means only SF, 0 is according to CLP configuration. 	 */
define|#
directive|define
name|SHARED_FEAT_CFG_FORCE_SF_MODE_MASK
value|0x00000700
define|#
directive|define
name|SHARED_FEAT_CFG_FORCE_SF_MODE_SHIFT
value|8
define|#
directive|define
name|SHARED_FEAT_CFG_FORCE_SF_MODE_MF_ALLOWED
value|0x00000000
define|#
directive|define
name|SHARED_FEAT_CFG_FORCE_SF_MODE_FORCED_SF
value|0x00000100
define|#
directive|define
name|SHARED_FEAT_CFG_FORCE_SF_MODE_SPIO4
value|0x00000200
comment|/* 	 * The interval in seconds between sending LLDP packets. Set to zero 	 * to disable the feature. 	 */
define|#
directive|define
name|SHARED_FEAT_CFG_LLDP_XMIT_INTERVAL_MASK
value|0x00FF0000
define|#
directive|define
name|SHARED_FEAT_CFG_LLDP_XMIT_INTERVAL_SHIFT
value|16
comment|/* The assigned device type ID for LLDP usage. */
define|#
directive|define
name|SHARED_FEAT_CFG_LLDP_DEVICE_TYPE_ID_MASK
value|0xFF000000
define|#
directive|define
name|SHARED_FEAT_CFG_LLDP_DEVICE_TYPE_ID_SHIFT
value|24
block|}
struct|;
end_struct

begin_comment
comment|/*  * Port Feature configuration  */
end_comment

begin_struct
struct|struct
name|port_feat_cfg
block|{
comment|/* port 0: 0x454  port 1: 0x4c8 */
name|uint32_t
name|config
decl_stmt|;
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_MASK
value|0x0000000f
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_SHIFT
value|0
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_DISABLED
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_64K
value|0x00000001
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_128K
value|0x00000002
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_256K
value|0x00000003
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_512K
value|0x00000004
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_1M
value|0x00000005
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_2M
value|0x00000006
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_4M
value|0x00000007
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_8M
value|0x00000008
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_16M
value|0x00000009
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_32M
value|0x0000000a
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_64M
value|0x0000000b
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_128M
value|0x0000000c
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_256M
value|0x0000000d
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_512M
value|0x0000000e
define|#
directive|define
name|PORT_FEATURE_BAR1_SIZE_1G
value|0x0000000f
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_MASK
value|0x000000f0
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_SHIFT
value|4
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_DISABLED
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_64K
value|0x00000010
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_128K
value|0x00000020
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_256K
value|0x00000030
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_512K
value|0x00000040
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_1M
value|0x00000050
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_2M
value|0x00000060
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_4M
value|0x00000070
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_8M
value|0x00000080
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_16M
value|0x00000090
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_32M
value|0x000000a0
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_64M
value|0x000000b0
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_128M
value|0x000000c0
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_256M
value|0x000000d0
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_512M
value|0x000000e0
define|#
directive|define
name|PORT_FEATURE_BAR2_SIZE_1G
value|0x000000f0
define|#
directive|define
name|PORT_FEATURE_EN_SIZE_MASK
value|0x07000000
define|#
directive|define
name|PORT_FEATURE_EN_SIZE_SHIFT
value|24
define|#
directive|define
name|PORT_FEATURE_WOL_ENABLED
value|0x01000000
define|#
directive|define
name|PORT_FEATURE_MBA_ENABLED
value|0x02000000
define|#
directive|define
name|PORT_FEATURE_MFW_ENABLED
value|0x04000000
comment|/* Advertise expansion ROM even if MBA is disabled. */
define|#
directive|define
name|PORT_FEAT_CFG_FORCE_EXP_ROM_ADV_DISABLED
value|0x00000000
define|#
directive|define
name|PORT_FEAT_CFG_FORCE_EXP_ROM_ADV_ENABLED
value|0x08000000
comment|/* Reserved bits: 28-29 */
comment|/* 	 * Check the optic vendor via i2c against a list of approved modules 	 * in a separate nvram image. 	 */
define|#
directive|define
name|PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_MASK
value|0xE0000000
define|#
directive|define
name|PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_SHIFT
value|29
define|#
directive|define
name|PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_NO_ENFORCEMENT
value|0x00000000
define|#
directive|define
name|PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_DISABLE_TX_LASER
value|0x20000000
define|#
directive|define
name|PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_WARNING_MSG
value|0x40000000
define|#
directive|define
name|PORT_FEAT_CFG_OPT_MDL_ENFRCMNT_POWER_DOWN
value|0x60000000
name|uint32_t
name|wol_config
decl_stmt|;
comment|/* Default is used when driver sets to "auto" mode. */
define|#
directive|define
name|PORT_FEATURE_WOL_DEFAULT_MASK
value|0x00000003
define|#
directive|define
name|PORT_FEATURE_WOL_DEFAULT_SHIFT
value|0
define|#
directive|define
name|PORT_FEATURE_WOL_DEFAULT_DISABLE
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_WOL_DEFAULT_MAGIC
value|0x00000001
define|#
directive|define
name|PORT_FEATURE_WOL_DEFAULT_ACPI
value|0x00000002
define|#
directive|define
name|PORT_FEATURE_WOL_DEFAULT_MAGIC_AND_ACPI
value|0x00000003
define|#
directive|define
name|PORT_FEATURE_WOL_RES_PAUSE_CAP
value|0x00000004
define|#
directive|define
name|PORT_FEATURE_WOL_RES_ASYM_PAUSE_CAP
value|0x00000008
define|#
directive|define
name|PORT_FEATURE_WOL_ACPI_UPON_MGMT
value|0x00000010
name|uint32_t
name|mba_config
decl_stmt|;
define|#
directive|define
name|PORT_FEATURE_MBA_BOOT_AGENT_TYPE_MASK
value|0x00000007
define|#
directive|define
name|PORT_FEATURE_MBA_BOOT_AGENT_TYPE_SHIFT
value|0
define|#
directive|define
name|PORT_FEATURE_MBA_BOOT_AGENT_TYPE_PXE
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_MBA_BOOT_AGENT_TYPE_RPL
value|0x00000001
define|#
directive|define
name|PORT_FEATURE_MBA_BOOT_AGENT_TYPE_BOOTP
value|0x00000002
define|#
directive|define
name|PORT_FEATURE_MBA_BOOT_AGENT_TYPE_ISCSIB
value|0x00000003
define|#
directive|define
name|PORT_FEATURE_MBA_BOOT_AGENT_TYPE_NONE
value|0x00000007
define|#
directive|define
name|PORT_FEATURE_MBA_RES_PAUSE_CAP
value|0x00000100
define|#
directive|define
name|PORT_FEATURE_MBA_RES_ASYM_PAUSE_CAP
value|0x00000200
define|#
directive|define
name|PORT_FEATURE_MBA_SETUP_PROMPT_ENABLE
value|0x00000400
define|#
directive|define
name|PORT_FEATURE_MBA_HOTKEY_CTRL_S
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_MBA_HOTKEY_CTRL_B
value|0x00000800
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_MASK
value|0x000ff000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_SHIFT
value|12
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_DISABLED
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_2K
value|0x00001000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_4K
value|0x00002000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_8K
value|0x00003000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_16K
value|0x00004000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_32K
value|0x00005000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_64K
value|0x00006000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_128K
value|0x00007000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_256K
value|0x00008000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_512K
value|0x00009000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_1M
value|0x0000a000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_2M
value|0x0000b000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_4M
value|0x0000c000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_8M
value|0x0000d000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_16M
value|0x0000e000
define|#
directive|define
name|PORT_FEATURE_MBA_EXP_ROM_SIZE_32M
value|0x0000f000
define|#
directive|define
name|PORT_FEATURE_MBA_MSG_TIMEOUT_MASK
value|0x00f00000
define|#
directive|define
name|PORT_FEATURE_MBA_MSG_TIMEOUT_SHIFT
value|20
define|#
directive|define
name|PORT_FEATURE_MBA_BIOS_BOOTSTRAP_MASK
value|0x03000000
define|#
directive|define
name|PORT_FEATURE_MBA_BIOS_BOOTSTRAP_SHIFT
value|24
define|#
directive|define
name|PORT_FEATURE_MBA_BIOS_BOOTSTRAP_AUTO
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_MBA_BIOS_BOOTSTRAP_BBS
value|0x01000000
define|#
directive|define
name|PORT_FEATURE_MBA_BIOS_BOOTSTRAP_INT18H
value|0x02000000
define|#
directive|define
name|PORT_FEATURE_MBA_BIOS_BOOTSTRAP_INT19H
value|0x03000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_MASK
value|0x3c000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_SHIFT
value|26
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_AUTO
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_10HD
value|0x04000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_10FD
value|0x08000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_100HD
value|0x0c000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_100FD
value|0x10000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_1GBPS
value|0x14000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_2_5GBPS
value|0x18000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_10GBPS_CX4
value|0x1c000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_10GBPS_KX4
value|0x20000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_10GBPS_KR
value|0x24000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_12GBPS
value|0x28000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_12_5GBPS
value|0x2c000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_13GBPS
value|0x30000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_15GBPS
value|0x34000000
define|#
directive|define
name|PORT_FEATURE_MBA_LINK_SPEED_16GBPS
value|0x38000000
name|uint32_t
name|bmc_config
decl_stmt|;
define|#
directive|define
name|PORT_FEATURE_BMC_LINK_OVERRIDE_DEFAULT
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_BMC_LINK_OVERRIDE_EN
value|0x00000001
name|uint32_t
name|mba_vlan_cfg
decl_stmt|;
define|#
directive|define
name|PORT_FEATURE_MBA_VLAN_TAG_MASK
value|0x0000ffff
define|#
directive|define
name|PORT_FEATURE_MBA_VLAN_TAG_SHIFT
value|0
define|#
directive|define
name|PORT_FEATURE_MBA_VLAN_EN
value|0x00010000
name|uint32_t
name|resource_cfg
decl_stmt|;
define|#
directive|define
name|PORT_FEATURE_RESOURCE_CFG_VALID
value|0x00000001
define|#
directive|define
name|PORT_FEATURE_RESOURCE_CFG_DIAG
value|0x00000002
define|#
directive|define
name|PORT_FEATURE_RESOURCE_CFG_L2
value|0x00000004
define|#
directive|define
name|PORT_FEATURE_RESOURCE_CFG_ISCSI
value|0x00000008
define|#
directive|define
name|PORT_FEATURE_RESOURCE_CFG_RDMA
value|0x00000010
name|uint32_t
name|smbus_config
decl_stmt|;
comment|/* Obsolete */
define|#
directive|define
name|PORT_FEATURE_SMBUS_EN
value|0x00000001
define|#
directive|define
name|PORT_FEATURE_SMBUS_ADDR_MASK
value|0x000000fe
define|#
directive|define
name|PORT_FEATURE_SMBUS_ADDR_SHIFT
value|1
name|uint32_t
name|reserved1
decl_stmt|;
name|uint32_t
name|link_config
decl_stmt|;
comment|/* Used as HW defaults for the driver */
define|#
directive|define
name|PORT_FEATURE_CONNECTED_SWITCH_MASK
value|0x03000000
define|#
directive|define
name|PORT_FEATURE_CONNECTED_SWITCH_SHIFT
value|24
comment|/* (forced) low speed switch (< 10G) */
define|#
directive|define
name|PORT_FEATURE_CON_SWITCH_1G_SWITCH
value|0x00000000
comment|/* (forced) high speed switch (>= 10G) */
define|#
directive|define
name|PORT_FEATURE_CON_SWITCH_10G_SWITCH
value|0x01000000
define|#
directive|define
name|PORT_FEATURE_CON_SWITCH_AUTO_DETECT
value|0x02000000
define|#
directive|define
name|PORT_FEATURE_CON_SWITCH_ONE_TIME_DETECT
value|0x03000000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_MASK
value|0x000f0000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_SHIFT
value|16
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_AUTO
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_10M_FULL
value|0x00010000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_10M_HALF
value|0x00020000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_100M_HALF
value|0x00030000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_100M_FULL
value|0x00040000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_1G
value|0x00050000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_2_5G
value|0x00060000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_10G_CX4
value|0x00070000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_10G_KX4
value|0x00080000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_10G_KR
value|0x00090000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_12G
value|0x000a0000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_12_5G
value|0x000b0000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_13G
value|0x000c0000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_15G
value|0x000d0000
define|#
directive|define
name|PORT_FEATURE_LINK_SPEED_16G
value|0x000e0000
define|#
directive|define
name|PORT_FEATURE_FLOW_CONTROL_MASK
value|0x00000700
define|#
directive|define
name|PORT_FEATURE_FLOW_CONTROL_SHIFT
value|8
define|#
directive|define
name|PORT_FEATURE_FLOW_CONTROL_AUTO
value|0x00000000
define|#
directive|define
name|PORT_FEATURE_FLOW_CONTROL_TX
value|0x00000100
define|#
directive|define
name|PORT_FEATURE_FLOW_CONTROL_RX
value|0x00000200
define|#
directive|define
name|PORT_FEATURE_FLOW_CONTROL_BOTH
value|0x00000300
define|#
directive|define
name|PORT_FEATURE_FLOW_CONTROL_NONE
value|0x00000400
comment|/* 	 * The default for MCP link configuration, 	 * uses the same defines as link_config. 	 */
name|uint32_t
name|mfw_wol_link_cfg
decl_stmt|;
name|uint32_t
name|reserved
index|[
literal|19
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Device Information  */
end_comment

begin_struct
struct|struct
name|shm_dev_info
block|{
comment|/* size */
name|uint32_t
name|bc_rev
decl_stmt|;
comment|/* 8 bits each: major, minor, build */
comment|/* 4 */
name|struct
name|shared_hw_cfg
name|shared_hw_config
decl_stmt|;
comment|/* 40 */
name|struct
name|port_hw_cfg
name|port_hw_config
index|[
name|PORT_MAX
index|]
decl_stmt|;
comment|/* 400*2=800 */
name|struct
name|shared_feat_cfg
name|shared_feature_config
decl_stmt|;
comment|/* 4 */
name|struct
name|port_feat_cfg
name|port_feature_config
index|[
name|PORT_MAX
index|]
decl_stmt|;
comment|/* 116*2=232 */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|FUNC_0
value|0
end_define

begin_define
define|#
directive|define
name|FUNC_1
value|1
end_define

begin_define
define|#
directive|define
name|FUNC_2
value|2
end_define

begin_define
define|#
directive|define
name|FUNC_3
value|3
end_define

begin_define
define|#
directive|define
name|FUNC_4
value|4
end_define

begin_define
define|#
directive|define
name|FUNC_5
value|5
end_define

begin_define
define|#
directive|define
name|FUNC_6
value|6
end_define

begin_define
define|#
directive|define
name|FUNC_7
value|7
end_define

begin_define
define|#
directive|define
name|E1_FUNC_MAX
value|2
end_define

begin_define
define|#
directive|define
name|E1H_FUNC_MAX
value|8
end_define

begin_define
define|#
directive|define
name|VN_0
value|0
end_define

begin_define
define|#
directive|define
name|VN_1
value|1
end_define

begin_define
define|#
directive|define
name|VN_2
value|2
end_define

begin_define
define|#
directive|define
name|VN_3
value|3
end_define

begin_define
define|#
directive|define
name|E1VN_MAX
value|1
end_define

begin_define
define|#
directive|define
name|E1HVN_MAX
value|4
end_define

begin_comment
comment|/*  * This value (in milliseconds) determines the frequency of the driver  * issuing the PULSE message code.  The firmware monitors this periodic  * pulse to determine when to switch to an OS-absent mode.  */
end_comment

begin_define
define|#
directive|define
name|DRV_PULSE_PERIOD_MS
value|250
end_define

begin_comment
comment|/*  * This value (in milliseconds) determines how long the driver should  * wait for an acknowledgement from the firmware before timing out.  Once  * the firmware has timed out, the driver will assume there is no firmware  * running and there won't be any firmware-driver synchronization during a  * driver reset.  */
end_comment

begin_define
define|#
directive|define
name|FW_ACK_TIME_OUT_MS
value|5000
end_define

begin_define
define|#
directive|define
name|FW_ACK_POLL_TIME_MS
value|1
end_define

begin_define
define|#
directive|define
name|FW_ACK_NUM_OF_POLL
value|(FW_ACK_TIME_OUT_MS/FW_ACK_POLL_TIME_MS)
end_define

begin_comment
comment|/* LED Blink rate that will achieve ~15.9Hz. */
end_comment

begin_define
define|#
directive|define
name|LED_BLINK_RATE_VAL
value|480
end_define

begin_comment
comment|/*  * Driver<-> FW Mailbox  */
end_comment

begin_struct
struct|struct
name|drv_port_mb
block|{
name|uint32_t
name|link_status
decl_stmt|;
comment|/* Driver should update this field on any link change event. */
define|#
directive|define
name|LINK_STATUS_LINK_FLAG_MASK
value|0x00000001
define|#
directive|define
name|LINK_STATUS_LINK_UP
value|0x00000001
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_MASK
value|0x0000001E
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_AN_NOT_COMPLETE
value|(0<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_10THD
value|(1<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_10TFD
value|(2<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_100TXHD
value|(3<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_100T4
value|(4<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_100TXFD
value|(5<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_1000THD
value|(6<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_1000TFD
value|(7<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_1000XFD
value|(7<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_2500THD
value|(8<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_2500TFD
value|(9<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_2500XFD
value|(9<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_10GTFD
value|(10<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_10GXFD
value|(10<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_12GTFD
value|(11<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_12GXFD
value|(11<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_12_5GTFD
value|(12<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_12_5GXFD
value|(12<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_13GTFD
value|(13<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_13GXFD
value|(13<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_15GTFD
value|(14<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_15GXFD
value|(14<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_16GTFD
value|(15<< 1)
define|#
directive|define
name|LINK_STATUS_SPEED_AND_DUPLEX_16GXFD
value|(15<< 1)
define|#
directive|define
name|LINK_STATUS_AUTO_NEGOTIATE_FLAG_MASK
value|0x00000020
define|#
directive|define
name|LINK_STATUS_AUTO_NEGOTIATE_ENABLED
value|0x00000020
define|#
directive|define
name|LINK_STATUS_AUTO_NEGOTIATE_COMPLETE
value|0x00000040
define|#
directive|define
name|LINK_STATUS_PARALLEL_DETECTION_FLAG_MASK
value|0x00000080
define|#
directive|define
name|LINK_STATUS_PARALLEL_DETECTION_USED
value|0x00000080
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_1000TFD_CAPABLE
value|0x00000200
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_1000THD_CAPABLE
value|0x00000400
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_100T4_CAPABLE
value|0x00000800
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_100TXFD_CAPABLE
value|0x00001000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_100TXHD_CAPABLE
value|0x00002000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_10TFD_CAPABLE
value|0x00004000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_10THD_CAPABLE
value|0x00008000
define|#
directive|define
name|LINK_STATUS_TX_FLOW_CONTROL_FLAG_MASK
value|0x00010000
define|#
directive|define
name|LINK_STATUS_TX_FLOW_CONTROL_ENABLED
value|0x00010000
define|#
directive|define
name|LINK_STATUS_RX_FLOW_CONTROL_FLAG_MASK
value|0x00020000
define|#
directive|define
name|LINK_STATUS_RX_FLOW_CONTROL_ENABLED
value|0x00020000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_FLOW_CONTROL_MASK
value|0x000C0000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_NOT_PAUSE_CAPABLE
value|(0<< 18)
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_SYMMETRIC_PAUSE
value|(1<< 18)
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_ASYMMETRIC_PAUSE
value|(2<< 18)
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_BOTH_PAUSE
value|(3<< 18)
define|#
directive|define
name|LINK_STATUS_SERDES_LINK
value|0x00100000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_2500XFD_CAPABLE
value|0x00200000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_2500XHD_CAPABLE
value|0x00400000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_10GXFD_CAPABLE
value|0x00800000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_12GXFD_CAPABLE
value|0x01000000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_12_5GXFD_CAPABLE
value|0x02000000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_13GXFD_CAPABLE
value|0x04000000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_15GXFD_CAPABLE
value|0x08000000
define|#
directive|define
name|LINK_STATUS_LINK_PARTNER_16GXFD_CAPABLE
value|0x10000000
name|uint32_t
name|port_stx
decl_stmt|;
name|uint32_t
name|stat_nig_timer
decl_stmt|;
comment|/* MCP firmware does not use this field. */
name|uint32_t
name|ext_phy_fw_version
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drv_func_mb
block|{
name|uint32_t
name|drv_mb_header
decl_stmt|;
define|#
directive|define
name|DRV_MSG_CODE_MASK
value|0xffff0000
define|#
directive|define
name|DRV_MSG_CODE_LOAD_REQ
value|0x10000000
define|#
directive|define
name|DRV_MSG_CODE_LOAD_DONE
value|0x11000000
define|#
directive|define
name|DRV_MSG_CODE_UNLOAD_REQ_WOL_EN
value|0x20000000
define|#
directive|define
name|DRV_MSG_CODE_UNLOAD_REQ_WOL_DIS
value|0x20010000
define|#
directive|define
name|DRV_MSG_CODE_UNLOAD_REQ_WOL_MCP
value|0x20020000
define|#
directive|define
name|DRV_MSG_CODE_UNLOAD_DONE
value|0x21000000
define|#
directive|define
name|DRV_MSG_CODE_DCC_OK
value|0x30000000
define|#
directive|define
name|DRV_MSG_CODE_DCC_FAILURE
value|0x31000000
define|#
directive|define
name|DRV_MSG_CODE_DIAG_ENTER_REQ
value|0x50000000
define|#
directive|define
name|DRV_MSG_CODE_DIAG_EXIT_REQ
value|0x60000000
define|#
directive|define
name|DRV_MSG_CODE_VALIDATE_KEY
value|0x70000000
define|#
directive|define
name|DRV_MSG_CODE_GET_CURR_KEY
value|0x80000000
define|#
directive|define
name|DRV_MSG_CODE_GET_UPGRADE_KEY
value|0x81000000
define|#
directive|define
name|DRV_MSG_CODE_GET_MANUF_KEY
value|0x82000000
define|#
directive|define
name|DRV_MSG_CODE_LOAD_L2B_PRAM
value|0x90000000
comment|/* 	 * The optic module verification commands requris bootcode 	 * v5.0.6 or later. 	 */
define|#
directive|define
name|DRV_MSG_CODE_VRFY_OPT_MDL
value|0xa0000000
define|#
directive|define
name|REQ_BC_VER_4_VRFY_OPT_MDL
value|0x00050006
define|#
directive|define
name|BIOS_MSG_CODE_LIC_CHALLENGE
value|0xff010000
define|#
directive|define
name|BIOS_MSG_CODE_LIC_RESPONSE
value|0xff020000
define|#
directive|define
name|BIOS_MSG_CODE_VIRT_MAC_PRIM
value|0xff030000
define|#
directive|define
name|BIOS_MSG_CODE_VIRT_MAC_ISCSI
value|0xff040000
define|#
directive|define
name|DRV_MSG_SEQ_NUMBER_MASK
value|0x0000ffff
name|uint32_t
name|drv_mb_param
decl_stmt|;
name|uint32_t
name|fw_mb_header
decl_stmt|;
define|#
directive|define
name|FW_MSG_CODE_MASK
value|0xffff0000
define|#
directive|define
name|FW_MSG_CODE_DRV_LOAD_COMMON
value|0x10100000
define|#
directive|define
name|FW_MSG_CODE_DRV_LOAD_PORT
value|0x10110000
define|#
directive|define
name|FW_MSG_CODE_DRV_LOAD_FUNCTION
value|0x10120000
define|#
directive|define
name|FW_MSG_CODE_DRV_LOAD_REFUSED
value|0x10200000
define|#
directive|define
name|FW_MSG_CODE_DRV_LOAD_DONE
value|0x11100000
define|#
directive|define
name|FW_MSG_CODE_DRV_UNLOAD_COMMON
value|0x20100000
define|#
directive|define
name|FW_MSG_CODE_DRV_UNLOAD_PORT
value|0x20110000
define|#
directive|define
name|FW_MSG_CODE_DRV_UNLOAD_FUNCTION
value|0x20120000
define|#
directive|define
name|FW_MSG_CODE_DRV_UNLOAD_DONE
value|0x21100000
define|#
directive|define
name|FW_MSG_CODE_DCC_DONE
value|0x30100000
define|#
directive|define
name|FW_MSG_CODE_DIAG_ENTER_DONE
value|0x50100000
define|#
directive|define
name|FW_MSG_CODE_DIAG_REFUSE
value|0x50200000
define|#
directive|define
name|FW_MSG_CODE_DIAG_EXIT_DONE
value|0x60100000
define|#
directive|define
name|FW_MSG_CODE_VALIDATE_KEY_SUCCESS
value|0x70100000
define|#
directive|define
name|FW_MSG_CODE_VALIDATE_KEY_FAILURE
value|0x70200000
define|#
directive|define
name|FW_MSG_CODE_GET_KEY_DONE
value|0x80100000
define|#
directive|define
name|FW_MSG_CODE_NO_KEY
value|0x80f00000
define|#
directive|define
name|FW_MSG_CODE_LIC_INFO_NOT_READY
value|0x80f80000
define|#
directive|define
name|FW_MSG_CODE_L2B_PRAM_LOADED
value|0x90100000
define|#
directive|define
name|FW_MSG_CODE_L2B_PRAM_T_LOAD_FAILURE
value|0x90210000
define|#
directive|define
name|FW_MSG_CODE_L2B_PRAM_C_LOAD_FAILURE
value|0x90220000
define|#
directive|define
name|FW_MSG_CODE_L2B_PRAM_X_LOAD_FAILURE
value|0x90230000
define|#
directive|define
name|FW_MSG_CODE_L2B_PRAM_U_LOAD_FAILURE
value|0x90240000
define|#
directive|define
name|FW_MSG_CODE_VRFY_OPT_MDL_SUCCESS
value|0xa0100000
define|#
directive|define
name|FW_MSG_CODE_VRFY_OPT_MDL_INVLD_IMG
value|0xa0200000
define|#
directive|define
name|FW_MSG_CODE_VRFY_OPT_MDL_UNAPPROVED
value|0xa0300000
define|#
directive|define
name|FW_MSG_CODE_LIC_CHALLENGE
value|0xff010000
define|#
directive|define
name|FW_MSG_CODE_LIC_RESPONSE
value|0xff020000
define|#
directive|define
name|FW_MSG_CODE_VIRT_MAC_PRIM
value|0xff030000
define|#
directive|define
name|FW_MSG_CODE_VIRT_MAC_ISCSI
value|0xff040000
define|#
directive|define
name|FW_MSG_SEQ_NUMBER_MASK
value|0x0000ffff
name|uint32_t
name|fw_mb_param
decl_stmt|;
name|uint32_t
name|drv_pulse_mb
decl_stmt|;
define|#
directive|define
name|DRV_PULSE_SEQ_MASK
value|0x00007fff
define|#
directive|define
name|DRV_PULSE_SYSTEM_TIME_MASK
value|0xffff0000
comment|/* 	 * The system time is in the format of 	 * (year-2001)*12*32 + month*32 + day. 	 */
define|#
directive|define
name|DRV_PULSE_ALWAYS_ALIVE
value|0x00008000
comment|/* 	 * Indicate to the firmware not to go into the 	 * OS-absent when it is not getting driver pulse. 	 * This is used for debugging as well for PXE(MBA). 	 */
name|uint32_t
name|mcp_pulse_mb
decl_stmt|;
define|#
directive|define
name|MCP_PULSE_SEQ_MASK
value|0x00007fff
define|#
directive|define
name|MCP_PULSE_ALWAYS_ALIVE
value|0x00008000
comment|/* 	 * Indicates to the driver not to assert due to lack 	 * of MCP response. 	 */
define|#
directive|define
name|MCP_EVENT_MASK
value|0xffff0000
define|#
directive|define
name|MCP_EVENT_OTHER_DRIVER_RESET_REQ
value|0x00010000
name|uint32_t
name|iscsi_boot_signature
decl_stmt|;
name|uint32_t
name|iscsi_boot_block_offset
decl_stmt|;
name|uint32_t
name|drv_status
decl_stmt|;
define|#
directive|define
name|DRV_STATUS_PMF
value|0x00000001
define|#
directive|define
name|DRV_STATUS_DCC_EVENT_MASK
value|0x0000ff00
define|#
directive|define
name|DRV_STATUS_DCC_DISABLE_ENABLE_PF
value|0x00000100
define|#
directive|define
name|DRV_STATUS_DCC_BANDWIDTH_ALLOCATION
value|0x00000200
define|#
directive|define
name|DRV_STATUS_DCC_CHANGE_MAC_ADDRESS
value|0x00000400
define|#
directive|define
name|DRV_STATUS_DCC_RESERVED1
value|0x00000800
define|#
directive|define
name|DRV_STATUS_DCC_SET_PROTOCOL
value|0x00001000
define|#
directive|define
name|DRV_STATUS_DCC_SET_PRIORITY
value|0x00002000
name|uint32_t
name|virt_mac_upper
decl_stmt|;
define|#
directive|define
name|VIRT_MAC_SIGN_MASK
value|0xffff0000
define|#
directive|define
name|VIRT_MAC_SIGNATURE
value|0x564d0000
name|uint32_t
name|virt_mac_lower
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Management firmware state  */
end_comment

begin_comment
comment|/* Allocate 440 bytes for management firmware. */
end_comment

begin_define
define|#
directive|define
name|MGMTFW_STATE_WORD_SIZE
value|110
end_define

begin_struct
struct|struct
name|mgmtfw_state
block|{
name|uint32_t
name|opaque
index|[
name|MGMTFW_STATE_WORD_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Multi-Function configuration  */
end_comment

begin_struct
struct|struct
name|shared_mf_cfg
block|{
name|uint32_t
name|clp_mb
decl_stmt|;
define|#
directive|define
name|SHARED_MF_CLP_SET_DEFAULT
value|0x00000000
comment|/* set by CLP */
define|#
directive|define
name|SHARED_MF_CLP_EXIT
value|0x00000001
comment|/* set by MCP */
define|#
directive|define
name|SHARED_MF_CLP_EXIT_DONE
value|0x00010000
block|}
struct|;
end_struct

begin_struct
struct|struct
name|port_mf_cfg
block|{
name|uint32_t
name|dynamic_cfg
decl_stmt|;
comment|/* device control channel */
define|#
directive|define
name|PORT_MF_CFG_E1HOV_TAG_MASK
value|0x0000ffff
define|#
directive|define
name|PORT_MF_CFG_E1HOV_TAG_SHIFT
value|0
define|#
directive|define
name|PORT_MF_CFG_E1HOV_TAG_DEFAULT
value|PORT_MF_CFG_E1HOV_TAG_MASK
name|uint32_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|func_mf_cfg
block|{
name|uint32_t
name|config
decl_stmt|;
comment|/* E/R/I/D */
comment|/* function 0 of each port cannot be hidden. */
define|#
directive|define
name|FUNC_MF_CFG_FUNC_HIDE
value|0x00000001
define|#
directive|define
name|FUNC_MF_CFG_PROTOCOL_MASK
value|0x00000007
define|#
directive|define
name|FUNC_MF_CFG_PROTOCOL_ETHERNET
value|0x00000002
define|#
directive|define
name|FUNC_MF_CFG_PROTOCOL_ETHERNET_WITH_RDMA
value|0x00000004
define|#
directive|define
name|FUNC_MF_CFG_PROTOCOL_ISCSI
value|0x00000006
define|#
directive|define
name|FUNC_MF_CFG_PROTOCOL_DEFAULT
define|\
value|FUNC_MF_CFG_PROTOCOL_ETHERNET_WITH_RDMA
define|#
directive|define
name|FUNC_MF_CFG_FUNC_DISABLED
value|0x00000008
comment|/* PRI */
comment|/* 0 - low priority, 3 - high priority */
define|#
directive|define
name|FUNC_MF_CFG_TRANSMIT_PRIORITY_MASK
value|0x00000300
define|#
directive|define
name|FUNC_MF_CFG_TRANSMIT_PRIORITY_SHIFT
value|8
define|#
directive|define
name|FUNC_MF_CFG_TRANSMIT_PRIORITY_DEFAULT
value|0x00000000
comment|/* MINBW, MAXBW */
comment|/* value range - 0..100, increments in 100Mbps */
define|#
directive|define
name|FUNC_MF_CFG_MIN_BW_MASK
value|0x00ff0000
define|#
directive|define
name|FUNC_MF_CFG_MIN_BW_SHIFT
value|16
define|#
directive|define
name|FUNC_MF_CFG_MIN_BW_DEFAULT
value|0x00000000
define|#
directive|define
name|FUNC_MF_CFG_MAX_BW_MASK
value|0xff000000
define|#
directive|define
name|FUNC_MF_CFG_MAX_BW_SHIFT
value|24
define|#
directive|define
name|FUNC_MF_CFG_MAX_BW_DEFAULT
value|0x64000000
name|uint32_t
name|mac_upper
decl_stmt|;
comment|/* MAC */
define|#
directive|define
name|FUNC_MF_CFG_UPPERMAC_MASK
value|0x0000ffff
define|#
directive|define
name|FUNC_MF_CFG_UPPERMAC_SHIFT
value|0
define|#
directive|define
name|FUNC_MF_CFG_UPPERMAC_DEFAULT
value|FUNC_MF_CFG_UPPERMAC_MASK
name|uint32_t
name|mac_lower
decl_stmt|;
define|#
directive|define
name|FUNC_MF_CFG_LOWERMAC_DEFAULT
value|0xffffffff
name|uint32_t
name|e1hov_tag
decl_stmt|;
comment|/* VNI */
define|#
directive|define
name|FUNC_MF_CFG_E1HOV_TAG_MASK
value|0x0000ffff
define|#
directive|define
name|FUNC_MF_CFG_E1HOV_TAG_SHIFT
value|0
define|#
directive|define
name|FUNC_MF_CFG_E1HOV_TAG_DEFAULT
value|FUNC_MF_CFG_E1HOV_TAG_MASK
name|uint32_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mf_cfg
block|{
name|struct
name|shared_mf_cfg
name|shared_mf_config
decl_stmt|;
name|struct
name|port_mf_cfg
name|port_mf_config
index|[
name|PORT_MAX
index|]
decl_stmt|;
name|struct
name|func_mf_cfg
name|func_mf_config
index|[
name|E1H_FUNC_MAX
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Shared Memory Region  */
end_comment

begin_struct
struct|struct
name|shmem_region
block|{
comment|/*   SharedMem Offset (size) */
name|uint32_t
name|validity_map
index|[
name|PORT_MAX
index|]
decl_stmt|;
comment|/* 0x0 (4*2 = 0x8) */
define|#
directive|define
name|SHR_MEM_FORMAT_REV_ID
value|('A'<< 24)
define|#
directive|define
name|SHR_MEM_FORMAT_REV_MASK
value|0xff000000
comment|/* validity bits */
define|#
directive|define
name|SHR_MEM_VALIDITY_PCI_CFG
value|0x00100000
define|#
directive|define
name|SHR_MEM_VALIDITY_MB
value|0x00200000
define|#
directive|define
name|SHR_MEM_VALIDITY_DEV_INFO
value|0x00400000
define|#
directive|define
name|SHR_MEM_VALIDITY_RESERVED
value|0x00000007
comment|/* One licensing bit should be set */
define|#
directive|define
name|SHR_MEM_VALIDITY_LIC_KEY_IN_EFFECT_MASK
value|0x00000038
define|#
directive|define
name|SHR_MEM_VALIDITY_LIC_MANUF_KEY_IN_EFFECT
value|0x00000008
define|#
directive|define
name|SHR_MEM_VALIDITY_LIC_UPGRADE_KEY_IN_EFFECT
value|0x00000010
define|#
directive|define
name|SHR_MEM_VALIDITY_LIC_NO_KEY_IN_EFFECT
value|0x00000020
comment|/* Active MFW */
define|#
directive|define
name|SHR_MEM_VALIDITY_ACTIVE_MFW_UNKNOWN
value|0x00000000
define|#
directive|define
name|SHR_MEM_VALIDITY_ACTIVE_MFW_IPMI
value|0x00000040
define|#
directive|define
name|SHR_MEM_VALIDITY_ACTIVE_MFW_UMP
value|0x00000080
define|#
directive|define
name|SHR_MEM_VALIDITY_ACTIVE_MFW_NCSI
value|0x000000c0
define|#
directive|define
name|SHR_MEM_VALIDITY_ACTIVE_MFW_NONE
value|0x000001c0
define|#
directive|define
name|SHR_MEM_VALIDITY_ACTIVE_MFW_MASK
value|0x000001c0
name|struct
name|shm_dev_info
name|dev_info
decl_stmt|;
comment|/* 0x8     (0x438) */
name|struct
name|license_key
name|drv_lic_key
index|[
name|PORT_MAX
index|]
decl_stmt|;
comment|/* 0x440 (52*2=0x68) */
comment|/* FW information (for internal FW use) */
name|uint32_t
name|fw_info_fio_offset
decl_stmt|;
comment|/* 0x4a8       (0x4) */
name|struct
name|mgmtfw_state
name|mgmtfw_state
decl_stmt|;
comment|/* 0x4ac     (0x1b8) */
name|struct
name|drv_port_mb
name|port_mb
index|[
name|PORT_MAX
index|]
decl_stmt|;
comment|/* 0x664 (16*2=0x20) */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|b710
argument_list|)
comment|/* BXE_UPSTREAM */
name|struct
name|drv_func_mb
name|func_mb
index|[
name|E1H_FUNC_MAX
index|]
decl_stmt|;
else|#
directive|else
name|struct
name|drv_func_mb
name|func_mb
index|[
name|E1_FUNC_MAX
index|]
decl_stmt|;
comment|/* 0x684 (44*2=0x58) */
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|b710
argument_list|)
comment|/* BXE_UPSTREAM */
name|struct
name|mf_cfg
name|mf_cfg
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/* 0x6dc */
end_comment

begin_struct
struct|struct
name|shmem2_region
block|{
name|uint32_t
name|size
decl_stmt|;
name|uint32_t
name|dcc_support
decl_stmt|;
define|#
directive|define
name|SHMEM_DCC_SUPPORT_NONE
value|0x00000000
define|#
directive|define
name|SHMEM_DCC_SUPPORT_DISABLE_ENABLE_PF_TLV
value|0x00000001
define|#
directive|define
name|SHMEM_DCC_SUPPORT_BANDWIDTH_ALLOCATION_TLV
value|0x00000004
define|#
directive|define
name|SHMEM_DCC_SUPPORT_CHANGE_MAC_ADDRESS_TLV
value|0x00000008
define|#
directive|define
name|SHMEM_DCC_SUPPORT_SET_PROTOCOL_TLV
value|0x00000040
define|#
directive|define
name|SHMEM_DCC_SUPPORT_SET_PRIORITY_TLV
value|0x00000080
define|#
directive|define
name|SHMEM_DCC_SUPPORT_DEFAULT
value|SHMEM_DCC_SUPPORT_NONE
block|}
struct|;
end_struct

begin_struct
struct|struct
name|emac_stats
block|{
name|uint32_t
name|rx_stat_ifhcinoctets
decl_stmt|;
name|uint32_t
name|rx_stat_ifhcinbadoctets
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatsfragments
decl_stmt|;
name|uint32_t
name|rx_stat_ifhcinucastpkts
decl_stmt|;
name|uint32_t
name|rx_stat_ifhcinmulticastpkts
decl_stmt|;
name|uint32_t
name|rx_stat_ifhcinbroadcastpkts
decl_stmt|;
name|uint32_t
name|rx_stat_dot3statsfcserrors
decl_stmt|;
name|uint32_t
name|rx_stat_dot3statsalignmenterrors
decl_stmt|;
name|uint32_t
name|rx_stat_dot3statscarriersenseerrors
decl_stmt|;
name|uint32_t
name|rx_stat_xonpauseframesreceived
decl_stmt|;
name|uint32_t
name|rx_stat_xoffpauseframesreceived
decl_stmt|;
name|uint32_t
name|rx_stat_maccontrolframesreceived
decl_stmt|;
name|uint32_t
name|rx_stat_xoffstateentered
decl_stmt|;
name|uint32_t
name|rx_stat_dot3statsframestoolong
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatsjabbers
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatsundersizepkts
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatspkts64octets
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatspkts65octetsto127octets
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatspkts128octetsto255octets
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatspkts256octetsto511octets
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatspkts512octetsto1023octets
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatspkts1024octetsto1522octets
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatspktsover1522octets
decl_stmt|;
name|uint32_t
name|rx_stat_falsecarriererrors
decl_stmt|;
name|uint32_t
name|tx_stat_ifhcoutoctets
decl_stmt|;
name|uint32_t
name|tx_stat_ifhcoutbadoctets
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatscollisions
decl_stmt|;
name|uint32_t
name|tx_stat_outxonsent
decl_stmt|;
name|uint32_t
name|tx_stat_outxoffsent
decl_stmt|;
name|uint32_t
name|tx_stat_flowcontroldone
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statssinglecollisionframes
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statsmultiplecollisionframes
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statsdeferredtransmissions
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statsexcessivecollisions
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statslatecollisions
decl_stmt|;
name|uint32_t
name|tx_stat_ifhcoutucastpkts
decl_stmt|;
name|uint32_t
name|tx_stat_ifhcoutmulticastpkts
decl_stmt|;
name|uint32_t
name|tx_stat_ifhcoutbroadcastpkts
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts64octets
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts65octetsto127octets
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts128octetsto255octets
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts256octetsto511octets
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts512octetsto1023octets
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts1024octetsto1522octets
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspktsover1522octets
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statsinternalmactransmiterrors
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bmac_stats
block|{
name|uint32_t
name|tx_stat_gtpkt_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtpkt_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gtxpf_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtxpf_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gtfcs_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtfcs_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gtmca_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtmca_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gtbca_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtbca_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gtfrg_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtfrg_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gtovr_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtovr_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt64_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt64_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt127_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt127_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt255_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt255_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt511_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt511_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt1023_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt1023_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt1518_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt1518_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt2047_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt2047_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt4095_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt4095_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt9216_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt9216_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gt16383_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gt16383_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gtmax_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtmax_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gtufl_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtufl_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gterr_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gterr_hi
decl_stmt|;
name|uint32_t
name|tx_stat_gtbyt_lo
decl_stmt|;
name|uint32_t
name|tx_stat_gtbyt_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr64_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr64_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr127_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr127_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr255_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr255_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr511_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr511_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr1023_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr1023_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr1518_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr1518_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr2047_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr2047_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr4095_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr4095_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr9216_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr9216_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gr16383_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gr16383_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grmax_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grmax_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grpkt_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grpkt_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grfcs_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grfcs_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grmca_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grmca_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grbca_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grbca_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grxcf_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grxcf_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grxpf_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grxpf_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grxuo_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grxuo_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grjbr_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grjbr_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grovr_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grovr_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grflr_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grflr_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grmeg_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grmeg_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grmeb_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grmeb_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grbyt_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grbyt_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grund_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grund_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grfrg_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grfrg_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grerb_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grerb_hi
decl_stmt|;
name|uint32_t
name|rx_stat_grfre_lo
decl_stmt|;
name|uint32_t
name|rx_stat_grfre_hi
decl_stmt|;
name|uint32_t
name|rx_stat_gripj_lo
decl_stmt|;
name|uint32_t
name|rx_stat_gripj_hi
decl_stmt|;
block|}
struct|;
end_struct

begin_union
union|union
name|mac_stats
block|{
name|struct
name|emac_stats
name|emac_stats
decl_stmt|;
name|struct
name|bmac_stats
name|bmac_stats
decl_stmt|;
block|}
union|;
end_union

begin_struct
struct|struct
name|mac_stx
block|{
comment|/* in_bad_octets */
name|uint32_t
name|rx_stat_ifhcinbadoctets_hi
decl_stmt|;
name|uint32_t
name|rx_stat_ifhcinbadoctets_lo
decl_stmt|;
comment|/* out_bad_octets */
name|uint32_t
name|tx_stat_ifhcoutbadoctets_hi
decl_stmt|;
name|uint32_t
name|tx_stat_ifhcoutbadoctets_lo
decl_stmt|;
comment|/* crc_receive_errors */
name|uint32_t
name|rx_stat_dot3statsfcserrors_hi
decl_stmt|;
name|uint32_t
name|rx_stat_dot3statsfcserrors_lo
decl_stmt|;
comment|/* alignment_errors */
name|uint32_t
name|rx_stat_dot3statsalignmenterrors_hi
decl_stmt|;
name|uint32_t
name|rx_stat_dot3statsalignmenterrors_lo
decl_stmt|;
comment|/* carrier_sense_errors */
name|uint32_t
name|rx_stat_dot3statscarriersenseerrors_hi
decl_stmt|;
name|uint32_t
name|rx_stat_dot3statscarriersenseerrors_lo
decl_stmt|;
comment|/* false_carrier_detections */
name|uint32_t
name|rx_stat_falsecarriererrors_hi
decl_stmt|;
name|uint32_t
name|rx_stat_falsecarriererrors_lo
decl_stmt|;
comment|/* runt_packets_received */
name|uint32_t
name|rx_stat_etherstatsundersizepkts_hi
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatsundersizepkts_lo
decl_stmt|;
comment|/* jabber_packets_received */
name|uint32_t
name|rx_stat_dot3statsframestoolong_hi
decl_stmt|;
name|uint32_t
name|rx_stat_dot3statsframestoolong_lo
decl_stmt|;
comment|/* error_runt_packets_received */
name|uint32_t
name|rx_stat_etherstatsfragments_hi
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatsfragments_lo
decl_stmt|;
comment|/* error_jabber_packets_received */
name|uint32_t
name|rx_stat_etherstatsjabbers_hi
decl_stmt|;
name|uint32_t
name|rx_stat_etherstatsjabbers_lo
decl_stmt|;
comment|/* control_frames_received */
name|uint32_t
name|rx_stat_maccontrolframesreceived_hi
decl_stmt|;
name|uint32_t
name|rx_stat_maccontrolframesreceived_lo
decl_stmt|;
name|uint32_t
name|rx_stat_bmac_xpf_hi
decl_stmt|;
name|uint32_t
name|rx_stat_bmac_xpf_lo
decl_stmt|;
name|uint32_t
name|rx_stat_bmac_xcf_hi
decl_stmt|;
name|uint32_t
name|rx_stat_bmac_xcf_lo
decl_stmt|;
comment|/* xoff_state_entered */
name|uint32_t
name|rx_stat_xoffstateentered_hi
decl_stmt|;
name|uint32_t
name|rx_stat_xoffstateentered_lo
decl_stmt|;
comment|/* pause_xon_frames_received */
name|uint32_t
name|rx_stat_xonpauseframesreceived_hi
decl_stmt|;
name|uint32_t
name|rx_stat_xonpauseframesreceived_lo
decl_stmt|;
comment|/* pause_xoff_frames_received */
name|uint32_t
name|rx_stat_xoffpauseframesreceived_hi
decl_stmt|;
name|uint32_t
name|rx_stat_xoffpauseframesreceived_lo
decl_stmt|;
comment|/* pause_xon_frames_transmitted */
name|uint32_t
name|tx_stat_outxonsent_hi
decl_stmt|;
name|uint32_t
name|tx_stat_outxonsent_lo
decl_stmt|;
comment|/* pause_xoff_frames_transmitted */
name|uint32_t
name|tx_stat_outxoffsent_hi
decl_stmt|;
name|uint32_t
name|tx_stat_outxoffsent_lo
decl_stmt|;
comment|/* flow_control_done */
name|uint32_t
name|tx_stat_flowcontroldone_hi
decl_stmt|;
name|uint32_t
name|tx_stat_flowcontroldone_lo
decl_stmt|;
comment|/* ether_stats_collisions */
name|uint32_t
name|tx_stat_etherstatscollisions_hi
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatscollisions_lo
decl_stmt|;
comment|/* single_collision_transmit_frames */
name|uint32_t
name|tx_stat_dot3statssinglecollisionframes_hi
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statssinglecollisionframes_lo
decl_stmt|;
comment|/* multiple_collision_transmit_frames */
name|uint32_t
name|tx_stat_dot3statsmultiplecollisionframes_hi
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statsmultiplecollisionframes_lo
decl_stmt|;
comment|/* deferred_transmissions */
name|uint32_t
name|tx_stat_dot3statsdeferredtransmissions_hi
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statsdeferredtransmissions_lo
decl_stmt|;
comment|/* excessive_collision_frames */
name|uint32_t
name|tx_stat_dot3statsexcessivecollisions_hi
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statsexcessivecollisions_lo
decl_stmt|;
comment|/* late_collision_frames */
name|uint32_t
name|tx_stat_dot3statslatecollisions_hi
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statslatecollisions_lo
decl_stmt|;
comment|/* frames_transmitted_64_bytes */
name|uint32_t
name|tx_stat_etherstatspkts64octets_hi
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts64octets_lo
decl_stmt|;
comment|/* frames_transmitted_65_127_bytes */
name|uint32_t
name|tx_stat_etherstatspkts65octetsto127octets_hi
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts65octetsto127octets_lo
decl_stmt|;
comment|/* frames_transmitted_128_255_bytes */
name|uint32_t
name|tx_stat_etherstatspkts128octetsto255octets_hi
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts128octetsto255octets_lo
decl_stmt|;
comment|/* frames_transmitted_256_511_bytes */
name|uint32_t
name|tx_stat_etherstatspkts256octetsto511octets_hi
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts256octetsto511octets_lo
decl_stmt|;
comment|/* frames_transmitted_512_1023_bytes */
name|uint32_t
name|tx_stat_etherstatspkts512octetsto1023octets_hi
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts512octetsto1023octets_lo
decl_stmt|;
comment|/* frames_transmitted_1024_1522_bytes */
name|uint32_t
name|tx_stat_etherstatspkts1024octetsto1522octets_hi
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspkts1024octetsto1522octets_lo
decl_stmt|;
comment|/* frames_transmitted_1523_9022_bytes */
name|uint32_t
name|tx_stat_etherstatspktsover1522octets_hi
decl_stmt|;
name|uint32_t
name|tx_stat_etherstatspktsover1522octets_lo
decl_stmt|;
name|uint32_t
name|tx_stat_bmac_2047_hi
decl_stmt|;
name|uint32_t
name|tx_stat_bmac_2047_lo
decl_stmt|;
name|uint32_t
name|tx_stat_bmac_4095_hi
decl_stmt|;
name|uint32_t
name|tx_stat_bmac_4095_lo
decl_stmt|;
name|uint32_t
name|tx_stat_bmac_9216_hi
decl_stmt|;
name|uint32_t
name|tx_stat_bmac_9216_lo
decl_stmt|;
name|uint32_t
name|tx_stat_bmac_16383_hi
decl_stmt|;
name|uint32_t
name|tx_stat_bmac_16383_lo
decl_stmt|;
comment|/* internal_mac_transmit_errors */
name|uint32_t
name|tx_stat_dot3statsinternalmactransmiterrors_hi
decl_stmt|;
name|uint32_t
name|tx_stat_dot3statsinternalmactransmiterrors_lo
decl_stmt|;
comment|/* if_out_discards */
name|uint32_t
name|tx_stat_bmac_ufl_hi
decl_stmt|;
name|uint32_t
name|tx_stat_bmac_ufl_lo
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MAC_STX_IDX_MAX
value|2
end_define

begin_struct
struct|struct
name|host_port_stats
block|{
name|uint32_t
name|host_port_stats_start
decl_stmt|;
name|struct
name|mac_stx
name|mac_stx
index|[
name|MAC_STX_IDX_MAX
index|]
decl_stmt|;
name|uint32_t
name|brb_drop_hi
decl_stmt|;
name|uint32_t
name|brb_drop_lo
decl_stmt|;
name|uint32_t
name|host_port_stats_end
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|host_func_stats
block|{
name|uint32_t
name|host_func_stats_start
decl_stmt|;
name|uint32_t
name|total_bytes_received_hi
decl_stmt|;
name|uint32_t
name|total_bytes_received_lo
decl_stmt|;
name|uint32_t
name|total_bytes_transmitted_hi
decl_stmt|;
name|uint32_t
name|total_bytes_transmitted_lo
decl_stmt|;
name|uint32_t
name|total_unicast_packets_received_hi
decl_stmt|;
name|uint32_t
name|total_unicast_packets_received_lo
decl_stmt|;
name|uint32_t
name|total_multicast_packets_received_hi
decl_stmt|;
name|uint32_t
name|total_multicast_packets_received_lo
decl_stmt|;
name|uint32_t
name|total_broadcast_packets_received_hi
decl_stmt|;
name|uint32_t
name|total_broadcast_packets_received_lo
decl_stmt|;
name|uint32_t
name|total_unicast_packets_transmitted_hi
decl_stmt|;
name|uint32_t
name|total_unicast_packets_transmitted_lo
decl_stmt|;
name|uint32_t
name|total_multicast_packets_transmitted_hi
decl_stmt|;
name|uint32_t
name|total_multicast_packets_transmitted_lo
decl_stmt|;
name|uint32_t
name|total_broadcast_packets_transmitted_hi
decl_stmt|;
name|uint32_t
name|total_broadcast_packets_transmitted_lo
decl_stmt|;
name|uint32_t
name|valid_bytes_received_hi
decl_stmt|;
name|uint32_t
name|valid_bytes_received_lo
decl_stmt|;
name|uint32_t
name|host_func_stats_end
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM_5710_FW_MAJOR_VERSION
value|5
end_define

begin_define
define|#
directive|define
name|BCM_5710_FW_MINOR_VERSION
value|2
end_define

begin_define
define|#
directive|define
name|BCM_5710_FW_REVISION_VERSION
value|13
end_define

begin_define
define|#
directive|define
name|BCM_5710_FW_ENGINEERING_VERSION
value|0
end_define

begin_define
define|#
directive|define
name|BCM_5710_FW_COMPILE_FLAGS
value|1
end_define

begin_comment
comment|/*  * Attention bits  */
end_comment

begin_struct
struct|struct
name|atten_def_status_block
block|{
name|uint32_t
name|attn_bits
decl_stmt|;
name|uint32_t
name|attn_bits_ack
decl_stmt|;
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint8_t
name|reserved0
decl_stmt|;
name|uint16_t
name|attn_bits_index
decl_stmt|;
name|uint32_t
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Common data for all protocols.  */
end_comment

begin_struct
struct|struct
name|doorbell_hdr
block|{
name|uint8_t
name|header
decl_stmt|;
define|#
directive|define
name|DOORBELL_HDR_RX
value|(0x1<< 0)
define|#
directive|define
name|DOORBELL_HDR_RX_SHIFT
value|0
define|#
directive|define
name|DOORBELL_HDR_DB_TYPE
value|(0x1<< 1)
define|#
directive|define
name|DOORBELL_HDR_DB_TYPE_SHIFT
value|1
define|#
directive|define
name|DOORBELL_HDR_DPM_SIZE
value|(0x3<< 2)
define|#
directive|define
name|DOORBELL_HDR_DPM_SIZE_SHIFT
value|2
define|#
directive|define
name|DOORBELL_HDR_CONN_TYPE
value|(0xF<< 4)
define|#
directive|define
name|DOORBELL_HDR_CONN_TYPE_SHIFT
value|4
block|}
struct|;
end_struct

begin_comment
comment|/*  * Doorbell message sent to the chip.  */
end_comment

begin_struct
struct|struct
name|doorbell
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|zero_fill2
decl_stmt|;
name|uint8_t
name|zero_fill1
decl_stmt|;
name|struct
name|doorbell_hdr
name|header
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|struct
name|doorbell_hdr
name|header
decl_stmt|;
name|uint8_t
name|zero_fill1
decl_stmt|;
name|uint16_t
name|zero_fill2
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * Doorbell message sent to the chip.  */
end_comment

begin_struct
struct|struct
name|doorbell_set_prod
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|prod
decl_stmt|;
name|uint8_t
name|zero_fill1
decl_stmt|;
name|struct
name|doorbell_hdr
name|header
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|struct
name|doorbell_hdr
name|header
decl_stmt|;
name|uint8_t
name|zero_fill1
decl_stmt|;
name|uint16_t
name|prod
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * IGU driver acknowledgement register.  */
end_comment

begin_struct
struct|struct
name|igu_ack_register
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|sb_id_and_flags
decl_stmt|;
define|#
directive|define
name|IGU_ACK_REGISTER_STATUS_BLOCK_ID
value|(0x1F<< 0)
define|#
directive|define
name|IGU_ACK_REGISTER_STATUS_BLOCK_ID_SHIFT
value|0
define|#
directive|define
name|IGU_ACK_REGISTER_STORM_ID
value|(0x7<< 5)
define|#
directive|define
name|IGU_ACK_REGISTER_STORM_ID_SHIFT
value|5
define|#
directive|define
name|IGU_ACK_REGISTER_UPDATE_INDEX
value|(0x1<< 8)
define|#
directive|define
name|IGU_ACK_REGISTER_UPDATE_INDEX_SHIFT
value|8
define|#
directive|define
name|IGU_ACK_REGISTER_INTERRUPT_MODE
value|(0x3<< 9)
define|#
directive|define
name|IGU_ACK_REGISTER_INTERRUPT_MODE_SHIFT
value|9
define|#
directive|define
name|IGU_ACK_REGISTER_RESERVED
value|(0x1F<< 11)
define|#
directive|define
name|IGU_ACK_REGISTER_RESERVED_SHIFT
value|11
name|uint16_t
name|status_block_index
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|status_block_index
decl_stmt|;
name|uint16_t
name|sb_id_and_flags
decl_stmt|;
define|#
directive|define
name|IGU_ACK_REGISTER_STATUS_BLOCK_ID
value|(0x1F<< 0)
define|#
directive|define
name|IGU_ACK_REGISTER_STATUS_BLOCK_ID_SHIFT
value|0
define|#
directive|define
name|IGU_ACK_REGISTER_STORM_ID
value|(0x7<< 5)
define|#
directive|define
name|IGU_ACK_REGISTER_STORM_ID_SHIFT
value|5
define|#
directive|define
name|IGU_ACK_REGISTER_UPDATE_INDEX
value|(0x1<< 8)
define|#
directive|define
name|IGU_ACK_REGISTER_UPDATE_INDEX_SHIFT
value|8
define|#
directive|define
name|IGU_ACK_REGISTER_INTERRUPT_MODE
value|(0x3<< 9)
define|#
directive|define
name|IGU_ACK_REGISTER_INTERRUPT_MODE_SHIFT
value|9
define|#
directive|define
name|IGU_ACK_REGISTER_RESERVED
value|(0x1F<< 11)
define|#
directive|define
name|IGU_ACK_REGISTER_RESERVED_SHIFT
value|11
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * IGU driver acknowledgement register.  */
end_comment

begin_struct
struct|struct
name|igu_backward_compatible
block|{
name|uint32_t
name|sb_id_and_flags
decl_stmt|;
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_SB_INDEX
value|(0xFFFF<< 0)
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_SB_INDEX_SHIFT
value|0
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_SB_SELECT
value|(0x1F<< 16)
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_SB_SELECT_SHIFT
value|16
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_SEGMENT_ACCESS
value|(0x7<< 21)
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_SEGMENT_ACCESS_SHIFT
value|21
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_BUPDATE
value|(0x1<< 24)
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_BUPDATE_SHIFT
value|24
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_ENABLE_INT
value|(0x3<< 25)
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_ENABLE_INT_SHIFT
value|25
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_RESERVED_0
value|(0x1F<< 27)
define|#
directive|define
name|IGU_BACKWARD_COMPATIBLE_RESERVED_0_SHIFT
value|27
name|uint32_t
name|reserved_2
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * IGU driver acknowledgement register.  */
end_comment

begin_struct
struct|struct
name|igu_regular
block|{
name|uint32_t
name|sb_id_and_flags
decl_stmt|;
define|#
directive|define
name|IGU_REGULAR_SB_INDEX
value|(0xFFFFF<< 0)
define|#
directive|define
name|IGU_REGULAR_SB_INDEX_SHIFT
value|0
define|#
directive|define
name|IGU_REGULAR_RESERVED0
value|(0x1<< 20)
define|#
directive|define
name|IGU_REGULAR_RESERVED0_SHIFT
value|20
define|#
directive|define
name|IGU_REGULAR_SEGMENT_ACCESS
value|(0x7<< 21)
define|#
directive|define
name|IGU_REGULAR_SEGMENT_ACCESS_SHIFT
value|21
define|#
directive|define
name|IGU_REGULAR_BUPDATE
value|(0x1<< 24)
define|#
directive|define
name|IGU_REGULAR_BUPDATE_SHIFT
value|24
define|#
directive|define
name|IGU_REGULAR_ENABLE_INT
value|(0x3<< 25)
define|#
directive|define
name|IGU_REGULAR_ENABLE_INT_SHIFT
value|25
define|#
directive|define
name|IGU_REGULAR_RESERVED_1
value|(0x1<< 27)
define|#
directive|define
name|IGU_REGULAR_RESERVED_1_SHIFT
value|27
define|#
directive|define
name|IGU_REGULAR_CLEANUP_TYPE
value|(0x3<< 28)
define|#
directive|define
name|IGU_REGULAR_CLEANUP_TYPE_SHIFT
value|28
define|#
directive|define
name|IGU_REGULAR_CLEANUP_SET
value|(0x1<< 30)
define|#
directive|define
name|IGU_REGULAR_CLEANUP_SET_SHIFT
value|30
define|#
directive|define
name|IGU_REGULAR_BCLEANUP
value|(0x1<< 31)
define|#
directive|define
name|IGU_REGULAR_BCLEANUP_SHIFT
value|31
name|uint32_t
name|reserved_2
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * IGU driver acknowledgement register.  */
end_comment

begin_union
union|union
name|igu_consprod_reg
block|{
name|struct
name|igu_regular
name|regular
decl_stmt|;
name|struct
name|igu_backward_compatible
name|backward_compatible
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  * Parser parsing flags field.  */
end_comment

begin_struct
struct|struct
name|parsing_flags
block|{
name|uint16_t
name|flags
decl_stmt|;
define|#
directive|define
name|PARSING_FLAGS_ETHERNET_ADDRESS_TYPE
value|(0x1<< 0)
define|#
directive|define
name|PARSING_FLAGS_ETHERNET_ADDRESS_TYPE_SHIFT
value|0
define|#
directive|define
name|PARSING_FLAGS_VLAN
value|(0x1<< 1)
define|#
directive|define
name|PARSING_FLAGS_VLAN_SHIFT
value|1
define|#
directive|define
name|PARSING_FLAGS_EXTRA_VLAN
value|(0x1<< 2)
define|#
directive|define
name|PARSING_FLAGS_EXTRA_VLAN_SHIFT
value|2
define|#
directive|define
name|PARSING_FLAGS_OVER_ETHERNET_PROTOCOL
value|(0x3<< 3)
define|#
directive|define
name|PARSING_FLAGS_OVER_ETHERNET_PROTOCOL_SHIFT
value|3
define|#
directive|define
name|PARSING_FLAGS_IP_OPTIONS
value|(0x1<< 5)
define|#
directive|define
name|PARSING_FLAGS_IP_OPTIONS_SHIFT
value|5
define|#
directive|define
name|PARSING_FLAGS_FRAGMENTATION_STATUS
value|(0x1<< 6)
define|#
directive|define
name|PARSING_FLAGS_FRAGMENTATION_STATUS_SHIFT
value|6
define|#
directive|define
name|PARSING_FLAGS_OVER_IP_PROTOCOL
value|(0x3<< 7)
define|#
directive|define
name|PARSING_FLAGS_OVER_IP_PROTOCOL_SHIFT
value|7
define|#
directive|define
name|PARSING_FLAGS_PURE_ACK_INDICATION
value|(0x1<< 9)
define|#
directive|define
name|PARSING_FLAGS_PURE_ACK_INDICATION_SHIFT
value|9
define|#
directive|define
name|PARSING_FLAGS_TCP_OPTIONS_EXIST
value|(0x1<< 10)
define|#
directive|define
name|PARSING_FLAGS_TCP_OPTIONS_EXIST_SHIFT
value|10
define|#
directive|define
name|PARSING_FLAGS_TIME_STAMP_EXIST_FLAG
value|(0x1<< 11)
define|#
directive|define
name|PARSING_FLAGS_TIME_STAMP_EXIST_FLAG_SHIFT
value|11
define|#
directive|define
name|PARSING_FLAGS_CONNECTION_MATCH
value|(0x1<< 12)
define|#
directive|define
name|PARSING_FLAGS_CONNECTION_MATCH_SHIFT
value|12
define|#
directive|define
name|PARSING_FLAGS_LLC_SNAP
value|(0x1<< 13)
define|#
directive|define
name|PARSING_FLAGS_LLC_SNAP_SHIFT
value|13
define|#
directive|define
name|PARSING_FLAGS_RESERVED0
value|(0x3<< 14)
define|#
directive|define
name|PARSING_FLAGS_RESERVED0_SHIFT
value|14
block|}
struct|;
end_struct

begin_struct
struct|struct
name|regpair
block|{
name|uint32_t
name|lo
decl_stmt|;
name|uint32_t
name|hi
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * dmae command structure  */
end_comment

begin_struct
struct|struct
name|dmae_command
block|{
name|uint32_t
name|opcode
decl_stmt|;
define|#
directive|define
name|DMAE_COMMAND_SRC
value|(0x1<< 0)
define|#
directive|define
name|DMAE_COMMAND_SRC_SHIFT
value|0
define|#
directive|define
name|DMAE_COMMAND_DST
value|(0x3<< 1)
define|#
directive|define
name|DMAE_COMMAND_DST_SHIFT
value|1
define|#
directive|define
name|DMAE_COMMAND_C_DST
value|(0x1<< 3)
define|#
directive|define
name|DMAE_COMMAND_C_DST_SHIFT
value|3
define|#
directive|define
name|DMAE_COMMAND_C_TYPE_ENABLE
value|(0x1<< 4)
define|#
directive|define
name|DMAE_COMMAND_C_TYPE_ENABLE_SHIFT
value|4
define|#
directive|define
name|DMAE_COMMAND_C_TYPE_CRC_ENABLE
value|(0x1<< 5)
define|#
directive|define
name|DMAE_COMMAND_C_TYPE_CRC_ENABLE_SHIFT
value|5
define|#
directive|define
name|DMAE_COMMAND_C_TYPE_CRC_OFFSET
value|(0x7<< 6)
define|#
directive|define
name|DMAE_COMMAND_C_TYPE_CRC_OFFSET_SHIFT
value|6
define|#
directive|define
name|DMAE_COMMAND_ENDIANITY
value|(0x3<< 9)
define|#
directive|define
name|DMAE_COMMAND_ENDIANITY_SHIFT
value|9
define|#
directive|define
name|DMAE_COMMAND_PORT
value|(0x1<< 11)
define|#
directive|define
name|DMAE_COMMAND_PORT_SHIFT
value|11
define|#
directive|define
name|DMAE_COMMAND_CRC_RESET
value|(0x1<< 12)
define|#
directive|define
name|DMAE_COMMAND_CRC_RESET_SHIFT
value|12
define|#
directive|define
name|DMAE_COMMAND_SRC_RESET
value|(0x1<< 13)
define|#
directive|define
name|DMAE_COMMAND_SRC_RESET_SHIFT
value|13
define|#
directive|define
name|DMAE_COMMAND_DST_RESET
value|(0x1<< 14)
define|#
directive|define
name|DMAE_COMMAND_DST_RESET_SHIFT
value|14
define|#
directive|define
name|DMAE_COMMAND_E1HVN
value|(0x3<< 15)
define|#
directive|define
name|DMAE_COMMAND_E1HVN_SHIFT
value|15
define|#
directive|define
name|DMAE_COMMAND_RESERVED0
value|(0x7FFF<< 17)
define|#
directive|define
name|DMAE_COMMAND_RESERVED0_SHIFT
value|17
name|uint32_t
name|src_addr_lo
decl_stmt|;
name|uint32_t
name|src_addr_hi
decl_stmt|;
name|uint32_t
name|dst_addr_lo
decl_stmt|;
name|uint32_t
name|dst_addr_hi
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|reserved1
decl_stmt|;
name|uint16_t
name|len
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|len
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|comp_addr_lo
decl_stmt|;
name|uint32_t
name|comp_addr_hi
decl_stmt|;
name|uint32_t
name|comp_val
decl_stmt|;
name|uint32_t
name|crc32
decl_stmt|;
name|uint32_t
name|crc32_c
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|crc16_c
decl_stmt|;
name|uint16_t
name|crc16
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|crc16
decl_stmt|;
name|uint16_t
name|crc16_c
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|reserved2
decl_stmt|;
name|uint16_t
name|crc_t10
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|crc_t10
decl_stmt|;
name|uint16_t
name|reserved2
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|xsum8
decl_stmt|;
name|uint16_t
name|xsum16
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|xsum16
decl_stmt|;
name|uint16_t
name|xsum8
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|double_regpair
block|{
name|uint32_t
name|regpair0_lo
decl_stmt|;
name|uint32_t
name|regpair0_hi
decl_stmt|;
name|uint32_t
name|regpair1_lo
decl_stmt|;
name|uint32_t
name|regpair1_hi
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth storm context of Ustorm (configuration part).  */
end_comment

begin_struct
struct|struct
name|ustorm_eth_st_context_config
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|flags
decl_stmt|;
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_MC_ALIGNMENT
value|(0x1<< 0)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_MC_ALIGNMENT_SHIFT
value|0
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_DYNAMIC_HC
value|(0x1<< 1)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_DYNAMIC_HC_SHIFT
value|1
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_TPA
value|(0x1<< 2)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_TPA_SHIFT
value|2
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_STATISTICS
value|(0x1<< 3)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_STATISTICS_SHIFT
value|3
define|#
directive|define
name|__USTORM_ETH_ST_CONTEXT_CONFIG_RESERVED0
value|(0xF<< 4)
define|#
directive|define
name|__USTORM_ETH_ST_CONTEXT_CONFIG_RESERVED0_SHIFT
value|4
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint8_t
name|clientId
decl_stmt|;
name|uint8_t
name|sb_index_numbers
decl_stmt|;
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_CQE_SB_INDEX_NUMBER
value|(0xF<< 0)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_CQE_SB_INDEX_NUMBER_SHIFT
value|0
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_BD_SB_INDEX_NUMBER
value|(0xF<< 4)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_BD_SB_INDEX_NUMBER_SHIFT
value|4
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|sb_index_numbers
decl_stmt|;
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_CQE_SB_INDEX_NUMBER
value|(0xF<< 0)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_CQE_SB_INDEX_NUMBER_SHIFT
value|0
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_BD_SB_INDEX_NUMBER
value|(0xF<< 4)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_BD_SB_INDEX_NUMBER_SHIFT
value|4
name|uint8_t
name|clientId
decl_stmt|;
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint8_t
name|flags
decl_stmt|;
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_MC_ALIGNMENT
value|(0x1<< 0)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_MC_ALIGNMENT_SHIFT
value|0
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_DYNAMIC_HC
value|(0x1<< 1)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_DYNAMIC_HC_SHIFT
value|1
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_TPA
value|(0x1<< 2)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_TPA_SHIFT
value|2
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_STATISTICS
value|(0x1<< 3)
define|#
directive|define
name|USTORM_ETH_ST_CONTEXT_CONFIG_ENABLE_STATISTICS_SHIFT
value|3
define|#
directive|define
name|__USTORM_ETH_ST_CONTEXT_CONFIG_RESERVED0
value|(0xF<< 4)
define|#
directive|define
name|__USTORM_ETH_ST_CONTEXT_CONFIG_RESERVED0_SHIFT
value|4
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|bd_buff_size
decl_stmt|;
name|uint8_t
name|statistics_counter_id
decl_stmt|;
name|uint8_t
name|mc_alignment_log_size
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|mc_alignment_log_size
decl_stmt|;
name|uint8_t
name|statistics_counter_id
decl_stmt|;
name|uint16_t
name|bd_buff_size
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__local_sge_prod
decl_stmt|;
name|uint8_t
name|__local_bd_prod
decl_stmt|;
name|uint16_t
name|sge_buff_size
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|sge_buff_size
decl_stmt|;
name|uint8_t
name|__local_bd_prod
decl_stmt|;
name|uint8_t
name|__local_sge_prod
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__sdm_bd_expected_counter
decl_stmt|;
name|uint8_t
name|cstorm_agg_int
decl_stmt|;
name|uint8_t
name|__expected_bds_on_ram
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__expected_bds_on_ram
decl_stmt|;
name|uint8_t
name|cstorm_agg_int
decl_stmt|;
name|uint16_t
name|__sdm_bd_expected_counter
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__ring_data_ram_addr
decl_stmt|;
name|uint16_t
name|__hc_cstorm_ram_addr
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__hc_cstorm_ram_addr
decl_stmt|;
name|uint16_t
name|__ring_data_ram_addr
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|reserved1
decl_stmt|;
name|uint8_t
name|max_sges_for_packet
decl_stmt|;
name|uint16_t
name|__bd_ring_ram_addr
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__bd_ring_ram_addr
decl_stmt|;
name|uint8_t
name|max_sges_for_packet
decl_stmt|;
name|uint8_t
name|reserved1
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|bd_page_base_lo
decl_stmt|;
name|uint32_t
name|bd_page_base_hi
decl_stmt|;
name|uint32_t
name|sge_page_base_lo
decl_stmt|;
name|uint32_t
name|sge_page_base_hi
decl_stmt|;
name|struct
name|regpair
name|reserved2
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth Rx Buffer Descriptor.  */
end_comment

begin_struct
struct|struct
name|eth_rx_bd
block|{
name|uint32_t
name|addr_lo
decl_stmt|;
name|uint32_t
name|addr_hi
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth Rx SGE Descriptor.  */
end_comment

begin_struct
struct|struct
name|eth_rx_sge
block|{
name|uint32_t
name|addr_lo
decl_stmt|;
name|uint32_t
name|addr_hi
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Local BDs and SGEs rings (in ETH).  */
end_comment

begin_struct
struct|struct
name|eth_local_rx_rings
block|{
name|struct
name|eth_rx_bd
name|__local_bd_ring
index|[
literal|8
index|]
decl_stmt|;
name|struct
name|eth_rx_sge
name|__local_sge_ring
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth storm context of Ustorm.  */
end_comment

begin_struct
struct|struct
name|ustorm_eth_st_context
block|{
name|struct
name|ustorm_eth_st_context_config
name|common
decl_stmt|;
name|struct
name|eth_local_rx_rings
name|__rings
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth storm context of Tstorm.  */
end_comment

begin_struct
struct|struct
name|tstorm_eth_st_context
block|{
name|uint32_t
name|__reserved0
index|[
literal|28
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth aggregative context section of Xstorm.  */
end_comment

begin_struct
struct|struct
name|xstorm_eth_extra_ag_context_section
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__tcp_agg_vars1
decl_stmt|;
name|uint8_t
name|__reserved50
decl_stmt|;
name|uint16_t
name|__mss
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__mss
decl_stmt|;
name|uint8_t
name|__reserved50
decl_stmt|;
name|uint8_t
name|__tcp_agg_vars1
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__snd_nxt
decl_stmt|;
name|uint32_t
name|__tx_wnd
decl_stmt|;
name|uint32_t
name|__snd_una
decl_stmt|;
name|uint32_t
name|__reserved53
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__agg_val8_th
decl_stmt|;
name|uint8_t
name|__agg_val8
decl_stmt|;
name|uint16_t
name|__tcp_agg_vars2
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__tcp_agg_vars2
decl_stmt|;
name|uint8_t
name|__agg_val8
decl_stmt|;
name|uint8_t
name|__agg_val8_th
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__reserved58
decl_stmt|;
name|uint32_t
name|__reserved59
decl_stmt|;
name|uint32_t
name|__reserved60
decl_stmt|;
name|uint32_t
name|__reserved61
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val7_th
decl_stmt|;
name|uint16_t
name|__agg_val7
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val7
decl_stmt|;
name|uint16_t
name|__agg_val7_th
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__tcp_agg_vars5
decl_stmt|;
name|uint8_t
name|__tcp_agg_vars4
decl_stmt|;
name|uint8_t
name|__tcp_agg_vars3
decl_stmt|;
name|uint8_t
name|__reserved62
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__reserved62
decl_stmt|;
name|uint8_t
name|__tcp_agg_vars3
decl_stmt|;
name|uint8_t
name|__tcp_agg_vars4
decl_stmt|;
name|uint8_t
name|__tcp_agg_vars5
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__tcp_agg_vars6
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_misc6
decl_stmt|;
name|uint16_t
name|__tcp_agg_vars7
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__tcp_agg_vars7
decl_stmt|;
name|uint16_t
name|__agg_misc6
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__agg_val10
decl_stmt|;
name|uint32_t
name|__agg_val10_th
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__reserved3
decl_stmt|;
name|uint8_t
name|__reserved2
decl_stmt|;
name|uint8_t
name|__da_only_cnt
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__da_only_cnt
decl_stmt|;
name|uint8_t
name|__reserved2
decl_stmt|;
name|uint16_t
name|__reserved3
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth aggregative context of Xstorm.  */
end_comment

begin_struct
struct|struct
name|xstorm_eth_ag_context
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|agg_val1
decl_stmt|;
name|uint8_t
name|__agg_vars1
decl_stmt|;
name|uint8_t
name|__state
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__state
decl_stmt|;
name|uint8_t
name|__agg_vars1
decl_stmt|;
name|uint16_t
name|agg_val1
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|cdu_reserved
decl_stmt|;
name|uint8_t
name|__agg_vars4
decl_stmt|;
name|uint8_t
name|__agg_vars3
decl_stmt|;
name|uint8_t
name|__agg_vars2
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__agg_vars2
decl_stmt|;
name|uint8_t
name|__agg_vars3
decl_stmt|;
name|uint8_t
name|__agg_vars4
decl_stmt|;
name|uint8_t
name|cdu_reserved
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__bd_prod
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_vars5
decl_stmt|;
name|uint16_t
name|__agg_val4_th
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val4_th
decl_stmt|;
name|uint16_t
name|__agg_vars5
decl_stmt|;
endif|#
directive|endif
name|struct
name|xstorm_eth_extra_ag_context_section
name|__extra_section
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_vars7
decl_stmt|;
name|uint8_t
name|__agg_val3_th
decl_stmt|;
name|uint8_t
name|__agg_vars6
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__agg_vars6
decl_stmt|;
name|uint8_t
name|__agg_val3_th
decl_stmt|;
name|uint16_t
name|__agg_vars7
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val11_th
decl_stmt|;
name|uint16_t
name|__agg_val11
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val11
decl_stmt|;
name|uint16_t
name|__agg_val11_th
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__reserved1
decl_stmt|;
name|uint8_t
name|__agg_val6_th
decl_stmt|;
name|uint16_t
name|__agg_val9
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val9
decl_stmt|;
name|uint8_t
name|__agg_val6_th
decl_stmt|;
name|uint8_t
name|__reserved1
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val2_th
decl_stmt|;
name|uint16_t
name|__agg_val2
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val2
decl_stmt|;
name|uint16_t
name|__agg_val2_th
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__agg_vars8
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_misc0
decl_stmt|;
name|uint16_t
name|__agg_val4
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val4
decl_stmt|;
name|uint16_t
name|__agg_misc0
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__agg_val3
decl_stmt|;
name|uint8_t
name|__agg_val6
decl_stmt|;
name|uint8_t
name|__agg_val5_th
decl_stmt|;
name|uint8_t
name|__agg_val5
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__agg_val5
decl_stmt|;
name|uint8_t
name|__agg_val5_th
decl_stmt|;
name|uint8_t
name|__agg_val6
decl_stmt|;
name|uint8_t
name|__agg_val3
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_misc1
decl_stmt|;
name|uint16_t
name|__bd_ind_max_val
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__bd_ind_max_val
decl_stmt|;
name|uint16_t
name|__agg_misc1
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__reserved57
decl_stmt|;
name|uint32_t
name|__agg_misc4
decl_stmt|;
name|uint32_t
name|__agg_misc5
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth extra aggregative context section of Tstorm.  */
end_comment

begin_struct
struct|struct
name|tstorm_eth_extra_ag_context_section
block|{
name|uint32_t
name|__agg_val1
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__tcp_agg_vars2
decl_stmt|;
name|uint8_t
name|__agg_val3
decl_stmt|;
name|uint16_t
name|__agg_val2
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val2
decl_stmt|;
name|uint8_t
name|__agg_val3
decl_stmt|;
name|uint8_t
name|__tcp_agg_vars2
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val5
decl_stmt|;
name|uint8_t
name|__agg_val6
decl_stmt|;
name|uint8_t
name|__tcp_agg_vars3
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__tcp_agg_vars3
decl_stmt|;
name|uint8_t
name|__agg_val6
decl_stmt|;
name|uint16_t
name|__agg_val5
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__reserved63
decl_stmt|;
name|uint32_t
name|__reserved64
decl_stmt|;
name|uint32_t
name|__reserved65
decl_stmt|;
name|uint32_t
name|__reserved66
decl_stmt|;
name|uint32_t
name|__reserved67
decl_stmt|;
name|uint32_t
name|__tcp_agg_vars1
decl_stmt|;
name|uint32_t
name|__reserved61
decl_stmt|;
name|uint32_t
name|__reserved62
decl_stmt|;
name|uint32_t
name|__reserved2
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth aggregative context of Tstorm.  */
end_comment

begin_struct
struct|struct
name|tstorm_eth_ag_context
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__reserved54
decl_stmt|;
name|uint8_t
name|__agg_vars1
decl_stmt|;
name|uint8_t
name|__state
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__state
decl_stmt|;
name|uint8_t
name|__agg_vars1
decl_stmt|;
name|uint16_t
name|__reserved54
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val4
decl_stmt|;
name|uint16_t
name|__agg_vars2
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_vars2
decl_stmt|;
name|uint16_t
name|__agg_val4
decl_stmt|;
endif|#
directive|endif
name|struct
name|tstorm_eth_extra_ag_context_section
name|__extra_section
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth aggregative context of Cstorm.  */
end_comment

begin_struct
struct|struct
name|cstorm_eth_ag_context
block|{
name|uint32_t
name|__agg_vars1
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__aux1_th
decl_stmt|;
name|uint8_t
name|__aux1_val
decl_stmt|;
name|uint16_t
name|__agg_vars2
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_vars2
decl_stmt|;
name|uint8_t
name|__aux1_val
decl_stmt|;
name|uint8_t
name|__aux1_th
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__num_of_treated_packet
decl_stmt|;
name|uint32_t
name|__last_packet_treated
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__reserved58
decl_stmt|;
name|uint16_t
name|__reserved57
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__reserved57
decl_stmt|;
name|uint16_t
name|__reserved58
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__reserved62
decl_stmt|;
name|uint8_t
name|__reserved61
decl_stmt|;
name|uint8_t
name|__reserved60
decl_stmt|;
name|uint8_t
name|__reserved59
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__reserved59
decl_stmt|;
name|uint8_t
name|__reserved60
decl_stmt|;
name|uint8_t
name|__reserved61
decl_stmt|;
name|uint8_t
name|__reserved62
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__reserved64
decl_stmt|;
name|uint16_t
name|__reserved63
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__reserved63
decl_stmt|;
name|uint16_t
name|__reserved64
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__reserved65
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_vars3
decl_stmt|;
name|uint16_t
name|__rq_inv_cnt
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__rq_inv_cnt
decl_stmt|;
name|uint16_t
name|__agg_vars3
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__packet_index_th
decl_stmt|;
name|uint16_t
name|__packet_index
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__packet_index
decl_stmt|;
name|uint16_t
name|__packet_index_th
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth aggregative context of Ustorm.  */
end_comment

begin_struct
struct|struct
name|ustorm_eth_ag_context
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__aux_counter_flags
decl_stmt|;
name|uint8_t
name|__agg_vars2
decl_stmt|;
name|uint8_t
name|__agg_vars1
decl_stmt|;
name|uint8_t
name|__state
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__state
decl_stmt|;
name|uint8_t
name|__agg_vars1
decl_stmt|;
name|uint8_t
name|__agg_vars2
decl_stmt|;
name|uint8_t
name|__aux_counter_flags
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|cdu_usage
decl_stmt|;
name|uint8_t
name|__agg_misc2
decl_stmt|;
name|uint16_t
name|__agg_misc1
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_misc1
decl_stmt|;
name|uint8_t
name|__agg_misc2
decl_stmt|;
name|uint8_t
name|cdu_usage
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__agg_misc4
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__agg_val3_th
decl_stmt|;
name|uint8_t
name|__agg_val3
decl_stmt|;
name|uint16_t
name|__agg_misc3
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_misc3
decl_stmt|;
name|uint8_t
name|__agg_val3
decl_stmt|;
name|uint8_t
name|__agg_val3_th
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__agg_val1
decl_stmt|;
name|uint32_t
name|__agg_misc4_th
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val2_th
decl_stmt|;
name|uint16_t
name|__agg_val2
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__agg_val2
decl_stmt|;
name|uint16_t
name|__agg_val2_th
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__reserved2
decl_stmt|;
name|uint8_t
name|__decision_rules
decl_stmt|;
name|uint8_t
name|__decision_rule_enable_bits
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__decision_rule_enable_bits
decl_stmt|;
name|uint8_t
name|__decision_rules
decl_stmt|;
name|uint16_t
name|__reserved2
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * Timers connection context.  */
end_comment

begin_struct
struct|struct
name|timers_block_context
block|{
name|uint32_t
name|__reserved_0
decl_stmt|;
name|uint32_t
name|__reserved_1
decl_stmt|;
name|uint32_t
name|__reserved_2
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|__TIMERS_BLOCK_CONTEXT_NUM_OF_ACTIVE_TIMERS
value|(0x3<< 0)
define|#
directive|define
name|__TIMERS_BLOCK_CONTEXT_NUM_OF_ACTIVE_TIMERS_SHIFT
value|0
define|#
directive|define
name|TIMERS_BLOCK_CONTEXT_CONN_VALID_FLG
value|(0x1<< 2)
define|#
directive|define
name|TIMERS_BLOCK_CONTEXT_CONN_VALID_FLG_SHIFT
value|2
define|#
directive|define
name|__TIMERS_BLOCK_CONTEXT_RESERVED0
value|(0x1FFFFFFF<< 3)
define|#
directive|define
name|__TIMERS_BLOCK_CONTEXT_RESERVED0_SHIFT
value|3
block|}
struct|;
end_struct

begin_comment
comment|/*  * Structure for easy accessibility to assembler.  */
end_comment

begin_struct
struct|struct
name|eth_tx_bd_flags
block|{
name|uint8_t
name|as_bitfield
decl_stmt|;
define|#
directive|define
name|ETH_TX_BD_FLAGS_VLAN_TAG
value|(0x1<< 0)
define|#
directive|define
name|ETH_TX_BD_FLAGS_VLAN_TAG_SHIFT
value|0
define|#
directive|define
name|ETH_TX_BD_FLAGS_IP_CSUM
value|(0x1<< 1)
define|#
directive|define
name|ETH_TX_BD_FLAGS_IP_CSUM_SHIFT
value|1
define|#
directive|define
name|ETH_TX_BD_FLAGS_L4_CSUM
value|(0x1<< 2)
define|#
directive|define
name|ETH_TX_BD_FLAGS_L4_CSUM_SHIFT
value|2
define|#
directive|define
name|ETH_TX_BD_FLAGS_END_BD
value|(0x1<< 3)
define|#
directive|define
name|ETH_TX_BD_FLAGS_END_BD_SHIFT
value|3
define|#
directive|define
name|ETH_TX_BD_FLAGS_START_BD
value|(0x1<< 4)
define|#
directive|define
name|ETH_TX_BD_FLAGS_START_BD_SHIFT
value|4
define|#
directive|define
name|ETH_TX_BD_FLAGS_HDR_POOL
value|(0x1<< 5)
define|#
directive|define
name|ETH_TX_BD_FLAGS_HDR_POOL_SHIFT
value|5
define|#
directive|define
name|ETH_TX_BD_FLAGS_SW_LSO
value|(0x1<< 6)
define|#
directive|define
name|ETH_TX_BD_FLAGS_SW_LSO_SHIFT
value|6
define|#
directive|define
name|ETH_TX_BD_FLAGS_IPV6
value|(0x1<< 7)
define|#
directive|define
name|ETH_TX_BD_FLAGS_IPV6_SHIFT
value|7
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth Tx Buffer Descriptor.  */
end_comment

begin_struct
struct|struct
name|eth_tx_start_bd
block|{
name|uint32_t
name|addr_lo
decl_stmt|;
name|uint32_t
name|addr_hi
decl_stmt|;
name|uint16_t
name|nbd
decl_stmt|;
name|uint16_t
name|nbytes
decl_stmt|;
name|uint16_t
name|vlan
decl_stmt|;
name|struct
name|eth_tx_bd_flags
name|bd_flags
decl_stmt|;
name|uint8_t
name|general_data
decl_stmt|;
define|#
directive|define
name|ETH_TX_START_BD_HDR_NBDS
value|(0x3F<< 0)
define|#
directive|define
name|ETH_TX_START_BD_HDR_NBDS_SHIFT
value|0
define|#
directive|define
name|ETH_TX_START_BD_ETH_ADDR_TYPE
value|(0x3<< 6)
define|#
directive|define
name|ETH_TX_START_BD_ETH_ADDR_TYPE_SHIFT
value|6
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tx regular BD structure.  */
end_comment

begin_struct
struct|struct
name|eth_tx_bd
block|{
name|uint32_t
name|addr_lo
decl_stmt|;
name|uint32_t
name|addr_hi
decl_stmt|;
name|uint16_t
name|total_pkt_bytes
decl_stmt|;
name|uint16_t
name|nbytes
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tx parsing BD structure for ETH,Relevant in START.  */
end_comment

begin_struct
struct|struct
name|eth_tx_parse_bd
block|{
name|uint8_t
name|global_data
decl_stmt|;
define|#
directive|define
name|ETH_TX_PARSE_BD_IP_HDR_START_OFFSET
value|(0xF<< 0)
define|#
directive|define
name|ETH_TX_PARSE_BD_IP_HDR_START_OFFSET_SHIFT
value|0
define|#
directive|define
name|ETH_TX_PARSE_BD_UDP_CS_FLG
value|(0x1<< 4)
define|#
directive|define
name|ETH_TX_PARSE_BD_UDP_CS_FLG_SHIFT
value|4
define|#
directive|define
name|ETH_TX_PARSE_BD_PSEUDO_CS_WITHOUT_LEN
value|(0x1<< 5)
define|#
directive|define
name|ETH_TX_PARSE_BD_PSEUDO_CS_WITHOUT_LEN_SHIFT
value|5
define|#
directive|define
name|ETH_TX_PARSE_BD_LLC_SNAP_EN
value|(0x1<< 6)
define|#
directive|define
name|ETH_TX_PARSE_BD_LLC_SNAP_EN_SHIFT
value|6
define|#
directive|define
name|ETH_TX_PARSE_BD_NS_FLG
value|(0x1<< 7)
define|#
directive|define
name|ETH_TX_PARSE_BD_NS_FLG_SHIFT
value|7
name|uint8_t
name|tcp_flags
decl_stmt|;
define|#
directive|define
name|ETH_TX_PARSE_BD_FIN_FLG
value|(0x1<< 0)
define|#
directive|define
name|ETH_TX_PARSE_BD_FIN_FLG_SHIFT
value|0
define|#
directive|define
name|ETH_TX_PARSE_BD_SYN_FLG
value|(0x1<< 1)
define|#
directive|define
name|ETH_TX_PARSE_BD_SYN_FLG_SHIFT
value|1
define|#
directive|define
name|ETH_TX_PARSE_BD_RST_FLG
value|(0x1<< 2)
define|#
directive|define
name|ETH_TX_PARSE_BD_RST_FLG_SHIFT
value|2
define|#
directive|define
name|ETH_TX_PARSE_BD_PSH_FLG
value|(0x1<< 3)
define|#
directive|define
name|ETH_TX_PARSE_BD_PSH_FLG_SHIFT
value|3
define|#
directive|define
name|ETH_TX_PARSE_BD_ACK_FLG
value|(0x1<< 4)
define|#
directive|define
name|ETH_TX_PARSE_BD_ACK_FLG_SHIFT
value|4
define|#
directive|define
name|ETH_TX_PARSE_BD_URG_FLG
value|(0x1<< 5)
define|#
directive|define
name|ETH_TX_PARSE_BD_URG_FLG_SHIFT
value|5
define|#
directive|define
name|ETH_TX_PARSE_BD_ECE_FLG
value|(0x1<< 6)
define|#
directive|define
name|ETH_TX_PARSE_BD_ECE_FLG_SHIFT
value|6
define|#
directive|define
name|ETH_TX_PARSE_BD_CWR_FLG
value|(0x1<< 7)
define|#
directive|define
name|ETH_TX_PARSE_BD_CWR_FLG_SHIFT
value|7
name|uint8_t
name|ip_hlen
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint16_t
name|total_hlen
decl_stmt|;
name|uint16_t
name|tcp_pseudo_csum
decl_stmt|;
name|uint16_t
name|lso_mss
decl_stmt|;
name|uint16_t
name|ip_id
decl_stmt|;
name|uint32_t
name|tcp_send_seq
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The last BD in the BD memory will hold a pointer to the next BD memory.  */
end_comment

begin_struct
struct|struct
name|eth_tx_next_bd
block|{
name|uint32_t
name|addr_lo
decl_stmt|;
name|uint32_t
name|addr_hi
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * union for 4 Bd types.  */
end_comment

begin_union
union|union
name|eth_tx_bd_types
block|{
name|struct
name|eth_tx_start_bd
name|start_bd
decl_stmt|;
name|struct
name|eth_tx_bd
name|reg_bd
decl_stmt|;
name|struct
name|eth_tx_parse_bd
name|parse_bd
decl_stmt|;
name|struct
name|eth_tx_next_bd
name|next_bd
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  * The eth storm context of Xstorm.  */
end_comment

begin_struct
struct|struct
name|xstorm_eth_st_context
block|{
name|uint32_t
name|tx_bd_page_base_lo
decl_stmt|;
name|uint32_t
name|tx_bd_page_base_hi
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|tx_bd_cons
decl_stmt|;
name|uint8_t
name|statistics_data
decl_stmt|;
define|#
directive|define
name|XSTORM_ETH_ST_CONTEXT_STATISTICS_COUNTER_ID
value|(0x7F<< 0)
define|#
directive|define
name|XSTORM_ETH_ST_CONTEXT_STATISTICS_COUNTER_ID_SHIFT
value|0
define|#
directive|define
name|XSTORM_ETH_ST_CONTEXT_STATISTICS_ENABLE
value|(0x1<< 7)
define|#
directive|define
name|XSTORM_ETH_ST_CONTEXT_STATISTICS_ENABLE_SHIFT
value|7
name|uint8_t
name|__local_tx_bd_prod
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__local_tx_bd_prod
decl_stmt|;
name|uint8_t
name|statistics_data
decl_stmt|;
define|#
directive|define
name|XSTORM_ETH_ST_CONTEXT_STATISTICS_COUNTER_ID
value|(0x7F<< 0)
define|#
directive|define
name|XSTORM_ETH_ST_CONTEXT_STATISTICS_COUNTER_ID_SHIFT
value|0
define|#
directive|define
name|XSTORM_ETH_ST_CONTEXT_STATISTICS_ENABLE
value|(0x1<< 7)
define|#
directive|define
name|XSTORM_ETH_ST_CONTEXT_STATISTICS_ENABLE_SHIFT
value|7
name|uint16_t
name|tx_bd_cons
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__reserved1
decl_stmt|;
name|uint32_t
name|__reserved2
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__ram_cache_index
decl_stmt|;
name|uint8_t
name|__double_buffer_client
decl_stmt|;
name|uint16_t
name|__pkt_cons
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__pkt_cons
decl_stmt|;
name|uint8_t
name|__double_buffer_client
decl_stmt|;
name|uint8_t
name|__ram_cache_index
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__statistics_address
decl_stmt|;
name|uint16_t
name|__gso_next
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|__gso_next
decl_stmt|;
name|uint16_t
name|__statistics_address
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|__local_tx_bd_cons
decl_stmt|;
name|uint8_t
name|safc_group_num
decl_stmt|;
name|uint8_t
name|safc_group_en
decl_stmt|;
name|uint8_t
name|__is_eth_conn
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|__is_eth_conn
decl_stmt|;
name|uint8_t
name|safc_group_en
decl_stmt|;
name|uint8_t
name|safc_group_num
decl_stmt|;
name|uint8_t
name|__local_tx_bd_cons
decl_stmt|;
endif|#
directive|endif
name|union
name|eth_tx_bd_types
name|__bds
index|[
literal|13
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The eth storm context of Cstorm.  */
end_comment

begin_struct
struct|struct
name|cstorm_eth_st_context
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__reserved0
decl_stmt|;
name|uint8_t
name|sb_index_number
decl_stmt|;
name|uint8_t
name|status_block_id
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint8_t
name|sb_index_number
decl_stmt|;
name|uint16_t
name|__reserved0
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|__reserved1
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Ethernet connection context.  */
end_comment

begin_struct
struct|struct
name|eth_context
block|{
name|struct
name|ustorm_eth_st_context
name|ustorm_st_context
decl_stmt|;
name|struct
name|tstorm_eth_st_context
name|tstorm_st_context
decl_stmt|;
name|struct
name|xstorm_eth_ag_context
name|xstorm_ag_context
decl_stmt|;
name|struct
name|tstorm_eth_ag_context
name|tstorm_ag_context
decl_stmt|;
name|struct
name|cstorm_eth_ag_context
name|cstorm_ag_context
decl_stmt|;
name|struct
name|ustorm_eth_ag_context
name|ustorm_ag_context
decl_stmt|;
name|struct
name|timers_block_context
name|timers_context
decl_stmt|;
name|struct
name|xstorm_eth_st_context
name|xstorm_st_context
decl_stmt|;
name|struct
name|cstorm_eth_st_context
name|cstorm_st_context
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Ethernet doorbell  */
end_comment

begin_struct
struct|struct
name|eth_tx_doorbell
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|npackets
decl_stmt|;
name|uint8_t
name|params
decl_stmt|;
define|#
directive|define
name|ETH_TX_DOORBELL_NUM_BDS
value|(0x3F<< 0)
define|#
directive|define
name|ETH_TX_DOORBELL_NUM_BDS_SHIFT
value|0
define|#
directive|define
name|ETH_TX_DOORBELL_RESERVED_TX_FIN_FLAG
value|(0x1<< 6)
define|#
directive|define
name|ETH_TX_DOORBELL_RESERVED_TX_FIN_FLAG_SHIFT
value|6
define|#
directive|define
name|ETH_TX_DOORBELL_SPARE
value|(0x1<< 7)
define|#
directive|define
name|ETH_TX_DOORBELL_SPARE_SHIFT
value|7
name|struct
name|doorbell_hdr
name|hdr
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|struct
name|doorbell_hdr
name|hdr
decl_stmt|;
name|uint8_t
name|params
decl_stmt|;
define|#
directive|define
name|ETH_TX_DOORBELL_NUM_BDS
value|(0x3F<< 0)
define|#
directive|define
name|ETH_TX_DOORBELL_NUM_BDS_SHIFT
value|0
define|#
directive|define
name|ETH_TX_DOORBELL_RESERVED_TX_FIN_FLAG
value|(0x1<< 6)
define|#
directive|define
name|ETH_TX_DOORBELL_RESERVED_TX_FIN_FLAG_SHIFT
value|6
define|#
directive|define
name|ETH_TX_DOORBELL_SPARE
value|(0x1<< 7)
define|#
directive|define
name|ETH_TX_DOORBELL_SPARE_SHIFT
value|7
name|uint16_t
name|npackets
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * cstorm default status block, generated by ustorm.  */
end_comment

begin_struct
struct|struct
name|cstorm_def_status_block_u
block|{
name|uint16_t
name|index_values
index|[
name|HC_USTORM_DEF_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint16_t
name|status_block_index
decl_stmt|;
name|uint8_t
name|func
decl_stmt|;
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint32_t
name|__flags
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * cstorm default status block, generated by cstorm.  */
end_comment

begin_struct
struct|struct
name|cstorm_def_status_block_c
block|{
name|uint16_t
name|index_values
index|[
name|HC_CSTORM_DEF_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint16_t
name|status_block_index
decl_stmt|;
name|uint8_t
name|func
decl_stmt|;
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint32_t
name|__flags
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * xstorm status block  */
end_comment

begin_struct
struct|struct
name|xstorm_def_status_block
block|{
name|uint16_t
name|index_values
index|[
name|HC_XSTORM_DEF_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint16_t
name|status_block_index
decl_stmt|;
name|uint8_t
name|func
decl_stmt|;
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint32_t
name|__flags
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * tstorm status block  */
end_comment

begin_struct
struct|struct
name|tstorm_def_status_block
block|{
name|uint16_t
name|index_values
index|[
name|HC_TSTORM_DEF_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint16_t
name|status_block_index
decl_stmt|;
name|uint8_t
name|func
decl_stmt|;
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint32_t
name|__flags
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * host status block  */
end_comment

begin_struct
struct|struct
name|host_def_status_block
block|{
name|struct
name|atten_def_status_block
name|atten_status_block
decl_stmt|;
name|struct
name|cstorm_def_status_block_u
name|u_def_status_block
decl_stmt|;
name|struct
name|cstorm_def_status_block_c
name|c_def_status_block
decl_stmt|;
name|struct
name|xstorm_def_status_block
name|x_def_status_block
decl_stmt|;
name|struct
name|tstorm_def_status_block
name|t_def_status_block
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * cstorm status block, generated by ustorm.  */
end_comment

begin_struct
struct|struct
name|cstorm_status_block_u
block|{
name|uint16_t
name|index_values
index|[
name|HC_USTORM_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint16_t
name|status_block_index
decl_stmt|;
name|uint8_t
name|func
decl_stmt|;
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint32_t
name|__flags
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * cstorm status block, generated by cstorm.  */
end_comment

begin_struct
struct|struct
name|cstorm_status_block_c
block|{
name|uint16_t
name|index_values
index|[
name|HC_CSTORM_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint16_t
name|status_block_index
decl_stmt|;
name|uint8_t
name|func
decl_stmt|;
name|uint8_t
name|status_block_id
decl_stmt|;
name|uint32_t
name|__flags
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * host status block  */
end_comment

begin_struct
struct|struct
name|host_status_block
block|{
name|struct
name|cstorm_status_block_u
name|u_status_block
decl_stmt|;
name|struct
name|cstorm_status_block_c
name|c_status_block
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The data for RSS setup ramrod.  */
end_comment

begin_struct
struct|struct
name|eth_client_setup_ramrod_data
block|{
name|uint32_t
name|client_id
decl_stmt|;
name|uint8_t
name|is_rdma
decl_stmt|;
name|uint8_t
name|is_fcoe
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * regular eth FP CQE parameters struct.  */
end_comment

begin_struct
struct|struct
name|eth_fast_path_rx_cqe
block|{
name|uint8_t
name|type_error_flags
decl_stmt|;
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_TYPE
value|(0x1<< 0)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_TYPE_SHIFT
value|0
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_PHY_DECODE_ERR_FLG
value|(0x1<< 1)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_PHY_DECODE_ERR_FLG_SHIFT
value|1
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_IP_BAD_XSUM_FLG
value|(0x1<< 2)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_IP_BAD_XSUM_FLG_SHIFT
value|2
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_L4_BAD_XSUM_FLG
value|(0x1<< 3)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_L4_BAD_XSUM_FLG_SHIFT
value|3
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_START_FLG
value|(0x1<< 4)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_START_FLG_SHIFT
value|4
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_END_FLG
value|(0x1<< 5)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_END_FLG_SHIFT
value|5
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_RESERVED0
value|(0x3<< 6)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_RESERVED0_SHIFT
value|6
name|uint8_t
name|status_flags
decl_stmt|;
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_RSS_HASH_TYPE
value|(0x7<< 0)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_RSS_HASH_TYPE_SHIFT
value|0
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_RSS_HASH_FLG
value|(0x1<< 3)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_RSS_HASH_FLG_SHIFT
value|3
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_BROADCAST_FLG
value|(0x1<< 4)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_BROADCAST_FLG_SHIFT
value|4
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_MAC_MATCH_FLG
value|(0x1<< 5)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_MAC_MATCH_FLG_SHIFT
value|5
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_IP_XSUM_NO_VALIDATION_FLG
value|(0x1<< 6)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_IP_XSUM_NO_VALIDATION_FLG_SHIFT
value|6
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_L4_XSUM_NO_VALIDATION_FLG
value|(0x1<< 7)
define|#
directive|define
name|ETH_FAST_PATH_RX_CQE_L4_XSUM_NO_VALIDATION_FLG_SHIFT
value|7
name|uint8_t
name|placement_offset
decl_stmt|;
name|uint8_t
name|queue_index
decl_stmt|;
name|uint32_t
name|rss_hash_result
decl_stmt|;
name|uint16_t
name|vlan_tag
decl_stmt|;
name|uint16_t
name|pkt_len
decl_stmt|;
name|uint16_t
name|len_on_bd
decl_stmt|;
name|struct
name|parsing_flags
name|pars_flags
decl_stmt|;
name|uint16_t
name|sgl
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The data for RSS setup ramrod.  */
end_comment

begin_struct
struct|struct
name|eth_halt_ramrod_data
block|{
name|uint32_t
name|client_id
decl_stmt|;
name|uint32_t
name|reserved0
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The data for statistics query ramrod.  */
end_comment

begin_struct
struct|struct
name|eth_query_ramrod_data
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|reserved0
decl_stmt|;
name|uint8_t
name|collect_port
decl_stmt|;
name|uint16_t
name|drv_counter
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|drv_counter
decl_stmt|;
name|uint8_t
name|collect_port
decl_stmt|;
name|uint8_t
name|reserved0
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|ctr_id_vector
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Place holder for ramrods protocol specific data.  */
end_comment

begin_struct
struct|struct
name|ramrod_data
block|{
name|uint32_t
name|data_lo
decl_stmt|;
name|uint32_t
name|data_hi
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * union for ramrod data for Ethernet protocol (CQE) (force size of 16 bits).  */
end_comment

begin_union
union|union
name|eth_ramrod_data
block|{
name|struct
name|ramrod_data
name|general
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  * Eth Rx Cqe structure- general structure for ramrods.  */
end_comment

begin_struct
struct|struct
name|common_ramrod_eth_rx_cqe
block|{
name|uint8_t
name|ramrod_type
decl_stmt|;
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_TYPE
value|(0x1<< 0)
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_TYPE_SHIFT
value|0
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_ERROR
value|(0x1<< 1)
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_ERROR_SHIFT
value|1
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_RESERVED0
value|(0x3F<< 2)
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_RESERVED0_SHIFT
value|2
name|uint8_t
name|conn_type
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
name|uint32_t
name|conn_and_cmd_data
decl_stmt|;
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_CID
value|(0xFFFFFF<< 0)
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_CID_SHIFT
value|0
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_CMD_ID
value|(0xFF<< 24)
define|#
directive|define
name|COMMON_RAMROD_ETH_RX_CQE_CMD_ID_SHIFT
value|24
name|struct
name|ramrod_data
name|protocol_data
decl_stmt|;
name|uint32_t
name|reserved2
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Rx Last CQE in page (in ETH).  */
end_comment

begin_struct
struct|struct
name|eth_rx_cqe_next_page
block|{
name|uint32_t
name|addr_lo
decl_stmt|;
name|uint32_t
name|addr_hi
decl_stmt|;
name|uint32_t
name|reserved
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * union for all eth rx cqe types (fix their sizes).  */
end_comment

begin_union
union|union
name|eth_rx_cqe
block|{
name|struct
name|eth_fast_path_rx_cqe
name|fast_path_cqe
decl_stmt|;
name|struct
name|common_ramrod_eth_rx_cqe
name|ramrod_cqe
decl_stmt|;
name|struct
name|eth_rx_cqe_next_page
name|next_page_cqe
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  * Common data for all protocols.  */
end_comment

begin_struct
struct|struct
name|spe_hdr
block|{
name|uint32_t
name|conn_and_cmd_data
decl_stmt|;
define|#
directive|define
name|SPE_HDR_CID
value|(0xFFFFFF<< 0)
define|#
directive|define
name|SPE_HDR_CID_SHIFT
value|0
define|#
directive|define
name|SPE_HDR_CMD_ID
value|(0xFF<< 24)
define|#
directive|define
name|SPE_HDR_CMD_ID_SHIFT
value|24
name|uint16_t
name|type
decl_stmt|;
define|#
directive|define
name|SPE_HDR_CONN_TYPE
value|(0xFF<< 0)
define|#
directive|define
name|SPE_HDR_CONN_TYPE_SHIFT
value|0
define|#
directive|define
name|SPE_HDR_COMMON_RAMROD
value|(0xFF<< 8)
define|#
directive|define
name|SPE_HDR_COMMON_RAMROD_SHIFT
value|8
name|uint16_t
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Ethernet slow path element  */
end_comment

begin_union
union|union
name|eth_specific_data
block|{
name|uint8_t
name|protocol_data
index|[
literal|8
index|]
decl_stmt|;
name|struct
name|regpair
name|mac_config_addr
decl_stmt|;
name|struct
name|eth_client_setup_ramrod_data
name|client_setup_ramrod_data
decl_stmt|;
name|struct
name|eth_halt_ramrod_data
name|halt_ramrod_data
decl_stmt|;
name|struct
name|regpair
name|leading_cqe_addr
decl_stmt|;
name|struct
name|regpair
name|update_data_addr
decl_stmt|;
name|struct
name|eth_query_ramrod_data
name|query_ramrod_data
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  * Ethernet slow path element.  */
end_comment

begin_struct
struct|struct
name|eth_spe
block|{
name|struct
name|spe_hdr
name|hdr
decl_stmt|;
name|union
name|eth_specific_data
name|data
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Array of 13 bds as appears in the eth xstorm context.  */
end_comment

begin_struct
struct|struct
name|eth_tx_bds_array
block|{
name|union
name|eth_tx_bd_types
name|bds
index|[
literal|13
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Common configuration parameters per function in Tstorm.  */
end_comment

begin_struct
struct|struct
name|tstorm_eth_function_common_config
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|leading_client_id
decl_stmt|;
name|uint8_t
name|rss_result_mask
decl_stmt|;
name|uint16_t
name|config_flags
decl_stmt|;
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_CAPABILITY
value|(0x1<< 0)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_CAPABILITY_SHIFT
value|0
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_TCP_CAPABILITY
value|(0x1<< 1)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_TCP_CAPABILITY_SHIFT
value|1
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_CAPABILITY
value|(0x1<< 2)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_CAPABILITY_SHIFT
value|2
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_TCP_CAPABILITY
value|(0x1<< 3)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_TCP_CAPABILITY_SHIFT
value|3
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_MODE
value|(0x7<< 4)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_MODE_SHIFT
value|4
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_DEFAULT_ENABLE
value|(0x1<< 7)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_DEFAULT_ENABLE_SHIFT
value|7
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_VLAN_IN_CAM
value|(0x1<< 8)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_VLAN_IN_CAM_SHIFT
value|8
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_E1HOV_IN_CAM
value|(0x1<< 9)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_E1HOV_IN_CAM_SHIFT
value|9
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_ENABLE_TPA
value|(0x1<< 10)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_ENABLE_TPA_SHIFT
value|10
define|#
directive|define
name|__TSTORM_ETH_FUNCTION_COMMON_CONFIG_RESERVED0
value|(0x1F<< 11)
define|#
directive|define
name|__TSTORM_ETH_FUNCTION_COMMON_CONFIG_RESERVED0_SHIFT
value|11
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|config_flags
decl_stmt|;
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_CAPABILITY
value|(0x1<< 0)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_CAPABILITY_SHIFT
value|0
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_TCP_CAPABILITY
value|(0x1<< 1)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV4_TCP_CAPABILITY_SHIFT
value|1
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_CAPABILITY
value|(0x1<< 2)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_CAPABILITY_SHIFT
value|2
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_TCP_CAPABILITY
value|(0x1<< 3)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_IPV6_TCP_CAPABILITY_SHIFT
value|3
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_MODE
value|(0x7<< 4)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_RSS_MODE_SHIFT
value|4
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_DEFAULT_ENABLE
value|(0x1<< 7)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_DEFAULT_ENABLE_SHIFT
value|7
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_VLAN_IN_CAM
value|(0x1<< 8)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_VLAN_IN_CAM_SHIFT
value|8
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_E1HOV_IN_CAM
value|(0x1<< 9)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_E1HOV_IN_CAM_SHIFT
value|9
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_ENABLE_TPA
value|(0x1<< 10)
define|#
directive|define
name|TSTORM_ETH_FUNCTION_COMMON_CONFIG_ENABLE_TPA_SHIFT
value|10
define|#
directive|define
name|__TSTORM_ETH_FUNCTION_COMMON_CONFIG_RESERVED0
value|(0x1F<< 11)
define|#
directive|define
name|__TSTORM_ETH_FUNCTION_COMMON_CONFIG_RESERVED0_SHIFT
value|11
name|uint8_t
name|rss_result_mask
decl_stmt|;
name|uint8_t
name|leading_client_id
decl_stmt|;
endif|#
directive|endif
name|uint16_t
name|vlan_id
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * RSS idirection table update configuration.  */
end_comment

begin_struct
struct|struct
name|rss_update_config
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|toe_rss_bitmap
decl_stmt|;
name|uint16_t
name|flags
decl_stmt|;
define|#
directive|define
name|RSS_UPDATE_CONFIG_ETH_UPDATE_ENABLE
value|(0x1<< 0)
define|#
directive|define
name|RSS_UPDATE_CONFIG_ETH_UPDATE_ENABLE_SHIFT
value|0
define|#
directive|define
name|RSS_UPDATE_CONFIG_TOE_UPDATE_ENABLE
value|(0x1<< 1)
define|#
directive|define
name|RSS_UPDATE_CONFIG_TOE_UPDATE_ENABLE_SHIFT
value|1
define|#
directive|define
name|__RSS_UPDATE_CONFIG_RESERVED0
value|(0x3FFF<< 2)
define|#
directive|define
name|__RSS_UPDATE_CONFIG_RESERVED0_SHIFT
value|2
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|flags
decl_stmt|;
define|#
directive|define
name|RSS_UPDATE_CONFIG_ETH_UPDATE_ENABLE
value|(0x1<< 0)
define|#
directive|define
name|RSS_UPDATE_CONFIG_ETH_UPDATE_ENABLE_SHIFT
value|0
define|#
directive|define
name|RSS_UPDATE_CONFIG_TOE_UPDATE_ENABLE
value|(0x1<< 1)
define|#
directive|define
name|RSS_UPDATE_CONFIG_TOE_UPDATE_ENABLE_SHIFT
value|1
define|#
directive|define
name|__RSS_UPDATE_CONFIG_RESERVED0
value|(0x3FFF<< 2)
define|#
directive|define
name|__RSS_UPDATE_CONFIG_RESERVED0_SHIFT
value|2
name|uint16_t
name|toe_rss_bitmap
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Parameters for eth update ramrod.  */
end_comment

begin_struct
struct|struct
name|eth_update_ramrod_data
block|{
name|struct
name|tstorm_eth_function_common_config
name|func_config
decl_stmt|;
name|uint8_t
name|indirectionTable
index|[
literal|128
index|]
decl_stmt|;
name|struct
name|rss_update_config
name|rss_config
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * MAC filtering configuration command header.  */
end_comment

begin_struct
struct|struct
name|mac_configuration_hdr
block|{
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|offset
decl_stmt|;
name|uint16_t
name|client_id
decl_stmt|;
name|uint32_t
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * MAC address in list for ramrod.  */
end_comment

begin_struct
struct|struct
name|tstorm_cam_entry
block|{
name|uint16_t
name|lsb_mac_addr
decl_stmt|;
name|uint16_t
name|middle_mac_addr
decl_stmt|;
name|uint16_t
name|msb_mac_addr
decl_stmt|;
name|uint16_t
name|flags
decl_stmt|;
define|#
directive|define
name|TSTORM_CAM_ENTRY_PORT_ID
value|(0x1<< 0)
define|#
directive|define
name|TSTORM_CAM_ENTRY_PORT_ID_SHIFT
value|0
define|#
directive|define
name|TSTORM_CAM_ENTRY_RSRVVAL0
value|(0x7<< 1)
define|#
directive|define
name|TSTORM_CAM_ENTRY_RSRVVAL0_SHIFT
value|1
define|#
directive|define
name|TSTORM_CAM_ENTRY_RESERVED0
value|(0xFFF<< 4)
define|#
directive|define
name|TSTORM_CAM_ENTRY_RESERVED0_SHIFT
value|4
block|}
struct|;
end_struct

begin_comment
comment|/*  * MAC filtering: CAM target table entry  */
end_comment

begin_struct
struct|struct
name|tstorm_cam_target_table_entry
block|{
name|uint8_t
name|flags
decl_stmt|;
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_BROADCAST
value|(0x1<< 0)
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_BROADCAST_SHIFT
value|0
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_OVERRIDE_VLAN_REMOVAL
value|(0x1<< 1)
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_OVERRIDE_VLAN_REMOVAL_SHIFT
value|1
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_ACTION_TYPE
value|(0x1<< 2)
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_ACTION_TYPE_SHIFT
value|2
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_RDMA_MAC
value|(0x1<< 3)
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_RDMA_MAC_SHIFT
value|3
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_RESERVED0
value|(0xF<< 4)
define|#
directive|define
name|TSTORM_CAM_TARGET_TABLE_ENTRY_RESERVED0_SHIFT
value|4
name|uint8_t
name|reserved1
decl_stmt|;
name|uint16_t
name|vlan_id
decl_stmt|;
name|uint32_t
name|clients_bit_vector
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * MAC address in list for ramrod.  */
end_comment

begin_struct
struct|struct
name|mac_configuration_entry
block|{
name|struct
name|tstorm_cam_entry
name|cam_entry
decl_stmt|;
name|struct
name|tstorm_cam_target_table_entry
name|target_table_entry
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * MAC filtering configuration command.  */
end_comment

begin_struct
struct|struct
name|mac_configuration_cmd
block|{
name|struct
name|mac_configuration_hdr
name|hdr
decl_stmt|;
name|struct
name|mac_configuration_entry
name|config_table
index|[
literal|64
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * MAC address in list for ramrod.  */
end_comment

begin_struct
struct|struct
name|mac_configuration_entry_e1h
block|{
name|uint16_t
name|lsb_mac_addr
decl_stmt|;
name|uint16_t
name|middle_mac_addr
decl_stmt|;
name|uint16_t
name|msb_mac_addr
decl_stmt|;
name|uint16_t
name|vlan_id
decl_stmt|;
name|uint16_t
name|e1hov_id
decl_stmt|;
name|uint8_t
name|reserved0
decl_stmt|;
name|uint8_t
name|flags
decl_stmt|;
define|#
directive|define
name|MAC_CONFIGURATION_ENTRY_E1H_PORT
value|(0x1<< 0)
define|#
directive|define
name|MAC_CONFIGURATION_ENTRY_E1H_PORT_SHIFT
value|0
define|#
directive|define
name|MAC_CONFIGURATION_ENTRY_E1H_ACTION_TYPE
value|(0x1<< 1)
define|#
directive|define
name|MAC_CONFIGURATION_ENTRY_E1H_ACTION_TYPE_SHIFT
value|1
define|#
directive|define
name|MAC_CONFIGURATION_ENTRY_E1H_RDMA_MAC
value|(0x1<< 2)
define|#
directive|define
name|MAC_CONFIGURATION_ENTRY_E1H_RDMA_MAC_SHIFT
value|2
define|#
directive|define
name|MAC_CONFIGURATION_ENTRY_E1H_RESERVED1
value|(0x1F<< 3)
define|#
directive|define
name|MAC_CONFIGURATION_ENTRY_E1H_RESERVED1_SHIFT
value|3
name|uint32_t
name|clients_bit_vector
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * MAC filtering configuration command.  */
end_comment

begin_struct
struct|struct
name|mac_configuration_cmd_e1h
block|{
name|struct
name|mac_configuration_hdr
name|hdr
decl_stmt|;
name|struct
name|mac_configuration_entry_e1h
name|config_table
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Approximate-match multicast filtering for E1H per function in Tstorm.  */
end_comment

begin_struct
struct|struct
name|tstorm_eth_approximate_match_multicast_filtering
block|{
name|uint32_t
name|mcast_add_hash_bit_array
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Configuration parameters per client in Tstorm.  */
end_comment

begin_struct
struct|struct
name|tstorm_eth_client_config
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|reserved0
decl_stmt|;
name|uint8_t
name|statistics_counter_id
decl_stmt|;
name|uint16_t
name|mtu
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|mtu
decl_stmt|;
name|uint8_t
name|statistics_counter_id
decl_stmt|;
name|uint8_t
name|reserved0
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|drop_flags
decl_stmt|;
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_IP_CS_ERR
value|(0x1<< 0)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_IP_CS_ERR_SHIFT
value|0
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_TCP_CS_ERR
value|(0x1<< 1)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_TCP_CS_ERR_SHIFT
value|1
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_TTL0
value|(0x1<< 2)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_TTL0_SHIFT
value|2
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_UDP_CS_ERR
value|(0x1<< 3)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_UDP_CS_ERR_SHIFT
value|3
define|#
directive|define
name|__TSTORM_ETH_CLIENT_CONFIG_RESERVED2
value|(0xFFF<< 4)
define|#
directive|define
name|__TSTORM_ETH_CLIENT_CONFIG_RESERVED2_SHIFT
value|4
name|uint16_t
name|config_flags
decl_stmt|;
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_VLAN_REM_ENABLE
value|(0x1<< 0)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_VLAN_REM_ENABLE_SHIFT
value|0
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_E1HOV_REM_ENABLE
value|(0x1<< 1)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_E1HOV_REM_ENABLE_SHIFT
value|1
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_STATSITICS_ENABLE
value|(0x1<< 2)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_STATSITICS_ENABLE_SHIFT
value|2
define|#
directive|define
name|__TSTORM_ETH_CLIENT_CONFIG_RESERVED1
value|(0x1FFF<< 3)
define|#
directive|define
name|__TSTORM_ETH_CLIENT_CONFIG_RESERVED1_SHIFT
value|3
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|config_flags
decl_stmt|;
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_VLAN_REM_ENABLE
value|(0x1<< 0)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_VLAN_REM_ENABLE_SHIFT
value|0
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_E1HOV_REM_ENABLE
value|(0x1<< 1)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_E1HOV_REM_ENABLE_SHIFT
value|1
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_STATSITICS_ENABLE
value|(0x1<< 2)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_STATSITICS_ENABLE_SHIFT
value|2
define|#
directive|define
name|__TSTORM_ETH_CLIENT_CONFIG_RESERVED1
value|(0x1FFF<< 3)
define|#
directive|define
name|__TSTORM_ETH_CLIENT_CONFIG_RESERVED1_SHIFT
value|3
name|uint16_t
name|drop_flags
decl_stmt|;
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_IP_CS_ERR
value|(0x1<< 0)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_IP_CS_ERR_SHIFT
value|0
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_TCP_CS_ERR
value|(0x1<< 1)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_TCP_CS_ERR_SHIFT
value|1
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_TTL0
value|(0x1<< 2)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_TTL0_SHIFT
value|2
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_UDP_CS_ERR
value|(0x1<< 3)
define|#
directive|define
name|TSTORM_ETH_CLIENT_CONFIG_DROP_UDP_CS_ERR_SHIFT
value|3
define|#
directive|define
name|__TSTORM_ETH_CLIENT_CONFIG_RESERVED2
value|(0xFFF<< 4)
define|#
directive|define
name|__TSTORM_ETH_CLIENT_CONFIG_RESERVED2_SHIFT
value|4
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * MAC filtering configuration parameters per port in Tstorm.  */
end_comment

begin_struct
struct|struct
name|tstorm_eth_mac_filter_config
block|{
name|uint32_t
name|ucast_drop_all
decl_stmt|;
name|uint32_t
name|ucast_accept_all
decl_stmt|;
name|uint32_t
name|mcast_drop_all
decl_stmt|;
name|uint32_t
name|mcast_accept_all
decl_stmt|;
name|uint32_t
name|bcast_drop_all
decl_stmt|;
name|uint32_t
name|bcast_accept_all
decl_stmt|;
name|uint32_t
name|strict_vlan
decl_stmt|;
name|uint32_t
name|vlan_filter
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Common flag to indicate existance of TPA.  */
end_comment

begin_struct
struct|struct
name|tstorm_eth_tpa_exist
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|reserved1
decl_stmt|;
name|uint8_t
name|reserved0
decl_stmt|;
name|uint8_t
name|tpa_exist
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|tpa_exist
decl_stmt|;
name|uint8_t
name|reserved0
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|reserved2
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * rx rings pause data for E1h only.  */
end_comment

begin_struct
struct|struct
name|ustorm_eth_rx_pause_data_e1h
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|bd_thr_low
decl_stmt|;
name|uint16_t
name|cqe_thr_low
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|cqe_thr_low
decl_stmt|;
name|uint16_t
name|bd_thr_low
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|cos
decl_stmt|;
name|uint16_t
name|sge_thr_low
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|sge_thr_low
decl_stmt|;
name|uint16_t
name|cos
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|bd_thr_high
decl_stmt|;
name|uint16_t
name|cqe_thr_high
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|cqe_thr_high
decl_stmt|;
name|uint16_t
name|bd_thr_high
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|reserved0
decl_stmt|;
name|uint16_t
name|sge_thr_high
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|sge_thr_high
decl_stmt|;
name|uint16_t
name|reserved0
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * Three RX producers for ETH.  */
end_comment

begin_struct
struct|struct
name|ustorm_eth_rx_producers
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|bd_prod
decl_stmt|;
name|uint16_t
name|cqe_prod
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|cqe_prod
decl_stmt|;
name|uint16_t
name|bd_prod
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|reserved
decl_stmt|;
name|uint16_t
name|sge_prod
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|sge_prod
decl_stmt|;
name|uint16_t
name|reserved
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * Per-port SAFC demo variables.  */
end_comment

begin_struct
struct|struct
name|cmng_flags_per_port
block|{
name|uint8_t
name|con_number
index|[
name|NUM_OF_PROTOCOLS
index|]
decl_stmt|;
name|uint32_t
name|cmng_enables
decl_stmt|;
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_FAIRNESS_VN
value|(0x1<< 0)
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_FAIRNESS_VN_SHIFT
value|0
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_RATE_SHAPING_VN
value|(0x1<< 1)
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_RATE_SHAPING_VN_SHIFT
value|1
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_FAIRNESS_PROTOCOL
value|(0x1<< 2)
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_FAIRNESS_PROTOCOL_SHIFT
value|2
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_RATE_SHAPING_PROTOCOL
value|(0x1<< 3)
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_RATE_SHAPING_PROTOCOL_SHIFT
value|3
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_FAIRNESS_COS
value|(0x1<< 4)
define|#
directive|define
name|CMNG_FLAGS_PER_PORT_FAIRNESS_COS_SHIFT
value|4
define|#
directive|define
name|__CMNG_FLAGS_PER_PORT_RESERVED0
value|(0x7FFFFFF<< 5)
define|#
directive|define
name|__CMNG_FLAGS_PER_PORT_RESERVED0_SHIFT
value|5
block|}
struct|;
end_struct

begin_comment
comment|/*  * Per-port rate shaping variables.  */
end_comment

begin_struct
struct|struct
name|rate_shaping_vars_per_port
block|{
name|uint32_t
name|rs_periodic_timeout
decl_stmt|;
name|uint32_t
name|rs_threshold
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Per-port fairness variables.  */
end_comment

begin_struct
struct|struct
name|fairness_vars_per_port
block|{
name|uint32_t
name|upper_bound
decl_stmt|;
name|uint32_t
name|fair_threshold
decl_stmt|;
name|uint32_t
name|fairness_timeout
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Per-port SAFC variables.  */
end_comment

begin_struct
struct|struct
name|safc_struct_per_port
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__reserved1
decl_stmt|;
name|uint8_t
name|__reserved0
decl_stmt|;
name|uint8_t
name|safc_timeout_usec
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|safc_timeout_usec
decl_stmt|;
name|uint8_t
name|__reserved0
decl_stmt|;
name|uint16_t
name|__reserved1
decl_stmt|;
endif|#
directive|endif
name|uint16_t
name|cos_to_pause_mask
index|[
name|NUM_OF_SAFC_BITS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Per-port congestion management variables.  */
end_comment

begin_struct
struct|struct
name|cmng_struct_per_port
block|{
name|struct
name|rate_shaping_vars_per_port
name|rs_vars
decl_stmt|;
name|struct
name|fairness_vars_per_port
name|fair_vars
decl_stmt|;
name|struct
name|safc_struct_per_port
name|safc_vars
decl_stmt|;
name|struct
name|cmng_flags_per_port
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Dynamic host coalescing init parameters.  */
end_comment

begin_struct
struct|struct
name|dynamic_hc_config
block|{
name|uint32_t
name|threshold
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|shift_per_protocol
index|[
name|HC_USTORM_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint8_t
name|hc_timeout0
index|[
name|HC_USTORM_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint8_t
name|hc_timeout1
index|[
name|HC_USTORM_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint8_t
name|hc_timeout2
index|[
name|HC_USTORM_SB_NUM_INDICES
index|]
decl_stmt|;
name|uint8_t
name|hc_timeout3
index|[
name|HC_USTORM_SB_NUM_INDICES
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Protocol-common statistics collected by the Xstorm (per client).  */
end_comment

begin_struct
struct|struct
name|xstorm_per_client_stats
block|{
name|uint32_t
name|reserved0
decl_stmt|;
name|uint32_t
name|unicast_pkts_sent
decl_stmt|;
name|struct
name|regpair
name|unicast_bytes_sent
decl_stmt|;
name|struct
name|regpair
name|multicast_bytes_sent
decl_stmt|;
name|uint32_t
name|multicast_pkts_sent
decl_stmt|;
name|uint32_t
name|broadcast_pkts_sent
decl_stmt|;
name|struct
name|regpair
name|broadcast_bytes_sent
decl_stmt|;
name|uint16_t
name|stats_counter
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
name|uint32_t
name|reserved2
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Common statistics collected by the Xstorm (per port).  */
end_comment

begin_struct
struct|struct
name|xstorm_common_stats
block|{
name|struct
name|xstorm_per_client_stats
name|client_statistics
index|[
name|MAX_X_STAT_COUNTER_ID
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Protocol-common statistics collected by the Tstorm (per port).  */
end_comment

begin_struct
struct|struct
name|tstorm_per_port_stats
block|{
name|uint32_t
name|mac_filter_discard
decl_stmt|;
name|uint32_t
name|xxoverflow_discard
decl_stmt|;
name|uint32_t
name|brb_truncate_discard
decl_stmt|;
name|uint32_t
name|mac_discard
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Protocol-common statistics collected by the Tstorm (per client).  */
end_comment

begin_struct
struct|struct
name|tstorm_per_client_stats
block|{
name|struct
name|regpair
name|rcv_unicast_bytes
decl_stmt|;
name|struct
name|regpair
name|rcv_broadcast_bytes
decl_stmt|;
name|struct
name|regpair
name|rcv_multicast_bytes
decl_stmt|;
name|struct
name|regpair
name|rcv_error_bytes
decl_stmt|;
name|uint32_t
name|checksum_discard
decl_stmt|;
name|uint32_t
name|packets_too_big_discard
decl_stmt|;
name|uint32_t
name|rcv_unicast_pkts
decl_stmt|;
name|uint32_t
name|rcv_broadcast_pkts
decl_stmt|;
name|uint32_t
name|rcv_multicast_pkts
decl_stmt|;
name|uint32_t
name|no_buff_discard
decl_stmt|;
name|uint32_t
name|ttl0_discard
decl_stmt|;
name|uint16_t
name|stats_counter
decl_stmt|;
name|uint16_t
name|reserved0
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Protocol-common statistics collected by the Tstorm.  */
end_comment

begin_struct
struct|struct
name|tstorm_common_stats
block|{
name|struct
name|tstorm_per_port_stats
name|port_statistics
decl_stmt|;
name|struct
name|tstorm_per_client_stats
name|client_statistics
index|[
name|MAX_T_STAT_COUNTER_ID
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Protocol-common statistics collected by the Ustorm (per client).  */
end_comment

begin_struct
struct|struct
name|ustorm_per_client_stats
block|{
name|struct
name|regpair
name|ucast_no_buff_bytes
decl_stmt|;
name|struct
name|regpair
name|mcast_no_buff_bytes
decl_stmt|;
name|struct
name|regpair
name|bcast_no_buff_bytes
decl_stmt|;
name|uint32_t
name|ucast_no_buff_pkts
decl_stmt|;
name|uint32_t
name|mcast_no_buff_pkts
decl_stmt|;
name|uint32_t
name|bcast_no_buff_pkts
decl_stmt|;
name|uint16_t
name|stats_counter
decl_stmt|;
name|uint16_t
name|reserved0
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Protocol-common statistics collected by the Ustorm.  */
end_comment

begin_struct
struct|struct
name|ustorm_common_stats
block|{
name|struct
name|ustorm_per_client_stats
name|client_statistics
index|[
name|MAX_U_STAT_COUNTER_ID
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Eth statistics query structure for the eth_stats_query ramrod.  */
end_comment

begin_struct
struct|struct
name|eth_stats_query
block|{
name|struct
name|xstorm_common_stats
name|xstorm_common
decl_stmt|;
name|struct
name|tstorm_common_stats
name|tstorm_common
decl_stmt|;
name|struct
name|ustorm_common_stats
name|ustorm_common
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Per-vnic fairness variables.  */
end_comment

begin_struct
struct|struct
name|fairness_vars_per_vn
block|{
name|uint32_t
name|cos_credit_delta
index|[
name|MAX_COS_NUMBER
index|]
decl_stmt|;
name|uint32_t
name|protocol_credit_delta
index|[
name|NUM_OF_PROTOCOLS
index|]
decl_stmt|;
name|uint32_t
name|vn_credit_delta
decl_stmt|;
name|uint32_t
name|__reserved0
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * FW version stored in the Xstorm RAM.  */
end_comment

begin_struct
struct|struct
name|fw_version
block|{
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint8_t
name|engineering
decl_stmt|;
name|uint8_t
name|revision
decl_stmt|;
name|uint8_t
name|minor
decl_stmt|;
name|uint8_t
name|major
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint8_t
name|major
decl_stmt|;
name|uint8_t
name|minor
decl_stmt|;
name|uint8_t
name|revision
decl_stmt|;
name|uint8_t
name|engineering
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|FW_VERSION_OPTIMIZED
value|(0x1<< 0)
define|#
directive|define
name|FW_VERSION_OPTIMIZED_SHIFT
value|0
define|#
directive|define
name|FW_VERSION_BIG_ENDIEN
value|(0x1<< 1)
define|#
directive|define
name|FW_VERSION_BIG_ENDIEN_SHIFT
value|1
define|#
directive|define
name|FW_VERSION_CHIP_VERSION
value|(0x3<< 2)
define|#
directive|define
name|FW_VERSION_CHIP_VERSION_SHIFT
value|2
define|#
directive|define
name|__FW_VERSION_RESERVED
value|(0xFFFFFFF<< 4)
define|#
directive|define
name|__FW_VERSION_RESERVED_SHIFT
value|4
block|}
struct|;
end_struct

begin_comment
comment|/*  * FW version stored in first line of pram.  */
end_comment

begin_struct
struct|struct
name|pram_fw_version
block|{
name|uint8_t
name|major
decl_stmt|;
name|uint8_t
name|minor
decl_stmt|;
name|uint8_t
name|revision
decl_stmt|;
name|uint8_t
name|engineering
decl_stmt|;
name|uint8_t
name|flags
decl_stmt|;
define|#
directive|define
name|PRAM_FW_VERSION_OPTIMIZED
value|(0x1<< 0)
define|#
directive|define
name|PRAM_FW_VERSION_OPTIMIZED_SHIFT
value|0
define|#
directive|define
name|PRAM_FW_VERSION_STORM_ID
value|(0x3<< 1)
define|#
directive|define
name|PRAM_FW_VERSION_STORM_ID_SHIFT
value|1
define|#
directive|define
name|PRAM_FW_VERSION_BIG_ENDIEN
value|(0x1<< 3)
define|#
directive|define
name|PRAM_FW_VERSION_BIG_ENDIEN_SHIFT
value|3
define|#
directive|define
name|PRAM_FW_VERSION_CHIP_VERSION
value|(0x3<< 4)
define|#
directive|define
name|PRAM_FW_VERSION_CHIP_VERSION_SHIFT
value|4
define|#
directive|define
name|__PRAM_FW_VERSION_RESERVED0
value|(0x3<< 6)
define|#
directive|define
name|__PRAM_FW_VERSION_RESERVED0_SHIFT
value|6
block|}
struct|;
end_struct

begin_comment
comment|/*  * The send queue element.  */
end_comment

begin_struct
struct|struct
name|protocol_common_spe
block|{
name|struct
name|spe_hdr
name|hdr
decl_stmt|;
name|struct
name|regpair
name|phy_address
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * A single rate shaping counter. can be used as protocol or vnic counter.  */
end_comment

begin_struct
struct|struct
name|rate_shaping_counter
block|{
name|uint32_t
name|quota
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
name|uint16_t
name|__reserved0
decl_stmt|;
name|uint16_t
name|rate
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
name|uint16_t
name|rate
decl_stmt|;
name|uint16_t
name|__reserved0
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/*  * Per-vnic rate shaping variables.  */
end_comment

begin_struct
struct|struct
name|rate_shaping_vars_per_vn
block|{
name|struct
name|rate_shaping_counter
name|protocol_counters
index|[
name|NUM_OF_PROTOCOLS
index|]
decl_stmt|;
name|struct
name|rate_shaping_counter
name|vn_counter
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The send queue element.  */
end_comment

begin_struct
struct|struct
name|slow_path_element
block|{
name|struct
name|spe_hdr
name|hdr
decl_stmt|;
name|uint8_t
name|protocol_data
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * eth/toe flags that indicate if to query.  */
end_comment

begin_struct
struct|struct
name|stats_indication_flags
block|{
name|uint32_t
name|collect_eth
decl_stmt|;
name|uint32_t
name|collect_toe
decl_stmt|;
block|}
struct|;
end_struct

end_unit

