begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010-2011 Aleksandr Rybalko<ray@ddteam.net>  * Copyright (c) 2009-2010 Alexander Egorenkov<egorenar@gmail.com>  * Copyright (c) 2009 Damien Bergamini<damien.bergamini@free.fr>  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IF_RTVAR_H_
end_ifndef

begin_define
define|#
directive|define
name|_IF_RTVAR_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/sysctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/sockio.h>
end_include

begin_include
include|#
directive|include
file|<sys/mbuf.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<sys/taskqueue.h>
end_include

begin_include
include|#
directive|include
file|<sys/module.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus.h>
end_include

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/resource.h>
end_include

begin_include
include|#
directive|include
file|<sys/rman.h>
end_include

begin_include
include|#
directive|include
file|<net/bpf.h>
end_include

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_include
include|#
directive|include
file|<net/if_arp.h>
end_include

begin_include
include|#
directive|include
file|<net/ethernet.h>
end_include

begin_include
include|#
directive|include
file|<net/if_dl.h>
end_include

begin_include
include|#
directive|include
file|<net/if_media.h>
end_include

begin_include
include|#
directive|include
file|<net/if_types.h>
end_include

begin_include
include|#
directive|include
file|"opt_if_rt.h"
end_include

begin_define
define|#
directive|define
name|RT_SOFTC_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->lock)
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->lock)
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_ASSERT_LOCKED
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->lock, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_TX_RING_LOCK
parameter_list|(
name|ring
parameter_list|)
value|mtx_lock(&(ring)->lock)
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_TX_RING_UNLOCK
parameter_list|(
name|ring
parameter_list|)
value|mtx_unlock(&(ring)->lock)
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_TX_RING_ASSERT_LOCKED
parameter_list|(
name|ring
parameter_list|)
define|\
value|mtx_assert(&(ring)->lock, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_TX_RING_COUNT
value|4
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_RX_RING_COUNT
value|4
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|IF_RT_RING_DATA_COUNT
end_ifndef

begin_define
define|#
directive|define
name|IF_RT_RING_DATA_COUNT
value|128
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|RT_SOFTC_RX_RING_DATA_COUNT
value|IF_RT_RING_DATA_COUNT
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_MAX_SCATTER
value|10
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_TX_RING_DATA_COUNT
value|(IF_RT_RING_DATA_COUNT/4)
end_define

begin_define
define|#
directive|define
name|RT_SOFTC_TX_RING_DESC_COUNT
define|\
value|(RT_SOFTC_TX_RING_DATA_COUNT * RT_SOFTC_MAX_SCATTER)
end_define

begin_define
define|#
directive|define
name|RT_TXDESC_SDL1_BURST
value|(1<< 15)
end_define

begin_define
define|#
directive|define
name|RT_TXDESC_SDL1_LASTSEG
value|(1<< 14)
end_define

begin_define
define|#
directive|define
name|RT_TXDESC_SDL0_DDONE
value|(1<< 15)
end_define

begin_define
define|#
directive|define
name|RT_TXDESC_SDL0_LASTSEG
value|(1<< 14)
end_define

begin_struct
struct|struct
name|rt_txdesc
block|{
name|uint32_t
name|sdp0
decl_stmt|;
name|uint16_t
name|sdl1
decl_stmt|;
name|uint16_t
name|sdl0
decl_stmt|;
name|uint32_t
name|sdp1
decl_stmt|;
name|uint8_t
name|vid
decl_stmt|;
define|#
directive|define
name|TXDSCR_INS_VLAN_TAG
value|0x80
define|#
directive|define
name|TXDSCR_VLAN_PRIO_MASK
value|0x70
define|#
directive|define
name|TXDSCR_VLAN_IDX_MASK
value|0x0f
name|uint8_t
name|pppoe
decl_stmt|;
define|#
directive|define
name|TXDSCR_USR_DEF_FLD
value|0x80
define|#
directive|define
name|TXDSCR_INS_PPPOE_HDR
value|0x10
define|#
directive|define
name|TXDSCR_PPPOE_SID_MASK
value|0x0f
name|uint8_t
name|qn
decl_stmt|;
define|#
directive|define
name|TXDSCR_QUEUE_MASK
value|0x07
name|uint8_t
name|dst
decl_stmt|;
define|#
directive|define
name|TXDSCR_IP_CSUM_GEN
value|0x80
define|#
directive|define
name|TXDSCR_UDP_CSUM_GEN
value|0x40
define|#
directive|define
name|TXDSCR_TCP_CSUM_GEN
value|0x20
define|#
directive|define
name|TXDSCR_DST_PORT_MASK
value|0x07
define|#
directive|define
name|TXDSCR_DST_PORT_CPU
value|0x00
define|#
directive|define
name|TXDSCR_DST_PORT_GDMA1
value|0x01
define|#
directive|define
name|TXDSCR_DST_PORT_GDMA2
value|0x02
define|#
directive|define
name|TXDSCR_DST_PORT_PPE
value|0x06
define|#
directive|define
name|TXDSCR_DST_PORT_DISC
value|0x07
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|RT_RXDESC_SDL0_DDONE
value|(1<< 15)
end_define

begin_define
define|#
directive|define
name|RT305X_RXD_SRC_L4_CSUM_FAIL
value|(1<< 28)
end_define

begin_define
define|#
directive|define
name|RT305X_RXD_SRC_IP_CSUM_FAIL
value|(1<< 29)
end_define

begin_define
define|#
directive|define
name|MT7620_RXD_SRC_L4_CSUM_FAIL
value|(1<< 22)
end_define

begin_define
define|#
directive|define
name|MT7620_RXD_SRC_IP_CSUM_FAIL
value|(1<< 25)
end_define

begin_define
define|#
directive|define
name|MT7621_RXD_SRC_L4_CSUM_FAIL
value|(1<< 23)
end_define

begin_define
define|#
directive|define
name|MT7621_RXD_SRC_IP_CSUM_FAIL
value|(1<< 26)
end_define

begin_struct
struct|struct
name|rt_rxdesc
block|{
name|uint32_t
name|sdp0
decl_stmt|;
name|uint16_t
name|sdl1
decl_stmt|;
name|uint16_t
name|sdl0
decl_stmt|;
name|uint32_t
name|sdp1
decl_stmt|;
if|#
directive|if
literal|0
block|uint16_t foe;
define|#
directive|define
name|RXDSXR_FOE_ENTRY_VALID
value|0x40
define|#
directive|define
name|RXDSXR_FOE_ENTRY_MASK
value|0x3f
block|uint8_t ai;
define|#
directive|define
name|RXDSXR_AI_COU_REASON
value|0xff
define|#
directive|define
name|RXDSXR_AI_PARSER_RSLT_MASK
value|0xff
block|uint8_t src;
define|#
directive|define
name|RXDSXR_SRC_IPFVLD
value|0x80
define|#
directive|define
name|RXDSXR_SRC_L4FVLD
value|0x40
define|#
directive|define
name|RXDSXR_SRC_IP_CSUM_FAIL
value|0x20
define|#
directive|define
name|RXDSXR_SRC_L4_CSUM_FAIL
value|0x10
define|#
directive|define
name|RXDSXR_SRC_AIS
value|0x08
define|#
directive|define
name|RXDSXR_SRC_PORT_MASK
value|0x07
endif|#
directive|endif
name|uint32_t
name|word3
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|rt_softc_rx_data
block|{
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|rt_softc_rx_ring
block|{
name|bus_dma_tag_t
name|desc_dma_tag
decl_stmt|;
name|bus_dmamap_t
name|desc_dma_map
decl_stmt|;
name|bus_addr_t
name|desc_phys_addr
decl_stmt|;
name|struct
name|rt_rxdesc
modifier|*
name|desc
decl_stmt|;
name|bus_dma_tag_t
name|data_dma_tag
decl_stmt|;
name|bus_dmamap_t
name|spare_dma_map
decl_stmt|;
name|struct
name|rt_softc_rx_data
name|data
index|[
name|RT_SOFTC_RX_RING_DATA_COUNT
index|]
decl_stmt|;
name|int
name|cur
decl_stmt|;
name|int
name|qid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|rt_softc_tx_data
block|{
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|rt_softc_tx_ring
block|{
name|struct
name|mtx
name|lock
decl_stmt|;
name|bus_dma_tag_t
name|desc_dma_tag
decl_stmt|;
name|bus_dmamap_t
name|desc_dma_map
decl_stmt|;
name|bus_addr_t
name|desc_phys_addr
decl_stmt|;
name|struct
name|rt_txdesc
modifier|*
name|desc
decl_stmt|;
name|int
name|desc_queued
decl_stmt|;
name|int
name|desc_cur
decl_stmt|;
name|int
name|desc_next
decl_stmt|;
name|bus_dma_tag_t
name|seg0_dma_tag
decl_stmt|;
name|bus_dmamap_t
name|seg0_dma_map
decl_stmt|;
name|bus_addr_t
name|seg0_phys_addr
decl_stmt|;
name|uint8_t
modifier|*
name|seg0
decl_stmt|;
name|bus_dma_tag_t
name|data_dma_tag
decl_stmt|;
name|struct
name|rt_softc_tx_data
name|data
index|[
name|RT_SOFTC_TX_RING_DATA_COUNT
index|]
decl_stmt|;
name|int
name|data_queued
decl_stmt|;
name|int
name|data_cur
decl_stmt|;
name|int
name|data_next
decl_stmt|;
name|int
name|qid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|rt_softc
block|{
name|device_t
name|dev
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|int
name|mem_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|mem
decl_stmt|;
name|int
name|irq_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq
decl_stmt|;
name|void
modifier|*
name|irqh
decl_stmt|;
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
decl_stmt|;
name|int
name|if_flags
decl_stmt|;
name|struct
name|ifmedia
name|rt_ifmedia
decl_stmt|;
name|uint32_t
name|mac_rev
decl_stmt|;
name|uint8_t
name|mac_addr
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|device_t
name|rt_miibus
decl_stmt|;
name|uint32_t
name|intr_enable_mask
decl_stmt|;
name|uint32_t
name|intr_disable_mask
decl_stmt|;
name|uint32_t
name|intr_pending_mask
decl_stmt|;
name|struct
name|task
name|rx_done_task
decl_stmt|;
name|int
name|rx_process_limit
decl_stmt|;
name|struct
name|task
name|tx_done_task
decl_stmt|;
name|struct
name|task
name|periodic_task
decl_stmt|;
name|struct
name|callout
name|periodic_ch
decl_stmt|;
name|unsigned
name|long
name|periodic_round
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|taskqueue
decl_stmt|;
name|struct
name|rt_softc_rx_ring
name|rx_ring
index|[
name|RT_SOFTC_RX_RING_COUNT
index|]
decl_stmt|;
name|struct
name|rt_softc_tx_ring
name|tx_ring
index|[
name|RT_SOFTC_TX_RING_COUNT
index|]
decl_stmt|;
name|int
name|tx_ring_mgtqid
decl_stmt|;
name|struct
name|callout
name|tx_watchdog_ch
decl_stmt|;
name|int
name|tx_timer
decl_stmt|;
comment|/* statistic counters */
name|unsigned
name|long
name|interrupts
decl_stmt|;
name|unsigned
name|long
name|tx_coherent_interrupts
decl_stmt|;
name|unsigned
name|long
name|rx_coherent_interrupts
decl_stmt|;
name|unsigned
name|long
name|rx_interrupts
index|[
name|RT_SOFTC_RX_RING_COUNT
index|]
decl_stmt|;
name|unsigned
name|long
name|rx_delay_interrupts
decl_stmt|;
name|unsigned
name|long
name|tx_interrupts
index|[
name|RT_SOFTC_TX_RING_COUNT
index|]
decl_stmt|;
name|unsigned
name|long
name|tx_delay_interrupts
decl_stmt|;
name|unsigned
name|long
name|tx_data_queue_full
index|[
name|RT_SOFTC_TX_RING_COUNT
index|]
decl_stmt|;
name|unsigned
name|long
name|tx_watchdog_timeouts
decl_stmt|;
name|unsigned
name|long
name|tx_defrag_packets
decl_stmt|;
name|unsigned
name|long
name|no_tx_desc_avail
decl_stmt|;
name|unsigned
name|long
name|rx_mbuf_alloc_errors
decl_stmt|;
name|unsigned
name|long
name|rx_mbuf_dmamap_errors
decl_stmt|;
name|unsigned
name|long
name|tx_queue_not_empty
index|[
literal|2
index|]
decl_stmt|;
name|unsigned
name|long
name|rx_bytes
decl_stmt|;
name|unsigned
name|long
name|rx_packets
decl_stmt|;
name|unsigned
name|long
name|rx_crc_err
decl_stmt|;
name|unsigned
name|long
name|rx_phy_err
decl_stmt|;
name|unsigned
name|long
name|rx_dup_packets
decl_stmt|;
name|unsigned
name|long
name|rx_fifo_overflows
decl_stmt|;
name|unsigned
name|long
name|rx_short_err
decl_stmt|;
name|unsigned
name|long
name|rx_long_err
decl_stmt|;
name|unsigned
name|long
name|tx_bytes
decl_stmt|;
name|unsigned
name|long
name|tx_packets
decl_stmt|;
name|unsigned
name|long
name|tx_skip
decl_stmt|;
name|unsigned
name|long
name|tx_collision
decl_stmt|;
name|int
name|phy_addr
decl_stmt|;
ifdef|#
directive|ifdef
name|IF_RT_DEBUG
name|int
name|debug
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|rt_chipid
decl_stmt|;
comment|/* chip specific registers config */
name|int
name|rx_ring_count
decl_stmt|;
name|uint32_t
name|csum_fail_l4
decl_stmt|;
name|uint32_t
name|csum_fail_ip
decl_stmt|;
name|uint32_t
name|int_rx_done_mask
decl_stmt|;
name|uint32_t
name|int_tx_done_mask
decl_stmt|;
name|uint32_t
name|delay_int_cfg
decl_stmt|;
name|uint32_t
name|fe_int_status
decl_stmt|;
name|uint32_t
name|fe_int_enable
decl_stmt|;
name|uint32_t
name|pdma_glo_cfg
decl_stmt|;
name|uint32_t
name|pdma_rst_idx
decl_stmt|;
name|uint32_t
name|tx_base_ptr
index|[
name|RT_SOFTC_TX_RING_COUNT
index|]
decl_stmt|;
name|uint32_t
name|tx_max_cnt
index|[
name|RT_SOFTC_TX_RING_COUNT
index|]
decl_stmt|;
name|uint32_t
name|tx_ctx_idx
index|[
name|RT_SOFTC_TX_RING_COUNT
index|]
decl_stmt|;
name|uint32_t
name|tx_dtx_idx
index|[
name|RT_SOFTC_TX_RING_COUNT
index|]
decl_stmt|;
name|uint32_t
name|rx_base_ptr
index|[
name|RT_SOFTC_RX_RING_COUNT
index|]
decl_stmt|;
name|uint32_t
name|rx_max_cnt
index|[
name|RT_SOFTC_RX_RING_COUNT
index|]
decl_stmt|;
name|uint32_t
name|rx_calc_idx
index|[
name|RT_SOFTC_RX_RING_COUNT
index|]
decl_stmt|;
name|uint32_t
name|rx_drx_idx
index|[
name|RT_SOFTC_RX_RING_COUNT
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|IF_RT_DEBUG
end_ifdef

begin_enum
enum|enum
block|{
name|RT_DEBUG_RX
init|=
literal|0x00000001
block|,
name|RT_DEBUG_TX
init|=
literal|0x00000002
block|,
name|RT_DEBUG_INTR
init|=
literal|0x00000004
block|,
name|RT_DEBUG_STATE
init|=
literal|0x00000008
block|,
name|RT_DEBUG_STATS
init|=
literal|0x00000010
block|,
name|RT_DEBUG_PERIODIC
init|=
literal|0x00000020
block|,
name|RT_DEBUG_WATCHDOG
init|=
literal|0x00000040
block|,
name|RT_DEBUG_ANY
init|=
literal|0xffffffff
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|RT_DPRINTF
parameter_list|(
name|sc
parameter_list|,
name|m
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|do { if ((sc)->debug& (m)) 		\ 	    device_printf(sc->dev, fmt, ## __VA_ARGS__); } while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|RT_DPRINTF
parameter_list|(
name|sc
parameter_list|,
name|m
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* #ifdef IF_RT_DEBUG */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* #ifndef _IF_RTVAR_H_ */
end_comment

end_unit

