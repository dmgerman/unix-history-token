begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $NetBSD: awivar.h,v 1.12 2000/07/21 04:48:56 onoe Exp $ */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 1999 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Bill Sommerfeld  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *        This product includes software developed by the NetBSD  *        Foundation, Inc. and its contributors.  * 4. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/* timer values in msec */
end_comment

begin_define
define|#
directive|define
name|AWI_SELFTEST_TIMEOUT
value|5000
end_define

begin_define
define|#
directive|define
name|AWI_CMD_TIMEOUT
value|2000
end_define

begin_define
define|#
directive|define
name|AWI_LOCKOUT_TIMEOUT
value|50
end_define

begin_define
define|#
directive|define
name|AWI_ASCAN_DURATION
value|100
end_define

begin_define
define|#
directive|define
name|AWI_ASCAN_WAIT
value|3000
end_define

begin_define
define|#
directive|define
name|AWI_PSCAN_DURATION
value|200
end_define

begin_define
define|#
directive|define
name|AWI_PSCAN_WAIT
value|5000
end_define

begin_define
define|#
directive|define
name|AWI_TRANS_TIMEOUT
value|2000
end_define

begin_define
define|#
directive|define
name|AWI_NTXBUFS
value|4
end_define

begin_define
define|#
directive|define
name|AWI_MAX_KEYLEN
value|16
end_define

begin_enum
enum|enum
name|awi_status
block|{
name|AWI_ST_INIT
block|,
name|AWI_ST_SCAN
block|,
name|AWI_ST_SETSS
block|,
name|AWI_ST_SYNC
block|,
name|AWI_ST_AUTH
block|,
name|AWI_ST_ASSOC
block|,
name|AWI_ST_RUNNING
block|}
enum|;
end_enum

begin_struct
struct|struct
name|awi_bss
block|{
name|TAILQ_ENTRY
argument_list|(
argument|awi_bss
argument_list|)
name|list
expr_stmt|;
name|u_int8_t
name|esrc
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|u_int8_t
name|chanset
decl_stmt|;
comment|/* channel set to use */
name|u_int8_t
name|pattern
decl_stmt|;
comment|/* hop pattern to use */
name|u_int8_t
name|index
decl_stmt|;
comment|/* index to use */
name|u_int8_t
name|rssi
decl_stmt|;
comment|/* strength of this beacon */
name|u_int16_t
name|dwell_time
decl_stmt|;
comment|/* dwell time */
name|u_int8_t
name|timestamp
index|[
literal|8
index|]
decl_stmt|;
comment|/* timestamp of this bss */
name|u_int8_t
name|bssid
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|u_int16_t
name|capinfo
decl_stmt|;
name|u_int32_t
name|rxtime
decl_stmt|;
comment|/* unit's local time */
name|u_int16_t
name|interval
decl_stmt|;
comment|/* beacon interval */
name|u_int8_t
name|txrate
decl_stmt|;
name|u_int8_t
name|fails
decl_stmt|;
name|u_int8_t
name|essid
index|[
name|IEEE80211_NWID_LEN
operator|+
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|awi_wep_algo
block|{
name|char
modifier|*
name|awa_name
decl_stmt|;
name|int
argument_list|(
argument|*awa_ctxlen
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*awa_setkey
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|u_char
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*awa_encrypt
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|u_char
operator|*
operator|,
name|u_char
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*awa_decrypt
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|u_char
operator|*
operator|,
name|u_char
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|awi_softc
block|{
ifdef|#
directive|ifdef
name|__NetBSD__
name|struct
name|device
name|sc_dev
decl_stmt|;
name|struct
name|ethercom
name|sc_ec
decl_stmt|;
name|void
modifier|*
name|sc_ih
decl_stmt|;
comment|/* interrupt handler */
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__FreeBSD__
if|#
directive|if
name|__FreeBSD__
operator|>=
literal|4
struct|struct
block|{
name|char
name|dv_xname
index|[
literal|64
index|]
decl_stmt|;
comment|/*XXX*/
block|}
name|sc_dev
struct|;
else|#
directive|else
name|struct
name|device
name|sc_dev
decl_stmt|;
endif|#
directive|endif
name|struct
name|arpcom
name|sc_ec
decl_stmt|;
endif|#
directive|endif
name|struct
name|am79c930_softc
name|sc_chip
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|int
argument_list|(
argument|*sc_enable
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*sc_disable
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|ifmedia
name|sc_media
decl_stmt|;
name|enum
name|awi_status
name|sc_status
decl_stmt|;
name|unsigned
name|int
name|sc_enabled
range|:
literal|1
decl_stmt|,
name|sc_busy
range|:
literal|1
decl_stmt|,
name|sc_cansleep
range|:
literal|1
decl_stmt|,
name|sc_invalid
range|:
literal|1
decl_stmt|,
name|sc_enab_intr
range|:
literal|1
decl_stmt|,
name|sc_format_llc
range|:
literal|1
decl_stmt|,
name|sc_start_bss
range|:
literal|1
decl_stmt|,
name|sc_rawbpf
range|:
literal|1
decl_stmt|,
name|sc_no_bssid
range|:
literal|1
decl_stmt|,
name|sc_active_scan
range|:
literal|1
decl_stmt|,
name|sc_attached
range|:
literal|1
decl_stmt|;
comment|/* attach has succeeded */
name|u_int8_t
name|sc_cmd_inprog
decl_stmt|;
name|int
name|sc_sleep_cnt
decl_stmt|;
name|int
name|sc_mgt_timer
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|awi_bss
argument_list|)
name|sc_scan
expr_stmt|;
name|u_int8_t
name|sc_scan_cur
decl_stmt|;
name|u_int8_t
name|sc_scan_min
decl_stmt|;
name|u_int8_t
name|sc_scan_max
decl_stmt|;
name|u_int8_t
name|sc_scan_set
decl_stmt|;
name|struct
name|awi_bss
name|sc_bss
decl_stmt|;
name|u_int8_t
name|sc_ownssid
index|[
name|IEEE80211_NWID_LEN
operator|+
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|sc_ownch
decl_stmt|;
name|int
name|sc_rx_timer
decl_stmt|;
name|u_int32_t
name|sc_rxdoff
decl_stmt|;
name|u_int32_t
name|sc_rxmoff
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|sc_rxpend
decl_stmt|;
name|int
name|sc_tx_timer
decl_stmt|;
name|u_int8_t
name|sc_tx_rate
decl_stmt|;
name|struct
name|ifqueue
name|sc_mgtq
decl_stmt|;
name|u_int32_t
name|sc_txbase
decl_stmt|;
name|u_int32_t
name|sc_txend
decl_stmt|;
name|u_int32_t
name|sc_txnext
decl_stmt|;
name|u_int32_t
name|sc_txdone
decl_stmt|;
name|int
name|sc_wep_keylen
index|[
name|IEEE80211_WEP_NKID
index|]
decl_stmt|;
comment|/* keylen */
name|u_int8_t
name|sc_wep_key
index|[
name|IEEE80211_WEP_NKID
index|]
index|[
name|AWI_MAX_KEYLEN
index|]
decl_stmt|;
name|int
name|sc_wep_defkid
decl_stmt|;
name|void
modifier|*
name|sc_wep_ctx
decl_stmt|;
comment|/* work area */
name|struct
name|awi_wep_algo
modifier|*
name|sc_wep_algo
decl_stmt|;
name|u_char
name|sc_banner
index|[
name|AWI_BANNER_LEN
index|]
decl_stmt|;
name|struct
name|awi_mib_local
name|sc_mib_local
decl_stmt|;
name|struct
name|awi_mib_addr
name|sc_mib_addr
decl_stmt|;
name|struct
name|awi_mib_mac
name|sc_mib_mac
decl_stmt|;
name|struct
name|awi_mib_stat
name|sc_mib_stat
decl_stmt|;
name|struct
name|awi_mib_mgt
name|sc_mib_mgt
decl_stmt|;
name|struct
name|awi_mib_phy
name|sc_mib_phy
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|awi_read_1
parameter_list|(
name|sc
parameter_list|,
name|off
parameter_list|)
value|((sc)->sc_chip.sc_ops->read_1)(&sc->sc_chip, off)
end_define

begin_define
define|#
directive|define
name|awi_read_2
parameter_list|(
name|sc
parameter_list|,
name|off
parameter_list|)
value|((sc)->sc_chip.sc_ops->read_2)(&sc->sc_chip, off)
end_define

begin_define
define|#
directive|define
name|awi_read_4
parameter_list|(
name|sc
parameter_list|,
name|off
parameter_list|)
value|((sc)->sc_chip.sc_ops->read_4)(&sc->sc_chip, off)
end_define

begin_define
define|#
directive|define
name|awi_read_bytes
parameter_list|(
name|sc
parameter_list|,
name|off
parameter_list|,
name|ptr
parameter_list|,
name|len
parameter_list|)
value|((sc)->sc_chip.sc_ops->read_bytes)(&sc->sc_chip, off, ptr, len)
end_define

begin_define
define|#
directive|define
name|awi_write_1
parameter_list|(
name|sc
parameter_list|,
name|off
parameter_list|,
name|val
parameter_list|)
define|\
value|((sc)->sc_chip.sc_ops->write_1)(&sc->sc_chip, off, val)
end_define

begin_define
define|#
directive|define
name|awi_write_2
parameter_list|(
name|sc
parameter_list|,
name|off
parameter_list|,
name|val
parameter_list|)
define|\
value|((sc)->sc_chip.sc_ops->write_2)(&sc->sc_chip, off, val)
end_define

begin_define
define|#
directive|define
name|awi_write_4
parameter_list|(
name|sc
parameter_list|,
name|off
parameter_list|,
name|val
parameter_list|)
define|\
value|((sc)->sc_chip.sc_ops->write_4)(&sc->sc_chip, off, val)
end_define

begin_define
define|#
directive|define
name|awi_write_bytes
parameter_list|(
name|sc
parameter_list|,
name|off
parameter_list|,
name|ptr
parameter_list|,
name|len
parameter_list|)
define|\
value|((sc)->sc_chip.sc_ops->write_bytes)(&sc->sc_chip, off, ptr, len)
end_define

begin_define
define|#
directive|define
name|awi_drvstate
parameter_list|(
name|sc
parameter_list|,
name|state
parameter_list|)
define|\
value|awi_write_1(sc, AWI_DRIVERSTATE, \ 	    ((state) | AWI_DRV_AUTORXLED|AWI_DRV_AUTOTXLED))
end_define

begin_comment
comment|/* unalligned little endian access */
end_comment

begin_define
define|#
directive|define
name|LE_READ_2
parameter_list|(
name|p
parameter_list|)
define|\
value|(((u_int8_t *)(p))[0] | (((u_int8_t *)(p))[1]<< 8))
end_define

begin_define
define|#
directive|define
name|LE_READ_4
parameter_list|(
name|p
parameter_list|)
define|\
value|(((u_int8_t *)(p))[0] | (((u_int8_t *)(p))[1]<< 8) |		\ 	 (((u_int8_t *)(p))[2]<< 16) | (((u_int8_t *)(p))[3]<< 24))
end_define

begin_define
define|#
directive|define
name|LE_WRITE_2
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|)
define|\
value|((((u_int8_t *)(p))[0] = ((u_int32_t)(v)& 0xff)),		\ 	 (((u_int8_t *)(p))[1] = (((u_int32_t)(v)>> 8)& 0xff)))
end_define

begin_define
define|#
directive|define
name|LE_WRITE_4
parameter_list|(
name|p
parameter_list|,
name|v
parameter_list|)
define|\
value|((((u_int8_t *)(p))[0] = ((u_int32_t)(v)& 0xff)),		\ 	 (((u_int8_t *)(p))[1] = (((u_int32_t)(v)>> 8)& 0xff)),	\ 	 (((u_int8_t *)(p))[2] = (((u_int32_t)(v)>> 16)& 0xff)),	\ 	 (((u_int8_t *)(p))[3] = (((u_int32_t)(v)>> 24)& 0xff)))
end_define

begin_define
define|#
directive|define
name|AWI_80211_RATE
parameter_list|(
name|rate
parameter_list|)
value|(((rate)& 0x7f) * 5)
end_define

begin_decl_stmt
name|int
name|awi_attach
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_intr
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|awi_reset
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__NetBSD__
end_ifdef

begin_decl_stmt
name|int
name|awi_activate
name|__P
argument_list|(
operator|(
expr|struct
name|device
operator|*
operator|,
expr|enum
name|devact
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_detach
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|awi_power
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|void
name|awi_stop
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
name|sc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_init
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
name|sc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_init_region
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_wicfg
name|__P
argument_list|(
operator|(
expr|struct
name|ifnet
operator|*
operator|,
name|u_long
operator|,
name|caddr_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_wep_setnwkey
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|,
expr|struct
name|ieee80211_nwkey
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_wep_getnwkey
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|,
expr|struct
name|ieee80211_nwkey
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_wep_getalgo
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_wep_setalgo
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_wep_setkey
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|,
name|int
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|awi_wep_getkey
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|,
name|int
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|mbuf
modifier|*
name|awi_wep_encrypt
name|__P
argument_list|(
operator|(
expr|struct
name|awi_softc
operator|*
operator|,
expr|struct
name|mbuf
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

