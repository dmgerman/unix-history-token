begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $NetBSD$ */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 1999 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Bill Sommerfeld  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *        This product includes software developed by the NetBSD  *        Foundation, Inc. and its contributors.  * 4. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_define
define|#
directive|define
name|AM79C930_BUS_PCMCIA
value|1
end_define

begin_define
define|#
directive|define
name|AM79C930_BUS_ISAPNP
value|2
end_define

begin_comment
comment|/* not implemented */
end_comment

begin_struct
struct|struct
name|am79c930_softc
block|{
name|bus_space_tag_t
name|sc_iot
decl_stmt|;
name|bus_space_handle_t
name|sc_ioh
decl_stmt|;
name|bus_space_tag_t
name|sc_memt
decl_stmt|;
name|bus_space_handle_t
name|sc_memh
decl_stmt|;
name|struct
name|am79c930_ops
modifier|*
name|sc_ops
decl_stmt|;
name|int
name|sc_bustype
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|am79c930_ops
block|{
name|void
argument_list|(
argument|*write_1
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int8_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*write_2
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int16_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*write_4
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*write_bytes
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int8_t
operator|*
operator|,
name|size_t
operator|)
argument_list|)
expr_stmt|;
name|u_int8_t
argument_list|(
argument|*read_1
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
expr_stmt|;
name|u_int16_t
argument_list|(
argument|*read_2
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
expr_stmt|;
name|u_int32_t
argument_list|(
argument|*read_4
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*read_bytes
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int8_t
operator|*
operator|,
name|size_t
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|void
name|am79c930_chip_init
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
name|sc
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|am79c930_gcr_setbits
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
name|sc
operator|,
name|u_int8_t
name|bits
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|am79c930_gcr_clearbits
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
name|sc
operator|,
name|u_int8_t
name|bits
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int8_t
name|am79c930_gcr_read
name|__P
argument_list|(
operator|(
expr|struct
name|am79c930_softc
operator|*
name|sc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|am79c930_hard_reset
parameter_list|(
name|sc
parameter_list|)
value|am79c930_gcr_setbits(sc, AM79C930_GCR_CORESET)
end_define

begin_define
define|#
directive|define
name|am79c930_hard_reset_off
parameter_list|(
name|sc
parameter_list|)
value|am79c930_gcr_clearbits(sc, AM79C930_GCR_CORESET)
end_define

end_unit

