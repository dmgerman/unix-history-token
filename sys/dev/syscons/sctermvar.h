begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1999 Kazutaka YOKOTA<yokota@zodiac.mech.utsunomiya-u.ac.jp>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer as  *    the first lines of this file unmodified.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEV_SYSCONS_SCTERMVAR_H_
end_ifndef

begin_define
define|#
directive|define
name|_DEV_SYSCONS_SCTERMVAR_H_
end_define

begin_comment
comment|/*  * building blocks for terminal emulator modules.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_ins_line
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|,
name|int
name|tail
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_del_line
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|,
name|int
name|tail
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_ins_char
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_del_char
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_col
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_row
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_up
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|head
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_down
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|tail
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_left
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_right
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_up_scroll
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|,
name|int
name|head
parameter_list|,
name|int
name|tail
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_down_scroll
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|,
name|int
name|head
parameter_list|,
name|int
name|tail
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_clr_eos
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_clr_eol
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_tab
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_backtab
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_respond
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|u_char
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_gen_print
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|u_char
modifier|*
modifier|*
name|buf
parameter_list|,
name|int
modifier|*
name|len
parameter_list|,
name|int
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|sc_term_gen_scroll
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|sc_term_ins_line
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|,
name|int
name|tail
parameter_list|)
block|{
if|if
condition|(
name|tail
operator|<=
literal|0
condition|)
name|tail
operator|=
name|scp
operator|->
name|ysize
expr_stmt|;
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|n
operator|>
name|tail
operator|-
name|y
condition|)
name|n
operator|=
name|tail
operator|-
name|y
expr_stmt|;
name|sc_vtb_ins
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|y
operator|*
name|scp
operator|->
name|xsize
argument_list|,
name|n
operator|*
name|scp
operator|->
name|xsize
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|y
operator|*
name|scp
operator|->
name|xsize
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xsize
operator|*
name|tail
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_del_line
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|,
name|int
name|tail
parameter_list|)
block|{
if|if
condition|(
name|tail
operator|<=
literal|0
condition|)
name|tail
operator|=
name|scp
operator|->
name|ysize
expr_stmt|;
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|n
operator|>
name|tail
operator|-
name|y
condition|)
name|n
operator|=
name|tail
operator|-
name|y
expr_stmt|;
name|sc_vtb_delete
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|y
operator|*
name|scp
operator|->
name|xsize
argument_list|,
name|n
operator|*
name|scp
operator|->
name|xsize
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|y
operator|*
name|scp
operator|->
name|xsize
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xsize
operator|*
name|tail
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_ins_char
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
block|{
name|int
name|count
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|n
operator|>
name|scp
operator|->
name|xsize
operator|-
name|scp
operator|->
name|xpos
condition|)
name|n
operator|=
name|scp
operator|->
name|xsize
operator|-
name|scp
operator|->
name|xpos
expr_stmt|;
name|count
operator|=
name|scp
operator|->
name|xsize
operator|-
operator|(
name|scp
operator|->
name|xpos
operator|+
name|n
operator|)
expr_stmt|;
name|sc_vtb_move
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|,
name|scp
operator|->
name|cursor_pos
operator|+
name|n
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|sc_vtb_erase
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|,
name|n
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
operator|+
name|n
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_del_char
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
block|{
name|int
name|count
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|n
operator|>
name|scp
operator|->
name|xsize
operator|-
name|scp
operator|->
name|xpos
condition|)
name|n
operator|=
name|scp
operator|->
name|xsize
operator|-
name|scp
operator|->
name|xpos
expr_stmt|;
name|count
operator|=
name|scp
operator|->
name|xsize
operator|-
operator|(
name|scp
operator|->
name|xpos
operator|+
name|n
operator|)
expr_stmt|;
name|sc_vtb_move
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|scp
operator|->
name|cursor_pos
operator|+
name|n
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|sc_vtb_erase
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|scp
operator|->
name|cursor_pos
operator|+
name|count
argument_list|,
name|n
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
operator|+
name|n
operator|+
name|count
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_col
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|n
operator|-
literal|1
argument_list|,
name|scp
operator|->
name|ypos
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_row
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xpos
argument_list|,
name|n
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_up
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|head
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
name|n
operator|=
name|imin
argument_list|(
name|n
argument_list|,
name|scp
operator|->
name|ypos
operator|-
name|head
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
return|return;
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xpos
argument_list|,
name|scp
operator|->
name|ypos
operator|-
name|n
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_down
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|tail
parameter_list|)
block|{
if|if
condition|(
name|tail
operator|<=
literal|0
condition|)
name|tail
operator|=
name|scp
operator|->
name|ysize
expr_stmt|;
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
name|n
operator|=
name|imin
argument_list|(
name|n
argument_list|,
name|tail
operator|-
name|scp
operator|->
name|ypos
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
return|return;
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xpos
argument_list|,
name|scp
operator|->
name|ypos
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_left
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xpos
operator|-
name|n
argument_list|,
name|scp
operator|->
name|ypos
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_right
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xpos
operator|+
name|n
argument_list|,
name|scp
operator|->
name|ypos
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_up_scroll
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|,
name|int
name|head
parameter_list|,
name|int
name|tail
parameter_list|)
block|{
if|if
condition|(
name|tail
operator|<=
literal|0
condition|)
name|tail
operator|=
name|scp
operator|->
name|ysize
expr_stmt|;
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|n
operator|<=
name|scp
operator|->
name|ypos
operator|-
name|head
condition|)
block|{
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xpos
argument_list|,
name|scp
operator|->
name|ypos
operator|-
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sc_term_ins_line
argument_list|(
name|scp
argument_list|,
name|head
argument_list|,
name|n
operator|-
operator|(
name|scp
operator|->
name|ypos
operator|-
name|head
operator|)
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xpos
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_down_scroll
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|,
name|int
name|head
parameter_list|,
name|int
name|tail
parameter_list|)
block|{
if|if
condition|(
name|tail
operator|<=
literal|0
condition|)
name|tail
operator|=
name|scp
operator|->
name|ysize
expr_stmt|;
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|n
operator|<
name|tail
operator|-
name|scp
operator|->
name|ypos
condition|)
block|{
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xpos
argument_list|,
name|scp
operator|->
name|ypos
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sc_term_del_line
argument_list|(
name|scp
argument_list|,
name|head
argument_list|,
name|n
operator|-
operator|(
name|tail
operator|-
name|scp
operator|->
name|ypos
operator|)
operator|+
literal|1
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xpos
argument_list|,
name|tail
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_clr_eos
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
block|{
switch|switch
condition|(
name|n
condition|)
block|{
case|case
literal|0
case|:
comment|/* clear form cursor to end of display */
name|sc_vtb_erase
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|,
name|scp
operator|->
name|xsize
operator|*
name|scp
operator|->
name|ysize
operator|-
name|scp
operator|->
name|cursor_pos
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xsize
operator|*
name|scp
operator|->
name|ysize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sc_remove_cutmarking
argument_list|(
name|scp
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|/* clear from beginning of display to cursor */
name|sc_vtb_erase
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
literal|0
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|)
expr_stmt|;
name|sc_remove_cutmarking
argument_list|(
name|scp
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* clear entire display */
name|sc_vtb_erase
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
literal|0
argument_list|,
name|scp
operator|->
name|xsize
operator|*
name|scp
operator|->
name|ysize
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|xsize
operator|*
name|scp
operator|->
name|ysize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sc_remove_cutmarking
argument_list|(
name|scp
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_clr_eol
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
block|{
switch|switch
condition|(
name|n
condition|)
block|{
case|case
literal|0
case|:
comment|/* clear form cursor to end of line */
name|sc_vtb_erase
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|,
name|scp
operator|->
name|xsize
operator|-
name|scp
operator|->
name|xpos
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
operator|+
name|scp
operator|->
name|xsize
operator|-
literal|1
operator|-
name|scp
operator|->
name|xpos
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|/* clear from beginning of line to cursor */
name|sc_vtb_erase
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|scp
operator|->
name|cursor_pos
operator|-
name|scp
operator|->
name|xpos
argument_list|,
name|scp
operator|->
name|xpos
operator|+
literal|1
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|ypos
operator|*
name|scp
operator|->
name|xsize
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* clear entire line */
name|sc_vtb_erase
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|scp
operator|->
name|cursor_pos
operator|-
name|scp
operator|->
name|xpos
argument_list|,
name|scp
operator|->
name|xsize
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|ypos
operator|*
name|scp
operator|->
name|xsize
argument_list|)
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
operator|(
name|scp
operator|->
name|ypos
operator|+
literal|1
operator|)
operator|*
name|scp
operator|->
name|xsize
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_tab
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
name|i
operator|=
operator|(
name|scp
operator|->
name|xpos
operator|&
operator|~
literal|7
operator|)
operator|+
literal|8
operator|*
name|n
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|scp
operator|->
name|xsize
condition|)
block|{
if|if
condition|(
name|scp
operator|->
name|ypos
operator|>=
name|scp
operator|->
name|ysize
operator|-
literal|1
condition|)
block|{
name|scp
operator|->
name|xpos
operator|=
literal|0
expr_stmt|;
name|scp
operator|->
name|ypos
operator|++
expr_stmt|;
name|scp
operator|->
name|cursor_pos
operator|=
name|scp
operator|->
name|ypos
operator|*
name|scp
operator|->
name|xsize
expr_stmt|;
block|}
else|else
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
literal|0
argument_list|,
name|scp
operator|->
name|ypos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|i
argument_list|,
name|scp
operator|->
name|ypos
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_backtab
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|1
condition|)
name|n
operator|=
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|=
name|scp
operator|->
name|xpos
operator|&
operator|~
literal|7
operator|)
operator|==
name|scp
operator|->
name|xpos
condition|)
name|i
operator|-=
literal|8
operator|*
name|n
expr_stmt|;
else|else
name|i
operator|-=
literal|8
operator|*
operator|(
name|n
operator|-
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
name|i
operator|=
literal|0
expr_stmt|;
name|sc_move_cursor
argument_list|(
name|scp
argument_list|,
name|i
argument_list|,
name|scp
operator|->
name|ypos
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_respond
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|u_char
modifier|*
name|s
parameter_list|)
block|{
name|sc_paste
argument_list|(
name|scp
argument_list|,
name|s
argument_list|,
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|/* XXX: not correct, don't use rmap */
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_gen_print
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|u_char
modifier|*
modifier|*
name|buf
parameter_list|,
name|int
modifier|*
name|len
parameter_list|,
name|int
name|attr
parameter_list|)
block|{
name|vm_offset_t
name|p
decl_stmt|;
name|u_char
modifier|*
name|ptr
decl_stmt|;
name|u_char
modifier|*
name|map
decl_stmt|;
name|int
name|cnt
decl_stmt|;
name|int
name|l
decl_stmt|;
name|int
name|i
decl_stmt|;
name|ptr
operator|=
operator|*
name|buf
expr_stmt|;
name|l
operator|=
operator|*
name|len
expr_stmt|;
if|if
condition|(
name|PRINTABLE
argument_list|(
operator|*
name|ptr
argument_list|)
condition|)
block|{
name|p
operator|=
name|sc_vtb_pointer
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|)
expr_stmt|;
name|map
operator|=
name|scp
operator|->
name|sc
operator|->
name|scr_map
expr_stmt|;
name|cnt
operator|=
name|imin
argument_list|(
name|l
argument_list|,
name|scp
operator|->
name|xsize
operator|-
name|scp
operator|->
name|xpos
argument_list|)
expr_stmt|;
name|i
operator|=
name|cnt
expr_stmt|;
do|do
block|{
comment|/* 			 * gcc-2.6.3 generates poor (un)sign extension code. 			 * Casting the pointers in the following to volatile  			 * should have no effect, but in fact speeds up this  			 * inner loop from 26 to 18 cycles (+ cache misses)  			 * on i486's. 			 * XXX: out of date? 			 */
define|#
directive|define
name|UCVP
parameter_list|(
name|ucp
parameter_list|)
value|((u_char volatile *)(ucp))
name|p
operator|=
name|sc_vtb_putchar
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
name|p
argument_list|,
name|UCVP
argument_list|(
name|map
argument_list|)
index|[
operator|*
name|UCVP
argument_list|(
name|ptr
argument_list|)
index|]
argument_list|,
name|attr
argument_list|)
expr_stmt|;
operator|++
name|ptr
expr_stmt|;
operator|--
name|i
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|i
operator|>
literal|0
operator|)
operator|&&
name|PRINTABLE
argument_list|(
operator|*
name|ptr
argument_list|)
condition|)
do|;
name|l
operator|-=
name|cnt
operator|-
name|i
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
argument_list|)
expr_stmt|;
name|scp
operator|->
name|cursor_pos
operator|+=
name|cnt
operator|-
name|i
expr_stmt|;
name|mark_for_update
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|cursor_pos
operator|-
literal|1
argument_list|)
expr_stmt|;
name|scp
operator|->
name|xpos
operator|+=
name|cnt
operator|-
name|i
expr_stmt|;
if|if
condition|(
name|scp
operator|->
name|xpos
operator|>=
name|scp
operator|->
name|xsize
condition|)
block|{
name|scp
operator|->
name|xpos
operator|=
literal|0
expr_stmt|;
name|scp
operator|->
name|ypos
operator|++
expr_stmt|;
comment|/* we may have to scroll the screen */
block|}
block|}
else|else
block|{
switch|switch
condition|(
operator|*
name|ptr
condition|)
block|{
case|case
literal|0x07
case|:
name|sc_bell
argument_list|(
name|scp
argument_list|,
name|scp
operator|->
name|bell_pitch
argument_list|,
name|scp
operator|->
name|bell_duration
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x08
case|:
comment|/* non-destructive backspace */
comment|/* XXX */
if|if
condition|(
name|scp
operator|->
name|cursor_pos
operator|>
literal|0
condition|)
block|{
if|#
directive|if
literal|0
block|mark_for_update(scp, scp->cursor_pos); 				scp->cursor_pos--; 				mark_for_update(scp, scp->cursor_pos);
else|#
directive|else
name|scp
operator|->
name|cursor_pos
operator|--
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|scp
operator|->
name|xpos
operator|>
literal|0
condition|)
block|{
name|scp
operator|->
name|xpos
operator|--
expr_stmt|;
block|}
else|else
block|{
name|scp
operator|->
name|xpos
operator|+=
name|scp
operator|->
name|xsize
operator|-
literal|1
expr_stmt|;
name|scp
operator|->
name|ypos
operator|--
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|0x09
case|:
comment|/* non-destructive tab */
name|sc_term_tab
argument_list|(
name|scp
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/* we may have to scroll the screen */
if|#
directive|if
literal|0
block|mark_for_update(scp, scp->cursor_pos); 			scp->cursor_pos += (8 - scp->xpos % 8u); 			mark_for_update(scp, scp->cursor_pos); 			scp->xpos += (8 - scp->xpos % 8u); 			if (scp->xpos>= scp->xsize) { 				scp->xpos = 0; 				scp->ypos++; 			}
endif|#
directive|endif
break|break;
case|case
literal|0x0a
case|:
comment|/* newline, same pos */
if|#
directive|if
literal|0
block|mark_for_update(scp, scp->cursor_pos); 			scp->cursor_pos += scp->xsize; 			mark_for_update(scp, scp->cursor_pos);
else|#
directive|else
name|scp
operator|->
name|cursor_pos
operator|+=
name|scp
operator|->
name|xsize
expr_stmt|;
comment|/* we may have to scroll the screen */
endif|#
directive|endif
name|scp
operator|->
name|ypos
operator|++
expr_stmt|;
break|break;
case|case
literal|0x0c
case|:
comment|/* form feed, clears screen */
name|sc_clear_screen
argument_list|(
name|scp
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x0d
case|:
comment|/* return, return to pos 0 */
if|#
directive|if
literal|0
block|mark_for_update(scp, scp->cursor_pos); 			scp->cursor_pos -= scp->xpos; 			mark_for_update(scp, scp->cursor_pos);
else|#
directive|else
name|scp
operator|->
name|cursor_pos
operator|-=
name|scp
operator|->
name|xpos
expr_stmt|;
endif|#
directive|endif
name|scp
operator|->
name|xpos
operator|=
literal|0
expr_stmt|;
break|break;
block|}
name|ptr
operator|++
expr_stmt|;
name|l
operator|--
expr_stmt|;
block|}
operator|*
name|buf
operator|=
name|ptr
expr_stmt|;
operator|*
name|len
operator|=
name|l
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sc_term_gen_scroll
parameter_list|(
name|scr_stat
modifier|*
name|scp
parameter_list|,
name|int
name|ch
parameter_list|,
name|int
name|attr
parameter_list|)
block|{
comment|/* do we have to scroll ?? */
if|if
condition|(
name|scp
operator|->
name|cursor_pos
operator|>=
name|scp
operator|->
name|ysize
operator|*
name|scp
operator|->
name|xsize
condition|)
block|{
name|sc_remove_cutmarking
argument_list|(
name|scp
argument_list|)
expr_stmt|;
comment|/* XXX */
ifndef|#
directive|ifndef
name|SC_NO_HISTORY
if|if
condition|(
name|scp
operator|->
name|history
operator|!=
name|NULL
condition|)
name|sc_hist_save_one_line
argument_list|(
name|scp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/* XXX */
endif|#
directive|endif
name|sc_vtb_delete
argument_list|(
operator|&
name|scp
operator|->
name|vtb
argument_list|,
literal|0
argument_list|,
name|scp
operator|->
name|xsize
argument_list|,
name|ch
argument_list|,
name|attr
argument_list|)
expr_stmt|;
name|scp
operator|->
name|cursor_pos
operator|-=
name|scp
operator|->
name|xsize
expr_stmt|;
name|scp
operator|->
name|ypos
operator|--
expr_stmt|;
name|mark_all
argument_list|(
name|scp
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEV_SYSCONS_SCTERMVAR_H_ */
end_comment

end_unit

