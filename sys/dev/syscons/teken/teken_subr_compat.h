begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2008-2009 Ed Schouten<ed@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_function
specifier|static
name|void
name|teken_subr_cons25_set_cursor_type
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|type
parameter_list|)
block|{
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_SHOWCURSOR
argument_list|,
name|type
operator|!=
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
specifier|static
specifier|const
name|teken_color_t
name|cons25_colors
index|[
literal|8
index|]
init|=
block|{
name|TC_BLACK
block|,
name|TC_BLUE
block|,
name|TC_GREEN
block|,
name|TC_CYAN
block|,
name|TC_RED
block|,
name|TC_MAGENTA
block|,
name|TC_BROWN
block|,
name|TC_WHITE
block|}
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|void
name|teken_subr_cons25_set_adapter_background
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|c
parameter_list|)
block|{
name|t
operator|->
name|t_defattr
operator|.
name|ta_bgcolor
operator|=
name|cons25_colors
index|[
name|c
operator|%
literal|8
index|]
expr_stmt|;
name|t
operator|->
name|t_curattr
operator|.
name|ta_bgcolor
operator|=
name|cons25_colors
index|[
name|c
operator|%
literal|8
index|]
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cons25_set_adapter_foreground
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|c
parameter_list|)
block|{
name|t
operator|->
name|t_defattr
operator|.
name|ta_fgcolor
operator|=
name|cons25_colors
index|[
name|c
operator|%
literal|8
index|]
expr_stmt|;
name|t
operator|->
name|t_curattr
operator|.
name|ta_fgcolor
operator|=
name|cons25_colors
index|[
name|c
operator|%
literal|8
index|]
expr_stmt|;
if|if
condition|(
name|c
operator|>=
literal|8
condition|)
block|{
name|t
operator|->
name|t_defattr
operator|.
name|ta_format
operator||=
name|TF_BOLD
expr_stmt|;
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator||=
name|TF_BOLD
expr_stmt|;
block|}
else|else
block|{
name|t
operator|->
name|t_defattr
operator|.
name|ta_format
operator|&=
operator|~
name|TF_BOLD
expr_stmt|;
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator|&=
operator|~
name|TF_BOLD
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cons25_switch_virtual_terminal
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|vt
parameter_list|)
block|{
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_SWITCHVT
argument_list|,
name|vt
argument_list|)
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|static void teken_subr_vt52_decid(teken_t *t) { 	const char response[] = "\x1B/Z";  	teken_funcs_respond(t, response, sizeof response - 1); }
endif|#
directive|endif
end_endif

end_unit

