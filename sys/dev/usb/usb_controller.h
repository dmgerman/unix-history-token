begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2008 Hans Petter Selasky. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_USB2_CONTROLLER_H_
end_ifndef

begin_define
define|#
directive|define
name|_USB2_CONTROLLER_H_
end_define

begin_comment
comment|/* defines */
end_comment

begin_define
define|#
directive|define
name|USB_BUS_DMA_TAG_MAX
value|8
end_define

begin_comment
comment|/* structure prototypes */
end_comment

begin_struct_decl
struct_decl|struct
name|usb2_bus
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usb2_page
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usb2_pipe
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usb2_page_cache
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usb2_setup_params
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usb2_hw_ep_profile
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usb2_fs_isoc_schedule
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usb2_config_descriptor
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usb2_endpoint_descriptor
struct_decl|;
end_struct_decl

begin_comment
comment|/* typedefs */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
name|usb2_bus_mem_sub_cb_t
function_decl|)
parameter_list|(
name|struct
name|usb2_bus
modifier|*
name|bus
parameter_list|,
name|struct
name|usb2_page_cache
modifier|*
name|pc
parameter_list|,
name|struct
name|usb2_page
modifier|*
name|pg
parameter_list|,
name|usb2_size_t
name|size
parameter_list|,
name|usb2_size_t
name|align
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|usb2_bus_mem_cb_t
function_decl|)
parameter_list|(
name|struct
name|usb2_bus
modifier|*
name|bus
parameter_list|,
name|usb2_bus_mem_sub_cb_t
modifier|*
name|scb
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * The following structure is used to define all the USB BUS  * callbacks.  */
end_comment

begin_struct
struct|struct
name|usb2_bus_methods
block|{
comment|/* USB Device and Host mode - Mandatory */
name|void
function_decl|(
modifier|*
name|pipe_init
function_decl|)
parameter_list|(
name|struct
name|usb2_device
modifier|*
name|udev
parameter_list|,
name|struct
name|usb2_endpoint_descriptor
modifier|*
name|edesc
parameter_list|,
name|struct
name|usb2_pipe
modifier|*
name|pipe
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xfer_setup
function_decl|)
parameter_list|(
name|struct
name|usb2_setup_params
modifier|*
name|parm
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|xfer_unsetup
function_decl|)
parameter_list|(
name|struct
name|usb2_xfer
modifier|*
name|xfer
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|get_dma_delay
function_decl|)
parameter_list|(
name|struct
name|usb2_bus
modifier|*
parameter_list|,
name|uint32_t
modifier|*
name|pdelay
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|device_suspend
function_decl|)
parameter_list|(
name|struct
name|usb2_device
modifier|*
name|udev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|device_resume
function_decl|)
parameter_list|(
name|struct
name|usb2_device
modifier|*
name|udev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_hw_power
function_decl|)
parameter_list|(
name|struct
name|usb2_bus
modifier|*
name|bus
parameter_list|)
function_decl|;
comment|/* 	 * The following flag is set if one or more control transfers are 	 * active: 	 */
define|#
directive|define
name|USB_HW_POWER_CONTROL
value|0x01
comment|/* 	 * The following flag is set if one or more bulk transfers are 	 * active: 	 */
define|#
directive|define
name|USB_HW_POWER_BULK
value|0x02
comment|/* 	 * The following flag is set if one or more interrupt transfers are 	 * active: 	 */
define|#
directive|define
name|USB_HW_POWER_INTERRUPT
value|0x04
comment|/* 	 * The following flag is set if one or more isochronous transfers 	 * are active: 	 */
define|#
directive|define
name|USB_HW_POWER_ISOC
value|0x08
comment|/* 	 * The following flag is set if one or more non-root-HUB devices  	 * are present on the given USB bus: 	 */
define|#
directive|define
name|USB_HW_POWER_NON_ROOT_HUB
value|0x10
comment|/* USB Device mode only - Mandatory */
name|void
function_decl|(
modifier|*
name|get_hw_ep_profile
function_decl|)
parameter_list|(
name|struct
name|usb2_device
modifier|*
name|udev
parameter_list|,
specifier|const
name|struct
name|usb2_hw_ep_profile
modifier|*
modifier|*
name|ppf
parameter_list|,
name|uint8_t
name|ep_addr
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_stall
function_decl|)
parameter_list|(
name|struct
name|usb2_device
modifier|*
name|udev
parameter_list|,
name|struct
name|usb2_xfer
modifier|*
name|xfer
parameter_list|,
name|struct
name|usb2_pipe
modifier|*
name|pipe
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|clear_stall
function_decl|)
parameter_list|(
name|struct
name|usb2_device
modifier|*
name|udev
parameter_list|,
name|struct
name|usb2_pipe
modifier|*
name|pipe
parameter_list|)
function_decl|;
comment|/* USB Device and Host mode - Optional */
name|void
function_decl|(
modifier|*
name|roothub_exec
function_decl|)
parameter_list|(
name|struct
name|usb2_bus
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The following structure is used to define all the USB pipe  * callbacks.  */
end_comment

begin_struct
struct|struct
name|usb2_pipe_methods
block|{
comment|/* Mandatory USB Device and Host mode callbacks: */
name|usb2_callback_t
modifier|*
name|open
decl_stmt|;
name|usb2_callback_t
modifier|*
name|close
decl_stmt|;
name|usb2_callback_t
modifier|*
name|enter
decl_stmt|;
name|usb2_callback_t
modifier|*
name|start
decl_stmt|;
comment|/* Optional */
name|void
modifier|*
name|info
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The following structure keeps information about what a hardware USB  * endpoint supports.  */
end_comment

begin_struct
struct|struct
name|usb2_hw_ep_profile
block|{
name|uint16_t
name|max_in_frame_size
decl_stmt|;
comment|/* IN-token direction */
name|uint16_t
name|max_out_frame_size
decl_stmt|;
comment|/* OUT-token direction */
name|uint8_t
name|is_simplex
range|:
literal|1
decl_stmt|;
name|uint8_t
name|support_multi_buffer
range|:
literal|1
decl_stmt|;
name|uint8_t
name|support_bulk
range|:
literal|1
decl_stmt|;
name|uint8_t
name|support_control
range|:
literal|1
decl_stmt|;
name|uint8_t
name|support_interrupt
range|:
literal|1
decl_stmt|;
name|uint8_t
name|support_isochronous
range|:
literal|1
decl_stmt|;
name|uint8_t
name|support_in
range|:
literal|1
decl_stmt|;
comment|/* IN-token is supported */
name|uint8_t
name|support_out
range|:
literal|1
decl_stmt|;
comment|/* OUT-token is supported */
block|}
struct|;
end_struct

begin_comment
comment|/*  * The following structure is used when trying to allocate hardware  * endpoints for an USB configuration in USB device side mode.  */
end_comment

begin_struct
struct|struct
name|usb2_hw_ep_scratch_sub
block|{
specifier|const
name|struct
name|usb2_hw_ep_profile
modifier|*
name|pf
decl_stmt|;
name|uint16_t
name|max_frame_size
decl_stmt|;
name|uint8_t
name|hw_endpoint_out
decl_stmt|;
name|uint8_t
name|hw_endpoint_in
decl_stmt|;
name|uint8_t
name|needs_ep_type
decl_stmt|;
name|uint8_t
name|needs_in
range|:
literal|1
decl_stmt|;
name|uint8_t
name|needs_out
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The following structure is used when trying to allocate hardware  * endpoints for an USB configuration in USB device side mode.  */
end_comment

begin_struct
struct|struct
name|usb2_hw_ep_scratch
block|{
name|struct
name|usb2_hw_ep_scratch_sub
name|ep
index|[
name|USB_EP_MAX
index|]
decl_stmt|;
name|struct
name|usb2_hw_ep_scratch_sub
modifier|*
name|ep_max
decl_stmt|;
name|struct
name|usb2_config_descriptor
modifier|*
name|cd
decl_stmt|;
name|struct
name|usb2_device
modifier|*
name|udev
decl_stmt|;
name|struct
name|usb2_bus_methods
modifier|*
name|methods
decl_stmt|;
name|uint8_t
name|bmOutAlloc
index|[
operator|(
name|USB_EP_MAX
operator|+
literal|15
operator|)
operator|/
literal|16
index|]
decl_stmt|;
name|uint8_t
name|bmInAlloc
index|[
operator|(
name|USB_EP_MAX
operator|+
literal|15
operator|)
operator|/
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The following structure is used when generating USB descriptors  * from USB templates.  */
end_comment

begin_struct
struct|struct
name|usb2_temp_setup
block|{
name|void
modifier|*
name|buf
decl_stmt|;
name|usb2_size_t
name|size
decl_stmt|;
name|uint8_t
name|usb2_speed
decl_stmt|;
name|uint8_t
name|self_powered
decl_stmt|;
name|uint8_t
name|bNumEndpoints
decl_stmt|;
name|uint8_t
name|bInterfaceNumber
decl_stmt|;
name|uint8_t
name|bAlternateSetting
decl_stmt|;
name|uint8_t
name|bConfigurationValue
decl_stmt|;
name|usb2_error_t
name|err
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* prototypes */
end_comment

begin_function_decl
name|void
name|usb2_bus_mem_flush_all
parameter_list|(
name|struct
name|usb2_bus
modifier|*
name|bus
parameter_list|,
name|usb2_bus_mem_cb_t
modifier|*
name|cb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
name|usb2_bus_mem_alloc_all
parameter_list|(
name|struct
name|usb2_bus
modifier|*
name|bus
parameter_list|,
name|bus_dma_tag_t
name|dmat
parameter_list|,
name|usb2_bus_mem_cb_t
modifier|*
name|cb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|usb2_bus_mem_free_all
parameter_list|(
name|struct
name|usb2_bus
modifier|*
name|bus
parameter_list|,
name|usb2_bus_mem_cb_t
modifier|*
name|cb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint16_t
name|usb2_isoc_time_expand
parameter_list|(
name|struct
name|usb2_bus
modifier|*
name|bus
parameter_list|,
name|uint16_t
name|isoc_time_curr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint16_t
name|usb2_fs_isoc_schedule_isoc_time_expand
parameter_list|(
name|struct
name|usb2_device
modifier|*
name|udev
parameter_list|,
name|struct
name|usb2_fs_isoc_schedule
modifier|*
modifier|*
name|pp_start
parameter_list|,
name|struct
name|usb2_fs_isoc_schedule
modifier|*
modifier|*
name|pp_end
parameter_list|,
name|uint16_t
name|isoc_time
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
name|usb2_fs_isoc_schedule_alloc
parameter_list|(
name|struct
name|usb2_fs_isoc_schedule
modifier|*
name|fss
parameter_list|,
name|uint8_t
modifier|*
name|pstart
parameter_list|,
name|uint16_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _USB2_CONTROLLER_H_ */
end_comment

end_unit

