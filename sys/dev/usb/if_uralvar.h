begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2005  *	Damien Bergamini<damien.bergamini@free.fr>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_define
define|#
directive|define
name|RAL_RX_LIST_COUNT
value|1
end_define

begin_define
define|#
directive|define
name|RAL_TX_LIST_COUNT
value|1
end_define

begin_struct
struct|struct
name|ural_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|uint8_t
name|wr_antenna
decl_stmt|;
name|uint8_t
name|wr_antsignal
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RAL_RX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_ANTENNA) |				\ 	 (1<< IEEE80211_RADIOTAP_DB_ANTSIGNAL))
end_define

begin_struct
struct|struct
name|ural_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint8_t
name|wt_rate
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
name|uint8_t
name|wt_antenna
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RAL_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_ANTENNA))
end_define

begin_struct_decl
struct_decl|struct
name|ural_softc
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ural_tx_data
block|{
name|struct
name|ural_softc
modifier|*
name|sc
decl_stmt|;
name|usbd_xfer_handle
name|xfer
decl_stmt|;
name|uint8_t
modifier|*
name|buf
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ural_rx_data
block|{
name|struct
name|ural_softc
modifier|*
name|sc
decl_stmt|;
name|usbd_xfer_handle
name|xfer
decl_stmt|;
name|uint8_t
modifier|*
name|buf
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ural_softc
block|{
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|struct
name|ieee80211com
name|sc_ic
decl_stmt|;
name|int
function_decl|(
modifier|*
name|sc_newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211com
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|device_t
name|sc_dev
decl_stmt|;
name|usbd_device_handle
name|sc_udev
decl_stmt|;
name|usbd_interface_handle
name|sc_iface
decl_stmt|;
name|int
name|sc_rx_no
decl_stmt|;
name|int
name|sc_tx_no
decl_stmt|;
name|uint32_t
name|asic_rev
decl_stmt|;
name|uint8_t
name|rf_rev
decl_stmt|;
name|usbd_xfer_handle
name|amrr_xfer
decl_stmt|;
name|usbd_pipe_handle
name|sc_rx_pipeh
decl_stmt|;
name|usbd_pipe_handle
name|sc_tx_pipeh
decl_stmt|;
name|enum
name|ieee80211_state
name|sc_state
decl_stmt|;
name|int
name|sc_arg
decl_stmt|;
name|struct
name|usb_task
name|sc_task
decl_stmt|;
name|struct
name|ieee80211_amrr
name|amrr
decl_stmt|;
name|struct
name|ieee80211_amrr_node
name|amn
decl_stmt|;
name|struct
name|ural_rx_data
name|rx_data
index|[
name|RAL_RX_LIST_COUNT
index|]
decl_stmt|;
name|struct
name|ural_tx_data
name|tx_data
index|[
name|RAL_TX_LIST_COUNT
index|]
decl_stmt|;
name|int
name|tx_queued
decl_stmt|;
name|struct
name|ieee80211_beacon_offsets
name|sc_bo
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|struct
name|callout
name|watchdog_ch
decl_stmt|;
name|struct
name|callout
name|scan_ch
decl_stmt|;
name|struct
name|callout
name|amrr_ch
decl_stmt|;
name|int
name|sc_tx_timer
decl_stmt|;
name|uint16_t
name|sta
index|[
literal|11
index|]
decl_stmt|;
name|uint32_t
name|rf_regs
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|txpow
index|[
literal|14
index|]
decl_stmt|;
struct|struct
block|{
name|uint8_t
name|val
decl_stmt|;
name|uint8_t
name|reg
decl_stmt|;
block|}
name|__packed
name|bbp_prom
index|[
literal|16
index|]
struct|;
name|int
name|led_mode
decl_stmt|;
name|int
name|hw_radio
decl_stmt|;
name|int
name|rx_ant
decl_stmt|;
name|int
name|tx_ant
decl_stmt|;
name|int
name|nb_ant
decl_stmt|;
name|struct
name|bpf_if
modifier|*
name|sc_drvbpf
decl_stmt|;
union|union
block|{
name|struct
name|ural_rx_radiotap_header
name|th
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|64
index|]
decl_stmt|;
block|}
name|sc_rxtapu
union|;
define|#
directive|define
name|sc_rxtap
value|sc_rxtapu.th
name|int
name|sc_rxtap_len
decl_stmt|;
union|union
block|{
name|struct
name|ural_tx_radiotap_header
name|th
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|64
index|]
decl_stmt|;
block|}
name|sc_txtapu
union|;
define|#
directive|define
name|sc_txtap
value|sc_txtapu.th
name|int
name|sc_txtap_len
decl_stmt|;
block|}
struct|;
end_struct

begin_if
if|#
directive|if
literal|0
end_if

begin_define
define|#
directive|define
name|RAL_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|RAL_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->sc_mtx)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|RAL_LOCK
parameter_list|(
name|sc
parameter_list|)
value|do { ((sc) = (sc)); mtx_lock(&Giant); } while (0)
end_define

begin_define
define|#
directive|define
name|RAL_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&Giant)
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

