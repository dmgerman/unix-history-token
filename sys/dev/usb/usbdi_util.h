begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: usbdi_util.h,v 1.16 1999/08/22 20:12:40 augustss Exp $	*/
end_comment

begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*  * Copyright (c) 1998 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Lennart Augustsson (augustss@carlstedt.se) at  * Carlstedt Research& Technology.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *        This product includes software developed by the NetBSD  *        Foundation, Inc. and its contributors.  * 4. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_decl_stmt
name|usbd_status
name|usbd_get_desc
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|int
name|type
operator|,
name|int
name|index
operator|,
name|int
name|len
operator|,
name|void
operator|*
name|desc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_get_config_desc
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
name|int
operator|,
name|usb_config_descriptor_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_get_config_desc_full
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
name|int
operator|,
name|void
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_get_device_desc
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|usb_device_descriptor_t
operator|*
name|d
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_address
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|int
name|addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_get_port_status
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
name|int
operator|,
name|usb_port_status_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_hub_feature
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_clear_hub_feature
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_port_feature
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_clear_port_feature
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_get_device_status
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
name|usb_status_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_get_hub_status
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|usb_hub_status_t
operator|*
name|st
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_protocol
name|__P
argument_list|(
operator|(
name|usbd_interface_handle
name|dev
operator|,
name|int
name|report
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_get_report_descriptor
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|int
name|ifcno
operator|,
name|int
name|repid
operator|,
name|int
name|size
operator|,
name|void
operator|*
name|d
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|usb_hid_descriptor
modifier|*
name|usbd_get_hid_descriptor
name|__P
argument_list|(
operator|(
name|usbd_interface_handle
name|ifc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_report
name|__P
argument_list|(
operator|(
name|usbd_interface_handle
name|iface
operator|,
name|int
name|type
operator|,
name|int
name|id
operator|,
name|void
operator|*
name|data
operator|,
name|int
name|len
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_report_async
name|__P
argument_list|(
operator|(
name|usbd_interface_handle
name|iface
operator|,
name|int
name|type
operator|,
name|int
name|id
operator|,
name|void
operator|*
name|data
operator|,
name|int
name|len
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_get_report
name|__P
argument_list|(
operator|(
name|usbd_interface_handle
name|iface
operator|,
name|int
name|type
operator|,
name|int
name|id
operator|,
name|void
operator|*
name|data
operator|,
name|int
name|len
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_idle
name|__P
argument_list|(
operator|(
name|usbd_interface_handle
name|iface
operator|,
name|int
name|duration
operator|,
name|int
name|id
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
operator|||
name|defined
argument_list|(
name|__OpenBSD__
argument_list|)
end_if

begin_decl_stmt
name|usbd_status
name|usbd_alloc_report_desc
name|__P
argument_list|(
operator|(
name|usbd_interface_handle
name|ifc
operator|,
name|void
operator|*
operator|*
name|descp
operator|,
name|int
operator|*
name|sizep
operator|,
name|int
name|mem
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
end_elif

begin_decl_stmt
name|usbd_status
name|usbd_alloc_report_desc
name|__P
argument_list|(
operator|(
name|usbd_interface_handle
name|ifc
operator|,
name|void
operator|*
operator|*
name|descp
operator|,
name|int
operator|*
name|sizep
operator|,
expr|struct
name|malloc_type
operator|*
name|mem
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|usbd_status
name|usbd_get_config
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|u_int8_t
operator|*
name|conf
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_get_string_desc
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|int
name|sindex
operator|,
name|int
name|langid
operator|,
name|usb_string_descriptor_t
operator|*
name|sdesc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|usbd_delay_ms
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_config_no
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|int
name|no
operator|,
name|int
name|msg
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_config_index
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|int
name|index
operator|,
name|int
name|msg
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_bulk_transfer
name|__P
argument_list|(
operator|(
name|usbd_request_handle
name|reqh
operator|,
name|usbd_pipe_handle
name|pipe
operator|,
name|u_int16_t
name|flags
operator|,
name|u_int32_t
name|timeout
operator|,
name|void
operator|*
name|buf
operator|,
name|u_int32_t
operator|*
name|size
operator|,
name|char
operator|*
name|lbl
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|usb_detach_wait
name|__P
argument_list|(
operator|(
name|bdevice
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|usb_detach_wakeup
name|__P
argument_list|(
operator|(
name|bdevice
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

