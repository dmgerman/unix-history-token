begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1998 The NetBSD Foundation, Inc.  * All rights reserved.  *  * Author: Lennart Augustsson<augustss@carlstedt.se>  *         Carlstedt Research& Technology  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *        This product includes software developed by the NetBSD  *        Foundation, Inc. and its contributors.  * 4. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
end_if

begin_comment
comment|/* conversiom from one type of queue to the other */
end_comment

begin_define
define|#
directive|define
name|SIMPLEQ_REMOVE_HEAD
value|STAILQ_REMOVE_HEAD_QUEUE
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_INSERT_HEAD
value|STAILQ_INSERT_HEAD
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_INSERT_TAIL
value|STAILQ_INSERT_TAIL
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_NEXT
value|STAILQ_NEXT
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_FIRST
value|STAILQ_FIRST
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_HEAD
value|STAILQ_HEAD
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_INIT
value|STAILQ_INIT
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_ENTRY
value|STAILQ_ENTRY
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct_decl
struct_decl|struct
name|usbd_request
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usbd_pipe
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|usbd_endpoint
block|{
name|usb_endpoint_descriptor_t
modifier|*
name|edesc
decl_stmt|;
name|usbd_endpoint_state
name|state
decl_stmt|;
name|int
name|refcnt
decl_stmt|;
name|int
name|toggle
decl_stmt|;
comment|/* XXX */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|*usbd_xfercb
argument_list|)
name|__P
argument_list|(
operator|(
name|usbd_request_handle
name|req
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_struct
struct|struct
name|usbd_methods
block|{
name|usbd_status
argument_list|(
argument|*transfer
argument_list|)
name|__P
argument_list|(
operator|(
name|usbd_request_handle
name|reqh
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abort
argument_list|)
name|__P
argument_list|(
operator|(
name|usbd_request_handle
name|reqh
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
name|usbd_pipe_handle
name|pipe
operator|)
argument_list|)
expr_stmt|;
name|usbd_status
argument_list|(
argument|*isobuf
argument_list|)
name|__P
argument_list|(
operator|(
name|usbd_pipe_handle
name|pipe
operator|,
name|u_int32_t
name|bufsize
operator|,
name|u_int32_t
name|nbuf
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|usbd_port
block|{
name|usb_port_status_t
name|status
decl_stmt|;
name|int
name|power
decl_stmt|;
comment|/* mA of current on port */
name|struct
name|usbd_device
modifier|*
name|device
decl_stmt|;
name|struct
name|usbd_device
modifier|*
name|parent
decl_stmt|;
comment|/* The ports hub */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|usbd_hub
block|{
name|usbd_status
argument_list|(
argument|*explore
argument_list|)
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|hub
operator|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|hubdata
decl_stmt|;
name|usb_hub_descriptor_t
name|hubdesc
decl_stmt|;
name|int
name|nports
decl_stmt|;
name|struct
name|usbd_port
name|ports
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|usb_softc
struct_decl|;
end_struct_decl

begin_comment
comment|/*****/
end_comment

begin_struct
struct|struct
name|usbd_bus
block|{
comment|/* Filled by HC driver */
name|bdevice
name|bdev
decl_stmt|;
comment|/* base device, host adapter */
name|usbd_status
argument_list|(
argument|*open_pipe
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|usbd_pipe
operator|*
name|pipe
operator|)
argument_list|)
expr_stmt|;
name|u_int32_t
name|pipe_size
decl_stmt|;
comment|/* size of a pipe struct */
name|void
argument_list|(
argument|*do_poll
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|usbd_bus
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* Filled by usb driver */
name|struct
name|usbd_device
modifier|*
name|root_hub
decl_stmt|;
name|usbd_device_handle
name|devices
index|[
name|USB_MAX_DEVICES
index|]
decl_stmt|;
name|char
name|needs_explore
decl_stmt|;
comment|/* a hub a signalled a change */
name|char
name|use_polling
decl_stmt|;
name|struct
name|usb_softc
modifier|*
name|usbctl
decl_stmt|;
name|struct
name|usb_device_stats
name|stats
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|usbd_device
block|{
name|struct
name|usbd_bus
modifier|*
name|bus
decl_stmt|;
name|usbd_device_state
name|state
decl_stmt|;
name|struct
name|usbd_pipe
modifier|*
name|default_pipe
decl_stmt|;
name|u_int8_t
name|address
decl_stmt|;
name|u_int8_t
name|depth
decl_stmt|;
name|u_int8_t
name|lowspeed
decl_stmt|;
name|u_int16_t
name|power
decl_stmt|;
name|u_int8_t
name|self_powered
decl_stmt|;
name|int
name|config
decl_stmt|;
name|struct
name|usbd_port
modifier|*
name|powersrc
decl_stmt|;
name|struct
name|usbd_endpoint
name|def_ep
decl_stmt|;
comment|/* for pipe 0 */
name|usb_endpoint_descriptor_t
name|def_ep_desc
decl_stmt|;
comment|/* for pipe 0 */
name|struct
name|usbd_interface
modifier|*
name|ifaces
decl_stmt|;
name|usb_device_descriptor_t
name|ddesc
decl_stmt|;
name|usb_config_descriptor_t
modifier|*
name|cdesc
decl_stmt|;
comment|/* full config descr */
name|struct
name|usbd_quirks
modifier|*
name|quirks
decl_stmt|;
name|struct
name|usbd_hub
modifier|*
name|hub
decl_stmt|;
comment|/* only if this is a hub */
if|#
directive|if
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
name|bdevice
name|bdev
decl_stmt|;
comment|/* base device */
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|usbd_interface
block|{
name|struct
name|usbd_device
modifier|*
name|device
decl_stmt|;
name|usbd_interface_state
name|state
decl_stmt|;
name|usb_interface_descriptor_t
modifier|*
name|idesc
decl_stmt|;
name|struct
name|usbd_endpoint
modifier|*
name|endpoints
decl_stmt|;
name|void
modifier|*
name|priv
decl_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|usbd_pipe
argument_list|)
name|pipes
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|usbd_pipe
block|{
name|struct
name|usbd_interface
modifier|*
name|iface
decl_stmt|;
name|struct
name|usbd_device
modifier|*
name|device
decl_stmt|;
name|struct
name|usbd_endpoint
modifier|*
name|endpoint
decl_stmt|;
name|usbd_pipe_state
name|state
decl_stmt|;
name|int32_t
name|refcnt
decl_stmt|;
name|char
name|running
decl_stmt|;
name|SIMPLEQ_HEAD
argument_list|(
argument_list|,
argument|usbd_request
argument_list|)
name|queue
expr_stmt|;
name|LIST_ENTRY
argument_list|(
argument|usbd_pipe
argument_list|)
name|next
expr_stmt|;
name|void
argument_list|(
argument|*disco
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|discoarg
decl_stmt|;
name|usbd_request_handle
name|intrreqh
decl_stmt|;
comment|/* used for repeating requests */
name|usbd_request_handle
name|curreqh
decl_stmt|;
comment|/* currently running request */
comment|/* Filled by HC driver. */
name|struct
name|usbd_methods
modifier|*
name|methods
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|usbd_request
block|{
name|struct
name|usbd_pipe
modifier|*
name|pipe
decl_stmt|;
name|void
modifier|*
name|priv
decl_stmt|;
name|void
modifier|*
name|buffer
decl_stmt|;
name|u_int32_t
name|length
decl_stmt|;
name|u_int32_t
name|actlen
decl_stmt|;
name|u_int16_t
name|flags
decl_stmt|;
name|u_int32_t
name|timeout
decl_stmt|;
name|usbd_status
name|status
decl_stmt|;
name|usbd_callback
name|callback
decl_stmt|;
name|usbd_xfercb
name|xfercb
decl_stmt|;
name|u_int32_t
name|retries
decl_stmt|;
name|char
name|done
decl_stmt|;
name|usb_device_request_t
name|request
decl_stmt|;
name|u_int8_t
name|isreq
decl_stmt|;
name|SIMPLEQ_ENTRY
argument_list|(
argument|usbd_request
argument_list|)
name|next
expr_stmt|;
name|void
modifier|*
name|hcpriv
decl_stmt|;
comment|/* XXX private use by the HC driver */
if|#
directive|if
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
name|struct
name|callout_handle
name|timo_handle
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_decl_stmt
name|void
name|usbd_init
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Routines from usb_subr.c */
end_comment

begin_decl_stmt
name|int
name|usbctlprint
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|usbd_delay_ms
name|__P
argument_list|(
operator|(
name|usbd_bus_handle
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|usbd_devinfo_vp
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
name|char
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_set_config_no
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_reset_port
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|int
name|port
operator|,
name|usb_port_status_t
operator|*
name|ps
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_setup_pipe
name|__P
argument_list|(
operator|(
name|usbd_device_handle
name|dev
operator|,
name|usbd_interface_handle
name|iface
operator|,
expr|struct
name|usbd_endpoint
operator|*
operator|,
name|usbd_pipe_handle
operator|*
name|pipe
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usbd_new_device
name|__P
argument_list|(
operator|(
name|bdevice
operator|*
name|parent
operator|,
name|usbd_bus_handle
name|bus
operator|,
name|int
name|depth
operator|,
name|int
name|lowspeed
operator|,
name|int
name|port
operator|,
expr|struct
name|usbd_port
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|usbd_remove_device
name|__P
argument_list|(
operator|(
name|usbd_device_handle
operator|,
expr|struct
name|usbd_port
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|usbd_printBCD
name|__P
argument_list|(
operator|(
name|char
operator|*
name|cp
operator|,
name|int
name|bcd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Routines from usb.c */
end_comment

begin_decl_stmt
name|int
name|usb_bus_count
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|usbd_status
name|usb_get_bus_handle
name|__P
argument_list|(
operator|(
name|int
operator|,
name|usbd_bus_handle
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|usb_needs_explore
name|__P
argument_list|(
operator|(
name|usbd_bus_handle
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
end_if

begin_decl_stmt
name|int
name|usb_driver_load
name|__P
argument_list|(
operator|(
name|module_t
name|mod
operator|,
name|int
name|what
operator|,
name|void
operator|*
name|arg
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|usb_device_set_desc
name|__P
argument_list|(
operator|(
name|device_t
name|device
operator|,
name|char
operator|*
name|devinfo
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|int
name|usbd_use_polling
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Locator stuff. */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
end_if

begin_comment
comment|/* NWH File not found anywhere in NetBSD sources... */
end_comment

begin_include
include|#
directive|include
file|"locators.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|uhubcf_port
value|cf_loc[UHUBCF_PORT]
end_define

begin_define
define|#
directive|define
name|uhubcf_configuration
value|cf_loc[UHUBCF_CONFIGURATION]
end_define

begin_define
define|#
directive|define
name|uhubcf_interface
value|cf_loc[UHUBCF_INTERFACE]
end_define

begin_define
define|#
directive|define
name|UHUB_UNK_PORT
value|UHUBCF_PORT_DEFAULT
end_define

begin_comment
comment|/* wildcarded 'port' */
end_comment

begin_define
define|#
directive|define
name|UHUB_UNK_CONFIGURATION
value|UHUBCF_CONFIGURATION_DEFAULT
end_define

begin_comment
comment|/* wildcarded 'configuration' */
end_comment

begin_define
define|#
directive|define
name|UHUB_UNK_INTERFACE
value|UHUBCF_INTERFACE_DEFAULT
end_define

begin_comment
comment|/* wildcarded 'interface' */
end_comment

begin_comment
comment|/* Junk. */
end_comment

begin_comment
comment|/* XXX */
end_comment

begin_define
define|#
directive|define
name|splusb
value|splbio
end_define

begin_define
define|#
directive|define
name|IPL_USB
value|IPL_BIO
end_define

begin_comment
comment|/* XXX */
end_comment

end_unit

