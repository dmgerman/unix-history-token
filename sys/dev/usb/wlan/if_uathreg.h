begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$OpenBSD: if_uathreg.h,v 1.2 2006/09/18 16:34:23 damien Exp $	*/
end_comment

begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2006  *	Damien Bergamini<damien.bergamini@free.fr>  * Copyright (c) 2006 Sam Leffler, Errno Consulting  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_define
define|#
directive|define
name|UATH_CONFIG_INDEX
value|0
end_define

begin_define
define|#
directive|define
name|UATH_IFACE_INDEX
value|0
end_define

begin_comment
comment|/* all fields are big endian */
end_comment

begin_struct
struct|struct
name|uath_fwblock
block|{
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|UATH_WRITE_BLOCK
value|(1<< 4)
name|uint32_t
name|len
decl_stmt|;
define|#
directive|define
name|UATH_MAX_FWBLOCK_SIZE
value|2048
name|uint32_t
name|total
decl_stmt|;
name|uint32_t
name|remain
decl_stmt|;
name|uint32_t
name|rxtotal
decl_stmt|;
name|uint32_t
name|pad
index|[
literal|123
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|UATH_MAX_CMDSZ
value|512
end_define

begin_comment
comment|/*  * Messages are passed in Target Endianness.  All fixed-size  * fields of a WDS Control Message are treated as 32-bit  * values and Control Msgs are guaranteed to be 32-bit aligned.  *  * The format of a WDS Control Message is as follows:  *    Message Length	32 bits  *    Message Opcode	32 bits  *    Message ID	32 bits  *    parameter 1  *    parameter 2  *       ...  *  * A variable-length parameter, or a parmeter that is larger than  * 32 bits is passed as<length, data> pair, where length is a  * 32-bit quantity and data is padded to 32 bits.  */
end_comment

begin_struct
struct|struct
name|uath_cmd_hdr
block|{
name|uint32_t
name|len
decl_stmt|;
comment|/* msg length including header */
name|uint32_t
name|code
decl_stmt|;
comment|/* operation code */
comment|/* NB: these are defined for rev 1.5 firmware; rev 1.6 is different */
comment|/* messages from Host -> Target */
define|#
directive|define
name|WDCMSG_HOST_AVAILABLE
value|0x01
define|#
directive|define
name|WDCMSG_BIND
value|0x02
define|#
directive|define
name|WDCMSG_TARGET_RESET
value|0x03
define|#
directive|define
name|WDCMSG_TARGET_GET_CAPABILITY
value|0x04
define|#
directive|define
name|WDCMSG_TARGET_SET_CONFIG
value|0x05
define|#
directive|define
name|WDCMSG_TARGET_GET_STATUS
value|0x06
define|#
directive|define
name|WDCMSG_TARGET_GET_STATS
value|0x07
define|#
directive|define
name|WDCMSG_TARGET_START
value|0x08
define|#
directive|define
name|WDCMSG_TARGET_STOP
value|0x09
define|#
directive|define
name|WDCMSG_TARGET_ENABLE
value|0x0a
define|#
directive|define
name|WDCMSG_TARGET_DISABLE
value|0x0b
define|#
directive|define
name|WDCMSG_CREATE_CONNECTION
value|0x0c
define|#
directive|define
name|WDCMSG_UPDATE_CONNECT_ATTR
value|0x0d
define|#
directive|define
name|WDCMSG_DELETE_CONNECT
value|0x0e
define|#
directive|define
name|WDCMSG_SEND
value|0x0f
define|#
directive|define
name|WDCMSG_FLUSH
value|0x10
comment|/* messages from Target -> Host */
define|#
directive|define
name|WDCMSG_STATS_UPDATE
value|0x11
define|#
directive|define
name|WDCMSG_BMISS
value|0x12
define|#
directive|define
name|WDCMSG_DEVICE_AVAIL
value|0x13
define|#
directive|define
name|WDCMSG_SEND_COMPLETE
value|0x14
define|#
directive|define
name|WDCMSG_DATA_AVAIL
value|0x15
define|#
directive|define
name|WDCMSG_SET_PWR_MODE
value|0x16
define|#
directive|define
name|WDCMSG_BMISS_ACK
value|0x17
define|#
directive|define
name|WDCMSG_SET_LED_STEADY
value|0x18
define|#
directive|define
name|WDCMSG_SET_LED_BLINK
value|0x19
comment|/* more messages */
define|#
directive|define
name|WDCMSG_SETUP_BEACON_DESC
value|0x1a
define|#
directive|define
name|WDCMSG_BEACON_INIT
value|0x1b
define|#
directive|define
name|WDCMSG_RESET_KEY_CACHE
value|0x1c
define|#
directive|define
name|WDCMSG_RESET_KEY_CACHE_ENTRY
value|0x1d
define|#
directive|define
name|WDCMSG_SET_KEY_CACHE_ENTRY
value|0x1e
define|#
directive|define
name|WDCMSG_SET_DECOMP_MASK
value|0x1f
define|#
directive|define
name|WDCMSG_SET_REGULATORY_DOMAIN
value|0x20
define|#
directive|define
name|WDCMSG_SET_LED_STATE
value|0x21
define|#
directive|define
name|WDCMSG_WRITE_ASSOCID
value|0x22
define|#
directive|define
name|WDCMSG_SET_STA_BEACON_TIMERS
value|0x23
define|#
directive|define
name|WDCMSG_GET_TSF
value|0x24
define|#
directive|define
name|WDCMSG_RESET_TSF
value|0x25
define|#
directive|define
name|WDCMSG_SET_ADHOC_MODE
value|0x26
define|#
directive|define
name|WDCMSG_SET_BASIC_RATE
value|0x27
define|#
directive|define
name|WDCMSG_MIB_CONTROL
value|0x28
define|#
directive|define
name|WDCMSG_GET_CHANNEL_DATA
value|0x29
define|#
directive|define
name|WDCMSG_GET_CUR_RSSI
value|0x2a
define|#
directive|define
name|WDCMSG_SET_ANTENNA_SWITCH
value|0x2b
define|#
directive|define
name|WDCMSG_USE_SHORT_SLOT_TIME
value|0x2f
define|#
directive|define
name|WDCMSG_SET_POWER_MODE
value|0x30
define|#
directive|define
name|WDCMSG_SETUP_PSPOLL_DESC
value|0x31
define|#
directive|define
name|WDCMSG_SET_RX_MULTICAST_FILTER
value|0x32
define|#
directive|define
name|WDCMSG_RX_FILTER
value|0x33
define|#
directive|define
name|WDCMSG_PER_CALIBRATION
value|0x34
define|#
directive|define
name|WDCMSG_RESET
value|0x35
define|#
directive|define
name|WDCMSG_DISABLE
value|0x36
define|#
directive|define
name|WDCMSG_PHY_DISABLE
value|0x37
define|#
directive|define
name|WDCMSG_SET_TX_POWER_LIMIT
value|0x38
define|#
directive|define
name|WDCMSG_SET_TX_QUEUE_PARAMS
value|0x39
define|#
directive|define
name|WDCMSG_SETUP_TX_QUEUE
value|0x3a
define|#
directive|define
name|WDCMSG_RELEASE_TX_QUEUE
value|0x3b
define|#
directive|define
name|WDCMSG_SET_DEFAULT_KEY
value|0x43
name|uint32_t
name|msgid
decl_stmt|;
comment|/* msg id (supplied by host) */
name|uint32_t
name|magic
decl_stmt|;
comment|/* response desired/target status */
name|uint32_t
name|debug
index|[
literal|4
index|]
decl_stmt|;
comment|/* debug data area */
comment|/* msg data follows */
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_chunk
block|{
name|uint8_t
name|seqnum
decl_stmt|;
comment|/* sequence number for ordering */
name|uint8_t
name|flags
decl_stmt|;
define|#
directive|define
name|UATH_CFLAGS_FINAL
value|0x01
comment|/* final chunk of a msg */
define|#
directive|define
name|UATH_CFLAGS_RXMSG
value|0x02
comment|/* chunk contains rx completion */
define|#
directive|define
name|UATH_CFLAGS_DEBUG
value|0x04
comment|/* for debugging */
name|uint16_t
name|length
decl_stmt|;
comment|/* chunk size in bytes */
comment|/* chunk data follows */
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|UATH_RX_DUMMYSIZE
value|4
end_define

begin_comment
comment|/*  * Message format for a WDCMSG_DATA_AVAIL message from Target to Host.  */
end_comment

begin_struct
struct|struct
name|uath_rx_desc
block|{
name|uint32_t
name|len
decl_stmt|;
comment|/* msg length including header */
name|uint32_t
name|code
decl_stmt|;
comment|/* WDCMSG_DATA_AVAIL */
name|uint32_t
name|gennum
decl_stmt|;
comment|/* generation number */
name|uint32_t
name|status
decl_stmt|;
comment|/* start of RECEIVE_INFO */
define|#
directive|define
name|UATH_STATUS_OK
value|0
define|#
directive|define
name|UATH_STATUS_STOP_IN_PROGRESS
value|1
define|#
directive|define
name|UATH_STATUS_CRC_ERR
value|2
define|#
directive|define
name|UATH_STATUS_PHY_ERR
value|3
define|#
directive|define
name|UATH_STATUS_DECRYPT_CRC_ERR
value|4
define|#
directive|define
name|UATH_STATUS_DECRYPT_MIC_ERR
value|5
define|#
directive|define
name|UATH_STATUS_DECOMP_ERR
value|6
define|#
directive|define
name|UATH_STATUS_KEY_ERR
value|7
define|#
directive|define
name|UATH_STATUS_ERR
value|8
name|uint32_t
name|tstamp_low
decl_stmt|;
comment|/* low-order 32-bits of rx timestamp */
name|uint32_t
name|tstamp_high
decl_stmt|;
comment|/* high-order 32-bits of rx timestamp */
name|uint32_t
name|framelen
decl_stmt|;
comment|/* frame length */
name|uint32_t
name|rate
decl_stmt|;
comment|/* rx rate code */
name|uint32_t
name|antenna
decl_stmt|;
name|int32_t
name|rssi
decl_stmt|;
name|uint32_t
name|channel
decl_stmt|;
name|uint32_t
name|phyerror
decl_stmt|;
name|uint32_t
name|connix
decl_stmt|;
comment|/* key table ix for bss traffic */
name|uint32_t
name|decrypterror
decl_stmt|;
name|uint32_t
name|keycachemiss
decl_stmt|;
name|uint32_t
name|pad
decl_stmt|;
comment|/* XXX? */
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_tx_desc
block|{
name|uint32_t
name|msglen
decl_stmt|;
name|uint32_t
name|msgid
decl_stmt|;
comment|/* msg id (supplied by host) */
name|uint32_t
name|type
decl_stmt|;
comment|/* opcode: WDMSG_SEND or WDCMSG_FLUSH */
name|uint32_t
name|txqid
decl_stmt|;
comment|/* tx queue id and flags */
define|#
directive|define
name|UATH_TXQID_MASK
value|0x0f
define|#
directive|define
name|UATH_TXQID_MINRATE
value|0x10
comment|/* use min tx rate */
define|#
directive|define
name|UATH_TXQID_FF
value|0x20
comment|/* content is fast frame */
name|uint32_t
name|connid
decl_stmt|;
comment|/* tx connection id */
define|#
directive|define
name|UATH_ID_INVALID
value|0xffffffff
comment|/* for sending prior to connection */
name|uint32_t
name|flags
decl_stmt|;
comment|/* non-zero if response desired */
define|#
directive|define
name|UATH_TX_NOTIFY
value|(1<< 24)
comment|/* f/w will send a UATH_NOTIF_TX */
name|uint32_t
name|buflen
decl_stmt|;
comment|/* payload length */
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_host_available
block|{
name|uint32_t
name|sw_ver_major
decl_stmt|;
name|uint32_t
name|sw_ver_minor
decl_stmt|;
name|uint32_t
name|sw_ver_patch
decl_stmt|;
name|uint32_t
name|sw_ver_build
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_SW_VER_MAJOR
value|1
end_define

begin_define
define|#
directive|define
name|ATH_SW_VER_MINOR
value|5
end_define

begin_define
define|#
directive|define
name|ATH_SW_VER_PATCH
value|0
end_define

begin_define
define|#
directive|define
name|ATH_SW_VER_BUILD
value|9999
end_define

begin_struct
struct|struct
name|uath_cmd_bind
block|{
name|uint32_t
name|targethandle
decl_stmt|;
name|uint32_t
name|hostapiversion
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command WDCMSG_RESET */
end_comment

begin_struct
struct|struct
name|uath_cmd_reset
block|{
name|uint32_t
name|flags
decl_stmt|;
comment|/* channel flags */
define|#
directive|define
name|UATH_CHAN_TURBO
value|0x0100
define|#
directive|define
name|UATH_CHAN_CCK
value|0x0200
define|#
directive|define
name|UATH_CHAN_OFDM
value|0x0400
define|#
directive|define
name|UATH_CHAN_2GHZ
value|0x1000
define|#
directive|define
name|UATH_CHAN_5GHZ
value|0x2000
name|uint32_t
name|freq
decl_stmt|;
comment|/* channel frequency */
name|uint32_t
name|maxrdpower
decl_stmt|;
name|uint32_t
name|cfgctl
decl_stmt|;
name|uint32_t
name|twiceantennareduction
decl_stmt|;
name|uint32_t
name|channelchange
decl_stmt|;
name|uint32_t
name|keeprccontent
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for commands UATH_CMD_READ_MAC and UATH_CMD_READ_EEPROM */
end_comment

begin_struct
struct|struct
name|uath_read_mac
block|{
name|uint32_t
name|len
decl_stmt|;
name|uint8_t
name|data
index|[
literal|32
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command UATH_CMD_WRITE_MAC */
end_comment

begin_struct
struct|struct
name|uath_write_mac
block|{
name|uint32_t
name|reg
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
name|uint8_t
name|data
index|[
literal|32
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command UATH_CMD_STA_JOIN */
end_comment

begin_struct
struct|struct
name|uath_cmd_join_bss
block|{
name|uint32_t
name|bssid
decl_stmt|;
comment|/* NB: use zero */
name|uint32_t
name|bssmac
index|[
literal|2
index|]
decl_stmt|;
comment|/* bssid mac address */
name|uint32_t
name|bsstype
decl_stmt|;
name|uint32_t
name|wlanmode
decl_stmt|;
name|uint32_t
name|beaconinterval
decl_stmt|;
name|uint32_t
name|dtiminterval
decl_stmt|;
name|uint32_t
name|cfpinterval
decl_stmt|;
name|uint32_t
name|atimwindow
decl_stmt|;
name|uint32_t
name|defaultrateix
decl_stmt|;
name|uint32_t
name|shortslottime11g
decl_stmt|;
name|uint32_t
name|sleepduration
decl_stmt|;
name|uint32_t
name|bmissthreshold
decl_stmt|;
name|uint32_t
name|tcppowerlimit
decl_stmt|;
name|uint32_t
name|quietduration
decl_stmt|;
name|uint32_t
name|quietoffset
decl_stmt|;
name|uint32_t
name|quietackctsallow
decl_stmt|;
name|uint32_t
name|bssdefaultkey
decl_stmt|;
comment|/* XXX? */
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_assoc_bss
block|{
name|uint32_t
name|bssid
decl_stmt|;
name|uint32_t
name|associd
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_start_bss
block|{
name|uint32_t
name|bssid
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command UATH_CMD_0C */
end_comment

begin_struct
struct|struct
name|uath_cmd_0c
block|{
name|uint32_t
name|magic1
decl_stmt|;
name|uint32_t
name|magic2
decl_stmt|;
name|uint32_t
name|magic3
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_ledsteady
block|{
comment|/* WDCMSG_SET_LED_STEADY */
name|uint32_t
name|lednum
decl_stmt|;
define|#
directive|define
name|UATH_LED_LINK
value|0
define|#
directive|define
name|UATH_LED_ACTIVITY
value|1
name|uint32_t
name|ledmode
decl_stmt|;
define|#
directive|define
name|UATH_LED_OFF
value|0
define|#
directive|define
name|UATH_LED_ON
value|1
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_ledblink
block|{
comment|/* WDCMSG_SET_LED_BLINK */
name|uint32_t
name|lednum
decl_stmt|;
name|uint32_t
name|ledmode
decl_stmt|;
name|uint32_t
name|blinkrate
decl_stmt|;
name|uint32_t
name|slowmode
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_ledstate
block|{
comment|/* WDCMSG_SET_LED_STATE */
name|uint32_t
name|connected
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_connkey_rec
block|{
name|uint8_t
name|bssid
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint32_t
name|keyiv
decl_stmt|;
name|uint32_t
name|extkeyiv
decl_stmt|;
name|uint16_t
name|keyflags
decl_stmt|;
name|uint16_t
name|keylen
decl_stmt|;
name|uint16_t
name|keytype
decl_stmt|;
comment|/* WEP, TKIP or AES */
comment|/* As far as I know, MIPS 4Kp is 32-bit processor  */
name|uint32_t
name|priv
decl_stmt|;
name|uint8_t
name|keyval
index|[
literal|32
index|]
decl_stmt|;
name|uint16_t
name|aes_keylen
decl_stmt|;
name|uint8_t
name|aes_keyval
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|mic_txkeyval
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|mic_rxkeyval
index|[
literal|8
index|]
decl_stmt|;
name|int64_t
name|keyrsc
index|[
literal|17
index|]
decl_stmt|;
name|int32_t
name|keytsc
index|[
literal|17
index|]
decl_stmt|;
name|int32_t
name|keyexttsc
index|[
literal|17
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command UATH_CMD_CRYPTO */
end_comment

begin_struct
struct|struct
name|uath_cmd_crypto
block|{
name|uint32_t
name|keyidx
decl_stmt|;
define|#
directive|define
name|UATH_DEFAULT_KEY
value|6
name|uint32_t
name|xorkey
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|struct
name|uath_connkey_rec
name|rec
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_rateset
block|{
name|uint8_t
name|length
decl_stmt|;
define|#
directive|define
name|UATH_MAX_NRATES
value|32
name|uint8_t
name|set
index|[
name|UATH_MAX_NRATES
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* structure for command WDCMSG_SET_BASIC_RATE */
end_comment

begin_struct
struct|struct
name|uath_cmd_rates
block|{
name|uint32_t
name|connid
decl_stmt|;
name|uint32_t
name|keeprccontent
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|struct
name|uath_cmd_rateset
name|rateset
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_enum
enum|enum
block|{
name|WLAN_MODE_NONE
init|=
literal|0
block|,
name|WLAN_MODE_11b
block|,
name|WLAN_MODE_11a
block|,
name|WLAN_MODE_11g
block|,
name|WLAN_MODE_11a_TURBO
block|,
name|WLAN_MODE_11g_TURBO
block|,
name|WLAN_MODE_11a_TURBO_PRIME
block|,
name|WLAN_MODE_11g_TURBO_PRIME
block|,
name|WLAN_MODE_11a_XR
block|,
name|WLAN_MODE_11g_XR
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|uath_cmd_connection_attr
block|{
name|uint32_t
name|longpreambleonly
decl_stmt|;
name|struct
name|uath_cmd_rateset
name|rateset
decl_stmt|;
name|uint32_t
name|wlanmode
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command WDCMSG_CREATE_CONNECTION */
end_comment

begin_struct
struct|struct
name|uath_cmd_create_connection
block|{
name|uint32_t
name|connid
decl_stmt|;
name|uint32_t
name|bssid
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|struct
name|uath_cmd_connection_attr
name|connattr
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_txq_setparams
block|{
comment|/* WDCMSG_SET_TX_QUEUE_PARAMS */
name|uint32_t
name|qnum
decl_stmt|;
name|uint32_t
name|aifs
decl_stmt|;
name|uint32_t
name|logcwmin
decl_stmt|;
name|uint32_t
name|logcwmax
decl_stmt|;
name|uint32_t
name|bursttime
decl_stmt|;
name|uint32_t
name|qflags
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_txq_attr
block|{
name|uint32_t
name|priority
decl_stmt|;
name|uint32_t
name|aifs
decl_stmt|;
name|uint32_t
name|logcwmin
decl_stmt|;
name|uint32_t
name|logcwmax
decl_stmt|;
name|uint32_t
name|bursttime
decl_stmt|;
name|uint32_t
name|mode
decl_stmt|;
name|uint32_t
name|qflags
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_txq_setup
block|{
comment|/* WDCMSG_SETUP_TX_QUEUE */
name|uint32_t
name|qid
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
name|struct
name|uath_cmd_txq_attr
name|attr
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_stoptxdma
block|{
comment|/* WDCMSG_STOP_TX_DMA */
name|uint32_t
name|qnum
decl_stmt|;
name|uint32_t
name|msec
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command UATH_CMD_31 */
end_comment

begin_struct
struct|struct
name|uath_cmd_31
block|{
name|uint32_t
name|magic1
decl_stmt|;
name|uint32_t
name|magic2
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_rx_filter
block|{
comment|/* WDCMSG_RX_FILTER */
name|uint32_t
name|bits
decl_stmt|;
define|#
directive|define
name|UATH_FILTER_RX_UCAST
value|0x00000001
define|#
directive|define
name|UATH_FILTER_RX_MCAST
value|0x00000002
define|#
directive|define
name|UATH_FILTER_RX_BCAST
value|0x00000004
define|#
directive|define
name|UATH_FILTER_RX_CONTROL
value|0x00000008
define|#
directive|define
name|UATH_FILTER_RX_BEACON
value|0x00000010
comment|/* beacon frames */
define|#
directive|define
name|UATH_FILTER_RX_PROM
value|0x00000020
comment|/* promiscuous mode */
define|#
directive|define
name|UATH_FILTER_RX_PHY_ERR
value|0x00000040
comment|/* phy errors */
define|#
directive|define
name|UATH_FILTER_RX_PHY_RADAR
value|0x00000080
comment|/* radar phy errors */
define|#
directive|define
name|UATH_FILTER_RX_XR_POOL
value|0x00000400
comment|/* XR group polls */
define|#
directive|define
name|UATH_FILTER_RX_PROBE_REQ
value|0x00000800
name|uint32_t
name|op
decl_stmt|;
define|#
directive|define
name|UATH_FILTER_OP_INIT
value|0x0
define|#
directive|define
name|UATH_FILTER_OP_SET
value|0x1
define|#
directive|define
name|UATH_FILTER_OP_CLEAR
value|0x2
define|#
directive|define
name|UATH_FILTER_OP_TEMP
value|0x3
define|#
directive|define
name|UATH_FILTER_OP_RESTORE
value|0x4
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_rx_mcast_filter
block|{
comment|/* WDCMSG_SET_RX_MCAST_FILTER */
name|uint32_t
name|filter0
decl_stmt|;
name|uint32_t
name|filter1
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_set_associd
block|{
comment|/* WDCMSG_WRITE_ASSOCID */
name|uint32_t
name|defaultrateix
decl_stmt|;
name|uint32_t
name|associd
decl_stmt|;
name|uint32_t
name|timoffset
decl_stmt|;
name|uint32_t
name|turboprime
decl_stmt|;
name|uint32_t
name|bssid
index|[
literal|2
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_set_stabeacon_timers
block|{
comment|/* WDCMSG_SET_STA_BEACON_TIMERS */
name|uint32_t
name|nexttbtt
decl_stmt|;
name|uint32_t
name|nextdtim
decl_stmt|;
name|uint32_t
name|nextcfp
decl_stmt|;
name|uint32_t
name|beaconperiod
decl_stmt|;
name|uint32_t
name|dtimperiod
decl_stmt|;
name|uint32_t
name|cfpperiod
decl_stmt|;
name|uint32_t
name|cfpduration
decl_stmt|;
name|uint32_t
name|sleepduration
decl_stmt|;
name|uint32_t
name|bsmissthreshold
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_enum
enum|enum
block|{
name|CFG_NONE
block|,
comment|/* Sentinal to indicate "no config" */
name|CFG_REG_DOMAIN
block|,
comment|/* Regulatory Domain */
name|CFG_RATE_CONTROL_ENABLE
block|,
name|CFG_DEF_XMIT_DATA_RATE
block|,
comment|/* NB: if rate control is not enabled */
name|CFG_HW_TX_RETRIES
block|,
name|CFG_SW_TX_RETRIES
block|,
name|CFG_SLOW_CLOCK_ENABLE
block|,
name|CFG_COMP_PROC
block|,
name|CFG_USER_RTS_THRESHOLD
block|,
name|CFG_XR2NORM_RATE_THRESHOLD
block|,
name|CFG_XRMODE_SWITCH_COUNT
block|,
name|CFG_PROTECTION_TYPE
block|,
name|CFG_BURST_SEQ_THRESHOLD
block|,
name|CFG_ABOLT
block|,
name|CFG_IQ_LOG_COUNT_MAX
block|,
name|CFG_MODE_CTS
block|,
name|CFG_WME_ENABLED
block|,
name|CFG_GPRS_CBR_PERIOD
block|,
name|CFG_SERVICE_TYPE
block|,
comment|/* MAC Address to use.  Overrides EEPROM */
name|CFG_MAC_ADDR
block|,
name|CFG_DEBUG_EAR
block|,
name|CFG_INIT_REGS
block|,
comment|/* An ID for use in error& debug messages */
name|CFG_DEBUG_ID
block|,
name|CFG_COMP_WIN_SZ
block|,
name|CFG_DIVERSITY_CTL
block|,
name|CFG_TP_SCALE
block|,
name|CFG_TPC_HALF_DBM5
block|,
name|CFG_TPC_HALF_DBM2
block|,
name|CFG_OVERRD_TX_POWER
block|,
name|CFG_USE_32KHZ_CLOCK
block|,
name|CFG_GMODE_PROTECTION
block|,
name|CFG_GMODE_PROTECT_RATE_INDEX
block|,
name|CFG_GMODE_NON_ERP_PREAMBLE
block|,
name|CFG_WDC_TRANSPORT_CHUNK_SIZE
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
comment|/* Sentinal to indicate "no capability" */
name|CAP_NONE
block|,
name|CAP_ALL
block|,
comment|/* ALL capabilities */
name|CAP_TARGET_VERSION
block|,
name|CAP_TARGET_REVISION
block|,
name|CAP_MAC_VERSION
block|,
name|CAP_MAC_REVISION
block|,
name|CAP_PHY_REVISION
block|,
name|CAP_ANALOG_5GHz_REVISION
block|,
name|CAP_ANALOG_2GHz_REVISION
block|,
comment|/* Target supports WDC message debug features */
name|CAP_DEBUG_WDCMSG_SUPPORT
block|,
name|CAP_REG_DOMAIN
block|,
name|CAP_COUNTRY_CODE
block|,
name|CAP_REG_CAP_BITS
block|,
name|CAP_WIRELESS_MODES
block|,
name|CAP_CHAN_SPREAD_SUPPORT
block|,
name|CAP_SLEEP_AFTER_BEACON_BROKEN
block|,
name|CAP_COMPRESS_SUPPORT
block|,
name|CAP_BURST_SUPPORT
block|,
name|CAP_FAST_FRAMES_SUPPORT
block|,
name|CAP_CHAP_TUNING_SUPPORT
block|,
name|CAP_TURBOG_SUPPORT
block|,
name|CAP_TURBO_PRIME_SUPPORT
block|,
name|CAP_DEVICE_TYPE
block|,
name|CAP_XR_SUPPORT
block|,
name|CAP_WME_SUPPORT
block|,
name|CAP_TOTAL_QUEUES
block|,
name|CAP_CONNECTION_ID_MAX
block|,
comment|/* Should absorb CAP_KEY_CACHE_SIZE */
name|CAP_LOW_5GHZ_CHAN
block|,
name|CAP_HIGH_5GHZ_CHAN
block|,
name|CAP_LOW_2GHZ_CHAN
block|,
name|CAP_HIGH_2GHZ_CHAN
block|,
name|CAP_MIC_AES_CCM
block|,
name|CAP_MIC_CKIP
block|,
name|CAP_MIC_TKIP
block|,
name|CAP_MIC_TKIP_WME
block|,
name|CAP_CIPHER_AES_CCM
block|,
name|CAP_CIPHER_CKIP
block|,
name|CAP_CIPHER_TKIP
block|,
name|CAP_TWICE_ANTENNAGAIN_5G
block|,
name|CAP_TWICE_ANTENNAGAIN_2G
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|ST_NONE
block|,
comment|/* Sentinal to indicate "no status" */
name|ST_ALL
block|,
name|ST_SERVICE_TYPE
block|,
name|ST_WLAN_MODE
block|,
name|ST_FREQ
block|,
name|ST_BAND
block|,
name|ST_LAST_RSSI
block|,
name|ST_PS_FRAMES_DROPPED
block|,
name|ST_CACHED_DEF_ANT
block|,
name|ST_COUNT_OTHER_RX_ANT
block|,
name|ST_USE_FAST_DIVERSITY
block|,
name|ST_MAC_ADDR
block|,
name|ST_RX_GENERATION_NUM
block|,
name|ST_TX_QUEUE_DEPTH
block|,
name|ST_SERIAL_NUMBER
block|,
name|ST_WDC_TRANSPORT_CHUNK_SIZE
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|BSS_ATTR_BEACON_INTERVAL
block|,
name|BSS_ATTR_DTIM_INTERVAL
block|,
name|BSS_ATTR_CFP_INTERVAL
block|,
name|BSS_ATTR_CFP_MAX_DURATION
block|,
name|BSS_ATTR_ATIM_WINDOW
block|,
name|BSS_ATTR_DEFAULT_RATE_INDEX
block|,
name|BSS_ATTR_SHORT_SLOT_TIME_11g
block|,
name|BSS_ATTR_SLEEP_DURATION
block|,
name|BSS_ATTR_BMISS_THRESHOLD
block|,
name|BSS_ATTR_TPC_POWER_LIMIT
block|,
name|BSS_ATTR_BSS_KEY_UPDATE
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|uath_cmd_update_bss_attribute
block|{
name|uint32_t
name|bssid
decl_stmt|;
name|uint32_t
name|attribute
decl_stmt|;
comment|/* BSS_ATTR_BEACON_INTERVAL, et al. */
name|uint32_t
name|cfgsize
decl_stmt|;
comment|/* should be zero 0 */
name|uint32_t
name|cfgdata
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|uath_cmd_update_bss_attribute_key
block|{
name|uint32_t
name|bssid
decl_stmt|;
name|uint32_t
name|attribute
decl_stmt|;
comment|/* BSS_ATTR_BSS_KEY_UPDATE */
name|uint32_t
name|cfgsize
decl_stmt|;
comment|/* size of remaining data */
name|uint32_t
name|bsskeyix
decl_stmt|;
name|uint32_t
name|isdefaultkey
decl_stmt|;
name|uint32_t
name|keyiv
decl_stmt|;
comment|/* IV generation control */
name|uint32_t
name|extkeyiv
decl_stmt|;
comment|/* extended IV for TKIP& CCM */
name|uint32_t
name|keyflags
decl_stmt|;
name|uint32_t
name|keytype
decl_stmt|;
name|uint32_t
name|initvalue
decl_stmt|;
comment|/* XXX */
name|uint32_t
name|keyval
index|[
literal|4
index|]
decl_stmt|;
name|uint32_t
name|mictxkeyval
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|micrxkeyval
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|keyrsc
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|TARGET_DEVICE_AWAKE
block|,
name|TARGET_DEVICE_SLEEP
block|,
name|TARGET_DEVICE_PWRDN
block|,
name|TARGET_DEVICE_PWRSAVE
block|,
name|TARGET_DEVICE_SUSPEND
block|,
name|TARGET_DEVICE_RESUME
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|UATH_MAX_TXBUFSZ
define|\
value|(sizeof(struct uath_chunk) + sizeof(struct uath_tx_desc) +	\ 	IEEE80211_MAX_LEN)
end_define

begin_comment
comment|/*  * it's not easy to measure how the chunk is passed into the host if the target  * passed the multi-chunks so just we check a minimal size we can imagine.  */
end_comment

begin_define
define|#
directive|define
name|UATH_MIN_RXBUFSZ
value|(sizeof(struct uath_chunk))
end_define

end_unit

