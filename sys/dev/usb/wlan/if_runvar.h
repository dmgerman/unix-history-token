begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$OpenBSD: if_runvar.h,v 1.3 2009/03/26 20:17:27 damien Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2008,2009 Damien Bergamini<damien.bergamini@free.fr>  * ported to FreeBSD by Akinori Furukoshi<moonlightakkiy@yahoo.ca>  * USB Consulting, Hans Petter Selasky<hselasky@freebsd.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IF_RUNVAR_H_
end_ifndef

begin_define
define|#
directive|define
name|_IF_RUNVAR_H_
end_define

begin_define
define|#
directive|define
name|RUN_MAX_RXSZ
define|\
value|MIN(4096, MJUMPAGESIZE)
end_define

begin_comment
comment|/* NB: "11" is the maximum number of padding bytes needed for Tx */
end_comment

begin_define
define|#
directive|define
name|RUN_MAX_TXSZ
define|\
value|(sizeof (struct rt2870_txd) +	\ 	 sizeof (struct rt2860_txwi) +	\ 	 MCLBYTES + 11)
end_define

begin_define
define|#
directive|define
name|RUN_TX_TIMEOUT
value|5000
end_define

begin_comment
comment|/* ms */
end_comment

begin_comment
comment|/* Tx ring count was 8/endpoint, now 32 for all 4 (or 6) endpoints. */
end_comment

begin_define
define|#
directive|define
name|RUN_TX_RING_COUNT
value|32
end_define

begin_define
define|#
directive|define
name|RUN_RX_RING_COUNT
value|1
end_define

begin_define
define|#
directive|define
name|RT2870_WCID_MAX
value|64
end_define

begin_define
define|#
directive|define
name|RUN_AID2WCID
parameter_list|(
name|aid
parameter_list|)
value|((aid)& 0xff)
end_define

begin_define
define|#
directive|define
name|RUN_VAP_MAX
value|8
end_define

begin_struct
struct|struct
name|run_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|int8_t
name|wr_dbm_antsignal
decl_stmt|;
name|uint8_t
name|wr_antenna
decl_stmt|;
name|uint8_t
name|wr_antsignal
decl_stmt|;
block|}
name|__packed
name|__aligned
argument_list|(
literal|8
argument_list|)
struct|;
end_struct

begin_define
define|#
directive|define
name|RUN_RX_RADIOTAP_PRESENT
define|\
value|(1<< IEEE80211_RADIOTAP_FLAGS |		\ 	 1<< IEEE80211_RADIOTAP_RATE |			\ 	 1<< IEEE80211_RADIOTAP_CHANNEL |		\ 	 1<< IEEE80211_RADIOTAP_DBM_ANTSIGNAL |	\ 	 1<< IEEE80211_RADIOTAP_ANTENNA |		\ 	 1<< IEEE80211_RADIOTAP_DB_ANTSIGNAL)
end_define

begin_struct
struct|struct
name|run_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint8_t
name|wt_rate
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
name|uint8_t
name|wt_hwqueue
decl_stmt|;
block|}
name|__packed
name|__aligned
argument_list|(
literal|8
argument_list|)
struct|;
end_struct

begin_define
define|#
directive|define
name|IEEE80211_RADIOTAP_HWQUEUE
value|15
end_define

begin_define
define|#
directive|define
name|RUN_TX_RADIOTAP_PRESENT
define|\
value|(1<< IEEE80211_RADIOTAP_FLAGS |		\ 	 1<< IEEE80211_RADIOTAP_RATE |			\ 	 1<< IEEE80211_RADIOTAP_CHANNEL |		\ 	 1<< IEEE80211_RADIOTAP_HWQUEUE)
end_define

begin_struct_decl
struct_decl|struct
name|run_softc
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|run_tx_data
block|{
name|STAILQ_ENTRY
argument_list|(
argument|run_tx_data
argument_list|)
name|next
expr_stmt|;
name|struct
name|run_softc
modifier|*
name|sc
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
name|uint32_t
name|align
index|[
literal|0
index|]
decl_stmt|;
comment|/* dummy field */
name|uint8_t
name|desc
index|[
sizeof|sizeof
argument_list|(
expr|struct
name|rt2870_txd
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
expr|struct
name|rt2860_txwi
argument_list|)
index|]
decl_stmt|;
name|uint8_t
name|ridx
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|STAILQ_HEAD
argument_list|(
name|run_tx_data_head
argument_list|,
name|run_tx_data
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|run_node
block|{
name|struct
name|ieee80211_node
name|ni
decl_stmt|;
name|uint8_t
name|ridx
index|[
name|IEEE80211_RATE_MAXSIZE
index|]
decl_stmt|;
name|uint8_t
name|ctl_ridx
index|[
name|IEEE80211_RATE_MAXSIZE
index|]
decl_stmt|;
name|uint8_t
name|amrr_ridx
decl_stmt|;
name|uint8_t
name|mgt_ridx
decl_stmt|;
name|uint8_t
name|fix_ridx
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RUN_NODE
parameter_list|(
name|ni
parameter_list|)
value|((struct run_node *)(ni))
end_define

begin_struct
struct|struct
name|run_cmdq
block|{
name|void
modifier|*
name|arg0
decl_stmt|;
name|void
modifier|*
name|arg1
decl_stmt|;
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|struct
name|ieee80211_key
modifier|*
name|k
decl_stmt|;
name|struct
name|ieee80211_key
name|key
decl_stmt|;
name|uint8_t
name|mac
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|wcid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|run_vap
block|{
name|struct
name|ieee80211vap
name|vap
decl_stmt|;
name|struct
name|ieee80211_beacon_offsets
name|bo
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|beacon_mbuf
decl_stmt|;
name|int
function_decl|(
modifier|*
name|newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|uint8_t
name|rvp_id
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RUN_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct run_vap *)(vap))
end_define

begin_comment
comment|/*  * There are 7 bulk endpoints: 1 for RX  * and 6 for TX (4 EDCAs + HCCA + Prio).  * Update 03-14-2009:  some devices like the Planex GW-US300MiniS  * seem to have only 4 TX bulk endpoints (Fukaumi Naoki).  */
end_comment

begin_enum
enum|enum
block|{
name|RUN_BULK_TX_BE
block|,
comment|/* = WME_AC_BE */
name|RUN_BULK_TX_BK
block|,
comment|/* = WME_AC_BK */
name|RUN_BULK_TX_VI
block|,
comment|/* = WME_AC_VI */
name|RUN_BULK_TX_VO
block|,
comment|/* = WME_AC_VO */
name|RUN_BULK_TX_HCCA
block|,
name|RUN_BULK_TX_PRIO
block|,
name|RUN_BULK_RX
block|,
name|RUN_N_XFER
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|RUN_EP_QUEUES
value|RUN_BULK_RX
end_define

begin_struct
struct|struct
name|run_endpoint_queue
block|{
name|struct
name|run_tx_data
name|tx_data
index|[
name|RUN_TX_RING_COUNT
index|]
decl_stmt|;
name|struct
name|run_tx_data_head
name|tx_qh
decl_stmt|;
name|struct
name|run_tx_data_head
name|tx_fh
decl_stmt|;
name|uint32_t
name|tx_nfree
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|run_softc
block|{
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|struct
name|ieee80211com
name|sc_ic
decl_stmt|;
name|struct
name|mbufq
name|sc_snd
decl_stmt|;
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|usb_device
modifier|*
name|sc_udev
decl_stmt|;
name|int
name|sc_need_fwload
decl_stmt|;
name|int
name|sc_flags
decl_stmt|;
define|#
directive|define
name|RUN_FLAG_FWLOAD_NEEDED
value|0x01
define|#
directive|define
name|RUN_RUNNING
value|0x02
name|uint16_t
name|wcid_stats
index|[
name|RT2870_WCID_MAX
operator|+
literal|1
index|]
index|[
literal|3
index|]
decl_stmt|;
define|#
directive|define
name|RUN_TXCNT
value|0
define|#
directive|define
name|RUN_SUCCESS
value|1
define|#
directive|define
name|RUN_RETRY
value|2
name|int
function_decl|(
modifier|*
name|sc_srom_read
function_decl|)
parameter_list|(
name|struct
name|run_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
modifier|*
parameter_list|)
function_decl|;
name|uint16_t
name|mac_ver
decl_stmt|;
name|uint16_t
name|mac_rev
decl_stmt|;
name|uint16_t
name|rf_rev
decl_stmt|;
name|uint8_t
name|freq
decl_stmt|;
name|uint8_t
name|ntxchains
decl_stmt|;
name|uint8_t
name|nrxchains
decl_stmt|;
name|uint8_t
name|bbp25
decl_stmt|;
name|uint8_t
name|bbp26
decl_stmt|;
name|uint8_t
name|rf24_20mhz
decl_stmt|;
name|uint8_t
name|rf24_40mhz
decl_stmt|;
name|uint8_t
name|patch_dac
decl_stmt|;
name|uint8_t
name|rfswitch
decl_stmt|;
name|uint8_t
name|ext_2ghz_lna
decl_stmt|;
name|uint8_t
name|ext_5ghz_lna
decl_stmt|;
name|uint8_t
name|calib_2ghz
decl_stmt|;
name|uint8_t
name|calib_5ghz
decl_stmt|;
name|uint8_t
name|txmixgain_2ghz
decl_stmt|;
name|uint8_t
name|txmixgain_5ghz
decl_stmt|;
name|int8_t
name|txpow1
index|[
literal|54
index|]
decl_stmt|;
name|int8_t
name|txpow2
index|[
literal|54
index|]
decl_stmt|;
name|int8_t
name|txpow3
index|[
literal|54
index|]
decl_stmt|;
name|int8_t
name|rssi_2ghz
index|[
literal|3
index|]
decl_stmt|;
name|int8_t
name|rssi_5ghz
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|lna
index|[
literal|4
index|]
decl_stmt|;
struct|struct
block|{
name|uint8_t
name|reg
decl_stmt|;
name|uint8_t
name|val
decl_stmt|;
block|}
name|bbp
index|[
literal|10
index|]
struct|,
name|rf
index|[
literal|10
index|]
struct|;
name|uint8_t
name|leds
decl_stmt|;
name|uint16_t
name|led
index|[
literal|3
index|]
decl_stmt|;
name|uint32_t
name|txpow20mhz
index|[
literal|5
index|]
decl_stmt|;
name|uint32_t
name|txpow40mhz_2ghz
index|[
literal|5
index|]
decl_stmt|;
name|uint32_t
name|txpow40mhz_5ghz
index|[
literal|5
index|]
decl_stmt|;
name|struct
name|run_endpoint_queue
name|sc_epq
index|[
name|RUN_EP_QUEUES
index|]
decl_stmt|;
name|struct
name|task
name|ratectl_task
decl_stmt|;
name|struct
name|usb_callout
name|ratectl_ch
decl_stmt|;
name|uint8_t
name|ratectl_run
decl_stmt|;
define|#
directive|define
name|RUN_RATECTL_OFF
value|0
comment|/* need to be power of 2, otherwise RUN_CMDQ_GET fails */
define|#
directive|define
name|RUN_CMDQ_MAX
value|16
define|#
directive|define
name|RUN_CMDQ_MASQ
value|(RUN_CMDQ_MAX - 1)
name|struct
name|run_cmdq
name|cmdq
index|[
name|RUN_CMDQ_MAX
index|]
decl_stmt|;
name|struct
name|task
name|cmdq_task
decl_stmt|;
name|uint32_t
name|cmdq_store
decl_stmt|;
name|uint8_t
name|cmdq_exec
decl_stmt|;
name|uint8_t
name|cmdq_run
decl_stmt|;
name|uint8_t
name|cmdq_key_set
decl_stmt|;
define|#
directive|define
name|RUN_CMDQ_ABORT
value|0
define|#
directive|define
name|RUN_CMDQ_GO
value|1
name|struct
name|usb_xfer
modifier|*
name|sc_xfer
index|[
name|RUN_N_XFER
index|]
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|rx_m
decl_stmt|;
name|uint8_t
name|fifo_cnt
decl_stmt|;
name|uint8_t
name|running
decl_stmt|;
name|uint8_t
name|runbmap
decl_stmt|;
name|uint8_t
name|ap_running
decl_stmt|;
name|uint8_t
name|adhoc_running
decl_stmt|;
name|uint8_t
name|sta_running
decl_stmt|;
name|uint8_t
name|rvp_cnt
decl_stmt|;
name|uint8_t
name|rvp_bmap
decl_stmt|;
name|uint8_t
name|sc_detached
decl_stmt|;
union|union
block|{
name|struct
name|run_rx_radiotap_header
name|th
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|64
index|]
decl_stmt|;
block|}
name|sc_rxtapu
union|;
define|#
directive|define
name|sc_rxtap
value|sc_rxtapu.th
name|int
name|sc_rxtap_len
decl_stmt|;
union|union
block|{
name|struct
name|run_tx_radiotap_header
name|th
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|64
index|]
decl_stmt|;
block|}
name|sc_txtapu
union|;
define|#
directive|define
name|sc_txtap
value|sc_txtapu.th
name|int
name|sc_txtap_len
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RUN_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|RUN_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|RUN_LOCK_ASSERT
parameter_list|(
name|sc
parameter_list|,
name|t
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, t)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _IF_RUNVAR_H_ */
end_comment

end_unit

