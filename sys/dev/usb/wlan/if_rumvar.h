begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2005, 2006 Damien Bergamini<damien.bergamini@free.fr>  * Copyright (c) 2006 Niall O'Higgins<niallo@openbsd.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_define
define|#
directive|define
name|RUM_TX_LIST_COUNT
value|8
end_define

begin_define
define|#
directive|define
name|RUM_TX_MINFREE
value|2
end_define

begin_struct
struct|struct
name|rum_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint64_t
name|wr_tsf
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|int8_t
name|wr_antsignal
decl_stmt|;
name|int8_t
name|wr_antnoise
decl_stmt|;
name|uint8_t
name|wr_antenna
decl_stmt|;
block|}
name|__packed
name|__aligned
argument_list|(
literal|8
argument_list|)
struct|;
end_struct

begin_define
define|#
directive|define
name|RT2573_RX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_TSFT) |				\ 	 (1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTSIGNAL) |			\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTNOISE) |			\ 	 (1<< IEEE80211_RADIOTAP_ANTENNA) |				\ 	 0)
end_define

begin_struct
struct|struct
name|rum_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint8_t
name|wt_rate
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
name|uint8_t
name|wt_antenna
decl_stmt|;
block|}
name|__packed
name|__aligned
argument_list|(
literal|8
argument_list|)
struct|;
end_struct

begin_define
define|#
directive|define
name|RT2573_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_ANTENNA))
end_define

begin_struct_decl
struct_decl|struct
name|rum_softc
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|rum_tx_data
block|{
name|STAILQ_ENTRY
argument_list|(
argument|rum_tx_data
argument_list|)
name|next
expr_stmt|;
name|struct
name|rum_softc
modifier|*
name|sc
decl_stmt|;
name|struct
name|rum_tx_desc
name|desc
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
name|int
name|rate
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|rum_tx_data
argument_list|)
name|rum_txdhead
expr_stmt|;
end_typedef

begin_union
union|union
name|sec_param
block|{
name|struct
name|ieee80211_key
name|key
decl_stmt|;
name|uint8_t
name|macaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|struct
name|ieee80211vap
modifier|*
name|vap
decl_stmt|;
block|}
union|;
end_union

begin_define
define|#
directive|define
name|CMD_FUNC_PROTO
value|void (*func)(struct rum_softc *, \ 					    union sec_param *, uint8_t)
end_define

begin_struct
struct|struct
name|rum_cmdq
block|{
name|union
name|sec_param
name|data
decl_stmt|;
name|uint8_t
name|rvp_id
decl_stmt|;
name|CMD_FUNC_PROTO
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RUM_CMDQ_SIZE
value|16
end_define

begin_struct
struct|struct
name|rum_vap
block|{
name|struct
name|ieee80211vap
name|vap
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|bcn_mbuf
decl_stmt|;
name|struct
name|usb_callout
name|ratectl_ch
decl_stmt|;
name|struct
name|task
name|ratectl_task
decl_stmt|;
name|uint8_t
name|maxretry
decl_stmt|;
name|int
function_decl|(
modifier|*
name|newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|bmiss
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|recv_mgmt
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|struct
name|ieee80211_rx_stats
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RUM_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct rum_vap *)(vap))
end_define

begin_enum
enum|enum
block|{
name|RUM_BULK_WR
block|,
name|RUM_BULK_RD
block|,
name|RUM_N_TRANSFER
init|=
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|rum_softc
block|{
name|struct
name|ieee80211com
name|sc_ic
decl_stmt|;
name|struct
name|ieee80211_ratectl_tx_stats
name|sc_txs
decl_stmt|;
name|struct
name|mbufq
name|sc_snd
decl_stmt|;
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|usb_device
modifier|*
name|sc_udev
decl_stmt|;
name|struct
name|usb_xfer
modifier|*
name|sc_xfer
index|[
name|RUM_N_TRANSFER
index|]
decl_stmt|;
name|uint8_t
name|rf_rev
decl_stmt|;
name|uint8_t
name|rffreq
decl_stmt|;
name|struct
name|rum_tx_data
name|tx_data
index|[
name|RUM_TX_LIST_COUNT
index|]
decl_stmt|;
name|rum_txdhead
name|tx_q
decl_stmt|;
name|rum_txdhead
name|tx_free
decl_stmt|;
name|int
name|tx_nfree
decl_stmt|;
name|struct
name|rum_rx_desc
name|sc_rx_desc
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|int
name|sc_sleep_end
decl_stmt|;
name|int
name|sc_sleep_time
decl_stmt|;
name|uint8_t
name|last_rx_flags
decl_stmt|;
name|struct
name|rum_cmdq
name|cmdq
index|[
name|RUM_CMDQ_SIZE
index|]
decl_stmt|;
name|struct
name|mtx
name|cmdq_mtx
decl_stmt|;
name|struct
name|task
name|cmdq_task
decl_stmt|;
name|uint8_t
name|cmdq_first
decl_stmt|;
name|uint8_t
name|cmdq_last
decl_stmt|;
name|uint32_t
name|sta
index|[
literal|6
index|]
decl_stmt|;
name|uint32_t
name|rf_regs
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|txpow
index|[
literal|44
index|]
decl_stmt|;
name|u_int
name|sc_detached
range|:
literal|1
decl_stmt|,
name|sc_running
range|:
literal|1
decl_stmt|,
name|sc_sleeping
range|:
literal|1
decl_stmt|,
name|sc_clr_shkeys
range|:
literal|1
decl_stmt|;
name|uint8_t
name|sc_bssid
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|struct
name|wmeParams
name|wme_params
index|[
name|WME_NUM_AC
index|]
decl_stmt|;
name|uint8_t
name|vap_key_count
index|[
literal|1
index|]
decl_stmt|;
name|uint64_t
name|keys_bmap
decl_stmt|;
struct|struct
block|{
name|uint8_t
name|val
decl_stmt|;
name|uint8_t
name|reg
decl_stmt|;
block|}
name|__packed
name|bbp_prom
index|[
literal|16
index|]
struct|;
name|int
name|hw_radio
decl_stmt|;
name|int
name|rx_ant
decl_stmt|;
name|int
name|tx_ant
decl_stmt|;
name|int
name|nb_ant
decl_stmt|;
name|int
name|ext_2ghz_lna
decl_stmt|;
name|int
name|ext_5ghz_lna
decl_stmt|;
name|int
name|rssi_2ghz_corr
decl_stmt|;
name|int
name|rssi_5ghz_corr
decl_stmt|;
name|uint8_t
name|bbp17
decl_stmt|;
name|struct
name|rum_rx_radiotap_header
name|sc_rxtap
decl_stmt|;
name|struct
name|rum_tx_radiotap_header
name|sc_txtap
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RUM_LOCK_INIT
parameter_list|(
name|sc
parameter_list|)
define|\
value|mtx_init(&(sc)->sc_mtx, device_get_nameunit((sc)->sc_dev), \ 	    MTX_NETWORK_LOCK, MTX_DEF);
end_define

begin_define
define|#
directive|define
name|RUM_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|RUM_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|RUM_LOCK_ASSERT
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|RUM_LOCK_DESTROY
parameter_list|(
name|sc
parameter_list|)
value|mtx_destroy(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|RUM_CMDQ_LOCK_INIT
parameter_list|(
name|sc
parameter_list|)
define|\
value|mtx_init(&(sc)->cmdq_mtx, "cmdq lock", NULL, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|RUM_CMDQ_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->cmdq_mtx)
end_define

begin_define
define|#
directive|define
name|RUM_CMDQ_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->cmdq_mtx)
end_define

begin_define
define|#
directive|define
name|RUM_CMDQ_LOCK_DESTROY
parameter_list|(
name|sc
parameter_list|)
value|mtx_destroy(&(sc)->cmdq_mtx)
end_define

end_unit

