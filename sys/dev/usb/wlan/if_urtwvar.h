begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2008 Weongyo Jeong<weongyo@FreeBSD.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_enum
enum|enum
block|{
name|URTW_8187B_BULK_RX
block|,
name|URTW_8187B_BULK_TX_BE
block|,
name|URTW_8187B_BULK_TX_BK
block|,
name|URTW_8187B_BULK_TX_VI
block|,
name|URTW_8187B_BULK_TX_VO
block|,
name|URTW_8187B_BULK_TX_EP12
block|,
name|URTW_8187B_N_XFERS
init|=
literal|6
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|URTW_8187L_BULK_RX
block|,
name|URTW_8187L_BULK_TX_LOW
block|,
name|URTW_8187L_BULK_TX_NORMAL
block|,
name|URTW_8187L_N_XFERS
init|=
literal|3
block|}
enum|;
end_enum

begin_comment
comment|/* XXX no definition at net80211?  */
end_comment

begin_define
define|#
directive|define
name|URTW_MAX_CHANNELS
value|15
end_define

begin_struct
struct|struct
name|urtw_data
block|{
name|struct
name|urtw_softc
modifier|*
name|sc
decl_stmt|;
name|uint8_t
modifier|*
name|buf
decl_stmt|;
name|uint16_t
name|buflen
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
comment|/* NB: tx only */
name|STAILQ_ENTRY
argument_list|(
argument|urtw_data
argument_list|)
name|next
expr_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|urtw_data
argument_list|)
name|urtw_datahead
expr_stmt|;
end_typedef

begin_comment
comment|/* XXX not correct..  */
end_comment

begin_define
define|#
directive|define
name|URTW_MIN_RXBUFSZ
define|\
value|(sizeof(struct ieee80211_frame_min))
end_define

begin_define
define|#
directive|define
name|URTW_RX_DATA_LIST_COUNT
value|4
end_define

begin_define
define|#
directive|define
name|URTW_TX_DATA_LIST_COUNT
value|16
end_define

begin_define
define|#
directive|define
name|URTW_RX_MAXSIZE
value|0x9c4
end_define

begin_define
define|#
directive|define
name|URTW_TX_MAXSIZE
value|0x9c4
end_define

begin_struct
struct|struct
name|urtw_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|int8_t
name|wr_dbm_antsignal
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|URTW_RX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTSIGNAL))
end_define

begin_struct
struct|struct
name|urtw_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|URTW_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL))
end_define

begin_struct
struct|struct
name|urtw_vap
block|{
name|struct
name|ieee80211vap
name|vap
decl_stmt|;
name|int
function_decl|(
modifier|*
name|newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|URTW_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct urtw_vap *)(vap))
end_define

begin_struct
struct|struct
name|urtw_softc
block|{
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|usb_device
modifier|*
name|sc_udev
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|int
name|sc_debug
decl_stmt|;
name|int
name|sc_if_flags
decl_stmt|;
name|int
name|sc_flags
decl_stmt|;
define|#
directive|define
name|URTW_INIT_ONCE
value|(1<< 1)
define|#
directive|define
name|URTW_RTL8187B
value|(1<< 2)
define|#
directive|define
name|URTW_RTL8187B_REV_B
value|(1<< 3)
define|#
directive|define
name|URTW_RTL8187B_REV_D
value|(1<< 4)
define|#
directive|define
name|URTW_RTL8187B_REV_E
value|(1<< 5)
name|enum
name|ieee80211_state
name|sc_state
decl_stmt|;
name|int
name|sc_epromtype
decl_stmt|;
define|#
directive|define
name|URTW_EEPROM_93C46
value|0
define|#
directive|define
name|URTW_EEPROM_93C56
value|1
name|uint8_t
name|sc_crcmon
decl_stmt|;
name|uint8_t
name|sc_bssid
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|struct
name|ieee80211_channel
modifier|*
name|sc_curchan
decl_stmt|;
comment|/* for RF  */
name|usb2_error_t
function_decl|(
modifier|*
name|sc_rf_init
function_decl|)
parameter_list|(
name|struct
name|urtw_softc
modifier|*
parameter_list|)
function_decl|;
name|usb2_error_t
function_decl|(
modifier|*
name|sc_rf_set_chan
function_decl|)
parameter_list|(
name|struct
name|urtw_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|usb2_error_t
function_decl|(
modifier|*
name|sc_rf_set_sens
function_decl|)
parameter_list|(
name|struct
name|urtw_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|usb2_error_t
function_decl|(
modifier|*
name|sc_rf_stop
function_decl|)
parameter_list|(
name|struct
name|urtw_softc
modifier|*
parameter_list|)
function_decl|;
name|uint8_t
name|sc_rfchip
decl_stmt|;
name|uint32_t
name|sc_max_sens
decl_stmt|;
name|uint32_t
name|sc_sens
decl_stmt|;
comment|/* for LED  */
name|struct
name|usb_callout
name|sc_led_ch
decl_stmt|;
name|struct
name|task
name|sc_led_task
decl_stmt|;
name|uint8_t
name|sc_psr
decl_stmt|;
name|uint8_t
name|sc_strategy
decl_stmt|;
define|#
directive|define
name|URTW_LED_GPIO
value|1
name|uint8_t
name|sc_gpio_ledon
decl_stmt|;
name|uint8_t
name|sc_gpio_ledinprogress
decl_stmt|;
name|uint8_t
name|sc_gpio_ledstate
decl_stmt|;
name|uint8_t
name|sc_gpio_ledpin
decl_stmt|;
name|uint8_t
name|sc_gpio_blinktime
decl_stmt|;
name|uint8_t
name|sc_gpio_blinkstate
decl_stmt|;
comment|/* RX/TX */
name|struct
name|usb_xfer
modifier|*
name|sc_xfer
index|[
name|URTW_8187B_N_XFERS
index|]
decl_stmt|;
define|#
directive|define
name|URTW_PRIORITY_LOW
value|0
define|#
directive|define
name|URTW_PRIORITY_NORMAL
value|1
define|#
directive|define
name|URTW_DATA_TIMEOUT
value|10000
comment|/* 10 sec  */
define|#
directive|define
name|URTW_8187B_TXPIPE_BE
value|0x6
comment|/* best effort */
define|#
directive|define
name|URTW_8187B_TXPIPE_BK
value|0x7
comment|/* background */
define|#
directive|define
name|URTW_8187B_TXPIPE_VI
value|0x5
comment|/* video */
define|#
directive|define
name|URTW_8187B_TXPIPE_VO
value|0x4
comment|/* voice */
define|#
directive|define
name|URTW_8187B_TXPIPE_MAX
value|4
name|struct
name|urtw_data
name|sc_rx
index|[
name|URTW_RX_DATA_LIST_COUNT
index|]
decl_stmt|;
name|urtw_datahead
name|sc_rx_active
decl_stmt|;
name|urtw_datahead
name|sc_rx_inactive
decl_stmt|;
name|struct
name|urtw_data
name|sc_tx
index|[
name|URTW_TX_DATA_LIST_COUNT
index|]
decl_stmt|;
name|urtw_datahead
name|sc_tx_active
decl_stmt|;
name|urtw_datahead
name|sc_tx_inactive
decl_stmt|;
name|urtw_datahead
name|sc_tx_pending
decl_stmt|;
name|uint8_t
name|sc_rts_retry
decl_stmt|;
name|uint8_t
name|sc_tx_retry
decl_stmt|;
name|uint8_t
name|sc_preamble_mode
decl_stmt|;
define|#
directive|define
name|URTW_PREAMBLE_MODE_SHORT
value|1
define|#
directive|define
name|URTW_PREAMBLE_MODE_LONG
value|2
name|struct
name|callout
name|sc_watchdog_ch
decl_stmt|;
name|int
name|sc_txtimer
decl_stmt|;
name|int
name|sc_currate
decl_stmt|;
comment|/* TX power  */
name|uint8_t
name|sc_txpwr_cck
index|[
name|URTW_MAX_CHANNELS
index|]
decl_stmt|;
name|uint8_t
name|sc_txpwr_cck_base
decl_stmt|;
name|uint8_t
name|sc_txpwr_ofdm
index|[
name|URTW_MAX_CHANNELS
index|]
decl_stmt|;
name|uint8_t
name|sc_txpwr_ofdm_base
decl_stmt|;
name|struct
name|urtw_rx_radiotap_header
name|sc_rxtap
decl_stmt|;
name|int
name|sc_rxtap_len
decl_stmt|;
name|struct
name|urtw_tx_radiotap_header
name|sc_txtap
decl_stmt|;
name|int
name|sc_txtap_len
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|URTW_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|URTW_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|URTW_ASSERT_LOCKED
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, MA_OWNED)
end_define

end_unit

