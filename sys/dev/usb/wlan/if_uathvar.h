begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$OpenBSD: if_uathvar.h,v 1.3 2006/09/20 19:47:17 damien Exp $	*/
end_comment

begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2006  *	Damien Bergamini<damien.bergamini@free.fr>  * Copyright (c) 2006 Sam Leffler, Errno Consulting  * Copyright (c) 2008-2009 Weongyo Jeong<weongyo@freebsd.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_enum
enum|enum
block|{
name|UATH_INTR_RX
block|,
name|UATH_INTR_TX
block|,
name|UATH_BULK_RX
block|,
name|UATH_BULK_TX
block|,
name|UATH_N_XFERS
init|=
literal|4
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|UATH_ID_BSS
value|2
end_define

begin_comment
comment|/* Connection ID  */
end_comment

begin_define
define|#
directive|define
name|UATH_RX_DATA_LIST_COUNT
value|128
end_define

begin_define
define|#
directive|define
name|UATH_TX_DATA_LIST_COUNT
value|16
end_define

begin_define
define|#
directive|define
name|UATH_CMD_LIST_COUNT
value|60
end_define

begin_define
define|#
directive|define
name|UATH_DATA_TIMEOUT
value|10000
end_define

begin_define
define|#
directive|define
name|UATH_CMD_TIMEOUT
value|1000
end_define

begin_comment
comment|/* flags for sending firmware commands */
end_comment

begin_define
define|#
directive|define
name|UATH_CMD_FLAG_ASYNC
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|UATH_CMD_FLAG_READ
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|UATH_CMD_FLAG_MAGIC
value|(1<< 2)
end_define

begin_struct
struct|struct
name|uath_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|u_int64_t
name|wr_tsf
decl_stmt|;
name|u_int8_t
name|wr_flags
decl_stmt|;
name|u_int8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|int8_t
name|wr_antsignal
decl_stmt|;
name|int8_t
name|wr_antnoise
decl_stmt|;
name|u_int8_t
name|wr_antenna
decl_stmt|;
block|}
name|__packed
name|__aligned
argument_list|(
literal|8
argument_list|)
struct|;
end_struct

begin_define
define|#
directive|define
name|UATH_RX_RADIOTAP_PRESENT
value|(		\ 	(1<< IEEE80211_RADIOTAP_TSFT)		| \ 	(1<< IEEE80211_RADIOTAP_FLAGS)		| \ 	(1<< IEEE80211_RADIOTAP_RATE)		| \ 	(1<< IEEE80211_RADIOTAP_ANTENNA)	| \ 	(1<< IEEE80211_RADIOTAP_CHANNEL)	| \ 	(1<< IEEE80211_RADIOTAP_DBM_ANTSIGNAL)	| \ 	(1<< IEEE80211_RADIOTAP_DBM_ANTNOISE)	| \ 	0)
end_define

begin_struct
struct|struct
name|uath_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
block|}
name|__packed
name|__aligned
argument_list|(
literal|8
argument_list|)
struct|;
end_struct

begin_define
define|#
directive|define
name|UATH_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL))
end_define

begin_struct
struct|struct
name|uath_data
block|{
name|struct
name|uath_softc
modifier|*
name|sc
decl_stmt|;
name|uint8_t
modifier|*
name|buf
decl_stmt|;
name|uint16_t
name|buflen
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
comment|/* NB: tx only */
name|STAILQ_ENTRY
argument_list|(
argument|uath_data
argument_list|)
name|next
expr_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|uath_data
argument_list|)
name|uath_datahead
expr_stmt|;
end_typedef

begin_struct
struct|struct
name|uath_cmd
block|{
name|struct
name|uath_softc
modifier|*
name|sc
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|msgid
decl_stmt|;
name|uint8_t
modifier|*
name|buf
decl_stmt|;
name|uint16_t
name|buflen
decl_stmt|;
name|void
modifier|*
name|odata
decl_stmt|;
comment|/* NB: tx only */
name|int
name|olen
decl_stmt|;
comment|/* space in odata */
name|STAILQ_ENTRY
argument_list|(
argument|uath_cmd
argument_list|)
name|next
expr_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|uath_cmd
argument_list|)
name|uath_cmdhead
expr_stmt|;
end_typedef

begin_struct
struct|struct
name|uath_wme_settings
block|{
name|uint8_t
name|aifsn
decl_stmt|;
name|uint8_t
name|logcwmin
decl_stmt|;
name|uint8_t
name|logcwmax
decl_stmt|;
name|uint16_t
name|txop
decl_stmt|;
define|#
directive|define
name|UATH_TXOP_TO_US
parameter_list|(
name|txop
parameter_list|)
value|((txop)<< 5)
name|uint8_t
name|acm
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|uath_devcap
block|{
name|uint32_t
name|targetVersion
decl_stmt|;
name|uint32_t
name|targetRevision
decl_stmt|;
name|uint32_t
name|macVersion
decl_stmt|;
name|uint32_t
name|macRevision
decl_stmt|;
name|uint32_t
name|phyRevision
decl_stmt|;
name|uint32_t
name|analog5GhzRevision
decl_stmt|;
name|uint32_t
name|analog2GhzRevision
decl_stmt|;
name|uint32_t
name|regDomain
decl_stmt|;
name|uint32_t
name|regCapBits
decl_stmt|;
name|uint32_t
name|countryCode
decl_stmt|;
name|uint32_t
name|keyCacheSize
decl_stmt|;
name|uint32_t
name|numTxQueues
decl_stmt|;
name|uint32_t
name|connectionIdMax
decl_stmt|;
name|uint32_t
name|wirelessModes
decl_stmt|;
define|#
directive|define
name|UATH_WIRELESS_MODE_11A
value|0x01
define|#
directive|define
name|UATH_WIRELESS_MODE_TURBO
value|0x02
define|#
directive|define
name|UATH_WIRELESS_MODE_11B
value|0x04
define|#
directive|define
name|UATH_WIRELESS_MODE_11G
value|0x08
define|#
directive|define
name|UATH_WIRELESS_MODE_108G
value|0x10
name|uint32_t
name|chanSpreadSupport
decl_stmt|;
name|uint32_t
name|compressSupport
decl_stmt|;
name|uint32_t
name|burstSupport
decl_stmt|;
name|uint32_t
name|fastFramesSupport
decl_stmt|;
name|uint32_t
name|chapTuningSupport
decl_stmt|;
name|uint32_t
name|turboGSupport
decl_stmt|;
name|uint32_t
name|turboPrimeSupport
decl_stmt|;
name|uint32_t
name|deviceType
decl_stmt|;
name|uint32_t
name|wmeSupport
decl_stmt|;
name|uint32_t
name|low2GhzChan
decl_stmt|;
name|uint32_t
name|high2GhzChan
decl_stmt|;
name|uint32_t
name|low5GhzChan
decl_stmt|;
name|uint32_t
name|high5GhzChan
decl_stmt|;
name|uint32_t
name|supportCipherWEP
decl_stmt|;
name|uint32_t
name|supportCipherAES_CCM
decl_stmt|;
name|uint32_t
name|supportCipherTKIP
decl_stmt|;
name|uint32_t
name|supportCipherMicAES_CCM
decl_stmt|;
name|uint32_t
name|supportMicTKIP
decl_stmt|;
name|uint32_t
name|twiceAntennaGain5G
decl_stmt|;
name|uint32_t
name|twiceAntennaGain2G
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|uath_stat
block|{
name|uint32_t
name|st_badchunkseqnum
decl_stmt|;
name|uint32_t
name|st_invalidlen
decl_stmt|;
name|uint32_t
name|st_multichunk
decl_stmt|;
name|uint32_t
name|st_toobigrxpkt
decl_stmt|;
name|uint32_t
name|st_stopinprogress
decl_stmt|;
name|uint32_t
name|st_crcerr
decl_stmt|;
name|uint32_t
name|st_phyerr
decl_stmt|;
name|uint32_t
name|st_decrypt_crcerr
decl_stmt|;
name|uint32_t
name|st_decrypt_micerr
decl_stmt|;
name|uint32_t
name|st_decomperr
decl_stmt|;
name|uint32_t
name|st_keyerr
decl_stmt|;
name|uint32_t
name|st_err
decl_stmt|;
comment|/* CMD/RX/TX queues */
name|uint32_t
name|st_cmd_active
decl_stmt|;
name|uint32_t
name|st_cmd_inactive
decl_stmt|;
name|uint32_t
name|st_cmd_pending
decl_stmt|;
name|uint32_t
name|st_cmd_waiting
decl_stmt|;
name|uint32_t
name|st_rx_active
decl_stmt|;
name|uint32_t
name|st_rx_inactive
decl_stmt|;
name|uint32_t
name|st_tx_active
decl_stmt|;
name|uint32_t
name|st_tx_inactive
decl_stmt|;
name|uint32_t
name|st_tx_pending
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|UATH_STAT_INC
parameter_list|(
name|sc
parameter_list|,
name|var
parameter_list|)
value|(sc)->sc_stat.var++
end_define

begin_define
define|#
directive|define
name|UATH_STAT_DEC
parameter_list|(
name|sc
parameter_list|,
name|var
parameter_list|)
value|(sc)->sc_stat.var--
end_define

begin_struct
struct|struct
name|uath_vap
block|{
name|struct
name|ieee80211vap
name|vap
decl_stmt|;
name|int
function_decl|(
modifier|*
name|newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|UATH_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct uath_vap *)(vap))
end_define

begin_struct
struct|struct
name|uath_softc
block|{
name|struct
name|ieee80211com
name|sc_ic
decl_stmt|;
name|struct
name|mbufq
name|sc_snd
decl_stmt|;
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|usb_device
modifier|*
name|sc_udev
decl_stmt|;
name|void
modifier|*
name|sc_cmd_dma_buf
decl_stmt|;
name|void
modifier|*
name|sc_tx_dma_buf
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|uint32_t
name|sc_debug
decl_stmt|;
name|struct
name|uath_stat
name|sc_stat
decl_stmt|;
name|int
function_decl|(
modifier|*
name|sc_newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211com
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|struct
name|usb_xfer
modifier|*
name|sc_xfer
index|[
name|UATH_N_XFERS
index|]
decl_stmt|;
name|struct
name|uath_cmd
name|sc_cmd
index|[
name|UATH_CMD_LIST_COUNT
index|]
decl_stmt|;
name|uath_cmdhead
name|sc_cmd_active
decl_stmt|;
name|uath_cmdhead
name|sc_cmd_inactive
decl_stmt|;
name|uath_cmdhead
name|sc_cmd_pending
decl_stmt|;
name|uath_cmdhead
name|sc_cmd_waiting
decl_stmt|;
name|struct
name|uath_data
name|sc_rx
index|[
name|UATH_RX_DATA_LIST_COUNT
index|]
decl_stmt|;
name|uath_datahead
name|sc_rx_active
decl_stmt|;
name|uath_datahead
name|sc_rx_inactive
decl_stmt|;
name|struct
name|uath_data
name|sc_tx
index|[
name|UATH_TX_DATA_LIST_COUNT
index|]
decl_stmt|;
name|uath_datahead
name|sc_tx_active
decl_stmt|;
name|uath_datahead
name|sc_tx_inactive
decl_stmt|;
name|uath_datahead
name|sc_tx_pending
decl_stmt|;
name|uint32_t
name|sc_msgid
decl_stmt|;
name|uint32_t
name|sc_seqnum
decl_stmt|;
name|int
name|sc_tx_timer
decl_stmt|;
name|struct
name|callout
name|watchdog_ch
decl_stmt|;
name|struct
name|callout
name|stat_ch
decl_stmt|;
comment|/* multi-chunked support  */
name|struct
name|mbuf
modifier|*
name|sc_intrx_head
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|sc_intrx_tail
decl_stmt|;
name|uint8_t
name|sc_intrx_nextnum
decl_stmt|;
name|uint32_t
name|sc_intrx_len
decl_stmt|;
define|#
directive|define
name|UATH_MAX_INTRX_SIZE
value|3616
name|struct
name|uath_devcap
name|sc_devcap
decl_stmt|;
name|uint8_t
name|sc_serial
index|[
literal|16
index|]
decl_stmt|;
comment|/* unsorted  */
name|uint32_t
name|sc_flags
decl_stmt|;
define|#
directive|define
name|UATH_FLAG_INVALID
value|(1<< 1)
define|#
directive|define
name|UATH_FLAG_INITDONE
value|(1<< 2)
name|struct
name|uath_rx_radiotap_header
name|sc_rxtap
decl_stmt|;
name|int
name|sc_rxtap_len
decl_stmt|;
name|struct
name|uath_tx_radiotap_header
name|sc_txtap
decl_stmt|;
name|int
name|sc_txtap_len
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|UATH_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|UATH_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|UATH_ASSERT_LOCKED
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|UATH_RESET_INTRX
parameter_list|(
name|sc
parameter_list|)
value|do {		\ 	(sc)->sc_intrx_head = NULL;		\ 	(sc)->sc_intrx_tail = NULL;		\ 	(sc)->sc_intrx_nextnum = 0;		\ 	(sc)->sc_intrx_len = 0;			\ } while (0)
end_define

end_unit

