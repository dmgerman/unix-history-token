begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************* *Copyright (c) 2014 PMC-Sierra, Inc.  All rights reserved.  * *Redistribution and use in source and binary forms, with or without modification, are permitted provided  *that the following conditions are met:  *1. Redistributions of source code must retain the above copyright notice, this list of conditions and the *following disclaimer.  *2. Redistributions in binary form must reproduce the above copyright notice,  *this list of conditions and the following disclaimer in the documentation and/or other materials provided *with the distribution.  * *THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED  *WARRANTIES,INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS *FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE *FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  *BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  *LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  *SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE * * $FreeBSD$ * ********************************************************************************/
end_comment

begin_comment
comment|/*******************************************************************************/
end_comment

begin_comment
comment|/** \file  *  *  * The file contaning function protoptype used by SAT layer.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SATPROTO_H__
end_ifndef

begin_define
define|#
directive|define
name|__SATPROTO_H__
end_define

begin_comment
comment|/***************************************************************************** *! \brief  itdsatProcessAbnormalCompletion * *   This routine is called to complete error case for SATA request previously *   issued to the LL Layer in saSATAStart() * *  \param  agRoot:       Handles for this instance of SAS/SATA hardware *  \param  agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param  agIOStatus:   Status of completed I/O. *  \param  agSATAParm1:  Additional info based on status. *  \param  agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                        length. *  \param  satIOContext: Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|itdsatProcessAbnormalCompletion
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|itdsatDelayedProcessAbnormalCompletion
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|itdsatErrorSATAEventHandle
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|agsaPortContext_t
modifier|*
name|agPortContext
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|event
parameter_list|,
name|satIOContext_t
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|itdsatEncryptionHandler
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|void
modifier|*
name|agParam
parameter_list|,
name|bit32
name|agOtherInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|void
name|itdsatDifHandler
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|void
modifier|*
name|agParam
parameter_list|,
name|bit32
name|agOtherInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satProcessAbort
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief Setup up the SCSI Sense response.  *  *  This function is used to setup up the Sense Data payload for  *     CHECK CONDITION status.  *  *  \param pSense:      Pointer to the scsiRspSense_t sense data structure.  *  \param SnsKey:      SCSI Sense Key.  *  \param SnsInfo:     SCSI Sense Info.  *  \param SnsCode:     SCSI Sense Code.  *  *  \return None  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|void
name|satSetSensePayload
parameter_list|(
name|scsiRspSense_t
modifier|*
name|pSense
parameter_list|,
name|bit8
name|SnsKey
parameter_list|,
name|bit32
name|SnsInfo
parameter_list|,
name|bit16
name|SnsCode
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief Setup up the SCSI Sense response.  *  *  This function is used to setup up the Sense Data payload for  *     CHECK CONDITION status.  *  *  \param pSense:      Pointer to the scsiRspSense_t sense data structure.  *  \param SnsKey:      SCSI Sense Key.  *  \param SnsInfo:     SCSI Sense Info.  *  \param SnsCode:     SCSI Sense Code.  *  *  \return None  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|void
name|satSetDeferredSensePayload
parameter_list|(
name|scsiRspSense_t
modifier|*
name|pSense
parameter_list|,
name|bit8
name|SnsKey
parameter_list|,
name|bit32
name|SnsInfo
parameter_list|,
name|bit16
name|SnsCode
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for ATAPI Packet Command.  *  *  SAT implementation for ATAPI Packet and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satPacket
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satPacketCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|void
modifier|*
name|agParam
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for satDeviceReset.  *  *  This function creates DEVICE RESET fis and sends the request to LL layer  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satDeviceReset
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satDeviceResetCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|void
modifier|*
name|agParam
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for satExecuteDeviceDiagnostic.  *  *  This function creates Execute Device Diagnostic fis and sends the request to LL layer  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satExecuteDeviceDiagnostic
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satExecuteDeviceDiagnosticCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|void
modifier|*
name|agParam
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for satSetFeatures.  *  *  This function creates SetFeatures fis and sends the request to LL layer  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satSetFeatures
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|bit8
name|bTransferMode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satSetFeaturesPIOCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|void
modifier|*
name|agParam
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satSetFeaturesCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|void
modifier|*
name|agParam
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI REQUEST SENSE to ATAPI device.  *  *  SAT implementation for SCSI REQUEST SENSE.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satRequestSenseForATAPI
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satRequestSenseForATAPICB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|void
modifier|*
name|agParam
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI READ12.  *  *  SAT implementation for SCSI READ12 and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satRead12
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI READ10.  *  *  SAT implementation for SCSI READ10 and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satRead10
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI READ16.  *  *  SAT implementation for SCSI READ16 and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satRead16
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI READ6.  *  *  SAT implementation for SCSI READ6 and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satRead6
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI WRITE16.  *  *  SAT implementation for SCSI WRITE16 and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWrite16
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI WRITE12.  *  *  SAT implementation for SCSI WRITE12 and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWrite12
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI WRITE10.  *  *  SAT implementation for SCSI WRITE10 and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWrite10
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satWrite_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI WRITE6.  *  *  SAT implementation for SCSI WRITE6 and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWrite6
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satReportLun.  *  *  SAT implementation for SCSI satReportLun. Only LUN0 is reported.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satReportLun
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satReadCapacity10.  *  *  SAT implementation for SCSI satReadCapacity10.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satReadCapacity10
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satReadCapacity16.  *  *  SAT implementation for SCSI satReadCapacity16.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satReadCapacity16
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satInquiry
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI REQUEST SENSE.  *  *  SAT implementation for SCSI REQUEST SENSE.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satRequestSense
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI REQUEST SENSE.  *  *  SAT implementation for SCSI REQUEST SENSE.  *  Sub function of satRequestSense  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satRequestSense_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satFormatUnit.  *  *  SAT implementation for SCSI satFormatUnit.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satFormatUnit
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satSendDiagnostic.  *  *  SAT implementation for SCSI satSendDiagnostic.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satSendDiagnostic
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satSendDiagnostic_1.  *  *  SAT implementation for SCSI satSendDiagnostic_1.  *  Sub function of satSendDiagnostic.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satSendDiagnostic_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satSendDiagnostic_2.  *  *  SAT implementation for SCSI satSendDiagnostic_2.  *  Sub function of satSendDiagnostic.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satSendDiagnostic_2
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satStartStopUnit.  *  *  SAT implementation for SCSI satStartStopUnit.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satStartStopUnit
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satStartStopUnit_1.  *  *  SAT implementation for SCSI satStartStopUnit_1.  *  Sub function of satStartStopUnit  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satStartStopUnit_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satRead10_1.  *  *  SAT implementation for SCSI satRead10_1  *  Sub function of satRead10  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satRead_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satRead10_2
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satWriteSame10.  *  *  SAT implementation for SCSI satWriteSame10.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteSame10
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteSame10_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|bit32
name|lba
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteSame10_2
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|bit32
name|lba
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteSame10_3
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|bit32
name|lba
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satWriteSame16.  *  *  SAT implementation for SCSI satWriteSame16.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteSame16
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satLogSenseAllocate.  *  *  Part of SAT implementation for SCSI satLogSense.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  \param   payloadSize:      size of payload to be allocated.  *  \param   flag:             flag value  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  *  \note  *    - flag values: LOG_SENSE_0, LOG_SENSE_1, LOG_SENSE_2  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satLogSenseAllocate
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|bit32
name|payloadSize
parameter_list|,
name|bit32
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satSMARTEnable.  *  *  Part of SAT implementation for SCSI satLogSense.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satSMARTEnable
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satLogSense_1.  *  *  Part of SAT implementation for SCSI satLogSense.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satLogSense_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satLogSense_2.  *  *  Part of SAT implementation for SCSI satLogSense.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satLogSense_2
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satLogSense_3.  *  *  Part of SAT implementation for SCSI satLogSense.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satLogSense_3
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satLogSense.  *  *  SAT implementation for SCSI satLogSense.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satLogSense
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satModeSelect6.  *  *  SAT implementation for SCSI satModeSelect6.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satModeSelect6
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satModeSelect6n10_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satModeSelect10.  *  *  SAT implementation for SCSI satModeSelect10.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satModeSelect10
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satSynchronizeCache10.  *  *  SAT implementation for SCSI satSynchronizeCache10.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satSynchronizeCache10
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satSynchronizeCache16.  *  *  SAT implementation for SCSI satSynchronizeCache16.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satSynchronizeCache16
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satWriteAndVerify10.  *  *  SAT implementation for SCSI satWriteAndVerify10.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteAndVerify10
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|REMOVED
end_ifdef

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satWriteAndVerify10_1.  *  *  SAT implementation for SCSI satWriteAndVerify10_1.  *  Sub function of satWriteAndVerify10  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteAndVerify10_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satWriteAndVerify12.  *  *  SAT implementation for SCSI satWriteAndVerify12.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteAndVerify12
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satNonChainedWriteNVerify_Verify
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satChainedWriteNVerify_Write
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satChainedWriteNVerify_Verify
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satChainedWriteNVerify_Start_Verify
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satWriteAndVerify16.  *  *  SAT implementation for SCSI satWriteAndVerify16.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteAndVerify16
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satChainedVerify16
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI TEST UNIT READY.  *  *  SAT implementation for SCSI TUR and send FIS request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satTestUnitReady
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI MODE SENSE (6).  *  *  SAT implementation for SCSI MODE SENSE (6).  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satModeSense6
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI MODE SENSE (10).  *  *  SAT implementation for SCSI MODE SENSE (10).  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satModeSense10
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI VERIFY (10).  *  *  SAT implementation for SCSI VERIFY (10).  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satVerify10
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satChainedVerify
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI VERIFY (12).  *  *  SAT implementation for SCSI VERIFY (12).  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satVerify12
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI VERIFY (16).  *  *  SAT implementation for SCSI VERIFY (16).  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satVerify16
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satTestUnitReady_1.  *  *  SAT implementation for SCSI satTestUnitReady_1  *  Sub function of satTestUnitReady  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satTestUnitReady_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI STANDARD INQUIRY.  *  *  SAT implementation for SCSI STANDARD INQUIRY.  *  *  \param   pInquiry:         Pointer to Inquiry Data buffer.  *  \param   pSATAIdData:      Pointer to ATA IDENTIFY DEVICE data.  *  *  \return None.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|satInquiryStandard
parameter_list|(
name|bit8
modifier|*
name|pInquiry
parameter_list|,
name|agsaSATAIdentifyData_t
modifier|*
name|pSATAIdData
parameter_list|,
name|tiIniScsiCmnd_t
modifier|*
name|scsiCmnd
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI INQUIRY page 0.  *  *  SAT implementation for SCSI INQUIRY page 0.  *  *  \param   pInquiry:         Pointer to Inquiry Data buffer.  *  \param   pSATAIdData:      Pointer to ATA IDENTIFY DEVICE data.  *  *  \return None.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|satInquiryPage0
parameter_list|(
name|bit8
modifier|*
name|pInquiry
parameter_list|,
name|agsaSATAIdentifyData_t
modifier|*
name|pSATAIdData
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI INQUIRY page 83.  *  *  SAT implementation for SCSI INQUIRY page 83.  *  *  \param   pInquiry:         Pointer to Inquiry Data buffer.  *  \param   pSATAIdData:      Pointer to ATA IDENTIFY DEVICE data.  *  \param   pSatDevData       Pointer to internal device data structure  *  *  \return None.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|satInquiryPage83
parameter_list|(
name|bit8
modifier|*
name|pInquiry
parameter_list|,
name|agsaSATAIdentifyData_t
modifier|*
name|pSATAIdData
parameter_list|,
name|satDeviceData_t
modifier|*
name|pSatDevData
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI INQUIRY page 89.  *  *  SAT implementation for SCSI INQUIRY page 89.  *  *  \param   pInquiry:         Pointer to Inquiry Data buffer.  *  \param   pSATAIdData:      Pointer to ATA IDENTIFY DEVICE data.  *  \param   pSatDevData       Pointer to internal device data structure  *  *  \return None.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|satInquiryPage89
parameter_list|(
name|bit8
modifier|*
name|pInquiry
parameter_list|,
name|agsaSATAIdentifyData_t
modifier|*
name|pSATAIdData
parameter_list|,
name|satDeviceData_t
modifier|*
name|pSatDevData
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI INQUIRY page 80.  *  *  SAT implementation for SCSI INQUIRY page 80.  *  *  \param   pInquiry:         Pointer to Inquiry Data buffer.  *  \param   pSATAIdData:      Pointer to ATA IDENTIFY DEVICE data.  *  *  \return None.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|satInquiryPage80
parameter_list|(
name|bit8
modifier|*
name|pInquiry
parameter_list|,
name|agsaSATAIdentifyData_t
modifier|*
name|pSATAIdData
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************  *! \brief  sataLLIOStart  *  *   This routine is called to initiate a new SATA request to LL layer.  *   This function implements/encapsulates HW and LL API dependency.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return:  *  *  tiSuccess:     I/O request successfully initiated.  *  tiBusy:        No resources available, try again later.  *  tiIONoDevice:  Invalid device handle.  *  tiError:       Other errors that prevent the I/O request to be started.  *  *  *****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|sataLLIOStart
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief itdsataIOPrepareSGL * *  This function is called to prepare and translate the TISA SGL information *  to the SAS/SATA LL layer specific SGL. * *  \param    tiRoot:         Pointer to initiator driver/port instance. *  \param    IORequestBody:  TD layer request body for the I/O. *  \param    tiSgl1:         First TISA SGL info. *  \param    sglVirtualAddr: The virtual address of the first element in *                            tiSgl1 when tiSgl1 is used with the type tiSglList. * *  \return: * *  tiSuccess:     SGL initialized successfully. *  tiError:       Failed to initialize SGL. * * *****************************************************************************/
end_comment

begin_function_decl
name|osGLOBAL
name|bit32
name|itdsataIOPrepareSGL
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tdIORequestBody_t
modifier|*
name|tdIORequestBody
parameter_list|,
name|tiSgl_t
modifier|*
name|tiSgl1
parameter_list|,
name|void
modifier|*
name|sglVirtualAddr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satNonChainedDataIOCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with normal non-chained data I/O SATA request. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satNonChainedDataIOCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satChainedDataIOCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satNonChainedWriteNVerifyCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satChainedWriteNVerifyCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satNonDataIOCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with non-data I/O SATA request. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satNonDataIOCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satSMARTEnableCB * *   This routine is a callback function for satSMARTEnable() * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satSMARTEnableCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satLogSenseCB * *   This routine is a callback function for satLogSense() * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satLogSenseCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioCotext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satModeSelect6n10CB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satSynchronizeCache10n16CB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|REMOVED
end_ifdef

begin_function_decl
name|void
name|satWriteAndVerify10CB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/***************************************************************************** *! \brief  satReadLogExtCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals READ LOG EXT completion. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satReadLogExtCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satTestUnitReadyCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satWriteSame10CB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satSendDiagnosticCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with Send Diagnostic completion. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satSendDiagnosticCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satRequestSenseCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with Request Sense completion. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satRequestSenseCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satStartStopUnitCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with Send Diagnostic completion. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satStartStopUnitCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satVerify10CB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with Verify(10) completion. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satVerify10CB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satNonChainedVerifyCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satChainedVerifyCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************  *! \brief  satTmResetLUN  *  *   This routine is called to initiate a TM RESET LUN request to SATL.  *   This routine is independent of HW/LL API.  *  *  \param  tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param  tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param  lun:              Pointer to LUN.  *  \param  currentTaskTag:   Pointer to tag/context for this TM request.  *  *  \return:  *  *  \e tiSuccess:     I/O request successfully initiated.  *  \e tiBusy:        No resources available, try again later.  *  \e tiIONoDevice:  Invalid device handle.  *  \e tiError:       Other errors that prevent the I/O request to be started.  *  *  *****************************************************************************/
end_comment

begin_function_decl
name|osGLOBAL
name|bit32
name|satTmResetLUN
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|tiLUN_t
modifier|*
name|lun
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|bit32
name|satTmWarmReset
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|bit32
name|satTDInternalTmReset
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************  *! \brief  satTmAbortTask  *  *   This routine is called to initiate a TM ABORT TASK request to SATL.  *   This routine is independent of HW/LL API.  *  *  \param  tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param  tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param  taskTag:          Pointer to the associated task where the TM  *                            command is to be applied.  *  \param  currentTaskTag:   Pointer to tag/context for this TM request.  *  *  \return:  *  *  \e tiSuccess:     I/O request successfully initiated.  *  \e tiBusy:        No resources available, try again later.  *  \e tiIONoDevice:  Invalid device handle.  *  \e tiError:       Other errors that prevent the I/O request to be started.  *  *  *****************************************************************************/
end_comment

begin_function_decl
name|osGLOBAL
name|bit32
name|satTmAbortTask
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|tiIORequest_t
modifier|*
name|taskTag
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************  *! \brief  osSatResetCB  *  *   This routine is called to notify the completion of SATA device reset  *   which was initiated previously through the call to sataLLReset().  *   This routine is independent of HW/LL API.  *  *  \param  tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param  tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param  resetStatus:      Reset status either tiSuccess or tiError.  *  \param  respFis:          Pointer to the Register Device-To-Host FIS  *                            received from the device.  *  *  \return: None  *  *****************************************************************************/
end_comment

begin_function_decl
name|osGLOBAL
name|void
name|osSatResetCB
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|bit32
name|resetStatus
parameter_list|,
name|void
modifier|*
name|respFis
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|void
name|ossaSATADeviceResetCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|resetStatus
parameter_list|,
name|void
modifier|*
name|resetparm
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************  *! \brief  osSatIOCompleted  *  *   This routine is a callback for SATA completion that required FIS status  *   translation to SCSI status.  *  *  \param   tiRoot:          Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:     Pointer to TISA I/O request context for this I/O.  *  \param   respFis:         Pointer to status FIS to read.  *  \param   respFisLen:      Length of response FIS to read.  *  \param   satIOContext:    Pointer to SAT context.  *  \param   interruptContext:      Interrupt context  *  *  \return: None  *  *****************************************************************************/
end_comment

begin_function_decl
name|osGLOBAL
name|void
name|osSatIOCompleted
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|respFisLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|bit32
name|interruptContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief tdssAddSataToSharedcontext * *  Purpose:  This function adds a discovered SATA device to a device list of *            a port context * *  \param   tdsaPortContext          Pointer to a port context *  \param   tdsaDeviceData           Pointer to a device data *  \param   tsddPortContext_Instance Pointer to the target port context *  \param   agRoot                   Pointer to the root data structure of *                                    TD and Lower layer *  \param   agDevHandle              Pointer to a device handle *  \param   agSATADeviceInfo         Pointer to SATA device info structure * *  \Return: none * *****************************************************************************/
end_comment

begin_function_decl
name|osGLOBAL
name|void
name|tdssRemoveSATAFromSharedcontext
parameter_list|(
name|tdsaPortContext_t
modifier|*
name|tdsaPortContext_Ins
parameter_list|,
name|tdsaDeviceData_t
modifier|*
name|tdsaDeviceData_ins
parameter_list|,
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief  SAT default ATA status and ATA error translation to SCSI.  *  *  SSAT default ATA status and ATA error translation to SCSI.  *  *  \param   tiRoot:        Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:   Pointer to TISA I/O request context for this I/O.  *  \param   satIOContext:  Pointer to the SAT IO Context  *  \param   pSense:        Pointer to scsiRspSense_t  *  \param   ataStatus:     ATA status register  *  \param   ataError:      ATA error register  *  \param   interruptContext:    Interrupt context  *  *  \return  None  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|osSatDefaultTranslation
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|scsiRspSense_t
modifier|*
name|pSense
parameter_list|,
name|bit8
name|ataStatus
parameter_list|,
name|bit8
name|ataError
parameter_list|,
name|bit32
name|interruptContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief  Allocate resource for SAT intervally generated I/O.  *  *  Allocate resource for SAT intervally generated I/O.  *  *  \param   tiRoot:      Pointer to TISA driver/port instance.  *  \param   satDevData:  Pointer to SAT specific device data.  *  \param   allocLength: Length in byte of the DMA mem to allocate, upto  *                        one page size.  *  \param   satIntIo:    Pointer (output) to context for SAT internally  *                        generated I/O that is allocated by this routine.  *  *  \return If command is started successfully  *    - \e tiSuccess:     Success.  *    - \e tiError:       Failed allocating resource.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|satInternalIo_t
modifier|*
name|satAllocIntIoResource
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|satDeviceData_t
modifier|*
name|satDevData
parameter_list|,
name|bit32
name|dmaAllocLength
parameter_list|,
name|satInternalIo_t
modifier|*
name|satIntIo
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief  Send READ LOG EXT ATA PAGE 10h command to sata drive.  *  *  Send READ LOG EXT ATA command PAGE 10h request to LL layer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satSendReadLogExt
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satReadMediaSerialNumber.  *  *  SAT implementation for SCSI Read Media Serial Number.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satReadMediaSerialNumber
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satReadMediaSerialNumberCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with Read Media Serial Number completion. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satReadMediaSerialNumberCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satReadBuffer.  *  *  SAT implementation for SCSI Read Buffer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satReadBuffer
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satReadBufferCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with Read Buffer. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satReadBufferCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satWriteBuffer.  *  *  SAT implementation for SCSI Write Buffer.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satWriteBuffer
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satWriteBufferCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with Write Buffer. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satWriteBufferCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satReassignBlocks.  *  *  SAT implementation for SCSI Reassign Blocks.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satReassignBlocks
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief  satReassignBlocksCB * *   This routine is a callback function called from ossaSATACompleted(). *   This CB routine deals with Reassign Blocks. * *  \param   agRoot:       Handles for this instance of SAS/SATA hardware *  \param   agIORequest:  Pointer to the LL I/O request context for this I/O. *  \param   agIOStatus:   Status of completed I/O. *  \param   agSATAParm1:  Additional info based on status. *  \param   agIOInfoLen:  Length in bytes of overrun/underrun residual or FIS *                         length. *  \param   ioContext:    Pointer to satIOContext_t. * *  \return: none * *****************************************************************************/
end_comment

begin_function_decl
name|void
name|satReassignBlocksCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satReassignBlocks_1.  *  *  SAT implementation for SCSI Reassign Blocks. This is helper function for  *  satReassignBlocks and satReassignBlocksCB. This sends ATA verify command.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satReassignBlocks_1
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|satIOContext_t
modifier|*
name|satOrgIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satReassignBlocks_2.  *  *  SAT implementation for SCSI Reassign Blocks. This is helper function for  *  satReassignBlocks and satReassignBlocksCB. This sends ATA write command.  *  *  \param   tiRoot:           Pointer to TISA initiator driver/port instance.  *  \param   tiIORequest:      Pointer to TISA I/O request context for this I/O.  *  \param   tiDeviceHandle:   Pointer to TISA device handle for this I/O.  *  \param   tiScsiRequest:    Pointer to TISA SCSI I/O request and SGL list.  *  \param   satIOContext_t:   Pointer to the SAT IO Context  *  \param   LBA:              Pointer to the LBA to be processed  *  *  \return If command is started successfully  *    - \e tiSuccess:     I/O request successfully initiated.  *    - \e tiBusy:        No resources available, try again later.  *    - \e tiIONoDevice:  Invalid device handle.  *    - \e tiError:       Other errors.  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satReassignBlocks_2
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|bit8
modifier|*
name|LBA
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*! \brief SAT implementation for SCSI satPrepareNewIO.  *  *  This function fills in the fields of internal IO generated by TD layer.  *  This is mostly used in the callback functions.  *  *  \param   satNewIntIo:      Pointer to the internal IO structure.  *  \param   tiOrgIORequest:   Pointer to the original tiIOrequest sent by OS layer  *  \param   satDevData:       Pointer to the device data.  *  \param   scsiCmnd:         Pointer to SCSI command.  *  \param   satOrgIOContext:  Pointer to the original SAT IO Context  *  *  \return  *    - \e Pointer to the new SAT IO Context  */
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|satIOContext_t
modifier|*
name|satPrepareNewIO
parameter_list|(
name|satInternalIo_t
modifier|*
name|satNewIntIo
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiOrgIORequest
parameter_list|,
name|satDeviceData_t
modifier|*
name|satDevData
parameter_list|,
name|tiIniScsiCmnd_t
modifier|*
name|scsiCmnd
parameter_list|,
name|satIOContext_t
modifier|*
name|satOrgIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*****************************************************************************  *! \brief  sataLLIOAbort  *  *   This routine is called to initiate an I/O abort to LL layer.  *   This function implements/encapsulates HW and LL API dependency.  *  *  \param   tiRoot:      Pointer to TISA initiator driver/port instance.  *  \param   taskTag:     Pointer to TISA I/O context to be aborted.  *  *  \return:  *  *  \e tiSuccess:     Abort request was successfully initiated.  *  \e tiBusy:        No resources available, try again later.  *  \e tiError:       Other errors that prevent the abort request from being  *                    started..  *  *  *****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|sataLLIOAbort
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|taskTag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satInquiryCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satInquiryIntCB
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satSendIDDev
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satStartIDDev
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satSetDevInfo
parameter_list|(
name|satDeviceData_t
modifier|*
name|satDevData
parameter_list|,
name|agsaSATAIdentifyData_t
modifier|*
name|SATAIdData
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satAddSATAStartIDDev
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satAddSATASendIDDev
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satAddSATAIDDevCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satAddSATAIDDevCBReset
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|tdsaDeviceData_t
modifier|*
name|oneDeviceData
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|tdIORequestBody_t
modifier|*
name|tdIORequestBody
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|satAddSATAIDDevCBCleanup
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|tdsaDeviceData_t
modifier|*
name|oneDeviceData
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|,
name|tdIORequestBody_t
modifier|*
name|tdIORequestBody
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|tdsaDiscoveryIntStartIDDev
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|tdsaDiscoverySendIDDev
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tdsaDiscoveryStartIDDevCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*   utility functions  */
end_comment

begin_function_decl
name|bit32
name|satComputeCDB10LBA
parameter_list|(
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|satComputeCDB10TL
parameter_list|(
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|satComputeCDB12LBA
parameter_list|(
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|satComputeCDB12TL
parameter_list|(
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|satComputeCDB16LBA
parameter_list|(
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|satComputeCDB16TL
parameter_list|(
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|satComputeLoopNum
parameter_list|(
name|bit32
name|a
parameter_list|,
name|bit32
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|satAddNComparebit64
parameter_list|(
name|bit8
modifier|*
name|a
parameter_list|,
name|bit8
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|satAddNComparebit32
parameter_list|(
name|bit8
modifier|*
name|a
parameter_list|,
name|bit8
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|satCompareLBALimitbit
parameter_list|(
name|bit8
modifier|*
name|lba
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief *  Purpose: bitwise set * *  Parameters: *   data        - input output buffer *   index       - bit to set * *  Return: *   none * *****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|satBitSet
parameter_list|(
name|bit8
modifier|*
name|data
parameter_list|,
name|bit32
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief *  Purpose: bitwise clear * *  Parameters: *   data        - input output buffer *   index       - bit to clear * *  Return: *   none * *****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|satBitClear
parameter_list|(
name|bit8
modifier|*
name|data
parameter_list|,
name|bit32
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************** *! \brief *  Purpose: bitwise test * *  Parameters: *   data        - input output buffer *   index       - bit to test * *  Return: *   0 - not set *   1 - set * *****************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|agBOOLEAN
name|satBitTest
parameter_list|(
name|bit8
modifier|*
name|data
parameter_list|,
name|bit32
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/*! \brief allocate an available SATA tag  *  *  allocate an available SATA tag  *  *  \param pSatDevData  *  \param pTag  *  *  \return -Success or fail-  */
end_comment

begin_comment
comment|/*******************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satTagAlloc
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|satDeviceData_t
modifier|*
name|pSatDevData
parameter_list|,
name|bit8
modifier|*
name|pTag
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/*! \brief release an SATA tag  *  *  release an available SATA tag  *  *  \param pSatDevData  *  *  \return -the tag-  */
end_comment

begin_comment
comment|/*******************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|satTagRelease
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|satDeviceData_t
modifier|*
name|pSatDevData
parameter_list|,
name|bit8
name|tag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|satDecrementPendingIO
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tdsaContext_t
modifier|*
name|tdsaAllShared
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satStartResetDevice
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satResetDevice
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|satResetDeviceCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|bit32
name|satSubTM
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|bit32
name|task
parameter_list|,
name|tiLUN_t
modifier|*
name|lun
parameter_list|,
name|tiIORequest_t
modifier|*
name|taskTag
parameter_list|,
name|tiIORequest_t
modifier|*
name|currentTaskTag
parameter_list|,
name|bit32
name|NotifyOS
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satStartDeResetDevice
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satDeResetDevice
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|satDeResetDeviceCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satStartCheckPowerMode
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|satCheckPowerMode
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tiIORequest_t
modifier|*
name|tiIORequest
parameter_list|,
name|tiDeviceHandle_t
modifier|*
name|tiDeviceHandle
parameter_list|,
name|tiScsiInitiatorRequest_t
modifier|*
name|tiScsiRequest
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|satCheckPowerModeCB
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|agIOStatus
parameter_list|,
name|agsaFisHeader_t
modifier|*
name|agFirstDword
parameter_list|,
name|bit32
name|agIOInfoLen
parameter_list|,
name|agsaFrameHandle_t
name|agFrameHandle
parameter_list|,
name|void
modifier|*
name|ioContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|satAbort
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|satIOContext_t
modifier|*
name|satIOContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|satTranslateATAPIErrorsToSCSIErrors
parameter_list|(
name|bit8
name|bCommand
parameter_list|,
name|bit8
name|bATAStatus
parameter_list|,
name|bit8
name|bATAError
parameter_list|,
name|bit8
modifier|*
name|pSenseKey
parameter_list|,
name|bit16
modifier|*
name|pSenseCodeInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|void
name|satSATADeviceReset
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tdsaDeviceData_t
modifier|*
name|oneDeviceData
parameter_list|,
name|bit32
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|REMOVED
end_ifdef

begin_function_decl
name|osGLOBAL
name|void
name|satSATADeviceReset
parameter_list|(
name|tiRoot_t
modifier|*
name|tiRoot
parameter_list|,
name|tdsaDeviceData_t
modifier|*
name|oneDeviceData
parameter_list|,
name|bit32
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*__SATPROTO_H__ */
end_comment

end_unit

