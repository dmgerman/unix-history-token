begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************* *Copyright (c) 2014 PMC-Sierra, Inc.  All rights reserved.  * *Redistribution and use in source and binary forms, with or without modification, are permitted provided  *that the following conditions are met:  *1. Redistributions of source code must retain the above copyright notice, this list of conditions and the *following disclaimer.  *2. Redistributions in binary form must reproduce the above copyright notice,  *this list of conditions and the following disclaimer in the documentation and/or other materials provided *with the distribution.  * *THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED  *WARRANTIES,INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS *FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE *FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  *BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  *LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  *SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE * * $FreeBSD$ * ********************************************************************************/
end_comment

begin_comment
comment|/******************************************************************************** *   tmsmapi.h  * *   Abstract:   This module contains function prototype of the SAT *               Module (SM) API callback for initiator. *******************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TDSMAPI_H
end_ifndef

begin_define
define|#
directive|define
name|TDSMAPI_H
end_define

begin_function_decl
name|osGLOBAL
name|void
name|tdsmIDCompletedCB
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|smIORequest_t
modifier|*
name|smIORequest
parameter_list|,
name|smDeviceHandle_t
modifier|*
name|smDeviceHandle
parameter_list|,
name|bit32
name|status
parameter_list|,
name|void
modifier|*
name|IDdata
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|void
name|tdsmIOCompletedCB
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|smIORequest_t
modifier|*
name|smIORequest
parameter_list|,
name|bit32
name|status
parameter_list|,
name|bit32
name|statusDetail
parameter_list|,
name|smSenseData_t
modifier|*
name|senseData
parameter_list|,
name|bit32
name|interruptContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|void
name|tdsmEventCB
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|smDeviceHandle_t
modifier|*
name|smDeviceHandle
parameter_list|,
name|smIntrEventType_t
name|eventType
parameter_list|,
name|bit32
name|eventStatus
parameter_list|,
name|void
modifier|*
name|parm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|void
name|tdsmSingleThreadedEnter
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|bit32
name|syncLockId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|void
name|tdsmSingleThreadedLeave
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|bit32
name|syncLockId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|bit8
name|tdsmBitScanForward
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|bit32
modifier|*
name|Index
parameter_list|,
name|bit32
name|Mask
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|LINUX_VERSION_CODE
end_ifdef

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmInterlockedIncrement
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Addend
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmInterlockedDecrement
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Addend
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmAtomicBitClear
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Destination
parameter_list|,
name|sbit32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmAtomicBitSet
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Destination
parameter_list|,
name|sbit32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmAtomicExchange
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Target
parameter_list|,
name|sbit32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmInterlockedIncrement
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Addend
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmInterlockedDecrement
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Addend
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmInterlockedAnd
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Destination
parameter_list|,
name|sbit32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmInterlockedOr
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Destination
parameter_list|,
name|sbit32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|sbit32
name|tdsmInterlockedExchange
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|sbit32
specifier|volatile
modifier|*
name|Target
parameter_list|,
name|sbit32
name|Value
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*LINUX_VERSION_CODE*/
end_comment

begin_function_decl
name|osGLOBAL
name|bit32
name|tdsmAllocMemory
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|void
modifier|*
modifier|*
name|osMemHandle
parameter_list|,
name|void
modifier|*
modifier|*
name|virtPtr
parameter_list|,
name|bit32
modifier|*
name|physAddrUpper
parameter_list|,
name|bit32
modifier|*
name|physAddrLower
parameter_list|,
name|bit32
name|alignment
parameter_list|,
name|bit32
name|allocLength
parameter_list|,
name|smBOOLEAN
name|isCacheable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|bit32
name|tdsmFreeMemory
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|void
modifier|*
name|osDMAHandle
parameter_list|,
name|bit32
name|allocLength
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|FORCEINLINE
name|bit32
name|tdsmRotateQnumber
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|smDeviceHandle_t
modifier|*
name|smDeviceHandle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|osGLOBAL
name|bit32
name|tdsmSetDeviceQueueDepth
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|smIORequest_t
modifier|*
name|smIORequest
parameter_list|,
name|bit32
name|QueueDepth
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|tdsmLogDebugString
end_ifndef

begin_function_decl
name|GLOBAL
name|void
name|tdsmLogDebugString
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|bit32
name|level
parameter_list|,
name|char
modifier|*
name|string
parameter_list|,
name|void
modifier|*
name|ptr1
parameter_list|,
name|void
modifier|*
name|ptr2
parameter_list|,
name|bit32
name|value1
parameter_list|,
name|bit32
name|value2
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|osGLOBAL
name|bit32
name|tdsmGetTransportParam
parameter_list|(
name|smRoot_t
modifier|*
name|smRoot
parameter_list|,
name|char
modifier|*
name|key
parameter_list|,
name|char
modifier|*
name|subkey1
parameter_list|,
name|char
modifier|*
name|subkey2
parameter_list|,
name|char
modifier|*
name|subkey3
parameter_list|,
name|char
modifier|*
name|subkey4
parameter_list|,
name|char
modifier|*
name|subkey5
parameter_list|,
name|char
modifier|*
name|valueName
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|,
name|bit32
name|bufferLen
parameter_list|,
name|bit32
modifier|*
name|lenReceived
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* TDSMAPI_H */
end_comment

end_unit

