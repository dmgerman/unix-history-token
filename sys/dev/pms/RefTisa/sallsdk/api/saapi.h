begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************* *Copyright (c) 2014 PMC-Sierra, Inc.  All rights reserved.  * *Redistribution and use in source and binary forms, with or without modification, are permitted provided  *that the following conditions are met:  *1. Redistributions of source code must retain the above copyright notice, this list of conditions and the *following disclaimer.  *2. Redistributions in binary form must reproduce the above copyright notice,  *this list of conditions and the following disclaimer in the documentation and/or other materials provided *with the distribution.  * *THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED  *WARRANTIES,INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS *FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE *FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  *BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  *LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  *SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE * * $FreeBSD$ * ********************************************************************************/
end_comment

begin_comment
comment|/*******************************************************************************/
end_comment

begin_comment
comment|/*! \file saapi.h  *  \brief The file defines the declaration of tSDK APIs  *  *  *  *  */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SSDKAPI_H__
end_ifndef

begin_define
define|#
directive|define
name|__SSDKAPI_H__
end_define

begin_comment
comment|/********************************************************************************  *                             SA LL Function Declaration                       *  ********************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of interrupt related functions start                         *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|FORCEINLINE
name|saDelayedInterruptHandler
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|interruptVectorIndex
parameter_list|,
name|bit32
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|FORCEINLINE
name|saInterruptHandler
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|interruptVectorIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|saSystemInterruptsActive
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agBOOLEAN
name|sysIntsActive
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|FORCEINLINE
name|void
name|saSystemInterruptsEnable
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|interruptVectorIndex
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of interrupt related functions end                           *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of timer related functions start                             *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|saTimerTick
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of timer related functions end                               *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of initialization related functions start                    *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|saGetRequirements
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaSwConfig_t
modifier|*
name|swConfig
parameter_list|,
name|agsaMemoryRequirement_t
modifier|*
name|memoryRequirement
parameter_list|,
name|bit32
modifier|*
name|usecsPerTick
parameter_list|,
name|bit32
modifier|*
name|maxNumLocks
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saInitialize
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaMemoryRequirement_t
modifier|*
name|memoryAllocated
parameter_list|,
name|agsaHwConfig_t
modifier|*
name|hwConfig
parameter_list|,
name|agsaSwConfig_t
modifier|*
name|swConfig
parameter_list|,
name|bit32
name|usecsPerTick
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of initialization related functions end                      *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of hardware related functions start                          *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|void
name|saHwReset
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|resetType
parameter_list|,
name|bit32
name|resetParm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|saHwShutdown
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of hardware related functions end                            *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of phy related functions start                               *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saPhyStart
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|phyId
parameter_list|,
name|agsaPhyConfig_t
modifier|*
name|agPhyConfig
parameter_list|,
name|agsaSASIdentify_t
modifier|*
name|agSASIdentify
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saPhyStop
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|phyId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saLocalPhyControl
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|phyId
parameter_list|,
name|bit32
name|phyOperation
parameter_list|,
name|ossaLocalPhyControlCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetPhyProfile
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|ppc
parameter_list|,
name|bit32
name|phyID
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSetPhyProfile
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|ppc
parameter_list|,
name|bit32
name|length
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|bit32
name|phyID
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saHwEventAck
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaEventSource_t
modifier|*
name|eventSource
parameter_list|,
name|bit32
name|param0
parameter_list|,
name|bit32
name|param1
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of phy related functions end                                 *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of discovery related functions start                         *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saDiscover
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaPortContext_t
modifier|*
name|agPortContext
parameter_list|,
name|bit32
name|type
parameter_list|,
name|bit32
name|option
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of discovery related functions end                           *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of frame related functions start                             *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saFrameReadBit32
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaFrameHandle_t
name|agFrame
parameter_list|,
name|bit32
name|frameOffset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|saFrameReadBlock
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaFrameHandle_t
name|agFrame
parameter_list|,
name|bit32
name|frameOffset
parameter_list|,
name|void
modifier|*
name|frameBuffer
parameter_list|,
name|bit32
name|frameBufLen
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of frame related functions end                               *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of SATA related functions start                              *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saSATAStart
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|agRequestType
parameter_list|,
name|agsaSATAInitiatorRequest_t
modifier|*
name|agSATAReq
parameter_list|,
name|bit8
name|agTag
parameter_list|,
name|ossaSATACompletedCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSATAAbort
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|flag
parameter_list|,
name|void
modifier|*
name|abortParam
parameter_list|,
name|ossaGenericAbortCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of SATA related functions end                                *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of SAS related functions start                               *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saSendSMPIoctl
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaSMPFrame_t
modifier|*
name|pSMPFrame
parameter_list|,
name|ossaSMPCompletedCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSMPStart
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|agRequestType
parameter_list|,
name|agsaSASRequestBody_t
modifier|*
name|agRequestBody
parameter_list|,
name|ossaSMPCompletedCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSMPAbort
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|flag
parameter_list|,
name|void
modifier|*
name|abortParam
parameter_list|,
name|ossaGenericAbortCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSSPStart
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|agRequestType
parameter_list|,
name|agsaSASRequestBody_t
modifier|*
name|agRequestBody
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agTMRequest
parameter_list|,
name|ossaSSPCompletedCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|FAST_IO_TEST
end_ifdef

begin_function_decl
name|GLOBAL
name|void
modifier|*
name|saFastSSPPrepare
parameter_list|(
name|void
modifier|*
name|ioHandle
parameter_list|,
name|agsaFastCommand_t
modifier|*
name|fc
parameter_list|,
name|ossaSSPCompletedCB_t
name|cb
parameter_list|,
name|void
modifier|*
name|cbArg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saFastSSPSend
parameter_list|(
name|void
modifier|*
name|ioHandle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saFastSSPCancel
parameter_list|(
name|void
modifier|*
name|ioHandle
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|GLOBAL
name|bit32
name|saSSPAbort
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|flag
parameter_list|,
name|void
modifier|*
name|abortParam
parameter_list|,
name|ossaGenericAbortCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|saGetDifErrorDetails
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaIORequest_t
modifier|*
name|agIORequest
parameter_list|,
name|agsaDifDetails_t
modifier|*
name|difDetails
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saRegisterEventCallback
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|eventSourceType
parameter_list|,
name|ossaGenericCB_t
name|callbackPtr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of SAS related functions end                                 *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of Device related functions start                            *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saRegisterNewDevice
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDeviceInfo_t
modifier|*
name|agDeviceInfo
parameter_list|,
name|agsaPortContext_t
modifier|*
name|agPortContext
parameter_list|,
name|bit16
name|hostAssignedDeviceId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saDeregisterDeviceHandle
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|queueNum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetDeviceHandles
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaPortContext_t
modifier|*
name|agPortContext
parameter_list|,
name|bit32
name|flags
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDev
index|[]
parameter_list|,
name|bit32
name|skipCount
parameter_list|,
name|bit32
name|maxDevs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetDeviceInfo
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|option
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetDeviceState
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSetDeviceInfo
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|option
parameter_list|,
name|bit32
name|param
parameter_list|,
name|ossaSetDeviceInfoCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSetDeviceState
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaDevHandle_t
modifier|*
name|agDevHandle
parameter_list|,
name|bit32
name|newDeviceState
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of Device related functions end                              *  ***************************************************************************/
end_comment

begin_comment
comment|/***************************************************************************  * Definition of Misc related functions start                              *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saFwFlashUpdate
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaUpdateFwFlash_t
modifier|*
name|flashUpdateInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saFlashExtExecute
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaFlashExtExecute_t
modifier|*
name|agFlashExtExe
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|SPC_ENABLE_PROFILE
end_ifdef

begin_function_decl
name|GLOBAL
name|bit32
name|saFwProfile
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaFwProfile_t
modifier|*
name|fwProfileInfo
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|GLOBAL
name|bit32
name|saEchoCommand
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|void
modifier|*
name|echoPayload
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetControllerInfo
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaControllerInfo_t
modifier|*
name|controllerInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetControllerStatus
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaControllerStatus_t
modifier|*
name|controllerStatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetControllerEventLogInfo
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaControllerEventLog_t
modifier|*
name|eventLogInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGpioEventSetup
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaGpioEventSetupInfo_t
modifier|*
name|gpioEventSetupInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGpioPinSetup
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaGpioPinSetupInfo_t
modifier|*
name|gpioPinSetupInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGpioRead
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGpioWrite
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|gpioWriteMask
parameter_list|,
name|bit32
name|gpioWriteValue
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSASDiagExecute
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaSASDiagExecute_t
modifier|*
name|diag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSASDiagStartEnd
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|phyId
parameter_list|,
name|bit32
name|operation
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetTimeStamp
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saPortControl
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaPortContext_t
modifier|*
name|agPortContext
parameter_list|,
name|bit32
name|portOperation
parameter_list|,
name|bit32
name|param0
parameter_list|,
name|bit32
name|param1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetRegisterDump
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaRegDumpInfo_t
modifier|*
name|regDumpInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetForensicData
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|agsaForensicData_t
modifier|*
name|forensicData
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|saGetIOErrorStats
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bit32
name|saGetIOEventStats
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetNVMDCommand
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaNVMDData_t
modifier|*
name|NVMDInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSetNVMDCommand
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaNVMDData_t
modifier|*
name|NVMDInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saReconfigSASParams
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaSASReconfig_t
modifier|*
name|agSASConfig
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSgpio
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaSGpioReqResponse_t
modifier|*
name|pSGpioReq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saPCIeDiagExecute
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaPCIeDiagExecute_t
modifier|*
name|diag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saEncryptSelftestExecute
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|type
parameter_list|,
name|bit32
name|length
parameter_list|,
name|void
modifier|*
name|TestDescriptor
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saSetOperator
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|flag
parameter_list|,
name|void
modifier|*
name|cert
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetOperator
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|option
parameter_list|,
name|bit32
name|AddrHi
parameter_list|,
name|bit32
name|AddrLo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saOperatorManagement
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|flag
parameter_list|,
name|bit8
name|role
parameter_list|,
name|agsaID_t
modifier|*
name|id
parameter_list|,
name|agsaEncryptKekBlob_t
modifier|*
name|kblob
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/***************************************************************************  * Definition of Misc. related functions end                               *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saSetControllerConfig
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|modePage
parameter_list|,
name|bit32
name|length
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saGetControllerConfig
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|modePage
parameter_list|,
name|bit32
name|flag0
parameter_list|,
name|bit32
name|flag1
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saEncryptDekCacheUpdate
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|kekIndex
parameter_list|,
name|bit32
name|dekTableSelect
parameter_list|,
name|bit32
name|dekAddrHi
parameter_list|,
name|bit32
name|dekAddrLo
parameter_list|,
name|bit32
name|dekIndex
parameter_list|,
name|bit32
name|dekNumberOfEntries
parameter_list|,
name|bit32
name|dekBlobFormat
parameter_list|,
name|bit32
name|dekTableKeyEntrySize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saEncryptDekCacheInvalidate
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|dekTable
parameter_list|,
name|bit32
name|dekIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saEncryptGetMode
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|agsaEncryptInfo_t
modifier|*
name|encryptInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saEncryptSetMode
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|agsaEncryptInfo_t
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saEncryptKekInvalidate
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|kekIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saEncryptKekUpdate
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|flags
parameter_list|,
name|bit32
name|newKekIndex
parameter_list|,
name|bit32
name|wrapperKekIndex
parameter_list|,
name|bit32
name|blobFormat
parameter_list|,
name|agsaEncryptKekBlob_t
modifier|*
name|encryptKekBlob
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|HIALEAH_ENCRYPTION
end_ifdef

begin_function_decl
name|GLOBAL
name|bit32
name|saEncryptHilUpdate
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* HIALEAH_ENCRYPTION */
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saGetDFEData
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|interface
parameter_list|,
name|bit32
name|laneNumber
parameter_list|,
name|bit32
name|interations
parameter_list|,
name|agsaSgl_t
modifier|*
name|agSgl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saFatalInterruptHandler
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|interruptVectorIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saDIFEncryptionOffloadStart
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|op
parameter_list|,
name|agsaDifEncPayload_t
modifier|*
name|agsaDifEncPayload
parameter_list|,
name|ossaDIFEncryptionOffloadStartCB_t
name|agCB
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saVhistCapture
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|agsaContext_t
modifier|*
name|agContext
parameter_list|,
name|bit32
name|queueNum
parameter_list|,
name|bit32
name|Channel
parameter_list|,
name|bit32
name|NumBitLo
parameter_list|,
name|bit32
name|NumBitHi
parameter_list|,
name|bit32
name|PcieAddrLo
parameter_list|,
name|bit32
name|PcieAddrHi
parameter_list|,
name|bit32
name|ByteCount
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|void
name|saCountActiveIORequests
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|SA_64BIT_TIMESTAMP
end_ifdef

begin_function_decl
name|osGLOBAL
name|bit64
name|osTimeStamp64
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SA_64BIT_TIMESTAMP */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|SALL_API_TEST
end_ifdef

begin_comment
comment|/***************************************************************************  * Definition of LL Test related API functions start                       *  ***************************************************************************/
end_comment

begin_function_decl
name|GLOBAL
name|bit32
name|saGetLLCounters
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|counters
parameter_list|,
name|agsaLLCountInfo_t
modifier|*
name|LLCountInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|GLOBAL
name|bit32
name|saResetLLCounters
parameter_list|(
name|agsaRoot_t
modifier|*
name|agRoot
parameter_list|,
name|bit32
name|counters
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*__SSDKAPI_H__ */
end_comment

end_unit

