begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************* *Copyright (c) 2014 PMC-Sierra, Inc.  All rights reserved.  * *Redistribution and use in source and binary forms, with or without modification, are permitted provided  *that the following conditions are met:  *1. Redistributions of source code must retain the above copyright notice, this list of conditions and the *following disclaimer.  *2. Redistributions in binary form must reproduce the above copyright notice,  *this list of conditions and the following disclaimer in the documentation and/or other materials provided *with the distribution.  * *THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED  *WARRANTIES,INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS *FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE *FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  *BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  *LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  *SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE * * $FreeBSD$ * *******************************************************************************/
end_comment

begin_comment
comment|/******************************************************************************* ** ** Version Control Information: ** **  $Revision: 114125 $ **  $Author: lindfors $ **  $Date: 2012-01-06 17:12:27 -0800 (Fri, 06 Jan 2012) $ **  $Id: encrypt_ioctl.h 112360 2012-01-07 01:12:27Z mcleanda $ ** *******************************************************************************/
end_comment

begin_include
include|#
directive|include
file|<linux/ioctl.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__ENCRYPT_IOCTL_H__
end_ifndef

begin_define
define|#
directive|define
name|__ENCRYPT_IOCTL_H__
end_define

begin_include
include|#
directive|include
file|<dev/pms/RefTisa/tisa/api/tiapi.h>
end_include

begin_include
include|#
directive|include
file|<dev/pms/RefTisa/tisa/api/ostiapi.h>
end_include

begin_include
include|#
directive|include
file|<dev/pms/RefTisa/tisa/api/tidefs.h>
end_include

begin_include
include|#
directive|include
file|<dev/pms/RefTisa/tisa/api/tiglobal.h>
end_include

begin_include
include|#
directive|include
file|<dev/pms/RefTisa/tisa/api/titypes.h>
end_include

begin_include
include|#
directive|include
file|<dev/pms/RefTisa/tisa/sassata/common/tdioctl.h>
end_include

begin_include
include|#
directive|include
file|<dev/pms/freebsd/driver/common/osenv.h>
end_include

begin_include
include|#
directive|include
file|<dev/pms/freebsd/driver/common/ostypes.h>
end_include

begin_include
include|#
directive|include
file|<dev/pms/freebsd/driver/common/osdebug.h>
end_include

begin_typedef
typedef|typedef
struct|struct
name|IoctlEncryptGetInfo_s
block|{
name|tiEncryptInfo_t
name|tisaEncryptInfo
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptGetInfo_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IoctlEncryptSetMode_s
block|{
name|bit32
name|securityCipherMode
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptSetMode_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IoctlEncryptKekAdd_s
block|{
name|bit32
name|kekIndex
decl_stmt|;
name|bit32
name|wrapperKekIndex
decl_stmt|;
name|bit32
name|blobFormat
decl_stmt|;
name|tiEncryptKekBlob_t
modifier|*
name|EncryptKekBlob
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptKekAdd_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IoctlEncryptDekAdd_s
block|{
name|bit32
name|kekIndex
decl_stmt|;
name|bit32
name|dekTable
decl_stmt|;
name|bit32
name|dekIndex
decl_stmt|;
name|bit32
name|dekBlobFormat
decl_stmt|;
name|bit32
name|dekTableKeyEntrySize
decl_stmt|;
name|tiEncryptDekBlob_t
modifier|*
name|dekBlob
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptDekAdd_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IoctlEncryptDekInvalidate_s
block|{
name|tiEncryptDek_t
name|dek
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptDekInvalidate_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IoctlEncryptKekNVRAM_s
block|{
name|bit32
name|index
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptKekNVRAM_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IoctlEncryptDekTable_s
block|{
name|tiMem_t
name|DekTable1Addr
decl_stmt|;
name|tiMem_t
name|DekTable2Addr
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptDekTable_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|EncryptDekMapEntry_s
block|{
define|#
directive|define
name|ENCRYPT_DEK_MAP_ENTRY_CLEAR
value|0x00000001UL
define|#
directive|define
name|ENCRYPT_DEK_MAP_ENTRY_VALID
value|0x80000000UL
name|bit32
name|flags
decl_stmt|;
name|unsigned
name|long
name|long
name|startLBA
decl_stmt|;
name|unsigned
name|long
name|long
name|endLBA
decl_stmt|;
name|tiEncryptDek_t
name|dek
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|EncryptDekMapEntry_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|EncryptDeviceDekMap_s
block|{
name|bit32
name|host
decl_stmt|;
name|bit32
name|channel
decl_stmt|;
name|bit32
name|device
decl_stmt|;
name|bit32
name|lun
decl_stmt|;
name|bit32
name|keytag_check
decl_stmt|;
name|bit32
name|keytag
index|[
literal|2
index|]
decl_stmt|;
name|EncryptDekMapEntry_t
name|dekMapEntry
index|[
literal|1
index|]
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|EncryptDeviceDekMap_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IoctlEncryptDekMapTable_s
block|{
name|EncryptDeviceDekMap_t
name|dekMap
index|[
literal|1
index|]
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptDekMapTable_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IoctlEncryptIOError_s
block|{
name|bit64
name|error_id
decl_stmt|;
name|bit64
name|timestamp
decl_stmt|;
name|bit32
name|error_type
decl_stmt|;
name|bit32
name|host
decl_stmt|;
name|bit32
name|channel
decl_stmt|;
name|bit32
name|device
decl_stmt|;
name|bit32
name|lun
decl_stmt|;
name|bit32
name|scsi_cmd
decl_stmt|;
name|bit32
name|dek_index
decl_stmt|;
name|bit32
name|dek_table
decl_stmt|;
name|bit32
name|kek_index
decl_stmt|;
name|bit32
name|encrypt_mode
decl_stmt|;
name|bit32
name|keytag_check
decl_stmt|;
name|bit32
name|keytag
index|[
literal|2
index|]
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptIOError_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|__attribute__
argument_list|(
argument|(packed)
argument_list|)
name|IoctlEncryptErrorQuery_s
block|{
define|#
directive|define
name|ERROR_QUERY_FLAG_BLOCK
value|1
name|bit32
name|query_flag
decl_stmt|;
name|bit32
name|valid_mask
decl_stmt|;
name|IoctlEncryptIOError_t
name|error
index|[
literal|32
index|]
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptErrorQuery_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|IoctlEncryptOp_u
block|{
name|IoctlEncryptGetInfo_t
name|encryptGetInfo
decl_stmt|;
name|IoctlEncryptSetMode_t
name|encryptSetMode
decl_stmt|;
name|IoctlEncryptKekAdd_t
name|encryptKekAdd
decl_stmt|;
name|IoctlEncryptDekAdd_t
name|encryptDekAdd
decl_stmt|;
name|IoctlEncryptDekInvalidate_t
name|encryptDekInvalidate
decl_stmt|;
name|IoctlEncryptKekNVRAM_t
name|encryptKekNVRAM
decl_stmt|;
name|IoctlEncryptDekMapTable_t
name|encryptDekMap
decl_stmt|;
name|IoctlEncryptErrorQuery_t
name|encryptErrorQuery
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncryptOp_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|tiIOCTLPayloadHeader_s
block|{
name|bit32
name|Signature
decl_stmt|;
name|bit16
name|MajorFunction
decl_stmt|;
name|bit16
name|MinorFunction
decl_stmt|;
name|bit16
name|Length
decl_stmt|;
name|bit16
name|Status
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|tiIOCTLPayloadHeader_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IoctlTISAEncrypt_s
block|{
define|#
directive|define
name|encryptGetInfo
value|0x00000001
define|#
directive|define
name|encryptSetMode
value|0x00000002
define|#
directive|define
name|encryptKekAdd
value|0x00000003
define|#
directive|define
name|encryptDekAdd
value|0x00000004
define|#
directive|define
name|encryptDekInvalidate
value|0x00000005
define|#
directive|define
name|encryptKekStore
value|0x00000006
define|#
directive|define
name|encryptKekLoad
value|0x00000007
define|#
directive|define
name|encryptGetDekTable
value|0x00000008
define|#
directive|define
name|encryptSetDekMap
value|0x00000009
define|#
directive|define
name|encryptDekDump
value|0x0000000a
define|#
directive|define
name|encryptErrorQuery
value|0x0000000c
name|bit32
name|encryptFunction
decl_stmt|;
name|bit32
name|status
decl_stmt|;
name|bit32
name|subEvent
decl_stmt|;
name|IoctlEncryptOp_t
name|request
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlTISAEncrypt_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|IOCTLEncrypt_s
block|{
name|tiIOCTLPayloadHeader_t
name|hdr
decl_stmt|;
name|IoctlTISAEncrypt_t
name|body
decl_stmt|;
block|}
name|__attribute__
typedef|((
name|packed
typedef|))
name|IoctlEncrypt_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

