begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $Id: array.h,v 1.46 2010/02/05 06:57:43 mah Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (C) 2004-2011 HighPoint Technologies, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<dev/hptnr/hptnr_config.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|_HPT_ARRAY_H_
end_ifndef

begin_define
define|#
directive|define
name|_HPT_ARRAY_H_
end_define

begin_define
define|#
directive|define
name|VERMAGIC_ARRAY
value|46
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|MAX_ARRAY_NAME
value|16
ifndef|#
directive|ifndef
name|MAX_MEMBERS
define|#
directive|define
name|MAX_MEMBERS
value|16
endif|#
directive|endif
if|#
directive|if
name|MAX_MEMBERS
operator|<=
literal|16
typedef|typedef
name|HPT_U16
name|HPT_MMASK
typedef|;
elif|#
directive|elif
name|MAX_MEMBERS
operator|<=
literal|32
typedef|typedef
name|HPT_U32
name|HPT_MMASK
typedef|;
elif|#
directive|elif
name|MAX_MEMBERS
operator|<=
literal|64
typedef|typedef
name|HPT_U64
name|HPT_MMASK
typedef|;
else|#
directive|else
error|#
directive|error
literal|"MAX_MEMBERS too large"
endif|#
directive|endif
define|#
directive|define
name|HPT_MMASK_VALUE
parameter_list|(
name|x
parameter_list|)
value|(HPT_MMASK)((HPT_MMASK)1<<(x))
if|#
directive|if
name|MAX_MEMBERS
operator|<
literal|32
define|#
directive|define
name|HPT_MMASK_VALUE_SAFE
parameter_list|(
name|x
parameter_list|)
value|HPT_MMASK_VALUE(x)
else|#
directive|else
define|#
directive|define
name|HPT_MMASK_VALUE_SAFE
parameter_list|(
name|x
parameter_list|)
value|((x)>=MAX_MEMBERS? (HPT_MMASK)0 : HPT_MMASK_VALUE(x))
endif|#
directive|endif
define|#
directive|define
name|MAX_REBUILD_SECTORS
value|128
typedef|typedef
struct|struct
name|_RAID_FLAGS
block|{
name|HPT_UINT
name|rf_need_initialize
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_need_rebuild
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_need_sync
range|:
literal|1
decl_stmt|;
comment|/* ioctl flags */
name|HPT_UINT
name|rf_auto_rebuild
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_rebuilding
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_verifying
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_initializing
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_abort_verifying
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_raid15
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_v3_format
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_need_transform
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_transforming
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_abort_transform
range|:
literal|1
decl_stmt|;
name|HPT_UINT
name|rf_log_write
range|:
literal|1
decl_stmt|;
block|}
name|RAID_FLAGS
typedef|;
typedef|typedef
struct|struct
name|transform_cmd_ext
block|{
name|HPT_LBA
name|lba
decl_stmt|;
name|HPT_U16
name|total_sectors
decl_stmt|;
name|HPT_U16
name|finished_sectors
decl_stmt|;
block|}
name|TRANSFORM_CMD_EXT
operator|,
typedef|*
name|PTRANSFORM_CMD_EXT
typedef|;
define|#
directive|define
name|TO_MOVE_DATA
value|0
define|#
directive|define
name|TO_INITIALIZE
value|1
define|#
directive|define
name|TO_INITIALIZE_ONLY
value|2
define|#
directive|define
name|TO_MOVE_DATA_ONLY
value|3
typedef|typedef
struct|struct
name|hpt_transform
block|{
name|HPT_U32
name|stamp
decl_stmt|;
name|PVDEV
name|source
decl_stmt|;
name|PVDEV
name|target
decl_stmt|;
name|struct
name|list_head
name|link
decl_stmt|;
name|HPT_U8
name|transform_from_tail
decl_stmt|;
name|struct
name|tq_item
name|task
decl_stmt|;
name|struct
name|lock_request
name|lock
decl_stmt|;
name|TRANSFORM_CMD_EXT
name|cmdext
decl_stmt|;
name|HPT_U64
name|transform_point
decl_stmt|;
name|HPT_U16
name|transform_sectors_per_step
decl_stmt|;
name|HPT_U8
name|operation
decl_stmt|;
name|HPT_U8
name|disabled
decl_stmt|;
block|}
name|HPT_TRANSFORM
operator|,
typedef|*
name|PHPT_TRANSFORM
typedef|;
typedef|typedef
struct|struct
name|hpt_array
block|{
name|HPT_U32
name|array_stamp
decl_stmt|;
name|HPT_U32
name|data_stamp
decl_stmt|;
name|HPT_U32
name|array_sn
decl_stmt|;
name|HPT_U8
name|ndisk
decl_stmt|;
name|HPT_U8
name|block_size_shift
decl_stmt|;
name|HPT_U16
name|strip_width
decl_stmt|;
name|HPT_U8
name|sector_size_shift
decl_stmt|;
comment|/*sector size = 512B<<sector_size_shift*/
name|HPT_U8
name|jid
decl_stmt|;
name|HPT_U8
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|HPT_MMASK
name|outdated_members
decl_stmt|;
name|HPT_MMASK
name|offline_members
decl_stmt|;
name|PVDEV
name|member
index|[
name|MAX_MEMBERS
index|]
decl_stmt|;
name|RAID_FLAGS
name|flags
decl_stmt|;
name|HPT_U64
name|rebuilt_sectors
decl_stmt|;
name|HPT_U8
name|name
index|[
name|MAX_ARRAY_NAME
index|]
decl_stmt|;
name|PHPT_TRANSFORM
name|transform
decl_stmt|;
name|TIME_RECORD
name|create_time
decl_stmt|;
name|HPT_U8
name|description
index|[
literal|64
index|]
decl_stmt|;
name|HPT_U8
name|create_manager
index|[
literal|16
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|OS_SUPPORT_TASK
name|int
name|floating_priority
decl_stmt|;
name|OSM_TASK
name|ioctl_task
decl_stmt|;
name|IOCTL_ARG
name|ioctl_arg
decl_stmt|;
name|char
name|ioctl_inbuf
index|[
sizeof|sizeof
argument_list|(
name|PVDEV
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|HPT_U64
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|HPT_U16
argument_list|)
index|]
decl_stmt|;
name|char
name|ioctl_outbuf
index|[
sizeof|sizeof
argument_list|(
name|HPT_UINT
argument_list|)
index|]
decl_stmt|;
endif|#
directive|endif
block|}
name|HPT_ARRAY
operator|,
typedef|*
name|PHPT_ARRAY
typedef|;
ifdef|#
directive|ifdef
name|OS_SUPPORT_TASK
name|void
name|ldm_start_rebuild
parameter_list|(
name|struct
name|_VDEV
modifier|*
name|pArray
parameter_list|)
function_decl|;
else|#
directive|else
define|#
directive|define
name|ldm_start_rebuild
parameter_list|(
name|pArray
parameter_list|)
endif|#
directive|endif
typedef|typedef
struct|struct
name|_raw_partition
block|{
name|struct
name|_raw_partition
modifier|*
name|next
decl_stmt|;
name|__HPT_RAW_LBA
name|start
decl_stmt|;
name|__HPT_RAW_LBA
name|capacity
decl_stmt|;
name|PVDEV
name|vd_part
decl_stmt|;
block|}
name|RAW_PARTITION
operator|,
typedef|*
name|PRAW_PARTITION
typedef|;
typedef|typedef
struct|struct
name|hpt_partiton
block|{
name|PVDEV
name|raw_disk
decl_stmt|;
name|__HPT_RAW_LBA
name|des_location
decl_stmt|;
name|PRAW_PARTITION
name|raw_part
decl_stmt|;
name|HPT_U8
name|del_mbr
decl_stmt|;
name|HPT_U8
name|reserved
index|[
literal|3
index|]
decl_stmt|;
block|}
name|HPT_PARTITION
operator|,
typedef|*
name|PHPT_PARTITION
typedef|;
name|void
name|ldm_check_array_online
parameter_list|(
name|PVDEV
name|pArray
parameter_list|)
function_decl|;
name|void
name|ldm_generic_member_failed
parameter_list|(
name|PVDEV
name|member
parameter_list|)
function_decl|;
name|void
name|ldm_sync_array_info
parameter_list|(
name|PVDEV
name|pArray
parameter_list|)
function_decl|;
name|void
name|ldm_sync_array_stamp
parameter_list|(
name|PVDEV
name|pArray
parameter_list|)
function_decl|;
name|void
name|ldm_add_spare_to_array
parameter_list|(
name|PVDEV
name|pArray
parameter_list|,
name|PVDEV
name|spare_partition
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

