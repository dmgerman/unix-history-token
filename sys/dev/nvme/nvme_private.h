begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (C) 2012 Intel Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__NVME_PRIVATE_H__
end_ifndef

begin_define
define|#
directive|define
name|__NVME_PRIVATE_H__
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/rman.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/taskqueue.h>
end_include

begin_include
include|#
directive|include
file|<vm/uma.h>
end_include

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_include
include|#
directive|include
file|"nvme.h"
end_include

begin_define
define|#
directive|define
name|DEVICE2SOFTC
parameter_list|(
name|dev
parameter_list|)
value|((struct nvme_controller *) device_get_softc(dev))
end_define

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_NVME
argument_list|)
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|CHATHAM2
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|CHATHAM2
end_ifdef

begin_define
define|#
directive|define
name|CHATHAM_PCI_ID
value|0x20118086
end_define

begin_define
define|#
directive|define
name|CHATHAM_CONTROL_BAR
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|IDT32_PCI_ID
value|0x80d0111d
end_define

begin_comment
comment|/* 32 channel board */
end_comment

begin_define
define|#
directive|define
name|IDT8_PCI_ID
value|0x80d2111d
end_define

begin_comment
comment|/* 8 channel board */
end_comment

begin_define
define|#
directive|define
name|NVME_MAX_PRP_LIST_ENTRIES
value|(32)
end_define

begin_comment
comment|/*  * For commands requiring more than 2 PRP entries, one PRP will be  *  embedded in the command (prp1), and the rest of the PRP entries  *  will be in a list pointed to by the command (prp2).  This means  *  that real max number of PRP entries we support is 32+1, which  *  results in a max xfer size of 32*PAGE_SIZE.  */
end_comment

begin_define
define|#
directive|define
name|NVME_MAX_XFER_SIZE
value|NVME_MAX_PRP_LIST_ENTRIES * PAGE_SIZE
end_define

begin_define
define|#
directive|define
name|NVME_ADMIN_TRACKERS
value|(16)
end_define

begin_define
define|#
directive|define
name|NVME_ADMIN_ENTRIES
value|(128)
end_define

begin_comment
comment|/* min and max are defined in admin queue attributes section of spec */
end_comment

begin_define
define|#
directive|define
name|NVME_MIN_ADMIN_ENTRIES
value|(2)
end_define

begin_define
define|#
directive|define
name|NVME_MAX_ADMIN_ENTRIES
value|(4096)
end_define

begin_comment
comment|/*  * NVME_IO_ENTRIES defines the size of an I/O qpair's submission and completion  *  queues, while NVME_IO_TRACKERS defines the maximum number of I/O that we  *  will allow outstanding on an I/O qpair at any time.  The only advantage in  *  having IO_ENTRIES> IO_TRACKERS is for debugging purposes - when dumping  *  the contents of the submission and completion queues, it will show a longer  *  history of data.  */
end_comment

begin_define
define|#
directive|define
name|NVME_IO_ENTRIES
value|(256)
end_define

begin_define
define|#
directive|define
name|NVME_IO_TRACKERS
value|(128)
end_define

begin_define
define|#
directive|define
name|NVME_MIN_IO_TRACKERS
value|(4)
end_define

begin_define
define|#
directive|define
name|NVME_MAX_IO_TRACKERS
value|(1024)
end_define

begin_comment
comment|/*  * NVME_MAX_IO_ENTRIES is not defined, since it is specified in CC.MQES  *  for each controller.  */
end_comment

begin_define
define|#
directive|define
name|NVME_INT_COAL_TIME
value|(0)
end_define

begin_comment
comment|/* disabled */
end_comment

begin_define
define|#
directive|define
name|NVME_INT_COAL_THRESHOLD
value|(0)
end_define

begin_comment
comment|/* 0-based */
end_comment

begin_define
define|#
directive|define
name|NVME_MAX_NAMESPACES
value|(16)
end_define

begin_define
define|#
directive|define
name|NVME_MAX_CONSUMERS
value|(2)
end_define

begin_define
define|#
directive|define
name|NVME_MAX_ASYNC_EVENTS
value|(8)
end_define

begin_define
define|#
directive|define
name|NVME_DEFAULT_TIMEOUT_PERIOD
value|(30)
end_define

begin_comment
comment|/* in seconds */
end_comment

begin_define
define|#
directive|define
name|NVME_MIN_TIMEOUT_PERIOD
value|(5)
end_define

begin_define
define|#
directive|define
name|NVME_MAX_TIMEOUT_PERIOD
value|(120)
end_define

begin_define
define|#
directive|define
name|NVME_DEFAULT_RETRY_COUNT
value|(4)
end_define

begin_comment
comment|/* Maximum log page size to fetch for AERs. */
end_comment

begin_define
define|#
directive|define
name|NVME_MAX_AER_LOG_SIZE
value|(4096)
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|CACHE_LINE_SIZE
end_ifndef

begin_define
define|#
directive|define
name|CACHE_LINE_SIZE
value|(64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|uma_zone_t
name|nvme_request_zone
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int32_t
name|nvme_retry_count
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|nvme_completion_poll_status
block|{
name|struct
name|nvme_completion
name|cpl
decl_stmt|;
name|boolean_t
name|done
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|nvme_request
block|{
name|struct
name|nvme_command
name|cmd
decl_stmt|;
name|struct
name|nvme_qpair
modifier|*
name|qpair
decl_stmt|;
name|void
modifier|*
name|payload
decl_stmt|;
name|uint32_t
name|payload_size
decl_stmt|;
name|boolean_t
name|timeout
decl_stmt|;
name|struct
name|uio
modifier|*
name|uio
decl_stmt|;
name|nvme_cb_fn_t
name|cb_fn
decl_stmt|;
name|void
modifier|*
name|cb_arg
decl_stmt|;
name|int32_t
name|retries
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|nvme_request
argument_list|)
name|stailq
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|nvme_async_event_request
block|{
name|struct
name|nvme_controller
modifier|*
name|ctrlr
decl_stmt|;
name|struct
name|nvme_request
modifier|*
name|req
decl_stmt|;
name|struct
name|nvme_completion
name|cpl
decl_stmt|;
name|uint32_t
name|log_page_id
decl_stmt|;
name|uint32_t
name|log_page_size
decl_stmt|;
name|uint8_t
name|log_page_buffer
index|[
name|NVME_MAX_AER_LOG_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|nvme_tracker
block|{
name|TAILQ_ENTRY
argument_list|(
argument|nvme_tracker
argument_list|)
name|tailq
expr_stmt|;
name|struct
name|nvme_request
modifier|*
name|req
decl_stmt|;
name|struct
name|nvme_qpair
modifier|*
name|qpair
decl_stmt|;
name|struct
name|callout
name|timer
decl_stmt|;
name|bus_dmamap_t
name|payload_dma_map
decl_stmt|;
name|uint16_t
name|cid
decl_stmt|;
name|uint64_t
name|prp
index|[
name|NVME_MAX_PRP_LIST_ENTRIES
index|]
decl_stmt|;
name|bus_addr_t
name|prp_bus_addr
decl_stmt|;
name|bus_dmamap_t
name|prp_dma_map
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|nvme_qpair
block|{
name|struct
name|nvme_controller
modifier|*
name|ctrlr
decl_stmt|;
name|uint32_t
name|id
decl_stmt|;
name|uint32_t
name|phase
decl_stmt|;
name|uint16_t
name|vector
decl_stmt|;
name|int
name|rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|res
decl_stmt|;
name|void
modifier|*
name|tag
decl_stmt|;
name|uint32_t
name|max_xfer_size
decl_stmt|;
name|uint32_t
name|num_entries
decl_stmt|;
name|uint32_t
name|num_trackers
decl_stmt|;
name|uint32_t
name|sq_tdbl_off
decl_stmt|;
name|uint32_t
name|cq_hdbl_off
decl_stmt|;
name|uint32_t
name|sq_head
decl_stmt|;
name|uint32_t
name|sq_tail
decl_stmt|;
name|uint32_t
name|cq_head
decl_stmt|;
name|int64_t
name|num_cmds
decl_stmt|;
name|int64_t
name|num_intr_handler_calls
decl_stmt|;
name|struct
name|nvme_command
modifier|*
name|cmd
decl_stmt|;
name|struct
name|nvme_completion
modifier|*
name|cpl
decl_stmt|;
name|bus_dma_tag_t
name|dma_tag
decl_stmt|;
name|bus_dmamap_t
name|cmd_dma_map
decl_stmt|;
name|uint64_t
name|cmd_bus_addr
decl_stmt|;
name|bus_dmamap_t
name|cpl_dma_map
decl_stmt|;
name|uint64_t
name|cpl_bus_addr
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|nvme_tracker
argument_list|)
name|free_tr
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|nvme_tracker
argument_list|)
name|outstanding_tr
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|nvme_request
argument_list|)
name|queued_req
expr_stmt|;
name|struct
name|nvme_tracker
modifier|*
modifier|*
name|act_tr
decl_stmt|;
name|boolean_t
name|is_enabled
decl_stmt|;
name|struct
name|mtx
name|lock
name|__aligned
parameter_list|(
name|CACHE_LINE_SIZE
parameter_list|)
function_decl|;
block|}
name|__aligned
argument_list|(
name|CACHE_LINE_SIZE
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|nvme_namespace
block|{
name|struct
name|nvme_controller
modifier|*
name|ctrlr
decl_stmt|;
name|struct
name|nvme_namespace_data
name|data
decl_stmt|;
name|uint16_t
name|id
decl_stmt|;
name|uint16_t
name|flags
decl_stmt|;
name|struct
name|cdev
modifier|*
name|cdev
decl_stmt|;
name|void
modifier|*
name|cons_cookie
index|[
name|NVME_MAX_CONSUMERS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * One of these per allocated PCI device.  */
end_comment

begin_struct
struct|struct
name|nvme_controller
block|{
name|device_t
name|dev
decl_stmt|;
name|uint32_t
name|ready_timeout_in_ms
decl_stmt|;
name|bus_space_tag_t
name|bus_tag
decl_stmt|;
name|bus_space_handle_t
name|bus_handle
decl_stmt|;
name|int
name|resource_id
decl_stmt|;
name|struct
name|resource
modifier|*
name|resource
decl_stmt|;
comment|/* 	 * The NVMe spec allows for the MSI-X table to be placed in BAR 4/5, 	 *  separate from the control registers which are in BAR 0/1.  These 	 *  members track the mapping of BAR 4/5 for that reason. 	 */
name|int
name|bar4_resource_id
decl_stmt|;
name|struct
name|resource
modifier|*
name|bar4_resource
decl_stmt|;
ifdef|#
directive|ifdef
name|CHATHAM2
name|bus_space_tag_t
name|chatham_bus_tag
decl_stmt|;
name|bus_space_handle_t
name|chatham_bus_handle
decl_stmt|;
name|int
name|chatham_resource_id
decl_stmt|;
name|struct
name|resource
modifier|*
name|chatham_resource
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|msix_enabled
decl_stmt|;
name|uint32_t
name|force_intx
decl_stmt|;
name|uint32_t
name|enable_aborts
decl_stmt|;
name|uint32_t
name|num_io_queues
decl_stmt|;
name|boolean_t
name|per_cpu_io_queues
decl_stmt|;
comment|/* Fields for tracking progress during controller initialization. */
name|struct
name|intr_config_hook
name|config_hook
decl_stmt|;
name|uint32_t
name|ns_identified
decl_stmt|;
name|uint32_t
name|queues_created
decl_stmt|;
name|struct
name|task
name|reset_task
decl_stmt|;
name|struct
name|task
name|fail_req_task
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|taskqueue
decl_stmt|;
comment|/* For shared legacy interrupt. */
name|int
name|rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|res
decl_stmt|;
name|void
modifier|*
name|tag
decl_stmt|;
name|bus_dma_tag_t
name|hw_desc_tag
decl_stmt|;
name|bus_dmamap_t
name|hw_desc_map
decl_stmt|;
comment|/** maximum i/o size in bytes */
name|uint32_t
name|max_xfer_size
decl_stmt|;
comment|/** minimum page size supported by this controller in bytes */
name|uint32_t
name|min_page_size
decl_stmt|;
comment|/** interrupt coalescing time period (in microseconds) */
name|uint32_t
name|int_coal_time
decl_stmt|;
comment|/** interrupt coalescing threshold */
name|uint32_t
name|int_coal_threshold
decl_stmt|;
comment|/** timeout period in seconds */
name|uint32_t
name|timeout_period
decl_stmt|;
name|struct
name|nvme_qpair
name|adminq
decl_stmt|;
name|struct
name|nvme_qpair
modifier|*
name|ioq
decl_stmt|;
name|struct
name|nvme_registers
modifier|*
name|regs
decl_stmt|;
name|struct
name|nvme_controller_data
name|cdata
decl_stmt|;
name|struct
name|nvme_namespace
name|ns
index|[
name|NVME_MAX_NAMESPACES
index|]
decl_stmt|;
name|struct
name|cdev
modifier|*
name|cdev
decl_stmt|;
name|uint32_t
name|num_aers
decl_stmt|;
name|struct
name|nvme_async_event_request
name|aer
index|[
name|NVME_MAX_ASYNC_EVENTS
index|]
decl_stmt|;
name|void
modifier|*
name|cons_cookie
index|[
name|NVME_MAX_CONSUMERS
index|]
decl_stmt|;
name|uint32_t
name|is_resetting
decl_stmt|;
name|struct
name|mtx
name|fail_req_lock
decl_stmt|;
name|boolean_t
name|is_failed
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|nvme_request
argument_list|)
name|fail_req
expr_stmt|;
ifdef|#
directive|ifdef
name|CHATHAM2
name|uint64_t
name|chatham_size
decl_stmt|;
name|uint64_t
name|chatham_lbas
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|nvme_mmio_offsetof
parameter_list|(
name|reg
parameter_list|)
define|\
value|offsetof(struct nvme_registers, reg)
end_define

begin_define
define|#
directive|define
name|nvme_mmio_read_4
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_space_read_4((sc)->bus_tag, (sc)->bus_handle,		       \ 	    nvme_mmio_offsetof(reg))
end_define

begin_define
define|#
directive|define
name|nvme_mmio_write_4
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_space_write_4((sc)->bus_tag, (sc)->bus_handle,		       \ 	    nvme_mmio_offsetof(reg), val)
end_define

begin_define
define|#
directive|define
name|nvme_mmio_write_8
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|do {								       \ 		bus_space_write_4((sc)->bus_tag, (sc)->bus_handle,	       \ 		    nvme_mmio_offsetof(reg), val& 0xFFFFFFFF); 	       \ 		bus_space_write_4((sc)->bus_tag, (sc)->bus_handle,	       \ 		    nvme_mmio_offsetof(reg)+4,				       \ 		    (val& 0xFFFFFFFF00000000UL)>> 32);		       \ 	} while (0);
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|CHATHAM2
end_ifdef

begin_define
define|#
directive|define
name|chatham_read_4
parameter_list|(
name|softc
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_space_read_4((softc)->chatham_bus_tag,			       \ 	    (softc)->chatham_bus_handle, reg)
end_define

begin_define
define|#
directive|define
name|chatham_write_8
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|do {								       \ 		bus_space_write_4((sc)->chatham_bus_tag,		       \ 		    (sc)->chatham_bus_handle, reg, val& 0xffffffff);	       \ 		bus_space_write_4((sc)->chatham_bus_tag,		       \ 		    (sc)->chatham_bus_handle, reg+4,			       \ 		    (val& 0xFFFFFFFF00000000UL)>> 32);		       \ 	} while (0);
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CHATHAM2 */
end_comment

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|<
literal|800054
end_if

begin_define
define|#
directive|define
name|wmb
parameter_list|()
value|__asm volatile("sfence" ::: "memory")
end_define

begin_define
define|#
directive|define
name|mb
parameter_list|()
value|__asm volatile("mfence" ::: "memory")
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|nvme_printf
parameter_list|(
name|ctrlr
parameter_list|,
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|device_printf(ctrlr->dev, fmt, ##args)
end_define

begin_function_decl
name|void
name|nvme_ns_test
parameter_list|(
name|struct
name|nvme_namespace
modifier|*
name|ns
parameter_list|,
name|u_long
name|cmd
parameter_list|,
name|caddr_t
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_identify_controller
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|void
modifier|*
name|payload
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_identify_namespace
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|uint16_t
name|nsid
parameter_list|,
name|void
modifier|*
name|payload
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_set_interrupt_coalescing
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|uint32_t
name|microseconds
parameter_list|,
name|uint32_t
name|threshold
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_get_error_page
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|struct
name|nvme_error_information_entry
modifier|*
name|payload
parameter_list|,
name|uint32_t
name|num_entries
parameter_list|,
comment|/* 0 = max */
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_get_health_information_page
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|uint32_t
name|nsid
parameter_list|,
name|struct
name|nvme_health_information_page
modifier|*
name|payload
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_get_firmware_page
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|struct
name|nvme_firmware_page
modifier|*
name|payload
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_create_io_cq
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|struct
name|nvme_qpair
modifier|*
name|io_que
parameter_list|,
name|uint16_t
name|vector
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_create_io_sq
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|struct
name|nvme_qpair
modifier|*
name|io_que
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_delete_io_cq
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|struct
name|nvme_qpair
modifier|*
name|io_que
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_delete_io_sq
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|struct
name|nvme_qpair
modifier|*
name|io_que
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_set_num_queues
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|uint32_t
name|num_queues
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_set_async_event_config
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|union
name|nvme_critical_warning_state
name|state
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_cmd_abort
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|uint16_t
name|cid
parameter_list|,
name|uint16_t
name|sqid
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_payload_map
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|seg
parameter_list|,
name|int
name|nseg
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_payload_map_uio
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|seg
parameter_list|,
name|int
name|nseg
parameter_list|,
name|bus_size_t
name|mapsize
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_completion_poll_cb
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
specifier|const
name|struct
name|nvme_completion
modifier|*
name|cpl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nvme_ctrlr_construct
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_destruct
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nvme_ctrlr_hw_reset
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_reset
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ctrlr defined as void * to allow use with config_intrhook. */
end_comment

begin_function_decl
name|void
name|nvme_ctrlr_start_config_hook
parameter_list|(
name|void
modifier|*
name|ctrlr_arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_submit_admin_request
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|struct
name|nvme_request
modifier|*
name|req
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_submit_io_request
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|struct
name|nvme_request
modifier|*
name|req
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ctrlr_post_failed_request
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|,
name|struct
name|nvme_request
modifier|*
name|req
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_qpair_construct
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|,
name|uint32_t
name|id
parameter_list|,
name|uint16_t
name|vector
parameter_list|,
name|uint32_t
name|num_entries
parameter_list|,
name|uint32_t
name|num_trackers
parameter_list|,
name|uint32_t
name|max_xfer_size
parameter_list|,
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_qpair_submit_tracker
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|,
name|struct
name|nvme_tracker
modifier|*
name|tr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_qpair_process_completions
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_qpair_submit_request
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|,
name|struct
name|nvme_request
modifier|*
name|req
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_qpair_reset
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_qpair_fail
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_qpair_manual_complete_request
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|,
name|struct
name|nvme_request
modifier|*
name|req
parameter_list|,
name|uint32_t
name|sct
parameter_list|,
name|uint32_t
name|sc
parameter_list|,
name|boolean_t
name|print_on_error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_admin_qpair_enable
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_admin_qpair_disable
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_admin_qpair_destroy
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_io_qpair_enable
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_io_qpair_disable
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_io_qpair_destroy
parameter_list|(
name|struct
name|nvme_qpair
modifier|*
name|qpair
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nvme_ns_construct
parameter_list|(
name|struct
name|nvme_namespace
modifier|*
name|ns
parameter_list|,
name|uint16_t
name|id
parameter_list|,
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_ns_destruct
parameter_list|(
name|struct
name|nvme_namespace
modifier|*
name|ns
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nvme_ns_physio
parameter_list|(
name|struct
name|cdev
modifier|*
name|dev
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|,
name|int
name|ioflag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_sysctl_initialize_ctrlr
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_dump_command
parameter_list|(
name|struct
name|nvme_command
modifier|*
name|cmd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvme_dump_completion
parameter_list|(
name|struct
name|nvme_completion
modifier|*
name|cpl
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|nvme_single_map
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|seg
parameter_list|,
name|int
name|nseg
parameter_list|,
name|int
name|error
parameter_list|)
block|{
name|uint64_t
modifier|*
name|bus_addr
init|=
operator|(
name|uint64_t
operator|*
operator|)
name|arg
decl_stmt|;
operator|*
name|bus_addr
operator|=
name|seg
index|[
literal|0
index|]
operator|.
name|ds_addr
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|nvme_request
operator|*
name|_nvme_allocate_request
argument_list|(
argument|nvme_cb_fn_t cb_fn
argument_list|,
argument|void *cb_arg
argument_list|)
block|{ 	struct
name|nvme_request
operator|*
name|req
block|;
name|req
operator|=
name|uma_zalloc
argument_list|(
name|nvme_request_zone
argument_list|,
name|M_NOWAIT
operator||
name|M_ZERO
argument_list|)
block|;
if|if
condition|(
name|req
operator|!=
name|NULL
condition|)
block|{
name|req
operator|->
name|cb_fn
operator|=
name|cb_fn
expr_stmt|;
name|req
operator|->
name|cb_arg
operator|=
name|cb_arg
expr_stmt|;
name|req
operator|->
name|timeout
operator|=
name|TRUE
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|(
name|req
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|struct
name|nvme_request
modifier|*
name|nvme_allocate_request
parameter_list|(
name|void
modifier|*
name|payload
parameter_list|,
name|uint32_t
name|payload_size
parameter_list|,
name|nvme_cb_fn_t
name|cb_fn
parameter_list|,
name|void
modifier|*
name|cb_arg
parameter_list|)
block|{
name|struct
name|nvme_request
modifier|*
name|req
decl_stmt|;
name|req
operator|=
name|_nvme_allocate_request
argument_list|(
name|cb_fn
argument_list|,
name|cb_arg
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|!=
name|NULL
condition|)
block|{
name|req
operator|->
name|payload
operator|=
name|payload
expr_stmt|;
name|req
operator|->
name|payload_size
operator|=
name|payload_size
expr_stmt|;
block|}
return|return
operator|(
name|req
operator|)
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|nvme_request
operator|*
name|nvme_allocate_request_uio
argument_list|(
argument|struct uio *uio
argument_list|,
argument|nvme_cb_fn_t cb_fn
argument_list|,
argument|void *cb_arg
argument_list|)
block|{ 	struct
name|nvme_request
operator|*
name|req
block|;
name|req
operator|=
name|_nvme_allocate_request
argument_list|(
name|cb_fn
argument_list|,
name|cb_arg
argument_list|)
block|;
if|if
condition|(
name|req
operator|!=
name|NULL
condition|)
name|req
operator|->
name|uio
operator|=
name|uio
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|req
operator|)
return|;
end_return

begin_define
unit|}
define|#
directive|define
name|nvme_free_request
parameter_list|(
name|req
parameter_list|)
value|uma_zfree(nvme_request_zone, req)
end_define

begin_macro
unit|void
name|nvme_notify_async_consumers
argument_list|(
argument|struct nvme_controller *ctrlr
argument_list|,
argument|const struct nvme_completion *async_cpl
argument_list|,
argument|uint32_t log_page_id
argument_list|,
argument|void *log_page_buffer
argument_list|,
argument|uint32_t log_page_size
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|nvme_notify_fail_consumers
parameter_list|(
name|struct
name|nvme_controller
modifier|*
name|ctrlr
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __NVME_PRIVATE_H__ */
end_comment

end_unit

