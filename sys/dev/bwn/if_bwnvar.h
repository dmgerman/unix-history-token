begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2009-2010 Weongyo Jeong<weongyo@freebsd.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any  *    redistribution must be conditioned upon including a substantially  *    similar Disclaimer requirement for further binary redistribution.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY  * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL  * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,  * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER  * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  * THE POSSIBILITY OF SUCH DAMAGES.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IF_BWNVAR_H
end_ifndef

begin_define
define|#
directive|define
name|_IF_BWNVAR_H
end_define

begin_struct_decl
struct_decl|struct
name|siba_dev_softc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|bwn_softc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|bwn_mac
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|N
parameter_list|(
name|a
parameter_list|)
value|(sizeof(a) / sizeof(a[0]))
end_define

begin_define
define|#
directive|define
name|BWN_ALIGN
value|0x1000
end_define

begin_define
define|#
directive|define
name|BWN_BUS_SPACE_MAXADDR_30BIT
value|0x3fffffff
end_define

begin_define
define|#
directive|define
name|BWN_RETRY_SHORT
value|7
end_define

begin_define
define|#
directive|define
name|BWN_RETRY_LONG
value|4
end_define

begin_define
define|#
directive|define
name|BWN_STAID_MAX
value|64
end_define

begin_define
define|#
directive|define
name|BWN_TXPWR_IGNORE_TIME
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|BWN_TXPWR_IGNORE_TSSI
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|BWN_HAS_TXMAG
parameter_list|(
name|phy
parameter_list|)
define|\
value|(((phy)->rev>= 2)&& ((phy)->rf_ver == 0x2050)&&		\ 	 ((phy)->rf_rev == 8))
end_define

begin_define
define|#
directive|define
name|BWN_HAS_LOOPBACK
parameter_list|(
name|phy
parameter_list|)
define|\
value|(((phy)->rev> 1) || ((phy)->gmode))
end_define

begin_define
define|#
directive|define
name|BWN_TXERROR_MAX
value|1000
end_define

begin_define
define|#
directive|define
name|BWN_GETTIME
parameter_list|(
name|v
parameter_list|)
value|do {						\ 	struct timespec ts;						\ 	nanouptime(&ts);						\ 	(v) = ts.tv_nsec / 1000000 + ts.tv_sec * 1000;			\ } while (0)
end_define

begin_define
define|#
directive|define
name|BWN_ISOLDFMT
parameter_list|(
name|mac
parameter_list|)
value|((mac)->mac_fw.rev<= 351)
end_define

begin_define
define|#
directive|define
name|BWN_TSSI2DBM
parameter_list|(
name|num
parameter_list|,
name|den
parameter_list|)
define|\
value|((int32_t)((num< 0) ? num / den : (num + den / 2) / den))
end_define

begin_define
define|#
directive|define
name|BWN_HDRSIZE
parameter_list|(
name|mac
parameter_list|)
define|\
value|((BWN_ISOLDFMT(mac)) ? (100 + sizeof(struct bwn_plcp6)) :	\ 	    (104 + sizeof(struct bwn_plcp6)))
end_define

begin_define
define|#
directive|define
name|BWN_PIO_COOKIE
parameter_list|(
name|tq
parameter_list|,
name|tp
parameter_list|)
define|\
value|((uint16_t)((((uint16_t)tq->tq_index + 1)<< 12) | tp->tp_index))
end_define

begin_define
define|#
directive|define
name|BWN_DMA_COOKIE
parameter_list|(
name|dr
parameter_list|,
name|slot
parameter_list|)
define|\
value|((uint16_t)(((uint16_t)dr->dr_index + 1)<< 12) | (uint16_t)slot)
end_define

begin_define
define|#
directive|define
name|BWN_READ_2
parameter_list|(
name|mac
parameter_list|,
name|o
parameter_list|)
value|(siba_read_2(mac->mac_sc->sc_dev, o))
end_define

begin_define
define|#
directive|define
name|BWN_READ_4
parameter_list|(
name|mac
parameter_list|,
name|o
parameter_list|)
value|(siba_read_4(mac->mac_sc->sc_dev, o))
end_define

begin_define
define|#
directive|define
name|BWN_WRITE_2
parameter_list|(
name|mac
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|(siba_write_2(mac->mac_sc->sc_dev, o, v))
end_define

begin_define
define|#
directive|define
name|BWN_WRITE_4
parameter_list|(
name|mac
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|(siba_write_4(mac->mac_sc->sc_dev, o, v))
end_define

begin_define
define|#
directive|define
name|BWN_PIO_TXQOFFSET
parameter_list|(
name|mac
parameter_list|)
define|\
value|((siba_get_revid(mac->mac_sc->sc_dev)>= 11) ? 0x18 : 0)
end_define

begin_define
define|#
directive|define
name|BWN_PIO_RXQOFFSET
parameter_list|(
name|mac
parameter_list|)
define|\
value|((siba_get_revid(mac->mac_sc->sc_dev)>= 11) ? 0x38 : 8)
end_define

begin_define
define|#
directive|define
name|BWN_SEC_NEWAPI
parameter_list|(
name|mac
parameter_list|)
value|(mac->mac_fw.rev>= 351)
end_define

begin_define
define|#
directive|define
name|BWN_SEC_KEY2FW
parameter_list|(
name|mac
parameter_list|,
name|idx
parameter_list|)
define|\
value|(BWN_SEC_NEWAPI(mac) ? idx : ((idx>= 4) ? idx - 4 : idx))
end_define

begin_define
define|#
directive|define
name|BWN_RF_READ
parameter_list|(
name|mac
parameter_list|,
name|r
parameter_list|)
value|(mac->mac_phy.rf_read(mac, r))
end_define

begin_define
define|#
directive|define
name|BWN_RF_WRITE
parameter_list|(
name|mac
parameter_list|,
name|r
parameter_list|,
name|v
parameter_list|)
value|(mac->mac_phy.rf_write(mac, r, v))
end_define

begin_define
define|#
directive|define
name|BWN_RF_MASK
parameter_list|(
name|mac
parameter_list|,
name|o
parameter_list|,
name|m
parameter_list|)
define|\
value|BWN_RF_WRITE(mac, o, BWN_RF_READ(mac, o)& m)
end_define

begin_define
define|#
directive|define
name|BWN_RF_SETMASK
parameter_list|(
name|mac
parameter_list|,
name|offset
parameter_list|,
name|mask
parameter_list|,
name|set
parameter_list|)
define|\
value|BWN_RF_WRITE(mac, offset, (BWN_RF_READ(mac, offset)& mask) | set)
end_define

begin_define
define|#
directive|define
name|BWN_RF_SET
parameter_list|(
name|mac
parameter_list|,
name|offset
parameter_list|,
name|set
parameter_list|)
define|\
value|BWN_RF_WRITE(mac, offset, BWN_RF_READ(mac, offset) | set)
end_define

begin_define
define|#
directive|define
name|BWN_PHY_READ
parameter_list|(
name|mac
parameter_list|,
name|r
parameter_list|)
value|(mac->mac_phy.phy_read(mac, r))
end_define

begin_define
define|#
directive|define
name|BWN_PHY_WRITE
parameter_list|(
name|mac
parameter_list|,
name|r
parameter_list|,
name|v
parameter_list|)
define|\
value|(mac->mac_phy.phy_write(mac, r, v))
end_define

begin_define
define|#
directive|define
name|BWN_PHY_SET
parameter_list|(
name|mac
parameter_list|,
name|offset
parameter_list|,
name|set
parameter_list|)
value|do {				\ 	if (mac->mac_phy.phy_maskset != NULL) {				\ 		KASSERT(mac->mac_status< BWN_MAC_STATUS_INITED ||	\ 		    mac->mac_suspended> 0,				\ 		    ("dont access PHY or RF registers after turning on MAC")); \ 		mac->mac_phy.phy_maskset(mac, offset, 0xffff, set);	\ 	} else								\ 		BWN_PHY_WRITE(mac, offset,				\ 		    BWN_PHY_READ(mac, offset) | (set));			\ } while (0)
end_define

begin_define
define|#
directive|define
name|BWN_PHY_SETMASK
parameter_list|(
name|mac
parameter_list|,
name|offset
parameter_list|,
name|mask
parameter_list|,
name|set
parameter_list|)
value|do {			\ 	if (mac->mac_phy.phy_maskset != NULL) {				\ 		KASSERT(mac->mac_status< BWN_MAC_STATUS_INITED ||	\ 		    mac->mac_suspended> 0,				\ 		    ("dont access PHY or RF registers after turning on MAC")); \ 		mac->mac_phy.phy_maskset(mac, offset, mask, set);	\ 	} else								\ 		BWN_PHY_WRITE(mac, offset,				\ 		    (BWN_PHY_READ(mac, offset)& (mask)) | (set));	\ } while (0)
end_define

begin_define
define|#
directive|define
name|BWN_PHY_MASK
parameter_list|(
name|mac
parameter_list|,
name|offset
parameter_list|,
name|mask
parameter_list|)
value|do {				\ 	if (mac->mac_phy.phy_maskset != NULL) {				\ 		KASSERT(mac->mac_status< BWN_MAC_STATUS_INITED ||	\ 		    mac->mac_suspended> 0,				\ 		    ("dont access PHY or RF registers after turning on MAC")); \ 		mac->mac_phy.phy_maskset(mac, offset, mask, 0);		\ 	} else								\ 		BWN_PHY_WRITE(mac, offset,				\ 		    BWN_PHY_READ(mac, offset)& mask);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|BWN_PHY_COPY
parameter_list|(
name|mac
parameter_list|,
name|dst
parameter_list|,
name|src
parameter_list|)
value|do {				\ 	KASSERT(mac->mac_status< BWN_MAC_STATUS_INITED ||		\ 	    mac->mac_suspended> 0,					\ 	    ("dont access PHY or RF registers after turning on MAC"));	\ 	BWN_PHY_WRITE(mac, dst, BWN_PHY_READ(mac, src));		\ } while (0)
end_define

begin_define
define|#
directive|define
name|BWN_LO_CALIB_EXPIRE
value|(1000 * (30 - 2))
end_define

begin_define
define|#
directive|define
name|BWN_LO_PWRVEC_EXPIRE
value|(1000 * (30 - 2))
end_define

begin_define
define|#
directive|define
name|BWN_LO_TXCTL_EXPIRE
value|(1000 * (180 - 4))
end_define

begin_define
define|#
directive|define
name|BWN_DMA_BIT_MASK
parameter_list|(
name|n
parameter_list|)
value|(((n) == 64) ? ~0ULL : ((1ULL<<(n))-1))
end_define

begin_define
define|#
directive|define
name|BWN_LPD
parameter_list|(
name|L
parameter_list|,
name|P
parameter_list|,
name|D
parameter_list|)
value|(((L)<< 2) | ((P)<< 1) | ((D)<< 0))
end_define

begin_define
define|#
directive|define
name|BWN_BITREV4
parameter_list|(
name|tmp
parameter_list|)
value|(BWN_BITREV8(tmp)>> 4)
end_define

begin_define
define|#
directive|define
name|BWN_BITREV8
parameter_list|(
name|byte
parameter_list|)
value|(bwn_bitrev_table[byte])
end_define

begin_define
define|#
directive|define
name|BWN_BBATTCMP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((a)->att == (b)->att)
end_define

begin_define
define|#
directive|define
name|BWN_RFATTCMP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
define|\
value|(((a)->att == (b)->att)&& ((a)->padmix == (b)->padmix))
end_define

begin_define
define|#
directive|define
name|BWN_PIO_WRITE_2
parameter_list|(
name|mac
parameter_list|,
name|tq
parameter_list|,
name|offset
parameter_list|,
name|value
parameter_list|)
define|\
value|BWN_WRITE_2(mac, (tq)->tq_base + offset, value)
end_define

begin_define
define|#
directive|define
name|BWN_PIO_READ_4
parameter_list|(
name|mac
parameter_list|,
name|tq
parameter_list|,
name|offset
parameter_list|)
define|\
value|BWN_READ_4(mac, tq->tq_base + offset)
end_define

begin_define
define|#
directive|define
name|BWN_ISCCKRATE
parameter_list|(
name|rate
parameter_list|)
define|\
value|(rate == BWN_CCK_RATE_1MB || rate == BWN_CCK_RATE_2MB ||	\ 	 rate == BWN_CCK_RATE_5MB || rate == BWN_CCK_RATE_11MB)
end_define

begin_define
define|#
directive|define
name|BWN_ISOFDMRATE
parameter_list|(
name|rate
parameter_list|)
value|(!BWN_ISCCKRATE(rate))
end_define

begin_define
define|#
directive|define
name|BWN_BARRIER
parameter_list|(
name|mac
parameter_list|,
name|flags
parameter_list|)
value|siba_barrier(mac->mac_sc->sc_dev, flags)
end_define

begin_define
define|#
directive|define
name|BWN_DMA_READ
parameter_list|(
name|dr
parameter_list|,
name|offset
parameter_list|)
define|\
value|(BWN_READ_4(dr->dr_mac, dr->dr_base + offset))
end_define

begin_define
define|#
directive|define
name|BWN_DMA_WRITE
parameter_list|(
name|dr
parameter_list|,
name|offset
parameter_list|,
name|value
parameter_list|)
define|\
value|(BWN_WRITE_4(dr->dr_mac, dr->dr_base + offset, value))
end_define

begin_struct
struct|struct
name|bwn_rate
block|{
name|uint16_t
name|rateid
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_ANT0
value|0
end_define

begin_define
define|#
directive|define
name|BWN_ANT1
value|1
end_define

begin_define
define|#
directive|define
name|BWN_ANTAUTO0
value|2
end_define

begin_define
define|#
directive|define
name|BWN_ANTAUTO1
value|3
end_define

begin_define
define|#
directive|define
name|BWN_ANT2
value|4
end_define

begin_define
define|#
directive|define
name|BWN_ANT3
value|8
end_define

begin_define
define|#
directive|define
name|BWN_ANTAUTO
value|BWN_ANTAUTO0
end_define

begin_define
define|#
directive|define
name|BWN_ANT_DEFAULT
value|BWN_ANTAUTO
end_define

begin_define
define|#
directive|define
name|BWN_TX_SLOTS_PER_FRAME
value|2
end_define

begin_struct
struct|struct
name|bwn_channel
block|{
name|unsigned
name|freq
decl_stmt|;
name|unsigned
name|ieee
decl_stmt|;
name|unsigned
name|maxTxPow
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_channelinfo
block|{
name|struct
name|bwn_channel
name|channels
index|[
name|IEEE80211_CHAN_MAX
index|]
decl_stmt|;
name|unsigned
name|nchannels
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_bbatt
block|{
name|uint8_t
name|att
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_bbatt_list
block|{
specifier|const
name|struct
name|bwn_bbatt
modifier|*
name|array
decl_stmt|;
name|uint8_t
name|len
decl_stmt|;
name|uint8_t
name|min
decl_stmt|;
name|uint8_t
name|max
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_rfatt
block|{
name|uint8_t
name|att
decl_stmt|;
name|int
name|padmix
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_rfatt_list
block|{
specifier|const
name|struct
name|bwn_rfatt
modifier|*
name|array
decl_stmt|;
name|uint8_t
name|len
decl_stmt|;
name|uint8_t
name|min
decl_stmt|;
name|uint8_t
name|max
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_DC_LT_SIZE
value|32
end_define

begin_struct
struct|struct
name|bwn_loctl
block|{
name|int8_t
name|i
decl_stmt|;
name|int8_t
name|q
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_lo_calib
block|{
name|struct
name|bwn_bbatt
name|bbatt
decl_stmt|;
name|struct
name|bwn_rfatt
name|rfatt
decl_stmt|;
name|struct
name|bwn_loctl
name|ctl
decl_stmt|;
name|unsigned
name|long
name|calib_time
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|bwn_lo_calib
argument_list|)
name|list
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_rxhdr4
block|{
name|uint16_t
name|frame_len
decl_stmt|;
name|uint8_t
name|pad1
index|[
literal|2
index|]
decl_stmt|;
name|uint16_t
name|phy_status0
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint8_t
name|rssi
decl_stmt|;
name|uint8_t
name|sig_qual
decl_stmt|;
block|}
name|__packed
name|abg
struct|;
struct|struct
block|{
name|int8_t
name|power0
decl_stmt|;
name|int8_t
name|power1
decl_stmt|;
block|}
name|__packed
name|n
struct|;
block|}
name|__packed
name|phy
union|;
name|uint16_t
name|phy_status2
decl_stmt|;
name|uint16_t
name|phy_status3
decl_stmt|;
name|uint32_t
name|mac_status
decl_stmt|;
name|uint16_t
name|mac_time
decl_stmt|;
name|uint16_t
name|channel
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|bwn_txstatus
block|{
name|uint16_t
name|cookie
decl_stmt|;
name|uint16_t
name|seq
decl_stmt|;
name|uint8_t
name|phy_stat
decl_stmt|;
name|uint8_t
name|framecnt
decl_stmt|;
name|uint8_t
name|rtscnt
decl_stmt|;
name|uint8_t
name|sreason
decl_stmt|;
name|uint8_t
name|pm
decl_stmt|;
name|uint8_t
name|im
decl_stmt|;
name|uint8_t
name|ampdu
decl_stmt|;
name|uint8_t
name|ack
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_TXCTL_PA3DB
value|0x40
end_define

begin_define
define|#
directive|define
name|BWN_TXCTL_PA2DB
value|0x20
end_define

begin_define
define|#
directive|define
name|BWN_TXCTL_TXMIX
value|0x10
end_define

begin_struct
struct|struct
name|bwn_txpwr_loctl
block|{
name|struct
name|bwn_rfatt_list
name|rfatt
decl_stmt|;
name|struct
name|bwn_bbatt_list
name|bbatt
decl_stmt|;
name|uint16_t
name|dc_lt
index|[
name|BWN_DC_LT_SIZE
index|]
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|bwn_lo_calib
argument_list|)
name|calib_list
expr_stmt|;
name|unsigned
name|long
name|pwr_vec_read_time
decl_stmt|;
name|unsigned
name|long
name|txctl_measured_time
decl_stmt|;
name|uint8_t
name|tx_bias
decl_stmt|;
name|uint8_t
name|tx_magn
decl_stmt|;
name|uint64_t
name|power_vector
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_OFDMTAB_DIR_UNKNOWN
value|0
end_define

begin_define
define|#
directive|define
name|BWN_OFDMTAB_DIR_READ
value|1
end_define

begin_define
define|#
directive|define
name|BWN_OFDMTAB_DIR_WRITE
value|2
end_define

begin_struct
struct|struct
name|bwn_phy_g
block|{
name|unsigned
name|pg_flags
decl_stmt|;
define|#
directive|define
name|BWN_PHY_G_FLAG_TSSITABLE_ALLOC
value|(1<< 0)
define|#
directive|define
name|BWN_PHY_G_FLAG_RADIOCTX_VALID
value|(1<< 1)
name|int
name|pg_aci_enable
decl_stmt|;
name|int
name|pg_aci_wlan_automatic
decl_stmt|;
name|int
name|pg_aci_hw_rssi
decl_stmt|;
name|int
name|pg_rf_on
decl_stmt|;
name|uint16_t
name|pg_radioctx_over
decl_stmt|;
name|uint16_t
name|pg_radioctx_overval
decl_stmt|;
name|uint16_t
name|pg_minlowsig
index|[
literal|2
index|]
decl_stmt|;
name|uint16_t
name|pg_minlowsigpos
index|[
literal|2
index|]
decl_stmt|;
name|int8_t
modifier|*
name|pg_tssi2dbm
decl_stmt|;
name|int
name|pg_idletssi
decl_stmt|;
name|int
name|pg_curtssi
decl_stmt|;
name|uint8_t
name|pg_avgtssi
decl_stmt|;
name|struct
name|bwn_bbatt
name|pg_bbatt
decl_stmt|;
name|struct
name|bwn_rfatt
name|pg_rfatt
decl_stmt|;
name|uint8_t
name|pg_txctl
decl_stmt|;
name|int
name|pg_bbatt_delta
decl_stmt|;
name|int
name|pg_rfatt_delta
decl_stmt|;
name|struct
name|bwn_txpwr_loctl
name|pg_loctl
decl_stmt|;
name|int16_t
name|pg_max_lb_gain
decl_stmt|;
name|int16_t
name|pg_trsw_rx_gain
decl_stmt|;
name|int16_t
name|pg_lna_lod_gain
decl_stmt|;
name|int16_t
name|pg_lna_gain
decl_stmt|;
name|int16_t
name|pg_pga_gain
decl_stmt|;
name|int
name|pg_immode
decl_stmt|;
define|#
directive|define
name|BWN_INTERFSTACK_SIZE
value|26
name|uint32_t
name|pg_interfstack
index|[
name|BWN_INTERFSTACK_SIZE
index|]
decl_stmt|;
name|int16_t
name|pg_nrssi
index|[
literal|2
index|]
decl_stmt|;
name|int32_t
name|pg_nrssi_slope
decl_stmt|;
name|int8_t
name|pg_nrssi_lt
index|[
literal|64
index|]
decl_stmt|;
name|uint16_t
name|pg_lofcal
decl_stmt|;
name|uint16_t
name|pg_initval
decl_stmt|;
name|uint16_t
name|pg_ofdmtab_addr
decl_stmt|;
name|unsigned
name|pg_ofdmtab_dir
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_IMMODE_NONE
value|0
end_define

begin_define
define|#
directive|define
name|BWN_IMMODE_NONWLAN
value|1
end_define

begin_define
define|#
directive|define
name|BWN_IMMODE_MANUAL
value|2
end_define

begin_define
define|#
directive|define
name|BWN_IMMODE_AUTO
value|3
end_define

begin_define
define|#
directive|define
name|BWN_TXPWR_RES_NEED_ADJUST
value|0
end_define

begin_define
define|#
directive|define
name|BWN_TXPWR_RES_DONE
value|1
end_define

begin_define
define|#
directive|define
name|BWN_PHYLP_TXPCTL_UNKNOWN
value|0
end_define

begin_define
define|#
directive|define
name|BWN_PHYLP_TXPCTL_OFF
value|1
end_define

begin_define
define|#
directive|define
name|BWN_PHYLP_TXPCTL_ON_SW
value|2
end_define

begin_define
define|#
directive|define
name|BWN_PHYLP_TXPCTL_ON_HW
value|3
end_define

begin_struct
struct|struct
name|bwn_phy_lp
block|{
name|uint8_t
name|plp_chan
decl_stmt|;
name|uint8_t
name|plp_chanfullcal
decl_stmt|;
name|int32_t
name|plp_antenna
decl_stmt|;
name|uint8_t
name|plp_txpctlmode
decl_stmt|;
name|uint8_t
name|plp_txisoband_h
decl_stmt|;
name|uint8_t
name|plp_txisoband_m
decl_stmt|;
name|uint8_t
name|plp_txisoband_l
decl_stmt|;
name|uint8_t
name|plp_rxpwroffset
decl_stmt|;
name|int8_t
name|plp_txpwridx
decl_stmt|;
name|uint16_t
name|plp_tssiidx
decl_stmt|;
name|uint16_t
name|plp_tssinpt
decl_stmt|;
name|uint8_t
name|plp_rssivf
decl_stmt|;
name|uint8_t
name|plp_rssivc
decl_stmt|;
name|uint8_t
name|plp_rssigs
decl_stmt|;
name|uint8_t
name|plp_rccap
decl_stmt|;
name|uint8_t
name|plp_bxarch
decl_stmt|;
name|uint8_t
name|plp_crsusr_off
decl_stmt|;
name|uint8_t
name|plp_crssys_off
decl_stmt|;
name|uint32_t
name|plp_div
decl_stmt|;
name|int32_t
name|plp_tonefreq
decl_stmt|;
name|uint16_t
name|plp_digfilt
index|[
literal|9
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* for LP */
end_comment

begin_struct
struct|struct
name|bwn_txgain
block|{
name|uint16_t
name|tg_gm
decl_stmt|;
name|uint16_t
name|tg_pga
decl_stmt|;
name|uint16_t
name|tg_pad
decl_stmt|;
name|uint16_t
name|tg_dac
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_rxcompco
block|{
name|uint8_t
name|rc_chan
decl_stmt|;
name|int8_t
name|rc_c1
decl_stmt|;
name|int8_t
name|rc_c0
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_phy_lp_iq_est
block|{
name|uint32_t
name|ie_iqprod
decl_stmt|;
name|uint32_t
name|ie_ipwr
decl_stmt|;
name|uint32_t
name|ie_qpwr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_txgain_entry
block|{
name|uint8_t
name|te_gm
decl_stmt|;
name|uint8_t
name|te_pga
decl_stmt|;
name|uint8_t
name|te_pad
decl_stmt|;
name|uint8_t
name|te_dac
decl_stmt|;
name|uint8_t
name|te_bbmult
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* only for LP PHY */
end_comment

begin_struct
struct|struct
name|bwn_stxtable
block|{
name|uint16_t
name|st_phyoffset
decl_stmt|;
name|uint16_t
name|st_physhift
decl_stmt|;
name|uint16_t
name|st_rfaddr
decl_stmt|;
name|uint16_t
name|st_rfshift
decl_stmt|;
name|uint16_t
name|st_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_b206x_chan
block|{
name|uint8_t
name|bc_chan
decl_stmt|;
name|uint16_t
name|bc_freq
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|bc_data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_b206x_rfinit_entry
block|{
name|uint16_t
name|br_offset
decl_stmt|;
name|uint16_t
name|br_valuea
decl_stmt|;
name|uint16_t
name|br_valueg
decl_stmt|;
name|uint8_t
name|br_flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_phy
block|{
name|uint8_t
name|type
decl_stmt|;
name|uint8_t
name|rev
decl_stmt|;
name|uint8_t
name|analog
decl_stmt|;
name|int
name|supports_2ghz
decl_stmt|;
name|int
name|supports_5ghz
decl_stmt|;
name|int
name|gmode
decl_stmt|;
name|struct
name|bwn_phy_g
name|phy_g
decl_stmt|;
name|struct
name|bwn_phy_lp
name|phy_lp
decl_stmt|;
name|uint16_t
name|rf_manuf
decl_stmt|;
name|uint16_t
name|rf_ver
decl_stmt|;
name|uint8_t
name|rf_rev
decl_stmt|;
name|int
name|rf_on
decl_stmt|;
name|int
name|txpower
decl_stmt|;
name|int
name|hwpctl
decl_stmt|;
name|unsigned
name|long
name|nexttime
decl_stmt|;
name|unsigned
name|int
name|chan
decl_stmt|;
name|int
name|txerrors
decl_stmt|;
name|int
function_decl|(
modifier|*
name|attach
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|detach
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|prepare_hw
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|init_pre
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|exit
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|uint16_t
function_decl|(
modifier|*
name|phy_read
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|phy_write
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|phy_maskset
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|uint16_t
function_decl|(
modifier|*
name|rf_read
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|rf_write
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|use_hwpctl
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|rf_onoff
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|switch_analog
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|switch_channel
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|get_default_chan
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_antenna
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_im
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|recalc_txpwr
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_txpwr
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|task_15s
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|task_60s
function_decl|)
parameter_list|(
name|struct
name|bwn_mac
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_chan_band
block|{
name|uint32_t
name|flags
decl_stmt|;
name|uint8_t
name|nchan
decl_stmt|;
define|#
directive|define
name|BWN_MAX_CHAN_PER_BAND
value|14
name|uint8_t
name|chan
index|[
name|BWN_MAX_CHAN_PER_BAND
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_NR_WMEPARAMS
value|16
end_define

begin_enum
enum|enum
block|{
name|BWN_WMEPARAM_TXOP
init|=
literal|0
block|,
name|BWN_WMEPARAM_CWMIN
block|,
name|BWN_WMEPARAM_CWMAX
block|,
name|BWN_WMEPARAM_CWCUR
block|,
name|BWN_WMEPARAM_AIFS
block|,
name|BWN_WMEPARAM_BSLOTS
block|,
name|BWN_WMEPARAM_REGGAP
block|,
name|BWN_WMEPARAM_STATUS
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|BWN_WME_PARAMS
parameter_list|(
name|queue
parameter_list|)
define|\
value|(BWN_SHARED_EDCFQ + (BWN_NR_WMEPARAMS * sizeof(uint16_t) * (queue)))
end_define

begin_define
define|#
directive|define
name|BWN_WME_BACKGROUND
value|BWN_WME_PARAMS(0)
end_define

begin_define
define|#
directive|define
name|BWN_WME_BESTEFFORT
value|BWN_WME_PARAMS(1)
end_define

begin_define
define|#
directive|define
name|BWN_WME_VIDEO
value|BWN_WME_PARAMS(2)
end_define

begin_define
define|#
directive|define
name|BWN_WME_VOICE
value|BWN_WME_PARAMS(3)
end_define

begin_comment
comment|/*  * Radio capture format.  */
end_comment

begin_define
define|#
directive|define
name|BWN_RX_RADIOTAP_PRESENT
value|(		\ 	(1<< IEEE80211_RADIOTAP_TSFT)		| \ 	(1<< IEEE80211_RADIOTAP_FLAGS)		| \ 	(1<< IEEE80211_RADIOTAP_RATE)		| \ 	(1<< IEEE80211_RADIOTAP_CHANNEL)	| \ 	(1<< IEEE80211_RADIOTAP_ANTENNA)	| \ 	(1<< IEEE80211_RADIOTAP_DBM_ANTSIGNAL)	| \ 	(1<< IEEE80211_RADIOTAP_DBM_ANTNOISE)	| \ 	0)
end_define

begin_struct
struct|struct
name|bwn_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint64_t
name|wr_tsf
decl_stmt|;
name|u_int8_t
name|wr_flags
decl_stmt|;
name|u_int8_t
name|wr_rate
decl_stmt|;
name|u_int16_t
name|wr_chan_freq
decl_stmt|;
name|u_int16_t
name|wr_chan_flags
decl_stmt|;
name|int8_t
name|wr_antsignal
decl_stmt|;
name|int8_t
name|wr_antnoise
decl_stmt|;
name|u_int8_t
name|wr_antenna
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_TX_RADIOTAP_PRESENT
value|(		\ 	(1<< IEEE80211_RADIOTAP_FLAGS)		| \ 	(1<< IEEE80211_RADIOTAP_RATE)		| \ 	(1<< IEEE80211_RADIOTAP_CHANNEL)	| \ 	(1<< IEEE80211_RADIOTAP_DBM_TX_POWER)	| \ 	(1<< IEEE80211_RADIOTAP_ANTENNA)	| \ 	0)
end_define

begin_struct
struct|struct
name|bwn_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|u_int8_t
name|wt_flags
decl_stmt|;
name|u_int8_t
name|wt_rate
decl_stmt|;
name|u_int16_t
name|wt_chan_freq
decl_stmt|;
name|u_int16_t
name|wt_chan_flags
decl_stmt|;
name|u_int8_t
name|wt_txpower
decl_stmt|;
name|u_int8_t
name|wt_antenna
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_stats
block|{
name|int32_t
name|rtsfail
decl_stmt|;
name|int32_t
name|rts
decl_stmt|;
name|int32_t
name|link_noise
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Noise Calculation (Link Quality) */
end_comment

begin_struct
struct|struct
name|bwn_noise
block|{
name|uint8_t
name|noi_running
decl_stmt|;
name|uint8_t
name|noi_nsamples
decl_stmt|;
name|int8_t
name|noi_samples
index|[
literal|8
index|]
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_DMA_30BIT
value|30
end_define

begin_define
define|#
directive|define
name|BWN_DMA_32BIT
value|32
end_define

begin_define
define|#
directive|define
name|BWN_DMA_64BIT
value|64
end_define

begin_struct
struct|struct
name|bwn_dmadesc_meta
block|{
name|bus_dmamap_t
name|mt_dmap
decl_stmt|;
name|bus_addr_t
name|mt_paddr
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mt_m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|mt_ni
decl_stmt|;
name|uint8_t
name|mt_txtype
decl_stmt|;
define|#
directive|define
name|BWN_DMADESC_METATYPE_HEADER
value|0
define|#
directive|define
name|BWN_DMADESC_METATYPE_BODY
value|1
name|uint8_t
name|mt_islast
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_DMAINTR_FATALMASK
define|\
value|((1<< 10) | (1<< 11) | (1<< 12) | (1<< 14) | (1<< 15))
end_define

begin_define
define|#
directive|define
name|BWN_DMAINTR_NONFATALMASK
value|(1<< 13)
end_define

begin_define
define|#
directive|define
name|BWN_DMAINTR_RX_DONE
value|(1<< 16)
end_define

begin_define
define|#
directive|define
name|BWN_DMA32_DCTL_BYTECNT
value|0x00001fff
end_define

begin_define
define|#
directive|define
name|BWN_DMA32_DCTL_ADDREXT_MASK
value|0x00030000
end_define

begin_define
define|#
directive|define
name|BWN_DMA32_DCTL_ADDREXT_SHIFT
value|16
end_define

begin_define
define|#
directive|define
name|BWN_DMA32_DCTL_DTABLEEND
value|0x10000000
end_define

begin_define
define|#
directive|define
name|BWN_DMA32_DCTL_IRQ
value|0x20000000
end_define

begin_define
define|#
directive|define
name|BWN_DMA32_DCTL_FRAMEEND
value|0x40000000
end_define

begin_define
define|#
directive|define
name|BWN_DMA32_DCTL_FRAMESTART
value|0x80000000
end_define

begin_struct
struct|struct
name|bwn_dmadesc32
block|{
name|uint32_t
name|control
decl_stmt|;
name|uint32_t
name|address
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_DMA64_DCTL0_DTABLEEND
value|0x10000000
end_define

begin_define
define|#
directive|define
name|BWN_DMA64_DCTL0_IRQ
value|0x20000000
end_define

begin_define
define|#
directive|define
name|BWN_DMA64_DCTL0_FRAMEEND
value|0x40000000
end_define

begin_define
define|#
directive|define
name|BWN_DMA64_DCTL0_FRAMESTART
value|0x80000000
end_define

begin_define
define|#
directive|define
name|BWN_DMA64_DCTL1_BYTECNT
value|0x00001fff
end_define

begin_define
define|#
directive|define
name|BWN_DMA64_DCTL1_ADDREXT_MASK
value|0x00030000
end_define

begin_define
define|#
directive|define
name|BWN_DMA64_DCTL1_ADDREXT_SHIFT
value|16
end_define

begin_struct
struct|struct
name|bwn_dmadesc64
block|{
name|uint32_t
name|control0
decl_stmt|;
name|uint32_t
name|control1
decl_stmt|;
name|uint32_t
name|address_low
decl_stmt|;
name|uint32_t
name|address_high
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|bwn_dmadesc_generic
block|{
union|union
block|{
name|struct
name|bwn_dmadesc32
name|dma32
decl_stmt|;
name|struct
name|bwn_dmadesc64
name|dma64
decl_stmt|;
block|}
name|__packed
name|dma
union|;
block|}
name|__packed
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|bwn_dma_ring
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|bwn_dma_ring
block|{
name|struct
name|bwn_mac
modifier|*
name|dr_mac
decl_stmt|;
specifier|const
name|struct
name|bwn_dma_ops
modifier|*
name|dr_ops
decl_stmt|;
name|struct
name|bwn_dmadesc_meta
modifier|*
name|dr_meta
decl_stmt|;
name|void
modifier|*
name|dr_txhdr_cache
decl_stmt|;
name|bus_dma_tag_t
name|dr_ring_dtag
decl_stmt|;
name|bus_dma_tag_t
name|dr_txring_dtag
decl_stmt|;
name|bus_dmamap_t
name|dr_spare_dmap
decl_stmt|;
comment|/* only for RX */
name|bus_dmamap_t
name|dr_ring_dmap
decl_stmt|;
name|bus_addr_t
name|dr_txring_paddr
decl_stmt|;
name|void
modifier|*
name|dr_ring_descbase
decl_stmt|;
name|bus_addr_t
name|dr_ring_dmabase
decl_stmt|;
name|int
name|dr_numslots
decl_stmt|;
name|int
name|dr_usedslot
decl_stmt|;
name|int
name|dr_curslot
decl_stmt|;
name|uint32_t
name|dr_frameoffset
decl_stmt|;
name|uint16_t
name|dr_rx_bufsize
decl_stmt|;
name|uint16_t
name|dr_base
decl_stmt|;
name|int
name|dr_index
decl_stmt|;
name|uint8_t
name|dr_tx
decl_stmt|;
name|uint8_t
name|dr_stop
decl_stmt|;
name|int
name|dr_type
decl_stmt|;
name|void
function_decl|(
modifier|*
name|getdesc
function_decl|)
parameter_list|(
name|struct
name|bwn_dma_ring
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|bwn_dmadesc_generic
modifier|*
modifier|*
parameter_list|,
name|struct
name|bwn_dmadesc_meta
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|setdesc
function_decl|)
parameter_list|(
name|struct
name|bwn_dma_ring
modifier|*
parameter_list|,
name|struct
name|bwn_dmadesc_generic
modifier|*
parameter_list|,
name|bus_addr_t
parameter_list|,
name|uint16_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|start_transfer
function_decl|)
parameter_list|(
name|struct
name|bwn_dma_ring
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|suspend
function_decl|)
parameter_list|(
name|struct
name|bwn_dma_ring
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|resume
function_decl|)
parameter_list|(
name|struct
name|bwn_dma_ring
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_curslot
function_decl|)
parameter_list|(
name|struct
name|bwn_dma_ring
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_curslot
function_decl|)
parameter_list|(
name|struct
name|bwn_dma_ring
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_dma
block|{
name|int
name|dmatype
decl_stmt|;
name|bus_dma_tag_t
name|parent_dtag
decl_stmt|;
name|bus_dma_tag_t
name|rxbuf_dtag
decl_stmt|;
name|bus_dma_tag_t
name|txbuf_dtag
decl_stmt|;
name|struct
name|bwn_dma_ring
modifier|*
name|wme
index|[
literal|5
index|]
decl_stmt|;
name|struct
name|bwn_dma_ring
modifier|*
name|mcast
decl_stmt|;
name|struct
name|bwn_dma_ring
modifier|*
name|rx
decl_stmt|;
name|uint64_t
name|lastseq
decl_stmt|;
comment|/* XXX FIXME */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_pio_rxqueue
block|{
name|struct
name|bwn_mac
modifier|*
name|prq_mac
decl_stmt|;
name|uint16_t
name|prq_base
decl_stmt|;
name|uint8_t
name|prq_rev
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|bwn_pio_txqueue
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|bwn_pio_txpkt
block|{
name|struct
name|bwn_pio_txqueue
modifier|*
name|tp_queue
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|tp_ni
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|tp_m
decl_stmt|;
name|uint8_t
name|tp_index
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|bwn_pio_txpkt
argument_list|)
name|tp_list
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_PIO_MAX_TXPACKETS
value|32
end_define

begin_struct
struct|struct
name|bwn_pio_txqueue
block|{
name|uint16_t
name|tq_base
decl_stmt|;
name|uint16_t
name|tq_size
decl_stmt|;
name|uint16_t
name|tq_used
decl_stmt|;
name|uint16_t
name|tq_free
decl_stmt|;
name|uint8_t
name|tq_stop
decl_stmt|;
name|uint8_t
name|tq_index
decl_stmt|;
name|struct
name|bwn_pio_txpkt
name|tq_pkts
index|[
name|BWN_PIO_MAX_TXPACKETS
index|]
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|bwn_pio_txpkt
argument_list|)
name|tq_pktlist
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_pio
block|{
name|struct
name|bwn_pio_txqueue
name|wme
index|[
literal|5
index|]
decl_stmt|;
name|struct
name|bwn_pio_txqueue
name|mcast
decl_stmt|;
name|struct
name|bwn_pio_rxqueue
name|rx
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_plcp4
block|{
union|union
block|{
name|uint32_t
name|data
decl_stmt|;
name|uint8_t
name|raw
index|[
literal|4
index|]
decl_stmt|;
block|}
name|__packed
name|o
union|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|bwn_plcp6
block|{
union|union
block|{
name|uint32_t
name|data
decl_stmt|;
name|uint8_t
name|raw
index|[
literal|6
index|]
decl_stmt|;
block|}
name|__packed
name|o
union|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|bwn_txhdr
block|{
name|uint32_t
name|macctl
decl_stmt|;
name|uint8_t
name|macfc
index|[
literal|2
index|]
decl_stmt|;
name|uint16_t
name|tx_festime
decl_stmt|;
name|uint16_t
name|phyctl
decl_stmt|;
name|uint16_t
name|phyctl_1
decl_stmt|;
name|uint16_t
name|phyctl_1fb
decl_stmt|;
name|uint16_t
name|phyctl_1rts
decl_stmt|;
name|uint16_t
name|phyctl_1rtsfb
decl_stmt|;
name|uint8_t
name|phyrate
decl_stmt|;
name|uint8_t
name|phyrate_rts
decl_stmt|;
name|uint8_t
name|eftypes
decl_stmt|;
comment|/* extra frame types */
name|uint8_t
name|chan
decl_stmt|;
name|uint8_t
name|iv
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|addr1
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint16_t
name|tx_festime_fb
decl_stmt|;
name|struct
name|bwn_plcp6
name|rts_plcp_fb
decl_stmt|;
name|uint16_t
name|rts_dur_fb
decl_stmt|;
name|struct
name|bwn_plcp6
name|plcp_fb
decl_stmt|;
name|uint16_t
name|dur_fb
decl_stmt|;
name|uint16_t
name|mimo_modelen
decl_stmt|;
name|uint16_t
name|mimo_ratelen_fb
decl_stmt|;
name|uint32_t
name|timeout
decl_stmt|;
union|union
block|{
comment|/* format<= r351 */
struct|struct
block|{
name|uint8_t
name|pad0
index|[
literal|2
index|]
decl_stmt|;
name|uint16_t
name|cookie
decl_stmt|;
name|uint16_t
name|tx_status
decl_stmt|;
name|struct
name|bwn_plcp6
name|rts_plcp
decl_stmt|;
name|uint8_t
name|rts_frame
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|pad1
index|[
literal|2
index|]
decl_stmt|;
empty_stmt|;
name|struct
name|bwn_plcp6
name|plcp
decl_stmt|;
block|}
name|__packed
name|old
struct|;
comment|/* format> r410 */
struct|struct
block|{
name|uint16_t
name|mimo_antenna
decl_stmt|;
name|uint16_t
name|preload_size
decl_stmt|;
name|uint8_t
name|pad0
index|[
literal|2
index|]
decl_stmt|;
name|uint16_t
name|cookie
decl_stmt|;
name|uint16_t
name|tx_status
decl_stmt|;
name|struct
name|bwn_plcp6
name|rts_plcp
decl_stmt|;
name|uint8_t
name|rts_frame
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|pad1
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|bwn_plcp6
name|plcp
decl_stmt|;
block|}
name|__packed
name|new
struct|;
block|}
name|__packed
name|body
union|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_FWTYPE_UCODE
value|'u'
end_define

begin_define
define|#
directive|define
name|BWN_FWTYPE_PCM
value|'p'
end_define

begin_define
define|#
directive|define
name|BWN_FWTYPE_IV
value|'i'
end_define

begin_struct
struct|struct
name|bwn_fwhdr
block|{
name|uint8_t
name|type
decl_stmt|;
name|uint8_t
name|ver
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_FWINITVALS_OFFSET_MASK
value|0x7fff
end_define

begin_define
define|#
directive|define
name|BWN_FWINITVALS_32BIT
value|0x8000
end_define

begin_struct
struct|struct
name|bwn_fwinitvals
block|{
name|uint16_t
name|offset_size
decl_stmt|;
union|union
block|{
name|uint16_t
name|d16
decl_stmt|;
name|uint32_t
name|d32
decl_stmt|;
block|}
name|__packed
name|data
union|;
block|}
name|__packed
struct|;
end_struct

begin_enum
enum|enum
name|bwn_fwtype
block|{
name|BWN_FWTYPE_DEFAULT
block|,
name|BWN_FWTYPE_OPENSOURCE
block|,
name|BWN_NR_FWTYPES
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|bwn_fwfile
block|{
specifier|const
name|char
modifier|*
name|filename
decl_stmt|;
specifier|const
name|struct
name|firmware
modifier|*
name|fw
decl_stmt|;
name|enum
name|bwn_fwtype
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_key
block|{
name|void
modifier|*
name|keyconf
decl_stmt|;
name|uint8_t
name|algorithm
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_fw
block|{
name|struct
name|bwn_fwfile
name|ucode
decl_stmt|;
name|struct
name|bwn_fwfile
name|pcm
decl_stmt|;
name|struct
name|bwn_fwfile
name|initvals
decl_stmt|;
name|struct
name|bwn_fwfile
name|initvals_band
decl_stmt|;
name|uint16_t
name|rev
decl_stmt|;
name|uint16_t
name|patch
decl_stmt|;
name|uint8_t
name|opensource
decl_stmt|;
name|uint8_t
name|no_pcmfile
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_lo_g_sm
block|{
name|int
name|curstate
decl_stmt|;
name|int
name|nmeasure
decl_stmt|;
name|int
name|multipler
decl_stmt|;
name|uint16_t
name|feedth
decl_stmt|;
name|struct
name|bwn_loctl
name|loctl
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_lo_g_value
block|{
name|uint8_t
name|old_channel
decl_stmt|;
name|uint16_t
name|phy_lomask
decl_stmt|;
name|uint16_t
name|phy_extg
decl_stmt|;
name|uint16_t
name|phy_dacctl_hwpctl
decl_stmt|;
name|uint16_t
name|phy_dacctl
decl_stmt|;
name|uint16_t
name|phy_hpwr_tssictl
decl_stmt|;
name|uint16_t
name|phy_analogover
decl_stmt|;
name|uint16_t
name|phy_analogoverval
decl_stmt|;
name|uint16_t
name|phy_rfover
decl_stmt|;
name|uint16_t
name|phy_rfoverval
decl_stmt|;
name|uint16_t
name|phy_classctl
decl_stmt|;
name|uint16_t
name|phy_crs0
decl_stmt|;
name|uint16_t
name|phy_pgactl
decl_stmt|;
name|uint16_t
name|phy_syncctl
decl_stmt|;
name|uint16_t
name|phy_cck0
decl_stmt|;
name|uint16_t
name|phy_cck1
decl_stmt|;
name|uint16_t
name|phy_cck2
decl_stmt|;
name|uint16_t
name|phy_cck3
decl_stmt|;
name|uint16_t
name|phy_cck4
decl_stmt|;
name|uint16_t
name|reg0
decl_stmt|;
name|uint16_t
name|reg1
decl_stmt|;
name|uint16_t
name|rf0
decl_stmt|;
name|uint16_t
name|rf1
decl_stmt|;
name|uint16_t
name|rf2
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_LED_MAX
value|4
end_define

begin_define
define|#
directive|define
name|BWN_LED_EVENT_NONE
value|-1
end_define

begin_define
define|#
directive|define
name|BWN_LED_EVENT_POLL
value|0
end_define

begin_define
define|#
directive|define
name|BWN_LED_EVENT_TX
value|1
end_define

begin_define
define|#
directive|define
name|BWN_LED_EVENT_RX
value|2
end_define

begin_define
define|#
directive|define
name|BWN_LED_SLOWDOWN
parameter_list|(
name|dur
parameter_list|)
value|(dur) = (((dur) * 3) / 2)
end_define

begin_struct
struct|struct
name|bwn_led
block|{
name|uint8_t
name|led_flags
decl_stmt|;
comment|/* BWN_LED_F_ */
name|uint8_t
name|led_act
decl_stmt|;
comment|/* BWN_LED_ACT_ */
name|uint8_t
name|led_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_LED_F_ACTLOW
value|0x1
end_define

begin_define
define|#
directive|define
name|BWN_LED_F_BLINK
value|0x2
end_define

begin_define
define|#
directive|define
name|BWN_LED_F_POLLABLE
value|0x4
end_define

begin_define
define|#
directive|define
name|BWN_LED_F_SLOW
value|0x8
end_define

begin_struct
struct|struct
name|bwn_mac
block|{
name|struct
name|bwn_softc
modifier|*
name|mac_sc
decl_stmt|;
name|unsigned
name|mac_status
decl_stmt|;
define|#
directive|define
name|BWN_MAC_STATUS_UNINIT
value|0
define|#
directive|define
name|BWN_MAC_STATUS_INITED
value|1
define|#
directive|define
name|BWN_MAC_STATUS_STARTED
value|2
name|unsigned
name|mac_flags
decl_stmt|;
comment|/* use "Bad Frames Preemption" */
define|#
directive|define
name|BWN_MAC_FLAG_BADFRAME_PREEMP
value|(1<< 0)
define|#
directive|define
name|BWN_MAC_FLAG_DFQVALID
value|(1<< 1)
define|#
directive|define
name|BWN_MAC_FLAG_RADIO_ON
value|(1<< 2)
define|#
directive|define
name|BWN_MAC_FLAG_DMA
value|(1<< 3)
define|#
directive|define
name|BWN_MAC_FLAG_WME
value|(1<< 4)
define|#
directive|define
name|BWN_MAC_FLAG_HWCRYPTO
value|(1<< 5)
name|struct
name|resource_spec
modifier|*
name|mac_intr_spec
decl_stmt|;
define|#
directive|define
name|BWN_MSI_MESSAGES
value|1
name|struct
name|resource
modifier|*
name|mac_res_irq
index|[
name|BWN_MSI_MESSAGES
index|]
decl_stmt|;
name|void
modifier|*
name|mac_intrhand
index|[
name|BWN_MSI_MESSAGES
index|]
decl_stmt|;
name|int
name|mac_msi
decl_stmt|;
name|struct
name|bwn_noise
name|mac_noise
decl_stmt|;
name|struct
name|bwn_phy
name|mac_phy
decl_stmt|;
name|struct
name|bwn_stats
name|mac_stats
decl_stmt|;
name|uint32_t
name|mac_reason_intr
decl_stmt|;
name|uint32_t
name|mac_reason
index|[
literal|6
index|]
decl_stmt|;
name|uint32_t
name|mac_intr_mask
decl_stmt|;
name|int
name|mac_suspended
decl_stmt|;
name|struct
name|bwn_fw
name|mac_fw
decl_stmt|;
union|union
block|{
name|struct
name|bwn_dma
name|dma
decl_stmt|;
name|struct
name|bwn_pio
name|pio
decl_stmt|;
block|}
name|mac_method
union|;
name|uint16_t
name|mac_ktp
decl_stmt|;
comment|/* Key table pointer */
name|uint8_t
name|mac_max_nr_keys
decl_stmt|;
name|struct
name|bwn_key
name|mac_key
index|[
literal|58
index|]
decl_stmt|;
name|unsigned
name|int
name|mac_task_state
decl_stmt|;
name|struct
name|task
name|mac_intrtask
decl_stmt|;
name|struct
name|task
name|mac_hwreset
decl_stmt|;
name|struct
name|task
name|mac_txpower
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|bwn_mac
argument_list|)
name|mac_list
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bwn_node
block|{
name|struct
name|ieee80211_node
name|bn_node
decl_stmt|;
comment|/* must be the first */
name|struct
name|ieee80211_amrr_node
name|bn_amn
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_NODE
parameter_list|(
name|ni
parameter_list|)
value|((struct bwn_node *)(ni))
end_define

begin_comment
comment|/*  * Driver-specific vap state.  */
end_comment

begin_struct
struct|struct
name|bwn_vap
block|{
name|struct
name|ieee80211vap
name|bv_vap
decl_stmt|;
comment|/* base class */
name|struct
name|ieee80211_amrr
name|bv_amrr
decl_stmt|;
name|int
function_decl|(
modifier|*
name|bv_newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct bwn_vap *)(vap))
end_define

begin_define
define|#
directive|define
name|BWN_VAP_CONST
parameter_list|(
name|vap
parameter_list|)
value|((const struct mwl_vap *)(vap))
end_define

begin_struct
struct|struct
name|bwn_softc
block|{
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|unsigned
name|sc_flags
decl_stmt|;
define|#
directive|define
name|BWN_FLAG_ATTACHED
value|(1<< 0)
define|#
directive|define
name|BWN_FLAG_INVALID
value|(1<< 1)
define|#
directive|define
name|BWN_FLAG_NEED_BEACON_TP
value|(1<< 2)
name|unsigned
name|sc_debug
decl_stmt|;
name|struct
name|bwn_mac
modifier|*
name|sc_curmac
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|bwn_mac
argument_list|)
name|sc_maclist
expr_stmt|;
name|uint8_t
name|sc_macaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|sc_bssid
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|unsigned
name|int
name|sc_filters
decl_stmt|;
name|uint8_t
name|sc_beacons
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|sc_rf_enabled
decl_stmt|;
name|struct
name|wmeParams
name|sc_wmeParams
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|callout
name|sc_rfswitch_ch
decl_stmt|;
comment|/* for laptop */
name|struct
name|callout
name|sc_task_ch
decl_stmt|;
name|struct
name|callout
name|sc_watchdog_ch
decl_stmt|;
name|int
name|sc_watchdog_timer
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|sc_tq
decl_stmt|;
comment|/* private task queue */
name|int
function_decl|(
modifier|*
name|sc_newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211com
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_node_cleanup
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|)
function_decl|;
name|int
name|sc_rx_rate
decl_stmt|;
name|int
name|sc_tx_rate
decl_stmt|;
name|int
name|sc_led_blinking
decl_stmt|;
name|int
name|sc_led_ticks
decl_stmt|;
name|struct
name|bwn_led
modifier|*
name|sc_blink_led
decl_stmt|;
name|struct
name|callout
name|sc_led_blink_ch
decl_stmt|;
name|int
name|sc_led_blink_offdur
decl_stmt|;
name|struct
name|bwn_led
name|sc_leds
index|[
name|BWN_LED_MAX
index|]
decl_stmt|;
name|int
name|sc_led_idle
decl_stmt|;
name|int
name|sc_led_blink
decl_stmt|;
name|struct
name|bwn_tx_radiotap_header
name|sc_tx_th
decl_stmt|;
name|struct
name|bwn_rx_radiotap_header
name|sc_rx_th
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BWN_LOCK_INIT
parameter_list|(
name|sc
parameter_list|)
define|\
value|mtx_init(&(sc)->sc_mtx, device_get_nameunit((sc)->sc_dev), \ 	    MTX_NETWORK_LOCK, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|BWN_LOCK_DESTROY
parameter_list|(
name|sc
parameter_list|)
value|mtx_destroy(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|BWN_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|BWN_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|BWN_ASSERT_LOCKED
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, MA_OWNED)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_IF_BWNVAR_H */
end_comment

end_unit

