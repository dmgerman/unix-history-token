begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2016 Adrian Chadd<adrian@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any  *    redistribution must be conditioned upon including a substantially  *    similar Disclaimer requirement for further binary redistribution.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY  * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL  * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,  * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER  * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  * THE POSSIBILITY OF SUCH DAMAGES.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IF_BWN_CORDIC_H__
end_ifndef

begin_define
define|#
directive|define
name|__IF_BWN_CORDIC_H__
end_define

begin_comment
comment|/*  * These functions are used by the PHY code.  */
end_comment

begin_comment
comment|/* Complex number using 2 32-bit signed integers */
end_comment

begin_struct
struct|struct
name|bwn_c32
block|{
name|int32_t
name|i
decl_stmt|;
name|int32_t
name|q
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|CORDIC_CONVERT
parameter_list|(
name|value
parameter_list|)
value|(((value)>= 0) ?	\ 	    ((((value)>> 15) + 1)>> 1) :		\ 	    -((((-(value))>> 15) + 1)>> 1))
end_define

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|bwn_arctg
index|[]
init|=
block|{
literal|2949120
block|,
literal|1740967
block|,
literal|919879
block|,
literal|466945
block|,
literal|234379
block|,
literal|117304
block|,
literal|58666
block|,
literal|29335
block|,
literal|14668
block|,
literal|7334
block|,
literal|3667
block|,
literal|1833
block|,
literal|917
block|,
literal|458
block|,
literal|229
block|,
literal|115
block|,
literal|57
block|,
literal|29
block|, }
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* http://bcm-v4.sipsolutions.net/802.11/PHY/Cordic */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|bwn_c32
name|bwn_cordic
parameter_list|(
name|int
name|theta
parameter_list|)
block|{
name|uint8_t
name|i
decl_stmt|;
name|int32_t
name|tmp
decl_stmt|;
name|int8_t
name|signx
init|=
literal|1
decl_stmt|;
name|uint32_t
name|angle
init|=
literal|0
decl_stmt|;
name|struct
name|bwn_c32
name|ret
init|=
block|{
operator|.
name|i
operator|=
literal|39797
block|,
operator|.
name|q
operator|=
literal|0
block|, }
decl_stmt|;
while|while
condition|(
name|theta
operator|>
operator|(
literal|180
operator|<<
literal|16
operator|)
condition|)
name|theta
operator|-=
operator|(
literal|360
operator|<<
literal|16
operator|)
expr_stmt|;
while|while
condition|(
name|theta
operator|<
operator|-
operator|(
literal|180
operator|<<
literal|16
operator|)
condition|)
name|theta
operator|+=
operator|(
literal|360
operator|<<
literal|16
operator|)
expr_stmt|;
if|if
condition|(
name|theta
operator|>
operator|(
literal|90
operator|<<
literal|16
operator|)
condition|)
block|{
name|theta
operator|-=
operator|(
literal|180
operator|<<
literal|16
operator|)
expr_stmt|;
name|signx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|theta
operator|<
operator|-
operator|(
literal|90
operator|<<
literal|16
operator|)
condition|)
block|{
name|theta
operator|+=
operator|(
literal|180
operator|<<
literal|16
operator|)
expr_stmt|;
name|signx
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
literal|17
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|theta
operator|>
name|angle
condition|)
block|{
name|tmp
operator|=
name|ret
operator|.
name|i
operator|-
operator|(
name|ret
operator|.
name|q
operator|>>
name|i
operator|)
expr_stmt|;
name|ret
operator|.
name|q
operator|+=
name|ret
operator|.
name|i
operator|>>
name|i
expr_stmt|;
name|ret
operator|.
name|i
operator|=
name|tmp
expr_stmt|;
name|angle
operator|+=
name|bwn_arctg
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|=
name|ret
operator|.
name|i
operator|+
operator|(
name|ret
operator|.
name|q
operator|>>
name|i
operator|)
expr_stmt|;
name|ret
operator|.
name|q
operator|-=
name|ret
operator|.
name|i
operator|>>
name|i
expr_stmt|;
name|ret
operator|.
name|i
operator|=
name|tmp
expr_stmt|;
name|angle
operator|-=
name|bwn_arctg
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|i
operator|*=
name|signx
expr_stmt|;
name|ret
operator|.
name|q
operator|*=
name|signx
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __IF_BWN_CORDIC_H__ */
end_comment

end_unit

