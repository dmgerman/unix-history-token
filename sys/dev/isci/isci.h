begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus.h>
end_include

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<sys/rman.h>
end_include

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/resource.h>
end_include

begin_include
include|#
directive|include
file|<cam/cam.h>
end_include

begin_include
include|#
directive|include
file|<cam/cam_ccb.h>
end_include

begin_include
include|#
directive|include
file|<cam/cam_sim.h>
end_include

begin_include
include|#
directive|include
file|<cam/cam_xpt_sim.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/environment.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/intel_pci.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/sci_types.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/sci_object.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/sci_status.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/sci_pool.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/sci_fast_list.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/sci_controller_constants.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/scic_controller.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/scic_config_parameters.h>
end_include

begin_define
define|#
directive|define
name|DEVICE2SOFTC
parameter_list|(
name|dev
parameter_list|)
value|((struct isci_softc *) device_get_softc(dev))
end_define

begin_define
define|#
directive|define
name|DEVICE_TIMEOUT
value|1000
end_define

begin_define
define|#
directive|define
name|SCI_MAX_TIMERS
value|32
end_define

begin_define
define|#
directive|define
name|ISCI_NUM_PCI_BARS
value|2
end_define

begin_define
define|#
directive|define
name|ISCI_MAX_LUN
value|8
end_define

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_ISCI
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|ISCI_TIMER
block|{
name|struct
name|callout
name|callout
decl_stmt|;
name|SCI_TIMER_CALLBACK_T
name|callback
decl_stmt|;
name|void
modifier|*
name|cookie
decl_stmt|;
name|BOOL
name|is_started
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ISCI_REMOTE_DEVICE
block|{
name|uint32_t
name|index
decl_stmt|;
name|struct
name|ISCI_DOMAIN
modifier|*
name|domain
decl_stmt|;
name|SCI_REMOTE_DEVICE_HANDLE_T
name|sci_object
decl_stmt|;
name|BOOL
name|is_resetting
decl_stmt|;
name|uint32_t
name|frozen_lun_mask
decl_stmt|;
name|SCI_FAST_LIST_ELEMENT_T
name|pending_device_reset_element
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|ccb_hdr
argument_list|)
name|queued_ccbs
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ISCI_DOMAIN
block|{
name|struct
name|ISCI_CONTROLLER
modifier|*
name|controller
decl_stmt|;
name|SCI_DOMAIN_HANDLE_T
name|sci_object
decl_stmt|;
name|uint8_t
name|index
decl_stmt|;
name|struct
name|ISCI_REMOTE_DEVICE
modifier|*
name|da_remote_device
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ISCI_MEMORY
block|{
name|bus_addr_t
name|physical_address
decl_stmt|;
name|bus_dma_tag_t
name|dma_tag
decl_stmt|;
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|POINTER_UINT
name|virtual_address
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|int
name|error
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ISCI_INTERRUPT_INFO
block|{
name|SCIC_CONTROLLER_HANDLER_METHODS_T
modifier|*
name|handlers
decl_stmt|;
name|void
modifier|*
name|interrupt_target_handle
decl_stmt|;
name|struct
name|resource
modifier|*
name|res
decl_stmt|;
name|int
name|rid
decl_stmt|;
name|void
modifier|*
name|tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ISCI_CONTROLLER
block|{
name|struct
name|isci_softc
modifier|*
name|isci
decl_stmt|;
name|uint8_t
name|index
decl_stmt|;
name|SCI_CONTROLLER_HANDLE_T
name|scif_controller_handle
decl_stmt|;
name|struct
name|ISCI_DOMAIN
name|domain
index|[
name|SCI_MAX_DOMAINS
index|]
decl_stmt|;
name|BOOL
name|is_started
decl_stmt|;
name|BOOL
name|has_been_scanned
decl_stmt|;
name|uint32_t
name|initial_discovery_mask
decl_stmt|;
name|BOOL
name|is_frozen
decl_stmt|;
name|uint8_t
modifier|*
name|remote_device_memory
decl_stmt|;
name|struct
name|ISCI_MEMORY
name|cached_controller_memory
decl_stmt|;
name|struct
name|ISCI_MEMORY
name|uncached_controller_memory
decl_stmt|;
name|struct
name|ISCI_MEMORY
name|request_memory
decl_stmt|;
name|bus_dma_tag_t
name|buffer_dma_tag
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
name|struct
name|cam_sim
modifier|*
name|sim
decl_stmt|;
name|struct
name|cam_path
modifier|*
name|path
decl_stmt|;
name|struct
name|ISCI_REMOTE_DEVICE
modifier|*
name|remote_device
index|[
name|SCI_MAX_REMOTE_DEVICES
index|]
decl_stmt|;
name|void
modifier|*
name|timer_memory
decl_stmt|;
name|SCIC_OEM_PARAMETERS_T
name|oem_parameters
decl_stmt|;
name|uint32_t
name|oem_parameters_version
decl_stmt|;
name|uint32_t
name|queue_depth
decl_stmt|;
name|uint32_t
name|sim_queue_depth
decl_stmt|;
name|SCI_FAST_LIST_T
name|pending_device_reset_list
decl_stmt|;
name|SCI_MEMORY_DESCRIPTOR_LIST_HANDLE_T
name|mdl
decl_stmt|;
name|SCI_POOL_CREATE
argument_list|(
name|remote_device_pool
argument_list|,
expr|struct
name|ISCI_REMOTE_DEVICE
operator|*
argument_list|,
name|SCI_MAX_REMOTE_DEVICES
argument_list|)
expr_stmt|;
name|SCI_POOL_CREATE
argument_list|(
name|request_pool
argument_list|,
expr|struct
name|ISCI_REQUEST
operator|*
argument_list|,
name|SCI_MAX_IO_REQUESTS
argument_list|)
expr_stmt|;
name|SCI_POOL_CREATE
argument_list|(
name|timer_pool
argument_list|,
expr|struct
name|ISCI_TIMER
operator|*
argument_list|,
name|SCI_MAX_TIMERS
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ISCI_REQUEST
block|{
name|SCI_CONTROLLER_HANDLE_T
name|controller_handle
decl_stmt|;
name|SCI_REMOTE_DEVICE_HANDLE_T
name|remote_device_handle
decl_stmt|;
name|bus_dma_tag_t
name|dma_tag
decl_stmt|;
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|SCI_PHYSICAL_ADDRESS
name|physical_address
decl_stmt|;
name|struct
name|callout
name|timer
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ISCI_IO_REQUEST
block|{
name|struct
name|ISCI_REQUEST
name|parent
decl_stmt|;
name|SCI_IO_REQUEST_HANDLE_T
name|sci_object
decl_stmt|;
name|union
name|ccb
modifier|*
name|ccb
decl_stmt|;
name|uint32_t
name|num_segments
decl_stmt|;
name|uint32_t
name|current_sge_index
decl_stmt|;
name|bus_dma_segment_t
modifier|*
name|sge
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ISCI_TASK_REQUEST
block|{
name|struct
name|ISCI_REQUEST
name|parent
decl_stmt|;
name|struct
name|scsi_sense_data
name|sense_data
decl_stmt|;
name|SCI_TASK_REQUEST_HANDLE_T
name|sci_object
decl_stmt|;
name|union
name|ccb
modifier|*
name|ccb
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ISCI_PCI_BAR
block|{
name|bus_space_tag_t
name|bus_tag
decl_stmt|;
name|bus_space_handle_t
name|bus_handle
decl_stmt|;
name|int
name|resource_id
decl_stmt|;
name|struct
name|resource
modifier|*
name|resource
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * One of these per allocated PCI device.  */
end_comment

begin_struct
struct|struct
name|isci_softc
block|{
name|struct
name|ISCI_PCI_BAR
name|pci_bar
index|[
name|ISCI_NUM_PCI_BARS
index|]
decl_stmt|;
name|struct
name|ISCI_CONTROLLER
name|controllers
index|[
name|SCI_MAX_CONTROLLERS
index|]
decl_stmt|;
name|SCI_LIBRARY_HANDLE_T
name|sci_library_handle
decl_stmt|;
name|void
modifier|*
name|sci_library_memory
decl_stmt|;
name|SCIC_CONTROLLER_HANDLER_METHODS_T
name|handlers
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|ISCI_INTERRUPT_INFO
name|interrupt_info
index|[
literal|4
index|]
decl_stmt|;
name|uint32_t
name|controller_count
decl_stmt|;
name|uint32_t
name|num_interrupts
decl_stmt|;
name|uint32_t
name|coalesce_number
decl_stmt|;
name|uint32_t
name|coalesce_timeout
decl_stmt|;
name|device_t
name|device
decl_stmt|;
name|SCI_PCI_COMMON_HEADER_T
name|pci_common_header
decl_stmt|;
name|BOOL
name|oem_parameters_found
decl_stmt|;
name|struct
name|intr_config_hook
name|config_hook
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|isci_allocate_resources
parameter_list|(
name|device_t
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isci_allocate_dma_buffer
parameter_list|(
name|device_t
name|device
parameter_list|,
name|struct
name|ISCI_MEMORY
modifier|*
name|memory
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_remote_device_reset
parameter_list|(
name|struct
name|ISCI_REMOTE_DEVICE
modifier|*
name|remote_device
parameter_list|,
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  *  Returns the negotiated link rate (in KB/s) for the associated  *	remote device.  Used to fill out bitrate field for GET_TRANS_SETTINGS.  *	Will match the negotiated link rate for the lowest numbered local phy  *	in the port/domain containing this remote device.  */
end_comment

begin_function_decl
name|uint32_t
name|isci_remote_device_get_bitrate
parameter_list|(
name|struct
name|ISCI_REMOTE_DEVICE
modifier|*
name|remote_device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_remote_device_freeze_lun_queue
parameter_list|(
name|struct
name|ISCI_REMOTE_DEVICE
modifier|*
name|remote_device
parameter_list|,
name|lun_id_t
name|lun
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_remote_device_release_lun_queue
parameter_list|(
name|struct
name|ISCI_REMOTE_DEVICE
modifier|*
name|remote_device
parameter_list|,
name|lun_id_t
name|lun
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_remote_device_release_device_queue
parameter_list|(
name|struct
name|ISCI_REMOTE_DEVICE
modifier|*
name|remote_device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_request_construct
parameter_list|(
name|struct
name|ISCI_REQUEST
modifier|*
name|request
parameter_list|,
name|SCI_CONTROLLER_HANDLE_T
name|scif_controller_handle
parameter_list|,
name|bus_dma_tag_t
name|io_buffer_dma_tag
parameter_list|,
name|bus_addr_t
name|physical_address
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|isci_io_request_get_max_io_size
parameter_list|()
define|\
value|((SCI_MAX_SCATTER_GATHER_ELEMENTS - 1) * PAGE_SIZE)
end_define

begin_define
define|#
directive|define
name|isci_task_request_get_object_size
parameter_list|()
define|\
value|(sizeof(struct ISCI_TASK_REQUEST) + scif_task_request_get_object_size())
end_define

begin_define
define|#
directive|define
name|isci_io_request_get_object_size
parameter_list|()
define|\
value|(sizeof(struct ISCI_IO_REQUEST) + scif_io_request_get_object_size())
end_define

begin_define
define|#
directive|define
name|isci_request_get_object_size
parameter_list|()
define|\
value|max( \ 	    isci_task_request_get_object_size(), \ 	    isci_io_request_get_object_size() \ 	)
end_define

begin_function_decl
name|void
name|isci_io_request_execute_scsi_io
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|,
name|struct
name|ISCI_CONTROLLER
modifier|*
name|controller
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|900026
end_if

begin_function_decl
name|void
name|isci_io_request_execute_smp_io
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|,
name|struct
name|ISCI_CONTROLLER
modifier|*
name|controller
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|isci_io_request_timeout
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_get_oem_parameters
parameter_list|(
name|struct
name|isci_softc
modifier|*
name|isci
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_io_request_complete
parameter_list|(
name|SCI_CONTROLLER_HANDLE_T
name|scif_controller
parameter_list|,
name|SCI_REMOTE_DEVICE_HANDLE_T
name|remote_device
parameter_list|,
name|struct
name|ISCI_IO_REQUEST
modifier|*
name|isci_request
parameter_list|,
name|SCI_IO_STATUS
name|completion_status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_task_request_complete
parameter_list|(
name|SCI_CONTROLLER_HANDLE_T
name|scif_controller
parameter_list|,
name|SCI_REMOTE_DEVICE_HANDLE_T
name|remote_device
parameter_list|,
name|SCI_TASK_REQUEST_HANDLE_T
name|io_request
parameter_list|,
name|SCI_TASK_STATUS
name|completion_status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_sysctl_initialize
parameter_list|(
name|struct
name|isci_softc
modifier|*
name|isci
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_controller_construct
parameter_list|(
name|struct
name|ISCI_CONTROLLER
modifier|*
name|controller
parameter_list|,
name|struct
name|isci_softc
modifier|*
name|isci
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|SCI_STATUS
name|isci_controller_initialize
parameter_list|(
name|struct
name|ISCI_CONTROLLER
modifier|*
name|controller
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isci_controller_allocate_memory
parameter_list|(
name|struct
name|ISCI_CONTROLLER
modifier|*
name|controller
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_controller_domain_discovery_complete
parameter_list|(
name|struct
name|ISCI_CONTROLLER
modifier|*
name|isci_controller
parameter_list|,
name|struct
name|ISCI_DOMAIN
modifier|*
name|isci_domain
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isci_controller_attach_to_cam
parameter_list|(
name|struct
name|ISCI_CONTROLLER
modifier|*
name|controller
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_controller_start
parameter_list|(
name|void
modifier|*
name|controller
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_domain_construct
parameter_list|(
name|struct
name|ISCI_DOMAIN
modifier|*
name|domain
parameter_list|,
name|uint32_t
name|domain_index
parameter_list|,
name|struct
name|ISCI_CONTROLLER
modifier|*
name|controller
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_interrupt_setup
parameter_list|(
name|struct
name|isci_softc
modifier|*
name|isci
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_interrupt_poll_handler
parameter_list|(
name|struct
name|ISCI_CONTROLLER
modifier|*
name|controller
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isci_log_message
parameter_list|(
name|uint32_t
name|verbosity
parameter_list|,
name|char
modifier|*
name|log_message_prefix
parameter_list|,
name|char
modifier|*
name|log_message
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|uint32_t
name|g_isci_debug_level
decl_stmt|;
end_decl_stmt

end_unit

