begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIF_SAS_SMP_REMOTE_DEVICE_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCIF_SAS_SMP_REMOTE_DEVICE_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<dev/isci/scil/sci_fast_list.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_smp_phy.h>
comment|/**  * @file  *  * @brief This file contains the protected interface structures, constants,  *        and methods for the SCIF_SAS_SMP_REMOTE_DEVICE object.  */
struct_decl|struct
name|SCIF_SAS_CONTROLLER
struct_decl|;
struct_decl|struct
name|SCIF_SAS_REMOTE_DEVICE
struct_decl|;
struct_decl|struct
name|SCIF_SAS_INTERNAL_IO_REQUEST
struct_decl|;
struct_decl|struct
name|SCIF_SAS_REQUEST
struct_decl|;
struct_decl|struct
name|SCIF_SAS_SMP_PHY
struct_decl|;
define|#
directive|define
name|SMP_REQUEST_RETRY_WAIT_DURATION
value|20
define|#
directive|define
name|SMP_SPINUP_HOLD_RELEASE_WAIT_DURATION
value|100
comment|/**  * @name SCIF_SAS_SMP_REMOTE_DEVICE_ACTIVITY_CODES  *  * These constants depict the various SMP remote device activities.  */
comment|/*@{*/
define|#
directive|define
name|NOT_IN_SMP_ACTIVITY
value|0xff
define|#
directive|define
name|SCIF_SAS_SMP_REMOTE_DEVICE_ACTIVITY_NONE
value|0x0
define|#
directive|define
name|SCIF_SAS_SMP_REMOTE_DEVICE_ACTIVITY_DISCOVER
value|0x1
define|#
directive|define
name|SCIF_SAS_SMP_REMOTE_DEVICE_ACTIVITY_TARGET_RESET
value|0x2
define|#
directive|define
name|SCIF_SAS_SMP_REMOTE_DEVICE_ACTIVITY_SATA_SPINUP_HOLD_RELEASE
value|0x3
define|#
directive|define
name|SCIF_SAS_SMP_REMOTE_DEVICE_ACTIVITY_CONFIG_ROUTE_TABLE
value|0x4
define|#
directive|define
name|SCIF_SAS_SMP_REMOTE_DEVICE_ACTIVITY_CLEAN_ROUTE_TABLE
value|0x5
define|#
directive|define
name|SCIF_SAS_SMP_REMOTE_DEVICE_ACTIVITY_CLEAR_AFFILIATION
value|0x6
comment|/*@}*/
comment|/**  * @name SCIF_SAS_CONFIG_ROUTE_TABLE_OPTION_CODES  *  * These constants depict the various configure route table options.  */
comment|/*@{*/
define|#
directive|define
name|SCIF_SAS_CONFIG_ROUTE_TABLE_LOWEST_PHY_ONLY
value|0
define|#
directive|define
name|SCIF_SAS_CONFIG_ROUTE_TABLE_MIDDLE_PHY_ONLY
value|1
define|#
directive|define
name|SCIF_SAS_CONFIG_ROUTE_TABLE_HIGHEST_PHY_ONLY
value|2
define|#
directive|define
name|SCIF_SAS_CONFIG_ROUTE_TABLE_ALL_PHYS
value|3
comment|/*@}*/
comment|/**  * @struct SCIF_SAS_SMP_REMOTE_DEVICE  *  * @brief The SCIF_SAS_SMP_REMOTE_DEVICE stores data for smp remote devices  *        (expanders) discovering attached targets.  *  */
typedef|typedef
struct|struct
name|SCIF_SAS_SMP_REMOTE_DEVICE
block|{
comment|/**     * This field stores the current SMP request function in the discovering     * sequence.     */
name|U32
name|current_smp_request
decl_stmt|;
comment|/**     * This field indicates a smp device is either in the middle of normal discover     * process or in the middle of resetting a expander attahced remote device.     */
name|U8
name|current_activity
decl_stmt|;
comment|/**     * This field stores the current expander phy index for sending out SMP     * DISCOVER request.     */
name|U8
name|current_activity_phy_index
decl_stmt|;
comment|/**     * This field stores the current route index to config route table for     * a phy.     */
name|U16
name|curr_config_route_index
decl_stmt|;
comment|/**     * This field indicates whether a route table of an expander has been cleaned     * since a DISCOVER process starts.     */
name|BOOL
name|is_route_table_cleaned
decl_stmt|;
comment|/**     * This field stores the smp phy whose route entries are edited by sending     * CONFIG ROUTE INFO commands.     */
name|struct
name|SCIF_SAS_SMP_PHY
modifier|*
name|config_route_smp_phy_anchor
decl_stmt|;
comment|/*     * This field stores the current smp phy on a destination device's smp phy list whose     * attached device's sas address is to be edited into this smp device's route table.     * When one config route info response is processed, we can find the next smp phy to edit     * using this field's value.     */
name|struct
name|SCIF_SAS_SMP_PHY
modifier|*
name|curr_config_route_destination_smp_phy
decl_stmt|;
comment|/*     * This field stores the current smp phy to which a PHY CONTROL (clear affiliation)     * command is sent out.     */
name|struct
name|SCIF_SAS_SMP_PHY
modifier|*
name|curr_clear_affiliation_phy
decl_stmt|;
comment|/**     * This field is to indicate a smp activity for this smp device is     * to be started (not yet). The scheduled activity could be Discover or Config     * Route Table.     */
name|U8
name|scheduled_activity
decl_stmt|;
comment|/**     * This timer is used for waiting before retrying a smp request, or before     * sending Discover request after Phy Control during Target Reset.     */
name|void
modifier|*
name|smp_activity_timer
decl_stmt|;
comment|/**     * This field save the retry count for internal smp request. Since when     * an internal smp request gets retried, it has been destructed already.     */
name|U8
name|io_retry_count
decl_stmt|;
comment|/**     * This field stores the number of phys for expander device found by decoding     * the SMP REPORT GENERAL response.     */
name|U8
name|number_of_phys
decl_stmt|;
comment|/**     * This field indicates the maximum number of expander route indexes per phy for     * this expander device.     */
name|U16
name|expander_route_indexes
decl_stmt|;
comment|/**     * This field indicates whether an expander device supports table-to-table     * connection.     */
name|BOOL
name|is_table_to_table_supported
decl_stmt|;
comment|/**     * This field indicates whether an expander device is externally configurable.     * If it is, it is not self-configuring and is not able to config others.     */
name|BOOL
name|is_externally_configurable
decl_stmt|;
comment|/**     * This field indicates whether an expander device is able to config others.     */
name|BOOL
name|is_able_to_config_others
decl_stmt|;
comment|/**     * This field contains the list of all smp phys that connect to another smp phy.     */
name|SCI_FAST_LIST_T
name|smp_phy_list
decl_stmt|;
block|}
name|SCIF_SAS_SMP_REMOTE_DEVICE_T
typedef|;
name|void
name|scif_sas_smp_remote_device_clear
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_construct
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_decode_smp_response
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|fw_request
parameter_list|,
name|void
modifier|*
name|response_data
parameter_list|,
name|SCI_IO_STATUS
name|completion_status
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_decode_report_general_response
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|SMP_RESPONSE_T
modifier|*
name|smp_response
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_decode_initial_discover_response
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|SMP_RESPONSE_T
modifier|*
name|smp_response
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_decode_report_phy_sata_response
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|SMP_RESPONSE_T
modifier|*
name|smp_response
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_decode_target_reset_phy_control_response
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|SMP_RESPONSE_T
modifier|*
name|smp_response
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_decode_discover_phy_control_response
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|SMP_RESPONSE_T
modifier|*
name|smp_response
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_decode_target_reset_discover_response
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|SMP_RESPONSE_T
modifier|*
name|smp_response
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_decode_spinup_hold_release_discover_response
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|SMP_RESPONSE_T
modifier|*
name|smp_response
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_decode_config_route_info_response
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|SMP_RESPONSE_T
modifier|*
name|smp_response
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_start_discover
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_continue_discover
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_finish_initial_discover
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_finish_discover
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_continue_target_reset
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|fw_request
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_fail_discover
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_fail_target_reset
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|fw_request
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_continue_current_activity
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|fw_request
parameter_list|,
name|SCI_STATUS
name|status
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_target_reset_poll
parameter_list|(
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|fw_request
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_sata_spinup_hold_release
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_fail_target_spinup_hold_release
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|target_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_retry_internal_io
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|U8
name|io_retry_count
parameter_list|,
name|U32
name|delay
parameter_list|)
function_decl|;
name|BOOL
name|scif_sas_smp_remote_device_is_in_activity
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|SCIF_SAS_SMP_PHY_T
modifier|*
name|scif_sas_smp_remote_device_find_smp_phy_by_id
parameter_list|(
name|U8
name|phy_identifier
parameter_list|,
name|struct
name|SCIF_SAS_SMP_REMOTE_DEVICE
modifier|*
name|smp_remote_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_removed
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_terminated_request_handler
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|fw_request
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_populate_smp_phy_list
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_smp_remote_device_save_smp_phy_info
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|,
name|SMP_RESPONSE_DISCOVER_T
modifier|*
name|discover_response
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|SCI_SMP_PHY_LIST_DEBUG_PRINT
name|void
name|scif_sas_smp_remote_device_print_smp_phy_list
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|scif_sas_smp_remote_device_configure_upstream_expander_route_info
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|scif_sas_remote_device_find_upstream_expander
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|scif_sas_remote_device_find_downstream_expander
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|BOOL
name|scif_sas_smp_remote_device_do_config_route_info
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|device_being_config
parameter_list|,
name|struct
name|SCIF_SAS_SMP_PHY
modifier|*
name|destination_smp_phy
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_configure_route_table
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|device_being_config
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_clean_route_table
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_clean_route_table_entry
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_cancel_config_route_table_activity
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_cancel_smp_activity
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|U8
name|scif_sas_smp_remote_device_get_config_route_table_method
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_start_clear_affiliation
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_continue_clear_affiliation
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_finish_clear_affiliation
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_smp_remote_device_start_target_reset
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|expander_device
parameter_list|,
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|target_device
parameter_list|,
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|fw_request
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIF_SAS_SMP_REMOTE_DEVICE_H_
end_comment

end_unit

