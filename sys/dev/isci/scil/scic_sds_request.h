begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIC_SDS_IO_REQUEST_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCIC_SDS_IO_REQUEST_H_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains the structures, constants and prototypes for the  *        SCIC_SDS_IO_REQUEST object.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<sys/param.h>
include|#
directive|include
file|<dev/isci/scil/scic_io_request.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_request.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_state_machine_logger.h>
include|#
directive|include
file|<dev/isci/scil/scu_task_context.h>
include|#
directive|include
file|<dev/isci/scil/intel_sas.h>
struct_decl|struct
name|SCIC_SDS_CONTROLLER
struct_decl|;
struct_decl|struct
name|SCIC_SDS_REMOTE_DEVICE
struct_decl|;
struct_decl|struct
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER
struct_decl|;
comment|/**  * @enum _SCIC_SDS_IO_REQUEST_STARTED_TASK_MGMT_SUBSTATES  *  * @brief This enumeration depicts all of the substates for a task  *        management request to be performed in the STARTED super-state.  */
typedef|typedef
enum|enum
name|_SCIC_SDS_RAW_REQUEST_STARTED_TASK_MGMT_SUBSTATES
block|{
comment|/**     * The AWAIT_TC_COMPLETION sub-state indicates that the started raw     * task management request is waiting for the transmission of the     * initial frame (i.e. command, task, etc.).     */
name|SCIC_SDS_IO_REQUEST_STARTED_TASK_MGMT_SUBSTATE_AWAIT_TC_COMPLETION
block|,
comment|/**     * This sub-state indicates that the started task management request     * is waiting for the reception of an unsolicited frame     * (i.e. response IU).     */
name|SCIC_SDS_IO_REQUEST_STARTED_TASK_MGMT_SUBSTATE_AWAIT_TC_RESPONSE
block|,
name|SCIC_SDS_IO_REQUEST_STARTED_TASK_MGMT_MAX_SUBSTATES
block|}
name|SCIC_SDS_RAW_REQUEST_STARTED_TASK_MGMT_SUBSTATES
typedef|;
comment|/**  * @enum _SCIC_SDS_SMP_REQUEST_STARTED_SUBSTATES  *  * @brief This enumeration depicts all of the substates for a SMP  *        request to be performed in the STARTED super-state.  */
typedef|typedef
enum|enum
name|_SCIC_SDS_SMP_REQUEST_STARTED_SUBSTATES
block|{
comment|/**     * This sub-state indicates that the started task management request     * is waiting for the reception of an unsolicited frame     * (i.e. response IU).     */
name|SCIC_SDS_SMP_REQUEST_STARTED_SUBSTATE_AWAIT_RESPONSE
block|,
comment|/**     * The AWAIT_TC_COMPLETION sub-state indicates that the started SMP request is     * waiting for the transmission of the initial frame (i.e. command, task, etc.).     */
name|SCIC_SDS_SMP_REQUEST_STARTED_SUBSTATE_AWAIT_TC_COMPLETION
block|,
name|SCIC_SDS_SMP_REQUEST_STARTED_MAX_SUBSTATES
block|}
name|SCIC_SDS_SMP_REQUEST_STARTED_SUBSTATES
typedef|;
comment|/**  * @struct SCIC_SDS_IO_REQUEST  *  * @brief This structure contains or references all of the data necessary  *        to process a task management or normal IO request.  */
typedef|typedef
struct|struct
name|SCIC_SDS_REQUEST
block|{
comment|/**     * This field indictes the parent object of the request.     */
name|SCI_BASE_REQUEST_T
name|parent
decl_stmt|;
name|void
modifier|*
name|user_request
decl_stmt|;
comment|/**     * This field simply points to the controller to which this IO request     * is associated.     */
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|owning_controller
decl_stmt|;
comment|/**     * This field simply points to the remote device to which this IO request     * is associated.     */
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|target_device
decl_stmt|;
comment|/**     * This field is utilized to determine if the SCI user is managing     * the IO tag for this request or if the core is managing it.     */
name|BOOL
name|was_tag_assigned_by_user
decl_stmt|;
comment|/**     * This field indicates the IO tag for this request.  The IO tag is     * comprised of the task_index and a sequence count. The sequence count     * is utilized to help identify tasks from one life to another.     */
name|U16
name|io_tag
decl_stmt|;
comment|/**    * This field specifies the sat protocol being utilized for this    * IO request, such as SAT_PROTOCOL_PIO_DATA_IN, SAT_PROTOCOL_FPDMA etc.    */
name|U8
name|sat_protocol
decl_stmt|;
comment|/**     * This field specifies the protocol being utilized for this     * IO request.     */
name|SCIC_TRANSPORT_PROTOCOL
name|protocol
decl_stmt|;
comment|/**     * This field indicates the completion status taken from the SCUs     * completion code.  It indicates the completion result for the SCU hardware.     */
name|U32
name|scu_status
decl_stmt|;
comment|/**     * This field indicates the completion status returned to the SCI user.  It     * indicates the users view of the io request completion.     */
name|U32
name|sci_status
decl_stmt|;
comment|/**     * This field contains the value to be utilized when posting (e.g. Post_TC,     * Post_TC_Abort) this request to the silicon.     */
name|U32
name|post_context
decl_stmt|;
name|void
modifier|*
name|command_buffer
decl_stmt|;
name|void
modifier|*
name|response_buffer
decl_stmt|;
name|SCU_TASK_CONTEXT_T
modifier|*
name|task_context_buffer
decl_stmt|;
name|SCU_SGL_ELEMENT_PAIR_T
modifier|*
name|sgl_element_pair_buffer
decl_stmt|;
comment|/**     * This field indicates if this request is a task management request or     * normal IO request.     */
name|BOOL
name|is_task_management_request
decl_stmt|;
comment|/**     * This field indicates that this request contains an initialized started     * substate machine.     */
name|BOOL
name|has_started_substate_machine
decl_stmt|;
comment|/**     * This field is a pointer to the stored rx frame data.  It is used in STP     * internal requests and SMP response frames.  If this field is non-NULL the     * saved frame must be released on IO request completion.     *     * @todo In the future do we want to keep a list of RX frame buffers?     */
name|U32
name|saved_rx_frame_index
decl_stmt|;
comment|/**     * This field specifies the data necessary to manage the sub-state     * machine executed while in the SCI_BASE_REQUEST_STATE_STARTED state.     */
name|SCI_BASE_STATE_MACHINE_T
name|started_substate_machine
decl_stmt|;
comment|/**     * This field specifies the current state handlers in place for this     * IO Request object.  This field is updated each time the request     * changes state.     */
name|struct
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER
modifier|*
name|state_handlers
decl_stmt|;
ifdef|#
directive|ifdef
name|SCI_LOGGING
comment|/**     * This field is the observer of the started subsate machine     */
name|SCI_BASE_STATE_MACHINE_LOGGER_T
name|started_substate_machine_logger
decl_stmt|;
endif|#
directive|endif
comment|/**     * This field in the recorded device sequence for the io request.  This is     * recorded during the build operation and is compared in the start     * operation.  If the sequence is different then there was a change of     * devices from the build to start operations.     */
name|U8
name|device_sequence
decl_stmt|;
block|}
name|SCIC_SDS_REQUEST_T
typedef|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_IO_REQUEST_FRAME_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_IO_REQUEST_EVENT_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|event_code
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_IO_REQUEST_TASK_COMPLETION_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|completion_code
parameter_list|)
function_decl|;
comment|/**  * @struct SCIC_SDS_IO_REQUEST_STATE_HANDLER  *  * @brief This is the SDS core definition of the state handlers.  */
typedef|typedef
struct|struct
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER
block|{
name|SCI_BASE_REQUEST_STATE_HANDLER_T
name|parent
decl_stmt|;
name|SCIC_SDS_IO_REQUEST_TASK_COMPLETION_HANDLER_T
name|tc_completion_handler
decl_stmt|;
name|SCIC_SDS_IO_REQUEST_EVENT_HANDLER_T
name|event_handler
decl_stmt|;
name|SCIC_SDS_IO_REQUEST_FRAME_HANDLER_T
name|frame_handler
decl_stmt|;
block|}
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER_T
typedef|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_request_state_table
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER_T
name|scic_sds_request_state_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_io_request_started_task_mgmt_substate_table
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER_T
name|scic_sds_ssp_task_request_started_substate_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_smp_request_started_substate_table
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER_T
name|scic_sds_smp_request_started_substate_handler_table
index|[]
decl_stmt|;
comment|/**  * This macro returns the maximum number of SGL element paris that we will  * support in a single IO request.  */
define|#
directive|define
name|SCU_MAX_SGL_ELEMENT_PAIRS
value|((SCU_IO_REQUEST_SGE_COUNT + 1) / 2)
comment|/**  * This macro will return the controller for this io request object  */
define|#
directive|define
name|scic_sds_request_get_controller
parameter_list|(
name|this_request
parameter_list|)
define|\
value|((this_request)->owning_controller)
comment|/**  * This macro will return the device for this io request object  */
define|#
directive|define
name|scic_sds_request_get_device
parameter_list|(
name|this_request
parameter_list|)
define|\
value|((this_request)->target_device)
comment|/**  * This macro will return the port for this io request object  */
define|#
directive|define
name|scic_sds_request_get_port
parameter_list|(
name|this_request
parameter_list|)
define|\
value|scic_sds_remote_device_get_port(scic_sds_request_get_device(this_request))
comment|/**  * This macro returns the constructed post context result for the io  * request.  */
define|#
directive|define
name|scic_sds_request_get_post_context
parameter_list|(
name|this_request
parameter_list|)
define|\
value|((this_request)->post_context)
comment|/**  * This is a helper macro to return the os handle for this request object.  */
define|#
directive|define
name|scic_sds_request_get_task_context
parameter_list|(
name|request
parameter_list|)
define|\
value|((request)->task_context_buffer)
define|#
directive|define
name|scic_sds_request_align_task_context_buffer
parameter_list|(
name|address
parameter_list|)
define|\
value|((SCU_TASK_CONTEXT_T *)( \        (((POINTER_UINT)(address)) + (CACHE_LINE_SIZE - 1)) \& ~(CACHE_LINE_SIZE - 1) \    ))
comment|/**  * This macro will align the memory address so that it is correct for the SCU  * hardware to DMA the SGL element pairs.  */
define|#
directive|define
name|scic_sds_request_align_sgl_element_buffer
parameter_list|(
name|address
parameter_list|)
define|\
value|((SCU_SGL_ELEMENT_PAIR_T *)( \      ((char *)(address)) \    + ( \          ((~(POINTER_UINT)(address)) + 1) \& (sizeof(SCU_SGL_ELEMENT_PAIR_T) - 1) \      ) \    ))
comment|/**  * This macro will set the scu hardware status and sci request completion  * status for an io request.  */
define|#
directive|define
name|scic_sds_request_set_status
parameter_list|(
name|request
parameter_list|,
name|scu_status_code
parameter_list|,
name|sci_status_code
parameter_list|)
define|\
value|{ \    (request)->scu_status = (scu_status_code); \    (request)->sci_status = (sci_status_code); \ }
define|#
directive|define
name|scic_sds_request_complete
parameter_list|(
name|a_request
parameter_list|)
define|\
value|((a_request)->state_handlers->parent.complete_handler(&(a_request)->parent))
name|U32
name|scic_sds_request_get_min_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|U32
name|scic_sds_request_get_max_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * This macro invokes the core state task completion handler for the  * SCIC_SDS_IO_REQUEST_T object.  */
define|#
directive|define
name|scic_sds_io_request_tc_completion
parameter_list|(
name|this_request
parameter_list|,
name|completion_code
parameter_list|)
define|\
value|{ \    if (this_request->parent.state_machine.current_state_id  \           == SCI_BASE_REQUEST_STATE_STARTED \&& this_request->has_started_substate_machine \           == FALSE) \       scic_sds_request_started_state_tc_completion_handler(this_request, completion_code); \    else \       this_request->state_handlers->tc_completion_handler(this_request, completion_code); \ }
comment|/**  * This macro zeros the hardware SGL element data  */
define|#
directive|define
name|SCU_SGL_ZERO
parameter_list|(
name|scu_sge
parameter_list|)
define|\
value|{ \    (scu_sge).length = 0; \    (scu_sge).address_lower = 0; \    (scu_sge).address_upper = 0; \    (scu_sge).address_modifier = 0; \ }
comment|/**  * This macro copys the SGL Element data from the host os to the hardware SGL  * elment data  */
define|#
directive|define
name|SCU_SGL_COPY
parameter_list|(
name|os_handle
parameter_list|,
name|scu_sge
parameter_list|,
name|os_sge
parameter_list|)
define|\
value|{ \    (scu_sge).length = \       scic_cb_sge_get_length_field(os_handle, os_sge); \    (scu_sge).address_upper = \       sci_cb_physical_address_upper(scic_cb_sge_get_address_field(os_handle, os_sge)); \    (scu_sge).address_lower = \       sci_cb_physical_address_lower(scic_cb_sge_get_address_field(os_handle, os_sge)); \    (scu_sge).address_modifier = 0; \ }
comment|//*****************************************************************************
comment|//* CORE REQUEST PROTOTYPES
comment|//*****************************************************************************
name|SCU_SGL_ELEMENT_PAIR_T
modifier|*
name|scic_sds_request_get_sgl_element_pair
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|sgl_pair_index
parameter_list|)
function_decl|;
name|void
name|scic_sds_request_build_sgl
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|void
name|scic_sds_ssp_io_request_assign_buffers
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|void
name|scic_sds_ssp_task_request_assign_buffers
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|void
name|scic_sds_stp_request_assign_buffers
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|void
name|scic_sds_smp_request_assign_buffers
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|SCI_STATUS
name|scic_sds_request_start
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_io_request_terminate
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_io_request_complete
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|void
name|scic_sds_io_request_copy_response
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_io_request_event_handler
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|event_code
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_io_request_frame_handler
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_task_request_complete
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_task_request_terminate
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|SCI_LOGGING
name|void
name|scic_sds_request_initialize_state_logging
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|void
name|scic_sds_request_deinitialize_state_logging
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
else|#
directive|else
comment|// SCI_LOGGING
define|#
directive|define
name|scic_sds_request_initialize_state_logging
parameter_list|(
name|x
parameter_list|)
define|#
directive|define
name|scic_sds_request_deinitialize_state_logging
parameter_list|(
name|x
parameter_list|)
endif|#
directive|endif
comment|// SCI_LOGGING
comment|//*****************************************************************************
comment|//* DEFAULT STATE HANDLERS
comment|//*****************************************************************************
name|SCI_STATUS
name|scic_sds_request_default_start_handler
parameter_list|(
name|SCI_BASE_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_request_default_abort_handler
parameter_list|(
name|SCI_BASE_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_request_default_complete_handler
parameter_list|(
name|SCI_BASE_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_request_default_destruct_handler
parameter_list|(
name|SCI_BASE_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_request_default_tc_completion_handler
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|completion_code
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_request_default_event_handler
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|event_code
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_request_default_frame_handler
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
comment|//*****************************************************************************
comment|//* STARTED STATE HANDLERS
comment|//*****************************************************************************
name|SCI_STATUS
name|scic_sds_request_started_state_abort_handler
parameter_list|(
name|SCI_BASE_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_request_started_state_tc_completion_handler
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|completion_code
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIC_SDS_IO_REQUEST_H_
end_comment

end_unit

