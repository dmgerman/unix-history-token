begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIC_SDS_PORT_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCIC_SDS_PORT_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
comment|/**  * @file  *  * @brief This file contains the structures, constants and prototypes for the  * SCIC_SDS_PORT_T object.  */
include|#
directive|include
file|<dev/isci/scil/sci_controller_constants.h>
include|#
directive|include
file|<dev/isci/scil/intel_sas.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_port.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_phy.h>
include|#
directive|include
file|<dev/isci/scil/scu_registers.h>
define|#
directive|define
name|SCIC_SDS_DUMMY_PORT
value|0xFF
comment|/**  * @enum SCIC_SDS_PORT_READY_SUBSTATES  *  * This enumeration depicts all of the states for the core port ready substate  * machine.  */
enum|enum
name|SCIC_SDS_PORT_READY_SUBSTATES
block|{
comment|/**     * The substate where the port is started and ready but has no active phys.     */
name|SCIC_SDS_PORT_READY_SUBSTATE_WAITING
block|,
comment|/**     * The substate where the port is started and ready and there is at least one     * phy operational.     */
name|SCIC_SDS_PORT_READY_SUBSTATE_OPERATIONAL
block|,
comment|/**     * The substate where the port is started and there was an add/remove phy     * event.  This state is only used in Automatic Port Configuration Mode (APC)     */
name|SCIC_SDS_PORT_READY_SUBSTATE_CONFIGURING
block|,
name|SCIC_SDS_PORT_READY_MAX_SUBSTATES
block|}
enum|;
struct_decl|struct
name|SCIC_SDS_CONTROLLER
struct_decl|;
struct_decl|struct
name|SCIC_SDS_PHY
struct_decl|;
struct_decl|struct
name|SCIC_SDS_REMOTE_DEVICE
struct_decl|;
struct_decl|struct
name|SCIC_SDS_REQUEST
struct_decl|;
comment|/**  * @struct SCIC_SDS_PORT  *  * The core port object provides the the abstraction for an SCU port.  */
typedef|typedef
struct|struct
name|SCIC_SDS_PORT
block|{
comment|/**     * This field is the oommon base port object.     */
name|SCI_BASE_PORT_T
name|parent
decl_stmt|;
comment|/**     * This field is the port index that is reported to the SCI USER.  This allows     * the actual hardware physical port to change without the SCI USER getting a     * different answer for the get port index.     */
name|U8
name|logical_port_index
decl_stmt|;
comment|/**     * This field is the port index used to program the SCU hardware.     */
name|U8
name|physical_port_index
decl_stmt|;
comment|/**     * This field contains the active phy mask for the port.  This mask is used in     * conjunction with the phy state to determine which phy to select for some     * port operations.     */
name|U8
name|active_phy_mask
decl_stmt|;
comment|/**     * This field contains the phy mask for the port that are already part of the port.    */
name|U8
name|enabled_phy_mask
decl_stmt|;
name|U16
name|reserved_rni
decl_stmt|;
name|U16
name|reserved_tci
decl_stmt|;
comment|/**     * This field contains the count of the io requests started on this port     * object.  It is used to control controller shutdown.     */
name|U32
name|started_request_count
decl_stmt|;
comment|/**     * This field contains the number of devices assigned to this port.  It is     * used to control port start requests.     */
name|U32
name|assigned_device_count
decl_stmt|;
comment|/**     * This field contains the reason for the port not going ready.  It is     * assigned in the state handlers and used in the state transition.     */
name|U32
name|not_ready_reason
decl_stmt|;
comment|/**     * This field is the table of phys assigned to the port.     */
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy_table
index|[
name|SCI_MAX_PHYS
index|]
decl_stmt|;
comment|/**     * This field is a pointer back to the controller that owns this port object.     */
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|owning_controller
decl_stmt|;
comment|/**     * This field contains the port start/stop timer handle.     */
name|void
modifier|*
name|timer_handle
decl_stmt|;
comment|/**     * This field points to the current set of state handlers for this port     * object.  These state handlers are assigned at each enter state of the state     * machine.     */
name|struct
name|SCIC_SDS_PORT_STATE_HANDLER
modifier|*
name|state_handlers
decl_stmt|;
comment|/**     * This field is the ready substate machine for the port.     */
name|SCI_BASE_STATE_MACHINE_T
name|ready_substate_machine
decl_stmt|;
ifdef|#
directive|ifdef
name|SCI_LOGGING
comment|/**     * This field is the ready substate machine logger.  It logs each state     * transition request in the ready substate machine.     */
name|SCI_BASE_STATE_MACHINE_LOGGER_T
name|ready_substate_machine_logger
decl_stmt|;
endif|#
directive|endif
comment|/// Memory mapped hardware register space
comment|/**     * This field is the pointer to the port task scheduler registers for the SCU     * hardware.     */
name|SCU_PORT_TASK_SCHEDULER_REGISTERS_T
modifier|*
name|port_task_scheduler_registers
decl_stmt|;
comment|/**     * This field is identical for all port objects and points to the port task     * scheduler group PE configuration registers.  It is used to assign PEs to a     * port.     */
name|SCU_PORT_PE_CONFIGURATION_REGISTER_T
modifier|*
name|port_pe_configuration_register
decl_stmt|;
comment|/**     * This field is the VIIT register space for ths port object.     */
name|SCU_VIIT_ENTRY_T
modifier|*
name|viit_registers
decl_stmt|;
block|}
name|SCIC_SDS_PORT_T
typedef|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_PORT_EVENT_HANDLER_T
function_decl|)
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
parameter_list|,
name|U32
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_PORT_FRAME_HANDLER_T
function_decl|)
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
parameter_list|,
name|U32
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SCIC_SDS_PORT_LINK_HANDLER_T
function_decl|)
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_PORT_IO_REQUEST_HANDLER_T
function_decl|)
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|SCIC_SDS_PORT_STATE_HANDLER
block|{
name|SCI_BASE_PORT_STATE_HANDLER_T
name|parent
decl_stmt|;
name|SCIC_SDS_PORT_FRAME_HANDLER_T
name|frame_handler
decl_stmt|;
name|SCIC_SDS_PORT_EVENT_HANDLER_T
name|event_handler
decl_stmt|;
name|SCIC_SDS_PORT_LINK_HANDLER_T
name|link_up_handler
decl_stmt|;
name|SCIC_SDS_PORT_LINK_HANDLER_T
name|link_down_handler
decl_stmt|;
name|SCIC_SDS_PORT_IO_REQUEST_HANDLER_T
name|start_io_handler
decl_stmt|;
name|SCIC_SDS_PORT_IO_REQUEST_HANDLER_T
name|complete_io_handler
decl_stmt|;
block|}
name|SCIC_SDS_PORT_STATE_HANDLER_T
typedef|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_port_state_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_port_ready_substate_table
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_PORT_STATE_HANDLER_T
name|scic_sds_port_state_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_PORT_STATE_HANDLER_T
name|scic_sds_port_ready_substate_handler_table
index|[]
decl_stmt|;
comment|/**  * Helper macro to get the owning controller of this port  */
define|#
directive|define
name|scic_sds_port_get_controller
parameter_list|(
name|this_port
parameter_list|)
define|\
value|((this_port)->owning_controller)
comment|/**  * Helper macro to get the base state machine for this port  */
define|#
directive|define
name|scic_sds_port_get_base_state_machine
parameter_list|(
name|this_port
parameter_list|)
define|\
value|(&(this_port)->parent.state_machine)
comment|/**  * This macro will change the state handlers to those of the specified state  * id  */
define|#
directive|define
name|scic_sds_port_set_base_state_handlers
parameter_list|(
name|this_port
parameter_list|,
name|state_id
parameter_list|)
define|\
value|scic_sds_port_set_state_handlers( \       (this_port),&scic_sds_port_state_handler_table[(state_id)])
comment|/**  * Helper macro to get the ready substate machine for this port  */
define|#
directive|define
name|scic_sds_port_get_ready_substate_machine
parameter_list|(
name|this_port
parameter_list|)
define|\
value|(&(this_port)->ready_substate_machine)
comment|/**  * Helper macro to set the port object state handlers  */
define|#
directive|define
name|scic_sds_port_set_state_handlers
parameter_list|(
name|this_port
parameter_list|,
name|handlers
parameter_list|)
define|\
value|((this_port)->state_handlers = (handlers))
comment|/**  * This macro returns the physical port index for this port object  */
define|#
directive|define
name|scic_sds_port_get_index
parameter_list|(
name|this_port
parameter_list|)
define|\
value|((this_port)->physical_port_index)
comment|/**  * Helper macro to increment the started request count  */
define|#
directive|define
name|scic_sds_port_increment_request_count
parameter_list|(
name|this_port
parameter_list|)
define|\
value|((this_port)->started_request_count++)
ifdef|#
directive|ifdef
name|SCIC_DEBUG_ENABLED
comment|/**  * @brief This method decrements the started io request count.  The method  *        will not decrment the started io request count below 0 and will  *        log a debug message if this is attempted.  *  * @param[in] this_port  */
name|void
name|scic_sds_port_decrement_request_count
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|)
function_decl|;
else|#
directive|else
comment|/**  * Helper macro to decrement the started io request count.  The macro will  * not decrement the started io request count below 0.  */
define|#
directive|define
name|scic_sds_port_decrement_request_count
parameter_list|(
name|this_port
parameter_list|)
define|\
value|( \       (this_port)->started_request_count = ( \                   ((this_port)->started_request_count == 0) ? \                                   (this_port)->started_request_count : \                                   ((this_port)->started_request_count - 1) \                                               ) \     )
endif|#
directive|endif
comment|/**  * Helper macro to write the phys port assignment  */
define|#
directive|define
name|scic_sds_port_write_phy_assignment
parameter_list|(
name|port
parameter_list|,
name|phy
parameter_list|)
define|\
value|SCU_PCSPExCR_WRITE( \       (port), \       (phy)->phy_index, \       (port)->physical_port_index \    )
comment|/**  * Helper macro to read the phys port assignment  */
define|#
directive|define
name|scic_sds_port_read_phy_assignment
parameter_list|(
name|port
parameter_list|,
name|phy
parameter_list|)
define|\
value|SCU_PCSPExCR_READ( \       (port), \       (phy)->phy_index \    )
define|#
directive|define
name|scic_sds_port_active_phy
parameter_list|(
name|port
parameter_list|,
name|phy
parameter_list|)
define|\
value|(((port)->active_phy_mask& (1<< (phy)->phy_index)) != 0)
comment|// ---------------------------------------------------------------------------
name|U32
name|scic_sds_port_get_object_size
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|U32
name|scic_sds_port_get_min_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|U32
name|scic_sds_port_get_max_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
ifdef|#
directive|ifdef
name|SCI_LOGGING
name|void
name|scic_sds_port_initialize_state_logging
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|)
function_decl|;
else|#
directive|else
define|#
directive|define
name|scic_sds_port_initialize_state_logging
parameter_list|(
name|x
parameter_list|)
endif|#
directive|endif
comment|// ---------------------------------------------------------------------------
name|void
name|scic_sds_port_construct
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|U8
name|port_index
parameter_list|,
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|owning_controller
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_initialize
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|void
modifier|*
name|port_task_scheduler_registers
parameter_list|,
name|void
modifier|*
name|port_configuration_regsiter
parameter_list|,
name|void
modifier|*
name|viit_registers
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|SCI_STATUS
name|scic_sds_port_add_phy
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|the_phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_remove_phy
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|the_phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_setup_transports
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|U32
name|device_id
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_activate_phy
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|,
name|BOOL
name|do_notify_user
parameter_list|,
name|BOOL
name|do_resume_phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_deactivate_phy
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|,
name|BOOL
name|do_notify_user
parameter_list|)
function_decl|;
name|struct
name|SCIC_SDS_PHY
modifier|*
name|scic_sds_port_get_a_connected_phy
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_invalid_link_up
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_general_link_up_handler
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|the_phy
parameter_list|,
name|BOOL
name|do_notify_user
parameter_list|,
name|BOOL
name|do_resume_phy
parameter_list|)
function_decl|;
name|BOOL
name|scic_sds_port_link_detected
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_link_up
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_link_down
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|void
name|scic_sds_port_timeout_handler
parameter_list|(
name|void
modifier|*
name|port
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|SCI_STATUS
name|scic_sds_port_start_io
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|the_device
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|the_io_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_complete_io
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|the_device
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|the_io_request
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|void
name|scic_sds_port_update_viit_entry
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|SCI_STATUS
name|scic_sds_port_default_start_handler
parameter_list|(
name|SCI_BASE_PORT_T
modifier|*
name|port
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_default_stop_handler
parameter_list|(
name|SCI_BASE_PORT_T
modifier|*
name|port
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_default_destruct_handler
parameter_list|(
name|SCI_BASE_PORT_T
modifier|*
name|port
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_default_reset_handler
parameter_list|(
name|SCI_BASE_PORT_T
modifier|*
name|port
parameter_list|,
name|U32
name|timeout
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_default_add_phy_handler
parameter_list|(
name|SCI_BASE_PORT_T
modifier|*
name|port
parameter_list|,
name|SCI_BASE_PHY_T
modifier|*
name|phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_default_remove_phy_handler
parameter_list|(
name|SCI_BASE_PORT_T
modifier|*
name|port
parameter_list|,
name|SCI_BASE_PHY_T
modifier|*
name|phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_default_frame_handler
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|port
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_default_event_handler
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|port
parameter_list|,
name|U32
name|event_code
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_default_link_up_handler
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_default_link_down_handler
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_default_start_io_handler
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|port
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|device
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_default_complete_io_handler
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|port
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|device
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|SCI_SAS_LINK_RATE
name|scic_sds_port_get_max_allowed_speed
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_broadcast_change_received
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|this_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|this_phy
parameter_list|)
function_decl|;
name|BOOL
name|scic_sds_port_is_valid_phy_assignment
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|U32
name|phy_index
parameter_list|)
function_decl|;
name|BOOL
name|scic_sds_port_is_phy_mask_valid
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|U32
name|phy_mask
parameter_list|)
function_decl|;
name|U32
name|scic_sds_port_get_phys
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_get_sas_address
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|SCI_SAS_ADDRESS_T
modifier|*
name|sas_address
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_get_attached_sas_address
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|SCI_SAS_ADDRESS_T
modifier|*
name|sas_address
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_get_attached_protocols
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|,
name|SCI_SAS_IDENTIFY_ADDRESS_FRAME_PROTOCOLS_T
modifier|*
name|protocols
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_set_phy
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_port_clear_phy
parameter_list|(
name|struct
name|SCIC_SDS_PORT
modifier|*
name|port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_suspend_port_task_scheduler
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_resume_port_task_scheduler
parameter_list|(
name|SCIC_SDS_PORT_T
modifier|*
name|this_port
parameter_list|)
function_decl|;
name|void
name|scic_sds_port_release_resource
parameter_list|(
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|controller
parameter_list|,
name|struct
name|SCIC_SDS_PORT
modifier|*
name|port
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIC_SDS_PORT_H_
end_comment

end_unit

