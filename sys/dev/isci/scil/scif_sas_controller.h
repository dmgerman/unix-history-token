begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIF_SAS_CONTROLLER_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCIF_SAS_CONTROLLER_H_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains the protected interface structures, constants,  *        and methods for the SCIF_SAS_CONTROLLER object.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<dev/isci/scil/sci_types.h>
include|#
directive|include
file|<dev/isci/scil/sci_abstract_list.h>
include|#
directive|include
file|<dev/isci/scil/sci_controller_constants.h>
include|#
directive|include
file|<dev/isci/scil/sci_memory_descriptor_list.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_controller.h>
include|#
directive|include
file|<dev/isci/scil/scif_controller.h>
include|#
directive|include
file|<dev/isci/scil/scif_config_parameters.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_domain.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_io_request.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_task_request.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_constants.h>
include|#
directive|include
file|<dev/isci/scil/sci_pool.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_internal_io_request.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_high_priority_request_queue.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_smp_phy.h>
comment|// Currently there is only a need for 1 memory descriptor.  This descriptor
comment|// describes the internal IO request memory.
define|#
directive|define
name|SCIF_SAS_MAX_MEMORY_DESCRIPTORS
value|1
enum|enum
name|_SCIF_SAS_MAX_MEMORY_DESCRIPTORS
block|{
name|SCIF_SAS_MDE_INTERNAL_IO
init|=
literal|0
block|}
enum|;
comment|/**  * @struct SCIF_SAS_CONTROLLER  *  * @brief The SCI SAS Framework controller object abstracts storage controller  *        level behavior for the framework component.  */
typedef|typedef
struct|struct
name|SCIF_SAS_CONTROLLER
block|{
comment|/**     * The SCI_BASE_CONTROLLER is the parent object for the SCIF_SAS_CONTROLLER     * object.     */
name|SCI_BASE_CONTROLLER_T
name|parent
decl_stmt|;
comment|/**     * This field contains the handle for the SCI Core controller object that     * is managed by this framework controller.     */
name|SCI_CONTROLLER_HANDLE_T
name|core_object
decl_stmt|;
comment|/**     * This field references the list of state specific handler methods to     * be utilized for this controller instance.     */
name|SCI_BASE_CONTROLLER_STATE_HANDLER_T
modifier|*
name|state_handlers
decl_stmt|;
comment|/**     * This field contains the memory desciptors defining the physical     * memory requirements for this controller.     */
name|SCI_PHYSICAL_MEMORY_DESCRIPTOR_T
name|mdes
index|[
name|SCIF_SAS_MAX_MEMORY_DESCRIPTORS
index|]
decl_stmt|;
comment|/**     * This field contains the SAS domain objects managed by this controller.     */
name|SCIF_SAS_DOMAIN_T
name|domains
index|[
name|SCI_MAX_DOMAINS
index|]
decl_stmt|;
comment|/**     * This field represents the pool of available remote device objects     * supported by the controller.     */
name|SCI_ABSTRACT_ELEMENT_POOL_T
name|free_remote_device_pool
decl_stmt|;
comment|/**     * This field contains the maximum number of abstract elements that     * can be placed in the pool.     */
name|SCI_ABSTRACT_ELEMENT_T
name|remote_device_pool_elements
index|[
name|SCI_MAX_REMOTE_DEVICES
index|]
decl_stmt|;
comment|/**     * This field provides the controller object a scratch area to indicate     * status of an ongoing operation.     */
name|SCI_STATUS
name|operation_status
decl_stmt|;
comment|/**     * This field will contain an user specified parameter information     * to be utilized by the framework.     */
name|SCIF_USER_PARAMETERS_T
name|user_parameters
decl_stmt|;
comment|/**     * This field records the index for the current domain to clear affiliation     * EA SATA remote devices, during the controller stop process.     */
name|U8
name|current_domain_to_clear_affiliation
decl_stmt|;
name|U32
name|internal_request_entries
decl_stmt|;
comment|/**     * This field provides a pool to manage the memory resource for all internal     * requests.     * requests.     */
name|SCI_POOL_CREATE
argument_list|(
name|internal_request_memory_pool
argument_list|,
name|POINTER_UINT
argument_list|,
name|SCIF_SAS_MAX_INTERNAL_REQUEST_COUNT
argument_list|)
expr_stmt|;
comment|/**     * This field provides a queue for built internal requests waiting to be     * started.     */
name|SCIF_SAS_HIGH_PRIORITY_REQUEST_QUEUE_T
name|hprq
decl_stmt|;
comment|/**     * This represents the number of available SMP phy objects that can     * be managed by the framework.     */
name|SCIF_SAS_SMP_PHY_T
name|smp_phy_array
index|[
name|SCIF_SAS_SMP_PHY_COUNT
index|]
decl_stmt|;
comment|/**     * This field provides a list to manage the memory resource for all     * smp_phy objects.     */
name|SCI_FAST_LIST_T
name|smp_phy_memory_list
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DISABLE_INTERRUPTS
argument_list|)
comment|/**     * This field saves the interrupt coalescing count before changing interrupt     * coalescence.     */
name|U16
name|saved_interrupt_coalesce_number
decl_stmt|;
comment|/**     * This field saves the interrupt coalescing timeout values in micorseconds     * before changing interrupt coalescence.     */
name|U32
name|saved_interrupt_coalesce_timeout
decl_stmt|;
endif|#
directive|endif
comment|// !defined(DISABLE_INTERRUPTS)
block|}
name|SCIF_SAS_CONTROLLER_T
typedef|;
specifier|extern
name|SCI_BASE_STATE_T
name|scif_sas_controller_state_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_CONTROLLER_STATE_HANDLER_T
name|scif_sas_controller_state_handler_table
index|[]
decl_stmt|;
name|SCI_STATUS
name|scif_sas_controller_continue_io
parameter_list|(
name|SCI_CONTROLLER_HANDLE_T
name|controller
parameter_list|,
name|SCI_REMOTE_DEVICE_HANDLE_T
name|remote_device
parameter_list|,
name|SCI_IO_REQUEST_HANDLE_T
name|io_request
parameter_list|)
function_decl|;
name|void
name|scif_sas_controller_destruct
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|void
modifier|*
name|scif_sas_controller_allocate_internal_request
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|void
name|scif_sas_controller_free_internal_request
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|,
name|void
modifier|*
name|fw_internal_request_buffer
parameter_list|)
function_decl|;
name|void
name|scif_sas_controller_start_high_priority_io
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|BOOL
name|scif_sas_controller_sufficient_resource
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_controller_complete_high_priority_io
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|,
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCIF_SAS_REQUEST_T
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|SCIF_SAS_SMP_PHY_T
modifier|*
name|scif_sas_controller_allocate_smp_phy
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|void
name|scif_sas_controller_free_smp_phy
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|,
name|SCIF_SAS_SMP_PHY_T
modifier|*
name|smp_phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_controller_clear_affiliation
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_controller_continue_to_stop
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|void
name|scif_sas_controller_set_default_config_parameters
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_controller_release_resource
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|void
name|scif_sas_controller_build_mdl
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DISABLE_INTERRUPTS
argument_list|)
name|void
name|scif_sas_controller_save_interrupt_coalescence
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|void
name|scif_sas_controller_restore_interrupt_coalescence
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
else|#
directive|else
comment|// !defined(DISABLE_INTERRUPTS)
define|#
directive|define
name|scif_sas_controller_save_interrupt_coalescence
parameter_list|(
name|controller
parameter_list|)
define|#
directive|define
name|scif_sas_controller_restore_interrupt_coalescence
parameter_list|(
name|controller
parameter_list|)
endif|#
directive|endif
comment|// !defined(DISABLE_INTERRUPTS)
ifdef|#
directive|ifdef
name|SCI_LOGGING
name|void
name|scif_sas_controller_initialize_state_logging
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scif_sas_controller_deinitialize_state_logging
parameter_list|(
name|SCIF_SAS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
else|#
directive|else
comment|// SCI_LOGGING
define|#
directive|define
name|scif_sas_controller_initialize_state_logging
parameter_list|(
name|x
parameter_list|)
define|#
directive|define
name|scif_sas_controller_deinitialize_state_logging
parameter_list|(
name|x
parameter_list|)
endif|#
directive|endif
comment|// SCI_LOGGING
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIF_SAS_CONTROLLER_H_
end_comment

end_unit

