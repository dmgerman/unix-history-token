begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCU_CONSTANTS_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCU_CONSTANTS_H_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains the SCU hardware constants.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<dev/isci/scil/sci_controller_constants.h>
comment|/**  * 2 indicates the maximum number of UFs that can occur for a given IO  * request.  The hardware handles reception of additional unsolicited  * frames while all UFs are in use, by holding off the transmitting  * device.  This number could be theoretically reduced to 1, but 2  * provides for more reliable operation.  During SATA PIO operation,  * it is possible under some conditions for there to be 3 separate  * FISes received, back to back to back (PIO Setup, Data, D2H Register).  * It is unlikely to have all 3 pending all at once without some of  * them already being processed.  */
define|#
directive|define
name|SCU_MIN_UNSOLICITED_FRAMES
value|(8)
define|#
directive|define
name|SCU_MIN_CRITICAL_NOTIFICATIONS
value|(19)
define|#
directive|define
name|SCU_MIN_EVENTS
value|(4)
define|#
directive|define
name|SCU_MIN_COMPLETION_QUEUE_SCRATCH
value|(0)
define|#
directive|define
name|SCU_MIN_COMPLETION_QUEUE_ENTRIES
value|( SCU_MIN_CRITICAL_NOTIFICATIONS \                                           + SCU_MIN_EVENTS \                                           + SCU_MIN_UNSOLICITED_FRAMES \                                           + SCI_MIN_IO_REQUESTS \                                           + SCU_MIN_COMPLETION_QUEUE_SCRATCH )
define|#
directive|define
name|SCU_MAX_CRITICAL_NOTIFICATIONS
value|(384)
define|#
directive|define
name|SCU_MAX_EVENTS
value|(128)
define|#
directive|define
name|SCU_MAX_UNSOLICITED_FRAMES
value|(128)
define|#
directive|define
name|SCU_MAX_COMPLETION_QUEUE_SCRATCH
value|(128)
define|#
directive|define
name|SCU_MAX_COMPLETION_QUEUE_ENTRIES
value|( SCU_MAX_CRITICAL_NOTIFICATIONS \                                           + SCU_MAX_EVENTS \                                           + SCU_MAX_UNSOLICITED_FRAMES \                                           + SCI_MAX_IO_REQUESTS \                                           + SCU_MAX_COMPLETION_QUEUE_SCRATCH )
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ENABLE_MINIMUM_MEMORY_MODE
argument_list|)
define|#
directive|define
name|SCU_UNSOLICITED_FRAME_COUNT
value|SCU_MAX_UNSOLICITED_FRAMES
define|#
directive|define
name|SCU_CRITICAL_NOTIFICATION_COUNT
value|SCU_MAX_CRITICAL_NOTIFICATIONS
define|#
directive|define
name|SCU_EVENT_COUNT
value|SCU_MAX_EVENTS
define|#
directive|define
name|SCU_COMPLETION_QUEUE_SCRATCH
value|SCU_MAX_COMPLETION_QUEUE_SCRATCH
define|#
directive|define
name|SCU_IO_REQUEST_COUNT
value|SCI_MAX_IO_REQUESTS
define|#
directive|define
name|SCU_IO_REQUEST_SGE_COUNT
value|SCI_MAX_SCATTER_GATHER_ELEMENTS
define|#
directive|define
name|SCU_COMPLETION_QUEUE_COUNT
value|SCU_MAX_COMPLETION_QUEUE_ENTRIES
else|#
directive|else
define|#
directive|define
name|SCU_UNSOLICITED_FRAME_COUNT
value|SCU_MIN_UNSOLICITED_FRAMES
define|#
directive|define
name|SCU_CRITICAL_NOTIFICATION_COUNT
value|SCU_MIN_CRITICAL_NOTIFICATIONS
define|#
directive|define
name|SCU_EVENT_COUNT
value|SCU_MIN_EVENTS
define|#
directive|define
name|SCU_COMPLETION_QUEUE_SCRATCH
value|SCU_MIN_COMPLETION_QUEUE_SCRATCH
define|#
directive|define
name|SCU_IO_REQUEST_COUNT
value|SCI_MIN_IO_REQUESTS
define|#
directive|define
name|SCU_IO_REQUEST_SGE_COUNT
value|SCI_MIN_SCATTER_GATHER_ELEMENTS
define|#
directive|define
name|SCU_COMPLETION_QUEUE_COUNT
value|SCU_MIN_COMPLETION_QUEUE_ENTRIES
endif|#
directive|endif
comment|// !defined(ENABLE_MINIMUM_MEMORY_OPERATION)
comment|/**  * The SCU_COMPLETION_QUEUE_COUNT constant indicates the size  * of the completion queue into which the hardware DMAs 32-bit  * quantas (completion entries).  */
comment|/**  * This queue must be programmed to a power of 2 size (e.g. 32, 64,  * 1024, etc.).  */
if|#
directive|if
operator|(
name|SCU_COMPLETION_QUEUE_COUNT
operator|!=
literal|16
operator|)
operator|&&
expr|\
operator|(
name|SCU_COMPLETION_QUEUE_COUNT
operator|!=
literal|32
operator|)
operator|&&
expr|\
operator|(
name|SCU_COMPLETION_QUEUE_COUNT
operator|!=
literal|64
operator|)
operator|&&
expr|\
operator|(
name|SCU_COMPLETION_QUEUE_COUNT
operator|!=
literal|128
operator|)
operator|&&
expr|\
operator|(
name|SCU_COMPLETION_QUEUE_COUNT
operator|!=
literal|256
operator|)
operator|&&
expr|\
operator|(
name|SCU_COMPLETION_QUEUE_COUNT
operator|!=
literal|512
operator|)
operator|&&
expr|\
operator|(
name|SCU_COMPLETION_QUEUE_COUNT
operator|!=
literal|1024
operator|)
error|#
directive|error
literal|"SCU_COMPLETION_QUEUE_COUNT must be set to a power of 2."
endif|#
directive|endif
if|#
directive|if
name|SCU_MIN_UNSOLICITED_FRAMES
operator|>
name|SCU_MAX_UNSOLICITED_FRAMES
error|#
directive|error
literal|"Invalid configuration of unsolicited frame constants"
endif|#
directive|endif
comment|// SCU_MIN_UNSOLICITED_FRAMES> SCU_MAX_UNSOLICITED_FRAMES
define|#
directive|define
name|SCU_MIN_UF_TABLE_ENTRIES
value|(8)
define|#
directive|define
name|SCU_ABSOLUTE_MAX_UNSOLICITED_FRAMES
value|(4096)
define|#
directive|define
name|SCU_UNSOLICITED_FRAME_BUFFER_SIZE
value|(1024)
define|#
directive|define
name|SCU_INVALID_FRAME_INDEX
value|(0xFFFF)
define|#
directive|define
name|SCU_IO_REQUEST_MAX_SGE_SIZE
value|(0x00FFFFFF)
define|#
directive|define
name|SCU_IO_REQUEST_MAX_TRANSFER_LENGTH
value|(0x00FFFFFF)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCU_CONSTANTS_H_
end_comment

end_unit

