begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIC_SDS_CONTROLLER_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCIC_SDS_CONTROLLER_H_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains the structures, constants and prototypes used for  *        the core controller object.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<dev/isci/scil/sci_pool.h>
include|#
directive|include
file|<dev/isci/scil/sci_controller_constants.h>
include|#
directive|include
file|<dev/isci/scil/sci_memory_descriptor_list.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_controller.h>
include|#
directive|include
file|<dev/isci/scil/scic_config_parameters.h>
include|#
directive|include
file|<dev/isci/scil/scic_sds_port.h>
include|#
directive|include
file|<dev/isci/scil/scic_sds_phy.h>
include|#
directive|include
file|<dev/isci/scil/scic_sds_remote_node_table.h>
include|#
directive|include
file|<dev/isci/scil/scu_registers.h>
include|#
directive|include
file|<dev/isci/scil/scu_constants.h>
include|#
directive|include
file|<dev/isci/scil/scu_remote_node_context.h>
include|#
directive|include
file|<dev/isci/scil/scu_task_context.h>
include|#
directive|include
file|<dev/isci/scil/scu_unsolicited_frame.h>
include|#
directive|include
file|<dev/isci/scil/scic_sds_unsolicited_frame_control.h>
include|#
directive|include
file|<dev/isci/scil/scic_sds_port_configuration_agent.h>
include|#
directive|include
file|<dev/isci/scil/scic_sds_pci.h>
struct_decl|struct
name|SCIC_SDS_REMOTE_DEVICE
struct_decl|;
struct_decl|struct
name|SCIC_SDS_REQUEST
struct_decl|;
define|#
directive|define
name|SCU_COMPLETION_RAM_ALIGNMENT
value|(64)
comment|/**  * @enum SCIC_SDS_CONTROLLER_MEMORY_DESCRIPTORS  *  * This enumeration depects the types of MDEs that are going to be created for  * the controller object.  */
enum|enum
name|SCIC_SDS_CONTROLLER_MEMORY_DESCRIPTORS
block|{
comment|/**     * Completion queue MDE entry     */
name|SCU_MDE_COMPLETION_QUEUE
block|,
comment|/**     * Remote node context MDE entry     */
name|SCU_MDE_REMOTE_NODE_CONTEXT
block|,
comment|/**     * Task context MDE entry     */
name|SCU_MDE_TASK_CONTEXT
block|,
comment|/**     * Unsolicited frame buffer MDE entrys this is the start of the unsolicited     * frame buffer entries.     */
name|SCU_MDE_UF_BUFFER
block|,
name|SCU_MAX_MDES
block|}
enum|;
comment|/**  * @struct SCIC_POWER_CONTROL  *  * This structure defines the fields for managing power control for direct  * attached disk devices.  */
typedef|typedef
struct|struct
name|SCIC_POWER_CONTROL
block|{
comment|/**     * This field is set when the power control timer is running and cleared when     * it is not.     */
name|BOOL
name|timer_started
decl_stmt|;
comment|/**     * This field is the handle to the driver timer object.  This timer is used to     * control when the directed attached disks can consume power.     */
name|void
modifier|*
name|timer
decl_stmt|;
comment|/**    * This field is used to keep track of how many phys are put into the    * requesters field.    */
name|U8
name|phys_waiting
decl_stmt|;
comment|/**    * This field is used to keep track of how many remote devices have been granted to consume power    */
name|U8
name|remote_devices_granted_power
decl_stmt|;
comment|/**     * This field is an array of phys that we are waiting on. The phys are direct     * mapped into requesters via SCIC_SDS_PHY_T.phy_index     */
name|SCIC_SDS_PHY_T
modifier|*
name|requesters
index|[
name|SCI_MAX_PHYS
index|]
decl_stmt|;
block|}
name|SCIC_POWER_CONTROL_T
typedef|;
comment|/**  * @struct SCIC_SDS_CONTROLLER  *  * This structure represents the SCU contoller object.  */
typedef|typedef
struct|struct
name|SCIC_SDS_CONTROLLER
block|{
comment|/**     * The SCI_BASE_CONTROLLER is the parent object for the SCIC_SDS_CONTROLLER     * object.     */
name|SCI_BASE_CONTROLLER_T
name|parent
decl_stmt|;
comment|/**     * This field is the driver timer object handler used to time the controller     * object start and stop requests.     */
name|void
modifier|*
name|timeout_timer
decl_stmt|;
comment|/**     * This field is the current set of state handlers assigned to this controller     * object.     */
name|struct
name|SCIC_SDS_CONTROLLER_STATE_HANDLER
modifier|*
name|state_handlers
decl_stmt|;
comment|/**     * This field contains the user parameters to be utilized for this     * core controller object.     */
name|SCIC_USER_PARAMETERS_T
name|user_parameters
decl_stmt|;
comment|/**     * This field contains the OEM parameters version defining the structure     * layout. It comes from the version in the OEM block header.     */
name|U8
name|oem_parameters_version
decl_stmt|;
comment|/**     * This field contains the OEM parameters to be utilized for this     * core controller object.     */
name|SCIC_OEM_PARAMETERS_T
name|oem_parameters
decl_stmt|;
comment|/**     * This field contains the port configuration agent for this controller.     */
name|SCIC_SDS_PORT_CONFIGURATION_AGENT_T
name|port_agent
decl_stmt|;
comment|/**     * This field is the array of port objects that are controlled by this     * controller object.  There is one dummy port object also contained within     * this controller object.     */
name|struct
name|SCIC_SDS_PORT
name|port_table
index|[
name|SCI_MAX_PORTS
operator|+
literal|1
index|]
decl_stmt|;
comment|/**     * This field is the array of phy objects that are controlled by this     * controller object.     */
name|struct
name|SCIC_SDS_PHY
name|phy_table
index|[
name|SCI_MAX_PHYS
index|]
decl_stmt|;
comment|/**     * This field is the array of device objects that are currently constructed     * for this controller object.  This table is used as a fast lookup of device     * objects that need to handle device completion notifications from the     * hardware. The table is RNi based.     */
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|device_table
index|[
name|SCI_MAX_REMOTE_DEVICES
index|]
decl_stmt|;
comment|/**     * This field is the array of IO request objects that are currently active for     * this controller object.  This table is used as a fast lookup of the io     * request object that need to handle completion queue notifications.  The     * table is TCi based.     */
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|io_request_table
index|[
name|SCI_MAX_IO_REQUESTS
index|]
decl_stmt|;
comment|/**     * This field is the free RNi data structure     */
name|SCIC_REMOTE_NODE_TABLE_T
name|available_remote_nodes
decl_stmt|;
comment|/**     * This field is the TCi pool used to manage the task context index.     */
name|SCI_POOL_CREATE
argument_list|(
name|tci_pool
argument_list|,
name|U16
argument_list|,
name|SCI_MAX_IO_REQUESTS
argument_list|)
expr_stmt|;
comment|/**     * This filed is the SCIC_POWER_CONTROL data used to control when direct     * attached devices can consume power.     */
name|SCIC_POWER_CONTROL_T
name|power_control
decl_stmt|;
comment|/**     * This field is the array of sequence values for the IO Tag fields.  Even     * though only 4 bits of the field is used for the sequence the sequence is 16     * bits in size so the sequence can be bitwise or'd with the TCi to build the     * IO Tag value.     */
name|U16
name|io_request_sequence
index|[
name|SCI_MAX_IO_REQUESTS
index|]
decl_stmt|;
comment|/**     * This field in the array of sequence values for the RNi.  These are used     * to control io request build to io request start operations.  The sequence     * value is recorded into an io request when it is built and is checked on     * the io request start operation to make sure that there was not a device     * hot plug between the build and start operation.     */
name|U8
name|remote_device_sequence
index|[
name|SCI_MAX_REMOTE_DEVICES
index|]
decl_stmt|;
comment|/**     * This field is a pointer to the memory allocated by the driver for the task     * context table.  This data is shared between the hardware and software.     */
name|SCU_TASK_CONTEXT_T
modifier|*
name|task_context_table
decl_stmt|;
comment|/**     * This field is a pointer to the memory allocated by the driver for the     * remote node context table.  This table is shared between the hardware and     * software.     */
name|SCU_REMOTE_NODE_CONTEXT_T
modifier|*
name|remote_node_context_table
decl_stmt|;
comment|/**     * This field is the array of physical memory requiremets for this controller     * object.     */
name|SCI_PHYSICAL_MEMORY_DESCRIPTOR_T
name|memory_descriptors
index|[
name|SCU_MAX_MDES
index|]
decl_stmt|;
comment|/**     * This field is a pointer to the completion queue.  This memory is     * written to by the hardware and read by the software.     */
name|U32
modifier|*
name|completion_queue
decl_stmt|;
comment|/**     * This field is the software copy of the completion queue get pointer.  The     * controller object writes this value to the hardware after processing the     * completion entries.     */
name|U32
name|completion_queue_get
decl_stmt|;
comment|/**     * This field is the minimum of the number of hardware supported port entries     * and the software requested port entries.     */
name|U32
name|logical_port_entries
decl_stmt|;
comment|/**     * This field is the minimum number of hardware supported completion queue     * entries and the software requested completion queue entries.     */
name|U32
name|completion_queue_entries
decl_stmt|;
comment|/**     * This field is the minimum number of hardware supported event entries and     * the software requested event entries.     */
name|U32
name|completion_event_entries
decl_stmt|;
comment|/**     * This field is the minimum number of devices supported by the hardware and     * the number of devices requested by the software.     */
name|U32
name|remote_node_entries
decl_stmt|;
comment|/**     * This field is the minimum number of IO requests supported by the hardware     * and the number of IO requests requested by the software.     */
name|U32
name|task_context_entries
decl_stmt|;
comment|/**     * This object contains all of the unsolicited frame specific     * data utilized by the core controller.     */
name|SCIC_SDS_UNSOLICITED_FRAME_CONTROL_T
name|uf_control
decl_stmt|;
comment|/**     * This field records the fact that the controller has encountered a fatal     * error and must be reset.     */
name|BOOL
name|encountered_fatal_error
decl_stmt|;
comment|/**     * This field specifies that the controller should ignore     * completion processing for non-fastpath events.  This will     * cause the completions to be thrown away.     */
name|BOOL
name|restrict_completions
decl_stmt|;
comment|// Phy Startup Data
comment|/**     * This field is the driver timer handle for controller phy request startup.     * On controller start the controller will start each PHY individually in     * order of phy index.     */
name|void
modifier|*
name|phy_startup_timer
decl_stmt|;
comment|/**     * This field is set when the phy_startup_timer is running and is cleared when     * the phy_startup_timer is stopped.     */
name|BOOL
name|phy_startup_timer_pending
decl_stmt|;
comment|/**     * This field is the index of the next phy start.  It is initialized to 0 and     * increments for each phy index that is started.     */
name|U32
name|next_phy_to_start
decl_stmt|;
comment|/**     * This field controls the invalid link up notifications to the SCI_USER.  If     * an invalid_link_up notification is reported a bit for the PHY index is set     * so further notifications are not made.  Once the PHY object reports link up     * and is made part of a port then this bit for the PHY index is cleared.     */
name|U8
name|invalid_phy_mask
decl_stmt|;
comment|/**     * This is the controller index for this controller object.     */
name|U8
name|controller_index
decl_stmt|;
comment|/**     * This field is the PCI revision code for the controller object.     */
name|enum
name|SCU_CONTROLLER_PCI_REVISION_CODE
name|pci_revision
decl_stmt|;
comment|/*     * This field saves the current interrupt coalescing number of the controller.     */
name|U16
name|interrupt_coalesce_number
decl_stmt|;
comment|/*     * This field saves the current interrupt coalescing timeout value in microseconds.     */
name|U32
name|interrupt_coalesce_timeout
decl_stmt|;
comment|// Hardware memory mapped register space
ifdef|#
directive|ifdef
name|ARLINGTON_BUILD
comment|/**     * This field is a pointer to the memory mapped register space for the     * LEX_REGISTERS.     */
name|LEX_REGISTERS_T
modifier|*
name|lex_registers
decl_stmt|;
endif|#
directive|endif
comment|/**     * This field is a pointer to the memory mapped register space for the     * SMU_REGISTERS.     */
name|SMU_REGISTERS_T
modifier|*
name|smu_registers
decl_stmt|;
comment|/**     * This field is a pointer to the memory mapped register space for the     * SCU_REGISTERS.     */
name|SCU_REGISTERS_T
modifier|*
name|scu_registers
decl_stmt|;
block|}
name|SCIC_SDS_CONTROLLER_T
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SCIC_SDS_CONTROLLER_PHY_HANDLER_T
function_decl|)
parameter_list|(
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|controller
parameter_list|,
name|struct
name|SCIC_SDS_PORT
modifier|*
name|port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SCIC_SDS_CONTROLLER_DEVICE_HANDLER_T
function_decl|)
parameter_list|(
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|controller
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|device
parameter_list|)
function_decl|;
comment|/**  * @struct SCIC_SDS_CONTROLLER_STATE_HANDLER  *  * This structure contains the SDS core specific definition for the state  * handlers.  */
typedef|typedef
struct|struct
name|SCIC_SDS_CONTROLLER_STATE_HANDLER
block|{
name|SCI_BASE_CONTROLLER_STATE_HANDLER_T
name|parent
decl_stmt|;
name|SCI_BASE_CONTROLLER_REQUEST_HANDLER_T
name|terminate_request_handler
decl_stmt|;
name|SCIC_SDS_CONTROLLER_PHY_HANDLER_T
name|link_up_handler
decl_stmt|;
name|SCIC_SDS_CONTROLLER_PHY_HANDLER_T
name|link_down_handler
decl_stmt|;
name|SCIC_SDS_CONTROLLER_DEVICE_HANDLER_T
name|remote_device_started_handler
decl_stmt|;
name|SCIC_SDS_CONTROLLER_DEVICE_HANDLER_T
name|remote_device_stopped_handler
decl_stmt|;
block|}
name|SCIC_SDS_CONTROLLER_STATE_HANDLER_T
typedef|;
specifier|extern
name|SCIC_SDS_CONTROLLER_STATE_HANDLER_T
name|scic_sds_controller_state_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_controller_state_table
index|[]
decl_stmt|;
comment|/**  * This macro will increment the specified index to and if the index wraps  * to 0 it will toggel the cycle bit.  */
define|#
directive|define
name|INCREMENT_QUEUE_GET
parameter_list|(
name|index
parameter_list|,
name|cycle
parameter_list|,
name|entry_count
parameter_list|,
name|bit_toggle
parameter_list|)
define|\
value|{ \    if ((index) + 1 == entry_count) \    { \       (index) = 0; \       (cycle) = (cycle) ^ (bit_toggle); \    } \    else \    { \       index = index + 1; \    } \ }
comment|/**  * This is a helper macro that sets the state handlers for the controller  * object  */
define|#
directive|define
name|scic_sds_controller_set_state_handlers
parameter_list|(
name|this_controller
parameter_list|,
name|handlers
parameter_list|)
define|\
value|((this_controller)->state_handlers = (handlers))
comment|/**  * This is a helper macro that gets the base state machine for the  * controller object  */
define|#
directive|define
name|scic_sds_controller_get_base_state_machine
parameter_list|(
name|this_contoroller
parameter_list|)
define|\
value|(&(this_controller)->parent.state_machine)
comment|/**  * This is a helper macro to get the port configuration agent from the  * controller object.  */
define|#
directive|define
name|scic_sds_controller_get_port_configuration_agent
parameter_list|(
name|controller
parameter_list|)
define|\
value|(&(controller)->port_agent)
comment|/**  * This is a helper macro that sets the base state machine state handlers  * based on the state id  */
define|#
directive|define
name|scic_sds_controller_set_base_state_handlers
parameter_list|(
name|this_controller
parameter_list|,
name|state_id
parameter_list|)
define|\
value|scic_sds_controller_set_state_handlers( \       this_controller,&scic_sds_controller_state_handler_table[(state_id)])
comment|/**  * This macro writes to the smu_register for this controller  */
define|#
directive|define
name|smu_register_write
parameter_list|(
name|controller
parameter_list|,
name|reg
parameter_list|,
name|value
parameter_list|)
define|\
value|scic_sds_pci_write_smu_dword((controller),&(reg), (value))
comment|/**  * This macro reads the smu_register for this controller  */
define|#
directive|define
name|smu_register_read
parameter_list|(
name|controller
parameter_list|,
name|reg
parameter_list|)
define|\
value|scic_sds_pci_read_smu_dword((controller),&(reg))
comment|/**  * This mcaro writes the scu_register for this controller  */
define|#
directive|define
name|scu_register_write
parameter_list|(
name|controller
parameter_list|,
name|reg
parameter_list|,
name|value
parameter_list|)
define|\
value|scic_sds_pci_write_scu_dword((controller),&(reg), (value))
comment|/**  * This macro reads the scu_register for this controller  */
define|#
directive|define
name|scu_register_read
parameter_list|(
name|controller
parameter_list|,
name|reg
parameter_list|)
define|\
value|scic_sds_pci_read_scu_dword((controller),&(reg))
ifdef|#
directive|ifdef
name|ARLINGTON_BUILD
comment|/**     * This macro writes to the lex_register for this controller.     */
define|#
directive|define
name|lex_register_write
parameter_list|(
name|controller
parameter_list|,
name|reg
parameter_list|,
name|value
parameter_list|)
define|\
value|scic_cb_pci_write_dword((controller), (reg), (value))
comment|/**     * This macro reads from the lex_register for this controller.     */
define|#
directive|define
name|lex_register_read
parameter_list|(
name|controller
parameter_list|,
name|reg
parameter_list|)
define|\
value|scic_cb_pci_read_dword((controller), (reg))
endif|#
directive|endif
comment|// ARLINGTON_BUILD
comment|/**  * This macro returns the protocol engine group for this controller object.  * Presently we only support protocol engine group 0 so just return that  */
define|#
directive|define
name|scic_sds_controller_get_protocol_engine_group
parameter_list|(
name|controller
parameter_list|)
value|0
comment|/**  * This macro constructs an IO tag from the sequence and index values.  */
define|#
directive|define
name|scic_sds_io_tag_construct
parameter_list|(
name|sequence
parameter_list|,
name|task_index
parameter_list|)
define|\
value|((sequence)<< 12 | (task_index))
comment|/**  * This macro returns the IO sequence from the IO tag value.  */
define|#
directive|define
name|scic_sds_io_tag_get_sequence
parameter_list|(
name|io_tag
parameter_list|)
define|\
value|(((io_tag)& 0xF000)>> 12)
comment|/**  * This macro returns the TCi from the io tag value  */
define|#
directive|define
name|scic_sds_io_tag_get_index
parameter_list|(
name|io_tag
parameter_list|)
define|\
value|((io_tag)& 0x0FFF)
comment|/**  * This is a helper macro to increment the io sequence count.  *  * We may find in the future that it will be faster to store the sequence  * count in such a way as we dont perform the shift operation to build io  * tag values so therefore need a way to incrment them correctly  */
define|#
directive|define
name|scic_sds_io_sequence_increment
parameter_list|(
name|value
parameter_list|)
define|\
value|((value) = (((value) + 1)& 0x000F))
define|#
directive|define
name|scic_sds_remote_device_node_count
parameter_list|(
name|device
parameter_list|)
define|\
value|( \       ( \          (device)->target_protocols.u.bits.attached_stp_target \&& ((device)->is_direct_attached != TRUE) \       ) \       ? SCU_STP_REMOTE_NODE_COUNT : SCU_SSP_REMOTE_NODE_COUNT \    )
comment|/**  * This macro will set the bit in the invalid phy mask for this controller  * object.  This is used to control messages reported for invalid link up  * notifications.  */
define|#
directive|define
name|scic_sds_controller_set_invalid_phy
parameter_list|(
name|controller
parameter_list|,
name|phy
parameter_list|)
define|\
value|((controller)->invalid_phy_mask |= (1<< (phy)->phy_index))
comment|/**  * This macro will clear the bit in the invalid phy mask for this controller  * object.  This is used to control messages reported for invalid link up  * notifications.  */
define|#
directive|define
name|scic_sds_controller_clear_invalid_phy
parameter_list|(
name|controller
parameter_list|,
name|phy
parameter_list|)
define|\
value|((controller)->invalid_phy_mask&= ~(1<< (phy)->phy_index))
comment|// ---------------------------------------------------------------------------
name|U32
name|scic_sds_controller_get_object_size
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|U32
name|scic_sds_controller_get_min_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|U32
name|scic_sds_controller_get_max_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|void
name|scic_sds_controller_post_request
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|U32
name|request
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|void
name|scic_sds_controller_release_frame
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_copy_sata_response
parameter_list|(
name|void
modifier|*
name|response_buffer
parameter_list|,
name|void
modifier|*
name|frame_header
parameter_list|,
name|void
modifier|*
name|frame_buffer
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|SCI_STATUS
name|scic_sds_controller_allocate_remote_node_context
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|the_device
parameter_list|,
name|U16
modifier|*
name|node_id
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_free_remote_node_context
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|the_device
parameter_list|,
name|U16
name|node_id
parameter_list|)
function_decl|;
name|SCU_REMOTE_NODE_CONTEXT_T
modifier|*
name|scic_sds_controller_get_remote_node_context_buffer
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|U16
name|node_id
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|scic_sds_controller_get_io_request_from_tag
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|U16
name|io_tag
parameter_list|)
function_decl|;
name|U16
name|scic_sds_controller_get_io_sequence_from_tag
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|U16
name|io_tag
parameter_list|)
function_decl|;
name|SCU_TASK_CONTEXT_T
modifier|*
name|scic_sds_controller_get_task_context_buffer
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|U16
name|io_tag
parameter_list|)
function_decl|;
comment|//-----------------------------------------------------------------------------
name|SCI_STATUS
name|scic_sds_terminate_reqests
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|this_remote_device
parameter_list|,
name|struct
name|SCIC_SDS_PORT
modifier|*
name|this_port
parameter_list|)
function_decl|;
comment|//*****************************************************************************
comment|//* CORE CONTROLLER POWER CONTROL METHODS
comment|//*****************************************************************************
name|void
name|scic_sds_controller_power_control_timer_handler
parameter_list|(
name|void
modifier|*
name|controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_power_control_queue_insert
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|the_phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_power_control_queue_remove
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|the_phy
parameter_list|)
function_decl|;
comment|//*****************************************************************************
comment|//* CORE CONTROLLER PHY MESSAGE PROCESSING
comment|//*****************************************************************************
name|void
name|scic_sds_controller_link_up
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_PORT
modifier|*
name|the_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|the_phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_link_down
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_PORT
modifier|*
name|the_port
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|the_phy
parameter_list|)
function_decl|;
comment|//*****************************************************************************
comment|//* CORE CONTROLLER PORT AGENT MESSAGE PROCESSING
comment|//*****************************************************************************
name|void
name|scic_sds_controller_port_agent_configured_ports
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
comment|//*****************************************************************************
comment|//* CORE CONTROLLER REMOTE DEVICE MESSAGE PROCESSING
comment|//*****************************************************************************
name|BOOL
name|scic_sds_controller_has_remote_devices_stopping
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_remote_device_started
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|the_device
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_remote_device_stopped
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_REMOTE_DEVICE
modifier|*
name|the_device
parameter_list|)
function_decl|;
comment|//*****************************************************************************
comment|//* CORE CONTROLLER PRIVATE METHODS
comment|//*****************************************************************************
ifdef|#
directive|ifdef
name|SCI_LOGGING
name|void
name|scic_sds_controller_initialize_state_logging
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_deinitialize_state_logging
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
else|#
directive|else
define|#
directive|define
name|scic_sds_controller_initialize_state_logging
parameter_list|(
name|x
parameter_list|)
define|#
directive|define
name|scic_sds_controller_deinitialize_state_logging
parameter_list|(
name|x
parameter_list|)
endif|#
directive|endif
name|SCI_STATUS
name|scic_sds_controller_validate_memory_descriptor_table
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_ram_initialization
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_assign_task_entries
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_afe_initialization
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_enable_port_task_scheduler
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_initialize_completion_queue
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_initialize_unsolicited_frame_queue
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_phy_timer_stop
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|BOOL
name|scic_sds_controller_is_start_complete
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_controller_start_next_phy
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_controller_stop_phys
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_controller_stop_ports
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_controller_stop_devices
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_copy_task_context
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_timeout_handler
parameter_list|(
name|SCI_CONTROLLER_HANDLE_T
name|controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_initialize_power_control
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_register_setup
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_reset_hardware
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|ARLINGTON_BUILD
name|void
name|scic_sds_controller_lex_atux_initialization
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
name|void
name|scic_sds_controller_enable_chipwatch
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|// ARLINGTON_BUILD
name|void
name|scic_sds_controller_build_memory_descriptor_table
parameter_list|(
name|SCIC_SDS_CONTROLLER_T
modifier|*
name|this_controller
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIC_SDS_CONTROLLER_H_
end_comment

end_unit

