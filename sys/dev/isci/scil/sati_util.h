begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SATI_UTIL_H_
end_ifndef

begin_define
define|#
directive|define
name|_SATI_UTIL_H_
end_define

begin_comment
comment|/**  * @file  * @brief This file contains all of the interface methods, macros, structures  *        that provide general support for SATI.  Some methods can be utilized  *        by a user to construct ATA/ATAPI commands, copy ATA device  *        structure data, fill in sense data, etc.  */
end_comment

begin_include
include|#
directive|include
file|<dev/isci/scil/sati_types.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/sati_translator_sequence.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/intel_sata.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/intel_sas.h>
end_include

begin_comment
comment|/**  * This macro allows the translator to be able to handle environments where  * the contents of the CDB are of a different endian nature of byte swapped  * in some fashion.  */
end_comment

begin_define
define|#
directive|define
name|sati_get_cdb_byte
parameter_list|(
name|the_cdb
parameter_list|,
name|index
parameter_list|)
value|(the_cdb)[(index)]
end_define

begin_define
define|#
directive|define
name|sati_get_ata_status
parameter_list|(
name|the_reg_fis
parameter_list|)
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->status
end_define

begin_define
define|#
directive|define
name|sati_get_ata_error
parameter_list|(
name|the_reg_fis
parameter_list|)
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->error
end_define

begin_define
define|#
directive|define
name|sati_get_ata_command
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->command
end_define

begin_define
define|#
directive|define
name|sati_get_ata_sector_count
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->sector_count
end_define

begin_define
define|#
directive|define
name|sati_get_ata_sector_count_exp
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->sector_count_exp
end_define

begin_define
define|#
directive|define
name|sati_get_ata_lba_low
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->lba_low
end_define

begin_define
define|#
directive|define
name|sati_get_ata_lba_mid
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->lba_mid
end_define

begin_define
define|#
directive|define
name|sati_get_ata_lba_high
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->lba_high
end_define

begin_define
define|#
directive|define
name|sati_get_ata_sector_count_ext
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->sector_count_exp
end_define

begin_define
define|#
directive|define
name|sati_get_ata_lba_low_ext
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->lba_low_exp
end_define

begin_define
define|#
directive|define
name|sati_get_ata_lba_mid_ext
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->lba_mid_exp
end_define

begin_define
define|#
directive|define
name|sati_get_ata_lba_high_ext
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->lba_high_exp
end_define

begin_define
define|#
directive|define
name|sati_get_ata_device
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->device
end_define

begin_define
define|#
directive|define
name|sati_set_ata_status
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_D2H_T*)(the_reg_fis))->status = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_sata_fis_type
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->fis_type = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_sata_command_flag
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->command_flag = 1
end_define

begin_define
define|#
directive|define
name|sati_clear_sata_command_flag
parameter_list|(
name|the_reg_fis
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->command_flag = 0
end_define

begin_define
define|#
directive|define
name|sati_set_ata_command
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->command = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_features
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->features = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_features_exp
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->features_exp = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_control
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->control = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_sector_count
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->sector_count = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_sector_count_exp
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->sector_count_exp = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_lba_low
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->lba_low = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_lba_mid
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->lba_mid = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_lba_high
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->lba_high = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_lba_low_exp
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->lba_low_exp = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_lba_mid_exp
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->lba_mid_exp = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_lba_high_exp
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->lba_high_exp = (value)
end_define

begin_define
define|#
directive|define
name|sati_set_ata_device_head
parameter_list|(
name|the_reg_fis
parameter_list|,
name|value
parameter_list|)
define|\
value|((SATA_FIS_REG_H2D_T*)(the_reg_fis))->device = (value)
end_define

begin_define
define|#
directive|define
name|ATA_MID_REGISTER_THRESHOLD_EXCEEDED
value|0xF4
end_define

begin_define
define|#
directive|define
name|ATA_HIGH_REGISTER_THRESHOLD_EXCEEDED
value|0x2C
end_define

begin_define
define|#
directive|define
name|ATA_MICROCODE_OFFSET_DOWNLOAD
value|0x03
end_define

begin_define
define|#
directive|define
name|ATA_MICROCODE_DOWNLOAD_SAVE
value|0x07
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|MIN
end_ifndef

begin_define
define|#
directive|define
name|MIN
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|((x)< (y) ? (x) : (y))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|MAX
end_ifndef

begin_define
define|#
directive|define
name|MAX
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|((x)> (y) ? (x) : (y))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|sati_ata_non_data_command
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_identify_device_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_execute_device_diagnostic_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_identify_device_copy_data
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|destination_scsi_io
parameter_list|,
name|U32
name|destination_offset
parameter_list|,
name|U8
modifier|*
name|source_buffer
parameter_list|,
name|U32
name|source_offset
parameter_list|,
name|U32
name|length
parameter_list|,
name|BOOL
name|use_printable_chars
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_copy_data
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|destination_scsi_io
parameter_list|,
name|U32
name|destination_offset
parameter_list|,
name|U8
modifier|*
name|source_buffer
parameter_list|,
name|U32
name|length
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_identify_device_get_sector_info
parameter_list|(
name|ATA_IDENTIFY_DEVICE_DATA_T
modifier|*
name|identify
parameter_list|,
name|U32
modifier|*
name|lba_high
parameter_list|,
name|U32
modifier|*
name|lba_low
parameter_list|,
name|U32
modifier|*
name|sector_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_check_power_mode_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|U8
name|sati_scsi_get_sense_data_length
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_scsi_common_response_iu_construct
parameter_list|(
name|SCI_SSP_RESPONSE_IU_T
modifier|*
name|rsp_iu
parameter_list|,
name|U8
name|scsi_status
parameter_list|,
name|U8
name|sense_data_length
parameter_list|,
name|U8
name|data_present
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_scsi_sense_data_construct
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|,
name|U8
name|status
parameter_list|,
name|U8
name|sense_key
parameter_list|,
name|U8
name|additional_sense_code
parameter_list|,
name|U8
name|additional_sense_code_qualifier
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_scsi_fixed_sense_data_construct
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|,
name|U8
name|response_code
parameter_list|,
name|U8
name|scsi_status
parameter_list|,
name|U8
name|sense_key
parameter_list|,
name|U8
name|additional_sense_code
parameter_list|,
name|U8
name|additional_sense_code_qualifier
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_scsi_descriptor_sense_data_construct
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|,
name|U8
name|response_code
parameter_list|,
name|U8
name|scsi_status
parameter_list|,
name|U8
name|sense_key
parameter_list|,
name|U8
name|additional_sense_code
parameter_list|,
name|U8
name|additional_sense_code_qualifier
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_scsi_read_ncq_error_sense_construct
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|,
name|void
modifier|*
name|ata_input_data
parameter_list|,
name|U8
name|scsi_status
parameter_list|,
name|U8
name|sense_key
parameter_list|,
name|U8
name|additional_sense_code
parameter_list|,
name|U8
name|additional_sense_code_qualifier
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_scsi_read_error_sense_construct
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|,
name|void
modifier|*
name|ata_io
parameter_list|,
name|U8
name|status
parameter_list|,
name|U8
name|sense_key
parameter_list|,
name|U8
name|additional_sense_code
parameter_list|,
name|U8
name|additional_sense_code_qualifier
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_scsi_response_data_construct
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|,
name|U8
name|response_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_get_data_byte
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|,
name|U32
name|byte_offset
parameter_list|,
name|U8
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_set_data_byte
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|,
name|U32
name|byte_offset
parameter_list|,
name|U8
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_set_data_dword
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|,
name|U32
name|byte_offset
parameter_list|,
name|U32
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_set_sense_data_byte
parameter_list|(
name|U8
modifier|*
name|sense_data
parameter_list|,
name|U32
name|max_sense_data_len
parameter_list|,
name|U32
name|byte_offset
parameter_list|,
name|U8
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_flush_cache_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_standby_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|U16
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_standby_immediate_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_idle_immediate_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_idle_immediate_unload_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_idle_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_media_eject_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_read_verify_sectors_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_smart_return_status_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|U8
name|feature_value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_smart_read_log_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|U8
name|log_address
parameter_list|,
name|U32
name|transfer_length
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_write_uncorrectable_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|U8
name|feature_value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_set_features_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|U8
name|feature
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_read_log_ext_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|U8
name|log_address
parameter_list|,
name|U32
name|transfer_length
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|BOOL
name|sati_device_state_stopped
parameter_list|(
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|void
modifier|*
name|scsi_io
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_read_buffer_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_write_buffer_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sati_ata_download_microcode_construct
parameter_list|(
name|void
modifier|*
name|ata_io
parameter_list|,
name|SATI_TRANSLATOR_SEQUENCE_T
modifier|*
name|sequence
parameter_list|,
name|U8
name|mode
parameter_list|,
name|U32
name|block_count
parameter_list|,
name|U32
name|buffer_offset
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SATI_UTIL_H_
end_comment

end_unit

