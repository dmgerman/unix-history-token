begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCU_COMPLETION_CODES_HEADER_
end_ifndef

begin_define
define|#
directive|define
name|_SCU_COMPLETION_CODES_HEADER_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains the constants and macros for the SCU hardware  *        completion codes.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
define|#
directive|define
name|SCU_COMPLETION_TYPE_SHIFT
value|28
define|#
directive|define
name|SCU_COMPLETION_TYPE_MASK
value|0x70000000
comment|/**  * This macro constructs an SCU completion type  */
define|#
directive|define
name|SCU_COMPLETION_TYPE
parameter_list|(
name|type
parameter_list|)
define|\
value|((U32)(type)<< SCU_COMPLETION_TYPE_SHIFT)
comment|/**  * These macros contain the SCU completion types  *  * @name SCU_COMPLETION_TYPE  */
comment|/*@}*/
define|#
directive|define
name|SCU_COMPLETION_TYPE_TASK
value|SCU_COMPLETION_TYPE(0)
define|#
directive|define
name|SCU_COMPLETION_TYPE_SDMA
value|SCU_COMPLETION_TYPE(1)
define|#
directive|define
name|SCU_COMPLETION_TYPE_UFI
value|SCU_COMPLETION_TYPE(2)
define|#
directive|define
name|SCU_COMPLETION_TYPE_EVENT
value|SCU_COMPLETION_TYPE(3)
define|#
directive|define
name|SCU_COMPLETION_TYPE_NOTIFY
value|SCU_COMPLETION_TYPE(4)
comment|/*@}*/
comment|/**  * These constants provide the shift and mask values for the various parts of  * an SCU completion code.  */
define|#
directive|define
name|SCU_COMPLETION_STATUS_MASK
value|0x0FFC0000
define|#
directive|define
name|SCU_COMPLETION_TL_STATUS_MASK
value|0x0FC00000
define|#
directive|define
name|SCU_COMPLETION_TL_STATUS_SHIFT
value|22
define|#
directive|define
name|SCU_COMPLETION_SDMA_STATUS_MASK
value|0x003C0000
define|#
directive|define
name|SCU_COMPLETION_PEG_MASK
value|0x00010000
define|#
directive|define
name|SCU_COMPLETION_PORT_MASK
value|0x00007000
define|#
directive|define
name|SCU_COMPLETION_PE_MASK
value|SCU_COMPLETION_PORT_MASK
define|#
directive|define
name|SCU_COMPLETION_PE_SHIFT
value|12
define|#
directive|define
name|SCU_COMPLETION_INDEX_MASK
value|0x00000FFF
comment|/**  * This macro returns the SCU completion type.  */
define|#
directive|define
name|SCU_GET_COMPLETION_TYPE
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|((completion_code)& SCU_COMPLETION_TYPE_MASK)
comment|/**  * This macro returns the SCU completion status.  */
define|#
directive|define
name|SCU_GET_COMPLETION_STATUS
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|((completion_code)& SCU_COMPLETION_STATUS_MASK)
comment|/**  * This macro returns the transport layer completion status.  */
define|#
directive|define
name|SCU_GET_COMPLETION_TL_STATUS
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|((completion_code)& SCU_COMPLETION_TL_STATUS_MASK)
comment|/**  * This macro takes a completion code and performs the shift and mask  * operations to turn it into a completion code that can be compared to a  * SCU_GET_COMPLETION_TL_STATUS.  */
define|#
directive|define
name|SCU_MAKE_COMPLETION_STATUS
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|((U32)(completion_code)<< SCU_COMPLETION_TL_STATUS_SHIFT)
comment|/**  * This macro takes a SCU_GET_COMPLETION_TL_STATUS and normalizes it for a  * return code.  */
define|#
directive|define
name|SCU_NORMALIZE_COMPLETION_STATUS
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|( \       ((U32)((completion_code)& SCU_COMPLETION_TL_STATUS_MASK)) \>> SCU_COMPLETION_TL_STATUS_SHIFT \    )
comment|/**  * This macro returns the SDMA completion status.  */
define|#
directive|define
name|SCU_GET_COMPLETION_SDMA_STATUS
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|((completion_code)& SCU_COMPLETION_SDMA_STATUS_MASK)
comment|/**  * This macro returns the Protocol Engine Group from the completion code.  */
define|#
directive|define
name|SCU_GET_COMPLETION_PEG
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|((completion_code)& SCU_COMPLETION_PEG_MASK)
comment|/**  * This macro reuturns the logical port index from the completion code.  */
define|#
directive|define
name|SCU_GET_COMPLETION_PORT
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|((completion_code)& SCU_COMPLETION_PORT_MASK)
comment|/**  * This macro returns the PE index from the completion code.  */
define|#
directive|define
name|SCU_GET_PROTOCOL_ENGINE_INDEX
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|(((U32)((completion_code)& SCU_COMPLETION_PE_MASK))>> SCU_COMPLETION_PE_SHIFT)
comment|/**  * This macro returns the index of the completion which is either a TCi or an  * RNi depending on the completion type.  */
define|#
directive|define
name|SCU_GET_COMPLETION_INDEX
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|((completion_code)& SCU_COMPLETION_INDEX_MASK)
define|#
directive|define
name|SCU_UNSOLICITED_FRAME_MASK
value|0x0FFF0000
define|#
directive|define
name|SCU_UNSOLICITED_FRAME_SHIFT
value|16
comment|/**  * This macro returns a normalized frame index from an unsolicited frame  * completion.  */
define|#
directive|define
name|SCU_GET_FRAME_INDEX
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|( \         ((U32)((completion_code)& SCU_UNSOLICITED_FRAME_MASK)) \>> SCU_UNSOLICITED_FRAME_SHIFT \    )
define|#
directive|define
name|SCU_UNSOLICITED_FRAME_ERROR_MASK
value|0x00008000
comment|/**  * This macro returns a zero (0) value if there is no frame error otherwise  * it returns non-zero (!0).  */
define|#
directive|define
name|SCU_GET_FRAME_ERROR
parameter_list|(
name|completion_code
parameter_list|)
define|\
value|((completion_code)& SCU_UNSOLICITED_FRAME_ERROR_MASK)
comment|/**  * These constants represent normalized completion codes which must be shifted  * 18 bits to match it with the hardware completion code. In a 16-bit compiler,  * immediate constants are 16-bit values (the size of an int). If we shift those  * by 18 bits, we completely lose the value. To ensure the value is a 32-bit  * value like we want, each immediate value must be cast to a U32.  */
define|#
directive|define
name|SCU_TASK_DONE_GOOD
value|((U32)0x00)
define|#
directive|define
name|SCU_TASK_DONE_CRC_ERR
value|((U32)0x14)
define|#
directive|define
name|SCU_TASK_DONE_CHECK_RESPONSE
value|((U32)0x14)
define|#
directive|define
name|SCU_TASK_DONE_GEN_RESPONSE
value|((U32)0x15)
define|#
directive|define
name|SCU_TASK_DONE_NAK_CMD_ERR
value|((U32)0x16)
define|#
directive|define
name|SCU_TASK_DONE_CMD_LL_R_ERR
value|((U32)0x16)
define|#
directive|define
name|SCU_TASK_DONE_LL_R_ERR
value|((U32)0x17)
define|#
directive|define
name|SCU_TASK_DONE_ACK_NAK_TO
value|((U32)0x17)
define|#
directive|define
name|SCU_TASK_DONE_LL_PERR
value|((U32)0x18)
define|#
directive|define
name|SCU_TASK_DONE_LL_SY_TERM
value|((U32)0x19)
define|#
directive|define
name|SCU_TASK_DONE_NAK_ERR
value|((U32)0x19)
define|#
directive|define
name|SCU_TASK_DONE_LL_LF_TERM
value|((U32)0x1A)
define|#
directive|define
name|SCU_TASK_DONE_DATA_LEN_ERR
value|((U32)0x1A)
define|#
directive|define
name|SCU_TASK_DONE_LL_CL_TERM
value|((U32)0x1B)
define|#
directive|define
name|SCU_TASK_DONE_LL_ABORT_ERR
value|((U32)0x1B)
define|#
directive|define
name|SCU_TASK_DONE_SEQ_INV_TYPE
value|((U32)0x1C)
define|#
directive|define
name|SCU_TASK_DONE_UNEXP_XR
value|((U32)0x1C)
define|#
directive|define
name|SCU_TASK_DONE_INV_FIS_TYPE
value|((U32)0x1D)
define|#
directive|define
name|SCU_TASK_DONE_XR_IU_LEN_ERR
value|((U32)0x1D)
define|#
directive|define
name|SCU_TASK_DONE_INV_FIS_LEN
value|((U32)0x1E)
define|#
directive|define
name|SCU_TASK_DONE_XR_WD_LEN
value|((U32)0x1E)
define|#
directive|define
name|SCU_TASK_DONE_SDMA_ERR
value|((U32)0x1F)
define|#
directive|define
name|SCU_TASK_DONE_OFFSET_ERR
value|((U32)0x20)
define|#
directive|define
name|SCU_TASK_DONE_MAX_PLD_ERR
value|((U32)0x21)
define|#
directive|define
name|SCU_TASK_DONE_EXCESS_DATA
value|((U32)0x22)
define|#
directive|define
name|SCU_TASK_DONE_LF_ERR
value|((U32)0x23)
define|#
directive|define
name|SCU_TASK_DONE_UNEXP_FIS
value|((U32)0x24)
define|#
directive|define
name|SCU_TASK_DONE_UNEXP_RESP
value|((U32)0x24)
define|#
directive|define
name|SCU_TASK_DONE_EARLY_RESP
value|((U32)0x25)
define|#
directive|define
name|SCU_TASK_DONE_SMP_RESP_TO_ERR
value|((U32)0x26)
define|#
directive|define
name|SCU_TASK_DONE_DMASETUP_DIRERR
value|((U32)0x27)
define|#
directive|define
name|SCU_TASK_DONE_SMP_UFI_ERR
value|((U32)0x27)
define|#
directive|define
name|SCU_TASK_DONE_XFERCNT_ERR
value|((U32)0x28)
define|#
directive|define
name|SCU_TASK_DONE_SMP_FRM_TYPE_ERR
value|((U32)0x28)
define|#
directive|define
name|SCU_TASK_DONE_SMP_LL_RX_ERR
value|((U32)0x29)
define|#
directive|define
name|SCU_TASK_DONE_RESP_LEN_ERR
value|((U32)0x2A)
define|#
directive|define
name|SCU_TASK_DONE_UNEXP_DATA
value|((U32)0x2B)
define|#
directive|define
name|SCU_TASK_DONE_OPEN_FAIL
value|((U32)0x2C)
define|#
directive|define
name|SCU_TASK_DONE_UNEXP_SDBFIS
value|((U32)0x2D)
define|#
directive|define
name|SCU_TASK_DONE_REG_ERR
value|((U32)0x2E)
define|#
directive|define
name|SCU_TASK_DONE_SDB_ERR
value|((U32)0x2F)
define|#
directive|define
name|SCU_TASK_DONE_TASK_ABORT
value|((U32)0x30)
if|#
directive|if
name|defined
argument_list|(
name|PBG_HBA_BETA_BUILD
argument_list|)
define|#
directive|define
name|SCU_TASK_DONE_CMD_SDMA_ERR
value|((U32)0x32)
define|#
directive|define
name|SCU_TASK_DONE_CMD_LL_ABORT_ERR
value|((U32)0x33)
endif|#
directive|endif
define|#
directive|define
name|SCU_TASK_OPEN_REJECT_WRONG_DESTINATION
value|((U32)0x34)
define|#
directive|define
name|SCU_TASK_OPEN_REJECT_RESERVED_ABANDON_1
value|((U32)0x35)
define|#
directive|define
name|SCU_TASK_OPEN_REJECT_RESERVED_ABANDON_2
value|((U32)0x36)
define|#
directive|define
name|SCU_TASK_OPEN_REJECT_RESERVED_ABANDON_3
value|((U32)0x37)
define|#
directive|define
name|SCU_TASK_OPEN_REJECT_BAD_DESTINATION
value|((U32)0x38)
define|#
directive|define
name|SCU_TASK_OPEN_REJECT_ZONE_VIOLATION
value|((U32)0x39)
define|#
directive|define
name|SCU_TASK_DONE_VIIT_ENTRY_NV
value|((U32)0x3A)
define|#
directive|define
name|SCU_TASK_DONE_IIT_ENTRY_NV
value|((U32)0x3B)
define|#
directive|define
name|SCU_TASK_DONE_RNCNV_OUTBOUND
value|((U32)0x3C)
define|#
directive|define
name|SCU_TASK_OPEN_REJECT_STP_RESOURCES_BUSY
value|((U32)0x3D)
define|#
directive|define
name|SCU_TASK_OPEN_REJECT_PROTOCOL_NOT_SUPPORTED
value|((U32)0x3E)
define|#
directive|define
name|SCU_TASK_OPEN_REJECT_CONNECTION_RATE_NOT_SUPPORTED
value|((U32)0x3F)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCU_COMPLETION_CODES_HEADER_
end_comment

end_unit

