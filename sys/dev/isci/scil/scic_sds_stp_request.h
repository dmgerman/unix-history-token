begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIC_SDS_STP_REQUEST_T_
end_ifndef

begin_define
define|#
directive|define
name|_SCIC_SDS_STP_REQUEST_T_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<dev/isci/scil/intel_sata.h>
include|#
directive|include
file|<dev/isci/scil/sci_types.h>
include|#
directive|include
file|<dev/isci/scil/scic_sds_request.h>
comment|/**  * @struct  *  * @brief This structure represents the additional information that is  *        required to handle SATA PIO requests.  */
typedef|typedef
struct|struct
name|SCIC_SDS_STP_REQUEST
block|{
name|SCIC_SDS_REQUEST_T
name|parent
decl_stmt|;
name|SATA_FIS_REG_D2H_T
name|d2h_reg_fis
decl_stmt|;
union|union
block|{
name|U32
name|ncq
decl_stmt|;
name|U32
name|udma
decl_stmt|;
struct|struct
block|{
comment|/**           * Total transfer for the entire PIO request recorded at request construction           * time.           *           * @todo Should we just decrement this value for each byte of data transitted           *       or received to elemenate the current_transfer_bytes field?           */
name|U32
name|total_transfer_bytes
decl_stmt|;
comment|/**           * Total number of bytes received/transmitted in data frames since the start           * of the IO request.  At the end of the IO request this should equal the           * total_transfer_bytes.           */
name|U32
name|current_transfer_bytes
decl_stmt|;
comment|/**           * The number of bytes requested in the in the PIO setup.           */
name|U32
name|pio_transfer_bytes
decl_stmt|;
comment|/**           * PIO Setup ending status value to tell us if we need to wait for another FIS           * or if the transfer is complete. On the receipt of a D2H FIS this will be           * the status field of that FIS.           */
name|U8
name|ending_status
decl_stmt|;
comment|/**           * On receipt of a D2H FIS this will be the ending error field if the           * ending_status has the SATA_STATUS_ERR bit set.           */
name|U8
name|ending_error
decl_stmt|;
comment|/**           * Protocol Type. This is filled in by core during IO Request construction type.           */
name|U8
name|sat_protocol
decl_stmt|;
comment|/**          * This field keeps track of sgl pair to be retrieved from OS memory for processing.          */
name|U8
name|sgl_pair_index
decl_stmt|;
struct|struct
block|{
name|SCU_SGL_ELEMENT_PAIR_T
modifier|*
name|sgl_pair
decl_stmt|;
name|U8
name|sgl_set
decl_stmt|;
name|U32
name|sgl_offset
decl_stmt|;
block|}
name|request_current
struct|;
block|}
name|pio
struct|;
struct|struct
block|{
comment|/**           * The number of bytes requested in the PIO setup before CDB data frame.           */
name|U32
name|device_preferred_cdb_length
decl_stmt|;
block|}
name|packet
struct|;
block|}
name|type
union|;
block|}
name|SCIC_SDS_STP_REQUEST_T
typedef|;
comment|/**  * @enum SCIC_SDS_STP_REQUEST_STARTED_UDMA_SUBSTATES  *  * @brief This enumeration depicts the various sub-states associated with  *        a SATA/STP UDMA protocol operation.  */
enum|enum
name|SCIC_SDS_STP_REQUEST_STARTED_UDMA_SUBSTATES
block|{
name|SCIC_SDS_STP_REQUEST_STARTED_UDMA_AWAIT_TC_COMPLETION_SUBSTATE
block|,
name|SCIC_SDS_STP_REQUEST_STARTED_UDMA_AWAIT_D2H_REG_FIS_SUBSTATE
block|,
name|SCIC_SDS_STP_REQUEST_STARTED_UDMA_MAX_SUBSTATES
block|}
enum|;
comment|/**  * @enum SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_SUBSTATES  *  * @brief This enumeration depicts the various sub-states associated with  *        a SATA/STP non-data protocol operation.  */
enum|enum
name|SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_SUBSTATES
block|{
name|SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_AWAIT_H2D_COMPLETION_SUBSTATE
block|,
name|SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_AWAIT_D2H_SUBSTATE
block|,
name|SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_MAX_SUBSTATES
block|}
enum|;
comment|/**  * @enum SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_SUBSTATES  *  * @brief THis enumeration depicts the various sub-states associated with a  *        SATA/STP soft reset operation.  */
enum|enum
name|SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_SUBSTATES
block|{
name|SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_AWAIT_H2D_ASSERTED_COMPLETION_SUBSTATE
block|,
name|SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_AWAIT_H2D_DIAGNOSTIC_COMPLETION_SUBSTATE
block|,
name|SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_AWAIT_D2H_RESPONSE_FRAME_SUBSTATE
block|,
name|SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_MAX_SUBSTATES
block|}
enum|;
specifier|extern
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER_T
name|scic_sds_stp_request_started_udma_substate_handler_table
index|[
name|SCIC_SDS_STP_REQUEST_STARTED_UDMA_MAX_SUBSTATES
index|]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_stp_request_started_udma_substate_table
index|[
name|SCIC_SDS_STP_REQUEST_STARTED_UDMA_MAX_SUBSTATES
index|]
decl_stmt|;
specifier|extern
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER_T
name|scic_sds_stp_request_started_non_data_substate_handler_table
index|[
name|SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_MAX_SUBSTATES
index|]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_stp_request_started_non_data_substate_table
index|[
name|SCIC_SDS_STP_REQUEST_STARTED_NON_DATA_MAX_SUBSTATES
index|]
decl_stmt|;
specifier|extern
name|SCIC_SDS_IO_REQUEST_STATE_HANDLER_T
name|scic_sds_stp_request_started_soft_reset_substate_handler_table
index|[
name|SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_MAX_SUBSTATES
index|]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_stp_request_started_soft_reset_substate_table
index|[
name|SCIC_SDS_STP_REQUEST_STARTED_SOFT_RESET_MAX_SUBSTATES
index|]
decl_stmt|;
comment|// ---------------------------------------------------------------------------
name|U32
name|scic_sds_stp_request_get_object_size
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|U32
name|scic_sds_stp_task_request_get_object_size
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|scu_sata_reqeust_construct_task_context
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|SCU_TASK_CONTEXT_T
modifier|*
name|task_context
parameter_list|)
function_decl|;
name|void
name|scic_sds_stp_non_ncq_request_construct
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_stp_pio_request_construct
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|scic_io_request
parameter_list|,
name|U8
name|sat_protocol
parameter_list|,
name|BOOL
name|copy_rx_frame
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_stp_pio_request_construct_pass_through
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|scic_io_request
parameter_list|,
name|SCIC_STP_PASSTHRU_REQUEST_CALLBACKS_T
modifier|*
name|passthru_cb
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_stp_udma_request_construct
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|transfer_length
parameter_list|,
name|SCI_IO_REQUEST_DATA_DIRECTION
name|data_direction
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_stp_non_data_request_construct
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_stp_soft_reset_request_construct
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_stp_ncq_request_construct
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U32
name|transfer_length
parameter_list|,
name|SCI_IO_REQUEST_DATA_DIRECTION
name|data_direction
parameter_list|)
function_decl|;
name|void
name|scu_stp_raw_request_construct_task_context
parameter_list|(
name|SCIC_SDS_STP_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|SCU_TASK_CONTEXT_T
modifier|*
name|task_context
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_io_request_construct_sata
parameter_list|(
name|SCIC_SDS_REQUEST_T
modifier|*
name|this_request
parameter_list|,
name|U8
name|sat_protocol
parameter_list|,
name|U32
name|transfer_length
parameter_list|,
name|SCI_IO_REQUEST_DATA_DIRECTION
name|data_direction
parameter_list|,
name|BOOL
name|copy_rx_frame
parameter_list|,
name|BOOL
name|do_translate_sgl
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIC_SDS_STP_REQUEST_T_
end_comment

end_unit

