begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIF_SAS_REMOTE_DEVICE_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCIF_SAS_REMOTE_DEVICE_H_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains the protected interface structures, constants,  *        and methods for the SCIF_SAS_REMOTE_DEVICE object.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<dev/isci/scil/scif_remote_device.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_remote_device.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_request.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_state_machine_logger.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_stp_remote_device.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_smp_remote_device.h>
struct_decl|struct
name|SCIF_SAS_DOMAIN
struct_decl|;
struct_decl|struct
name|SCIF_SAS_REMOTE_DEVICE
struct_decl|;
struct_decl|struct
name|SCIF_SAS_REQUEST
struct_decl|;
comment|/**  * This constant indicates the number of milliseconds to wait for the core  * to start/stop it's remote device object.  */
define|#
directive|define
name|SCIF_SAS_REMOTE_DEVICE_CORE_OP_TIMEOUT
value|1000
comment|/**  * @enum _SCIF_SAS_REMOTE_DEVICE_STARTING_SUBSTATES  *  * @brief This enumeration depicts all the substates for the remote device's  *        starting substate machine.  */
typedef|typedef
enum|enum
name|_SCIF_SAS_REMOTE_DEVICE_STARTING_SUBSTATES
block|{
comment|/**     * This state indicates that the framework is waiting for the core to     * issue a scic_cb_remote_device_start_complete() notification.     */
name|SCIF_SAS_REMOTE_DEVICE_STARTING_SUBSTATE_AWAIT_COMPLETE
block|,
comment|/**     * This state indicates that the core has received the core's     * scic_cb_remote_device_start_complete() notification.     */
name|SCIF_SAS_REMOTE_DEVICE_STARTING_SUBSTATE_AWAIT_READY
block|,
name|SCIF_SAS_REMOTE_DEVICE_STARTING_SUBSTATE_MAX_STATES
block|}
name|SCIF_SAS_REMOTE_DEVICE_STARTING_SUBSTATES
typedef|;
comment|/**  * @enum _SCIF_SAS_REMOTE_DEVICE_READY_SUBSTATES  *  * @brief This enumeration depicts all of the substates for the remote  *        device READY substate machine.  */
typedef|typedef
enum|enum
name|_SCIF_SAS_REMOTE_DEVICE_READY_SUBSTATES
block|{
comment|/**     * The Operational sub-state indicates that the remote device object     * is capable of receiving and handling all request types.     */
name|SCIF_SAS_REMOTE_DEVICE_READY_SUBSTATE_OPERATIONAL
block|,
comment|/**     * This substate indicates that core remote device is not ready.     * As a result, no new IO or Task Management requests are allowed.     */
name|SCIF_SAS_REMOTE_DEVICE_READY_SUBSTATE_SUSPENDED
block|,
comment|/**     * This substate indicates that task management to this device is     * ongoing and new IO requests are not allowed.     */
name|SCIF_SAS_REMOTE_DEVICE_READY_SUBSTATE_TASK_MGMT
block|,
comment|/**    * This substate indicates that core remote device is not ready due    *  to an NCQ error.  As a result, no new IO requests are allowed.    */
name|SCIF_SAS_REMOTE_DEVICE_READY_SUBSTATE_NCQ_ERROR
block|,
name|SCIF_SAS_REMOTE_DEVICE_READY_SUBSTATE_MAX_STATES
block|}
name|SCIF_SAS_REMOTE_DEVICE_READY_SUBSTATES
typedef|;
struct_decl|struct
name|SCIF_SAS_REMOTE_DEVICE
struct_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SCIF_SAS_REMOTE_DEVICE_COMPLETION_HANDLER_T
function_decl|)
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
parameter_list|,
name|SCI_STATUS
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SCIF_SAS_REMOTE_DEVICE_HANDLER_T
function_decl|)
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SCIF_SAS_REMOTE_DEVICE_NOT_READY_HANDLER_T
function_decl|)
parameter_list|(
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
parameter_list|,
name|U32
parameter_list|)
function_decl|;
comment|/**  * @struct SCIF_SAS_REMOTE_DEVICE_STATE_HANDLER  *  * @brief This structure defines the state handler methods for states and  *        substates applicable for the framework remote device object.  */
typedef|typedef
struct|struct
name|SCIF_SAS_REMOTE_DEVICE_STATE_HANDLER
block|{
name|SCI_BASE_REMOTE_DEVICE_STATE_HANDLER_T
name|parent
decl_stmt|;
name|SCIF_SAS_REMOTE_DEVICE_COMPLETION_HANDLER_T
name|start_complete_handler
decl_stmt|;
name|SCIF_SAS_REMOTE_DEVICE_COMPLETION_HANDLER_T
name|stop_complete_handler
decl_stmt|;
name|SCIF_SAS_REMOTE_DEVICE_HANDLER_T
name|ready_handler
decl_stmt|;
name|SCIF_SAS_REMOTE_DEVICE_NOT_READY_HANDLER_T
name|not_ready_handler
decl_stmt|;
name|SCI_BASE_REMOTE_DEVICE_REQUEST_HANDLER_T
name|start_high_priority_io_handler
decl_stmt|;
name|SCI_BASE_REMOTE_DEVICE_HIGH_PRIORITY_REQUEST_COMPLETE_HANDLER_T
name|complete_high_priority_io_handler
decl_stmt|;
block|}
name|SCIF_SAS_REMOTE_DEVICE_STATE_HANDLER_T
typedef|;
comment|/**  * @struct SCIF_SAS_REMOTE_DEVICE  *  * @brief The SCI SAS Framework remote device object abstracts the SAS remote  *        device level behavior for the framework component.  Additionally,  *        it provides a higher level of abstraction for the core remote  *        device object.  */
typedef|typedef
struct|struct
name|SCIF_SAS_REMOTE_DEVICE
block|{
comment|/**     * The SCI_BASE_REMOTE_DEVICE is the parent object for the     * SCIF_SAS_REMOTE_DEVICE object.     */
name|SCI_BASE_REMOTE_DEVICE_T
name|parent
decl_stmt|;
comment|/**     * This field contains the handle for the SCI Core remote device object     * that is managed by this framework controller.     */
name|SCI_REMOTE_DEVICE_HANDLE_T
name|core_object
decl_stmt|;
comment|/**     * This field references the list of state specific handler methods to     * be utilized for this remote device instance.     */
name|SCIF_SAS_REMOTE_DEVICE_STATE_HANDLER_T
modifier|*
name|state_handlers
decl_stmt|;
comment|/**     * This field specifies the state machine utilized to manage the     * starting remote device substate machine.     */
name|SCI_BASE_STATE_MACHINE_T
name|starting_substate_machine
decl_stmt|;
comment|/**     * This field specifies the state machine utilized to manage the     * starting remote device substate machine.     */
name|SCI_BASE_STATE_MACHINE_T
name|ready_substate_machine
decl_stmt|;
union|union
block|{
comment|/**        * This field specifies the information specific to SATA/STP device        * instances.  This field is not utilized for SSP/SMP.        */
name|SCIF_SAS_STP_REMOTE_DEVICE_T
name|stp_device
decl_stmt|;
comment|/**        * This field specifies the information specific to SMP device instances.        * This field is not utilized for SSP/SATA/STP.        */
name|SCIF_SAS_SMP_REMOTE_DEVICE_T
name|smp_device
decl_stmt|;
block|}
name|protocol_device
union|;
comment|/**     * This field indicates the domain object containing this remote device.     */
name|struct
name|SCIF_SAS_DOMAIN
modifier|*
name|domain
decl_stmt|;
comment|/**     * This field counts the number of requests (IO and task management)     * that are currently outstanding for this device.     */
name|U32
name|request_count
decl_stmt|;
comment|/**     * This field counts the number of only task management request that are     * currently outstanding for this device.     */
name|U32
name|task_request_count
decl_stmt|;
comment|/**     * This field is utilize to store the status value of various operations     * the can be executed on this remote device instance.     */
name|SCI_STATUS
name|operation_status
decl_stmt|;
comment|/**     * This field is utilize to indicate that the remote device should be     * destructed when it finally reaches the stopped state.  This will     * include destructing the core remote device as well.     */
name|BOOL
name|destruct_when_stopped
decl_stmt|;
comment|/**     * This field marks a device state of being discovered or not, majorly used     * during re-discover procedure.     */
name|BOOL
name|is_currently_discovered
decl_stmt|;
comment|/**     * This filed stores the expander device this device connected to, only if this     * device is behind expander. So this field also served as a flag to tell if a     * device is a EA one.     */
name|struct
name|SCIF_SAS_REMOTE_DEVICE
modifier|*
name|containing_device
decl_stmt|;
comment|/**     * This field stores the expander phy identifier for an expander attached     * device. This field is only used by expander attached device.     */
name|U8
name|expander_phy_identifier
decl_stmt|;
comment|/**     * This field stores the port width for a device. Most devices are narrow port     * device, their port width is 1. If a device is a wide port device, their     * port width is larger than 1.     */
name|U8
name|device_port_width
decl_stmt|;
comment|/**     * This field stores the destination state for a remote device in UPDATING     * PORT WIDTH state. The possible destination states for a remote device in     * UPDATING_PORT_WIDTH state are READY or STOPPING.     */
name|U16
name|destination_state
decl_stmt|;
comment|/**     * This field stores the scheduled/delayed EA target reset request.     */
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|ea_target_reset_request_scheduled
decl_stmt|;
ifdef|#
directive|ifdef
name|SCI_LOGGING
comment|/**     * This field is the observer of the base state machine for this device     * object.     */
name|SCI_BASE_OBSERVER_T
name|base_state_machine_observer
decl_stmt|;
comment|/**     * This field is the state machine logger of the startig substate machine for     * this device object.     */
name|SCI_BASE_STATE_MACHINE_LOGGER_T
name|starting_substate_machine_logger
decl_stmt|;
comment|/**     * This field is the state machine logger of the ready substate machine for     * this device object.     */
name|SCI_BASE_STATE_MACHINE_LOGGER_T
name|ready_substate_machine_logger
decl_stmt|;
endif|#
directive|endif
comment|// SCI_LOGGING
block|}
name|SCIF_SAS_REMOTE_DEVICE_T
typedef|;
specifier|extern
name|SCI_BASE_STATE_T
name|scif_sas_remote_device_state_table
index|[]
decl_stmt|;
specifier|extern
name|SCIF_SAS_REMOTE_DEVICE_STATE_HANDLER_T
name|scif_sas_remote_device_state_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scif_sas_remote_device_starting_substate_table
index|[]
decl_stmt|;
specifier|extern
name|SCIF_SAS_REMOTE_DEVICE_STATE_HANDLER_T
name|scif_sas_remote_device_starting_substate_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scif_sas_remote_device_ready_substate_table
index|[]
decl_stmt|;
specifier|extern
name|SCIF_SAS_REMOTE_DEVICE_STATE_HANDLER_T
name|scif_sas_remote_device_ready_substate_handler_table
index|[]
decl_stmt|;
comment|/**  * @enum  *  * This enumeration is used to define the end destination state for the  * framework remote device.  */
enum|enum
name|SCIF_SAS_REMOTE_DEVICE_DESTINATION_STATE
block|{
name|SCIF_SAS_REMOTE_DEVICE_DESTINATION_STATE_UNSPECIFIED
block|,
name|SCIF_SAS_REMOTE_DEVICE_DESTINATION_STATE_READY
block|,
name|SCIF_SAS_REMOTE_DEVICE_DESTINATION_STATE_STOPPING
block|,
name|SCIF_SAS_REMOTE_DEVICE_DESTINATION_STATE_UPDATING_PORT_WIDTH
block|}
enum|;
comment|//******************************************************************************
comment|//* P R O T E C T E D   M E T H O D S
comment|//******************************************************************************
name|void
name|scif_sas_remote_device_save_report_phy_sata_information
parameter_list|(
name|SMP_RESPONSE_REPORT_PHY_SATA_T
modifier|*
name|report_phy_sata_response
parameter_list|)
function_decl|;
name|void
name|scif_sas_remote_device_target_reset
parameter_list|(
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|,
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|fw_request
parameter_list|)
function_decl|;
name|void
name|scif_sas_remote_device_target_reset_complete
parameter_list|(
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|,
name|struct
name|SCIF_SAS_REQUEST
modifier|*
name|fw_request
parameter_list|,
name|SCI_STATUS
name|completion_status
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|SCI_LOGGING
name|void
name|scif_sas_remote_device_initialize_state_logging
parameter_list|(
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_remote_device_deinitialize_state_logging
parameter_list|(
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|)
function_decl|;
else|#
directive|else
comment|// SCI_LOGGING
define|#
directive|define
name|scif_sas_remote_device_initialize_state_logging
parameter_list|(
name|x
parameter_list|)
define|#
directive|define
name|scif_sas_remote_device_deinitialize_state_logging
parameter_list|(
name|x
parameter_list|)
endif|#
directive|endif
comment|// SCI_LOGGING
comment|//******************************************************************************
comment|//* R E A D Y   O P E R A T I O N A L   S T A T E   H A N D L E R S
comment|//******************************************************************************
name|SCI_STATUS
name|scif_sas_remote_device_ready_operational_complete_io_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_ready_operational_complete_task_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|task_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_ready_task_management_complete_task_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|task_request
parameter_list|)
function_decl|;
comment|//******************************************************************************
comment|//* D E F A U L T   S T A T E   H A N D L E R S
comment|//******************************************************************************
name|SCI_STATUS
name|scif_sas_remote_device_default_start_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_stop_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_reset_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_reset_complete_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_start_io_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|void
name|scif_sas_remote_device_default_start_complete_handler
parameter_list|(
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|,
name|SCI_STATUS
name|completion_status
parameter_list|)
function_decl|;
name|void
name|scif_sas_remote_device_default_stop_complete_handler
parameter_list|(
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|,
name|SCI_STATUS
name|completion_status
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_destruct_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_complete_io_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_complete_high_priority_io_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|io_request
parameter_list|,
name|void
modifier|*
name|response_data
parameter_list|,
name|SCI_IO_STATUS
name|completion_status
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_continue_io_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_start_task_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|task_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_default_complete_task_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|task_request
parameter_list|)
function_decl|;
name|void
name|scif_sas_remote_device_default_ready_handler
parameter_list|(
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_remote_device_default_not_ready_handler
parameter_list|(
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|,
name|U32
name|reason_code
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_ready_task_management_start_high_priority_io_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scif_sas_remote_device_ready_task_management_complete_high_priority_io_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|remote_device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|io_request
parameter_list|,
name|void
modifier|*
name|response_data
parameter_list|,
name|SCI_IO_STATUS
name|completion_status
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DISABLE_WIDE_PORTED_TARGETS
argument_list|)
name|SCI_STATUS
name|scif_sas_remote_device_update_port_width
parameter_list|(
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|,
name|U8
name|new_port_width
parameter_list|)
function_decl|;
else|#
directive|else
comment|// !defined(DISABLE_WIDE_PORTED_TARGETS)
define|#
directive|define
name|scif_sas_remote_device_update_port_width
parameter_list|(
name|device
parameter_list|)
value|SCI_FAILURE
endif|#
directive|endif
comment|//#if !defined(DISABLE_WIDE_PORTED_TARGETS)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIF_SAS_REMOTE_DEVICE_H_
end_comment

end_unit

