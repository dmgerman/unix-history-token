begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIC_SDS_REMOTE_DEVICE_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCIC_SDS_REMOTE_DEVICE_H_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains the structures, constants, and prototypes for the  *        SCIC_SDS_REMOTE_DEVICE object.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<dev/isci/scil/intel_sas.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_remote_device.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_request.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_state_machine_logger.h>
include|#
directive|include
file|<dev/isci/scil/scu_remote_node_context.h>
include|#
directive|include
file|<dev/isci/scil/scic_sds_remote_node_context.h>
struct_decl|struct
name|SCIC_SDS_CONTROLLER
struct_decl|;
struct_decl|struct
name|SCIC_SDS_PORT
struct_decl|;
struct_decl|struct
name|SCIC_SDS_REQUEST
struct_decl|;
struct_decl|struct
name|SCIC_SDS_REMOTE_DEVICE_STATE_HANDLER
struct_decl|;
comment|/**  * @enum SCIC_SDS_SSP_REMOTE_DEVICE_READY_SUBSTATES  *  * This is the enumeration of the ready substates for the  * SCIC_SDS_REMOTE_DEVICE.  */
enum|enum
name|SCIC_SDS_SSP_REMOTE_DEVICE_READY_SUBSTATES
block|{
comment|/**     * This is the initial state for the remote device ready substate.     */
name|SCIC_SDS_SSP_REMOTE_DEVICE_READY_SUBSTATE_INITIAL
block|,
comment|/**     * This is the ready operational substate for the remote device.  This is the     * normal operational state for a remote device.     */
name|SCIC_SDS_SSP_REMOTE_DEVICE_READY_SUBSTATE_OPERATIONAL
block|,
comment|/**     * This is the suspended state for the remote device.  This is the state that     * the device is placed in when a RNC suspend is received by the SCU hardware.     */
name|SCIC_SDS_SSP_REMOTE_DEVICE_READY_SUBSTATE_SUSPENDED
block|,
comment|/**     * This is the final state that the device is placed in before a change to the     * base state machine.     */
name|SCIC_SDS_SSP_REMOTE_DEVICE_READY_SUBSTATE_FINAL
block|,
name|SCIC_SDS_SSP_REMOTE_DEVICE_READY_MAX_SUBSTATES
block|}
enum|;
comment|/**  * @enum SCIC_SDS_STP_REMOTE_DEVICE_READY_SUBSTATES  *  * This is the enumeration for the SCIC_SDS_REMOTE_DEVICE ready substates for  * the STP remote device.  */
enum|enum
name|SCIC_SDS_STP_REMOTE_DEVICE_READY_SUBSTATES
block|{
comment|/**     * This is the idle substate for the stp remote device.  When there are no     * active IO for the device it is in this state.     */
name|SCIC_SDS_STP_REMOTE_DEVICE_READY_SUBSTATE_IDLE
block|,
comment|/**     * This is the command state for for the STP remote device.  This state is     * entered when the device is processing a non-NCQ command.  The device object     * will fail any new start IO requests until this command is complete.     */
name|SCIC_SDS_STP_REMOTE_DEVICE_READY_SUBSTATE_CMD
block|,
comment|/**     * This is the NCQ state for the STP remote device.  This state is entered     * when the device is processing an NCQ reuqest.  It will remain in this state     * so long as there is one or more NCQ requests being processed.     */
name|SCIC_SDS_STP_REMOTE_DEVICE_READY_SUBSTATE_NCQ
block|,
comment|/**     * This is the NCQ error state for the STP remote device.  This state is     * entered when an SDB error FIS is received by the device object while in the     * NCQ state.  The device object will only accept a READ LOG command while in     * this state.     */
name|SCIC_SDS_STP_REMOTE_DEVICE_READY_SUBSTATE_NCQ_ERROR
block|,
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DISABLE_ATAPI
argument_list|)
comment|/**     * This is the ATAPI error state for the STP ATAPI remote device.  This state is     * entered when ATAPI device sends error status FIS without data while the device     * object is in CMD state. A suspension event is expected in this state. The device     * object will resume right away.     */
name|SCIC_SDS_STP_REMOTE_DEVICE_READY_SUBSTATE_ATAPI_ERROR
block|,
endif|#
directive|endif
comment|/**     * This is the READY substate indicates the device is waiting for the RESET task     * coming to be recovered from certain hardware specific error.     */
name|SCIC_SDS_STP_REMOTE_DEVICE_READY_SUBSTATE_AWAIT_RESET
block|,
name|SCIC_SDS_STP_REMOTE_DEVICE_READY_MAX_SUBSTATES
block|}
enum|;
comment|/**  * @enum SCIC_SDS_SMP_REMOTE_DEVICE_READY_SUBSTATES  *  * This is the enumeration of the ready substates for the SMP REMOTE DEVICE.  */
enum|enum
name|SCIC_SDS_SMP_REMOTE_DEVICE_READY_SUBSTATES
block|{
comment|/**     * This is the ready operational substate for the remote device.  This is the     * normal operational state for a remote device.     */
name|SCIC_SDS_SMP_REMOTE_DEVICE_READY_SUBSTATE_IDLE
block|,
comment|/**     * This is the suspended state for the remote device.  This is the state that     * the device is placed in when a RNC suspend is received by the SCU hardware.     */
name|SCIC_SDS_SMP_REMOTE_DEVICE_READY_SUBSTATE_CMD
block|,
name|SCIC_SDS_SMP_REMOTE_DEVICE_READY_MAX_SUBSTATES
block|}
enum|;
comment|/**  * @struct SCIC_SDS_REMOTE_DEVICE  *  * @brief  This structure contains the data for an SCU implementation of  *         the SCU Core device data.  */
typedef|typedef
struct|struct
name|SCIC_SDS_REMOTE_DEVICE
block|{
comment|/**     * This field is the common base for all remote device objects.     */
name|SCI_BASE_REMOTE_DEVICE_T
name|parent
decl_stmt|;
comment|/**     * This field is the programmed device port width.  This value is written to     * the RCN data structure to tell the SCU how many open connections this     * device can have.     */
name|U32
name|device_port_width
decl_stmt|;
comment|/**     * This field is the programmed connection rate for this remote device.  It is     * used to program the TC with the maximum allowed connection rate.     */
name|SCI_SAS_LINK_RATE
name|connection_rate
decl_stmt|;
comment|/**     * This field contains the allowed target protocols for this remote device.     */
name|SMP_DISCOVER_RESPONSE_PROTOCOLS_T
name|target_protocols
decl_stmt|;
comment|/**     * This field contains the device SAS address.     */
name|SCI_SAS_ADDRESS_T
name|device_address
decl_stmt|;
comment|/**     * This filed is assinged the value of TRUE if the device is directly attached     * to the port.     */
name|BOOL
name|is_direct_attached
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DISABLE_ATAPI
argument_list|)
comment|/**     * This filed is assinged the value of TRUE if the device is an ATAPI device.     */
name|BOOL
name|is_atapi
decl_stmt|;
endif|#
directive|endif
comment|/**     * This filed contains a pointer back to the port to which this device is     * assigned.     */
name|struct
name|SCIC_SDS_PORT
modifier|*
name|owning_port
decl_stmt|;
comment|/**     * This field contains the SCU silicon remote node context specific     * information.     */
name|struct
name|SCIC_SDS_REMOTE_NODE_CONTEXT
modifier|*
name|rnc
decl_stmt|;
comment|/**     * This field contains the stated request count for the remote device.  The     * device can not reach the SCI_BASE_REMOTE_DEVICE_STATE_STOPPED until all     * requests are complete and the rnc_posted value is FALSE.     */
name|U32
name|started_request_count
decl_stmt|;
comment|/**     * This field contains a pointer to the working request object.  It is only     * used only for SATA requests since the unsolicited frames we get from the     * hardware have no Tag value to look up the io request object.     */
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|working_request
decl_stmt|;
comment|/**     * This field contains the reason for the remote device going not_ready.  It is     * assigned in the state handlers and used in the state transition.     */
name|U32
name|not_ready_reason
decl_stmt|;
comment|/**     * This field is TRUE if this remote device has an initialzied ready substate     * machine. SSP devices do not have a ready substate machine and STP devices     * have a ready substate machine.     */
name|BOOL
name|has_ready_substate_machine
decl_stmt|;
comment|/**     * This field contains the state machine for the ready substate machine for     * this SCIC_SDS_REMOTE_DEVICE object.     */
name|SCI_BASE_STATE_MACHINE_T
name|ready_substate_machine
decl_stmt|;
comment|/**     * This field maintains the set of state handlers for the remote device     * object.  These are changed each time the remote device enters a new state.     */
name|struct
name|SCIC_SDS_REMOTE_DEVICE_STATE_HANDLER
modifier|*
name|state_handlers
decl_stmt|;
ifdef|#
directive|ifdef
name|SCI_LOGGING
comment|/**     * This field conatins the ready substate machine logger.  The logger will     * emit a message each time the ready substate machine changes state.     */
name|SCI_BASE_STATE_MACHINE_LOGGER_T
name|ready_substate_machine_logger
decl_stmt|;
endif|#
directive|endif
block|}
name|SCIC_SDS_REMOTE_DEVICE_T
typedef|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_REMOTE_DEVICE_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_REMOTE_DEVICE_SUSPEND_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|suspend_type
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_REMOTE_DEVICE_RESUME_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_REMOTE_DEVICE_FRAME_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_REMOTE_DEVICE_EVENT_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|event_code
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|SCIC_SDS_REMOTE_DEVICE_READY_NOT_READY_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
comment|/**  * @struct SCIC_SDS_REMOTE_DEVICE_STATE_HANDLER  * @brief This structure conains the state handlers that are needed to  *        process requests for the SCU remote device objects.  */
typedef|typedef
struct|struct
name|SCIC_SDS_REMOTE_DEVICE_STATE_HANDLER
block|{
name|SCI_BASE_REMOTE_DEVICE_STATE_HANDLER_T
name|parent
decl_stmt|;
name|SCIC_SDS_REMOTE_DEVICE_SUSPEND_HANDLER_T
name|suspend_handler
decl_stmt|;
name|SCIC_SDS_REMOTE_DEVICE_RESUME_HANDLER_T
name|resume_handler
decl_stmt|;
name|SCIC_SDS_REMOTE_DEVICE_EVENT_HANDLER_T
name|event_handler
decl_stmt|;
name|SCIC_SDS_REMOTE_DEVICE_FRAME_HANDLER_T
name|frame_handler
decl_stmt|;
block|}
name|SCIC_SDS_REMOTE_DEVICE_STATE_HANDLER_T
typedef|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_remote_device_state_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_ssp_remote_device_ready_substate_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_stp_remote_device_ready_substate_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_smp_remote_device_ready_substate_table
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_REMOTE_DEVICE_STATE_HANDLER_T
name|scic_sds_remote_device_state_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_REMOTE_DEVICE_STATE_HANDLER_T
name|scic_sds_ssp_remote_device_ready_substate_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_REMOTE_DEVICE_STATE_HANDLER_T
name|scic_sds_stp_remote_device_ready_substate_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_REMOTE_DEVICE_STATE_HANDLER_T
name|scic_sds_smp_remote_device_ready_substate_handler_table
index|[]
decl_stmt|;
comment|/**  * This macro incrments the request count for this device  */
define|#
directive|define
name|scic_sds_remote_device_increment_request_count
parameter_list|(
name|this_device
parameter_list|)
define|\
value|((this_device)->started_request_count++)
comment|/**  * This macro decrements the request count for this device.  This count  * will never decrment past 0.  */
define|#
directive|define
name|scic_sds_remote_device_decrement_request_count
parameter_list|(
name|this_device
parameter_list|)
define|\
value|((this_device)->started_request_count> 0 ? \       (this_device)->started_request_count-- : 0)
comment|/**  * This is a helper macro to return the current device request count.  */
define|#
directive|define
name|scic_sds_remote_device_get_request_count
parameter_list|(
name|this_device
parameter_list|)
define|\
value|((this_device)->started_request_count)
comment|/**  * This macro returns the owning port of this remote device obejct.  */
define|#
directive|define
name|scic_sds_remote_device_get_port
parameter_list|(
name|this_device
parameter_list|)
define|\
value|((this_device)->owning_port)
comment|/**  * This macro returns the controller object that contains this device  * object  */
define|#
directive|define
name|scic_sds_remote_device_get_controller
parameter_list|(
name|this_device
parameter_list|)
define|\
value|scic_sds_port_get_controller(scic_sds_remote_device_get_port(this_device))
comment|/**  * This macro sets the remote device state handlers pointer and is set on  * entry to each device state.  */
define|#
directive|define
name|scic_sds_remote_device_set_state_handlers
parameter_list|(
name|this_device
parameter_list|,
name|handlers
parameter_list|)
define|\
value|((this_device)->state_handlers = (handlers))
comment|/**  * This macro returns the base sate machine object for the remote device.  */
define|#
directive|define
name|scic_sds_remote_device_get_base_state_machine
parameter_list|(
name|this_device
parameter_list|)
define|\
value|(&(this_device)->parent.state_machine)
comment|/**  * This macro returns the remote device ready substate machine  */
define|#
directive|define
name|scic_sds_remote_device_get_ready_substate_machine
parameter_list|(
name|this_device
parameter_list|)
define|\
value|(&(this_device)->ready_substate_machine)
comment|/**  * This macro returns the owning port of this device  */
define|#
directive|define
name|scic_sds_remote_device_get_port
parameter_list|(
name|this_device
parameter_list|)
define|\
value|((this_device)->owning_port)
comment|/**  * This macro returns the remote device sequence value  */
define|#
directive|define
name|scic_sds_remote_device_get_sequence
parameter_list|(
name|this_device
parameter_list|)
define|\
value|( \       scic_sds_remote_device_get_controller(this_device)->\          remote_device_sequence[(this_device)->rnc->remote_node_index] \    )
comment|/**  * This macro returns the controllers protocol engine group  */
define|#
directive|define
name|scic_sds_remote_device_get_controller_peg
parameter_list|(
name|this_device
parameter_list|)
define|\
value|( \       scic_sds_controller_get_protocol_engine_group( \          scic_sds_port_get_controller( \             scic_sds_remote_device_get_port(this_device) \          ) \       ) \    )
comment|/**  * This macro returns the port index for the devices owning port  */
define|#
directive|define
name|scic_sds_remote_device_get_port_index
parameter_list|(
name|this_device
parameter_list|)
define|\
value|(scic_sds_port_get_index(scic_sds_remote_device_get_port(this_device)))
comment|/**  * This macro returns the remote node index for this device object  */
define|#
directive|define
name|scic_sds_remote_device_get_index
parameter_list|(
name|this_device
parameter_list|)
define|\
value|((this_device)->rnc->remote_node_index)
comment|/**  * This macro builds a remote device context for the SCU post request  * operation  */
define|#
directive|define
name|scic_sds_remote_device_build_command_context
parameter_list|(
name|device
parameter_list|,
name|command
parameter_list|)
define|\
value|(   (command) \      | ((U32)(scic_sds_remote_device_get_controller_peg((device)))<< SCU_CONTEXT_COMMAND_PROTOCOL_ENGINE_GROUP_SHIFT)\      | ((U32)(scic_sds_remote_device_get_port_index((device)))<< SCU_CONTEXT_COMMAND_LOGICAL_PORT_SHIFT) \      | (scic_sds_remote_device_get_index((device))) \    )
comment|/**  * This macro makes the working request assingment for the remote device  * object. To clear the working request use this macro with a NULL request  * object.  */
define|#
directive|define
name|scic_sds_remote_device_set_working_request
parameter_list|(
name|device
parameter_list|,
name|request
parameter_list|)
define|\
value|((device)->working_request = (request))
comment|// ---------------------------------------------------------------------------
name|U32
name|scic_sds_remote_device_get_min_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|U32
name|scic_sds_remote_device_get_max_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_frame_handler
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_event_handler
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|event_code
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_start_io
parameter_list|(
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|controller
parameter_list|,
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_complete_io
parameter_list|(
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|controller
parameter_list|,
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_resume
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_suspend
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|suspend_type
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_start_task
parameter_list|(
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|controller
parameter_list|,
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|io_request
parameter_list|)
function_decl|;
name|void
name|scic_sds_remote_device_post_request
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|request
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DISABLE_ATAPI
argument_list|)
name|BOOL
name|scic_sds_remote_device_is_atapi
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
else|#
directive|else
comment|// !defined(DISABLE_ATAPI)
define|#
directive|define
name|scic_sds_remote_device_is_atapi
parameter_list|(
name|this_device
parameter_list|)
value|FALSE
endif|#
directive|endif
comment|// !defined(DISABLE_ATAPI)
comment|// ---------------------------------------------------------------------------
ifdef|#
directive|ifdef
name|SCI_LOGGING
name|void
name|scic_sds_remote_device_initialize_state_logging
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|void
name|scic_sds_remote_device_deinitialize_state_logging
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
else|#
directive|else
comment|// SCI_LOGGING
define|#
directive|define
name|scic_sds_remote_device_initialize_state_logging
parameter_list|(
name|x
parameter_list|)
define|#
directive|define
name|scic_sds_remote_device_deinitialize_state_logging
parameter_list|(
name|x
parameter_list|)
endif|#
directive|endif
comment|// SCI_LOGGING
comment|// ---------------------------------------------------------------------------
name|void
name|scic_sds_remote_device_start_request
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|struct
name|SCIC_SDS_REQUEST
modifier|*
name|the_request
parameter_list|,
name|SCI_STATUS
name|status
parameter_list|)
function_decl|;
name|void
name|scic_sds_remote_device_continue_request
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_start_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_stop_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_fail_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_destruct_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_reset_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_reset_complete_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_start_request_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_complete_request_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_continue_request_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|device
parameter_list|,
name|SCI_BASE_REQUEST_T
modifier|*
name|request
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_suspend_handler
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|suspend_type
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_resume_handler
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_event_handler
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|event_code
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_default_frame_handler
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|SCI_STATUS
name|scic_sds_remote_device_ready_state_stop_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_ready_state_reset_handler
parameter_list|(
name|SCI_BASE_REMOTE_DEVICE_T
modifier|*
name|device
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_general_frame_handler
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_remote_device_general_event_handler
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|U32
name|event_code
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_ssp_remote_device_ready_suspended_substate_resume_handler
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|void
name|scic_sds_remote_device_get_info_from_smp_discover_response
parameter_list|(
name|SCIC_SDS_REMOTE_DEVICE_T
modifier|*
name|this_device
parameter_list|,
name|SMP_RESPONSE_DISCOVER_T
modifier|*
name|discover_response
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIC_SDS_REMOTE_DEVICE_H_
end_comment

end_unit

