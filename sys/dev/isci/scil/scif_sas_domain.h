begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIF_SAS_DOMAIN_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCIF_SAS_DOMAIN_H_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains the protected interface structures, constants,  *        and methods for the SCIF_SAS_DOMAIN object.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<dev/isci/scil/sci_abstract_list.h>
include|#
directive|include
file|<dev/isci/scil/sci_fast_list.h>
include|#
directive|include
file|<dev/isci/scil/scif_domain.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_domain.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_request.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_task_request.h>
include|#
directive|include
file|<dev/isci/scil/scif_sas_remote_device.h>
specifier|extern
name|SCI_BASE_DOMAIN_STATE_HANDLER_T
name|scif_sas_domain_state_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scif_sas_domain_state_table
index|[]
decl_stmt|;
define|#
directive|define
name|PORT_HARD_RESET_TIMEOUT
value|1000
comment|//1000 miliseconds
define|#
directive|define
name|SCIF_DOMAIN_DISCOVER_TIMEOUT
value|20000
comment|// miliseconds
comment|/**  * @struct SCIF_SAS_DOMAIN  *  * @brief The SCI SAS Framework domain object abstracts the SAS domain  *        level behavior for the framework component.  Additionally,  *        it provides a higher level of abstraction for the core port  *        object.  There is a 1:1 correspondance between core ports and  *        framework domain objects.  Essentially, each core port provides  *        the access to the remote devices in the domain.  */
typedef|typedef
struct|struct
name|SCIF_SAS_DOMAIN
block|{
comment|/**     * The SCI_BASE_DOMAIN is the parent object for the SCIF_SAS_DOMAIN     * object.     */
name|SCI_BASE_DOMAIN_T
name|parent
decl_stmt|;
comment|/**     * This field contains the handle for the SCI Core port object that     * is managed by this framework domain object.     */
name|SCI_PORT_HANDLE_T
name|core_object
decl_stmt|;
comment|/**     * This field specifies the controller containing this domain object.     */
name|struct
name|SCIF_SAS_CONTROLLER
modifier|*
name|controller
decl_stmt|;
comment|/**     * This field references the list of state specific handler methods to     * be utilized for this domain instance.     */
name|SCI_BASE_DOMAIN_STATE_HANDLER_T
modifier|*
name|state_handlers
decl_stmt|;
comment|/**     * This field contains references to all of the devices contained in     * this domain.     */
name|SCI_ABSTRACT_LIST_T
name|remote_device_list
decl_stmt|;
comment|/**     * This field contains the list of all outstanding request (IO or     * management) in this domain.     */
name|SCI_FAST_LIST_T
name|request_list
decl_stmt|;
comment|/**     * This field indicates whether the core port object is in a ready state     * or not.     */
name|BOOL
name|is_port_ready
decl_stmt|;
comment|/**     * This field indicates the number of remote devices that have been     * started in this domain.     */
name|U32
name|device_start_count
decl_stmt|;
comment|/**     * This field indicates the number of remote devices that are currently     * in the process of becoming ready.  This field is utilized to gate     * the transition back to the READY state for the domain.     */
name|U32
name|device_start_in_progress_count
decl_stmt|;
comment|/**     * This field records how many broadcast change primitve are     * received and not processed yet.     */
name|U32
name|broadcast_change_count
decl_stmt|;
comment|/**     * This fields indicates whether the expanders in this domain need to     * have there config route table configured by our driver. For expample,     * if we found the top level expander is a self-configuring expander and     * it is able to config others, all the expanders in this domain don't     * need to configure route table.     */
name|BOOL
name|is_config_route_table_needed
decl_stmt|;
struct|struct
block|{
comment|/**        * This field provides the domain object a scratch area to indicate        * status of an ongoing operation.        */
name|SCI_STATUS
name|status
decl_stmt|;
comment|/**        * This is the timer handle that is utilized to time the discovery        * or domain reset operations.        */
name|void
modifier|*
name|timer
decl_stmt|;
comment|/**        * This field specifies the timeout value, in milliseconds, for the        * entire operation (discovery or reset).        */
name|U32
name|timeout
decl_stmt|;
comment|/**        * This field specifies the timeout value, in milliseconds, for a        * single device.        */
name|U32
name|device_timeout
decl_stmt|;
block|}
name|operation
struct|;
block|}
name|SCIF_SAS_DOMAIN_T
typedef|;
name|void
name|scif_sas_domain_construct
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|,
name|U8
name|domain_id
parameter_list|,
name|struct
name|SCIF_SAS_CONTROLLER
modifier|*
name|fw_controller
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_terminate_requests
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|,
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|,
name|SCIF_SAS_REQUEST_T
modifier|*
name|fw_request
parameter_list|,
name|SCIF_SAS_TASK_REQUEST_T
modifier|*
name|fw_requestor
parameter_list|)
function_decl|;
name|SCIF_SAS_REQUEST_T
modifier|*
name|scif_sas_domain_get_request_by_io_tag
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|,
name|U16
name|io_tag
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_transition_to_stopped_state
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_initialize
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_remote_device_start_complete
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|,
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|BOOL
name|scif_sas_domain_is_in_smp_activity
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|scif_sas_domain_get_device_by_containing_device
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|,
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|containing_device
parameter_list|,
name|U8
name|expander_phy_id
parameter_list|)
function_decl|;
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|scif_sas_domain_find_device_in_spinup_hold
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|scif_sas_domain_find_device_has_scheduled_activity
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|,
name|U8
name|smp_activity
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_start_smp_activity
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_remove_expander_device
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|,
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|fw_device
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_start_smp_discover
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|,
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|top_expander
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_continue_discover
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_finish_discover
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_transition_to_discovering_state
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_cancel_smp_activities
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|U8
name|scif_sas_domain_get_smp_request_count
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_schedule_clear_affiliation
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_start_clear_affiliation
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_continue_clear_affiliation
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_release_resource
parameter_list|(
name|struct
name|SCIF_SAS_CONTROLLER
modifier|*
name|fw_controller
parameter_list|,
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|SCIF_SAS_REMOTE_DEVICE_T
modifier|*
name|scif_sas_domain_find_next_ea_target_reset
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DISABLE_WIDE_PORTED_TARGETS
argument_list|)
name|void
name|scif_sas_domain_update_device_port_width
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|,
name|SCI_PORT_HANDLE_T
name|port
parameter_list|)
function_decl|;
else|#
directive|else
comment|//!defined(DISABLE_WIDE_PORTED_TARGETS)
define|#
directive|define
name|scif_sas_domain_update_device_port_width
parameter_list|(
name|domain
parameter_list|,
name|port
parameter_list|)
endif|#
directive|endif
comment|//!defined(DISABLE_WIDE_PORTED_TARGETS)
ifdef|#
directive|ifdef
name|SCI_LOGGING
name|void
name|scif_sas_domain_initialize_state_logging
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
name|void
name|scif_sas_domain_deinitialize_state_logging
parameter_list|(
name|SCIF_SAS_DOMAIN_T
modifier|*
name|fw_domain
parameter_list|)
function_decl|;
else|#
directive|else
comment|// SCI_LOGGING
define|#
directive|define
name|scif_sas_domain_initialize_state_logging
parameter_list|(
name|x
parameter_list|)
define|#
directive|define
name|scif_sas_domain_deinitialize_state_logging
parameter_list|(
name|x
parameter_list|)
endif|#
directive|endif
comment|// SCI_LOGGING
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIF_SAS_DOMAIN_H_
end_comment

end_unit

