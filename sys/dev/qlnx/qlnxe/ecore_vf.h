begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2017-2018 Cavium, Inc.   * All rights reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  *  POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ECORE_VF_H__
end_ifndef

begin_define
define|#
directive|define
name|__ECORE_VF_H__
end_define

begin_include
include|#
directive|include
file|"ecore_status.h"
end_include

begin_include
include|#
directive|include
file|"ecore_vf_api.h"
end_include

begin_include
include|#
directive|include
file|"ecore_l2_api.h"
end_include

begin_include
include|#
directive|include
file|"ecore_vfpf_if.h"
end_include

begin_comment
comment|/* Default number of CIDs [total of both Rx and Tx] to be requested  * by default.  */
end_comment

begin_define
define|#
directive|define
name|ECORE_ETH_VF_DEFAULT_NUM_CIDS
value|(32)
end_define

begin_comment
comment|/* This data is held in the ecore_hwfn structure for VFs only. */
end_comment

begin_struct
struct|struct
name|ecore_vf_iov
block|{
name|union
name|vfpf_tlvs
modifier|*
name|vf2pf_request
decl_stmt|;
name|dma_addr_t
name|vf2pf_request_phys
decl_stmt|;
name|union
name|pfvf_tlvs
modifier|*
name|pf2vf_reply
decl_stmt|;
name|dma_addr_t
name|pf2vf_reply_phys
decl_stmt|;
comment|/* Should be taken whenever the mailbox buffers are accessed */
name|osal_mutex_t
name|mutex
decl_stmt|;
name|u8
modifier|*
name|offset
decl_stmt|;
comment|/* Bulletin Board */
name|struct
name|ecore_bulletin
name|bulletin
decl_stmt|;
name|struct
name|ecore_bulletin_content
name|bulletin_shadow
decl_stmt|;
comment|/* we set aside a copy of the acquire response */
name|struct
name|pfvf_acquire_resp_tlv
name|acquire_resp
decl_stmt|;
comment|/* In case PF originates prior to the fp-hsi version comparison, 	 * this has to be propagated as it affects the fastpath. 	 */
name|bool
name|b_pre_fp_hsi
decl_stmt|;
comment|/* Current day VFs are passing the SBs physical address on vport 	 * start, and as they lack an IGU mapping they need to store the 	 * addresses of previously registered SBs. 	 * Even if we were to change configuration flow, due to backward 	 * compatability [with older PFs] we'd still need to store these. 	 */
name|struct
name|ecore_sb_info
modifier|*
name|sbs_info
index|[
name|PFVF_MAX_SBS_PER_VF
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_set_rxq_coalesce
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|coalesce
parameter_list|,
name|struct
name|ecore_queue_cid
modifier|*
name|p_cid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_set_txq_coalesce
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|coalesce
parameter_list|,
name|struct
name|ecore_queue_cid
modifier|*
name|p_cid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief VF - Set Rx/Tx coalesce per VF's relative queue.  *	Coalesce value '0' will omit the configuration.  *  *	@param p_hwfn  *	@param rx_coal - coalesce value in micro second for rx queue  *	@param tx_coal - coalesce value in micro second for tx queue  *	@param queue_cid  *  **/
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_set_coalesce
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rx_coal
parameter_list|,
name|u16
name|tx_coal
parameter_list|,
name|struct
name|ecore_queue_cid
modifier|*
name|p_cid
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_ECORE_SRIOV
end_ifdef

begin_comment
comment|/**  * @brief hw preparation for VF  *	sends ACQUIRE message  *  * @param p_hwfn  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_hw_prepare
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief VF - start the RX Queue by sending a message to the PF  *  * @param p_hwfn  * @param p_cid			- Only relative fields are relevant  * @param bd_max_bytes 		- maximum number of bytes per bd  * @param bd_chain_phys_addr 	- physical address of bd chain  * @param cqe_pbl_addr 		- physical address of pbl  * @param cqe_pbl_size 		- pbl size  * @param pp_prod 		- pointer to the producer to be  *				  used in fasthpath  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_rxq_start
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
modifier|*
name|p_cid
parameter_list|,
name|u16
name|bd_max_bytes
parameter_list|,
name|dma_addr_t
name|bd_chain_phys_addr
parameter_list|,
name|dma_addr_t
name|cqe_pbl_addr
parameter_list|,
name|u16
name|cqe_pbl_size
parameter_list|,
name|void
name|OSAL_IOMEM
modifier|*
modifier|*
name|pp_prod
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief VF - start the TX queue by sending a message to the  *        PF.  *  * @param p_hwfn  * @param p_cid  * @param bd_chain_phys_addr 	- physical address of tx chain  * @param pp_doorbell 		- pointer to address to which to  *      		write the doorbell too..  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_txq_start
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
modifier|*
name|p_cid
parameter_list|,
name|dma_addr_t
name|pbl_addr
parameter_list|,
name|u16
name|pbl_size
parameter_list|,
name|void
name|OSAL_IOMEM
modifier|*
modifier|*
name|pp_doorbell
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief VF - stop the RX queue by sending a message to the PF  *  * @param p_hwfn  * @param p_cid  * @param cqe_completion  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_rxq_stop
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
modifier|*
name|p_cid
parameter_list|,
name|bool
name|cqe_completion
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief VF - stop the TX queue by sending a message to the PF  *  * @param p_hwfn  * @param p_cid  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_txq_stop
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
modifier|*
name|p_cid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* TODO - fix all the !SRIOV prototypes */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LINUX_REMOVE
end_ifndef

begin_comment
comment|/**  * @brief VF - update the RX queue by sending a message to the  *        PF  *  * @param p_hwfn  * @param pp_cid - list of queue-cids which we want to update  * @param num_rxqs  * @param comp_cqe_flg  * @param comp_event_flg  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_rxqs_update
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
modifier|*
modifier|*
name|pp_cid
parameter_list|,
name|u8
name|num_rxqs
parameter_list|,
name|u8
name|comp_cqe_flg
parameter_list|,
name|u8
name|comp_event_flg
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * @brief VF - send a vport update command  *  * @param p_hwfn  * @param params  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_vport_update
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_sp_vport_update_params
modifier|*
name|p_params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief VF - send a close message to PF  *  * @param p_hwfn  *  * @return enum _ecore_status  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_reset
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief VF - free vf`s memories  *  * @param p_hwfn  *  * @return enum _ecore_status  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_release
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_vf_get_igu_sb_id - Get the IGU SB ID for a given  *        sb_id. For VFs igu sbs don't have to be contiguous  *  * @param p_hwfn  * @param sb_id  *  * @return INLINE u16  */
end_comment

begin_function_decl
name|u16
name|ecore_vf_get_igu_sb_id
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|sb_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Stores [or removes] a configured sb_info.  *  * @param p_hwfn  * @param sb_id - zero-based SB index [for fastpath]  * @param sb_info - may be OSAL_NULL [during removal].  */
end_comment

begin_function_decl
name|void
name|ecore_vf_set_sb_info
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|sb_id
parameter_list|,
name|struct
name|ecore_sb_info
modifier|*
name|p_sb
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_vf_pf_vport_start - perform vport start for VF.  *  * @param p_hwfn  * @param vport_id  * @param mtu  * @param inner_vlan_removal  * @param tpa_mode  * @param max_buffers_per_cqe,  * @param only_untagged - default behavior regarding vlan acceptance  *  * @return enum _ecore_status  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_vport_start
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u8
name|vport_id
parameter_list|,
name|u16
name|mtu
parameter_list|,
name|u8
name|inner_vlan_removal
parameter_list|,
name|enum
name|ecore_tpa_mode
name|tpa_mode
parameter_list|,
name|u8
name|max_buffers_per_cqe
parameter_list|,
name|u8
name|only_untagged
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_vf_pf_vport_stop - stop the VF's vport  *  * @param p_hwfn  *  * @return enum _ecore_status  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_vport_stop
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_filter_ucast
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_filter_ucast
modifier|*
name|p_param
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_vf_pf_filter_mcast
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_filter_mcast
modifier|*
name|p_filter_cmd
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_vf_pf_int_cleanup - clean the SB of the VF  *  * @param p_hwfn  *  * @return enum _ecore_status  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_int_cleanup
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - return the link params in a given bulletin board  *  * @param p_params - pointer to a struct to fill with link params  * @param p_bulletin  */
end_comment

begin_function_decl
name|void
name|__ecore_vf_get_link_params
parameter_list|(
name|struct
name|ecore_mcp_link_params
modifier|*
name|p_params
parameter_list|,
name|struct
name|ecore_bulletin_content
modifier|*
name|p_bulletin
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - return the link state in a given bulletin board  *  * @param p_link - pointer to a struct to fill with link state  * @param p_bulletin  */
end_comment

begin_function_decl
name|void
name|__ecore_vf_get_link_state
parameter_list|(
name|struct
name|ecore_mcp_link_state
modifier|*
name|p_link
parameter_list|,
name|struct
name|ecore_bulletin_content
modifier|*
name|p_bulletin
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - return the link capabilities in a given bulletin board  *  * @param p_link - pointer to a struct to fill with link capabilities  * @param p_bulletin  */
end_comment

begin_function_decl
name|void
name|__ecore_vf_get_link_caps
parameter_list|(
name|struct
name|ecore_mcp_link_capabilities
modifier|*
name|p_link_caps
parameter_list|,
name|struct
name|ecore_bulletin_content
modifier|*
name|p_bulletin
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_vf_pf_tunnel_param_update
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_tunnel_info
modifier|*
name|p_tunn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_vf_set_vf_start_tunn_update_param
parameter_list|(
name|struct
name|ecore_tunnel_info
modifier|*
name|p_tun
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_hw_prepare
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_rxq_start
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
name|OSAL_UNUSED
modifier|*
name|p_cid
parameter_list|,
name|u16
name|OSAL_UNUSED
name|bd_max_bytes
parameter_list|,
name|dma_addr_t
name|OSAL_UNUSED
name|bd_chain_phys_addr
parameter_list|,
name|dma_addr_t
name|OSAL_UNUSED
name|cqe_pbl_addr
parameter_list|,
name|u16
name|OSAL_UNUSED
name|cqe_pbl_size
parameter_list|,
name|void
name|OSAL_IOMEM
name|OSAL_UNUSED
modifier|*
modifier|*
name|pp_prod
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_txq_start
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
name|OSAL_UNUSED
modifier|*
name|p_cid
parameter_list|,
name|dma_addr_t
name|OSAL_UNUSED
name|pbl_addr
parameter_list|,
name|u16
name|OSAL_UNUSED
name|pbl_size
parameter_list|,
name|void
name|OSAL_IOMEM
name|OSAL_UNUSED
modifier|*
modifier|*
name|pp_doorbell
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_rxq_stop
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
name|OSAL_UNUSED
modifier|*
name|p_cid
parameter_list|,
name|bool
name|OSAL_UNUSED
name|cqe_completion
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_txq_stop
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
name|OSAL_UNUSED
modifier|*
name|p_cid
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|LINUX_REMOVE
end_ifndef

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_rxqs_update
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_queue_cid
name|OSAL_UNUSED
modifier|*
modifier|*
name|pp_cid
parameter_list|,
name|u8
name|OSAL_UNUSED
name|num_rxqs
parameter_list|,
name|u8
name|OSAL_UNUSED
name|comp_cqe_flg
parameter_list|,
name|u8
name|OSAL_UNUSED
name|comp_event_flg
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_vport_update
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_sp_vport_update_params
name|OSAL_UNUSED
modifier|*
name|p_params
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_reset
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_release
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|u16
name|ecore_vf_get_igu_sb_id
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|sb_id
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_vf_set_sb_info
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|sb_id
parameter_list|,
name|struct
name|ecore_sb_info
name|OSAL_UNUSED
modifier|*
name|p_sb
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_vport_start
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u8
name|OSAL_UNUSED
name|vport_id
parameter_list|,
name|u16
name|OSAL_UNUSED
name|mtu
parameter_list|,
name|u8
name|OSAL_UNUSED
name|inner_vlan_removal
parameter_list|,
name|enum
name|ecore_tpa_mode
name|OSAL_UNUSED
name|tpa_mode
parameter_list|,
name|u8
name|OSAL_UNUSED
name|max_buffers_per_cqe
parameter_list|,
name|u8
name|OSAL_UNUSED
name|only_untagged
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_vport_stop
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_filter_ucast
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_filter_ucast
name|OSAL_UNUSED
modifier|*
name|p_param
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_vf_pf_filter_mcast
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_filter_mcast
name|OSAL_UNUSED
modifier|*
name|p_filter_cmd
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_int_cleanup
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|__ecore_vf_get_link_params
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_mcp_link_params
name|OSAL_UNUSED
modifier|*
name|p_params
parameter_list|,
name|struct
name|ecore_bulletin_content
name|OSAL_UNUSED
modifier|*
name|p_bulletin
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|__ecore_vf_get_link_state
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_mcp_link_state
name|OSAL_UNUSED
modifier|*
name|p_link
parameter_list|,
name|struct
name|ecore_bulletin_content
name|OSAL_UNUSED
modifier|*
name|p_bulletin
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|__ecore_vf_get_link_caps
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_mcp_link_capabilities
name|OSAL_UNUSED
modifier|*
name|p_link_caps
parameter_list|,
name|struct
name|ecore_bulletin_content
name|OSAL_UNUSED
modifier|*
name|p_bulletin
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_vf_pf_tunnel_param_update
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_tunnel_info
name|OSAL_UNUSED
modifier|*
name|p_tunn
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_vf_set_vf_start_tunn_update_param
parameter_list|(
name|struct
name|ecore_tunnel_info
name|OSAL_UNUSED
modifier|*
name|p_tun
parameter_list|)
block|{
return|return;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ECORE_VF_H__ */
end_comment

end_unit

