begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2017-2018 Cavium, Inc.   * All rights reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  *  POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ECORE_INT_API_H__
end_ifndef

begin_define
define|#
directive|define
name|__ECORE_INT_API_H__
end_define

begin_include
include|#
directive|include
file|"common_hsi.h"
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__EXTRACT__LINUX__
end_ifndef

begin_define
define|#
directive|define
name|ECORE_SB_IDX
value|0x0002
end_define

begin_define
define|#
directive|define
name|RX_PI
value|0
end_define

begin_define
define|#
directive|define
name|TX_PI
parameter_list|(
name|tc
parameter_list|)
value|(RX_PI + 1 + tc)
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|ECORE_INT_MODE
end_ifndef

begin_define
define|#
directive|define
name|ECORE_INT_MODE
end_define

begin_enum
enum|enum
name|ecore_int_mode
block|{
name|ECORE_INT_MODE_INTA
block|,
name|ECORE_INT_MODE_MSIX
block|,
name|ECORE_INT_MODE_MSI
block|,
name|ECORE_INT_MODE_POLL
block|, }
enum|;
end_enum

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|ecore_sb_info
block|{
name|struct
name|status_block_e4
modifier|*
name|sb_virt
decl_stmt|;
name|dma_addr_t
name|sb_phys
decl_stmt|;
name|u32
name|sb_ack
decl_stmt|;
comment|/* Last given ack */
name|u16
name|igu_sb_id
decl_stmt|;
name|void
name|OSAL_IOMEM
modifier|*
name|igu_addr
decl_stmt|;
name|u8
name|flags
decl_stmt|;
define|#
directive|define
name|ECORE_SB_INFO_INIT
value|0x1
define|#
directive|define
name|ECORE_SB_INFO_SETUP
value|0x2
ifdef|#
directive|ifdef
name|ECORE_CONFIG_DIRECT_HWFN
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
decl_stmt|;
endif|#
directive|endif
name|struct
name|ecore_dev
modifier|*
name|p_dev
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_sb_info_dbg
block|{
name|u32
name|igu_prod
decl_stmt|;
name|u32
name|igu_cons
decl_stmt|;
name|u16
name|pi
index|[
name|PIS_PER_SB_E4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_sb_cnt_info
block|{
comment|/* Original, current, and free SBs for PF */
name|int
name|orig
decl_stmt|;
name|int
name|cnt
decl_stmt|;
name|int
name|free_cnt
decl_stmt|;
comment|/* Original, current and free SBS for child VFs */
name|int
name|iov_orig
decl_stmt|;
name|int
name|iov_cnt
decl_stmt|;
name|int
name|free_cnt_iov
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|OSAL_INLINE
name|u16
name|ecore_sb_update_sb_idx
parameter_list|(
name|struct
name|ecore_sb_info
modifier|*
name|sb_info
parameter_list|)
block|{
name|u32
name|prod
init|=
literal|0
decl_stmt|;
name|u16
name|rc
init|=
literal|0
decl_stmt|;
comment|// barrier(); /* status block is written to by the chip */
comment|// FIXME: need some sort of barrier.
name|prod
operator|=
name|OSAL_LE32_TO_CPU
argument_list|(
name|sb_info
operator|->
name|sb_virt
operator|->
name|prod_index
argument_list|)
operator|&
name|STATUS_BLOCK_E4_PROD_INDEX_MASK
expr_stmt|;
if|if
condition|(
name|sb_info
operator|->
name|sb_ack
operator|!=
name|prod
condition|)
block|{
name|sb_info
operator|->
name|sb_ack
operator|=
name|prod
expr_stmt|;
name|rc
operator||=
name|ECORE_SB_IDX
expr_stmt|;
block|}
name|OSAL_MMIOWB
argument_list|(
name|sb_info
operator|->
name|p_dev
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function

begin_comment
comment|/**  * @brief This function creates an update command for interrupts that is  *        written to the IGU.  *  * @param sb_info 	- This is the structure allocated and  *      	   initialized per status block. Assumption is  *      	   that it was initialized using ecore_sb_init  * @param int_cmd 	- Enable/Disable/Nop  * @param upd_flg 	- whether igu consumer should be  *      	   updated.  *  * @return OSAL_INLINE void  */
end_comment

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_sb_ack
parameter_list|(
name|struct
name|ecore_sb_info
modifier|*
name|sb_info
parameter_list|,
name|enum
name|igu_int_cmd
name|int_cmd
parameter_list|,
name|u8
name|upd_flg
parameter_list|)
block|{
name|struct
name|igu_prod_cons_update
name|igu_ack
init|=
block|{
literal|0
block|}
decl_stmt|;
name|igu_ack
operator|.
name|sb_id_and_flags
operator|=
operator|(
operator|(
name|sb_info
operator|->
name|sb_ack
operator|<<
name|IGU_PROD_CONS_UPDATE_SB_INDEX_SHIFT
operator|)
operator||
operator|(
name|upd_flg
operator|<<
name|IGU_PROD_CONS_UPDATE_UPDATE_FLAG_SHIFT
operator|)
operator||
operator|(
name|int_cmd
operator|<<
name|IGU_PROD_CONS_UPDATE_ENABLE_INT_SHIFT
operator|)
operator||
operator|(
name|IGU_SEG_ACCESS_REG
operator|<<
name|IGU_PROD_CONS_UPDATE_SEGMENT_ACCESS_SHIFT
operator|)
operator|)
expr_stmt|;
ifdef|#
directive|ifdef
name|ECORE_CONFIG_DIRECT_HWFN
name|DIRECT_REG_WR
argument_list|(
name|sb_info
operator|->
name|p_hwfn
argument_list|,
name|sb_info
operator|->
name|igu_addr
argument_list|,
name|igu_ack
operator|.
name|sb_id_and_flags
argument_list|)
expr_stmt|;
else|#
directive|else
name|DIRECT_REG_WR
argument_list|(
name|OSAL_NULL
argument_list|,
name|sb_info
operator|->
name|igu_addr
argument_list|,
name|igu_ack
operator|.
name|sb_id_and_flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* Both segments (interrupts& acks) are written to same place address; 	 * Need to guarantee all commands will be received (in-order) by HW. 	 */
name|OSAL_MMIOWB
argument_list|(
name|sb_info
operator|->
name|p_dev
argument_list|)
expr_stmt|;
name|OSAL_BARRIER
argument_list|(
name|sb_info
operator|->
name|p_dev
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|ECORE_CONFIG_DIRECT_HWFN
end_ifdef

begin_decl_stmt
specifier|static
name|OSAL_INLINE
name|void
name|__internal_ram_wr
argument_list|(
expr|struct
name|ecore_hwfn
operator|*
name|p_hwfn
argument_list|,
name|void
name|OSAL_IOMEM
operator|*
name|addr
argument_list|,
name|int
name|size
argument_list|,
name|u32
operator|*
name|data
argument_list|)
else|#
directive|else
decl|static
name|OSAL_INLINE
name|void
name|__internal_ram_wr
argument_list|(
name|void
operator|*
name|p_hwfn
argument_list|,
name|void
name|OSAL_IOMEM
operator|*
name|addr
argument_list|,
name|int
name|size
argument_list|,
name|u32
operator|*
name|data
argument_list|)
endif|#
directive|endif
block|{
name|unsigned
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|size
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|data
argument_list|)
condition|;
name|i
operator|++
control|)
name|DIRECT_REG_WR
argument_list|(
name|p_hwfn
argument_list|,
operator|&
operator|(
operator|(
name|u32
name|OSAL_IOMEM
operator|*
operator|)
name|addr
operator|)
index|[
name|i
index|]
argument_list|,
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|ECORE_CONFIG_DIRECT_HWFN
end_ifdef

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|internal_ram_wr
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|void
name|OSAL_IOMEM
modifier|*
name|addr
parameter_list|,
name|int
name|size
parameter_list|,
name|u32
modifier|*
name|data
parameter_list|)
block|{
name|__internal_ram_wr
argument_list|(
name|p_hwfn
argument_list|,
name|addr
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|internal_ram_wr
parameter_list|(
name|void
name|OSAL_IOMEM
modifier|*
name|addr
parameter_list|,
name|int
name|size
parameter_list|,
name|u32
modifier|*
name|data
parameter_list|)
block|{
name|__internal_ram_wr
argument_list|(
name|OSAL_NULL
argument_list|,
name|addr
argument_list|,
name|size
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_struct_decl
struct_decl|struct
name|ecore_hwfn
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ecore_ptt
struct_decl|;
end_struct_decl

begin_enum
enum|enum
name|ecore_coalescing_fsm
block|{
name|ECORE_COAL_RX_STATE_MACHINE
block|,
name|ECORE_COAL_TX_STATE_MACHINE
block|}
enum|;
end_enum

begin_comment
comment|/**  * @brief ecore_int_cau_conf_pi - configure cau for a given  *        status block  *  * @param p_hwfn  * @param p_ptt  * @param p_sb  * @param pi_index  * @param state  * @param timeset  */
end_comment

begin_function_decl
name|void
name|ecore_int_cau_conf_pi
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_sb_info
modifier|*
name|p_sb
parameter_list|,
name|u32
name|pi_index
parameter_list|,
name|enum
name|ecore_coalescing_fsm
name|coalescing_fsm
parameter_list|,
name|u8
name|timeset
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_int_igu_enable_int - enable device interrupts  *  * @param p_hwfn  * @param p_ptt  * @param int_mode - interrupt mode to use  */
end_comment

begin_function_decl
name|void
name|ecore_int_igu_enable_int
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|enum
name|ecore_int_mode
name|int_mode
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_int_igu_disable_int - disable device interrupts  *  * @param p_hwfn  * @param p_ptt  */
end_comment

begin_function_decl
name|void
name|ecore_int_igu_disable_int
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_int_igu_read_sisr_reg - Reads the single isr multiple dpc  *        register from igu.  *  * @param p_hwfn  *  * @return u64  */
end_comment

begin_function_decl
name|u64
name|ecore_int_igu_read_sisr_reg
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|ECORE_SP_SB_ID
value|0xffff
end_define

begin_comment
comment|/**  * @brief ecore_int_sb_init - Initializes the sb_info structure.  *  * once the structure is initialized it can be passed to sb related functions.  *  * @param p_hwfn  * @param p_ptt  * @param sb_info	points to an uninitialized (but  *			allocated) sb_info structure  * @param sb_virt_addr  * @param sb_phy_addr  * @param sb_id		the sb_id to be used (zero based in driver)  *			should use ECORE_SP_SB_ID for SP Status block  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_int_sb_init
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_sb_info
modifier|*
name|sb_info
parameter_list|,
name|void
modifier|*
name|sb_virt_addr
parameter_list|,
name|dma_addr_t
name|sb_phy_addr
parameter_list|,
name|u16
name|sb_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_int_sb_setup - Setup the sb.  *  * @param p_hwfn  * @param p_ptt  * @param sb_info	initialized sb_info structure  */
end_comment

begin_function_decl
name|void
name|ecore_int_sb_setup
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_sb_info
modifier|*
name|sb_info
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_int_sb_release - releases the sb_info structure.  *  * once the structure is released, it's memory can be freed  *  * @param p_hwfn  * @param sb_info	points to an allocated sb_info structure  * @param sb_id		the sb_id to be used (zero based in driver)  *			should never be equal to ECORE_SP_SB_ID  *			(SP Status block)  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_int_sb_release
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_sb_info
modifier|*
name|sb_info
parameter_list|,
name|u16
name|sb_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_int_sp_dpc - To be called when an interrupt is received on the  *        default status block.  *  * @param p_hwfn - pointer to hwfn  *  */
end_comment

begin_function_decl
name|void
name|ecore_int_sp_dpc
parameter_list|(
name|osal_int_ptr_t
name|hwfn_cookie
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_int_get_num_sbs - get the number of status   *        blocks configured for this funciton in the igu.  *   * @param p_hwfn  * @param p_sb_cnt_info  *   * @return  */
end_comment

begin_function_decl
name|void
name|ecore_int_get_num_sbs
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_sb_cnt_info
modifier|*
name|p_sb_cnt_info
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_int_disable_post_isr_release - performs the cleanup post ISR  *        release. The API need to be called after releasing all slowpath IRQs  *        of the device.  *  * @param p_dev  *  */
end_comment

begin_function_decl
name|void
name|ecore_int_disable_post_isr_release
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_int_attn_clr_enable - sets whether the general behavior is  *        preventing attentions from being reasserted, or following the  *        attributes of the specific attention.  *  * @param p_dev  * @param clr_enable  *  */
end_comment

begin_function_decl
name|void
name|ecore_int_attn_clr_enable
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|bool
name|clr_enable
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Read debug information regarding a given SB.  *  * @param p_hwfn  * @param p_ptt  * @param p_sb - point to Status block for which we want to get info.  * @param p_info - pointer to struct to fill with information regarding SB.  *  * @return ECORE_SUCCESS if pointer is filled; failure otherwise.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_int_get_sb_dbg
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_sb_info
modifier|*
name|p_sb
parameter_list|,
name|struct
name|ecore_sb_info_dbg
modifier|*
name|p_info
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Move a free Status block between PF and child VF  *  * @param p_hwfn  * @param p_ptt  * @param sb_id - The PF fastpath vector to be moved [re-assigned if claiming  *                from VF, given-up if moving to VF]  * @param b_to_vf - PF->VF == true, VF->PF == false  *  * @return ECORE_SUCCESS if SB successfully moved.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_int_igu_relocate_sb
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|sb_id
parameter_list|,
name|bool
name|b_to_vf
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

