begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2017-2018 Cavium, Inc.   * All rights reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  *  POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ECORE_RDMA_API_H__
end_ifndef

begin_define
define|#
directive|define
name|__ECORE_RDMA_API_H__
end_define

begin_define
define|#
directive|define
name|ETH_ALEN
value|6
end_define

begin_enum
enum|enum
name|ecore_roce_ll2_tx_dest
block|{
name|ECORE_ROCE_LL2_TX_DEST_NW
comment|/* Light L2 TX Destination to the Network */
block|,
name|ECORE_ROCE_LL2_TX_DEST_LB
comment|/* Light L2 TX Destination to the Loopback */
block|,
name|ECORE_ROCE_LL2_TX_DEST_MAX
block|}
enum|;
end_enum

begin_comment
comment|/* HW/FW RoCE Limitations (external. For internal see ecore_roce.h) */
end_comment

begin_comment
comment|/* CNQ size Limitation  * The CNQ size should be set as twice the amount of CQs, since for each CQ one  * element may be inserted into the CNQ and another element is used per CQ to  * accommodate for a possible race in the arm mechanism.  * The FW supports a CNQ of 64k-1 and this apparently causes an issue - notice  * that the number of QPs can reach 32k giving 64k CQs and 128k CNQ elements.  * Luckily the FW can buffer CNQ elements avoiding an overflow, on the expense  * of performance.  */
end_comment

begin_define
define|#
directive|define
name|ECORE_RDMA_MAX_CNQ_SIZE
value|(0xFFFF)
end_define

begin_comment
comment|/* 2^16 - 1 */
end_comment

begin_comment
comment|/* rdma interface */
end_comment

begin_enum
enum|enum
name|ecore_rdma_tid_type
block|{
name|ECORE_RDMA_TID_REGISTERED_MR
block|,
name|ECORE_RDMA_TID_FMR
block|,
name|ECORE_RDMA_TID_MW_TYPE1
block|,
name|ECORE_RDMA_TID_MW_TYPE2A
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ecore_roce_qp_state
block|{
name|ECORE_ROCE_QP_STATE_RESET
block|,
comment|/* Reset */
name|ECORE_ROCE_QP_STATE_INIT
block|,
comment|/* Initialized */
name|ECORE_ROCE_QP_STATE_RTR
block|,
comment|/* Ready to Receive */
name|ECORE_ROCE_QP_STATE_RTS
block|,
comment|/* Ready to Send */
name|ECORE_ROCE_QP_STATE_SQD
block|,
comment|/* Send Queue Draining */
name|ECORE_ROCE_QP_STATE_ERR
block|,
comment|/* Error */
name|ECORE_ROCE_QP_STATE_SQE
comment|/* Send Queue Error */
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|affiliated_event_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|context
parameter_list|,
name|u8
name|fw_event_code
parameter_list|,
name|void
modifier|*
name|fw_handle
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|unaffiliated_event_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|context
parameter_list|,
name|u8
name|event_code
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|ecore_rdma_events
block|{
name|void
modifier|*
name|context
decl_stmt|;
name|affiliated_event_t
name|affiliated_event
decl_stmt|;
name|unaffiliated_event_t
name|unaffiliated_event
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_device
block|{
comment|/* Vendor specific information */
name|u32
name|vendor_id
decl_stmt|;
name|u32
name|vendor_part_id
decl_stmt|;
name|u32
name|hw_ver
decl_stmt|;
name|u64
name|fw_ver
decl_stmt|;
name|u64
name|node_guid
decl_stmt|;
comment|/* node GUID */
name|u64
name|sys_image_guid
decl_stmt|;
comment|/* System image GUID */
name|u8
name|max_cnq
decl_stmt|;
name|u8
name|max_sge
decl_stmt|;
comment|/* The maximum number of scatter/gather entries 			  * per Work Request supported 			  */
name|u8
name|max_srq_sge
decl_stmt|;
comment|/* The maximum number of scatter/gather entries 			      * per Work Request supported for SRQ 			      */
name|u16
name|max_inline
decl_stmt|;
name|u32
name|max_wqe
decl_stmt|;
comment|/* The maximum number of outstanding work 			  * requests on any Work Queue supported 			  */
name|u32
name|max_srq_wqe
decl_stmt|;
comment|/* The maximum number of outstanding work 			      * requests on any Work Queue supported for SRQ 			      */
name|u8
name|max_qp_resp_rd_atomic_resc
decl_stmt|;
comment|/* The maximum number of RDMA Reads 					     *& atomic operation that can be 					     * outstanding per QP 					     */
name|u8
name|max_qp_req_rd_atomic_resc
decl_stmt|;
comment|/* The maximum depth per QP for 					    * initiation of RDMA Read 					    *& atomic operations 					    */
name|u64
name|max_dev_resp_rd_atomic_resc
decl_stmt|;
name|u32
name|max_cq
decl_stmt|;
name|u32
name|max_qp
decl_stmt|;
name|u32
name|max_srq
decl_stmt|;
comment|/* Maximum number of SRQs */
name|u32
name|max_mr
decl_stmt|;
comment|/* Maximum number of MRs supported by this device */
name|u64
name|max_mr_size
decl_stmt|;
comment|/* Size (in bytes) of the largest contiguous memory 			      * block that can be registered by this device 			      */
name|u32
name|max_cqe
decl_stmt|;
name|u32
name|max_mw
decl_stmt|;
comment|/* The maximum number of memory windows supported */
name|u32
name|max_fmr
decl_stmt|;
name|u32
name|max_mr_mw_fmr_pbl
decl_stmt|;
name|u64
name|max_mr_mw_fmr_size
decl_stmt|;
name|u32
name|max_pd
decl_stmt|;
comment|/* The maximum number of protection domains supported */
name|u32
name|max_ah
decl_stmt|;
name|u8
name|max_pkey
decl_stmt|;
name|u16
name|max_srq_wr
decl_stmt|;
comment|/* Maximum number of WRs per SRQ */
name|u8
name|max_stats_queues
decl_stmt|;
comment|/* Maximum number of statistics queues */
name|u32
name|dev_caps
decl_stmt|;
comment|/* Abilty to support RNR-NAK generation */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_RNR_NAK_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_RNR_NAK_SHIFT
value|0
comment|/* Abilty to support shutdown port */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_SHUTDOWN_PORT_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_SHUTDOWN_PORT_SHIFT
value|1
comment|/* Abilty to support port active event */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_PORT_ACTIVE_EVENT_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_PORT_ACTIVE_EVENT_SHIFT
value|2
comment|/* Abilty to support port change event */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_PORT_CHANGE_EVENT_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_PORT_CHANGE_EVENT_SHIFT
value|3
comment|/* Abilty to support system image GUID */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_SYS_IMAGE_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_SYS_IMAGE_SHIFT
value|4
comment|/* Abilty to support bad P_Key counter support */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_BAD_PKEY_CNT_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_BAD_PKEY_CNT_SHIFT
value|5
comment|/* Abilty to support atomic operations */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_ATOMIC_OP_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_ATOMIC_OP_SHIFT
value|6
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_RESIZE_CQ_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_RESIZE_CQ_SHIFT
value|7
comment|/* Abilty to support modifying the maximum number of 	 * outstanding work requests per QP 	 */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_RESIZE_MAX_WR_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_RESIZE_MAX_WR_SHIFT
value|8
comment|/* Abilty to support automatic path migration */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_AUTO_PATH_MIG_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_AUTO_PATH_MIG_SHIFT
value|9
comment|/* Abilty to support the base memory management extensions */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_BASE_MEMORY_EXT_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_BASE_MEMORY_EXT_SHIFT
value|10
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_BASE_QUEUE_EXT_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_BASE_QUEUE_EXT_SHIFT
value|11
comment|/* Abilty to support multipile page sizes per memory region */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_MULTI_PAGE_PER_MR_EXT_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_MULTI_PAGE_PER_MR_EXT_SHIFT
value|12
comment|/* Abilty to support block list physical buffer list */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_BLOCK_MODE_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_BLOCK_MODE_SHIFT
value|13
comment|/* Abilty to support zero based virtual addresses */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_ZBVA_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_ZBVA_SHIFT
value|14
comment|/* Abilty to support local invalidate fencing */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_LOCAL_INV_FENCE_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_LOCAL_INV_FENCE_SHIFT
value|15
comment|/* Abilty to support Loopback on QP */
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_LB_INDICATOR_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_DEV_CAP_LB_INDICATOR_SHIFT
value|16
name|u64
name|page_size_caps
decl_stmt|;
name|u8
name|dev_ack_delay
decl_stmt|;
name|u32
name|reserved_lkey
decl_stmt|;
comment|/* Value of reserved L_key */
name|u32
name|bad_pkey_counter
decl_stmt|;
comment|/* Bad P_key counter support indicator */
name|struct
name|ecore_rdma_events
name|events
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ecore_port_state
block|{
name|ECORE_RDMA_PORT_UP
block|,
name|ECORE_RDMA_PORT_DOWN
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ecore_roce_capability
block|{
name|ECORE_ROCE_V1
init|=
literal|1
operator|<<
literal|0
block|,
name|ECORE_ROCE_V2
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ecore_rdma_port
block|{
name|enum
name|ecore_port_state
name|port_state
decl_stmt|;
name|int
name|link_speed
decl_stmt|;
name|u64
name|max_msg_size
decl_stmt|;
name|u8
name|source_gid_table_len
decl_stmt|;
name|void
modifier|*
name|source_gid_table_ptr
decl_stmt|;
name|u8
name|pkey_table_len
decl_stmt|;
name|void
modifier|*
name|pkey_table_ptr
decl_stmt|;
name|u32
name|pkey_bad_counter
decl_stmt|;
name|enum
name|ecore_roce_capability
name|capability
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_cnq_params
block|{
name|u8
name|num_pbl_pages
decl_stmt|;
comment|/* Number of pages in the PBL allocated 				   * for this queue 				   */
name|u64
name|pbl_ptr
decl_stmt|;
comment|/* Address to the first entry of the queue PBL */
block|}
struct|;
end_struct

begin_comment
comment|/* The CQ Mode affects the CQ doorbell transaction size.  * 64/32 bit machines should configure to 32/16 bits respectively.  */
end_comment

begin_enum
enum|enum
name|ecore_rdma_cq_mode
block|{
name|ECORE_RDMA_CQ_MODE_16_BITS
block|,
name|ECORE_RDMA_CQ_MODE_32_BITS
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ecore_roce_dcqcn_params
block|{
name|u8
name|notification_point
decl_stmt|;
name|u8
name|reaction_point
decl_stmt|;
comment|/* fields for notification point */
name|u32
name|cnp_send_timeout
decl_stmt|;
comment|/* fields for reaction point */
name|u32
name|rl_bc_rate
decl_stmt|;
comment|/* Byte Counter Limit. */
name|u16
name|rl_max_rate
decl_stmt|;
comment|/* Maximum rate in 1.6 Mbps resolution */
name|u16
name|rl_r_ai
decl_stmt|;
comment|/* Active increase rate */
name|u16
name|rl_r_hai
decl_stmt|;
comment|/* Hyper active increase rate */
name|u16
name|dcqcn_g
decl_stmt|;
comment|/* Alpha update gain in 1/64K resolution */
name|u32
name|dcqcn_k_us
decl_stmt|;
comment|/* Alpha update interval */
name|u32
name|dcqcn_timeout_us
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_ECORE_IWARP
end_ifdef

begin_define
define|#
directive|define
name|ECORE_MPA_RTR_TYPE_NONE
value|0
end_define

begin_comment
comment|/* No RTR type */
end_comment

begin_define
define|#
directive|define
name|ECORE_MPA_RTR_TYPE_ZERO_SEND
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|ECORE_MPA_RTR_TYPE_ZERO_WRITE
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|ECORE_MPA_RTR_TYPE_ZERO_READ
value|(1<< 2)
end_define

begin_enum
enum|enum
name|ecore_mpa_rev
block|{
name|ECORE_MPA_REV1
block|,
name|ECORE_MPA_REV2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ecore_iwarp_params
block|{
name|u32
name|rcv_wnd_size
decl_stmt|;
name|u16
name|ooo_num_rx_bufs
decl_stmt|;
define|#
directive|define
name|ECORE_IWARP_TS_EN
value|(1<< 0)
define|#
directive|define
name|ECORE_IWARP_DA_EN
value|(1<< 1)
name|u8
name|flags
decl_stmt|;
name|u8
name|crc_needed
decl_stmt|;
name|enum
name|ecore_mpa_rev
name|mpa_rev
decl_stmt|;
name|u8
name|mpa_rtr
decl_stmt|;
name|u8
name|mpa_peer2peer
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|ecore_roce_params
block|{
name|enum
name|ecore_rdma_cq_mode
name|cq_mode
decl_stmt|;
name|struct
name|ecore_roce_dcqcn_params
name|dcqcn_params
decl_stmt|;
name|u8
name|ll2_handle
decl_stmt|;
comment|/* required for UD QPs */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_start_in_params
block|{
name|struct
name|ecore_rdma_events
modifier|*
name|events
decl_stmt|;
name|struct
name|ecore_rdma_cnq_params
name|cnq_pbl_list
index|[
literal|128
index|]
decl_stmt|;
name|u8
name|desired_cnq
decl_stmt|;
name|u16
name|max_mtu
decl_stmt|;
name|u8
name|mac_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_ECORE_IWARP
name|struct
name|ecore_iwarp_params
name|iwarp
decl_stmt|;
endif|#
directive|endif
name|struct
name|ecore_roce_params
name|roce
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_add_user_out_params
block|{
comment|/* output variables (given to miniport) */
name|u16
name|dpi
decl_stmt|;
name|u64
name|dpi_addr
decl_stmt|;
name|u64
name|dpi_phys_addr
decl_stmt|;
name|u32
name|dpi_size
decl_stmt|;
name|u16
name|wid_count
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*Returns the CQ CID or zero in case of failure */
end_comment

begin_struct
struct|struct
name|ecore_rdma_create_cq_in_params
block|{
comment|/* input variables (given by miniport) */
name|u32
name|cq_handle_lo
decl_stmt|;
comment|/* CQ handle to be written in CNQ */
name|u32
name|cq_handle_hi
decl_stmt|;
name|u32
name|cq_size
decl_stmt|;
name|u16
name|dpi
decl_stmt|;
name|bool
name|pbl_two_level
decl_stmt|;
name|u64
name|pbl_ptr
decl_stmt|;
name|u16
name|pbl_num_pages
decl_stmt|;
name|u8
name|pbl_page_size_log
decl_stmt|;
comment|/* for the pages that contain the 			   * pointers to the CQ pages 			   */
name|u8
name|cnq_id
decl_stmt|;
name|u16
name|int_timeout
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_resize_cq_in_params
block|{
comment|/* input variables (given by miniport) */
name|u16
name|icid
decl_stmt|;
name|u32
name|cq_size
decl_stmt|;
name|bool
name|pbl_two_level
decl_stmt|;
name|u64
name|pbl_ptr
decl_stmt|;
name|u16
name|pbl_num_pages
decl_stmt|;
name|u8
name|pbl_page_size_log
decl_stmt|;
comment|/* for the pages that contain the 		       * pointers to the CQ pages 		       */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|roce_mode
block|{
name|ROCE_V1
block|,
name|ROCE_V2_IPV4
block|,
name|ROCE_V2_IPV6
block|,
name|MAX_ROCE_MODE
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ecore_rdma_create_qp_in_params
block|{
comment|/* input variables (given by miniport) */
name|u32
name|qp_handle_lo
decl_stmt|;
comment|/* QP handle to be written in CQE */
name|u32
name|qp_handle_hi
decl_stmt|;
name|u32
name|qp_handle_async_lo
decl_stmt|;
comment|/* QP handle to be written in async event */
name|u32
name|qp_handle_async_hi
decl_stmt|;
name|bool
name|use_srq
decl_stmt|;
name|bool
name|signal_all
decl_stmt|;
name|bool
name|fmr_and_reserved_lkey
decl_stmt|;
name|u16
name|pd
decl_stmt|;
name|u16
name|dpi
decl_stmt|;
name|u16
name|sq_cq_id
decl_stmt|;
name|u16
name|sq_num_pages
decl_stmt|;
name|u64
name|sq_pbl_ptr
decl_stmt|;
comment|/* Not relevant for iWARP */
name|u8
name|max_sq_sges
decl_stmt|;
name|u16
name|rq_cq_id
decl_stmt|;
name|u16
name|rq_num_pages
decl_stmt|;
name|u64
name|rq_pbl_ptr
decl_stmt|;
comment|/* Not relevant for iWARP */
name|u16
name|srq_id
decl_stmt|;
name|u8
name|stats_queue
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_create_qp_out_params
block|{
comment|/* output variables (given to miniport) */
name|u32
name|qp_id
decl_stmt|;
name|u16
name|icid
decl_stmt|;
name|void
modifier|*
name|rq_pbl_virt
decl_stmt|;
name|dma_addr_t
name|rq_pbl_phys
decl_stmt|;
name|void
modifier|*
name|sq_pbl_virt
decl_stmt|;
name|dma_addr_t
name|sq_pbl_phys
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_destroy_cq_in_params
block|{
comment|/* input variables (given by miniport) */
name|u16
name|icid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_destroy_cq_out_params
block|{
comment|/* output variables, provided to the upper layer */
comment|/* Sequence number of completion notification sent for the CQ on 	 * the associated CNQ 	 */
name|u16
name|num_cq_notif
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* ECORE GID can be used as IPv4/6 address in RoCE v2 */
end_comment

begin_union
union|union
name|ecore_gid
block|{
name|u8
name|bytes
index|[
literal|16
index|]
decl_stmt|;
name|u16
name|words
index|[
literal|8
index|]
decl_stmt|;
name|u32
name|dwords
index|[
literal|4
index|]
decl_stmt|;
name|u64
name|qwords
index|[
literal|2
index|]
decl_stmt|;
name|u32
name|ipv4_addr
decl_stmt|;
block|}
union|;
end_union

begin_struct
struct|struct
name|ecore_rdma_modify_qp_in_params
block|{
comment|/* input variables (given by miniport) */
name|u32
name|modify_flags
decl_stmt|;
define|#
directive|define
name|ECORE_RDMA_MODIFY_QP_VALID_NEW_STATE_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_MODIFY_QP_VALID_NEW_STATE_SHIFT
value|0
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_PKEY_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_PKEY_SHIFT
value|1
define|#
directive|define
name|ECORE_RDMA_MODIFY_QP_VALID_RDMA_OPS_EN_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_MODIFY_QP_VALID_RDMA_OPS_EN_SHIFT
value|2
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_DEST_QP_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_DEST_QP_SHIFT
value|3
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_ADDRESS_VECTOR_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_ADDRESS_VECTOR_SHIFT
value|4
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_RQ_PSN_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_RQ_PSN_SHIFT
value|5
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_SQ_PSN_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_SQ_PSN_SHIFT
value|6
define|#
directive|define
name|ECORE_RDMA_MODIFY_QP_VALID_MAX_RD_ATOMIC_REQ_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_MODIFY_QP_VALID_MAX_RD_ATOMIC_REQ_SHIFT
value|7
define|#
directive|define
name|ECORE_RDMA_MODIFY_QP_VALID_MAX_RD_ATOMIC_RESP_MASK
value|0x1
define|#
directive|define
name|ECORE_RDMA_MODIFY_QP_VALID_MAX_RD_ATOMIC_RESP_SHIFT
value|8
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_ACK_TIMEOUT_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_ACK_TIMEOUT_SHIFT
value|9
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_RETRY_CNT_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_RETRY_CNT_SHIFT
value|10
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_RNR_RETRY_CNT_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_RNR_RETRY_CNT_SHIFT
value|11
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_MIN_RNR_NAK_TIMER_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_MIN_RNR_NAK_TIMER_SHIFT
value|12
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_E2E_FLOW_CONTROL_EN_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_E2E_FLOW_CONTROL_EN_SHIFT
value|13
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_ROCE_MODE_MASK
value|0x1
define|#
directive|define
name|ECORE_ROCE_MODIFY_QP_VALID_ROCE_MODE_SHIFT
value|14
name|enum
name|ecore_roce_qp_state
name|new_state
decl_stmt|;
name|u16
name|pkey
decl_stmt|;
name|bool
name|incoming_rdma_read_en
decl_stmt|;
name|bool
name|incoming_rdma_write_en
decl_stmt|;
name|bool
name|incoming_atomic_en
decl_stmt|;
name|bool
name|e2e_flow_control_en
decl_stmt|;
name|u32
name|dest_qp
decl_stmt|;
name|u16
name|mtu
decl_stmt|;
name|u8
name|traffic_class_tos
decl_stmt|;
comment|/* IPv6/GRH tc; IPv4 TOS */
name|u8
name|hop_limit_ttl
decl_stmt|;
comment|/* IPv6/GRH hop limit; IPv4 TTL */
name|u32
name|flow_label
decl_stmt|;
comment|/* ignored in IPv4 */
name|union
name|ecore_gid
name|sgid
decl_stmt|;
comment|/* GRH SGID; IPv4/6 Source IP */
name|union
name|ecore_gid
name|dgid
decl_stmt|;
comment|/* GRH DGID; IPv4/6 Destination IP */
name|u16
name|udp_src_port
decl_stmt|;
comment|/* RoCEv2 only */
name|u16
name|vlan_id
decl_stmt|;
name|u32
name|rq_psn
decl_stmt|;
name|u32
name|sq_psn
decl_stmt|;
name|u8
name|max_rd_atomic_resp
decl_stmt|;
name|u8
name|max_rd_atomic_req
decl_stmt|;
name|u32
name|ack_timeout
decl_stmt|;
name|u8
name|retry_cnt
decl_stmt|;
name|u8
name|rnr_retry_cnt
decl_stmt|;
name|u8
name|min_rnr_nak_timer
decl_stmt|;
name|bool
name|sqd_async
decl_stmt|;
name|u8
name|remote_mac_addr
index|[
literal|6
index|]
decl_stmt|;
name|u8
name|local_mac_addr
index|[
literal|6
index|]
decl_stmt|;
name|bool
name|use_local_mac
decl_stmt|;
name|enum
name|roce_mode
name|roce_mode
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_query_qp_out_params
block|{
comment|/* output variables (given to miniport) */
name|enum
name|ecore_roce_qp_state
name|state
decl_stmt|;
name|u32
name|rq_psn
decl_stmt|;
comment|/* responder */
name|u32
name|sq_psn
decl_stmt|;
comment|/* requester */
name|bool
name|draining
decl_stmt|;
comment|/* send queue is draining */
name|u16
name|mtu
decl_stmt|;
name|u32
name|dest_qp
decl_stmt|;
name|bool
name|incoming_rdma_read_en
decl_stmt|;
name|bool
name|incoming_rdma_write_en
decl_stmt|;
name|bool
name|incoming_atomic_en
decl_stmt|;
name|bool
name|e2e_flow_control_en
decl_stmt|;
name|union
name|ecore_gid
name|sgid
decl_stmt|;
comment|/* GRH SGID; IPv4/6 Source IP */
name|union
name|ecore_gid
name|dgid
decl_stmt|;
comment|/* GRH DGID; IPv4/6 Destination IP */
name|u32
name|flow_label
decl_stmt|;
comment|/* ignored in IPv4 */
name|u8
name|hop_limit_ttl
decl_stmt|;
comment|/* IPv6/GRH hop limit; IPv4 TTL */
name|u8
name|traffic_class_tos
decl_stmt|;
comment|/* IPv6/GRH tc; IPv4 TOS */
name|u32
name|timeout
decl_stmt|;
name|u8
name|rnr_retry
decl_stmt|;
name|u8
name|retry_cnt
decl_stmt|;
name|u8
name|min_rnr_nak_timer
decl_stmt|;
name|u16
name|pkey_index
decl_stmt|;
name|u8
name|max_rd_atomic
decl_stmt|;
name|u8
name|max_dest_rd_atomic
decl_stmt|;
name|bool
name|sqd_async
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_register_tid_in_params
block|{
comment|/* input variables (given by miniport) */
name|u32
name|itid
decl_stmt|;
comment|/* index only, 18 bit long, lkey = itid<< 8 | key */
name|enum
name|ecore_rdma_tid_type
name|tid_type
decl_stmt|;
name|u8
name|key
decl_stmt|;
name|u16
name|pd
decl_stmt|;
name|bool
name|local_read
decl_stmt|;
name|bool
name|local_write
decl_stmt|;
name|bool
name|remote_read
decl_stmt|;
name|bool
name|remote_write
decl_stmt|;
name|bool
name|remote_atomic
decl_stmt|;
name|bool
name|mw_bind
decl_stmt|;
name|u64
name|pbl_ptr
decl_stmt|;
name|bool
name|pbl_two_level
decl_stmt|;
name|u8
name|pbl_page_size_log
decl_stmt|;
comment|/* for the pages that contain the pointers 		       * to the MR pages 		       */
name|u8
name|page_size_log
decl_stmt|;
comment|/* for the MR pages */
name|u32
name|fbo
decl_stmt|;
name|u64
name|length
decl_stmt|;
comment|/* only lower 40 bits are valid */
name|u64
name|vaddr
decl_stmt|;
name|bool
name|zbva
decl_stmt|;
name|bool
name|phy_mr
decl_stmt|;
name|bool
name|dma_mr
decl_stmt|;
comment|/* DIF related fields */
name|bool
name|dif_enabled
decl_stmt|;
name|u64
name|dif_error_addr
decl_stmt|;
name|u64
name|dif_runt_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_create_srq_in_params
block|{
name|u64
name|pbl_base_addr
decl_stmt|;
name|u64
name|prod_pair_addr
decl_stmt|;
name|u16
name|num_pages
decl_stmt|;
name|u16
name|pd_id
decl_stmt|;
name|u16
name|page_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_create_srq_out_params
block|{
name|u16
name|srq_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_destroy_srq_in_params
block|{
name|u16
name|srq_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_modify_srq_in_params
block|{
name|u32
name|wqe_limit
decl_stmt|;
name|u16
name|srq_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_resize_cq_out_params
block|{
comment|/* output variables, provided to the upper layer */
name|u32
name|prod
decl_stmt|;
comment|/* CQ producer value on old PBL */
name|u32
name|cons
decl_stmt|;
comment|/* CQ consumer value on old PBL */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_resize_cnq_in_params
block|{
comment|/* input variables (given by miniport) */
name|u32
name|cnq_id
decl_stmt|;
name|u32
name|pbl_page_size_log
decl_stmt|;
comment|/* for the pages that contain the 			* pointers to the cnq pages 			*/
name|u64
name|pbl_ptr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_stats_out_params
block|{
name|u64
name|sent_bytes
decl_stmt|;
name|u64
name|sent_pkts
decl_stmt|;
name|u64
name|rcv_bytes
decl_stmt|;
name|u64
name|rcv_pkts
decl_stmt|;
comment|/* RoCE only */
name|u64
name|icrc_errors
decl_stmt|;
comment|/* wraps at 32 bits */
name|u64
name|retransmit_events
decl_stmt|;
comment|/* wraps at 32 bits */
name|u64
name|silent_drops
decl_stmt|;
comment|/* wraps at 16 bits */
name|u64
name|rnr_nacks_sent
decl_stmt|;
comment|/* wraps at 16 bits */
comment|/* iWARP only */
name|u64
name|iwarp_tx_fast_rxmit_cnt
decl_stmt|;
name|u64
name|iwarp_tx_slow_start_cnt
decl_stmt|;
name|u64
name|unalign_rx_comp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rdma_counters_out_params
block|{
name|u64
name|pd_count
decl_stmt|;
name|u64
name|max_pd
decl_stmt|;
name|u64
name|dpi_count
decl_stmt|;
name|u64
name|max_dpi
decl_stmt|;
name|u64
name|cq_count
decl_stmt|;
name|u64
name|max_cq
decl_stmt|;
name|u64
name|qp_count
decl_stmt|;
name|u64
name|max_qp
decl_stmt|;
name|u64
name|tid_count
decl_stmt|;
name|u64
name|max_tid
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_add_user
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_add_user_out_params
modifier|*
name|out_params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_alloc_pd
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|u16
modifier|*
name|pd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_alloc_tid
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|u32
modifier|*
name|tid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_create_cq
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_create_cq_in_params
modifier|*
name|params
parameter_list|,
name|u16
modifier|*
name|icid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Returns a pointer to the responders' CID, which is also a pointer to the  * ecore_qp_params struct. Returns NULL in case of failure.  */
end_comment

begin_function_decl
name|struct
name|ecore_rdma_qp
modifier|*
name|ecore_rdma_create_qp
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_create_qp_in_params
modifier|*
name|in_params
parameter_list|,
name|struct
name|ecore_rdma_create_qp_out_params
modifier|*
name|out_params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_roce_create_ud_qp
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_create_qp_out_params
modifier|*
name|out_params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_deregister_tid
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|u32
name|tid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_destroy_cq
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_destroy_cq_in_params
modifier|*
name|in_params
parameter_list|,
name|struct
name|ecore_rdma_destroy_cq_out_params
modifier|*
name|out_params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_destroy_qp
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_roce_destroy_ud_qp
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|u16
name|cid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_rdma_free_pd
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|u16
name|pd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_rdma_free_tid
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|u32
name|tid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_modify_qp
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ecore_rdma_modify_qp_in_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ecore_rdma_device
modifier|*
name|ecore_rdma_query_device
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ecore_rdma_port
modifier|*
name|ecore_rdma_query_port
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_query_qp
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ecore_rdma_query_qp_out_params
modifier|*
name|out_params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_register_tid
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_register_tid_in_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_rdma_remove_user
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|u16
name|dpi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_resize_cnq
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_resize_cnq_in_params
modifier|*
name|in_params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*Returns the CQ CID or zero in case of failure */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_resize_cq
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_resize_cq_in_params
modifier|*
name|in_params
parameter_list|,
name|struct
name|ecore_rdma_resize_cq_out_params
modifier|*
name|out_params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Before calling rdma_start upper layer (VBD/qed) should fill the  * page-size and mtu in hwfn context  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_start
parameter_list|(
name|void
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_rdma_start_in_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_stop
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_query_stats
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|u8
name|stats_queue
parameter_list|,
name|struct
name|ecore_rdma_stats_out_params
modifier|*
name|out_parms
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_rdma_query_counters
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_rdma_counters_out_params
modifier|*
name|out_parms
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u32
name|ecore_rdma_get_sb_id
parameter_list|(
name|void
modifier|*
name|p_hwfn
parameter_list|,
name|u32
name|rel_sb_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u32
name|ecore_rdma_query_cau_timer_res
parameter_list|(
name|void
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_rdma_cnq_prod_update
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|u8
name|cnq_index
parameter_list|,
name|u16
name|prod
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_rdma_resc_free
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_ECORE_IWARP
end_ifdef

begin_comment
comment|/* iWARP API */
end_comment

begin_enum
enum|enum
name|ecore_iwarp_event_type
block|{
name|ECORE_IWARP_EVENT_MPA_REQUEST
block|,
comment|/* Passive side request received */
name|ECORE_IWARP_EVENT_PASSIVE_COMPLETE
block|,
comment|/* Passive side established 					     * ( ack on mpa response ) 					     */
name|ECORE_IWARP_EVENT_ACTIVE_COMPLETE
block|,
comment|/* Active side reply received */
name|ECORE_IWARP_EVENT_DISCONNECT
block|,
name|ECORE_IWARP_EVENT_CLOSE
block|,
name|ECORE_IWARP_EVENT_IRQ_FULL
block|,
name|ECORE_IWARP_EVENT_RQ_EMPTY
block|,
name|ECORE_IWARP_EVENT_LLP_TIMEOUT
block|,
name|ECORE_IWARP_EVENT_REMOTE_PROTECTION_ERROR
block|,
name|ECORE_IWARP_EVENT_CQ_OVERFLOW
block|,
name|ECORE_IWARP_EVENT_QP_CATASTROPHIC
block|,
name|ECORE_IWARP_EVENT_ACTIVE_MPA_REPLY
block|,
name|ECORE_IWARP_EVENT_LOCAL_ACCESS_ERROR
block|,
name|ECORE_IWARP_EVENT_REMOTE_OPERATION_ERROR
block|,
name|ECORE_IWARP_EVENT_TERMINATE_RECEIVED
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ecore_tcp_ip_version
block|{
name|ECORE_TCP_IPV4
block|,
name|ECORE_TCP_IPV6
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ecore_iwarp_cm_info
block|{
name|enum
name|ecore_tcp_ip_version
name|ip_version
decl_stmt|;
name|u32
name|remote_ip
index|[
literal|4
index|]
decl_stmt|;
name|u32
name|local_ip
index|[
literal|4
index|]
decl_stmt|;
name|u16
name|remote_port
decl_stmt|;
name|u16
name|local_port
decl_stmt|;
name|u16
name|vlan
decl_stmt|;
specifier|const
name|void
modifier|*
name|private_data
decl_stmt|;
name|u16
name|private_data_len
decl_stmt|;
name|u8
name|ord
decl_stmt|;
name|u8
name|ird
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_iwarp_cm_event_params
block|{
name|enum
name|ecore_iwarp_event_type
name|event
decl_stmt|;
specifier|const
name|struct
name|ecore_iwarp_cm_info
modifier|*
name|cm_info
decl_stmt|;
name|void
modifier|*
name|ep_context
decl_stmt|;
comment|/* To be passed to accept call */
name|int
name|status
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|iwarp_event_handler
function_decl|)
parameter_list|(
name|void
modifier|*
name|context
parameter_list|,
name|struct
name|ecore_iwarp_cm_event_params
modifier|*
name|event
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/* Active Side Connect Flow:  * upper layer driver calls ecore_iwarp_connect  * Function is blocking: i.e. returns after tcp connection is established  * After MPA connection is established ECORE_IWARP_EVENT_ACTIVE_COMPLETE event  * will be passed to upperlayer driver using the event_cb passed in  * ecore_iwarp_connect_in. Information of the established connection will be  * initialized in event data.  */
end_comment

begin_struct
struct|struct
name|ecore_iwarp_connect_in
block|{
name|iwarp_event_handler
name|event_cb
decl_stmt|;
name|void
modifier|*
name|cb_context
decl_stmt|;
name|struct
name|ecore_rdma_qp
modifier|*
name|qp
decl_stmt|;
name|struct
name|ecore_iwarp_cm_info
name|cm_info
decl_stmt|;
name|u16
name|mss
decl_stmt|;
name|u8
name|remote_mac_addr
index|[
literal|6
index|]
decl_stmt|;
name|u8
name|local_mac_addr
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_iwarp_connect_out
block|{
name|void
modifier|*
name|ep_context
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Passive side connect flow:  * upper layer driver calls ecore_iwarp_create_listen  * once Syn packet that matches a ip/port that is listened on arrives, ecore  * will offload the tcp connection. After MPA Request is received on the  * offload connection, the event ECORE_IWARP_EVENT_MPA_REQUEST will be sent  * to upper layer driver using the event_cb passed below. The event data  * will be placed in event parameter. After upper layer driver processes the  * event, ecore_iwarp_accept or ecore_iwarp_reject should be called to continue  * MPA negotiation. Once negotiation is complete the event  * ECORE_IWARP_EVENT_PASSIVE_COMPLETE will be passed to the event_cb passed  * originally in ecore_iwarp_listen_in structure.  */
end_comment

begin_struct
struct|struct
name|ecore_iwarp_listen_in
block|{
name|iwarp_event_handler
name|event_cb
decl_stmt|;
comment|/* Callback func for delivering events */
name|void
modifier|*
name|cb_context
decl_stmt|;
comment|/* passed to event_cb */
name|u32
name|max_backlog
decl_stmt|;
comment|/* Max num of pending incoming connection requests */
name|enum
name|ecore_tcp_ip_version
name|ip_version
decl_stmt|;
name|u32
name|ip_addr
index|[
literal|4
index|]
decl_stmt|;
name|u16
name|port
decl_stmt|;
name|u16
name|vlan
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_iwarp_listen_out
block|{
name|void
modifier|*
name|handle
decl_stmt|;
comment|/* to be sent to destroy */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_iwarp_accept_in
block|{
name|void
modifier|*
name|ep_context
decl_stmt|;
comment|/* From event data of ECORE_IWARP_EVENT_MPA_REQUEST */
name|void
modifier|*
name|cb_context
decl_stmt|;
comment|/* context to be passed to event_cb */
name|struct
name|ecore_rdma_qp
modifier|*
name|qp
decl_stmt|;
specifier|const
name|void
modifier|*
name|private_data
decl_stmt|;
name|u16
name|private_data_len
decl_stmt|;
name|u8
name|ord
decl_stmt|;
name|u8
name|ird
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_iwarp_reject_in
block|{
name|void
modifier|*
name|ep_context
decl_stmt|;
comment|/* From event data of ECORE_IWARP_EVENT_MPA_REQUEST */
name|void
modifier|*
name|cb_context
decl_stmt|;
comment|/* context to be passed to event_cb */
specifier|const
name|void
modifier|*
name|private_data
decl_stmt|;
name|u16
name|private_data_len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_iwarp_send_rtr_in
block|{
name|void
modifier|*
name|ep_context
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_iwarp_tcp_abort_in
block|{
name|void
modifier|*
name|ep_context
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iwarp_connect
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_iwarp_connect_in
modifier|*
name|iparams
parameter_list|,
name|struct
name|ecore_iwarp_connect_out
modifier|*
name|oparams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iwarp_create_listen
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_iwarp_listen_in
modifier|*
name|iparams
parameter_list|,
name|struct
name|ecore_iwarp_listen_out
modifier|*
name|oparams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iwarp_accept
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_iwarp_accept_in
modifier|*
name|iparams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iwarp_reject
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_iwarp_reject_in
modifier|*
name|iparams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iwarp_destroy_listen
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iwarp_send_rtr
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_iwarp_send_rtr_in
modifier|*
name|iparams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iwarp_tcp_abort
parameter_list|(
name|void
modifier|*
name|rdma_cxt
parameter_list|,
name|struct
name|ecore_iwarp_tcp_abort_in
modifier|*
name|iparams
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_ECORE_IWARP */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

