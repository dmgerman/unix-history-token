begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2017-2018 Cavium, Inc.   * All rights reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  *  POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ECORE_L2_API_H__
end_ifndef

begin_define
define|#
directive|define
name|__ECORE_L2_API_H__
end_define

begin_include
include|#
directive|include
file|"ecore_status.h"
end_include

begin_include
include|#
directive|include
file|"ecore_sp_api.h"
end_include

begin_include
include|#
directive|include
file|"ecore_int_api.h"
end_include

begin_enum
enum|enum
name|ecore_rss_caps
block|{
name|ECORE_RSS_IPV4
init|=
literal|0x1
block|,
name|ECORE_RSS_IPV6
init|=
literal|0x2
block|,
name|ECORE_RSS_IPV4_TCP
init|=
literal|0x4
block|,
name|ECORE_RSS_IPV6_TCP
init|=
literal|0x8
block|,
name|ECORE_RSS_IPV4_UDP
init|=
literal|0x10
block|,
name|ECORE_RSS_IPV6_UDP
init|=
literal|0x20
block|, }
enum|;
end_enum

begin_comment
comment|/* Should be the same as ETH_RSS_IND_TABLE_ENTRIES_NUM */
end_comment

begin_define
define|#
directive|define
name|ECORE_RSS_IND_TABLE_SIZE
value|128
end_define

begin_define
define|#
directive|define
name|ECORE_RSS_KEY_SIZE
value|10
end_define

begin_comment
comment|/* size in 32b chunks */
end_comment

begin_define
define|#
directive|define
name|ECORE_MAX_PHC_DRIFT_PPB
value|291666666
end_define

begin_enum
enum|enum
name|ecore_ptp_filter_type
block|{
name|ECORE_PTP_FILTER_L2
block|,
name|ECORE_PTP_FILTER_IPV4
block|,
name|ECORE_PTP_FILTER_IPV4_IPV6
block|,
name|ECORE_PTP_FILTER_L2_IPV4_IPV6
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ecore_queue_start_common_params
block|{
comment|/* Should always be relative to entity sending this. */
name|u8
name|vport_id
decl_stmt|;
name|u16
name|queue_id
decl_stmt|;
comment|/* Relative, but relevant only for PFs */
name|u8
name|stats_id
decl_stmt|;
name|struct
name|ecore_sb_info
modifier|*
name|p_sb
decl_stmt|;
name|u8
name|sb_idx
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rxq_start_ret_params
block|{
name|void
name|OSAL_IOMEM
modifier|*
name|p_prod
decl_stmt|;
name|void
modifier|*
name|p_handle
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_txq_start_ret_params
block|{
name|void
name|OSAL_IOMEM
modifier|*
name|p_doorbell
decl_stmt|;
name|void
modifier|*
name|p_handle
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_rss_params
block|{
name|u8
name|update_rss_config
decl_stmt|;
name|u8
name|rss_enable
decl_stmt|;
name|u8
name|rss_eng_id
decl_stmt|;
name|u8
name|update_rss_capabilities
decl_stmt|;
name|u8
name|update_rss_ind_table
decl_stmt|;
name|u8
name|update_rss_key
decl_stmt|;
name|u8
name|rss_caps
decl_stmt|;
name|u8
name|rss_table_size_log
decl_stmt|;
comment|/* The table size is 2 ^ rss_table_size_log */
comment|/* Indirection table consist of rx queue handles */
name|void
modifier|*
name|rss_ind_table
index|[
name|ECORE_RSS_IND_TABLE_SIZE
index|]
decl_stmt|;
name|u32
name|rss_key
index|[
name|ECORE_RSS_KEY_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_sge_tpa_params
block|{
name|u8
name|max_buffers_per_cqe
decl_stmt|;
name|u8
name|update_tpa_en_flg
decl_stmt|;
name|u8
name|tpa_ipv4_en_flg
decl_stmt|;
name|u8
name|tpa_ipv6_en_flg
decl_stmt|;
name|u8
name|tpa_ipv4_tunn_en_flg
decl_stmt|;
name|u8
name|tpa_ipv6_tunn_en_flg
decl_stmt|;
name|u8
name|update_tpa_param_flg
decl_stmt|;
name|u8
name|tpa_pkt_split_flg
decl_stmt|;
name|u8
name|tpa_hdr_data_split_flg
decl_stmt|;
name|u8
name|tpa_gro_consistent_flg
decl_stmt|;
name|u8
name|tpa_max_aggs_num
decl_stmt|;
name|u16
name|tpa_max_size
decl_stmt|;
name|u16
name|tpa_min_size_to_start
decl_stmt|;
name|u16
name|tpa_min_size_to_cont
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ecore_filter_opcode
block|{
name|ECORE_FILTER_ADD
block|,
name|ECORE_FILTER_REMOVE
block|,
name|ECORE_FILTER_MOVE
block|,
name|ECORE_FILTER_REPLACE
block|,
comment|/* Delete all MACs and add new one instead */
name|ECORE_FILTER_FLUSH
block|,
comment|/* Removes all filters */
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ecore_filter_ucast_type
block|{
name|ECORE_FILTER_MAC
block|,
name|ECORE_FILTER_VLAN
block|,
name|ECORE_FILTER_MAC_VLAN
block|,
name|ECORE_FILTER_INNER_MAC
block|,
name|ECORE_FILTER_INNER_VLAN
block|,
name|ECORE_FILTER_INNER_PAIR
block|,
name|ECORE_FILTER_INNER_MAC_VNI_PAIR
block|,
name|ECORE_FILTER_MAC_VNI_PAIR
block|,
name|ECORE_FILTER_VNI
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ecore_filter_ucast
block|{
name|enum
name|ecore_filter_opcode
name|opcode
decl_stmt|;
name|enum
name|ecore_filter_ucast_type
name|type
decl_stmt|;
name|u8
name|is_rx_filter
decl_stmt|;
name|u8
name|is_tx_filter
decl_stmt|;
name|u8
name|vport_to_add_to
decl_stmt|;
name|u8
name|vport_to_remove_from
decl_stmt|;
name|unsigned
name|char
name|mac
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|assert_on_error
decl_stmt|;
name|u16
name|vlan
decl_stmt|;
name|u32
name|vni
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_filter_mcast
block|{
comment|/* MOVE is not supported for multicast */
name|enum
name|ecore_filter_opcode
name|opcode
decl_stmt|;
name|u8
name|vport_to_add_to
decl_stmt|;
name|u8
name|vport_to_remove_from
decl_stmt|;
name|u8
name|num_mc_addrs
decl_stmt|;
define|#
directive|define
name|ECORE_MAX_MC_ADDRS
value|64
name|unsigned
name|char
name|mac
index|[
name|ECORE_MAX_MC_ADDRS
index|]
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_filter_accept_flags
block|{
name|u8
name|update_rx_mode_config
decl_stmt|;
name|u8
name|update_tx_mode_config
decl_stmt|;
name|u8
name|rx_accept_filter
decl_stmt|;
name|u8
name|tx_accept_filter
decl_stmt|;
define|#
directive|define
name|ECORE_ACCEPT_NONE
value|0x01
define|#
directive|define
name|ECORE_ACCEPT_UCAST_MATCHED
value|0x02
define|#
directive|define
name|ECORE_ACCEPT_UCAST_UNMATCHED
value|0x04
define|#
directive|define
name|ECORE_ACCEPT_MCAST_MATCHED
value|0x08
define|#
directive|define
name|ECORE_ACCEPT_MCAST_UNMATCHED
value|0x10
define|#
directive|define
name|ECORE_ACCEPT_BCAST
value|0x20
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_arfs_config_params
block|{
name|bool
name|tcp
decl_stmt|;
name|bool
name|udp
decl_stmt|;
name|bool
name|ipv4
decl_stmt|;
name|bool
name|ipv6
decl_stmt|;
name|bool
name|arfs_enable
decl_stmt|;
comment|/* Enable or disable arfs mode */
block|}
struct|;
end_struct

begin_comment
comment|/* Add / remove / move / remove-all unicast MAC-VLAN filters.  * FW will assert in the following cases, so driver should take care...:  * 1. Adding a filter to a full table.  * 2. Adding a filter which already exists on that vport.  * 3. Removing a filter which doesn't exist.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_filter_ucast_cmd
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|struct
name|ecore_filter_ucast
modifier|*
name|p_filter_cmd
parameter_list|,
name|enum
name|spq_mode
name|comp_mode
parameter_list|,
name|struct
name|ecore_spq_comp_cb
modifier|*
name|p_comp_data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Add / remove / move multicast MAC filters. */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_filter_mcast_cmd
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|struct
name|ecore_filter_mcast
modifier|*
name|p_filter_cmd
parameter_list|,
name|enum
name|spq_mode
name|comp_mode
parameter_list|,
name|struct
name|ecore_spq_comp_cb
modifier|*
name|p_comp_data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Set "accept" filters */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_filter_accept_cmd
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u8
name|vport
parameter_list|,
name|struct
name|ecore_filter_accept_flags
name|accept_flags
parameter_list|,
name|u8
name|update_accept_any_vlan
parameter_list|,
name|u8
name|accept_any_vlan
parameter_list|,
name|enum
name|spq_mode
name|comp_mode
parameter_list|,
name|struct
name|ecore_spq_comp_cb
modifier|*
name|p_comp_data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_eth_rx_queue_start - RX Queue Start Ramrod  *  * This ramrod initializes an RX Queue for a VPort. An Assert is generated if  * the VPort ID is not currently initialized.  *  * @param p_hwfn  * @param opaque_fid  * @p_params			Inputs; Relative for PF [SB being an exception]  * @param bd_max_bytes 		Maximum bytes that can be placed on a BD  * @param bd_chain_phys_addr	Physical address of BDs for receive.  * @param cqe_pbl_addr		Physical address of the CQE PBL Table.  * @param cqe_pbl_size 		Size of the CQE PBL Table  * @param p_ret_params		Pointed struct to be filled with outputs.  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_eth_rx_queue_start
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|opaque_fid
parameter_list|,
name|struct
name|ecore_queue_start_common_params
modifier|*
name|p_params
parameter_list|,
name|u16
name|bd_max_bytes
parameter_list|,
name|dma_addr_t
name|bd_chain_phys_addr
parameter_list|,
name|dma_addr_t
name|cqe_pbl_addr
parameter_list|,
name|u16
name|cqe_pbl_size
parameter_list|,
name|struct
name|ecore_rxq_start_ret_params
modifier|*
name|p_ret_params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_eth_rx_queue_stop - This ramrod closes an Rx queue  *  * @param p_hwfn  * @param p_rxq			Handler of queue to close  * @param eq_completion_only	If True completion will be on  *				EQe, if False completion will be  *				on EQe if p_hwfn opaque  *				different from the RXQ opaque  *				otherwise on CQe.  * @param cqe_completion	If True completion will be  *				receive on CQe.  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_eth_rx_queue_stop
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|void
modifier|*
name|p_rxq
parameter_list|,
name|bool
name|eq_completion_only
parameter_list|,
name|bool
name|cqe_completion
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - TX Queue Start Ramrod  *  * This ramrod initializes a TX Queue for a VPort. An Assert is generated if  * the VPort is not currently initialized.  *  * @param p_hwfn  * @param opaque_fid  * @p_params  * @param tc			traffic class to use with this L2 txq  * @param pbl_addr		address of the pbl array  * @param pbl_size 		number of entries in pbl  * @oaram p_ret_params		Pointer to fill the return parameters in.  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_eth_tx_queue_start
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|opaque_fid
parameter_list|,
name|struct
name|ecore_queue_start_common_params
modifier|*
name|p_params
parameter_list|,
name|u8
name|tc
parameter_list|,
name|dma_addr_t
name|pbl_addr
parameter_list|,
name|u16
name|pbl_size
parameter_list|,
name|struct
name|ecore_txq_start_ret_params
modifier|*
name|p_ret_params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_eth_tx_queue_stop - closes a Tx queue  *  * @param p_hwfn  * @param p_txq - handle to Tx queue needed to be closed  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_eth_tx_queue_stop
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|void
modifier|*
name|p_txq
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|ecore_tpa_mode
block|{
name|ECORE_TPA_MODE_NONE
block|,
name|ECORE_TPA_MODE_RSC
block|,
name|ECORE_TPA_MODE_GRO
block|,
name|ECORE_TPA_MODE_MAX
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ecore_sp_vport_start_params
block|{
name|enum
name|ecore_tpa_mode
name|tpa_mode
decl_stmt|;
name|bool
name|remove_inner_vlan
decl_stmt|;
comment|/* Inner VLAN removal is enabled */
name|bool
name|tx_switching
decl_stmt|;
comment|/* Vport supports tx-switching */
name|bool
name|handle_ptp_pkts
decl_stmt|;
comment|/* Handle PTP packets */
name|bool
name|only_untagged
decl_stmt|;
comment|/* Untagged pkt control */
name|bool
name|drop_ttl0
decl_stmt|;
comment|/* Drop packets with TTL = 0 */
name|u8
name|max_buffers_per_cqe
decl_stmt|;
name|u32
name|concrete_fid
decl_stmt|;
name|u16
name|opaque_fid
decl_stmt|;
name|u8
name|vport_id
decl_stmt|;
comment|/* VPORT ID */
name|u16
name|mtu
decl_stmt|;
comment|/* VPORT MTU */
name|bool
name|zero_placement_offset
decl_stmt|;
name|bool
name|check_mac
decl_stmt|;
name|bool
name|check_ethtype
decl_stmt|;
comment|/* Strict behavior on transmission errors */
name|bool
name|b_err_illegal_vlan_mode
decl_stmt|;
name|bool
name|b_err_illegal_inband_mode
decl_stmt|;
name|bool
name|b_err_vlan_insert_with_inband
decl_stmt|;
name|bool
name|b_err_small_pkt
decl_stmt|;
name|bool
name|b_err_big_pkt
decl_stmt|;
name|bool
name|b_err_anti_spoof
decl_stmt|;
name|bool
name|b_err_ctrl_frame
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * @brief ecore_sp_vport_start -  *  * This ramrod initializes a VPort. An Assert if generated if the Function ID  * of the VPort is not enabled.  *  * @param p_hwfn  * @param p_params		VPORT start params  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_sp_vport_start
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_sp_vport_start_params
modifier|*
name|p_params
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ecore_sp_vport_update_params
block|{
name|u16
name|opaque_fid
decl_stmt|;
name|u8
name|vport_id
decl_stmt|;
name|u8
name|update_vport_active_rx_flg
decl_stmt|;
name|u8
name|vport_active_rx_flg
decl_stmt|;
name|u8
name|update_vport_active_tx_flg
decl_stmt|;
name|u8
name|vport_active_tx_flg
decl_stmt|;
name|u8
name|update_inner_vlan_removal_flg
decl_stmt|;
name|u8
name|inner_vlan_removal_flg
decl_stmt|;
name|u8
name|silent_vlan_removal_flg
decl_stmt|;
name|u8
name|update_default_vlan_enable_flg
decl_stmt|;
name|u8
name|default_vlan_enable_flg
decl_stmt|;
name|u8
name|update_default_vlan_flg
decl_stmt|;
name|u16
name|default_vlan
decl_stmt|;
name|u8
name|update_tx_switching_flg
decl_stmt|;
name|u8
name|tx_switching_flg
decl_stmt|;
name|u8
name|update_approx_mcast_flg
decl_stmt|;
name|u8
name|update_anti_spoofing_en_flg
decl_stmt|;
name|u8
name|anti_spoofing_en
decl_stmt|;
name|u8
name|update_accept_any_vlan_flg
decl_stmt|;
name|u8
name|accept_any_vlan
decl_stmt|;
name|unsigned
name|long
name|bins
index|[
literal|8
index|]
decl_stmt|;
name|struct
name|ecore_rss_params
modifier|*
name|rss_params
decl_stmt|;
name|struct
name|ecore_filter_accept_flags
name|accept_flags
decl_stmt|;
name|struct
name|ecore_sge_tpa_params
modifier|*
name|sge_tpa_params
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * @brief ecore_sp_vport_update -  *  * This ramrod updates the parameters of the VPort. Every field can be updated  * independently, according to flags.  *  * This ramrod is also used to set the VPort state to active after creation.  * An Assert is generated if the VPort does not contain an RX queue.  *  * @param p_hwfn  * @param p_params  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_sp_vport_update
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_sp_vport_update_params
modifier|*
name|p_params
parameter_list|,
name|enum
name|spq_mode
name|comp_mode
parameter_list|,
name|struct
name|ecore_spq_comp_cb
modifier|*
name|p_comp_data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_sp_vport_stop -  *  * This ramrod closes a VPort after all its RX and TX queues are terminated.  * An Assert is generated if any queues are left open.  *  * @param p_hwfn  * @param opaque_fid  * @param vport_id VPort ID  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_sp_vport_stop
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|opaque_fid
parameter_list|,
name|u8
name|vport_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_sp_eth_filter_ucast
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|opaque_fid
parameter_list|,
name|struct
name|ecore_filter_ucast
modifier|*
name|p_filter_cmd
parameter_list|,
name|enum
name|spq_mode
name|comp_mode
parameter_list|,
name|struct
name|ecore_spq_comp_cb
modifier|*
name|p_comp_data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_sp_rx_eth_queues_update -  *  * This ramrod updates an RX queue. It is used for setting the active state  * of the queue and updating the TPA and SGE parameters.  *  * @note Final phase API.  *  * @param p_hwfn  * @param pp_rxq_handlers	An array of queue handlers to be updated.  * @param num_rxqs              number of queues to update.  * @param complete_cqe_flg	Post completion to the CQE Ring if set  * @param complete_event_flg	Post completion to the Event Ring if set  * @param comp_mode  * @param p_comp_data  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_sp_eth_rx_queues_update
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|void
modifier|*
modifier|*
name|pp_rxq_handlers
parameter_list|,
name|u8
name|num_rxqs
parameter_list|,
name|u8
name|complete_cqe_flg
parameter_list|,
name|u8
name|complete_event_flg
parameter_list|,
name|enum
name|spq_mode
name|comp_mode
parameter_list|,
name|struct
name|ecore_spq_comp_cb
modifier|*
name|p_comp_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__ecore_get_vport_stats
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_eth_stats
modifier|*
name|stats
parameter_list|,
name|u16
name|statistics_bin
parameter_list|,
name|bool
name|b_get_port_stats
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_get_vport_stats
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|struct
name|ecore_eth_stats
modifier|*
name|stats
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_reset_vport_stats
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  *@brief ecore_arfs_mode_configure -  *  *Enable or disable rfs mode. It must accept atleast one of tcp or udp true  *and atleast one of ipv4 or ipv6 true to enable rfs mode.  *  *@param p_hwfn  *@param p_ptt  *@param p_cfg_params		arfs mode configuration parameters.  *  */
end_comment

begin_function_decl
name|void
name|ecore_arfs_mode_configure
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_arfs_config_params
modifier|*
name|p_cfg_params
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

