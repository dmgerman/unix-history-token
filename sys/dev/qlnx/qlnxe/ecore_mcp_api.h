begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2017-2018 Cavium, Inc.   * All rights reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  *  POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ECORE_MCP_API_H__
end_ifndef

begin_define
define|#
directive|define
name|__ECORE_MCP_API_H__
end_define

begin_include
include|#
directive|include
file|"ecore_status.h"
end_include

begin_struct
struct|struct
name|ecore_mcp_link_speed_params
block|{
name|bool
name|autoneg
decl_stmt|;
name|u32
name|advertised_speeds
decl_stmt|;
comment|/* bitmask of DRV_SPEED_CAPABILITY */
name|u32
name|forced_speed
decl_stmt|;
comment|/* In Mb/s */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_link_pause_params
block|{
name|bool
name|autoneg
decl_stmt|;
name|bool
name|forced_rx
decl_stmt|;
name|bool
name|forced_tx
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ecore_mcp_eee_mode
block|{
name|ECORE_MCP_EEE_DISABLED
block|,
name|ECORE_MCP_EEE_ENABLED
block|,
name|ECORE_MCP_EEE_UNSUPPORTED
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ecore_link_eee_params
block|{
name|u32
name|tx_lpi_timer
decl_stmt|;
define|#
directive|define
name|ECORE_EEE_1G_ADV
value|(1<< 0)
define|#
directive|define
name|ECORE_EEE_10G_ADV
value|(1<< 1)
comment|/* Capabilities are represented using ECORE_EEE_*_ADV values */
name|u8
name|adv_caps
decl_stmt|;
name|u8
name|lp_adv_caps
decl_stmt|;
name|bool
name|enable
decl_stmt|;
name|bool
name|tx_lpi_enable
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_link_params
block|{
name|struct
name|ecore_mcp_link_speed_params
name|speed
decl_stmt|;
name|struct
name|ecore_mcp_link_pause_params
name|pause
decl_stmt|;
name|u32
name|loopback_mode
decl_stmt|;
comment|/* in PMM_LOOPBACK values */
name|struct
name|ecore_link_eee_params
name|eee
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_link_capabilities
block|{
name|u32
name|speed_capabilities
decl_stmt|;
name|bool
name|default_speed_autoneg
decl_stmt|;
comment|/* In Mb/s */
name|u32
name|default_speed
decl_stmt|;
comment|/* In Mb/s */
name|enum
name|ecore_mcp_eee_mode
name|default_eee
decl_stmt|;
name|u32
name|eee_lpi_timer
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_link_state
block|{
name|bool
name|link_up
decl_stmt|;
name|u32
name|line_speed
decl_stmt|;
comment|/* In Mb/s */
name|u32
name|min_pf_rate
decl_stmt|;
comment|/* In Mb/s */
name|u32
name|speed
decl_stmt|;
comment|/* In Mb/s */
name|bool
name|full_duplex
decl_stmt|;
name|bool
name|an
decl_stmt|;
name|bool
name|an_complete
decl_stmt|;
name|bool
name|parallel_detection
decl_stmt|;
name|bool
name|pfc_enabled
decl_stmt|;
define|#
directive|define
name|ECORE_LINK_PARTNER_SPEED_1G_HD
value|(1<< 0)
define|#
directive|define
name|ECORE_LINK_PARTNER_SPEED_1G_FD
value|(1<< 1)
define|#
directive|define
name|ECORE_LINK_PARTNER_SPEED_10G
value|(1<< 2)
define|#
directive|define
name|ECORE_LINK_PARTNER_SPEED_20G
value|(1<< 3)
define|#
directive|define
name|ECORE_LINK_PARTNER_SPEED_25G
value|(1<< 4)
define|#
directive|define
name|ECORE_LINK_PARTNER_SPEED_40G
value|(1<< 5)
define|#
directive|define
name|ECORE_LINK_PARTNER_SPEED_50G
value|(1<< 6)
define|#
directive|define
name|ECORE_LINK_PARTNER_SPEED_100G
value|(1<< 7)
name|u32
name|partner_adv_speed
decl_stmt|;
name|bool
name|partner_tx_flow_ctrl_en
decl_stmt|;
name|bool
name|partner_rx_flow_ctrl_en
decl_stmt|;
define|#
directive|define
name|ECORE_LINK_PARTNER_SYMMETRIC_PAUSE
value|(1)
define|#
directive|define
name|ECORE_LINK_PARTNER_ASYMMETRIC_PAUSE
value|(2)
define|#
directive|define
name|ECORE_LINK_PARTNER_BOTH_PAUSE
value|(3)
name|u8
name|partner_adv_pause
decl_stmt|;
name|bool
name|sfp_tx_fault
decl_stmt|;
name|bool
name|eee_active
decl_stmt|;
name|u8
name|eee_adv_caps
decl_stmt|;
name|u8
name|eee_lp_adv_caps
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_function_info
block|{
name|u8
name|pause_on_host
decl_stmt|;
name|enum
name|ecore_pci_personality
name|protocol
decl_stmt|;
name|u8
name|bandwidth_min
decl_stmt|;
name|u8
name|bandwidth_max
decl_stmt|;
name|u8
name|mac
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u64
name|wwn_port
decl_stmt|;
name|u64
name|wwn_node
decl_stmt|;
define|#
directive|define
name|ECORE_MCP_VLAN_UNSET
value|(0xffff)
name|u16
name|ovlan
decl_stmt|;
name|u16
name|mtu
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_nvm_common
block|{
name|u32
name|offset
decl_stmt|;
name|u32
name|param
decl_stmt|;
name|u32
name|resp
decl_stmt|;
name|u32
name|cmd
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_nvm_rd
block|{
name|u32
modifier|*
name|buf_size
decl_stmt|;
name|u32
modifier|*
name|buf
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_nvm_wr
block|{
name|u32
name|buf_size
decl_stmt|;
name|u32
modifier|*
name|buf
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_nvm_params
block|{
define|#
directive|define
name|ECORE_MCP_CMD
value|(1<< 0)
define|#
directive|define
name|ECORE_MCP_NVM_RD
value|(1<< 1)
define|#
directive|define
name|ECORE_MCP_NVM_WR
value|(1<< 2)
name|u8
name|type
decl_stmt|;
name|struct
name|ecore_mcp_nvm_common
name|nvm_common
decl_stmt|;
union|union
block|{
name|struct
name|ecore_mcp_nvm_rd
name|nvm_rd
decl_stmt|;
name|struct
name|ecore_mcp_nvm_wr
name|nvm_wr
decl_stmt|;
block|}
union|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ecore_nvm_images
block|{
name|ECORE_NVM_IMAGE_ISCSI_CFG
block|,
name|ECORE_NVM_IMAGE_FCOE_CFG
block|,
name|ECORE_NVM_IMAGE_MDUMP
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ecore_mcp_drv_version
block|{
name|u32
name|version
decl_stmt|;
name|u8
name|name
index|[
name|MCP_DRV_VER_STR_SIZE
operator|-
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_lan_stats
block|{
name|u64
name|ucast_rx_pkts
decl_stmt|;
name|u64
name|ucast_tx_pkts
decl_stmt|;
name|u32
name|fcs_err
decl_stmt|;
block|}
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|ECORE_PROTO_STATS
end_ifndef

begin_define
define|#
directive|define
name|ECORE_PROTO_STATS
end_define

begin_struct
struct|struct
name|ecore_mcp_fcoe_stats
block|{
name|u64
name|rx_pkts
decl_stmt|;
name|u64
name|tx_pkts
decl_stmt|;
name|u32
name|fcs_err
decl_stmt|;
name|u32
name|login_failure
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_iscsi_stats
block|{
name|u64
name|rx_pdus
decl_stmt|;
name|u64
name|tx_pdus
decl_stmt|;
name|u64
name|rx_bytes
decl_stmt|;
name|u64
name|tx_bytes
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mcp_rdma_stats
block|{
name|u64
name|rx_pkts
decl_stmt|;
name|u64
name|tx_pkts
decl_stmt|;
name|u64
name|rx_bytes
decl_stmt|;
name|u64
name|tx_byts
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ecore_mcp_protocol_type
block|{
name|ECORE_MCP_LAN_STATS
block|,
name|ECORE_MCP_FCOE_STATS
block|,
name|ECORE_MCP_ISCSI_STATS
block|,
name|ECORE_MCP_RDMA_STATS
block|}
enum|;
end_enum

begin_union
union|union
name|ecore_mcp_protocol_stats
block|{
name|struct
name|ecore_mcp_lan_stats
name|lan_stats
decl_stmt|;
name|struct
name|ecore_mcp_fcoe_stats
name|fcoe_stats
decl_stmt|;
name|struct
name|ecore_mcp_iscsi_stats
name|iscsi_stats
decl_stmt|;
name|struct
name|ecore_mcp_rdma_stats
name|rdma_stats
decl_stmt|;
block|}
union|;
end_union

begin_endif
endif|#
directive|endif
end_endif

begin_enum
enum|enum
name|ecore_ov_client
block|{
name|ECORE_OV_CLIENT_DRV
block|,
name|ECORE_OV_CLIENT_USER
block|,
name|ECORE_OV_CLIENT_VENDOR_SPEC
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ecore_ov_driver_state
block|{
name|ECORE_OV_DRIVER_STATE_NOT_LOADED
block|,
name|ECORE_OV_DRIVER_STATE_DISABLED
block|,
name|ECORE_OV_DRIVER_STATE_ACTIVE
block|}
enum|;
end_enum

begin_enum
enum|enum
name|ecore_ov_wol
block|{
name|ECORE_OV_WOL_DEFAULT
block|,
name|ECORE_OV_WOL_DISABLED
block|,
name|ECORE_OV_WOL_ENABLED
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|ECORE_MAX_NPIV_ENTRIES
value|128
end_define

begin_define
define|#
directive|define
name|ECORE_WWN_SIZE
value|8
end_define

begin_struct
struct|struct
name|ecore_fc_npiv_tbl
block|{
name|u16
name|num_wwpn
decl_stmt|;
name|u16
name|num_wwnn
decl_stmt|;
name|u8
name|wwpn
index|[
name|ECORE_MAX_NPIV_ENTRIES
index|]
index|[
name|ECORE_WWN_SIZE
index|]
decl_stmt|;
name|u8
name|wwnn
index|[
name|ECORE_MAX_NPIV_ENTRIES
index|]
index|[
name|ECORE_WWN_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ecore_led_mode
block|{
name|ECORE_LED_MODE_OFF
block|,
name|ECORE_LED_MODE_ON
block|,
name|ECORE_LED_MODE_RESTORE
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ecore_temperature_sensor
block|{
name|u8
name|sensor_location
decl_stmt|;
name|u8
name|threshold_high
decl_stmt|;
name|u8
name|critical
decl_stmt|;
name|u8
name|current_temp
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ECORE_MAX_NUM_OF_SENSORS
value|7
end_define

begin_struct
struct|struct
name|ecore_temperature_info
block|{
name|u32
name|num_sensors
decl_stmt|;
name|struct
name|ecore_temperature_sensor
name|sensors
index|[
name|ECORE_MAX_NUM_OF_SENSORS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ecore_mba_img_idx
block|{
name|ECORE_MBA_LEGACY_IDX
block|,
name|ECORE_MBA_PCI3CLP_IDX
block|,
name|ECORE_MBA_PCI3_IDX
block|,
name|ECORE_MBA_FCODE_IDX
block|,
name|ECORE_EFI_X86_IDX
block|,
name|ECORE_EFI_IPF_IDX
block|,
name|ECORE_EFI_EBC_IDX
block|,
name|ECORE_EFI_X64_IDX
block|,
name|ECORE_MAX_NUM_OF_ROMIMG
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ecore_mba_vers
block|{
name|u32
name|mba_vers
index|[
name|ECORE_MAX_NUM_OF_ROMIMG
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ecore_mfw_tlv_type
block|{
name|ECORE_MFW_TLV_GENERIC
init|=
literal|0x1
block|,
comment|/* Core driver TLVs */
name|ECORE_MFW_TLV_ETH
init|=
literal|0x2
block|,
comment|/* L2 driver TLVs */
name|ECORE_MFW_TLV_FCOE
init|=
literal|0x4
block|,
comment|/* FCoE protocol TLVs */
name|ECORE_MFW_TLV_ISCSI
init|=
literal|0x8
block|,
comment|/* SCSI protocol TLVs */
name|ECORE_MFW_TLV_MAX
init|=
literal|0x16
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ecore_mfw_tlv_generic
block|{
struct|struct
block|{
name|u8
name|ipv4_csum_offload
decl_stmt|;
name|u8
name|lso_supported
decl_stmt|;
name|bool
name|b_set
decl_stmt|;
block|}
name|flags
struct|;
define|#
directive|define
name|ECORE_MFW_TLV_MAC_COUNT
value|3
comment|/* First entry for primary MAC, 2 secondary MACs possible */
name|u8
name|mac
index|[
name|ECORE_MFW_TLV_MAC_COUNT
index|]
index|[
literal|6
index|]
decl_stmt|;
name|bool
name|mac_set
index|[
name|ECORE_MFW_TLV_MAC_COUNT
index|]
decl_stmt|;
name|u64
name|rx_frames
decl_stmt|;
name|bool
name|rx_frames_set
decl_stmt|;
name|u64
name|rx_bytes
decl_stmt|;
name|bool
name|rx_bytes_set
decl_stmt|;
name|u64
name|tx_frames
decl_stmt|;
name|bool
name|tx_frames_set
decl_stmt|;
name|u64
name|tx_bytes
decl_stmt|;
name|bool
name|tx_bytes_set
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mfw_tlv_eth
block|{
name|u16
name|lso_maxoff_size
decl_stmt|;
name|bool
name|lso_maxoff_size_set
decl_stmt|;
name|u16
name|lso_minseg_size
decl_stmt|;
name|bool
name|lso_minseg_size_set
decl_stmt|;
name|u8
name|prom_mode
decl_stmt|;
name|bool
name|prom_mode_set
decl_stmt|;
name|u16
name|tx_descr_size
decl_stmt|;
name|bool
name|tx_descr_size_set
decl_stmt|;
name|u16
name|rx_descr_size
decl_stmt|;
name|bool
name|rx_descr_size_set
decl_stmt|;
name|u16
name|netq_count
decl_stmt|;
name|bool
name|netq_count_set
decl_stmt|;
name|u32
name|tcp4_offloads
decl_stmt|;
name|bool
name|tcp4_offloads_set
decl_stmt|;
name|u32
name|tcp6_offloads
decl_stmt|;
name|bool
name|tcp6_offloads_set
decl_stmt|;
name|u16
name|tx_descr_qdepth
decl_stmt|;
name|bool
name|tx_descr_qdepth_set
decl_stmt|;
name|u16
name|rx_descr_qdepth
decl_stmt|;
name|bool
name|rx_descr_qdepth_set
decl_stmt|;
name|u8
name|iov_offload
decl_stmt|;
define|#
directive|define
name|ECORE_MFW_TLV_IOV_OFFLOAD_NONE
value|(0)
define|#
directive|define
name|ECORE_MFW_TLV_IOV_OFFLOAD_MULTIQUEUE
value|(1)
define|#
directive|define
name|ECORE_MFW_TLV_IOV_OFFLOAD_VEB
value|(2)
define|#
directive|define
name|ECORE_MFW_TLV_IOV_OFFLOAD_VEPA
value|(3)
name|bool
name|iov_offload_set
decl_stmt|;
name|u8
name|txqs_empty
decl_stmt|;
name|bool
name|txqs_empty_set
decl_stmt|;
name|u8
name|rxqs_empty
decl_stmt|;
name|bool
name|rxqs_empty_set
decl_stmt|;
name|u8
name|num_txqs_full
decl_stmt|;
name|bool
name|num_txqs_full_set
decl_stmt|;
name|u8
name|num_rxqs_full
decl_stmt|;
name|bool
name|num_rxqs_full_set
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mfw_tlv_time
block|{
name|bool
name|b_set
decl_stmt|;
name|u8
name|month
decl_stmt|;
name|u8
name|day
decl_stmt|;
name|u8
name|hour
decl_stmt|;
name|u8
name|min
decl_stmt|;
name|u16
name|msec
decl_stmt|;
name|u16
name|usec
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mfw_tlv_fcoe
block|{
name|u8
name|scsi_timeout
decl_stmt|;
name|bool
name|scsi_timeout_set
decl_stmt|;
name|u32
name|rt_tov
decl_stmt|;
name|bool
name|rt_tov_set
decl_stmt|;
name|u32
name|ra_tov
decl_stmt|;
name|bool
name|ra_tov_set
decl_stmt|;
name|u32
name|ed_tov
decl_stmt|;
name|bool
name|ed_tov_set
decl_stmt|;
name|u32
name|cr_tov
decl_stmt|;
name|bool
name|cr_tov_set
decl_stmt|;
name|u8
name|boot_type
decl_stmt|;
name|bool
name|boot_type_set
decl_stmt|;
name|u8
name|npiv_state
decl_stmt|;
name|bool
name|npiv_state_set
decl_stmt|;
name|u32
name|num_npiv_ids
decl_stmt|;
name|bool
name|num_npiv_ids_set
decl_stmt|;
name|u8
name|switch_name
index|[
literal|8
index|]
decl_stmt|;
name|bool
name|switch_name_set
decl_stmt|;
name|u16
name|switch_portnum
decl_stmt|;
name|bool
name|switch_portnum_set
decl_stmt|;
name|u8
name|switch_portid
index|[
literal|3
index|]
decl_stmt|;
name|bool
name|switch_portid_set
decl_stmt|;
name|u8
name|vendor_name
index|[
literal|8
index|]
decl_stmt|;
name|bool
name|vendor_name_set
decl_stmt|;
name|u8
name|switch_model
index|[
literal|8
index|]
decl_stmt|;
name|bool
name|switch_model_set
decl_stmt|;
name|u8
name|switch_fw_version
index|[
literal|8
index|]
decl_stmt|;
name|bool
name|switch_fw_version_set
decl_stmt|;
name|u8
name|qos_pri
decl_stmt|;
name|bool
name|qos_pri_set
decl_stmt|;
name|u8
name|port_alias
index|[
literal|3
index|]
decl_stmt|;
name|bool
name|port_alias_set
decl_stmt|;
name|u8
name|port_state
decl_stmt|;
define|#
directive|define
name|ECORE_MFW_TLV_PORT_STATE_OFFLINE
value|(0)
define|#
directive|define
name|ECORE_MFW_TLV_PORT_STATE_LOOP
value|(1)
define|#
directive|define
name|ECORE_MFW_TLV_PORT_STATE_P2P
value|(2)
define|#
directive|define
name|ECORE_MFW_TLV_PORT_STATE_FABRIC
value|(3)
name|bool
name|port_state_set
decl_stmt|;
name|u16
name|fip_tx_descr_size
decl_stmt|;
name|bool
name|fip_tx_descr_size_set
decl_stmt|;
name|u16
name|fip_rx_descr_size
decl_stmt|;
name|bool
name|fip_rx_descr_size_set
decl_stmt|;
name|u16
name|link_failures
decl_stmt|;
name|bool
name|link_failures_set
decl_stmt|;
name|u8
name|fcoe_boot_progress
decl_stmt|;
name|bool
name|fcoe_boot_progress_set
decl_stmt|;
name|u64
name|rx_bcast
decl_stmt|;
name|bool
name|rx_bcast_set
decl_stmt|;
name|u64
name|tx_bcast
decl_stmt|;
name|bool
name|tx_bcast_set
decl_stmt|;
name|u16
name|fcoe_txq_depth
decl_stmt|;
name|bool
name|fcoe_txq_depth_set
decl_stmt|;
name|u16
name|fcoe_rxq_depth
decl_stmt|;
name|bool
name|fcoe_rxq_depth_set
decl_stmt|;
name|u64
name|fcoe_rx_frames
decl_stmt|;
name|bool
name|fcoe_rx_frames_set
decl_stmt|;
name|u64
name|fcoe_rx_bytes
decl_stmt|;
name|bool
name|fcoe_rx_bytes_set
decl_stmt|;
name|u64
name|fcoe_tx_frames
decl_stmt|;
name|bool
name|fcoe_tx_frames_set
decl_stmt|;
name|u64
name|fcoe_tx_bytes
decl_stmt|;
name|bool
name|fcoe_tx_bytes_set
decl_stmt|;
name|u16
name|crc_count
decl_stmt|;
name|bool
name|crc_count_set
decl_stmt|;
name|u32
name|crc_err_src_fcid
index|[
literal|5
index|]
decl_stmt|;
name|bool
name|crc_err_src_fcid_set
index|[
literal|5
index|]
decl_stmt|;
name|struct
name|ecore_mfw_tlv_time
name|crc_err
index|[
literal|5
index|]
decl_stmt|;
name|u16
name|losync_err
decl_stmt|;
name|bool
name|losync_err_set
decl_stmt|;
name|u16
name|losig_err
decl_stmt|;
name|bool
name|losig_err_set
decl_stmt|;
name|u16
name|primtive_err
decl_stmt|;
name|bool
name|primtive_err_set
decl_stmt|;
name|u16
name|disparity_err
decl_stmt|;
name|bool
name|disparity_err_set
decl_stmt|;
name|u16
name|code_violation_err
decl_stmt|;
name|bool
name|code_violation_err_set
decl_stmt|;
name|u32
name|flogi_param
index|[
literal|4
index|]
decl_stmt|;
name|bool
name|flogi_param_set
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|ecore_mfw_tlv_time
name|flogi_tstamp
decl_stmt|;
name|u32
name|flogi_acc_param
index|[
literal|4
index|]
decl_stmt|;
name|bool
name|flogi_acc_param_set
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|ecore_mfw_tlv_time
name|flogi_acc_tstamp
decl_stmt|;
name|u32
name|flogi_rjt
decl_stmt|;
name|bool
name|flogi_rjt_set
decl_stmt|;
name|struct
name|ecore_mfw_tlv_time
name|flogi_rjt_tstamp
decl_stmt|;
name|u32
name|fdiscs
decl_stmt|;
name|bool
name|fdiscs_set
decl_stmt|;
name|u8
name|fdisc_acc
decl_stmt|;
name|bool
name|fdisc_acc_set
decl_stmt|;
name|u8
name|fdisc_rjt
decl_stmt|;
name|bool
name|fdisc_rjt_set
decl_stmt|;
name|u8
name|plogi
decl_stmt|;
name|bool
name|plogi_set
decl_stmt|;
name|u8
name|plogi_acc
decl_stmt|;
name|bool
name|plogi_acc_set
decl_stmt|;
name|u8
name|plogi_rjt
decl_stmt|;
name|bool
name|plogi_rjt_set
decl_stmt|;
name|u32
name|plogi_dst_fcid
index|[
literal|5
index|]
decl_stmt|;
name|bool
name|plogi_dst_fcid_set
index|[
literal|5
index|]
decl_stmt|;
name|struct
name|ecore_mfw_tlv_time
name|plogi_tstamp
index|[
literal|5
index|]
decl_stmt|;
name|u32
name|plogi_acc_src_fcid
index|[
literal|5
index|]
decl_stmt|;
name|bool
name|plogi_acc_src_fcid_set
index|[
literal|5
index|]
decl_stmt|;
name|struct
name|ecore_mfw_tlv_time
name|plogi_acc_tstamp
index|[
literal|5
index|]
decl_stmt|;
name|u8
name|tx_plogos
decl_stmt|;
name|bool
name|tx_plogos_set
decl_stmt|;
name|u8
name|plogo_acc
decl_stmt|;
name|bool
name|plogo_acc_set
decl_stmt|;
name|u8
name|plogo_rjt
decl_stmt|;
name|bool
name|plogo_rjt_set
decl_stmt|;
name|u32
name|plogo_src_fcid
index|[
literal|5
index|]
decl_stmt|;
name|bool
name|plogo_src_fcid_set
index|[
literal|5
index|]
decl_stmt|;
name|struct
name|ecore_mfw_tlv_time
name|plogo_tstamp
index|[
literal|5
index|]
decl_stmt|;
name|u8
name|rx_logos
decl_stmt|;
name|bool
name|rx_logos_set
decl_stmt|;
name|u8
name|tx_accs
decl_stmt|;
name|bool
name|tx_accs_set
decl_stmt|;
name|u8
name|tx_prlis
decl_stmt|;
name|bool
name|tx_prlis_set
decl_stmt|;
name|u8
name|rx_accs
decl_stmt|;
name|bool
name|rx_accs_set
decl_stmt|;
name|u8
name|tx_abts
decl_stmt|;
name|bool
name|tx_abts_set
decl_stmt|;
name|u8
name|rx_abts_acc
decl_stmt|;
name|bool
name|rx_abts_acc_set
decl_stmt|;
name|u8
name|rx_abts_rjt
decl_stmt|;
name|bool
name|rx_abts_rjt_set
decl_stmt|;
name|u32
name|abts_dst_fcid
index|[
literal|5
index|]
decl_stmt|;
name|bool
name|abts_dst_fcid_set
index|[
literal|5
index|]
decl_stmt|;
name|struct
name|ecore_mfw_tlv_time
name|abts_tstamp
index|[
literal|5
index|]
decl_stmt|;
name|u8
name|rx_rscn
decl_stmt|;
name|bool
name|rx_rscn_set
decl_stmt|;
name|u32
name|rx_rscn_nport
index|[
literal|4
index|]
decl_stmt|;
name|bool
name|rx_rscn_nport_set
index|[
literal|4
index|]
decl_stmt|;
name|u8
name|tx_lun_rst
decl_stmt|;
name|bool
name|tx_lun_rst_set
decl_stmt|;
name|u8
name|abort_task_sets
decl_stmt|;
name|bool
name|abort_task_sets_set
decl_stmt|;
name|u8
name|tx_tprlos
decl_stmt|;
name|bool
name|tx_tprlos_set
decl_stmt|;
name|u8
name|tx_nos
decl_stmt|;
name|bool
name|tx_nos_set
decl_stmt|;
name|u8
name|rx_nos
decl_stmt|;
name|bool
name|rx_nos_set
decl_stmt|;
name|u8
name|ols
decl_stmt|;
name|bool
name|ols_set
decl_stmt|;
name|u8
name|lr
decl_stmt|;
name|bool
name|lr_set
decl_stmt|;
name|u8
name|lrr
decl_stmt|;
name|bool
name|lrr_set
decl_stmt|;
name|u8
name|tx_lip
decl_stmt|;
name|bool
name|tx_lip_set
decl_stmt|;
name|u8
name|rx_lip
decl_stmt|;
name|bool
name|rx_lip_set
decl_stmt|;
name|u8
name|eofa
decl_stmt|;
name|bool
name|eofa_set
decl_stmt|;
name|u8
name|eofni
decl_stmt|;
name|bool
name|eofni_set
decl_stmt|;
name|u8
name|scsi_chks
decl_stmt|;
name|bool
name|scsi_chks_set
decl_stmt|;
name|u8
name|scsi_cond_met
decl_stmt|;
name|bool
name|scsi_cond_met_set
decl_stmt|;
name|u8
name|scsi_busy
decl_stmt|;
name|bool
name|scsi_busy_set
decl_stmt|;
name|u8
name|scsi_inter
decl_stmt|;
name|bool
name|scsi_inter_set
decl_stmt|;
name|u8
name|scsi_inter_cond_met
decl_stmt|;
name|bool
name|scsi_inter_cond_met_set
decl_stmt|;
name|u8
name|scsi_rsv_conflicts
decl_stmt|;
name|bool
name|scsi_rsv_conflicts_set
decl_stmt|;
name|u8
name|scsi_tsk_full
decl_stmt|;
name|bool
name|scsi_tsk_full_set
decl_stmt|;
name|u8
name|scsi_aca_active
decl_stmt|;
name|bool
name|scsi_aca_active_set
decl_stmt|;
name|u8
name|scsi_tsk_abort
decl_stmt|;
name|bool
name|scsi_tsk_abort_set
decl_stmt|;
name|u32
name|scsi_rx_chk
index|[
literal|5
index|]
decl_stmt|;
name|bool
name|scsi_rx_chk_set
index|[
literal|5
index|]
decl_stmt|;
name|struct
name|ecore_mfw_tlv_time
name|scsi_chk_tstamp
index|[
literal|5
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_mfw_tlv_iscsi
block|{
name|u8
name|target_llmnr
decl_stmt|;
name|bool
name|target_llmnr_set
decl_stmt|;
name|u8
name|header_digest
decl_stmt|;
name|bool
name|header_digest_set
decl_stmt|;
name|u8
name|data_digest
decl_stmt|;
name|bool
name|data_digest_set
decl_stmt|;
name|u8
name|auth_method
decl_stmt|;
define|#
directive|define
name|ECORE_MFW_TLV_AUTH_METHOD_NONE
value|(1)
define|#
directive|define
name|ECORE_MFW_TLV_AUTH_METHOD_CHAP
value|(2)
define|#
directive|define
name|ECORE_MFW_TLV_AUTH_METHOD_MUTUAL_CHAP
value|(3)
name|bool
name|auth_method_set
decl_stmt|;
name|u16
name|boot_taget_portal
decl_stmt|;
name|bool
name|boot_taget_portal_set
decl_stmt|;
name|u16
name|frame_size
decl_stmt|;
name|bool
name|frame_size_set
decl_stmt|;
name|u16
name|tx_desc_size
decl_stmt|;
name|bool
name|tx_desc_size_set
decl_stmt|;
name|u16
name|rx_desc_size
decl_stmt|;
name|bool
name|rx_desc_size_set
decl_stmt|;
name|u8
name|boot_progress
decl_stmt|;
name|bool
name|boot_progress_set
decl_stmt|;
name|u16
name|tx_desc_qdepth
decl_stmt|;
name|bool
name|tx_desc_qdepth_set
decl_stmt|;
name|u16
name|rx_desc_qdepth
decl_stmt|;
name|bool
name|rx_desc_qdepth_set
decl_stmt|;
name|u64
name|rx_frames
decl_stmt|;
name|bool
name|rx_frames_set
decl_stmt|;
name|u64
name|rx_bytes
decl_stmt|;
name|bool
name|rx_bytes_set
decl_stmt|;
name|u64
name|tx_frames
decl_stmt|;
name|bool
name|tx_frames_set
decl_stmt|;
name|u64
name|tx_bytes
decl_stmt|;
name|bool
name|tx_bytes_set
decl_stmt|;
block|}
struct|;
end_struct

begin_union
union|union
name|ecore_mfw_tlv_data
block|{
name|struct
name|ecore_mfw_tlv_generic
name|generic
decl_stmt|;
name|struct
name|ecore_mfw_tlv_eth
name|eth
decl_stmt|;
name|struct
name|ecore_mfw_tlv_fcoe
name|fcoe
decl_stmt|;
name|struct
name|ecore_mfw_tlv_iscsi
name|iscsi
decl_stmt|;
block|}
union|;
end_union

begin_enum
enum|enum
name|ecore_hw_info_change
block|{
name|ECORE_HW_INFO_CHANGE_OVLAN
block|, }
enum|;
end_enum

begin_comment
comment|/**  * @brief - returns the link params of the hw function  *  * @param p_hwfn  *  * @returns pointer to link params  */
end_comment

begin_function_decl
name|struct
name|ecore_mcp_link_params
modifier|*
name|ecore_mcp_get_link_params
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - return the link state of the hw function  *  * @param p_hwfn  *  * @returns pointer to link state  */
end_comment

begin_function_decl
name|struct
name|ecore_mcp_link_state
modifier|*
name|ecore_mcp_get_link_state
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - return the link capabilities of the hw function  *  * @param p_hwfn  *  * @returns pointer to link capabilities  */
end_comment

begin_function_decl
name|struct
name|ecore_mcp_link_capabilities
modifier|*
name|ecore_mcp_get_link_capabilities
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Request the MFW to set the the link according to 'link_input'.  *  * @param p_hwfn  * @param p_ptt  * @param b_up - raise link if `true'. Reset link if `false'.  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_set_link
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|bool
name|b_up
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get the management firmware version value  *  * @param p_hwfn  * @param p_ptt  * @param p_mfw_ver    - mfw version value  * @param p_running_bundle_id	- image id in nvram; Optional.  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_get_mfw_ver
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u32
modifier|*
name|p_mfw_ver
parameter_list|,
name|u32
modifier|*
name|p_running_bundle_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get the MBI version value  *  * @param p_hwfn  * @param p_ptt  * @param p_mbi_ver - A pointer to a variable to be filled with the MBI version.  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_get_mbi_ver
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u32
modifier|*
name|p_mbi_ver
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get media type value of the port.  *  * @param p_dev      - ecore dev pointer  * @param mfw_ver    - media type value  *  * @return enum _ecore_status_t -  *      ECORE_SUCCESS - Operation was successful.  *      ECORE_BUSY - Operation failed  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_get_media_type
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u32
modifier|*
name|media_type
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Sends a command to the MCP mailbox.  *  * @param p_hwfn      - hw function  * @param p_ptt       - PTT required for register access  * @param cmd         - command to be sent to the MCP  * @param param       - optional param  * @param o_mcp_resp  - the MCP response code (exclude sequence)  * @param o_mcp_param - optional parameter provided by the MCP response  *  * @return enum _ecore_status_t -  *      ECORE_SUCCESS - operation was successful  *      ECORE_BUSY    - operation failed  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_cmd
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u32
name|cmd
parameter_list|,
name|u32
name|param
parameter_list|,
name|u32
modifier|*
name|o_mcp_resp
parameter_list|,
name|u32
modifier|*
name|o_mcp_param
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - drains the nig, allowing completion to pass in case of pauses.  *          (Should be called only from sleepable context)  *  * @param p_hwfn  * @param p_ptt  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_drain
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - return the mcp function info of the hw function  *  * @param p_hwfn  *  * @returns pointer to mcp function info  */
end_comment

begin_function_decl
specifier|const
name|struct
name|ecore_mcp_function_info
modifier|*
name|ecore_mcp_get_function_info
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Function for reading/manipulating the nvram. Following are supported  *          functionalities.  *          1. Read: Read the specified nvram offset.  *             input values:  *               type   - ECORE_MCP_NVM_RD  *               cmd    - command code (e.g. DRV_MSG_CODE_NVM_READ_NVRAM)  *               offset - nvm offset  *  *             output values:  *               buf      - buffer  *               buf_size - buffer size  *  *          2. Write: Write the data at the specified nvram offset  *             input values:  *               type     - ECORE_MCP_NVM_WR  *               cmd      - command code (e.g. DRV_MSG_CODE_NVM_WRITE_NVRAM)  *               offset   - nvm offset  *               buf      - buffer  *               buf_size - buffer size  *  *          3. Command: Send the NVM command to MCP.  *             input values:  *               type   - ECORE_MCP_CMD  *               cmd    - command code (e.g. DRV_MSG_CODE_NVM_DEL_FILE)  *               offset - nvm offset  *  *  * @param p_hwfn  * @param p_ptt  * @param params  *  * @return ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_nvm_command
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_mcp_nvm_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - count number of function with a matching personality on engine.  *  * @param p_hwfn  * @param p_ptt  * @param personalities - a bitmask of ecore_pci_personality values  *  * @returns the count of all devices on engine whose personality match one of  *          the bitsmasks.  */
end_comment

begin_function_decl
name|int
name|ecore_mcp_get_personality_cnt
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u32
name|personalities
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get the flash size value  *  * @param p_hwfn  * @param p_ptt  * @param p_flash_size  - flash size in bytes to be filled.  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_get_flash_size
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u32
modifier|*
name|p_flash_size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Send driver version to MFW  *  * @param p_hwfn  * @param p_ptt  * @param version - Version value  * @param name - Protocol driver name  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_send_drv_version
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_mcp_drv_version
modifier|*
name|p_ver
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Read the MFW process kill counter  *  * @param p_hwfn  * @param p_ptt  *  * @return u32  */
end_comment

begin_function_decl
name|u32
name|ecore_get_process_kill_counter
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Trigger a recovery process  *  *  @param p_hwfn  *  @param p_ptt  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_start_recovery_process
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Notify MFW about the change in base device properties  *  *  @param p_hwfn  *  @param p_ptt  *  @param client - ecore client type  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_ov_update_current_config
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|enum
name|ecore_ov_client
name|client
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Notify MFW about the driver state  *  *  @param p_hwfn  *  @param p_ptt  *  @param drv_state - Driver state  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_ov_update_driver_state
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|enum
name|ecore_ov_driver_state
name|drv_state
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Read NPIV settings form the MFW  *  *  @param p_hwfn  *  @param p_ptt  *  @param p_table - Array to hold the FC NPIV data. Client need allocate the  *                   required buffer. The field 'count' specifies number of NPIV  *                   entries. A value of 0 means the table was not populated.  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_ov_get_fc_npiv
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_fc_npiv_tbl
modifier|*
name|p_table
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Send MTU size to MFW  *  *  @param p_hwfn  *  @param p_ptt  *  @param mtu - MTU size  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_ov_update_mtu
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|mtu
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Send MAC address to MFW  *  *  @param p_hwfn  *  @param p_ptt  *  @param mac - MAC address  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_ov_update_mac
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u8
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Send WOL mode to MFW  *  *  @param p_hwfn  *  @param p_ptt  *  @param wol - WOL mode  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_ov_update_wol
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|enum
name|ecore_ov_wol
name|wol
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Set LED status  *  *  @param p_hwfn  *  @param p_ptt  *  @param mode - LED mode  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_set_led
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|enum
name|ecore_led_mode
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Set secure mode  *  *  @param p_dev  *  @param addr - nvm offset  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_nvm_set_secure_mode
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u32
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Write to phy  *  *  @param p_dev  *  @param addr - nvm offset  *  @param cmd - nvm command  *  @param p_buf - nvm write buffer  *  @param len - buffer len  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_phy_write
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u32
name|cmd
parameter_list|,
name|u32
name|addr
parameter_list|,
name|u8
modifier|*
name|p_buf
parameter_list|,
name|u32
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Write to nvm  *  *  @param p_dev  *  @param addr - nvm offset  *  @param cmd - nvm command  *  @param p_buf - nvm write buffer  *  @param len - buffer len  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_nvm_write
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u32
name|cmd
parameter_list|,
name|u32
name|addr
parameter_list|,
name|u8
modifier|*
name|p_buf
parameter_list|,
name|u32
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Put file begin  *  *  @param p_dev  *  @param addr - nvm offset  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_nvm_put_file_begin
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u32
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Delete file  *  *  @param p_dev  *  @param addr - nvm offset  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_nvm_del_file
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u32
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Check latest response  *  *  @param p_dev  *  @param p_buf - nvm write buffer  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_nvm_resp
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u8
modifier|*
name|p_buf
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Read from phy  *  *  @param p_dev  *  @param addr - nvm offset  *  @param cmd - nvm command  *  @param p_buf - nvm write buffer  *  @param len - buffer len  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_phy_read
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u32
name|cmd
parameter_list|,
name|u32
name|addr
parameter_list|,
name|u8
modifier|*
name|p_buf
parameter_list|,
name|u32
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Read from nvm  *  *  @param p_dev  *  @param addr - nvm offset  *  @param p_buf - nvm write buffer  *  @param len - buffer len  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_nvm_read
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u32
name|addr
parameter_list|,
name|u8
modifier|*
name|p_buf
parameter_list|,
name|u32
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ecore_nvm_image_att
block|{
name|u32
name|start_addr
decl_stmt|;
name|u32
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * @brief Allows reading a whole nvram image  *  * @param p_hwfn  * @param p_ptt  * @param image_id - image to get attributes for  * @param p_image_att - image attributes structure into which to fill data  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_get_nvm_image_att
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|enum
name|ecore_nvm_images
name|image_id
parameter_list|,
name|struct
name|ecore_nvm_image_att
modifier|*
name|p_image_att
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Allows reading a whole nvram image  *  * @param p_hwfn  * @param p_ptt  * @param image_id - image requested for reading  * @param p_buffer - allocated buffer into which to fill data  * @param buffer_len - length of the allocated buffer.  *  * @return ECORE_SUCCESS iff p_buffer now contains the nvram image.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_get_nvm_image
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|enum
name|ecore_nvm_images
name|image_id
parameter_list|,
name|u8
modifier|*
name|p_buffer
parameter_list|,
name|u32
name|buffer_len
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Read from sfp  *  *  @param p_hwfn - hw function  *  @param p_ptt  - PTT required for register access  *  @param port   - transceiver port  *  @param addr   - I2C address  *  @param offset - offset in sfp  *  @param len    - buffer length  *  @param p_buf  - buffer to read into  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_phy_sfp_read
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u32
name|port
parameter_list|,
name|u32
name|addr
parameter_list|,
name|u32
name|offset
parameter_list|,
name|u32
name|len
parameter_list|,
name|u8
modifier|*
name|p_buf
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Write to sfp  *  *  @param p_hwfn - hw function  *  @param p_ptt  - PTT required for register access  *  @param port   - transceiver port  *  @param addr   - I2C address  *  @param offset - offset in sfp  *  @param len    - buffer length  *  @param p_buf  - buffer to write from  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_phy_sfp_write
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u32
name|port
parameter_list|,
name|u32
name|addr
parameter_list|,
name|u32
name|offset
parameter_list|,
name|u32
name|len
parameter_list|,
name|u8
modifier|*
name|p_buf
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Gpio read  *  *  @param p_hwfn    - hw function  *  @param p_ptt     - PTT required for register access  *  @param gpio      - gpio number  *  @param gpio_val  - value read from gpio  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_gpio_read
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|gpio
parameter_list|,
name|u32
modifier|*
name|gpio_val
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Gpio write  *  *  @param p_hwfn    - hw function  *  @param p_ptt     - PTT required for register access  *  @param gpio      - gpio number  *  @param gpio_val  - value to write to gpio  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_gpio_write
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|gpio
parameter_list|,
name|u16
name|gpio_val
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Gpio get information  *  *  @param p_hwfn          - hw function  *  @param p_ptt           - PTT required for register access  *  @param gpio            - gpio number  *  @param gpio_direction  - gpio is output (0) or input (1)  *  @param gpio_ctrl       - gpio control is uninitialized (0),  *                         path 0 (1), path 1 (2) or shared(3)  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_gpio_info
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|gpio
parameter_list|,
name|u32
modifier|*
name|gpio_direction
parameter_list|,
name|u32
modifier|*
name|gpio_ctrl
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Bist register test  *  *  @param p_hwfn    - hw function  *  @param p_ptt     - PTT required for register access  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_bist_register_test
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Bist clock test  *  *  @param p_hwfn    - hw function  *  @param p_ptt     - PTT required for register access  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_bist_clock_test
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Bist nvm test - get number of images  *  *  @param p_hwfn       - hw function  *  @param p_ptt        - PTT required for register access  *  @param num_images   - number of images if operation was  *			  successful. 0 if not.  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_bist_nvm_test_get_num_images
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u32
modifier|*
name|num_images
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Bist nvm test - get image attributes by index  *  *  @param p_hwfn      - hw function  *  @param p_ptt       - PTT required for register access  *  @param p_image_att - Attributes of image  *  @param image_index - Index of image to get information for  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_bist_nvm_test_get_image_att
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|bist_nvm_image_att
modifier|*
name|p_image_att
parameter_list|,
name|u32
name|image_index
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_mcp_get_temperature_info - get the status of the temperature  *                                         sensors  *  *  @param p_hwfn        - hw function  *  @param p_ptt         - PTT required for register access  *  @param p_temp_status - A pointer to an ecore_temperature_info structure to  *                         be filled with the temperature data  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_get_temperature_info
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_temperature_info
modifier|*
name|p_temp_info
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get MBA versions - get MBA sub images versions  *  *  @param p_hwfn      - hw function  *  @param p_ptt       - PTT required for register access  *  @param p_mba_vers  - MBA versions array to fill  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_get_mba_versions
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_mba_vers
modifier|*
name|p_mba_vers
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Count memory ecc events  *  *  @param p_hwfn      - hw function  *  @param p_ptt       - PTT required for register access  *  @param num_events  - number of memory ecc events  *  * @return enum _ecore_status_t - ECORE_SUCCESS - operation was successful.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_mem_ecc_events
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u64
modifier|*
name|num_events
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ecore_mdump_info
block|{
name|u32
name|reason
decl_stmt|;
name|u32
name|version
decl_stmt|;
name|u32
name|config
decl_stmt|;
name|u32
name|epoch
decl_stmt|;
name|u32
name|num_of_logs
decl_stmt|;
name|u32
name|valid_logs
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * @brief - Gets the MFW crash dump configuration and logs info.  *  * @param p_hwfn  * @param p_ptt  * @param p_mdump_info  *  * @param return ECORE_SUCCESS upon success.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_mdump_get_info
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_mdump_info
modifier|*
name|p_mdump_info
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Clears the MFW crash dump logs.  *  * @param p_hwfn  * @param p_ptt  *  * @param return ECORE_SUCCESS upon success.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_mdump_clear_logs
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Gets the LLDP MAC address.  *  * @param p_hwfn  * @param p_ptt  * @param lldp_mac_addr - a buffer to be filled with the read LLDP MAC address.  *  * @param return ECORE_SUCCESS upon success.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_get_lldp_mac
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u8
name|lldp_mac_addr
index|[
name|ETH_ALEN
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Sets the LLDP MAC address.  *  * @param p_hwfn  * @param p_ptt  * @param lldp_mac_addr - a buffer with the LLDP MAC address to be written.  *  * @param return ECORE_SUCCESS upon success.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_set_lldp_mac
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u8
name|lldp_mac_addr
index|[
name|ETH_ALEN
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Processes the TLV request from MFW i.e., get the required TLV info  *          from the ecore client and send it to the MFW.  *  * @param p_hwfn  * @param p_ptt  *  * @param return ECORE_SUCCESS upon success.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mfw_process_tlv_req
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Update fcoe vlan id value to the MFW.  *  * @param p_hwfn  * @param p_ptt  * @param vlan - fcoe vlan  *  * @param return ECORE_SUCCESS upon success.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_update_fcoe_cvid
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|vlan
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Update fabric name (wwn) value to the MFW.  *  * @param p_hwfn  * @param p_ptt  * @param wwn - world wide name  *  * @param return ECORE_SUCCESS upon success.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_mcp_update_fcoe_fabric_name
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u8
modifier|*
name|wwn
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

