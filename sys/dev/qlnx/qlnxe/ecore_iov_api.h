begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2017-2018 Cavium, Inc.   * All rights reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  *  POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ECORE_SRIOV_API_H__
end_ifndef

begin_define
define|#
directive|define
name|__ECORE_SRIOV_API_H__
end_define

begin_include
include|#
directive|include
file|"common_hsi.h"
end_include

begin_include
include|#
directive|include
file|"ecore_status.h"
end_include

begin_define
define|#
directive|define
name|ECORE_ETH_VF_NUM_MAC_FILTERS
value|1
end_define

begin_define
define|#
directive|define
name|ECORE_ETH_VF_NUM_VLAN_FILTERS
value|2
end_define

begin_define
define|#
directive|define
name|ECORE_VF_ARRAY_LENGTH
value|(3)
end_define

begin_define
define|#
directive|define
name|IS_VF
parameter_list|(
name|p_dev
parameter_list|)
value|((p_dev)->b_is_vf)
end_define

begin_define
define|#
directive|define
name|IS_PF
parameter_list|(
name|p_dev
parameter_list|)
value|(!((p_dev)->b_is_vf))
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_ECORE_SRIOV
end_ifdef

begin_define
define|#
directive|define
name|IS_PF_SRIOV
parameter_list|(
name|p_hwfn
parameter_list|)
value|(!!((p_hwfn)->p_dev->p_iov_info))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|IS_PF_SRIOV
parameter_list|(
name|p_hwfn
parameter_list|)
value|(0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|IS_PF_SRIOV_ALLOC
parameter_list|(
name|p_hwfn
parameter_list|)
value|(!!((p_hwfn)->pf_iov_info))
end_define

begin_define
define|#
directive|define
name|IS_PF_PDA
parameter_list|(
name|p_hwfn
parameter_list|)
value|0
end_define

begin_comment
comment|/* @@TBD Michalk */
end_comment

begin_comment
comment|/* @@@ TBD MichalK - what should this number be*/
end_comment

begin_define
define|#
directive|define
name|ECORE_MAX_VF_CHAINS_PER_PF
value|16
end_define

begin_comment
comment|/* vport update extended feature tlvs flags */
end_comment

begin_enum
enum|enum
name|ecore_iov_vport_update_flag
block|{
name|ECORE_IOV_VP_UPDATE_ACTIVATE
init|=
literal|0
block|,
name|ECORE_IOV_VP_UPDATE_VLAN_STRIP
init|=
literal|1
block|,
name|ECORE_IOV_VP_UPDATE_TX_SWITCH
init|=
literal|2
block|,
name|ECORE_IOV_VP_UPDATE_MCAST
init|=
literal|3
block|,
name|ECORE_IOV_VP_UPDATE_ACCEPT_PARAM
init|=
literal|4
block|,
name|ECORE_IOV_VP_UPDATE_RSS
init|=
literal|5
block|,
name|ECORE_IOV_VP_UPDATE_ACCEPT_ANY_VLAN
init|=
literal|6
block|,
name|ECORE_IOV_VP_UPDATE_SGE_TPA
init|=
literal|7
block|,
name|ECORE_IOV_VP_UPDATE_MAX
init|=
literal|8
block|, }
enum|;
end_enum

begin_comment
comment|/*PF to VF STATUS is part of vfpf-channel API and must be forward compatible */
end_comment

begin_enum
enum|enum
name|ecore_iov_pf_to_vf_status
block|{
name|PFVF_STATUS_WAITING
init|=
literal|0
block|,
name|PFVF_STATUS_SUCCESS
block|,
name|PFVF_STATUS_FAILURE
block|,
name|PFVF_STATUS_NOT_SUPPORTED
block|,
name|PFVF_STATUS_NO_RESOURCE
block|,
name|PFVF_STATUS_FORCED
block|,
name|PFVF_STATUS_MALICIOUS
block|, }
enum|;
end_enum

begin_struct_decl
struct_decl|struct
name|ecore_mcp_link_params
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ecore_mcp_link_state
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ecore_mcp_link_capabilities
struct_decl|;
end_struct_decl

begin_comment
comment|/* These defines are used by the hw-channel; should never change order */
end_comment

begin_define
define|#
directive|define
name|VFPF_ACQUIRE_OS_LINUX
value|(0)
end_define

begin_define
define|#
directive|define
name|VFPF_ACQUIRE_OS_WINDOWS
value|(1)
end_define

begin_define
define|#
directive|define
name|VFPF_ACQUIRE_OS_ESX
value|(2)
end_define

begin_define
define|#
directive|define
name|VFPF_ACQUIRE_OS_SOLARIS
value|(3)
end_define

begin_define
define|#
directive|define
name|VFPF_ACQUIRE_OS_LINUX_USERSPACE
value|(4)
end_define

begin_struct
struct|struct
name|ecore_vf_acquire_sw_info
block|{
name|u32
name|driver_version
decl_stmt|;
name|u8
name|os_type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_public_vf_info
block|{
comment|/* These copies will later be reflected in the bulletin board, 	 * but this copy should be newer. 	 */
name|u8
name|forced_mac
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u16
name|forced_vlan
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ecore_iov_vf_init_params
block|{
name|u16
name|rel_vf_id
decl_stmt|;
comment|/* Number of requested Queues; Currently, don't support different 	 * number of Rx/Tx queues. 	 */
comment|/* TODO - remove this limitation */
name|u16
name|num_queues
decl_stmt|;
comment|/* Allow the client to choose which qzones to use for Rx/Tx, 	 * and which queue_base to use for Tx queues on a per-queue basis. 	 * Notice values should be relative to the PF resources. 	 */
name|u16
name|req_rx_queue
index|[
name|ECORE_MAX_VF_CHAINS_PER_PF
index|]
decl_stmt|;
name|u16
name|req_tx_queue
index|[
name|ECORE_MAX_VF_CHAINS_PER_PF
index|]
decl_stmt|;
name|u8
name|vport_id
decl_stmt|;
comment|/* Should be set in case RSS is going to be used for VF */
name|u8
name|rss_eng_id
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_ECORE_SW_CHANNEL
end_ifdef

begin_comment
comment|/* This is SW channel related only... */
end_comment

begin_enum
enum|enum
name|mbx_state
block|{
name|VF_PF_UNKNOWN_STATE
init|=
literal|0
block|,
name|VF_PF_WAIT_FOR_START_REQUEST
init|=
literal|1
block|,
name|VF_PF_WAIT_FOR_NEXT_CHUNK_OF_REQUEST
init|=
literal|2
block|,
name|VF_PF_REQUEST_IN_PROCESSING
init|=
literal|3
block|,
name|VF_PF_RESPONSE_READY
init|=
literal|4
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ecore_iov_sw_mbx
block|{
name|enum
name|mbx_state
name|mbx_state
decl_stmt|;
name|u32
name|request_size
decl_stmt|;
name|u32
name|request_offset
decl_stmt|;
name|u32
name|response_size
decl_stmt|;
name|u32
name|response_offset
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * @brief Get the vf sw mailbox params  *  * @param p_hwfn  * @param rel_vf_id  *  * @return struct ecore_iov_sw_mbx*  */
end_comment

begin_function_decl
name|struct
name|ecore_iov_sw_mbx
modifier|*
name|ecore_iov_get_vf_sw_mbx
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* This struct is part of ecore_dev and contains data relevant to all hwfns;  * Initialized only if SR-IOV cpabability is exposed in PCIe config space.  */
end_comment

begin_struct
struct|struct
name|ecore_hw_sriov_info
block|{
comment|/* standard SRIOV capability fields, mostly for debugging */
name|int
name|pos
decl_stmt|;
comment|/* capability position */
name|int
name|nres
decl_stmt|;
comment|/* number of resources */
name|u32
name|cap
decl_stmt|;
comment|/* SR-IOV Capabilities */
name|u16
name|ctrl
decl_stmt|;
comment|/* SR-IOV Control */
name|u16
name|total_vfs
decl_stmt|;
comment|/* total VFs associated with the PF */
name|u16
name|num_vfs
decl_stmt|;
comment|/* number of vfs that have been started */
name|u16
name|initial_vfs
decl_stmt|;
comment|/* initial VFs associated with the PF */
name|u16
name|nr_virtfn
decl_stmt|;
comment|/* number of VFs available */
name|u16
name|offset
decl_stmt|;
comment|/* first VF Routing ID offset */
name|u16
name|stride
decl_stmt|;
comment|/* following VF stride */
name|u16
name|vf_device_id
decl_stmt|;
comment|/* VF device id */
name|u32
name|pgsz
decl_stmt|;
comment|/* page size for BAR alignment */
name|u8
name|link
decl_stmt|;
comment|/* Function Dependency Link */
name|u32
name|first_vf_in_pf
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_ECORE_SRIOV
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|LINUX_REMOVE
end_ifndef

begin_comment
comment|/**  * @brief mark/clear all VFs before/after an incoming PCIe sriov  *        disable.  *  * @param p_dev  * @param to_disable  */
end_comment

begin_function_decl
name|void
name|ecore_iov_set_vfs_to_disable
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u8
name|to_disable
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief mark/clear chosen VF before/after an incoming PCIe  *        sriov disable.  *  * @param p_dev  * @param rel_vf_id  * @param to_disable  */
end_comment

begin_function_decl
name|void
name|ecore_iov_set_vf_to_disable
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|,
name|u8
name|to_disable
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_iov_init_hw_for_vf - initialize the HW for  *        enabling access of a VF. Also includes preparing the  *        IGU for VF access. This needs to be called AFTER hw is  *        initialized and BEFORE VF is loaded inside the VM.  *  * @param p_hwfn  * @param p_ptt  * @param p_params  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_init_hw_for_vf
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_iov_vf_init_params
modifier|*
name|p_params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_iov_process_mbx_req - process a request received  *        from the VF  *  * @param p_hwfn  * @param p_ptt  * @param vfid  */
end_comment

begin_function_decl
name|void
name|ecore_iov_process_mbx_req
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_iov_release_hw_for_vf - called once upper layer  *        knows VF is done with - can release any resources  *        allocated for VF at this point. this must be done once  *        we know VF is no longer loaded in VM.  *  * @param p_hwfn  * @param p_ptt  * @param rel_vf_id  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_release_hw_for_vf
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief ecore_iov_set_vf_ctx - set a context for a given VF  *  * @param p_hwfn  * @param vf_id  * @param ctx  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_set_vf_ctx
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|vf_id
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief FLR cleanup for all VFs  *  * @param p_hwfn  * @param p_ptt  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_vf_flr_cleanup
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief FLR cleanup for single VF  *  * @param p_hwfn  * @param p_ptt  * @param rel_vf_id  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_single_vf_flr_cleanup
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Update the bulletin with link information. Notice this does NOT  *        send a bulletin update, only updates the PF's bulletin.  *  * @param p_hwfn  * @param p_vf  * @param params - the link params to use for the VF link configuration  * @param link - the link output to use for the VF link configuration  * @param p_caps - the link default capabilities.  */
end_comment

begin_function_decl
name|void
name|ecore_iov_set_link
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|vfid
parameter_list|,
name|struct
name|ecore_mcp_link_params
modifier|*
name|params
parameter_list|,
name|struct
name|ecore_mcp_link_state
modifier|*
name|link
parameter_list|,
name|struct
name|ecore_mcp_link_capabilities
modifier|*
name|p_caps
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Returns link information as perceived by VF.  *  * @param p_hwfn  * @param p_vf  * @param p_params - the link params visible to vf.  * @param p_link - the link state visible to vf.  * @param p_caps - the link default capabilities visible to vf.  */
end_comment

begin_function_decl
name|void
name|ecore_iov_get_link
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|vfid
parameter_list|,
name|struct
name|ecore_mcp_link_params
modifier|*
name|params
parameter_list|,
name|struct
name|ecore_mcp_link_state
modifier|*
name|link
parameter_list|,
name|struct
name|ecore_mcp_link_capabilities
modifier|*
name|p_caps
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief return if the VF is pending FLR  *  * @param p_hwfn  * @param rel_vf_id  *  * @return bool  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_is_vf_pending_flr
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Check if given VF ID @vfid is valid  *        w.r.t. @b_enabled_only value  *        if b_enabled_only = true - only enabled VF id is valid  *        else any VF id less than max_vfs is valid  *  * @param p_hwfn  * @param rel_vf_id - Relative VF ID  * @param b_enabled_only - consider only enabled VF  * @param b_non_malicious - true iff we want to validate vf isn't malicious.  *  * @return bool - true for valid VF ID  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_is_valid_vfid
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|rel_vf_id
parameter_list|,
name|bool
name|b_enabled_only
parameter_list|,
name|bool
name|b_non_malicious
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get VF's public info structure  *  * @param p_hwfn  * @param vfid - Relative VF ID  * @param b_enabled_only - false if want to access even if vf is disabled  *  * @return struct ecore_public_vf_info *  */
end_comment

begin_function_decl
name|struct
name|ecore_public_vf_info
modifier|*
name|ecore_iov_get_public_vf_info
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|vfid
parameter_list|,
name|bool
name|b_enabled_only
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief fills a bitmask of all VFs which have pending unhandled  *        messages.  *  * @param p_hwfn  */
end_comment

begin_function_decl
name|void
name|ecore_iov_pf_get_pending_events
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u64
modifier|*
name|events
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Copy VF's message to PF's buffer  *  * @param p_hwfn  * @param ptt  * @param vfid  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_copy_vf_msg
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|ptt
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Set forced MAC address in PFs copy of bulletin board  *        and configures FW/HW to support the configuration.  *  * @param p_hwfn  * @param mac  * @param vfid  */
end_comment

begin_function_decl
name|void
name|ecore_iov_bulletin_set_forced_mac
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u8
modifier|*
name|mac
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Set MAC address in PFs copy of bulletin board without   *        configuring FW/HW.  *  * @param p_hwfn  * @param mac  * @param vfid  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_bulletin_set_mac
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u8
modifier|*
name|mac
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Set default behaviour of VF in case no vlans are configured for it  *        whether to accept only untagged traffic or all.  *        Must be called prior to the VF vport-start.  *  * @param p_hwfn  * @param b_untagged_only  * @param vfid  *  * @return ECORE_SUCCESS if configuration would stick.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_bulletin_set_forced_untagged_default
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|bool
name|b_untagged_only
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get VFs opaque fid.  *  * @param p_hwfn  * @param vfid  * @param opaque_fid  */
end_comment

begin_function_decl
name|void
name|ecore_iov_get_vfs_opaque_fid
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|vfid
parameter_list|,
name|u16
modifier|*
name|opaque_fid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Set forced VLAN [pvid] in PFs copy of bulletin board  *        and configures FW/HW to support the configuration.  *        Setting of pvid 0 would clear the feature.  * @param p_hwfn  * @param pvid  * @param vfid  */
end_comment

begin_function_decl
name|void
name|ecore_iov_bulletin_set_forced_vlan
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|pvid
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Check if VF has VPORT instance. This can be used  *	  to check if VPORT is active.  *  * @param p_hwfn  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_vf_has_vport_instance
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief PF posts the bulletin to the VF  *  * @param p_hwfn  * @param p_vf  * @param p_ptt  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_post_vf_bulletin
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|vfid
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Check if given VF (@vfid) is marked as stopped  *  * @param p_hwfn  * @param vfid  *  * @return bool : true if stopped  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_is_vf_stopped
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Configure VF anti spoofing  *  * @param p_hwfn  * @param vfid  * @param val - spoofchk value - true/false  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_spoofchk_set
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|vfid
parameter_list|,
name|bool
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get VF's configured spoof value.  *  * @param p_hwfn  * @param vfid  *  * @return bool - spoofchk value - true/false  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_spoofchk_get
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Check for SRIOV sanity by PF.  *  * @param p_hwfn  * @param vfid  *  * @return bool - true if sanity checks passes, else false  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_pf_sanity_check
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get the num of VF chains.  *  * @param p_hwfn  *  * @return u8  */
end_comment

begin_function_decl
name|u8
name|ecore_iov_vf_chains_per_pf
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get vf request mailbox params  *  * @param p_hwfn  * @param rel_vf_id  * @param pp_req_virt_addr  * @param p_req_virt_size  */
end_comment

begin_function_decl
name|void
name|ecore_iov_get_vf_req_virt_mbx_params
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|,
name|void
modifier|*
modifier|*
name|pp_req_virt_addr
parameter_list|,
name|u16
modifier|*
name|p_req_virt_size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Get vf mailbox params  *  * @param p_hwfn  * @param rel_vf_id  * @param pp_reply_virt_addr  * @param p_reply_virt_size  */
end_comment

begin_function_decl
name|void
name|ecore_iov_get_vf_reply_virt_mbx_params
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|,
name|void
modifier|*
modifier|*
name|pp_reply_virt_addr
parameter_list|,
name|u16
modifier|*
name|p_reply_virt_size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Validate if the given length is a valid vfpf message  *        length  *  * @param length  *  * @return bool  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_is_valid_vfpf_msg_length
parameter_list|(
name|u32
name|length
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Return the max pfvf message length  *  * @return u32  */
end_comment

begin_function_decl
name|u32
name|ecore_iov_pfvf_msg_length
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Returns forced MAC address if one is configured  *  * @parm p_hwfn  * @parm rel_vf_id  *  * @return OSAL_NULL if mac isn't forced; Otherwise, returns MAC.  */
end_comment

begin_function_decl
name|u8
modifier|*
name|ecore_iov_bulletin_get_forced_mac
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Returns pvid if one is configured  *  * @parm p_hwfn  * @parm rel_vf_id  *  * @return 0 if no pvid is configured, otherwise the pvid.  */
end_comment

begin_function_decl
name|u16
name|ecore_iov_bulletin_get_forced_vlan
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief Configure VFs tx rate  *  * @param p_hwfn  * @param p_ptt  * @param vfid  * @param val - tx rate value in Mb/sec.  *  * @return enum _ecore_status_t  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_configure_tx_rate
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|int
name|vfid
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Retrieves the statistics associated with a VF  *  * @param p_hwfn  * @param p_ptt  * @param vfid  * @param p_stats - this will be filled with the VF statistics  *  * @return ECORE_SUCCESS iff statistics were retrieved. Error otherwise.  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_get_vf_stats
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
modifier|*
name|p_ptt
parameter_list|,
name|int
name|vfid
parameter_list|,
name|struct
name|ecore_eth_stats
modifier|*
name|p_stats
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Retrieves num of rxqs chains  *  * @param p_hwfn  * @param rel_vf_id  *  * @return num of rxqs chains.  */
end_comment

begin_function_decl
name|u8
name|ecore_iov_get_vf_num_rxqs
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Retrieves num of active rxqs chains  *  * @param p_hwfn  * @param rel_vf_id  *  * @return  */
end_comment

begin_function_decl
name|u8
name|ecore_iov_get_vf_num_active_rxqs
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Retrieves ctx pointer  *  * @param p_hwfn  * @param rel_vf_id  *  * @return  */
end_comment

begin_function_decl
name|void
modifier|*
name|ecore_iov_get_vf_ctx
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Retrieves VF`s num sbs  *  * @param p_hwfn  * @param rel_vf_id  *  * @return  */
end_comment

begin_function_decl
name|u8
name|ecore_iov_get_vf_num_sbs
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Returm true if VF is waiting for acquire  *  * @param p_hwfn  * @param rel_vf_id  *  * @return  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_is_vf_wait_for_acquire
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Returm true if VF is acquired but not initialized  *  * @param p_hwfn  * @param rel_vf_id  *  * @return  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_is_vf_acquired_not_initialized
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Returm true if VF is acquired and initialized  *  * @param p_hwfn  * @param rel_vf_id  *  * @return  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_is_vf_initialized
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Returm true if VF has started in FW  *  * @param p_hwfn  * @param rel_vf_id  *  * @return  */
end_comment

begin_function_decl
name|bool
name|ecore_iov_is_vf_started
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Get VF's vport min rate configured.  * @param p_hwfn  * @param rel_vf_id  *  * @return - rate in Mbps  */
end_comment

begin_function_decl
name|int
name|ecore_iov_get_vf_min_rate
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|vfid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Configure min rate for VF's vport.  * @param p_dev  * @param vfid  * @param - rate in Mbps  *  * @return  */
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_configure_min_tx_rate
parameter_list|(
name|struct
name|ecore_dev
modifier|*
name|p_dev
parameter_list|,
name|int
name|vfid
parameter_list|,
name|u32
name|rate
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * @brief ecore_pf_configure_vf_queue_coalesce - PF configure coalesce parameters  *    of VFs for Rx and Tx queue.  *    While the API allows setting coalescing per-qid, all queues sharing a SB  *    should be in same range [i.e., either 0-0x7f, 0x80-0xff or 0x100-0x1ff]  *    otherwise configuration would break.  *  * @param p_hwfn  * @param rx_coal - Rx Coalesce value in micro seconds.  * @param tx_coal - TX Coalesce value in micro seconds.  * @param vf_id  * @param qid  *  * @return int  **/
end_comment

begin_function_decl
name|enum
name|_ecore_status_t
name|ecore_iov_pf_configure_vf_queue_coalesce
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rx_coal
parameter_list|,
name|u16
name|tx_coal
parameter_list|,
name|u16
name|vf_id
parameter_list|,
name|u16
name|qid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * @brief - Given a VF index, return index of next [including that] active VF.  *  * @param p_hwfn  * @param rel_vf_id  *  * @return MAX_NUM_VFS_E4 in case no further active VFs, otherwise index.  */
end_comment

begin_function_decl
name|u16
name|ecore_iov_get_next_active_vf
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|rel_vf_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ecore_iov_bulletin_set_udp_ports
parameter_list|(
name|struct
name|ecore_hwfn
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|vfid
parameter_list|,
name|u16
name|vxlan_port
parameter_list|,
name|u16
name|geneve_port
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_ifndef
ifndef|#
directive|ifndef
name|LINUX_REMOVE
end_ifndef

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_set_vfs_to_disable
parameter_list|(
name|struct
name|ecore_dev
name|OSAL_UNUSED
modifier|*
name|p_dev
parameter_list|,
name|u8
name|OSAL_UNUSED
name|to_disable
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_set_vf_to_disable
parameter_list|(
name|struct
name|ecore_dev
name|OSAL_UNUSED
modifier|*
name|p_dev
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|,
name|u8
name|OSAL_UNUSED
name|to_disable
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_init_hw_for_vf
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
name|OSAL_UNUSED
modifier|*
name|p_ptt
parameter_list|,
name|struct
name|ecore_iov_vf_init_params
name|OSAL_UNUSED
modifier|*
name|p_params
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_process_mbx_req
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
name|OSAL_UNUSED
modifier|*
name|p_ptt
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_release_hw_for_vf
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
name|OSAL_UNUSED
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
name|ECORE_SUCCESS
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_set_vf_ctx
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|vf_id
parameter_list|,
name|OSAL_UNUSED
name|void
modifier|*
name|ctx
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_vf_flr_cleanup
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
name|OSAL_UNUSED
modifier|*
name|p_ptt
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_single_vf_flr_cleanup
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
name|OSAL_UNUSED
modifier|*
name|p_ptt
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_set_link
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|vfid
parameter_list|,
name|struct
name|ecore_mcp_link_params
name|OSAL_UNUSED
modifier|*
name|params
parameter_list|,
name|struct
name|ecore_mcp_link_state
name|OSAL_UNUSED
modifier|*
name|link
parameter_list|,
name|struct
name|ecore_mcp_link_capabilities
name|OSAL_UNUSED
modifier|*
name|p_caps
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_get_link
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|vfid
parameter_list|,
name|struct
name|ecore_mcp_link_params
name|OSAL_UNUSED
modifier|*
name|params
parameter_list|,
name|struct
name|ecore_mcp_link_state
name|OSAL_UNUSED
modifier|*
name|link
parameter_list|,
name|struct
name|ecore_mcp_link_capabilities
name|OSAL_UNUSED
modifier|*
name|p_caps
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_is_vf_pending_flr
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_is_valid_vfid
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|,
name|bool
name|OSAL_UNUSED
name|b_enabled_only
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|OSAL_INLINE
expr|struct
name|ecore_public_vf_info
operator|*
name|ecore_iov_get_public_vf_info
argument_list|(
argument|struct ecore_hwfn OSAL_UNUSED *p_hwfn
argument_list|,
argument|u16 OSAL_UNUSED vfid
argument_list|,
argument|bool OSAL_UNUSED b_enabled_only
argument_list|)
block|{
return|return
name|OSAL_NULL
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_pf_add_pending_events
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u8
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_pf_get_and_clear_pending_events
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u64
name|OSAL_UNUSED
modifier|*
name|events
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_copy_vf_msg
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
name|OSAL_UNUSED
modifier|*
name|ptt
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_bulletin_set_forced_mac
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u8
name|OSAL_UNUSED
modifier|*
name|mac
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_bulletin_set_mac
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u8
name|OSAL_UNUSED
modifier|*
name|mac
parameter_list|,
name|OSAL_UNUSED
name|int
name|vfid
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_bulletin_set_forced_untagged_default
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|bool
name|OSAL_UNUSED
name|b_untagged_only
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_get_vfs_opaque_fid
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|,
name|u16
name|OSAL_UNUSED
modifier|*
name|opaque_fid
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_bulletin_set_forced_vlan
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|pvid
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_vf_has_vport_instance
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_post_vf_bulletin
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|,
name|struct
name|ecore_ptt
name|OSAL_UNUSED
modifier|*
name|p_ptt
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_is_vf_stopped
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_spoofchk_set
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|,
name|bool
name|OSAL_UNUSED
name|val
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_spoofchk_get
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_pf_sanity_check
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|u8
name|ecore_iov_vf_chains_per_pf
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_get_vf_req_virt_mbx_params
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|,
name|void
name|OSAL_UNUSED
modifier|*
modifier|*
name|pp_req_virt_addr
parameter_list|,
name|u16
name|OSAL_UNUSED
modifier|*
name|p_req_virt_size
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_get_vf_reply_virt_mbx_params
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|,
name|void
name|OSAL_UNUSED
modifier|*
modifier|*
name|pp_reply_virt_addr
parameter_list|,
name|u16
name|OSAL_UNUSED
modifier|*
name|p_reply_virt_size
parameter_list|)
block|{}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_is_valid_vfpf_msg_length
parameter_list|(
name|u32
name|OSAL_UNUSED
name|length
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|u32
name|ecore_iov_pfvf_msg_length
parameter_list|(
name|void
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|u8
modifier|*
name|ecore_iov_bulletin_get_forced_mac
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
name|OSAL_NULL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|u16
name|ecore_iov_bulletin_get_forced_vlan
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_configure_tx_rate
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
name|OSAL_UNUSED
modifier|*
name|p_ptt
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|,
name|int
name|OSAL_UNUSED
name|val
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_get_vf_stats
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|struct
name|ecore_ptt
name|OSAL_UNUSED
modifier|*
name|p_ptt
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|,
name|struct
name|ecore_eth_stats
name|OSAL_UNUSED
modifier|*
name|p_stats
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|u8
name|ecore_iov_get_vf_num_rxqs
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|u8
name|ecore_iov_get_vf_num_active_rxqs
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|void
modifier|*
name|ecore_iov_get_vf_ctx
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
name|OSAL_NULL
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|u8
name|ecore_iov_get_vf_num_sbs
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_is_vf_wait_for_acquire
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_is_vf_acquired_not_initialized
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|bool
name|ecore_iov_is_vf_initialized
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|int
name|ecore_iov_get_vf_min_rate
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|enum
name|_ecore_status_t
name|ecore_iov_configure_min_tx_rate
parameter_list|(
name|struct
name|ecore_dev
name|OSAL_UNUSED
modifier|*
name|p_dev
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|,
name|OSAL_UNUSED
name|u32
name|rate
parameter_list|)
block|{
return|return
name|ECORE_INVAL
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|OSAL_INLINE
name|void
name|ecore_iov_bulletin_set_udp_ports
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|int
name|OSAL_UNUSED
name|vfid
parameter_list|,
name|u16
name|OSAL_UNUSED
name|vxlan_port
parameter_list|,
name|u16
name|OSAL_UNUSED
name|geneve_port
parameter_list|)
block|{
return|return;
block|}
end_function

begin_function
specifier|static
name|OSAL_INLINE
name|u16
name|ecore_iov_get_next_active_vf
parameter_list|(
name|struct
name|ecore_hwfn
name|OSAL_UNUSED
modifier|*
name|p_hwfn
parameter_list|,
name|u16
name|OSAL_UNUSED
name|rel_vf_id
parameter_list|)
block|{
return|return
name|MAX_NUM_VFS_E4
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ecore_for_each_vf
parameter_list|(
name|_p_hwfn
parameter_list|,
name|_i
parameter_list|)
define|\
value|for (_i = ecore_iov_get_next_active_vf(_p_hwfn, 0);		\ 	     _i< MAX_NUM_VFS_E4;					\ 	     _i = ecore_iov_get_next_active_vf(_p_hwfn, _i + 1))
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

