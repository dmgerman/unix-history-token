begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2015,2016 Annapurna Labs Ltd. and affiliates  * All rights reserved.  *  * Developed by Semihalf.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/**  *  Ethernet  *  @{  * @file   al_init_eth_lm.h  *  * @brief ethernet link management common utilities  *  * Common operation example:  * @code  *      int main()  *      {  *		struct al_eth_lm_context lm_context;  *		struct al_eth_lm_init_params lm_params;  *		enum al_eth_lm_link_mode old_mode;  *		enum al_eth_lm_link_mode new_mode;  *		al_bool	fault;  *		al_bool				link_up;  *		int rc = 0;  *  *		lm_params.adapter = hal_adapter;  *		lm_params.serdes_obj = serdes;  *		lm_params.grp = grp;  *		lm_params.lane = lane;  *		lm_params.sfp_detection = true;  *		lm_params.link_training = true;  *		lm_params.rx_equal = true  *		lm_params.static_values = true;  *		lm_params.kr_fec_enable = false;  *		lm_params.eeprom_read =&my_eeprom_read;  *		lm_params.eeprom_context = context;  *		lm_params.get_random_byte =&my_rand_byte;  *		lm_params.default_mode = AL_ETH_LM_MODE_10G_DA;  *  *		al_eth_lm_init(&lm_context,&lm_params);  *  *		rc = al_eth_lm_link_detection(&lm_context,&fault,&old_mode,&new_mode);  *		if (fault == false)  *			return; // in this case the link is still up  *  *		if (rc) {  *			printf("link detection failed on error\n");  *			return;  *		}  *  *		if (old_mode != new_mode) {  *			 // perform serdes configuration if needed  *  *			 // mac stop / start / config if needed  *		}  *  *		spin_lock(lock);  *		rc = al_eth_lm_link_establish($lm_context,&link_up);  *		spin_unlock(lock);  *		if (rc) {  *			printf("establish link failed\n");  *			return;  *		}  *  *		if (link_up)  *			printf("Link established successfully\n");  *		else  *			printf("No signal found. probably the link partner is disconnected\n");  *      }  * @endcode  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__AL_INIT_ETH_LM_H__
end_ifndef

begin_define
define|#
directive|define
name|__AL_INIT_ETH_LM_H__
end_define

begin_include
include|#
directive|include
file|<al_serdes.h>
end_include

begin_include
include|#
directive|include
file|<al_hal_eth.h>
end_include

begin_include
include|#
directive|include
file|"al_init_eth_kr.h"
end_include

begin_enum
enum|enum
name|al_eth_lm_link_mode
block|{
name|AL_ETH_LM_MODE_DISCONNECTED
block|,
name|AL_ETH_LM_MODE_10G_OPTIC
block|,
name|AL_ETH_LM_MODE_10G_DA
block|,
name|AL_ETH_LM_MODE_1G
block|,
name|AL_ETH_LM_MODE_25G
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|al_eth_lm_max_speed
block|{
name|AL_ETH_LM_MAX_SPEED_MAX
block|,
name|AL_ETH_LM_MAX_SPEED_25G
block|,
name|AL_ETH_LM_MAX_SPEED_10G
block|,
name|AL_ETH_LM_MAX_SPEED_1G
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|al_eth_lm_link_state
block|{
name|AL_ETH_LM_LINK_DOWN
block|,
name|AL_ETH_LM_LINK_DOWN_RF
block|,
name|AL_ETH_LM_LINK_UP
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|al_eth_lm_led_config_speed
block|{
name|AL_ETH_LM_LED_CONFIG_1G
block|,
name|AL_ETH_LM_LED_CONFIG_10G
block|,
name|AL_ETH_LM_LED_CONFIG_25G
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|al_eth_lm_led_config_data
block|{
name|enum
name|al_eth_lm_led_config_speed
name|speed
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|al_eth_lm_context
block|{
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
decl_stmt|;
name|struct
name|al_serdes_grp_obj
modifier|*
name|serdes_obj
decl_stmt|;
name|enum
name|al_serdes_lane
name|lane
decl_stmt|;
name|uint32_t
name|link_training_failures
decl_stmt|;
name|boolean_t
name|tx_param_dirty
decl_stmt|;
name|boolean_t
name|serdes_tx_params_valid
decl_stmt|;
name|struct
name|al_serdes_adv_tx_params
name|tx_params_override
decl_stmt|;
name|boolean_t
name|rx_param_dirty
decl_stmt|;
name|boolean_t
name|serdes_rx_params_valid
decl_stmt|;
name|struct
name|al_serdes_adv_rx_params
name|rx_params_override
decl_stmt|;
name|struct
name|al_eth_an_adv
name|local_adv
decl_stmt|;
name|struct
name|al_eth_an_adv
name|partner_adv
decl_stmt|;
name|enum
name|al_eth_lm_link_mode
name|mode
decl_stmt|;
name|uint8_t
name|da_len
decl_stmt|;
name|boolean_t
name|debug
decl_stmt|;
comment|/* configurations */
name|boolean_t
name|sfp_detection
decl_stmt|;
name|uint8_t
name|sfp_bus_id
decl_stmt|;
name|uint8_t
name|sfp_i2c_addr
decl_stmt|;
name|enum
name|al_eth_lm_link_mode
name|default_mode
decl_stmt|;
name|uint8_t
name|default_dac_len
decl_stmt|;
name|boolean_t
name|link_training
decl_stmt|;
name|boolean_t
name|rx_equal
decl_stmt|;
name|boolean_t
name|static_values
decl_stmt|;
name|boolean_t
name|retimer_exist
decl_stmt|;
name|enum
name|al_eth_retimer_type
name|retimer_type
decl_stmt|;
name|uint8_t
name|retimer_bus_id
decl_stmt|;
name|uint8_t
name|retimer_i2c_addr
decl_stmt|;
name|enum
name|al_eth_retimer_channel
name|retimer_channel
decl_stmt|;
comment|/* services */
name|int
function_decl|(
modifier|*
name|i2c_read
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|uint8_t
name|bus_id
parameter_list|,
name|uint8_t
name|i2c_addr
parameter_list|,
name|uint8_t
name|reg_addr
parameter_list|,
name|uint8_t
modifier|*
name|val
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|i2c_write
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|uint8_t
name|bus_id
parameter_list|,
name|uint8_t
name|i2c_addr
parameter_list|,
name|uint8_t
name|reg_addr
parameter_list|,
name|uint8_t
name|val
parameter_list|)
function_decl|;
name|void
modifier|*
name|i2c_context
decl_stmt|;
name|uint8_t
function_decl|(
modifier|*
name|get_random_byte
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|gpio_get
function_decl|)
parameter_list|(
name|unsigned
name|int
name|gpio
parameter_list|)
function_decl|;
name|uint32_t
name|gpio_present
decl_stmt|;
name|enum
name|al_eth_retimer_channel
name|retimer_tx_channel
decl_stmt|;
name|boolean_t
name|retimer_configured
decl_stmt|;
name|enum
name|al_eth_lm_max_speed
name|max_speed
decl_stmt|;
name|boolean_t
name|sfp_detect_force_mode
decl_stmt|;
name|enum
name|al_eth_lm_link_state
name|link_state
decl_stmt|;
name|boolean_t
name|new_port
decl_stmt|;
name|boolean_t
function_decl|(
modifier|*
name|lm_pause
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|led_config
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|struct
name|al_eth_lm_led_config_data
modifier|*
name|data
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|al_eth_lm_init_params
block|{
comment|/* pointer to HAL context */
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
decl_stmt|;
comment|/* pointer to serdes object */
name|struct
name|al_serdes_grp_obj
modifier|*
name|serdes_obj
decl_stmt|;
comment|/* serdes lane for this port */
name|enum
name|al_serdes_lane
name|lane
decl_stmt|;
comment|/* 	 * set to true to perform sfp detection if the link is down. 	 * when set to true, eeprom_read below should NOT be NULL. 	 */
name|boolean_t
name|sfp_detection
decl_stmt|;
comment|/* i2c bus id of the SFP for this port */
name|uint8_t
name|sfp_bus_id
decl_stmt|;
comment|/* i2c addr of the SFP for this port */
name|uint8_t
name|sfp_i2c_addr
decl_stmt|;
comment|/* 	 * default mode, and dac length will be used in case sfp_detection 	 * is not set or in case the detection failed. 	 */
name|enum
name|al_eth_lm_link_mode
name|default_mode
decl_stmt|;
name|uint8_t
name|default_dac_len
decl_stmt|;
comment|/* the i2c bus id and addr of the retimer in case it exist */
name|uint8_t
name|retimer_bus_id
decl_stmt|;
name|uint8_t
name|retimer_i2c_addr
decl_stmt|;
comment|/* retimer channel connected to this port */
name|enum
name|al_eth_retimer_channel
name|retimer_channel
decl_stmt|;
name|enum
name|al_eth_retimer_channel
name|retimer_tx_channel
decl_stmt|;
comment|/* retimer type if exist */
name|enum
name|al_eth_retimer_type
name|retimer_type
decl_stmt|;
comment|/* 	 * the following parameters control what mechanisms to run 	 * on link_establish with the following steps: 	 * - if retimer_exist is set, the retimer will be configured based on DA len. 	 * - if link_training is set and DA detected run link training. if succeed return 0 	 * - if rx_equal is set serdes equalization will be run to configure the rx parameters. 	 * - if static_values is set, tx and rx values will be set based on static values. 	 */
name|boolean_t
name|retimer_exist
decl_stmt|;
name|boolean_t
name|link_training
decl_stmt|;
name|boolean_t
name|rx_equal
decl_stmt|;
name|boolean_t
name|static_values
decl_stmt|;
comment|/* enable / disable fec capabilities in AN */
name|boolean_t
name|kr_fec_enable
decl_stmt|;
comment|/* 	 * pointer to function that's read 1 byte from eeprom 	 * in case no eeprom is connected should return -ETIMEDOUT 	 */
name|int
function_decl|(
modifier|*
name|i2c_read
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|uint8_t
name|bus_id
parameter_list|,
name|uint8_t
name|i2c_addr
parameter_list|,
name|uint8_t
name|reg_addr
parameter_list|,
name|uint8_t
modifier|*
name|val
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|i2c_write
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|uint8_t
name|bus_id
parameter_list|,
name|uint8_t
name|i2c_addr
parameter_list|,
name|uint8_t
name|reg_addr
parameter_list|,
name|uint8_t
name|val
parameter_list|)
function_decl|;
name|void
modifier|*
name|i2c_context
decl_stmt|;
comment|/* pointer to function that return 1 rand byte */
name|uint8_t
function_decl|(
modifier|*
name|get_random_byte
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* pointer to function that gets GPIO value - if NULL gpio present won't be used */
name|int
function_decl|(
modifier|*
name|gpio_get
function_decl|)
parameter_list|(
name|unsigned
name|int
name|gpio
parameter_list|)
function_decl|;
comment|/* gpio number connected to the SFP present pin */
name|uint32_t
name|gpio_present
decl_stmt|;
name|enum
name|al_eth_lm_max_speed
name|max_speed
decl_stmt|;
comment|/* in case force mode is true - the default mode will be set regardless to 	 * the SFP EEPROM content */
name|boolean_t
name|sfp_detect_force_mode
decl_stmt|;
comment|/* lm pause callback - in case it return true the LM will try to preserve 	 * the current link status and will not try to establish new link (and will not 	 * access to i2c bus) */
name|boolean_t
function_decl|(
modifier|*
name|lm_pause
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
comment|/* config ethernet LEDs according to data. can be NULL if no configuration needed */
name|void
function_decl|(
modifier|*
name|led_config
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|struct
name|al_eth_lm_led_config_data
modifier|*
name|data
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * initialize link management context and set configuration  *  * @param  lm_context pointer to link management context  * @param  params  parameters passed from upper layer  *  * @return 0 in case of success. otherwise on failure.  */
end_comment

begin_function_decl
name|int
name|al_eth_lm_init
parameter_list|(
name|struct
name|al_eth_lm_context
modifier|*
name|lm_context
parameter_list|,
name|struct
name|al_eth_lm_init_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * perform link status check. in case link is down perform sfp detection  *  * @param lm_context pointer to link management context  * @param link_fault indicate if the link is down  * @param old_mode the last working mode  * @param new_mode the new mode detected in this call  *  * @return  0 in case of success. otherwise on failure.  */
end_comment

begin_function_decl
name|int
name|al_eth_lm_link_detection
parameter_list|(
name|struct
name|al_eth_lm_context
modifier|*
name|lm_context
parameter_list|,
name|boolean_t
modifier|*
name|link_fault
parameter_list|,
name|enum
name|al_eth_lm_link_mode
modifier|*
name|old_mode
parameter_list|,
name|enum
name|al_eth_lm_link_mode
modifier|*
name|new_mode
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * run LT, rx equalization and static values override according to configuration  * This function MUST be called inside a lock as it using common serdes registers  *  * @param lm_context pointer to link management context  * @param link_up set to true in case link is establish successfully  *  * @return< 0 in case link was failed to be established  */
end_comment

begin_function_decl
name|int
name|al_eth_lm_link_establish
parameter_list|(
name|struct
name|al_eth_lm_context
modifier|*
name|lm_context
parameter_list|,
name|boolean_t
modifier|*
name|link_up
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * override the default static parameters  *  * @param lm_context pointer to link management context  * @param tx_params pointer to new tx params  * @param rx_params pointer to new rx params  *  * @return  0 in case of success. otherwise on failure.  **/
end_comment

begin_function_decl
name|int
name|al_eth_lm_static_parameters_override
parameter_list|(
name|struct
name|al_eth_lm_context
modifier|*
name|lm_context
parameter_list|,
name|struct
name|al_serdes_adv_tx_params
modifier|*
name|tx_params
parameter_list|,
name|struct
name|al_serdes_adv_rx_params
modifier|*
name|rx_params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * disable serdes parameters override  *  * @param lm_context pointer to link management context  * @param tx_params set to true to disable override of tx params  * @param rx_params set to true to disable override of rx params  *  * @return  0 in case of success. otherwise on failure.  **/
end_comment

begin_function_decl
name|int
name|al_eth_lm_static_parameters_override_disable
parameter_list|(
name|struct
name|al_eth_lm_context
modifier|*
name|lm_context
parameter_list|,
name|boolean_t
name|tx_params
parameter_list|,
name|boolean_t
name|rx_params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * get the static parameters that are being used  * if the parameters was override - return the override values  * else return the current values of the parameters  *  * @param  lm_context pointer to link management context  * @param  tx_params  pointer to new tx params  * @param  rx_params  pointer to new rx params  *  * @return  0 in case of success. otherwise on failure.  */
end_comment

begin_function_decl
name|int
name|al_eth_lm_static_parameters_get
parameter_list|(
name|struct
name|al_eth_lm_context
modifier|*
name|lm_context
parameter_list|,
name|struct
name|al_serdes_adv_tx_params
modifier|*
name|tx_params
parameter_list|,
name|struct
name|al_serdes_adv_rx_params
modifier|*
name|rx_params
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * convert link management mode to string  *  * @param  val link management mode  *  * @return     string of the mode  */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|al_eth_lm_mode_convert_to_str
parameter_list|(
name|enum
name|al_eth_lm_link_mode
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * print all debug messages  *  * @param lm_context pointer to link management context  * @param enable     set to true to enable debug mode  */
end_comment

begin_function_decl
name|void
name|al_eth_lm_debug_mode_set
parameter_list|(
name|struct
name|al_eth_lm_context
modifier|*
name|lm_context
parameter_list|,
name|boolean_t
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

