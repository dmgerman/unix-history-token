begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  *  * Copyright (c) 2007, Kip Macy kmacy@freebsd.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  *  * 2. The name of Kip Macy nor the names of other  *    contributors may be used to endorse or promote products derived from  *    this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  *  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MVEC_H_
end_ifndef

begin_define
define|#
directive|define
name|_MVEC_H_
end_define

begin_function_decl
name|int
name|cxgb_cache_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_cache_flush
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|caddr_t
name|cxgb_cache_get
parameter_list|(
name|uma_zone_t
name|zone
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_cache_put
parameter_list|(
name|uma_zone_t
name|zone
parameter_list|,
name|void
modifier|*
name|cl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_cache_refill
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|int
name|cxgb_cached_allocations
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|cxgb_cached
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|cxgb_ext_freed
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|mbufs_outstanding
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|mtomv
parameter_list|(
name|m
parameter_list|)
value|((struct mbuf_vec *)((m)->m_pktdat))
end_define

begin_define
define|#
directive|define
name|M_IOVEC
value|0x100000
end_define

begin_comment
comment|/* mbuf immediate data area is used for cluster ptrs */
end_comment

begin_comment
comment|/*  * duplication from mbuf.h - can't use directly because  * m_ext is a define  */
end_comment

begin_struct
struct|struct
name|m_ext_
block|{
name|caddr_t
name|ext_buf
decl_stmt|;
comment|/* start of buffer */
name|void
function_decl|(
modifier|*
name|ext_free
function_decl|)
comment|/* free routine if not the usual */
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|ext_args
decl_stmt|;
comment|/* optional argument pointer */
name|u_int
name|ext_size
decl_stmt|;
comment|/* size of buffer, for ext_free */
specifier|volatile
name|u_int
modifier|*
name|ref_cnt
decl_stmt|;
comment|/* pointer to ref count info */
name|int
name|ext_type
decl_stmt|;
comment|/* type of external storage */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MT_IOVEC
value|9
end_define

begin_define
define|#
directive|define
name|MT_CLIOVEC
value|10
end_define

begin_define
define|#
directive|define
name|EXT_IOVEC
value|8
end_define

begin_define
define|#
directive|define
name|EXT_CLIOVEC
value|9
end_define

begin_define
define|#
directive|define
name|EXT_JMPIOVEC
value|10
end_define

begin_decl_stmt
specifier|extern
name|uma_zone_t
name|zone_miovec
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|mbuf_iovec
block|{
name|struct
name|m_ext_
name|mi_ext
decl_stmt|;
name|uint32_t
name|mi_flags
decl_stmt|;
name|uint32_t
name|mi_len
decl_stmt|;
name|caddr_t
name|mi_data
decl_stmt|;
name|uint16_t
name|mi_tso_segsz
decl_stmt|;
name|uint16_t
name|mi_ether_vtag
decl_stmt|;
name|uint16_t
name|mi_rss_hash
decl_stmt|;
comment|/* this can be shrunk down if something comes 				      * along that needs 1 byte 				      */
name|uint16_t
name|mi_pad
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mi_mbuf
decl_stmt|;
comment|/* need to be able to handle the @#$@@#%$ing packet zone */
define|#
directive|define
name|mi_size
value|mi_ext.ext_size
define|#
directive|define
name|mi_base
value|mi_ext.ext_buf
define|#
directive|define
name|mi_args
value|mi_ext.ext_args
define|#
directive|define
name|mi_size
value|mi_ext.ext_size
define|#
directive|define
name|mi_size
value|mi_ext.ext_size
define|#
directive|define
name|mi_refcnt
value|mi_ext.ref_cnt
define|#
directive|define
name|mi_ext_free
value|mi_ext.ext_free
define|#
directive|define
name|mi_ext_flags
value|mi_ext.ext_flags
define|#
directive|define
name|mi_type
value|mi_ext.ext_type
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MIOVBYTES
value|512
end_define

begin_define
define|#
directive|define
name|MAX_MBUF_IOV
value|((MHLEN-8)/sizeof(struct mbuf_iovec))
end_define

begin_define
define|#
directive|define
name|MAX_MIOVEC_IOV
value|((MIOVBYTES-sizeof(struct m_hdr)-sizeof(struct pkthdr)-8)/sizeof(struct mbuf_iovec))
end_define

begin_define
define|#
directive|define
name|MAX_CL_IOV
value|((MCLBYTES-sizeof(struct m_hdr)-sizeof(struct pkthdr)-8)/sizeof(struct mbuf_iovec))
end_define

begin_define
define|#
directive|define
name|MAX_PAGE_IOV
value|((MJUMPAGESIZE-sizeof(struct m_hdr)-sizeof(struct pkthdr)-8)/sizeof(struct mbuf_iovec))
end_define

begin_struct
struct|struct
name|mbuf_vec
block|{
name|uint16_t
name|mv_first
decl_stmt|;
comment|/* first valid cluster        */
name|uint16_t
name|mv_count
decl_stmt|;
comment|/* # of clusters              */
name|uint32_t
name|mv_flags
decl_stmt|;
comment|/* flags for iovec            */
name|struct
name|mbuf_iovec
name|mv_vec
index|[
literal|0
index|]
decl_stmt|;
comment|/* depends on whether or not this is in a cluster or an mbuf */
block|}
struct|;
end_struct

begin_function_decl
name|void
name|mi_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mi_deinit
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_m_explode
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_m_collapse
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
name|maxbufs
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mb_free_vec
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|m_iovinit
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
block|{
name|struct
name|mbuf_vec
modifier|*
name|mv
init|=
name|mtomv
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|mv
operator|->
name|mv_first
operator|=
name|mv
operator|->
name|mv_count
operator|=
literal|0
expr_stmt|;
name|m
operator|->
name|m_pkthdr
operator|.
name|len
operator|=
name|m
operator|->
name|m_len
operator|=
literal|0
expr_stmt|;
name|m
operator|->
name|m_flags
operator||=
name|M_IOVEC
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|m_iovappend
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|uint8_t
modifier|*
name|cl
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|len
parameter_list|,
name|caddr_t
name|data
parameter_list|,
specifier|volatile
name|uint32_t
modifier|*
name|ref
parameter_list|)
block|{
name|struct
name|mbuf_vec
modifier|*
name|mv
init|=
name|mtomv
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|struct
name|mbuf_iovec
modifier|*
name|iov
decl_stmt|;
name|int
name|idx
init|=
name|mv
operator|->
name|mv_first
operator|+
name|mv
operator|->
name|mv_count
decl_stmt|;
name|KASSERT
argument_list|(
name|idx
operator|<=
name|MAX_MBUF_IOV
argument_list|,
operator|(
literal|"tried to append too many clusters to mbuf iovec"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|->
name|m_flags
operator|&
name|M_EXT
operator|)
operator|!=
literal|0
condition|)
name|panic
argument_list|(
literal|"invalid flags in %s"
argument_list|,
name|__func__
argument_list|)
expr_stmt|;
if|if
condition|(
name|mv
operator|->
name|mv_count
operator|==
literal|0
condition|)
name|m
operator|->
name|m_data
operator|=
name|data
expr_stmt|;
name|iov
operator|=
operator|&
name|mv
operator|->
name|mv_vec
index|[
name|idx
index|]
expr_stmt|;
name|iov
operator|->
name|mi_type
operator|=
name|m_gettype
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|iov
operator|->
name|mi_base
operator|=
name|cl
expr_stmt|;
name|iov
operator|->
name|mi_len
operator|=
name|len
expr_stmt|;
name|iov
operator|->
name|mi_data
operator|=
name|data
expr_stmt|;
name|iov
operator|->
name|mi_refcnt
operator|=
name|ref
expr_stmt|;
name|m
operator|->
name|m_pkthdr
operator|.
name|len
operator|+=
name|len
expr_stmt|;
name|m
operator|->
name|m_len
operator|+=
name|len
expr_stmt|;
name|mv
operator|->
name|mv_count
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|m_explode
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
block|{
if|if
condition|(
operator|(
name|m
operator|->
name|m_flags
operator|&
name|M_IOVEC
operator|)
operator|==
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
name|_m_explode
argument_list|(
name|m
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|busdma_map_mbuf_fast
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|seg
parameter_list|)
block|{
name|seg
operator|->
name|ds_addr
operator|=
name|pmap_kextract
argument_list|(
name|mtod
argument_list|(
name|m
argument_list|,
name|vm_offset_t
argument_list|)
argument_list|)
expr_stmt|;
name|seg
operator|->
name|ds_len
operator|=
name|m
operator|->
name|m_len
expr_stmt|;
block|}
end_function

begin_function_decl
name|int
name|busdma_map_sg_collapse
parameter_list|(
name|struct
name|mbuf
modifier|*
modifier|*
name|m
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|segs
parameter_list|,
name|int
modifier|*
name|nsegs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|busdma_map_sg_vec
parameter_list|(
name|struct
name|mbuf
modifier|*
modifier|*
name|m
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
name|mp
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|segs
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|busdma_map_sgl
parameter_list|(
name|bus_dma_segment_t
modifier|*
name|vsegs
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|segs
parameter_list|,
name|int
name|count
parameter_list|)
block|{
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|segs
operator|->
name|ds_addr
operator|=
name|pmap_kextract
argument_list|(
operator|(
name|vm_offset_t
operator|)
name|vsegs
operator|->
name|ds_addr
argument_list|)
expr_stmt|;
name|segs
operator|->
name|ds_len
operator|=
name|vsegs
operator|->
name|ds_len
expr_stmt|;
name|segs
operator|++
expr_stmt|;
name|vsegs
operator|++
expr_stmt|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function_decl
name|struct
name|mbuf
modifier|*
name|mi_collapse_mbuf
parameter_list|(
name|struct
name|mbuf_iovec
modifier|*
name|mi
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|mi_collapse_sge
parameter_list|(
name|struct
name|mbuf_iovec
modifier|*
name|mi
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|seg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mcl_alloc
parameter_list|(
name|int
name|seg_count
parameter_list|,
name|int
modifier|*
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|m_collapse
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|int
name|maxbufs
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
name|mnew
parameter_list|)
block|{
if|#
directive|if
operator|(
operator|!
name|defined
argument_list|(
name|__sparc64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__sun4v__
argument_list|)
operator|)
if|if
condition|(
name|m
operator|->
name|m_next
operator|==
name|NULL
condition|)
endif|#
directive|endif
block|{
operator|*
name|mnew
operator|=
name|m
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
return|return
name|_m_collapse
argument_list|(
name|m
argument_list|,
name|maxbufs
argument_list|,
name|mnew
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|mb_free_ext_fast
parameter_list|(
name|struct
name|mbuf_iovec
modifier|*
name|mi
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|m_free_iovec
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|struct
name|mbuf_vec
modifier|*
name|mv
decl_stmt|;
name|struct
name|mbuf_iovec
modifier|*
name|mi
decl_stmt|;
name|mv
operator|=
name|mtomv
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|mi
operator|=
name|mv
operator|->
name|mv_vec
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|mv
operator|->
name|mv_count
condition|;
name|i
operator|++
operator|,
name|mi
operator|++
control|)
block|{
name|DPRINTF
argument_list|(
literal|"freeing buf=%d of %d\n"
argument_list|,
name|i
argument_list|,
name|mv
operator|->
name|mv_count
argument_list|)
expr_stmt|;
name|mb_free_ext_fast
argument_list|(
name|mi
argument_list|,
name|mi
operator|->
name|mi_type
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|EXT_IOVEC
case|:
name|uma_zfree
argument_list|(
name|zone_miovec
argument_list|,
name|m
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXT_CLIOVEC
case|:
name|cxgb_cache_put
argument_list|(
name|zone_clust
argument_list|,
name|m
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXT_JMPIOVEC
case|:
name|cxgb_cache_put
argument_list|(
name|zone_jumbop
argument_list|,
name|m
argument_list|)
expr_stmt|;
break|break;
default|default:
name|panic
argument_list|(
literal|"unexpected type %d\n"
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|m_freem_iovec
parameter_list|(
name|struct
name|mbuf_iovec
modifier|*
name|mi
parameter_list|)
block|{
name|struct
name|mbuf
modifier|*
name|m
init|=
operator|(
expr|struct
name|mbuf
operator|*
operator|)
name|mi
operator|->
name|mi_base
decl_stmt|;
switch|switch
condition|(
name|mi
operator|->
name|mi_type
condition|)
block|{
case|case
name|EXT_MBUF
case|:
ifdef|#
directive|ifdef
name|PIO_LEN
name|KASSERT
argument_list|(
name|m
operator|->
name|m_pkthdr
operator|.
name|len
operator|>
name|PIO_LEN
argument_list|,
operator|(
literal|"freeing PIO buf"
operator|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|KASSERT
argument_list|(
operator|(
name|mi
operator|->
name|mi_flags
operator|&
name|M_NOFREE
operator|)
operator|==
literal|0
argument_list|,
operator|(
literal|"no free set on mbuf"
operator|)
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|m
operator|->
name|m_next
operator|==
name|NULL
argument_list|,
operator|(
literal|"freeing chain"
operator|)
argument_list|)
expr_stmt|;
name|mbufs_outstanding
operator|--
expr_stmt|;
name|m_free_fast
argument_list|(
name|m
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXT_IOVEC
case|:
case|case
name|EXT_CLIOVEC
case|:
case|case
name|EXT_JMPIOVEC
case|:
name|m
operator|=
operator|(
expr|struct
name|mbuf
operator|*
operator|)
name|mi
operator|->
name|mi_base
expr_stmt|;
name|m_free_iovec
argument_list|(
name|m
argument_list|,
name|mi
operator|->
name|mi_type
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXT_CLUSTER
case|:
case|case
name|EXT_JUMBOP
case|:
case|case
name|EXT_JUMBO9
case|:
case|case
name|EXT_JUMBO16
case|:
case|case
name|EXT_SFBUF
case|:
case|case
name|EXT_NET_DRV
case|:
case|case
name|EXT_MOD_TYPE
case|:
case|case
name|EXT_DISPOSABLE
case|:
case|case
name|EXT_PACKET
case|:
case|case
name|EXT_EXTREF
case|:
name|mb_free_ext_fast
argument_list|(
name|mi
argument_list|,
name|mi
operator|->
name|mi_type
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
name|panic
argument_list|(
literal|"unknown miov type: %d\n"
argument_list|,
name|mi
operator|->
name|mi_type
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|uma_zone_t
name|m_getzonefromtype
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|uma_zone_t
name|zone
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|EXT_MBUF
case|:
name|zone
operator|=
name|zone_mbuf
expr_stmt|;
break|break;
case|case
name|EXT_CLUSTER
case|:
name|zone
operator|=
name|zone_clust
expr_stmt|;
break|break;
if|#
directive|if
name|MJUMPAGESIZE
operator|!=
name|MCLBYTES
case|case
name|EXT_JUMBOP
case|:
name|zone
operator|=
name|zone_jumbop
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|EXT_JUMBO9
case|:
name|zone
operator|=
name|zone_jumbo9
expr_stmt|;
break|break;
case|case
name|EXT_JUMBO16
case|:
name|zone
operator|=
name|zone_jumbo16
expr_stmt|;
break|break;
default|default:
name|panic
argument_list|(
literal|"%s: invalid cluster type %d"
argument_list|,
name|__func__
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|zone
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|m_getsizefromtype
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|int
name|size
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|EXT_MBUF
case|:
name|size
operator|=
name|MSIZE
expr_stmt|;
break|break;
case|case
name|EXT_CLUSTER
case|:
name|size
operator|=
name|MCLBYTES
expr_stmt|;
break|break;
if|#
directive|if
name|MJUMPAGESIZE
operator|!=
name|MCLBYTES
case|case
name|EXT_JUMBOP
case|:
name|size
operator|=
name|MJUMPAGESIZE
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|EXT_JUMBO9
case|:
name|size
operator|=
name|MJUM9BYTES
expr_stmt|;
break|break;
case|case
name|EXT_JUMBO16
case|:
name|size
operator|=
name|MJUM16BYTES
expr_stmt|;
break|break;
default|default:
name|panic
argument_list|(
literal|"%s: unrecognized cluster type %d"
argument_list|,
name|__func__
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|size
operator|)
return|;
block|}
end_function

begin_function_decl
name|void
name|dump_mi
parameter_list|(
name|struct
name|mbuf_iovec
modifier|*
name|mi
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MVEC_H_ */
end_comment

end_unit

