begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  *  * Copyright (c) 2007, Kip Macy kmacy@freebsd.org  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  *  * 2. The name of Kip Macy nor the names of other  *    contributors may be used to endorse or promote products derived from  *    this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  *  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MVEC_H_
end_ifndef

begin_define
define|#
directive|define
name|_MVEC_H_
end_define

begin_define
define|#
directive|define
name|mtomv
parameter_list|(
name|m
parameter_list|)
value|((struct mbuf_vec *)((m)->m_pktdat))
end_define

begin_define
define|#
directive|define
name|M_IOVEC
value|0x100000
end_define

begin_comment
comment|/* mbuf immediate data area is used for cluster ptrs */
end_comment

begin_define
define|#
directive|define
name|EXT_MBUF
value|7
end_define

begin_define
define|#
directive|define
name|MBUF_IOV_TYPE_MASK
value|((1<<3)-1)
end_define

begin_define
define|#
directive|define
name|mbuf_vec_set_type
parameter_list|(
name|mv
parameter_list|,
name|i
parameter_list|,
name|type
parameter_list|)
define|\
value|(mv)->mv_vec[(i)].mi_flags = (((mv)->mv_vec[(i)].mi_flags \& ~MBUF_IOV_TYPE_MASK) | type)
end_define

begin_define
define|#
directive|define
name|mbuf_vec_get_type
parameter_list|(
name|mv
parameter_list|,
name|i
parameter_list|)
define|\
value|((mv)->mv_vec[(i)].mi_flags& MBUF_IOV_TYPE_MASK)
end_define

begin_struct
struct|struct
name|mbuf_iovec
block|{
name|uint16_t
name|mi_flags
decl_stmt|;
comment|/* per-cluster flags          */
name|uint16_t
name|mi_len
decl_stmt|;
comment|/* length of cluster          */
name|uint32_t
name|mi_offset
decl_stmt|;
comment|/* data offsets into cluster  */
name|caddr_t
name|mi_base
decl_stmt|;
comment|/* pointers to cluster        */
specifier|volatile
name|uint32_t
modifier|*
name|mi_refcnt
decl_stmt|;
comment|/* refcnt for cluster*/
ifdef|#
directive|ifdef
name|__i386__
name|void
modifier|*
name|mi_args
decl_stmt|;
comment|/* for sf_buf                 */
endif|#
directive|endif
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MAX_MBUF_IOV
value|((MHLEN-8)/sizeof(struct mbuf_iovec))
end_define

begin_struct
struct|struct
name|mbuf_vec
block|{
name|uint16_t
name|mv_first
decl_stmt|;
comment|/* first valid cluster        */
name|uint16_t
name|mv_count
decl_stmt|;
comment|/* # of clusters              */
name|uint32_t
name|mv_flags
decl_stmt|;
comment|/* flags for iovec            */
name|struct
name|mbuf_iovec
name|mv_vec
index|[
name|MAX_MBUF_IOV
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|int
name|m_gettype
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|int
name|type
decl_stmt|;
switch|switch
condition|(
name|size
condition|)
block|{
case|case
name|MSIZE
case|:
name|type
operator|=
name|EXT_MBUF
expr_stmt|;
break|break;
case|case
name|MCLBYTES
case|:
name|type
operator|=
name|EXT_CLUSTER
expr_stmt|;
break|break;
if|#
directive|if
name|MJUMPAGESIZE
operator|!=
name|MCLBYTES
case|case
name|MJUMPAGESIZE
case|:
name|type
operator|=
name|EXT_JUMBOP
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|MJUM9BYTES
case|:
name|type
operator|=
name|EXT_JUMBO9
expr_stmt|;
break|break;
case|case
name|MJUM16BYTES
case|:
name|type
operator|=
name|EXT_JUMBO16
expr_stmt|;
break|break;
default|default:
name|panic
argument_list|(
literal|"%s: m_getjcl: invalid cluster size"
argument_list|,
name|__func__
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|type
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|m_cljset
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|void
modifier|*
name|cl
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|uma_zone_t
name|zone
decl_stmt|;
name|int
name|size
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|EXT_CLUSTER
case|:
name|size
operator|=
name|MCLBYTES
expr_stmt|;
name|zone
operator|=
name|zone_clust
expr_stmt|;
break|break;
if|#
directive|if
name|MJUMPAGESIZE
operator|!=
name|MCLBYTES
case|case
name|EXT_JUMBOP
case|:
name|size
operator|=
name|MJUMPAGESIZE
expr_stmt|;
name|zone
operator|=
name|zone_jumbop
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|EXT_JUMBO9
case|:
name|size
operator|=
name|MJUM9BYTES
expr_stmt|;
name|zone
operator|=
name|zone_jumbo9
expr_stmt|;
break|break;
case|case
name|EXT_JUMBO16
case|:
name|size
operator|=
name|MJUM16BYTES
expr_stmt|;
name|zone
operator|=
name|zone_jumbo16
expr_stmt|;
break|break;
default|default:
name|panic
argument_list|(
literal|"unknown cluster type"
argument_list|)
expr_stmt|;
break|break;
block|}
name|m
operator|->
name|m_data
operator|=
name|m
operator|->
name|m_ext
operator|.
name|ext_buf
operator|=
name|cl
expr_stmt|;
name|m
operator|->
name|m_ext
operator|.
name|ext_free
operator|=
name|m
operator|->
name|m_ext
operator|.
name|ext_args
operator|=
name|NULL
expr_stmt|;
name|m
operator|->
name|m_ext
operator|.
name|ext_size
operator|=
name|size
expr_stmt|;
name|m
operator|->
name|m_ext
operator|.
name|ext_type
operator|=
name|type
expr_stmt|;
name|m
operator|->
name|m_ext
operator|.
name|ref_cnt
operator|=
name|uma_find_refcnt
argument_list|(
name|zone
argument_list|,
name|cl
argument_list|)
expr_stmt|;
name|m
operator|->
name|m_flags
operator||=
name|M_EXT
expr_stmt|;
block|}
end_function

begin_function_decl
name|int
name|_m_explode
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_m_collapse
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
name|maxbufs
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mb_free_vec
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|m_iovinit
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
block|{
name|struct
name|mbuf_vec
modifier|*
name|mv
init|=
name|mtomv
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|mv
operator|->
name|mv_first
operator|=
name|mv
operator|->
name|mv_count
operator|=
literal|0
expr_stmt|;
name|m
operator|->
name|m_pkthdr
operator|.
name|len
operator|=
name|m
operator|->
name|m_len
operator|=
literal|0
expr_stmt|;
name|m
operator|->
name|m_flags
operator||=
name|M_IOVEC
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|m_iovappend
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|caddr_t
name|cl
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|struct
name|mbuf_vec
modifier|*
name|mv
init|=
name|mtomv
argument_list|(
name|m
argument_list|)
decl_stmt|;
name|struct
name|mbuf_iovec
modifier|*
name|iov
decl_stmt|;
name|int
name|idx
init|=
name|mv
operator|->
name|mv_first
operator|+
name|mv
operator|->
name|mv_count
decl_stmt|;
name|KASSERT
argument_list|(
name|idx
operator|<=
name|MAX_MBUF_IOV
argument_list|,
operator|(
literal|"tried to append too many clusters to mbuf iovec"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|m
operator|->
name|m_flags
operator|&
name|M_EXT
operator|)
operator|!=
literal|0
condition|)
name|panic
argument_list|(
literal|"invalid flags in %s"
argument_list|,
name|__func__
argument_list|)
expr_stmt|;
if|if
condition|(
name|mv
operator|->
name|mv_count
operator|==
literal|0
condition|)
name|m
operator|->
name|m_data
operator|=
call|(
name|caddr_t
call|)
argument_list|(
name|cl
operator|+
name|offset
argument_list|)
expr_stmt|;
name|iov
operator|=
operator|&
name|mv
operator|->
name|mv_vec
index|[
name|idx
index|]
expr_stmt|;
name|iov
operator|->
name|mi_flags
operator|=
name|m_gettype
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|iov
operator|->
name|mi_base
operator|=
name|cl
expr_stmt|;
name|iov
operator|->
name|mi_len
operator|=
name|len
expr_stmt|;
name|iov
operator|->
name|mi_offset
operator|=
name|offset
expr_stmt|;
name|m
operator|->
name|m_pkthdr
operator|.
name|len
operator|+=
name|len
expr_stmt|;
name|m
operator|->
name|m_len
operator|+=
name|len
expr_stmt|;
name|mv
operator|->
name|mv_count
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|m_explode
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
block|{
if|if
condition|(
operator|(
name|m
operator|->
name|m_flags
operator|&
name|M_IOVEC
operator|)
operator|==
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
name|_m_explode
argument_list|(
name|m
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|m_collapse
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|int
name|maxbufs
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
name|mnew
parameter_list|)
block|{
if|#
directive|if
operator|(
operator|!
name|defined
argument_list|(
name|__sparc64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__sun4v__
argument_list|)
operator|)
if|if
condition|(
name|m
operator|->
name|m_next
operator|==
name|NULL
condition|)
endif|#
directive|endif
block|{
operator|*
name|mnew
operator|=
name|m
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
return|return
name|_m_collapse
argument_list|(
name|m
argument_list|,
name|maxbufs
argument_list|,
name|mnew
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mbuf
operator|*
name|m_free_vec
argument_list|(
argument|struct mbuf *m
argument_list|)
block|{ 	struct
name|mbuf
operator|*
name|n
operator|=
name|m
operator|->
name|m_next
block|;
if|if
condition|(
name|m
operator|->
name|m_flags
operator|&
name|M_IOVEC
condition|)
name|mb_free_vec
argument_list|(
name|m
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|m
operator|->
name|m_flags
operator|&
name|M_EXT
condition|)
name|mb_free_ext
argument_list|(
name|m
argument_list|)
expr_stmt|;
else|else
name|uma_zfree
argument_list|(
name|zone_mbuf
argument_list|,
name|m
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|n
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|void
name|m_freem_vec
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
block|{
while|while
condition|(
name|m
operator|!=
name|NULL
condition|)
name|m
operator|=
name|m_free_vec
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uma_zone_t
name|m_getzonefromtype
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|uma_zone_t
name|zone
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|EXT_MBUF
case|:
name|zone
operator|=
name|zone_mbuf
expr_stmt|;
break|break;
case|case
name|EXT_CLUSTER
case|:
name|zone
operator|=
name|zone_clust
expr_stmt|;
break|break;
if|#
directive|if
name|MJUMPAGESIZE
operator|!=
name|MCLBYTES
case|case
name|EXT_JUMBOP
case|:
name|zone
operator|=
name|zone_jumbop
expr_stmt|;
break|break;
endif|#
directive|endif
case|case
name|EXT_JUMBO9
case|:
name|zone
operator|=
name|zone_jumbo9
expr_stmt|;
break|break;
case|case
name|EXT_JUMBO16
case|:
name|zone
operator|=
name|zone_jumbo16
expr_stmt|;
break|break;
ifndef|#
directive|ifndef
name|PACKET_ZONE_DISABLED
case|case
name|EXT_PACKET
case|:
name|zone
operator|=
name|zone_pack
expr_stmt|;
break|break;
endif|#
directive|endif
default|default:
name|panic
argument_list|(
literal|"%s: invalid cluster type %d"
argument_list|,
name|__func__
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|zone
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
operator|(
operator|!
name|defined
argument_list|(
name|__sparc64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__sun4v__
argument_list|)
operator|)
end_if

begin_function_decl
name|int
name|bus_dmamap_load_mvec_sg
parameter_list|(
name|bus_dma_tag_t
name|dmat
parameter_list|,
name|bus_dmamap_t
name|map
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m0
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|segs
parameter_list|,
name|int
modifier|*
name|nsegs
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|bus_dmamap_load_mvec_sg
value|bus_dmamap_load_mbuf_sg
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

