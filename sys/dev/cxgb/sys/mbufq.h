begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  Copyright (c) 2007, Chelsio Inc. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.   2. Neither the name of the Chelsio Corporation nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  $FreeBSD$  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CXGB_MBUFQ_H_
end_ifndef

begin_define
define|#
directive|define
name|CXGB_MBUFQ_H_
end_define

begin_struct
struct|struct
name|mbuf_head
block|{
name|struct
name|mbuf
modifier|*
name|head
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|tail
decl_stmt|;
name|uint32_t
name|qlen
decl_stmt|;
name|uint32_t
name|qsize
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|void
name|mbufq_init
parameter_list|(
name|struct
name|mbuf_head
modifier|*
name|l
parameter_list|)
block|{
name|l
operator|->
name|head
operator|=
name|l
operator|->
name|tail
operator|=
name|NULL
expr_stmt|;
name|l
operator|->
name|qlen
operator|=
name|l
operator|->
name|qsize
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|mbufq_empty
parameter_list|(
name|struct
name|mbuf_head
modifier|*
name|l
parameter_list|)
block|{
return|return
operator|(
name|l
operator|->
name|head
operator|==
name|NULL
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|mbufq_len
parameter_list|(
name|struct
name|mbuf_head
modifier|*
name|l
parameter_list|)
block|{
return|return
operator|(
name|l
operator|->
name|qlen
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|mbufq_size
parameter_list|(
name|struct
name|mbuf_head
modifier|*
name|l
parameter_list|)
block|{
return|return
operator|(
name|l
operator|->
name|qsize
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|mbufq_head_size
parameter_list|(
name|struct
name|mbuf_head
modifier|*
name|l
parameter_list|)
block|{
return|return
operator|(
name|l
operator|->
name|head
condition|?
name|l
operator|->
name|head
operator|->
name|m_pkthdr
operator|.
name|len
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mbufq_tail
parameter_list|(
name|struct
name|mbuf_head
modifier|*
name|l
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
block|{
name|l
operator|->
name|qlen
operator|++
expr_stmt|;
if|if
condition|(
name|l
operator|->
name|head
operator|==
name|NULL
condition|)
name|l
operator|->
name|head
operator|=
name|m
expr_stmt|;
else|else
name|l
operator|->
name|tail
operator|->
name|m_nextpkt
operator|=
name|m
expr_stmt|;
name|l
operator|->
name|tail
operator|=
name|m
expr_stmt|;
name|l
operator|->
name|qsize
operator|+=
name|m
operator|->
name|m_pkthdr
operator|.
name|len
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mbuf
operator|*
name|mbufq_dequeue
argument_list|(
argument|struct mbuf_head *l
argument_list|)
block|{ 	struct
name|mbuf
operator|*
name|m
block|;
name|m
operator|=
name|l
operator|->
name|head
block|;
if|if
condition|(
name|m
condition|)
block|{
if|if
condition|(
name|m
operator|==
name|l
operator|->
name|tail
condition|)
name|l
operator|->
name|head
operator|=
name|l
operator|->
name|tail
operator|=
name|NULL
expr_stmt|;
else|else
name|l
operator|->
name|head
operator|=
name|m
operator|->
name|m_nextpkt
expr_stmt|;
name|m
operator|->
name|m_nextpkt
operator|=
name|NULL
expr_stmt|;
name|l
operator|->
name|qlen
operator|--
expr_stmt|;
name|l
operator|->
name|qsize
operator|-=
name|m
operator|->
name|m_pkthdr
operator|.
name|len
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|(
name|m
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|struct
name|mbuf
modifier|*
name|mbufq_peek
parameter_list|(
specifier|const
name|struct
name|mbuf_head
modifier|*
name|l
parameter_list|)
block|{
return|return
operator|(
name|l
operator|->
name|head
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mbufq_append
parameter_list|(
name|struct
name|mbuf_head
modifier|*
name|a
parameter_list|,
name|struct
name|mbuf_head
modifier|*
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|->
name|tail
condition|)
name|a
operator|->
name|tail
operator|->
name|m_nextpkt
operator|=
name|b
operator|->
name|head
expr_stmt|;
if|if
condition|(
name|b
operator|->
name|tail
condition|)
name|a
operator|->
name|tail
operator|=
name|b
operator|->
name|tail
expr_stmt|;
name|a
operator|->
name|qlen
operator|+=
name|b
operator|->
name|qlen
expr_stmt|;
name|a
operator|->
name|qsize
operator|+=
name|b
operator|->
name|qsize
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CXGB_MBUFQ_H_ */
end_comment

end_unit

