begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  Copyright (c) 2007-2008, Chelsio Inc. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.   2. Neither the name of the Chelsio Corporation nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  $FreeBSD$  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CHELSIO_COMMON_H
end_ifndef

begin_define
define|#
directive|define
name|__CHELSIO_COMMON_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_DEFINED
end_ifdef

begin_include
include|#
directive|include
file|<cxgb_osdep.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<dev/cxgb/cxgb_osdep.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_enum
enum|enum
block|{
name|MAX_FRAME_SIZE
init|=
literal|10240
block|,
comment|/* max MAC frame size, includes header + FCS */
name|EEPROMSIZE
init|=
literal|8192
block|,
comment|/* Serial EEPROM size */
name|SERNUM_LEN
init|=
literal|16
block|,
comment|/* Serial # length */
name|ECNUM_LEN
init|=
literal|16
block|,
comment|/* EC # length */
name|RSS_TABLE_SIZE
init|=
literal|64
block|,
comment|/* size of RSS lookup and mapping tables */
name|TCB_SIZE
init|=
literal|128
block|,
comment|/* TCB size */
name|NMTUS
init|=
literal|16
block|,
comment|/* size of MTU table */
name|NCCTRL_WIN
init|=
literal|32
block|,
comment|/* # of congestion control windows */
name|NTX_SCHED
init|=
literal|8
block|,
comment|/* # of HW Tx scheduling queues */
name|PROTO_SRAM_LINES
init|=
literal|128
block|,
comment|/* size of protocol sram */
name|EXACT_ADDR_FILTERS
init|=
literal|8
block|,
comment|/* # of HW exact match filters */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|MAX_RX_COALESCING_LEN
value|12288U
end_define

begin_enum
enum|enum
block|{
name|PAUSE_RX
init|=
literal|1
operator|<<
literal|0
block|,
name|PAUSE_TX
init|=
literal|1
operator|<<
literal|1
block|,
name|PAUSE_AUTONEG
init|=
literal|1
operator|<<
literal|2
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|SUPPORTED_IRQ
init|=
literal|1
operator|<<
literal|24
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
comment|/* adapter interrupt-maintained statistics */
name|STAT_ULP_CH0_PBL_OOB
block|,
name|STAT_ULP_CH1_PBL_OOB
block|,
name|STAT_PCI_CORR_ECC
block|,
name|IRQ_NUM_STATS
comment|/* keep last */
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|TP_VERSION_MAJOR
init|=
literal|1
block|,
name|TP_VERSION_MINOR
init|=
literal|1
block|,
name|TP_VERSION_MICRO
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|S_TP_VERSION_MAJOR
value|16
end_define

begin_define
define|#
directive|define
name|M_TP_VERSION_MAJOR
value|0xFF
end_define

begin_define
define|#
directive|define
name|V_TP_VERSION_MAJOR
parameter_list|(
name|x
parameter_list|)
value|((x)<< S_TP_VERSION_MAJOR)
end_define

begin_define
define|#
directive|define
name|G_TP_VERSION_MAJOR
parameter_list|(
name|x
parameter_list|)
define|\
value|(((x)>> S_TP_VERSION_MAJOR)& M_TP_VERSION_MAJOR)
end_define

begin_define
define|#
directive|define
name|S_TP_VERSION_MINOR
value|8
end_define

begin_define
define|#
directive|define
name|M_TP_VERSION_MINOR
value|0xFF
end_define

begin_define
define|#
directive|define
name|V_TP_VERSION_MINOR
parameter_list|(
name|x
parameter_list|)
value|((x)<< S_TP_VERSION_MINOR)
end_define

begin_define
define|#
directive|define
name|G_TP_VERSION_MINOR
parameter_list|(
name|x
parameter_list|)
define|\
value|(((x)>> S_TP_VERSION_MINOR)& M_TP_VERSION_MINOR)
end_define

begin_define
define|#
directive|define
name|S_TP_VERSION_MICRO
value|0
end_define

begin_define
define|#
directive|define
name|M_TP_VERSION_MICRO
value|0xFF
end_define

begin_define
define|#
directive|define
name|V_TP_VERSION_MICRO
parameter_list|(
name|x
parameter_list|)
value|((x)<< S_TP_VERSION_MICRO)
end_define

begin_define
define|#
directive|define
name|G_TP_VERSION_MICRO
parameter_list|(
name|x
parameter_list|)
define|\
value|(((x)>> S_TP_VERSION_MICRO)& M_TP_VERSION_MICRO)
end_define

begin_enum
enum|enum
block|{
name|FW_VERSION_MAJOR
init|=
literal|5
block|,
name|FW_VERSION_MINOR
init|=
literal|0
block|,
name|FW_VERSION_MICRO
init|=
literal|0
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|SGE_QSETS
init|=
literal|8
block|,
comment|/* # of SGE Tx/Rx/RspQ sets */
name|SGE_RXQ_PER_SET
init|=
literal|2
block|,
comment|/* # of Rx queues per set */
name|SGE_TXQ_PER_SET
init|=
literal|3
comment|/* # of Tx queues per set */
block|}
enum|;
end_enum

begin_enum
enum|enum
name|sge_context_type
block|{
comment|/* SGE egress context types */
name|SGE_CNTXT_RDMA
init|=
literal|0
block|,
name|SGE_CNTXT_ETH
init|=
literal|2
block|,
name|SGE_CNTXT_OFLD
init|=
literal|4
block|,
name|SGE_CNTXT_CTRL
init|=
literal|5
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|AN_PKT_SIZE
init|=
literal|32
block|,
comment|/* async notification packet size */
name|IMMED_PKT_SIZE
init|=
literal|48
comment|/* packet size for immediate data */
block|}
enum|;
end_enum

begin_struct
struct|struct
name|sg_ent
block|{
comment|/* SGE scatter/gather entry */
name|__be32
name|len
index|[
literal|2
index|]
decl_stmt|;
name|__be64
name|addr
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|SGE_NUM_GENBITS
end_ifndef

begin_comment
comment|/* Must be 1 or 2 */
end_comment

begin_define
define|#
directive|define
name|SGE_NUM_GENBITS
value|2
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|TX_DESC_FLITS
value|16U
end_define

begin_define
define|#
directive|define
name|WR_FLITS
value|(TX_DESC_FLITS + 1 - SGE_NUM_GENBITS)
end_define

begin_define
define|#
directive|define
name|MAX_PHYINTRS
value|4
end_define

begin_struct_decl
struct_decl|struct
name|cphy
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|mdio_ops
block|{
name|int
function_decl|(
modifier|*
name|read
function_decl|)
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
name|int
name|mmd_addr
parameter_list|,
name|int
name|reg_addr
parameter_list|,
name|unsigned
name|int
modifier|*
name|val
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|write
function_decl|)
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
name|int
name|mmd_addr
parameter_list|,
name|int
name|reg_addr
parameter_list|,
name|unsigned
name|int
name|val
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|adapter_info
block|{
name|unsigned
name|char
name|nports0
decl_stmt|;
comment|/* # of ports on channel 0 */
name|unsigned
name|char
name|nports1
decl_stmt|;
comment|/* # of ports on channel 1 */
name|unsigned
name|char
name|phy_base_addr
decl_stmt|;
comment|/* MDIO PHY base address */
name|unsigned
name|char
name|mdien
range|:
literal|1
decl_stmt|;
name|unsigned
name|char
name|mdiinv
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|gpio_out
decl_stmt|;
comment|/* GPIO output settings */
name|unsigned
name|char
name|gpio_intr
index|[
name|MAX_PHYINTRS
index|]
decl_stmt|;
comment|/* GPIO PHY IRQ pins */
name|unsigned
name|long
name|caps
decl_stmt|;
comment|/* adapter capabilities */
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
decl_stmt|;
comment|/* MDIO operations */
specifier|const
name|char
modifier|*
name|desc
decl_stmt|;
comment|/* product description */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mc5_stats
block|{
name|unsigned
name|long
name|parity_err
decl_stmt|;
name|unsigned
name|long
name|active_rgn_full
decl_stmt|;
name|unsigned
name|long
name|nfa_srch_err
decl_stmt|;
name|unsigned
name|long
name|unknown_cmd
decl_stmt|;
name|unsigned
name|long
name|reqq_parity_err
decl_stmt|;
name|unsigned
name|long
name|dispq_parity_err
decl_stmt|;
name|unsigned
name|long
name|del_act_empty
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mc7_stats
block|{
name|unsigned
name|long
name|corr_err
decl_stmt|;
name|unsigned
name|long
name|uncorr_err
decl_stmt|;
name|unsigned
name|long
name|parity_err
decl_stmt|;
name|unsigned
name|long
name|addr_err
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mac_stats
block|{
name|u64
name|tx_octets
decl_stmt|;
comment|/* total # of octets in good frames */
name|u64
name|tx_octets_bad
decl_stmt|;
comment|/* total # of octets in error frames */
name|u64
name|tx_frames
decl_stmt|;
comment|/* all good frames */
name|u64
name|tx_mcast_frames
decl_stmt|;
comment|/* good multicast frames */
name|u64
name|tx_bcast_frames
decl_stmt|;
comment|/* good broadcast frames */
name|u64
name|tx_pause
decl_stmt|;
comment|/* # of transmitted pause frames */
name|u64
name|tx_deferred
decl_stmt|;
comment|/* frames with deferred transmissions */
name|u64
name|tx_late_collisions
decl_stmt|;
comment|/* # of late collisions */
name|u64
name|tx_total_collisions
decl_stmt|;
comment|/* # of total collisions */
name|u64
name|tx_excess_collisions
decl_stmt|;
comment|/* frame errors from excessive collissions */
name|u64
name|tx_underrun
decl_stmt|;
comment|/* # of Tx FIFO underruns */
name|u64
name|tx_len_errs
decl_stmt|;
comment|/* # of Tx length errors */
name|u64
name|tx_mac_internal_errs
decl_stmt|;
comment|/* # of internal MAC errors on Tx */
name|u64
name|tx_excess_deferral
decl_stmt|;
comment|/* # of frames with excessive deferral */
name|u64
name|tx_fcs_errs
decl_stmt|;
comment|/* # of frames with bad FCS */
name|u64
name|tx_frames_64
decl_stmt|;
comment|/* # of Tx frames in a particular range */
name|u64
name|tx_frames_65_127
decl_stmt|;
name|u64
name|tx_frames_128_255
decl_stmt|;
name|u64
name|tx_frames_256_511
decl_stmt|;
name|u64
name|tx_frames_512_1023
decl_stmt|;
name|u64
name|tx_frames_1024_1518
decl_stmt|;
name|u64
name|tx_frames_1519_max
decl_stmt|;
name|u64
name|rx_octets
decl_stmt|;
comment|/* total # of octets in good frames */
name|u64
name|rx_octets_bad
decl_stmt|;
comment|/* total # of octets in error frames */
name|u64
name|rx_frames
decl_stmt|;
comment|/* all good frames */
name|u64
name|rx_mcast_frames
decl_stmt|;
comment|/* good multicast frames */
name|u64
name|rx_bcast_frames
decl_stmt|;
comment|/* good broadcast frames */
name|u64
name|rx_pause
decl_stmt|;
comment|/* # of received pause frames */
name|u64
name|rx_fcs_errs
decl_stmt|;
comment|/* # of received frames with bad FCS */
name|u64
name|rx_align_errs
decl_stmt|;
comment|/* alignment errors */
name|u64
name|rx_symbol_errs
decl_stmt|;
comment|/* symbol errors */
name|u64
name|rx_data_errs
decl_stmt|;
comment|/* data errors */
name|u64
name|rx_sequence_errs
decl_stmt|;
comment|/* sequence errors */
name|u64
name|rx_runt
decl_stmt|;
comment|/* # of runt frames */
name|u64
name|rx_jabber
decl_stmt|;
comment|/* # of jabber frames */
name|u64
name|rx_short
decl_stmt|;
comment|/* # of short frames */
name|u64
name|rx_too_long
decl_stmt|;
comment|/* # of oversized frames */
name|u64
name|rx_mac_internal_errs
decl_stmt|;
comment|/* # of internal MAC errors on Rx */
name|u64
name|rx_frames_64
decl_stmt|;
comment|/* # of Rx frames in a particular range */
name|u64
name|rx_frames_65_127
decl_stmt|;
name|u64
name|rx_frames_128_255
decl_stmt|;
name|u64
name|rx_frames_256_511
decl_stmt|;
name|u64
name|rx_frames_512_1023
decl_stmt|;
name|u64
name|rx_frames_1024_1518
decl_stmt|;
name|u64
name|rx_frames_1519_max
decl_stmt|;
name|u64
name|rx_cong_drops
decl_stmt|;
comment|/* # of Rx drops due to SGE congestion */
name|unsigned
name|long
name|tx_fifo_parity_err
decl_stmt|;
name|unsigned
name|long
name|rx_fifo_parity_err
decl_stmt|;
name|unsigned
name|long
name|tx_fifo_urun
decl_stmt|;
name|unsigned
name|long
name|rx_fifo_ovfl
decl_stmt|;
name|unsigned
name|long
name|serdes_signal_loss
decl_stmt|;
name|unsigned
name|long
name|xaui_pcs_ctc_err
decl_stmt|;
name|unsigned
name|long
name|xaui_pcs_align_change
decl_stmt|;
name|unsigned
name|long
name|num_toggled
decl_stmt|;
comment|/* # times toggled TxEn due to stuck TX */
name|unsigned
name|long
name|num_resets
decl_stmt|;
comment|/* # times reset due to stuck TX */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tp_mib_stats
block|{
name|u32
name|ipInReceive_hi
decl_stmt|;
name|u32
name|ipInReceive_lo
decl_stmt|;
name|u32
name|ipInHdrErrors_hi
decl_stmt|;
name|u32
name|ipInHdrErrors_lo
decl_stmt|;
name|u32
name|ipInAddrErrors_hi
decl_stmt|;
name|u32
name|ipInAddrErrors_lo
decl_stmt|;
name|u32
name|ipInUnknownProtos_hi
decl_stmt|;
name|u32
name|ipInUnknownProtos_lo
decl_stmt|;
name|u32
name|ipInDiscards_hi
decl_stmt|;
name|u32
name|ipInDiscards_lo
decl_stmt|;
name|u32
name|ipInDelivers_hi
decl_stmt|;
name|u32
name|ipInDelivers_lo
decl_stmt|;
name|u32
name|ipOutRequests_hi
decl_stmt|;
name|u32
name|ipOutRequests_lo
decl_stmt|;
name|u32
name|ipOutDiscards_hi
decl_stmt|;
name|u32
name|ipOutDiscards_lo
decl_stmt|;
name|u32
name|ipOutNoRoutes_hi
decl_stmt|;
name|u32
name|ipOutNoRoutes_lo
decl_stmt|;
name|u32
name|ipReasmTimeout
decl_stmt|;
name|u32
name|ipReasmReqds
decl_stmt|;
name|u32
name|ipReasmOKs
decl_stmt|;
name|u32
name|ipReasmFails
decl_stmt|;
name|u32
name|reserved
index|[
literal|8
index|]
decl_stmt|;
name|u32
name|tcpActiveOpens
decl_stmt|;
name|u32
name|tcpPassiveOpens
decl_stmt|;
name|u32
name|tcpAttemptFails
decl_stmt|;
name|u32
name|tcpEstabResets
decl_stmt|;
name|u32
name|tcpOutRsts
decl_stmt|;
name|u32
name|tcpCurrEstab
decl_stmt|;
name|u32
name|tcpInSegs_hi
decl_stmt|;
name|u32
name|tcpInSegs_lo
decl_stmt|;
name|u32
name|tcpOutSegs_hi
decl_stmt|;
name|u32
name|tcpOutSegs_lo
decl_stmt|;
name|u32
name|tcpRetransSeg_hi
decl_stmt|;
name|u32
name|tcpRetransSeg_lo
decl_stmt|;
name|u32
name|tcpInErrs_hi
decl_stmt|;
name|u32
name|tcpInErrs_lo
decl_stmt|;
name|u32
name|tcpRtoMin
decl_stmt|;
name|u32
name|tcpRtoMax
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tp_params
block|{
name|unsigned
name|int
name|nchan
decl_stmt|;
comment|/* # of channels */
name|unsigned
name|int
name|pmrx_size
decl_stmt|;
comment|/* total PMRX capacity */
name|unsigned
name|int
name|pmtx_size
decl_stmt|;
comment|/* total PMTX capacity */
name|unsigned
name|int
name|cm_size
decl_stmt|;
comment|/* total CM capacity */
name|unsigned
name|int
name|chan_rx_size
decl_stmt|;
comment|/* per channel Rx size */
name|unsigned
name|int
name|chan_tx_size
decl_stmt|;
comment|/* per channel Tx size */
name|unsigned
name|int
name|rx_pg_size
decl_stmt|;
comment|/* Rx page size */
name|unsigned
name|int
name|tx_pg_size
decl_stmt|;
comment|/* Tx page size */
name|unsigned
name|int
name|rx_num_pgs
decl_stmt|;
comment|/* # of Rx pages */
name|unsigned
name|int
name|tx_num_pgs
decl_stmt|;
comment|/* # of Tx pages */
name|unsigned
name|int
name|ntimer_qs
decl_stmt|;
comment|/* # of timer queues */
name|unsigned
name|int
name|tre
decl_stmt|;
comment|/* log2 of core clocks per TP tick */
name|unsigned
name|int
name|dack_re
decl_stmt|;
comment|/* DACK timer resolution */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|qset_params
block|{
comment|/* SGE queue set parameters */
name|unsigned
name|int
name|polling
decl_stmt|;
comment|/* polling/interrupt service for rspq */
name|unsigned
name|int
name|lro
decl_stmt|;
comment|/* large receive offload */
name|unsigned
name|int
name|coalesce_usecs
decl_stmt|;
comment|/* irq coalescing timer */
name|unsigned
name|int
name|rspq_size
decl_stmt|;
comment|/* # of entries in response queue */
name|unsigned
name|int
name|fl_size
decl_stmt|;
comment|/* # of entries in regular free list */
name|unsigned
name|int
name|jumbo_size
decl_stmt|;
comment|/* # of entries in jumbo free list */
name|unsigned
name|int
name|txq_size
index|[
name|SGE_TXQ_PER_SET
index|]
decl_stmt|;
comment|/* Tx queue sizes */
name|unsigned
name|int
name|cong_thres
decl_stmt|;
comment|/* FL congestion threshold */
name|unsigned
name|int
name|vector
decl_stmt|;
comment|/* Interrupt (line or vector) number */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sge_params
block|{
name|unsigned
name|int
name|max_pkt_size
decl_stmt|;
comment|/* max offload pkt size */
name|struct
name|qset_params
name|qset
index|[
name|SGE_QSETS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mc5_params
block|{
name|unsigned
name|int
name|mode
decl_stmt|;
comment|/* selects MC5 width */
name|unsigned
name|int
name|nservers
decl_stmt|;
comment|/* size of server region */
name|unsigned
name|int
name|nfilters
decl_stmt|;
comment|/* size of filter region */
name|unsigned
name|int
name|nroutes
decl_stmt|;
comment|/* size of routing region */
block|}
struct|;
end_struct

begin_comment
comment|/* Default MC5 region sizes */
end_comment

begin_enum
enum|enum
block|{
name|DEFAULT_NSERVERS
init|=
literal|512
block|,
name|DEFAULT_NFILTERS
init|=
literal|128
block|}
enum|;
end_enum

begin_comment
comment|/* MC5 modes, these must be non-0 */
end_comment

begin_enum
enum|enum
block|{
name|MC5_MODE_144_BIT
init|=
literal|1
block|,
name|MC5_MODE_72_BIT
init|=
literal|2
block|}
enum|;
end_enum

begin_comment
comment|/* MC5 min active region size */
end_comment

begin_enum
enum|enum
block|{
name|MC5_MIN_TIDS
init|=
literal|16
block|}
enum|;
end_enum

begin_struct
struct|struct
name|vpd_params
block|{
name|unsigned
name|int
name|cclk
decl_stmt|;
name|unsigned
name|int
name|mclk
decl_stmt|;
name|unsigned
name|int
name|uclk
decl_stmt|;
name|unsigned
name|int
name|mdc
decl_stmt|;
name|unsigned
name|int
name|mem_timing
decl_stmt|;
name|u8
name|sn
index|[
name|SERNUM_LEN
operator|+
literal|1
index|]
decl_stmt|;
name|u8
name|ec
index|[
name|ECNUM_LEN
operator|+
literal|1
index|]
decl_stmt|;
name|u8
name|eth_base
index|[
literal|6
index|]
decl_stmt|;
name|u8
name|port_type
index|[
name|MAX_NPORTS
index|]
decl_stmt|;
name|unsigned
name|short
name|xauicfg
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|pci_params
block|{
name|unsigned
name|int
name|vpd_cap_addr
decl_stmt|;
name|unsigned
name|int
name|pcie_cap_addr
decl_stmt|;
name|unsigned
name|short
name|speed
decl_stmt|;
name|unsigned
name|char
name|width
decl_stmt|;
name|unsigned
name|char
name|variant
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|PCI_VARIANT_PCI
block|,
name|PCI_VARIANT_PCIX_MODE1_PARITY
block|,
name|PCI_VARIANT_PCIX_MODE1_ECC
block|,
name|PCI_VARIANT_PCIX_266_MODE2
block|,
name|PCI_VARIANT_PCIE
block|}
enum|;
end_enum

begin_struct
struct|struct
name|adapter_params
block|{
name|struct
name|sge_params
name|sge
decl_stmt|;
name|struct
name|mc5_params
name|mc5
decl_stmt|;
name|struct
name|tp_params
name|tp
decl_stmt|;
name|struct
name|vpd_params
name|vpd
decl_stmt|;
name|struct
name|pci_params
name|pci
decl_stmt|;
specifier|const
name|struct
name|adapter_info
modifier|*
name|info
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_CHELSIO_T3_CORE
name|unsigned
name|short
name|mtus
index|[
name|NMTUS
index|]
decl_stmt|;
name|unsigned
name|short
name|a_wnd
index|[
name|NCCTRL_WIN
index|]
decl_stmt|;
name|unsigned
name|short
name|b_wnd
index|[
name|NCCTRL_WIN
index|]
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|int
name|nports
decl_stmt|;
comment|/* # of ethernet ports */
name|unsigned
name|int
name|chan_map
decl_stmt|;
comment|/* bitmap of in-use Tx channels */
name|unsigned
name|int
name|stats_update_period
decl_stmt|;
comment|/* MAC stats accumulation period */
name|unsigned
name|int
name|linkpoll_period
decl_stmt|;
comment|/* link poll period in 0.1s */
name|unsigned
name|int
name|rev
decl_stmt|;
comment|/* chip revision */
name|unsigned
name|int
name|offload
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
comment|/* chip revisions */
name|T3_REV_A
init|=
literal|0
block|,
name|T3_REV_B
init|=
literal|2
block|,
name|T3_REV_B2
init|=
literal|3
block|,
name|T3_REV_C
init|=
literal|4
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|trace_params
block|{
name|u32
name|sip
decl_stmt|;
name|u32
name|sip_mask
decl_stmt|;
name|u32
name|dip
decl_stmt|;
name|u32
name|dip_mask
decl_stmt|;
name|u16
name|sport
decl_stmt|;
name|u16
name|sport_mask
decl_stmt|;
name|u16
name|dport
decl_stmt|;
name|u16
name|dport_mask
decl_stmt|;
name|u32
name|vlan
range|:
literal|12
decl_stmt|;
name|u32
name|vlan_mask
range|:
literal|12
decl_stmt|;
name|u32
name|intf
range|:
literal|4
decl_stmt|;
name|u32
name|intf_mask
range|:
literal|4
decl_stmt|;
name|u8
name|proto
decl_stmt|;
name|u8
name|proto_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|link_config
block|{
name|unsigned
name|int
name|supported
decl_stmt|;
comment|/* link capabilities */
name|unsigned
name|int
name|advertising
decl_stmt|;
comment|/* advertised capabilities */
name|unsigned
name|short
name|requested_speed
decl_stmt|;
comment|/* speed user has requested */
name|unsigned
name|short
name|speed
decl_stmt|;
comment|/* actual link speed */
name|unsigned
name|char
name|requested_duplex
decl_stmt|;
comment|/* duplex user has requested */
name|unsigned
name|char
name|duplex
decl_stmt|;
comment|/* actual link duplex */
name|unsigned
name|char
name|requested_fc
decl_stmt|;
comment|/* flow control user has requested */
name|unsigned
name|char
name|fc
decl_stmt|;
comment|/* actual link flow control */
name|unsigned
name|char
name|autoneg
decl_stmt|;
comment|/* autonegotiating? */
name|unsigned
name|int
name|link_ok
decl_stmt|;
comment|/* link up? */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SPEED_INVALID
value|0xffff
end_define

begin_define
define|#
directive|define
name|DUPLEX_INVALID
value|0xff
end_define

begin_struct
struct|struct
name|mc5
block|{
name|adapter_t
modifier|*
name|adapter
decl_stmt|;
name|unsigned
name|int
name|tcam_size
decl_stmt|;
name|unsigned
name|char
name|part_type
decl_stmt|;
name|unsigned
name|char
name|parity_enabled
decl_stmt|;
name|unsigned
name|char
name|mode
decl_stmt|;
name|struct
name|mc5_stats
name|stats
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|t3_mc5_size
parameter_list|(
specifier|const
name|struct
name|mc5
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|tcam_size
return|;
block|}
end_function

begin_struct
struct|struct
name|mc7
block|{
name|adapter_t
modifier|*
name|adapter
decl_stmt|;
comment|/* backpointer to adapter */
name|unsigned
name|int
name|size
decl_stmt|;
comment|/* memory size in bytes */
name|unsigned
name|int
name|width
decl_stmt|;
comment|/* MC7 interface width */
name|unsigned
name|int
name|offset
decl_stmt|;
comment|/* register address offset for MC7 instance */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* name of MC7 instance */
name|struct
name|mc7_stats
name|stats
decl_stmt|;
comment|/* MC7 statistics */
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|t3_mc7_size
parameter_list|(
specifier|const
name|struct
name|mc7
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|size
return|;
block|}
end_function

begin_struct
struct|struct
name|cmac
block|{
name|adapter_t
modifier|*
name|adapter
decl_stmt|;
name|unsigned
name|int
name|offset
decl_stmt|;
name|unsigned
name|char
name|nucast
decl_stmt|;
comment|/* # of address filters for unicast MACs */
name|unsigned
name|char
name|multiport
decl_stmt|;
comment|/* multiple ports connected to this MAC */
name|unsigned
name|char
name|ext_port
decl_stmt|;
comment|/* external MAC port */
name|unsigned
name|char
name|promisc_map
decl_stmt|;
comment|/* which external ports are promiscuous */
name|unsigned
name|int
name|tx_tcnt
decl_stmt|;
name|unsigned
name|int
name|tx_xcnt
decl_stmt|;
name|u64
name|tx_mcnt
decl_stmt|;
name|unsigned
name|int
name|rx_xcnt
decl_stmt|;
name|unsigned
name|int
name|rx_ocnt
decl_stmt|;
name|u64
name|rx_mcnt
decl_stmt|;
name|unsigned
name|int
name|toggle_cnt
decl_stmt|;
name|unsigned
name|int
name|txen
decl_stmt|;
name|u64
name|rx_pause
decl_stmt|;
name|struct
name|mac_stats
name|stats
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MAC_DIRECTION_RX
init|=
literal|1
block|,
name|MAC_DIRECTION_TX
init|=
literal|2
block|,
name|MAC_RXFIFO_SIZE
init|=
literal|32768
block|}
enum|;
end_enum

begin_comment
comment|/* IEEE 802.3 specified MDIO devices */
end_comment

begin_enum
enum|enum
block|{
name|MDIO_DEV_PMA_PMD
init|=
literal|1
block|,
name|MDIO_DEV_WIS
init|=
literal|2
block|,
name|MDIO_DEV_PCS
init|=
literal|3
block|,
name|MDIO_DEV_XGXS
init|=
literal|4
block|,
name|MDIO_DEV_ANEG
init|=
literal|7
block|,
name|MDIO_DEV_VEND1
init|=
literal|30
block|,
name|MDIO_DEV_VEND2
init|=
literal|31
block|}
enum|;
end_enum

begin_comment
comment|/* LASI control and status registers */
end_comment

begin_enum
enum|enum
block|{
name|RX_ALARM_CTRL
init|=
literal|0x9000
block|,
name|TX_ALARM_CTRL
init|=
literal|0x9001
block|,
name|LASI_CTRL
init|=
literal|0x9002
block|,
name|RX_ALARM_STAT
init|=
literal|0x9003
block|,
name|TX_ALARM_STAT
init|=
literal|0x9004
block|,
name|LASI_STAT
init|=
literal|0x9005
block|}
enum|;
end_enum

begin_comment
comment|/* PHY loopback direction */
end_comment

begin_enum
enum|enum
block|{
name|PHY_LOOPBACK_TX
init|=
literal|1
block|,
name|PHY_LOOPBACK_RX
init|=
literal|2
block|}
enum|;
end_enum

begin_comment
comment|/* PHY interrupt types */
end_comment

begin_enum
enum|enum
block|{
name|cphy_cause_link_change
init|=
literal|1
block|,
name|cphy_cause_fifo_error
init|=
literal|2
block|,
name|cphy_cause_module_change
init|=
literal|4
block|, }
enum|;
end_enum

begin_comment
comment|/* PHY module types */
end_comment

begin_enum
enum|enum
block|{
name|phy_modtype_none
block|,
name|phy_modtype_sr
block|,
name|phy_modtype_lr
block|,
name|phy_modtype_lrm
block|,
name|phy_modtype_twinax
block|,
name|phy_modtype_twinax_long
block|,
name|phy_modtype_unknown
block|}
enum|;
end_enum

begin_comment
comment|/* PHY operations */
end_comment

begin_struct
struct|struct
name|cphy_ops
block|{
name|int
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
name|wait
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|intr_enable
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|intr_disable
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|intr_clear
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|intr_handler
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|autoneg_enable
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|autoneg_restart
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|advertise
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|unsigned
name|int
name|advertise_map
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_loopback
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
name|mmd
parameter_list|,
name|int
name|dir
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_speed_duplex
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
name|speed
parameter_list|,
name|int
name|duplex
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_link_status
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
modifier|*
name|link_ok
parameter_list|,
name|int
modifier|*
name|speed
parameter_list|,
name|int
modifier|*
name|duplex
parameter_list|,
name|int
modifier|*
name|fc
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|power_down
function_decl|)
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/* A PHY instance */
end_comment

begin_struct
struct|struct
name|cphy
block|{
name|u8
name|addr
decl_stmt|;
comment|/* PHY address */
name|u8
name|modtype
decl_stmt|;
comment|/* PHY module type */
name|short
name|priv
decl_stmt|;
comment|/* scratch pad */
name|unsigned
name|int
name|caps
decl_stmt|;
comment|/* PHY capabilities */
name|adapter_t
modifier|*
name|adapter
decl_stmt|;
comment|/* associated adapter */
specifier|const
name|char
modifier|*
name|desc
decl_stmt|;
comment|/* PHY description */
name|unsigned
name|long
name|fifo_errors
decl_stmt|;
comment|/* FIFO over/under-flows */
specifier|const
name|struct
name|cphy_ops
modifier|*
name|ops
decl_stmt|;
comment|/* PHY operations */
name|int
function_decl|(
modifier|*
name|mdio_read
function_decl|)
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
name|int
name|mmd_addr
parameter_list|,
name|int
name|reg_addr
parameter_list|,
name|unsigned
name|int
modifier|*
name|val
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mdio_write
function_decl|)
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
name|int
name|mmd_addr
parameter_list|,
name|int
name|reg_addr
parameter_list|,
name|unsigned
name|int
name|val
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/* Convenience MDIO read/write wrappers */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|mdio_read
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
name|mmd
parameter_list|,
name|int
name|reg
parameter_list|,
name|unsigned
name|int
modifier|*
name|valp
parameter_list|)
block|{
return|return
name|phy
operator|->
name|mdio_read
argument_list|(
name|phy
operator|->
name|adapter
argument_list|,
name|phy
operator|->
name|addr
argument_list|,
name|mmd
argument_list|,
name|reg
argument_list|,
name|valp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mdio_write
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
name|mmd
parameter_list|,
name|int
name|reg
parameter_list|,
name|unsigned
name|int
name|val
parameter_list|)
block|{
return|return
name|phy
operator|->
name|mdio_write
argument_list|(
name|phy
operator|->
name|adapter
argument_list|,
name|phy
operator|->
name|addr
argument_list|,
name|mmd
argument_list|,
name|reg
argument_list|,
name|val
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Convenience initializer */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|cphy_init
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
name|struct
name|cphy_ops
modifier|*
name|phy_ops
parameter_list|,
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
parameter_list|,
name|unsigned
name|int
name|caps
parameter_list|,
specifier|const
name|char
modifier|*
name|desc
parameter_list|)
block|{
name|phy
operator|->
name|addr
operator|=
operator|(
name|u8
operator|)
name|phy_addr
expr_stmt|;
name|phy
operator|->
name|caps
operator|=
name|caps
expr_stmt|;
name|phy
operator|->
name|adapter
operator|=
name|adapter
expr_stmt|;
name|phy
operator|->
name|desc
operator|=
name|desc
expr_stmt|;
name|phy
operator|->
name|ops
operator|=
name|phy_ops
expr_stmt|;
if|if
condition|(
name|mdio_ops
condition|)
block|{
name|phy
operator|->
name|mdio_read
operator|=
name|mdio_ops
operator|->
name|read
expr_stmt|;
name|phy
operator|->
name|mdio_write
operator|=
name|mdio_ops
operator|->
name|write
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* Accumulate MAC statistics every 180 seconds.  For 1G we multiply by 10. */
end_comment

begin_define
define|#
directive|define
name|MAC_STATS_ACCUM_SECS
value|180
end_define

begin_comment
comment|/* The external MAC needs accumulation every 30 seconds */
end_comment

begin_define
define|#
directive|define
name|VSC_STATS_ACCUM_SECS
value|30
end_define

begin_define
define|#
directive|define
name|XGM_REG
parameter_list|(
name|reg_addr
parameter_list|,
name|idx
parameter_list|)
define|\
value|((reg_addr) + (idx) * (XGMAC0_1_BASE_ADDR - XGMAC0_0_BASE_ADDR))
end_define

begin_struct
struct|struct
name|addr_val_pair
block|{
name|unsigned
name|int
name|reg_addr
decl_stmt|;
name|unsigned
name|int
name|val
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_DEFINED
end_ifdef

begin_include
include|#
directive|include
file|<cxgb_adapter.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<dev/cxgb/cxgb_adapter.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PCI_VENDOR_ID_CHELSIO
end_ifndef

begin_define
define|#
directive|define
name|PCI_VENDOR_ID_CHELSIO
value|0x1425
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|for_each_port
parameter_list|(
name|adapter
parameter_list|,
name|iter
parameter_list|)
define|\
value|for (iter = 0; iter< (adapter)->params.nports; ++iter)
end_define

begin_define
define|#
directive|define
name|adapter_info
parameter_list|(
name|adap
parameter_list|)
value|((adap)->params.info)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|uses_xaui
parameter_list|(
specifier|const
name|adapter_t
modifier|*
name|adap
parameter_list|)
block|{
return|return
name|adapter_info
argument_list|(
name|adap
argument_list|)
operator|->
name|caps
operator|&
name|SUPPORTED_AUI
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|is_10G
parameter_list|(
specifier|const
name|adapter_t
modifier|*
name|adap
parameter_list|)
block|{
return|return
name|adapter_info
argument_list|(
name|adap
argument_list|)
operator|->
name|caps
operator|&
name|SUPPORTED_10000baseT_Full
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|is_offload
parameter_list|(
specifier|const
name|adapter_t
modifier|*
name|adap
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_CHELSIO_T3_CORE
argument_list|)
return|return
name|adap
operator|->
name|params
operator|.
name|offload
return|;
else|#
directive|else
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|core_ticks_per_usec
parameter_list|(
specifier|const
name|adapter_t
modifier|*
name|adap
parameter_list|)
block|{
return|return
name|adap
operator|->
name|params
operator|.
name|vpd
operator|.
name|cclk
operator|/
literal|1000
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|dack_ticks_to_usec
parameter_list|(
specifier|const
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|ticks
parameter_list|)
block|{
return|return
operator|(
name|ticks
operator|<<
name|adap
operator|->
name|params
operator|.
name|tp
operator|.
name|dack_re
operator|)
operator|/
name|core_ticks_per_usec
argument_list|(
name|adap
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|is_pcie
parameter_list|(
specifier|const
name|adapter_t
modifier|*
name|adap
parameter_list|)
block|{
return|return
name|adap
operator|->
name|params
operator|.
name|pci
operator|.
name|variant
operator|==
name|PCI_VARIANT_PCIE
return|;
block|}
end_function

begin_function_decl
name|void
name|t3_set_reg_field
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|addr
parameter_list|,
name|u32
name|mask
parameter_list|,
name|u32
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_write_regs
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
specifier|const
name|struct
name|addr_val_pair
modifier|*
name|p
parameter_list|,
name|int
name|n
parameter_list|,
name|unsigned
name|int
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_wait_op_done_val
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|reg
parameter_list|,
name|u32
name|mask
parameter_list|,
name|int
name|polarity
parameter_list|,
name|int
name|attempts
parameter_list|,
name|int
name|delay
parameter_list|,
name|u32
modifier|*
name|valp
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|t3_wait_op_done
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|reg
parameter_list|,
name|u32
name|mask
parameter_list|,
name|int
name|polarity
parameter_list|,
name|int
name|attempts
parameter_list|,
name|int
name|delay
parameter_list|)
block|{
return|return
name|t3_wait_op_done_val
argument_list|(
name|adapter
argument_list|,
name|reg
argument_list|,
name|mask
argument_list|,
name|polarity
argument_list|,
name|attempts
argument_list|,
name|delay
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|int
name|t3_mdio_change_bits
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
name|mmd
parameter_list|,
name|int
name|reg
parameter_list|,
name|unsigned
name|int
name|clear
parameter_list|,
name|unsigned
name|int
name|set
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_phy_reset
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
name|mmd
parameter_list|,
name|int
name|wait
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_phy_advertise
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|unsigned
name|int
name|advert
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_phy_advertise_fiber
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|unsigned
name|int
name|advert
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_set_phy_speed_duplex
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|int
name|speed
parameter_list|,
name|int
name|duplex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_phy_lasi_intr_enable
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_phy_lasi_intr_disable
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_phy_lasi_intr_clear
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_phy_lasi_intr_handler
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_intr_enable
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_intr_disable
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_intr_clear
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_port_intr_enable
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_port_intr_disable
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_port_intr_clear
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_slow_intr_handler
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_phy_intr_handler
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_link_changed
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|port_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_link_start
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|struct
name|cmac
modifier|*
name|mac
parameter_list|,
name|struct
name|link_config
modifier|*
name|lc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|adapter_info
modifier|*
name|t3_get_adapter_info
parameter_list|(
name|unsigned
name|int
name|board_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_seeprom_read
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|u32
name|addr
parameter_list|,
name|u32
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_seeprom_write
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|u32
name|addr
parameter_list|,
name|u32
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_seeprom_wp
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_read_flash
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|addr
parameter_list|,
name|unsigned
name|int
name|nwords
parameter_list|,
name|u32
modifier|*
name|data
parameter_list|,
name|int
name|byte_oriented
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_get_tp_version
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|u32
modifier|*
name|vers
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_check_tpsram_version
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
modifier|*
name|must_load
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_check_tpsram
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
specifier|const
name|u8
modifier|*
name|tp_ram
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_load_fw
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
specifier|const
name|u8
modifier|*
name|fw_data
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_get_fw_version
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|u32
modifier|*
name|vers
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_check_fw_version
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
modifier|*
name|must_load
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_load_boot
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|u8
modifier|*
name|fw_data
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_init_hw
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|u32
name|fw_params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mac_prep
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|early_hw_init
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
specifier|const
name|struct
name|adapter_info
modifier|*
name|ai
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_prep_adapter
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
specifier|const
name|struct
name|adapter_info
modifier|*
name|ai
parameter_list|,
name|int
name|reset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_reinit_adapter
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_led_ready
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_fatal_err
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_set_vlan_accel
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|ports
parameter_list|,
name|int
name|on
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_enable_filters
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_tp_set_offload_mode
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_config_rss
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|rss_config
parameter_list|,
specifier|const
name|u8
modifier|*
name|cpus
parameter_list|,
specifier|const
name|u16
modifier|*
name|rspq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_read_rss
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|u8
modifier|*
name|lkup
parameter_list|,
name|u16
modifier|*
name|map
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_set_proto_sram
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mps_set_active_ports
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|port_mask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_port_failover
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_failover_done
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_failover_clear
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_cim_ctl_blk_read
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|addr
parameter_list|,
name|unsigned
name|int
name|n
parameter_list|,
name|unsigned
name|int
modifier|*
name|valp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mc7_bd_read
parameter_list|(
name|struct
name|mc7
modifier|*
name|mc7
parameter_list|,
name|unsigned
name|int
name|start
parameter_list|,
name|unsigned
name|int
name|n
parameter_list|,
name|u64
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mac_reset
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3b_pcs_reset
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mac_enable
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|,
name|int
name|which
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mac_disable
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|,
name|int
name|which
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mac_set_mtu
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|,
name|unsigned
name|int
name|mtu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mac_set_rx_mode
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|,
name|struct
name|t3_rx_mode
modifier|*
name|rm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mac_set_address
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|,
name|unsigned
name|int
name|idx
parameter_list|,
name|u8
name|addr
index|[
literal|6
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mac_set_num_ucast
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|,
name|unsigned
name|char
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|mac_stats
modifier|*
name|t3_mac_update_stats
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mac_set_speed_duplex_fc
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|,
name|int
name|speed
parameter_list|,
name|int
name|duplex
parameter_list|,
name|int
name|fc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3b2_mac_watchdog_task
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_mc5_prep
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|struct
name|mc5
modifier|*
name|mc5
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mc5_init
parameter_list|(
name|struct
name|mc5
modifier|*
name|mc5
parameter_list|,
name|unsigned
name|int
name|nservers
parameter_list|,
name|unsigned
name|int
name|nfilters
parameter_list|,
name|unsigned
name|int
name|nroutes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_mc5_intr_handler
parameter_list|(
name|struct
name|mc5
modifier|*
name|mc5
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_read_mc5_range
parameter_list|(
specifier|const
name|struct
name|mc5
modifier|*
name|mc5
parameter_list|,
name|unsigned
name|int
name|start
parameter_list|,
name|unsigned
name|int
name|n
parameter_list|,
name|u32
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_CHELSIO_T3_CORE
end_ifdef

begin_function_decl
name|int
name|t3_tp_set_coalescing_size
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|int
name|psh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_tp_set_max_rxsize
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_tp_get_mib_stats
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|struct
name|tp_mib_stats
modifier|*
name|tps
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_load_mtus
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|short
name|mtus
index|[
name|NMTUS
index|]
parameter_list|,
name|unsigned
name|short
name|alpha
index|[
name|NCCTRL_WIN
index|]
parameter_list|,
name|unsigned
name|short
name|beta
index|[
name|NCCTRL_WIN
index|]
parameter_list|,
name|unsigned
name|short
name|mtu_cap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_read_hw_mtus
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|short
name|mtus
index|[
name|NMTUS
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_get_cong_cntl_tab
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|short
name|incr
index|[
name|NMTUS
index|]
index|[
name|NCCTRL_WIN
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_config_trace_filter
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
specifier|const
name|struct
name|trace_params
modifier|*
name|tp
parameter_list|,
name|int
name|filter_index
parameter_list|,
name|int
name|invert
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_config_sched
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|kbps
parameter_list|,
name|int
name|sched
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_set_sched_ipg
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|int
name|sched
parameter_list|,
name|unsigned
name|int
name|ipg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_get_tx_sched
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|sched
parameter_list|,
name|unsigned
name|int
modifier|*
name|kbps
parameter_list|,
name|unsigned
name|int
modifier|*
name|ipg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_read_pace_tbl
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|pace_vals
index|[
name|NTX_SCHED
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_set_pace_tbl
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
modifier|*
name|pace_vals
parameter_list|,
name|unsigned
name|int
name|start
parameter_list|,
name|unsigned
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|t3_sge_prep
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|struct
name|sge_params
modifier|*
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_sge_init
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|struct
name|sge_params
modifier|*
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_init_ecntxt
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|int
name|gts_enable
parameter_list|,
name|enum
name|sge_context_type
name|type
parameter_list|,
name|int
name|respq
parameter_list|,
name|u64
name|base_addr
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|unsigned
name|int
name|token
parameter_list|,
name|int
name|gen
parameter_list|,
name|unsigned
name|int
name|cidx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_init_flcntxt
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|int
name|gts_enable
parameter_list|,
name|u64
name|base_addr
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|unsigned
name|int
name|esize
parameter_list|,
name|unsigned
name|int
name|cong_thres
parameter_list|,
name|int
name|gen
parameter_list|,
name|unsigned
name|int
name|cidx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_init_rspcntxt
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|int
name|irq_vec_idx
parameter_list|,
name|u64
name|base_addr
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|unsigned
name|int
name|fl_thres
parameter_list|,
name|int
name|gen
parameter_list|,
name|unsigned
name|int
name|cidx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_init_cqcntxt
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|u64
name|base_addr
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|,
name|int
name|rspq
parameter_list|,
name|int
name|ovfl_mode
parameter_list|,
name|unsigned
name|int
name|credits
parameter_list|,
name|unsigned
name|int
name|credit_thres
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_enable_ecntxt
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_disable_fl
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_disable_rspcntxt
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_disable_cqcntxt
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_read_ecntxt
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|u32
name|data
index|[
literal|4
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_read_fl
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|u32
name|data
index|[
literal|4
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_read_cq
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|u32
name|data
index|[
literal|4
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_read_rspq
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|u32
name|data
index|[
literal|4
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_cqcntxt_op
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|,
name|unsigned
name|int
name|op
parameter_list|,
name|unsigned
name|int
name|credits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_elmr_blk_write
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|int
name|start
parameter_list|,
specifier|const
name|u32
modifier|*
name|vals
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_elmr_blk_read
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|int
name|start
parameter_list|,
name|u32
modifier|*
name|vals
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_vsc7323_init
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|int
name|nports
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_vsc7323_set_speed_fc
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|int
name|speed
parameter_list|,
name|int
name|fc
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_vsc7323_set_mtu
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|unsigned
name|int
name|mtu
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_vsc7323_set_addr
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|u8
name|addr
index|[
literal|6
index|]
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_vsc7323_enable
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|which
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_vsc7323_disable
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|which
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|mac_stats
modifier|*
name|t3_vsc7323_update_stats
parameter_list|(
name|struct
name|cmac
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mv88e1xxx_phy_prep
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_vsc8211_phy_prep
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_ael1002_phy_prep
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_ael1006_phy_prep
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_ael2005_phy_prep
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_qt2045_phy_prep
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_tn1010_phy_prep
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_xaui_direct_phy_prep
parameter_list|(
name|struct
name|cphy
modifier|*
name|phy
parameter_list|,
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|phy_addr
parameter_list|,
specifier|const
name|struct
name|mdio_ops
modifier|*
name|mdio_ops
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CHELSIO_COMMON_H */
end_comment

end_unit

