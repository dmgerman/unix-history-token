begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  Copyright (c) 2007-2008, Chelsio Inc. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.   2. Neither the name of the Chelsio Corporation nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   $FreeBSD$  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CXGB_ADAPTER_H_
end_ifndef

begin_define
define|#
directive|define
name|_CXGB_ADAPTER_H_
end_define

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/sx.h>
end_include

begin_include
include|#
directive|include
file|<sys/rman.h>
end_include

begin_include
include|#
directive|include
file|<sys/mbuf.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/sockio.h>
end_include

begin_include
include|#
directive|include
file|<sys/condvar.h>
end_include

begin_include
include|#
directive|include
file|<net/ethernet.h>
end_include

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_include
include|#
directive|include
file|<net/if_media.h>
end_include

begin_include
include|#
directive|include
file|<net/if_dl.h>
end_include

begin_include
include|#
directive|include
file|<netinet/tcp_lro.h>
end_include

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/resource.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus_dma.h>
end_include

begin_include
include|#
directive|include
file|<dev/pci/pcireg.h>
end_include

begin_include
include|#
directive|include
file|<dev/pci/pcivar.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_DEFINED
end_ifdef

begin_include
include|#
directive|include
file|<cxgb_osdep.h>
end_include

begin_include
include|#
directive|include
file|<t3cdev.h>
end_include

begin_include
include|#
directive|include
file|<ulp/toecore/cxgb_toedev.h>
end_include

begin_include
include|#
directive|include
file|<sys/mbufq.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<dev/cxgb/cxgb_osdep.h>
end_include

begin_include
include|#
directive|include
file|<dev/cxgb/t3cdev.h>
end_include

begin_include
include|#
directive|include
file|<dev/cxgb/sys/mbufq.h>
end_include

begin_include
include|#
directive|include
file|<dev/cxgb/ulp/toecore/cxgb_toedev.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|USE_SX
end_define

begin_struct_decl
struct_decl|struct
name|adapter
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|sge_qset
struct_decl|;
end_struct_decl

begin_decl_stmt
specifier|extern
name|int
name|cxgb_debug
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG_LOCKING
end_ifdef

begin_define
define|#
directive|define
name|MTX_INIT
parameter_list|(
name|lock
parameter_list|,
name|lockname
parameter_list|,
name|class
parameter_list|,
name|flags
parameter_list|)
define|\
value|do { \ 		printf("initializing %s at %s:%d\n", lockname, __FILE__, __LINE__); \ 		mtx_init((lock), lockname, class, flags);		\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|MTX_DESTROY
parameter_list|(
name|lock
parameter_list|)
define|\
value|do { \ 		printf("destroying %s at %s:%d\n", (lock)->lock_object.lo_name, __FILE__, __LINE__); \ 		mtx_destroy((lock));					\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|SX_INIT
parameter_list|(
name|lock
parameter_list|,
name|lockname
parameter_list|)
define|\
value|do { \ 		printf("initializing %s at %s:%d\n", lockname, __FILE__, __LINE__); \ 		sx_init((lock), lockname);		\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|SX_DESTROY
parameter_list|(
name|lock
parameter_list|)
define|\
value|do { \ 		printf("destroying %s at %s:%d\n", (lock)->lock_object.lo_name, __FILE__, __LINE__); \ 		sx_destroy((lock));					\ 	} while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|MTX_INIT
value|mtx_init
end_define

begin_define
define|#
directive|define
name|MTX_DESTROY
value|mtx_destroy
end_define

begin_define
define|#
directive|define
name|SX_INIT
value|sx_init
end_define

begin_define
define|#
directive|define
name|SX_DESTROY
value|sx_destroy
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|port_info
block|{
name|struct
name|adapter
modifier|*
name|adapter
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
decl_stmt|;
name|int
name|if_flags
decl_stmt|;
specifier|const
name|struct
name|port_type_info
modifier|*
name|port_type
decl_stmt|;
name|struct
name|cphy
name|phy
decl_stmt|;
name|struct
name|cmac
name|mac
decl_stmt|;
name|struct
name|link_config
name|link_config
decl_stmt|;
name|struct
name|ifmedia
name|media
decl_stmt|;
ifdef|#
directive|ifdef
name|USE_SX
name|struct
name|sx
name|lock
decl_stmt|;
else|#
directive|else
name|struct
name|mtx
name|lock
decl_stmt|;
endif|#
directive|endif
name|uint8_t
name|port_id
decl_stmt|;
name|uint8_t
name|tx_chan
decl_stmt|;
name|uint8_t
name|txpkt_intf
decl_stmt|;
name|uint8_t
name|first_qset
decl_stmt|;
name|uint32_t
name|nqsets
decl_stmt|;
name|uint8_t
name|hw_addr
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|struct
name|task
name|timer_reclaim_task
decl_stmt|;
name|struct
name|cdev
modifier|*
name|port_cdev
decl_stmt|;
define|#
directive|define
name|PORT_LOCK_NAME_LEN
value|32
define|#
directive|define
name|PORT_NAME_LEN
value|32
name|char
name|lockbuf
index|[
name|PORT_LOCK_NAME_LEN
index|]
decl_stmt|;
name|char
name|namebuf
index|[
name|PORT_NAME_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
comment|/* adapter flags */
name|FULL_INIT_DONE
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|USING_MSI
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|USING_MSIX
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|QUEUES_BOUND
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|FW_UPTODATE
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
name|TPS_UPTODATE
init|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|,
name|CXGB_SHUTDOWN
init|=
operator|(
literal|1
operator|<<
literal|6
operator|)
block|,
name|CXGB_OFLD_INIT
init|=
operator|(
literal|1
operator|<<
literal|7
operator|)
block|,
name|TP_PARITY_INIT
init|=
operator|(
literal|1
operator|<<
literal|8
operator|)
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|FL_Q_SIZE
value|4096
end_define

begin_define
define|#
directive|define
name|JUMBO_Q_SIZE
value|1024
end_define

begin_define
define|#
directive|define
name|RSPQ_Q_SIZE
value|1024
end_define

begin_define
define|#
directive|define
name|TX_ETH_Q_SIZE
value|1024
end_define

begin_enum
enum|enum
block|{
name|TXQ_ETH
init|=
literal|0
block|,
name|TXQ_OFLD
init|=
literal|1
block|,
name|TXQ_CTRL
init|=
literal|2
block|, }
enum|;
end_enum

begin_comment
comment|/*   * work request size in bytes  */
end_comment

begin_define
define|#
directive|define
name|WR_LEN
value|(WR_FLITS * 8)
end_define

begin_define
define|#
directive|define
name|PIO_LEN
value|(WR_LEN - sizeof(struct cpl_tx_pkt_lso))
end_define

begin_struct
struct|struct
name|lro_state
block|{
name|unsigned
name|short
name|enabled
decl_stmt|;
name|struct
name|lro_ctrl
name|ctrl
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RX_BUNDLE_SIZE
value|8
end_define

begin_struct_decl
struct_decl|struct
name|rsp_desc
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|sge_rspq
block|{
name|uint32_t
name|credits
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|uint32_t
name|cidx
decl_stmt|;
name|uint32_t
name|gen
decl_stmt|;
name|uint32_t
name|polling
decl_stmt|;
name|uint32_t
name|holdoff_tmr
decl_stmt|;
name|uint32_t
name|next_holdoff
decl_stmt|;
name|uint32_t
name|imm_data
decl_stmt|;
name|uint32_t
name|async_notif
decl_stmt|;
name|uint32_t
name|cntxt_id
decl_stmt|;
name|uint32_t
name|offload_pkts
decl_stmt|;
name|uint32_t
name|offload_bundles
decl_stmt|;
name|uint32_t
name|pure_rsps
decl_stmt|;
name|uint32_t
name|unhandled_irqs
decl_stmt|;
name|bus_addr_t
name|phys_addr
decl_stmt|;
name|bus_dma_tag_t
name|desc_tag
decl_stmt|;
name|bus_dmamap_t
name|desc_map
decl_stmt|;
name|struct
name|t3_mbuf_hdr
name|rspq_mh
decl_stmt|;
name|struct
name|rsp_desc
modifier|*
name|desc
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
define|#
directive|define
name|RSPQ_NAME_LEN
value|32
name|char
name|lockbuf
index|[
name|RSPQ_NAME_LEN
index|]
decl_stmt|;
name|uint32_t
name|rspq_dump_start
decl_stmt|;
name|uint32_t
name|rspq_dump_count
decl_stmt|;
block|}
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|DISABLE_MBUF_IOVEC
end_ifndef

begin_define
define|#
directive|define
name|rspq_mbuf
value|rspq_mh.mh_head
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct_decl
struct_decl|struct
name|rx_desc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|rx_sw_desc
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|sge_fl
block|{
name|uint32_t
name|buf_size
decl_stmt|;
name|uint32_t
name|credits
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|uint32_t
name|cidx
decl_stmt|;
name|uint32_t
name|pidx
decl_stmt|;
name|uint32_t
name|gen
decl_stmt|;
name|bus_addr_t
name|phys_addr
decl_stmt|;
name|uint32_t
name|cntxt_id
decl_stmt|;
name|uint64_t
name|empty
decl_stmt|;
name|bus_dma_tag_t
name|desc_tag
decl_stmt|;
name|bus_dmamap_t
name|desc_map
decl_stmt|;
name|bus_dma_tag_t
name|entry_tag
decl_stmt|;
name|uma_zone_t
name|zone
decl_stmt|;
name|struct
name|rx_desc
modifier|*
name|desc
decl_stmt|;
name|struct
name|rx_sw_desc
modifier|*
name|sdesc
decl_stmt|;
name|int
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|tx_desc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|tx_sw_desc
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|TXQ_TRANSMITTING
value|0x1
end_define

begin_struct
struct|struct
name|sge_txq
block|{
name|uint64_t
name|flags
decl_stmt|;
name|uint32_t
name|in_use
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|uint32_t
name|processed
decl_stmt|;
name|uint32_t
name|cleaned
decl_stmt|;
name|uint32_t
name|stop_thres
decl_stmt|;
name|uint32_t
name|cidx
decl_stmt|;
name|uint32_t
name|pidx
decl_stmt|;
name|uint32_t
name|gen
decl_stmt|;
name|uint32_t
name|unacked
decl_stmt|;
name|struct
name|tx_desc
modifier|*
name|desc
decl_stmt|;
name|struct
name|tx_sw_desc
modifier|*
name|sdesc
decl_stmt|;
name|uint32_t
name|token
decl_stmt|;
name|bus_addr_t
name|phys_addr
decl_stmt|;
name|struct
name|task
name|qresume_task
decl_stmt|;
name|struct
name|task
name|qreclaim_task
decl_stmt|;
name|struct
name|port_info
modifier|*
name|port
decl_stmt|;
name|uint32_t
name|cntxt_id
decl_stmt|;
name|uint64_t
name|stops
decl_stmt|;
name|uint64_t
name|restarts
decl_stmt|;
name|bus_dma_tag_t
name|desc_tag
decl_stmt|;
name|bus_dmamap_t
name|desc_map
decl_stmt|;
name|bus_dma_tag_t
name|entry_tag
decl_stmt|;
name|struct
name|mbuf_head
name|sendq
decl_stmt|;
comment|/* 	 * cleanq should really be an buf_ring to avoid extra 	 * mbuf touches 	 */
name|struct
name|mbuf_head
name|cleanq
decl_stmt|;
name|struct
name|buf_ring
name|txq_mr
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|immpkt
decl_stmt|;
name|uint32_t
name|txq_drops
decl_stmt|;
name|uint32_t
name|txq_skipped
decl_stmt|;
name|uint32_t
name|txq_coalesced
decl_stmt|;
name|uint32_t
name|txq_enqueued
decl_stmt|;
name|uint32_t
name|txq_dump_start
decl_stmt|;
name|uint32_t
name|txq_dump_count
decl_stmt|;
name|unsigned
name|long
name|txq_frees
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
name|struct
name|sg_ent
name|txq_sgl
index|[
name|TX_MAX_SEGS
operator|/
literal|2
operator|+
literal|1
index|]
decl_stmt|;
define|#
directive|define
name|TXQ_NAME_LEN
value|32
name|char
name|lockbuf
index|[
name|TXQ_NAME_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|SGE_PSTAT_TSO
block|,
comment|/* # of TSO requests */
name|SGE_PSTAT_RX_CSUM_GOOD
block|,
comment|/* # of successful RX csum offloads */
name|SGE_PSTAT_TX_CSUM
block|,
comment|/* # of TX checksum offloads */
name|SGE_PSTAT_VLANEX
block|,
comment|/* # of VLAN tag extractions */
name|SGE_PSTAT_VLANINS
block|,
comment|/* # of VLAN tag insertions */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|SGE_PSTAT_MAX
value|(SGE_PSTAT_VLANINS+1)
end_define

begin_define
define|#
directive|define
name|QS_EXITING
value|0x1
end_define

begin_define
define|#
directive|define
name|QS_RUNNING
value|0x2
end_define

begin_define
define|#
directive|define
name|QS_BOUND
value|0x4
end_define

begin_struct
struct|struct
name|sge_qset
block|{
name|struct
name|sge_rspq
name|rspq
decl_stmt|;
name|struct
name|sge_fl
name|fl
index|[
name|SGE_RXQ_PER_SET
index|]
decl_stmt|;
name|struct
name|lro_state
name|lro
decl_stmt|;
name|struct
name|sge_txq
name|txq
index|[
name|SGE_TXQ_PER_SET
index|]
decl_stmt|;
name|uint32_t
name|txq_stopped
decl_stmt|;
comment|/* which Tx queues are stopped */
name|uint64_t
name|port_stats
index|[
name|SGE_PSTAT_MAX
index|]
decl_stmt|;
name|struct
name|port_info
modifier|*
name|port
decl_stmt|;
name|int
name|idx
decl_stmt|;
comment|/* qset # */
name|int
name|qs_cpuid
decl_stmt|;
name|int
name|qs_flags
decl_stmt|;
name|struct
name|cv
name|qs_cv
decl_stmt|;
name|struct
name|mtx
name|qs_mtx
decl_stmt|;
define|#
directive|define
name|QS_NAME_LEN
value|32
name|char
name|namebuf
index|[
name|QS_NAME_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sge
block|{
name|struct
name|sge_qset
name|qs
index|[
name|SGE_QSETS
index|]
decl_stmt|;
name|struct
name|mtx
name|reg_lock
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|filter_info
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|adapter
block|{
name|device_t
name|dev
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|adapter
argument_list|)
name|adapter_entry
expr_stmt|;
comment|/* PCI register resources */
name|int
name|regs_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|regs_res
decl_stmt|;
name|int
name|udbs_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|udbs_res
decl_stmt|;
name|bus_space_handle_t
name|bh
decl_stmt|;
name|bus_space_tag_t
name|bt
decl_stmt|;
name|bus_size_t
name|mmio_len
decl_stmt|;
name|uint32_t
name|link_width
decl_stmt|;
comment|/* DMA resources */
name|bus_dma_tag_t
name|parent_dmat
decl_stmt|;
name|bus_dma_tag_t
name|rx_dmat
decl_stmt|;
name|bus_dma_tag_t
name|rx_jumbo_dmat
decl_stmt|;
name|bus_dma_tag_t
name|tx_dmat
decl_stmt|;
comment|/* Interrupt resources */
name|struct
name|resource
modifier|*
name|irq_res
decl_stmt|;
name|int
name|irq_rid
decl_stmt|;
name|void
modifier|*
name|intr_tag
decl_stmt|;
name|uint32_t
name|msix_regs_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|msix_regs_res
decl_stmt|;
name|struct
name|resource
modifier|*
name|msix_irq_res
index|[
name|SGE_QSETS
index|]
decl_stmt|;
name|int
name|msix_irq_rid
index|[
name|SGE_QSETS
index|]
decl_stmt|;
name|void
modifier|*
name|msix_intr_tag
index|[
name|SGE_QSETS
index|]
decl_stmt|;
name|uint8_t
name|rxpkt_map
index|[
literal|8
index|]
decl_stmt|;
comment|/* maps RX_PKT interface values to port ids */
name|uint8_t
name|rrss_map
index|[
name|SGE_QSETS
index|]
decl_stmt|;
comment|/* revers RSS map table */
name|uint16_t
name|rspq_map
index|[
name|RSS_TABLE_SIZE
index|]
decl_stmt|;
comment|/* maps 7-bit cookie to qidx */
union|union
block|{
name|uint8_t
name|fill
index|[
name|SGE_QSETS
index|]
decl_stmt|;
name|uint64_t
name|coalesce
decl_stmt|;
block|}
name|u
union|;
define|#
directive|define
name|tunq_fill
value|u.fill
define|#
directive|define
name|tunq_coalesce
value|u.coalesce
name|struct
name|filter_info
modifier|*
name|filters
decl_stmt|;
comment|/* Tasks */
name|struct
name|task
name|ext_intr_task
decl_stmt|;
name|struct
name|task
name|slow_intr_task
decl_stmt|;
name|struct
name|task
name|tick_task
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|tq
decl_stmt|;
name|struct
name|callout
name|cxgb_tick_ch
decl_stmt|;
name|struct
name|callout
name|sge_timer_ch
decl_stmt|;
name|unsigned
name|int
name|check_task_cnt
decl_stmt|;
comment|/* Register lock for use by the hardware layer */
name|struct
name|mtx
name|mdio_lock
decl_stmt|;
name|struct
name|mtx
name|elmer_lock
decl_stmt|;
comment|/* Bookkeeping for the hardware layer */
name|struct
name|adapter_params
name|params
decl_stmt|;
name|unsigned
name|int
name|slow_intr_mask
decl_stmt|;
name|unsigned
name|long
name|irq_stats
index|[
name|IRQ_NUM_STATS
index|]
decl_stmt|;
name|struct
name|sge
name|sge
decl_stmt|;
name|struct
name|mc7
name|pmrx
decl_stmt|;
name|struct
name|mc7
name|pmtx
decl_stmt|;
name|struct
name|mc7
name|cm
decl_stmt|;
name|struct
name|mc5
name|mc5
decl_stmt|;
name|struct
name|port_info
name|port
index|[
name|MAX_NPORTS
index|]
decl_stmt|;
name|device_t
name|portdev
index|[
name|MAX_NPORTS
index|]
decl_stmt|;
name|struct
name|t3cdev
name|tdev
decl_stmt|;
name|char
name|fw_version
index|[
literal|64
index|]
decl_stmt|;
name|uint32_t
name|open_device_map
decl_stmt|;
name|uint32_t
name|registered_device_map
decl_stmt|;
ifdef|#
directive|ifdef
name|USE_SX
name|struct
name|sx
name|lock
decl_stmt|;
else|#
directive|else
name|struct
name|mtx
name|lock
decl_stmt|;
endif|#
directive|endif
name|driver_intr_t
modifier|*
name|cxgb_intr
decl_stmt|;
name|int
name|msi_count
decl_stmt|;
define|#
directive|define
name|ADAPTER_LOCK_NAME_LEN
value|32
name|char
name|lockbuf
index|[
name|ADAPTER_LOCK_NAME_LEN
index|]
decl_stmt|;
name|char
name|reglockbuf
index|[
name|ADAPTER_LOCK_NAME_LEN
index|]
decl_stmt|;
name|char
name|mdiolockbuf
index|[
name|ADAPTER_LOCK_NAME_LEN
index|]
decl_stmt|;
name|char
name|elmerlockbuf
index|[
name|ADAPTER_LOCK_NAME_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|t3_rx_mode
block|{
name|uint32_t
name|idx
decl_stmt|;
name|struct
name|port_info
modifier|*
name|port
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MDIO_LOCK
parameter_list|(
name|adapter
parameter_list|)
value|mtx_lock(&(adapter)->mdio_lock)
end_define

begin_define
define|#
directive|define
name|MDIO_UNLOCK
parameter_list|(
name|adapter
parameter_list|)
value|mtx_unlock(&(adapter)->mdio_lock)
end_define

begin_define
define|#
directive|define
name|ELMR_LOCK
parameter_list|(
name|adapter
parameter_list|)
value|mtx_lock(&(adapter)->elmer_lock)
end_define

begin_define
define|#
directive|define
name|ELMR_UNLOCK
parameter_list|(
name|adapter
parameter_list|)
value|mtx_unlock(&(adapter)->elmer_lock)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|USE_SX
end_ifdef

begin_define
define|#
directive|define
name|PORT_LOCK
parameter_list|(
name|port
parameter_list|)
value|sx_xlock(&(port)->lock);
end_define

begin_define
define|#
directive|define
name|PORT_UNLOCK
parameter_list|(
name|port
parameter_list|)
value|sx_xunlock(&(port)->lock);
end_define

begin_define
define|#
directive|define
name|PORT_LOCK_INIT
parameter_list|(
name|port
parameter_list|,
name|name
parameter_list|)
value|SX_INIT(&(port)->lock, name)
end_define

begin_define
define|#
directive|define
name|PORT_LOCK_DEINIT
parameter_list|(
name|port
parameter_list|)
value|SX_DESTROY(&(port)->lock)
end_define

begin_define
define|#
directive|define
name|PORT_LOCK_ASSERT_OWNED
parameter_list|(
name|port
parameter_list|)
value|sx_assert(&(port)->lock, SA_LOCKED)
end_define

begin_define
define|#
directive|define
name|ADAPTER_LOCK
parameter_list|(
name|adap
parameter_list|)
value|sx_xlock(&(adap)->lock);
end_define

begin_define
define|#
directive|define
name|ADAPTER_UNLOCK
parameter_list|(
name|adap
parameter_list|)
value|sx_xunlock(&(adap)->lock);
end_define

begin_define
define|#
directive|define
name|ADAPTER_LOCK_INIT
parameter_list|(
name|adap
parameter_list|,
name|name
parameter_list|)
value|SX_INIT(&(adap)->lock, name)
end_define

begin_define
define|#
directive|define
name|ADAPTER_LOCK_DEINIT
parameter_list|(
name|adap
parameter_list|)
value|SX_DESTROY(&(adap)->lock)
end_define

begin_define
define|#
directive|define
name|ADAPTER_LOCK_ASSERT_NOTOWNED
parameter_list|(
name|adap
parameter_list|)
value|sx_assert(&(adap)->lock, SA_UNLOCKED)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|PORT_LOCK
parameter_list|(
name|port
parameter_list|)
value|mtx_lock(&(port)->lock);
end_define

begin_define
define|#
directive|define
name|PORT_UNLOCK
parameter_list|(
name|port
parameter_list|)
value|mtx_unlock(&(port)->lock);
end_define

begin_define
define|#
directive|define
name|PORT_LOCK_INIT
parameter_list|(
name|port
parameter_list|,
name|name
parameter_list|)
value|mtx_init(&(port)->lock, name, 0, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|PORT_LOCK_DEINIT
parameter_list|(
name|port
parameter_list|)
value|mtx_destroy(&(port)->lock)
end_define

begin_define
define|#
directive|define
name|PORT_LOCK_ASSERT_OWNED
parameter_list|(
name|port
parameter_list|)
value|mtx_assert(&(port)->lock, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|ADAPTER_LOCK
parameter_list|(
name|adap
parameter_list|)
value|mtx_lock(&(adap)->lock);
end_define

begin_define
define|#
directive|define
name|ADAPTER_UNLOCK
parameter_list|(
name|adap
parameter_list|)
value|mtx_unlock(&(adap)->lock);
end_define

begin_define
define|#
directive|define
name|ADAPTER_LOCK_INIT
parameter_list|(
name|adap
parameter_list|,
name|name
parameter_list|)
value|mtx_init(&(adap)->lock, name, 0, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|ADAPTER_LOCK_DEINIT
parameter_list|(
name|adap
parameter_list|)
value|mtx_destroy(&(adap)->lock)
end_define

begin_define
define|#
directive|define
name|ADAPTER_LOCK_ASSERT_NOTOWNED
parameter_list|(
name|adap
parameter_list|)
value|mtx_assert(&(adap)->lock, MO_NOTOWNED)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|uint32_t
name|t3_read_reg
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|uint32_t
name|reg_addr
parameter_list|)
block|{
return|return
operator|(
name|bus_space_read_4
argument_list|(
name|adapter
operator|->
name|bt
argument_list|,
name|adapter
operator|->
name|bh
argument_list|,
name|reg_addr
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|t3_write_reg
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|uint32_t
name|reg_addr
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|bus_space_write_4
argument_list|(
name|adapter
operator|->
name|bt
argument_list|,
name|adapter
operator|->
name|bh
argument_list|,
name|reg_addr
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|t3_os_pci_read_config_4
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint32_t
modifier|*
name|val
parameter_list|)
block|{
operator|*
name|val
operator|=
name|pci_read_config
argument_list|(
name|adapter
operator|->
name|dev
argument_list|,
name|reg
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|t3_os_pci_write_config_4
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|pci_write_config
argument_list|(
name|adapter
operator|->
name|dev
argument_list|,
name|reg
argument_list|,
name|val
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|t3_os_pci_read_config_2
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint16_t
modifier|*
name|val
parameter_list|)
block|{
operator|*
name|val
operator|=
name|pci_read_config
argument_list|(
name|adapter
operator|->
name|dev
argument_list|,
name|reg
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|t3_os_pci_write_config_2
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint16_t
name|val
parameter_list|)
block|{
name|pci_write_config
argument_list|(
name|adapter
operator|->
name|dev
argument_list|,
name|reg
argument_list|,
name|val
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint8_t
modifier|*
name|t3_get_next_mcaddr
parameter_list|(
name|struct
name|t3_rx_mode
modifier|*
name|rm
parameter_list|)
block|{
name|uint8_t
modifier|*
name|macaddr
init|=
name|NULL
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|rm
operator|->
name|port
operator|->
name|ifp
decl_stmt|;
name|struct
name|ifmultiaddr
modifier|*
name|ifma
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|IF_ADDR_LOCK
argument_list|(
name|ifp
argument_list|)
expr_stmt|;
name|TAILQ_FOREACH
argument_list|(
argument|ifma
argument_list|,
argument|&ifp->if_multiaddrs
argument_list|,
argument|ifma_link
argument_list|)
block|{
if|if
condition|(
name|ifma
operator|->
name|ifma_addr
operator|->
name|sa_family
operator|!=
name|AF_LINK
condition|)
continue|continue;
if|if
condition|(
name|i
operator|==
name|rm
operator|->
name|idx
condition|)
block|{
name|macaddr
operator|=
name|LLADDR
argument_list|(
operator|(
expr|struct
name|sockaddr_dl
operator|*
operator|)
name|ifma
operator|->
name|ifma_addr
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|IF_ADDR_UNLOCK
argument_list|(
name|ifp
argument_list|)
expr_stmt|;
name|rm
operator|->
name|idx
operator|++
expr_stmt|;
return|return
operator|(
name|macaddr
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|t3_init_rx_mode
parameter_list|(
name|struct
name|t3_rx_mode
modifier|*
name|rm
parameter_list|,
name|struct
name|port_info
modifier|*
name|port
parameter_list|)
block|{
name|rm
operator|->
name|idx
operator|=
literal|0
expr_stmt|;
name|rm
operator|->
name|port
operator|=
name|port
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|port_info
operator|*
name|adap2pinfo
argument_list|(
argument|struct adapter *adap
argument_list|,
argument|int idx
argument_list|)
block|{
return|return
operator|&
name|adap
operator|->
name|port
index|[
name|idx
index|]
return|;
block|}
end_expr_stmt

begin_function_decl
name|int
name|t3_os_find_pci_capability
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|cap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_os_pci_save_state
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_os_pci_restore_state
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_os_link_changed
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|port_id
parameter_list|,
name|int
name|link_status
parameter_list|,
name|int
name|speed
parameter_list|,
name|int
name|duplex
parameter_list|,
name|int
name|fc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_os_phymod_changed
parameter_list|(
name|struct
name|adapter
modifier|*
name|adap
parameter_list|,
name|int
name|port_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_sge_err_intr_handler
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_offload_tx
parameter_list|(
name|struct
name|t3cdev
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_os_ext_intr_handler
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_os_set_hw_addr
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|,
name|int
name|port_idx
parameter_list|,
name|u8
name|hw_addr
index|[]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_mgmt_tx
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_alloc
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_free
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_alloc_qset
parameter_list|(
name|adapter_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|struct
name|qset_params
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|port_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_free_sge_resources
parameter_list|(
name|adapter_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_sge_start
parameter_list|(
name|adapter_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_sge_stop
parameter_list|(
name|adapter_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3b_intr
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_intr_msi
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_intr_msix
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_encap
parameter_list|(
name|struct
name|sge_qset
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_init_adapter
parameter_list|(
name|adapter_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_reset_adapter
parameter_list|(
name|adapter_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_sge_init_port
parameter_list|(
name|struct
name|port_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_sge_deinit_sw
parameter_list|(
name|adapter_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_free_tx_desc
parameter_list|(
name|struct
name|sge_txq
modifier|*
name|q
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_free_tx_desc_all
parameter_list|(
name|struct
name|sge_txq
modifier|*
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_rx_eth
parameter_list|(
name|struct
name|adapter
modifier|*
name|adap
parameter_list|,
name|struct
name|sge_rspq
modifier|*
name|rq
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|int
name|ethpad
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_add_attach_sysctls
parameter_list|(
name|adapter_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_add_configured_sysctls
parameter_list|(
name|adapter_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_get_desc
parameter_list|(
specifier|const
name|struct
name|sge_qset
modifier|*
name|qs
parameter_list|,
name|unsigned
name|int
name|qnum
parameter_list|,
name|unsigned
name|int
name|idx
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_update_qset_coalesce
parameter_list|(
name|struct
name|sge_qset
modifier|*
name|qs
parameter_list|,
specifier|const
name|struct
name|qset_params
modifier|*
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|CXGB_TICKS
parameter_list|(
name|a
parameter_list|)
value|((a)->params.linkpoll_period ? \     (hz * (a)->params.linkpoll_period) / 10 : \     (a)->params.stats_update_period * hz)
end_define

begin_comment
comment|/*  * XXX figure out how we can return this to being private to sge  */
end_comment

begin_define
define|#
directive|define
name|desc_reclaimable
parameter_list|(
name|q
parameter_list|)
value|((int)((q)->processed - (q)->cleaned - TX_MAX_DESC))
end_define

begin_define
define|#
directive|define
name|container_of
parameter_list|(
name|p
parameter_list|,
name|stype
parameter_list|,
name|field
parameter_list|)
value|((stype *)(((uint8_t *)(p)) - offsetof(stype, field)))
end_define

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|sge_qset
operator|*
name|fl_to_qset
argument_list|(
argument|struct sge_fl *q
argument_list|,
argument|int qidx
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|q
argument_list|,
expr|struct
name|sge_qset
argument_list|,
name|fl
index|[
name|qidx
index|]
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|sge_qset
operator|*
name|rspq_to_qset
argument_list|(
argument|struct sge_rspq *q
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|q
argument_list|,
expr|struct
name|sge_qset
argument_list|,
name|rspq
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|sge_qset
operator|*
name|txq_to_qset
argument_list|(
argument|struct sge_txq *q
argument_list|,
argument|int qidx
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|q
argument_list|,
expr|struct
name|sge_qset
argument_list|,
name|txq
index|[
name|qidx
index|]
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|adapter
operator|*
name|tdev2adap
argument_list|(
argument|struct t3cdev *d
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|d
argument_list|,
expr|struct
name|adapter
argument_list|,
name|tdev
argument_list|)
return|;
block|}
end_expr_stmt

begin_undef
undef|#
directive|undef
name|container_of
end_undef

begin_define
define|#
directive|define
name|OFFLOAD_DEVMAP_BIT
value|15
end_define

begin_function
specifier|static
specifier|inline
name|int
name|offload_running
parameter_list|(
name|adapter_t
modifier|*
name|adapter
parameter_list|)
block|{
return|return
name|isset
argument_list|(
operator|&
name|adapter
operator|->
name|open_device_map
argument_list|,
name|OFFLOAD_DEVMAP_BIT
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|int
name|cxgb_pcpu_enqueue_packet
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxgb_pcpu_start
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_pcpu_shutdown_threads
parameter_list|(
name|struct
name|adapter
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_pcpu_startup_threads
parameter_list|(
name|struct
name|adapter
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|process_responses
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|struct
name|sge_qset
modifier|*
name|qs
parameter_list|,
name|int
name|budget
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_free_qset
parameter_list|(
name|adapter_t
modifier|*
name|sc
parameter_list|,
name|struct
name|sge_qset
modifier|*
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_start
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|refill_fl_service
parameter_list|(
name|adapter_t
modifier|*
name|adap
parameter_list|,
name|struct
name|sge_fl
modifier|*
name|fl
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

