begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  Copyright (c) 2007, Chelsio Inc. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.   2. Neither the name of the Chelsio Corporation nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  $FreeBSD$  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CXGB_OFFLOAD_H
end_ifndef

begin_define
define|#
directive|define
name|_CXGB_OFFLOAD_H
end_define

begin_include
include|#
directive|include
file|<dev/cxgb/common/cxgb_tcb.h>
end_include

begin_include
include|#
directive|include
file|<dev/cxgb/cxgb_l2t.h>
end_include

begin_include
include|#
directive|include
file|<dev/cxgb/ulp/toecore/toedev.h>
end_include

begin_include
include|#
directive|include
file|<dev/cxgb/common/cxgb_t3_cpl.h>
end_include

begin_struct_decl
struct_decl|struct
name|adapter
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|cxgb_client
struct_decl|;
end_struct_decl

begin_function_decl
name|void
name|cxgb_offload_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_offload_exit
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_adapter_ofld
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_adapter_unofld
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxgb_offload_activate
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_offload_deactivate
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxgb_ofld_recv
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
name|m
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_set_dummy_ops
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Client registration.  Users of T3 driver must register themselves.  * The T3 driver will call the add function of every client for each T3  * adapter activated, passing up the toedev ptr.  Each client fills out an  * array of callback functions to process CPL messages.  */
end_comment

begin_function_decl
name|void
name|cxgb_register_client
parameter_list|(
name|struct
name|cxgb_client
modifier|*
name|client
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_unregister_client
parameter_list|(
name|struct
name|cxgb_client
modifier|*
name|client
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_add_clients
parameter_list|(
name|struct
name|toedev
modifier|*
name|tdev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_remove_clients
parameter_list|(
name|struct
name|toedev
modifier|*
name|tdev
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|cxgb_cpl_handler_func
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|cxgb_client
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|void
function_decl|(
modifier|*
name|add
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|remove
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|)
function_decl|;
name|cxgb_cpl_handler_func
modifier|*
name|handlers
decl_stmt|;
name|int
function_decl|(
modifier|*
name|redirect
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|struct
name|rtentry
modifier|*
name|old
parameter_list|,
name|struct
name|rtentry
modifier|*
name|new
parameter_list|,
name|struct
name|l2t_entry
modifier|*
name|l2t
parameter_list|)
function_decl|;
name|TAILQ_ENTRY
argument_list|(
argument|cxgb_client
argument_list|)
name|client_entry
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * TID allocation services.  */
end_comment

begin_function_decl
name|int
name|cxgb_alloc_atid
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|struct
name|cxgb_client
modifier|*
name|client
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxgb_alloc_stid
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|struct
name|cxgb_client
modifier|*
name|client
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|cxgb_free_atid
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|int
name|atid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_free_stid
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|int
name|stid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_insert_tid
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|struct
name|cxgb_client
modifier|*
name|client
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_queue_tid_release
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_remove_tid
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|toe_tid_entry
block|{
name|struct
name|cxgb_client
modifier|*
name|client
decl_stmt|;
name|void
modifier|*
name|ctx
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* CPL message priority levels */
end_comment

begin_enum
enum|enum
block|{
name|CPL_PRIORITY_DATA
init|=
literal|0
block|,
comment|/* data messages */
name|CPL_PRIORITY_SETUP
init|=
literal|1
block|,
comment|/* connection setup messages */
name|CPL_PRIORITY_TEARDOWN
init|=
literal|0
block|,
comment|/* connection teardown messages */
name|CPL_PRIORITY_LISTEN
init|=
literal|1
block|,
comment|/* listen start/stop messages */
name|CPL_PRIORITY_ACK
init|=
literal|1
block|,
comment|/* RX ACK messages */
name|CPL_PRIORITY_CONTROL
init|=
literal|1
comment|/* offload control messages */
block|}
enum|;
end_enum

begin_comment
comment|/* Flags for return value of CPL message handlers */
end_comment

begin_enum
enum|enum
block|{
name|CPL_RET_BUF_DONE
init|=
literal|1
block|,
comment|// buffer processing done, buffer may be freed
name|CPL_RET_BAD_MSG
init|=
literal|2
block|,
comment|// bad CPL message (e.g., unknown opcode)
name|CPL_RET_UNKNOWN_TID
init|=
literal|4
comment|// unexpected unknown TID
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|cpl_handler_func
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * Returns a pointer to the first byte of the CPL header in an sk_buff that  * contains a CPL message.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|cplhdr
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
block|{
return|return
name|mtod
argument_list|(
name|m
argument_list|,
name|uint8_t
operator|*
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|t3_register_cpl_handler
parameter_list|(
name|unsigned
name|int
name|opcode
parameter_list|,
name|cpl_handler_func
name|h
parameter_list|)
function_decl|;
end_function_decl

begin_union
union|union
name|listen_entry
block|{
name|struct
name|toe_tid_entry
name|toe_tid
decl_stmt|;
name|union
name|listen_entry
modifier|*
name|next
decl_stmt|;
block|}
union|;
end_union

begin_union
union|union
name|active_open_entry
block|{
name|struct
name|toe_tid_entry
name|toe_tid
decl_stmt|;
name|union
name|active_open_entry
modifier|*
name|next
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  * Holds the size, base address, free list start, etc of the TID, server TID,  * and active-open TID tables for a offload device.  * The tables themselves are allocated dynamically.  */
end_comment

begin_struct
struct|struct
name|tid_info
block|{
name|struct
name|toe_tid_entry
modifier|*
name|tid_tab
decl_stmt|;
name|unsigned
name|int
name|ntids
decl_stmt|;
specifier|volatile
name|unsigned
name|int
name|tids_in_use
decl_stmt|;
name|union
name|listen_entry
modifier|*
name|stid_tab
decl_stmt|;
name|unsigned
name|int
name|nstids
decl_stmt|;
name|unsigned
name|int
name|stid_base
decl_stmt|;
name|union
name|active_open_entry
modifier|*
name|atid_tab
decl_stmt|;
name|unsigned
name|int
name|natids
decl_stmt|;
name|unsigned
name|int
name|atid_base
decl_stmt|;
comment|/* 	 * The following members are accessed R/W so we put them in their own 	 * cache lines. 	 * 	 * XXX We could combine the atid fields above with the lock here since 	 * atids are use once (unlike other tids).  OTOH the above fields are 	 * usually in cache due to tid_tab. 	 */
name|struct
name|mtx
name|atid_lock
comment|/* ____cacheline_aligned_in_smp */
decl_stmt|;
name|union
name|active_open_entry
modifier|*
name|afree
decl_stmt|;
name|unsigned
name|int
name|atids_in_use
decl_stmt|;
name|struct
name|mtx
name|stid_lock
comment|/*____cacheline_aligned */
decl_stmt|;
name|union
name|listen_entry
modifier|*
name|sfree
decl_stmt|;
name|unsigned
name|int
name|stids_in_use
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|toe_data
block|{
ifdef|#
directive|ifdef
name|notyet
name|struct
name|list_head
name|list_node
decl_stmt|;
endif|#
directive|endif
name|struct
name|toedev
modifier|*
name|dev
decl_stmt|;
name|unsigned
name|int
name|tx_max_chunk
decl_stmt|;
comment|/* max payload for TX_DATA */
name|unsigned
name|int
name|max_wrs
decl_stmt|;
comment|/* max in-flight WRs per connection */
name|unsigned
name|int
name|nmtus
decl_stmt|;
specifier|const
name|unsigned
name|short
modifier|*
name|mtus
decl_stmt|;
name|struct
name|tid_info
name|tid_maps
decl_stmt|;
name|struct
name|toe_tid_entry
modifier|*
name|tid_release_list
decl_stmt|;
name|struct
name|mtx
name|tid_release_lock
decl_stmt|;
name|struct
name|task
name|tid_release_task
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * toedev -> toe_data accessor  */
end_comment

begin_define
define|#
directive|define
name|TOE_DATA
parameter_list|(
name|dev
parameter_list|)
value|(*(struct toe_data **)&(dev)->l4opt)
end_define

begin_comment
comment|/*  * Map an ATID or STID to their entries in the corresponding TID tables.  */
end_comment

begin_function
specifier|static
specifier|inline
name|union
name|active_open_entry
modifier|*
name|atid2entry
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|atid
parameter_list|)
block|{
return|return
operator|&
name|t
operator|->
name|atid_tab
index|[
name|atid
operator|-
name|t
operator|->
name|atid_base
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|union
name|listen_entry
modifier|*
name|stid2entry
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|stid
parameter_list|)
block|{
return|return
operator|&
name|t
operator|->
name|stid_tab
index|[
name|stid
operator|-
name|t
operator|->
name|stid_base
index|]
return|;
block|}
end_function

begin_comment
comment|/*  * Find the connection corresponding to a TID.  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|toe_tid_entry
modifier|*
name|lookup_tid
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
block|{
return|return
name|tid
operator|<
name|t
operator|->
name|ntids
condition|?
operator|&
operator|(
name|t
operator|->
name|tid_tab
index|[
name|tid
index|]
operator|)
else|:
name|NULL
return|;
block|}
end_function

begin_comment
comment|/*  * Find the connection corresponding to a server TID.  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|toe_tid_entry
modifier|*
name|lookup_stid
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
block|{
if|if
condition|(
name|tid
operator|<
name|t
operator|->
name|stid_base
operator|||
name|tid
operator|>=
name|t
operator|->
name|stid_base
operator|+
name|t
operator|->
name|nstids
condition|)
return|return
name|NULL
return|;
return|return
operator|&
operator|(
name|stid2entry
argument_list|(
name|t
argument_list|,
name|tid
argument_list|)
operator|->
name|toe_tid
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Find the connection corresponding to an active-open TID.  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|toe_tid_entry
modifier|*
name|lookup_atid
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
block|{
if|if
condition|(
name|tid
operator|<
name|t
operator|->
name|atid_base
operator|||
name|tid
operator|>=
name|t
operator|->
name|atid_base
operator|+
name|t
operator|->
name|natids
condition|)
return|return
name|NULL
return|;
return|return
operator|&
operator|(
name|atid2entry
argument_list|(
name|t
argument_list|,
name|tid
argument_list|)
operator|->
name|toe_tid
operator|)
return|;
block|}
end_function

begin_function_decl
name|void
modifier|*
name|cxgb_alloc_mem
parameter_list|(
name|unsigned
name|long
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_free_mem
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_neigh_update
parameter_list|(
name|struct
name|rtentry
modifier|*
name|rt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxgb_redirect
parameter_list|(
name|struct
name|rtentry
modifier|*
name|old
parameter_list|,
name|struct
name|rtentry
modifier|*
name|new
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|process_rx
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
name|m
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|attach_toedev
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|detach_toedev
parameter_list|(
name|struct
name|toedev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

