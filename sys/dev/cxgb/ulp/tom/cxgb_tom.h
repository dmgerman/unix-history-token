begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  Copyright (c) 2007, 2009 Chelsio Inc. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.   2. Neither the name of the Chelsio Corporation nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.   $FreeBSD$  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CXGB_TOM_H_
end_ifndef

begin_define
define|#
directive|define
name|CXGB_TOM_H_
end_define

begin_include
include|#
directive|include
file|<sys/protosw.h>
end_include

begin_include
include|#
directive|include
file|<netinet/toecore.h>
end_include

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_CXGB
argument_list|)
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|KTR_CXGB
value|KTR_SPARE3
end_define

begin_define
define|#
directive|define
name|LISTEN_HASH_SIZE
value|32
end_define

begin_comment
comment|/*  * Holds the size, base address, free list start, etc of the TID, server TID,  * and active-open TID tables for a offload device.  * The tables themselves are allocated dynamically.  */
end_comment

begin_struct
struct|struct
name|tid_info
block|{
name|void
modifier|*
modifier|*
name|tid_tab
decl_stmt|;
name|unsigned
name|int
name|ntids
decl_stmt|;
specifier|volatile
name|unsigned
name|int
name|tids_in_use
decl_stmt|;
name|union
name|listen_entry
modifier|*
name|stid_tab
decl_stmt|;
name|unsigned
name|int
name|nstids
decl_stmt|;
name|unsigned
name|int
name|stid_base
decl_stmt|;
name|union
name|active_open_entry
modifier|*
name|atid_tab
decl_stmt|;
name|unsigned
name|int
name|natids
decl_stmt|;
name|unsigned
name|int
name|atid_base
decl_stmt|;
comment|/* 	 * The following members are accessed R/W so we put them in their own 	 * cache lines.  TOM_XXX: actually do what is said here. 	 * 	 * XXX We could combine the atid fields above with the lock here since 	 * atids are use once (unlike other tids).  OTOH the above fields are 	 * usually in cache due to tid_tab. 	 */
name|struct
name|mtx
name|atid_lock
decl_stmt|;
name|union
name|active_open_entry
modifier|*
name|afree
decl_stmt|;
name|unsigned
name|int
name|atids_in_use
decl_stmt|;
name|struct
name|mtx
name|stid_lock
decl_stmt|;
name|union
name|listen_entry
modifier|*
name|sfree
decl_stmt|;
name|unsigned
name|int
name|stids_in_use
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tom_data
block|{
name|struct
name|toedev
name|tod
decl_stmt|;
comment|/* 	 * toepcb's associated with this TOE device are either on the 	 * toep list or in the synq of a listening socket in lctx hash. 	 */
name|struct
name|mtx
name|toep_list_lock
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|toepcb
argument_list|)
name|toep_list
expr_stmt|;
name|struct
name|l2t_data
modifier|*
name|l2t
decl_stmt|;
name|struct
name|tid_info
name|tid_maps
decl_stmt|;
comment|/* 	 * The next two locks listen_lock, and tid_release_lock are used rarely 	 * so we let them potentially share a cacheline.          */
name|LIST_HEAD
argument_list|(,
name|listen_ctx
argument_list|)
operator|*
name|listen_hash
expr_stmt|;
name|u_long
name|listen_mask
decl_stmt|;
name|int
name|lctx_count
decl_stmt|;
comment|/* # of lctx in the hash table */
name|struct
name|mtx
name|lctx_hash_lock
decl_stmt|;
name|void
modifier|*
modifier|*
name|tid_release_list
decl_stmt|;
name|struct
name|mtx
name|tid_release_lock
decl_stmt|;
name|struct
name|task
name|tid_release_task
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|synq_entry
block|{
name|TAILQ_ENTRY
argument_list|(
argument|synq_entry
argument_list|)
name|link
expr_stmt|;
comment|/* listen_ctx's synq link */
name|int
name|flags
decl_stmt|;
comment|/* same as toepcb's tp_flags */
name|int
name|tid
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
comment|/* backpointer to containing mbuf */
name|struct
name|listen_ctx
modifier|*
name|lctx
decl_stmt|;
comment|/* backpointer to listen ctx */
name|struct
name|cpl_pass_establish
modifier|*
name|cpl
decl_stmt|;
name|struct
name|toepcb
modifier|*
name|toep
decl_stmt|;
name|struct
name|l2t_entry
modifier|*
name|e
decl_stmt|;
name|uint32_t
name|iss
decl_stmt|;
name|uint32_t
name|ts
decl_stmt|;
name|uint32_t
name|opt0h
decl_stmt|;
name|uint32_t
name|qset
decl_stmt|;
name|int
name|rx_credits
decl_stmt|;
specifier|volatile
name|u_int
name|refcnt
decl_stmt|;
define|#
directive|define
name|RPL_OK
value|0
comment|/* ok to reply */
define|#
directive|define
name|RPL_DONE
value|1
comment|/* replied already */
define|#
directive|define
name|RPL_DONT
value|2
comment|/* don't reply */
specifier|volatile
name|u_int
name|reply
decl_stmt|;
comment|/* see above. */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|LCTX_RPL_PENDING
value|1
end_define

begin_comment
comment|/* waiting for CPL_PASS_OPEN_RPL */
end_comment

begin_struct
struct|struct
name|listen_ctx
block|{
name|LIST_ENTRY
argument_list|(
argument|listen_ctx
argument_list|)
name|link
expr_stmt|;
comment|/* listen hash linkage */
specifier|volatile
name|int
name|refcnt
decl_stmt|;
name|int
name|stid
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|struct
name|inpcb
modifier|*
name|inp
decl_stmt|;
comment|/* listening socket's inp */
name|int
name|qset
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|synq_entry
argument_list|)
name|synq
expr_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|t3_process_tid_release_list
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|int
name|pending
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|struct
name|tom_data
modifier|*
name|t3_tomdata
parameter_list|(
name|struct
name|toedev
modifier|*
name|tod
parameter_list|)
block|{
return|return
operator|(
name|member2struct
argument_list|(
name|tom_data
argument_list|,
name|tod
argument_list|,
name|tod
argument_list|)
operator|)
return|;
block|}
end_function

begin_union
union|union
name|listen_entry
block|{
name|void
modifier|*
name|ctx
decl_stmt|;
name|union
name|listen_entry
modifier|*
name|next
decl_stmt|;
block|}
union|;
end_union

begin_union
union|union
name|active_open_entry
block|{
name|void
modifier|*
name|ctx
decl_stmt|;
name|union
name|active_open_entry
modifier|*
name|next
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  * Map an ATID or STID to their entries in the corresponding TID tables.  */
end_comment

begin_function
specifier|static
specifier|inline
name|union
name|active_open_entry
modifier|*
name|atid2entry
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|atid
parameter_list|)
block|{
return|return
operator|&
name|t
operator|->
name|atid_tab
index|[
name|atid
operator|-
name|t
operator|->
name|atid_base
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|union
name|listen_entry
modifier|*
name|stid2entry
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|stid
parameter_list|)
block|{
return|return
operator|&
name|t
operator|->
name|stid_tab
index|[
name|stid
operator|-
name|t
operator|->
name|stid_base
index|]
return|;
block|}
end_function

begin_comment
comment|/*  * Find the connection corresponding to a TID.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|lookup_tid
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
block|{
name|void
modifier|*
name|p
decl_stmt|;
if|if
condition|(
name|tid
operator|>=
name|t
operator|->
name|ntids
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|p
operator|=
name|t
operator|->
name|tid_tab
index|[
name|tid
index|]
expr_stmt|;
if|if
condition|(
name|p
operator|<
operator|(
name|void
operator|*
operator|)
name|t
operator|->
name|tid_tab
operator|||
name|p
operator|>=
operator|(
name|void
operator|*
operator|)
operator|&
name|t
operator|->
name|atid_tab
index|[
name|t
operator|->
name|natids
index|]
condition|)
return|return
operator|(
name|p
operator|)
return|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Find the connection corresponding to a server TID.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|lookup_stid
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
block|{
name|void
modifier|*
name|p
decl_stmt|;
if|if
condition|(
name|tid
operator|<
name|t
operator|->
name|stid_base
operator|||
name|tid
operator|>=
name|t
operator|->
name|stid_base
operator|+
name|t
operator|->
name|nstids
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|p
operator|=
name|stid2entry
argument_list|(
name|t
argument_list|,
name|tid
argument_list|)
operator|->
name|ctx
expr_stmt|;
if|if
condition|(
name|p
operator|<
operator|(
name|void
operator|*
operator|)
name|t
operator|->
name|tid_tab
operator|||
name|p
operator|>=
operator|(
name|void
operator|*
operator|)
operator|&
name|t
operator|->
name|atid_tab
index|[
name|t
operator|->
name|natids
index|]
condition|)
return|return
operator|(
name|p
operator|)
return|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Find the connection corresponding to an active-open TID.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|lookup_atid
parameter_list|(
specifier|const
name|struct
name|tid_info
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|tid
parameter_list|)
block|{
name|void
modifier|*
name|p
decl_stmt|;
if|if
condition|(
name|tid
operator|<
name|t
operator|->
name|atid_base
operator|||
name|tid
operator|>=
name|t
operator|->
name|atid_base
operator|+
name|t
operator|->
name|natids
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|p
operator|=
name|atid2entry
argument_list|(
name|t
argument_list|,
name|tid
argument_list|)
operator|->
name|ctx
expr_stmt|;
if|if
condition|(
name|p
operator|<
operator|(
name|void
operator|*
operator|)
name|t
operator|->
name|tid_tab
operator|||
name|p
operator|>=
operator|(
name|void
operator|*
operator|)
operator|&
name|t
operator|->
name|atid_tab
index|[
name|t
operator|->
name|natids
index|]
condition|)
return|return
operator|(
name|p
operator|)
return|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|calc_opt2
parameter_list|(
name|int
name|cpu_idx
parameter_list|)
block|{
name|uint32_t
name|opt2
init|=
name|F_CPU_INDEX_VALID
operator||
name|V_CPU_INDEX
argument_list|(
name|cpu_idx
argument_list|)
decl_stmt|;
comment|/* 3 = highspeed CC algorithm */
name|opt2
operator||=
name|V_FLAVORS_VALID
argument_list|(
literal|1
argument_list|)
operator||
name|V_CONG_CONTROL_FLAVOR
argument_list|(
literal|3
argument_list|)
operator||
name|V_PACING_FLAVOR
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|/* coalesce and push bit semantics */
name|opt2
operator||=
name|F_RX_COALESCE_VALID
operator||
name|V_RX_COALESCE
argument_list|(
literal|3
argument_list|)
expr_stmt|;
return|return
operator|(
name|htobe32
argument_list|(
name|opt2
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/* cxgb_tom.c */
end_comment

begin_function_decl
name|struct
name|toepcb
modifier|*
name|toepcb_alloc
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|toepcb_free
parameter_list|(
name|struct
name|toepcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* cxgb_cpl_io.c */
end_comment

begin_function_decl
name|void
name|t3_init_cpl_io
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_push_frames
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_connect
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|socket
modifier|*
parameter_list|,
name|struct
name|rtentry
modifier|*
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_tod_output
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_send_rst
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_send_fin
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|insert_tid
parameter_list|(
name|struct
name|tom_data
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|update_tid
parameter_list|(
name|struct
name|tom_data
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|remove_tid
parameter_list|(
name|struct
name|tom_data
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|calc_opt0h
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|struct
name|l2t_entry
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|calc_opt0l
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|queue_tid_release
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|offload_socket
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|,
name|struct
name|toepcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|undo_offload_socket
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|select_rcv_wscale
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|long
name|select_rcv_wnd
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|find_best_mtu_idx
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|,
name|struct
name|in_conninfo
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|make_established
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_rcvd
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_pcb_detach
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|send_abort_rpl
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|release_tid
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* cxgb_listen.c */
end_comment

begin_function_decl
name|void
name|t3_init_listen_cpl_handlers
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_listen_start
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_listen_stop
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_syncache_added
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_syncache_removed
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t3_syncache_respond
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|do_abort_req_synqe
parameter_list|(
name|struct
name|sge_qset
modifier|*
parameter_list|,
name|struct
name|rsp_desc
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|do_abort_rpl_synqe
parameter_list|(
name|struct
name|sge_qset
modifier|*
parameter_list|,
name|struct
name|rsp_desc
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|t3_offload_socket
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|socket
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

