begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  Copyright (c) 2007, 2008 Chelsio Inc. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.   2. Neither the name of the Chelsio Corporation nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  $FreeBSD$  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IWCH_PROVIDER_H__
end_ifndef

begin_define
define|#
directive|define
name|__IWCH_PROVIDER_H__
end_define

begin_include
include|#
directive|include
file|<contrib/rdma/ib_verbs.h>
end_include

begin_struct
struct|struct
name|iwch_pd
block|{
name|struct
name|ib_pd
name|ibpd
decl_stmt|;
name|u32
name|pdid
decl_stmt|;
name|struct
name|iwch_dev
modifier|*
name|rhp
decl_stmt|;
block|}
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|container_of
end_ifndef

begin_define
define|#
directive|define
name|container_of
parameter_list|(
name|p
parameter_list|,
name|stype
parameter_list|,
name|field
parameter_list|)
value|((stype *)(((uint8_t *)(p)) - offsetof(stype, field)))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|iwch_pd
operator|*
name|to_iwch_pd
argument_list|(
argument|struct ib_pd *ibpd
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibpd
argument_list|,
expr|struct
name|iwch_pd
argument_list|,
name|ibpd
argument_list|)
return|;
block|}
end_expr_stmt

begin_struct
struct|struct
name|tpt_attributes
block|{
name|u32
name|stag
decl_stmt|;
name|u32
name|state
range|:
literal|1
decl_stmt|;
name|u32
name|type
range|:
literal|2
decl_stmt|;
name|u32
name|rsvd
range|:
literal|1
decl_stmt|;
name|enum
name|tpt_mem_perm
name|perms
decl_stmt|;
name|u32
name|remote_invaliate_disable
range|:
literal|1
decl_stmt|;
name|u32
name|zbva
range|:
literal|1
decl_stmt|;
name|u32
name|mw_bind_enable
range|:
literal|1
decl_stmt|;
name|u32
name|page_size
range|:
literal|5
decl_stmt|;
name|u32
name|pdid
decl_stmt|;
name|u32
name|qpid
decl_stmt|;
name|u32
name|pbl_addr
decl_stmt|;
name|u32
name|len
decl_stmt|;
name|u64
name|va_fbo
decl_stmt|;
name|u32
name|pbl_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwch_mr
block|{
name|struct
name|ib_mr
name|ibmr
decl_stmt|;
name|struct
name|ib_umem
modifier|*
name|umem
decl_stmt|;
name|struct
name|iwch_dev
modifier|*
name|rhp
decl_stmt|;
name|u64
name|kva
decl_stmt|;
name|struct
name|tpt_attributes
name|attr
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|iwch_mw
name|iwch_mw_handle
typedef|;
end_typedef

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|iwch_mr
operator|*
name|to_iwch_mr
argument_list|(
argument|struct ib_mr *ibmr
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibmr
argument_list|,
expr|struct
name|iwch_mr
argument_list|,
name|ibmr
argument_list|)
return|;
block|}
end_expr_stmt

begin_struct
struct|struct
name|iwch_mw
block|{
name|struct
name|ib_mw
name|ibmw
decl_stmt|;
name|struct
name|iwch_dev
modifier|*
name|rhp
decl_stmt|;
name|u64
name|kva
decl_stmt|;
name|struct
name|tpt_attributes
name|attr
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|iwch_mw
operator|*
name|to_iwch_mw
argument_list|(
argument|struct ib_mw *ibmw
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibmw
argument_list|,
expr|struct
name|iwch_mw
argument_list|,
name|ibmw
argument_list|)
return|;
block|}
end_expr_stmt

begin_struct
struct|struct
name|iwch_cq
block|{
name|struct
name|ib_cq
name|ibcq
decl_stmt|;
name|struct
name|iwch_dev
modifier|*
name|rhp
decl_stmt|;
name|struct
name|t3_cq
name|cq
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
name|int
name|refcnt
decl_stmt|;
name|u32
comment|/* __user */
modifier|*
name|user_rptr_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|iwch_cq
operator|*
name|to_iwch_cq
argument_list|(
argument|struct ib_cq *ibcq
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibcq
argument_list|,
expr|struct
name|iwch_cq
argument_list|,
name|ibcq
argument_list|)
return|;
block|}
end_expr_stmt

begin_enum
enum|enum
name|IWCH_QP_FLAGS
block|{
name|QP_QUIESCED
init|=
literal|0x01
block|}
enum|;
end_enum

begin_struct
struct|struct
name|iwch_mpa_attributes
block|{
name|u8
name|recv_marker_enabled
decl_stmt|;
name|u8
name|xmit_marker_enabled
decl_stmt|;
comment|/* iWARP: enable inbound Read Resp. */
name|u8
name|crc_enabled
decl_stmt|;
name|u8
name|version
decl_stmt|;
comment|/* 0 or 1 */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwch_qp_attributes
block|{
name|u32
name|scq
decl_stmt|;
name|u32
name|rcq
decl_stmt|;
name|u32
name|sq_num_entries
decl_stmt|;
name|u32
name|rq_num_entries
decl_stmt|;
name|u32
name|sq_max_sges
decl_stmt|;
name|u32
name|sq_max_sges_rdma_write
decl_stmt|;
name|u32
name|rq_max_sges
decl_stmt|;
name|u32
name|state
decl_stmt|;
name|u8
name|enable_rdma_read
decl_stmt|;
name|u8
name|enable_rdma_write
decl_stmt|;
comment|/* enable inbound Read Resp. */
name|u8
name|enable_bind
decl_stmt|;
name|u8
name|enable_mmid0_fastreg
decl_stmt|;
comment|/* Enable STAG0 + Fast-register */
comment|/* 	 * Next QP state. If specify the current state, only the 	 * QP attributes will be modified. 	 */
name|u32
name|max_ord
decl_stmt|;
name|u32
name|max_ird
decl_stmt|;
name|u32
name|pd
decl_stmt|;
comment|/* IN */
name|u32
name|next_state
decl_stmt|;
name|char
name|terminate_buffer
index|[
literal|52
index|]
decl_stmt|;
name|u32
name|terminate_msg_len
decl_stmt|;
name|u8
name|is_terminate_local
decl_stmt|;
name|struct
name|iwch_mpa_attributes
name|mpa_attr
decl_stmt|;
comment|/* IN-OUT */
name|struct
name|iwch_ep
modifier|*
name|llp_stream_handle
decl_stmt|;
name|char
modifier|*
name|stream_msg_buf
decl_stmt|;
comment|/* Last stream msg. before Idle -> RTS */
name|u32
name|stream_msg_buf_len
decl_stmt|;
comment|/* Only on Idle -> RTS */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwch_qp
block|{
name|struct
name|ib_qp
name|ibqp
decl_stmt|;
name|struct
name|iwch_dev
modifier|*
name|rhp
decl_stmt|;
name|struct
name|iwch_ep
modifier|*
name|ep
decl_stmt|;
name|struct
name|iwch_qp_attributes
name|attr
decl_stmt|;
name|struct
name|t3_wq
name|wq
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
name|int
name|refcnt
decl_stmt|;
name|enum
name|IWCH_QP_FLAGS
name|flags
decl_stmt|;
name|struct
name|callout
name|timer
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|int
name|qp_quiesced
parameter_list|(
name|struct
name|iwch_qp
modifier|*
name|qhp
parameter_list|)
block|{
return|return
name|qhp
operator|->
name|flags
operator|&
name|QP_QUIESCED
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|iwch_qp
operator|*
name|to_iwch_qp
argument_list|(
argument|struct ib_qp *ibqp
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibqp
argument_list|,
expr|struct
name|iwch_qp
argument_list|,
name|ibqp
argument_list|)
return|;
block|}
end_expr_stmt

begin_function_decl
name|void
name|iwch_qp_add_ref
parameter_list|(
name|struct
name|ib_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iwch_qp_rem_ref
parameter_list|(
name|struct
name|ib_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|iwch_ucontext
block|{
name|struct
name|ib_ucontext
name|ibucontext
decl_stmt|;
name|struct
name|cxio_ucontext
name|uctx
decl_stmt|;
name|u32
name|key
decl_stmt|;
name|struct
name|mtx
name|mmap_lock
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|iwch_mm_entry
argument_list|)
name|mmaps
expr_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|iwch_ucontext
operator|*
name|to_iwch_ucontext
argument_list|(
argument|struct ib_ucontext *c
argument_list|)
block|{
return|return
name|container_of
argument_list|(
name|c
argument_list|,
expr|struct
name|iwch_ucontext
argument_list|,
name|ibucontext
argument_list|)
return|;
block|}
end_expr_stmt

begin_struct
struct|struct
name|iwch_mm_entry
block|{
name|TAILQ_ENTRY
argument_list|(
argument|iwch_mm_entry
argument_list|)
name|entry
expr_stmt|;
name|u64
name|addr
decl_stmt|;
name|u32
name|key
decl_stmt|;
name|unsigned
name|len
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|iwch_mm_entry
operator|*
name|remove_mmap
argument_list|(
argument|struct iwch_ucontext *ucontext
argument_list|,
argument|u32 key
argument_list|,
argument|unsigned len
argument_list|)
block|{ 	struct
name|iwch_mm_entry
operator|*
name|tmp
block|,
operator|*
name|mm
block|;
name|mtx_lock
argument_list|(
operator|&
name|ucontext
operator|->
name|mmap_lock
argument_list|)
block|;
name|TAILQ_FOREACH_SAFE
argument_list|(
argument|mm
argument_list|,
argument|&ucontext->mmaps
argument_list|,
argument|entry
argument_list|,
argument|tmp
argument_list|)
block|{
if|if
condition|(
name|mm
operator|->
name|key
operator|==
name|key
operator|&&
name|mm
operator|->
name|len
operator|==
name|len
condition|)
block|{
name|TAILQ_REMOVE
argument_list|(
operator|&
name|ucontext
operator|->
name|mmaps
argument_list|,
name|mm
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|ucontext
operator|->
name|mmap_lock
argument_list|)
expr_stmt|;
name|CTR4
argument_list|(
name|KTR_IW_CXGB
argument_list|,
literal|"%s key 0x%x addr 0x%llx len %d\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|key
argument_list|,
operator|(
name|unsigned
name|long
name|long
operator|)
name|mm
operator|->
name|addr
argument_list|,
name|mm
operator|->
name|len
argument_list|)
expr_stmt|;
return|return
name|mm
return|;
block|}
block|}
name|mtx_unlock
argument_list|(
operator|&
name|ucontext
operator|->
name|mmap_lock
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|NULL
return|;
end_return

begin_function
unit|}  static
name|__inline
name|void
name|insert_mmap
parameter_list|(
name|struct
name|iwch_ucontext
modifier|*
name|ucontext
parameter_list|,
name|struct
name|iwch_mm_entry
modifier|*
name|mm
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|ucontext
operator|->
name|mmap_lock
argument_list|)
expr_stmt|;
name|CTR4
argument_list|(
name|KTR_IW_CXGB
argument_list|,
literal|"%s key 0x%x addr 0x%llx len %d\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|mm
operator|->
name|key
argument_list|,
operator|(
name|unsigned
name|long
name|long
operator|)
name|mm
operator|->
name|addr
argument_list|,
name|mm
operator|->
name|len
argument_list|)
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|ucontext
operator|->
name|mmaps
argument_list|,
name|mm
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|ucontext
operator|->
name|mmap_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_enum
enum|enum
name|iwch_qp_attr_mask
block|{
name|IWCH_QP_ATTR_NEXT_STATE
init|=
literal|1
operator|<<
literal|0
block|,
name|IWCH_QP_ATTR_ENABLE_RDMA_READ
init|=
literal|1
operator|<<
literal|7
block|,
name|IWCH_QP_ATTR_ENABLE_RDMA_WRITE
init|=
literal|1
operator|<<
literal|8
block|,
name|IWCH_QP_ATTR_ENABLE_RDMA_BIND
init|=
literal|1
operator|<<
literal|9
block|,
name|IWCH_QP_ATTR_MAX_ORD
init|=
literal|1
operator|<<
literal|11
block|,
name|IWCH_QP_ATTR_MAX_IRD
init|=
literal|1
operator|<<
literal|12
block|,
name|IWCH_QP_ATTR_LLP_STREAM_HANDLE
init|=
literal|1
operator|<<
literal|22
block|,
name|IWCH_QP_ATTR_STREAM_MSG_BUFFER
init|=
literal|1
operator|<<
literal|23
block|,
name|IWCH_QP_ATTR_MPA_ATTR
init|=
literal|1
operator|<<
literal|24
block|,
name|IWCH_QP_ATTR_QP_CONTEXT_ACTIVATE
init|=
literal|1
operator|<<
literal|25
block|,
name|IWCH_QP_ATTR_VALID_MODIFY
init|=
operator|(
name|IWCH_QP_ATTR_ENABLE_RDMA_READ
operator||
name|IWCH_QP_ATTR_ENABLE_RDMA_WRITE
operator||
name|IWCH_QP_ATTR_MAX_ORD
operator||
name|IWCH_QP_ATTR_MAX_IRD
operator||
name|IWCH_QP_ATTR_LLP_STREAM_HANDLE
operator||
name|IWCH_QP_ATTR_STREAM_MSG_BUFFER
operator||
name|IWCH_QP_ATTR_MPA_ATTR
operator||
name|IWCH_QP_ATTR_QP_CONTEXT_ACTIVATE
operator|)
block|}
enum|;
end_enum

begin_function_decl
name|int
name|iwch_modify_qp
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|,
name|struct
name|iwch_qp
modifier|*
name|qhp
parameter_list|,
name|enum
name|iwch_qp_attr_mask
name|mask
parameter_list|,
name|struct
name|iwch_qp_attributes
modifier|*
name|attrs
parameter_list|,
name|int
name|internal
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|iwch_qp_state
block|{
name|IWCH_QP_STATE_IDLE
block|,
name|IWCH_QP_STATE_RTS
block|,
name|IWCH_QP_STATE_ERROR
block|,
name|IWCH_QP_STATE_TERMINATE
block|,
name|IWCH_QP_STATE_CLOSING
block|,
name|IWCH_QP_STATE_TOT
block|}
enum|;
end_enum

begin_function
specifier|static
name|__inline
name|int
name|iwch_convert_state
parameter_list|(
name|enum
name|ib_qp_state
name|ib_state
parameter_list|)
block|{
switch|switch
condition|(
name|ib_state
condition|)
block|{
case|case
name|IB_QPS_RESET
case|:
case|case
name|IB_QPS_INIT
case|:
return|return
name|IWCH_QP_STATE_IDLE
return|;
case|case
name|IB_QPS_RTS
case|:
return|return
name|IWCH_QP_STATE_RTS
return|;
case|case
name|IB_QPS_SQD
case|:
return|return
name|IWCH_QP_STATE_CLOSING
return|;
case|case
name|IB_QPS_SQE
case|:
return|return
name|IWCH_QP_STATE_TERMINATE
return|;
case|case
name|IB_QPS_ERR
case|:
return|return
name|IWCH_QP_STATE_ERROR
return|;
default|default:
return|return
operator|-
literal|1
return|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|u32
name|iwch_ib_to_tpt_access
parameter_list|(
name|int
name|acc
parameter_list|)
block|{
return|return
operator|(
name|acc
operator|&
name|IB_ACCESS_REMOTE_WRITE
condition|?
name|TPT_REMOTE_WRITE
else|:
literal|0
operator|)
operator||
operator|(
name|acc
operator|&
name|IB_ACCESS_REMOTE_READ
condition|?
name|TPT_REMOTE_READ
else|:
literal|0
operator|)
operator||
operator|(
name|acc
operator|&
name|IB_ACCESS_LOCAL_WRITE
condition|?
name|TPT_LOCAL_WRITE
else|:
literal|0
operator|)
operator||
name|TPT_LOCAL_READ
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u32
name|iwch_ib_to_mwbind_access
parameter_list|(
name|int
name|acc
parameter_list|)
block|{
return|return
operator|(
name|acc
operator|&
name|IB_ACCESS_REMOTE_WRITE
condition|?
name|T3_MEM_ACCESS_REM_WRITE
else|:
literal|0
operator|)
operator||
operator|(
name|acc
operator|&
name|IB_ACCESS_REMOTE_READ
condition|?
name|T3_MEM_ACCESS_REM_READ
else|:
literal|0
operator|)
operator||
operator|(
name|acc
operator|&
name|IB_ACCESS_LOCAL_WRITE
condition|?
name|T3_MEM_ACCESS_LOCAL_WRITE
else|:
literal|0
operator|)
operator||
name|T3_MEM_ACCESS_LOCAL_READ
return|;
block|}
end_function

begin_enum
enum|enum
name|iwch_mmid_state
block|{
name|IWCH_STAG_STATE_VALID
block|,
name|IWCH_STAG_STATE_INVALID
block|}
enum|;
end_enum

begin_enum
enum|enum
name|iwch_qp_query_flags
block|{
name|IWCH_QP_QUERY_CONTEXT_NONE
init|=
literal|0x0
block|,
comment|/* No ctx; Only attrs */
name|IWCH_QP_QUERY_CONTEXT_GET
init|=
literal|0x1
block|,
comment|/* Get ctx + attrs */
name|IWCH_QP_QUERY_CONTEXT_SUSPEND
init|=
literal|0x2
block|,
comment|/* Not Supported */
comment|/* 	 * Quiesce QP context; Consumer 	 * will NOT replay outstanding WR 	 */
name|IWCH_QP_QUERY_CONTEXT_QUIESCE
init|=
literal|0x4
block|,
name|IWCH_QP_QUERY_CONTEXT_REMOVE
init|=
literal|0x8
block|,
name|IWCH_QP_QUERY_TEST_USERWRITE
init|=
literal|0x32
comment|/* Test special */
block|}
enum|;
end_enum

begin_function_decl
name|int
name|iwch_post_send
parameter_list|(
name|struct
name|ib_qp
modifier|*
name|ibqp
parameter_list|,
name|struct
name|ib_send_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ib_send_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_post_receive
parameter_list|(
name|struct
name|ib_qp
modifier|*
name|ibqp
parameter_list|,
name|struct
name|ib_recv_wr
modifier|*
name|wr
parameter_list|,
name|struct
name|ib_recv_wr
modifier|*
modifier|*
name|bad_wr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_bind_mw
parameter_list|(
name|struct
name|ib_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ib_mw
modifier|*
name|mw
parameter_list|,
name|struct
name|ib_mw_bind
modifier|*
name|mw_bind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_poll_cq
parameter_list|(
name|struct
name|ib_cq
modifier|*
name|ibcq
parameter_list|,
name|int
name|num_entries
parameter_list|,
name|struct
name|ib_wc
modifier|*
name|wc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_post_terminate
parameter_list|(
name|struct
name|iwch_qp
modifier|*
name|qhp
parameter_list|,
name|struct
name|respQ_msg_t
modifier|*
name|rsp_msg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_register_device
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iwch_unregister_device
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_quiesce_qps
parameter_list|(
name|struct
name|iwch_cq
modifier|*
name|chp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_resume_qps
parameter_list|(
name|struct
name|iwch_cq
modifier|*
name|chp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|stop_read_rep_timer
parameter_list|(
name|struct
name|iwch_qp
modifier|*
name|qhp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_register_mem
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|,
name|struct
name|iwch_pd
modifier|*
name|php
parameter_list|,
name|struct
name|iwch_mr
modifier|*
name|mhp
parameter_list|,
name|int
name|shift
parameter_list|,
name|__be64
modifier|*
name|page_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_reregister_mem
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|,
name|struct
name|iwch_pd
modifier|*
name|php
parameter_list|,
name|struct
name|iwch_mr
modifier|*
name|mhp
parameter_list|,
name|int
name|shift
parameter_list|,
name|__be64
modifier|*
name|page_list
parameter_list|,
name|int
name|npages
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|build_phys_page_list
parameter_list|(
name|struct
name|ib_phys_buf
modifier|*
name|buffer_list
parameter_list|,
name|int
name|num_phys_buf
parameter_list|,
name|u64
modifier|*
name|iova_start
parameter_list|,
name|u64
modifier|*
name|total_size
parameter_list|,
name|int
modifier|*
name|npages
parameter_list|,
name|int
modifier|*
name|shift
parameter_list|,
name|__be64
modifier|*
modifier|*
name|page_list
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|IWCH_NODE_DESC
value|"cxgb3 Chelsio Communications"
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

