begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  Copyright (c) 2007, 2008 Chelsio Inc. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.   2. Neither the name of the Chelsio Corporation nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  $FreeBSD$  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IWCH_H__
end_ifndef

begin_define
define|#
directive|define
name|__IWCH_H__
end_define

begin_struct_decl
struct_decl|struct
name|iwch_pd
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|iwch_cq
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|iwch_qp
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|iwch_mr
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|iwch_rnic_attributes
block|{
name|u32
name|vendor_id
decl_stmt|;
name|u32
name|vendor_part_id
decl_stmt|;
name|u32
name|max_qps
decl_stmt|;
name|u32
name|max_wrs
decl_stmt|;
comment|/* Max for any SQ/RQ */
name|u32
name|max_sge_per_wr
decl_stmt|;
name|u32
name|max_sge_per_rdma_write_wr
decl_stmt|;
comment|/* for RDMA Write WR */
name|u32
name|max_cqs
decl_stmt|;
name|u32
name|max_cqes_per_cq
decl_stmt|;
name|u32
name|max_mem_regs
decl_stmt|;
name|u32
name|max_phys_buf_entries
decl_stmt|;
comment|/* for phys buf list */
name|u32
name|max_pds
decl_stmt|;
comment|/* 	 * The memory page sizes supported by this RNIC. 	 * Bit position i in bitmap indicates page of 	 * size (4k)^i.  Phys block list mode unsupported. 	 */
name|u32
name|mem_pgsizes_bitmask
decl_stmt|;
name|u8
name|can_resize_wq
decl_stmt|;
comment|/* 	 * The maximum number of RDMA Reads that can be outstanding 	 * per QP with this RNIC as the target. 	 */
name|u32
name|max_rdma_reads_per_qp
decl_stmt|;
comment|/* 	 * The maximum number of resources used for RDMA Reads 	 * by this RNIC with this RNIC as the target. 	 */
name|u32
name|max_rdma_read_resources
decl_stmt|;
comment|/* 	 * The max depth per QP for initiation of RDMA Read 	 * by this RNIC. 	 */
name|u32
name|max_rdma_read_qp_depth
decl_stmt|;
comment|/* 	 * The maximum depth for initiation of RDMA Read 	 * operations by this RNIC on all QPs 	 */
name|u32
name|max_rdma_read_depth
decl_stmt|;
name|u8
name|rq_overflow_handled
decl_stmt|;
name|u32
name|can_modify_ird
decl_stmt|;
name|u32
name|can_modify_ord
decl_stmt|;
name|u32
name|max_mem_windows
decl_stmt|;
name|u32
name|stag0_value
decl_stmt|;
name|u8
name|zbva_support
decl_stmt|;
name|u8
name|local_invalidate_fence
decl_stmt|;
name|u32
name|cq_overflow_detection
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwch_dev
block|{
name|struct
name|ib_device
name|ibdev
decl_stmt|;
name|struct
name|cxio_rdev
name|rdev
decl_stmt|;
name|u32
name|device_cap_flags
decl_stmt|;
name|struct
name|iwch_rnic_attributes
name|attr
decl_stmt|;
name|struct
name|kvl
name|cqidr
decl_stmt|;
name|struct
name|kvl
name|qpidr
decl_stmt|;
name|struct
name|kvl
name|mmidr
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|iwch_dev
argument_list|)
name|entry
expr_stmt|;
block|}
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|container_of
end_ifndef

begin_define
define|#
directive|define
name|container_of
parameter_list|(
name|p
parameter_list|,
name|stype
parameter_list|,
name|field
parameter_list|)
value|((stype *)(((uint8_t *)(p)) - offsetof(stype, field)))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|struct
name|iwch_dev
modifier|*
name|to_iwch_dev
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ibdev
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibdev
argument_list|,
expr|struct
name|iwch_dev
argument_list|,
name|ibdev
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t3b_device
parameter_list|(
specifier|const
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|)
block|{
return|return
name|rhp
operator|->
name|rdev
operator|.
name|t3cdev_p
operator|->
name|type
operator|==
name|T3B
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t3a_device
parameter_list|(
specifier|const
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|)
block|{
return|return
name|rhp
operator|->
name|rdev
operator|.
name|t3cdev_p
operator|->
name|type
operator|==
name|T3A
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|iwch_cq
modifier|*
name|get_chp
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|,
name|u32
name|cqid
parameter_list|)
block|{
return|return
name|kvl_lookup
argument_list|(
operator|&
name|rhp
operator|->
name|cqidr
argument_list|,
name|cqid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|iwch_qp
modifier|*
name|get_qhp
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|,
name|u32
name|qpid
parameter_list|)
block|{
return|return
name|kvl_lookup
argument_list|(
operator|&
name|rhp
operator|->
name|qpidr
argument_list|,
name|qpid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|iwch_mr
modifier|*
name|get_mhp
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|,
name|u32
name|mmid
parameter_list|)
block|{
return|return
name|kvl_lookup
argument_list|(
operator|&
name|rhp
operator|->
name|mmidr
argument_list|,
name|mmid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|insert_handle
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|,
name|struct
name|kvl
modifier|*
name|kvlp
parameter_list|,
name|void
modifier|*
name|handle
parameter_list|,
name|u32
name|id
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|u32
name|newid
decl_stmt|;
do|do
block|{
name|mtx_lock
argument_list|(
operator|&
name|rhp
operator|->
name|lock
argument_list|)
expr_stmt|;
name|ret
operator|=
name|kvl_alloc_above
argument_list|(
name|kvlp
argument_list|,
name|handle
argument_list|,
name|id
argument_list|,
operator|&
name|newid
argument_list|)
expr_stmt|;
name|WARN_ON
argument_list|(
name|ret
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|WARN_ON
argument_list|(
operator|!
name|ret
operator|&&
name|newid
operator|!=
name|id
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|rhp
operator|->
name|lock
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
name|EAGAIN
condition|)
do|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|remove_handle
parameter_list|(
name|struct
name|iwch_dev
modifier|*
name|rhp
parameter_list|,
name|struct
name|kvl
modifier|*
name|kvlp
parameter_list|,
name|u32
name|id
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|rhp
operator|->
name|lock
argument_list|)
expr_stmt|;
name|kvl_delete
argument_list|(
name|kvlp
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|rhp
operator|->
name|lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
specifier|extern
name|struct
name|cxgb_client
name|t3c_client
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|cxgb_cpl_handler_func
name|t3c_handlers
index|[
name|NUM_CPL_CMDS
index|]
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
name|iwch_ev_dispatch
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev_p
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

