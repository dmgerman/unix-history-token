begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  Copyright (c) 2007, 2008 Chelsio Inc. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.   2. Neither the name of the Chelsio Corporation nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  $FreeBSD$  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CXIO_HAL_H__
end_ifndef

begin_define
define|#
directive|define
name|__CXIO_HAL_H__
end_define

begin_include
include|#
directive|include
file|<sys/condvar.h>
end_include

begin_include
include|#
directive|include
file|<sys/ktr.h>
end_include

begin_define
define|#
directive|define
name|T3_CTRL_QP_ID
value|FW_RI_SGEEC_START
end_define

begin_define
define|#
directive|define
name|T3_CTL_QP_TID
value|FW_RI_TID_START
end_define

begin_define
define|#
directive|define
name|T3_CTRL_QP_SIZE_LOG2
value|8
end_define

begin_define
define|#
directive|define
name|T3_CTRL_CQ_ID
value|0
end_define

begin_comment
comment|/* TBD */
end_comment

begin_define
define|#
directive|define
name|T3_MAX_NUM_RI
value|(1<<15)
end_define

begin_define
define|#
directive|define
name|T3_MAX_NUM_QP
value|(1<<15)
end_define

begin_define
define|#
directive|define
name|T3_MAX_NUM_CQ
value|(1<<15)
end_define

begin_define
define|#
directive|define
name|T3_MAX_NUM_PD
value|(1<<15)
end_define

begin_define
define|#
directive|define
name|T3_MAX_PBL_SIZE
value|256
end_define

begin_define
define|#
directive|define
name|T3_MAX_RQ_SIZE
value|1024
end_define

begin_define
define|#
directive|define
name|T3_MAX_QP_DEPTH
value|(T3_MAX_RQ_SIZE-1)
end_define

begin_define
define|#
directive|define
name|T3_MAX_CQ_DEPTH
value|65536
end_define

begin_define
define|#
directive|define
name|T3_MAX_NUM_STAG
value|(1<<15)
end_define

begin_define
define|#
directive|define
name|T3_MAX_MR_SIZE
value|0x100000000ULL
end_define

begin_define
define|#
directive|define
name|T3_PAGESIZE_MASK
value|0xffff000
end_define

begin_comment
comment|/* 4KB-128MB */
end_comment

begin_define
define|#
directive|define
name|T3_STAG_UNSET
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|T3_MAX_DEV_NAME_LEN
value|32
end_define

begin_struct
struct|struct
name|cxio_hal_ctrl_qp
block|{
name|u32
name|wptr
decl_stmt|;
name|u32
name|rptr
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
comment|/* for the wtpr, can sleep */
name|union
name|t3_wr
modifier|*
name|workq
decl_stmt|;
comment|/* the work request queue */
name|bus_addr_t
name|dma_addr
decl_stmt|;
comment|/* pci bus address of the workq */
name|void
modifier|*
name|doorbell
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cxio_hal_resource
block|{
name|struct
name|buf_ring
modifier|*
name|tpt_fifo
decl_stmt|;
name|struct
name|mtx
name|tpt_fifo_lock
decl_stmt|;
name|struct
name|buf_ring
modifier|*
name|qpid_fifo
decl_stmt|;
name|struct
name|mtx
name|qpid_fifo_lock
decl_stmt|;
name|struct
name|buf_ring
modifier|*
name|cqid_fifo
decl_stmt|;
name|struct
name|mtx
name|cqid_fifo_lock
decl_stmt|;
name|struct
name|buf_ring
modifier|*
name|pdid_fifo
decl_stmt|;
name|struct
name|mtx
name|pdid_fifo_lock
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cxio_qpid
block|{
name|TAILQ_ENTRY
argument_list|(
argument|cxio_qpid
argument_list|)
name|entry
expr_stmt|;
name|u32
name|qpid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cxio_ucontext
block|{
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|cxio_qpid
argument_list|)
name|qpids
expr_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cxio_rdev
block|{
name|struct
name|adapter
modifier|*
name|adap
decl_stmt|;
name|struct
name|rdma_info
name|rnic_info
decl_stmt|;
name|struct
name|cxio_hal_resource
modifier|*
name|rscp
decl_stmt|;
name|struct
name|cxio_hal_ctrl_qp
name|ctrl_qp
decl_stmt|;
name|unsigned
name|long
name|qpshift
decl_stmt|;
name|u32
name|qpnr
decl_stmt|;
name|u32
name|qpmask
decl_stmt|;
name|struct
name|cxio_ucontext
name|uctx
decl_stmt|;
name|struct
name|gen_pool
modifier|*
name|pbl_pool
decl_stmt|;
name|struct
name|gen_pool
modifier|*
name|rqt_pool
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|cxio_rdev
argument_list|)
name|entry
expr_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|int
name|cxio_num_stags
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev_p
parameter_list|)
block|{
return|return
name|min
argument_list|(
operator|(
name|int
operator|)
name|T3_MAX_NUM_STAG
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
name|rdev_p
operator|->
name|rnic_info
operator|.
name|tpt_top
operator|-
name|rdev_p
operator|->
name|rnic_info
operator|.
name|tpt_base
operator|)
operator|>>
literal|5
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|cxio_hal_ev_callback_func_t
function_decl|)
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev_p
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|RSPQ_CQID
parameter_list|(
name|rsp
parameter_list|)
value|(be32toh(rsp->cq_ptrid)& 0xffff)
end_define

begin_define
define|#
directive|define
name|RSPQ_CQPTR
parameter_list|(
name|rsp
parameter_list|)
value|((be32toh(rsp->cq_ptrid)>> 16)& 0xffff)
end_define

begin_define
define|#
directive|define
name|RSPQ_GENBIT
parameter_list|(
name|rsp
parameter_list|)
value|((be32toh(rsp->flags)>> 16)& 1)
end_define

begin_define
define|#
directive|define
name|RSPQ_OVERFLOW
parameter_list|(
name|rsp
parameter_list|)
value|((be32toh(rsp->flags)>> 17)& 1)
end_define

begin_define
define|#
directive|define
name|RSPQ_AN
parameter_list|(
name|rsp
parameter_list|)
value|((be32toh(rsp->flags)>> 18)& 1)
end_define

begin_define
define|#
directive|define
name|RSPQ_SE
parameter_list|(
name|rsp
parameter_list|)
value|((be32toh(rsp->flags)>> 19)& 1)
end_define

begin_define
define|#
directive|define
name|RSPQ_NOTIFY
parameter_list|(
name|rsp
parameter_list|)
value|((be32toh(rsp->flags)>> 20)& 1)
end_define

begin_define
define|#
directive|define
name|RSPQ_CQBRANCH
parameter_list|(
name|rsp
parameter_list|)
value|((be32toh(rsp->flags)>> 21)& 1)
end_define

begin_define
define|#
directive|define
name|RSPQ_CREDIT_THRESH
parameter_list|(
name|rsp
parameter_list|)
value|((be32toh(rsp->flags)>> 22)& 1)
end_define

begin_struct
struct|struct
name|respQ_msg_t
block|{
name|__be32
name|flags
decl_stmt|;
comment|/* flit 0 */
name|__be32
name|cq_ptrid
decl_stmt|;
name|__be64
name|rsvd
decl_stmt|;
comment|/* flit 1 */
name|struct
name|t3_cqe
name|cqe
decl_stmt|;
comment|/* flits 2-3 */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|t3_cq_opcode
block|{
name|CQ_ARM_AN
init|=
literal|0x2
block|,
name|CQ_ARM_SE
init|=
literal|0x6
block|,
name|CQ_FORCE_AN
init|=
literal|0x3
block|,
name|CQ_CREDIT_UPDATE
init|=
literal|0x7
block|}
enum|;
end_enum

begin_function_decl
name|int
name|cxio_rdev_open
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_rdev_close
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_hal_cq_op
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|,
name|enum
name|t3_cq_opcode
name|op
parameter_list|,
name|u32
name|credit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_create_cq
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|,
name|int
name|kernel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_destroy_cq
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_release_ucontext
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|struct
name|cxio_ucontext
modifier|*
name|uctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_init_ucontext
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|struct
name|cxio_ucontext
modifier|*
name|uctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_create_qp
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|u32
name|kernel_domain
parameter_list|,
name|struct
name|t3_wq
modifier|*
name|wq
parameter_list|,
name|struct
name|cxio_ucontext
modifier|*
name|uctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_destroy_qp
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|struct
name|t3_wq
modifier|*
name|wq
parameter_list|,
name|struct
name|cxio_ucontext
modifier|*
name|uctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_peek_cq
parameter_list|(
name|struct
name|t3_wq
modifier|*
name|wr
parameter_list|,
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|,
name|int
name|opcode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_write_pbl
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev_p
parameter_list|,
name|__be64
modifier|*
name|pbl
parameter_list|,
name|u32
name|pbl_addr
parameter_list|,
name|u32
name|pbl_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_register_phys_mem
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|u32
modifier|*
name|stag
parameter_list|,
name|u32
name|pdid
parameter_list|,
name|enum
name|tpt_mem_perm
name|perm
parameter_list|,
name|u32
name|zbva
parameter_list|,
name|u64
name|to
parameter_list|,
name|u32
name|len
parameter_list|,
name|u8
name|page_size
parameter_list|,
name|u32
name|pbl_size
parameter_list|,
name|u32
name|pbl_addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_reregister_phys_mem
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|u32
modifier|*
name|stag
parameter_list|,
name|u32
name|pdid
parameter_list|,
name|enum
name|tpt_mem_perm
name|perm
parameter_list|,
name|u32
name|zbva
parameter_list|,
name|u64
name|to
parameter_list|,
name|u32
name|len
parameter_list|,
name|u8
name|page_size
parameter_list|,
name|u32
name|pbl_size
parameter_list|,
name|u32
name|pbl_addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_dereg_mem
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|u32
name|stag
parameter_list|,
name|u32
name|pbl_size
parameter_list|,
name|u32
name|pbl_addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_allocate_window
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|u32
modifier|*
name|stag
parameter_list|,
name|u32
name|pdid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_deallocate_window
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|u32
name|stag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_rdma_init
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|struct
name|t3_rdma_init_attr
modifier|*
name|attr
parameter_list|,
name|struct
name|socket
modifier|*
name|so
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u32
name|cxio_hal_get_pdid
parameter_list|(
name|struct
name|cxio_hal_resource
modifier|*
name|rscp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_hal_put_pdid
parameter_list|(
name|struct
name|cxio_hal_resource
modifier|*
name|rscp
parameter_list|,
name|u32
name|pdid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_hal_init
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_hal_uninit
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_hal_exit
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_flush_rq
parameter_list|(
name|struct
name|t3_wq
modifier|*
name|wq
parameter_list|,
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_flush_sq
parameter_list|(
name|struct
name|t3_wq
modifier|*
name|wq
parameter_list|,
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_count_rcqes
parameter_list|(
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|t3_wq
modifier|*
name|wq
parameter_list|,
name|int
modifier|*
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_count_scqes
parameter_list|(
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|t3_wq
modifier|*
name|wq
parameter_list|,
name|int
modifier|*
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_flush_hw_cq
parameter_list|(
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cxio_poll_cq
parameter_list|(
name|struct
name|t3_wq
modifier|*
name|wq
parameter_list|,
name|struct
name|t3_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|t3_cqe
modifier|*
name|cqe
parameter_list|,
name|u8
modifier|*
name|cqe_flushed
parameter_list|,
name|u64
modifier|*
name|cookie
parameter_list|,
name|u32
modifier|*
name|credit
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|MOD
value|"iw_cxgb: "
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|INVARIANTS
end_ifdef

begin_function_decl
name|void
name|cxio_dump_tpt
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rev
parameter_list|,
name|u32
name|stag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_dump_pbl
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rev
parameter_list|,
name|u32
name|pbl_addr
parameter_list|,
name|uint32_t
name|len
parameter_list|,
name|u8
name|shift
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_dump_wqe
parameter_list|(
name|union
name|t3_wr
modifier|*
name|wqe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_dump_wce
parameter_list|(
name|struct
name|t3_cqe
modifier|*
name|wce
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_dump_rqt
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|u32
name|hwtid
parameter_list|,
name|int
name|nents
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cxio_dump_tcb
parameter_list|(
name|struct
name|cxio_rdev
modifier|*
name|rdev
parameter_list|,
name|u32
name|hwtid
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|cxfree
parameter_list|(
name|a
parameter_list|)
value|free((a), M_DEVBUF);
end_define

begin_include
include|#
directive|include
file|<sys/blist.h>
end_include

begin_struct
struct|struct
name|gen_pool
block|{
name|blist_t
name|gen_list
decl_stmt|;
name|daddr_t
name|gen_base
decl_stmt|;
name|int
name|gen_chunk_shift
decl_stmt|;
name|struct
name|mtx
name|gen_lock
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|gen_pool
operator|*
name|gen_pool_create
argument_list|(
argument|daddr_t base
argument_list|,
argument|u_int chunk_shift
argument_list|,
argument|u_int len
argument_list|)
block|{ 	struct
name|gen_pool
operator|*
name|gp
block|;
name|gp
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
expr|struct
name|gen_pool
argument_list|)
argument_list|,
name|M_DEVBUF
argument_list|,
name|M_NOWAIT
argument_list|)
block|;
if|if
condition|(
name|gp
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|memset
argument_list|(
name|gp
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
expr|struct
name|gen_pool
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|gp
operator|->
name|gen_list
operator|=
name|blist_create
argument_list|(
name|len
operator|>>
name|chunk_shift
argument_list|,
name|M_NOWAIT
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|gp
operator|->
name|gen_list
operator|==
name|NULL
condition|)
block|{
name|free
argument_list|(
name|gp
argument_list|,
name|M_DEVBUF
argument_list|)
expr_stmt|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_if

begin_expr_stmt
name|blist_free
argument_list|(
name|gp
operator|->
name|gen_list
argument_list|,
literal|0
argument_list|,
name|len
operator|>>
name|chunk_shift
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|gp
operator|->
name|gen_base
operator|=
name|base
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|gp
operator|->
name|gen_chunk_shift
operator|=
name|chunk_shift
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|mtx_init
argument_list|(
operator|&
name|gp
operator|->
name|gen_lock
argument_list|,
literal|"genpool"
argument_list|,
name|NULL
argument_list|,
name|MTX_DUPOK
operator||
name|MTX_DEF
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|gp
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|unsigned
name|long
name|gen_pool_alloc
parameter_list|(
name|struct
name|gen_pool
modifier|*
name|gp
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|int
name|chunks
decl_stmt|;
name|daddr_t
name|blkno
decl_stmt|;
name|chunks
operator|=
operator|(
name|size
operator|+
operator|(
literal|1
operator|<<
name|gp
operator|->
name|gen_chunk_shift
operator|)
operator|-
literal|1
operator|)
operator|>>
name|gp
operator|->
name|gen_chunk_shift
expr_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|gp
operator|->
name|gen_lock
argument_list|)
expr_stmt|;
name|blkno
operator|=
name|blist_alloc
argument_list|(
name|gp
operator|->
name|gen_list
argument_list|,
name|chunks
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|gp
operator|->
name|gen_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|blkno
operator|==
name|SWAPBLK_NONE
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|gp
operator|->
name|gen_base
operator|+
operator|(
operator|(
literal|1
operator|<<
name|gp
operator|->
name|gen_chunk_shift
operator|)
operator|*
name|blkno
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|gen_pool_free
parameter_list|(
name|struct
name|gen_pool
modifier|*
name|gp
parameter_list|,
name|daddr_t
name|address
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|int
name|chunks
decl_stmt|;
name|daddr_t
name|blkno
decl_stmt|;
name|chunks
operator|=
operator|(
name|size
operator|+
operator|(
literal|1
operator|<<
name|gp
operator|->
name|gen_chunk_shift
operator|)
operator|-
literal|1
operator|)
operator|>>
name|gp
operator|->
name|gen_chunk_shift
expr_stmt|;
name|blkno
operator|=
operator|(
name|address
operator|-
name|gp
operator|->
name|gen_base
operator|)
operator|/
operator|(
literal|1
operator|<<
name|gp
operator|->
name|gen_chunk_shift
operator|)
expr_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|gp
operator|->
name|gen_lock
argument_list|)
expr_stmt|;
name|blist_free
argument_list|(
name|gp
operator|->
name|gen_list
argument_list|,
name|blkno
argument_list|,
name|chunks
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|gp
operator|->
name|gen_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|gen_pool_destroy
parameter_list|(
name|struct
name|gen_pool
modifier|*
name|gp
parameter_list|)
block|{
name|blist_destroy
argument_list|(
name|gp
operator|->
name|gen_list
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|gp
argument_list|,
name|M_DEVBUF
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|cxio_wait
parameter_list|(
name|ctx
parameter_list|,
name|lockp
parameter_list|,
name|cond
parameter_list|)
define|\
value|({ \ 	int __ret = 0; \ 	mtx_lock(lockp); \ 	while (!cond) { \                 msleep(ctx, lockp, 0, "cxio_wait", hz); \                 if (SIGPENDING(curthread)) { \ 			__ret = ERESTART; \                         break; \                 } \ 	} \ 	mtx_unlock(lockp); \ 	__ret; \ })
end_define

begin_define
define|#
directive|define
name|KTR_IW_CXGB
value|KTR_SPARE3
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

