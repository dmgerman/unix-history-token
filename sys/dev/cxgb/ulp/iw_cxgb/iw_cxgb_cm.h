begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  Copyright (c) 2007, 2008 Chelsio Inc. All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:   1. Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.   2. Neither the name of the Chelsio Corporation nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  $FreeBSD$  ***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IWCH_CM_H_
end_ifndef

begin_define
define|#
directive|define
name|_IWCH_CM_H_
end_define

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_include
include|#
directive|include
file|<rdma/iw_cm.h>
end_include

begin_include
include|#
directive|include
file|<sys/refcount.h>
end_include

begin_include
include|#
directive|include
file|<sys/condvar.h>
end_include

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_define
define|#
directive|define
name|MPA_KEY_REQ
value|"MPA ID Req Frame"
end_define

begin_define
define|#
directive|define
name|MPA_KEY_REP
value|"MPA ID Rep Frame"
end_define

begin_define
define|#
directive|define
name|MPA_MAX_PRIVATE_DATA
value|256
end_define

begin_define
define|#
directive|define
name|MPA_REV
value|0
end_define

begin_comment
comment|/* XXX - amso1100 uses rev 0 ! */
end_comment

begin_define
define|#
directive|define
name|MPA_REJECT
value|0x20
end_define

begin_define
define|#
directive|define
name|MPA_CRC
value|0x40
end_define

begin_define
define|#
directive|define
name|MPA_MARKERS
value|0x80
end_define

begin_define
define|#
directive|define
name|MPA_FLAGS_MASK
value|0xE0
end_define

begin_define
define|#
directive|define
name|put_ep
parameter_list|(
name|ep
parameter_list|)
value|{ \ 	CTR4(KTR_IW_CXGB, "put_ep (via %s:%u) ep %p refcnt %d", __FUNCTION__, __LINE__,  \ 	     ep, atomic_load_acq_int(&((ep)->refcount))); \ 	if (refcount_release(&((ep)->refcount)))  \ 		__free_ep(ep); \ }
end_define

begin_define
define|#
directive|define
name|get_ep
parameter_list|(
name|ep
parameter_list|)
value|{ \ 	CTR4(KTR_IW_CXGB, "get_ep (via %s:%u) ep %p, refcnt %d", __FUNCTION__, __LINE__, \ 	     ep, atomic_load_acq_int(&((ep)->refcount))); \ 	refcount_acquire(&((ep)->refcount));	  \ }
end_define

begin_struct
struct|struct
name|mpa_message
block|{
name|u8
name|key
index|[
literal|16
index|]
decl_stmt|;
name|u8
name|flags
decl_stmt|;
name|u8
name|revision
decl_stmt|;
name|__be16
name|private_data_size
decl_stmt|;
name|u8
name|private_data
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|terminate_message
block|{
name|u8
name|layer_etype
decl_stmt|;
name|u8
name|ecode
decl_stmt|;
name|__be16
name|hdrct_rsvd
decl_stmt|;
name|u8
name|len_hdrs
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|TERM_MAX_LENGTH
value|(sizeof(struct terminate_message) + 2 + 18 + 28)
end_define

begin_enum
enum|enum
name|iwch_layers_types
block|{
name|LAYER_RDMAP
init|=
literal|0x00
block|,
name|LAYER_DDP
init|=
literal|0x10
block|,
name|LAYER_MPA
init|=
literal|0x20
block|,
name|RDMAP_LOCAL_CATA
init|=
literal|0x00
block|,
name|RDMAP_REMOTE_PROT
init|=
literal|0x01
block|,
name|RDMAP_REMOTE_OP
init|=
literal|0x02
block|,
name|DDP_LOCAL_CATA
init|=
literal|0x00
block|,
name|DDP_TAGGED_ERR
init|=
literal|0x01
block|,
name|DDP_UNTAGGED_ERR
init|=
literal|0x02
block|,
name|DDP_LLP
init|=
literal|0x03
block|}
enum|;
end_enum

begin_enum
enum|enum
name|iwch_rdma_ecodes
block|{
name|RDMAP_INV_STAG
init|=
literal|0x00
block|,
name|RDMAP_BASE_BOUNDS
init|=
literal|0x01
block|,
name|RDMAP_ACC_VIOL
init|=
literal|0x02
block|,
name|RDMAP_STAG_NOT_ASSOC
init|=
literal|0x03
block|,
name|RDMAP_TO_WRAP
init|=
literal|0x04
block|,
name|RDMAP_INV_VERS
init|=
literal|0x05
block|,
name|RDMAP_INV_OPCODE
init|=
literal|0x06
block|,
name|RDMAP_STREAM_CATA
init|=
literal|0x07
block|,
name|RDMAP_GLOBAL_CATA
init|=
literal|0x08
block|,
name|RDMAP_CANT_INV_STAG
init|=
literal|0x09
block|,
name|RDMAP_UNSPECIFIED
init|=
literal|0xff
block|}
enum|;
end_enum

begin_enum
enum|enum
name|iwch_ddp_ecodes
block|{
name|DDPT_INV_STAG
init|=
literal|0x00
block|,
name|DDPT_BASE_BOUNDS
init|=
literal|0x01
block|,
name|DDPT_STAG_NOT_ASSOC
init|=
literal|0x02
block|,
name|DDPT_TO_WRAP
init|=
literal|0x03
block|,
name|DDPT_INV_VERS
init|=
literal|0x04
block|,
name|DDPU_INV_QN
init|=
literal|0x01
block|,
name|DDPU_INV_MSN_NOBUF
init|=
literal|0x02
block|,
name|DDPU_INV_MSN_RANGE
init|=
literal|0x03
block|,
name|DDPU_INV_MO
init|=
literal|0x04
block|,
name|DDPU_MSG_TOOBIG
init|=
literal|0x05
block|,
name|DDPU_INV_VERS
init|=
literal|0x06
block|}
enum|;
end_enum

begin_enum
enum|enum
name|iwch_mpa_ecodes
block|{
name|MPA_CRC_ERR
init|=
literal|0x02
block|,
name|MPA_MARKER_ERR
init|=
literal|0x03
block|}
enum|;
end_enum

begin_enum
enum|enum
name|iwch_ep_state
block|{
name|IDLE
init|=
literal|0
block|,
name|LISTEN
block|,
name|CONNECTING
block|,
name|MPA_REQ_WAIT
block|,
name|MPA_REQ_SENT
block|,
name|MPA_REQ_RCVD
block|,
name|MPA_REP_SENT
block|,
name|FPDU_MODE
block|,
name|ABORTING
block|,
name|CLOSING
block|,
name|MORIBUND
block|,
name|DEAD
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|iwch_ep_flags
block|{
name|PEER_ABORT_IN_PROGRESS
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|ABORT_REQ_IN_PROGRESS
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|iwch_ep_common
block|{
name|TAILQ_ENTRY
argument_list|(
argument|iwch_ep_common
argument_list|)
name|entry
expr_stmt|;
name|struct
name|iw_cm_id
modifier|*
name|cm_id
decl_stmt|;
name|struct
name|iwch_qp
modifier|*
name|qp
decl_stmt|;
name|struct
name|toedev
modifier|*
name|tdev
decl_stmt|;
name|enum
name|iwch_ep_state
name|state
decl_stmt|;
name|u_int
name|refcount
decl_stmt|;
name|struct
name|cv
name|waitq
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
name|struct
name|sockaddr_in
name|local_addr
decl_stmt|;
name|struct
name|sockaddr_in
name|remote_addr
decl_stmt|;
name|int
name|rpl_err
decl_stmt|;
name|int
name|rpl_done
decl_stmt|;
name|struct
name|thread
modifier|*
name|thread
decl_stmt|;
name|struct
name|socket
modifier|*
name|so
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwch_listen_ep
block|{
name|struct
name|iwch_ep_common
name|com
decl_stmt|;
name|unsigned
name|int
name|stid
decl_stmt|;
name|int
name|backlog
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwch_ep
block|{
name|struct
name|iwch_ep_common
name|com
decl_stmt|;
name|struct
name|iwch_ep
modifier|*
name|parent_ep
decl_stmt|;
name|struct
name|callout
name|timer
decl_stmt|;
name|unsigned
name|int
name|atid
decl_stmt|;
name|u32
name|hwtid
decl_stmt|;
name|u32
name|snd_seq
decl_stmt|;
name|u32
name|rcv_seq
decl_stmt|;
name|struct
name|l2t_entry
modifier|*
name|l2t
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mpa_mbuf
decl_stmt|;
name|struct
name|iwch_mpa_attributes
name|mpa_attr
decl_stmt|;
name|unsigned
name|int
name|mpa_pkt_len
decl_stmt|;
name|u8
name|mpa_pkt
index|[
sizeof|sizeof
argument_list|(
expr|struct
name|mpa_message
argument_list|)
operator|+
name|MPA_MAX_PRIVATE_DATA
index|]
decl_stmt|;
name|u8
name|tos
decl_stmt|;
name|u16
name|emss
decl_stmt|;
name|u16
name|plen
decl_stmt|;
name|u32
name|ird
decl_stmt|;
name|u32
name|ord
decl_stmt|;
name|u32
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|struct
name|iwch_ep
modifier|*
name|to_ep
parameter_list|(
name|struct
name|iw_cm_id
modifier|*
name|cm_id
parameter_list|)
block|{
return|return
name|cm_id
operator|->
name|provider_data
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|iwch_listen_ep
modifier|*
name|to_listen_ep
parameter_list|(
name|struct
name|iw_cm_id
modifier|*
name|cm_id
parameter_list|)
block|{
return|return
name|cm_id
operator|->
name|provider_data
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|compute_wscale
parameter_list|(
name|int
name|win
parameter_list|)
block|{
name|int
name|wscale
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|wscale
operator|<
literal|14
operator|&&
operator|(
literal|65535
operator|<<
name|wscale
operator|)
operator|<
name|win
condition|)
name|wscale
operator|++
expr_stmt|;
return|return
name|wscale
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|iwch_wait
parameter_list|(
name|struct
name|cv
modifier|*
name|cv
parameter_list|,
name|struct
name|mtx
modifier|*
name|lock
parameter_list|,
name|int
modifier|*
name|rpl_done
parameter_list|)
block|{
name|mtx_lock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|*
name|rpl_done
condition|)
block|{
name|CTR0
argument_list|(
name|KTR_IW_CXGB
argument_list|,
literal|"sleeping for rpl_done\n"
argument_list|)
expr_stmt|;
name|cv_wait_unlock
argument_list|(
name|cv
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
name|CTR1
argument_list|(
name|KTR_IW_CXGB
argument_list|,
literal|"*rpl_done=%d\n"
argument_list|,
operator|*
name|rpl_done
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|iwch_wakeup
parameter_list|(
name|struct
name|cv
modifier|*
name|cv
parameter_list|,
name|struct
name|mtx
modifier|*
name|lock
parameter_list|,
name|int
modifier|*
name|rpl_done
parameter_list|)
block|{
name|mtx_lock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
operator|*
name|rpl_done
operator|=
literal|1
expr_stmt|;
name|CTR0
argument_list|(
name|KTR_IW_CXGB
argument_list|,
literal|"wakeup for rpl_done\n"
argument_list|)
expr_stmt|;
name|cv_broadcast
argument_list|(
name|cv
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* CM prototypes */
end_comment

begin_function_decl
name|int
name|iwch_connect
parameter_list|(
name|struct
name|iw_cm_id
modifier|*
name|cm_id
parameter_list|,
name|struct
name|iw_cm_conn_param
modifier|*
name|conn_param
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_create_listen_ep
parameter_list|(
name|struct
name|iw_cm_id
modifier|*
name|cm_id
parameter_list|,
name|int
name|backlog
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iwch_destroy_listen_ep
parameter_list|(
name|struct
name|iw_cm_id
modifier|*
name|cm_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_reject_cr
parameter_list|(
name|struct
name|iw_cm_id
modifier|*
name|cm_id
parameter_list|,
specifier|const
name|void
modifier|*
name|pdata
parameter_list|,
name|u8
name|pdata_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_accept_cr
parameter_list|(
name|struct
name|iw_cm_id
modifier|*
name|cm_id
parameter_list|,
name|struct
name|iw_cm_conn_param
modifier|*
name|conn_param
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_ep_disconnect
parameter_list|(
name|struct
name|iwch_ep
modifier|*
name|ep
parameter_list|,
name|int
name|abrupt
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__free_ep
parameter_list|(
name|struct
name|iwch_ep_common
modifier|*
name|ep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iwch_rearp
parameter_list|(
name|struct
name|iwch_ep
modifier|*
name|ep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_ep_redirect
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|struct
name|rtentry
modifier|*
name|old
parameter_list|,
name|struct
name|rtentry
modifier|*
name|new
parameter_list|,
name|struct
name|l2t_entry
modifier|*
name|l2t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iwch_cm_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iwch_cm_term
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iwch_cm_init_cpl
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iwch_cm_term_cpl
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _IWCH_CM_H_ */
end_comment

end_unit

