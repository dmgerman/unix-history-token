begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1998-2002 Katsushi Kobayashi and Hidetoshi Shimokawa  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the acknowledgement as bellow:  *  *    This product includes software developed by K. Kobayashi and H. Shimokawa  *  * 4. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *   * $FreeBSD$  *  */
end_comment

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
end_if

begin_typedef
typedef|typedef
name|struct
name|thread
name|fw_proc
typedef|;
end_typedef

begin_include
include|#
directive|include
file|<sys/selinfo.h>
end_include

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|struct
name|proc
name|fw_proc
typedef|;
end_typedef

begin_include
include|#
directive|include
file|<sys/select.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|splfw
value|splimp
end_define

begin_struct
struct|struct
name|fw_device
block|{
name|u_int16_t
name|dst
decl_stmt|;
name|struct
name|fw_eui64
name|eui
decl_stmt|;
if|#
directive|if
literal|0
block|u_int32_t spec; 	u_int32_t ver;
endif|#
directive|endif
name|u_int8_t
name|speed
decl_stmt|;
name|u_int8_t
name|maxrec
decl_stmt|;
name|u_int8_t
name|nport
decl_stmt|;
name|u_int8_t
name|power
decl_stmt|;
define|#
directive|define
name|CSRROMOFF
value|0x400
define|#
directive|define
name|CSRROMSIZE
value|0x400
name|int
name|rommax
decl_stmt|;
comment|/* offset from 0xffff f000 0000 */
name|u_int32_t
name|csrrom
index|[
name|CSRROMSIZE
operator|/
literal|4
index|]
decl_stmt|;
name|int
name|rcnt
decl_stmt|;
name|struct
name|firewire_comm
modifier|*
name|fc
decl_stmt|;
name|u_int32_t
name|status
decl_stmt|;
define|#
directive|define
name|FWDEVINIT
value|1
define|#
directive|define
name|FWDEVATTACHED
value|2
define|#
directive|define
name|FWDEVINVAL
value|3
name|STAILQ_ENTRY
argument_list|(
argument|fw_device
argument_list|)
name|link
expr_stmt|;
if|#
directive|if
literal|0
block|LIST_HEAD(, fw_xfer) txqueue; 	LIST_HEAD(, fw_xfer) rxqueue;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|firewire_softc
block|{
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
name|dev_t
name|dev
decl_stmt|;
else|#
directive|else
name|dev_t
name|dev
index|[
name|FWMAXNDMA
operator|+
literal|1
index|]
decl_stmt|;
endif|#
directive|endif
name|struct
name|firewire_comm
modifier|*
name|fc
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|FW_MAX_DMACH
value|0x20
end_define

begin_define
define|#
directive|define
name|FW_MAX_DEVCH
value|FW_MAX_DMACH
end_define

begin_define
define|#
directive|define
name|FW_XFERTIMEOUT
value|1
end_define

begin_struct
struct|struct
name|firewire_dev_comm
block|{
name|device_t
name|dev
decl_stmt|;
name|struct
name|firewire_comm
modifier|*
name|fc
decl_stmt|;
name|void
argument_list|(
argument|*post_explore
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tcode_info
block|{
name|u_char
name|hdr_len
decl_stmt|;
comment|/* IEEE1394 header length */
name|u_char
name|flag
decl_stmt|;
define|#
directive|define
name|FWTI_REQ
value|(1<< 0)
define|#
directive|define
name|FWTI_RES
value|(1<< 1)
define|#
directive|define
name|FWTI_TLABEL
value|(1<< 2)
define|#
directive|define
name|FWTI_BLOCK_STR
value|(1<< 3)
define|#
directive|define
name|FWTI_BLOCK_ASY
value|(1<< 4)
block|}
struct|;
end_struct

begin_struct
struct|struct
name|firewire_comm
block|{
name|device_t
name|dev
decl_stmt|;
name|device_t
name|bdev
decl_stmt|;
name|u_int16_t
name|busid
range|:
literal|10
decl_stmt|,
name|nodeid
range|:
literal|6
decl_stmt|;
name|u_int
name|mode
decl_stmt|;
name|u_int
name|nport
decl_stmt|;
name|u_int
name|speed
decl_stmt|;
name|u_int
name|maxrec
decl_stmt|;
name|u_int
name|irm
decl_stmt|;
name|u_int
name|max_node
decl_stmt|;
name|u_int
name|max_hop
decl_stmt|;
name|u_int
name|max_asyretry
decl_stmt|;
define|#
directive|define
name|FWPHYASYST
value|(1<< 0)
name|u_int
name|retry_count
decl_stmt|;
name|u_int32_t
name|ongobus
range|:
literal|10
decl_stmt|,
name|ongonode
range|:
literal|6
decl_stmt|,
name|ongoaddr
range|:
literal|16
decl_stmt|;
name|struct
name|fw_device
modifier|*
name|ongodev
decl_stmt|;
name|struct
name|fw_eui64
name|ongoeui
decl_stmt|;
define|#
directive|define
name|FWMAXCSRDIR
value|16
name|SLIST_HEAD
argument_list|(
argument_list|,
argument|csrdir
argument_list|)
name|ongocsr
expr_stmt|;
name|SLIST_HEAD
argument_list|(
argument_list|,
argument|csrdir
argument_list|)
name|csrfree
expr_stmt|;
name|u_int32_t
name|status
decl_stmt|;
define|#
directive|define
name|FWBUSRESET
value|0
define|#
directive|define
name|FWBUSINIT
value|1
define|#
directive|define
name|FWBUSCYMELECT
value|2
define|#
directive|define
name|FWBUSMGRELECT
value|3
define|#
directive|define
name|FWBUSMGRDONE
value|4
define|#
directive|define
name|FWBUSEXPLORE
value|5
define|#
directive|define
name|FWBUSPHYCONF
value|6
define|#
directive|define
name|FWBUSEXPDONE
value|7
define|#
directive|define
name|FWBUSCOMPLETION
value|10
name|int
name|nisodma
decl_stmt|;
name|struct
name|fw_eui64
name|eui
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
name|fw_queue
argument_list|,
name|fw_xfer
argument_list|)
expr_stmt|;
name|struct
name|fw_xferq
modifier|*
name|arq
decl_stmt|,
modifier|*
name|atq
decl_stmt|,
modifier|*
name|ars
decl_stmt|,
modifier|*
name|ats
decl_stmt|,
modifier|*
name|it
index|[
name|FW_MAX_DMACH
index|]
decl_stmt|,
modifier|*
name|ir
index|[
name|FW_MAX_DMACH
index|]
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|tlabel
argument_list|)
name|tlabels
index|[
literal|0x40
index|]
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fw_bind
argument_list|)
name|binds
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fw_device
argument_list|)
name|devices
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fw_xfer
argument_list|)
name|pending
expr_stmt|;
specifier|volatile
name|u_int32_t
modifier|*
name|sid_buf
decl_stmt|;
name|u_int
name|sid_cnt
decl_stmt|;
define|#
directive|define
name|CSRSIZE
value|0x4000
name|u_int32_t
name|csr_arc
index|[
name|CSRSIZE
operator|/
literal|4
index|]
decl_stmt|;
define|#
directive|define
name|CROMSIZE
value|0x400
name|u_int32_t
modifier|*
name|config_rom
decl_stmt|;
name|struct
name|fw_topology_map
modifier|*
name|topology_map
decl_stmt|;
name|struct
name|fw_speed_map
modifier|*
name|speed_map
decl_stmt|;
name|struct
name|callout
name|busprobe_callout
decl_stmt|;
name|struct
name|callout
name|bmr_callout
decl_stmt|;
name|struct
name|callout
name|timeout_callout
decl_stmt|;
name|struct
name|callout
name|retry_probe_callout
decl_stmt|;
name|u_int32_t
argument_list|(
argument|*cyctimer
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*ibr
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|)
argument_list|)
expr_stmt|;
name|u_int32_t
argument_list|(
argument|*set_bmr
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*ioctl
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
operator|,
name|u_long
operator|,
name|caddr_t
operator|,
name|int
operator|,
name|fw_proc
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*irx_enable
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*irx_disable
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*itx_enable
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*itx_disable
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*timeout
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*poll
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*set_intr
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*irx_post
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|u_int32_t
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*itx_post
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|u_int32_t
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|tcode_info
modifier|*
name|tcode
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|CSRARC
parameter_list|(
name|sc
parameter_list|,
name|offset
parameter_list|)
value|((sc)->csr_arc[(offset)/4])
end_define

begin_struct
struct|struct
name|csrdir
block|{
name|u_int32_t
name|ongoaddr
decl_stmt|;
name|u_int32_t
name|off
decl_stmt|;
name|SLIST_ENTRY
argument_list|(
argument|csrdir
argument_list|)
name|link
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fw_xferq
block|{
name|int
name|flag
decl_stmt|;
define|#
directive|define
name|FWXFERQ_CHTAGMASK
value|0xff
define|#
directive|define
name|FWXFERQ_RUNNING
value|(1<< 8)
define|#
directive|define
name|FWXFERQ_STREAM
value|(1<< 9)
define|#
directive|define
name|FWXFERQ_PACKET
value|(1<< 10)
define|#
directive|define
name|FWXFERQ_BULK
value|(1<< 11)
if|#
directive|if
literal|0
comment|/* BROKEN */
define|#
directive|define
name|FWXFERQ_DV
value|(1<< 12)
endif|#
directive|endif
define|#
directive|define
name|FWXFERQ_MODEMASK
value|(7<< 10)
define|#
directive|define
name|FWXFERQ_EXTBUF
value|(1<< 13)
define|#
directive|define
name|FWXFERQ_OPEN
value|(1<< 14)
define|#
directive|define
name|FWXFERQ_HANDLER
value|(1<< 16)
define|#
directive|define
name|FWXFERQ_WAKEUP
value|(1<< 17)
name|void
argument_list|(
argument|*start
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*drain
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
expr|struct
name|fw_xfer
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|fw_queue
name|q
decl_stmt|;
name|u_int
name|queued
decl_stmt|;
name|u_int
name|maxq
decl_stmt|;
name|u_int
name|psize
decl_stmt|;
name|u_int
name|packets
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fw_bind
argument_list|)
name|binds
expr_stmt|;
name|caddr_t
name|buf
decl_stmt|;
name|u_int
name|bnchunk
decl_stmt|;
name|u_int
name|bnpacket
decl_stmt|;
name|struct
name|fw_bulkxfer
modifier|*
name|bulkxfer
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fw_bulkxfer
argument_list|)
name|stvalid
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fw_bulkxfer
argument_list|)
name|stfree
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fw_bulkxfer
argument_list|)
name|stdma
expr_stmt|;
name|struct
name|fw_bulkxfer
modifier|*
name|stproc
decl_stmt|;
ifdef|#
directive|ifdef
name|FWXFERQ_DV
name|int
name|dvdbc
decl_stmt|,
name|dvdiff
decl_stmt|,
name|dvsync
decl_stmt|,
name|dvoffset
decl_stmt|;
name|struct
name|fw_dvbuf
modifier|*
name|dvbuf
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fw_dvbuf
argument_list|)
name|dvvalid
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fw_dvbuf
argument_list|)
name|dvfree
expr_stmt|;
name|struct
name|fw_dvbuf
modifier|*
name|dvdma
decl_stmt|;
name|struct
name|fw_dvbuf
modifier|*
name|dvproc
decl_stmt|;
name|u_int
name|dvptr
decl_stmt|;
name|u_int
name|dvpacket
decl_stmt|;
endif|#
directive|endif
name|struct
name|selinfo
name|rsel
decl_stmt|;
name|caddr_t
name|sc
decl_stmt|;
name|void
argument_list|(
argument|*hand
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|fw_xferq
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fw_bulkxfer
block|{
name|caddr_t
name|buf
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|fw_bulkxfer
argument_list|)
name|link
expr_stmt|;
name|caddr_t
name|start
decl_stmt|;
name|caddr_t
name|end
decl_stmt|;
name|u_int
name|npacket
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fw_dvbuf
block|{
name|caddr_t
name|buf
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|fw_dvbuf
argument_list|)
name|link
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tlabel
block|{
name|struct
name|fw_xfer
modifier|*
name|xfer
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|tlabel
argument_list|)
name|link
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fw_bind
block|{
name|u_int32_t
name|start_hi
decl_stmt|,
name|start_lo
decl_stmt|,
name|addrlen
decl_stmt|;
name|struct
name|fw_xfer
modifier|*
name|xfer
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|fw_bind
argument_list|)
name|fclist
expr_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|fw_bind
argument_list|)
name|chlist
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fw_xfer
block|{
name|caddr_t
name|sc
decl_stmt|;
name|struct
name|firewire_comm
modifier|*
name|fc
decl_stmt|;
name|struct
name|fw_xferq
modifier|*
name|q
decl_stmt|;
name|struct
name|callout_handle
name|ch
decl_stmt|;
name|time_t
name|time
decl_stmt|;
name|struct
name|fw_tlabel
modifier|*
name|tlabel
decl_stmt|;
name|u_int8_t
name|spd
decl_stmt|;
name|u_int8_t
name|tcode
decl_stmt|;
name|int
name|resp
decl_stmt|;
define|#
directive|define
name|FWXF_INIT
value|0
define|#
directive|define
name|FWXF_INQ
value|1
define|#
directive|define
name|FWXF_START
value|2
define|#
directive|define
name|FWXF_SENT
value|3
define|#
directive|define
name|FWXF_SENTERR
value|4
define|#
directive|define
name|FWXF_BUSY
value|8
define|#
directive|define
name|FWXF_RCVD
value|10
name|int
name|state
decl_stmt|;
name|u_int8_t
name|retry
decl_stmt|;
name|u_int8_t
name|tl
decl_stmt|;
name|int
name|sub
decl_stmt|;
name|int32_t
name|dst
decl_stmt|;
name|u_int8_t
name|act_type
decl_stmt|;
define|#
directive|define
name|FWACT_NULL
value|0
define|#
directive|define
name|FWACT_XFER
value|2
define|#
directive|define
name|FWACT_CH
value|3
name|void
argument_list|(
argument|*retry_req
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|fw_xfer
operator|*
operator|)
argument_list|)
expr_stmt|;
union|union
block|{
name|void
argument_list|(
argument|*hand
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|fw_xfer
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
name|act
union|;
union|union
block|{
struct|struct
block|{
name|struct
name|fw_device
modifier|*
name|device
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|struct
name|stch
modifier|*
name|channel
decl_stmt|;
block|}
name|stream
struct|;
block|}
name|mode
union|;
struct|struct
block|{
name|u_int16_t
name|len
decl_stmt|,
name|off
decl_stmt|;
name|caddr_t
name|buf
decl_stmt|;
block|}
name|send
struct|,
name|recv
struct|;
name|struct
name|mbuf
modifier|*
name|mbuf
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|fw_xfer
argument_list|)
name|link
expr_stmt|;
name|struct
name|malloc_type
modifier|*
name|malloc
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|void
name|fw_sidrcv
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|caddr_t
operator|,
name|u_int
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fw_rcv
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|caddr_t
operator|,
name|u_int
operator|,
name|u_int
operator|,
name|u_int
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fw_xfer_free
name|__P
argument_list|(
operator|(
expr|struct
name|fw_xfer
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|fw_xfer
modifier|*
name|fw_xfer_alloc
name|__P
argument_list|(
operator|(
expr|struct
name|malloc_type
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fw_init
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fw_tbuf_update
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fw_rbuf_update
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fw_readreqq
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fw_writereqb
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fw_readresb
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fw_writeres
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int32_t
name|getcsrdata
name|__P
argument_list|(
operator|(
expr|struct
name|fw_device
operator|*
operator|,
name|u_int8_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fw_asybusy
name|__P
argument_list|(
operator|(
expr|struct
name|fw_xfer
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fw_bindadd
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
expr|struct
name|fw_bind
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fw_bindremove
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
expr|struct
name|fw_bind
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fw_asyreq
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|,
expr|struct
name|fw_xfer
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fw_busreset
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int16_t
name|fw_crc16
name|__P
argument_list|(
operator|(
name|u_int32_t
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fw_xfer_timeout
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fw_xfer_done
name|__P
argument_list|(
operator|(
expr|struct
name|fw_xfer
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fw_asy_callback
name|__P
argument_list|(
operator|(
expr|struct
name|fw_xfer
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|fw_device
modifier|*
name|fw_noderesolve_nodeid
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|fw_device
modifier|*
name|fw_noderesolve_eui64
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
expr|struct
name|fw_eui64
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|fw_bind
modifier|*
name|fw_bindlookup
name|__P
argument_list|(
operator|(
expr|struct
name|firewire_comm
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|firewire_debug
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|devclass_t
name|firewire_devclass
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|DV_BROADCAST_ON
value|(1<<30)
end_define

begin_define
define|#
directive|define
name|IP_CHANNELS
value|0x0234
end_define

begin_define
define|#
directive|define
name|STATE_CLEAR
value|0x0000
end_define

begin_define
define|#
directive|define
name|STATE_SET
value|0x0004
end_define

begin_define
define|#
directive|define
name|NODE_IDS
value|0x0008
end_define

begin_define
define|#
directive|define
name|RESET_START
value|0x000c
end_define

begin_define
define|#
directive|define
name|SPLIT_TIMEOUT_HI
value|0x0018
end_define

begin_define
define|#
directive|define
name|SPLIT_TIMEOUT_LO
value|0x001c
end_define

begin_define
define|#
directive|define
name|CYCLE_TIME
value|0x0200
end_define

begin_define
define|#
directive|define
name|BUS_TIME
value|0x0204
end_define

begin_define
define|#
directive|define
name|BUSY_TIMEOUT
value|0x0210
end_define

begin_define
define|#
directive|define
name|BUS_MGR_ID
value|0x021c
end_define

begin_define
define|#
directive|define
name|BANDWIDTH_AV
value|0x0220
end_define

begin_define
define|#
directive|define
name|CHANNELS_AV_HI
value|0x0224
end_define

begin_define
define|#
directive|define
name|CHANNELS_AV_LO
value|0x0228
end_define

begin_define
define|#
directive|define
name|CONF_ROM
value|0x0400
end_define

begin_define
define|#
directive|define
name|TOPO_MAP
value|0x1000
end_define

begin_define
define|#
directive|define
name|SPED_MAP
value|0x2000
end_define

begin_define
define|#
directive|define
name|oMPR
value|0x900
end_define

begin_define
define|#
directive|define
name|oPCR
value|0x904
end_define

begin_define
define|#
directive|define
name|iMPR
value|0x980
end_define

begin_define
define|#
directive|define
name|iPCR
value|0x984
end_define

begin_define
define|#
directive|define
name|FWPRI
value|((PZERO+8)|PCATCH)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__alpha__
end_ifdef

begin_undef
undef|#
directive|undef
name|vtophys
end_undef

begin_define
define|#
directive|define
name|vtophys
parameter_list|(
name|va
parameter_list|)
value|alpha_XXX_dmamap((vm_offset_t)(va))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __alpha__ */
end_comment

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_FW
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_FWXFER
argument_list|)
expr_stmt|;
end_expr_stmt

end_unit

