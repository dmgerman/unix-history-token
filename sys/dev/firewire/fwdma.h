begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-4-Clause  *  * Copyright (C) 2003  * 	Hidetoshi Shimokawa. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *  *	This product includes software developed by Hidetoshi Shimokawa.  *  * 4. Neither the name of the author nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_struct
struct|struct
name|fwdma_alloc
block|{
name|bus_dma_tag_t
name|dma_tag
decl_stmt|;
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|void
modifier|*
name|v_addr
decl_stmt|;
name|bus_addr_t
name|bus_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fwdma_seg
block|{
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|void
modifier|*
name|v_addr
decl_stmt|;
name|bus_addr_t
name|bus_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fwdma_alloc_multi
block|{
name|bus_size_t
name|ssize
decl_stmt|;
name|bus_size_t
name|esize
decl_stmt|;
name|int
name|nseg
decl_stmt|;
name|bus_dma_tag_t
name|dma_tag
decl_stmt|;
name|struct
name|fwdma_seg
name|seg
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|fwdma_v_addr
parameter_list|(
name|struct
name|fwdma_alloc_multi
modifier|*
name|am
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|bus_size_t
name|ssize
init|=
name|am
operator|->
name|ssize
decl_stmt|;
name|int
name|offset
init|=
name|am
operator|->
name|esize
operator|*
name|index
decl_stmt|;
return|return
operator|(
operator|(
name|caddr_t
operator|)
name|am
operator|->
name|seg
index|[
name|offset
operator|/
name|ssize
index|]
operator|.
name|v_addr
operator|+
operator|(
name|offset
operator|%
name|ssize
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|bus_addr_t
name|fwdma_bus_addr
parameter_list|(
name|struct
name|fwdma_alloc_multi
modifier|*
name|am
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|bus_size_t
name|ssize
init|=
name|am
operator|->
name|ssize
decl_stmt|;
name|int
name|offset
init|=
name|am
operator|->
name|esize
operator|*
name|index
decl_stmt|;
return|return
operator|(
name|am
operator|->
name|seg
index|[
name|offset
operator|/
name|ssize
index|]
operator|.
name|bus_addr
operator|+
operator|(
name|offset
operator|%
name|ssize
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|fwdma_sync
parameter_list|(
name|struct
name|fwdma_alloc
modifier|*
name|dma
parameter_list|,
name|bus_dmasync_op_t
name|op
parameter_list|)
block|{
name|bus_dmamap_sync
argument_list|(
name|dma
operator|->
name|dma_tag
argument_list|,
name|dma
operator|->
name|dma_map
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|fwdma_sync_multiseg
parameter_list|(
name|struct
name|fwdma_alloc_multi
modifier|*
name|am
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|bus_dmasync_op_t
name|op
parameter_list|)
block|{
name|struct
name|fwdma_seg
modifier|*
name|seg
decl_stmt|,
modifier|*
name|eseg
decl_stmt|;
name|seg
operator|=
operator|&
name|am
operator|->
name|seg
index|[
name|am
operator|->
name|esize
operator|*
name|start
operator|/
name|am
operator|->
name|ssize
index|]
expr_stmt|;
name|eseg
operator|=
operator|&
name|am
operator|->
name|seg
index|[
name|am
operator|->
name|esize
operator|*
name|end
operator|/
name|am
operator|->
name|ssize
index|]
expr_stmt|;
for|for
control|(
init|;
name|seg
operator|<=
name|eseg
condition|;
name|seg
operator|++
control|)
name|bus_dmamap_sync
argument_list|(
name|am
operator|->
name|dma_tag
argument_list|,
name|seg
operator|->
name|dma_map
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|fwdma_sync_multiseg_all
parameter_list|(
name|struct
name|fwdma_alloc_multi
modifier|*
name|am
parameter_list|,
name|bus_dmasync_op_t
name|op
parameter_list|)
block|{
name|struct
name|fwdma_seg
modifier|*
name|seg
decl_stmt|;
name|int
name|i
decl_stmt|;
name|seg
operator|=
operator|&
name|am
operator|->
name|seg
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|am
operator|->
name|nseg
condition|;
name|i
operator|++
operator|,
name|seg
operator|++
control|)
name|bus_dmamap_sync
argument_list|(
name|am
operator|->
name|dma_tag
argument_list|,
name|seg
operator|->
name|dma_map
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
modifier|*
name|fwdma_malloc
parameter_list|(
name|struct
name|firewire_comm
modifier|*
parameter_list|,
name|int
parameter_list|,
name|bus_size_t
parameter_list|,
name|struct
name|fwdma_alloc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fwdma_free
parameter_list|(
name|struct
name|firewire_comm
modifier|*
parameter_list|,
name|struct
name|fwdma_alloc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|fwdma_malloc_size
parameter_list|(
name|bus_dma_tag_t
parameter_list|,
name|bus_dmamap_t
modifier|*
parameter_list|,
name|bus_size_t
parameter_list|,
name|bus_addr_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fwdma_free_size
parameter_list|(
name|bus_dma_tag_t
parameter_list|,
name|bus_dmamap_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|bus_size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|fwdma_alloc_multi
modifier|*
name|fwdma_malloc_multiseg
parameter_list|(
name|struct
name|firewire_comm
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fwdma_free_multiseg
parameter_list|(
name|struct
name|fwdma_alloc_multi
modifier|*
parameter_list|)
function_decl|;
end_function_decl

end_unit

