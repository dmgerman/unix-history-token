begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1999 Michael Smith  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	$FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|MLX_BLKSIZE
value|512
end_define

begin_comment
comment|/* fixed feature */
end_comment

begin_comment
comment|/*  * Selected command codes.  */
end_comment

begin_define
define|#
directive|define
name|MLX_CMD_ENQUIRY_OLD
value|0x05
end_define

begin_define
define|#
directive|define
name|MLX_CMD_ENQUIRY
value|0x53
end_define

begin_define
define|#
directive|define
name|MLX_CMD_ENQUIRY2
value|0x1c
end_define

begin_define
define|#
directive|define
name|MLX_CMD_ENQSYSDRIVE
value|0x19
end_define

begin_define
define|#
directive|define
name|MLX_CMD_READSG
value|0xb6
end_define

begin_define
define|#
directive|define
name|MLX_CMD_WRITESG
value|0xb7
end_define

begin_define
define|#
directive|define
name|MLX_CMD_READSG_OLD
value|0x82
end_define

begin_define
define|#
directive|define
name|MLX_CMD_WRITESG_OLD
value|0x83
end_define

begin_define
define|#
directive|define
name|MLX_CMD_FLUSH
value|0x0a
end_define

begin_define
define|#
directive|define
name|MLX_CMD_LOGOP
value|0x72
end_define

begin_define
define|#
directive|define
name|MLX_CMD_REBUILDASYNC
value|0x16
end_define

begin_define
define|#
directive|define
name|MLX_CMD_CHECKASYNC
value|0x1e
end_define

begin_define
define|#
directive|define
name|MLX_CMD_REBUILDSTAT
value|0x0c
end_define

begin_define
define|#
directive|define
name|MLX_CMD_STOPCHANNEL
value|0x13
end_define

begin_define
define|#
directive|define
name|MLX_CMD_STARTCHANNEL
value|0x12
end_define

begin_define
define|#
directive|define
name|MLX_CMD_READ_CONFIG
value|0x4e
end_define

begin_define
define|#
directive|define
name|MLX_CMD_DIRECT_CDB
value|0x04
end_define

begin_define
define|#
directive|define
name|MLX_CMD_DEVICE_STATE
value|0x50
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_define
define|#
directive|define
name|MLX_CFG_BASE0
value|0x10
end_define

begin_comment
comment|/* first region */
end_comment

begin_define
define|#
directive|define
name|MLX_CFG_BASE1
value|0x14
end_define

begin_comment
comment|/* second region (type 3 only) */
end_comment

begin_comment
comment|/*  * Status values.  */
end_comment

begin_define
define|#
directive|define
name|MLX_STATUS_OK
value|0x0000
end_define

begin_define
define|#
directive|define
name|MLX_STATUS_RDWROFFLINE
value|0x0002
end_define

begin_comment
comment|/* read/write claims drive is offline */
end_comment

begin_define
define|#
directive|define
name|MLX_STATUS_WEDGED
value|0xdead
end_define

begin_comment
comment|/* controller not listening */
end_comment

begin_define
define|#
directive|define
name|MLX_STATUS_LOST
value|0xbeef
end_define

begin_comment
comment|/* never came back */
end_comment

begin_define
define|#
directive|define
name|MLX_STATUS_BUSY
value|0xffff
end_define

begin_comment
comment|/* command is in controller */
end_comment

begin_comment
comment|/*  * Accessor defines for the V3 interface.  */
end_comment

begin_define
define|#
directive|define
name|MLX_V3_MAILBOX
value|0x00
end_define

begin_define
define|#
directive|define
name|MLX_V3_STATUS_IDENT
value|0x0d
end_define

begin_define
define|#
directive|define
name|MLX_V3_STATUS
value|0x0e
end_define

begin_define
define|#
directive|define
name|MLX_V3_IDBR
value|0x40
end_define

begin_define
define|#
directive|define
name|MLX_V3_ODBR
value|0x41
end_define

begin_define
define|#
directive|define
name|MLX_V3_IER
value|0x43
end_define

begin_define
define|#
directive|define
name|MLX_V3_FWERROR
value|0x3f
end_define

begin_define
define|#
directive|define
name|MLX_V3_FWERROR_PARAM1
value|0x00
end_define

begin_define
define|#
directive|define
name|MLX_V3_FWERROR_PARAM2
value|0x01
end_define

begin_define
define|#
directive|define
name|MLX_V3_PUT_MAILBOX
parameter_list|(
name|sc
parameter_list|,
name|idx
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V3_MAILBOX + idx, val)
end_define

begin_define
define|#
directive|define
name|MLX_V3_GET_STATUS_IDENT
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V3_STATUS_IDENT)
end_define

begin_define
define|#
directive|define
name|MLX_V3_GET_STATUS
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_2 (sc->mlx_btag, sc->mlx_bhandle, MLX_V3_STATUS)
end_define

begin_define
define|#
directive|define
name|MLX_V3_GET_IDBR
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V3_IDBR)
end_define

begin_define
define|#
directive|define
name|MLX_V3_PUT_IDBR
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V3_IDBR, val)
end_define

begin_define
define|#
directive|define
name|MLX_V3_GET_ODBR
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V3_ODBR)
end_define

begin_define
define|#
directive|define
name|MLX_V3_PUT_ODBR
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V3_ODBR, val)
end_define

begin_define
define|#
directive|define
name|MLX_V3_PUT_IER
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V3_IER, val)
end_define

begin_define
define|#
directive|define
name|MLX_V3_GET_FWERROR
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V3_FWERROR)
end_define

begin_define
define|#
directive|define
name|MLX_V3_PUT_FWERROR
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V3_FWERROR, val)
end_define

begin_define
define|#
directive|define
name|MLX_V3_GET_FWERROR_PARAM1
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V3_FWERROR_PARAM1)
end_define

begin_define
define|#
directive|define
name|MLX_V3_GET_FWERROR_PARAM2
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V3_FWERROR_PARAM2)
end_define

begin_define
define|#
directive|define
name|MLX_V3_IDB_FULL
value|(1<<0)
end_define

begin_comment
comment|/* mailbox is full */
end_comment

begin_define
define|#
directive|define
name|MLX_V3_IDB_INIT_BUSY
value|(1<<1)
end_define

begin_comment
comment|/* initialisation in progress */
end_comment

begin_define
define|#
directive|define
name|MLX_V3_IDB_SACK
value|(1<<1)
end_define

begin_comment
comment|/* acknowledge status read */
end_comment

begin_define
define|#
directive|define
name|MLX_V3_ODB_SAVAIL
value|(1<<0)
end_define

begin_comment
comment|/* status is available */
end_comment

begin_define
define|#
directive|define
name|MLX_V3_FWERROR_PEND
value|(1<<2)
end_define

begin_comment
comment|/* firmware error pending */
end_comment

begin_comment
comment|/*  * Accessor defines for the V4 interface.  */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_MAILBOX
value|0x1000
end_define

begin_define
define|#
directive|define
name|MLX_V4_MAILBOX_LENGTH
value|16
end_define

begin_define
define|#
directive|define
name|MLX_V4_STATUS_IDENT
value|0x1018
end_define

begin_define
define|#
directive|define
name|MLX_V4_STATUS
value|0x101a
end_define

begin_define
define|#
directive|define
name|MLX_V4_IDBR
value|0x0020
end_define

begin_define
define|#
directive|define
name|MLX_V4_ODBR
value|0x002c
end_define

begin_define
define|#
directive|define
name|MLX_V4_IER
value|0x0034
end_define

begin_define
define|#
directive|define
name|MLX_V4_FWERROR
value|0x103f
end_define

begin_define
define|#
directive|define
name|MLX_V4_FWERROR_PARAM1
value|0x1000
end_define

begin_define
define|#
directive|define
name|MLX_V4_FWERROR_PARAM2
value|0x1001
end_define

begin_comment
comment|/* use longword access? */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_PUT_MAILBOX
parameter_list|(
name|sc
parameter_list|,
name|idx
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V4_MAILBOX + idx, val)
end_define

begin_define
define|#
directive|define
name|MLX_V4_GET_STATUS_IDENT
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V4_STATUS_IDENT)
end_define

begin_define
define|#
directive|define
name|MLX_V4_GET_STATUS
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_2 (sc->mlx_btag, sc->mlx_bhandle, MLX_V4_STATUS)
end_define

begin_define
define|#
directive|define
name|MLX_V4_GET_IDBR
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_4 (sc->mlx_btag, sc->mlx_bhandle, MLX_V4_IDBR)
end_define

begin_define
define|#
directive|define
name|MLX_V4_PUT_IDBR
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_4(sc->mlx_btag, sc->mlx_bhandle, MLX_V4_IDBR, val)
end_define

begin_define
define|#
directive|define
name|MLX_V4_GET_ODBR
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_4 (sc->mlx_btag, sc->mlx_bhandle, MLX_V4_ODBR)
end_define

begin_define
define|#
directive|define
name|MLX_V4_PUT_ODBR
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_4(sc->mlx_btag, sc->mlx_bhandle, MLX_V4_ODBR, val)
end_define

begin_define
define|#
directive|define
name|MLX_V4_PUT_IER
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_4(sc->mlx_btag, sc->mlx_bhandle, MLX_V4_IER, val)
end_define

begin_define
define|#
directive|define
name|MLX_V4_GET_FWERROR
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V4_FWERROR)
end_define

begin_define
define|#
directive|define
name|MLX_V4_PUT_FWERROR
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V4_FWERROR, val)
end_define

begin_define
define|#
directive|define
name|MLX_V4_GET_FWERROR_PARAM1
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V4_FWERROR_PARAM1)
end_define

begin_define
define|#
directive|define
name|MLX_V4_GET_FWERROR_PARAM2
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V4_FWERROR_PARAM2)
end_define

begin_define
define|#
directive|define
name|MLX_V4_IDB_FULL
value|(1<<0)
end_define

begin_comment
comment|/* mailbox is full */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_IDB_INIT_BUSY
value|(1<<1)
end_define

begin_comment
comment|/* initialisation in progress */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_IDB_HWMBOX_CMD
value|(1<<0)
end_define

begin_comment
comment|/* posted hardware mailbox command */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_IDB_SACK
value|(1<<1)
end_define

begin_comment
comment|/* acknowledge status read */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_IDB_MEMMBOX_CMD
value|(1<<4)
end_define

begin_comment
comment|/* posted memory mailbox command */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_ODB_HWSAVAIL
value|(1<<0)
end_define

begin_comment
comment|/* status is available for hardware mailbox */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_ODB_MEMSAVAIL
value|(1<<1)
end_define

begin_comment
comment|/* status is available for memory mailbox */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_ODB_HWMBOX_ACK
value|(1<<0)
end_define

begin_comment
comment|/* ack status read from hardware mailbox */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_ODB_MEMMBOX_ACK
value|(1<<1)
end_define

begin_comment
comment|/* ack status read from memory mailbox */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_IER_MASK
value|0xfb
end_define

begin_comment
comment|/* message unit interrupt mask */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_IER_DISINT
value|(1<<2)
end_define

begin_comment
comment|/* interrupt disable bit */
end_comment

begin_define
define|#
directive|define
name|MLX_V4_FWERROR_PEND
value|(1<<2)
end_define

begin_comment
comment|/* firmware error pending */
end_comment

begin_comment
comment|/*  * Accessor defines for the V5 interface  */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_MAILBOX
value|0x50
end_define

begin_define
define|#
directive|define
name|MLX_V5_MAILBOX_LENGTH
value|16
end_define

begin_define
define|#
directive|define
name|MLX_V5_STATUS_IDENT
value|0x5d
end_define

begin_define
define|#
directive|define
name|MLX_V5_STATUS
value|0x5e
end_define

begin_define
define|#
directive|define
name|MLX_V5_IDBR
value|0x60
end_define

begin_define
define|#
directive|define
name|MLX_V5_ODBR
value|0x61
end_define

begin_define
define|#
directive|define
name|MLX_V5_IER
value|0x34
end_define

begin_define
define|#
directive|define
name|MLX_V5_FWERROR
value|0x63
end_define

begin_define
define|#
directive|define
name|MLX_V5_FWERROR_PARAM1
value|0x50
end_define

begin_define
define|#
directive|define
name|MLX_V5_FWERROR_PARAM2
value|0x51
end_define

begin_define
define|#
directive|define
name|MLX_V5_PUT_MAILBOX
parameter_list|(
name|sc
parameter_list|,
name|idx
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V5_MAILBOX + idx, val)
end_define

begin_define
define|#
directive|define
name|MLX_V5_GET_STATUS_IDENT
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V5_STATUS_IDENT)
end_define

begin_define
define|#
directive|define
name|MLX_V5_GET_STATUS
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_2 (sc->mlx_btag, sc->mlx_bhandle, MLX_V5_STATUS)
end_define

begin_define
define|#
directive|define
name|MLX_V5_GET_IDBR
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V5_IDBR)
end_define

begin_define
define|#
directive|define
name|MLX_V5_PUT_IDBR
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V5_IDBR, val)
end_define

begin_define
define|#
directive|define
name|MLX_V5_GET_ODBR
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V5_ODBR)
end_define

begin_define
define|#
directive|define
name|MLX_V5_PUT_ODBR
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V5_ODBR, val)
end_define

begin_define
define|#
directive|define
name|MLX_V5_PUT_IER
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V5_IER, val)
end_define

begin_define
define|#
directive|define
name|MLX_V5_GET_FWERROR
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V5_FWERROR)
end_define

begin_define
define|#
directive|define
name|MLX_V5_PUT_FWERROR
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1(sc->mlx_btag, sc->mlx_bhandle, MLX_V5_FWERROR, val)
end_define

begin_define
define|#
directive|define
name|MLX_V5_GET_FWERROR_PARAM1
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V5_FWERROR_PARAM1)
end_define

begin_define
define|#
directive|define
name|MLX_V5_GET_FWERROR_PARAM2
parameter_list|(
name|sc
parameter_list|)
value|bus_space_read_1 (sc->mlx_btag, sc->mlx_bhandle, MLX_V5_FWERROR_PARAM2)
end_define

begin_define
define|#
directive|define
name|MLX_V5_IDB_EMPTY
value|(1<<0)
end_define

begin_comment
comment|/* mailbox is empty */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_IDB_INIT_DONE
value|(1<<1)
end_define

begin_comment
comment|/* initialisation has completed */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_IDB_HWMBOX_CMD
value|(1<<0)
end_define

begin_comment
comment|/* posted hardware mailbox command */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_IDB_SACK
value|(1<<1)
end_define

begin_comment
comment|/* acknowledge status read */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_IDB_RESET
value|(1<<3)
end_define

begin_comment
comment|/* reset request */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_IDB_MEMMBOX_CMD
value|(1<<4)
end_define

begin_comment
comment|/* posted memory mailbox command */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_ODB_HWSAVAIL
value|(1<<0)
end_define

begin_comment
comment|/* status is available for hardware mailbox */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_ODB_MEMSAVAIL
value|(1<<1)
end_define

begin_comment
comment|/* status is available for memory mailbox */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_ODB_HWMBOX_ACK
value|(1<<0)
end_define

begin_comment
comment|/* ack status read from hardware mailbox */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_ODB_MEMMBOX_ACK
value|(1<<1)
end_define

begin_comment
comment|/* ack status read from memory mailbox */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_IER_DISINT
value|(1<<2)
end_define

begin_comment
comment|/* interrupt disable bit */
end_comment

begin_define
define|#
directive|define
name|MLX_V5_FWERROR_PEND
value|(1<<2)
end_define

begin_comment
comment|/* firmware error pending */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_comment
comment|/*  * Scatter-gather list format, type 1, kind 00.  */
end_comment

begin_struct
struct|struct
name|mlx_sgentry
block|{
name|u_int32_t
name|sg_addr
decl_stmt|;
name|u_int32_t
name|sg_count
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/*  * Command result buffers, as placed in system memory by the controller.  */
end_comment

begin_struct
struct|struct
name|mlx_enquiry_old
comment|/* MLX_CMD_ENQUIRY_OLD */
block|{
name|u_int8_t
name|me_num_sys_drvs
decl_stmt|;
name|u_int8_t
name|res1
index|[
literal|3
index|]
decl_stmt|;
name|u_int32_t
name|me_drvsize
index|[
literal|8
index|]
decl_stmt|;
name|u_int16_t
name|me_flash_age
decl_stmt|;
name|u_int8_t
name|me_status_flags
decl_stmt|;
name|u_int8_t
name|me_free_state_change_count
decl_stmt|;
name|u_int8_t
name|me_fwminor
decl_stmt|;
name|u_int8_t
name|me_fwmajor
decl_stmt|;
name|u_int8_t
name|me_rebuild_flag
decl_stmt|;
name|u_int8_t
name|me_max_commands
decl_stmt|;
name|u_int8_t
name|me_offline_sd_count
decl_stmt|;
name|u_int8_t
name|res3
decl_stmt|;
name|u_int8_t
name|me_critical_sd_count
decl_stmt|;
name|u_int8_t
name|res4
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|me_dead_count
decl_stmt|;
name|u_int8_t
name|res5
decl_stmt|;
name|u_int8_t
name|me_rebuild_count
decl_stmt|;
name|u_int8_t
name|me_misc_flags
decl_stmt|;
struct|struct
block|{
name|u_int8_t
name|dd_targ
decl_stmt|;
name|u_int8_t
name|dd_chan
decl_stmt|;
block|}
name|__packed
name|me_dead
index|[
literal|20
index|]
struct|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_enquiry
comment|/* MLX_CMD_ENQUIRY */
block|{
name|u_int8_t
name|me_num_sys_drvs
decl_stmt|;
name|u_int8_t
name|res1
index|[
literal|3
index|]
decl_stmt|;
name|u_int32_t
name|me_drvsize
index|[
literal|32
index|]
decl_stmt|;
name|u_int16_t
name|me_flash_age
decl_stmt|;
name|u_int8_t
name|me_status_flags
decl_stmt|;
define|#
directive|define
name|MLX_ENQ_SFLAG_DEFWRERR
value|(1<<0)
comment|/* deferred write error indicator */
define|#
directive|define
name|MLX_ENQ_SFLAG_BATTLOW
value|(1<<1)
comment|/* battery low */
name|u_int8_t
name|res2
decl_stmt|;
name|u_int8_t
name|me_fwminor
decl_stmt|;
name|u_int8_t
name|me_fwmajor
decl_stmt|;
name|u_int8_t
name|me_rebuild_flag
decl_stmt|;
name|u_int8_t
name|me_max_commands
decl_stmt|;
name|u_int8_t
name|me_offline_sd_count
decl_stmt|;
name|u_int8_t
name|res3
decl_stmt|;
name|u_int16_t
name|me_event_log_seq_num
decl_stmt|;
name|u_int8_t
name|me_critical_sd_count
decl_stmt|;
name|u_int8_t
name|res4
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|me_dead_count
decl_stmt|;
name|u_int8_t
name|res5
decl_stmt|;
name|u_int8_t
name|me_rebuild_count
decl_stmt|;
name|u_int8_t
name|me_misc_flags
decl_stmt|;
define|#
directive|define
name|MLX_ENQ_MISC_BBU
value|(1<<3)
comment|/* battery backup present */
struct|struct
block|{
name|u_int8_t
name|dd_targ
decl_stmt|;
name|u_int8_t
name|dd_chan
decl_stmt|;
block|}
name|__packed
name|me_dead
index|[
literal|20
index|]
struct|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_enquiry2
comment|/* MLX_CMD_ENQUIRY2 */
block|{
name|u_int32_t
name|me_hardware_id
decl_stmt|;
name|u_int32_t
name|me_firmware_id
decl_stmt|;
name|u_int32_t
name|res1
decl_stmt|;
name|u_int8_t
name|me_configured_channels
decl_stmt|;
name|u_int8_t
name|me_actual_channels
decl_stmt|;
name|u_int8_t
name|me_max_targets
decl_stmt|;
name|u_int8_t
name|me_max_tags
decl_stmt|;
name|u_int8_t
name|me_max_sys_drives
decl_stmt|;
name|u_int8_t
name|me_max_arms
decl_stmt|;
name|u_int8_t
name|me_max_spans
decl_stmt|;
name|u_int8_t
name|res2
decl_stmt|;
name|u_int32_t
name|res3
decl_stmt|;
name|u_int32_t
name|me_mem_size
decl_stmt|;
name|u_int32_t
name|me_cache_size
decl_stmt|;
name|u_int32_t
name|me_flash_size
decl_stmt|;
name|u_int32_t
name|me_nvram_size
decl_stmt|;
name|u_int16_t
name|me_mem_type
decl_stmt|;
name|u_int16_t
name|me_clock_speed
decl_stmt|;
name|u_int16_t
name|me_mem_speed
decl_stmt|;
name|u_int16_t
name|me_hardware_speed
decl_stmt|;
name|u_int8_t
name|res4
index|[
literal|12
index|]
decl_stmt|;
name|u_int16_t
name|me_max_commands
decl_stmt|;
name|u_int16_t
name|me_max_sg
decl_stmt|;
name|u_int16_t
name|me_max_dp
decl_stmt|;
name|u_int16_t
name|me_max_iod
decl_stmt|;
name|u_int16_t
name|me_max_comb
decl_stmt|;
name|u_int8_t
name|me_latency
decl_stmt|;
name|u_int8_t
name|res5
decl_stmt|;
name|u_int8_t
name|me_scsi_timeout
decl_stmt|;
name|u_int8_t
name|res6
decl_stmt|;
name|u_int16_t
name|me_min_freelines
decl_stmt|;
name|u_int8_t
name|res7
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|me_rate_const
decl_stmt|;
name|u_int8_t
name|res8
index|[
literal|11
index|]
decl_stmt|;
name|u_int16_t
name|me_physblk
decl_stmt|;
name|u_int16_t
name|me_logblk
decl_stmt|;
name|u_int16_t
name|me_maxblk
decl_stmt|;
name|u_int16_t
name|me_blocking_factor
decl_stmt|;
name|u_int16_t
name|me_cacheline
decl_stmt|;
name|u_int8_t
name|me_scsi_cap
decl_stmt|;
name|u_int8_t
name|res9
index|[
literal|5
index|]
decl_stmt|;
name|u_int16_t
name|me_firmware_build
decl_stmt|;
name|u_int8_t
name|me_fault_mgmt_type
decl_stmt|;
name|u_int8_t
name|res10
decl_stmt|;
name|u_int32_t
name|me_firmware_features
decl_stmt|;
name|u_int8_t
name|res11
index|[
literal|8
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_enq_sys_drive
comment|/* MLX_CMD_ENQSYSDRIVE returns an array of 32 of these */
block|{
name|u_int32_t
name|sd_size
decl_stmt|;
name|u_int8_t
name|sd_state
decl_stmt|;
name|u_int8_t
name|sd_raidlevel
decl_stmt|;
name|u_int16_t
name|res1
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_eventlog_entry
comment|/* MLX_CMD_LOGOP/MLX_LOGOP_GET */
block|{
name|u_int8_t
name|el_type
decl_stmt|;
name|u_int8_t
name|el_length
decl_stmt|;
name|u_char
name|el_target
range|:
literal|5
decl_stmt|;
name|u_char
name|el_channel
range|:
literal|3
decl_stmt|;
name|u_char
name|el_lun
range|:
literal|6
decl_stmt|;
name|u_char
name|res1
range|:
literal|2
decl_stmt|;
name|u_int16_t
name|el_seqno
decl_stmt|;
name|u_char
name|el_errorcode
range|:
literal|7
decl_stmt|;
name|u_char
name|el_valid
range|:
literal|1
decl_stmt|;
name|u_int8_t
name|el_segment
decl_stmt|;
name|u_char
name|el_sensekey
range|:
literal|4
decl_stmt|;
name|u_char
name|res2
range|:
literal|1
decl_stmt|;
name|u_char
name|el_ILI
range|:
literal|1
decl_stmt|;
name|u_char
name|el_EOM
range|:
literal|1
decl_stmt|;
name|u_char
name|el_filemark
range|:
literal|1
decl_stmt|;
name|u_int8_t
name|el_information
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|el_addsense
decl_stmt|;
name|u_int8_t
name|el_csi
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|el_asc
decl_stmt|;
name|u_int8_t
name|el_asq
decl_stmt|;
name|u_int8_t
name|res3
index|[
literal|12
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|MLX_LOGOP_GET
value|0x00
end_define

begin_comment
comment|/* operation codes for MLX_CMD_LOGOP */
end_comment

begin_define
define|#
directive|define
name|MLX_LOGMSG_SENSE
value|0x00
end_define

begin_comment
comment|/* log message contents codes */
end_comment

begin_struct
struct|struct
name|mlx_rebuild_stat
comment|/* MLX_CMD_REBUILDSTAT */
block|{
name|u_int32_t
name|rb_drive
decl_stmt|;
name|u_int32_t
name|rb_size
decl_stmt|;
name|u_int32_t
name|rb_remaining
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_config2
block|{
name|u_int16_t
name|cf_flags1
decl_stmt|;
define|#
directive|define
name|MLX_CF2_ACTV_NEG
value|(1<<1)
define|#
directive|define
name|MLX_CF2_NORSTRTRY
value|(1<<7)
define|#
directive|define
name|MLX_CF2_STRGWRK
value|(1<<8)
define|#
directive|define
name|MLX_CF2_HPSUPP
value|(1<<9)
define|#
directive|define
name|MLX_CF2_NODISCN
value|(1<<10)
define|#
directive|define
name|MLX_CF2_ARM
value|(1<<13)
define|#
directive|define
name|MLX_CF2_OFM
value|(1<<15)
define|#
directive|define
name|MLX_CF2_AEMI
value|(MLX_CF2_ARM | MLX_CF2_OFM)
name|u_int8_t
name|cf_oemid
decl_stmt|;
name|u_int8_t
name|cf_oem_model
decl_stmt|;
name|u_int8_t
name|cf_physical_sector
decl_stmt|;
name|u_int8_t
name|cf_logical_sector
decl_stmt|;
name|u_int8_t
name|cf_blockfactor
decl_stmt|;
name|u_int8_t
name|cf_flags2
decl_stmt|;
define|#
directive|define
name|MLX_CF2_READAH
value|(1<<0)
define|#
directive|define
name|MLX_CF2_BIOSDLY
value|(1<<1)
define|#
directive|define
name|MLX_CF2_REASS1S
value|(1<<4)
define|#
directive|define
name|MLX_CF2_FUAENABL
value|(1<<6)
define|#
directive|define
name|MLX_CF2_R5ALLS
value|(1<<7)
name|u_int8_t
name|cf_rcrate
decl_stmt|;
name|u_int8_t
name|cf_res1
decl_stmt|;
name|u_int8_t
name|cf_blocks_per_cache_line
decl_stmt|;
name|u_int8_t
name|cf_blocks_per_stripe
decl_stmt|;
name|u_int8_t
name|cf_scsi_param_0
decl_stmt|;
name|u_int8_t
name|cf_scsi_param_1
decl_stmt|;
name|u_int8_t
name|cf_scsi_param_2
decl_stmt|;
name|u_int8_t
name|cf_scsi_param_3
decl_stmt|;
name|u_int8_t
name|cf_scsi_param_4
decl_stmt|;
name|u_int8_t
name|cf_scsi_param_5
decl_stmt|;
name|u_int8_t
name|cf_scsi_initiator_id
decl_stmt|;
name|u_int8_t
name|cf_res2
decl_stmt|;
name|u_int8_t
name|cf_startup_mode
decl_stmt|;
name|u_int8_t
name|cf_simultaneous_spinup_devices
decl_stmt|;
name|u_int8_t
name|cf_delay_between_spinups
decl_stmt|;
name|u_int8_t
name|cf_res3
decl_stmt|;
name|u_int16_t
name|cf_checksum
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_sys_drv_span
block|{
name|u_int32_t
name|sp_start_lba
decl_stmt|;
name|u_int32_t
name|sp_nblks
decl_stmt|;
name|u_int8_t
name|sp_arm
index|[
literal|8
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_sys_drv
block|{
name|u_int8_t
name|sd_status
decl_stmt|;
name|u_int8_t
name|sd_ext_status
decl_stmt|;
name|u_int8_t
name|sd_mod1
decl_stmt|;
name|u_int8_t
name|sd_mod2
decl_stmt|;
name|u_int8_t
name|sd_raidlevel
decl_stmt|;
define|#
directive|define
name|MLX_SYS_DRV_WRITEBACK
value|(1<<7)
define|#
directive|define
name|MLX_SYS_DRV_RAID0
value|0
define|#
directive|define
name|MLX_SYS_DRV_RAID1
value|1
define|#
directive|define
name|MLX_SYS_DRV_RAID3
value|3
define|#
directive|define
name|MLX_SYS_DRV_RAID5
value|5
define|#
directive|define
name|MLX_SYS_DRV_RAID6
value|6
define|#
directive|define
name|MLX_SYS_DRV_JBOD
value|7
name|u_int8_t
name|sd_valid_arms
decl_stmt|;
name|u_int8_t
name|sd_valid_spans
decl_stmt|;
name|u_int8_t
name|sd_init_state
decl_stmt|;
define|#
directive|define
name|MLX_SYS_DRV_INITTED
value|0x81;
name|struct
name|mlx_sys_drv_span
name|sd_span
index|[
literal|4
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_phys_drv
block|{
name|u_int8_t
name|pd_flags1
decl_stmt|;
define|#
directive|define
name|MLX_PHYS_DRV_PRESENT
value|(1<<0)
name|u_int8_t
name|pd_flags2
decl_stmt|;
define|#
directive|define
name|MLX_PHYS_DRV_OTHER
value|0x00
define|#
directive|define
name|MLX_PHYS_DRV_DISK
value|0x01
define|#
directive|define
name|MLX_PHYS_DRV_SEQUENTIAL
value|0x02
define|#
directive|define
name|MLX_PHYS_DRV_CDROM
value|0x03
define|#
directive|define
name|MLX_PHYS_DRV_FAST20
value|(1<<3)
define|#
directive|define
name|MLX_PHYS_DRV_SYNC
value|(1<<4)
define|#
directive|define
name|MLX_PHYS_DRV_FAST
value|(1<<5)
define|#
directive|define
name|MLX_PHYS_DRV_WIDE
value|(1<<6)
define|#
directive|define
name|MLX_PHYS_DRV_TAG
value|(1<<7)
name|u_int8_t
name|pd_status
decl_stmt|;
define|#
directive|define
name|MLX_PHYS_DRV_DEAD
value|0x00
define|#
directive|define
name|MLX_PHYS_DRV_WRONLY
value|0x02
define|#
directive|define
name|MLX_PHYS_DRV_ONLINE
value|0x03
define|#
directive|define
name|MLX_PHYS_DRV_STANDBY
value|0x10
name|u_int8_t
name|pd_res1
decl_stmt|;
name|u_int8_t
name|pd_period
decl_stmt|;
name|u_int8_t
name|pd_offset
decl_stmt|;
name|u_int32_t
name|pd_config_size
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_core_cfg
block|{
name|u_int8_t
name|cc_num_sys_drives
decl_stmt|;
name|u_int8_t
name|cc_res1
index|[
literal|3
index|]
decl_stmt|;
name|struct
name|mlx_sys_drv
name|cc_sys_drives
index|[
literal|32
index|]
decl_stmt|;
name|struct
name|mlx_phys_drv
name|cc_phys_drives
index|[
literal|5
operator|*
literal|16
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_dcdb
block|{
name|u_int8_t
name|dcdb_target
range|:
literal|4
decl_stmt|;
name|u_int8_t
name|dcdb_channel
range|:
literal|4
decl_stmt|;
name|u_int8_t
name|dcdb_flags
decl_stmt|;
define|#
directive|define
name|MLX_DCDB_NO_DATA
value|0x00
define|#
directive|define
name|MLX_DCDB_DATA_IN
value|0x01
define|#
directive|define
name|MLX_DCDB_DATA_OUT
value|0x02
define|#
directive|define
name|MLX_DCDB_EARLY_STATUS
value|(1<<2)
define|#
directive|define
name|MLX_DCDB_TIMEOUT_10S
value|0x10
define|#
directive|define
name|MLX_DCDB_TIMEOUT_60S
value|0x20
define|#
directive|define
name|MLX_DCDB_TIMEOUT_20M
value|0x30
define|#
directive|define
name|MLX_DCDB_TIMEOUT_24H
value|0x40
define|#
directive|define
name|MLX_DCDB_NO_AUTO_SENSE
value|(1<<6)
define|#
directive|define
name|MLX_DCDB_DISCONNECT
value|(1<<7)
name|u_int16_t
name|dcdb_datasize
decl_stmt|;
name|u_int32_t
name|dcdb_physaddr
decl_stmt|;
name|u_int8_t
name|dcdb_cdb_length
range|:
literal|4
decl_stmt|;
name|u_int8_t
name|dcdb_datasize_high
range|:
literal|4
decl_stmt|;
name|u_int8_t
name|dcdb_sense_length
decl_stmt|;
name|u_int8_t
name|dcdb_cdb
index|[
literal|12
index|]
decl_stmt|;
name|u_int8_t
name|dcdb_sense
index|[
literal|64
index|]
decl_stmt|;
name|u_int8_t
name|dcdb_status
decl_stmt|;
name|u_int8_t
name|res1
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx_bbtable_entry
block|{
name|u_int32_t
name|bbt_block_number
decl_stmt|;
name|u_int8_t
name|bbt_extent
decl_stmt|;
name|u_int8_t
name|res1
decl_stmt|;
name|u_int8_t
name|bbt_entry_type
decl_stmt|;
name|u_int8_t
name|bbt_system_drive
range|:
literal|5
decl_stmt|;
name|u_int8_t
name|res2
range|:
literal|3
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_comment
comment|/*  * Inlines to build various command structures  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|mlx_make_type1
parameter_list|(
name|struct
name|mlx_command
modifier|*
name|mc
parameter_list|,
name|u_int8_t
name|code
parameter_list|,
name|u_int16_t
name|f1
parameter_list|,
name|u_int32_t
name|f2
parameter_list|,
name|u_int8_t
name|f3
parameter_list|,
name|u_int32_t
name|f4
parameter_list|,
name|u_int8_t
name|f5
parameter_list|)
block|{
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x0
index|]
operator|=
name|code
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x2
index|]
operator|=
name|f1
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x3
index|]
operator|=
operator|(
operator|(
operator|(
name|f2
operator|>>
literal|24
operator|)
operator|&
literal|0x3
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
operator|(
name|f1
operator|>>
literal|8
operator|)
operator|&
literal|0x3f
operator|)
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x4
index|]
operator|=
name|f2
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x5
index|]
operator|=
operator|(
name|f2
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x6
index|]
operator|=
operator|(
name|f2
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x7
index|]
operator|=
name|f3
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x8
index|]
operator|=
name|f4
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x9
index|]
operator|=
operator|(
name|f4
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xa
index|]
operator|=
operator|(
name|f4
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xb
index|]
operator|=
operator|(
name|f4
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xc
index|]
operator|=
name|f5
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mlx_make_type2
parameter_list|(
name|struct
name|mlx_command
modifier|*
name|mc
parameter_list|,
name|u_int8_t
name|code
parameter_list|,
name|u_int8_t
name|f1
parameter_list|,
name|u_int8_t
name|f2
parameter_list|,
name|u_int8_t
name|f3
parameter_list|,
name|u_int8_t
name|f4
parameter_list|,
name|u_int8_t
name|f5
parameter_list|,
name|u_int8_t
name|f6
parameter_list|,
name|u_int32_t
name|f7
parameter_list|,
name|u_int8_t
name|f8
parameter_list|)
block|{
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x0
index|]
operator|=
name|code
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x2
index|]
operator|=
name|f1
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x3
index|]
operator|=
name|f2
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x4
index|]
operator|=
name|f3
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x5
index|]
operator|=
name|f4
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x6
index|]
operator|=
name|f5
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x7
index|]
operator|=
name|f6
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x8
index|]
operator|=
name|f7
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x9
index|]
operator|=
operator|(
name|f7
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xa
index|]
operator|=
operator|(
name|f7
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xb
index|]
operator|=
operator|(
name|f7
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xc
index|]
operator|=
name|f8
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mlx_make_type3
parameter_list|(
name|struct
name|mlx_command
modifier|*
name|mc
parameter_list|,
name|u_int8_t
name|code
parameter_list|,
name|u_int8_t
name|f1
parameter_list|,
name|u_int8_t
name|f2
parameter_list|,
name|u_int16_t
name|f3
parameter_list|,
name|u_int8_t
name|f4
parameter_list|,
name|u_int8_t
name|f5
parameter_list|,
name|u_int32_t
name|f6
parameter_list|,
name|u_int8_t
name|f7
parameter_list|)
block|{
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x0
index|]
operator|=
name|code
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x2
index|]
operator|=
name|f1
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x3
index|]
operator|=
name|f2
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x4
index|]
operator|=
name|f3
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x5
index|]
operator|=
operator|(
name|f3
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x6
index|]
operator|=
name|f4
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x7
index|]
operator|=
name|f5
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x8
index|]
operator|=
name|f6
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x9
index|]
operator|=
operator|(
name|f6
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xa
index|]
operator|=
operator|(
name|f6
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xb
index|]
operator|=
operator|(
name|f6
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xc
index|]
operator|=
name|f7
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mlx_make_type4
parameter_list|(
name|struct
name|mlx_command
modifier|*
name|mc
parameter_list|,
name|u_int8_t
name|code
parameter_list|,
name|u_int16_t
name|f1
parameter_list|,
name|u_int32_t
name|f2
parameter_list|,
name|u_int32_t
name|f3
parameter_list|,
name|u_int8_t
name|f4
parameter_list|)
block|{
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x0
index|]
operator|=
name|code
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x2
index|]
operator|=
name|f1
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x3
index|]
operator|=
operator|(
name|f1
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x4
index|]
operator|=
name|f2
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x5
index|]
operator|=
operator|(
name|f2
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x6
index|]
operator|=
operator|(
name|f2
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x7
index|]
operator|=
operator|(
name|f2
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x8
index|]
operator|=
name|f3
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x9
index|]
operator|=
operator|(
name|f3
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xa
index|]
operator|=
operator|(
name|f3
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xb
index|]
operator|=
operator|(
name|f3
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xc
index|]
operator|=
name|f4
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mlx_make_type5
parameter_list|(
name|struct
name|mlx_command
modifier|*
name|mc
parameter_list|,
name|u_int8_t
name|code
parameter_list|,
name|u_int8_t
name|f1
parameter_list|,
name|u_int8_t
name|f2
parameter_list|,
name|u_int32_t
name|f3
parameter_list|,
name|u_int32_t
name|f4
parameter_list|,
name|u_int8_t
name|f5
parameter_list|)
block|{
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x0
index|]
operator|=
name|code
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x2
index|]
operator|=
name|f1
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x3
index|]
operator|=
name|f2
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x4
index|]
operator|=
name|f3
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x5
index|]
operator|=
operator|(
name|f3
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x6
index|]
operator|=
operator|(
name|f3
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x7
index|]
operator|=
operator|(
name|f3
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x8
index|]
operator|=
name|f4
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0x9
index|]
operator|=
operator|(
name|f4
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xa
index|]
operator|=
operator|(
name|f4
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xb
index|]
operator|=
operator|(
name|f4
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|mc
operator|->
name|mc_mailbox
index|[
literal|0xc
index|]
operator|=
name|f5
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

end_unit

