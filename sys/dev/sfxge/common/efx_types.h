begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright 2007-2009 Solarflare Communications Inc.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * Ackowledgement to Fen Systems Ltd.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_EFX_TYPES_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_EFX_TYPES_H
end_define

begin_include
include|#
directive|include
file|"efsys.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Bitfield access  *  * Solarflare NICs make extensive use of bitfields up to 128 bits  * wide.  Since there is no native 128-bit datatype on most systems,  * and since 64-bit datatypes are inefficient on 32-bit systems and  * vice versa, we wrap accesses in a way that uses the most efficient  * datatype.  *  * The NICs are PCI devices and therefore little-endian.  Since most  * of the quantities that we deal with are DMAed to/from host memory,  * we define	our datatypes (efx_oword_t, efx_qword_t and efx_dword_t)  * to be little-endian.  *  * In the less common case of using PIO for individual register  * writes, we construct the little-endian datatype in host memory and  * then use non-swapping register access primitives, rather than  * constructing a native-endian datatype and relying on implicit  * byte-swapping.  (We use a similar strategy for register reads.)  */
comment|/*  * NOTE: Field definitions here and elsewhere are done in terms of a lowest  *       bit number (LBN) and a width.  */
define|#
directive|define
name|EFX_DUMMY_FIELD_LBN
value|0
define|#
directive|define
name|EFX_DUMMY_FIELD_WIDTH
value|0
define|#
directive|define
name|EFX_BYTE_0_LBN
value|0
define|#
directive|define
name|EFX_BYTE_0_WIDTH
value|8
define|#
directive|define
name|EFX_BYTE_1_LBN
value|8
define|#
directive|define
name|EFX_BYTE_1_WIDTH
value|8
define|#
directive|define
name|EFX_BYTE_2_LBN
value|16
define|#
directive|define
name|EFX_BYTE_2_WIDTH
value|8
define|#
directive|define
name|EFX_BYTE_3_LBN
value|24
define|#
directive|define
name|EFX_BYTE_3_WIDTH
value|8
define|#
directive|define
name|EFX_BYTE_4_LBN
value|32
define|#
directive|define
name|EFX_BYTE_4_WIDTH
value|8
define|#
directive|define
name|EFX_BYTE_5_LBN
value|40
define|#
directive|define
name|EFX_BYTE_5_WIDTH
value|8
define|#
directive|define
name|EFX_BYTE_6_LBN
value|48
define|#
directive|define
name|EFX_BYTE_6_WIDTH
value|8
define|#
directive|define
name|EFX_BYTE_7_LBN
value|56
define|#
directive|define
name|EFX_BYTE_7_WIDTH
value|8
define|#
directive|define
name|EFX_WORD_0_LBN
value|0
define|#
directive|define
name|EFX_WORD_0_WIDTH
value|16
define|#
directive|define
name|EFX_WORD_1_LBN
value|16
define|#
directive|define
name|EFX_WORD_1_WIDTH
value|16
define|#
directive|define
name|EFX_WORD_2_LBN
value|32
define|#
directive|define
name|EFX_WORD_2_WIDTH
value|16
define|#
directive|define
name|EFX_WORD_3_LBN
value|48
define|#
directive|define
name|EFX_WORD_3_WIDTH
value|16
define|#
directive|define
name|EFX_DWORD_0_LBN
value|0
define|#
directive|define
name|EFX_DWORD_0_WIDTH
value|32
define|#
directive|define
name|EFX_DWORD_1_LBN
value|32
define|#
directive|define
name|EFX_DWORD_1_WIDTH
value|32
define|#
directive|define
name|EFX_DWORD_2_LBN
value|64
define|#
directive|define
name|EFX_DWORD_2_WIDTH
value|32
define|#
directive|define
name|EFX_DWORD_3_LBN
value|96
define|#
directive|define
name|EFX_DWORD_3_WIDTH
value|32
define|#
directive|define
name|EFX_QWORD_0_LBN
value|0
define|#
directive|define
name|EFX_QWORD_0_WIDTH
value|64
define|#
directive|define
name|EFX_QWORD_1_LBN
value|64
define|#
directive|define
name|EFX_QWORD_1_WIDTH
value|64
comment|/* Specified attribute (i.e. LBN ow WIDTH) of the specified field */
define|#
directive|define
name|EFX_VAL
parameter_list|(
name|_field
parameter_list|,
name|_attribute
parameter_list|)
define|\
value|_field ## _ ## _attribute
comment|/* Lowest bit number of the specified field */
define|#
directive|define
name|EFX_LOW_BIT
parameter_list|(
name|_field
parameter_list|)
define|\
value|EFX_VAL(_field, LBN)
comment|/* Width of the specified field */
define|#
directive|define
name|EFX_WIDTH
parameter_list|(
name|_field
parameter_list|)
define|\
value|EFX_VAL(_field, WIDTH)
comment|/* Highest bit number of the specified field */
define|#
directive|define
name|EFX_HIGH_BIT
parameter_list|(
name|_field
parameter_list|)
define|\
value|(EFX_LOW_BIT(_field) + EFX_WIDTH(_field) - 1)
comment|/*  * 64-bit mask equal in width to the specified field.  *  * For example, a field with width 5 would have a mask of 0x000000000000001f.  */
define|#
directive|define
name|EFX_MASK64
parameter_list|(
name|_field
parameter_list|)
define|\
value|((EFX_WIDTH(_field) == 64) ? ~((uint64_t)0) :			\ 	    (((((uint64_t)1)<< EFX_WIDTH(_field))) - 1))
comment|/*  * 32-bit mask equal in width to the specified field.  *  * For example, a field with width 5 would have a mask of 0x0000001f.  */
define|#
directive|define
name|EFX_MASK32
parameter_list|(
name|_field
parameter_list|)
define|\
value|((EFX_WIDTH(_field) == 32) ? ~((uint32_t)0) :			\ 	    (((((uint32_t)1)<< EFX_WIDTH(_field))) - 1))
comment|/*  * 16-bit mask equal in width to the specified field.  *  * For example, a field with width 5 would have a mask of 0x001f.  */
define|#
directive|define
name|EFX_MASK16
parameter_list|(
name|_field
parameter_list|)
define|\
value|((EFX_WIDTH(_field) == 16) ? 0xffffu :				\ 	    (uint16_t)((1<< EFX_WIDTH(_field)) - 1))
comment|/*  * 8-bit mask equal in width to the specified field.  *  * For example, a field with width 5 would have a mask of 0x1f.  */
define|#
directive|define
name|EFX_MASK8
parameter_list|(
name|_field
parameter_list|)
define|\
value|((uint8_t)((1<< EFX_WIDTH(_field)) - 1))
pragma|#
directive|pragma
name|pack
name|(
name|1
name|)
comment|/*  * A byte (i.e. 8-bit) datatype  */
typedef|typedef
union|union
name|efx_byte_u
block|{
name|uint8_t
name|eb_u8
index|[
literal|1
index|]
decl_stmt|;
block|}
name|efx_byte_t
typedef|;
comment|/*  * A word (i.e. 16-bit) datatype  *  * This datatype is defined to be little-endian.  */
typedef|typedef
union|union
name|efx_word_u
block|{
name|efx_byte_t
name|ew_byte
index|[
literal|2
index|]
decl_stmt|;
name|uint16_t
name|ew_u16
index|[
literal|1
index|]
decl_stmt|;
name|uint8_t
name|ew_u8
index|[
literal|2
index|]
decl_stmt|;
block|}
name|efx_word_t
typedef|;
comment|/*  * A doubleword (i.e. 32-bit) datatype  *  * This datatype is defined to be little-endian.  */
typedef|typedef
union|union
name|efx_dword_u
block|{
name|efx_byte_t
name|ed_byte
index|[
literal|4
index|]
decl_stmt|;
name|efx_word_t
name|ed_word
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|ed_u32
index|[
literal|1
index|]
decl_stmt|;
name|uint16_t
name|ed_u16
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|ed_u8
index|[
literal|4
index|]
decl_stmt|;
block|}
name|efx_dword_t
typedef|;
comment|/*  * A quadword (i.e. 64-bit) datatype  *  * This datatype is defined to be little-endian.  */
typedef|typedef
union|union
name|efx_qword_u
block|{
name|efx_byte_t
name|eq_byte
index|[
literal|8
index|]
decl_stmt|;
name|efx_word_t
name|eq_word
index|[
literal|4
index|]
decl_stmt|;
name|efx_dword_t
name|eq_dword
index|[
literal|2
index|]
decl_stmt|;
if|#
directive|if
name|EFSYS_HAS_UINT64
name|uint64_t
name|eq_u64
index|[
literal|1
index|]
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|eq_u32
index|[
literal|2
index|]
decl_stmt|;
name|uint16_t
name|eq_u16
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|eq_u8
index|[
literal|8
index|]
decl_stmt|;
block|}
name|efx_qword_t
typedef|;
comment|/*  * An octword (i.e. 128-bit) datatype  *  * This datatype is defined to be little-endian.  */
typedef|typedef
union|union
name|efx_oword_u
block|{
name|efx_byte_t
name|eo_byte
index|[
literal|16
index|]
decl_stmt|;
name|efx_word_t
name|eo_word
index|[
literal|8
index|]
decl_stmt|;
name|efx_dword_t
name|eo_dword
index|[
literal|4
index|]
decl_stmt|;
name|efx_qword_t
name|eo_qword
index|[
literal|2
index|]
decl_stmt|;
if|#
directive|if
name|EFSYS_HAS_UINT64
name|uint64_t
name|eo_u64
index|[
literal|2
index|]
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|eo_u32
index|[
literal|4
index|]
decl_stmt|;
name|uint16_t
name|eo_u16
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|eo_u8
index|[
literal|16
index|]
decl_stmt|;
block|}
name|efx_oword_t
typedef|;
pragma|#
directive|pragma
name|pack
name|(
name|)
define|#
directive|define
name|__SWAP16
parameter_list|(
name|_x
parameter_list|)
define|\
value|((((_x)& 0xff)<< 8) |			\ 	(((_x)>> 8)& 0xff))
define|#
directive|define
name|__SWAP32
parameter_list|(
name|_x
parameter_list|)
define|\
value|((__SWAP16((_x)& 0xffff)<< 16) |	\ 	__SWAP16(((_x)>> 16)& 0xffff))
define|#
directive|define
name|__SWAP64
parameter_list|(
name|_x
parameter_list|)
define|\
value|((__SWAP32((_x)& 0xffffffff)<< 32) |	\ 	__SWAP32(((_x)>> 32)& 0xffffffff))
define|#
directive|define
name|__NOSWAP16
parameter_list|(
name|_x
parameter_list|)
value|(_x)
define|#
directive|define
name|__NOSWAP32
parameter_list|(
name|_x
parameter_list|)
value|(_x)
define|#
directive|define
name|__NOSWAP64
parameter_list|(
name|_x
parameter_list|)
value|(_x)
if|#
directive|if
name|EFSYS_IS_BIG_ENDIAN
define|#
directive|define
name|__CPU_TO_LE_16
parameter_list|(
name|_x
parameter_list|)
value|(uint16_t)__SWAP16(_x)
define|#
directive|define
name|__LE_TO_CPU_16
parameter_list|(
name|_x
parameter_list|)
value|(uint16_t)__SWAP16(_x)
define|#
directive|define
name|__CPU_TO_BE_16
parameter_list|(
name|_x
parameter_list|)
value|(uint16_t)__NOSWAP16(_x)
define|#
directive|define
name|__BE_TO_CPU_16
parameter_list|(
name|_x
parameter_list|)
value|(uint16_t)__NOSWAP16(_x)
define|#
directive|define
name|__CPU_TO_LE_32
parameter_list|(
name|_x
parameter_list|)
value|(uint32_t)__SWAP32(_x)
define|#
directive|define
name|__LE_TO_CPU_32
parameter_list|(
name|_x
parameter_list|)
value|(uint32_t)__SWAP32(_x)
define|#
directive|define
name|__CPU_TO_BE_32
parameter_list|(
name|_x
parameter_list|)
value|(uint32_t)__NOSWAP32(_x)
define|#
directive|define
name|__BE_TO_CPU_32
parameter_list|(
name|_x
parameter_list|)
value|(uint32_t)__NOSWAP32(_x)
define|#
directive|define
name|__CPU_TO_LE_64
parameter_list|(
name|_x
parameter_list|)
value|(uint64_t)__SWAP64(_x)
define|#
directive|define
name|__LE_TO_CPU_64
parameter_list|(
name|_x
parameter_list|)
value|(uint64_t)__SWAP64(_x)
define|#
directive|define
name|__CPU_TO_BE_64
parameter_list|(
name|_x
parameter_list|)
value|(uint64_t)__NOSWAP64(_x)
define|#
directive|define
name|__BE_TO_CPU_64
parameter_list|(
name|_x
parameter_list|)
value|(uint64_t)__NOSWAP64(_x)
elif|#
directive|elif
name|EFSYS_IS_LITTLE_ENDIAN
define|#
directive|define
name|__CPU_TO_LE_16
parameter_list|(
name|_x
parameter_list|)
value|(uint16_t)__NOSWAP16(_x)
define|#
directive|define
name|__LE_TO_CPU_16
parameter_list|(
name|_x
parameter_list|)
value|(uint16_t)__NOSWAP16(_x)
define|#
directive|define
name|__CPU_TO_BE_16
parameter_list|(
name|_x
parameter_list|)
value|(uint16_t)__SWAP16(_x)
define|#
directive|define
name|__BE_TO_CPU_16
parameter_list|(
name|_x
parameter_list|)
value|(uint16_t)__SWAP16(_x)
define|#
directive|define
name|__CPU_TO_LE_32
parameter_list|(
name|_x
parameter_list|)
value|(uint32_t)__NOSWAP32(_x)
define|#
directive|define
name|__LE_TO_CPU_32
parameter_list|(
name|_x
parameter_list|)
value|(uint32_t)__NOSWAP32(_x)
define|#
directive|define
name|__CPU_TO_BE_32
parameter_list|(
name|_x
parameter_list|)
value|(uint32_t)__SWAP32(_x)
define|#
directive|define
name|__BE_TO_CPU_32
parameter_list|(
name|_x
parameter_list|)
value|(uint32_t)__SWAP32(_x)
define|#
directive|define
name|__CPU_TO_LE_64
parameter_list|(
name|_x
parameter_list|)
value|(uint64_t)__NOSWAP64(_x)
define|#
directive|define
name|__LE_TO_CPU_64
parameter_list|(
name|_x
parameter_list|)
value|(uint64_t)__NOSWAP64(_x)
define|#
directive|define
name|__CPU_TO_BE_64
parameter_list|(
name|_x
parameter_list|)
value|(uint64_t)__SWAP64(_x)
define|#
directive|define
name|__BE_TO_CPU_64
parameter_list|(
name|_x
parameter_list|)
value|(uint64_t)__SWAP64(_x)
else|#
directive|else
error|#
directive|error
literal|"Neither of EFSYS_IS_{BIG,LITTLE}_ENDIAN is set"
endif|#
directive|endif
define|#
directive|define
name|__NATIVE_8
parameter_list|(
name|_x
parameter_list|)
value|(uint8_t)(_x)
comment|/* Format string for printing an efx_byte_t */
define|#
directive|define
name|EFX_BYTE_FMT
value|"0x%02x"
comment|/* Format string for printing an efx_word_t */
define|#
directive|define
name|EFX_WORD_FMT
value|"0x%04x"
comment|/* Format string for printing an efx_dword_t */
define|#
directive|define
name|EFX_DWORD_FMT
value|"0x%08x"
comment|/* Format string for printing an efx_qword_t */
define|#
directive|define
name|EFX_QWORD_FMT
value|"0x%08x:%08x"
comment|/* Format string for printing an efx_oword_t */
define|#
directive|define
name|EFX_OWORD_FMT
value|"0x%08x:%08x:%08x:%08x"
comment|/* Parameters for printing an efx_byte_t */
define|#
directive|define
name|EFX_BYTE_VAL
parameter_list|(
name|_byte
parameter_list|)
define|\
value|((unsigned int)__NATIVE_8((_byte).eb_u8[0]))
comment|/* Parameters for printing an efx_word_t */
define|#
directive|define
name|EFX_WORD_VAL
parameter_list|(
name|_word
parameter_list|)
define|\
value|((unsigned int)__LE_TO_CPU_16((_word).ew_u16[0]))
comment|/* Parameters for printing an efx_dword_t */
define|#
directive|define
name|EFX_DWORD_VAL
parameter_list|(
name|_dword
parameter_list|)
define|\
value|((unsigned int)__LE_TO_CPU_32((_dword).ed_u32[0]))
comment|/* Parameters for printing an efx_qword_t */
define|#
directive|define
name|EFX_QWORD_VAL
parameter_list|(
name|_qword
parameter_list|)
define|\
value|((unsigned int)__LE_TO_CPU_32((_qword).eq_u32[1])),	\ 	((unsigned int)__LE_TO_CPU_32((_qword).eq_u32[0]))
comment|/* Parameters for printing an efx_oword_t */
define|#
directive|define
name|EFX_OWORD_VAL
parameter_list|(
name|_oword
parameter_list|)
define|\
value|((unsigned int)__LE_TO_CPU_32((_oword).eo_u32[3])),	\ 	((unsigned int)__LE_TO_CPU_32((_oword).eo_u32[2])),	\ 	((unsigned int)__LE_TO_CPU_32((_oword).eo_u32[1])),	\ 	((unsigned int)__LE_TO_CPU_32((_oword).eo_u32[0]))
comment|/*  * Stop lint complaining about some shifts.  */
ifdef|#
directive|ifdef
name|__lint
specifier|extern
name|int
name|fix_lint
decl_stmt|;
define|#
directive|define
name|FIX_LINT
parameter_list|(
name|_x
parameter_list|)
value|(_x + fix_lint)
else|#
directive|else
define|#
directive|define
name|FIX_LINT
parameter_list|(
name|_x
parameter_list|)
value|(_x)
endif|#
directive|endif
comment|/*  * Extract bit field portion [low,high) from the native-endian element  * which contains bits [min,max).  *  * For example, suppose "element" represents the high 32 bits of a  * 64-bit value, and we wish to extract the bits belonging to the bit  * field occupying bits 28-45 of this 64-bit value.  *  * Then EFX_EXTRACT(_element, 32, 63, 28, 45) would give  *  *   (_element)<< 4  *  * The result will contain the relevant bits filled in in the range  * [0,high-low), with garbage in bits [high-low+1,...).  */
define|#
directive|define
name|EFX_EXTRACT_NATIVE
parameter_list|(
name|_element
parameter_list|,
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|((FIX_LINT(_low> _max) || FIX_LINT(_high< _min)) ?		\ 		0U :							\ 		((_low> _min) ?					\ 			((_element)>> (_low - _min)) :			\ 			((_element)<< (_min - _low))))
comment|/*  * Extract bit field portion [low,high) from the 64-bit little-endian  * element which contains bits [min,max)  */
define|#
directive|define
name|EFX_EXTRACT64
parameter_list|(
name|_element
parameter_list|,
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|EFX_EXTRACT_NATIVE(__LE_TO_CPU_64(_element), _min, _max, _low, _high)
comment|/*  * Extract bit field portion [low,high) from the 32-bit little-endian  * element which contains bits [min,max)  */
define|#
directive|define
name|EFX_EXTRACT32
parameter_list|(
name|_element
parameter_list|,
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|EFX_EXTRACT_NATIVE(__LE_TO_CPU_32(_element), _min, _max, _low, _high)
comment|/*  * Extract bit field portion [low,high) from the 16-bit little-endian  * element which contains bits [min,max)  */
define|#
directive|define
name|EFX_EXTRACT16
parameter_list|(
name|_element
parameter_list|,
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|EFX_EXTRACT_NATIVE(__LE_TO_CPU_16(_element), _min, _max, _low, _high)
comment|/*  * Extract bit field portion [low,high) from the 8-bit  * element which contains bits [min,max)  */
define|#
directive|define
name|EFX_EXTRACT8
parameter_list|(
name|_element
parameter_list|,
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|EFX_EXTRACT_NATIVE(__NATIVE_8(_element), _min, _max, _low, _high)
define|#
directive|define
name|EFX_EXTRACT_OWORD64
parameter_list|(
name|_oword
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|(EFX_EXTRACT64((_oword).eo_u64[0], FIX_LINT(0), FIX_LINT(63),	\ 	    _low, _high) |						\ 	EFX_EXTRACT64((_oword).eo_u64[1], FIX_LINT(64), FIX_LINT(127),	\ 	    _low, _high))
define|#
directive|define
name|EFX_EXTRACT_OWORD32
parameter_list|(
name|_oword
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|(EFX_EXTRACT32((_oword).eo_u32[0], FIX_LINT(0), FIX_LINT(31),	\ 	    _low, _high) |						\ 	EFX_EXTRACT32((_oword).eo_u32[1], FIX_LINT(32), FIX_LINT(63),	\ 	    _low, _high) |						\ 	EFX_EXTRACT32((_oword).eo_u32[2], FIX_LINT(64), FIX_LINT(95),	\ 	    _low, _high) |						\ 	EFX_EXTRACT32((_oword).eo_u32[3], FIX_LINT(96), FIX_LINT(127),	\ 	    _low, _high))
define|#
directive|define
name|EFX_EXTRACT_QWORD64
parameter_list|(
name|_qword
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|(EFX_EXTRACT64((_qword).eq_u64[0], FIX_LINT(0), FIX_LINT(63),	\ 	    _low, _high))
define|#
directive|define
name|EFX_EXTRACT_QWORD32
parameter_list|(
name|_qword
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|(EFX_EXTRACT32((_qword).eq_u32[0], FIX_LINT(0), FIX_LINT(31),	\ 	    _low, _high) |						\ 	EFX_EXTRACT32((_qword).eq_u32[1], FIX_LINT(32), FIX_LINT(63),	\ 	    _low, _high))
define|#
directive|define
name|EFX_EXTRACT_DWORD
parameter_list|(
name|_dword
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|(EFX_EXTRACT32((_dword).ed_u32[0], FIX_LINT(0), FIX_LINT(31),	\ 	    _low, _high))
define|#
directive|define
name|EFX_EXTRACT_WORD
parameter_list|(
name|_word
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|(EFX_EXTRACT16((_word).ew_u16[0], FIX_LINT(0), FIX_LINT(15),	\ 	    _low, _high))
define|#
directive|define
name|EFX_EXTRACT_BYTE
parameter_list|(
name|_byte
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|)
define|\
value|(EFX_EXTRACT8((_byte).eb_u8[0], FIX_LINT(0), FIX_LINT(7),	\ 	    _low, _high))
define|#
directive|define
name|EFX_OWORD_FIELD64
parameter_list|(
name|_oword
parameter_list|,
name|_field
parameter_list|)
define|\
value|((uint32_t)EFX_EXTRACT_OWORD64(_oword, EFX_LOW_BIT(_field),	\ 	    EFX_HIGH_BIT(_field))& EFX_MASK32(_field))
define|#
directive|define
name|EFX_OWORD_FIELD32
parameter_list|(
name|_oword
parameter_list|,
name|_field
parameter_list|)
define|\
value|(EFX_EXTRACT_OWORD32(_oword, EFX_LOW_BIT(_field),		\ 	    EFX_HIGH_BIT(_field))& EFX_MASK32(_field))
define|#
directive|define
name|EFX_QWORD_FIELD64
parameter_list|(
name|_qword
parameter_list|,
name|_field
parameter_list|)
define|\
value|((uint32_t)EFX_EXTRACT_QWORD64(_qword, EFX_LOW_BIT(_field),	\ 	    EFX_HIGH_BIT(_field))& EFX_MASK32(_field))
define|#
directive|define
name|EFX_QWORD_FIELD32
parameter_list|(
name|_qword
parameter_list|,
name|_field
parameter_list|)
define|\
value|(EFX_EXTRACT_QWORD32(_qword, EFX_LOW_BIT(_field),		\ 	    EFX_HIGH_BIT(_field))& EFX_MASK32(_field))
define|#
directive|define
name|EFX_DWORD_FIELD
parameter_list|(
name|_dword
parameter_list|,
name|_field
parameter_list|)
define|\
value|(EFX_EXTRACT_DWORD(_dword, EFX_LOW_BIT(_field),			\ 	    EFX_HIGH_BIT(_field))& EFX_MASK32(_field))
define|#
directive|define
name|EFX_WORD_FIELD
parameter_list|(
name|_word
parameter_list|,
name|_field
parameter_list|)
define|\
value|(EFX_EXTRACT_WORD(_word, EFX_LOW_BIT(_field),			\ 	    EFX_HIGH_BIT(_field))& EFX_MASK16(_field))
define|#
directive|define
name|EFX_BYTE_FIELD
parameter_list|(
name|_byte
parameter_list|,
name|_field
parameter_list|)
define|\
value|(EFX_EXTRACT_BYTE(_byte, EFX_LOW_BIT(_field),			\ 	    EFX_HIGH_BIT(_field))& EFX_MASK8(_field))
define|#
directive|define
name|EFX_OWORD_IS_EQUAL64
parameter_list|(
name|_oword_a
parameter_list|,
name|_oword_b
parameter_list|)
define|\
value|((_oword_a).eo_u64[0] == (_oword_b).eo_u64[0]&&		\ 	    (_oword_a).eo_u64[1] == (_oword_b).eo_u64[1])
define|#
directive|define
name|EFX_OWORD_IS_EQUAL32
parameter_list|(
name|_oword_a
parameter_list|,
name|_oword_b
parameter_list|)
define|\
value|((_oword_a).eo_u32[0] == (_oword_b).eo_u32[0]&&		\ 	    (_oword_a).eo_u32[1] == (_oword_b).eo_u32[1]&&		\ 	    (_oword_a).eo_u32[2] == (_oword_b).eo_u32[2]&&		\ 	    (_oword_a).eo_u32[3] == (_oword_b).eo_u32[3])
define|#
directive|define
name|EFX_QWORD_IS_EQUAL64
parameter_list|(
name|_qword_a
parameter_list|,
name|_qword_b
parameter_list|)
define|\
value|((_qword_a).eq_u64[0] == (_qword_b).eq_u64[0])
define|#
directive|define
name|EFX_QWORD_IS_EQUAL32
parameter_list|(
name|_qword_a
parameter_list|,
name|_qword_b
parameter_list|)
define|\
value|((_qword_a).eq_u32[0] == (_qword_b).eq_u32[0]&&		\ 	    (_qword_a).eq_u32[1] == (_qword_b).eq_u32[1])
define|#
directive|define
name|EFX_DWORD_IS_EQUAL
parameter_list|(
name|_dword_a
parameter_list|,
name|_dword_b
parameter_list|)
define|\
value|((_dword_a).ed_u32[0] == (_dword_b).ed_u32[0])
define|#
directive|define
name|EFX_WORD_IS_EQUAL
parameter_list|(
name|_word_a
parameter_list|,
name|_word_b
parameter_list|)
define|\
value|((_word_a).ew_u16[0] == (_word_b).ew_u16[0])
define|#
directive|define
name|EFX_BYTE_IS_EQUAL
parameter_list|(
name|_byte_a
parameter_list|,
name|_byte_b
parameter_list|)
define|\
value|((_byte_a).eb_u8[0] == (_byte_b).eb_u8[0])
define|#
directive|define
name|EFX_OWORD_IS_ZERO64
parameter_list|(
name|_oword
parameter_list|)
define|\
value|(((_oword).eo_u64[0] |						\ 	    (_oword).eo_u64[1]) == 0)
define|#
directive|define
name|EFX_OWORD_IS_ZERO32
parameter_list|(
name|_oword
parameter_list|)
define|\
value|(((_oword).eo_u32[0] |						\ 	    (_oword).eo_u32[1] |					\ 	    (_oword).eo_u32[2] |					\ 	    (_oword).eo_u32[3]) == 0)
define|#
directive|define
name|EFX_QWORD_IS_ZERO64
parameter_list|(
name|_qword
parameter_list|)
define|\
value|(((_qword).eq_u64[0]) == 0)
define|#
directive|define
name|EFX_QWORD_IS_ZERO32
parameter_list|(
name|_qword
parameter_list|)
define|\
value|(((_qword).eq_u32[0] |						\ 	    (_qword).eq_u32[1]) == 0)
define|#
directive|define
name|EFX_DWORD_IS_ZERO
parameter_list|(
name|_dword
parameter_list|)
define|\
value|(((_dword).ed_u32[0]) == 0)
define|#
directive|define
name|EFX_WORD_IS_ZERO
parameter_list|(
name|_word
parameter_list|)
define|\
value|(((_word).ew_u16[0]) == 0)
define|#
directive|define
name|EFX_BYTE_IS_ZERO
parameter_list|(
name|_byte
parameter_list|)
define|\
value|(((_byte).eb_u8[0]) == 0)
define|#
directive|define
name|EFX_OWORD_IS_SET64
parameter_list|(
name|_oword
parameter_list|)
define|\
value|(((_oword).eo_u64[0]&						\ 	    (_oword).eo_u64[1]) == ~((uint64_t)0))
define|#
directive|define
name|EFX_OWORD_IS_SET32
parameter_list|(
name|_oword
parameter_list|)
define|\
value|(((_oword).eo_u32[0]&						\ 	    (_oword).eo_u32[1]&					\ 	    (_oword).eo_u32[2]&					\ 	    (_oword).eo_u32[3]) == ~((uint32_t)0))
define|#
directive|define
name|EFX_QWORD_IS_SET64
parameter_list|(
name|_qword
parameter_list|)
define|\
value|(((_qword).eq_u64[0]) == ~((uint32_t)0))
define|#
directive|define
name|EFX_QWORD_IS_SET32
parameter_list|(
name|_qword
parameter_list|)
define|\
value|(((_qword).eq_u32[0]&						\ 	    (_qword).eq_u32[1]) == ~((uint32_t)0))
define|#
directive|define
name|EFX_DWORD_IS_SET
parameter_list|(
name|_dword
parameter_list|)
define|\
value|((_dword).ed_u32[0] == ~((uint32_t)0))
define|#
directive|define
name|EFX_WORD_IS_SET
parameter_list|(
name|_word
parameter_list|)
define|\
value|((_word).ew_u16[0] == ~((uint16_t)0))
define|#
directive|define
name|EFX_BYTE_IS_SET
parameter_list|(
name|_byte
parameter_list|)
define|\
value|((_byte).eb_u8[0] == ~((uint8_t)0))
comment|/*  * Construct bit field portion  *  * Creates the portion of the bit field [low,high) that lies within  * the range [min,max).  */
define|#
directive|define
name|EFX_INSERT_NATIVE64
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|,
name|_value
parameter_list|)
define|\
value|(((_low> _max) || (_high< _min)) ?				\ 		0U :							\ 		((_low> _min) ?					\ 			(((uint64_t)(_value))<< (_low - _min)) :	\ 			(((uint64_t)(_value))>> (_min - _low))))
define|#
directive|define
name|EFX_INSERT_NATIVE32
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|,
name|_value
parameter_list|)
define|\
value|(((_low> _max) || (_high< _min)) ?				\ 		0U :							\ 		((_low> _min) ?					\ 			(((uint32_t)(_value))<< (_low - _min)) :	\ 			(((uint32_t)(_value))>> (_min - _low))))
define|#
directive|define
name|EFX_INSERT_NATIVE16
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|,
name|_value
parameter_list|)
define|\
value|(((_low> _max) || (_high< _min)) ?				\ 		0U :							\ 		(uint16_t)((_low> _min) ?				\ 				((_value)<< (_low - _min)) :		\ 				((_value)>> (_min - _low))))
define|#
directive|define
name|EFX_INSERT_NATIVE8
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_low
parameter_list|,
name|_high
parameter_list|,
name|_value
parameter_list|)
define|\
value|(((_low> _max) || (_high< _min)) ?				\ 		0U :							\ 		(uint8_t)((_low> _min) ?				\ 				((_value)<< (_low - _min)) :	\ 				((_value)>> (_min - _low))))
comment|/*  * Construct bit field portion  *  * Creates the portion of the named bit field that lies within the  * range [min,max).  */
define|#
directive|define
name|EFX_INSERT_FIELD_NATIVE64
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|EFX_INSERT_NATIVE64(_min, _max, EFX_LOW_BIT(_field),		\ 	    EFX_HIGH_BIT(_field), _value)
define|#
directive|define
name|EFX_INSERT_FIELD_NATIVE32
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|EFX_INSERT_NATIVE32(_min, _max, EFX_LOW_BIT(_field),		\ 	    EFX_HIGH_BIT(_field), _value)
define|#
directive|define
name|EFX_INSERT_FIELD_NATIVE16
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|EFX_INSERT_NATIVE16(_min, _max, EFX_LOW_BIT(_field),		\ 	    EFX_HIGH_BIT(_field), _value)
define|#
directive|define
name|EFX_INSERT_FIELD_NATIVE8
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|EFX_INSERT_NATIVE8(_min, _max, EFX_LOW_BIT(_field),		\ 	    EFX_HIGH_BIT(_field), _value)
comment|/*  * Construct bit field  *  * Creates the portion of the named bit fields that lie within the  * range [min,max).  */
define|#
directive|define
name|EFX_INSERT_FIELDS64
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|__CPU_TO_LE_64(							\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field1, _value1) |	\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field2, _value2) |	\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field3, _value3) |	\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field4, _value4) |	\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field5, _value5) |	\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field6, _value6) |	\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field7, _value7) |	\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field8, _value8) |	\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field9, _value9) |	\ 	    EFX_INSERT_FIELD_NATIVE64(_min, _max, _field10, _value10))
define|#
directive|define
name|EFX_INSERT_FIELDS32
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|__CPU_TO_LE_32(							\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field1, _value1) |	\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field2, _value2) |	\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field3, _value3) |	\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field4, _value4) |	\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field5, _value5) |	\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field6, _value6) |	\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field7, _value7) |	\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field8, _value8) |	\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field9, _value9) |	\ 	    EFX_INSERT_FIELD_NATIVE32(_min, _max, _field10, _value10))
define|#
directive|define
name|EFX_INSERT_FIELDS16
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|__CPU_TO_LE_16(							\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field1, _value1) |	\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field2, _value2) |	\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field3, _value3) |	\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field4, _value4) |	\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field5, _value5) |	\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field6, _value6) |	\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field7, _value7) |	\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field8, _value8) |	\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field9, _value9) |	\ 	    EFX_INSERT_FIELD_NATIVE16(_min, _max, _field10, _value10))
define|#
directive|define
name|EFX_INSERT_FIELDS8
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|__NATIVE_8(							\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field1, _value1) |	\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field2, _value2) |	\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field3, _value3) |	\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field4, _value4) |	\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field5, _value5) |	\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field6, _value6) |	\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field7, _value7) |	\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field8, _value8) |	\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field9, _value9) |	\ 	    EFX_INSERT_FIELD_NATIVE8(_min, _max, _field10, _value10))
define|#
directive|define
name|EFX_POPULATE_OWORD64
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u64[0] = EFX_INSERT_FIELDS64(0, 63,		\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u64[1] = EFX_INSERT_FIELDS64(64, 127,	\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_POPULATE_OWORD32
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[0] = EFX_INSERT_FIELDS32(0, 31,		\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[1] = EFX_INSERT_FIELDS32(32, 63,	\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[2] = EFX_INSERT_FIELDS32(64, 95,	\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[3] = EFX_INSERT_FIELDS32(96, 127,	\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_POPULATE_QWORD64
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u64[0] = EFX_INSERT_FIELDS64(0, 63,		\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_POPULATE_QWORD32
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u32[0] = EFX_INSERT_FIELDS32(0, 31,		\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u32[1] = EFX_INSERT_FIELDS32(32, 63,	\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_POPULATE_DWORD
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_dword).ed_u32[0] = EFX_INSERT_FIELDS32(0, 31,		\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_POPULATE_WORD
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_word).ew_u16[0] = EFX_INSERT_FIELDS16(0, 15,		\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_POPULATE_BYTE
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|,	\
name|_field10
parameter_list|,
name|_value10
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_byte).eb_u8[0] = EFX_INSERT_FIELDS8(0, 7,		\ 		    _field1, _value1, _field2, _value2,			\ 		    _field3, _value3, _field4, _value4,			\ 		    _field5, _value5, _field6, _value6,			\ 		    _field7, _value7, _field8, _value8,			\ 		    _field9, _value9, _field10, _value10);		\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
comment|/* Populate an octword field with various numbers of arguments */
define|#
directive|define
name|EFX_POPULATE_OWORD_10
value|EFX_POPULATE_OWORD
define|#
directive|define
name|EFX_POPULATE_OWORD_9
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_10(_oword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8,	_field9, _value9)
define|#
directive|define
name|EFX_POPULATE_OWORD_8
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_9(_oword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8)
define|#
directive|define
name|EFX_POPULATE_OWORD_7
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_8(_oword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7)
define|#
directive|define
name|EFX_POPULATE_OWORD_6
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_7(_oword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6)
define|#
directive|define
name|EFX_POPULATE_OWORD_5
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_6(_oword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5)
define|#
directive|define
name|EFX_POPULATE_OWORD_4
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_5(_oword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4)
define|#
directive|define
name|EFX_POPULATE_OWORD_3
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_4(_oword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3)
define|#
directive|define
name|EFX_POPULATE_OWORD_2
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_3(_oword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2)
define|#
directive|define
name|EFX_POPULATE_OWORD_1
parameter_list|(
name|_oword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_2(_oword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1)
define|#
directive|define
name|EFX_ZERO_OWORD
parameter_list|(
name|_oword
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_1(_oword, EFX_DUMMY_FIELD, 0)
define|#
directive|define
name|EFX_SET_OWORD64
parameter_list|(
name|_oword
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_2(_oword,					\ 	    EFX_QWORD_0, (uint64_t)-1, EFX_QWORD_1, (uint64_t)-1)
define|#
directive|define
name|EFX_SET_OWORD32
parameter_list|(
name|_oword
parameter_list|)
define|\
value|EFX_POPULATE_OWORD_4(_oword,					\ 	    EFX_DWORD_0, 0xffffffff, EFX_DWORD_1, 0xffffffff,		\ 	    EFX_DWORD_2, 0xffffffff, EFX_DWORD_3, 0xffffffff)
comment|/* Populate a quadword field with various numbers of arguments */
define|#
directive|define
name|EFX_POPULATE_QWORD_10
value|EFX_POPULATE_QWORD
define|#
directive|define
name|EFX_POPULATE_QWORD_9
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_10(_qword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8,	_field9, _value9)
define|#
directive|define
name|EFX_POPULATE_QWORD_8
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_9(_qword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8)
define|#
directive|define
name|EFX_POPULATE_QWORD_7
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_8(_qword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7)
define|#
directive|define
name|EFX_POPULATE_QWORD_6
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_7(_qword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6)
define|#
directive|define
name|EFX_POPULATE_QWORD_5
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_6(_qword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5)
define|#
directive|define
name|EFX_POPULATE_QWORD_4
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_5(_qword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4)
define|#
directive|define
name|EFX_POPULATE_QWORD_3
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_4(_qword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3)
define|#
directive|define
name|EFX_POPULATE_QWORD_2
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_3(_qword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2)
define|#
directive|define
name|EFX_POPULATE_QWORD_1
parameter_list|(
name|_qword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_2(_qword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1)
define|#
directive|define
name|EFX_ZERO_QWORD
parameter_list|(
name|_qword
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_1(_qword, EFX_DUMMY_FIELD, 0)
define|#
directive|define
name|EFX_SET_QWORD64
parameter_list|(
name|_qword
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_1(_qword,					\ 	    EFX_QWORD_0, (uint64_t)-1)
define|#
directive|define
name|EFX_SET_QWORD32
parameter_list|(
name|_qword
parameter_list|)
define|\
value|EFX_POPULATE_QWORD_2(_qword,					\ 	    EFX_DWORD_0, 0xffffffff, EFX_DWORD_1, 0xffffffff)
comment|/* Populate a dword field with various numbers of arguments */
define|#
directive|define
name|EFX_POPULATE_DWORD_10
value|EFX_POPULATE_DWORD
define|#
directive|define
name|EFX_POPULATE_DWORD_9
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_10(_dword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8,	_field9, _value9)
define|#
directive|define
name|EFX_POPULATE_DWORD_8
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_9(_dword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8)
define|#
directive|define
name|EFX_POPULATE_DWORD_7
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_8(_dword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7)
define|#
directive|define
name|EFX_POPULATE_DWORD_6
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_7(_dword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6)
define|#
directive|define
name|EFX_POPULATE_DWORD_5
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_6(_dword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5)
define|#
directive|define
name|EFX_POPULATE_DWORD_4
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_5(_dword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4)
define|#
directive|define
name|EFX_POPULATE_DWORD_3
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_4(_dword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2, _field3, _value3)
define|#
directive|define
name|EFX_POPULATE_DWORD_2
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_3(_dword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1, _field2, _value2)
define|#
directive|define
name|EFX_POPULATE_DWORD_1
parameter_list|(
name|_dword
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_2(_dword, EFX_DUMMY_FIELD, 0,		\ 	    _field1, _value1)
define|#
directive|define
name|EFX_ZERO_DWORD
parameter_list|(
name|_dword
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_1(_dword, EFX_DUMMY_FIELD, 0)
define|#
directive|define
name|EFX_SET_DWORD
parameter_list|(
name|_dword
parameter_list|)
define|\
value|EFX_POPULATE_DWORD_1(_dword,					\ 	    EFX_DWORD_0, 0xffffffff)
comment|/* Populate a word field with various numbers of arguments */
define|#
directive|define
name|EFX_POPULATE_WORD_10
value|EFX_POPULATE_WORD
define|#
directive|define
name|EFX_POPULATE_WORD_9
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|)
define|\
value|EFX_POPULATE_WORD_10(_word, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8,	_field9, _value9)
define|#
directive|define
name|EFX_POPULATE_WORD_8
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|)
define|\
value|EFX_POPULATE_WORD_9(_word, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8)
define|#
directive|define
name|EFX_POPULATE_WORD_7
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|)
define|\
value|EFX_POPULATE_WORD_8(_word, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7)
define|#
directive|define
name|EFX_POPULATE_WORD_6
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|)
define|\
value|EFX_POPULATE_WORD_7(_word, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6)
define|#
directive|define
name|EFX_POPULATE_WORD_5
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|)
define|\
value|EFX_POPULATE_WORD_6(_word, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5)
define|#
directive|define
name|EFX_POPULATE_WORD_4
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|)
define|\
value|EFX_POPULATE_WORD_5(_word, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4)
define|#
directive|define
name|EFX_POPULATE_WORD_3
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|)
define|\
value|EFX_POPULATE_WORD_4(_word, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3)
define|#
directive|define
name|EFX_POPULATE_WORD_2
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|)
define|\
value|EFX_POPULATE_WORD_3(_word, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2)
define|#
directive|define
name|EFX_POPULATE_WORD_1
parameter_list|(
name|_word
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|)
define|\
value|EFX_POPULATE_WORD_2(_word, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1)
define|#
directive|define
name|EFX_ZERO_WORD
parameter_list|(
name|_word
parameter_list|)
define|\
value|EFX_POPULATE_WORD_1(_word, EFX_DUMMY_FIELD, 0)
define|#
directive|define
name|EFX_SET_WORD
parameter_list|(
name|_word
parameter_list|)
define|\
value|EFX_POPULATE_WORD_1(_word,					\ 	    EFX_WORD_0, 0xffff)
comment|/* Populate a byte field with various numbers of arguments */
define|#
directive|define
name|EFX_POPULATE_BYTE_10
value|EFX_POPULATE_BYTE
define|#
directive|define
name|EFX_POPULATE_BYTE_9
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|,
name|_field9
parameter_list|,
name|_value9
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_10(_byte, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8,	_field9, _value9)
define|#
directive|define
name|EFX_POPULATE_BYTE_8
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|,
name|_field8
parameter_list|,
name|_value8
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_9(_byte, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7, _field8, _value8)
define|#
directive|define
name|EFX_POPULATE_BYTE_7
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|,	\
name|_field7
parameter_list|,
name|_value7
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_8(_byte, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6,	\ 	    _field7, _value7)
define|#
directive|define
name|EFX_POPULATE_BYTE_6
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|,
name|_field6
parameter_list|,
name|_value6
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_7(_byte, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5,	_field6, _value6)
define|#
directive|define
name|EFX_POPULATE_BYTE_5
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|,
name|_field5
parameter_list|,
name|_value5
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_6(_byte, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4, _field5, _value5)
define|#
directive|define
name|EFX_POPULATE_BYTE_4
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|,	\
name|_field4
parameter_list|,
name|_value4
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_5(_byte, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3,	\ 	    _field4, _value4)
define|#
directive|define
name|EFX_POPULATE_BYTE_3
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|,
name|_field3
parameter_list|,
name|_value3
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_4(_byte, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2, _field3, _value3)
define|#
directive|define
name|EFX_POPULATE_BYTE_2
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|,
name|_field2
parameter_list|,
name|_value2
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_3(_byte, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1, _field2, _value2)
define|#
directive|define
name|EFX_POPULATE_BYTE_1
parameter_list|(
name|_byte
parameter_list|,					\
name|_field1
parameter_list|,
name|_value1
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_2(_byte, EFX_DUMMY_FIELD, 0,			\ 	    _field1, _value1)
define|#
directive|define
name|EFX_ZERO_BYTE
parameter_list|(
name|_byte
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_1(_byte, EFX_DUMMY_FIELD, 0)
define|#
directive|define
name|EFX_SET_BYTE
parameter_list|(
name|_byte
parameter_list|)
define|\
value|EFX_POPULATE_BYTE_1(_byte,					\ 	    EFX_BYTE_0, 0xff)
comment|/*  * Modify a named field within an already-populated structure.  Used  * for read-modify-write operations.  */
define|#
directive|define
name|EFX_INSERT_FIELD64
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|__CPU_TO_LE_64(EFX_INSERT_FIELD_NATIVE64(_min, _max, _field, _value))
define|#
directive|define
name|EFX_INSERT_FIELD32
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|__CPU_TO_LE_32(EFX_INSERT_FIELD_NATIVE32(_min, _max, _field, _value))
define|#
directive|define
name|EFX_INSERT_FIELD16
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|__CPU_TO_LE_16(EFX_INSERT_FIELD_NATIVE16(_min, _max, _field, _value))
define|#
directive|define
name|EFX_INSERT_FIELD8
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|__NATIVE_8(EFX_INSERT_FIELD_NATIVE8(_min, _max, _field, _value))
define|#
directive|define
name|EFX_INPLACE_MASK64
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|)
define|\
value|EFX_INSERT_FIELD64(_min, _max, _field, EFX_MASK64(_field))
define|#
directive|define
name|EFX_INPLACE_MASK32
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|)
define|\
value|EFX_INSERT_FIELD32(_min, _max, _field, EFX_MASK32(_field))
define|#
directive|define
name|EFX_INPLACE_MASK16
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|)
define|\
value|EFX_INSERT_FIELD16(_min, _max, _field, EFX_MASK16(_field))
define|#
directive|define
name|EFX_INPLACE_MASK8
parameter_list|(
name|_min
parameter_list|,
name|_max
parameter_list|,
name|_field
parameter_list|)
define|\
value|EFX_INSERT_FIELD8(_min, _max, _field, EFX_MASK8(_field))
define|#
directive|define
name|EFX_SET_OWORD_FIELD64
parameter_list|(
name|_oword
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u64[0] = (((_oword).eo_u64[0]&		\ 		    ~EFX_INPLACE_MASK64(0, 63, _field)) |		\ 		    EFX_INSERT_FIELD64(0, 63, _field, _value));		\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u64[1] = (((_oword).eo_u64[1]&		\ 		    ~EFX_INPLACE_MASK64(64, 127, _field)) |		\ 		    EFX_INSERT_FIELD64(64, 127, _field, _value));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_OWORD_FIELD32
parameter_list|(
name|_oword
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[0] = (((_oword).eo_u32[0]&		\ 		    ~EFX_INPLACE_MASK32(0, 31, _field)) |		\ 		    EFX_INSERT_FIELD32(0, 31, _field, _value));		\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[1] = (((_oword).eo_u32[1]&		\ 		    ~EFX_INPLACE_MASK32(32, 63, _field)) |		\ 		    EFX_INSERT_FIELD32(32, 63, _field, _value));	\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[2] = (((_oword).eo_u32[2]&		\ 		    ~EFX_INPLACE_MASK32(64, 95, _field)) |		\ 		    EFX_INSERT_FIELD32(64, 95, _field, _value));	\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[3] = (((_oword).eo_u32[3]&		\ 		    ~EFX_INPLACE_MASK32(96, 127, _field)) |		\ 		    EFX_INSERT_FIELD32(96, 127, _field, _value));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_QWORD_FIELD64
parameter_list|(
name|_qword
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u64[0] = (((_qword).eq_u64[0]&		\ 		    ~EFX_INPLACE_MASK64(0, 63, _field)) |		\ 		    EFX_INSERT_FIELD64(0, 63, _field, _value));		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_QWORD_FIELD32
parameter_list|(
name|_qword
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u32[0] = (((_qword).eq_u32[0]&		\ 		    ~EFX_INPLACE_MASK32(0, 31, _field)) |		\ 		    EFX_INSERT_FIELD32(0, 31, _field, _value));		\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u32[1] = (((_qword).eq_u32[1]&		\ 		    ~EFX_INPLACE_MASK32(32, 63, _field)) |		\ 		    EFX_INSERT_FIELD32(32, 63, _field, _value));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_DWORD_FIELD
parameter_list|(
name|_dword
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_dword).ed_u32[0] = (((_dword).ed_u32[0]&		\ 		    ~EFX_INPLACE_MASK32(0, 31, _field)) |		\ 		    EFX_INSERT_FIELD32(0, 31, _field, _value));		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_WORD_FIELD
parameter_list|(
name|_word
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_word).ew_u16[0] = (((_word).ew_u16[0]&		\ 		    ~EFX_INPLACE_MASK16(0, 15, _field)) |		\ 		    EFX_INSERT_FIELD16(0, 15, _field, _value));		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_BYTE_FIELD
parameter_list|(
name|_byte
parameter_list|,
name|_field
parameter_list|,
name|_value
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_byte).eb_u8[0] = (((_byte).eb_u8[0]&			\ 		    ~EFX_INPLACE_MASK8(0, 7, _field)) |			\ 		    EFX_INSERT_FIELD8(0, 7, _field, _value));		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
comment|/*  * Set or clear a numbered bit within an octword.  */
define|#
directive|define
name|EFX_SHIFT64
parameter_list|(
name|_bit
parameter_list|,
name|_base
parameter_list|)
define|\
value|(((_bit)>= (_base)&& (_bit)< (_base) + 64) ?			\ 		((uint64_t)1<< ((_bit) - (_base))) :			\ 		0U)
define|#
directive|define
name|EFX_SHIFT32
parameter_list|(
name|_bit
parameter_list|,
name|_base
parameter_list|)
define|\
value|(((_bit)>= (_base)&& (_bit)< (_base) + 32) ?			\ 		((uint32_t)1<< ((_bit) - (_base))) :			\ 		0U)
define|#
directive|define
name|EFX_SHIFT16
parameter_list|(
name|_bit
parameter_list|,
name|_base
parameter_list|)
define|\
value|(((_bit)>= (_base)&& (_bit)< (_base) + 16) ?			\ 		(uint16_t)(1<< ((_bit) - (_base))) :			\ 		0U)
define|#
directive|define
name|EFX_SHIFT8
parameter_list|(
name|_bit
parameter_list|,
name|_base
parameter_list|)
define|\
value|(((_bit)>= (_base)&& (_bit)< (_base) + 8) ?			\ 		(uint8_t)(1<< ((_bit) - (_base))) :			\ 		0U)
define|#
directive|define
name|EFX_SET_OWORD_BIT64
parameter_list|(
name|_oword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u64[0] |=					\ 		    __CPU_TO_LE_64(EFX_SHIFT64(_bit, FIX_LINT(0)));	\ 		(_oword).eo_u64[1] |=					\ 		    __CPU_TO_LE_64(EFX_SHIFT64(_bit, FIX_LINT(64)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_OWORD_BIT32
parameter_list|(
name|_oword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[0] |=					\ 		    __CPU_TO_LE_32(EFX_SHIFT32(_bit, FIX_LINT(0)));	\ 		(_oword).eo_u32[1] |=					\ 		    __CPU_TO_LE_32(EFX_SHIFT32(_bit, FIX_LINT(32)));	\ 		(_oword).eo_u32[2] |=					\ 		    __CPU_TO_LE_32(EFX_SHIFT32(_bit, FIX_LINT(64)));	\ 		(_oword).eo_u32[3] |=					\ 		    __CPU_TO_LE_32(EFX_SHIFT32(_bit, FIX_LINT(96)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_CLEAR_OWORD_BIT64
parameter_list|(
name|_oword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u64[0]&=					\ 		    __CPU_TO_LE_64(~EFX_SHIFT64(_bit, FIX_LINT(0)));	\ 		(_oword).eo_u64[1]&=					\ 		    __CPU_TO_LE_64(~EFX_SHIFT64(_bit, FIX_LINT(64)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_CLEAR_OWORD_BIT32
parameter_list|(
name|_oword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_oword).eo_u32[0]&=					\ 		    __CPU_TO_LE_32(~EFX_SHIFT32(_bit, FIX_LINT(0)));	\ 		(_oword).eo_u32[1]&=					\ 		    __CPU_TO_LE_32(~EFX_SHIFT32(_bit, FIX_LINT(32)));	\ 		(_oword).eo_u32[2]&=					\ 		    __CPU_TO_LE_32(~EFX_SHIFT32(_bit, FIX_LINT(64)));	\ 		(_oword).eo_u32[3]&=					\ 		    __CPU_TO_LE_32(~EFX_SHIFT32(_bit, FIX_LINT(96)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_QWORD_BIT64
parameter_list|(
name|_qword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u64[0] |=					\ 		    __CPU_TO_LE_64(EFX_SHIFT64(_bit, FIX_LINT(0)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_QWORD_BIT32
parameter_list|(
name|_qword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u32[0] |=					\ 		    __CPU_TO_LE_32(EFX_SHIFT32(_bit, FIX_LINT(0)));	\ 		(_qword).eq_u32[1] |=					\ 		    __CPU_TO_LE_32(EFX_SHIFT32(_bit, FIX_LINT(32)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_CLEAR_QWORD_BIT64
parameter_list|(
name|_qword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u64[0]&=					\ 		    __CPU_TO_LE_64(~EFX_SHIFT64(_bit, FIX_LINT(0)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_CLEAR_QWORD_BIT32
parameter_list|(
name|_qword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION) 				\ 		(_qword).eq_u32[0]&=					\ 		    __CPU_TO_LE_32(~EFX_SHIFT32(_bit, FIX_LINT(0)));	\ 		(_qword).eq_u32[1]&=					\ 		    __CPU_TO_LE_32(~EFX_SHIFT32(_bit, FIX_LINT(32)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_DWORD_BIT
parameter_list|(
name|_dword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		(_dword).ed_u32[0] |=					\ 		    __CPU_TO_LE_32(EFX_SHIFT32(_bit, FIX_LINT(0)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_CLEAR_DWORD_BIT
parameter_list|(
name|_dword
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		(_dword).ed_u32[0]&=					\ 		    __CPU_TO_LE_32(~EFX_SHIFT32(_bit, FIX_LINT(0)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_WORD_BIT
parameter_list|(
name|_word
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		(_word).ew_u16[0] |=					\ 		    __CPU_TO_LE_16(EFX_SHIFT16(_bit, FIX_LINT(0)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_CLEAR_WORD_BIT
parameter_list|(
name|_word
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		(_word).ew_u32[0]&=					\ 		    __CPU_TO_LE_16(~EFX_SHIFT16(_bit, FIX_LINT(0)));	\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_SET_BYTE_BIT
parameter_list|(
name|_byte
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		(_byte).eb_u8[0] |=					\ 		    __NATIVE_8(EFX_SHIFT8(_bit, FIX_LINT(0)));		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_CLEAR_BYTE_BIT
parameter_list|(
name|_byte
parameter_list|,
name|_bit
parameter_list|)
define|\
value|do {								\ 		(_byte).eb_u8[0]&=					\ 		    __NATIVE_8(~EFX_SHIFT8(_bit, FIX_LINT(0)));		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_OR_OWORD64
parameter_list|(
name|_oword1
parameter_list|,
name|_oword2
parameter_list|)
define|\
value|do {								\ 		(_oword1).eo_u64[0] |= (_oword2).eo_u64[0];		\ 		(_oword1).eo_u64[1] |= (_oword2).eo_u64[1];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_OR_OWORD32
parameter_list|(
name|_oword1
parameter_list|,
name|_oword2
parameter_list|)
define|\
value|do {								\ 		(_oword1).eo_u32[0] |= (_oword2).eo_u32[0];		\ 		(_oword1).eo_u32[1] |= (_oword2).eo_u32[1];		\ 		(_oword1).eo_u32[2] |= (_oword2).eo_u32[2];		\ 		(_oword1).eo_u32[3] |= (_oword2).eo_u32[3];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_AND_OWORD64
parameter_list|(
name|_oword1
parameter_list|,
name|_oword2
parameter_list|)
define|\
value|do {								\ 		(_oword1).eo_u64[0]&= (_oword2).eo_u64[0];		\ 		(_oword1).eo_u64[1]&= (_oword2).eo_u64[1];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_AND_OWORD32
parameter_list|(
name|_oword1
parameter_list|,
name|_oword2
parameter_list|)
define|\
value|do {								\ 		(_oword1).eo_u32[0]&= (_oword2).eo_u32[0];		\ 		(_oword1).eo_u32[1]&= (_oword2).eo_u32[1];		\ 		(_oword1).eo_u32[2]&= (_oword2).eo_u32[2];		\ 		(_oword1).eo_u32[3]&= (_oword2).eo_u32[3];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_OR_QWORD64
parameter_list|(
name|_qword1
parameter_list|,
name|_qword2
parameter_list|)
define|\
value|do {								\ 		(_qword1).eq_u64[0] |= (_qword2).eq_u64[0];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_OR_QWORD32
parameter_list|(
name|_qword1
parameter_list|,
name|_qword2
parameter_list|)
define|\
value|do {								\ 		(_qword1).eq_u32[0] |= (_qword2).eq_u32[0];		\ 		(_qword1).eq_u32[1] |= (_qword2).eq_u32[1];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_AND_QWORD64
parameter_list|(
name|_qword1
parameter_list|,
name|_qword2
parameter_list|)
define|\
value|do {								\ 		(_qword1).eq_u64[0]&= (_qword2).eq_u64[0];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_AND_QWORD32
parameter_list|(
name|_qword1
parameter_list|,
name|_qword2
parameter_list|)
define|\
value|do {								\ 		(_qword1).eq_u32[0]&= (_qword2).eq_u32[0];		\ 		(_qword1).eq_u32[1]&= (_qword2).eq_u32[1];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_OR_DWORD
parameter_list|(
name|_dword1
parameter_list|,
name|_dword2
parameter_list|)
define|\
value|do {								\ 		(_dword1).ed_u32[0] |= (_dword2).ed_u32[0];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_AND_DWORD
parameter_list|(
name|_dword1
parameter_list|,
name|_dword2
parameter_list|)
define|\
value|do {								\ 		(_dword1).ed_u32[0]&= (_dword2).ed_u32[0];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_OR_WORD
parameter_list|(
name|_word1
parameter_list|,
name|_word2
parameter_list|)
define|\
value|do {								\ 		(_word1).ew_u16[0] |= (_word2).ew_u16[0];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_AND_WORD
parameter_list|(
name|_word1
parameter_list|,
name|_word2
parameter_list|)
define|\
value|do {								\ 		(_word1).ew_u16[0]&= (_word2).ew_u16[0];		\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_OR_BYTE
parameter_list|(
name|_byte1
parameter_list|,
name|_byte2
parameter_list|)
define|\
value|do {								\ 		(_byte1).eb_u8[0]&= (_byte2).eb_u8[0];			\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
define|#
directive|define
name|EFX_AND_BYTE
parameter_list|(
name|_byte1
parameter_list|,
name|_byte2
parameter_list|)
define|\
value|do {								\ 		(_byte1).eb_u8[0]&= (_byte2).eb_u8[0];			\ 	_NOTE(CONSTANTCONDITION) 					\ 	} while (B_FALSE)
if|#
directive|if
name|EFSYS_USE_UINT64
define|#
directive|define
name|EFX_OWORD_FIELD
value|EFX_OWORD_FIELD64
define|#
directive|define
name|EFX_QWORD_FIELD
value|EFX_QWORD_FIELD64
define|#
directive|define
name|EFX_OWORD_IS_EQUAL
value|EFX_OWORD_IS_EQUAL64
define|#
directive|define
name|EFX_QWORD_IS_EQUAL
value|EFX_QWORD_IS_EQUAL64
define|#
directive|define
name|EFX_OWORD_IS_ZERO
value|EFX_OWORD_IS_ZERO64
define|#
directive|define
name|EFX_QWORD_IS_ZERO
value|EFX_QWORD_IS_ZERO64
define|#
directive|define
name|EFX_OWORD_IS_SET
value|EFX_OWORD_IS_SET64
define|#
directive|define
name|EFX_QWORD_IS_SET
value|EFX_QWORD_IS_SET64
define|#
directive|define
name|EFX_POPULATE_OWORD
value|EFX_POPULATE_OWORD64
define|#
directive|define
name|EFX_POPULATE_QWORD
value|EFX_POPULATE_QWORD64
define|#
directive|define
name|EFX_SET_OWORD
value|EFX_SET_OWORD64
define|#
directive|define
name|EFX_SET_QWORD
value|EFX_SET_QWORD64
define|#
directive|define
name|EFX_SET_OWORD_FIELD
value|EFX_SET_OWORD_FIELD64
define|#
directive|define
name|EFX_SET_QWORD_FIELD
value|EFX_SET_QWORD_FIELD64
define|#
directive|define
name|EFX_SET_OWORD_BIT
value|EFX_SET_OWORD_BIT64
define|#
directive|define
name|EFX_CLEAR_OWORD_BIT
value|EFX_CLEAR_OWORD_BIT64
define|#
directive|define
name|EFX_SET_QWORD_BIT
value|EFX_SET_QWORD_BIT64
define|#
directive|define
name|EFX_CLEAR_QWORD_BIT
value|EFX_CLEAR_QWORD_BIT64
define|#
directive|define
name|EFX_OR_OWORD
value|EFX_OR_OWORD64
define|#
directive|define
name|EFX_AND_OWORD
value|EFX_AND_OWORD64
define|#
directive|define
name|EFX_OR_QWORD
value|EFX_OR_QWORD64
define|#
directive|define
name|EFX_AND_QWORD
value|EFX_OR_QWORD64
else|#
directive|else
define|#
directive|define
name|EFX_OWORD_FIELD
value|EFX_OWORD_FIELD32
define|#
directive|define
name|EFX_QWORD_FIELD
value|EFX_QWORD_FIELD32
define|#
directive|define
name|EFX_OWORD_IS_EQUAL
value|EFX_OWORD_IS_EQUAL32
define|#
directive|define
name|EFX_QWORD_IS_EQUAL
value|EFX_QWORD_IS_EQUAL32
define|#
directive|define
name|EFX_OWORD_IS_ZERO
value|EFX_OWORD_IS_ZERO32
define|#
directive|define
name|EFX_QWORD_IS_ZERO
value|EFX_QWORD_IS_ZERO32
define|#
directive|define
name|EFX_OWORD_IS_SET
value|EFX_OWORD_IS_SET32
define|#
directive|define
name|EFX_QWORD_IS_SET
value|EFX_QWORD_IS_SET32
define|#
directive|define
name|EFX_POPULATE_OWORD
value|EFX_POPULATE_OWORD32
define|#
directive|define
name|EFX_POPULATE_QWORD
value|EFX_POPULATE_QWORD32
define|#
directive|define
name|EFX_SET_OWORD
value|EFX_SET_OWORD32
define|#
directive|define
name|EFX_SET_QWORD
value|EFX_SET_QWORD32
define|#
directive|define
name|EFX_SET_OWORD_FIELD
value|EFX_SET_OWORD_FIELD32
define|#
directive|define
name|EFX_SET_QWORD_FIELD
value|EFX_SET_QWORD_FIELD32
define|#
directive|define
name|EFX_SET_OWORD_BIT
value|EFX_SET_OWORD_BIT32
define|#
directive|define
name|EFX_CLEAR_OWORD_BIT
value|EFX_CLEAR_OWORD_BIT32
define|#
directive|define
name|EFX_SET_QWORD_BIT
value|EFX_SET_QWORD_BIT32
define|#
directive|define
name|EFX_CLEAR_QWORD_BIT
value|EFX_CLEAR_QWORD_BIT32
define|#
directive|define
name|EFX_OR_OWORD
value|EFX_OR_OWORD32
define|#
directive|define
name|EFX_AND_OWORD
value|EFX_AND_OWORD32
define|#
directive|define
name|EFX_OR_QWORD
value|EFX_OR_QWORD32
define|#
directive|define
name|EFX_AND_QWORD
value|EFX_OR_QWORD32
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_EFX_TYPES_H */
end_comment

end_unit

