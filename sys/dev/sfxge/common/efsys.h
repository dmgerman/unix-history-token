begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010-2011 Solarflare Communications, Inc.  * All rights reserved.  *  * This software was developed in part by Philip Paeps under contract for  * Solarflare Communications, Inc.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_EFSYS_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_EFSYS_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<sys/param.h>
include|#
directive|include
file|<sys/bus.h>
include|#
directive|include
file|<sys/endian.h>
include|#
directive|include
file|<sys/lock.h>
include|#
directive|include
file|<sys/malloc.h>
include|#
directive|include
file|<sys/mbuf.h>
include|#
directive|include
file|<sys/mutex.h>
include|#
directive|include
file|<sys/rwlock.h>
include|#
directive|include
file|<sys/sdt.h>
include|#
directive|include
file|<sys/systm.h>
include|#
directive|include
file|<machine/bus.h>
include|#
directive|include
file|<machine/endian.h>
define|#
directive|define
name|EFSYS_HAS_UINT64
value|1
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
define|#
directive|define
name|EFSYS_USE_UINT64
value|1
else|#
directive|else
define|#
directive|define
name|EFSYS_USE_UINT64
value|0
endif|#
directive|endif
if|#
directive|if
name|_BYTE_ORDER
operator|==
name|_BIG_ENDIAN
define|#
directive|define
name|EFSYS_IS_BIG_ENDIAN
value|1
define|#
directive|define
name|EFSYS_IS_LITTLE_ENDIAN
value|0
elif|#
directive|elif
name|_BYTE_ORDER
operator|==
name|_LITTLE_ENDIAN
define|#
directive|define
name|EFSYS_IS_BIG_ENDIAN
value|0
define|#
directive|define
name|EFSYS_IS_LITTLE_ENDIAN
value|1
endif|#
directive|endif
include|#
directive|include
file|"efx_types.h"
comment|/* Common code requires this */
if|#
directive|if
name|__FreeBSD_version
operator|<
literal|800068
define|#
directive|define
name|memmove
parameter_list|(
name|d
parameter_list|,
name|s
parameter_list|,
name|l
parameter_list|)
value|bcopy(s, d, l)
endif|#
directive|endif
comment|/* FreeBSD equivalents of Solaris things */
ifndef|#
directive|ifndef
name|_NOTE
define|#
directive|define
name|_NOTE
parameter_list|(
name|s
parameter_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|B_FALSE
define|#
directive|define
name|B_FALSE
value|FALSE
endif|#
directive|endif
ifndef|#
directive|ifndef
name|B_TRUE
define|#
directive|define
name|B_TRUE
value|TRUE
endif|#
directive|endif
ifndef|#
directive|ifndef
name|IS_P2ALIGNED
define|#
directive|define
name|IS_P2ALIGNED
parameter_list|(
name|v
parameter_list|,
name|a
parameter_list|)
value|((((uintptr_t)(v))& ((uintptr_t)(a) - 1)) == 0)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|P2ROUNDUP
define|#
directive|define
name|P2ROUNDUP
parameter_list|(
name|x
parameter_list|,
name|align
parameter_list|)
value|(-(-(x)& -(align)))
endif|#
directive|endif
ifndef|#
directive|ifndef
name|IS2P
define|#
directive|define
name|ISP2
parameter_list|(
name|x
parameter_list|)
value|(((x)& ((x) - 1)) == 0)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|bus_space_read_stream_8
argument_list|)
define|#
directive|define
name|bus_space_read_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|bus_space_read_8((t), (h), (o))
define|#
directive|define
name|bus_space_write_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|bus_space_write_8((t), (h), (o), (v))
endif|#
directive|endif
endif|#
directive|endif
define|#
directive|define
name|ENOTACTIVE
value|EINVAL
comment|/* Memory type to use on FreeBSD */
name|MALLOC_DECLARE
argument_list|(
name|M_SFXGE
argument_list|)
expr_stmt|;
comment|/* Machine dependend prefetch wrappers */
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64__
argument_list|)
specifier|static
name|__inline
name|void
name|prefetch_read_many
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
asm|__asm__( 	    "prefetcht0 (%0)" 	    : 	    : "r" (addr));
block|}
specifier|static
name|__inline
name|void
name|prefetch_read_once
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
asm|__asm__( 	    "prefetchnta (%0)" 	    : 	    : "r" (addr));
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|__sparc64__
argument_list|)
specifier|static
name|__inline
name|void
name|prefetch_read_many
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
asm|__asm__( 	    "prefetch [%0], 0" 	    : 	    : "r" (addr));
block|}
specifier|static
name|__inline
name|void
name|prefetch_read_once
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
asm|__asm__( 	    "prefetch [%0], 1" 	    : 	    : "r" (addr));
block|}
else|#
directive|else
specifier|static
name|__inline
name|void
name|prefetch_read_many
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{  }
specifier|static
name|__inline
name|void
name|prefetch_read_once
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{  }
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64__
argument_list|)
include|#
directive|include
file|<vm/vm.h>
include|#
directive|include
file|<vm/pmap.h>
endif|#
directive|endif
specifier|static
name|__inline
name|void
name|sfxge_map_mbuf_fast
parameter_list|(
name|bus_dma_tag_t
name|tag
parameter_list|,
name|bus_dmamap_t
name|map
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|seg
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64__
argument_list|)
name|seg
operator|->
name|ds_addr
operator|=
name|pmap_kextract
argument_list|(
name|mtod
argument_list|(
name|m
argument_list|,
name|vm_offset_t
argument_list|)
argument_list|)
expr_stmt|;
name|seg
operator|->
name|ds_len
operator|=
name|m
operator|->
name|m_len
expr_stmt|;
else|#
directive|else
name|int
name|nsegstmp
decl_stmt|;
name|bus_dmamap_load_mbuf_sg
argument_list|(
name|tag
argument_list|,
name|map
argument_list|,
name|m
argument_list|,
name|seg
argument_list|,
operator|&
name|nsegstmp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|/* Modifiers used for DOS builds */
define|#
directive|define
name|__cs
define|#
directive|define
name|__far
comment|/* Modifiers used for Windows builds */
define|#
directive|define
name|__in
define|#
directive|define
name|__in_opt
define|#
directive|define
name|__in_ecount
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__in_ecount_opt
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__in_bcount
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__in_bcount_opt
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__out
define|#
directive|define
name|__out_opt
define|#
directive|define
name|__out_ecount
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__out_ecount_opt
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__out_bcount
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__out_bcount_opt
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__deref_out
define|#
directive|define
name|__inout
define|#
directive|define
name|__inout_opt
define|#
directive|define
name|__inout_ecount
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__inout_ecount_opt
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__inout_bcount
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__inout_bcount_opt
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__inout_bcount_full_opt
parameter_list|(
name|_n
parameter_list|)
define|#
directive|define
name|__deref_out_bcount_opt
parameter_list|(
name|n
parameter_list|)
define|#
directive|define
name|__checkReturn
define|#
directive|define
name|__drv_when
parameter_list|(
name|_p
parameter_list|,
name|_c
parameter_list|)
comment|/* Code inclusion options */
define|#
directive|define
name|EFSYS_OPT_NAMES
value|1
define|#
directive|define
name|EFSYS_OPT_FALCON
value|0
define|#
directive|define
name|EFSYS_OPT_FALCON_NIC_CFG_OVERRIDE
value|0
define|#
directive|define
name|EFSYS_OPT_SIENA
value|1
ifdef|#
directive|ifdef
name|DEBUG
define|#
directive|define
name|EFSYS_OPT_CHECK_REG
value|1
else|#
directive|else
define|#
directive|define
name|EFSYS_OPT_CHECK_REG
value|0
endif|#
directive|endif
define|#
directive|define
name|EFSYS_OPT_MCDI
value|1
define|#
directive|define
name|EFSYS_OPT_MAC_FALCON_GMAC
value|0
define|#
directive|define
name|EFSYS_OPT_MAC_FALCON_XMAC
value|0
define|#
directive|define
name|EFSYS_OPT_MAC_STATS
value|1
define|#
directive|define
name|EFSYS_OPT_LOOPBACK
value|0
define|#
directive|define
name|EFSYS_OPT_MON_NULL
value|0
define|#
directive|define
name|EFSYS_OPT_MON_LM87
value|0
define|#
directive|define
name|EFSYS_OPT_MON_MAX6647
value|0
define|#
directive|define
name|EFSYS_OPT_MON_SIENA
value|0
define|#
directive|define
name|EFSYS_OPT_MON_STATS
value|0
define|#
directive|define
name|EFSYS_OPT_PHY_NULL
value|0
define|#
directive|define
name|EFSYS_OPT_PHY_QT2022C2
value|0
define|#
directive|define
name|EFSYS_OPT_PHY_SFX7101
value|0
define|#
directive|define
name|EFSYS_OPT_PHY_TXC43128
value|0
define|#
directive|define
name|EFSYS_OPT_PHY_PM8358
value|0
define|#
directive|define
name|EFSYS_OPT_PHY_SFT9001
value|0
define|#
directive|define
name|EFSYS_OPT_PHY_QT2025C
value|0
define|#
directive|define
name|EFSYS_OPT_PHY_STATS
value|1
define|#
directive|define
name|EFSYS_OPT_PHY_PROPS
value|0
define|#
directive|define
name|EFSYS_OPT_PHY_BIST
value|1
define|#
directive|define
name|EFSYS_OPT_PHY_LED_CONTROL
value|1
define|#
directive|define
name|EFSYS_OPT_PHY_FLAGS
value|0
define|#
directive|define
name|EFSYS_OPT_VPD
value|1
define|#
directive|define
name|EFSYS_OPT_NVRAM
value|1
define|#
directive|define
name|EFSYS_OPT_NVRAM_FALCON_BOOTROM
value|0
define|#
directive|define
name|EFSYS_OPT_NVRAM_SFT9001
value|0
define|#
directive|define
name|EFSYS_OPT_NVRAM_SFX7101
value|0
define|#
directive|define
name|EFSYS_OPT_BOOTCFG
value|0
define|#
directive|define
name|EFSYS_OPT_PCIE_TUNE
value|0
define|#
directive|define
name|EFSYS_OPT_DIAG
value|0
define|#
directive|define
name|EFSYS_OPT_WOL
value|1
define|#
directive|define
name|EFSYS_OPT_RX_SCALE
value|1
define|#
directive|define
name|EFSYS_OPT_QSTATS
value|1
define|#
directive|define
name|EFSYS_OPT_FILTER
value|0
define|#
directive|define
name|EFSYS_OPT_RX_SCATTER
value|0
define|#
directive|define
name|EFSYS_OPT_RX_HDR_SPLIT
value|0
define|#
directive|define
name|EFSYS_OPT_EV_PREFETCH
value|0
define|#
directive|define
name|EFSYS_OPT_DECODE_INTR_FATAL
value|1
comment|/* ID */
typedef|typedef
name|struct
name|__efsys_identifier_s
name|efsys_identifier_t
typedef|;
comment|/* PROBE */
ifndef|#
directive|ifndef
name|DTRACE_PROBE
define|#
directive|define
name|EFSYS_PROBE
parameter_list|(
name|_name
parameter_list|)
define|#
directive|define
name|EFSYS_PROBE1
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|)
define|#
directive|define
name|EFSYS_PROBE2
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|)
define|#
directive|define
name|EFSYS_PROBE3
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|)
define|#
directive|define
name|EFSYS_PROBE4
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|)
define|#
directive|define
name|EFSYS_PROBE5
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|,
name|_type5
parameter_list|,
name|_arg5
parameter_list|)
define|#
directive|define
name|EFSYS_PROBE6
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|,
name|_type5
parameter_list|,
name|_arg5
parameter_list|,		\
name|_type6
parameter_list|,
name|_arg6
parameter_list|)
define|#
directive|define
name|EFSYS_PROBE7
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|,
name|_type5
parameter_list|,
name|_arg5
parameter_list|,		\
name|_type6
parameter_list|,
name|_arg6
parameter_list|,
name|_type7
parameter_list|,
name|_arg7
parameter_list|)
else|#
directive|else
comment|/* DTRACE_PROBE */
define|#
directive|define
name|EFSYS_PROBE
parameter_list|(
name|_name
parameter_list|)
define|\
value|DTRACE_PROBE(_name)
define|#
directive|define
name|EFSYS_PROBE1
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|)
define|\
value|DTRACE_PROBE1(_name, _type1, _arg1)
define|#
directive|define
name|EFSYS_PROBE2
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|)
define|\
value|DTRACE_PROBE2(_name, _type1, _arg1, _type2, _arg2)
define|#
directive|define
name|EFSYS_PROBE3
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|)
define|\
value|DTRACE_PROBE3(_name, _type1, _arg1, _type2, _arg2,		\ 	    _type3, _arg3)
define|#
directive|define
name|EFSYS_PROBE4
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|)
define|\
value|DTRACE_PROBE4(_name, _type1, _arg1, _type2, _arg2,		\ 	    _type3, _arg3, _type4, _arg4)
ifdef|#
directive|ifdef
name|DTRACE_PROBE5
define|#
directive|define
name|EFSYS_PROBE5
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|,
name|_type5
parameter_list|,
name|_arg5
parameter_list|)
define|\
value|DTRACE_PROBE5(_name, _type1, _arg1, _type2, _arg2,		\ 	    _type3, _arg3, _type4, _arg4, _type5, _arg5)
else|#
directive|else
define|#
directive|define
name|EFSYS_PROBE5
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|,
name|_type5
parameter_list|,
name|_arg5
parameter_list|)
define|\
value|DTRACE_PROBE4(_name, _type1, _arg1, _type2, _arg2,		\ 	    _type3, _arg3, _type4, _arg4)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DTRACE_PROBE6
define|#
directive|define
name|EFSYS_PROBE6
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|,
name|_type5
parameter_list|,
name|_arg5
parameter_list|,		\
name|_type6
parameter_list|,
name|_arg6
parameter_list|)
define|\
value|DTRACE_PROBE6(_name, _type1, _arg1, _type2, _arg2,		\ 	    _type3, _arg3, _type4, _arg4, _type5, _arg5,		\ 	    _type6, _arg6)
else|#
directive|else
define|#
directive|define
name|EFSYS_PROBE6
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|,
name|_type5
parameter_list|,
name|_arg5
parameter_list|,		\
name|_type6
parameter_list|,
name|_arg6
parameter_list|)
define|\
value|EFSYS_PROBE5(_name, _type1, _arg1, _type2, _arg2,		\ 	    _type3, _arg3, _type4, _arg4, _type5, _arg5)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DTRACE_PROBE7
define|#
directive|define
name|EFSYS_PROBE7
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|,
name|_type5
parameter_list|,
name|_arg5
parameter_list|,		\
name|_type6
parameter_list|,
name|_arg6
parameter_list|,
name|_type7
parameter_list|,
name|_arg7
parameter_list|)
define|\
value|DTRACE_PROBE7(_name, _type1, _arg1, _type2, _arg2,		\ 	    _type3, _arg3, _type4, _arg4, _type5, _arg5,		\ 	    _type6, _arg6, _type7, _arg7)
else|#
directive|else
define|#
directive|define
name|EFSYS_PROBE7
parameter_list|(
name|_name
parameter_list|,
name|_type1
parameter_list|,
name|_arg1
parameter_list|,
name|_type2
parameter_list|,
name|_arg2
parameter_list|,		\
name|_type3
parameter_list|,
name|_arg3
parameter_list|,
name|_type4
parameter_list|,
name|_arg4
parameter_list|,
name|_type5
parameter_list|,
name|_arg5
parameter_list|,		\
name|_type6
parameter_list|,
name|_arg6
parameter_list|,
name|_type7
parameter_list|,
name|_arg7
parameter_list|)
define|\
value|EFSYS_PROBE6(_name, _type1, _arg1, _type2, _arg2,		\ 	    _type3, _arg3, _type4, _arg4, _type5, _arg5,		\ 	    _type6, _arg6)
endif|#
directive|endif
endif|#
directive|endif
comment|/* DTRACE_PROBE */
comment|/* DMA */
typedef|typedef
name|uint64_t
name|efsys_dma_addr_t
typedef|;
typedef|typedef
struct|struct
name|efsys_mem_s
block|{
name|bus_dma_tag_t
name|esm_tag
decl_stmt|;
name|bus_dmamap_t
name|esm_map
decl_stmt|;
name|caddr_t
name|esm_base
decl_stmt|;
name|efsys_dma_addr_t
name|esm_addr
decl_stmt|;
block|}
name|efsys_mem_t
typedef|;
define|#
directive|define
name|EFSYS_MEM_ZERO
parameter_list|(
name|_esmp
parameter_list|,
name|_size
parameter_list|)
define|\
value|do {								\ 		(void) memset((_esmp)->esm_base, 0, (_size));		\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_MEM_READD
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_edp
parameter_list|)
define|\
value|do {								\ 		uint32_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_dword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		(_edp)->ed_u32[0] = *addr;				\ 									\ 		EFSYS_PROBE2(mem_readd, unsigned int, (_offset),	\ 		    uint32_t, (_edp)->ed_u32[0]);			\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
define|#
directive|define
name|EFSYS_MEM_READQ
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_eqp
parameter_list|)
define|\
value|do {								\ 		uint64_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_qword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		(_eqp)->eq_u64[0] = *addr;				\ 									\ 		EFSYS_PROBE3(mem_readq, unsigned int, (_offset),	\ 		    uint32_t, (_eqp)->eq_u32[1],			\ 		    uint32_t, (_eqp)->eq_u32[0]);			\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
else|#
directive|else
define|#
directive|define
name|EFSYS_MEM_READQ
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_eqp
parameter_list|)
define|\
value|do {								\ 		uint32_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_qword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		(_eqp)->eq_u32[0] = *addr++;				\ 		(_eqp)->eq_u32[1] = *addr;				\ 									\ 		EFSYS_PROBE3(mem_readq, unsigned int, (_offset),	\ 		    uint32_t, (_eqp)->eq_u32[1],			\ 		    uint32_t, (_eqp)->eq_u32[0]);			\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
define|#
directive|define
name|EFSYS_MEM_READO
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_eop
parameter_list|)
define|\
value|do {								\ 		uint64_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_oword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		(_eop)->eo_u64[0] = *addr++;				\ 		(_eop)->eo_u64[1] = *addr;				\ 									\ 		EFSYS_PROBE5(mem_reado, unsigned int, (_offset),	\ 		    uint32_t, (_eop)->eo_u32[3],			\ 		    uint32_t, (_eop)->eo_u32[2],			\ 		    uint32_t, (_eop)->eo_u32[1],			\ 		    uint32_t, (_eop)->eo_u32[0]);			\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
else|#
directive|else
define|#
directive|define
name|EFSYS_MEM_READO
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_eop
parameter_list|)
define|\
value|do {								\ 		uint32_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_oword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		(_eop)->eo_u32[0] = *addr++;				\ 		(_eop)->eo_u32[1] = *addr++;				\ 		(_eop)->eo_u32[2] = *addr++;				\ 		(_eop)->eo_u32[3] = *addr;				\ 									\ 		EFSYS_PROBE5(mem_reado, unsigned int, (_offset),	\ 		    uint32_t, (_eop)->eo_u32[3],			\ 		    uint32_t, (_eop)->eo_u32[2],			\ 		    uint32_t, (_eop)->eo_u32[1],			\ 		    uint32_t, (_eop)->eo_u32[0]);			\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
endif|#
directive|endif
define|#
directive|define
name|EFSYS_MEM_WRITED
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_edp
parameter_list|)
define|\
value|do {								\ 		uint32_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_dword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		EFSYS_PROBE2(mem_writed, unsigned int, (_offset),	\ 		    uint32_t, (_edp)->ed_u32[0]);			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		*addr = (_edp)->ed_u32[0];				\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
define|#
directive|define
name|EFSYS_MEM_WRITEQ
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_eqp
parameter_list|)
define|\
value|do {								\ 		uint64_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_qword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		EFSYS_PROBE3(mem_writeq, unsigned int, (_offset),	\ 		    uint32_t, (_eqp)->eq_u32[1],			\ 		    uint32_t, (_eqp)->eq_u32[0]);			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		*addr   = (_eqp)->eq_u64[0];				\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
else|#
directive|else
define|#
directive|define
name|EFSYS_MEM_WRITEQ
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_eqp
parameter_list|)
define|\
value|do {								\ 		uint32_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_qword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		EFSYS_PROBE3(mem_writeq, unsigned int, (_offset),	\ 		    uint32_t, (_eqp)->eq_u32[1],			\ 		    uint32_t, (_eqp)->eq_u32[0]);			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		*addr++ = (_eqp)->eq_u32[0];				\ 		*addr   = (_eqp)->eq_u32[1];				\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
define|#
directive|define
name|EFSYS_MEM_WRITEO
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_eop
parameter_list|)
define|\
value|do {								\ 		uint64_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_oword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		EFSYS_PROBE5(mem_writeo, unsigned int, (_offset),	\ 		    uint32_t, (_eop)->eo_u32[3],			\ 		    uint32_t, (_eop)->eo_u32[2],			\ 		    uint32_t, (_eop)->eo_u32[1],			\ 		    uint32_t, (_eop)->eo_u32[0]);			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		*addr++ = (_eop)->eo_u64[0];				\ 		*addr   = (_eop)->eo_u64[1];				\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
else|#
directive|else
define|#
directive|define
name|EFSYS_MEM_WRITEO
parameter_list|(
name|_esmp
parameter_list|,
name|_offset
parameter_list|,
name|_eop
parameter_list|)
define|\
value|do {								\ 		uint32_t *addr;						\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_oword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		EFSYS_PROBE5(mem_writeo, unsigned int, (_offset),	\ 		    uint32_t, (_eop)->eo_u32[3],			\ 		    uint32_t, (_eop)->eo_u32[2],			\ 		    uint32_t, (_eop)->eo_u32[1],			\ 		    uint32_t, (_eop)->eo_u32[0]);			\ 									\ 		addr = (void *)((_esmp)->esm_base + (_offset));		\ 									\ 		*addr++ = (_eop)->eo_u32[0];				\ 		*addr++ = (_eop)->eo_u32[1];				\ 		*addr++ = (_eop)->eo_u32[2];				\ 		*addr   = (_eop)->eo_u32[3];				\ 									\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
endif|#
directive|endif
define|#
directive|define
name|EFSYS_MEM_ADDR
parameter_list|(
name|_esmp
parameter_list|)
define|\
value|((_esmp)->esm_addr)
comment|/* BAR */
define|#
directive|define
name|SFXGE_LOCK_NAME_MAX
value|16
typedef|typedef
struct|struct
name|efsys_bar_s
block|{
name|struct
name|mtx
name|esb_lock
decl_stmt|;
name|char
name|esb_lock_name
index|[
name|SFXGE_LOCK_NAME_MAX
index|]
decl_stmt|;
name|bus_space_tag_t
name|esb_tag
decl_stmt|;
name|bus_space_handle_t
name|esb_handle
decl_stmt|;
name|int
name|esb_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|esb_res
decl_stmt|;
block|}
name|efsys_bar_t
typedef|;
define|#
directive|define
name|SFXGE_BAR_LOCK_INIT
parameter_list|(
name|_esbp
parameter_list|,
name|_ifname
parameter_list|)
define|\
value|do {								\ 		snprintf((_esbp)->esb_lock_name,			\ 			 sizeof((_esbp)->esb_lock_name),		\ 			 "%s:bar", (_ifname));				\ 		mtx_init(&(_esbp)->esb_lock, (_esbp)->esb_lock_name,	\ 			 NULL, MTX_DEF);				\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|SFXGE_BAR_LOCK_DESTROY
parameter_list|(
name|_esbp
parameter_list|)
define|\
value|mtx_destroy(&(_esbp)->esb_lock)
define|#
directive|define
name|SFXGE_BAR_LOCK
parameter_list|(
name|_esbp
parameter_list|)
define|\
value|mtx_lock(&(_esbp)->esb_lock)
define|#
directive|define
name|SFXGE_BAR_UNLOCK
parameter_list|(
name|_esbp
parameter_list|)
define|\
value|mtx_unlock(&(_esbp)->esb_lock)
define|#
directive|define
name|EFSYS_BAR_READD
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_edp
parameter_list|,
name|_lock
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_dword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_LOCK(_esbp);				\ 									\ 		(_edp)->ed_u32[0] = bus_space_read_stream_4(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset));						\ 									\ 		EFSYS_PROBE2(bar_readd, unsigned int, (_offset),	\ 		    uint32_t, (_edp)->ed_u32[0]);			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_UNLOCK(_esbp);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
define|#
directive|define
name|EFSYS_BAR_READQ
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_eqp
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_qword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		SFXGE_BAR_LOCK(_esbp);					\ 									\ 		(_eqp)->eq_u64[0] = bus_space_read_stream_8(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset));						\ 									\ 		EFSYS_PROBE3(bar_readq, unsigned int, (_offset),	\ 		    uint32_t, (_eqp)->eq_u32[1],			\ 		    uint32_t, (_eqp)->eq_u32[0]);			\ 									\ 		SFXGE_BAR_UNLOCK(_esbp);				\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_BAR_READO
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_eop
parameter_list|,
name|_lock
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_oword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_LOCK(_esbp);				\ 									\ 		(_eop)->eo_u64[0] = bus_space_read_stream_8(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset));						\ 		(_eop)->eo_u64[1] = bus_space_read_stream_8(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset) + 8);					\ 									\ 		EFSYS_PROBE5(bar_reado, unsigned int, (_offset),	\ 		    uint32_t, (_eop)->eo_u32[3],			\ 		    uint32_t, (_eop)->eo_u32[2],			\ 		    uint32_t, (_eop)->eo_u32[1],			\ 		    uint32_t, (_eop)->eo_u32[0]);			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_UNLOCK(_esbp);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
else|#
directive|else
define|#
directive|define
name|EFSYS_BAR_READQ
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_eqp
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_qword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		SFXGE_BAR_LOCK(_esbp);					\ 									\ 		(_eqp)->eq_u32[0] = bus_space_read_stream_4(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset));						\ 		(_eqp)->eq_u32[1] = bus_space_read_stream_4(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset) + 4);					\ 									\ 		EFSYS_PROBE3(bar_readq, unsigned int, (_offset),	\ 		    uint32_t, (_eqp)->eq_u32[1],			\ 		    uint32_t, (_eqp)->eq_u32[0]);			\ 									\ 		SFXGE_BAR_UNLOCK(_esbp);				\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_BAR_READO
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_eop
parameter_list|,
name|_lock
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_oword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_LOCK(_esbp);				\ 									\ 		(_eop)->eo_u32[0] = bus_space_read_stream_4(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset));						\ 		(_eop)->eo_u32[1] = bus_space_read_stream_4(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset) + 4);					\ 		(_eop)->eo_u32[2] = bus_space_read_stream_4(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset) + 8);					\ 		(_eop)->eo_u32[3] = bus_space_read_stream_4(		\ 		    (_esbp)->esb_tag, (_esbp)->esb_handle,		\ 		    (_offset) + 12);					\ 									\ 		EFSYS_PROBE5(bar_reado, unsigned int, (_offset),	\ 		    uint32_t, (_eop)->eo_u32[3],			\ 		    uint32_t, (_eop)->eo_u32[2],			\ 		    uint32_t, (_eop)->eo_u32[1],			\ 		    uint32_t, (_eop)->eo_u32[0]);			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_UNLOCK(_esbp);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
endif|#
directive|endif
define|#
directive|define
name|EFSYS_BAR_WRITED
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_edp
parameter_list|,
name|_lock
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_dword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_LOCK(_esbp);				\ 									\ 		EFSYS_PROBE2(bar_writed, unsigned int, (_offset),	\ 		    uint32_t, (_edp)->ed_u32[0]);			\ 									\ 		bus_space_write_stream_4((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset), (_edp)->ed_u32[0]);			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_UNLOCK(_esbp);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
define|#
directive|define
name|EFSYS_BAR_WRITEQ
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_eqp
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_qword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		SFXGE_BAR_LOCK(_esbp);					\ 									\ 		EFSYS_PROBE3(bar_writeq, unsigned int, (_offset),	\ 		    uint32_t, (_eqp)->eq_u32[1],			\ 		    uint32_t, (_eqp)->eq_u32[0]);			\ 									\ 		bus_space_write_stream_8((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset), (_eqp)->eq_u64[0]);			\ 									\ 		SFXGE_BAR_UNLOCK(_esbp);				\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
else|#
directive|else
define|#
directive|define
name|EFSYS_BAR_WRITEQ
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_eqp
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_qword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		SFXGE_BAR_LOCK(_esbp);					\ 									\ 		EFSYS_PROBE3(bar_writeq, unsigned int, (_offset),	\ 		    uint32_t, (_eqp)->eq_u32[1],			\ 		    uint32_t, (_eqp)->eq_u32[0]);			\ 									\ 		bus_space_write_stream_4((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset), (_eqp)->eq_u32[0]);			\ 		bus_space_write_stream_4((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset) + 4, (_eqp)->eq_u32[1]);			\ 									\ 		SFXGE_BAR_UNLOCK(_esbp);				\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
define|#
directive|define
name|EFSYS_BAR_WRITEO
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_eop
parameter_list|,
name|_lock
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_oword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_LOCK(_esbp);				\ 									\ 		EFSYS_PROBE5(bar_writeo, unsigned int, (_offset),	\ 		    uint32_t, (_eop)->eo_u32[3],			\ 		    uint32_t, (_eop)->eo_u32[2],			\ 		    uint32_t, (_eop)->eo_u32[1],			\ 		    uint32_t, (_eop)->eo_u32[0]);			\ 									\ 		bus_space_write_stream_8((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset), (_eop)->eo_u64[0]);			\ 		bus_space_write_stream_8((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset) + 8, (_eop)->eo_u64[1]);			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_UNLOCK(_esbp);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
else|#
directive|else
define|#
directive|define
name|EFSYS_BAR_WRITEO
parameter_list|(
name|_esbp
parameter_list|,
name|_offset
parameter_list|,
name|_eop
parameter_list|,
name|_lock
parameter_list|)
define|\
value|do {								\ 		_NOTE(CONSTANTCONDITION)				\ 		KASSERT(IS_P2ALIGNED(_offset, sizeof (efx_oword_t)),	\ 		    ("not power of 2 aligned"));			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_LOCK(_esbp);				\ 									\ 		EFSYS_PROBE5(bar_writeo, unsigned int, (_offset),	\ 		    uint32_t, (_eop)->eo_u32[3],			\ 		    uint32_t, (_eop)->eo_u32[2],			\ 		    uint32_t, (_eop)->eo_u32[1],			\ 		    uint32_t, (_eop)->eo_u32[0]);			\ 									\ 		bus_space_write_stream_4((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset), (_eop)->eo_u32[0]);			\ 		bus_space_write_stream_4((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset) + 4, (_eop)->eo_u32[1]);			\ 		bus_space_write_stream_4((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset) + 8, (_eop)->eo_u32[2]);			\ 		bus_space_write_stream_4((_esbp)->esb_tag,		\ 		    (_esbp)->esb_handle,				\ 		    (_offset) + 12, (_eop)->eo_u32[3]);			\ 									\ 		_NOTE(CONSTANTCONDITION)				\ 		if (_lock)						\ 			SFXGE_BAR_UNLOCK(_esbp);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
endif|#
directive|endif
comment|/* SPIN */
define|#
directive|define
name|EFSYS_SPIN
parameter_list|(
name|_us
parameter_list|)
define|\
value|do {								\ 		DELAY(_us);						\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_SLEEP
value|EFSYS_SPIN
comment|/* BARRIERS */
define|#
directive|define
name|EFSYS_MEM_READ_BARRIER
parameter_list|()
value|rmb()
define|#
directive|define
name|EFSYS_PIO_WRITE_BARRIER
parameter_list|()
comment|/* TIMESTAMP */
typedef|typedef
name|clock_t
name|efsys_timestamp_t
typedef|;
define|#
directive|define
name|EFSYS_TIMESTAMP
parameter_list|(
name|_usp
parameter_list|)
define|\
value|do {								\ 		clock_t now;						\ 									\ 		now = ticks;						\ 		*(_usp) = now * hz / 1000000;				\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
comment|/* KMEM */
define|#
directive|define
name|EFSYS_KMEM_ALLOC
parameter_list|(
name|_esip
parameter_list|,
name|_size
parameter_list|,
name|_p
parameter_list|)
define|\
value|do {								\ 		(_esip) = (_esip);					\ 		(_p) = malloc((_size), M_SFXGE, M_WAITOK|M_ZERO);	\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_KMEM_FREE
parameter_list|(
name|_esip
parameter_list|,
name|_size
parameter_list|,
name|_p
parameter_list|)
define|\
value|do {								\ 		(void) (_esip);						\ 		(void) (_size);						\ 		free((_p), M_SFXGE);					\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
comment|/* LOCK */
typedef|typedef
struct|struct
name|efsys_lock_s
block|{
name|struct
name|mtx
name|lock
decl_stmt|;
name|char
name|lock_name
index|[
name|SFXGE_LOCK_NAME_MAX
index|]
decl_stmt|;
block|}
name|efsys_lock_t
typedef|;
define|#
directive|define
name|SFXGE_EFSYS_LOCK_INIT
parameter_list|(
name|_eslp
parameter_list|,
name|_ifname
parameter_list|,
name|_label
parameter_list|)
define|\
value|do {								\ 		efsys_lock_t *__eslp = (_eslp);				\ 									\ 		snprintf((__eslp)->lock_name,				\ 			 sizeof((__eslp)->lock_name),			\ 			 "%s:%s", (_ifname), (_label));			\ 		mtx_init(&(__eslp)->lock, (__eslp)->lock_name,		\ 			 NULL, MTX_DEF);				\ 	} while (B_FALSE)
define|#
directive|define
name|SFXGE_EFSYS_LOCK_DESTROY
parameter_list|(
name|_eslp
parameter_list|)
define|\
value|mtx_destroy(&(_eslp)->lock)
define|#
directive|define
name|SFXGE_EFSYS_LOCK
parameter_list|(
name|_eslp
parameter_list|)
define|\
value|mtx_lock(&(_eslp)->lock)
define|#
directive|define
name|SFXGE_EFSYS_UNLOCK
parameter_list|(
name|_eslp
parameter_list|)
define|\
value|mtx_unlock(&(_eslp)->lock)
define|#
directive|define
name|SFXGE_EFSYS_LOCK_ASSERT_OWNED
parameter_list|(
name|_eslp
parameter_list|)
define|\
value|mtx_assert(&(_eslp)->lock, MA_OWNED)
define|#
directive|define
name|EFSYS_LOCK_MAGIC
value|0x000010c4
define|#
directive|define
name|EFSYS_LOCK
parameter_list|(
name|_lockp
parameter_list|,
name|_state
parameter_list|)
define|\
value|do {								\ 		SFXGE_EFSYS_LOCK(_lockp);				\ 		(_state) = EFSYS_LOCK_MAGIC;				\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_UNLOCK
parameter_list|(
name|_lockp
parameter_list|,
name|_state
parameter_list|)
define|\
value|do {								\ 		if ((_state) != EFSYS_LOCK_MAGIC)			\ 			KASSERT(B_FALSE, ("not locked"));		\ 		SFXGE_EFSYS_UNLOCK(_lockp);				\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
comment|/* PREEMPT */
define|#
directive|define
name|EFSYS_PREEMPT_DISABLE
parameter_list|(
name|_state
parameter_list|)
define|\
value|do {								\ 		(_state) = (_state);					\ 		critical_enter();					\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_PREEMPT_ENABLE
parameter_list|(
name|_state
parameter_list|)
define|\
value|do {								\ 		(_state) = (_state);					\ 		critical_exit(_state);					\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
comment|/* STAT */
typedef|typedef
name|uint64_t
name|efsys_stat_t
typedef|;
define|#
directive|define
name|EFSYS_STAT_INCR
parameter_list|(
name|_knp
parameter_list|,
name|_delta
parameter_list|)
define|\
value|do {								\ 		*(_knp) += (_delta);					\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_STAT_DECR
parameter_list|(
name|_knp
parameter_list|,
name|_delta
parameter_list|)
define|\
value|do {								\ 		*(_knp) -= (_delta);					\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_STAT_SET
parameter_list|(
name|_knp
parameter_list|,
name|_val
parameter_list|)
define|\
value|do {								\ 		*(_knp) = (_val);					\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_STAT_SET_QWORD
parameter_list|(
name|_knp
parameter_list|,
name|_valp
parameter_list|)
define|\
value|do {								\ 		*(_knp) = le64toh((_valp)->eq_u64[0]);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_STAT_SET_DWORD
parameter_list|(
name|_knp
parameter_list|,
name|_valp
parameter_list|)
define|\
value|do {								\ 		*(_knp) = le32toh((_valp)->ed_u32[0]);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_STAT_INCR_QWORD
parameter_list|(
name|_knp
parameter_list|,
name|_valp
parameter_list|)
define|\
value|do {								\ 		*(_knp) += le64toh((_valp)->eq_u64[0]);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
define|#
directive|define
name|EFSYS_STAT_SUBR_QWORD
parameter_list|(
name|_knp
parameter_list|,
name|_valp
parameter_list|)
define|\
value|do {								\ 		*(_knp) -= le64toh((_valp)->eq_u64[0]);			\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
comment|/* ERR */
specifier|extern
name|void
name|sfxge_err
parameter_list|(
name|efsys_identifier_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_DECODE_INTR_FATAL
define|#
directive|define
name|EFSYS_ERR
parameter_list|(
name|_esip
parameter_list|,
name|_code
parameter_list|,
name|_dword0
parameter_list|,
name|_dword1
parameter_list|)
define|\
value|do {								\ 		sfxge_err((_esip), (_code), (_dword0), (_dword1));	\ 	_NOTE(CONSTANTCONDITION)					\ 	} while (B_FALSE)
endif|#
directive|endif
comment|/* ASSERT */
define|#
directive|define
name|EFSYS_ASSERT
parameter_list|(
name|_exp
parameter_list|)
value|do {						\ 	if (!(_exp))							\ 		panic(#_exp);						\ 	} while (0)
define|#
directive|define
name|EFSYS_ASSERT3
parameter_list|(
name|_x
parameter_list|,
name|_op
parameter_list|,
name|_y
parameter_list|,
name|_t
parameter_list|)
value|do {				\ 	const _t __x = (_t)(_x);					\ 	const _t __y = (_t)(_y);					\ 	if (!(__x _op __y))						\ 		panic("assertion failed at %s:%u", __FILE__, __LINE__);	\ 	} while(0)
define|#
directive|define
name|EFSYS_ASSERT3U
parameter_list|(
name|_x
parameter_list|,
name|_op
parameter_list|,
name|_y
parameter_list|)
value|EFSYS_ASSERT3(_x, _op, _y, uint64_t)
define|#
directive|define
name|EFSYS_ASSERT3S
parameter_list|(
name|_x
parameter_list|,
name|_op
parameter_list|,
name|_y
parameter_list|)
value|EFSYS_ASSERT3(_x, _op, _y, int64_t)
define|#
directive|define
name|EFSYS_ASSERT3P
parameter_list|(
name|_x
parameter_list|,
name|_op
parameter_list|,
name|_y
parameter_list|)
value|EFSYS_ASSERT3(_x, _op, _y, uintptr_t)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_EFSYS_H */
end_comment

end_unit

