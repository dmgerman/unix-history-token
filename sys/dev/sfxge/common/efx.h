begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright 2006-2009 Solarflare Communications Inc.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_EFX_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_EFX_H
end_define

begin_include
include|#
directive|include
file|"efsys.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|EFX_STATIC_ASSERT
parameter_list|(
name|_cond
parameter_list|)
value|((void)sizeof(char[(_cond) ? 1 : -1]))
define|#
directive|define
name|EFX_ARRAY_SIZE
parameter_list|(
name|_array
parameter_list|)
value|(sizeof(_array) / sizeof((_array)[0]))
ifndef|#
directive|ifndef
name|EFSYS_MEM_IS_NULL
define|#
directive|define
name|EFSYS_MEM_IS_NULL
parameter_list|(
name|_esmp
parameter_list|)
value|((_esmp)->esm_base == NULL)
endif|#
directive|endif
typedef|typedef
enum|enum
name|efx_family_e
block|{
name|EFX_FAMILY_INVALID
block|,
name|EFX_FAMILY_FALCON
block|,
name|EFX_FAMILY_SIENA
block|,
name|EFX_FAMILY_NTYPES
block|}
name|efx_family_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_family
parameter_list|(
name|__in
name|uint16_t
name|venid
parameter_list|,
name|__in
name|uint16_t
name|devid
parameter_list|,
name|__out
name|efx_family_t
modifier|*
name|efp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_infer_family
parameter_list|(
name|__in
name|efsys_bar_t
modifier|*
name|esbp
parameter_list|,
name|__out
name|efx_family_t
modifier|*
name|efp
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_PCI_VENID_SFC
value|0x1924
define|#
directive|define
name|EFX_PCI_DEVID_FALCON
value|0x0710
define|#
directive|define
name|EFX_PCI_DEVID_BETHPAGE
value|0x0803
define|#
directive|define
name|EFX_PCI_DEVID_SIENA
value|0x0813
define|#
directive|define
name|EFX_PCI_DEVID_SIENA_F1_UNINIT
value|0x0810
define|#
directive|define
name|EFX_MEM_BAR
value|2
comment|/* Error codes */
enum|enum
block|{
name|EFX_ERR_INVALID
block|,
name|EFX_ERR_SRAM_OOB
block|,
name|EFX_ERR_BUFID_DC_OOB
block|,
name|EFX_ERR_MEM_PERR
block|,
name|EFX_ERR_RBUF_OWN
block|,
name|EFX_ERR_TBUF_OWN
block|,
name|EFX_ERR_RDESQ_OWN
block|,
name|EFX_ERR_TDESQ_OWN
block|,
name|EFX_ERR_EVQ_OWN
block|,
name|EFX_ERR_EVFF_OFLO
block|,
name|EFX_ERR_ILL_ADDR
block|,
name|EFX_ERR_SRAM_PERR
block|,
name|EFX_ERR_NCODES
block|}
enum|;
comment|/* NIC */
typedef|typedef
name|struct
name|efx_nic_s
name|efx_nic_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_nic_create
parameter_list|(
name|__in
name|efx_family_t
name|family
parameter_list|,
name|__in
name|efsys_identifier_t
modifier|*
name|esip
parameter_list|,
name|__in
name|efsys_bar_t
modifier|*
name|esbp
parameter_list|,
name|__in
name|efsys_lock_t
modifier|*
name|eslp
parameter_list|,
name|__deref_out
name|efx_nic_t
modifier|*
modifier|*
name|enpp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_nic_probe
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_PCIE_TUNE
specifier|extern
name|__checkReturn
name|int
name|efx_nic_pcie_tune
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|unsigned
name|int
name|nlanes
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_nic_pcie_extended_sync
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PCIE_TUNE */
specifier|extern
name|__checkReturn
name|int
name|efx_nic_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_nic_reset
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_DIAG
specifier|extern
name|__checkReturn
name|int
name|efx_nic_register_test
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_DIAG */
specifier|extern
name|void
name|efx_nic_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_nic_unprobe
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_nic_destroy
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_MCDI
typedef|typedef
name|struct
name|efx_mcdi_req_s
name|efx_mcdi_req_t
typedef|;
typedef|typedef
enum|enum
name|efx_mcdi_exception_e
block|{
name|EFX_MCDI_EXCEPTION_MC_REBOOT
block|,
name|EFX_MCDI_EXCEPTION_MC_BADASSERT
block|, }
name|efx_mcdi_exception_t
typedef|;
typedef|typedef
struct|struct
name|efx_mcdi_transport_s
block|{
name|void
modifier|*
name|emt_context
decl_stmt|;
name|void
function_decl|(
modifier|*
name|emt_execute
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|efx_mcdi_req_t
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|emt_ev_cpl
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|emt_exception
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|efx_mcdi_exception_t
parameter_list|)
function_decl|;
block|}
name|efx_mcdi_transport_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_mcdi_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
specifier|const
name|efx_mcdi_transport_t
modifier|*
name|mtp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_mcdi_reboot
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_mcdi_request_start
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_mcdi_req_t
modifier|*
name|emrp
parameter_list|,
name|__in
name|boolean_t
name|ev_cpl
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|boolean_t
name|efx_mcdi_request_poll
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|boolean_t
name|efx_mcdi_request_abort
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_mcdi_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_MCDI */
comment|/* INTR */
define|#
directive|define
name|EFX_NINTR_FALCON
value|64
define|#
directive|define
name|EFX_NINTR_SIENA
value|1024
typedef|typedef
enum|enum
name|efx_intr_type_e
block|{
name|EFX_INTR_INVALID
init|=
literal|0
block|,
name|EFX_INTR_LINE
block|,
name|EFX_INTR_MESSAGE
block|,
name|EFX_INTR_NTYPES
block|}
name|efx_intr_type_t
typedef|;
define|#
directive|define
name|EFX_INTR_SIZE
value|(sizeof (efx_oword_t))
specifier|extern
name|__checkReturn
name|int
name|efx_intr_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_intr_type_t
name|type
parameter_list|,
name|__in
name|efsys_mem_t
modifier|*
name|esmp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_intr_enable
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_intr_disable
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_intr_disable_unlocked
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_INTR_NEVQS
value|32
specifier|extern
name|__checkReturn
name|int
name|efx_intr_trigger
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|level
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_intr_status_line
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__out
name|boolean_t
modifier|*
name|fatalp
parameter_list|,
name|__out
name|uint32_t
modifier|*
name|maskp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_intr_status_message
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|message
parameter_list|,
name|__out
name|boolean_t
modifier|*
name|fatalp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_intr_fatal
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_intr_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
comment|/* MAC */
if|#
directive|if
name|EFSYS_OPT_MAC_STATS
comment|/* START MKCONFIG GENERATED EfxHeaderMacBlock bb8d39428b6fdcf5 */
typedef|typedef
enum|enum
name|efx_mac_stat_e
block|{
name|EFX_MAC_RX_OCTETS
block|,
name|EFX_MAC_RX_PKTS
block|,
name|EFX_MAC_RX_UNICST_PKTS
block|,
name|EFX_MAC_RX_MULTICST_PKTS
block|,
name|EFX_MAC_RX_BRDCST_PKTS
block|,
name|EFX_MAC_RX_PAUSE_PKTS
block|,
name|EFX_MAC_RX_LE_64_PKTS
block|,
name|EFX_MAC_RX_65_TO_127_PKTS
block|,
name|EFX_MAC_RX_128_TO_255_PKTS
block|,
name|EFX_MAC_RX_256_TO_511_PKTS
block|,
name|EFX_MAC_RX_512_TO_1023_PKTS
block|,
name|EFX_MAC_RX_1024_TO_15XX_PKTS
block|,
name|EFX_MAC_RX_GE_15XX_PKTS
block|,
name|EFX_MAC_RX_ERRORS
block|,
name|EFX_MAC_RX_FCS_ERRORS
block|,
name|EFX_MAC_RX_DROP_EVENTS
block|,
name|EFX_MAC_RX_FALSE_CARRIER_ERRORS
block|,
name|EFX_MAC_RX_SYMBOL_ERRORS
block|,
name|EFX_MAC_RX_ALIGN_ERRORS
block|,
name|EFX_MAC_RX_INTERNAL_ERRORS
block|,
name|EFX_MAC_RX_JABBER_PKTS
block|,
name|EFX_MAC_RX_LANE0_CHAR_ERR
block|,
name|EFX_MAC_RX_LANE1_CHAR_ERR
block|,
name|EFX_MAC_RX_LANE2_CHAR_ERR
block|,
name|EFX_MAC_RX_LANE3_CHAR_ERR
block|,
name|EFX_MAC_RX_LANE0_DISP_ERR
block|,
name|EFX_MAC_RX_LANE1_DISP_ERR
block|,
name|EFX_MAC_RX_LANE2_DISP_ERR
block|,
name|EFX_MAC_RX_LANE3_DISP_ERR
block|,
name|EFX_MAC_RX_MATCH_FAULT
block|,
name|EFX_MAC_RX_NODESC_DROP_CNT
block|,
name|EFX_MAC_TX_OCTETS
block|,
name|EFX_MAC_TX_PKTS
block|,
name|EFX_MAC_TX_UNICST_PKTS
block|,
name|EFX_MAC_TX_MULTICST_PKTS
block|,
name|EFX_MAC_TX_BRDCST_PKTS
block|,
name|EFX_MAC_TX_PAUSE_PKTS
block|,
name|EFX_MAC_TX_LE_64_PKTS
block|,
name|EFX_MAC_TX_65_TO_127_PKTS
block|,
name|EFX_MAC_TX_128_TO_255_PKTS
block|,
name|EFX_MAC_TX_256_TO_511_PKTS
block|,
name|EFX_MAC_TX_512_TO_1023_PKTS
block|,
name|EFX_MAC_TX_1024_TO_15XX_PKTS
block|,
name|EFX_MAC_TX_GE_15XX_PKTS
block|,
name|EFX_MAC_TX_ERRORS
block|,
name|EFX_MAC_TX_SGL_COL_PKTS
block|,
name|EFX_MAC_TX_MULT_COL_PKTS
block|,
name|EFX_MAC_TX_EX_COL_PKTS
block|,
name|EFX_MAC_TX_LATE_COL_PKTS
block|,
name|EFX_MAC_TX_DEF_PKTS
block|,
name|EFX_MAC_TX_EX_DEF_PKTS
block|,
name|EFX_MAC_NSTATS
block|}
name|efx_mac_stat_t
typedef|;
comment|/* END MKCONFIG GENERATED EfxHeaderMacBlock */
endif|#
directive|endif
comment|/* EFSYS_OPT_MAC_STATS */
typedef|typedef
enum|enum
name|efx_link_mode_e
block|{
name|EFX_LINK_UNKNOWN
init|=
literal|0
block|,
name|EFX_LINK_DOWN
block|,
name|EFX_LINK_10HDX
block|,
name|EFX_LINK_10FDX
block|,
name|EFX_LINK_100HDX
block|,
name|EFX_LINK_100FDX
block|,
name|EFX_LINK_1000HDX
block|,
name|EFX_LINK_1000FDX
block|,
name|EFX_LINK_10000FDX
block|,
name|EFX_LINK_NMODES
block|}
name|efx_link_mode_t
typedef|;
define|#
directive|define
name|EFX_MAC_SDU_MAX
value|9202
define|#
directive|define
name|EFX_MAC_PDU
parameter_list|(
name|_sdu
parameter_list|)
define|\
value|P2ROUNDUP(((_sdu)				\ 		    +
comment|/* EtherII */
value|14			\ 		    +
comment|/* VLAN */
value|4			\ 		    +
comment|/* CRC */
value|4			\ 		    +
comment|/* bug16011 */
value|16),		\ 		    (1<< 3))
define|#
directive|define
name|EFX_MAC_PDU_MIN
value|60
define|#
directive|define
name|EFX_MAC_PDU_MAX
value|EFX_MAC_PDU(EFX_MAC_SDU_MAX)
specifier|extern
name|__checkReturn
name|int
name|efx_mac_pdu_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|size_t
name|pdu
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_mac_addr_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|uint8_t
modifier|*
name|addr
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_mac_filter_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|boolean_t
name|unicst
parameter_list|,
name|__in
name|boolean_t
name|brdcst
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_mac_drain
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|boolean_t
name|enabled
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_mac_up
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__out
name|boolean_t
modifier|*
name|mac_upp
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_FCNTL_RESPOND
value|0x00000001
define|#
directive|define
name|EFX_FCNTL_GENERATE
value|0x00000002
specifier|extern
name|__checkReturn
name|int
name|efx_mac_fcntl_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|fcntl
parameter_list|,
name|__in
name|boolean_t
name|autoneg
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_mac_fcntl_get
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__out
name|unsigned
name|int
modifier|*
name|fcntl_wantedp
parameter_list|,
name|__out
name|unsigned
name|int
modifier|*
name|fcntl_linkp
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_MAC_HASH_BITS
value|(1<< 8)
specifier|extern
name|__checkReturn
name|int
name|efx_mac_hash_set
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in_ecount
argument_list|(
argument|EFX_MAC_HASH_BITS
argument_list|)
name|unsigned
name|int
specifier|const
operator|*
name|bucket
argument_list|)
decl_stmt|;
if|#
directive|if
name|EFSYS_OPT_MAC_STATS
if|#
directive|if
name|EFSYS_OPT_NAMES
specifier|extern
name|__checkReturn
specifier|const
name|char
name|__cs
modifier|*
name|efx_mac_stat_name
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|id
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_NAMES */
define|#
directive|define
name|EFX_MAC_STATS_SIZE
value|0x400
comment|/*  * Upload mac statistics supported by the hardware into the given buffer.  *  * The reference buffer must be at least %EFX_MAC_STATS_SIZE bytes,  * and page aligned.  *  * The hardware will only DMA statistics that it understands (of course).  * Drivers should not make any assumptions about which statistics are  * supported, especially when the statistics are generated by firmware.  *  * Thus, drivers should zero this buffer before use, so that not-understood  * statistics read back as zero.  */
specifier|extern
name|__checkReturn
name|int
name|efx_mac_stats_upload
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efsys_mem_t
modifier|*
name|esmp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_mac_stats_periodic
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efsys_mem_t
modifier|*
name|esmp
parameter_list|,
name|__in
name|uint16_t
name|period_ms
parameter_list|,
name|__in
name|boolean_t
name|events
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_mac_stats_update
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in
name|efsys_mem_t
operator|*
name|esmp
argument_list|,
name|__inout_ecount
argument_list|(
argument|EFX_MAC_NSTATS
argument_list|)
name|efsys_stat_t
operator|*
name|stat
argument_list|,
name|__out_opt
name|uint32_t
operator|*
name|generationp
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_MAC_STATS */
comment|/* MON */
typedef|typedef
enum|enum
name|efx_mon_type_e
block|{
name|EFX_MON_INVALID
init|=
literal|0
block|,
name|EFX_MON_NULL
block|,
name|EFX_MON_LM87
block|,
name|EFX_MON_MAX6647
block|,
name|EFX_MON_SFC90X0
block|,
name|EFX_MON_NTYPES
block|}
name|efx_mon_type_t
typedef|;
if|#
directive|if
name|EFSYS_OPT_NAMES
specifier|extern
specifier|const
name|char
name|__cs
modifier|*
name|efx_mon_name
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_NAMES */
specifier|extern
name|__checkReturn
name|int
name|efx_mon_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_MON_STATS
define|#
directive|define
name|EFX_MON_STATS_SIZE
value|0x100
comment|/* START MKCONFIG GENERATED MonitorHeaderStatsBlock 58706a378332aeee */
typedef|typedef
enum|enum
name|efx_mon_stat_e
block|{
name|EFX_MON_STAT_2_5V
block|,
name|EFX_MON_STAT_VCCP1
block|,
name|EFX_MON_STAT_VCC
block|,
name|EFX_MON_STAT_5V
block|,
name|EFX_MON_STAT_12V
block|,
name|EFX_MON_STAT_VCCP2
block|,
name|EFX_MON_STAT_EXT_TEMP
block|,
name|EFX_MON_STAT_INT_TEMP
block|,
name|EFX_MON_STAT_AIN1
block|,
name|EFX_MON_STAT_AIN2
block|,
name|EFX_MON_STAT_INT_COOLING
block|,
name|EFX_MON_STAT_EXT_COOLING
block|,
name|EFX_MON_STAT_1V
block|,
name|EFX_MON_STAT_1_2V
block|,
name|EFX_MON_STAT_1_8V
block|,
name|EFX_MON_STAT_3_3V
block|,
name|EFX_MON_STAT_1_2VA
block|,
name|EFX_MON_STAT_VREF
block|,
name|EFX_MON_STAT_VAOE
block|,
name|EFX_MON_STAT_AOE_TEMP
block|,
name|EFX_MON_STAT_PSU_AOE_TEMP
block|,
name|EFX_MON_STAT_PSU_TEMP
block|,
name|EFX_MON_STAT_FAN0
block|,
name|EFX_MON_STAT_FAN1
block|,
name|EFX_MON_STAT_FAN2
block|,
name|EFX_MON_STAT_FAN3
block|,
name|EFX_MON_STAT_FAN4
block|,
name|EFX_MON_STAT_VAOE_IN
block|,
name|EFX_MON_STAT_IAOE
block|,
name|EFX_MON_STAT_IAOE_IN
block|,
name|EFX_MON_NSTATS
block|}
name|efx_mon_stat_t
typedef|;
comment|/* END MKCONFIG GENERATED MonitorHeaderStatsBlock */
typedef|typedef
enum|enum
name|efx_mon_stat_state_e
block|{
name|EFX_MON_STAT_STATE_OK
init|=
literal|0
block|,
name|EFX_MON_STAT_STATE_WARNING
init|=
literal|1
block|,
name|EFX_MON_STAT_STATE_FATAL
init|=
literal|2
block|,
name|EFX_MON_STAT_STATE_BROKEN
init|=
literal|3
block|, }
name|efx_mon_stat_state_t
typedef|;
typedef|typedef
struct|struct
name|efx_mon_stat_value_t
block|{
name|uint16_t
name|emsv_value
decl_stmt|;
name|uint16_t
name|emsv_state
decl_stmt|;
block|}
name|efx_mon_stat_value_t
typedef|;
if|#
directive|if
name|EFSYS_OPT_NAMES
specifier|extern
specifier|const
name|char
name|__cs
modifier|*
name|efx_mon_stat_name
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_mon_stat_t
name|id
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_NAMES */
specifier|extern
name|__checkReturn
name|int
name|efx_mon_stats_update
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in
name|efsys_mem_t
operator|*
name|esmp
argument_list|,
name|__out_ecount
argument_list|(
argument|EFX_MON_NSTATS
argument_list|)
name|efx_mon_stat_value_t
operator|*
name|values
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_MON_STATS */
specifier|extern
name|void
name|efx_mon_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
comment|/* PHY */
define|#
directive|define
name|PMA_PMD_MMD
value|1
define|#
directive|define
name|PCS_MMD
value|3
define|#
directive|define
name|PHY_XS_MMD
value|4
define|#
directive|define
name|DTE_XS_MMD
value|5
define|#
directive|define
name|AN_MMD
value|7
define|#
directive|define
name|CL22EXT_MMD
value|29
define|#
directive|define
name|MAXMMD
value|((1<< 5) - 1)
comment|/* PHY types */
define|#
directive|define
name|EFX_PHY_NULL
value|0x0
define|#
directive|define
name|EFX_PHY_TXC43128
value|0x1
define|#
directive|define
name|EFX_PHY_SFX7101
value|0x3
define|#
directive|define
name|EFX_PHY_QT2022C2
value|0x4
define|#
directive|define
name|EFX_PHY_SFT9001A
value|0x8
define|#
directive|define
name|EFX_PHY_QT2025C
value|0x9
define|#
directive|define
name|EFX_PHY_SFT9001B
value|0xa
define|#
directive|define
name|EFX_PHY_QLX111V
value|0xc
specifier|extern
name|__checkReturn
name|int
name|efx_phy_verify
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_PHY_LED_CONTROL
typedef|typedef
enum|enum
name|efx_phy_led_mode_e
block|{
name|EFX_PHY_LED_DEFAULT
init|=
literal|0
block|,
name|EFX_PHY_LED_OFF
block|,
name|EFX_PHY_LED_ON
block|,
name|EFX_PHY_LED_FLASH
block|,
name|EFX_PHY_LED_NMODES
block|}
name|efx_phy_led_mode_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_phy_led_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_phy_led_mode_t
name|mode
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_LED_CONTROL */
specifier|extern
name|__checkReturn
name|int
name|efx_port_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_LOOPBACK
typedef|typedef
enum|enum
name|efx_loopback_type_e
block|{
name|EFX_LOOPBACK_OFF
init|=
literal|0
block|,
name|EFX_LOOPBACK_DATA
init|=
literal|1
block|,
name|EFX_LOOPBACK_GMAC
init|=
literal|2
block|,
name|EFX_LOOPBACK_XGMII
init|=
literal|3
block|,
name|EFX_LOOPBACK_XGXS
init|=
literal|4
block|,
name|EFX_LOOPBACK_XAUI
init|=
literal|5
block|,
name|EFX_LOOPBACK_GMII
init|=
literal|6
block|,
name|EFX_LOOPBACK_SGMII
init|=
literal|7
block|,
name|EFX_LOOPBACK_XGBR
init|=
literal|8
block|,
name|EFX_LOOPBACK_XFI
init|=
literal|9
block|,
name|EFX_LOOPBACK_XAUI_FAR
init|=
literal|10
block|,
name|EFX_LOOPBACK_GMII_FAR
init|=
literal|11
block|,
name|EFX_LOOPBACK_SGMII_FAR
init|=
literal|12
block|,
name|EFX_LOOPBACK_XFI_FAR
init|=
literal|13
block|,
name|EFX_LOOPBACK_GPHY
init|=
literal|14
block|,
name|EFX_LOOPBACK_PHY_XS
init|=
literal|15
block|,
name|EFX_LOOPBACK_PCS
init|=
literal|16
block|,
name|EFX_LOOPBACK_PMA_PMD
init|=
literal|17
block|,
name|EFX_LOOPBACK_NTYPES
block|}
name|efx_loopback_type_t
typedef|;
define|#
directive|define
name|EFX_LOOPBACK_MAC_MASK
define|\
value|((1<< EFX_LOOPBACK_DATA) |		\ 	    (1<< EFX_LOOPBACK_GMAC) | 		\ 	    (1<< EFX_LOOPBACK_XGMII) | 	\ 	    (1<< EFX_LOOPBACK_XGXS) | 		\ 	    (1<< EFX_LOOPBACK_XAUI) |		\ 	    (1<< EFX_LOOPBACK_GMII) |		\ 	    (1<< EFX_LOOPBACK_SGMII) |		\ 	    (1<< EFX_LOOPBACK_XGBR) |		\ 	    (1<< EFX_LOOPBACK_XFI) |		\ 	    (1<< EFX_LOOPBACK_XAUI_FAR) |	\ 	    (1<< EFX_LOOPBACK_GMII_FAR) |	\ 	    (1<< EFX_LOOPBACK_SGMII_FAR) |	\ 	    (1<< EFX_LOOPBACK_XFI_FAR))
define|#
directive|define
name|EFX_LOOPBACK_MASK
define|\
value|((1<< EFX_LOOPBACK_NTYPES) - 1)
specifier|extern
name|__checkReturn
name|int
name|efx_port_loopback_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_link_mode_t
name|link_mode
parameter_list|,
name|__in
name|efx_loopback_type_t
name|type
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_NAMES
specifier|extern
name|__checkReturn
specifier|const
name|char
name|__cs
modifier|*
name|efx_loopback_type_name
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_loopback_type_t
name|type
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_NAMES */
endif|#
directive|endif
comment|/* EFSYS_OPT_LOOPBACK */
specifier|extern
name|__checkReturn
name|int
name|efx_port_poll
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__out
name|efx_link_mode_t
modifier|*
name|link_modep
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_port_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
typedef|typedef
enum|enum
name|efx_phy_cap_type_e
block|{
name|EFX_PHY_CAP_INVALID
init|=
literal|0
block|,
name|EFX_PHY_CAP_10HDX
block|,
name|EFX_PHY_CAP_10FDX
block|,
name|EFX_PHY_CAP_100HDX
block|,
name|EFX_PHY_CAP_100FDX
block|,
name|EFX_PHY_CAP_1000HDX
block|,
name|EFX_PHY_CAP_1000FDX
block|,
name|EFX_PHY_CAP_10000FDX
block|,
name|EFX_PHY_CAP_PAUSE
block|,
name|EFX_PHY_CAP_ASYM
block|,
name|EFX_PHY_CAP_AN
block|,
name|EFX_PHY_CAP_NTYPES
block|}
name|efx_phy_cap_type_t
typedef|;
define|#
directive|define
name|EFX_PHY_CAP_CURRENT
value|0x00000000
define|#
directive|define
name|EFX_PHY_CAP_DEFAULT
value|0x00000001
define|#
directive|define
name|EFX_PHY_CAP_PERM
value|0x00000002
specifier|extern
name|void
name|efx_phy_adv_cap_get
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|uint32_t
name|flag
parameter_list|,
name|__out
name|uint32_t
modifier|*
name|maskp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_phy_adv_cap_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|uint32_t
name|mask
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_phy_lp_cap_get
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__out
name|uint32_t
modifier|*
name|maskp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_phy_oui_get
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__out
name|uint32_t
modifier|*
name|ouip
parameter_list|)
function_decl|;
typedef|typedef
enum|enum
name|efx_phy_media_type_e
block|{
name|EFX_PHY_MEDIA_INVALID
init|=
literal|0
block|,
name|EFX_PHY_MEDIA_XAUI
block|,
name|EFX_PHY_MEDIA_CX4
block|,
name|EFX_PHY_MEDIA_KX4
block|,
name|EFX_PHY_MEDIA_XFP
block|,
name|EFX_PHY_MEDIA_SFP_PLUS
block|,
name|EFX_PHY_MEDIA_BASE_T
block|,
name|EFX_PHY_MEDIA_NTYPES
block|}
name|efx_phy_media_type_t
typedef|;
comment|/* Get the type of medium currently used.  If the board has ports for  * modules, a module is present, and we recognise the media type of  * the module, then this will be the media type of the module.  * Otherwise it will be the media type of the port.  */
specifier|extern
name|void
name|efx_phy_media_type_get
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__out
name|efx_phy_media_type_t
modifier|*
name|typep
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_PHY_STATS
comment|/* START MKCONFIG GENERATED PhyHeaderStatsBlock 30ed56ad501f8e36 */
typedef|typedef
enum|enum
name|efx_phy_stat_e
block|{
name|EFX_PHY_STAT_OUI
block|,
name|EFX_PHY_STAT_PMA_PMD_LINK_UP
block|,
name|EFX_PHY_STAT_PMA_PMD_RX_FAULT
block|,
name|EFX_PHY_STAT_PMA_PMD_TX_FAULT
block|,
name|EFX_PHY_STAT_PMA_PMD_REV_A
block|,
name|EFX_PHY_STAT_PMA_PMD_REV_B
block|,
name|EFX_PHY_STAT_PMA_PMD_REV_C
block|,
name|EFX_PHY_STAT_PMA_PMD_REV_D
block|,
name|EFX_PHY_STAT_PCS_LINK_UP
block|,
name|EFX_PHY_STAT_PCS_RX_FAULT
block|,
name|EFX_PHY_STAT_PCS_TX_FAULT
block|,
name|EFX_PHY_STAT_PCS_BER
block|,
name|EFX_PHY_STAT_PCS_BLOCK_ERRORS
block|,
name|EFX_PHY_STAT_PHY_XS_LINK_UP
block|,
name|EFX_PHY_STAT_PHY_XS_RX_FAULT
block|,
name|EFX_PHY_STAT_PHY_XS_TX_FAULT
block|,
name|EFX_PHY_STAT_PHY_XS_ALIGN
block|,
name|EFX_PHY_STAT_PHY_XS_SYNC_A
block|,
name|EFX_PHY_STAT_PHY_XS_SYNC_B
block|,
name|EFX_PHY_STAT_PHY_XS_SYNC_C
block|,
name|EFX_PHY_STAT_PHY_XS_SYNC_D
block|,
name|EFX_PHY_STAT_AN_LINK_UP
block|,
name|EFX_PHY_STAT_AN_MASTER
block|,
name|EFX_PHY_STAT_AN_LOCAL_RX_OK
block|,
name|EFX_PHY_STAT_AN_REMOTE_RX_OK
block|,
name|EFX_PHY_STAT_CL22EXT_LINK_UP
block|,
name|EFX_PHY_STAT_SNR_A
block|,
name|EFX_PHY_STAT_SNR_B
block|,
name|EFX_PHY_STAT_SNR_C
block|,
name|EFX_PHY_STAT_SNR_D
block|,
name|EFX_PHY_STAT_PMA_PMD_SIGNAL_A
block|,
name|EFX_PHY_STAT_PMA_PMD_SIGNAL_B
block|,
name|EFX_PHY_STAT_PMA_PMD_SIGNAL_C
block|,
name|EFX_PHY_STAT_PMA_PMD_SIGNAL_D
block|,
name|EFX_PHY_STAT_AN_COMPLETE
block|,
name|EFX_PHY_STAT_PMA_PMD_REV_MAJOR
block|,
name|EFX_PHY_STAT_PMA_PMD_REV_MINOR
block|,
name|EFX_PHY_STAT_PMA_PMD_REV_MICRO
block|,
name|EFX_PHY_STAT_PCS_FW_VERSION_0
block|,
name|EFX_PHY_STAT_PCS_FW_VERSION_1
block|,
name|EFX_PHY_STAT_PCS_FW_VERSION_2
block|,
name|EFX_PHY_STAT_PCS_FW_VERSION_3
block|,
name|EFX_PHY_STAT_PCS_FW_BUILD_YY
block|,
name|EFX_PHY_STAT_PCS_FW_BUILD_MM
block|,
name|EFX_PHY_STAT_PCS_FW_BUILD_DD
block|,
name|EFX_PHY_STAT_PCS_OP_MODE
block|,
name|EFX_PHY_NSTATS
block|}
name|efx_phy_stat_t
typedef|;
comment|/* END MKCONFIG GENERATED PhyHeaderStatsBlock */
if|#
directive|if
name|EFSYS_OPT_NAMES
specifier|extern
specifier|const
name|char
name|__cs
modifier|*
name|efx_phy_stat_name
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_phy_stat_t
name|stat
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_NAMES */
define|#
directive|define
name|EFX_PHY_STATS_SIZE
value|0x100
specifier|extern
name|__checkReturn
name|int
name|efx_phy_stats_update
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in
name|efsys_mem_t
operator|*
name|esmp
argument_list|,
name|__out_ecount
argument_list|(
argument|EFX_PHY_NSTATS
argument_list|)
name|uint32_t
operator|*
name|stat
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_STATS */
if|#
directive|if
name|EFSYS_OPT_PHY_PROPS
if|#
directive|if
name|EFSYS_OPT_NAMES
specifier|extern
specifier|const
name|char
name|__cs
modifier|*
name|efx_phy_prop_name
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|id
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_NAMES */
define|#
directive|define
name|EFX_PHY_PROP_DEFAULT
value|0x00000001
specifier|extern
name|__checkReturn
name|int
name|efx_phy_prop_get
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|id
parameter_list|,
name|__in
name|uint32_t
name|flags
parameter_list|,
name|__out
name|uint32_t
modifier|*
name|valp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_phy_prop_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|id
parameter_list|,
name|__in
name|uint32_t
name|val
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_PROPS */
if|#
directive|if
name|EFSYS_OPT_PHY_BIST
typedef|typedef
enum|enum
name|efx_phy_bist_type_e
block|{
name|EFX_PHY_BIST_TYPE_UNKNOWN
block|,
name|EFX_PHY_BIST_TYPE_NORMAL
block|,
name|EFX_PHY_BIST_TYPE_CABLE_SHORT
block|,
name|EFX_PHY_BIST_TYPE_CABLE_LONG
block|,
name|EFX_PHY_BIST_TYPE_NTYPES
block|, }
name|efx_phy_bist_type_t
typedef|;
typedef|typedef
enum|enum
name|efx_phy_bist_result_e
block|{
name|EFX_PHY_BIST_RESULT_UNKNOWN
block|,
name|EFX_PHY_BIST_RESULT_RUNNING
block|,
name|EFX_PHY_BIST_RESULT_PASSED
block|,
name|EFX_PHY_BIST_RESULT_FAILED
block|, }
name|efx_phy_bist_result_t
typedef|;
typedef|typedef
enum|enum
name|efx_phy_cable_status_e
block|{
name|EFX_PHY_CABLE_STATUS_OK
block|,
name|EFX_PHY_CABLE_STATUS_INVALID
block|,
name|EFX_PHY_CABLE_STATUS_OPEN
block|,
name|EFX_PHY_CABLE_STATUS_INTRAPAIRSHORT
block|,
name|EFX_PHY_CABLE_STATUS_INTERPAIRSHORT
block|,
name|EFX_PHY_CABLE_STATUS_BUSY
block|, }
name|efx_phy_cable_status_t
typedef|;
typedef|typedef
enum|enum
name|efx_phy_bist_value_e
block|{
name|EFX_PHY_BIST_CABLE_LENGTH_A
block|,
name|EFX_PHY_BIST_CABLE_LENGTH_B
block|,
name|EFX_PHY_BIST_CABLE_LENGTH_C
block|,
name|EFX_PHY_BIST_CABLE_LENGTH_D
block|,
name|EFX_PHY_BIST_CABLE_STATUS_A
block|,
name|EFX_PHY_BIST_CABLE_STATUS_B
block|,
name|EFX_PHY_BIST_CABLE_STATUS_C
block|,
name|EFX_PHY_BIST_CABLE_STATUS_D
block|,
name|EFX_PHY_BIST_FAULT_CODE
block|,
name|EFX_PHY_BIST_NVALUES
block|, }
name|efx_phy_bist_value_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_phy_bist_start
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_phy_bist_type_t
name|type
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_phy_bist_poll
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in
name|efx_phy_bist_type_t
name|type
argument_list|,
name|__out
name|efx_phy_bist_result_t
operator|*
name|resultp
argument_list|,
name|__out_opt
name|uint32_t
operator|*
name|value_maskp
argument_list|,
name|__out_ecount_opt
argument_list|(
argument|count
argument_list|)
name|unsigned
name|long
operator|*
name|valuesp
argument_list|,
name|__in
name|size_t
name|count
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|efx_phy_bist_stop
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_phy_bist_type_t
name|type
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_BIST */
define|#
directive|define
name|EFX_FEATURE_IPV6
value|0x00000001
define|#
directive|define
name|EFX_FEATURE_LFSR_HASH_INSERT
value|0x00000002
define|#
directive|define
name|EFX_FEATURE_LINK_EVENTS
value|0x00000004
define|#
directive|define
name|EFX_FEATURE_PERIODIC_MAC_STATS
value|0x00000008
define|#
directive|define
name|EFX_FEATURE_WOL
value|0x00000010
define|#
directive|define
name|EFX_FEATURE_MCDI
value|0x00000020
define|#
directive|define
name|EFX_FEATURE_LOOKAHEAD_SPLIT
value|0x00000040
define|#
directive|define
name|EFX_FEATURE_MAC_HEADER_FILTERS
value|0x00000080
define|#
directive|define
name|EFX_FEATURE_TURBO
value|0x00000100
typedef|typedef
struct|struct
name|efx_nic_cfg_s
block|{
name|uint32_t
name|enc_board_type
decl_stmt|;
name|uint32_t
name|enc_phy_type
decl_stmt|;
if|#
directive|if
name|EFSYS_OPT_NAMES
name|char
name|enc_phy_name
index|[
literal|21
index|]
decl_stmt|;
endif|#
directive|endif
name|char
name|enc_phy_revision
index|[
literal|21
index|]
decl_stmt|;
name|efx_mon_type_t
name|enc_mon_type
decl_stmt|;
if|#
directive|if
name|EFSYS_OPT_MON_STATS
name|uint32_t
name|enc_mon_stat_mask
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|int
name|enc_features
decl_stmt|;
name|uint8_t
name|enc_mac_addr
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|enc_port
decl_stmt|;
name|uint32_t
name|enc_evq_limit
decl_stmt|;
name|uint32_t
name|enc_txq_limit
decl_stmt|;
name|uint32_t
name|enc_rxq_limit
decl_stmt|;
name|uint32_t
name|enc_buftbl_limit
decl_stmt|;
name|uint32_t
name|enc_evq_moderation_max
decl_stmt|;
name|uint32_t
name|enc_clk_mult
decl_stmt|;
if|#
directive|if
name|EFSYS_OPT_LOOPBACK
name|uint32_t
name|enc_loopback_types
index|[
name|EFX_LINK_NMODES
index|]
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_LOOPBACK */
if|#
directive|if
name|EFSYS_OPT_PHY_FLAGS
name|uint32_t
name|enc_phy_flags_mask
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_FLAGS */
if|#
directive|if
name|EFSYS_OPT_PHY_LED_CONTROL
name|uint32_t
name|enc_led_mask
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_LED_CONTROL */
if|#
directive|if
name|EFSYS_OPT_PHY_STATS
name|uint64_t
name|enc_phy_stat_mask
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_STATS */
if|#
directive|if
name|EFSYS_OPT_PHY_PROPS
name|unsigned
name|int
name|enc_phy_nprops
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_PROPS */
if|#
directive|if
name|EFSYS_OPT_SIENA
name|uint8_t
name|enc_siena_channel
decl_stmt|;
if|#
directive|if
name|EFSYS_OPT_PHY_STATS
name|uint32_t
name|enc_siena_phy_stat_mask
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_STATS */
if|#
directive|if
name|EFSYS_OPT_MON_STATS
name|uint32_t
name|enc_siena_mon_stat_mask
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_MON_STATS */
endif|#
directive|endif
comment|/* EFSYS_OPT_SIENA */
if|#
directive|if
name|EFSYS_OPT_PHY_BIST
name|uint32_t
name|enc_bist_mask
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_PHY_BIST */
block|}
name|efx_nic_cfg_t
typedef|;
specifier|extern
specifier|const
name|efx_nic_cfg_t
modifier|*
name|efx_nic_cfg_get
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_VPD
typedef|typedef
enum|enum
name|efx_vpd_tag_e
block|{
name|EFX_VPD_ID
init|=
literal|0x02
block|,
name|EFX_VPD_END
init|=
literal|0x0f
block|,
name|EFX_VPD_RO
init|=
literal|0x10
block|,
name|EFX_VPD_RW
init|=
literal|0x11
block|, }
name|efx_vpd_tag_t
typedef|;
typedef|typedef
name|uint16_t
name|efx_vpd_keyword_t
typedef|;
typedef|typedef
struct|struct
name|efx_vpd_value_s
block|{
name|efx_vpd_tag_t
name|evv_tag
decl_stmt|;
name|efx_vpd_keyword_t
name|evv_keyword
decl_stmt|;
name|uint8_t
name|evv_length
decl_stmt|;
name|uint8_t
name|evv_value
index|[
literal|0x100
index|]
decl_stmt|;
block|}
name|efx_vpd_value_t
typedef|;
define|#
directive|define
name|EFX_VPD_KEYWORD
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|((x) | ((y)<< 8))
specifier|extern
name|__checkReturn
name|int
name|efx_vpd_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_vpd_size
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__out
name|size_t
modifier|*
name|sizep
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_vpd_read
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__out_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_vpd_verify
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_vpd_reinit
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_vpd_get
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|,
name|__inout
name|efx_vpd_value_t
operator|*
name|evvp
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_vpd_set
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__inout_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|,
name|__in
name|efx_vpd_value_t
operator|*
name|evvp
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_vpd_next
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__inout_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|,
name|__out
name|efx_vpd_value_t
operator|*
name|evvp
argument_list|,
name|__inout
name|unsigned
name|int
operator|*
name|contp
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_vpd_write
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|efx_vpd_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_VPD */
comment|/* NVRAM */
if|#
directive|if
name|EFSYS_OPT_NVRAM
typedef|typedef
enum|enum
name|efx_nvram_type_e
block|{
name|EFX_NVRAM_INVALID
init|=
literal|0
block|,
name|EFX_NVRAM_BOOTROM
block|,
name|EFX_NVRAM_BOOTROM_CFG
block|,
name|EFX_NVRAM_MC_FIRMWARE
block|,
name|EFX_NVRAM_MC_GOLDEN
block|,
name|EFX_NVRAM_PHY
block|,
name|EFX_NVRAM_NULLPHY
block|,
name|EFX_NVRAM_FPGA
block|,
name|EFX_NVRAM_FCFW
block|,
name|EFX_NVRAM_CPLD
block|,
name|EFX_NVRAM_FPGA_BACKUP
block|,
name|EFX_NVRAM_NTYPES
block|, }
name|efx_nvram_type_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_nvram_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_DIAG
specifier|extern
name|__checkReturn
name|int
name|efx_nvram_test
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_DIAG */
specifier|extern
name|__checkReturn
name|int
name|efx_nvram_size
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_nvram_type_t
name|type
parameter_list|,
name|__out
name|size_t
modifier|*
name|sizep
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_nvram_rw_start
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_nvram_type_t
name|type
parameter_list|,
name|__out_opt
name|size_t
modifier|*
name|pref_chunkp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_nvram_rw_finish
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_nvram_type_t
name|type
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_nvram_get_version
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in
name|efx_nvram_type_t
name|type
argument_list|,
name|__out
name|uint32_t
operator|*
name|subtypep
argument_list|,
name|__out_ecount
argument_list|(
literal|4
argument_list|)
name|uint16_t
name|version
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_nvram_read_chunk
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in
name|efx_nvram_type_t
name|type
argument_list|,
name|__in
name|unsigned
name|int
name|offset
argument_list|,
name|__out_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_nvram_set_version
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_nvram_type_t
name|type
parameter_list|,
name|__out
name|uint16_t
name|version
index|[
literal|4
index|]
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_nvram_erase
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_nvram_type_t
name|type
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_nvram_write_chunk
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in
name|efx_nvram_type_t
name|type
argument_list|,
name|__in
name|unsigned
name|int
name|offset
argument_list|,
name|__in_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|efx_nvram_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_NVRAM */
if|#
directive|if
name|EFSYS_OPT_BOOTCFG
specifier|extern
name|int
name|efx_bootcfg_read
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__out_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|efx_bootcfg_write
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in_bcount
argument_list|(
argument|size
argument_list|)
name|caddr_t
name|data
argument_list|,
name|__in
name|size_t
name|size
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_BOOTCFG */
if|#
directive|if
name|EFSYS_OPT_WOL
typedef|typedef
enum|enum
name|efx_wol_type_e
block|{
name|EFX_WOL_TYPE_INVALID
block|,
name|EFX_WOL_TYPE_MAGIC
block|,
name|EFX_WOL_TYPE_BITMAP
block|,
name|EFX_WOL_TYPE_LINK
block|,
name|EFX_WOL_NTYPES
block|, }
name|efx_wol_type_t
typedef|;
typedef|typedef
enum|enum
name|efx_lightsout_offload_type_e
block|{
name|EFX_LIGHTSOUT_OFFLOAD_TYPE_INVALID
block|,
name|EFX_LIGHTSOUT_OFFLOAD_TYPE_ARP
block|,
name|EFX_LIGHTSOUT_OFFLOAD_TYPE_NS
block|, }
name|efx_lightsout_offload_type_t
typedef|;
define|#
directive|define
name|EFX_WOL_BITMAP_MASK_SIZE
value|(48)
define|#
directive|define
name|EFX_WOL_BITMAP_VALUE_SIZE
value|(128)
typedef|typedef
union|union
name|efx_wol_param_u
block|{
struct|struct
block|{
name|uint8_t
name|mac_addr
index|[
literal|6
index|]
decl_stmt|;
block|}
name|ewp_magic
struct|;
struct|struct
block|{
name|uint8_t
name|mask
index|[
name|EFX_WOL_BITMAP_MASK_SIZE
index|]
decl_stmt|;
comment|/* 1 bit per byte */
name|uint8_t
name|value
index|[
name|EFX_WOL_BITMAP_VALUE_SIZE
index|]
decl_stmt|;
comment|/* value to match */
name|uint8_t
name|value_len
decl_stmt|;
block|}
name|ewp_bitmap
struct|;
block|}
name|efx_wol_param_t
typedef|;
typedef|typedef
union|union
name|efx_lightsout_offload_param_u
block|{
struct|struct
block|{
name|uint8_t
name|mac_addr
index|[
literal|6
index|]
decl_stmt|;
name|uint32_t
name|ip
decl_stmt|;
block|}
name|elop_arp
struct|;
struct|struct
block|{
name|uint8_t
name|mac_addr
index|[
literal|6
index|]
decl_stmt|;
name|uint32_t
name|solicited_node
index|[
literal|4
index|]
decl_stmt|;
name|uint32_t
name|ip
index|[
literal|4
index|]
decl_stmt|;
block|}
name|elop_ns
struct|;
block|}
name|efx_lightsout_offload_param_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_wol_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_wol_filter_clear
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_wol_filter_add
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_wol_type_t
name|type
parameter_list|,
name|__in
name|efx_wol_param_t
modifier|*
name|paramp
parameter_list|,
name|__out
name|uint32_t
modifier|*
name|filter_idp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_wol_filter_remove
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|uint32_t
name|filter_id
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_lightsout_offload_add
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_lightsout_offload_type_t
name|type
parameter_list|,
name|__in
name|efx_lightsout_offload_param_t
modifier|*
name|paramp
parameter_list|,
name|__out
name|uint32_t
modifier|*
name|filter_idp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_lightsout_offload_remove
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_lightsout_offload_type_t
name|type
parameter_list|,
name|__in
name|uint32_t
name|filter_id
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_wol_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_WOL */
if|#
directive|if
name|EFSYS_OPT_DIAG
typedef|typedef
enum|enum
name|efx_pattern_type_t
block|{
name|EFX_PATTERN_BYTE_INCREMENT
init|=
literal|0
block|,
name|EFX_PATTERN_ALL_THE_SAME
block|,
name|EFX_PATTERN_BIT_ALTERNATE
block|,
name|EFX_PATTERN_BYTE_ALTERNATE
block|,
name|EFX_PATTERN_BYTE_CHANGING
block|,
name|EFX_PATTERN_BIT_SWEEP
block|,
name|EFX_PATTERN_NTYPES
block|}
name|efx_pattern_type_t
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|efx_sram_pattern_fn_t
function_decl|)
parameter_list|(
name|__in
name|size_t
name|row
parameter_list|,
name|__in
name|boolean_t
name|negate
parameter_list|,
name|__out
name|efx_qword_t
modifier|*
name|eqp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_sram_test
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_pattern_type_t
name|type
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_DIAG */
specifier|extern
name|__checkReturn
name|int
name|efx_sram_buf_tbl_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|uint32_t
name|id
parameter_list|,
name|__in
name|efsys_mem_t
modifier|*
name|esmp
parameter_list|,
name|__in
name|size_t
name|n
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_sram_buf_tbl_clear
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|uint32_t
name|id
parameter_list|,
name|__in
name|size_t
name|n
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_BUF_TBL_SIZE
value|0x20000
define|#
directive|define
name|EFX_BUF_SIZE
value|4096
comment|/* EV */
typedef|typedef
name|struct
name|efx_evq_s
name|efx_evq_t
typedef|;
if|#
directive|if
name|EFSYS_OPT_QSTATS
comment|/* START MKCONFIG GENERATED EfxHeaderEventQueueBlock d5614a5d669c8ca3 */
typedef|typedef
enum|enum
name|efx_ev_qstat_e
block|{
name|EV_ALL
block|,
name|EV_RX
block|,
name|EV_RX_OK
block|,
name|EV_RX_RECOVERY
block|,
name|EV_RX_FRM_TRUNC
block|,
name|EV_RX_TOBE_DISC
block|,
name|EV_RX_PAUSE_FRM_ERR
block|,
name|EV_RX_BUF_OWNER_ID_ERR
block|,
name|EV_RX_IPV4_HDR_CHKSUM_ERR
block|,
name|EV_RX_TCP_UDP_CHKSUM_ERR
block|,
name|EV_RX_ETH_CRC_ERR
block|,
name|EV_RX_IP_FRAG_ERR
block|,
name|EV_RX_MCAST_PKT
block|,
name|EV_RX_MCAST_HASH_MATCH
block|,
name|EV_RX_TCP_IPV4
block|,
name|EV_RX_TCP_IPV6
block|,
name|EV_RX_UDP_IPV4
block|,
name|EV_RX_UDP_IPV6
block|,
name|EV_RX_OTHER_IPV4
block|,
name|EV_RX_OTHER_IPV6
block|,
name|EV_RX_NON_IP
block|,
name|EV_RX_OVERRUN
block|,
name|EV_TX
block|,
name|EV_TX_WQ_FF_FULL
block|,
name|EV_TX_PKT_ERR
block|,
name|EV_TX_PKT_TOO_BIG
block|,
name|EV_TX_UNEXPECTED
block|,
name|EV_GLOBAL
block|,
name|EV_GLOBAL_PHY
block|,
name|EV_GLOBAL_MNT
block|,
name|EV_GLOBAL_RX_RECOVERY
block|,
name|EV_DRIVER
block|,
name|EV_DRIVER_SRM_UPD_DONE
block|,
name|EV_DRIVER_TX_DESCQ_FLS_DONE
block|,
name|EV_DRIVER_RX_DESCQ_FLS_DONE
block|,
name|EV_DRIVER_RX_DESCQ_FLS_FAILED
block|,
name|EV_DRIVER_RX_DSC_ERROR
block|,
name|EV_DRIVER_TX_DSC_ERROR
block|,
name|EV_DRV_GEN
block|,
name|EV_MCDI_RESPONSE
block|,
name|EV_NQSTATS
block|}
name|efx_ev_qstat_t
typedef|;
comment|/* END MKCONFIG GENERATED EfxHeaderEventQueueBlock */
endif|#
directive|endif
comment|/* EFSYS_OPT_QSTATS */
specifier|extern
name|__checkReturn
name|int
name|efx_ev_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_ev_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_MASK
parameter_list|(
name|_max
parameter_list|,
name|_min
parameter_list|)
value|(-((_max)<< 1) ^ -(_min))
define|#
directive|define
name|EFX_EVQ_MAXNEVS
value|32768
define|#
directive|define
name|EFX_EVQ_MINNEVS
value|512
define|#
directive|define
name|EFX_EVQ_NEVS_MASK
value|EFX_MASK(EFX_EVQ_MAXNEVS, EFX_EVQ_MINNEVS)
define|#
directive|define
name|EFX_EVQ_SIZE
parameter_list|(
name|_nevs
parameter_list|)
value|((_nevs) * sizeof (efx_qword_t))
define|#
directive|define
name|EFX_EVQ_NBUFS
parameter_list|(
name|_nevs
parameter_list|)
value|(EFX_EVQ_SIZE(_nevs) / EFX_BUF_SIZE)
specifier|extern
name|__checkReturn
name|int
name|efx_ev_qcreate
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|index
parameter_list|,
name|__in
name|efsys_mem_t
modifier|*
name|esmp
parameter_list|,
name|__in
name|size_t
name|n
parameter_list|,
name|__in
name|uint32_t
name|id
parameter_list|,
name|__deref_out
name|efx_evq_t
modifier|*
modifier|*
name|eepp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_ev_qpost
parameter_list|(
name|__in
name|efx_evq_t
modifier|*
name|eep
parameter_list|,
name|__in
name|uint16_t
name|data
parameter_list|)
function_decl|;
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_initialized_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_PKT_UNICAST
value|0x0004
define|#
directive|define
name|EFX_PKT_START
value|0x0008
define|#
directive|define
name|EFX_PKT_VLAN_TAGGED
value|0x0010
define|#
directive|define
name|EFX_CKSUM_TCPUDP
value|0x0020
define|#
directive|define
name|EFX_CKSUM_IPV4
value|0x0040
define|#
directive|define
name|EFX_PKT_CONT
value|0x0080
define|#
directive|define
name|EFX_CHECK_VLAN
value|0x0100
define|#
directive|define
name|EFX_PKT_TCP
value|0x0200
define|#
directive|define
name|EFX_PKT_UDP
value|0x0400
define|#
directive|define
name|EFX_PKT_IPV4
value|0x0800
define|#
directive|define
name|EFX_PKT_IPV6
value|0x1000
define|#
directive|define
name|EFX_ADDR_MISMATCH
value|0x4000
define|#
directive|define
name|EFX_DISCARD
value|0x8000
define|#
directive|define
name|EFX_EV_RX_NLABELS
value|32
define|#
directive|define
name|EFX_EV_TX_NLABELS
value|32
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_rx_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|label
parameter_list|,
name|__in
name|uint32_t
name|id
parameter_list|,
name|__in
name|uint32_t
name|size
parameter_list|,
name|__in
name|uint16_t
name|flags
parameter_list|)
function_decl|;
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_tx_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|label
parameter_list|,
name|__in
name|uint32_t
name|id
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_EXCEPTION_RX_RECOVERY
value|0x00000001
define|#
directive|define
name|EFX_EXCEPTION_RX_DSC_ERROR
value|0x00000002
define|#
directive|define
name|EFX_EXCEPTION_TX_DSC_ERROR
value|0x00000003
define|#
directive|define
name|EFX_EXCEPTION_UNKNOWN_SENSOREVT
value|0x00000004
define|#
directive|define
name|EFX_EXCEPTION_FWALERT_SRAM
value|0x00000005
define|#
directive|define
name|EFX_EXCEPTION_UNKNOWN_FWALERT
value|0x00000006
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_exception_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|label
parameter_list|,
name|__in
name|uint32_t
name|data
parameter_list|)
function_decl|;
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_rxq_flush_done_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|rxq_index
parameter_list|)
function_decl|;
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_rxq_flush_failed_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|rxq_index
parameter_list|)
function_decl|;
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_txq_flush_done_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|txq_index
parameter_list|)
function_decl|;
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_software_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint16_t
name|magic
parameter_list|)
function_decl|;
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_sram_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|code
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_SRAM_CLEAR
value|0
define|#
directive|define
name|EFX_SRAM_UPDATE
value|1
define|#
directive|define
name|EFX_SRAM_ILLEGAL_CLEAR
value|2
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_wake_up_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|label
parameter_list|)
function_decl|;
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_timer_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|label
parameter_list|)
function_decl|;
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_link_change_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|efx_link_mode_t
name|link_mode
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_MON_STATS
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_monitor_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|efx_mon_stat_t
name|id
parameter_list|,
name|__in
name|efx_mon_stat_value_t
name|value
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_MON_STATS */
if|#
directive|if
name|EFSYS_OPT_MAC_STATS
typedef|typedef
name|__checkReturn
name|boolean_t
function_decl|(
modifier|*
name|efx_mac_stats_ev_t
function_decl|)
parameter_list|(
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|,
name|__in
name|uint32_t
name|generation
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_MAC_STATS */
typedef|typedef
struct|struct
name|efx_ev_callbacks_s
block|{
name|efx_initialized_ev_t
name|eec_initialized
decl_stmt|;
name|efx_rx_ev_t
name|eec_rx
decl_stmt|;
name|efx_tx_ev_t
name|eec_tx
decl_stmt|;
name|efx_exception_ev_t
name|eec_exception
decl_stmt|;
name|efx_rxq_flush_done_ev_t
name|eec_rxq_flush_done
decl_stmt|;
name|efx_rxq_flush_failed_ev_t
name|eec_rxq_flush_failed
decl_stmt|;
name|efx_txq_flush_done_ev_t
name|eec_txq_flush_done
decl_stmt|;
name|efx_software_ev_t
name|eec_software
decl_stmt|;
name|efx_sram_ev_t
name|eec_sram
decl_stmt|;
name|efx_wake_up_ev_t
name|eec_wake_up
decl_stmt|;
name|efx_timer_ev_t
name|eec_timer
decl_stmt|;
name|efx_link_change_ev_t
name|eec_link_change
decl_stmt|;
if|#
directive|if
name|EFSYS_OPT_MON_STATS
name|efx_monitor_ev_t
name|eec_monitor
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_MON_STATS */
if|#
directive|if
name|EFSYS_OPT_MAC_STATS
name|efx_mac_stats_ev_t
name|eec_mac_stats
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_MON_STATS */
block|}
name|efx_ev_callbacks_t
typedef|;
specifier|extern
name|__checkReturn
name|boolean_t
name|efx_ev_qpending
parameter_list|(
name|__in
name|efx_evq_t
modifier|*
name|eep
parameter_list|,
name|__in
name|unsigned
name|int
name|count
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_EV_PREFETCH
specifier|extern
name|void
name|efx_ev_qprefetch
parameter_list|(
name|__in
name|efx_evq_t
modifier|*
name|eep
parameter_list|,
name|__in
name|unsigned
name|int
name|count
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_EV_PREFETCH */
specifier|extern
name|void
name|efx_ev_qpoll
parameter_list|(
name|__in
name|efx_evq_t
modifier|*
name|eep
parameter_list|,
name|__inout
name|unsigned
name|int
modifier|*
name|countp
parameter_list|,
name|__in
specifier|const
name|efx_ev_callbacks_t
modifier|*
name|eecp
parameter_list|,
name|__in_opt
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_ev_qmoderate
parameter_list|(
name|__in
name|efx_evq_t
modifier|*
name|eep
parameter_list|,
name|__in
name|unsigned
name|int
name|us
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_ev_qprime
parameter_list|(
name|__in
name|efx_evq_t
modifier|*
name|eep
parameter_list|,
name|__in
name|unsigned
name|int
name|count
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_QSTATS
if|#
directive|if
name|EFSYS_OPT_NAMES
specifier|extern
specifier|const
name|char
name|__cs
modifier|*
name|efx_ev_qstat_name
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|id
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_NAMES */
specifier|extern
name|void
name|efx_ev_qstats_update
argument_list|(
name|__in
name|efx_evq_t
operator|*
name|eep
argument_list|,
name|__inout_ecount
argument_list|(
argument|EV_NQSTATS
argument_list|)
name|efsys_stat_t
operator|*
name|stat
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_QSTATS */
specifier|extern
name|void
name|efx_ev_qdestroy
parameter_list|(
name|__in
name|efx_evq_t
modifier|*
name|eep
parameter_list|)
function_decl|;
comment|/* RX */
typedef|typedef
name|struct
name|efx_rxq_s
name|efx_rxq_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_rx_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_rx_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_RX_HDR_SPLIT
name|__checkReturn
name|int
name|efx_rx_hdr_split_enable
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|hdr_buf_size
parameter_list|,
name|__in
name|unsigned
name|int
name|pld_buf_size
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_RX_HDR_SPLIT */
if|#
directive|if
name|EFSYS_OPT_RX_SCATTER
name|__checkReturn
name|int
name|efx_rx_scatter_enable
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|buf_size
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_RX_SCATTER */
if|#
directive|if
name|EFSYS_OPT_RX_SCALE
typedef|typedef
enum|enum
name|efx_rx_hash_alg_e
block|{
name|EFX_RX_HASHALG_LFSR
init|=
literal|0
block|,
name|EFX_RX_HASHALG_TOEPLITZ
block|}
name|efx_rx_hash_alg_t
typedef|;
typedef|typedef
enum|enum
name|efx_rx_hash_type_e
block|{
name|EFX_RX_HASH_IPV4
init|=
literal|0
block|,
name|EFX_RX_HASH_TCPIPV4
block|,
name|EFX_RX_HASH_IPV6
block|,
name|EFX_RX_HASH_TCPIPV6
block|, }
name|efx_rx_hash_type_t
typedef|;
define|#
directive|define
name|EFX_RSS_TBL_SIZE
value|128
comment|/* Rows in RX indirection table */
define|#
directive|define
name|EFX_MAXRSS
value|64
comment|/* RX indirection entry range */
define|#
directive|define
name|EFX_MAXRSS_LEGACY
value|16
comment|/* See bug16611 and bug17213 */
specifier|extern
name|__checkReturn
name|int
name|efx_rx_scale_mode_set
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|efx_rx_hash_alg_t
name|alg
parameter_list|,
name|__in
name|efx_rx_hash_type_t
name|type
parameter_list|,
name|__in
name|boolean_t
name|insert
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_rx_scale_tbl_set
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in_ecount
argument_list|(
argument|n
argument_list|)
name|unsigned
name|int
operator|*
name|table
argument_list|,
name|__in
name|size_t
name|n
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_rx_scale_toeplitz_ipv4_key_set
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in_ecount
argument_list|(
argument|n
argument_list|)
name|uint8_t
operator|*
name|key
argument_list|,
name|__in
name|size_t
name|n
argument_list|)
decl_stmt|;
specifier|extern
name|__checkReturn
name|int
name|efx_rx_scale_toeplitz_ipv6_key_set
argument_list|(
name|__in
name|efx_nic_t
operator|*
name|enp
argument_list|,
name|__in_ecount
argument_list|(
argument|n
argument_list|)
name|uint8_t
operator|*
name|key
argument_list|,
name|__in
name|size_t
name|n
argument_list|)
decl_stmt|;
comment|/*  * The prefix is a byte array of one of the forms:  *  *  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15  * XX.XX.XX.XX.XX.XX.XX.XX.XX.XX.XX.XX.TT.TT.TT.TT  * XX.XX.XX.XX.XX.XX.XX.XX.XX.XX.XX.XX.XX.XX.LL.LL  *  * where:  *  * TT.TT.TT.TT is a 32-bit Toeplitz hash  * LL.LL is a 16-bit LFSR hash  *  * Hash values are in network (big-endian) byte order.  */
define|#
directive|define
name|EFX_RX_PREFIX_SIZE
value|16
define|#
directive|define
name|EFX_RX_HASH_VALUE
parameter_list|(
name|_func
parameter_list|,
name|_buffer
parameter_list|)
define|\
value|(((_func) == EFX_RX_HASHALG_LFSR) ?				\ 		((uint16_t)(((_buffer)[14]<< 8) | (_buffer)[15])) :	\ 		((uint32_t)(((_buffer)[12]<< 24) |			\ 		    ((_buffer)[13]<< 16) |				\ 		    ((_buffer)[14]<< 8) |				\ 		    (_buffer)[15])))
define|#
directive|define
name|EFX_RX_HASH_SIZE
parameter_list|(
name|_func
parameter_list|)
define|\
value|(((_func) == EFX_RX_HASHALG_LFSR) ?				\ 		sizeof (uint16_t) : 					\ 		sizeof (uint32_t))
endif|#
directive|endif
comment|/* EFSYS_OPT_RX_SCALE */
define|#
directive|define
name|EFX_RXQ_MAXNDESCS
value|4096
define|#
directive|define
name|EFX_RXQ_MINNDESCS
value|512
define|#
directive|define
name|EFX_RXQ_NDESCS_MASK
value|EFX_MASK(EFX_RXQ_MAXNDESCS, EFX_RXQ_MINNDESCS)
define|#
directive|define
name|EFX_RXQ_SIZE
parameter_list|(
name|_ndescs
parameter_list|)
value|((_ndescs) * sizeof (efx_qword_t))
define|#
directive|define
name|EFX_RXQ_NBUFS
parameter_list|(
name|_ndescs
parameter_list|)
value|(EFX_RXQ_SIZE(_ndescs) / EFX_BUF_SIZE)
define|#
directive|define
name|EFX_RXQ_LIMIT
parameter_list|(
name|_ndescs
parameter_list|)
value|((_ndescs) - 16)
define|#
directive|define
name|EFX_RXQ_DC_NDESCS
parameter_list|(
name|_dcsize
parameter_list|)
value|(8<< _dcsize)
typedef|typedef
enum|enum
name|efx_rxq_type_e
block|{
name|EFX_RXQ_TYPE_DEFAULT
block|,
name|EFX_RXQ_TYPE_SPLIT_HEADER
block|,
name|EFX_RXQ_TYPE_SPLIT_PAYLOAD
block|,
name|EFX_RXQ_TYPE_SCATTER
block|,
name|EFX_RXQ_NTYPES
block|}
name|efx_rxq_type_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_rx_qcreate
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|index
parameter_list|,
name|__in
name|unsigned
name|int
name|label
parameter_list|,
name|__in
name|efx_rxq_type_t
name|type
parameter_list|,
name|__in
name|efsys_mem_t
modifier|*
name|esmp
parameter_list|,
name|__in
name|size_t
name|n
parameter_list|,
name|__in
name|uint32_t
name|id
parameter_list|,
name|__in
name|efx_evq_t
modifier|*
name|eep
parameter_list|,
name|__deref_out
name|efx_rxq_t
modifier|*
modifier|*
name|erpp
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|efx_buffer_s
block|{
name|efsys_dma_addr_t
name|eb_addr
decl_stmt|;
name|size_t
name|eb_size
decl_stmt|;
name|boolean_t
name|eb_eop
decl_stmt|;
block|}
name|efx_buffer_t
typedef|;
specifier|extern
name|void
name|efx_rx_qpost
argument_list|(
name|__in
name|efx_rxq_t
operator|*
name|erp
argument_list|,
name|__in_ecount
argument_list|(
argument|n
argument_list|)
name|efsys_dma_addr_t
operator|*
name|addrp
argument_list|,
name|__in
name|size_t
name|size
argument_list|,
name|__in
name|unsigned
name|int
name|n
argument_list|,
name|__in
name|unsigned
name|int
name|completed
argument_list|,
name|__in
name|unsigned
name|int
name|added
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|efx_rx_qpush
parameter_list|(
name|__in
name|efx_rxq_t
modifier|*
name|erp
parameter_list|,
name|__in
name|unsigned
name|int
name|added
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_rx_qflush
parameter_list|(
name|__in
name|efx_rxq_t
modifier|*
name|erp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_rx_qenable
parameter_list|(
name|__in
name|efx_rxq_t
modifier|*
name|erp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_rx_qdestroy
parameter_list|(
name|__in
name|efx_rxq_t
modifier|*
name|erp
parameter_list|)
function_decl|;
comment|/* TX */
typedef|typedef
name|struct
name|efx_txq_s
name|efx_txq_t
typedef|;
if|#
directive|if
name|EFSYS_OPT_QSTATS
comment|/* START MKCONFIG GENERATED EfxHeaderTransmitQueueBlock 536c5fa5014944bf */
typedef|typedef
enum|enum
name|efx_tx_qstat_e
block|{
name|TX_POST
block|,
name|TX_UNALIGNED_SPLIT
block|,
name|TX_NQSTATS
block|}
name|efx_tx_qstat_t
typedef|;
comment|/* END MKCONFIG GENERATED EfxHeaderTransmitQueueBlock */
endif|#
directive|endif
comment|/* EFSYS_OPT_QSTATS */
specifier|extern
name|__checkReturn
name|int
name|efx_tx_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_tx_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
define|#
directive|define
name|EFX_TXQ_MAXNDESCS
value|4096
define|#
directive|define
name|EFX_TXQ_MINNDESCS
value|512
define|#
directive|define
name|EFX_TXQ_NDESCS_MASK
value|EFX_MASK(EFX_TXQ_MAXNDESCS, EFX_TXQ_MINNDESCS)
define|#
directive|define
name|EFX_TXQ_SIZE
parameter_list|(
name|_ndescs
parameter_list|)
value|((_ndescs) * sizeof (efx_qword_t))
define|#
directive|define
name|EFX_TXQ_NBUFS
parameter_list|(
name|_ndescs
parameter_list|)
value|(EFX_TXQ_SIZE(_ndescs) / EFX_BUF_SIZE)
define|#
directive|define
name|EFX_TXQ_LIMIT
parameter_list|(
name|_ndescs
parameter_list|)
value|((_ndescs) - 16)
define|#
directive|define
name|EFX_TXQ_DC_NDESCS
parameter_list|(
name|_dcsize
parameter_list|)
value|(8<< _dcsize)
specifier|extern
name|__checkReturn
name|int
name|efx_tx_qcreate
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|,
name|__in
name|unsigned
name|int
name|index
parameter_list|,
name|__in
name|unsigned
name|int
name|label
parameter_list|,
name|__in
name|efsys_mem_t
modifier|*
name|esmp
parameter_list|,
name|__in
name|size_t
name|n
parameter_list|,
name|__in
name|uint32_t
name|id
parameter_list|,
name|__in
name|uint16_t
name|flags
parameter_list|,
name|__in
name|efx_evq_t
modifier|*
name|eep
parameter_list|,
name|__deref_out
name|efx_txq_t
modifier|*
modifier|*
name|etpp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_tx_qpost
argument_list|(
name|__in
name|efx_txq_t
operator|*
name|etp
argument_list|,
name|__in_ecount
argument_list|(
argument|n
argument_list|)
name|efx_buffer_t
operator|*
name|eb
argument_list|,
name|__in
name|unsigned
name|int
name|n
argument_list|,
name|__in
name|unsigned
name|int
name|completed
argument_list|,
name|__inout
name|unsigned
name|int
operator|*
name|addedp
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|efx_tx_qpush
parameter_list|(
name|__in
name|efx_txq_t
modifier|*
name|etp
parameter_list|,
name|__in
name|unsigned
name|int
name|added
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_tx_qflush
parameter_list|(
name|__in
name|efx_txq_t
modifier|*
name|etp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_tx_qenable
parameter_list|(
name|__in
name|efx_txq_t
modifier|*
name|etp
parameter_list|)
function_decl|;
if|#
directive|if
name|EFSYS_OPT_QSTATS
if|#
directive|if
name|EFSYS_OPT_NAMES
specifier|extern
specifier|const
name|char
name|__cs
modifier|*
name|efx_tx_qstat_name
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|etp
parameter_list|,
name|__in
name|unsigned
name|int
name|id
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_NAMES */
specifier|extern
name|void
name|efx_tx_qstats_update
argument_list|(
name|__in
name|efx_txq_t
operator|*
name|etp
argument_list|,
name|__inout_ecount
argument_list|(
argument|TX_NQSTATS
argument_list|)
name|efsys_stat_t
operator|*
name|stat
argument_list|)
decl_stmt|;
endif|#
directive|endif
comment|/* EFSYS_OPT_QSTATS */
specifier|extern
name|void
name|efx_tx_qdestroy
parameter_list|(
name|__in
name|efx_txq_t
modifier|*
name|etp
parameter_list|)
function_decl|;
comment|/* FILTER */
if|#
directive|if
name|EFSYS_OPT_FILTER
typedef|typedef
enum|enum
name|efx_filter_flag_e
block|{
name|EFX_FILTER_FLAG_RX_RSS
init|=
literal|0x01
block|,
comment|/* use RSS to spread across 						 * multiple queues */
name|EFX_FILTER_FLAG_RX_SCATTER
init|=
literal|0x02
block|,
comment|/* enable RX scatter */
name|EFX_FILTER_FLAG_RX_OVERRIDE_IP
init|=
literal|0x04
block|,
comment|/* MAC filter overrides 						 * any matching IP filter */
block|}
name|efx_filter_flag_t
typedef|;
typedef|typedef
struct|struct
name|efx_filter_spec_s
block|{
name|uint8_t
name|efs_type
decl_stmt|;
name|uint8_t
name|efs_flags
decl_stmt|;
name|uint16_t
name|efs_dmaq_id
decl_stmt|;
name|uint32_t
name|efs_dword
index|[
literal|3
index|]
decl_stmt|;
block|}
name|efx_filter_spec_t
typedef|;
specifier|extern
name|__checkReturn
name|int
name|efx_filter_init
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_fini
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_rx_filter_insert
parameter_list|(
name|__in
name|efx_rxq_t
modifier|*
name|erp
parameter_list|,
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_rx_filter_remove
parameter_list|(
name|__in
name|efx_rxq_t
modifier|*
name|erp
parameter_list|,
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|)
function_decl|;
name|void
name|efx_filter_restore
parameter_list|(
name|__in
name|efx_nic_t
modifier|*
name|enp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_rx_ipv4_tcp_full
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|unsigned
name|int
name|flags
parameter_list|,
name|__in
name|uint32_t
name|src_ip
parameter_list|,
name|__in
name|uint16_t
name|src_tcp
parameter_list|,
name|__in
name|uint32_t
name|dest_ip
parameter_list|,
name|__in
name|uint16_t
name|dest_tcp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_rx_ipv4_tcp_wild
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|unsigned
name|int
name|flags
parameter_list|,
name|__in
name|uint32_t
name|dest_ip
parameter_list|,
name|__in
name|uint16_t
name|dest_tcp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_rx_ipv4_udp_full
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|unsigned
name|int
name|flags
parameter_list|,
name|__in
name|uint32_t
name|src_ip
parameter_list|,
name|__in
name|uint16_t
name|src_udp
parameter_list|,
name|__in
name|uint32_t
name|dest_ip
parameter_list|,
name|__in
name|uint16_t
name|dest_udp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_rx_ipv4_udp_wild
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|unsigned
name|int
name|flags
parameter_list|,
name|__in
name|uint32_t
name|dest_ip
parameter_list|,
name|__in
name|uint16_t
name|dest_udp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_rx_mac_full
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|unsigned
name|int
name|flags
parameter_list|,
name|__in
name|uint16_t
name|vlan_id
parameter_list|,
name|__in
name|uint8_t
modifier|*
name|dest_mac
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_rx_mac_wild
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|unsigned
name|int
name|flags
parameter_list|,
name|__in
name|uint8_t
modifier|*
name|dest_mac
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_tx_filter_insert
parameter_list|(
name|__in
name|efx_txq_t
modifier|*
name|etp
parameter_list|,
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|)
function_decl|;
specifier|extern
name|__checkReturn
name|int
name|efx_tx_filter_remove
parameter_list|(
name|__in
name|efx_txq_t
modifier|*
name|etp
parameter_list|,
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_tx_ipv4_tcp_full
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|uint32_t
name|src_ip
parameter_list|,
name|__in
name|uint16_t
name|src_tcp
parameter_list|,
name|__in
name|uint32_t
name|dest_ip
parameter_list|,
name|__in
name|uint16_t
name|dest_tcp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_tx_ipv4_tcp_wild
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|uint32_t
name|src_ip
parameter_list|,
name|__in
name|uint16_t
name|src_tcp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_tx_ipv4_udp_full
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|uint32_t
name|src_ip
parameter_list|,
name|__in
name|uint16_t
name|src_udp
parameter_list|,
name|__in
name|uint32_t
name|dest_ip
parameter_list|,
name|__in
name|uint16_t
name|dest_udp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_tx_ipv4_udp_wild
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|uint32_t
name|src_ip
parameter_list|,
name|__in
name|uint16_t
name|src_udp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_tx_mac_full
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|uint16_t
name|vlan_id
parameter_list|,
name|__in
name|uint8_t
modifier|*
name|src_mac
parameter_list|)
function_decl|;
specifier|extern
name|void
name|efx_filter_spec_tx_mac_wild
parameter_list|(
name|__inout
name|efx_filter_spec_t
modifier|*
name|spec
parameter_list|,
name|__in
name|uint8_t
modifier|*
name|src_mac
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* EFSYS_OPT_FILTER */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_EFX_H */
end_comment

end_unit

