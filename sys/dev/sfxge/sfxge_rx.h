begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010-2016 Solarflare Communications Inc.  * All rights reserved.  *  * This software was developed in part by Philip Paeps under contract for  * Solarflare Communications, Inc.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright notice,  *    this list of conditions and the following disclaimer in the documentation  *    and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * The views and conclusions contained in the software and documentation are  * those of the authors and should not be interpreted as representing official  * policies, either expressed or implied, of the FreeBSD Project.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SFXGE_RX_H
end_ifndef

begin_define
define|#
directive|define
name|_SFXGE_RX_H
end_define

begin_include
include|#
directive|include
file|"opt_inet.h"
end_include

begin_include
include|#
directive|include
file|"opt_inet6.h"
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|INET
argument_list|)
operator|||
name|defined
argument_list|(
name|INET6
argument_list|)
end_if

begin_define
define|#
directive|define
name|SFXGE_LRO
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|SFXGE_RX_SCALE_MAX
value|EFX_MAXRSS
end_define

begin_struct
struct|struct
name|sfxge_rx_sw_desc
block|{
name|struct
name|mbuf
modifier|*
name|mbuf
decl_stmt|;
name|bus_dmamap_t
name|map
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|SFXGE_LRO
end_ifdef

begin_comment
comment|/**  * struct sfxge_lro_conn - Connection state for software LRO  * @link: Link for hash table and free list.  * @active_link: Link for active_conns list  * @l2_id: Identifying information from layer 2  * @conn_hash: Hash of connection 4-tuple  * @nh: IP (v4 or v6) header of super-packet  * @source: Source TCP port number  * @dest: Destination TCP port number  * @n_in_order_pkts: Number of in-order packets with payload.  * @next_seq: Next in-order sequence number.  * @last_pkt_ticks: Time we last saw a packet on this connection.  * @mbuf: The mbuf we are currently holding.  *	If %NULL, then all following fields are undefined.  * @mbuf_tail: The tail of the frag_list of mbufs we're holding.  *	Only valid after at least one merge.  * @th_last: The TCP header of the last packet merged.  * @next_buf: The next RX buffer to process.  * @next_eh: Ethernet header of the next buffer.  * @next_nh: IP header of the next buffer.  * @delivered: True if we've delivered a payload packet up this interrupt.  */
end_comment

begin_struct
struct|struct
name|sfxge_lro_conn
block|{
name|TAILQ_ENTRY
argument_list|(
argument|sfxge_lro_conn
argument_list|)
name|link
expr_stmt|;
name|LIST_ENTRY
argument_list|(
argument|sfxge_lro_conn
argument_list|)
name|active_link
expr_stmt|;
name|uint16_t
name|l2_id
decl_stmt|;
name|uint32_t
name|conn_hash
decl_stmt|;
name|void
modifier|*
name|nh
decl_stmt|;
name|uint16_t
name|source
decl_stmt|,
name|dest
decl_stmt|;
name|int
name|n_in_order_pkts
decl_stmt|;
name|unsigned
name|next_seq
decl_stmt|;
name|unsigned
name|last_pkt_ticks
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mbuf
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mbuf_tail
decl_stmt|;
name|struct
name|tcphdr
modifier|*
name|th_last
decl_stmt|;
name|struct
name|sfxge_rx_sw_desc
name|next_buf
decl_stmt|;
name|void
modifier|*
name|next_eh
decl_stmt|;
name|void
modifier|*
name|next_nh
decl_stmt|;
name|int
name|delivered
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct sfxge_lro_state - Port state for software LRO  * @sc: The associated NIC.  * @conns_mask: Number of hash buckets - 1.  * @conns: Hash buckets for tracked connections.  * @conns_n: Length of linked list for each hash bucket.  * @active_conns: Connections that are holding a packet.  *	Connections are self-linked when not in this list.  * @free_conns: Free sfxge_lro_conn instances.  * @last_purge_ticks: The value of ticks last time we purged idle  *	connections.  * @n_merges: Number of packets absorbed by LRO.  * @n_bursts: Number of bursts spotted by LRO.  * @n_slow_start: Number of packets not merged because connection may be in  *	slow-start.  * @n_misorder: Number of out-of-order packets seen in tracked streams.  * @n_too_many: Incremented when we're trying to track too many streams.  * @n_new_stream: Number of distinct streams we've tracked.  * @n_drop_idle: Number of streams discarded because they went idle.  * @n_drop_closed: Number of streams that have seen a FIN or RST.  */
end_comment

begin_struct
struct|struct
name|sfxge_lro_state
block|{
name|struct
name|sfxge_softc
modifier|*
name|sc
decl_stmt|;
name|unsigned
name|conns_mask
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
name|sfxge_lro_tailq
argument_list|,
name|sfxge_lro_conn
argument_list|)
operator|*
name|conns
expr_stmt|;
name|unsigned
modifier|*
name|conns_n
decl_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|sfxge_lro_conn
argument_list|)
name|active_conns
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|sfxge_lro_conn
argument_list|)
name|free_conns
expr_stmt|;
name|unsigned
name|last_purge_ticks
decl_stmt|;
name|unsigned
name|n_merges
decl_stmt|;
name|unsigned
name|n_bursts
decl_stmt|;
name|unsigned
name|n_slow_start
decl_stmt|;
name|unsigned
name|n_misorder
decl_stmt|;
name|unsigned
name|n_too_many
decl_stmt|;
name|unsigned
name|n_new_stream
decl_stmt|;
name|unsigned
name|n_drop_idle
decl_stmt|;
name|unsigned
name|n_drop_closed
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SFXGE_LRO */
end_comment

begin_enum
enum|enum
name|sfxge_flush_state
block|{
name|SFXGE_FLUSH_DONE
init|=
literal|0
block|,
name|SFXGE_FLUSH_REQUIRED
block|,
name|SFXGE_FLUSH_PENDING
block|,
name|SFXGE_FLUSH_FAILED
block|}
enum|;
end_enum

begin_enum
enum|enum
name|sfxge_rxq_state
block|{
name|SFXGE_RXQ_UNINITIALIZED
init|=
literal|0
block|,
name|SFXGE_RXQ_INITIALIZED
block|,
name|SFXGE_RXQ_STARTED
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|SFXGE_RX_BATCH
value|128
end_define

begin_struct
struct|struct
name|sfxge_rxq
block|{
name|struct
name|sfxge_softc
modifier|*
name|sc
name|__aligned
parameter_list|(
name|CACHE_LINE_SIZE
parameter_list|)
function_decl|;
name|unsigned
name|int
name|index
decl_stmt|;
name|efsys_mem_t
name|mem
decl_stmt|;
name|enum
name|sfxge_rxq_state
name|init_state
decl_stmt|;
name|unsigned
name|int
name|entries
decl_stmt|;
name|unsigned
name|int
name|ptr_mask
decl_stmt|;
name|efx_rxq_t
modifier|*
name|common
decl_stmt|;
name|struct
name|sfxge_rx_sw_desc
modifier|*
name|queue
name|__aligned
parameter_list|(
name|CACHE_LINE_SIZE
parameter_list|)
function_decl|;
name|unsigned
name|int
name|added
decl_stmt|;
name|unsigned
name|int
name|pushed
decl_stmt|;
name|unsigned
name|int
name|pending
decl_stmt|;
name|unsigned
name|int
name|completed
decl_stmt|;
name|unsigned
name|int
name|loopback
decl_stmt|;
ifdef|#
directive|ifdef
name|SFXGE_LRO
name|struct
name|sfxge_lro_state
name|lro
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|int
name|refill_threshold
decl_stmt|;
name|struct
name|callout
name|refill_callout
decl_stmt|;
name|unsigned
name|int
name|refill_delay
decl_stmt|;
specifier|volatile
name|enum
name|sfxge_flush_state
name|flush_state
name|__aligned
parameter_list|(
name|CACHE_LINE_SIZE
parameter_list|)
function_decl|;
name|unsigned
name|int
name|buf_base_id
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * From sfxge_rx.c.  */
end_comment

begin_function_decl
specifier|extern
name|int
name|sfxge_rx_init
parameter_list|(
name|struct
name|sfxge_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|sfxge_rx_fini
parameter_list|(
name|struct
name|sfxge_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|sfxge_rx_start
parameter_list|(
name|struct
name|sfxge_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|sfxge_rx_stop
parameter_list|(
name|struct
name|sfxge_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|sfxge_rx_qcomplete
parameter_list|(
name|struct
name|sfxge_rxq
modifier|*
name|rxq
parameter_list|,
name|boolean_t
name|eop
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|sfxge_rx_qrefill
parameter_list|(
name|struct
name|sfxge_rxq
modifier|*
name|rxq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|sfxge_rx_qflush_done
parameter_list|(
name|struct
name|sfxge_rxq
modifier|*
name|rxq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|sfxge_rx_qflush_failed
parameter_list|(
name|struct
name|sfxge_rxq
modifier|*
name|rxq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|sfxge_rx_scale_update
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|npending
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

