begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: i82365var.h,v 1.7 1999/01/21 07:43:33 msaitoh Exp $	*/
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*  * Copyright (c) 1997 Marc Horowitz.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by Marc Horowitz.  * 4. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_include
include|#
directive|include
file|<dev/pccard/pccardreg.h>
end_include

begin_include
include|#
directive|include
file|<dev/pccard/pccardchip.h>
end_include

begin_include
include|#
directive|include
file|<dev/pcic/i82365reg.h>
end_include

begin_struct_decl
struct_decl|struct
name|proc
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|pcic_event
block|{
name|SIMPLEQ_ENTRY
argument_list|(
argument|pcic_event
argument_list|)
name|pe_q
expr_stmt|;
name|int
name|pe_type
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* pe_type */
end_comment

begin_define
define|#
directive|define
name|PCIC_EVENT_INSERTION
value|0
end_define

begin_define
define|#
directive|define
name|PCIC_EVENT_REMOVAL
value|1
end_define

begin_struct
struct|struct
name|pcic_handle
block|{
name|struct
name|pcic_softc
modifier|*
name|sc
decl_stmt|;
name|int
name|vendor
decl_stmt|;
name|int
name|sock
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|laststate
decl_stmt|;
name|int
name|memalloc
decl_stmt|;
struct|struct
block|{
name|bus_addr_t
name|addr
decl_stmt|;
name|bus_size_t
name|size
decl_stmt|;
name|long
name|offset
decl_stmt|;
name|int
name|kind
decl_stmt|;
block|}
name|mem
index|[
name|PCIC_MEM_WINS
index|]
struct|;
name|int
name|ioalloc
decl_stmt|;
struct|struct
block|{
name|bus_addr_t
name|addr
decl_stmt|;
name|bus_size_t
name|size
decl_stmt|;
name|int
name|width
decl_stmt|;
block|}
name|io
index|[
name|PCIC_IO_WINS
index|]
struct|;
name|int
name|ih_irq
decl_stmt|;
name|struct
name|device
modifier|*
name|pccard
decl_stmt|;
name|int
name|shutdown
decl_stmt|;
name|struct
name|proc
modifier|*
name|event_thread
decl_stmt|;
name|SIMPLEQ_HEAD
argument_list|(
argument_list|,
argument|pcic_event
argument_list|)
name|events
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PCIC_FLAG_SOCKETP
value|0x0001
end_define

begin_define
define|#
directive|define
name|PCIC_FLAG_CARDP
value|0x0002
end_define

begin_define
define|#
directive|define
name|PCIC_LASTSTATE_PRESENT
value|0x0002
end_define

begin_define
define|#
directive|define
name|PCIC_LASTSTATE_HALF
value|0x0001
end_define

begin_define
define|#
directive|define
name|PCIC_LASTSTATE_EMPTY
value|0x0000
end_define

begin_define
define|#
directive|define
name|C0SA
value|PCIC_CHIP0_BASE+PCIC_SOCKETA_INDEX
end_define

begin_define
define|#
directive|define
name|C0SB
value|PCIC_CHIP0_BASE+PCIC_SOCKETB_INDEX
end_define

begin_define
define|#
directive|define
name|C1SA
value|PCIC_CHIP1_BASE+PCIC_SOCKETA_INDEX
end_define

begin_define
define|#
directive|define
name|C1SB
value|PCIC_CHIP1_BASE+PCIC_SOCKETB_INDEX
end_define

begin_comment
comment|/*  * This is sort of arbitrary.  It merely needs to be "enough". It can be  * overridden in the conf file, anyway.  */
end_comment

begin_define
define|#
directive|define
name|PCIC_MEM_PAGES
value|4
end_define

begin_define
define|#
directive|define
name|PCIC_MEMSIZE
value|PCIC_MEM_PAGES*PCIC_MEM_PAGESIZE
end_define

begin_define
define|#
directive|define
name|PCIC_NSLOTS
value|4
end_define

begin_struct
struct|struct
name|pcic_softc
block|{
name|struct
name|device
name|dev
decl_stmt|;
name|bus_space_tag_t
name|memt
decl_stmt|;
name|bus_space_handle_t
name|memh
decl_stmt|;
name|bus_space_tag_t
name|iot
decl_stmt|;
name|bus_space_handle_t
name|ioh
decl_stmt|;
comment|/* XXX isa_chipset_tag_t, pci_chipset_tag_t, etc. */
name|void
modifier|*
name|intr_est
decl_stmt|;
name|pccard_chipset_tag_t
name|pct
decl_stmt|;
comment|/* this needs to be large enough to hold PCIC_MEM_PAGES bits */
name|int
name|subregionmask
decl_stmt|;
define|#
directive|define
name|PCIC_MAX_MEM_PAGES
value|(8 * sizeof(int))
comment|/* used by memory window mapping functions */
name|bus_addr_t
name|membase
decl_stmt|;
comment|/* 	 * used by io window mapping functions.  These can actually overlap 	 * with another pcic, since the underlying extent mapper will deal 	 * with individual allocations.  This is here to deal with the fact 	 * that different busses have different real widths (different pc 	 * hardware seems to use 10 or 12 bits for the I/O bus). 	 */
name|bus_addr_t
name|iobase
decl_stmt|;
name|bus_addr_t
name|iosize
decl_stmt|;
name|int
name|irq
decl_stmt|;
name|void
modifier|*
name|ih
decl_stmt|;
name|struct
name|pcic_handle
name|handle
index|[
name|PCIC_NSLOTS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|int
name|pcic_ident_ok
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|pcic_vendor
name|__P
argument_list|(
operator|(
expr|struct
name|pcic_handle
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|pcic_vendor_to_string
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|pcic_attach
name|__P
argument_list|(
operator|(
expr|struct
name|pcic_softc
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|pcic_attach_sockets
name|__P
argument_list|(
operator|(
expr|struct
name|pcic_softc
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|pcic_intr
name|__P
argument_list|(
operator|(
name|void
operator|*
name|arg
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|pcic_read
name|__P
argument_list|(
operator|(
expr|struct
name|pcic_handle
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|pcic_write
name|__P
argument_list|(
operator|(
expr|struct
name|pcic_handle
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|pcic_chip_mem_alloc
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|,
name|bus_size_t
operator|,
expr|struct
name|pccard_mem_handle
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|pcic_chip_mem_free
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|,
expr|struct
name|pccard_mem_handle
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|pcic_chip_mem_map
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|,
name|int
operator|,
name|bus_addr_t
operator|,
name|bus_size_t
operator|,
expr|struct
name|pccard_mem_handle
operator|*
operator|,
name|bus_addr_t
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|pcic_chip_mem_unmap
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|pcic_chip_io_alloc
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|,
name|bus_addr_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
expr|struct
name|pccard_io_handle
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|pcic_chip_io_free
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|,
expr|struct
name|pccard_io_handle
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|pcic_chip_io_map
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|,
name|int
operator|,
name|bus_addr_t
operator|,
name|bus_size_t
operator|,
expr|struct
name|pccard_io_handle
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|pcic_chip_io_unmap
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|pcic_chip_socket_enable
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|pcic_chip_socket_disable
name|__P
argument_list|(
operator|(
name|pccard_chipset_handle_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|pcic_read
name|__P
argument_list|(
operator|(
expr|struct
name|pcic_handle
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline
name|int
name|pcic_read
parameter_list|(
name|h
parameter_list|,
name|idx
parameter_list|)
name|struct
name|pcic_handle
modifier|*
name|h
decl_stmt|;
name|int
name|idx
decl_stmt|;
block|{
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
name|bus_space_write_1
argument_list|(
name|h
operator|->
name|sc
operator|->
name|iot
argument_list|,
name|h
operator|->
name|sc
operator|->
name|ioh
argument_list|,
name|PCIC_REG_INDEX
argument_list|,
name|h
operator|->
name|sock
operator|+
name|idx
argument_list|)
expr_stmt|;
return|return
operator|(
name|bus_space_read_1
argument_list|(
name|h
operator|->
name|sc
operator|->
name|iot
argument_list|,
name|h
operator|->
name|sc
operator|->
name|ioh
argument_list|,
name|PCIC_REG_DATA
argument_list|)
operator|)
return|;
block|}
end_function

begin_decl_stmt
specifier|static
name|__inline
name|void
name|pcic_write
name|__P
argument_list|(
operator|(
expr|struct
name|pcic_handle
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline
name|void
name|pcic_write
parameter_list|(
name|h
parameter_list|,
name|idx
parameter_list|,
name|data
parameter_list|)
name|struct
name|pcic_handle
modifier|*
name|h
decl_stmt|;
name|int
name|idx
decl_stmt|;
name|int
name|data
decl_stmt|;
block|{
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
name|bus_space_write_1
argument_list|(
name|h
operator|->
name|sc
operator|->
name|iot
argument_list|,
name|h
operator|->
name|sc
operator|->
name|ioh
argument_list|,
name|PCIC_REG_INDEX
argument_list|,
name|h
operator|->
name|sock
operator|+
name|idx
argument_list|)
expr_stmt|;
name|bus_space_write_1
argument_list|(
name|h
operator|->
name|sc
operator|->
name|iot
argument_list|,
name|h
operator|->
name|sc
operator|->
name|ioh
argument_list|,
name|PCIC_REG_DATA
argument_list|,
operator|(
name|data
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

end_unit

