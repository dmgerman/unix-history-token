begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * include file for midi synthesizer interface.  *   * Copyright by Seigo Tanimura 1999.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_define
define|#
directive|define
name|SYNTH_MAX_VOICES
value|32
end_define

begin_comment
comment|/* This is the voice allocation state for a synthesizer. */
end_comment

begin_struct
struct|struct
name|voice_alloc_info
block|{
name|int
name|max_voice
decl_stmt|;
name|int
name|used_voices
decl_stmt|;
name|int
name|ptr
decl_stmt|;
comment|/* For device specific use */
name|u_short
name|map
index|[
name|SYNTH_MAX_VOICES
index|]
decl_stmt|;
comment|/* (ch<< 8) | (note+1) */
name|int
name|timestamp
decl_stmt|;
name|int
name|alloc_times
index|[
name|SYNTH_MAX_VOICES
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* This is the channel information for a synthesizer. */
end_comment

begin_struct
struct|struct
name|channel_info
block|{
name|int
name|pgm_num
decl_stmt|;
name|int
name|bender_value
decl_stmt|;
name|u_char
name|controllers
index|[
literal|128
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* These are the function types for a midi synthesizer interface. */
end_comment

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_killnote_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|note
parameter_list|,
name|int
name|vel
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_setinstr_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|instr
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_startnote_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|note
parameter_list|,
name|int
name|vel
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_reset_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_hwcontrol_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|u_char
modifier|*
name|event
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_loadpatch_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|format
parameter_list|,
name|struct
name|uio
modifier|*
name|buf
parameter_list|,
name|int
name|offs
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|pmgr_flag
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_panning_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|pan
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_aftertouch_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|press
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_controller_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|ctrlnum
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_patchmgr_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|struct
name|patmgr_info
modifier|*
name|rec
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_bender_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_allocvoice_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|note
parameter_list|,
name|struct
name|voice_alloc_info
modifier|*
name|alloc
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_setupvoice_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|chn
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_sendsysex_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|u_char
modifier|*
name|sysex
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_prefixcmd_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|status
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_volumemethod_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_readraw_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|u_char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|int
modifier|*
name|lenr
parameter_list|,
name|int
name|nonblock
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mdsy_writeraw_t
function_decl|)
parameter_list|(
name|mididev_info
modifier|*
name|md
parameter_list|,
name|u_char
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|int
modifier|*
name|lenw
parameter_list|,
name|int
name|nonblock
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * The order of mutex lock (from the first to the last)  *  * 1. sequencer flags, queues, timer and devlice list  * 2. midi synth voice and channel  * 3. midi synth status  * 4. generic midi flags and queues  * 5. midi device  */
end_comment

begin_comment
comment|/* This is a midi synthesizer interface and state. */
end_comment

begin_struct
struct|struct
name|_synthdev_info
block|{
name|mdsy_killnote_t
modifier|*
name|killnote
decl_stmt|;
name|mdsy_setinstr_t
modifier|*
name|setinstr
decl_stmt|;
name|mdsy_startnote_t
modifier|*
name|startnote
decl_stmt|;
name|mdsy_reset_t
modifier|*
name|reset
decl_stmt|;
name|mdsy_hwcontrol_t
modifier|*
name|hwcontrol
decl_stmt|;
name|mdsy_loadpatch_t
modifier|*
name|loadpatch
decl_stmt|;
name|mdsy_panning_t
modifier|*
name|panning
decl_stmt|;
name|mdsy_aftertouch_t
modifier|*
name|aftertouch
decl_stmt|;
name|mdsy_controller_t
modifier|*
name|controller
decl_stmt|;
name|mdsy_patchmgr_t
modifier|*
name|patchmgr
decl_stmt|;
name|mdsy_bender_t
modifier|*
name|bender
decl_stmt|;
name|mdsy_allocvoice_t
modifier|*
name|allocvoice
decl_stmt|;
name|mdsy_setupvoice_t
modifier|*
name|setupvoice
decl_stmt|;
name|mdsy_sendsysex_t
modifier|*
name|sendsysex
decl_stmt|;
name|mdsy_prefixcmd_t
modifier|*
name|prefixcmd
decl_stmt|;
name|mdsy_volumemethod_t
modifier|*
name|volumemethod
decl_stmt|;
name|mdsy_readraw_t
modifier|*
name|readraw
decl_stmt|;
name|mdsy_writeraw_t
modifier|*
name|writeraw
decl_stmt|;
comment|/* Voice and channel */
name|struct
name|mtx
name|vc_mtx
decl_stmt|;
comment|/* Mutex to protect voice and channel. */
name|struct
name|voice_alloc_info
name|alloc
decl_stmt|;
comment|/* Voice allocation. */
name|struct
name|channel_info
name|chn_info
index|[
literal|16
index|]
decl_stmt|;
comment|/* Channel information. */
comment|/* Status */
name|struct
name|mtx
name|status_mtx
decl_stmt|;
comment|/* Mutex to protect status. */
name|int
name|sysex_state
decl_stmt|;
comment|/* State of sysex transmission. */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|_synthdev_info
name|synthdev_info
typedef|;
end_typedef

end_unit

