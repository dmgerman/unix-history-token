begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Include file for midi buffer.  *   * Copyright by Seigo Tanimura 1999.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_comment
comment|/*        * descriptor of a midi buffer. See midibuf.c for documentation.  * (rp,rl) and (fp,fl) identify the READY and FREE regions of the  * buffer. dl contains the length used for dma transfer, dl>0 also  * means that the channel is busy and there is a DMA transfer in progress.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_midi_dbuf
block|{
name|char
modifier|*
name|buf
decl_stmt|;
name|int
name|bufsize
decl_stmt|;
specifier|volatile
name|int
name|rp
decl_stmt|,
name|fp
decl_stmt|;
comment|/* pointers to the ready and free area */
specifier|volatile
name|int
name|dl
decl_stmt|;
comment|/* transfer size */
specifier|volatile
name|int
name|rl
decl_stmt|,
name|fl
decl_stmt|;
comment|/* length of ready and free areas. */
name|int
name|int_count
decl_stmt|;
name|int
name|chan
decl_stmt|;
comment|/* dma channel */
name|int
name|unit_size
decl_stmt|;
comment|/* unit size */
name|struct
name|selinfo
name|sel
decl_stmt|;
name|u_long
name|total
decl_stmt|;
comment|/* total bytes processed */
name|u_long
name|prev_total
decl_stmt|;
comment|/* copy of the above when GETxPTR called */
name|int
name|tsleep_in
decl_stmt|,
name|tsleep_out
decl_stmt|;
comment|/* pillows to tsleep on */
name|int
name|blocksize
decl_stmt|;
comment|/* block size */
block|}
name|midi_dbuf
typedef|;
end_typedef

begin_comment
comment|/*  * These are the midi buffer methods, used in midi interface devices.  */
end_comment

begin_function_decl
name|int
name|midibuf_init
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_destroy
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_clear
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_seqwrite
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|struct
name|mtx
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_uiowrite
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|,
name|struct
name|uio
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|struct
name|mtx
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_output_intr
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_input_intr
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_seqread
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|struct
name|mtx
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_sequnread
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|struct
name|mtx
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_seqcopy
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|,
name|int
name|len
parameter_list|,
name|struct
name|mtx
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|midibuf_uioread
parameter_list|(
name|midi_dbuf
modifier|*
name|dbuf
parameter_list|,
name|struct
name|uio
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|struct
name|mtx
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

end_unit

