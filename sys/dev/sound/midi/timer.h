begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Include file for a midi timer.  *   * Copyright by Seigo Tanimura 2002.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_TIMER_H_
end_ifndef

begin_define
define|#
directive|define
name|_TIMER_H_
end_define

begin_typedef
typedef|typedef
name|struct
name|_timerdev_info
name|timerdev_info
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|tmr_open_t
function_decl|)
parameter_list|(
name|timerdev_info
modifier|*
name|tmd
parameter_list|,
name|int
name|oflags
parameter_list|,
name|int
name|devtype
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|tmr_close_t
function_decl|)
parameter_list|(
name|timerdev_info
modifier|*
name|tmd
parameter_list|,
name|int
name|fflag
parameter_list|,
name|int
name|devtype
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|tmr_event_t
function_decl|)
parameter_list|(
name|timerdev_info
modifier|*
name|tmd
parameter_list|,
name|u_char
modifier|*
name|ev
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|tmr_gettime_t
function_decl|)
parameter_list|(
name|timerdev_info
modifier|*
name|tmd
parameter_list|,
name|u_long
modifier|*
name|t
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|tmr_ioctl_t
function_decl|)
parameter_list|(
name|timerdev_info
modifier|*
name|tmd
parameter_list|,
name|u_long
name|cmd
parameter_list|,
name|caddr_t
name|data
parameter_list|,
name|int
name|fflag
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|tmr_armtimer_t
function_decl|)
parameter_list|(
name|timerdev_info
modifier|*
name|tmd
parameter_list|,
name|u_long
name|t
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|_timerdev_info
block|{
comment|/* 	 * the first part of the descriptor is filled up from a 	 * template. 	 */
name|char
name|name
index|[
literal|32
index|]
decl_stmt|;
name|int
name|caps
decl_stmt|;
name|int
name|prio
decl_stmt|;
name|tmr_open_t
modifier|*
name|open
decl_stmt|;
name|tmr_close_t
modifier|*
name|close
decl_stmt|;
name|tmr_event_t
modifier|*
name|event
decl_stmt|;
name|tmr_gettime_t
modifier|*
name|gettime
decl_stmt|;
name|tmr_ioctl_t
modifier|*
name|ioctl
decl_stmt|;
name|tmr_armtimer_t
modifier|*
name|armtimer
decl_stmt|;
name|int
name|unit
decl_stmt|;
name|void
modifier|*
name|softc
decl_stmt|;
name|void
modifier|*
name|seq
decl_stmt|;
comment|/* The tailq entry of the next timer device. */
name|TAILQ_ENTRY
argument_list|(
argument|_timerdev_info
argument_list|)
name|tmd_link
expr_stmt|;
name|int
name|opened
decl_stmt|;
name|struct
name|mtx
name|mtx
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function_decl
name|int
name|timerdev_install
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|timerdev_info
modifier|*
name|create_timerdev_info_unit
parameter_list|(
name|timerdev_info
modifier|*
name|tmdinf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|timerdev_info
modifier|*
name|get_timerdev_info_unit
parameter_list|(
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|timerdev_info
modifier|*
name|get_timerdev_info
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _TIMER_H_ */
end_comment

end_unit

