begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1999 Cameron Grant<gandalf@vilnya.demon.co.uk>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_typedef
typedef|typedef
name|struct
name|_snd_mixer
name|snd_mixer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_snd_dbuf
name|snd_dbuf
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_snddev_info
name|snddev_info
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_pcmchan_caps
name|pcmchan_caps
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_pcm_feeder
name|pcm_feeder
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_pcm_channel
name|pcm_channel
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mix_set_t
function_decl|)
parameter_list|(
name|snd_mixer
modifier|*
name|m
parameter_list|,
name|unsigned
name|dev
parameter_list|,
name|unsigned
name|left
parameter_list|,
name|unsigned
name|right
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mix_recsrc_t
function_decl|)
parameter_list|(
name|snd_mixer
modifier|*
name|m
parameter_list|,
name|u_int32_t
name|src
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|mix_init_t
function_decl|)
parameter_list|(
name|snd_mixer
modifier|*
name|m
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|_snd_mixer
block|{
name|char
name|name
index|[
literal|64
index|]
decl_stmt|;
name|mix_init_t
modifier|*
name|init
decl_stmt|;
name|mix_set_t
modifier|*
name|set
decl_stmt|;
name|mix_recsrc_t
modifier|*
name|setrecsrc
decl_stmt|;
name|void
modifier|*
name|devinfo
decl_stmt|;
name|u_int32_t
name|devs
decl_stmt|;
name|u_int32_t
name|recdevs
decl_stmt|;
name|u_int32_t
name|recsrc
decl_stmt|;
name|u_int16_t
name|level
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * descriptor of a dma buffer. See dmabuf.c for documentation.  * (rp,rl) and (fp,fl) identify the READY and FREE regions of the  * buffer. dl contains the length used for dma transfer, dl>0 also  * means that the channel is busy and there is a DMA transfer in progress.  */
end_comment

begin_struct
struct|struct
name|_snd_dbuf
block|{
name|u_int8_t
modifier|*
name|buf
decl_stmt|;
name|int
name|bufsize
decl_stmt|;
specifier|volatile
name|int
name|dl
decl_stmt|;
comment|/* transfer size */
specifier|volatile
name|int
name|rp
decl_stmt|,
name|fp
decl_stmt|;
comment|/* pointers to the ready and free area */
specifier|volatile
name|int
name|rl
decl_stmt|,
name|fl
decl_stmt|;
comment|/* lenght of ready and free areas. */
specifier|volatile
name|int
name|hp
decl_stmt|;
specifier|volatile
name|u_int32_t
name|int_count
decl_stmt|,
name|prev_int_count
decl_stmt|;
specifier|volatile
name|u_int32_t
name|total
decl_stmt|,
name|prev_total
decl_stmt|;
name|int
name|chan
decl_stmt|,
name|dir
decl_stmt|;
comment|/* dma channel */
name|int
name|fmt
decl_stmt|,
name|blksz
decl_stmt|,
name|blkcnt
decl_stmt|;
name|int
name|underflow
decl_stmt|,
name|overrun
decl_stmt|;
name|bus_dmamap_t
name|dmamap
decl_stmt|;
name|struct
name|selinfo
name|sel
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|int
function_decl|(
name|pcmfeed_init_t
function_decl|)
parameter_list|(
name|pcm_feeder
modifier|*
name|feeder
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|pcmfeed_free_t
function_decl|)
parameter_list|(
name|pcm_feeder
modifier|*
name|feeder
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|pcmfeed_feed_t
function_decl|)
parameter_list|(
name|pcm_feeder
modifier|*
name|feeder
parameter_list|,
name|pcm_channel
modifier|*
name|c
parameter_list|,
name|u_int8_t
modifier|*
name|buffer
parameter_list|,
name|u_int32_t
name|count
parameter_list|,
name|struct
name|uio
modifier|*
name|stream
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|_pcm_feeder
block|{
name|char
name|name
index|[
literal|16
index|]
decl_stmt|;
name|int
name|align
decl_stmt|;
name|pcmfeed_init_t
modifier|*
name|init
decl_stmt|;
name|pcmfeed_free_t
modifier|*
name|free
decl_stmt|;
name|pcmfeed_feed_t
modifier|*
name|feed
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
name|pcm_feeder
modifier|*
name|source
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|_pcmchan_caps
block|{
name|u_int32_t
name|minspeed
decl_stmt|,
name|maxspeed
decl_stmt|;
name|u_int32_t
name|formats
decl_stmt|,
name|bestfmt
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|void
modifier|*
function_decl|(
name|pcmchan_init_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|devinfo
parameter_list|,
name|snd_dbuf
modifier|*
name|b
parameter_list|,
name|pcm_channel
modifier|*
name|c
parameter_list|,
name|int
name|dir
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|pcmchan_setdir_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|int
name|dir
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|pcmchan_setformat_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|u_int32_t
name|format
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|pcmchan_setspeed_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|u_int32_t
name|speed
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|pcmchan_setblocksize_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|u_int32_t
name|blocksize
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|pcmchan_trigger_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|int
name|go
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|pcmchan_getptr_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|pcmchan_caps
modifier|*
function_decl|(
name|pcmchan_getcaps_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|_pcm_channel
block|{
name|pcmchan_init_t
modifier|*
name|init
decl_stmt|;
name|pcmchan_setdir_t
modifier|*
name|setdir
decl_stmt|;
name|pcmchan_setformat_t
modifier|*
name|setformat
decl_stmt|;
name|pcmchan_setspeed_t
modifier|*
name|setspeed
decl_stmt|;
name|pcmchan_setblocksize_t
modifier|*
name|setblocksize
decl_stmt|;
name|pcmchan_trigger_t
modifier|*
name|trigger
decl_stmt|;
name|pcmchan_getptr_t
modifier|*
name|getptr
decl_stmt|;
name|pcmchan_getcaps_t
modifier|*
name|getcaps
decl_stmt|;
name|pcm_feeder
modifier|*
name|feeder
decl_stmt|;
name|u_int32_t
name|align
decl_stmt|;
name|int
name|volume
decl_stmt|;
name|u_int32_t
name|speed
decl_stmt|;
name|u_int32_t
name|flags
decl_stmt|;
name|u_int32_t
name|format
decl_stmt|;
name|u_int32_t
name|blocks
decl_stmt|;
name|int
name|direction
decl_stmt|;
name|snd_dbuf
name|buffer
decl_stmt|,
name|buffer2nd
decl_stmt|;
name|snddev_info
modifier|*
name|parent
decl_stmt|;
name|void
modifier|*
name|devinfo
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|void
function_decl|(
name|pcm_swap_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|int
name|dir
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|SND_STATUSLEN
value|64
end_define

begin_comment
comment|/* descriptor of audio device */
end_comment

begin_struct
struct|struct
name|_snddev_info
block|{
name|pcm_channel
modifier|*
name|play
decl_stmt|,
modifier|*
name|rec
decl_stmt|,
modifier|*
modifier|*
name|aplay
decl_stmt|,
modifier|*
modifier|*
name|arec
decl_stmt|,
name|fakechan
decl_stmt|;
name|int
modifier|*
name|ref
decl_stmt|;
name|unsigned
name|playcount
decl_stmt|,
name|reccount
decl_stmt|,
name|chancount
decl_stmt|;
name|snd_mixer
name|mixer
decl_stmt|;
name|u_long
name|magic
decl_stmt|;
name|unsigned
name|flags
decl_stmt|;
name|void
modifier|*
name|devinfo
decl_stmt|;
name|pcm_swap_t
modifier|*
name|swap
decl_stmt|;
name|device_t
name|dev
decl_stmt|;
name|char
name|status
index|[
name|SND_STATUSLEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* mixer description structure and macros - these should go away,  * only sb.[ch] and mss.[ch] use them  */
end_comment

begin_struct
struct|struct
name|mixer_def
block|{
name|u_int
name|regno
range|:
literal|7
decl_stmt|;
name|u_int
name|polarity
range|:
literal|1
decl_stmt|;
comment|/* 1 means reversed */
name|u_int
name|bitoffs
range|:
literal|4
decl_stmt|;
name|u_int
name|nbits
range|:
literal|4
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|mixer_def
name|mixer_ent
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|mixer_def
name|mixer_tab
index|[
literal|32
index|]
index|[
literal|2
index|]
typedef|;
end_typedef

begin_define
define|#
directive|define
name|MIX_ENT
parameter_list|(
name|name
parameter_list|,
name|reg_l
parameter_list|,
name|pol_l
parameter_list|,
name|pos_l
parameter_list|,
name|len_l
parameter_list|,
name|reg_r
parameter_list|,
name|pol_r
parameter_list|,
name|pos_r
parameter_list|,
name|len_r
parameter_list|)
define|\
value|{{reg_l, pol_l, pos_l, len_l}, {reg_r, pol_r, pos_r, len_r}}
end_define

begin_define
define|#
directive|define
name|PMIX_ENT
parameter_list|(
name|name
parameter_list|,
name|reg_l
parameter_list|,
name|pos_l
parameter_list|,
name|len_l
parameter_list|,
name|reg_r
parameter_list|,
name|pos_r
parameter_list|,
name|len_r
parameter_list|)
define|\
value|{{reg_l, 0, pos_l, len_l}, {reg_r, 0, pos_r, len_r}}
end_define

begin_define
define|#
directive|define
name|MIX_NONE
parameter_list|(
name|name
parameter_list|)
value|MIX_ENT(name, 0,0,0,0, 0,0,0,0)
end_define

end_unit

