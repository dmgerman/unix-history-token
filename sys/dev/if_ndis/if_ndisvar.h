begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003  *	Bill Paul<wpaul@windriver.com>.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by Bill Paul.  * 4. Neither the name of the author nor the names of any co-contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR THE VOICES IN HIS HEAD  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  * THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|NDIS_DEFAULT_NODENAME
value|"FreeBSD NDIS node"
end_define

begin_define
define|#
directive|define
name|NDIS_NODENAME_LEN
value|32
end_define

begin_comment
comment|/* For setting/getting OIDs from userspace. */
end_comment

begin_struct
struct|struct
name|ndis_oid_data
block|{
name|uint32_t
name|oid
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
ifdef|#
directive|ifdef
name|notdef
name|uint8_t
name|data
index|[
literal|1
index|]
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndis_pci_type
block|{
name|uint16_t
name|ndis_vid
decl_stmt|;
name|uint16_t
name|ndis_did
decl_stmt|;
name|uint32_t
name|ndis_subsys
decl_stmt|;
name|char
modifier|*
name|ndis_name
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndis_pccard_type
block|{
specifier|const
name|char
modifier|*
name|ndis_vid
decl_stmt|;
specifier|const
name|char
modifier|*
name|ndis_did
decl_stmt|;
name|char
modifier|*
name|ndis_name
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndis_usb_type
block|{
name|uint16_t
name|ndis_vid
decl_stmt|;
name|uint16_t
name|ndis_did
decl_stmt|;
name|char
modifier|*
name|ndis_name
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndis_shmem
block|{
name|list_entry
name|ndis_list
decl_stmt|;
name|bus_dma_tag_t
name|ndis_stag
decl_stmt|;
name|bus_dmamap_t
name|ndis_smap
decl_stmt|;
name|void
modifier|*
name|ndis_saddr
decl_stmt|;
name|ndis_physaddr
name|ndis_paddr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndis_cfglist
block|{
name|ndis_cfg
name|ndis_cfg
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|ndis_oid
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|ndis_cfglist
argument_list|)
name|link
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Helper struct to make parsing information  * elements easier.  */
end_comment

begin_struct
struct|struct
name|ndis_ie
block|{
name|uint8_t
name|ni_oui
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|ni_val
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|TAILQ_HEAD
argument_list|(
name|nch
argument_list|,
name|ndis_cfglist
argument_list|)
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|NDIS_INITIALIZED
parameter_list|(
name|sc
parameter_list|)
value|(sc->ndis_block->nmb_devicectx != NULL)
end_define

begin_define
define|#
directive|define
name|NDIS_TXPKTS
value|64
end_define

begin_define
define|#
directive|define
name|NDIS_INC
parameter_list|(
name|x
parameter_list|)
define|\
value|(x)->ndis_txidx = ((x)->ndis_txidx + 1) % (x)->ndis_maxpkts
end_define

begin_define
define|#
directive|define
name|NDIS_EVENTS
value|4
end_define

begin_define
define|#
directive|define
name|NDIS_EVTINC
parameter_list|(
name|x
parameter_list|)
value|(x) = ((x) + 1) % NDIS_EVENTS
end_define

begin_struct
struct|struct
name|ndis_evt
block|{
name|uint32_t
name|ne_sts
decl_stmt|;
name|uint32_t
name|ne_len
decl_stmt|;
name|char
modifier|*
name|ne_buf
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndis_vap
block|{
name|struct
name|ieee80211vap
name|vap
decl_stmt|;
name|int
function_decl|(
modifier|*
name|newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|NDIS_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct ndis_vap *)(vap))
end_define

begin_define
define|#
directive|define
name|NDISUSB_CONFIG_NO
value|0
end_define

begin_define
define|#
directive|define
name|NDISUSB_IFACE_INDEX
value|0
end_define

begin_comment
comment|/* XXX at USB2 there's no USBD_NO_TIMEOUT macro anymore  */
end_comment

begin_define
define|#
directive|define
name|NDISUSB_NO_TIMEOUT
value|0
end_define

begin_define
define|#
directive|define
name|NDISUSB_INTR_TIMEOUT
value|1000
end_define

begin_define
define|#
directive|define
name|NDISUSB_TX_TIMEOUT
value|10000
end_define

begin_struct_decl
struct_decl|struct
name|ndisusb_xfer
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ndisusb_ep
block|{
name|struct
name|usb_xfer
modifier|*
name|ne_xfer
index|[
literal|1
index|]
decl_stmt|;
name|list_entry
name|ne_active
decl_stmt|;
name|list_entry
name|ne_pending
decl_stmt|;
name|kspin_lock
name|ne_lock
decl_stmt|;
name|uint8_t
name|ne_dirin
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndisusb_xfer
block|{
name|struct
name|ndisusb_ep
modifier|*
name|nx_ep
decl_stmt|;
name|void
modifier|*
name|nx_priv
decl_stmt|;
name|uint8_t
modifier|*
name|nx_urbbuf
decl_stmt|;
name|uint32_t
name|nx_urbactlen
decl_stmt|;
name|uint32_t
name|nx_urblen
decl_stmt|;
name|uint8_t
name|nx_shortxfer
decl_stmt|;
name|list_entry
name|nx_next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndisusb_xferdone
block|{
name|struct
name|ndisusb_xfer
modifier|*
name|nd_xfer
decl_stmt|;
name|usb_error_t
name|nd_status
decl_stmt|;
name|list_entry
name|nd_donelist
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndisusb_task
block|{
name|unsigned
name|nt_type
decl_stmt|;
define|#
directive|define
name|NDISUSB_TASK_TSTART
value|0
define|#
directive|define
name|NDISUSB_TASK_IRPCANCEL
value|1
define|#
directive|define
name|NDISUSB_TASK_VENDOR
value|2
name|void
modifier|*
name|nt_ctx
decl_stmt|;
name|list_entry
name|nt_tasklist
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ndis_softc
block|{
name|u_int
name|ndis_80211
range|:
literal|1
decl_stmt|,
name|ndis_link
range|:
literal|1
decl_stmt|,
name|ndis_running
range|:
literal|1
decl_stmt|;
union|union
block|{
struct|struct
block|{
comment|/* Ethernet */
name|struct
name|ifnet
modifier|*
name|ifp
decl_stmt|;
name|struct
name|ifmedia
name|ifmedia
decl_stmt|;
name|int
name|ndis_if_flags
decl_stmt|;
block|}
struct|;
struct|struct
block|{
comment|/* Wireless */
name|struct
name|ieee80211com
name|ndis_ic
decl_stmt|;
name|struct
name|callout
name|ndis_scan_callout
decl_stmt|;
name|int
function_decl|(
modifier|*
name|ndis_newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211com
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
block|}
union|;
name|u_long
name|ndis_hwassist
decl_stmt|;
name|uint32_t
name|ndis_v4tx
decl_stmt|;
name|uint32_t
name|ndis_v4rx
decl_stmt|;
name|bus_space_handle_t
name|ndis_bhandle
decl_stmt|;
name|bus_space_tag_t
name|ndis_btag
decl_stmt|;
name|void
modifier|*
name|ndis_intrhand
decl_stmt|;
name|struct
name|resource
modifier|*
name|ndis_irq
decl_stmt|;
name|struct
name|resource
modifier|*
name|ndis_res
decl_stmt|;
name|struct
name|resource
modifier|*
name|ndis_res_io
decl_stmt|;
name|int
name|ndis_io_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|ndis_res_mem
decl_stmt|;
name|int
name|ndis_mem_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|ndis_res_altmem
decl_stmt|;
name|int
name|ndis_altmem_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|ndis_res_am
decl_stmt|;
comment|/* attribute mem (pccard) */
name|int
name|ndis_am_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|ndis_res_cm
decl_stmt|;
comment|/* common mem (pccard) */
name|struct
name|resource_list
name|ndis_rl
decl_stmt|;
name|int
name|ndis_rescnt
decl_stmt|;
name|struct
name|mtx
name|ndis_mtx
decl_stmt|;
name|uint8_t
name|ndis_irql
decl_stmt|;
name|device_t
name|ndis_dev
decl_stmt|;
name|int
name|ndis_unit
decl_stmt|;
name|ndis_miniport_block
modifier|*
name|ndis_block
decl_stmt|;
name|ndis_miniport_characteristics
modifier|*
name|ndis_chars
decl_stmt|;
name|interface_type
name|ndis_type
decl_stmt|;
name|struct
name|callout
name|ndis_stat_callout
decl_stmt|;
name|int
name|ndis_maxpkts
decl_stmt|;
name|ndis_oid
modifier|*
name|ndis_oids
decl_stmt|;
name|int
name|ndis_oidcnt
decl_stmt|;
name|int
name|ndis_txidx
decl_stmt|;
name|int
name|ndis_txpending
decl_stmt|;
name|ndis_packet
modifier|*
modifier|*
name|ndis_txarray
decl_stmt|;
name|ndis_handle
name|ndis_txpool
decl_stmt|;
name|int
name|ndis_sc
decl_stmt|;
name|ndis_cfg
modifier|*
name|ndis_regvals
decl_stmt|;
name|struct
name|nch
name|ndis_cfglist_head
decl_stmt|;
name|uint32_t
name|ndis_sts
decl_stmt|;
name|uint32_t
name|ndis_filter
decl_stmt|;
name|int
name|ndis_skip
decl_stmt|;
name|int
name|ndis_devidx
decl_stmt|;
name|interface_type
name|ndis_iftype
decl_stmt|;
name|driver_object
modifier|*
name|ndis_dobj
decl_stmt|;
name|io_workitem
modifier|*
name|ndis_tickitem
decl_stmt|;
name|io_workitem
modifier|*
name|ndis_startitem
decl_stmt|;
name|io_workitem
modifier|*
name|ndis_resetitem
decl_stmt|;
name|io_workitem
modifier|*
name|ndis_inputitem
decl_stmt|;
name|kdpc
name|ndis_rxdpc
decl_stmt|;
name|bus_dma_tag_t
name|ndis_parent_tag
decl_stmt|;
name|list_entry
name|ndis_shlist
decl_stmt|;
name|bus_dma_tag_t
name|ndis_mtag
decl_stmt|;
name|bus_dma_tag_t
name|ndis_ttag
decl_stmt|;
name|bus_dmamap_t
modifier|*
name|ndis_mmaps
decl_stmt|;
name|bus_dmamap_t
modifier|*
name|ndis_tmaps
decl_stmt|;
name|int
name|ndis_mmapcnt
decl_stmt|;
name|struct
name|ndis_evt
name|ndis_evt
index|[
name|NDIS_EVENTS
index|]
decl_stmt|;
name|int
name|ndis_evtpidx
decl_stmt|;
name|int
name|ndis_evtcidx
decl_stmt|;
name|struct
name|mbufq
name|ndis_rxqueue
decl_stmt|;
name|kspin_lock
name|ndis_rxlock
decl_stmt|;
name|int
name|ndis_tx_timer
decl_stmt|;
name|int
name|ndis_hang_timer
decl_stmt|;
name|struct
name|usb_device
modifier|*
name|ndisusb_dev
decl_stmt|;
name|struct
name|mtx
name|ndisusb_mtx
decl_stmt|;
name|struct
name|ndisusb_ep
name|ndisusb_dread_ep
decl_stmt|;
name|struct
name|ndisusb_ep
name|ndisusb_dwrite_ep
decl_stmt|;
define|#
directive|define
name|NDISUSB_GET_ENDPT
parameter_list|(
name|addr
parameter_list|)
define|\
value|((UE_GET_DIR(addr)>> 7) | (UE_GET_ADDR(addr)<< 1))
define|#
directive|define
name|NDISUSB_ENDPT_MAX
value|((UE_ADDR + 1) * 2)
name|struct
name|ndisusb_ep
name|ndisusb_ep
index|[
name|NDISUSB_ENDPT_MAX
index|]
decl_stmt|;
name|io_workitem
modifier|*
name|ndisusb_xferdoneitem
decl_stmt|;
name|list_entry
name|ndisusb_xferdonelist
decl_stmt|;
name|kspin_lock
name|ndisusb_xferdonelock
decl_stmt|;
name|io_workitem
modifier|*
name|ndisusb_taskitem
decl_stmt|;
name|list_entry
name|ndisusb_tasklist
decl_stmt|;
name|kspin_lock
name|ndisusb_tasklock
decl_stmt|;
name|int
name|ndisusb_status
decl_stmt|;
define|#
directive|define
name|NDISUSB_STATUS_DETACH
value|0x1
define|#
directive|define
name|NDISUSB_STATUS_SETUP_EP
value|0x2
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|NDIS_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->ndis_mtx)
end_define

begin_define
define|#
directive|define
name|NDIS_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->ndis_mtx)
end_define

begin_define
define|#
directive|define
name|NDIS_LOCK_ASSERT
parameter_list|(
name|_sc
parameter_list|,
name|t
parameter_list|)
value|mtx_assert(&(_sc)->ndis_mtx, t)
end_define

begin_define
define|#
directive|define
name|NDISUSB_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->ndisusb_mtx)
end_define

begin_define
define|#
directive|define
name|NDISUSB_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->ndisusb_mtx)
end_define

begin_define
define|#
directive|define
name|NDISUSB_LOCK_ASSERT
parameter_list|(
name|_sc
parameter_list|,
name|t
parameter_list|)
value|mtx_assert(&(_sc)->ndisusb_mtx, t)
end_define

end_unit

