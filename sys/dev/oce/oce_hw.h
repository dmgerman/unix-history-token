begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (C) 2012 Emulex  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * 3. Neither the name of the Emulex Corporation nor the names of its  *    contributors may be used to endorse or promote products derived from  *    this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * Contact Information:  * freebsd-drivers@emulex.com  *  * Emulex  * 3333 Susan Street  * Costa Mesa, CA 92626  */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_undef
undef|#
directive|undef
name|_BIG_ENDIAN
end_undef

begin_comment
comment|/* TODO */
end_comment

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|1
name|)
end_pragma

begin_define
define|#
directive|define
name|OC_CNA_GEN2
value|0x2
end_define

begin_define
define|#
directive|define
name|OC_CNA_GEN3
value|0x3
end_define

begin_define
define|#
directive|define
name|DEVID_TIGERSHARK
value|0x700
end_define

begin_define
define|#
directive|define
name|DEVID_TOMCAT
value|0x710
end_define

begin_comment
comment|/* PCI CSR offsets */
end_comment

begin_define
define|#
directive|define
name|PCICFG_F1_CSR
value|0x0
end_define

begin_comment
comment|/* F1 for NIC */
end_comment

begin_define
define|#
directive|define
name|PCICFG_SEMAPHORE
value|0xbc
end_define

begin_define
define|#
directive|define
name|PCICFG_SOFT_RESET
value|0x5c
end_define

begin_define
define|#
directive|define
name|PCICFG_UE_STATUS_HI_MASK
value|0xac
end_define

begin_define
define|#
directive|define
name|PCICFG_UE_STATUS_LO_MASK
value|0xa8
end_define

begin_define
define|#
directive|define
name|PCICFG_ONLINE0
value|0xb0
end_define

begin_define
define|#
directive|define
name|PCICFG_ONLINE1
value|0xb4
end_define

begin_define
define|#
directive|define
name|INTR_EN
value|0x20000000
end_define

begin_define
define|#
directive|define
name|IMAGE_TRANSFER_SIZE
value|(32 * 1024)
end_define

begin_comment
comment|/* 32K at a time */
end_comment

begin_comment
comment|/* CSR register offsets */
end_comment

begin_define
define|#
directive|define
name|MPU_EP_CONTROL
value|0
end_define

begin_define
define|#
directive|define
name|MPU_EP_SEMAPHORE_BE3
value|0xac
end_define

begin_define
define|#
directive|define
name|MPU_EP_SEMAPHORE_XE201
value|0x400
end_define

begin_define
define|#
directive|define
name|MPU_EP_SEMAPHORE
parameter_list|(
name|sc
parameter_list|)
define|\
value|((IS_BE(sc)) ? MPU_EP_SEMAPHORE_BE3 : MPU_EP_SEMAPHORE_XE201)
end_define

begin_define
define|#
directive|define
name|PCICFG_INTR_CTRL
value|0xfc
end_define

begin_define
define|#
directive|define
name|HOSTINTR_MASK
value|(1<< 29)
end_define

begin_define
define|#
directive|define
name|HOSTINTR_PFUNC_SHIFT
value|26
end_define

begin_define
define|#
directive|define
name|HOSTINTR_PFUNC_MASK
value|7
end_define

begin_comment
comment|/* POST status reg struct */
end_comment

begin_define
define|#
directive|define
name|POST_STAGE_POWER_ON_RESET
value|0x00
end_define

begin_define
define|#
directive|define
name|POST_STAGE_AWAITING_HOST_RDY
value|0x01
end_define

begin_define
define|#
directive|define
name|POST_STAGE_HOST_RDY
value|0x02
end_define

begin_define
define|#
directive|define
name|POST_STAGE_CHIP_RESET
value|0x03
end_define

begin_define
define|#
directive|define
name|POST_STAGE_ARMFW_READY
value|0xc000
end_define

begin_define
define|#
directive|define
name|POST_STAGE_ARMFW_UE
value|0xf000
end_define

begin_comment
comment|/* DOORBELL registers */
end_comment

begin_define
define|#
directive|define
name|PD_RXULP_DB
value|0x0100
end_define

begin_define
define|#
directive|define
name|PD_TXULP_DB
value|0x0060
end_define

begin_define
define|#
directive|define
name|DB_RQ_ID_MASK
value|0x3FF
end_define

begin_define
define|#
directive|define
name|PD_CQ_DB
value|0x0120
end_define

begin_define
define|#
directive|define
name|PD_EQ_DB
value|PD_CQ_DB
end_define

begin_define
define|#
directive|define
name|PD_MPU_MBOX_DB
value|0x0160
end_define

begin_define
define|#
directive|define
name|PD_MQ_DB
value|0x0140
end_define

begin_comment
comment|/* EQE completion types */
end_comment

begin_define
define|#
directive|define
name|EQ_MINOR_CODE_COMPLETION
value|0x00
end_define

begin_define
define|#
directive|define
name|EQ_MINOR_CODE_OTHER
value|0x01
end_define

begin_define
define|#
directive|define
name|EQ_MAJOR_CODE_COMPLETION
value|0x00
end_define

begin_comment
comment|/* Link Status field values */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_FAULT_NONE
value|0x0
end_define

begin_define
define|#
directive|define
name|PHY_LINK_FAULT_LOCAL
value|0x01
end_define

begin_define
define|#
directive|define
name|PHY_LINK_FAULT_REMOTE
value|0x02
end_define

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_ZERO
value|0x0
end_define

begin_comment
comment|/* No link */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_10MBPS
value|0x1
end_define

begin_comment
comment|/* (10 Mbps) */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_100MBPS
value|0x2
end_define

begin_comment
comment|/* (100 Mbps) */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_1GBPS
value|0x3
end_define

begin_comment
comment|/* (1 Gbps) */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_10GBPS
value|0x4
end_define

begin_comment
comment|/* (10 Gbps) */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_DUPLEX_NONE
value|0x0
end_define

begin_define
define|#
directive|define
name|PHY_LINK_DUPLEX_HALF
value|0x1
end_define

begin_define
define|#
directive|define
name|PHY_LINK_DUPLEX_FULL
value|0x2
end_define

begin_define
define|#
directive|define
name|NTWK_PORT_A
value|0x0
end_define

begin_comment
comment|/* (Port A) */
end_comment

begin_define
define|#
directive|define
name|NTWK_PORT_B
value|0x1
end_define

begin_comment
comment|/* (Port B) */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_ZERO
value|0x0
end_define

begin_comment
comment|/* (No link.) */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_10MBPS
value|0x1
end_define

begin_comment
comment|/* (10 Mbps) */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_100MBPS
value|0x2
end_define

begin_comment
comment|/* (100 Mbps) */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_1GBPS
value|0x3
end_define

begin_comment
comment|/* (1 Gbps) */
end_comment

begin_define
define|#
directive|define
name|PHY_LINK_SPEED_10GBPS
value|0x4
end_define

begin_comment
comment|/* (10 Gbps) */
end_comment

begin_comment
comment|/* Hardware Address types */
end_comment

begin_define
define|#
directive|define
name|MAC_ADDRESS_TYPE_STORAGE
value|0x0
end_define

begin_comment
comment|/* (Storage MAC Address) */
end_comment

begin_define
define|#
directive|define
name|MAC_ADDRESS_TYPE_NETWORK
value|0x1
end_define

begin_comment
comment|/* (Network MAC Address) */
end_comment

begin_define
define|#
directive|define
name|MAC_ADDRESS_TYPE_PD
value|0x2
end_define

begin_comment
comment|/* (Protection Domain MAC Addr) */
end_comment

begin_define
define|#
directive|define
name|MAC_ADDRESS_TYPE_MANAGEMENT
value|0x3
end_define

begin_comment
comment|/* (Management MAC Address) */
end_comment

begin_define
define|#
directive|define
name|MAC_ADDRESS_TYPE_FCOE
value|0x4
end_define

begin_comment
comment|/* (FCoE MAC Address) */
end_comment

begin_comment
comment|/* CREATE_IFACE capability and cap_en flags */
end_comment

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_RSS
value|0x4
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_PROMISCUOUS
value|0x8
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_BROADCAST
value|0x10
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_UNTAGGED
value|0x20
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_VLAN_PROMISCUOUS
value|0x80
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_VLAN
value|0x100
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_MCAST_PROMISCUOUS
value|0x200
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_PASS_L2_ERR
value|0x400
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_PASS_L3L4_ERR
value|0x800
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_MULTICAST
value|0x1000
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_RX_FILTER_IF_MULTICAST_HASH
value|0x2000
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_HDS
value|0x4000
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_DIRECTED
value|0x8000
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_VMQ
value|0x10000
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_NETQ
value|0x20000
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_QGROUPS
value|0x40000
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_LSO
value|0x80000
end_define

begin_define
define|#
directive|define
name|MBX_RX_IFACE_FLAGS_LRO
value|0x100000
end_define

begin_define
define|#
directive|define
name|MQ_RING_CONTEXT_SIZE_16
value|0x5
end_define

begin_comment
comment|/* (16 entries) */
end_comment

begin_define
define|#
directive|define
name|MQ_RING_CONTEXT_SIZE_32
value|0x6
end_define

begin_comment
comment|/* (32 entries) */
end_comment

begin_define
define|#
directive|define
name|MQ_RING_CONTEXT_SIZE_64
value|0x7
end_define

begin_comment
comment|/* (64 entries) */
end_comment

begin_define
define|#
directive|define
name|MQ_RING_CONTEXT_SIZE_128
value|0x8
end_define

begin_comment
comment|/* (128 entries) */
end_comment

begin_define
define|#
directive|define
name|MBX_DB_READY_BIT
value|0x1
end_define

begin_define
define|#
directive|define
name|MBX_DB_HI_BIT
value|0x2
end_define

begin_define
define|#
directive|define
name|ASYNC_EVENT_CODE_LINK_STATE
value|0x1
end_define

begin_define
define|#
directive|define
name|ASYNC_EVENT_LINK_UP
value|0x1
end_define

begin_define
define|#
directive|define
name|ASYNC_EVENT_LINK_DOWN
value|0x0
end_define

begin_comment
comment|/* port link_status */
end_comment

begin_define
define|#
directive|define
name|ASYNC_EVENT_LOGICAL
value|0x02
end_define

begin_comment
comment|/* Logical Link Status */
end_comment

begin_define
define|#
directive|define
name|NTWK_LOGICAL_LINK_DOWN
value|0
end_define

begin_define
define|#
directive|define
name|NTWK_LOGICAL_LINK_UP
value|1
end_define

begin_comment
comment|/* Rx filter bits */
end_comment

begin_define
define|#
directive|define
name|NTWK_RX_FILTER_IP_CKSUM
value|0x1
end_define

begin_define
define|#
directive|define
name|NTWK_RX_FILTER_TCP_CKSUM
value|0x2
end_define

begin_define
define|#
directive|define
name|NTWK_RX_FILTER_UDP_CKSUM
value|0x4
end_define

begin_define
define|#
directive|define
name|NTWK_RX_FILTER_STRIP_CRC
value|0x8
end_define

begin_comment
comment|/* max SGE per mbx */
end_comment

begin_define
define|#
directive|define
name|MAX_MBX_SGE
value|19
end_define

begin_comment
comment|/* Max multicast filter size*/
end_comment

begin_define
define|#
directive|define
name|OCE_MAX_MC_FILTER_SIZE
value|64
end_define

begin_comment
comment|/* PCI SLI (Service Level Interface) capabilities register */
end_comment

begin_define
define|#
directive|define
name|OCE_INTF_REG_OFFSET
value|0x58
end_define

begin_define
define|#
directive|define
name|OCE_INTF_VALID_SIG
value|6
end_define

begin_comment
comment|/* register's signature */
end_comment

begin_define
define|#
directive|define
name|OCE_INTF_FUNC_RESET_REQD
value|1
end_define

begin_define
define|#
directive|define
name|OCE_INTF_HINT1_NOHINT
value|0
end_define

begin_define
define|#
directive|define
name|OCE_INTF_HINT1_SEMAINIT
value|1
end_define

begin_define
define|#
directive|define
name|OCE_INTF_HINT1_STATCTRL
value|2
end_define

begin_define
define|#
directive|define
name|OCE_INTF_IF_TYPE_0
value|0
end_define

begin_define
define|#
directive|define
name|OCE_INTF_IF_TYPE_1
value|1
end_define

begin_define
define|#
directive|define
name|OCE_INTF_IF_TYPE_2
value|2
end_define

begin_define
define|#
directive|define
name|OCE_INTF_IF_TYPE_3
value|3
end_define

begin_define
define|#
directive|define
name|OCE_INTF_SLI_REV3
value|3
end_define

begin_comment
comment|/* not supported by driver */
end_comment

begin_define
define|#
directive|define
name|OCE_INTF_SLI_REV4
value|4
end_define

begin_comment
comment|/* driver supports SLI-4 */
end_comment

begin_define
define|#
directive|define
name|OCE_INTF_PHYS_FUNC
value|0
end_define

begin_define
define|#
directive|define
name|OCE_INTF_VIRT_FUNC
value|1
end_define

begin_define
define|#
directive|define
name|OCE_INTF_FAMILY_BE2
value|0
end_define

begin_comment
comment|/* not supported by driver */
end_comment

begin_define
define|#
directive|define
name|OCE_INTF_FAMILY_BE3
value|1
end_define

begin_comment
comment|/* driver supports BE3 */
end_comment

begin_define
define|#
directive|define
name|OCE_INTF_FAMILY_A0_CHIP
value|0xA
end_define

begin_comment
comment|/* Lancer A0 chip (supported) */
end_comment

begin_define
define|#
directive|define
name|OCE_INTF_FAMILY_B0_CHIP
value|0xB
end_define

begin_comment
comment|/* Lancer B0 chip (future) */
end_comment

begin_define
define|#
directive|define
name|NIC_WQE_SIZE
value|16
end_define

begin_define
define|#
directive|define
name|NIC_UNICAST
value|0x00
end_define

begin_define
define|#
directive|define
name|NIC_MULTICAST
value|0x01
end_define

begin_define
define|#
directive|define
name|NIC_BROADCAST
value|0x02
end_define

begin_define
define|#
directive|define
name|NIC_HDS_NO_SPLIT
value|0x00
end_define

begin_define
define|#
directive|define
name|NIC_HDS_SPLIT_L3PL
value|0x01
end_define

begin_define
define|#
directive|define
name|NIC_HDS_SPLIT_L4PL
value|0x02
end_define

begin_define
define|#
directive|define
name|NIC_WQ_TYPE_FORWARDING
value|0x01
end_define

begin_define
define|#
directive|define
name|NIC_WQ_TYPE_STANDARD
value|0x02
end_define

begin_define
define|#
directive|define
name|NIC_WQ_TYPE_LOW_LATENCY
value|0x04
end_define

begin_define
define|#
directive|define
name|OCE_RESET_STATS
value|1
end_define

begin_define
define|#
directive|define
name|OCE_RETAIN_STATS
value|0
end_define

begin_define
define|#
directive|define
name|OCE_TXP_SW_SZ
value|48
end_define

begin_typedef
typedef|typedef
union|union
name|pci_sli_intf_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|sli_valid
range|:
literal|3
decl_stmt|;
name|uint32_t
name|sli_hint2
range|:
literal|5
decl_stmt|;
name|uint32_t
name|sli_hint1
range|:
literal|8
decl_stmt|;
name|uint32_t
name|sli_if_type
range|:
literal|4
decl_stmt|;
name|uint32_t
name|sli_family
range|:
literal|4
decl_stmt|;
name|uint32_t
name|sli_rev
range|:
literal|4
decl_stmt|;
name|uint32_t
name|rsv0
range|:
literal|3
decl_stmt|;
name|uint32_t
name|sli_func_type
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|uint32_t
name|sli_func_type
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsv0
range|:
literal|3
decl_stmt|;
name|uint32_t
name|sli_rev
range|:
literal|4
decl_stmt|;
name|uint32_t
name|sli_family
range|:
literal|4
decl_stmt|;
name|uint32_t
name|sli_if_type
range|:
literal|4
decl_stmt|;
name|uint32_t
name|sli_hint1
range|:
literal|8
decl_stmt|;
name|uint32_t
name|sli_hint2
range|:
literal|5
decl_stmt|;
name|uint32_t
name|sli_valid
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|pci_sli_intf_t
typedef|;
end_typedef

begin_comment
comment|/* physical address structure to be used in MBX */
end_comment

begin_struct
struct|struct
name|phys_addr
block|{
comment|/* dw0 */
name|uint32_t
name|lo
decl_stmt|;
comment|/* dw1 */
name|uint32_t
name|hi
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
union|union
name|pcicfg_intr_ctl_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|winselect
range|:
literal|2
decl_stmt|;
name|uint32_t
name|hostintr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pfnum
range|:
literal|3
decl_stmt|;
name|uint32_t
name|vf_cev_int_line_en
range|:
literal|1
decl_stmt|;
name|uint32_t
name|winaddr
range|:
literal|23
decl_stmt|;
name|uint32_t
name|membarwinen
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|uint32_t
name|membarwinen
range|:
literal|1
decl_stmt|;
name|uint32_t
name|winaddr
range|:
literal|23
decl_stmt|;
name|uint32_t
name|vf_cev_int_line_en
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pfnum
range|:
literal|3
decl_stmt|;
name|uint32_t
name|hostintr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|winselect
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|pcicfg_intr_ctl_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|pcicfg_semaphore_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|rsvd
range|:
literal|31
decl_stmt|;
name|uint32_t
name|lock
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|uint32_t
name|lock
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|pcicfg_semaphore_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|pcicfg_soft_reset_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|nec_ll_rcvdetect
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dbg_all_reqs_62_49
range|:
literal|14
decl_stmt|;
name|uint32_t
name|scratchpad0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|exception_oe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|soft_reset
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|7
decl_stmt|;
else|#
directive|else
name|uint32_t
name|rsvd0
range|:
literal|7
decl_stmt|;
name|uint32_t
name|soft_reset
range|:
literal|1
decl_stmt|;
name|uint32_t
name|exception_oe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|scratchpad0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dbg_all_reqs_62_49
range|:
literal|14
decl_stmt|;
name|uint32_t
name|nec_ll_rcvdetect
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|pcicfg_soft_reset_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|pcicfg_online1_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|host8_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host7_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host6_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host5_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host4_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host3_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host2_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ipc_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|arm_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txp_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|xaui_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rxpp_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txpb_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rr_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pmem_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pctl1_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pctl0_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pcs1online_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mpu_iram_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pcs0online_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mgmt_mac_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lpcmemhost_online
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|uint32_t
name|lpcmemhost_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mgmt_mac_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pcs0online_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mpu_iram_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pcs1online_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pctl0_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pctl1_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pmem_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rr_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txpb_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rxpp_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|xaui_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txp_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|arm_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ipc_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host2_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host3_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host4_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host5_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host6_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host7_online
range|:
literal|1
decl_stmt|;
name|uint32_t
name|host8_online
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|pcicfg_online1_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|mpu_ep_semaphore_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|error
range|:
literal|1
decl_stmt|;
name|uint32_t
name|backup_fw
range|:
literal|1
decl_stmt|;
name|uint32_t
name|iscsi_no_ip
range|:
literal|1
decl_stmt|;
name|uint32_t
name|iscsi_ip_conflict
range|:
literal|1
decl_stmt|;
name|uint32_t
name|option_rom_installed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|iscsi_drv_loaded
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|10
decl_stmt|;
name|uint32_t
name|stage
range|:
literal|16
decl_stmt|;
else|#
directive|else
name|uint32_t
name|stage
range|:
literal|16
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|10
decl_stmt|;
name|uint32_t
name|iscsi_drv_loaded
range|:
literal|1
decl_stmt|;
name|uint32_t
name|option_rom_installed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|iscsi_ip_conflict
range|:
literal|1
decl_stmt|;
name|uint32_t
name|iscsi_no_ip
range|:
literal|1
decl_stmt|;
name|uint32_t
name|backup_fw
range|:
literal|1
decl_stmt|;
name|uint32_t
name|error
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|mpu_ep_semaphore_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|mpu_ep_control_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|cpu_reset
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|15
decl_stmt|;
name|uint32_t
name|ep_ram_init_status
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|12
decl_stmt|;
name|uint32_t
name|m2_rxpbuf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|m1_rxpbuf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|m0_rxpbuf
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|uint32_t
name|m0_rxpbuf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|m1_rxpbuf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|m2_rxpbuf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|12
decl_stmt|;
name|uint32_t
name|ep_ram_init_status
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|15
decl_stmt|;
name|uint32_t
name|cpu_reset
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|mpu_ep_control_t
typedef|;
end_typedef

begin_comment
comment|/* RX doorbell */
end_comment

begin_typedef
typedef|typedef
union|union
name|pd_rxulp_db_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|num_posted
range|:
literal|8
decl_stmt|;
name|uint32_t
name|invalidate
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|13
decl_stmt|;
name|uint32_t
name|qid
range|:
literal|10
decl_stmt|;
else|#
directive|else
name|uint32_t
name|qid
range|:
literal|10
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|13
decl_stmt|;
name|uint32_t
name|invalidate
range|:
literal|1
decl_stmt|;
name|uint32_t
name|num_posted
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|pd_rxulp_db_t
typedef|;
end_typedef

begin_comment
comment|/* TX doorbell */
end_comment

begin_typedef
typedef|typedef
union|union
name|pd_txulp_db_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|rsvd1
range|:
literal|2
decl_stmt|;
name|uint32_t
name|num_posted
range|:
literal|14
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|6
decl_stmt|;
name|uint32_t
name|qid
range|:
literal|10
decl_stmt|;
else|#
directive|else
name|uint32_t
name|qid
range|:
literal|10
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|6
decl_stmt|;
name|uint32_t
name|num_posted
range|:
literal|14
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|pd_txulp_db_t
typedef|;
end_typedef

begin_comment
comment|/* CQ doorbell */
end_comment

begin_typedef
typedef|typedef
union|union
name|cq_db_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|rsvd1
range|:
literal|2
decl_stmt|;
name|uint32_t
name|rearm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|num_popped
range|:
literal|13
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|5
decl_stmt|;
name|uint32_t
name|event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|qid
range|:
literal|10
decl_stmt|;
else|#
directive|else
name|uint32_t
name|qid
range|:
literal|10
decl_stmt|;
name|uint32_t
name|event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|5
decl_stmt|;
name|uint32_t
name|num_popped
range|:
literal|13
decl_stmt|;
name|uint32_t
name|rearm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|cq_db_t
typedef|;
end_typedef

begin_comment
comment|/* EQ doorbell */
end_comment

begin_typedef
typedef|typedef
union|union
name|eq_db_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|rsvd1
range|:
literal|2
decl_stmt|;
name|uint32_t
name|rearm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|num_popped
range|:
literal|13
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|5
decl_stmt|;
name|uint32_t
name|event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|clrint
range|:
literal|1
decl_stmt|;
name|uint32_t
name|qid
range|:
literal|9
decl_stmt|;
else|#
directive|else
name|uint32_t
name|qid
range|:
literal|9
decl_stmt|;
name|uint32_t
name|clrint
range|:
literal|1
decl_stmt|;
name|uint32_t
name|event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|5
decl_stmt|;
name|uint32_t
name|num_popped
range|:
literal|13
decl_stmt|;
name|uint32_t
name|rearm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|eq_db_t
typedef|;
end_typedef

begin_comment
comment|/* bootstrap mbox doorbell */
end_comment

begin_typedef
typedef|typedef
union|union
name|pd_mpu_mbox_db_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|address
range|:
literal|30
decl_stmt|;
name|uint32_t
name|hi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ready
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|uint32_t
name|ready
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|address
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|pd_mpu_mbox_db_t
typedef|;
end_typedef

begin_comment
comment|/* MQ ring doorbell */
end_comment

begin_typedef
typedef|typedef
union|union
name|pd_mq_db_u
block|{
name|uint32_t
name|dw0
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|rsvd1
range|:
literal|2
decl_stmt|;
name|uint32_t
name|num_posted
range|:
literal|14
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|5
decl_stmt|;
name|uint32_t
name|mq_id
range|:
literal|11
decl_stmt|;
else|#
directive|else
name|uint32_t
name|mq_id
range|:
literal|11
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|5
decl_stmt|;
name|uint32_t
name|num_posted
range|:
literal|14
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|bits
struct|;
block|}
name|pd_mq_db_t
typedef|;
end_typedef

begin_comment
comment|/*  * Event Queue Entry  */
end_comment

begin_struct
struct|struct
name|oce_eqe
block|{
name|uint32_t
name|evnt
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* MQ scatter gather entry. Array of these make an SGL */
end_comment

begin_struct
struct|struct
name|oce_mq_sge
block|{
name|uint32_t
name|pa_lo
decl_stmt|;
name|uint32_t
name|pa_hi
decl_stmt|;
name|uint32_t
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * payload can contain an SGL or an embedded array of upto 59 dwords  */
end_comment

begin_struct
struct|struct
name|oce_mbx_payload
block|{
union|union
block|{
union|union
block|{
name|struct
name|oce_mq_sge
name|sgl
index|[
name|MAX_MBX_SGE
index|]
decl_stmt|;
name|uint32_t
name|embedded
index|[
literal|59
index|]
decl_stmt|;
block|}
name|u1
union|;
name|uint32_t
name|dw
index|[
literal|59
index|]
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * MQ MBX structure  */
end_comment

begin_struct
struct|struct
name|oce_mbx
block|{
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|special
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|sge_count
range|:
literal|5
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|2
decl_stmt|;
name|uint32_t
name|embedded
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|uint32_t
name|embedded
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|2
decl_stmt|;
name|uint32_t
name|sge_count
range|:
literal|5
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|special
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|uint32_t
name|dw0
decl_stmt|;
block|}
name|u0
union|;
name|uint32_t
name|payload_length
decl_stmt|;
name|uint32_t
name|tag
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|rsvd2
index|[
literal|1
index|]
decl_stmt|;
name|struct
name|oce_mbx_payload
name|payload
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* completion queue entry for MQ */
end_comment

begin_struct
struct|struct
name|oce_mq_cqe
block|{
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw0 */
name|uint32_t
name|extended_status
range|:
literal|16
decl_stmt|;
name|uint32_t
name|completion_status
range|:
literal|16
decl_stmt|;
comment|/* dw1 dw2 */
name|uint32_t
name|mq_tag
index|[
literal|2
index|]
decl_stmt|;
comment|/* dw3 */
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|async_event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hpi_buffer_cmpl
range|:
literal|1
decl_stmt|;
name|uint32_t
name|completed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|consumed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|27
decl_stmt|;
else|#
directive|else
comment|/* dw0 */
name|uint32_t
name|completion_status
range|:
literal|16
decl_stmt|;
name|uint32_t
name|extended_status
range|:
literal|16
decl_stmt|;
comment|/* dw1 dw2 */
name|uint32_t
name|mq_tag
index|[
literal|2
index|]
decl_stmt|;
comment|/* dw3 */
name|uint32_t
name|rsvd0
range|:
literal|27
decl_stmt|;
name|uint32_t
name|consumed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|completed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hpi_buffer_cmpl
range|:
literal|1
decl_stmt|;
name|uint32_t
name|async_event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|uint32_t
name|dw
index|[
literal|4
index|]
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* Mailbox Completion Status Codes */
end_comment

begin_enum
enum|enum
name|MBX_COMPLETION_STATUS
block|{
name|MBX_CQE_STATUS_SUCCESS
init|=
literal|0x00
block|,
name|MBX_CQE_STATUS_INSUFFICIENT_PRIVILEDGES
init|=
literal|0x01
block|,
name|MBX_CQE_STATUS_INVALID_PARAMETER
init|=
literal|0x02
block|,
name|MBX_CQE_STATUS_INSUFFICIENT_RESOURCES
init|=
literal|0x03
block|,
name|MBX_CQE_STATUS_QUEUE_FLUSHING
init|=
literal|0x04
block|,
name|MBX_CQE_STATUS_DMA_FAILED
init|=
literal|0x05
block|}
enum|;
end_enum

begin_struct
struct|struct
name|oce_async_cqe_link_state
block|{
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw0 */
name|uint8_t
name|speed
decl_stmt|;
name|uint8_t
name|duplex
decl_stmt|;
name|uint8_t
name|link_status
decl_stmt|;
name|uint8_t
name|phy_port
decl_stmt|;
comment|/* dw1 */
name|uint16_t
name|qos_link_speed
decl_stmt|;
name|uint8_t
name|rsvd0
decl_stmt|;
name|uint8_t
name|fault
decl_stmt|;
comment|/* dw2 */
name|uint32_t
name|event_tag
decl_stmt|;
comment|/* dw3 */
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|async_event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd2
range|:
literal|6
decl_stmt|;
name|uint32_t
name|event_type
range|:
literal|8
decl_stmt|;
name|uint32_t
name|event_code
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|8
decl_stmt|;
else|#
directive|else
comment|/* dw0 */
name|uint8_t
name|phy_port
decl_stmt|;
name|uint8_t
name|link_status
decl_stmt|;
name|uint8_t
name|duplex
decl_stmt|;
name|uint8_t
name|speed
decl_stmt|;
comment|/* dw1 */
name|uint8_t
name|fault
decl_stmt|;
name|uint8_t
name|rsvd0
decl_stmt|;
name|uint16_t
name|qos_link_speed
decl_stmt|;
comment|/* dw2 */
name|uint32_t
name|event_tag
decl_stmt|;
comment|/* dw3 */
name|uint32_t
name|rsvd1
range|:
literal|8
decl_stmt|;
name|uint32_t
name|event_code
range|:
literal|8
decl_stmt|;
name|uint32_t
name|event_type
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rsvd2
range|:
literal|6
decl_stmt|;
name|uint32_t
name|async_event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|uint32_t
name|dw
index|[
literal|4
index|]
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* MQ mailbox structure */
end_comment

begin_struct
struct|struct
name|oce_bmbx
block|{
name|struct
name|oce_mbx
name|mbx
decl_stmt|;
name|struct
name|oce_mq_cqe
name|cqe
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* ---[ MBXs start here ]---------------------------------------------- */
end_comment

begin_comment
comment|/* MBXs sub system codes */
end_comment

begin_enum
enum|enum
name|MBX_SUBSYSTEM_CODES
block|{
name|MBX_SUBSYSTEM_RSVD
init|=
literal|0
block|,
name|MBX_SUBSYSTEM_COMMON
init|=
literal|1
block|,
name|MBX_SUBSYSTEM_COMMON_ISCSI
init|=
literal|2
block|,
name|MBX_SUBSYSTEM_NIC
init|=
literal|3
block|,
name|MBX_SUBSYSTEM_TOE
init|=
literal|4
block|,
name|MBX_SUBSYSTEM_PXE_UNDI
init|=
literal|5
block|,
name|MBX_SUBSYSTEM_ISCSI_INI
init|=
literal|6
block|,
name|MBX_SUBSYSTEM_ISCSI_TGT
init|=
literal|7
block|,
name|MBX_SUBSYSTEM_MILI_PTL
init|=
literal|8
block|,
name|MBX_SUBSYSTEM_MILI_TMD
init|=
literal|9
block|,
name|MBX_SUBSYSTEM_RDMA
init|=
literal|10
block|,
name|MBX_SUBSYSTEM_LOWLEVEL
init|=
literal|11
block|,
name|MBX_SUBSYSTEM_LRO
init|=
literal|13
block|,
name|IOCBMBX_SUBSYSTEM_DCBX
init|=
literal|15
block|,
name|IOCBMBX_SUBSYSTEM_DIAG
init|=
literal|16
block|,
name|IOCBMBX_SUBSYSTEM_VENDOR
init|=
literal|17
block|}
enum|;
end_enum

begin_comment
comment|/* common ioctl opcodes */
end_comment

begin_enum
enum|enum
name|COMMON_SUBSYSTEM_OPCODES
block|{
comment|/* These opcodes are common to both networking and storage PCI functions  * They are used to reserve resources and configure CNA. These opcodes  * all use the MBX_SUBSYSTEM_COMMON subsystem code.  */
name|OPCODE_COMMON_QUERY_IFACE_MAC
init|=
literal|1
block|,
name|OPCODE_COMMON_SET_IFACE_MAC
init|=
literal|2
block|,
name|OPCODE_COMMON_SET_IFACE_MULTICAST
init|=
literal|3
block|,
name|OPCODE_COMMON_CONFIG_IFACE_VLAN
init|=
literal|4
block|,
name|OPCODE_COMMON_QUERY_LINK_CONFIG
init|=
literal|5
block|,
name|OPCODE_COMMON_READ_FLASHROM
init|=
literal|6
block|,
name|OPCODE_COMMON_WRITE_FLASHROM
init|=
literal|7
block|,
name|OPCODE_COMMON_QUERY_MAX_MBX_BUFFER_SIZE
init|=
literal|8
block|,
name|OPCODE_COMMON_CREATE_CQ
init|=
literal|12
block|,
name|OPCODE_COMMON_CREATE_EQ
init|=
literal|13
block|,
name|OPCODE_COMMON_CREATE_MQ
init|=
literal|21
block|,
name|OPCODE_COMMON_GET_QOS
init|=
literal|27
block|,
name|OPCODE_COMMON_SET_QOS
init|=
literal|28
block|,
name|OPCODE_COMMON_READ_EPROM
init|=
literal|30
block|,
name|OPCODE_COMMON_GET_CNTL_ATTRIBUTES
init|=
literal|32
block|,
name|OPCODE_COMMON_NOP
init|=
literal|33
block|,
name|OPCODE_COMMON_SET_IFACE_RX_FILTER
init|=
literal|34
block|,
name|OPCODE_COMMON_GET_FW_VERSION
init|=
literal|35
block|,
name|OPCODE_COMMON_SET_FLOW_CONTROL
init|=
literal|36
block|,
name|OPCODE_COMMON_GET_FLOW_CONTROL
init|=
literal|37
block|,
name|OPCODE_COMMON_SET_FRAME_SIZE
init|=
literal|39
block|,
name|OPCODE_COMMON_MODIFY_EQ_DELAY
init|=
literal|41
block|,
name|OPCODE_COMMON_CREATE_IFACE
init|=
literal|50
block|,
name|OPCODE_COMMON_DESTROY_IFACE
init|=
literal|51
block|,
name|OPCODE_COMMON_MODIFY_MSI_MESSAGES
init|=
literal|52
block|,
name|OPCODE_COMMON_DESTROY_MQ
init|=
literal|53
block|,
name|OPCODE_COMMON_DESTROY_CQ
init|=
literal|54
block|,
name|OPCODE_COMMON_DESTROY_EQ
init|=
literal|55
block|,
name|OPCODE_COMMON_UPLOAD_TCP
init|=
literal|56
block|,
name|OPCODE_COMMON_SET_NTWK_LINK_SPEED
init|=
literal|57
block|,
name|OPCODE_COMMON_QUERY_FIRMWARE_CONFIG
init|=
literal|58
block|,
name|OPCODE_COMMON_ADD_IFACE_MAC
init|=
literal|59
block|,
name|OPCODE_COMMON_DEL_IFACE_MAC
init|=
literal|60
block|,
name|OPCODE_COMMON_FUNCTION_RESET
init|=
literal|61
block|,
name|OPCODE_COMMON_SET_PHYSICAL_LINK_CONFIG
init|=
literal|62
block|,
name|OPCODE_COMMON_GET_BOOT_CONFIG
init|=
literal|66
block|,
name|OPCPDE_COMMON_SET_BOOT_CONFIG
init|=
literal|67
block|,
name|OPCODE_COMMON_SET_BEACON_CONFIG
init|=
literal|69
block|,
name|OPCODE_COMMON_GET_BEACON_CONFIG
init|=
literal|70
block|,
name|OPCODE_COMMON_GET_PHYSICAL_LINK_CONFIG
init|=
literal|71
block|,
name|OPCODE_COMMON_GET_OEM_ATTRIBUTES
init|=
literal|76
block|,
name|OPCODE_COMMON_GET_PORT_NAME
init|=
literal|77
block|,
name|OPCODE_COMMON_GET_CONFIG_SIGNATURE
init|=
literal|78
block|,
name|OPCODE_COMMON_SET_CONFIG_SIGNATURE
init|=
literal|79
block|,
name|OPCODE_COMMON_SET_LOGICAL_LINK_CONFIG
init|=
literal|80
block|,
name|OPCODE_COMMON_GET_BE_CONFIGURATION_RESOURCES
init|=
literal|81
block|,
name|OPCODE_COMMON_SET_BE_CONFIGURATION_RESOURCES
init|=
literal|82
block|,
name|OPCODE_COMMON_GET_RESET_NEEDED
init|=
literal|84
block|,
name|OPCODE_COMMON_GET_SERIAL_NUMBER
init|=
literal|85
block|,
name|OPCODE_COMMON_GET_NCSI_CONFIG
init|=
literal|86
block|,
name|OPCODE_COMMON_SET_NCSI_CONFIG
init|=
literal|87
block|,
name|OPCODE_COMMON_CREATE_MQ_EXT
init|=
literal|90
block|,
name|OPCODE_COMMON_SET_FUNCTION_PRIVILEGES
init|=
literal|100
block|,
name|OPCODE_COMMON_SET_VF_PORT_TYPE
init|=
literal|101
block|,
name|OPCODE_COMMON_GET_PHY_CONFIG
init|=
literal|102
block|,
name|OPCODE_COMMON_SET_FUNCTIONAL_CAPS
init|=
literal|103
block|,
name|OPCODE_COMMON_GET_ADAPTER_ID
init|=
literal|110
block|,
name|OPCODE_COMMON_GET_UPGRADE_FEATURES
init|=
literal|111
block|,
name|OPCODE_COMMON_GET_INSTALLED_FEATURES
init|=
literal|112
block|,
name|OPCODE_COMMON_GET_AVAIL_PERSONALITIES
init|=
literal|113
block|,
name|OPCODE_COMMON_GET_CONFIG_PERSONALITIES
init|=
literal|114
block|,
name|OPCODE_COMMON_SEND_ACTIVATION
init|=
literal|115
block|,
name|OPCODE_COMMON_RESET_LICENSES
init|=
literal|116
block|,
name|OPCODE_COMMON_GET_CNTL_ADDL_ATTRIBUTES
init|=
literal|121
block|,
name|OPCODE_COMMON_QUERY_TCB
init|=
literal|144
block|,
name|OPCODE_COMMON_ADD_IFACE_QUEUE_FILTER
init|=
literal|145
block|,
name|OPCODE_COMMON_DEL_IFACE_QUEUE_FILTER
init|=
literal|146
block|,
name|OPCODE_COMMON_GET_IFACE_MAC_LIST
init|=
literal|147
block|,
name|OPCODE_COMMON_SET_IFACE_MAC_LIST
init|=
literal|148
block|,
name|OPCODE_COMMON_MODIFY_CQ
init|=
literal|149
block|,
name|OPCODE_COMMON_GET_IFACE_VLAN_LIST
init|=
literal|150
block|,
name|OPCODE_COMMON_SET_IFACE_VLAN_LIST
init|=
literal|151
block|,
name|OPCODE_COMMON_GET_HSW_CONFIG
init|=
literal|152
block|,
name|OPCODE_COMMON_SET_HSW_CONFIG
init|=
literal|153
block|,
name|OPCODE_COMMON_GET_RESOURCE_EXTENT_INFO
init|=
literal|154
block|,
name|OPCODE_COMMON_GET_ALLOCATED_RESOURCE_EXTENTS
init|=
literal|155
block|,
name|OPCODE_COMMON_ALLOC_RESOURCE_EXTENTS
init|=
literal|156
block|,
name|OPCODE_COMMON_DEALLOC_RESOURCE_EXTENTS
init|=
literal|157
block|,
name|OPCODE_COMMON_SET_DIAG_REGISTERS
init|=
literal|158
block|,
name|OPCODE_COMMON_GET_FUNCTION_CONFIG
init|=
literal|160
block|,
name|OPCODE_COMMON_GET_PROFILE_CAPACITIES
init|=
literal|161
block|,
name|OPCODE_COMMON_GET_MR_PROFILE_CAPACITIES
init|=
literal|162
block|,
name|OPCODE_COMMON_SET_MR_PROFILE_CAPACITIES
init|=
literal|163
block|,
name|OPCODE_COMMON_GET_PROFILE_CONFIG
init|=
literal|164
block|,
name|OPCODE_COMMON_SET_PROFILE_CONFIG
init|=
literal|165
block|,
name|OPCODE_COMMON_GET_PROFILE_LIST
init|=
literal|166
block|,
name|OPCODE_COMMON_GET_ACTIVE_PROFILE
init|=
literal|167
block|,
name|OPCODE_COMMON_SET_ACTIVE_PROFILE
init|=
literal|168
block|,
name|OPCODE_COMMON_GET_FUNCTION_PRIVILEGES
init|=
literal|170
block|,
name|OPCODE_COMMON_READ_OBJECT
init|=
literal|171
block|,
name|OPCODE_COMMON_WRITE_OBJECT
init|=
literal|172
block|}
enum|;
end_enum

begin_comment
comment|/* common ioctl header */
end_comment

begin_define
define|#
directive|define
name|OCE_MBX_VER_V2
value|0x0002
end_define

begin_comment
comment|/* Version V2 mailbox command */
end_comment

begin_define
define|#
directive|define
name|OCE_MBX_VER_V1
value|0x0001
end_define

begin_comment
comment|/* Version V1 mailbox command */
end_comment

begin_define
define|#
directive|define
name|OCE_MBX_VER_V0
value|0x0000
end_define

begin_comment
comment|/* Version V0 mailbox command */
end_comment

begin_struct
struct|struct
name|mbx_hdr
block|{
union|union
block|{
name|uint32_t
name|dw
index|[
literal|4
index|]
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw 0 */
name|uint32_t
name|domain
range|:
literal|8
decl_stmt|;
name|uint32_t
name|port_number
range|:
literal|8
decl_stmt|;
name|uint32_t
name|subsystem
range|:
literal|8
decl_stmt|;
name|uint32_t
name|opcode
range|:
literal|8
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|timeout
decl_stmt|;
comment|/* dw 2 */
name|uint32_t
name|request_length
decl_stmt|;
comment|/* dw 3 */
name|uint32_t
name|rsvd0
range|:
literal|24
decl_stmt|;
name|uint32_t
name|version
range|:
literal|8
decl_stmt|;
else|#
directive|else
comment|/* dw 0 */
name|uint32_t
name|opcode
range|:
literal|8
decl_stmt|;
name|uint32_t
name|subsystem
range|:
literal|8
decl_stmt|;
name|uint32_t
name|port_number
range|:
literal|8
decl_stmt|;
name|uint32_t
name|domain
range|:
literal|8
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|timeout
decl_stmt|;
comment|/* dw 2 */
name|uint32_t
name|request_length
decl_stmt|;
comment|/* dw 3 */
name|uint32_t
name|version
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw 0 */
name|uint32_t
name|domain
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|8
decl_stmt|;
name|uint32_t
name|subsystem
range|:
literal|8
decl_stmt|;
name|uint32_t
name|opcode
range|:
literal|8
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|additional_status
range|:
literal|8
decl_stmt|;
name|uint32_t
name|status
range|:
literal|8
decl_stmt|;
else|#
directive|else
comment|/* dw 0 */
name|uint32_t
name|opcode
range|:
literal|8
decl_stmt|;
name|uint32_t
name|subsystem
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|8
decl_stmt|;
name|uint32_t
name|domain
range|:
literal|8
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|status
range|:
literal|8
decl_stmt|;
name|uint32_t
name|additional_status
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|rsp_length
decl_stmt|;
name|uint32_t
name|actual_rsp_length
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|OCE_BMBX_RHDR_SZ
value|20
end_define

begin_define
define|#
directive|define
name|OCE_MBX_RRHDR_SZ
value|sizeof (struct mbx_hdr)
end_define

begin_define
define|#
directive|define
name|OCE_MBX_ADDL_STATUS
parameter_list|(
name|_MHDR
parameter_list|)
value|((_MHDR)->u0.rsp.additional_status)
end_define

begin_define
define|#
directive|define
name|OCE_MBX_STATUS
parameter_list|(
name|_MHDR
parameter_list|)
value|((_MHDR)->u0.rsp.status)
end_define

begin_comment
comment|/* [05] OPCODE_COMMON_QUERY_LINK_CONFIG */
end_comment

begin_struct
struct|struct
name|mbx_query_common_link_config
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
comment|/* dw 0 */
name|uint8_t
name|physical_port
decl_stmt|;
name|uint8_t
name|mac_duplex
decl_stmt|;
name|uint8_t
name|mac_speed
decl_stmt|;
name|uint8_t
name|mac_fault
decl_stmt|;
comment|/* dw 1 */
name|uint8_t
name|mgmt_mac_duplex
decl_stmt|;
name|uint8_t
name|mgmt_mac_speed
decl_stmt|;
name|uint16_t
name|qos_link_speed
decl_stmt|;
name|uint32_t
name|logical_link_status
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [57] OPCODE_COMMON_SET_LINK_SPEED */
end_comment

begin_struct
struct|struct
name|mbx_set_common_link_speed
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint8_t
name|rsvd0
decl_stmt|;
name|uint8_t
name|mac_speed
decl_stmt|;
name|uint8_t
name|virtual_port
decl_stmt|;
name|uint8_t
name|physical_port
decl_stmt|;
else|#
directive|else
name|uint8_t
name|physical_port
decl_stmt|;
name|uint8_t
name|virtual_port
decl_stmt|;
name|uint8_t
name|mac_speed
decl_stmt|;
name|uint8_t
name|rsvd0
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
name|uint32_t
name|dw
decl_stmt|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mac_address_format
block|{
name|uint16_t
name|size_of_struct
decl_stmt|;
name|uint8_t
name|mac_addr
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* [01] OPCODE_COMMON_QUERY_IFACE_MAC */
end_comment

begin_struct
struct|struct
name|mbx_query_common_iface_mac
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint16_t
name|if_id
decl_stmt|;
name|uint8_t
name|permanent
decl_stmt|;
name|uint8_t
name|type
decl_stmt|;
else|#
directive|else
name|uint8_t
name|type
decl_stmt|;
name|uint8_t
name|permanent
decl_stmt|;
name|uint16_t
name|if_id
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
name|struct
name|mac_address_format
name|mac
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [02] OPCODE_COMMON_SET_IFACE_MAC */
end_comment

begin_struct
struct|struct
name|mbx_set_common_iface_mac
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw 0 */
name|uint16_t
name|if_id
decl_stmt|;
name|uint8_t
name|invalidate
decl_stmt|;
name|uint8_t
name|type
decl_stmt|;
else|#
directive|else
comment|/* dw 0 */
name|uint8_t
name|type
decl_stmt|;
name|uint8_t
name|invalidate
decl_stmt|;
name|uint16_t
name|if_id
decl_stmt|;
endif|#
directive|endif
comment|/* dw 1 */
name|struct
name|mac_address_format
name|mac
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
name|uint32_t
name|dw
index|[
literal|2
index|]
decl_stmt|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [03] OPCODE_COMMON_SET_IFACE_MULTICAST */
end_comment

begin_struct
struct|struct
name|mbx_set_common_iface_multicast
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
comment|/* dw 0 */
name|uint16_t
name|num_mac
decl_stmt|;
name|uint8_t
name|promiscuous
decl_stmt|;
name|uint8_t
name|if_id
decl_stmt|;
comment|/* dw 1-48 */
struct|struct
block|{
name|uint8_t
name|byte
index|[
literal|6
index|]
decl_stmt|;
block|}
name|mac
index|[
literal|32
index|]
struct|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
name|uint32_t
name|dw
index|[
literal|49
index|]
decl_stmt|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|qinq_vlan
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint16_t
name|inner
decl_stmt|;
name|uint16_t
name|outer
decl_stmt|;
else|#
directive|else
name|uint16_t
name|outer
decl_stmt|;
name|uint16_t
name|inner
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|normal_vlan
block|{
name|uint16_t
name|vtag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ntwk_if_vlan_tag
block|{
union|union
block|{
name|struct
name|normal_vlan
name|normal
decl_stmt|;
name|struct
name|qinq_vlan
name|qinq
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [50] OPCODE_COMMON_CREATE_IFACE */
end_comment

begin_struct
struct|struct
name|mbx_create_common_iface
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|version
decl_stmt|;
name|uint32_t
name|cap_flags
decl_stmt|;
name|uint32_t
name|enable_flags
decl_stmt|;
name|uint8_t
name|mac_addr
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|rsvd0
decl_stmt|;
name|uint8_t
name|mac_invalid
decl_stmt|;
name|struct
name|ntwk_if_vlan_tag
name|vlan_tag
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|if_id
decl_stmt|;
name|uint32_t
name|pmac_id
decl_stmt|;
block|}
name|rsp
struct|;
name|uint32_t
name|dw
index|[
literal|4
index|]
decl_stmt|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [51] OPCODE_COMMON_DESTROY_IFACE */
end_comment

begin_struct
struct|struct
name|mbx_destroy_common_iface
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|if_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
name|uint32_t
name|dw
decl_stmt|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* event queue context structure */
end_comment

begin_struct
struct|struct
name|oce_eq_ctx
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|dw4rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|num_pages
range|:
literal|16
decl_stmt|;
name|uint32_t
name|size
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw5rsvd1
range|:
literal|29
decl_stmt|;
name|uint32_t
name|armed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw6rsvd2
range|:
literal|2
decl_stmt|;
name|uint32_t
name|count
range|:
literal|3
decl_stmt|;
name|uint32_t
name|dw6rsvd1
range|:
literal|26
decl_stmt|;
name|uint32_t
name|dw7rsvd2
range|:
literal|9
decl_stmt|;
name|uint32_t
name|delay_mult
range|:
literal|10
decl_stmt|;
name|uint32_t
name|dw7rsvd1
range|:
literal|13
decl_stmt|;
name|uint32_t
name|dw8rsvd1
decl_stmt|;
else|#
directive|else
name|uint32_t
name|num_pages
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dw4rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dw5rsvd1
range|:
literal|29
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|size
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw6rsvd1
range|:
literal|26
decl_stmt|;
name|uint32_t
name|count
range|:
literal|3
decl_stmt|;
name|uint32_t
name|dw6rsvd2
range|:
literal|2
decl_stmt|;
name|uint32_t
name|armed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw7rsvd1
range|:
literal|13
decl_stmt|;
name|uint32_t
name|delay_mult
range|:
literal|10
decl_stmt|;
name|uint32_t
name|dw7rsvd2
range|:
literal|9
decl_stmt|;
name|uint32_t
name|dw8rsvd1
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_comment
comment|/* [13] OPCODE_COMMON_CREATE_EQ */
end_comment

begin_struct
struct|struct
name|mbx_create_common_eq
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|struct
name|oce_eq_ctx
name|ctx
decl_stmt|;
name|struct
name|phys_addr
name|pages
index|[
literal|8
index|]
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint16_t
name|eq_id
decl_stmt|;
name|uint16_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [55] OPCODE_COMMON_DESTROY_EQ */
end_comment

begin_struct
struct|struct
name|mbx_destroy_common_eq
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint16_t
name|rsvd0
decl_stmt|;
name|uint16_t
name|id
decl_stmt|;
else|#
directive|else
name|uint16_t
name|id
decl_stmt|;
name|uint16_t
name|rsvd0
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* SLI-4 CQ context - use version V0 for B3, version V2 for Lancer */
end_comment

begin_typedef
typedef|typedef
union|union
name|oce_cq_ctx_u
block|{
name|uint32_t
name|dw
index|[
literal|5
index|]
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw4 */
name|uint32_t
name|dw4rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|num_pages
range|:
literal|16
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|eventable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw5rsvd3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|count
range|:
literal|2
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|12
decl_stmt|;
name|uint32_t
name|nodelay
range|:
literal|1
decl_stmt|;
name|uint32_t
name|coalesce_wm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|dw5rsvd1
range|:
literal|12
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|armed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw6rsvd2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|eq_id
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dw6rsvd1
range|:
literal|22
decl_stmt|;
else|#
directive|else
comment|/* dw4 */
name|uint32_t
name|num_pages
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dw4rsvd1
range|:
literal|16
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|dw5rsvd1
range|:
literal|12
decl_stmt|;
name|uint32_t
name|coalesce_wm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|nodelay
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|12
decl_stmt|;
name|uint32_t
name|count
range|:
literal|2
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw5rsvd3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|eventable
range|:
literal|1
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|dw6rsvd1
range|:
literal|22
decl_stmt|;
name|uint32_t
name|eq_id
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dw6rsvd2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|armed
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
comment|/* dw7 */
name|uint32_t
name|dw7rsvd1
decl_stmt|;
comment|/* dw8 */
name|uint32_t
name|dw8rsvd1
decl_stmt|;
block|}
name|v0
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw4 */
name|uint32_t
name|dw4rsvd1
range|:
literal|8
decl_stmt|;
name|uint32_t
name|page_size
range|:
literal|8
decl_stmt|;
name|uint32_t
name|num_pages
range|:
literal|16
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|eventable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw5rsvd3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|count
range|:
literal|2
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|11
decl_stmt|;
name|uint32_t
name|autovalid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|nodelay
range|:
literal|1
decl_stmt|;
name|uint32_t
name|coalesce_wm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|dw5rsvd1
range|:
literal|12
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|armed
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw6rsvd1
range|:
literal|15
decl_stmt|;
name|uint32_t
name|eq_id
range|:
literal|16
decl_stmt|;
comment|/* dw7 */
name|uint32_t
name|dw7rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|cqe_count
range|:
literal|16
decl_stmt|;
else|#
directive|else
comment|/* dw4 */
name|uint32_t
name|num_pages
range|:
literal|16
decl_stmt|;
name|uint32_t
name|page_size
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dw4rsvd1
range|:
literal|8
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|dw5rsvd1
range|:
literal|12
decl_stmt|;
name|uint32_t
name|coalesce_wm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|nodelay
range|:
literal|1
decl_stmt|;
name|uint32_t
name|autovalid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|11
decl_stmt|;
name|uint32_t
name|count
range|:
literal|2
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw5rsvd3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|eventable
range|:
literal|1
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|eq_id
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dw6rsvd1
range|:
literal|15
decl_stmt|;
name|uint32_t
name|armed
range|:
literal|1
decl_stmt|;
comment|/* dw7 */
name|uint32_t
name|cqe_count
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dw7rsvd1
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
comment|/* dw8 */
name|uint32_t
name|dw8rsvd1
decl_stmt|;
block|}
name|v2
struct|;
block|}
name|oce_cq_ctx_t
typedef|;
end_typedef

begin_comment
comment|/* [12] OPCODE_COMMON_CREATE_CQ */
end_comment

begin_struct
struct|struct
name|mbx_create_common_cq
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|oce_cq_ctx_t
name|cq_ctx
decl_stmt|;
name|struct
name|phys_addr
name|pages
index|[
literal|4
index|]
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint16_t
name|cq_id
decl_stmt|;
name|uint16_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [54] OPCODE_COMMON_DESTROY_CQ */
end_comment

begin_struct
struct|struct
name|mbx_destroy_common_cq
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint16_t
name|rsvd0
decl_stmt|;
name|uint16_t
name|id
decl_stmt|;
else|#
directive|else
name|uint16_t
name|id
decl_stmt|;
name|uint16_t
name|rsvd0
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
union|union
name|oce_mq_ctx_u
block|{
name|uint32_t
name|dw
index|[
literal|5
index|]
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw4 */
name|uint32_t
name|dw4rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|num_pages
range|:
literal|16
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|cq_id
range|:
literal|10
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|2
decl_stmt|;
name|uint32_t
name|ring_size
range|:
literal|4
decl_stmt|;
name|uint32_t
name|dw5rsvd1
range|:
literal|16
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw6rsvd1
range|:
literal|31
decl_stmt|;
comment|/* dw7 */
name|uint32_t
name|dw7rsvd1
range|:
literal|21
decl_stmt|;
name|uint32_t
name|async_cq_id
range|:
literal|10
decl_stmt|;
name|uint32_t
name|async_cq_valid
range|:
literal|1
decl_stmt|;
else|#
directive|else
comment|/* dw4 */
name|uint32_t
name|num_pages
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dw4rsvd1
range|:
literal|16
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|dw5rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|ring_size
range|:
literal|4
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|2
decl_stmt|;
name|uint32_t
name|cq_id
range|:
literal|10
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|dw6rsvd1
range|:
literal|31
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
comment|/* dw7 */
name|uint32_t
name|async_cq_valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|async_cq_id
range|:
literal|10
decl_stmt|;
name|uint32_t
name|dw7rsvd1
range|:
literal|21
decl_stmt|;
endif|#
directive|endif
comment|/* dw8 */
name|uint32_t
name|dw8rsvd1
decl_stmt|;
block|}
name|v0
struct|;
block|}
name|oce_mq_ctx_t
typedef|;
end_typedef

begin_comment
comment|/**  * @brief [21] OPCODE_COMMON_CREATE_MQ  * A MQ must be at least 16 entries deep (corresponding to 1 page) and  * at most 128 entries deep (corresponding to 8 pages).  */
end_comment

begin_struct
struct|struct
name|mbx_create_common_mq
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|oce_mq_ctx_t
name|context
decl_stmt|;
name|struct
name|phys_addr
name|pages
index|[
literal|8
index|]
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|mq_id
range|:
literal|16
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|16
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [53] OPCODE_COMMON_DESTROY_MQ */
end_comment

begin_struct
struct|struct
name|mbx_destroy_common_mq
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint16_t
name|rsvd0
decl_stmt|;
name|uint16_t
name|id
decl_stmt|;
else|#
directive|else
name|uint16_t
name|id
decl_stmt|;
name|uint16_t
name|rsvd0
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [35] OPCODE_COMMON_GET_ FW_VERSION */
end_comment

begin_struct
struct|struct
name|mbx_get_common_fw_version
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint8_t
name|fw_ver_str
index|[
literal|32
index|]
decl_stmt|;
name|uint8_t
name|fw_on_flash_ver_str
index|[
literal|32
index|]
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [52] OPCODE_COMMON_CEV_MODIFY_MSI_MESSAGES */
end_comment

begin_struct
struct|struct
name|mbx_common_cev_modify_msi_messages
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|num_msi_msgs
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [36] OPCODE_COMMON_SET_FLOW_CONTROL */
end_comment

begin_comment
comment|/* [37] OPCODE_COMMON_GET_FLOW_CONTROL */
end_comment

begin_struct
struct|struct
name|mbx_common_get_set_flow_control
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint16_t
name|tx_flow_control
decl_stmt|;
name|uint16_t
name|rx_flow_control
decl_stmt|;
else|#
directive|else
name|uint16_t
name|rx_flow_control
decl_stmt|;
name|uint16_t
name|tx_flow_control
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_enum
enum|enum
name|e_flash_opcode
block|{
name|MGMT_FLASHROM_OPCODE_FLASH
init|=
literal|1
block|,
name|MGMT_FLASHROM_OPCODE_SAVE
init|=
literal|2
block|}
enum|;
end_enum

begin_comment
comment|/* [06]	OPCODE_READ_COMMON_FLASHROM */
end_comment

begin_comment
comment|/* [07]	OPCODE_WRITE_COMMON_FLASHROM */
end_comment

begin_struct
struct|struct
name|mbx_common_read_write_flashrom
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
name|uint32_t
name|flash_op_code
decl_stmt|;
name|uint32_t
name|flash_op_type
decl_stmt|;
name|uint32_t
name|data_buffer_size
decl_stmt|;
name|uint32_t
name|data_offset
decl_stmt|;
name|uint8_t
name|data_buffer
index|[
literal|4
index|]
decl_stmt|;
comment|/* + IMAGE_TRANSFER_SIZE */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_phy_info
block|{
name|uint16_t
name|phy_type
decl_stmt|;
name|uint16_t
name|interface_type
decl_stmt|;
name|uint32_t
name|misc_params
decl_stmt|;
name|uint16_t
name|ext_phy_details
decl_stmt|;
name|uint16_t
name|rsvd
decl_stmt|;
name|uint16_t
name|auto_speeds_supported
decl_stmt|;
name|uint16_t
name|fixed_speeds_supported
decl_stmt|;
name|uint32_t
name|future_use
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mbx_common_phy_info
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|struct
name|oce_phy_info
name|phy_info
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/*Lancer firmware*/
end_comment

begin_struct
struct|struct
name|mbx_lancer_common_write_object
block|{
union|union
block|{
struct|struct
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
name|uint32_t
name|write_length
range|:
literal|24
decl_stmt|;
name|uint32_t
name|rsvd
range|:
literal|7
decl_stmt|;
name|uint32_t
name|eof
range|:
literal|1
decl_stmt|;
name|uint32_t
name|write_offset
decl_stmt|;
name|uint8_t
name|object_name
index|[
literal|104
index|]
decl_stmt|;
name|uint32_t
name|descriptor_count
decl_stmt|;
name|uint32_t
name|buffer_length
decl_stmt|;
name|uint32_t
name|address_lower
decl_stmt|;
name|uint32_t
name|address_upper
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|subsystem
decl_stmt|;
name|uint8_t
name|rsvd1
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|status
decl_stmt|;
name|uint8_t
name|additional_status
decl_stmt|;
name|uint8_t
name|rsvd2
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|response_length
decl_stmt|;
name|uint32_t
name|actual_response_length
decl_stmt|;
name|uint32_t
name|actual_write_length
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * @brief MBX Common Quiery Firmaware Config  * This command retrieves firmware configuration parameters and adapter  * resources available to the driver originating the request. The firmware  * configuration defines supported protocols by the installed adapter firmware.  * This includes which ULP processors support the specified protocols and  * the number of TCP connections allowed for that protocol.  */
end_comment

begin_struct
struct|struct
name|mbx_common_query_fw_config
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|rsvd0
index|[
literal|30
index|]
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|config_number
decl_stmt|;
name|uint32_t
name|asic_revision
decl_stmt|;
name|uint32_t
name|port_id
decl_stmt|;
comment|/* used for stats retrieval */
name|uint32_t
name|function_mode
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|ulp_mode
decl_stmt|;
name|uint32_t
name|nic_wqid_base
decl_stmt|;
name|uint32_t
name|nic_wq_tot
decl_stmt|;
name|uint32_t
name|toe_wqid_base
decl_stmt|;
name|uint32_t
name|toe_wq_tot
decl_stmt|;
name|uint32_t
name|toe_rqid_base
decl_stmt|;
name|uint32_t
name|toe_rqid_tot
decl_stmt|;
name|uint32_t
name|toe_defrqid_base
decl_stmt|;
name|uint32_t
name|toe_defrqid_count
decl_stmt|;
name|uint32_t
name|lro_rqid_base
decl_stmt|;
name|uint32_t
name|lro_rqid_tot
decl_stmt|;
name|uint32_t
name|iscsi_icd_base
decl_stmt|;
name|uint32_t
name|iscsi_icd_count
decl_stmt|;
block|}
name|ulp
index|[
literal|2
index|]
struct|;
name|uint32_t
name|function_caps
decl_stmt|;
name|uint32_t
name|cqid_base
decl_stmt|;
name|uint32_t
name|cqid_tot
decl_stmt|;
name|uint32_t
name|eqid_base
decl_stmt|;
name|uint32_t
name|eqid_tot
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|CQFW_CONFIG_NUMBER
block|{
name|FCN_NIC_ISCSI_Initiator
init|=
literal|0x0
block|,
name|FCN_ISCSI_Target
init|=
literal|0x3
block|,
name|FCN_FCoE
init|=
literal|0x7
block|,
name|FCN_ISCSI_Initiator_Target
init|=
literal|0x9
block|,
name|FCN_NIC_RDMA_TOE
init|=
literal|0xA
block|,
name|FCN_NIC_RDMA_FCoE
init|=
literal|0xB
block|,
name|FCN_NIC_RDMA_iSCSI
init|=
literal|0xC
block|,
name|FCN_NIC_iSCSI_FCoE
init|=
literal|0xD
block|}
enum|;
end_enum

begin_comment
comment|/**  * @brief Function Capabilites  * This field contains the flags indicating the capabilities of  * the SLI Hostâs PCI function.  */
end_comment

begin_enum
enum|enum
name|CQFW_FUNCTION_CAPABILITIES
block|{
name|FNC_UNCLASSIFIED_STATS
init|=
literal|0x1
block|,
name|FNC_RSS
init|=
literal|0x2
block|,
name|FNC_PROMISCUOUS
init|=
literal|0x4
block|,
name|FNC_LEGACY_MODE
init|=
literal|0x8
block|,
name|FNC_HDS
init|=
literal|0x4000
block|,
name|FNC_VMQ
init|=
literal|0x10000
block|,
name|FNC_NETQ
init|=
literal|0x20000
block|,
name|FNC_QGROUPS
init|=
literal|0x40000
block|,
name|FNC_LRO
init|=
literal|0x100000
block|,
name|FNC_VLAN_OFFLOAD
init|=
literal|0x800000
block|}
enum|;
end_enum

begin_enum
enum|enum
name|CQFW_ULP_MODES_SUPPORTED
block|{
name|ULP_TOE_MODE
init|=
literal|0x1
block|,
name|ULP_NIC_MODE
init|=
literal|0x2
block|,
name|ULP_RDMA_MODE
init|=
literal|0x4
block|,
name|ULP_ISCSI_INI_MODE
init|=
literal|0x10
block|,
name|ULP_ISCSI_TGT_MODE
init|=
literal|0x20
block|,
name|ULP_FCOE_INI_MODE
init|=
literal|0x40
block|,
name|ULP_FCOE_TGT_MODE
init|=
literal|0x80
block|,
name|ULP_DAL_MODE
init|=
literal|0x100
block|,
name|ULP_LRO_MODE
init|=
literal|0x200
block|}
enum|;
end_enum

begin_comment
comment|/**  * @brief Function Modes Supported  * Valid function modes (or protocol-types) supported on the SLI-Hostâs  * PCIe function.  This field is a logical OR of the following values:  */
end_comment

begin_enum
enum|enum
name|CQFW_FUNCTION_MODES_SUPPORTED
block|{
name|FNM_TOE_MODE
init|=
literal|0x1
block|,
comment|/* TCP offload supported */
name|FNM_NIC_MODE
init|=
literal|0x2
block|,
comment|/* Raw Ethernet supported */
name|FNM_RDMA_MODE
init|=
literal|0x4
block|,
comment|/* RDMA protocol supported */
name|FNM_VM_MODE
init|=
literal|0x8
block|,
comment|/* Virtual Machines supported  */
name|FNM_ISCSI_INI_MODE
init|=
literal|0x10
block|,
comment|/* iSCSI initiator supported */
name|FNM_ISCSI_TGT_MODE
init|=
literal|0x20
block|,
comment|/* iSCSI target plus initiator */
name|FNM_FCOE_INI_MODE
init|=
literal|0x40
block|,
comment|/* FCoE Initiator supported */
name|FNM_FCOE_TGT_MODE
init|=
literal|0x80
block|,
comment|/* FCoE target supported */
name|FNM_DAL_MODE
init|=
literal|0x100
block|,
comment|/* DAL supported */
name|FNM_LRO_MODE
init|=
literal|0x200
block|,
comment|/* LRO supported */
name|FNM_FLEX10_MODE
init|=
literal|0x400
block|,
comment|/* QinQ, FLEX-10 or VNIC */
name|FNM_NCSI_MODE
init|=
literal|0x800
block|,
comment|/* NCSI supported */
name|FNM_IPV6_MODE
init|=
literal|0x1000
block|,
comment|/* IPV6 stack enabled */
name|FNM_BE2_COMPAT_MODE
init|=
literal|0x2000
block|,
comment|/* BE2 compatibility (BE3 disable)*/
name|FNM_INVALID_MODE
init|=
literal|0x8000
block|,
comment|/* Invalid */
name|FNM_BE3_COMPAT_MODE
init|=
literal|0x10000
block|,
comment|/* BE3 features */
name|FNM_VNIC_MODE
init|=
literal|0x20000
block|,
comment|/* Set when IBM vNIC mode is set */
name|FNM_VNTAG_MODE
init|=
literal|0x40000
block|,
comment|/* Set when VNTAG mode is set */
name|FNM_UMC_MODE
init|=
literal|0x80000
block|,
comment|/* Set when UMC mode is set */
name|FNM_UMC_DEF_EN
init|=
literal|0x100000
block|,
comment|/* Set when UMC Default is set */
name|FNM_ONE_GB_EN
init|=
literal|0x200000
block|,
comment|/* Set when 1GB Default is set */
name|FNM_VNIC_DEF_VALID
init|=
literal|0x400000
block|,
comment|/* Set when VNIC_DEF_EN is valid */
name|FNM_VNIC_DEF_EN
init|=
literal|0x800000
comment|/* Set when VNIC Default enabled */
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mbx_common_config_vlan
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint8_t
name|num_vlans
decl_stmt|;
name|uint8_t
name|untagged
decl_stmt|;
name|uint8_t
name|promisc
decl_stmt|;
name|uint8_t
name|if_id
decl_stmt|;
else|#
directive|else
name|uint8_t
name|if_id
decl_stmt|;
name|uint8_t
name|promisc
decl_stmt|;
name|uint8_t
name|untagged
decl_stmt|;
name|uint8_t
name|num_vlans
decl_stmt|;
endif|#
directive|endif
union|union
block|{
name|struct
name|normal_vlan
name|normal_vlans
index|[
literal|64
index|]
decl_stmt|;
name|struct
name|qinq_vlan
name|qinq_vlans
index|[
literal|32
index|]
decl_stmt|;
block|}
name|tags
union|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
struct|struct
name|iface_rx_filter_ctx
block|{
name|uint32_t
name|global_flags_mask
decl_stmt|;
name|uint32_t
name|global_flags
decl_stmt|;
name|uint32_t
name|iface_flags_mask
decl_stmt|;
name|uint32_t
name|iface_flags
decl_stmt|;
name|uint32_t
name|if_id
decl_stmt|;
define|#
directive|define
name|IFACE_RX_NUM_MCAST_MAX
value|64
name|uint32_t
name|num_mcast
decl_stmt|;
struct|struct
name|mbx_mcast_addr
block|{
name|uint8_t
name|byte
index|[
literal|6
index|]
decl_stmt|;
block|}
name|mac
index|[
name|IFACE_RX_NUM_MCAST_MAX
index|]
struct|;
block|}
name|iface_rx_filter_ctx_t
typedef|;
end_typedef

begin_comment
comment|/* [34] OPCODE_COMMON_SET_IFACE_RX_FILTER */
end_comment

begin_struct
struct|struct
name|mbx_set_common_iface_rx_filter
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
name|iface_rx_filter_ctx_t
name|req
decl_stmt|;
name|iface_rx_filter_ctx_t
name|rsp
decl_stmt|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [41] OPCODE_COMMON_MODIFY_EQ_DELAY */
end_comment

begin_struct
struct|struct
name|mbx_modify_common_eq_delay
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|num_eq
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|eq_id
decl_stmt|;
name|uint32_t
name|phase
decl_stmt|;
name|uint32_t
name|dm
decl_stmt|;
block|}
name|delay
index|[
literal|8
index|]
struct|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [59] OPCODE_ADD_COMMON_IFACE_MAC */
end_comment

begin_struct
struct|struct
name|mbx_add_common_iface_mac
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|if_id
decl_stmt|;
name|uint8_t
name|mac_address
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|rsvd0
index|[
literal|2
index|]
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|pmac_id
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [60] OPCODE_DEL_COMMON_IFACE_MAC */
end_comment

begin_struct
struct|struct
name|mbx_del_common_iface_mac
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|if_id
decl_stmt|;
name|uint32_t
name|pmac_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [8] OPCODE_QUERY_COMMON_MAX_MBX_BUFFER_SIZE */
end_comment

begin_struct
struct|struct
name|mbx_query_common_max_mbx_buffer_size
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|max_ioctl_bufsz
decl_stmt|;
block|}
name|rsp
struct|;
block|}
struct|;
end_struct

begin_comment
comment|/* [61] OPCODE_COMMON_FUNCTION_RESET */
end_comment

begin_struct
struct|struct
name|ioctl_common_function_reset
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* [80] OPCODE_COMMON_FUNCTION_LINK_CONFIG */
end_comment

begin_struct
struct|struct
name|mbx_common_func_link_cfg
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|enable
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [103] OPCODE_COMMON_SET_FUNCTIONAL_CAPS */
end_comment

begin_define
define|#
directive|define
name|CAP_SW_TIMESTAMPS
value|2
end_define

begin_define
define|#
directive|define
name|CAP_BE3_NATIVE_ERX_API
value|4
end_define

begin_struct
struct|struct
name|mbx_common_set_function_cap
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|valid_capability_flags
decl_stmt|;
name|uint32_t
name|capability_flags
decl_stmt|;
name|uint8_t
name|sbz
index|[
literal|212
index|]
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|valid_capability_flags
decl_stmt|;
name|uint32_t
name|capability_flags
decl_stmt|;
name|uint8_t
name|sbz
index|[
literal|212
index|]
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mbx_lowlevel_test_loopback_mode
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|loopback_type
decl_stmt|;
name|uint32_t
name|num_pkts
decl_stmt|;
name|uint64_t
name|pattern
decl_stmt|;
name|uint32_t
name|src_port
decl_stmt|;
name|uint32_t
name|dest_port
decl_stmt|;
name|uint32_t
name|pkt_size
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|status
decl_stmt|;
name|uint32_t
name|num_txfer
decl_stmt|;
name|uint32_t
name|num_rx
decl_stmt|;
name|uint32_t
name|miscomp_off
decl_stmt|;
name|uint32_t
name|ticks_compl
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mbx_lowlevel_set_loopback_mode
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint8_t
name|src_port
decl_stmt|;
name|uint8_t
name|dest_port
decl_stmt|;
name|uint8_t
name|loopback_type
decl_stmt|;
name|uint8_t
name|loopback_state
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint8_t
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|flash_file_hdr
block|{
name|uint8_t
name|sign
index|[
literal|52
index|]
decl_stmt|;
name|uint8_t
name|ufi_version
index|[
literal|4
index|]
decl_stmt|;
name|uint32_t
name|file_len
decl_stmt|;
name|uint32_t
name|cksum
decl_stmt|;
name|uint32_t
name|antidote
decl_stmt|;
name|uint32_t
name|num_imgs
decl_stmt|;
name|uint8_t
name|build
index|[
literal|24
index|]
decl_stmt|;
name|uint8_t
name|rsvd
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|image_hdr
block|{
name|uint32_t
name|imageid
decl_stmt|;
name|uint32_t
name|imageoffset
decl_stmt|;
name|uint32_t
name|imagelength
decl_stmt|;
name|uint32_t
name|image_checksum
decl_stmt|;
name|uint8_t
name|image_version
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|flash_section_hdr
block|{
name|uint32_t
name|format_rev
decl_stmt|;
name|uint32_t
name|cksum
decl_stmt|;
name|uint32_t
name|antidote
decl_stmt|;
name|uint32_t
name|num_images
decl_stmt|;
name|uint8_t
name|id_string
index|[
literal|128
index|]
decl_stmt|;
name|uint32_t
name|rsvd
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|flash_section_entry
block|{
name|uint32_t
name|type
decl_stmt|;
name|uint32_t
name|offset
decl_stmt|;
name|uint32_t
name|pad_size
decl_stmt|;
name|uint32_t
name|image_size
decl_stmt|;
name|uint32_t
name|cksum
decl_stmt|;
name|uint32_t
name|entry_point
decl_stmt|;
name|uint32_t
name|rsvd0
decl_stmt|;
name|uint32_t
name|rsvd1
decl_stmt|;
name|uint8_t
name|ver_data
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|flash_sec_info
block|{
name|uint8_t
name|cookie
index|[
literal|32
index|]
decl_stmt|;
name|struct
name|flash_section_hdr
name|fsec_hdr
decl_stmt|;
name|struct
name|flash_section_entry
name|fsec_entry
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|LOWLEVEL_SUBSYSTEM_OPCODES
block|{
comment|/* Opcodes used for lowlevel functions common to many subystems.  * Some of these opcodes are used for diagnostic functions only.  * These opcodes use the MBX_SUBSYSTEM_LOWLEVEL subsystem code.  */
name|OPCODE_LOWLEVEL_TEST_LOOPBACK
init|=
literal|18
block|,
name|OPCODE_LOWLEVEL_SET_LOOPBACK_MODE
init|=
literal|19
block|,
name|OPCODE_LOWLEVEL_GET_LOOPBACK_MODE
init|=
literal|20
block|}
enum|;
end_enum

begin_enum
enum|enum
name|LLDP_SUBSYSTEM_OPCODES
block|{
comment|/* Opcodes used for LLDP susbsytem for configuring the LLDP state machines. */
name|OPCODE_LLDP_GET_CFG
init|=
literal|1
block|,
name|OPCODE_LLDP_SET_CFG
init|=
literal|2
block|,
name|OPCODE_LLDP_GET_STATS
init|=
literal|3
block|}
enum|;
end_enum

begin_enum
enum|enum
name|DCBX_SUBSYSTEM_OPCODES
block|{
comment|/* Opcodes used for DCBX. */
name|OPCODE_DCBX_GET_CFG
init|=
literal|1
block|,
name|OPCODE_DCBX_SET_CFG
init|=
literal|2
block|,
name|OPCODE_DCBX_GET_MIB_INFO
init|=
literal|3
block|,
name|OPCODE_DCBX_GET_DCBX_MODE
init|=
literal|4
block|,
name|OPCODE_DCBX_SET_MODE
init|=
literal|5
block|}
enum|;
end_enum

begin_enum
enum|enum
name|DMTF_SUBSYSTEM_OPCODES
block|{
comment|/* Opcodes used for DCBX subsystem. */
name|OPCODE_DMTF_EXEC_CLP_CMD
init|=
literal|1
block|}
enum|;
end_enum

begin_enum
enum|enum
name|DIAG_SUBSYSTEM_OPCODES
block|{
comment|/* Opcodes used for diag functions common to many subsystems. */
name|OPCODE_DIAG_RUN_DMA_TEST
init|=
literal|1
block|,
name|OPCODE_DIAG_RUN_MDIO_TEST
init|=
literal|2
block|,
name|OPCODE_DIAG_RUN_NLB_TEST
init|=
literal|3
block|,
name|OPCODE_DIAG_RUN_ARM_TIMER_TEST
init|=
literal|4
block|,
name|OPCODE_DIAG_GET_MAC
init|=
literal|5
block|}
enum|;
end_enum

begin_enum
enum|enum
name|VENDOR_SUBSYSTEM_OPCODES
block|{
comment|/* Opcodes used for Vendor subsystem. */
name|OPCODE_VENDOR_SLI
init|=
literal|1
block|}
enum|;
end_enum

begin_comment
comment|/* Management Status Codes */
end_comment

begin_enum
enum|enum
name|MGMT_STATUS_SUCCESS
block|{
name|MGMT_SUCCESS
init|=
literal|0
block|,
name|MGMT_FAILED
init|=
literal|1
block|,
name|MGMT_ILLEGAL_REQUEST
init|=
literal|2
block|,
name|MGMT_ILLEGAL_FIELD
init|=
literal|3
block|,
name|MGMT_INSUFFICIENT_BUFFER
init|=
literal|4
block|,
name|MGMT_UNAUTHORIZED_REQUEST
init|=
literal|5
block|,
name|MGMT_INVALID_ISNS_ADDRESS
init|=
literal|10
block|,
name|MGMT_INVALID_IPADDR
init|=
literal|11
block|,
name|MGMT_INVALID_GATEWAY
init|=
literal|12
block|,
name|MGMT_INVALID_SUBNETMASK
init|=
literal|13
block|,
name|MGMT_INVALID_TARGET_IPADDR
init|=
literal|16
block|,
name|MGMT_TGTTBL_FULL
init|=
literal|20
block|,
name|MGMT_FLASHROM_SAVE_FAILED
init|=
literal|23
block|,
name|MGMT_IOCTLHANDLE_ALLOC_FAILED
init|=
literal|27
block|,
name|MGMT_INVALID_SESSION
init|=
literal|31
block|,
name|MGMT_INVALID_CONNECTION
init|=
literal|32
block|,
name|MGMT_BTL_PATH_EXCEEDS_OSM_LIMIT
init|=
literal|33
block|,
name|MGMT_BTL_TGTID_EXCEEDS_OSM_LIMIT
init|=
literal|34
block|,
name|MGMT_BTL_PATH_TGTID_OCCUPIED
init|=
literal|35
block|,
name|MGMT_BTL_NO_FREE_SLOT_PATH
init|=
literal|36
block|,
name|MGMT_BTL_NO_FREE_SLOT_TGTID
init|=
literal|37
block|,
name|MGMT_POLL_IOCTL_TIMEOUT
init|=
literal|40
block|,
name|MGMT_ERROR_ACITISCSI
init|=
literal|41
block|,
name|MGMT_BUFFER_SIZE_EXCEED_OSM_OR_OS_LIMIT
init|=
literal|43
block|,
name|MGMT_REBOOT_REQUIRED
init|=
literal|44
block|,
name|MGMT_INSUFFICIENT_TIMEOUT
init|=
literal|45
block|,
name|MGMT_IPADDR_NOT_SET
init|=
literal|46
block|,
name|MGMT_IPADDR_DUP_DETECTED
init|=
literal|47
block|,
name|MGMT_CANT_REMOVE_LAST_CONNECTION
init|=
literal|48
block|,
name|MGMT_TARGET_BUSY
init|=
literal|49
block|,
name|MGMT_TGT_ERR_LISTEN_SOCKET
init|=
literal|50
block|,
name|MGMT_TGT_ERR_BIND_SOCKET
init|=
literal|51
block|,
name|MGMT_TGT_ERR_NO_SOCKET
init|=
literal|52
block|,
name|MGMT_TGT_ERR_ISNS_COMM_FAILED
init|=
literal|55
block|,
name|MGMT_CANNOT_DELETE_BOOT_TARGET
init|=
literal|56
block|,
name|MGMT_TGT_PORTAL_MODE_IN_LISTEN
init|=
literal|57
block|,
name|MGMT_FCF_IN_USE
init|=
literal|58
block|,
name|MGMT_NO_CQE
init|=
literal|59
block|,
name|MGMT_TARGET_NOT_FOUND
init|=
literal|65
block|,
name|MGMT_NOT_SUPPORTED
init|=
literal|66
block|,
name|MGMT_NO_FCF_RECORDS
init|=
literal|67
block|,
name|MGMT_FEATURE_NOT_SUPPORTED
init|=
literal|68
block|,
name|MGMT_VPD_FUNCTION_OUT_OF_RANGE
init|=
literal|69
block|,
name|MGMT_VPD_FUNCTION_TYPE_INCORRECT
init|=
literal|70
block|,
name|MGMT_INVALID_NON_EMBEDDED_WRB
init|=
literal|71
block|,
name|MGMT_OOR
init|=
literal|100
block|,
name|MGMT_INVALID_PD
init|=
literal|101
block|,
name|MGMT_STATUS_PD_INUSE
init|=
literal|102
block|,
name|MGMT_INVALID_CQ
init|=
literal|103
block|,
name|MGMT_INVALID_QP
init|=
literal|104
block|,
name|MGMT_INVALID_STAG
init|=
literal|105
block|,
name|MGMT_ORD_EXCEEDS
init|=
literal|106
block|,
name|MGMT_IRD_EXCEEDS
init|=
literal|107
block|,
name|MGMT_SENDQ_WQE_EXCEEDS
init|=
literal|108
block|,
name|MGMT_RECVQ_RQE_EXCEEDS
init|=
literal|109
block|,
name|MGMT_SGE_SEND_EXCEEDS
init|=
literal|110
block|,
name|MGMT_SGE_WRITE_EXCEEDS
init|=
literal|111
block|,
name|MGMT_SGE_RECV_EXCEEDS
init|=
literal|112
block|,
name|MGMT_INVALID_STATE_CHANGE
init|=
literal|113
block|,
name|MGMT_MW_BOUND
init|=
literal|114
block|,
name|MGMT_INVALID_VA
init|=
literal|115
block|,
name|MGMT_INVALID_LENGTH
init|=
literal|116
block|,
name|MGMT_INVALID_FBO
init|=
literal|117
block|,
name|MGMT_INVALID_ACC_RIGHTS
init|=
literal|118
block|,
name|MGMT_INVALID_PBE_SIZE
init|=
literal|119
block|,
name|MGMT_INVALID_PBL_ENTRY
init|=
literal|120
block|,
name|MGMT_INVALID_PBL_OFFSET
init|=
literal|121
block|,
name|MGMT_ADDR_NON_EXIST
init|=
literal|122
block|,
name|MGMT_INVALID_VLANID
init|=
literal|123
block|,
name|MGMT_INVALID_MTU
init|=
literal|124
block|,
name|MGMT_INVALID_BACKLOG
init|=
literal|125
block|,
name|MGMT_CONNECTION_INPROGRESS
init|=
literal|126
block|,
name|MGMT_INVALID_RQE_SIZE
init|=
literal|127
block|,
name|MGMT_INVALID_RQE_ENTRY
init|=
literal|128
block|}
enum|;
end_enum

begin_comment
comment|/* Additional Management Status Codes */
end_comment

begin_enum
enum|enum
name|MGMT_ADDI_STATUS
block|{
name|MGMT_ADDI_NO_STATUS
init|=
literal|0
block|,
name|MGMT_ADDI_INVALID_IPTYPE
init|=
literal|1
block|,
name|MGMT_ADDI_TARGET_HANDLE_NOT_FOUND
init|=
literal|9
block|,
name|MGMT_ADDI_SESSION_HANDLE_NOT_FOUND
init|=
literal|10
block|,
name|MGMT_ADDI_CONNECTION_HANDLE_NOT_FOUND
init|=
literal|11
block|,
name|MGMT_ADDI_ACTIVE_SESSIONS_PRESENT
init|=
literal|16
block|,
name|MGMT_ADDI_SESSION_ALREADY_OPENED
init|=
literal|17
block|,
name|MGMT_ADDI_SESSION_ALREADY_CLOSED
init|=
literal|18
block|,
name|MGMT_ADDI_DEST_HOST_UNREACHABLE
init|=
literal|19
block|,
name|MGMT_ADDI_LOGIN_IN_PROGRESS
init|=
literal|20
block|,
name|MGMT_ADDI_TCP_CONNECT_FAILED
init|=
literal|21
block|,
name|MGMT_ADDI_INSUFFICIENT_RESOURCES
init|=
literal|22
block|,
name|MGMT_ADDI_LINK_DOWN
init|=
literal|23
block|,
name|MGMT_ADDI_DHCP_ERROR
init|=
literal|24
block|,
name|MGMT_ADDI_CONNECTION_OFFLOADED
init|=
literal|25
block|,
name|MGMT_ADDI_CONNECTION_NOT_OFFLOADED
init|=
literal|26
block|,
name|MGMT_ADDI_CONNECTION_UPLOAD_IN_PROGRESS
init|=
literal|27
block|,
name|MGMT_ADDI_REQUEST_REJECTED
init|=
literal|28
block|,
name|MGMT_ADDI_INVALID_SUBSYSTEM
init|=
literal|29
block|,
name|MGMT_ADDI_INVALID_OPCODE
init|=
literal|30
block|,
name|MGMT_ADDI_INVALID_MAXCONNECTION_PARAM
init|=
literal|31
block|,
name|MGMT_ADDI_INVALID_KEY
init|=
literal|32
block|,
name|MGMT_ADDI_INVALID_DOMAIN
init|=
literal|35
block|,
name|MGMT_ADDI_LOGIN_INITIATOR_ERROR
init|=
literal|43
block|,
name|MGMT_ADDI_LOGIN_AUTHENTICATION_ERROR
init|=
literal|44
block|,
name|MGMT_ADDI_LOGIN_AUTHORIZATION_ERROR
init|=
literal|45
block|,
name|MGMT_ADDI_LOGIN_NOT_FOUND
init|=
literal|46
block|,
name|MGMT_ADDI_LOGIN_TARGET_REMOVED
init|=
literal|47
block|,
name|MGMT_ADDI_LOGIN_UNSUPPORTED_VERSION
init|=
literal|48
block|,
name|MGMT_ADDI_LOGIN_TOO_MANY_CONNECTIONS
init|=
literal|49
block|,
name|MGMT_ADDI_LOGIN_MISSING_PARAMETER
init|=
literal|50
block|,
name|MGMT_ADDI_LOGIN_NO_SESSION_SPANNING
init|=
literal|51
block|,
name|MGMT_ADDI_LOGIN_SESSION_TYPE_NOT_SUPPORTED
init|=
literal|52
block|,
name|MGMT_ADDI_LOGIN_SESSION_DOES_NOT_EXIST
init|=
literal|53
block|,
name|MGMT_ADDI_LOGIN_INVALID_DURING_LOGIN
init|=
literal|54
block|,
name|MGMT_ADDI_LOGIN_TARGET_ERROR
init|=
literal|55
block|,
name|MGMT_ADDI_LOGIN_SERVICE_UNAVAILABLE
init|=
literal|56
block|,
name|MGMT_ADDI_LOGIN_OUT_OF_RESOURCES
init|=
literal|57
block|,
name|MGMT_ADDI_SAME_CHAP_SECRET
init|=
literal|58
block|,
name|MGMT_ADDI_INVALID_SECRET_LENGTH
init|=
literal|59
block|,
name|MGMT_ADDI_DUPLICATE_ENTRY
init|=
literal|60
block|,
name|MGMT_ADDI_SETTINGS_MODIFIED_REBOOT_REQD
init|=
literal|63
block|,
name|MGMT_ADDI_INVALID_EXTENDED_TIMEOUT
init|=
literal|64
block|,
name|MGMT_ADDI_INVALID_INTERFACE_HANDLE
init|=
literal|65
block|,
name|MGMT_ADDI_ERR_VLAN_ON_DEF_INTERFACE
init|=
literal|66
block|,
name|MGMT_ADDI_INTERFACE_DOES_NOT_EXIST
init|=
literal|67
block|,
name|MGMT_ADDI_INTERFACE_ALREADY_EXISTS
init|=
literal|68
block|,
name|MGMT_ADDI_INVALID_VLAN_RANGE
init|=
literal|69
block|,
name|MGMT_ADDI_ERR_SET_VLAN
init|=
literal|70
block|,
name|MGMT_ADDI_ERR_DEL_VLAN
init|=
literal|71
block|,
name|MGMT_ADDI_CANNOT_DEL_DEF_INTERFACE
init|=
literal|72
block|,
name|MGMT_ADDI_DHCP_REQ_ALREADY_PENDING
init|=
literal|73
block|,
name|MGMT_ADDI_TOO_MANY_INTERFACES
init|=
literal|74
block|,
name|MGMT_ADDI_INVALID_REQUEST
init|=
literal|75
block|}
enum|;
end_enum

begin_enum
enum|enum
name|NIC_SUBSYSTEM_OPCODES
block|{
comment|/**  * @brief NIC Subsystem Opcodes (see Network SLI-4 manual>= Rev4, v21-2)  * These opcodes are used for configuring the Ethernet interfaces.  * These opcodes all use the MBX_SUBSYSTEM_NIC subsystem code.  */
name|NIC_CONFIG_RSS
init|=
literal|1
block|,
name|NIC_CONFIG_ACPI
init|=
literal|2
block|,
name|NIC_CONFIG_PROMISCUOUS
init|=
literal|3
block|,
name|NIC_GET_STATS
init|=
literal|4
block|,
name|NIC_CREATE_WQ
init|=
literal|7
block|,
name|NIC_CREATE_RQ
init|=
literal|8
block|,
name|NIC_DELETE_WQ
init|=
literal|9
block|,
name|NIC_DELETE_RQ
init|=
literal|10
block|,
name|NIC_CONFIG_ACPI_WOL_MAGIC
init|=
literal|12
block|,
name|NIC_GET_NETWORK_STATS
init|=
literal|13
block|,
name|NIC_CREATE_HDS_RQ
init|=
literal|16
block|,
name|NIC_DELETE_HDS_RQ
init|=
literal|17
block|,
name|NIC_GET_PPORT_STATS
init|=
literal|18
block|,
name|NIC_GET_VPORT_STATS
init|=
literal|19
block|,
name|NIC_GET_QUEUE_STATS
init|=
literal|20
block|}
enum|;
end_enum

begin_comment
comment|/* Hash option flags for RSS enable */
end_comment

begin_enum
enum|enum
name|RSS_ENABLE_FLAGS
block|{
name|RSS_ENABLE_NONE
init|=
literal|0x0
block|,
comment|/* (No RSS) */
name|RSS_ENABLE_IPV4
init|=
literal|0x1
block|,
comment|/* (IPV4 HASH enabled ) */
name|RSS_ENABLE_TCP_IPV4
init|=
literal|0x2
block|,
comment|/* (TCP IPV4 Hash enabled) */
name|RSS_ENABLE_IPV6
init|=
literal|0x4
block|,
comment|/* (IPV6 HASH enabled) */
name|RSS_ENABLE_TCP_IPV6
init|=
literal|0x8
comment|/* (TCP IPV6 HASH */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|RSS_ENABLE
value|(RSS_ENABLE_IPV4 | RSS_ENABLE_TCP_IPV4)
end_define

begin_define
define|#
directive|define
name|RSS_DISABLE
value|RSS_ENABLE_NONE
end_define

begin_comment
comment|/* NIC header WQE */
end_comment

begin_struct
struct|struct
name|oce_nic_hdr_wqe
block|{
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw0 */
name|uint32_t
name|rsvd0
decl_stmt|;
comment|/* dw1 */
name|uint32_t
name|last_seg_udp_len
range|:
literal|14
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|18
decl_stmt|;
comment|/* dw2 */
name|uint32_t
name|lso_mss
range|:
literal|14
decl_stmt|;
name|uint32_t
name|num_wqe
range|:
literal|5
decl_stmt|;
name|uint32_t
name|rsvd4
range|:
literal|2
decl_stmt|;
name|uint32_t
name|vlan
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lso
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tcpcs
range|:
literal|1
decl_stmt|;
name|uint32_t
name|udpcs
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ipcs
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|forward
range|:
literal|1
decl_stmt|;
name|uint32_t
name|crc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|complete
range|:
literal|1
decl_stmt|;
comment|/* dw3 */
name|uint32_t
name|vlan_tag
range|:
literal|16
decl_stmt|;
name|uint32_t
name|total_length
range|:
literal|16
decl_stmt|;
else|#
directive|else
comment|/* dw0 */
name|uint32_t
name|rsvd0
decl_stmt|;
comment|/* dw1 */
name|uint32_t
name|rsvd1
range|:
literal|18
decl_stmt|;
name|uint32_t
name|last_seg_udp_len
range|:
literal|14
decl_stmt|;
comment|/* dw2 */
name|uint32_t
name|complete
range|:
literal|1
decl_stmt|;
name|uint32_t
name|event
range|:
literal|1
decl_stmt|;
name|uint32_t
name|crc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|forward
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ipcs
range|:
literal|1
decl_stmt|;
name|uint32_t
name|udpcs
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tcpcs
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lso
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vlan
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd4
range|:
literal|2
decl_stmt|;
name|uint32_t
name|num_wqe
range|:
literal|5
decl_stmt|;
name|uint32_t
name|lso_mss
range|:
literal|14
decl_stmt|;
comment|/* dw3 */
name|uint32_t
name|total_length
range|:
literal|16
decl_stmt|;
name|uint32_t
name|vlan_tag
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|uint32_t
name|dw
index|[
literal|4
index|]
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* NIC fragment WQE */
end_comment

begin_struct
struct|struct
name|oce_nic_frag_wqe
block|{
union|union
block|{
struct|struct
block|{
comment|/* dw0 */
name|uint32_t
name|frag_pa_hi
decl_stmt|;
comment|/* dw1 */
name|uint32_t
name|frag_pa_lo
decl_stmt|;
comment|/* dw2 */
name|uint32_t
name|rsvd0
decl_stmt|;
name|uint32_t
name|frag_len
decl_stmt|;
block|}
name|s
struct|;
name|uint32_t
name|dw
index|[
literal|4
index|]
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* Ethernet Tx Completion Descriptor */
end_comment

begin_struct
struct|struct
name|oce_nic_tx_cqe
block|{
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw 0 */
name|uint32_t
name|status
range|:
literal|4
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|8
decl_stmt|;
name|uint32_t
name|port
range|:
literal|2
decl_stmt|;
name|uint32_t
name|ct
range|:
literal|2
decl_stmt|;
name|uint32_t
name|wqe_index
range|:
literal|16
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|rsvd1
range|:
literal|5
decl_stmt|;
name|uint32_t
name|cast_enc
range|:
literal|2
decl_stmt|;
name|uint32_t
name|lso
range|:
literal|1
decl_stmt|;
name|uint32_t
name|nwh_bytes
range|:
literal|8
decl_stmt|;
name|uint32_t
name|user_bytes
range|:
literal|16
decl_stmt|;
comment|/* dw 2 */
name|uint32_t
name|rsvd2
decl_stmt|;
comment|/* dw 3 */
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd3
range|:
literal|4
decl_stmt|;
name|uint32_t
name|wq_id
range|:
literal|11
decl_stmt|;
name|uint32_t
name|num_pkts
range|:
literal|16
decl_stmt|;
else|#
directive|else
comment|/* dw 0 */
name|uint32_t
name|wqe_index
range|:
literal|16
decl_stmt|;
name|uint32_t
name|ct
range|:
literal|2
decl_stmt|;
name|uint32_t
name|port
range|:
literal|2
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|8
decl_stmt|;
name|uint32_t
name|status
range|:
literal|4
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|user_bytes
range|:
literal|16
decl_stmt|;
name|uint32_t
name|nwh_bytes
range|:
literal|8
decl_stmt|;
name|uint32_t
name|lso
range|:
literal|1
decl_stmt|;
name|uint32_t
name|cast_enc
range|:
literal|2
decl_stmt|;
name|uint32_t
name|rsvd1
range|:
literal|5
decl_stmt|;
comment|/* dw 2 */
name|uint32_t
name|rsvd2
decl_stmt|;
comment|/* dw 3 */
name|uint32_t
name|num_pkts
range|:
literal|16
decl_stmt|;
name|uint32_t
name|wq_id
range|:
literal|11
decl_stmt|;
name|uint32_t
name|rsvd3
range|:
literal|4
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|uint32_t
name|dw
index|[
literal|4
index|]
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WQ_CQE_VALID
parameter_list|(
name|_cqe
parameter_list|)
value|(_cqe->u0.dw[3])
end_define

begin_define
define|#
directive|define
name|WQ_CQE_INVALIDATE
parameter_list|(
name|_cqe
parameter_list|)
value|(_cqe->u0.dw[3] = 0)
end_define

begin_comment
comment|/* Receive Queue Entry (RQE) */
end_comment

begin_struct
struct|struct
name|oce_nic_rqe
block|{
union|union
block|{
struct|struct
block|{
name|uint32_t
name|frag_pa_hi
decl_stmt|;
name|uint32_t
name|frag_pa_lo
decl_stmt|;
block|}
name|s
struct|;
name|uint32_t
name|dw
index|[
literal|2
index|]
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* NIC Receive CQE */
end_comment

begin_struct
struct|struct
name|oce_nic_rx_cqe
block|{
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw 0 */
name|uint32_t
name|ip_options
range|:
literal|1
decl_stmt|;
name|uint32_t
name|port
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pkt_size
range|:
literal|14
decl_stmt|;
name|uint32_t
name|vlan_tag
range|:
literal|16
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|num_fragments
range|:
literal|3
decl_stmt|;
name|uint32_t
name|switched
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ct
range|:
literal|2
decl_stmt|;
name|uint32_t
name|frag_index
range|:
literal|10
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vlan_tag_present
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mac_dst
range|:
literal|6
decl_stmt|;
name|uint32_t
name|ip_ver
range|:
literal|1
decl_stmt|;
name|uint32_t
name|l4_cksum_pass
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ip_cksum_pass
range|:
literal|1
decl_stmt|;
name|uint32_t
name|udpframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tcpframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ipframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rss_hp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|error
range|:
literal|1
decl_stmt|;
comment|/* dw 2 */
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hds_type
range|:
literal|2
decl_stmt|;
name|uint32_t
name|lro_pkt
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd4
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hds_hdr_size
range|:
literal|12
decl_stmt|;
name|uint32_t
name|hds_hdr_frag_index
range|:
literal|10
decl_stmt|;
name|uint32_t
name|rss_bank
range|:
literal|1
decl_stmt|;
name|uint32_t
name|qnq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pkt_type
range|:
literal|2
decl_stmt|;
name|uint32_t
name|rss_flush
range|:
literal|1
decl_stmt|;
comment|/* dw 3 */
name|uint32_t
name|rss_hash_value
decl_stmt|;
else|#
directive|else
comment|/* dw 0 */
name|uint32_t
name|vlan_tag
range|:
literal|16
decl_stmt|;
name|uint32_t
name|pkt_size
range|:
literal|14
decl_stmt|;
name|uint32_t
name|port
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ip_options
range|:
literal|1
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|error
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rss_hp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ipframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tcpframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|udpframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ip_cksum_pass
range|:
literal|1
decl_stmt|;
name|uint32_t
name|l4_cksum_pass
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ip_ver
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mac_dst
range|:
literal|6
decl_stmt|;
name|uint32_t
name|vlan_tag_present
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|frag_index
range|:
literal|10
decl_stmt|;
name|uint32_t
name|ct
range|:
literal|2
decl_stmt|;
name|uint32_t
name|switched
range|:
literal|1
decl_stmt|;
name|uint32_t
name|num_fragments
range|:
literal|3
decl_stmt|;
comment|/* dw 2 */
name|uint32_t
name|rss_flush
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pkt_type
range|:
literal|2
decl_stmt|;
name|uint32_t
name|qnq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rss_bank
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hds_hdr_frag_index
range|:
literal|10
decl_stmt|;
name|uint32_t
name|hds_hdr_size
range|:
literal|12
decl_stmt|;
name|uint32_t
name|rsvd4
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lro_pkt
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hds_type
range|:
literal|2
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
comment|/* dw 3 */
name|uint32_t
name|rss_hash_value
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|uint32_t
name|dw
index|[
literal|4
index|]
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* NIC Receive CQE_v1 */
end_comment

begin_struct
struct|struct
name|oce_nic_rx_cqe_v1
block|{
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw 0 */
name|uint32_t
name|ip_options
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vlan_tag_present
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pkt_size
range|:
literal|14
decl_stmt|;
name|uint32_t
name|vlan_tag
range|:
literal|16
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|num_fragments
range|:
literal|3
decl_stmt|;
name|uint32_t
name|switched
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ct
range|:
literal|2
decl_stmt|;
name|uint32_t
name|frag_index
range|:
literal|10
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mac_dst
range|:
literal|7
decl_stmt|;
name|uint32_t
name|ip_ver
range|:
literal|1
decl_stmt|;
name|uint32_t
name|l4_cksum_pass
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ip_cksum_pass
range|:
literal|1
decl_stmt|;
name|uint32_t
name|udpframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tcpframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ipframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rss_hp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|error
range|:
literal|1
decl_stmt|;
comment|/* dw 2 */
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd4
range|:
literal|13
decl_stmt|;
name|uint32_t
name|hds_hdr_size
range|:
name|uint32_t
name|hds_hdr_frag_index
operator|:
literal|8
decl_stmt|;
name|uint32_t
name|vlantag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|port
range|:
literal|2
decl_stmt|;
name|uint32_t
name|rss_bank
range|:
literal|1
decl_stmt|;
name|uint32_t
name|qnq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pkt_type
range|:
literal|2
decl_stmt|;
name|uint32_t
name|rss_flush
range|:
literal|1
decl_stmt|;
comment|/* dw 3 */
name|uint32_t
name|rss_hash_value
decl_stmt|;
else|#
directive|else
comment|/* dw 0 */
name|uint32_t
name|vlan_tag
range|:
literal|16
decl_stmt|;
name|uint32_t
name|pkt_size
range|:
literal|14
decl_stmt|;
name|uint32_t
name|vlan_tag_present
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ip_options
range|:
literal|1
decl_stmt|;
comment|/* dw 1 */
name|uint32_t
name|error
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rss_hp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ipframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tcpframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|udpframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ip_cksum_pass
range|:
literal|1
decl_stmt|;
name|uint32_t
name|l4_cksum_pass
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ip_ver
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mac_dst
range|:
literal|7
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|frag_index
range|:
literal|10
decl_stmt|;
name|uint32_t
name|ct
range|:
literal|2
decl_stmt|;
name|uint32_t
name|switched
range|:
literal|1
decl_stmt|;
name|uint32_t
name|num_fragments
range|:
literal|3
decl_stmt|;
comment|/* dw 2 */
name|uint32_t
name|rss_flush
range|:
literal|1
decl_stmt|;
name|uint32_t
name|pkt_type
range|:
literal|2
decl_stmt|;
name|uint32_t
name|qnq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rss_bank
range|:
literal|1
decl_stmt|;
name|uint32_t
name|port
range|:
literal|2
decl_stmt|;
name|uint32_t
name|vlantag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hds_hdr_frag_index
range|:
literal|8
decl_stmt|;
name|uint32_t
name|hds_hdr_size
range|:
literal|2
decl_stmt|;
name|uint32_t
name|rsvd4
range|:
literal|13
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
comment|/* dw 3 */
name|uint32_t
name|rss_hash_value
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|uint32_t
name|dw
index|[
literal|4
index|]
decl_stmt|;
block|}
name|u0
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RQ_CQE_VALID_MASK
value|0x80
end_define

begin_define
define|#
directive|define
name|RQ_CQE_VALID
parameter_list|(
name|_cqe
parameter_list|)
value|(_cqe->u0.dw[2])
end_define

begin_define
define|#
directive|define
name|RQ_CQE_INVALIDATE
parameter_list|(
name|_cqe
parameter_list|)
value|(_cqe->u0.dw[2] = 0)
end_define

begin_struct
struct|struct
name|mbx_config_nic_promiscuous
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint16_t
name|rsvd0
decl_stmt|;
name|uint8_t
name|port1_promisc
decl_stmt|;
name|uint8_t
name|port0_promisc
decl_stmt|;
else|#
directive|else
name|uint8_t
name|port0_promisc
decl_stmt|;
name|uint8_t
name|port1_promisc
decl_stmt|;
name|uint16_t
name|rsvd0
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
union|union
name|oce_wq_ctx_u
block|{
name|uint32_t
name|dw
index|[
literal|17
index|]
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw4 */
name|uint32_t
name|dw4rsvd2
range|:
literal|8
decl_stmt|;
name|uint32_t
name|nic_wq_type
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dw4rsvd1
range|:
literal|8
decl_stmt|;
name|uint32_t
name|num_pages
range|:
literal|8
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|dw5rsvd2
range|:
literal|12
decl_stmt|;
name|uint32_t
name|wq_size
range|:
literal|4
decl_stmt|;
name|uint32_t
name|dw5rsvd1
range|:
literal|16
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw6rsvd1
range|:
literal|31
decl_stmt|;
comment|/* dw7 */
name|uint32_t
name|dw7rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|cq_id
range|:
literal|16
decl_stmt|;
else|#
directive|else
comment|/* dw4 */
name|uint32_t
name|num_pages
range|:
literal|8
decl_stmt|;
if|#
directive|if
literal|0
block|uint32_t dw4rsvd1:8;
else|#
directive|else
comment|/* PSP: this workaround is not documented: fill 0x01 for ulp_mask */
name|uint32_t
name|ulp_mask
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
name|uint32_t
name|nic_wq_type
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dw4rsvd2
range|:
literal|8
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|dw5rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|wq_size
range|:
literal|4
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|12
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|dw6rsvd1
range|:
literal|31
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
comment|/* dw7 */
name|uint32_t
name|cq_id
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dw7rsvd1
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
comment|/* dw8 - dw20 */
name|uint32_t
name|dw8_20rsvd1
index|[
literal|13
index|]
decl_stmt|;
block|}
name|v0
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw4 */
name|uint32_t
name|dw4rsvd2
range|:
literal|8
decl_stmt|;
name|uint32_t
name|nic_wq_type
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dw4rsvd1
range|:
literal|8
decl_stmt|;
name|uint32_t
name|num_pages
range|:
literal|8
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|dw5rsvd2
range|:
literal|12
decl_stmt|;
name|uint32_t
name|wq_size
range|:
literal|4
decl_stmt|;
name|uint32_t
name|iface_id
range|:
literal|16
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dw6rsvd1
range|:
literal|31
decl_stmt|;
comment|/* dw7 */
name|uint32_t
name|dw7rsvd1
range|:
literal|16
decl_stmt|;
name|uint32_t
name|cq_id
range|:
literal|16
decl_stmt|;
else|#
directive|else
comment|/* dw4 */
name|uint32_t
name|num_pages
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dw4rsvd1
range|:
literal|8
decl_stmt|;
name|uint32_t
name|nic_wq_type
range|:
literal|8
decl_stmt|;
name|uint32_t
name|dw4rsvd2
range|:
literal|8
decl_stmt|;
comment|/* dw5 */
name|uint32_t
name|iface_id
range|:
literal|16
decl_stmt|;
name|uint32_t
name|wq_size
range|:
literal|4
decl_stmt|;
name|uint32_t
name|dw5rsvd2
range|:
literal|12
decl_stmt|;
comment|/* dw6 */
name|uint32_t
name|dw6rsvd1
range|:
literal|31
decl_stmt|;
name|uint32_t
name|valid
range|:
literal|1
decl_stmt|;
comment|/* dw7 */
name|uint32_t
name|cq_id
range|:
literal|16
decl_stmt|;
name|uint32_t
name|dw7rsvd1
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
comment|/* dw8 - dw20 */
name|uint32_t
name|dw8_20rsvd1
index|[
literal|13
index|]
decl_stmt|;
block|}
name|v1
struct|;
block|}
name|oce_wq_ctx_t
typedef|;
end_typedef

begin_comment
comment|/**  * @brief [07] NIC_CREATE_WQ  * @note  * Lancer requires an InterfaceID to be specified with every WQ. This  * is the basis for NIC IOV where the Interface maps to a vPort and maps  * to both Tx and Rx sides.  */
end_comment

begin_define
define|#
directive|define
name|OCE_WQ_TYPE_FORWARDING
value|0x1
end_define

begin_comment
comment|/* wq forwards pkts to TOE */
end_comment

begin_define
define|#
directive|define
name|OCE_WQ_TYPE_STANDARD
value|0x2
end_define

begin_comment
comment|/* wq sends network pkts */
end_comment

begin_struct
struct|struct
name|mbx_create_nic_wq
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint8_t
name|num_pages
decl_stmt|;
name|uint8_t
name|ulp_num
decl_stmt|;
name|uint16_t
name|nic_wq_type
decl_stmt|;
name|uint16_t
name|if_id
decl_stmt|;
name|uint8_t
name|wq_size
decl_stmt|;
name|uint8_t
name|rsvd1
decl_stmt|;
name|uint32_t
name|rsvd2
decl_stmt|;
name|uint16_t
name|cq_id
decl_stmt|;
name|uint16_t
name|rsvd3
decl_stmt|;
name|uint32_t
name|rsvd4
index|[
literal|13
index|]
decl_stmt|;
name|struct
name|phys_addr
name|pages
index|[
literal|8
index|]
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint16_t
name|wq_id
decl_stmt|;
name|uint16_t
name|rid
decl_stmt|;
name|uint32_t
name|db_offset
decl_stmt|;
name|uint8_t
name|tc_id
decl_stmt|;
name|uint8_t
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [09] NIC_DELETE_WQ */
end_comment

begin_struct
struct|struct
name|mbx_delete_nic_wq
block|{
comment|/* dw0 - dw3 */
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw4 */
name|uint16_t
name|rsvd0
decl_stmt|;
name|uint16_t
name|wq_id
decl_stmt|;
else|#
directive|else
comment|/* dw4 */
name|uint16_t
name|wq_id
decl_stmt|;
name|uint16_t
name|rsvd0
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mbx_create_nic_rq
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint16_t
name|cq_id
decl_stmt|;
name|uint8_t
name|frag_size
decl_stmt|;
name|uint8_t
name|num_pages
decl_stmt|;
name|struct
name|phys_addr
name|pages
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|if_id
decl_stmt|;
name|uint16_t
name|max_frame_size
decl_stmt|;
name|uint16_t
name|page_size
decl_stmt|;
name|uint32_t
name|is_rss_queue
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint16_t
name|rq_id
decl_stmt|;
name|uint8_t
name|rss_cpuid
decl_stmt|;
name|uint8_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [10] NIC_DELETE_RQ */
end_comment

begin_struct
struct|struct
name|mbx_delete_nic_rq
block|{
comment|/* dw0 - dw3 */
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
comment|/* dw4 */
name|uint16_t
name|bypass_flush
decl_stmt|;
name|uint16_t
name|rq_id
decl_stmt|;
else|#
directive|else
comment|/* dw4 */
name|uint16_t
name|rq_id
decl_stmt|;
name|uint16_t
name|bypass_flush
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
comment|/* dw4 */
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_port_rxf_stats_v0
block|{
name|uint32_t
name|rx_bytes_lsd
decl_stmt|;
comment|/* dword 0*/
name|uint32_t
name|rx_bytes_msd
decl_stmt|;
comment|/* dword 1*/
name|uint32_t
name|rx_total_frames
decl_stmt|;
comment|/* dword 2*/
name|uint32_t
name|rx_unicast_frames
decl_stmt|;
comment|/* dword 3*/
name|uint32_t
name|rx_multicast_frames
decl_stmt|;
comment|/* dword 4*/
name|uint32_t
name|rx_broadcast_frames
decl_stmt|;
comment|/* dword 5*/
name|uint32_t
name|rx_crc_errors
decl_stmt|;
comment|/* dword 6*/
name|uint32_t
name|rx_alignment_symbol_errors
decl_stmt|;
comment|/* dword 7*/
name|uint32_t
name|rx_pause_frames
decl_stmt|;
comment|/* dword 8*/
name|uint32_t
name|rx_control_frames
decl_stmt|;
comment|/* dword 9*/
name|uint32_t
name|rx_in_range_errors
decl_stmt|;
comment|/* dword 10*/
name|uint32_t
name|rx_out_range_errors
decl_stmt|;
comment|/* dword 11*/
name|uint32_t
name|rx_frame_too_long
decl_stmt|;
comment|/* dword 12*/
name|uint32_t
name|rx_address_match_errors
decl_stmt|;
comment|/* dword 13*/
name|uint32_t
name|rx_vlan_mismatch
decl_stmt|;
comment|/* dword 14*/
name|uint32_t
name|rx_dropped_too_small
decl_stmt|;
comment|/* dword 15*/
name|uint32_t
name|rx_dropped_too_short
decl_stmt|;
comment|/* dword 16*/
name|uint32_t
name|rx_dropped_header_too_small
decl_stmt|;
comment|/* dword 17*/
name|uint32_t
name|rx_dropped_tcp_length
decl_stmt|;
comment|/* dword 18*/
name|uint32_t
name|rx_dropped_runt
decl_stmt|;
comment|/* dword 19*/
name|uint32_t
name|rx_64_byte_packets
decl_stmt|;
comment|/* dword 20*/
name|uint32_t
name|rx_65_127_byte_packets
decl_stmt|;
comment|/* dword 21*/
name|uint32_t
name|rx_128_256_byte_packets
decl_stmt|;
comment|/* dword 22*/
name|uint32_t
name|rx_256_511_byte_packets
decl_stmt|;
comment|/* dword 23*/
name|uint32_t
name|rx_512_1023_byte_packets
decl_stmt|;
comment|/* dword 24*/
name|uint32_t
name|rx_1024_1518_byte_packets
decl_stmt|;
comment|/* dword 25*/
name|uint32_t
name|rx_1519_2047_byte_packets
decl_stmt|;
comment|/* dword 26*/
name|uint32_t
name|rx_2048_4095_byte_packets
decl_stmt|;
comment|/* dword 27*/
name|uint32_t
name|rx_4096_8191_byte_packets
decl_stmt|;
comment|/* dword 28*/
name|uint32_t
name|rx_8192_9216_byte_packets
decl_stmt|;
comment|/* dword 29*/
name|uint32_t
name|rx_ip_checksum_errs
decl_stmt|;
comment|/* dword 30*/
name|uint32_t
name|rx_tcp_checksum_errs
decl_stmt|;
comment|/* dword 31*/
name|uint32_t
name|rx_udp_checksum_errs
decl_stmt|;
comment|/* dword 32*/
name|uint32_t
name|rx_non_rss_packets
decl_stmt|;
comment|/* dword 33*/
name|uint32_t
name|rx_ipv4_packets
decl_stmt|;
comment|/* dword 34*/
name|uint32_t
name|rx_ipv6_packets
decl_stmt|;
comment|/* dword 35*/
name|uint32_t
name|rx_ipv4_bytes_lsd
decl_stmt|;
comment|/* dword 36*/
name|uint32_t
name|rx_ipv4_bytes_msd
decl_stmt|;
comment|/* dword 37*/
name|uint32_t
name|rx_ipv6_bytes_lsd
decl_stmt|;
comment|/* dword 38*/
name|uint32_t
name|rx_ipv6_bytes_msd
decl_stmt|;
comment|/* dword 39*/
name|uint32_t
name|rx_chute1_packets
decl_stmt|;
comment|/* dword 40*/
name|uint32_t
name|rx_chute2_packets
decl_stmt|;
comment|/* dword 41*/
name|uint32_t
name|rx_chute3_packets
decl_stmt|;
comment|/* dword 42*/
name|uint32_t
name|rx_management_packets
decl_stmt|;
comment|/* dword 43*/
name|uint32_t
name|rx_switched_unicast_packets
decl_stmt|;
comment|/* dword 44*/
name|uint32_t
name|rx_switched_multicast_packets
decl_stmt|;
comment|/* dword 45*/
name|uint32_t
name|rx_switched_broadcast_packets
decl_stmt|;
comment|/* dword 46*/
name|uint32_t
name|tx_bytes_lsd
decl_stmt|;
comment|/* dword 47*/
name|uint32_t
name|tx_bytes_msd
decl_stmt|;
comment|/* dword 48*/
name|uint32_t
name|tx_unicastframes
decl_stmt|;
comment|/* dword 49*/
name|uint32_t
name|tx_multicastframes
decl_stmt|;
comment|/* dword 50*/
name|uint32_t
name|tx_broadcastframes
decl_stmt|;
comment|/* dword 51*/
name|uint32_t
name|tx_pauseframes
decl_stmt|;
comment|/* dword 52*/
name|uint32_t
name|tx_controlframes
decl_stmt|;
comment|/* dword 53*/
name|uint32_t
name|tx_64_byte_packets
decl_stmt|;
comment|/* dword 54*/
name|uint32_t
name|tx_65_127_byte_packets
decl_stmt|;
comment|/* dword 55*/
name|uint32_t
name|tx_128_256_byte_packets
decl_stmt|;
comment|/* dword 56*/
name|uint32_t
name|tx_256_511_byte_packets
decl_stmt|;
comment|/* dword 57*/
name|uint32_t
name|tx_512_1023_byte_packets
decl_stmt|;
comment|/* dword 58*/
name|uint32_t
name|tx_1024_1518_byte_packets
decl_stmt|;
comment|/* dword 59*/
name|uint32_t
name|tx_1519_2047_byte_packets
decl_stmt|;
comment|/* dword 60*/
name|uint32_t
name|tx_2048_4095_byte_packets
decl_stmt|;
comment|/* dword 61*/
name|uint32_t
name|tx_4096_8191_byte_packets
decl_stmt|;
comment|/* dword 62*/
name|uint32_t
name|tx_8192_9216_byte_packets
decl_stmt|;
comment|/* dword 63*/
name|uint32_t
name|rxpp_fifo_overflow_drop
decl_stmt|;
comment|/* dword 64*/
name|uint32_t
name|rx_input_fifo_overflow_drop
decl_stmt|;
comment|/* dword 65*/
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_rxf_stats_v0
block|{
name|struct
name|oce_port_rxf_stats_v0
name|port
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|rx_drops_no_pbuf
decl_stmt|;
comment|/* dword 132*/
name|uint32_t
name|rx_drops_no_txpb
decl_stmt|;
comment|/* dword 133*/
name|uint32_t
name|rx_drops_no_erx_descr
decl_stmt|;
comment|/* dword 134*/
name|uint32_t
name|rx_drops_no_tpre_descr
decl_stmt|;
comment|/* dword 135*/
name|uint32_t
name|management_rx_port_packets
decl_stmt|;
comment|/* dword 136*/
name|uint32_t
name|management_rx_port_bytes
decl_stmt|;
comment|/* dword 137*/
name|uint32_t
name|management_rx_port_pause_frames
decl_stmt|;
comment|/* dword 138*/
name|uint32_t
name|management_rx_port_errors
decl_stmt|;
comment|/* dword 139*/
name|uint32_t
name|management_tx_port_packets
decl_stmt|;
comment|/* dword 140*/
name|uint32_t
name|management_tx_port_bytes
decl_stmt|;
comment|/* dword 141*/
name|uint32_t
name|management_tx_port_pause
decl_stmt|;
comment|/* dword 142*/
name|uint32_t
name|management_rx_port_rxfifo_overflow
decl_stmt|;
comment|/* dword 143*/
name|uint32_t
name|rx_drops_too_many_frags
decl_stmt|;
comment|/* dword 144*/
name|uint32_t
name|rx_drops_invalid_ring
decl_stmt|;
comment|/* dword 145*/
name|uint32_t
name|forwarded_packets
decl_stmt|;
comment|/* dword 146*/
name|uint32_t
name|rx_drops_mtu
decl_stmt|;
comment|/* dword 147*/
name|uint32_t
name|rsvd0
index|[
literal|7
index|]
decl_stmt|;
name|uint32_t
name|port0_jabber_events
decl_stmt|;
name|uint32_t
name|port1_jabber_events
decl_stmt|;
name|uint32_t
name|rsvd1
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_port_rxf_stats_v1
block|{
name|uint32_t
name|rsvd0
index|[
literal|12
index|]
decl_stmt|;
name|uint32_t
name|rx_crc_errors
decl_stmt|;
name|uint32_t
name|rx_alignment_symbol_errors
decl_stmt|;
name|uint32_t
name|rx_pause_frames
decl_stmt|;
name|uint32_t
name|rx_priority_pause_frames
decl_stmt|;
name|uint32_t
name|rx_control_frames
decl_stmt|;
name|uint32_t
name|rx_in_range_errors
decl_stmt|;
name|uint32_t
name|rx_out_range_errors
decl_stmt|;
name|uint32_t
name|rx_frame_too_long
decl_stmt|;
name|uint32_t
name|rx_address_match_errors
decl_stmt|;
name|uint32_t
name|rx_dropped_too_small
decl_stmt|;
name|uint32_t
name|rx_dropped_too_short
decl_stmt|;
name|uint32_t
name|rx_dropped_header_too_small
decl_stmt|;
name|uint32_t
name|rx_dropped_tcp_length
decl_stmt|;
name|uint32_t
name|rx_dropped_runt
decl_stmt|;
name|uint32_t
name|rsvd1
index|[
literal|10
index|]
decl_stmt|;
name|uint32_t
name|rx_ip_checksum_errs
decl_stmt|;
name|uint32_t
name|rx_tcp_checksum_errs
decl_stmt|;
name|uint32_t
name|rx_udp_checksum_errs
decl_stmt|;
name|uint32_t
name|rsvd2
index|[
literal|7
index|]
decl_stmt|;
name|uint32_t
name|rx_switched_unicast_packets
decl_stmt|;
name|uint32_t
name|rx_switched_multicast_packets
decl_stmt|;
name|uint32_t
name|rx_switched_broadcast_packets
decl_stmt|;
name|uint32_t
name|rsvd3
index|[
literal|3
index|]
decl_stmt|;
name|uint32_t
name|tx_pauseframes
decl_stmt|;
name|uint32_t
name|tx_priority_pauseframes
decl_stmt|;
name|uint32_t
name|tx_controlframes
decl_stmt|;
name|uint32_t
name|rsvd4
index|[
literal|10
index|]
decl_stmt|;
name|uint32_t
name|rxpp_fifo_overflow_drop
decl_stmt|;
name|uint32_t
name|rx_input_fifo_overflow_drop
decl_stmt|;
name|uint32_t
name|pmem_fifo_overflow_drop
decl_stmt|;
name|uint32_t
name|jabber_events
decl_stmt|;
name|uint32_t
name|rsvd5
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_rxf_stats_v1
block|{
name|struct
name|oce_port_rxf_stats_v1
name|port
index|[
literal|4
index|]
decl_stmt|;
name|uint32_t
name|rsvd0
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|rx_drops_no_pbuf
decl_stmt|;
name|uint32_t
name|rx_drops_no_txpb
decl_stmt|;
name|uint32_t
name|rx_drops_no_erx_descr
decl_stmt|;
name|uint32_t
name|rx_drops_no_tpre_descr
decl_stmt|;
name|uint32_t
name|rsvd1
index|[
literal|6
index|]
decl_stmt|;
name|uint32_t
name|rx_drops_too_many_frags
decl_stmt|;
name|uint32_t
name|rx_drops_invalid_ring
decl_stmt|;
name|uint32_t
name|forwarded_packets
decl_stmt|;
name|uint32_t
name|rx_drops_mtu
decl_stmt|;
name|uint32_t
name|rsvd2
index|[
literal|14
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_erx_stats_v1
block|{
name|uint32_t
name|rx_drops_no_fragments
index|[
literal|68
index|]
decl_stmt|;
name|uint32_t
name|rsvd
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_erx_stats_v0
block|{
name|uint32_t
name|rx_drops_no_fragments
index|[
literal|44
index|]
decl_stmt|;
name|uint32_t
name|rsvd
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_pmem_stats
block|{
name|uint32_t
name|eth_red_drops
decl_stmt|;
name|uint32_t
name|rsvd
index|[
literal|5
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_hw_stats_v1
block|{
name|struct
name|oce_rxf_stats_v1
name|rxf
decl_stmt|;
name|uint32_t
name|rsvd0
index|[
name|OCE_TXP_SW_SZ
index|]
decl_stmt|;
name|struct
name|oce_erx_stats_v1
name|erx
decl_stmt|;
name|struct
name|oce_pmem_stats
name|pmem
decl_stmt|;
name|uint32_t
name|rsvd1
index|[
literal|18
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oce_hw_stats_v0
block|{
name|struct
name|oce_rxf_stats_v0
name|rxf
decl_stmt|;
name|uint32_t
name|rsvd
index|[
literal|48
index|]
decl_stmt|;
name|struct
name|oce_erx_stats_v0
name|erx
decl_stmt|;
name|struct
name|oce_pmem_stats
name|pmem
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mbx_get_nic_stats_v0
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|req
struct|;
union|union
block|{
name|struct
name|oce_hw_stats_v0
name|stats
decl_stmt|;
block|}
name|rsp
union|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mbx_get_nic_stats
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|rsvd0
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|struct
name|oce_hw_stats_v1
name|stats
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [18(0x12)] NIC_GET_PPORT_STATS */
end_comment

begin_struct
struct|struct
name|pport_stats
block|{
name|uint64_t
name|tx_pkts
decl_stmt|;
name|uint64_t
name|tx_unicast_pkts
decl_stmt|;
name|uint64_t
name|tx_multicast_pkts
decl_stmt|;
name|uint64_t
name|tx_broadcast_pkts
decl_stmt|;
name|uint64_t
name|tx_bytes
decl_stmt|;
name|uint64_t
name|tx_unicast_bytes
decl_stmt|;
name|uint64_t
name|tx_multicast_bytes
decl_stmt|;
name|uint64_t
name|tx_broadcast_bytes
decl_stmt|;
name|uint64_t
name|tx_discards
decl_stmt|;
name|uint64_t
name|tx_errors
decl_stmt|;
name|uint64_t
name|tx_pause_frames
decl_stmt|;
name|uint64_t
name|tx_pause_on_frames
decl_stmt|;
name|uint64_t
name|tx_pause_off_frames
decl_stmt|;
name|uint64_t
name|tx_internal_mac_errors
decl_stmt|;
name|uint64_t
name|tx_control_frames
decl_stmt|;
name|uint64_t
name|tx_pkts_64_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_65_to_127_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_128_to_255_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_256_to_511_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_512_to_1023_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_1024_to_1518_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_1519_to_2047_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_2048_to_4095_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_4096_to_8191_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_8192_to_9216_bytes
decl_stmt|;
name|uint64_t
name|tx_lso_pkts
decl_stmt|;
name|uint64_t
name|rx_pkts
decl_stmt|;
name|uint64_t
name|rx_unicast_pkts
decl_stmt|;
name|uint64_t
name|rx_multicast_pkts
decl_stmt|;
name|uint64_t
name|rx_broadcast_pkts
decl_stmt|;
name|uint64_t
name|rx_bytes
decl_stmt|;
name|uint64_t
name|rx_unicast_bytes
decl_stmt|;
name|uint64_t
name|rx_multicast_bytes
decl_stmt|;
name|uint64_t
name|rx_broadcast_bytes
decl_stmt|;
name|uint32_t
name|rx_unknown_protos
decl_stmt|;
name|uint32_t
name|reserved_word69
decl_stmt|;
name|uint64_t
name|rx_discards
decl_stmt|;
name|uint64_t
name|rx_errors
decl_stmt|;
name|uint64_t
name|rx_crc_errors
decl_stmt|;
name|uint64_t
name|rx_alignment_errors
decl_stmt|;
name|uint64_t
name|rx_symbol_errors
decl_stmt|;
name|uint64_t
name|rx_pause_frames
decl_stmt|;
name|uint64_t
name|rx_pause_on_frames
decl_stmt|;
name|uint64_t
name|rx_pause_off_frames
decl_stmt|;
name|uint64_t
name|rx_frames_too_long
decl_stmt|;
name|uint64_t
name|rx_internal_mac_errors
decl_stmt|;
name|uint32_t
name|rx_undersize_pkts
decl_stmt|;
name|uint32_t
name|rx_oversize_pkts
decl_stmt|;
name|uint32_t
name|rx_fragment_pkts
decl_stmt|;
name|uint32_t
name|rx_jabbers
decl_stmt|;
name|uint64_t
name|rx_control_frames
decl_stmt|;
name|uint64_t
name|rx_control_frames_unknown_opcode
decl_stmt|;
name|uint32_t
name|rx_in_range_errors
decl_stmt|;
name|uint32_t
name|rx_out_of_range_errors
decl_stmt|;
name|uint32_t
name|rx_address_match_errors
decl_stmt|;
name|uint32_t
name|rx_vlan_mismatch_errors
decl_stmt|;
name|uint32_t
name|rx_dropped_too_small
decl_stmt|;
name|uint32_t
name|rx_dropped_too_short
decl_stmt|;
name|uint32_t
name|rx_dropped_header_too_small
decl_stmt|;
name|uint32_t
name|rx_dropped_invalid_tcp_length
decl_stmt|;
name|uint32_t
name|rx_dropped_runt
decl_stmt|;
name|uint32_t
name|rx_ip_checksum_errors
decl_stmt|;
name|uint32_t
name|rx_tcp_checksum_errors
decl_stmt|;
name|uint32_t
name|rx_udp_checksum_errors
decl_stmt|;
name|uint32_t
name|rx_non_rss_pkts
decl_stmt|;
name|uint64_t
name|reserved_word111
decl_stmt|;
name|uint64_t
name|rx_ipv4_pkts
decl_stmt|;
name|uint64_t
name|rx_ipv6_pkts
decl_stmt|;
name|uint64_t
name|rx_ipv4_bytes
decl_stmt|;
name|uint64_t
name|rx_ipv6_bytes
decl_stmt|;
name|uint64_t
name|rx_nic_pkts
decl_stmt|;
name|uint64_t
name|rx_tcp_pkts
decl_stmt|;
name|uint64_t
name|rx_iscsi_pkts
decl_stmt|;
name|uint64_t
name|rx_management_pkts
decl_stmt|;
name|uint64_t
name|rx_switched_unicast_pkts
decl_stmt|;
name|uint64_t
name|rx_switched_multicast_pkts
decl_stmt|;
name|uint64_t
name|rx_switched_broadcast_pkts
decl_stmt|;
name|uint64_t
name|num_forwards
decl_stmt|;
name|uint32_t
name|rx_fifo_overflow
decl_stmt|;
name|uint32_t
name|rx_input_fifo_overflow
decl_stmt|;
name|uint64_t
name|rx_drops_too_many_frags
decl_stmt|;
name|uint32_t
name|rx_drops_invalid_queue
decl_stmt|;
name|uint32_t
name|reserved_word141
decl_stmt|;
name|uint64_t
name|rx_drops_mtu
decl_stmt|;
name|uint64_t
name|rx_pkts_64_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_65_to_127_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_128_to_255_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_256_to_511_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_512_to_1023_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_1024_to_1518_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_1519_to_2047_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_2048_to_4095_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_4096_to_8191_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_8192_to_9216_bytes
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mbx_get_pport_stats
block|{
comment|/* dw0 - dw3 */
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
comment|/* dw4 */
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|reset_stats
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|8
decl_stmt|;
name|uint32_t
name|port_number
range|:
literal|16
decl_stmt|;
else|#
directive|else
name|uint32_t
name|port_number
range|:
literal|16
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reset_stats
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
union|union
block|{
name|struct
name|pport_stats
name|pps
decl_stmt|;
name|uint32_t
name|pport_stats
index|[
literal|164
operator|-
literal|4
operator|+
literal|1
index|]
decl_stmt|;
block|}
name|rsp
union|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [19(0x13)] NIC_GET_VPORT_STATS */
end_comment

begin_struct
struct|struct
name|vport_stats
block|{
name|uint64_t
name|tx_pkts
decl_stmt|;
name|uint64_t
name|tx_unicast_pkts
decl_stmt|;
name|uint64_t
name|tx_multicast_pkts
decl_stmt|;
name|uint64_t
name|tx_broadcast_pkts
decl_stmt|;
name|uint64_t
name|tx_bytes
decl_stmt|;
name|uint64_t
name|tx_unicast_bytes
decl_stmt|;
name|uint64_t
name|tx_multicast_bytes
decl_stmt|;
name|uint64_t
name|tx_broadcast_bytes
decl_stmt|;
name|uint64_t
name|tx_discards
decl_stmt|;
name|uint64_t
name|tx_errors
decl_stmt|;
name|uint64_t
name|tx_pkts_64_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_65_to_127_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_128_to_255_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_256_to_511_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_512_to_1023_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_1024_to_1518_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_1519_to_9699_bytes
decl_stmt|;
name|uint64_t
name|tx_pkts_over_9699_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts
decl_stmt|;
name|uint64_t
name|rx_unicast_pkts
decl_stmt|;
name|uint64_t
name|rx_multicast_pkts
decl_stmt|;
name|uint64_t
name|rx_broadcast_pkts
decl_stmt|;
name|uint64_t
name|rx_bytes
decl_stmt|;
name|uint64_t
name|rx_unicast_bytes
decl_stmt|;
name|uint64_t
name|rx_multicast_bytes
decl_stmt|;
name|uint64_t
name|rx_broadcast_bytes
decl_stmt|;
name|uint64_t
name|rx_discards
decl_stmt|;
name|uint64_t
name|rx_errors
decl_stmt|;
name|uint64_t
name|rx_pkts_64_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_65_to_127_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_128_to_255_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_256_to_511_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_512_to_1023_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_1024_to_1518_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_1519_to_9699_bytes
decl_stmt|;
name|uint64_t
name|rx_pkts_gt_9699_bytes
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mbx_get_vport_stats
block|{
comment|/* dw0 - dw3 */
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
comment|/* dw4 */
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|reset_stats
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|8
decl_stmt|;
name|uint32_t
name|vport_number
range|:
literal|16
decl_stmt|;
else|#
directive|else
name|uint32_t
name|vport_number
range|:
literal|16
decl_stmt|;
name|uint32_t
name|rsvd0
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reset_stats
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
union|union
block|{
name|struct
name|vport_stats
name|vps
decl_stmt|;
name|uint32_t
name|vport_stats
index|[
literal|75
operator|-
literal|4
operator|+
literal|1
index|]
decl_stmt|;
block|}
name|rsp
union|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * @brief	[20(0x14)] NIC_GET_QUEUE_STATS  * The significant difference between vPort and Queue statistics is  * the packet byte counters.  */
end_comment

begin_struct
struct|struct
name|queue_stats
block|{
name|uint64_t
name|packets
decl_stmt|;
name|uint64_t
name|bytes
decl_stmt|;
name|uint64_t
name|errors
decl_stmt|;
name|uint64_t
name|drops
decl_stmt|;
name|uint64_t
name|buffer_errors
decl_stmt|;
comment|/* rsvd when tx */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|QUEUE_TYPE_WQ
value|0
end_define

begin_define
define|#
directive|define
name|QUEUE_TYPE_RQ
value|1
end_define

begin_define
define|#
directive|define
name|QUEUE_TYPE_HDS_RQ
value|1
end_define

begin_comment
comment|/* same as RQ */
end_comment

begin_struct
struct|struct
name|mbx_get_queue_stats
block|{
comment|/* dw0 - dw3 */
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
comment|/* dw4 */
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|reset_stats
range|:
literal|8
decl_stmt|;
name|uint32_t
name|queue_type
range|:
literal|8
decl_stmt|;
name|uint32_t
name|queue_id
range|:
literal|16
decl_stmt|;
else|#
directive|else
name|uint32_t
name|queue_id
range|:
literal|16
decl_stmt|;
name|uint32_t
name|queue_type
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reset_stats
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
union|union
block|{
name|struct
name|queue_stats
name|qs
decl_stmt|;
name|uint32_t
name|queue_stats
index|[
literal|13
operator|-
literal|4
operator|+
literal|1
index|]
decl_stmt|;
block|}
name|rsp
union|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* [01] NIC_CONFIG_RSS */
end_comment

begin_define
define|#
directive|define
name|OCE_HASH_TBL_SZ
value|10
end_define

begin_define
define|#
directive|define
name|OCE_CPU_TBL_SZ
value|128
end_define

begin_define
define|#
directive|define
name|OCE_FLUSH
value|1
end_define

begin_comment
comment|/* RSS flush completion per CQ port */
end_comment

begin_struct
struct|struct
name|mbx_config_nic_rss
block|{
name|struct
name|mbx_hdr
name|hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|_BIG_ENDIAN
name|uint32_t
name|if_id
decl_stmt|;
name|uint16_t
name|cpu_tbl_sz_log2
decl_stmt|;
name|uint16_t
name|enable_rss
decl_stmt|;
name|uint32_t
name|hash
index|[
name|OCE_HASH_TBL_SZ
index|]
decl_stmt|;
name|uint8_t
name|cputable
index|[
name|OCE_CPU_TBL_SZ
index|]
decl_stmt|;
name|uint8_t
name|rsvd
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|flush
decl_stmt|;
else|#
directive|else
name|uint32_t
name|if_id
decl_stmt|;
name|uint16_t
name|enable_rss
decl_stmt|;
name|uint16_t
name|cpu_tbl_sz_log2
decl_stmt|;
name|uint32_t
name|hash
index|[
name|OCE_HASH_TBL_SZ
index|]
decl_stmt|;
name|uint8_t
name|cputable
index|[
name|OCE_CPU_TBL_SZ
index|]
decl_stmt|;
name|uint8_t
name|flush
decl_stmt|;
name|uint8_t
name|rsvd
index|[
literal|3
index|]
decl_stmt|;
endif|#
directive|endif
block|}
name|req
struct|;
struct|struct
block|{
name|uint8_t
name|rsvd
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|rss_bank
decl_stmt|;
block|}
name|rsp
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|)
end_pragma

begin_typedef
typedef|typedef
name|uint32_t
name|oce_stat_t
typedef|;
end_typedef

begin_comment
comment|/* statistic counter */
end_comment

begin_enum
enum|enum
name|OCE_RXF_PORT_STATS
block|{
name|RXF_RX_BYTES_LSD
block|,
name|RXF_RX_BYTES_MSD
block|,
name|RXF_RX_TOTAL_FRAMES
block|,
name|RXF_RX_UNICAST_FRAMES
block|,
name|RXF_RX_MULTICAST_FRAMES
block|,
name|RXF_RX_BROADCAST_FRAMES
block|,
name|RXF_RX_CRC_ERRORS
block|,
name|RXF_RX_ALIGNMENT_SYMBOL_ERRORS
block|,
name|RXF_RX_PAUSE_FRAMES
block|,
name|RXF_RX_CONTROL_FRAMES
block|,
name|RXF_RX_IN_RANGE_ERRORS
block|,
name|RXF_RX_OUT_RANGE_ERRORS
block|,
name|RXF_RX_FRAME_TOO_LONG
block|,
name|RXF_RX_ADDRESS_MATCH_ERRORS
block|,
name|RXF_RX_VLAN_MISMATCH
block|,
name|RXF_RX_DROPPED_TOO_SMALL
block|,
name|RXF_RX_DROPPED_TOO_SHORT
block|,
name|RXF_RX_DROPPED_HEADER_TOO_SMALL
block|,
name|RXF_RX_DROPPED_TCP_LENGTH
block|,
name|RXF_RX_DROPPED_RUNT
block|,
name|RXF_RX_64_BYTE_PACKETS
block|,
name|RXF_RX_65_127_BYTE_PACKETS
block|,
name|RXF_RX_128_256_BYTE_PACKETS
block|,
name|RXF_RX_256_511_BYTE_PACKETS
block|,
name|RXF_RX_512_1023_BYTE_PACKETS
block|,
name|RXF_RX_1024_1518_BYTE_PACKETS
block|,
name|RXF_RX_1519_2047_BYTE_PACKETS
block|,
name|RXF_RX_2048_4095_BYTE_PACKETS
block|,
name|RXF_RX_4096_8191_BYTE_PACKETS
block|,
name|RXF_RX_8192_9216_BYTE_PACKETS
block|,
name|RXF_RX_IP_CHECKSUM_ERRS
block|,
name|RXF_RX_TCP_CHECKSUM_ERRS
block|,
name|RXF_RX_UDP_CHECKSUM_ERRS
block|,
name|RXF_RX_NON_RSS_PACKETS
block|,
name|RXF_RX_IPV4_PACKETS
block|,
name|RXF_RX_IPV6_PACKETS
block|,
name|RXF_RX_IPV4_BYTES_LSD
block|,
name|RXF_RX_IPV4_BYTES_MSD
block|,
name|RXF_RX_IPV6_BYTES_LSD
block|,
name|RXF_RX_IPV6_BYTES_MSD
block|,
name|RXF_RX_CHUTE1_PACKETS
block|,
name|RXF_RX_CHUTE2_PACKETS
block|,
name|RXF_RX_CHUTE3_PACKETS
block|,
name|RXF_RX_MANAGEMENT_PACKETS
block|,
name|RXF_RX_SWITCHED_UNICAST_PACKETS
block|,
name|RXF_RX_SWITCHED_MULTICAST_PACKETS
block|,
name|RXF_RX_SWITCHED_BROADCAST_PACKETS
block|,
name|RXF_TX_BYTES_LSD
block|,
name|RXF_TX_BYTES_MSD
block|,
name|RXF_TX_UNICAST_FRAMES
block|,
name|RXF_TX_MULTICAST_FRAMES
block|,
name|RXF_TX_BROADCAST_FRAMES
block|,
name|RXF_TX_PAUSE_FRAMES
block|,
name|RXF_TX_CONTROL_FRAMES
block|,
name|RXF_TX_64_BYTE_PACKETS
block|,
name|RXF_TX_65_127_BYTE_PACKETS
block|,
name|RXF_TX_128_256_BYTE_PACKETS
block|,
name|RXF_TX_256_511_BYTE_PACKETS
block|,
name|RXF_TX_512_1023_BYTE_PACKETS
block|,
name|RXF_TX_1024_1518_BYTE_PACKETS
block|,
name|RXF_TX_1519_2047_BYTE_PACKETS
block|,
name|RXF_TX_2048_4095_BYTE_PACKETS
block|,
name|RXF_TX_4096_8191_BYTE_PACKETS
block|,
name|RXF_TX_8192_9216_BYTE_PACKETS
block|,
name|RXF_RX_FIFO_OVERFLOW
block|,
name|RXF_RX_INPUT_FIFO_OVERFLOW
block|,
name|RXF_PORT_STATS_N_WORDS
block|}
enum|;
end_enum

begin_enum
enum|enum
name|OCE_RXF_ADDL_STATS
block|{
name|RXF_RX_DROPS_NO_PBUF
block|,
name|RXF_RX_DROPS_NO_TXPB
block|,
name|RXF_RX_DROPS_NO_ERX_DESCR
block|,
name|RXF_RX_DROPS_NO_TPRE_DESCR
block|,
name|RXF_MANAGEMENT_RX_PORT_PACKETS
block|,
name|RXF_MANAGEMENT_RX_PORT_BYTES
block|,
name|RXF_MANAGEMENT_RX_PORT_PAUSE_FRAMES
block|,
name|RXF_MANAGEMENT_RX_PORT_ERRORS
block|,
name|RXF_MANAGEMENT_TX_PORT_PACKETS
block|,
name|RXF_MANAGEMENT_TX_PORT_BYTES
block|,
name|RXF_MANAGEMENT_TX_PORT_PAUSE
block|,
name|RXF_MANAGEMENT_RX_PORT_RXFIFO_OVERFLOW
block|,
name|RXF_RX_DROPS_TOO_MANY_FRAGS
block|,
name|RXF_RX_DROPS_INVALID_RING
block|,
name|RXF_FORWARDED_PACKETS
block|,
name|RXF_RX_DROPS_MTU
block|,
name|RXF_ADDL_STATS_N_WORDS
block|}
enum|;
end_enum

begin_enum
enum|enum
name|OCE_TX_CHUTE_PORT_STATS
block|{
name|CTPT_XMT_IPV4_PKTS
block|,
name|CTPT_XMT_IPV4_LSD
block|,
name|CTPT_XMT_IPV4_MSD
block|,
name|CTPT_XMT_IPV6_PKTS
block|,
name|CTPT_XMT_IPV6_LSD
block|,
name|CTPT_XMT_IPV6_MSD
block|,
name|CTPT_REXMT_IPV4_PKTs
block|,
name|CTPT_REXMT_IPV4_LSD
block|,
name|CTPT_REXMT_IPV4_MSD
block|,
name|CTPT_REXMT_IPV6_PKTs
block|,
name|CTPT_REXMT_IPV6_LSD
block|,
name|CTPT_REXMT_IPV6_MSD
block|,
name|CTPT_N_WORDS
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|OCE_RX_ERR_STATS
block|{
name|RX_DROPS_NO_FRAGMENTS_0
block|,
name|RX_DROPS_NO_FRAGMENTS_1
block|,
name|RX_DROPS_NO_FRAGMENTS_2
block|,
name|RX_DROPS_NO_FRAGMENTS_3
block|,
name|RX_DROPS_NO_FRAGMENTS_4
block|,
name|RX_DROPS_NO_FRAGMENTS_5
block|,
name|RX_DROPS_NO_FRAGMENTS_6
block|,
name|RX_DROPS_NO_FRAGMENTS_7
block|,
name|RX_DROPS_NO_FRAGMENTS_8
block|,
name|RX_DROPS_NO_FRAGMENTS_9
block|,
name|RX_DROPS_NO_FRAGMENTS_10
block|,
name|RX_DROPS_NO_FRAGMENTS_11
block|,
name|RX_DROPS_NO_FRAGMENTS_12
block|,
name|RX_DROPS_NO_FRAGMENTS_13
block|,
name|RX_DROPS_NO_FRAGMENTS_14
block|,
name|RX_DROPS_NO_FRAGMENTS_15
block|,
name|RX_DROPS_NO_FRAGMENTS_16
block|,
name|RX_DROPS_NO_FRAGMENTS_17
block|,
name|RX_DROPS_NO_FRAGMENTS_18
block|,
name|RX_DROPS_NO_FRAGMENTS_19
block|,
name|RX_DROPS_NO_FRAGMENTS_20
block|,
name|RX_DROPS_NO_FRAGMENTS_21
block|,
name|RX_DROPS_NO_FRAGMENTS_22
block|,
name|RX_DROPS_NO_FRAGMENTS_23
block|,
name|RX_DROPS_NO_FRAGMENTS_24
block|,
name|RX_DROPS_NO_FRAGMENTS_25
block|,
name|RX_DROPS_NO_FRAGMENTS_26
block|,
name|RX_DROPS_NO_FRAGMENTS_27
block|,
name|RX_DROPS_NO_FRAGMENTS_28
block|,
name|RX_DROPS_NO_FRAGMENTS_29
block|,
name|RX_DROPS_NO_FRAGMENTS_30
block|,
name|RX_DROPS_NO_FRAGMENTS_31
block|,
name|RX_DROPS_NO_FRAGMENTS_32
block|,
name|RX_DROPS_NO_FRAGMENTS_33
block|,
name|RX_DROPS_NO_FRAGMENTS_34
block|,
name|RX_DROPS_NO_FRAGMENTS_35
block|,
name|RX_DROPS_NO_FRAGMENTS_36
block|,
name|RX_DROPS_NO_FRAGMENTS_37
block|,
name|RX_DROPS_NO_FRAGMENTS_38
block|,
name|RX_DROPS_NO_FRAGMENTS_39
block|,
name|RX_DROPS_NO_FRAGMENTS_40
block|,
name|RX_DROPS_NO_FRAGMENTS_41
block|,
name|RX_DROPS_NO_FRAGMENTS_42
block|,
name|RX_DROPS_NO_FRAGMENTS_43
block|,
name|RX_DEBUG_WDMA_SENT_HOLD
block|,
name|RX_DEBUG_WDMA_PBFREE_SENT_HOLD
block|,
name|RX_DEBUG_WDMA_0B_PBFREE_SENT_HOLD
block|,
name|RX_DEBUG_PMEM_PBUF_DEALLOC
block|,
name|RX_ERRORS_N_WORDS
block|}
enum|;
end_enum

begin_enum
enum|enum
name|OCE_PMEM_ERR_STATS
block|{
name|PMEM_ETH_RED_DROPS
block|,
name|PMEM_LRO_RED_DROPS
block|,
name|PMEM_ULP0_RED_DROPS
block|,
name|PMEM_ULP1_RED_DROPS
block|,
name|PMEM_GLOBAL_RED_DROPS
block|,
name|PMEM_ERRORS_N_WORDS
block|}
enum|;
end_enum

begin_comment
comment|/**  * @brief Statistics for a given Physical Port  * These satisfy all the required BE2 statistics and also the  * following MIB objects:  *   * RFC 2863 - The Interfaces Group MIB  * RFC 2819 - Remote Network Monitoring Management Information Base (RMON)  * RFC 3635 - Managed Objects for the Ethernet-like Interface Types  * RFC 4502 - Remote Network Monitoring Mgmt Information Base Ver-2 (RMON2)  *   */
end_comment

begin_enum
enum|enum
name|OCE_PPORT_STATS
block|{
name|PPORT_TX_PKTS
init|=
literal|0
block|,
name|PPORT_TX_UNICAST_PKTS
init|=
literal|2
block|,
name|PPORT_TX_MULTICAST_PKTS
init|=
literal|4
block|,
name|PPORT_TX_BROADCAST_PKTS
init|=
literal|6
block|,
name|PPORT_TX_BYTES
init|=
literal|8
block|,
name|PPORT_TX_UNICAST_BYTES
init|=
literal|10
block|,
name|PPORT_TX_MULTICAST_BYTES
init|=
literal|12
block|,
name|PPORT_TX_BROADCAST_BYTES
init|=
literal|14
block|,
name|PPORT_TX_DISCARDS
init|=
literal|16
block|,
name|PPORT_TX_ERRORS
init|=
literal|18
block|,
name|PPORT_TX_PAUSE_FRAMES
init|=
literal|20
block|,
name|PPORT_TX_PAUSE_ON_FRAMES
init|=
literal|22
block|,
name|PPORT_TX_PAUSE_OFF_FRAMES
init|=
literal|24
block|,
name|PPORT_TX_INTERNAL_MAC_ERRORS
init|=
literal|26
block|,
name|PPORT_TX_CONTROL_FRAMES
init|=
literal|28
block|,
name|PPORT_TX_PKTS_64_BYTES
init|=
literal|30
block|,
name|PPORT_TX_PKTS_65_TO_127_BYTES
init|=
literal|32
block|,
name|PPORT_TX_PKTS_128_TO_255_BYTES
init|=
literal|34
block|,
name|PPORT_TX_PKTS_256_TO_511_BYTES
init|=
literal|36
block|,
name|PPORT_TX_PKTS_512_TO_1023_BYTES
init|=
literal|38
block|,
name|PPORT_TX_PKTS_1024_TO_1518_BYTES
init|=
literal|40
block|,
name|PPORT_TX_PKTS_1519_TO_2047_BYTES
init|=
literal|42
block|,
name|PPORT_TX_PKTS_2048_TO_4095_BYTES
init|=
literal|44
block|,
name|PPORT_TX_PKTS_4096_TO_8191_BYTES
init|=
literal|46
block|,
name|PPORT_TX_PKTS_8192_TO_9216_BYTES
init|=
literal|48
block|,
name|PPORT_TX_LSO_PKTS
init|=
literal|50
block|,
name|PPORT_RX_PKTS
init|=
literal|52
block|,
name|PPORT_RX_UNICAST_PKTS
init|=
literal|54
block|,
name|PPORT_RX_MULTICAST_PKTS
init|=
literal|56
block|,
name|PPORT_RX_BROADCAST_PKTS
init|=
literal|58
block|,
name|PPORT_RX_BYTES
init|=
literal|60
block|,
name|PPORT_RX_UNICAST_BYTES
init|=
literal|62
block|,
name|PPORT_RX_MULTICAST_BYTES
init|=
literal|64
block|,
name|PPORT_RX_BROADCAST_BYTES
init|=
literal|66
block|,
name|PPORT_RX_UNKNOWN_PROTOS
init|=
literal|68
block|,
name|PPORT_RESERVED_WORD69
init|=
literal|69
block|,
name|PPORT_RX_DISCARDS
init|=
literal|70
block|,
name|PPORT_RX_ERRORS
init|=
literal|72
block|,
name|PPORT_RX_CRC_ERRORS
init|=
literal|74
block|,
name|PPORT_RX_ALIGNMENT_ERRORS
init|=
literal|76
block|,
name|PPORT_RX_SYMBOL_ERRORS
init|=
literal|78
block|,
name|PPORT_RX_PAUSE_FRAMES
init|=
literal|80
block|,
name|PPORT_RX_PAUSE_ON_FRAMES
init|=
literal|82
block|,
name|PPORT_RX_PAUSE_OFF_FRAMES
init|=
literal|84
block|,
name|PPORT_RX_FRAMES_TOO_LONG
init|=
literal|86
block|,
name|PPORT_RX_INTERNAL_MAC_ERRORS
init|=
literal|88
block|,
name|PPORT_RX_UNDERSIZE_PKTS
init|=
literal|90
block|,
name|PPORT_RX_OVERSIZE_PKTS
init|=
literal|91
block|,
name|PPORT_RX_FRAGMENT_PKTS
init|=
literal|92
block|,
name|PPORT_RX_JABBERS
init|=
literal|93
block|,
name|PPORT_RX_CONTROL_FRAMES
init|=
literal|94
block|,
name|PPORT_RX_CONTROL_FRAMES_UNK_OPCODE
init|=
literal|96
block|,
name|PPORT_RX_IN_RANGE_ERRORS
init|=
literal|98
block|,
name|PPORT_RX_OUT_OF_RANGE_ERRORS
init|=
literal|99
block|,
name|PPORT_RX_ADDRESS_MATCH_ERRORS
init|=
literal|100
block|,
name|PPORT_RX_VLAN_MISMATCH_ERRORS
init|=
literal|101
block|,
name|PPORT_RX_DROPPED_TOO_SMALL
init|=
literal|102
block|,
name|PPORT_RX_DROPPED_TOO_SHORT
init|=
literal|103
block|,
name|PPORT_RX_DROPPED_HEADER_TOO_SMALL
init|=
literal|104
block|,
name|PPORT_RX_DROPPED_INVALID_TCP_LENGTH
init|=
literal|105
block|,
name|PPORT_RX_DROPPED_RUNT
init|=
literal|106
block|,
name|PPORT_RX_IP_CHECKSUM_ERRORS
init|=
literal|107
block|,
name|PPORT_RX_TCP_CHECKSUM_ERRORS
init|=
literal|108
block|,
name|PPORT_RX_UDP_CHECKSUM_ERRORS
init|=
literal|109
block|,
name|PPORT_RX_NON_RSS_PKTS
init|=
literal|110
block|,
name|PPORT_RESERVED_WORD111
init|=
literal|111
block|,
name|PPORT_RX_IPV4_PKTS
init|=
literal|112
block|,
name|PPORT_RX_IPV6_PKTS
init|=
literal|114
block|,
name|PPORT_RX_IPV4_BYTES
init|=
literal|116
block|,
name|PPORT_RX_IPV6_BYTES
init|=
literal|118
block|,
name|PPORT_RX_NIC_PKTS
init|=
literal|120
block|,
name|PPORT_RX_TCP_PKTS
init|=
literal|122
block|,
name|PPORT_RX_ISCSI_PKTS
init|=
literal|124
block|,
name|PPORT_RX_MANAGEMENT_PKTS
init|=
literal|126
block|,
name|PPORT_RX_SWITCHED_UNICAST_PKTS
init|=
literal|128
block|,
name|PPORT_RX_SWITCHED_MULTICAST_PKTS
init|=
literal|130
block|,
name|PPORT_RX_SWITCHED_BROADCAST_PKTS
init|=
literal|132
block|,
name|PPORT_NUM_FORWARDS
init|=
literal|134
block|,
name|PPORT_RX_FIFO_OVERFLOW
init|=
literal|136
block|,
name|PPORT_RX_INPUT_FIFO_OVERFLOW
init|=
literal|137
block|,
name|PPORT_RX_DROPS_TOO_MANY_FRAGS
init|=
literal|138
block|,
name|PPORT_RX_DROPS_INVALID_QUEUE
init|=
literal|140
block|,
name|PPORT_RESERVED_WORD141
init|=
literal|141
block|,
name|PPORT_RX_DROPS_MTU
init|=
literal|142
block|,
name|PPORT_RX_PKTS_64_BYTES
init|=
literal|144
block|,
name|PPORT_RX_PKTS_65_TO_127_BYTES
init|=
literal|146
block|,
name|PPORT_RX_PKTS_128_TO_255_BYTES
init|=
literal|148
block|,
name|PPORT_RX_PKTS_256_TO_511_BYTES
init|=
literal|150
block|,
name|PPORT_RX_PKTS_512_TO_1023_BYTES
init|=
literal|152
block|,
name|PPORT_RX_PKTS_1024_TO_1518_BYTES
init|=
literal|154
block|,
name|PPORT_RX_PKTS_1519_TO_2047_BYTES
init|=
literal|156
block|,
name|PPORT_RX_PKTS_2048_TO_4095_BYTES
init|=
literal|158
block|,
name|PPORT_RX_PKTS_4096_TO_8191_BYTES
init|=
literal|160
block|,
name|PPORT_RX_PKTS_8192_TO_9216_BYTES
init|=
literal|162
block|,
name|PPORT_N_WORDS
init|=
literal|164
block|}
enum|;
end_enum

begin_comment
comment|/**  * @brief Statistics for a given Virtual Port (vPort)  * The following describes the vPort statistics satisfying  * requirements of Linux/VMWare netdev statistics and  * Microsoft Windows Statistics along with other Operating Systems.  */
end_comment

begin_enum
enum|enum
name|OCE_VPORT_STATS
block|{
name|VPORT_TX_PKTS
init|=
literal|0
block|,
name|VPORT_TX_UNICAST_PKTS
init|=
literal|2
block|,
name|VPORT_TX_MULTICAST_PKTS
init|=
literal|4
block|,
name|VPORT_TX_BROADCAST_PKTS
init|=
literal|6
block|,
name|VPORT_TX_BYTES
init|=
literal|8
block|,
name|VPORT_TX_UNICAST_BYTES
init|=
literal|10
block|,
name|VPORT_TX_MULTICAST_BYTES
init|=
literal|12
block|,
name|VPORT_TX_BROADCAST_BYTES
init|=
literal|14
block|,
name|VPORT_TX_DISCARDS
init|=
literal|16
block|,
name|VPORT_TX_ERRORS
init|=
literal|18
block|,
name|VPORT_TX_PKTS_64_BYTES
init|=
literal|20
block|,
name|VPORT_TX_PKTS_65_TO_127_BYTES
init|=
literal|22
block|,
name|VPORT_TX_PKTS_128_TO_255_BYTES
init|=
literal|24
block|,
name|VPORT_TX_PKTS_256_TO_511_BYTES
init|=
literal|26
block|,
name|VPORT_TX_PKTS_512_TO_1023_BYTEs
init|=
literal|28
block|,
name|VPORT_TX_PKTS_1024_TO_1518_BYTEs
init|=
literal|30
block|,
name|VPORT_TX_PKTS_1519_TO_9699_BYTEs
init|=
literal|32
block|,
name|VPORT_TX_PKTS_OVER_9699_BYTES
init|=
literal|34
block|,
name|VPORT_RX_PKTS
init|=
literal|36
block|,
name|VPORT_RX_UNICAST_PKTS
init|=
literal|38
block|,
name|VPORT_RX_MULTICAST_PKTS
init|=
literal|40
block|,
name|VPORT_RX_BROADCAST_PKTS
init|=
literal|42
block|,
name|VPORT_RX_BYTES
init|=
literal|44
block|,
name|VPORT_RX_UNICAST_BYTES
init|=
literal|46
block|,
name|VPORT_RX_MULTICAST_BYTES
init|=
literal|48
block|,
name|VPORT_RX_BROADCAST_BYTES
init|=
literal|50
block|,
name|VPORT_RX_DISCARDS
init|=
literal|52
block|,
name|VPORT_RX_ERRORS
init|=
literal|54
block|,
name|VPORT_RX_PKTS_64_BYTES
init|=
literal|56
block|,
name|VPORT_RX_PKTS_65_TO_127_BYTES
init|=
literal|58
block|,
name|VPORT_RX_PKTS_128_TO_255_BYTES
init|=
literal|60
block|,
name|VPORT_RX_PKTS_256_TO_511_BYTES
init|=
literal|62
block|,
name|VPORT_RX_PKTS_512_TO_1023_BYTEs
init|=
literal|64
block|,
name|VPORT_RX_PKTS_1024_TO_1518_BYTEs
init|=
literal|66
block|,
name|VPORT_RX_PKTS_1519_TO_9699_BYTEs
init|=
literal|68
block|,
name|VPORT_RX_PKTS_OVER_9699_BYTES
init|=
literal|70
block|,
name|VPORT_N_WORDS
init|=
literal|72
block|}
enum|;
end_enum

begin_comment
comment|/**  * @brief Statistics for a given queue (NIC WQ, RQ, or HDS RQ)  * This set satisfies requirements of VMQare NetQueue and Microsoft VMQ  */
end_comment

begin_enum
enum|enum
name|OCE_QUEUE_TX_STATS
block|{
name|QUEUE_TX_PKTS
init|=
literal|0
block|,
name|QUEUE_TX_BYTES
init|=
literal|2
block|,
name|QUEUE_TX_ERRORS
init|=
literal|4
block|,
name|QUEUE_TX_DROPS
init|=
literal|6
block|,
name|QUEUE_TX_N_WORDS
init|=
literal|8
block|}
enum|;
end_enum

begin_enum
enum|enum
name|OCE_QUEUE_RX_STATS
block|{
name|QUEUE_RX_PKTS
init|=
literal|0
block|,
name|QUEUE_RX_BYTES
init|=
literal|2
block|,
name|QUEUE_RX_ERRORS
init|=
literal|4
block|,
name|QUEUE_RX_DROPS
init|=
literal|6
block|,
name|QUEUE_RX_BUFFER_ERRORS
init|=
literal|8
block|,
name|QUEUE_RX_N_WORDS
init|=
literal|10
block|}
enum|;
end_enum

end_unit

