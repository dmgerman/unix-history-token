begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2003-2004 MARVELL SEMICONDUCTOR ISRAEL, LTD.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__INCmvSatah
end_ifndef

begin_define
define|#
directive|define
name|__INCmvSatah
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|SUPPORT_MV_SATA_GEN_1
end_ifndef

begin_define
define|#
directive|define
name|SUPPORT_MV_SATA_GEN_1
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|SUPPORT_MV_SATA_GEN_2
end_ifndef

begin_define
define|#
directive|define
name|SUPPORT_MV_SATA_GEN_2
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|SUPPORT_MV_SATA_GEN_1
operator|==
literal|1
operator|&&
name|SUPPORT_MV_SATA_GEN_2
operator|==
literal|1
end_if

begin_define
define|#
directive|define
name|MV_SATA_GEN_1
parameter_list|(
name|x
parameter_list|)
value|((x)->sataAdapterGeneration==1)
end_define

begin_define
define|#
directive|define
name|MV_SATA_GEN_2
parameter_list|(
name|x
parameter_list|)
value|((x)->sataAdapterGeneration==2)
end_define

begin_elif
elif|#
directive|elif
name|SUPPORT_MV_SATA_GEN_1
operator|==
literal|1
end_elif

begin_define
define|#
directive|define
name|MV_SATA_GEN_1
parameter_list|(
name|x
parameter_list|)
value|1
end_define

begin_define
define|#
directive|define
name|MV_SATA_GEN_2
parameter_list|(
name|x
parameter_list|)
value|0
end_define

begin_elif
elif|#
directive|elif
name|SUPPORT_MV_SATA_GEN_2
operator|==
literal|1
end_elif

begin_define
define|#
directive|define
name|MV_SATA_GEN_1
parameter_list|(
name|x
parameter_list|)
value|0
end_define

begin_define
define|#
directive|define
name|MV_SATA_GEN_2
parameter_list|(
name|x
parameter_list|)
value|1
end_define

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
literal|"Which IC do you support?"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Definitions */
end_comment

begin_comment
comment|/* MV88SX50XX specific defines */
end_comment

begin_define
define|#
directive|define
name|MV_SATA_VENDOR_ID
value|0x11AB
end_define

begin_define
define|#
directive|define
name|MV_SATA_DEVICE_ID_5080
value|0x5080
end_define

begin_define
define|#
directive|define
name|MV_SATA_DEVICE_ID_5081
value|0x5081
end_define

begin_define
define|#
directive|define
name|MV_SATA_DEVICE_ID_6080
value|0x6080
end_define

begin_define
define|#
directive|define
name|MV_SATA_DEVICE_ID_6081
value|0x6081
end_define

begin_define
define|#
directive|define
name|MV_SATA_CHANNELS_NUM
value|8
end_define

begin_define
define|#
directive|define
name|MV_SATA_UNITS_NUM
value|2
end_define

begin_define
define|#
directive|define
name|MV_SATA_PCI_BAR0_SPACE_SIZE
value|(1<<18)
end_define

begin_comment
comment|/* 256 Kb*/
end_comment

begin_define
define|#
directive|define
name|CHANNEL_QUEUE_LENGTH
value|32
end_define

begin_define
define|#
directive|define
name|CHANNEL_QUEUE_MASK
value|0x1F
end_define

begin_define
define|#
directive|define
name|MV_EDMA_QUEUE_LENGTH
value|32
end_define

begin_comment
comment|/* Up to 32 outstanding	 */
end_comment

begin_comment
comment|/* commands per SATA channel*/
end_comment

begin_define
define|#
directive|define
name|MV_EDMA_QUEUE_MASK
value|0x1F
end_define

begin_define
define|#
directive|define
name|MV_EDMA_REQUEST_QUEUE_SIZE
value|1024
end_define

begin_comment
comment|/* 32*32 = 1KBytes */
end_comment

begin_define
define|#
directive|define
name|MV_EDMA_RESPONSE_QUEUE_SIZE
value|256
end_define

begin_comment
comment|/* 32*8 = 256 Bytes */
end_comment

begin_define
define|#
directive|define
name|MV_EDMA_REQUEST_ENTRY_SIZE
value|32
end_define

begin_define
define|#
directive|define
name|MV_EDMA_RESPONSE_ENTRY_SIZE
value|8
end_define

begin_define
define|#
directive|define
name|MV_EDMA_PRD_ENTRY_SIZE
value|16
end_define

begin_comment
comment|/* 16Bytes*/
end_comment

begin_define
define|#
directive|define
name|MV_EDMA_PRD_NO_SNOOP_FLAG
value|0x00000001
end_define

begin_comment
comment|/* MV_BIT0 */
end_comment

begin_define
define|#
directive|define
name|MV_EDMA_PRD_EOT_FLAG
value|0x00008000
end_define

begin_comment
comment|/* MV_BIT15 */
end_comment

begin_define
define|#
directive|define
name|MV_ATA_IDENTIFY_DEV_DATA_LENGTH
value|256
end_define

begin_comment
comment|/* number of words(2 byte)*/
end_comment

begin_define
define|#
directive|define
name|MV_ATA_MODEL_NUMBER_LEN
value|40
end_define

begin_define
define|#
directive|define
name|ATA_SECTOR_SIZE
value|512
end_define

begin_comment
comment|/* Log messages level defines */
end_comment

begin_define
define|#
directive|define
name|MV_DEBUG
value|0x1
end_define

begin_define
define|#
directive|define
name|MV_DEBUG_INIT
value|0x2
end_define

begin_define
define|#
directive|define
name|MV_DEBUG_INTERRUPTS
value|0x4
end_define

begin_define
define|#
directive|define
name|MV_DEBUG_SATA_LINK
value|0x8
end_define

begin_define
define|#
directive|define
name|MV_DEBUG_UDMA_COMMAND
value|0x10
end_define

begin_define
define|#
directive|define
name|MV_DEBUG_NON_UDMA_COMMAND
value|0x20
end_define

begin_define
define|#
directive|define
name|MV_DEBUG_ERROR
value|0x40
end_define

begin_comment
comment|/* Typedefs    */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|mvUdmaType
block|{
name|MV_UDMA_TYPE_READ
block|,
name|MV_UDMA_TYPE_WRITE
block|}
name|MV_UDMA_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|mvFlushType
block|{
name|MV_FLUSH_TYPE_CALLBACK
block|,
name|MV_FLUSH_TYPE_NONE
block|}
name|MV_FLUSH_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|mvCompletionType
block|{
name|MV_COMPLETION_TYPE_NORMAL
block|,
name|MV_COMPLETION_TYPE_ERROR
block|,
name|MV_COMPLETION_TYPE_ABORT
block|}
name|MV_COMPLETION_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|mvEventType
block|{
name|MV_EVENT_TYPE_ADAPTER_ERROR
block|,
name|MV_EVENT_TYPE_SATA_CABLE
block|}
name|MV_EVENT_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|mvEdmaMode
block|{
name|MV_EDMA_MODE_QUEUED
block|,
name|MV_EDMA_MODE_NOT_QUEUED
block|,
name|MV_EDMA_MODE_NATIVE_QUEUING
block|}
name|MV_EDMA_MODE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|mvEdmaQueueResult
block|{
name|MV_EDMA_QUEUE_RESULT_OK
init|=
literal|0
block|,
name|MV_EDMA_QUEUE_RESULT_EDMA_DISABLED
block|,
name|MV_EDMA_QUEUE_RESULT_FULL
block|,
name|MV_EDMA_QUEUE_RESULT_BAD_LBA_ADDRESS
block|,
name|MV_EDMA_QUEUE_RESULT_BAD_PARAMS
block|}
name|MV_EDMA_QUEUE_RESULT
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|mvQueueCommandResult
block|{
name|MV_QUEUE_COMMAND_RESULT_OK
init|=
literal|0
block|,
name|MV_QUEUE_COMMAND_RESULT_QUEUED_MODE_DISABLED
block|,
name|MV_QUEUE_COMMAND_RESULT_FULL
block|,
name|MV_QUEUE_COMMAND_RESULT_BAD_LBA_ADDRESS
block|,
name|MV_QUEUE_COMMAND_RESULT_BAD_PARAMS
block|}
name|MV_QUEUE_COMMAND_RESULT
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|mvNonUdmaProtocol
block|{
name|MV_NON_UDMA_PROTOCOL_NON_DATA
block|,
name|MV_NON_UDMA_PROTOCOL_PIO_DATA_IN
block|,
name|MV_NON_UDMA_PROTOCOL_PIO_DATA_OUT
block|}
name|MV_NON_UDMA_PROTOCOL
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|mvDmaRequestQueueEntry
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mvDmaResponseQueueEntry
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mvDmaCommandEntry
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mvSataAdapter
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mvStorageDevRegisters
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|MV_BOOLEAN
function_decl|(
modifier|*
name|HPTLIBAPI
name|mvSataCommandCompletionCallBack_t
function_decl|)
parameter_list|(
name|struct
name|mvSataAdapter
modifier|*
parameter_list|,
name|MV_U8
parameter_list|,
name|MV_COMPLETION_TYPE
parameter_list|,
name|MV_VOID_PTR
parameter_list|,
name|MV_U16
parameter_list|,
name|MV_U32
parameter_list|,
name|struct
name|mvStorageDevRegisters
name|FAR
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|mvQueuedCommandType
block|{
name|MV_QUEUED_COMMAND_TYPE_UDMA
block|,
name|MV_QUEUED_COMMAND_TYPE_NONE_UDMA
block|}
name|MV_QUEUED_COMMAND_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|mvUdmaCommandParams
block|{
name|MV_UDMA_TYPE
name|readWrite
decl_stmt|;
name|MV_BOOLEAN
name|isEXT
decl_stmt|;
name|MV_U32
name|lowLBAAddress
decl_stmt|;
name|MV_U16
name|highLBAAddress
decl_stmt|;
name|MV_U16
name|numOfSectors
decl_stmt|;
name|MV_U32
name|prdLowAddr
decl_stmt|;
name|MV_U32
name|prdHighAddr
decl_stmt|;
name|mvSataCommandCompletionCallBack_t
name|callBack
decl_stmt|;
name|MV_VOID_PTR
name|commandId
decl_stmt|;
block|}
name|MV_UDMA_COMMAND_PARAMS
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|mvNoneUdmaCommandParams
block|{
name|MV_NON_UDMA_PROTOCOL
name|protocolType
decl_stmt|;
name|MV_BOOLEAN
name|isEXT
decl_stmt|;
name|MV_U16_PTR
name|bufPtr
decl_stmt|;
name|MV_U32
name|count
decl_stmt|;
name|MV_U16
name|features
decl_stmt|;
name|MV_U16
name|sectorCount
decl_stmt|;
name|MV_U16
name|lbaLow
decl_stmt|;
name|MV_U16
name|lbaMid
decl_stmt|;
name|MV_U16
name|lbaHigh
decl_stmt|;
name|MV_U8
name|device
decl_stmt|;
name|MV_U8
name|command
decl_stmt|;
name|mvSataCommandCompletionCallBack_t
name|callBack
decl_stmt|;
name|MV_VOID_PTR
name|commandId
decl_stmt|;
block|}
name|MV_NONE_UDMA_COMMAND_PARAMS
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|mvQueueCommandInfo
block|{
name|MV_QUEUED_COMMAND_TYPE
name|type
decl_stmt|;
union|union
block|{
name|MV_UDMA_COMMAND_PARAMS
name|udmaCommand
decl_stmt|;
name|MV_NONE_UDMA_COMMAND_PARAMS
name|NoneUdmaCommand
decl_stmt|;
block|}
name|commandParams
union|;
block|}
name|MV_QUEUE_COMMAND_INFO
typedef|;
end_typedef

begin_comment
comment|/* The following structure is for the Core Driver internal usage */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|mvQueuedCommandEntry
block|{
name|MV_BOOLEAN
name|isFreeEntry
decl_stmt|;
name|MV_U8
name|commandTag
decl_stmt|;
name|struct
name|mvQueuedCommandEntry
modifier|*
name|next
decl_stmt|;
name|struct
name|mvQueuedCommandEntry
modifier|*
name|prev
decl_stmt|;
name|MV_QUEUE_COMMAND_INFO
name|commandInfo
decl_stmt|;
block|}
name|MV_QUEUED_COMMAND_ENTRY
typedef|;
end_typedef

begin_comment
comment|/* The following structures are part of the Core Driver API */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|mvSataChannel
block|{
comment|/* Fields set by Intermediate Application Layer */
name|MV_U8
name|channelNumber
decl_stmt|;
name|MV_BOOLEAN
name|waitingForInterrupt
decl_stmt|;
name|MV_BOOLEAN
name|lba48Address
decl_stmt|;
name|MV_BOOLEAN
name|maxReadTransfer
decl_stmt|;
name|struct
name|mvDmaRequestQueueEntry
name|FAR
modifier|*
name|requestQueue
decl_stmt|;
name|struct
name|mvDmaResponseQueueEntry
name|FAR
modifier|*
name|responseQueue
decl_stmt|;
name|MV_U32
name|requestQueuePciHiAddress
decl_stmt|;
name|MV_U32
name|requestQueuePciLowAddress
decl_stmt|;
name|MV_U32
name|responseQueuePciHiAddress
decl_stmt|;
name|MV_U32
name|responseQueuePciLowAddress
decl_stmt|;
comment|/* Fields set by CORE driver */
name|struct
name|mvSataAdapter
modifier|*
name|mvSataAdapter
decl_stmt|;
name|MV_OS_SEMAPHORE
name|semaphore
decl_stmt|;
name|MV_U32
name|eDmaRegsOffset
decl_stmt|;
name|MV_U16
name|identifyDevice
index|[
name|MV_ATA_IDENTIFY_DEV_DATA_LENGTH
index|]
decl_stmt|;
name|MV_BOOLEAN
name|EdmaActive
decl_stmt|;
name|MV_EDMA_MODE
name|queuedDMA
decl_stmt|;
name|MV_U8
name|outstandingCommands
decl_stmt|;
name|MV_BOOLEAN
name|workAroundDone
decl_stmt|;
name|struct
name|mvQueuedCommandEntry
name|commandsQueue
index|[
name|CHANNEL_QUEUE_LENGTH
index|]
decl_stmt|;
name|struct
name|mvQueuedCommandEntry
modifier|*
name|commandsQueueHead
decl_stmt|;
name|struct
name|mvQueuedCommandEntry
modifier|*
name|commandsQueueTail
decl_stmt|;
name|MV_BOOLEAN
name|queueCommandsEnabled
decl_stmt|;
name|MV_U8
name|noneUdmaOutstandingCommands
decl_stmt|;
name|MV_U8
name|EdmaQueuedCommands
decl_stmt|;
name|MV_U32
name|freeIDsStack
index|[
name|MV_EDMA_QUEUE_LENGTH
index|]
decl_stmt|;
name|MV_U32
name|freeIDsNum
decl_stmt|;
name|MV_U32
name|reqInPtr
decl_stmt|;
name|MV_U32
name|rspOutPtr
decl_stmt|;
block|}
name|MV_SATA_CHANNEL
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|mvSataAdapter
block|{
comment|/* Fields set by Intermediate Application Layer */
name|MV_U32
name|adapterId
decl_stmt|;
name|MV_U8
name|pcbVersion
decl_stmt|;
name|MV_U8
name|pciConfigRevisionId
decl_stmt|;
name|MV_U16
name|pciConfigDeviceId
decl_stmt|;
name|MV_VOID_PTR
name|IALData
decl_stmt|;
name|MV_BUS_ADDR_T
name|adapterIoBaseAddress
decl_stmt|;
name|MV_U32
name|intCoalThre
index|[
name|MV_SATA_UNITS_NUM
index|]
decl_stmt|;
name|MV_U32
name|intTimeThre
index|[
name|MV_SATA_UNITS_NUM
index|]
decl_stmt|;
name|MV_BOOLEAN
function_decl|(
modifier|*
name|HPTLIBAPI
name|mvSataEventNotify
function_decl|)
parameter_list|(
name|struct
name|mvSataAdapter
modifier|*
parameter_list|,
name|MV_EVENT_TYPE
parameter_list|,
name|MV_U32
parameter_list|,
name|MV_U32
parameter_list|)
function_decl|;
name|MV_SATA_CHANNEL
modifier|*
name|sataChannel
index|[
name|MV_SATA_CHANNELS_NUM
index|]
decl_stmt|;
name|MV_U32
name|pciCommand
decl_stmt|;
name|MV_U32
name|pciSerrMask
decl_stmt|;
name|MV_U32
name|pciInterruptMask
decl_stmt|;
comment|/* Fields set by CORE driver */
name|MV_OS_SEMAPHORE
name|semaphore
decl_stmt|;
name|MV_U32
name|mainMask
decl_stmt|;
name|MV_OS_SEMAPHORE
name|interruptsMaskSem
decl_stmt|;
name|MV_BOOLEAN
name|implementA0Workarounds
decl_stmt|;
name|MV_BOOLEAN
name|implement50XXB0Workarounds
decl_stmt|;
name|MV_BOOLEAN
name|implement50XXB1Workarounds
decl_stmt|;
name|MV_BOOLEAN
name|implement50XXB2Workarounds
decl_stmt|;
name|MV_BOOLEAN
name|implement60X1A0Workarounds
decl_stmt|;
name|MV_BOOLEAN
name|implement60X1A1Workarounds
decl_stmt|;
name|MV_BOOLEAN
name|implement60X1B0Workarounds
decl_stmt|;
name|MV_U8
name|sataAdapterGeneration
decl_stmt|;
name|MV_U8
name|failLEDMask
decl_stmt|;
name|MV_U8
name|signalAmps
index|[
name|MV_SATA_CHANNELS_NUM
index|]
decl_stmt|;
name|MV_U8
name|pre
index|[
name|MV_SATA_CHANNELS_NUM
index|]
decl_stmt|;
name|MV_BOOLEAN
name|staggaredSpinup
index|[
name|MV_SATA_CHANNELS_NUM
index|]
decl_stmt|;
comment|/* For 60x1 only */
block|}
name|MV_SATA_ADAPTER
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|mvSataAdapterStatus
block|{
comment|/* Fields set by CORE driver */
name|MV_BOOLEAN
name|channelConnected
index|[
name|MV_SATA_CHANNELS_NUM
index|]
decl_stmt|;
name|MV_U32
name|pciDLLStatusAndControlRegister
decl_stmt|;
name|MV_U32
name|pciCommandRegister
decl_stmt|;
name|MV_U32
name|pciModeRegister
decl_stmt|;
name|MV_U32
name|pciSERRMaskRegister
decl_stmt|;
name|MV_U32
name|intCoalThre
index|[
name|MV_SATA_UNITS_NUM
index|]
decl_stmt|;
name|MV_U32
name|intTimeThre
index|[
name|MV_SATA_UNITS_NUM
index|]
decl_stmt|;
name|MV_U32
name|R00StatusBridgePortRegister
index|[
name|MV_SATA_CHANNELS_NUM
index|]
decl_stmt|;
block|}
name|MV_SATA_ADAPTER_STATUS
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|mvSataChannelStatus
block|{
comment|/* Fields set by CORE driver */
name|MV_BOOLEAN
name|isConnected
decl_stmt|;
name|MV_U8
name|modelNumber
index|[
name|MV_ATA_MODEL_NUMBER_LEN
index|]
decl_stmt|;
name|MV_BOOLEAN
name|DMAEnabled
decl_stmt|;
name|MV_EDMA_MODE
name|queuedDMA
decl_stmt|;
name|MV_U8
name|outstandingCommands
decl_stmt|;
name|MV_U32
name|EdmaConfigurationRegister
decl_stmt|;
name|MV_U32
name|EdmaRequestQueueBaseAddressHighRegister
decl_stmt|;
name|MV_U32
name|EdmaRequestQueueInPointerRegister
decl_stmt|;
name|MV_U32
name|EdmaRequestQueueOutPointerRegister
decl_stmt|;
name|MV_U32
name|EdmaResponseQueueBaseAddressHighRegister
decl_stmt|;
name|MV_U32
name|EdmaResponseQueueInPointerRegister
decl_stmt|;
name|MV_U32
name|EdmaResponseQueueOutPointerRegister
decl_stmt|;
name|MV_U32
name|EdmaCommandRegister
decl_stmt|;
name|MV_U32
name|PHYModeRegister
decl_stmt|;
block|}
name|MV_SATA_CHANNEL_STATUS
typedef|;
end_typedef

begin_comment
comment|/* this structure used by the IAL defines the PRD entries used by the EDMA HW */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|mvSataEdmaPRDEntry
block|{
specifier|volatile
name|MV_U32
name|lowBaseAddr
decl_stmt|;
specifier|volatile
name|MV_U16
name|byteCount
decl_stmt|;
specifier|volatile
name|MV_U16
name|flags
decl_stmt|;
specifier|volatile
name|MV_U32
name|highBaseAddr
decl_stmt|;
specifier|volatile
name|MV_U32
name|reserved
decl_stmt|;
block|}
name|MV_SATA_EDMA_PRD_ENTRY
typedef|;
end_typedef

begin_comment
comment|/* API Functions */
end_comment

begin_comment
comment|/* CORE driver Adapter Management */
end_comment

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataInitAdapter
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataShutdownAdapter
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataGetAdapterStatus
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_SATA_ADAPTER_STATUS
modifier|*
name|pAdapterStatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_U32
name|HPTLIBAPI
name|mvSataReadReg
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U32
name|regOffset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_VOID
name|HPTLIBAPI
name|mvSataWriteReg
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U32
name|regOffset
parameter_list|,
name|MV_U32
name|regValue
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_VOID
name|HPTLIBAPI
name|mvEnableAutoFlush
parameter_list|(
name|MV_VOID
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_VOID
name|HPTLIBAPI
name|mvDisableAutoFlush
parameter_list|(
name|MV_VOID
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* CORE driver SATA Channel Management */
end_comment

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataConfigureChannel
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataRemoveChannel
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataIsStorageDeviceConnected
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataChannelHardReset
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataConfigEdmaMode
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|,
name|MV_EDMA_MODE
name|eDmaMode
parameter_list|,
name|MV_U8
name|maxQueueDepth
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataEnableChannelDma
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataDisableChannelDma
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataFlushDmaQueue
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|,
name|MV_FLUSH_TYPE
name|flushType
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_U8
name|HPTLIBAPI
name|mvSataNumOfDmaCommands
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataSetIntCoalParams
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|sataUnit
parameter_list|,
name|MV_U32
name|intCoalThre
parameter_list|,
name|MV_U32
name|intTimeThre
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataSetChannelPhyParams
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|,
name|MV_U8
name|signalAmps
parameter_list|,
name|MV_U8
name|pre
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataChannelPhyShutdown
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataChannelPhyPowerOn
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataChannelSetEdmaLoopBackMode
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|,
name|MV_BOOLEAN
name|loopBackOn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataGetChannelStatus
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|,
name|MV_SATA_CHANNEL_STATUS
modifier|*
name|pChannelStatus
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Execute UDMA ATA commands */
end_comment

begin_function_decl
name|MV_EDMA_QUEUE_RESULT
name|HPTLIBAPI
name|mvSataQueueUDmaCommand
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|,
name|MV_UDMA_TYPE
name|readWrite
parameter_list|,
name|MV_U32
name|lowLBAAddr
parameter_list|,
name|MV_U16
name|highLBAAddr
parameter_list|,
name|MV_U16
name|sectorCount
parameter_list|,
name|MV_U32
name|prdLowAddr
parameter_list|,
name|MV_U32
name|prdHighAddr
parameter_list|,
name|mvSataCommandCompletionCallBack_t
name|callBack
parameter_list|,
name|MV_VOID_PTR
name|commandId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_QUEUE_COMMAND_RESULT
name|HPTLIBAPI
name|mvSataQueueCommand
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|,
name|MV_U8
name|channelIndex
parameter_list|,
name|MV_QUEUE_COMMAND_INFO
name|FAR
modifier|*
name|pCommandParams
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Interrupt Service Routine */
end_comment

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataInterruptServiceRoutine
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataMaskAdapterInterrupt
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataUnmaskAdapterInterrupt
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Command Completion and Event Notification (user implemented) */
end_comment

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataEventNotify
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
parameter_list|,
name|MV_EVENT_TYPE
parameter_list|,
name|MV_U32
parameter_list|,
name|MV_U32
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Staggered spin-ip support and SATA interface speed control  * (relevant for 60x1 adapters)  */
end_comment

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataEnableStaggeredSpinUpAll
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MV_BOOLEAN
name|HPTLIBAPI
name|mvSataDisableStaggeredSpinUpAll
parameter_list|(
name|MV_SATA_ADAPTER
modifier|*
name|pAdapter
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

