begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2014 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Edward Tomasz Napierala under sponsorship  * from the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * This file is used to provide the initiator and target with a prettier  * interface.  It must not be included by ICL modules, such as icl_soft.c.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ICL_WRAPPERS_H
end_ifndef

begin_define
define|#
directive|define
name|ICL_WRAPPERS_H
end_define

begin_include
include|#
directive|include
file|<sys/kobj.h>
end_include

begin_include
include|#
directive|include
file|<dev/iscsi/icl.h>
end_include

begin_include
include|#
directive|include
file|<icl_conn_if.h>
end_include

begin_function
specifier|static
specifier|inline
name|struct
name|icl_pdu
modifier|*
name|icl_pdu_new
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
return|return
operator|(
name|ICL_CONN_NEW_PDU
argument_list|(
name|ic
argument_list|,
name|flags
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|size_t
name|icl_pdu_data_segment_length
parameter_list|(
specifier|const
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|)
block|{
return|return
operator|(
name|ICL_CONN_PDU_DATA_SEGMENT_LENGTH
argument_list|(
name|ip
operator|->
name|ip_conn
argument_list|,
name|ip
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|icl_pdu_append_data
parameter_list|(
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|,
specifier|const
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
return|return
operator|(
name|ICL_CONN_PDU_APPEND_DATA
argument_list|(
name|ip
operator|->
name|ip_conn
argument_list|,
name|ip
argument_list|,
name|addr
argument_list|,
name|len
argument_list|,
name|flags
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|icl_pdu_get_data
parameter_list|(
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|,
name|size_t
name|off
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|ICL_CONN_PDU_GET_DATA
argument_list|(
name|ip
operator|->
name|ip_conn
argument_list|,
name|ip
argument_list|,
name|off
argument_list|,
name|addr
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|icl_pdu_queue
parameter_list|(
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|)
block|{
name|ICL_CONN_PDU_QUEUE
argument_list|(
name|ip
operator|->
name|ip_conn
argument_list|,
name|ip
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|icl_pdu_free
parameter_list|(
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|)
block|{
name|ICL_CONN_PDU_FREE
argument_list|(
name|ip
operator|->
name|ip_conn
argument_list|,
name|ip
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|icl_conn_free
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|)
block|{
name|ICL_CONN_FREE
argument_list|(
name|ic
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|icl_conn_handoff
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|int
name|fd
parameter_list|)
block|{
return|return
operator|(
name|ICL_CONN_HANDOFF
argument_list|(
name|ic
argument_list|,
name|fd
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|icl_conn_close
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|)
block|{
name|ICL_CONN_CLOSE
argument_list|(
name|ic
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|icl_conn_task_setup
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|,
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|uint32_t
modifier|*
name|task_tagp
parameter_list|,
name|void
modifier|*
modifier|*
name|prvp
parameter_list|)
block|{
return|return
operator|(
name|ICL_CONN_TASK_SETUP
argument_list|(
name|ic
argument_list|,
name|ip
argument_list|,
name|csio
argument_list|,
name|task_tagp
argument_list|,
name|prvp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|icl_conn_task_done
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|void
modifier|*
name|prv
parameter_list|)
block|{
name|ICL_CONN_TASK_DONE
argument_list|(
name|ic
argument_list|,
name|prv
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|icl_conn_transfer_setup
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|union
name|ctl_io
modifier|*
name|io
parameter_list|,
name|uint32_t
modifier|*
name|transfer_tagp
parameter_list|,
name|void
modifier|*
modifier|*
name|prvp
parameter_list|)
block|{
return|return
operator|(
name|ICL_CONN_TRANSFER_SETUP
argument_list|(
name|ic
argument_list|,
name|io
argument_list|,
name|transfer_tagp
argument_list|,
name|prvp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|icl_conn_transfer_done
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|void
modifier|*
name|prv
parameter_list|)
block|{
name|ICL_CONN_TRANSFER_DONE
argument_list|(
name|ic
argument_list|,
name|prv
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !ICL_WRAPPERS_H */
end_comment

end_unit

