begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2012 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Edward Tomasz Napierala under sponsorship  * from the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ICL_H
end_ifndef

begin_define
define|#
directive|define
name|ICL_H
end_define

begin_comment
comment|/*  * iSCSI Common Layer.  It's used by both the initiator and target to send  * and receive iSCSI PDUs.  */
end_comment

begin_struct_decl
struct_decl|struct
name|icl_conn
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|icl_pdu
block|{
name|TAILQ_ENTRY
argument_list|(
argument|icl_pdu
argument_list|)
name|ip_next
expr_stmt|;
name|struct
name|icl_conn
modifier|*
name|ip_conn
decl_stmt|;
name|struct
name|iscsi_bhs
modifier|*
name|ip_bhs
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|ip_bhs_mbuf
decl_stmt|;
name|size_t
name|ip_ahs_len
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|ip_ahs_mbuf
decl_stmt|;
name|size_t
name|ip_data_len
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|ip_data_mbuf
decl_stmt|;
comment|/* 	 * User (initiator or provider) private fields. 	 */
name|uint32_t
name|ip_prv0
decl_stmt|;
name|uint32_t
name|ip_prv1
decl_stmt|;
name|uint32_t
name|ip_prv2
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|icl_pdu
modifier|*
name|icl_pdu_new_bhs
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|icl_pdu_data_segment_length
parameter_list|(
specifier|const
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|icl_pdu_append_data
parameter_list|(
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|,
specifier|const
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|icl_pdu_get_data
parameter_list|(
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|,
name|size_t
name|off
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|icl_pdu_queue
parameter_list|(
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|icl_pdu_free
parameter_list|(
name|struct
name|icl_pdu
modifier|*
name|ip
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|ICL_CONN_STATE_INVALID
value|0
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_BHS
value|1
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_AHS
value|2
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_HEADER_DIGEST
value|3
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_DATA
value|4
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_DATA_DIGEST
value|5
end_define

begin_define
define|#
directive|define
name|ICL_MAX_DATA_SEGMENT_LENGTH
value|(128 * 1024)
end_define

begin_struct
struct|struct
name|icl_conn
block|{
name|struct
name|mtx
name|ic_lock
decl_stmt|;
name|struct
name|socket
modifier|*
name|ic_socket
decl_stmt|;
specifier|volatile
name|u_int
name|ic_outstanding_pdus
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|icl_pdu
argument_list|)
name|ic_to_send
expr_stmt|;
name|size_t
name|ic_receive_len
decl_stmt|;
name|int
name|ic_receive_state
decl_stmt|;
name|struct
name|icl_pdu
modifier|*
name|ic_receive_pdu
decl_stmt|;
name|struct
name|cv
name|ic_send_cv
decl_stmt|;
name|struct
name|cv
name|ic_receive_cv
decl_stmt|;
name|bool
name|ic_header_crc32c
decl_stmt|;
name|bool
name|ic_data_crc32c
decl_stmt|;
name|bool
name|ic_send_running
decl_stmt|;
name|bool
name|ic_receive_running
decl_stmt|;
name|size_t
name|ic_max_data_segment_length
decl_stmt|;
name|bool
name|ic_disconnecting
decl_stmt|;
name|bool
name|ic_iser
decl_stmt|;
name|void
function_decl|(
modifier|*
name|ic_receive
function_decl|)
parameter_list|(
name|struct
name|icl_pdu
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ic_error
function_decl|)
parameter_list|(
name|struct
name|icl_conn
modifier|*
parameter_list|)
function_decl|;
comment|/* 	 * User (initiator or provider) private fields. 	 */
name|void
modifier|*
name|ic_prv0
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|icl_conn
modifier|*
name|icl_conn_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|icl_conn_free
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|icl_conn_handoff
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|int
name|fd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|icl_conn_shutdown
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|icl_conn_close
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|icl_conn_connected
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|ICL_KERNEL_PROXY
end_ifdef

begin_struct_decl
struct_decl|struct
name|sockaddr
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|icl_listen
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|icl_listen_sock
block|{
name|TAILQ_ENTRY
argument_list|(
argument|icl_listen_sock
argument_list|)
name|ils_next
expr_stmt|;
name|struct
name|icl_listen
modifier|*
name|ils_listen
decl_stmt|;
name|struct
name|socket
modifier|*
name|ils_socket
decl_stmt|;
name|bool
name|ils_running
decl_stmt|;
name|bool
name|ils_disconnecting
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|icl_listen
block|{
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|icl_listen_sock
argument_list|)
name|il_sockets
expr_stmt|;
name|struct
name|sx
name|il_lock
decl_stmt|;
name|void
function_decl|(
modifier|*
name|il_accept
function_decl|)
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Initiator part.  */
end_comment

begin_function_decl
name|int
name|icl_conn_connect
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|bool
name|rdma
parameter_list|,
name|int
name|domain
parameter_list|,
name|int
name|socktype
parameter_list|,
name|int
name|protocol
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|from_sa
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|to_sa
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Target part.  */
end_comment

begin_function_decl
name|struct
name|icl_listen
modifier|*
name|icl_listen_new
parameter_list|(
name|void
function_decl|(
modifier|*
name|accept_cb
function_decl|)
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|icl_listen_free
parameter_list|(
name|struct
name|icl_listen
modifier|*
name|il
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|icl_listen_add
parameter_list|(
name|struct
name|icl_listen
modifier|*
name|il
parameter_list|,
name|bool
name|rdma
parameter_list|,
name|int
name|domain
parameter_list|,
name|int
name|socktype
parameter_list|,
name|int
name|protocol
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|icl_listen_remove
parameter_list|(
name|struct
name|icl_listen
modifier|*
name|il
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * This one is not a public API; only to be used by icl_proxy.c.  */
end_comment

begin_function_decl
name|int
name|icl_conn_handoff_sock
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|struct
name|socket
modifier|*
name|so
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ICL_KERNEL_PROXY */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !ICL_H */
end_comment

end_unit

