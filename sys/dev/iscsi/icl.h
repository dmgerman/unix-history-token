begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2012 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Edward Tomasz Napierala under sponsorship  * from the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ICL_H
end_ifndef

begin_define
define|#
directive|define
name|ICL_H
end_define

begin_comment
comment|/*  * iSCSI Common Layer.  It's used by both the initiator and target to send  * and receive iSCSI PDUs.  */
end_comment

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/kobj.h>
end_include

begin_include
include|#
directive|include
file|<sys/condvar.h>
end_include

begin_include
include|#
directive|include
file|<sys/sysctl.h>
end_include

begin_expr_stmt
name|SYSCTL_DECL
argument_list|(
name|_kern_icl
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|extern
name|int
name|icl_debug
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|ICL_DEBUG
parameter_list|(
name|X
parameter_list|,
modifier|...
parameter_list|)
define|\
value|do {								\ 		if (icl_debug> 1)					\ 			printf("%s: " X "\n", __func__, ## __VA_ARGS__);\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|ICL_WARN
parameter_list|(
name|X
parameter_list|,
modifier|...
parameter_list|)
define|\
value|do {								\ 		if (icl_debug> 0) {					\ 			printf("WARNING: %s: " X "\n",			\ 			    __func__, ## __VA_ARGS__);			\ 		}							\ 	} while (0)
end_define

begin_struct_decl
struct_decl|struct
name|icl_conn
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ccb_scsiio
struct_decl|;
end_struct_decl

begin_union_decl
union_decl|union
name|ctl_io
union_decl|;
end_union_decl

begin_struct
struct|struct
name|icl_pdu
block|{
name|STAILQ_ENTRY
argument_list|(
argument|icl_pdu
argument_list|)
name|ip_next
expr_stmt|;
name|struct
name|icl_conn
modifier|*
name|ip_conn
decl_stmt|;
name|struct
name|iscsi_bhs
modifier|*
name|ip_bhs
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|ip_bhs_mbuf
decl_stmt|;
name|size_t
name|ip_ahs_len
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|ip_ahs_mbuf
decl_stmt|;
name|size_t
name|ip_data_len
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|ip_data_mbuf
decl_stmt|;
comment|/* 	 * User (initiator or provider) private fields. 	 */
name|uint32_t
name|ip_prv0
decl_stmt|;
name|uint32_t
name|ip_prv1
decl_stmt|;
name|uint32_t
name|ip_prv2
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ICL_CONN_STATE_INVALID
value|0
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_BHS
value|1
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_AHS
value|2
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_HEADER_DIGEST
value|3
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_DATA
value|4
end_define

begin_define
define|#
directive|define
name|ICL_CONN_STATE_DATA_DIGEST
value|5
end_define

begin_define
define|#
directive|define
name|ICL_MAX_DATA_SEGMENT_LENGTH
value|(128 * 1024)
end_define

begin_struct
struct|struct
name|icl_conn
block|{
name|KOBJ_FIELDS
expr_stmt|;
name|struct
name|mtx
modifier|*
name|ic_lock
decl_stmt|;
name|struct
name|socket
modifier|*
name|ic_socket
decl_stmt|;
ifdef|#
directive|ifdef
name|DIAGNOSTIC
specifier|volatile
name|u_int
name|ic_outstanding_pdus
decl_stmt|;
endif|#
directive|endif
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|icl_pdu
argument_list|)
name|ic_to_send
expr_stmt|;
name|bool
name|ic_check_send_space
decl_stmt|;
name|size_t
name|ic_receive_len
decl_stmt|;
name|int
name|ic_receive_state
decl_stmt|;
name|struct
name|icl_pdu
modifier|*
name|ic_receive_pdu
decl_stmt|;
name|struct
name|cv
name|ic_send_cv
decl_stmt|;
name|struct
name|cv
name|ic_receive_cv
decl_stmt|;
name|bool
name|ic_header_crc32c
decl_stmt|;
name|bool
name|ic_data_crc32c
decl_stmt|;
name|bool
name|ic_send_running
decl_stmt|;
name|bool
name|ic_receive_running
decl_stmt|;
name|size_t
name|ic_max_data_segment_length
decl_stmt|;
name|size_t
name|ic_maxtags
decl_stmt|;
name|bool
name|ic_disconnecting
decl_stmt|;
name|bool
name|ic_iser
decl_stmt|;
name|bool
name|ic_unmapped
decl_stmt|;
specifier|const
name|char
modifier|*
name|ic_name
decl_stmt|;
specifier|const
name|char
modifier|*
name|ic_offload
decl_stmt|;
name|void
function_decl|(
modifier|*
name|ic_receive
function_decl|)
parameter_list|(
name|struct
name|icl_pdu
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ic_error
function_decl|)
parameter_list|(
name|struct
name|icl_conn
modifier|*
parameter_list|)
function_decl|;
comment|/* 	 * User (initiator or provider) private fields. 	 */
name|void
modifier|*
name|ic_prv0
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|icl_conn
modifier|*
name|icl_new_conn
parameter_list|(
specifier|const
name|char
modifier|*
name|offload
parameter_list|,
name|bool
name|iser
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|mtx
modifier|*
name|lock
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|icl_limits
parameter_list|(
specifier|const
name|char
modifier|*
name|offload
parameter_list|,
name|bool
name|iser
parameter_list|,
name|size_t
modifier|*
name|limitp
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|icl_register
argument_list|(
specifier|const
name|char
operator|*
name|offload
argument_list|,
name|bool
name|iser
argument_list|,
name|int
name|priority
argument_list|,
name|int
argument_list|(
operator|*
name|limits
argument_list|)
argument_list|(
name|size_t
operator|*
argument_list|)
argument_list|,
expr|struct
name|icl_conn
operator|*
call|(
modifier|*
name|new_conn
call|)
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
expr|struct
name|mtx
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|icl_unregister
parameter_list|(
specifier|const
name|char
modifier|*
name|offload
parameter_list|,
name|bool
name|rdma
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|ICL_KERNEL_PROXY
end_ifdef

begin_struct_decl
struct_decl|struct
name|sockaddr
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|icl_listen
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * Target part.  */
end_comment

begin_function_decl
name|struct
name|icl_listen
modifier|*
name|icl_listen_new
parameter_list|(
name|void
function_decl|(
modifier|*
name|accept_cb
function_decl|)
parameter_list|(
name|struct
name|socket
modifier|*
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|icl_listen_free
parameter_list|(
name|struct
name|icl_listen
modifier|*
name|il
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|icl_listen_add
parameter_list|(
name|struct
name|icl_listen
modifier|*
name|il
parameter_list|,
name|bool
name|rdma
parameter_list|,
name|int
name|domain
parameter_list|,
name|int
name|socktype
parameter_list|,
name|int
name|protocol
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|,
name|int
name|portal_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|icl_listen_remove
parameter_list|(
name|struct
name|icl_listen
modifier|*
name|il
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Those two are not a public API; only to be used between icl_soft.c  * and icl_soft_proxy.c.  */
end_comment

begin_function_decl
name|int
name|icl_soft_handoff_sock
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|struct
name|socket
modifier|*
name|so
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|icl_soft_proxy_connect
parameter_list|(
name|struct
name|icl_conn
modifier|*
name|ic
parameter_list|,
name|int
name|domain
parameter_list|,
name|int
name|socktype
parameter_list|,
name|int
name|protocol
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|from_sa
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|to_sa
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ICL_KERNEL_PROXY */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !ICL_H */
end_comment

end_unit

