begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005-2008 Daniel Braniss<danny@cs.huji.ac.il>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  | $Id: iscsi.h,v 1.17 2006/12/01 09:10:17 danny Exp danny $  */
end_comment

begin_define
define|#
directive|define
name|TRUE
value|1
end_define

begin_define
define|#
directive|define
name|FALSE
value|0
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_typedef
typedef|typedef
name|int
name|boolean_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<cam/cam.h>
end_include

begin_define
define|#
directive|define
name|ISCSIDEV
value|"iscsi"
end_define

begin_define
define|#
directive|define
name|ISCSI_MAX_TARGETS
value|4
end_define

begin_comment
comment|//64
end_comment

begin_define
define|#
directive|define
name|ISCSI_MAX_LUNS
value|4
end_define

begin_comment
comment|/*  | iSCSI commands  */
end_comment

begin_comment
comment|/*  | Initiator Opcodes:  */
end_comment

begin_define
define|#
directive|define
name|ISCSI_NOP_OUT
value|0x00
end_define

begin_define
define|#
directive|define
name|ISCSI_SCSI_CMD
value|0x01
end_define

begin_define
define|#
directive|define
name|ISCSI_TASK_CMD
value|0x02
end_define

begin_define
define|#
directive|define
name|ISCSI_LOGIN_CMD
value|0x03
end_define

begin_define
define|#
directive|define
name|ISCSI_TEXT_CMD
value|0x04
end_define

begin_define
define|#
directive|define
name|ISCSI_WRITE_DATA
value|0x05
end_define

begin_define
define|#
directive|define
name|ISCSI_LOGOUT_CMD
value|0x06
end_define

begin_define
define|#
directive|define
name|ISCSI_SNACK
value|0x10
end_define

begin_comment
comment|/*  | Target Opcodes:  */
end_comment

begin_define
define|#
directive|define
name|ISCSI_NOP_IN
value|0x20
end_define

begin_define
define|#
directive|define
name|ISCSI_SCSI_RSP
value|0x21
end_define

begin_define
define|#
directive|define
name|ISCSI_TASK_RSP
value|0x22
end_define

begin_define
define|#
directive|define
name|ISCSI_LOGIN_RSP
value|0x23
end_define

begin_define
define|#
directive|define
name|ISCSI_TEXT_RSP
value|0x24
end_define

begin_define
define|#
directive|define
name|ISCSI_READ_DATA
value|0x25
end_define

begin_define
define|#
directive|define
name|ISCSI_LOGOUT_RSP
value|0x26
end_define

begin_define
define|#
directive|define
name|ISCSI_R2T
value|0x31
end_define

begin_define
define|#
directive|define
name|ISCSI_ASYNC
value|0x32
end_define

begin_define
define|#
directive|define
name|ISCSI_REJECT
value|0x3f
end_define

begin_comment
comment|/*  | PDU stuff  */
end_comment

begin_comment
comment|/*  | BHS Basic Header Segment  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|bhs
block|{
comment|// the order is network byte order!
name|u_char
name|opcode
range|:
literal|6
decl_stmt|;
name|u_char
name|I
range|:
literal|1
decl_stmt|;
name|u_char
name|_
range|:
literal|1
decl_stmt|;
name|u_char
name|__
range|:
literal|7
decl_stmt|;
name|u_char
name|F
range|:
literal|1
decl_stmt|;
comment|// Final bit
name|u_char
name|___
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|AHSLength
range|:
literal|8
decl_stmt|;
comment|// in 4byte words
name|u_int
name|DSLength
range|:
literal|24
decl_stmt|;
comment|// in bytes
name|u_int
name|LUN
index|[
literal|2
index|]
decl_stmt|;
comment|// or Opcode-specific fields
name|u_int
name|itt
decl_stmt|;
name|u_int
name|OpcodeSpecificFields
index|[
literal|7
index|]
decl_stmt|;
define|#
directive|define
name|CmdSN
value|OpcodeSpecificFields[1]
define|#
directive|define
name|ExpStSN
value|OpcodeSpecificFields[2]
define|#
directive|define
name|MaxCmdSN
value|OpcodeSpecificFields[3]
block|}
name|bhs_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ahs
block|{
name|u_int
name|len
range|:
literal|16
decl_stmt|;
name|u_int
name|type
range|:
literal|8
decl_stmt|;
name|u_int
name|spec
range|:
literal|8
decl_stmt|;
name|char
name|data
index|[
literal|0
index|]
decl_stmt|;
block|}
name|ahs_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
comment|// Sequence Numbers
comment|// (computers were invented to count, right?)
name|int
name|cmd
decl_stmt|;
name|int
name|expcmd
decl_stmt|;
name|int
name|maxcmd
decl_stmt|;
block|}
name|req_sn_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
comment|// Sequence Numbers
comment|// (computers were invented to count, right?)
name|int
name|stat
decl_stmt|;
name|int
name|expcmd
decl_stmt|;
name|int
name|maxcmd
decl_stmt|;
block|}
name|rsp_sn_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|scsi_req
block|{
name|u_char
name|opcode
range|:
literal|6
decl_stmt|;
comment|// 0x01
name|u_char
name|I
range|:
literal|1
decl_stmt|;
name|u_char
name|_
range|:
literal|1
decl_stmt|;
name|u_char
name|attr
range|:
literal|3
decl_stmt|;
name|u_char
name|_0
range|:
literal|2
decl_stmt|;
name|u_char
name|W
range|:
literal|1
decl_stmt|;
name|u_char
name|R
range|:
literal|1
decl_stmt|;
name|u_char
name|F
range|:
literal|1
decl_stmt|;
define|#
directive|define
name|iSCSI_TASK_UNTAGGED
value|0
define|#
directive|define
name|iSCSI_TASK_SIMPLE
value|1
define|#
directive|define
name|iSCSI_TASK_ORDER
value|2
define|#
directive|define
name|iSCSI_TASK_HOFQ
value|3
define|#
directive|define
name|iSCSI_TASK_ACA
value|4
name|char
name|_1
index|[
literal|2
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|lun
index|[
literal|2
index|]
decl_stmt|;
name|int
name|itt
decl_stmt|;
name|int
name|edtlen
decl_stmt|;
comment|// expectect data transfere length
name|int
name|cmdSN
decl_stmt|;
name|int
name|extStatSN
decl_stmt|;
name|int
name|cdb
index|[
literal|4
index|]
decl_stmt|;
block|}
name|scsi_req_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|scsi_rsp
block|{
name|char
name|opcode
decl_stmt|;
comment|// 0x21
name|u_char
name|flag
decl_stmt|;
name|u_char
name|response
decl_stmt|;
name|u_char
name|status
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|_
index|[
literal|2
index|]
decl_stmt|;
name|int
name|itt
decl_stmt|;
name|int
name|stag
decl_stmt|;
name|rsp_sn_t
name|sn
decl_stmt|;
name|int
name|expdatasn
decl_stmt|;
name|int
name|bdrcnt
decl_stmt|;
comment|// bidirectional residual count
name|int
name|rcnt
decl_stmt|;
comment|// residual count
block|}
name|scsi_rsp_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|nop_out
block|{
comment|// the order is network byte order!
name|u_char
name|opcode
range|:
literal|6
decl_stmt|;
name|u_char
name|I
range|:
literal|1
decl_stmt|;
name|u_char
name|_
range|:
literal|1
decl_stmt|;
name|u_char
name|__
range|:
literal|7
decl_stmt|;
name|u_char
name|F
range|:
literal|1
decl_stmt|;
comment|// Final bit
name|u_char
name|___
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|len
decl_stmt|;
name|u_int
name|lun
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|itt
decl_stmt|;
name|u_int
name|ttt
decl_stmt|;
name|req_sn_t
name|sn
decl_stmt|;
name|u_int
name|mbz
index|[
literal|3
index|]
decl_stmt|;
block|}
name|nop_out_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|nop_in
block|{
comment|// the order is network byte order!
name|u_char
name|opcode
range|:
literal|6
decl_stmt|;
name|u_char
name|I
range|:
literal|1
decl_stmt|;
name|u_char
name|_
range|:
literal|1
decl_stmt|;
name|u_char
name|__
range|:
literal|7
decl_stmt|;
name|u_char
name|F
range|:
literal|1
decl_stmt|;
comment|// Final bit
name|u_char
name|___
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|len
decl_stmt|;
name|u_int
name|lun
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|itt
decl_stmt|;
name|u_int
name|ttt
decl_stmt|;
name|rsp_sn_t
name|sn
decl_stmt|;
name|u_int
name|____
index|[
literal|2
index|]
decl_stmt|;
block|}
name|nop_in_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|r2t
block|{
name|u_char
name|opcode
range|:
literal|6
decl_stmt|;
name|u_char
name|I
range|:
literal|1
decl_stmt|;
name|u_char
name|_
range|:
literal|1
decl_stmt|;
name|u_char
name|__
range|:
literal|7
decl_stmt|;
name|u_char
name|F
range|:
literal|1
decl_stmt|;
comment|// Final bit
name|u_char
name|___
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|len
decl_stmt|;
name|u_int
name|lun
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|itt
decl_stmt|;
name|u_int
name|ttt
decl_stmt|;
name|rsp_sn_t
name|sn
decl_stmt|;
name|u_int
name|r2tSN
decl_stmt|;
name|u_int
name|bo
decl_stmt|;
name|u_int
name|ddtl
decl_stmt|;
block|}
name|r2t_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|data_out
block|{
name|u_char
name|opcode
range|:
literal|6
decl_stmt|;
name|u_char
name|I
range|:
literal|1
decl_stmt|;
name|u_char
name|_
range|:
literal|1
decl_stmt|;
name|u_char
name|__
range|:
literal|7
decl_stmt|;
name|u_char
name|F
range|:
literal|1
decl_stmt|;
comment|// Final bit
name|u_char
name|___
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|len
decl_stmt|;
name|u_int
name|lun
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|itt
decl_stmt|;
name|u_int
name|ttt
decl_stmt|;
name|rsp_sn_t
name|sn
decl_stmt|;
name|u_int
name|dsn
decl_stmt|;
comment|// data seq. number
name|u_int
name|bo
decl_stmt|;
name|u_int
name|____
decl_stmt|;
block|}
name|data_out_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|data_in
block|{
name|u_char
name|opcode
range|:
literal|6
decl_stmt|;
name|u_char
name|I
range|:
literal|1
decl_stmt|;
name|u_char
name|_
range|:
literal|1
decl_stmt|;
name|u_char
name|S
range|:
literal|1
decl_stmt|;
name|u_char
name|U
range|:
literal|1
decl_stmt|;
name|u_char
name|O
range|:
literal|1
decl_stmt|;
name|u_char
name|__
range|:
literal|3
decl_stmt|;
name|u_char
name|A
range|:
literal|1
decl_stmt|;
name|u_char
name|F
range|:
literal|1
decl_stmt|;
comment|// Final bit
name|u_char
name|___
index|[
literal|1
index|]
decl_stmt|;
name|u_char
name|status
decl_stmt|;
name|u_int
name|len
decl_stmt|;
name|u_int
name|lun
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|itt
decl_stmt|;
name|u_int
name|ttt
decl_stmt|;
name|rsp_sn_t
name|sn
decl_stmt|;
name|u_int
name|dataSN
decl_stmt|;
name|u_int
name|bo
decl_stmt|;
name|u_int
name|____
decl_stmt|;
block|}
name|data_in_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|reject
block|{
name|u_char
name|opcode
range|:
literal|6
decl_stmt|;
name|u_char
name|_
range|:
literal|2
decl_stmt|;
name|u_char
name|F
range|:
literal|1
decl_stmt|;
name|u_char
name|__
range|:
literal|7
decl_stmt|;
name|u_char
name|reason
decl_stmt|;
name|u_char
name|___
decl_stmt|;
name|u_int
name|len
decl_stmt|;
name|u_int
name|____
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|tt
index|[
literal|2
index|]
decl_stmt|;
comment|// must be -1
name|rsp_sn_t
name|sn
decl_stmt|;
name|u_int
name|dataSN
decl_stmt|;
comment|// or R2TSN or reserved
name|u_int
name|_____
index|[
literal|2
index|]
decl_stmt|;
block|}
name|reject_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|async
block|{
name|u_char
name|opcode
range|:
literal|6
decl_stmt|;
name|u_char
name|_
range|:
literal|2
decl_stmt|;
name|u_char
name|F
range|:
literal|1
decl_stmt|;
name|u_char
name|__
range|:
literal|7
decl_stmt|;
name|u_char
name|___
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|len
decl_stmt|;
name|u_int
name|lun
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|itt
decl_stmt|;
comment|// must be -1
name|u_int
name|____
decl_stmt|;
name|rsp_sn_t
name|sn
decl_stmt|;
name|u_char
name|asyncEvent
decl_stmt|;
name|u_char
name|asyncVCode
decl_stmt|;
name|u_char
name|param1
index|[
literal|2
index|]
decl_stmt|;
name|u_char
name|param2
index|[
literal|2
index|]
decl_stmt|;
name|u_char
name|param3
index|[
literal|2
index|]
decl_stmt|;
name|u_int
name|_____
decl_stmt|;
block|}
name|async_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|login_req
block|{
name|char
name|cmd
decl_stmt|;
comment|// 0x03
name|u_char
name|NSG
range|:
literal|2
decl_stmt|;
name|u_char
name|CSG
range|:
literal|2
decl_stmt|;
name|u_char
name|_
range|:
literal|2
decl_stmt|;
name|u_char
name|C
range|:
literal|1
decl_stmt|;
name|u_char
name|T
range|:
literal|1
decl_stmt|;
name|char
name|v_max
decl_stmt|;
name|char
name|v_min
decl_stmt|;
name|int
name|len
decl_stmt|;
comment|// remapped via standard bhs
name|char
name|isid
index|[
literal|6
index|]
decl_stmt|;
name|short
name|tsih
decl_stmt|;
name|int
name|itt
decl_stmt|;
comment|// Initiator Task Tag;
name|int
name|CID
range|:
literal|16
decl_stmt|;
name|int
name|rsv
range|:
literal|16
decl_stmt|;
name|int
name|cmdSN
decl_stmt|;
name|int
name|expStatSN
decl_stmt|;
name|int
name|unused
index|[
literal|4
index|]
decl_stmt|;
block|}
name|login_req_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|login_rsp
block|{
name|char
name|cmd
decl_stmt|;
comment|// 0x23
name|u_char
name|NSG
range|:
literal|2
decl_stmt|;
name|u_char
name|CSG
range|:
literal|2
decl_stmt|;
name|u_char
name|_1
range|:
literal|2
decl_stmt|;
name|u_char
name|C
range|:
literal|1
decl_stmt|;
name|u_char
name|T
range|:
literal|1
decl_stmt|;
name|char
name|v_max
decl_stmt|;
name|char
name|v_act
decl_stmt|;
name|int
name|len
decl_stmt|;
comment|// remapped via standard bhs
name|char
name|isid
index|[
literal|6
index|]
decl_stmt|;
name|short
name|tsih
decl_stmt|;
name|int
name|itt
decl_stmt|;
comment|// Initiator Task Tag;
name|int
name|_2
decl_stmt|;
name|rsp_sn_t
name|sn
decl_stmt|;
name|int
name|status
range|:
literal|16
decl_stmt|;
name|int
name|_3
range|:
literal|16
decl_stmt|;
name|int
name|_4
index|[
literal|2
index|]
decl_stmt|;
block|}
name|login_rsp_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|text_req
block|{
name|char
name|cmd
decl_stmt|;
comment|// 0x04
name|u_char
name|_1
range|:
literal|6
decl_stmt|;
name|u_char
name|C
range|:
literal|1
decl_stmt|;
comment|// Continuation
name|u_char
name|F
range|:
literal|1
decl_stmt|;
comment|// Final
name|char
name|_2
index|[
literal|2
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|itt
decl_stmt|;
comment|// Initiator Task Tag
name|int
name|LUN
index|[
literal|2
index|]
decl_stmt|;
name|int
name|ttt
decl_stmt|;
comment|// Target Transfer Tag
name|int
name|cmdSN
decl_stmt|;
name|int
name|expStatSN
decl_stmt|;
name|int
name|unused
index|[
literal|4
index|]
decl_stmt|;
block|}
name|text_req_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|logout_req
block|{
name|char
name|cmd
decl_stmt|;
comment|// 0x06
name|char
name|reason
decl_stmt|;
comment|// 0 - close session
comment|// 1 - close connection
comment|// 2 - remove the connection for recovery
name|char
name|_2
index|[
literal|2
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|_r
index|[
literal|2
index|]
decl_stmt|;
name|int
name|itt
decl_stmt|;
comment|// Initiator Task Tag;
name|u_int
name|CID
range|:
literal|16
decl_stmt|;
name|u_int
name|rsv
range|:
literal|16
decl_stmt|;
name|int
name|cmdSN
decl_stmt|;
name|int
name|expStatSN
decl_stmt|;
name|int
name|unused
index|[
literal|4
index|]
decl_stmt|;
block|}
name|logout_req_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|logout_rsp
block|{
name|char
name|cmd
decl_stmt|;
comment|// 0x26
name|char
name|cbits
decl_stmt|;
name|char
name|_1
index|[
literal|2
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|_2
index|[
literal|2
index|]
decl_stmt|;
name|int
name|itt
decl_stmt|;
name|int
name|_3
decl_stmt|;
name|rsp_sn_t
name|sn
decl_stmt|;
name|short
name|time2wait
decl_stmt|;
name|short
name|time2retain
decl_stmt|;
name|int
name|_4
decl_stmt|;
block|}
name|logout_rsp_t
typedef|;
end_typedef

begin_union
union|union
name|ipdu_u
block|{
name|bhs_t
name|bhs
decl_stmt|;
name|scsi_req_t
name|scsi_req
decl_stmt|;
name|scsi_rsp_t
name|scsi_rsp
decl_stmt|;
name|nop_out_t
name|nop_out
decl_stmt|;
name|nop_in_t
name|nop_in
decl_stmt|;
name|r2t_t
name|r2t
decl_stmt|;
name|data_out_t
name|data_out
decl_stmt|;
name|data_in_t
name|data_in
decl_stmt|;
name|reject_t
name|reject
decl_stmt|;
name|async_t
name|async
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  | Sequence Numbers  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int
name|itt
decl_stmt|;
name|u_int
name|cmd
decl_stmt|;
name|u_int
name|expCmd
decl_stmt|;
name|u_int
name|maxCmd
decl_stmt|;
name|u_int
name|stat
decl_stmt|;
name|u_int
name|expStat
decl_stmt|;
name|u_int
name|data
decl_stmt|;
block|}
name|sn_t
typedef|;
end_typedef

begin_comment
comment|/*  | in-core version of a Protocol Data Unit  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|union
name|ipdu_u
name|ipdu
decl_stmt|;
name|ahs_t
modifier|*
name|ahs
decl_stmt|;
name|u_int
name|ahs_len
decl_stmt|;
name|u_int
name|ahs_size
decl_stmt|;
comment|// the allocated size
name|u_int
name|hdr_dig
decl_stmt|;
comment|// header digest
name|u_char
modifier|*
name|ds
decl_stmt|;
name|u_int
name|ds_len
decl_stmt|;
name|u_int
name|ds_size
decl_stmt|;
comment|// the allocated size
name|u_int
name|ds_dig
decl_stmt|;
comment|// data digest
block|}
name|pdu_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|opvals
block|{
name|int
name|port
decl_stmt|;
name|int
name|tags
decl_stmt|;
name|int
name|maxluns
decl_stmt|;
name|int
name|sockbufsize
decl_stmt|;
name|int
name|maxConnections
decl_stmt|;
name|int
name|maxRecvDataSegmentLength
decl_stmt|;
name|int
name|maxXmitDataSegmentLength
decl_stmt|;
comment|// pseudo ...
name|int
name|maxBurstLength
decl_stmt|;
name|int
name|firstBurstLength
decl_stmt|;
name|int
name|defaultTime2Wait
decl_stmt|;
name|int
name|defaultTime2Retain
decl_stmt|;
name|int
name|maxOutstandingR2T
decl_stmt|;
name|int
name|errorRecoveryLevel
decl_stmt|;
name|int
name|targetPortalGroupTag
decl_stmt|;
name|boolean_t
name|initialR2T
decl_stmt|;
name|boolean_t
name|immediateData
decl_stmt|;
name|boolean_t
name|dataPDUInOrder
decl_stmt|;
name|boolean_t
name|dataSequenceInOrder
decl_stmt|;
name|char
modifier|*
name|headerDigest
decl_stmt|;
name|char
modifier|*
name|dataDigest
decl_stmt|;
name|char
modifier|*
name|sessionType
decl_stmt|;
name|char
modifier|*
name|sendTargets
decl_stmt|;
name|char
modifier|*
name|targetAddress
decl_stmt|;
name|char
modifier|*
name|targetAlias
decl_stmt|;
name|char
modifier|*
name|targetName
decl_stmt|;
name|char
modifier|*
name|initiatorName
decl_stmt|;
name|char
modifier|*
name|initiatorAlias
decl_stmt|;
name|char
modifier|*
name|authMethod
decl_stmt|;
name|char
modifier|*
name|chapSecret
decl_stmt|;
name|char
modifier|*
name|chapIName
decl_stmt|;
name|char
modifier|*
name|chapDigest
decl_stmt|;
name|char
modifier|*
name|tgtChapName
decl_stmt|;
name|char
modifier|*
name|tgtChapSecret
decl_stmt|;
name|int
name|tgtChallengeLen
decl_stmt|;
name|u_char
name|tgtChapID
decl_stmt|;
name|char
modifier|*
name|tgtChapDigest
decl_stmt|;
name|char
modifier|*
name|iqn
decl_stmt|;
block|}
name|isc_opt_t
typedef|;
end_typedef

begin_comment
comment|/*  | ioctl  */
end_comment

begin_define
define|#
directive|define
name|ISCSISETSES
value|_IOR('i', 1, int)
end_define

begin_define
define|#
directive|define
name|ISCSISETSOC
value|_IOW('i', 2, int)
end_define

begin_define
define|#
directive|define
name|ISCSISETOPT
value|_IOW('i', 5, isc_opt_t)
end_define

begin_define
define|#
directive|define
name|ISCSIGETOPT
value|_IOR('i', 6, isc_opt_t)
end_define

begin_define
define|#
directive|define
name|ISCSISEND
value|_IOW('i', 10, pdu_t)
end_define

begin_define
define|#
directive|define
name|ISCSIRECV
value|_IOWR('i', 11, pdu_t)
end_define

begin_define
define|#
directive|define
name|ISCSIPING
value|_IO('i', 20)
end_define

begin_define
define|#
directive|define
name|ISCSISIGNAL
value|_IOW('i', 21, int *)
end_define

begin_define
define|#
directive|define
name|ISCSISTART
value|_IO('i', 30)
end_define

begin_define
define|#
directive|define
name|ISCSIRESTART
value|_IO('i', 31)
end_define

begin_define
define|#
directive|define
name|ISCSISTOP
value|_IO('i', 32)
end_define

begin_typedef
typedef|typedef
struct|struct
name|iscsi_cam
block|{
name|path_id_t
name|path_id
decl_stmt|;
name|target_id_t
name|target_id
decl_stmt|;
name|int
name|target_nluns
decl_stmt|;
name|lun_id_t
name|target_lun
index|[
name|ISCSI_MAX_LUNS
index|]
decl_stmt|;
block|}
name|iscsi_cam_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|ISCSIGETCAM
value|_IOR('i', 33, iscsi_cam_t)
end_define

end_unit

