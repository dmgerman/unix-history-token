begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$OpenBSD: if_otusreg.h,v 1.9 2013/11/26 20:33:18 deraadt Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2009 Damien Bergamini<damien.bergamini@free.fr>  * Copyright (c) 2007-2008 Atheros Communications, Inc.  * Copyright (c) 2015 Adrian Chadd<adrian@FreeBSD.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IF_OTUSREG_H__
end_ifndef

begin_define
define|#
directive|define
name|__IF_OTUSREG_H__
end_define

begin_comment
comment|/* USB Endpoints addresses. */
end_comment

begin_define
define|#
directive|define
name|AR_EPT_BULK_TX_NO
value|(UE_DIR_OUT | 1)
end_define

begin_define
define|#
directive|define
name|AR_EPT_BULK_RX_NO
value|(UE_DIR_IN  | 2)
end_define

begin_define
define|#
directive|define
name|AR_EPT_INTR_RX_NO
value|(UE_DIR_IN  | 3)
end_define

begin_define
define|#
directive|define
name|AR_EPT_INTR_TX_NO
value|(UE_DIR_OUT | 4)
end_define

begin_comment
comment|/* USB Requests. */
end_comment

begin_define
define|#
directive|define
name|AR_FW_DOWNLOAD
value|0x30
end_define

begin_define
define|#
directive|define
name|AR_FW_DOWNLOAD_COMPLETE
value|0x31
end_define

begin_comment
comment|/* Maximum number of writes that can fit in a single FW command is 7. */
end_comment

begin_define
define|#
directive|define
name|AR_MAX_WRITE_IDX
value|6
end_define

begin_comment
comment|/* 56 bytes */
end_comment

begin_define
define|#
directive|define
name|AR_FW_INIT_ADDR
value|0x102800
end_define

begin_define
define|#
directive|define
name|AR_FW_MAIN_ADDR
value|0x200000
end_define

begin_define
define|#
directive|define
name|AR_USB_MODE_CTRL
value|0x1e1108
end_define

begin_comment
comment|/*  * AR9170 MAC registers.  */
end_comment

begin_define
define|#
directive|define
name|AR_MAC_REG_BASE
value|0x1c3000
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_MAC_ADDR_L
value|(AR_MAC_REG_BASE + 0x610)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_MAC_ADDR_H
value|(AR_MAC_REG_BASE + 0x614)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_BSSID_L
value|(AR_MAC_REG_BASE + 0x618)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_BSSID_H
value|(AR_MAC_REG_BASE + 0x61c)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_GROUP_HASH_TBL_L
value|(AR_MAC_REG_BASE + 0x624)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_GROUP_HASH_TBL_H
value|(AR_MAC_REG_BASE + 0x628)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_BASIC_RATE
value|(AR_MAC_REG_BASE + 0x630)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_MANDATORY_RATE
value|(AR_MAC_REG_BASE + 0x634)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_RTS_CTS_RATE
value|(AR_MAC_REG_BASE + 0x638)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_BACKOFF_PROTECT
value|(AR_MAC_REG_BASE + 0x63c)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_RX_THRESHOLD
value|(AR_MAC_REG_BASE + 0x640)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_RX_PE_DELAY
value|(AR_MAC_REG_BASE + 0x64c)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_DYNAMIC_SIFS_ACK
value|(AR_MAC_REG_BASE + 0x658)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_SNIFFER
value|(AR_MAC_REG_BASE + 0x674)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_ACK_EXTENSION
value|(AR_MAC_REG_BASE + 0x690)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_EIFS_AND_SIFS
value|(AR_MAC_REG_BASE + 0x698)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_BUSY
value|(AR_MAC_REG_BASE + 0x6e8)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_BUSY_EXT
value|(AR_MAC_REG_BASE + 0x6ec)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_SLOT_TIME
value|(AR_MAC_REG_BASE + 0x6f0)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_AC0_CW
value|(AR_MAC_REG_BASE + 0xb00)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_AC1_CW
value|(AR_MAC_REG_BASE + 0xb04)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_AC2_CW
value|(AR_MAC_REG_BASE + 0xb08)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_AC3_CW
value|(AR_MAC_REG_BASE + 0xb0c)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_AC4_CW
value|(AR_MAC_REG_BASE + 0xb10)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_AC1_AC0_AIFS
value|(AR_MAC_REG_BASE + 0xb14)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_AC3_AC2_AIFS
value|(AR_MAC_REG_BASE + 0xb18)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_RETRY_MAX
value|(AR_MAC_REG_BASE + 0xb28)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_TXOP_NOT_ENOUGH_INDICATION
define|\
value|(AR_MAC_REG_BASE + 0xb30)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_AC1_AC0_TXOP
value|(AR_MAC_REG_BASE + 0xb44)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_AC3_AC2_TXOP
value|(AR_MAC_REG_BASE + 0xb48)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_OFDM_PHY_ERRORS
value|(AR_MAC_REG_BASE + 0xcb4)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_CCK_PHY_ERRORS
value|(AR_MAC_REG_BASE + 0xcb8)
end_define

begin_define
define|#
directive|define
name|AR_MAC_REG_BCN_HT1
value|(AR_MAC_REG_BASE + 0xda0)
end_define

begin_comment
comment|/* Possible values for register AR_USB_MODE_CTRL. */
end_comment

begin_define
define|#
directive|define
name|AR_USB_DS_ENA
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|AR_USB_US_ENA
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|AR_USB_US_PACKET_MODE
value|(1<< 3)
end_define

begin_define
define|#
directive|define
name|AR_USB_RX_STREAM_4K
value|(0<< 4)
end_define

begin_define
define|#
directive|define
name|AR_USB_RX_STREAM_8K
value|(1<< 4)
end_define

begin_define
define|#
directive|define
name|AR_USB_RX_STREAM_16K
value|(2<< 4)
end_define

begin_define
define|#
directive|define
name|AR_USB_RX_STREAM_32K
value|(3<< 4)
end_define

begin_define
define|#
directive|define
name|AR_USB_TX_STREAM_MODE
value|(1<< 6)
end_define

begin_define
define|#
directive|define
name|AR_LED0_ON
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|AR_LED1_ON
value|(1<< 1)
end_define

begin_comment
comment|/*  * PHY registers.  */
end_comment

begin_define
define|#
directive|define
name|AR_PHY_BASE
value|0x1c5800
end_define

begin_define
define|#
directive|define
name|AR_PHY
parameter_list|(
name|reg
parameter_list|)
value|(AR_PHY_BASE + (reg) * 4)
end_define

begin_define
define|#
directive|define
name|AR_PHY_TURBO
value|(AR_PHY_BASE + 0x0004)
end_define

begin_define
define|#
directive|define
name|AR_PHY_RF_CTL3
value|(AR_PHY_BASE + 0x0028)
end_define

begin_define
define|#
directive|define
name|AR_PHY_RF_CTL4
value|(AR_PHY_BASE + 0x0034)
end_define

begin_define
define|#
directive|define
name|AR_PHY_SETTLING
value|(AR_PHY_BASE + 0x0044)
end_define

begin_define
define|#
directive|define
name|AR_PHY_RXGAIN
value|(AR_PHY_BASE + 0x0048)
end_define

begin_define
define|#
directive|define
name|AR_PHY_DESIRED_SZ
value|(AR_PHY_BASE + 0x0050)
end_define

begin_define
define|#
directive|define
name|AR_PHY_FIND_SIG
value|(AR_PHY_BASE + 0x0058)
end_define

begin_define
define|#
directive|define
name|AR_PHY_AGC_CTL1
value|(AR_PHY_BASE + 0x005c)
end_define

begin_define
define|#
directive|define
name|AR_PHY_SFCORR
value|(AR_PHY_BASE + 0x0068)
end_define

begin_define
define|#
directive|define
name|AR_PHY_SFCORR_LOW
value|(AR_PHY_BASE + 0x006c)
end_define

begin_define
define|#
directive|define
name|AR_PHY_TIMING_CTRL4
value|(AR_PHY_BASE + 0x0120)
end_define

begin_define
define|#
directive|define
name|AR_PHY_TIMING5
value|(AR_PHY_BASE + 0x0124)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE1
value|(AR_PHY_BASE + 0x0134)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE2
value|(AR_PHY_BASE + 0x0138)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE_MAX
value|(AR_PHY_BASE + 0x013c)
end_define

begin_define
define|#
directive|define
name|AR_PHY_SWITCH_CHAIN_0
value|(AR_PHY_BASE + 0x0160)
end_define

begin_define
define|#
directive|define
name|AR_PHY_SWITCH_COM
value|(AR_PHY_BASE + 0x0164)
end_define

begin_define
define|#
directive|define
name|AR_PHY_HEAVY_CLIP_ENABLE
value|(AR_PHY_BASE + 0x01e0)
end_define

begin_define
define|#
directive|define
name|AR_PHY_CCK_DETECT
value|(AR_PHY_BASE + 0x0a08)
end_define

begin_define
define|#
directive|define
name|AR_PHY_GAIN_2GHZ
value|(AR_PHY_BASE + 0x0a0c)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE3
value|(AR_PHY_BASE + 0x0a34)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE4
value|(AR_PHY_BASE + 0x0a38)
end_define

begin_define
define|#
directive|define
name|AR_PHY_TPCRG1
value|(AR_PHY_BASE + 0x0a58)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE5
value|(AR_PHY_BASE + 0x0b8c)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE6
value|(AR_PHY_BASE + 0x0b90)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE7
value|(AR_PHY_BASE + 0x0bcc)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE8
value|(AR_PHY_BASE + 0x0bd0)
end_define

begin_define
define|#
directive|define
name|AR_PHY_POWER_TX_RATE9
value|(AR_PHY_BASE + 0x0bd4)
end_define

begin_define
define|#
directive|define
name|AR_PHY_CCA
value|(AR_PHY_BASE + 0x3064)
end_define

begin_define
define|#
directive|define
name|AR_SEEPROM_HW_TYPE_OFFSET
value|0x1374
end_define

begin_define
define|#
directive|define
name|AR_EEPROM_OFFSET
value|0x1600
end_define

begin_define
define|#
directive|define
name|AR_BANK4_CHUP
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|AR_BANK4_BMODE_LF_SYNTH_FREQ
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|AR_BANK4_AMODE_REFSEL
parameter_list|(
name|x
parameter_list|)
value|((x)<< 2)
end_define

begin_define
define|#
directive|define
name|AR_BANK4_ADDR
parameter_list|(
name|x
parameter_list|)
value|((x)<< 5)
end_define

begin_comment
comment|/* Tx descriptor. */
end_comment

begin_struct
struct|struct
name|ar_tx_head
block|{
name|uint16_t
name|len
decl_stmt|;
name|uint16_t
name|macctl
decl_stmt|;
define|#
directive|define
name|AR_TX_MAC_RTS
value|(1<<  0)
define|#
directive|define
name|AR_TX_MAC_CTS
value|(1<<  1)
define|#
directive|define
name|AR_TX_MAC_BACKOFF
value|(1<<  3)
define|#
directive|define
name|AR_TX_MAC_NOACK
value|(1<<  2)
define|#
directive|define
name|AR_TX_MAC_HW_DUR
value|(1<<  9)
define|#
directive|define
name|AR_TX_MAC_QID
parameter_list|(
name|qid
parameter_list|)
value|((qid)<< 10)
define|#
directive|define
name|AR_TX_MAC_RATE_PROBING
value|(1<< 15)
name|uint32_t
name|phyctl
decl_stmt|;
comment|/* Modulation type. */
define|#
directive|define
name|AR_TX_PHY_MT_CCK
value|0
define|#
directive|define
name|AR_TX_PHY_MT_OFDM
value|1
define|#
directive|define
name|AR_TX_PHY_MT_HT
value|2
define|#
directive|define
name|AR_TX_PHY_GF
value|(1<< 2)
define|#
directive|define
name|AR_TX_PHY_BW_SHIFT
value|3
define|#
directive|define
name|AR_TX_PHY_TPC_SHIFT
value|9
define|#
directive|define
name|AR_TX_PHY_ANTMSK
parameter_list|(
name|msk
parameter_list|)
value|((msk)<< 15)
define|#
directive|define
name|AR_TX_PHY_MCS
parameter_list|(
name|mcs
parameter_list|)
value|((mcs)<< 18)
define|#
directive|define
name|AR_TX_PHY_SHGI
value|(1U<< 31)
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* USB Rx stream mode header. */
end_comment

begin_struct
struct|struct
name|ar_rx_head
block|{
name|uint16_t
name|len
decl_stmt|;
name|uint16_t
name|tag
decl_stmt|;
define|#
directive|define
name|AR_RX_HEAD_TAG
value|0x4e00
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* Rx descriptor. */
end_comment

begin_struct
struct|struct
name|ar_rx_tail
block|{
name|uint8_t
name|rssi_ant
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|rssi_ant_ext
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|rssi
decl_stmt|;
comment|/* Combined RSSI. */
name|uint8_t
name|evm
index|[
literal|2
index|]
index|[
literal|6
index|]
decl_stmt|;
comment|/* Error Vector Magnitude. */
name|uint8_t
name|phy_err
decl_stmt|;
name|uint8_t
name|sa_idx
decl_stmt|;
name|uint8_t
name|da_idx
decl_stmt|;
name|uint8_t
name|error
decl_stmt|;
define|#
directive|define
name|AR_RX_ERROR_TIMEOUT
value|(1<< 0)
define|#
directive|define
name|AR_RX_ERROR_OVERRUN
value|(1<< 1)
define|#
directive|define
name|AR_RX_ERROR_DECRYPT
value|(1<< 2)
define|#
directive|define
name|AR_RX_ERROR_FCS
value|(1<< 3)
define|#
directive|define
name|AR_RX_ERROR_BAD_RA
value|(1<< 4)
define|#
directive|define
name|AR_RX_ERROR_PLCP
value|(1<< 5)
define|#
directive|define
name|AR_RX_ERROR_MMIC
value|(1<< 6)
name|uint8_t
name|status
decl_stmt|;
comment|/* Modulation type (same as AR_TX_PHY_MT). */
define|#
directive|define
name|AR_RX_STATUS_MT_MASK
value|0x3
define|#
directive|define
name|AR_RX_STATUS_MT_CCK
value|0
define|#
directive|define
name|AR_RX_STATUS_MT_OFDM
value|1
define|#
directive|define
name|AR_RX_STATUS_MT_HT
value|2
define|#
directive|define
name|AR_RX_STATUS_SHPREAMBLE
value|(1<< 3)
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|AR_PLCP_HDR_LEN
value|12
end_define

begin_comment
comment|/* Magic PLCP header for firmware notifications through Rx bulk pipe. */
end_comment

begin_decl_stmt
specifier|static
name|uint8_t
name|AR_PLCP_HDR_INTR
index|[]
init|=
block|{
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|,
literal|0xff
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Firmware command/reply header. */
end_comment

begin_struct
struct|struct
name|ar_cmd_hdr
block|{
name|uint8_t
name|len
decl_stmt|;
name|uint8_t
name|code
decl_stmt|;
define|#
directive|define
name|AR_CMD_RREG
value|0x00
define|#
directive|define
name|AR_CMD_WREG
value|0x01
define|#
directive|define
name|AR_CMD_RMEM
value|0x02
define|#
directive|define
name|AR_CMD_WMEM
value|0x03
define|#
directive|define
name|AR_CMD_BITAND
value|0x04
define|#
directive|define
name|AR_CMD_BITOR
value|0x05
define|#
directive|define
name|AR_CMD_EKEY
value|0x28
define|#
directive|define
name|AR_CMD_DKEY
value|0x29
define|#
directive|define
name|AR_CMD_FREQUENCY
value|0x30
define|#
directive|define
name|AR_CMD_RF_INIT
value|0x31
define|#
directive|define
name|AR_CMD_SYNTH
value|0x32
define|#
directive|define
name|AR_CMD_FREQ_STRAT
value|0x33
define|#
directive|define
name|AR_CMD_ECHO
value|0x80
define|#
directive|define
name|AR_CMD_TALLY
value|0x81
define|#
directive|define
name|AR_CMD_TALLY_APD
value|0x82
define|#
directive|define
name|AR_CMD_CONFIG
value|0x83
define|#
directive|define
name|AR_CMD_RESET
value|0x90
define|#
directive|define
name|AR_CMD_DKRESET
value|0x91
define|#
directive|define
name|AR_CMD_DKTX_STATUS
value|0x92
define|#
directive|define
name|AR_CMD_FDC
value|0xa0
define|#
directive|define
name|AR_CMD_WREEPROM
value|0xb0
define|#
directive|define
name|AR_CMD_WFLASH
value|AR_CMD_WREEPROM
define|#
directive|define
name|AR_CMD_FLASH_ERASE
value|0xb1
define|#
directive|define
name|AR_CMD_FLASH_PROG
value|0xb2
define|#
directive|define
name|AR_CMD_FLASH_CHKSUM
value|0xb3
define|#
directive|define
name|AR_CMD_FLASH_READ
value|0xb4
define|#
directive|define
name|AR_CMD_FW_DL_INIT
value|0xb5
define|#
directive|define
name|AR_CMD_MEM_WREEPROM
value|0xbb
comment|/* Those have the 2 MSB set to 1. */
define|#
directive|define
name|AR_EVT_BEACON
value|0x00
define|#
directive|define
name|AR_EVT_TX_COMP
value|0x01
define|#
directive|define
name|AR_EVT_TBTT
value|0x02
define|#
directive|define
name|AR_EVT_ATIM
value|0x03
define|#
directive|define
name|AR_EVT_DO_BB_RESET
value|0x09
name|uint16_t
name|token
decl_stmt|;
comment|/* Driver private data. */
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* Structure for command AR_CMD_RF_INIT/AR_CMD_FREQUENCY. */
end_comment

begin_struct
struct|struct
name|ar_cmd_frequency
block|{
name|uint32_t
name|freq
decl_stmt|;
name|uint32_t
name|dynht2040
decl_stmt|;
name|uint32_t
name|htena
decl_stmt|;
name|uint32_t
name|dsc_exp
decl_stmt|;
name|uint32_t
name|dsc_man
decl_stmt|;
name|uint32_t
name|dsc_shgi_exp
decl_stmt|;
name|uint32_t
name|dsc_shgi_man
decl_stmt|;
name|uint32_t
name|check_loop_count
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* Firmware reply for command AR_CMD_FREQUENCY. */
end_comment

begin_struct
struct|struct
name|ar_rsp_frequency
block|{
name|uint32_t
name|status
decl_stmt|;
define|#
directive|define
name|AR_CAL_ERR_AGC
value|(1<< 0)
comment|/* AGC cal unfinished. */
define|#
directive|define
name|AR_CAL_ERR_NF
value|(1<< 1)
comment|/* Noise cal unfinished. */
define|#
directive|define
name|AR_CAL_ERR_NF_VAL
value|(1<< 2)
comment|/* NF value unexpected. */
name|uint32_t
name|nf
index|[
literal|3
index|]
decl_stmt|;
comment|/* Noisefloor. */
name|uint32_t
name|nf_ext
index|[
literal|3
index|]
decl_stmt|;
comment|/* Noisefloor ext. */
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* Structure for command AR_CMD_EKEY. */
end_comment

begin_struct
struct|struct
name|ar_cmd_ekey
block|{
name|uint16_t
name|uid
decl_stmt|;
comment|/* user ID */
name|uint16_t
name|kix
decl_stmt|;
name|uint16_t
name|cipher
decl_stmt|;
define|#
directive|define
name|AR_CIPHER_NONE
value|0
define|#
directive|define
name|AR_CIPHER_WEP64
value|1
define|#
directive|define
name|AR_CIPHER_TKIP
value|2
define|#
directive|define
name|AR_CIPHER_AES
value|4
define|#
directive|define
name|AR_CIPHER_WEP128
value|5
define|#
directive|define
name|AR_CIPHER_WEP256
value|6
define|#
directive|define
name|AR_CIPHER_CENC
value|7
name|uint8_t
name|macaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|key
index|[
literal|16
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* Structure for event AR_EVT_TX_COMP. */
end_comment

begin_struct
struct|struct
name|ar_evt_tx_comp
block|{
name|uint8_t
name|macaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint32_t
name|phy
decl_stmt|;
name|uint16_t
name|status
decl_stmt|;
define|#
directive|define
name|AR_TX_STATUS_COMP
value|0
define|#
directive|define
name|AR_TX_STATUS_RETRY_COMP
value|1
define|#
directive|define
name|AR_TX_STATUS_FAILED
value|2
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* List of supported channels. */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|uint8_t
name|ar_chans
index|[]
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|36
block|,
literal|40
block|,
literal|44
block|,
literal|48
block|,
literal|52
block|,
literal|56
block|,
literal|60
block|,
literal|64
block|,
literal|100
block|,
literal|104
block|,
literal|108
block|,
literal|112
block|,
literal|116
block|,
literal|120
block|,
literal|124
block|,
literal|128
block|,
literal|132
block|,
literal|136
block|,
literal|140
block|,
literal|149
block|,
literal|153
block|,
literal|157
block|,
literal|161
block|,
literal|165
block|,
literal|34
block|,
literal|38
block|,
literal|42
block|,
literal|46
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * This data is automatically generated from the "otus.ini" file.  * It is stored in a different way though, to reduce kernel's .rodata  * section overhead (5.1KB instead of 8.5KB).  */
end_comment

begin_comment
comment|/* NB: apply AR_PHY(). */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|uint16_t
name|ar5416_phy_regs
index|[]
init|=
block|{
literal|0x000
block|,
literal|0x001
block|,
literal|0x002
block|,
literal|0x003
block|,
literal|0x004
block|,
literal|0x005
block|,
literal|0x006
block|,
literal|0x007
block|,
literal|0x008
block|,
literal|0x009
block|,
literal|0x00a
block|,
literal|0x00b
block|,
literal|0x00c
block|,
literal|0x00d
block|,
literal|0x00e
block|,
literal|0x00f
block|,
literal|0x010
block|,
literal|0x011
block|,
literal|0x012
block|,
literal|0x013
block|,
literal|0x014
block|,
literal|0x015
block|,
literal|0x016
block|,
literal|0x017
block|,
literal|0x018
block|,
literal|0x01a
block|,
literal|0x01b
block|,
literal|0x040
block|,
literal|0x041
block|,
literal|0x042
block|,
literal|0x043
block|,
literal|0x045
block|,
literal|0x046
block|,
literal|0x047
block|,
literal|0x048
block|,
literal|0x049
block|,
literal|0x04a
block|,
literal|0x04b
block|,
literal|0x04d
block|,
literal|0x04e
block|,
literal|0x04f
block|,
literal|0x051
block|,
literal|0x052
block|,
literal|0x053
block|,
literal|0x055
block|,
literal|0x056
block|,
literal|0x058
block|,
literal|0x059
block|,
literal|0x05c
block|,
literal|0x05d
block|,
literal|0x05e
block|,
literal|0x05f
block|,
literal|0x060
block|,
literal|0x061
block|,
literal|0x062
block|,
literal|0x063
block|,
literal|0x064
block|,
literal|0x065
block|,
literal|0x066
block|,
literal|0x067
block|,
literal|0x068
block|,
literal|0x069
block|,
literal|0x06a
block|,
literal|0x06b
block|,
literal|0x06c
block|,
literal|0x06d
block|,
literal|0x070
block|,
literal|0x071
block|,
literal|0x072
block|,
literal|0x073
block|,
literal|0x074
block|,
literal|0x075
block|,
literal|0x076
block|,
literal|0x077
block|,
literal|0x078
block|,
literal|0x079
block|,
literal|0x07a
block|,
literal|0x07b
block|,
literal|0x07c
block|,
literal|0x07f
block|,
literal|0x080
block|,
literal|0x081
block|,
literal|0x082
block|,
literal|0x083
block|,
literal|0x084
block|,
literal|0x085
block|,
literal|0x086
block|,
literal|0x087
block|,
literal|0x088
block|,
literal|0x089
block|,
literal|0x08a
block|,
literal|0x08b
block|,
literal|0x08c
block|,
literal|0x08d
block|,
literal|0x08e
block|,
literal|0x08f
block|,
literal|0x090
block|,
literal|0x091
block|,
literal|0x092
block|,
literal|0x093
block|,
literal|0x094
block|,
literal|0x095
block|,
literal|0x096
block|,
literal|0x097
block|,
literal|0x098
block|,
literal|0x099
block|,
literal|0x09a
block|,
literal|0x09b
block|,
literal|0x09c
block|,
literal|0x09d
block|,
literal|0x09e
block|,
literal|0x09f
block|,
literal|0x0a0
block|,
literal|0x0a1
block|,
literal|0x0a2
block|,
literal|0x0a3
block|,
literal|0x0a4
block|,
literal|0x0a5
block|,
literal|0x0a6
block|,
literal|0x0a7
block|,
literal|0x0a8
block|,
literal|0x0a9
block|,
literal|0x0aa
block|,
literal|0x0ab
block|,
literal|0x0ac
block|,
literal|0x0ad
block|,
literal|0x0ae
block|,
literal|0x0af
block|,
literal|0x0b0
block|,
literal|0x0b1
block|,
literal|0x0b2
block|,
literal|0x0b3
block|,
literal|0x0b4
block|,
literal|0x0b5
block|,
literal|0x0b6
block|,
literal|0x0b7
block|,
literal|0x0b8
block|,
literal|0x0b9
block|,
literal|0x0ba
block|,
literal|0x0bb
block|,
literal|0x0bc
block|,
literal|0x0bd
block|,
literal|0x0be
block|,
literal|0x0bf
block|,
literal|0x0c0
block|,
literal|0x0c1
block|,
literal|0x0c2
block|,
literal|0x0c3
block|,
literal|0x0c4
block|,
literal|0x0c5
block|,
literal|0x0c6
block|,
literal|0x0c7
block|,
literal|0x0c8
block|,
literal|0x0c9
block|,
literal|0x0ca
block|,
literal|0x0cb
block|,
literal|0x0cc
block|,
literal|0x0cd
block|,
literal|0x0ce
block|,
literal|0x0cf
block|,
literal|0x0d0
block|,
literal|0x0d1
block|,
literal|0x0d2
block|,
literal|0x0d3
block|,
literal|0x0d4
block|,
literal|0x0d5
block|,
literal|0x0d6
block|,
literal|0x0d7
block|,
literal|0x0d8
block|,
literal|0x0d9
block|,
literal|0x0da
block|,
literal|0x0db
block|,
literal|0x0dc
block|,
literal|0x0dd
block|,
literal|0x0de
block|,
literal|0x0df
block|,
literal|0x0e0
block|,
literal|0x0e1
block|,
literal|0x0e2
block|,
literal|0x0e3
block|,
literal|0x0e4
block|,
literal|0x0e5
block|,
literal|0x0e6
block|,
literal|0x0e7
block|,
literal|0x0e8
block|,
literal|0x0e9
block|,
literal|0x0ea
block|,
literal|0x0eb
block|,
literal|0x0ec
block|,
literal|0x0ed
block|,
literal|0x0ee
block|,
literal|0x0ef
block|,
literal|0x0f0
block|,
literal|0x0f1
block|,
literal|0x0f2
block|,
literal|0x0f3
block|,
literal|0x0f4
block|,
literal|0x0f5
block|,
literal|0x0f6
block|,
literal|0x0f7
block|,
literal|0x0f8
block|,
literal|0x0f9
block|,
literal|0x0fa
block|,
literal|0x0fb
block|,
literal|0x0fc
block|,
literal|0x0fd
block|,
literal|0x0fe
block|,
literal|0x0ff
block|,
literal|0x100
block|,
literal|0x103
block|,
literal|0x104
block|,
literal|0x105
block|,
literal|0x106
block|,
literal|0x107
block|,
literal|0x108
block|,
literal|0x109
block|,
literal|0x10a
block|,
literal|0x10b
block|,
literal|0x10c
block|,
literal|0x10d
block|,
literal|0x10e
block|,
literal|0x10f
block|,
literal|0x13c
block|,
literal|0x13d
block|,
literal|0x13e
block|,
literal|0x13f
block|,
literal|0x280
block|,
literal|0x281
block|,
literal|0x282
block|,
literal|0x283
block|,
literal|0x284
block|,
literal|0x285
block|,
literal|0x286
block|,
literal|0x287
block|,
literal|0x288
block|,
literal|0x289
block|,
literal|0x28a
block|,
literal|0x28b
block|,
literal|0x28c
block|,
literal|0x28d
block|,
literal|0x28e
block|,
literal|0x28f
block|,
literal|0x290
block|,
literal|0x291
block|,
literal|0x292
block|,
literal|0x293
block|,
literal|0x294
block|,
literal|0x295
block|,
literal|0x296
block|,
literal|0x297
block|,
literal|0x298
block|,
literal|0x299
block|,
literal|0x29a
block|,
literal|0x29b
block|,
literal|0x29d
block|,
literal|0x29e
block|,
literal|0x29f
block|,
literal|0x2c0
block|,
literal|0x2c1
block|,
literal|0x2c2
block|,
literal|0x2c3
block|,
literal|0x2c4
block|,
literal|0x2c5
block|,
literal|0x2c6
block|,
literal|0x2c7
block|,
literal|0x2c8
block|,
literal|0x2c9
block|,
literal|0x2ca
block|,
literal|0x2cb
block|,
literal|0x2cc
block|,
literal|0x2cd
block|,
literal|0x2ce
block|,
literal|0x2cf
block|,
literal|0x2d0
block|,
literal|0x2d1
block|,
literal|0x2d2
block|,
literal|0x2d3
block|,
literal|0x2d4
block|,
literal|0x2d5
block|,
literal|0x2d6
block|,
literal|0x2e2
block|,
literal|0x2e3
block|,
literal|0x2e4
block|,
literal|0x2e5
block|,
literal|0x2e6
block|,
literal|0x2e7
block|,
literal|0x2e8
block|,
literal|0x2e9
block|,
literal|0x2ea
block|,
literal|0x2eb
block|,
literal|0x2ec
block|,
literal|0x2ed
block|,
literal|0x2ee
block|,
literal|0x2ef
block|,
literal|0x2f0
block|,
literal|0x2f1
block|,
literal|0x2f2
block|,
literal|0x2f3
block|,
literal|0x2f4
block|,
literal|0x2f5
block|,
literal|0x2f6
block|,
literal|0x2f7
block|,
literal|0x2f8
block|,
literal|0x412
block|,
literal|0x448
block|,
literal|0x458
block|,
literal|0x683
block|,
literal|0x69b
block|,
literal|0x812
block|,
literal|0x848
block|,
literal|0x858
block|,
literal|0xa83
block|,
literal|0xa9b
block|,
literal|0xc19
block|,
literal|0xc57
block|,
literal|0xc5a
block|,
literal|0xc6f
block|,
literal|0xe9c
block|,
literal|0xed7
block|,
literal|0xed8
block|,
literal|0xed9
block|,
literal|0xeda
block|,
literal|0xedb
block|,
literal|0xedc
block|,
literal|0xedd
block|,
literal|0xede
block|,
literal|0xedf
block|,
literal|0xee0
block|,
literal|0xee1
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|ar5416_phy_vals_5ghz_20mhz
index|[]
init|=
block|{
literal|0x00000007
block|,
literal|0x00000300
block|,
literal|0x00000000
block|,
literal|0xad848e19
block|,
literal|0x7d14e000
block|,
literal|0x9c0a9f6b
block|,
literal|0x00000090
block|,
literal|0x00000000
block|,
literal|0x02020200
block|,
literal|0x00000e0e
block|,
literal|0x0a020001
block|,
literal|0x0000a000
block|,
literal|0x00000000
block|,
literal|0x00000e0e
block|,
literal|0x00000007
block|,
literal|0x00200400
block|,
literal|0x206a002e
block|,
literal|0x1372161e
block|,
literal|0x001a6a65
block|,
literal|0x1284233c
block|,
literal|0x6c48b4e4
block|,
literal|0x00000859
block|,
literal|0x7ec80d2e
block|,
literal|0x31395c5e
block|,
literal|0x0004dd10
block|,
literal|0x409a4190
block|,
literal|0x050cb081
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x000007d0
block|,
literal|0x00000118
block|,
literal|0x10000fff
block|,
literal|0x0510081c
block|,
literal|0xd0058a15
block|,
literal|0x00000001
block|,
literal|0x00000004
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x0000007f
block|,
literal|0xdfb81020
block|,
literal|0x9280b212
block|,
literal|0x00020028
block|,
literal|0x5d50e188
block|,
literal|0x00081fff
block|,
literal|0x00009b40
block|,
literal|0x00001120
block|,
literal|0x190fb515
block|,
literal|0x00000000
block|,
literal|0x00000001
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000007
block|,
literal|0x001fff00
block|,
literal|0x006f00c4
block|,
literal|0x03051000
block|,
literal|0x00000820
block|,
literal|0x038919be
block|,
literal|0x06336f77
block|,
literal|0x60f6532c
block|,
literal|0x08f186c8
block|,
literal|0x00046384
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000200
block|,
literal|0x64646464
block|,
literal|0x3c787878
block|,
literal|0x000000aa
block|,
literal|0x00000000
block|,
literal|0x00001042
block|,
literal|0x00000000
block|,
literal|0x00000040
block|,
literal|0x00000080
block|,
literal|0x000001a1
block|,
literal|0x000001e1
block|,
literal|0x00000021
block|,
literal|0x00000061
block|,
literal|0x00000168
block|,
literal|0x000001a8
block|,
literal|0x000001e8
block|,
literal|0x00000028
block|,
literal|0x00000068
block|,
literal|0x00000189
block|,
literal|0x000001c9
block|,
literal|0x00000009
block|,
literal|0x00000049
block|,
literal|0x00000089
block|,
literal|0x00000170
block|,
literal|0x000001b0
block|,
literal|0x000001f0
block|,
literal|0x00000030
block|,
literal|0x00000070
block|,
literal|0x00000191
block|,
literal|0x000001d1
block|,
literal|0x00000011
block|,
literal|0x00000051
block|,
literal|0x00000091
block|,
literal|0x000001b8
block|,
literal|0x000001f8
block|,
literal|0x00000038
block|,
literal|0x00000078
block|,
literal|0x00000199
block|,
literal|0x000001d9
block|,
literal|0x00000019
block|,
literal|0x00000059
block|,
literal|0x00000099
block|,
literal|0x000000d9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x00000000
block|,
literal|0x00000001
block|,
literal|0x00000002
block|,
literal|0x00000003
block|,
literal|0x00000004
block|,
literal|0x00000005
block|,
literal|0x00000008
block|,
literal|0x00000009
block|,
literal|0x0000000a
block|,
literal|0x0000000b
block|,
literal|0x0000000c
block|,
literal|0x0000000d
block|,
literal|0x00000010
block|,
literal|0x00000011
block|,
literal|0x00000012
block|,
literal|0x00000013
block|,
literal|0x00000014
block|,
literal|0x00000015
block|,
literal|0x00000018
block|,
literal|0x00000019
block|,
literal|0x0000001a
block|,
literal|0x0000001b
block|,
literal|0x0000001c
block|,
literal|0x0000001d
block|,
literal|0x00000020
block|,
literal|0x00000021
block|,
literal|0x00000022
block|,
literal|0x00000023
block|,
literal|0x00000024
block|,
literal|0x00000025
block|,
literal|0x00000028
block|,
literal|0x00000029
block|,
literal|0x0000002a
block|,
literal|0x0000002b
block|,
literal|0x0000002c
block|,
literal|0x0000002d
block|,
literal|0x00000030
block|,
literal|0x00000031
block|,
literal|0x00000032
block|,
literal|0x00000033
block|,
literal|0x00000034
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000010
block|,
literal|0x0000001a
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000008
block|,
literal|0x00000440
block|,
literal|0xd6be4788
block|,
literal|0x012e8160
block|,
literal|0x40806333
block|,
literal|0x00106c10
block|,
literal|0x009c4060
block|,
literal|0x1883800a
block|,
literal|0x018830c6
block|,
literal|0x00000400
block|,
literal|0x000009b5
block|,
literal|0x00000000
block|,
literal|0x00000108
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x13c889af
block|,
literal|0x38490a20
block|,
literal|0x00007bb6
block|,
literal|0x0fff3ffc
block|,
literal|0x00000001
block|,
literal|0x0000a000
block|,
literal|0x00000000
block|,
literal|0x0cc75380
block|,
literal|0x0f0f0f01
block|,
literal|0xdfa91f01
block|,
literal|0x00418a11
block|,
literal|0x00000000
block|,
literal|0x09249126
block|,
literal|0x0a1a9caa
block|,
literal|0x1ce739ce
block|,
literal|0x051701ce
block|,
literal|0x18010000
block|,
literal|0x30032602
block|,
literal|0x48073e06
block|,
literal|0x560b4c0a
block|,
literal|0x641a600f
block|,
literal|0x7a4f6e1b
block|,
literal|0x8c5b7e5a
block|,
literal|0x9d0f96cf
block|,
literal|0xb51fa69f
block|,
literal|0xcb3fbd07
block|,
literal|0x0000d7bf
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x3fffffff
block|,
literal|0x3fffffff
block|,
literal|0x3fffffff
block|,
literal|0x0003ffff
block|,
literal|0x79a8aa1f
block|,
literal|0x08000000
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x1ce739ce
block|,
literal|0x000001ce
block|,
literal|0x00000007
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x00000000
block|,
literal|0x1ce739ce
block|,
literal|0x000000c0
block|,
literal|0x00180a65
block|,
literal|0x0510001c
block|,
literal|0x00009b40
block|,
literal|0x012e8160
block|,
literal|0x09249126
block|,
literal|0x00180a65
block|,
literal|0x0510001c
block|,
literal|0x00009b40
block|,
literal|0x012e8160
block|,
literal|0x09249126
block|,
literal|0x0001c600
block|,
literal|0x004b6a8e
block|,
literal|0x000003ce
block|,
literal|0x00181400
block|,
literal|0x00820820
block|,
literal|0x066c420f
block|,
literal|0x0f282207
block|,
literal|0x17601685
block|,
literal|0x1f801104
block|,
literal|0x37a00c03
block|,
literal|0x3fc40883
block|,
literal|0x57c00803
block|,
literal|0x5fd80682
block|,
literal|0x7fe00482
block|,
literal|0x7f3c7bba
block|,
literal|0xf3307ff0
block|}
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|notyet
end_ifdef

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|ar5416_phy_vals_5ghz_40mhz
index|[]
init|=
block|{
literal|0x00000007
block|,
literal|0x000003c4
block|,
literal|0x00000000
block|,
literal|0xad848e19
block|,
literal|0x7d14e000
block|,
literal|0x9c0a9f6b
block|,
literal|0x00000090
block|,
literal|0x00000000
block|,
literal|0x02020200
block|,
literal|0x00000e0e
block|,
literal|0x0a020001
block|,
literal|0x0000a000
block|,
literal|0x00000000
block|,
literal|0x00000e0e
block|,
literal|0x00000007
block|,
literal|0x00200400
block|,
literal|0x206a002e
block|,
literal|0x13721c1e
block|,
literal|0x001a6a65
block|,
literal|0x1284233c
block|,
literal|0x6c48b4e4
block|,
literal|0x00000859
block|,
literal|0x7ec80d2e
block|,
literal|0x31395c5e
block|,
literal|0x0004dd10
block|,
literal|0x409a4190
block|,
literal|0x050cb081
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x000007d0
block|,
literal|0x00000230
block|,
literal|0x10000fff
block|,
literal|0x0510081c
block|,
literal|0xd0058a15
block|,
literal|0x00000001
block|,
literal|0x00000004
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x0000007f
block|,
literal|0xdfb81020
block|,
literal|0x9280b212
block|,
literal|0x00020028
block|,
literal|0x5d50e188
block|,
literal|0x00081fff
block|,
literal|0x00009b40
block|,
literal|0x00001120
block|,
literal|0x190fb515
block|,
literal|0x00000000
block|,
literal|0x00000001
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000007
block|,
literal|0x001fff00
block|,
literal|0x006f00c4
block|,
literal|0x03051000
block|,
literal|0x00000820
block|,
literal|0x038919be
block|,
literal|0x06336f77
block|,
literal|0x60f6532c
block|,
literal|0x08f186c8
block|,
literal|0x00046384
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000200
block|,
literal|0x64646464
block|,
literal|0x3c787878
block|,
literal|0x000000aa
block|,
literal|0x00000000
block|,
literal|0x00001042
block|,
literal|0x00000000
block|,
literal|0x00000040
block|,
literal|0x00000080
block|,
literal|0x000001a1
block|,
literal|0x000001e1
block|,
literal|0x00000021
block|,
literal|0x00000061
block|,
literal|0x00000168
block|,
literal|0x000001a8
block|,
literal|0x000001e8
block|,
literal|0x00000028
block|,
literal|0x00000068
block|,
literal|0x00000189
block|,
literal|0x000001c9
block|,
literal|0x00000009
block|,
literal|0x00000049
block|,
literal|0x00000089
block|,
literal|0x00000170
block|,
literal|0x000001b0
block|,
literal|0x000001f0
block|,
literal|0x00000030
block|,
literal|0x00000070
block|,
literal|0x00000191
block|,
literal|0x000001d1
block|,
literal|0x00000011
block|,
literal|0x00000051
block|,
literal|0x00000091
block|,
literal|0x000001b8
block|,
literal|0x000001f8
block|,
literal|0x00000038
block|,
literal|0x00000078
block|,
literal|0x00000199
block|,
literal|0x000001d9
block|,
literal|0x00000019
block|,
literal|0x00000059
block|,
literal|0x00000099
block|,
literal|0x000000d9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x00000000
block|,
literal|0x00000001
block|,
literal|0x00000002
block|,
literal|0x00000003
block|,
literal|0x00000004
block|,
literal|0x00000005
block|,
literal|0x00000008
block|,
literal|0x00000009
block|,
literal|0x0000000a
block|,
literal|0x0000000b
block|,
literal|0x0000000c
block|,
literal|0x0000000d
block|,
literal|0x00000010
block|,
literal|0x00000011
block|,
literal|0x00000012
block|,
literal|0x00000013
block|,
literal|0x00000014
block|,
literal|0x00000015
block|,
literal|0x00000018
block|,
literal|0x00000019
block|,
literal|0x0000001a
block|,
literal|0x0000001b
block|,
literal|0x0000001c
block|,
literal|0x0000001d
block|,
literal|0x00000020
block|,
literal|0x00000021
block|,
literal|0x00000022
block|,
literal|0x00000023
block|,
literal|0x00000024
block|,
literal|0x00000025
block|,
literal|0x00000028
block|,
literal|0x00000029
block|,
literal|0x0000002a
block|,
literal|0x0000002b
block|,
literal|0x0000002c
block|,
literal|0x0000002d
block|,
literal|0x00000030
block|,
literal|0x00000031
block|,
literal|0x00000032
block|,
literal|0x00000033
block|,
literal|0x00000034
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000010
block|,
literal|0x0000001a
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000008
block|,
literal|0x00000440
block|,
literal|0xd6be4788
block|,
literal|0x012e8160
block|,
literal|0x40806333
block|,
literal|0x00106c10
block|,
literal|0x009c4060
block|,
literal|0x1883800a
block|,
literal|0x018830c6
block|,
literal|0x00000400
block|,
literal|0x000009b5
block|,
literal|0x00000000
block|,
literal|0x00000210
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x13c889af
block|,
literal|0x38490a20
block|,
literal|0x00007bb6
block|,
literal|0x0fff3ffc
block|,
literal|0x00000001
block|,
literal|0x0000a000
block|,
literal|0x00000000
block|,
literal|0x0cc75380
block|,
literal|0x0f0f0f01
block|,
literal|0xdfa91f01
block|,
literal|0x00418a11
block|,
literal|0x00000000
block|,
literal|0x09249126
block|,
literal|0x0a1a9caa
block|,
literal|0x1ce739ce
block|,
literal|0x051701ce
block|,
literal|0x18010000
block|,
literal|0x30032602
block|,
literal|0x48073e06
block|,
literal|0x560b4c0a
block|,
literal|0x641a600f
block|,
literal|0x7a4f6e1b
block|,
literal|0x8c5b7e5a
block|,
literal|0x9d0f96cf
block|,
literal|0xb51fa69f
block|,
literal|0xcb3fbcbf
block|,
literal|0x0000d7bf
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x3fffffff
block|,
literal|0x3fffffff
block|,
literal|0x3fffffff
block|,
literal|0x0003ffff
block|,
literal|0x79a8aa1f
block|,
literal|0x08000000
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x1ce739ce
block|,
literal|0x000001ce
block|,
literal|0x00000007
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x00000000
block|,
literal|0x1ce739ce
block|,
literal|0x000000c0
block|,
literal|0x00180a65
block|,
literal|0x0510001c
block|,
literal|0x00009b40
block|,
literal|0x012e8160
block|,
literal|0x09249126
block|,
literal|0x00180a65
block|,
literal|0x0510001c
block|,
literal|0x00009b40
block|,
literal|0x012e8160
block|,
literal|0x09249126
block|,
literal|0x0001c600
block|,
literal|0x004b6a8e
block|,
literal|0x000003ce
block|,
literal|0x00181400
block|,
literal|0x00820820
block|,
literal|0x066c420f
block|,
literal|0x0f282207
block|,
literal|0x17601685
block|,
literal|0x1f801104
block|,
literal|0x37a00c03
block|,
literal|0x3fc40883
block|,
literal|0x57c00803
block|,
literal|0x5fd80682
block|,
literal|0x7fe00482
block|,
literal|0x7f3c7bba
block|,
literal|0xf3307ff0
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|notyet
end_ifdef

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|ar5416_phy_vals_2ghz_40mhz
index|[]
init|=
block|{
literal|0x00000007
block|,
literal|0x000003c4
block|,
literal|0x00000000
block|,
literal|0xad848e19
block|,
literal|0x7d14e000
block|,
literal|0x9c0a9f6b
block|,
literal|0x00000090
block|,
literal|0x00000000
block|,
literal|0x02020200
block|,
literal|0x00000e0e
block|,
literal|0x0a020001
block|,
literal|0x0000a000
block|,
literal|0x00000000
block|,
literal|0x00000e0e
block|,
literal|0x00000007
block|,
literal|0x00200400
block|,
literal|0x206a002e
block|,
literal|0x13721c24
block|,
literal|0x00197a68
block|,
literal|0x1284233c
block|,
literal|0x6c48b0e4
block|,
literal|0x00000859
block|,
literal|0x7ec80d2e
block|,
literal|0x31395c5e
block|,
literal|0x0004dd20
block|,
literal|0x409a4190
block|,
literal|0x050cb081
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000898
block|,
literal|0x00000268
block|,
literal|0x10000fff
block|,
literal|0x0510001c
block|,
literal|0xd0058a15
block|,
literal|0x00000001
block|,
literal|0x00000004
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x0000007f
block|,
literal|0xdfb81020
block|,
literal|0x9280b212
block|,
literal|0x00020028
block|,
literal|0x5d50e188
block|,
literal|0x00081fff
block|,
literal|0x00009b40
block|,
literal|0x00001120
block|,
literal|0x190fb515
block|,
literal|0x00000000
block|,
literal|0x00000001
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000007
block|,
literal|0x001fff00
block|,
literal|0x006f00c4
block|,
literal|0x03051000
block|,
literal|0x00000820
block|,
literal|0x038919be
block|,
literal|0x06336f77
block|,
literal|0x60f6532c
block|,
literal|0x08f186c8
block|,
literal|0x00046384
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000200
block|,
literal|0x64646464
block|,
literal|0x3c787878
block|,
literal|0x000000aa
block|,
literal|0x00000000
block|,
literal|0x00001042
block|,
literal|0x00000000
block|,
literal|0x00000040
block|,
literal|0x00000080
block|,
literal|0x00000141
block|,
literal|0x00000181
block|,
literal|0x000001c1
block|,
literal|0x00000001
block|,
literal|0x00000041
block|,
literal|0x000001a8
block|,
literal|0x000001e8
block|,
literal|0x00000028
block|,
literal|0x00000068
block|,
literal|0x000000a8
block|,
literal|0x00000169
block|,
literal|0x000001a9
block|,
literal|0x000001e9
block|,
literal|0x00000029
block|,
literal|0x00000069
block|,
literal|0x00000190
block|,
literal|0x000001d0
block|,
literal|0x00000010
block|,
literal|0x00000050
block|,
literal|0x00000090
block|,
literal|0x00000151
block|,
literal|0x00000191
block|,
literal|0x000001d1
block|,
literal|0x00000011
block|,
literal|0x00000051
block|,
literal|0x00000198
block|,
literal|0x000001d8
block|,
literal|0x00000018
block|,
literal|0x00000058
block|,
literal|0x00000098
block|,
literal|0x00000159
block|,
literal|0x00000199
block|,
literal|0x000001d9
block|,
literal|0x00000019
block|,
literal|0x00000059
block|,
literal|0x00000099
block|,
literal|0x000000d9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x00000000
block|,
literal|0x00000001
block|,
literal|0x00000002
block|,
literal|0x00000003
block|,
literal|0x00000004
block|,
literal|0x00000005
block|,
literal|0x00000008
block|,
literal|0x00000009
block|,
literal|0x0000000a
block|,
literal|0x0000000b
block|,
literal|0x0000000c
block|,
literal|0x0000000d
block|,
literal|0x00000010
block|,
literal|0x00000011
block|,
literal|0x00000012
block|,
literal|0x00000013
block|,
literal|0x00000014
block|,
literal|0x00000015
block|,
literal|0x00000018
block|,
literal|0x00000019
block|,
literal|0x0000001a
block|,
literal|0x0000001b
block|,
literal|0x0000001c
block|,
literal|0x0000001d
block|,
literal|0x00000020
block|,
literal|0x00000021
block|,
literal|0x00000022
block|,
literal|0x00000023
block|,
literal|0x00000024
block|,
literal|0x00000025
block|,
literal|0x00000028
block|,
literal|0x00000029
block|,
literal|0x0000002a
block|,
literal|0x0000002b
block|,
literal|0x0000002c
block|,
literal|0x0000002d
block|,
literal|0x00000030
block|,
literal|0x00000031
block|,
literal|0x00000032
block|,
literal|0x00000033
block|,
literal|0x00000034
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000010
block|,
literal|0x0000001a
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x0000000e
block|,
literal|0x00000440
block|,
literal|0xd03e4788
block|,
literal|0x012a8160
block|,
literal|0x40806333
block|,
literal|0x00106c10
block|,
literal|0x009c4060
block|,
literal|0x1883800a
block|,
literal|0x018830c6
block|,
literal|0x00000400
block|,
literal|0x000009b5
block|,
literal|0x00000000
block|,
literal|0x00000210
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x13c889af
block|,
literal|0x38490a20
block|,
literal|0x00007bb6
block|,
literal|0x0fff3ffc
block|,
literal|0x00000001
block|,
literal|0x0000a000
block|,
literal|0x00000000
block|,
literal|0x0cc75380
block|,
literal|0x0f0f0f01
block|,
literal|0xdfa91f01
block|,
literal|0x00418a11
block|,
literal|0x00000000
block|,
literal|0x09249126
block|,
literal|0x0a1a7caa
block|,
literal|0x1ce739ce
block|,
literal|0x051701ce
block|,
literal|0x18010000
block|,
literal|0x2e032402
block|,
literal|0x4a0a3c06
block|,
literal|0x621a540b
block|,
literal|0x764f6c1b
block|,
literal|0x845b7a5a
block|,
literal|0x950f8ccf
block|,
literal|0xa5cf9b4f
block|,
literal|0xbddfaf1f
block|,
literal|0xd1ffc93f
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x3fffffff
block|,
literal|0x3fffffff
block|,
literal|0x3fffffff
block|,
literal|0x0003ffff
block|,
literal|0x79a8aa1f
block|,
literal|0x08000000
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x1ce739ce
block|,
literal|0x000001ce
block|,
literal|0x00000007
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x00000000
block|,
literal|0x1ce739ce
block|,
literal|0x000000c0
block|,
literal|0x00180a68
block|,
literal|0x0510001c
block|,
literal|0x00009b40
block|,
literal|0x012a8160
block|,
literal|0x09249126
block|,
literal|0x00180a68
block|,
literal|0x0510001c
block|,
literal|0x00009b40
block|,
literal|0x012a8160
block|,
literal|0x09249126
block|,
literal|0x0001c600
block|,
literal|0x004b6a8e
block|,
literal|0x000003ce
block|,
literal|0x00181400
block|,
literal|0x00820820
block|,
literal|0x066c420f
block|,
literal|0x0f282207
block|,
literal|0x17601685
block|,
literal|0x1f801104
block|,
literal|0x37a00c03
block|,
literal|0x3fc40883
block|,
literal|0x57c00803
block|,
literal|0x5fd80682
block|,
literal|0x7fe00482
block|,
literal|0x7f3c7bba
block|,
literal|0xf3307ff0
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|ar5416_phy_vals_2ghz_20mhz
index|[]
init|=
block|{
literal|0x00000007
block|,
literal|0x00000300
block|,
literal|0x00000000
block|,
literal|0xad848e19
block|,
literal|0x7d14e000
block|,
literal|0x9c0a9f6b
block|,
literal|0x00000090
block|,
literal|0x00000000
block|,
literal|0x02020200
block|,
literal|0x00000e0e
block|,
literal|0x0a020001
block|,
literal|0x0000a000
block|,
literal|0x00000000
block|,
literal|0x00000e0e
block|,
literal|0x00000007
block|,
literal|0x00200400
block|,
literal|0x206a002e
block|,
literal|0x137216a4
block|,
literal|0x00197a68
block|,
literal|0x1284233c
block|,
literal|0x6c48b0e4
block|,
literal|0x00000859
block|,
literal|0x7ec80d2e
block|,
literal|0x31395c5e
block|,
literal|0x0004dd20
block|,
literal|0x409a4190
block|,
literal|0x050cb081
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000898
block|,
literal|0x00000134
block|,
literal|0x10000fff
block|,
literal|0x0510001c
block|,
literal|0xd0058a15
block|,
literal|0x00000001
block|,
literal|0x00000004
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x0000007f
block|,
literal|0xdfb81020
block|,
literal|0x9280b212
block|,
literal|0x00020028
block|,
literal|0x5d50e188
block|,
literal|0x00081fff
block|,
literal|0x00009b40
block|,
literal|0x00001120
block|,
literal|0x190fb515
block|,
literal|0x00000000
block|,
literal|0x00000001
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000007
block|,
literal|0x001fff00
block|,
literal|0x006f00c4
block|,
literal|0x03051000
block|,
literal|0x00000820
block|,
literal|0x038919be
block|,
literal|0x06336f77
block|,
literal|0x60f6532c
block|,
literal|0x08f186c8
block|,
literal|0x00046384
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000200
block|,
literal|0x64646464
block|,
literal|0x3c787878
block|,
literal|0x000000aa
block|,
literal|0x00000000
block|,
literal|0x00001042
block|,
literal|0x00000000
block|,
literal|0x00000040
block|,
literal|0x00000080
block|,
literal|0x00000141
block|,
literal|0x00000181
block|,
literal|0x000001c1
block|,
literal|0x00000001
block|,
literal|0x00000041
block|,
literal|0x000001a8
block|,
literal|0x000001e8
block|,
literal|0x00000028
block|,
literal|0x00000068
block|,
literal|0x000000a8
block|,
literal|0x00000169
block|,
literal|0x000001a9
block|,
literal|0x000001e9
block|,
literal|0x00000029
block|,
literal|0x00000069
block|,
literal|0x00000190
block|,
literal|0x000001d0
block|,
literal|0x00000010
block|,
literal|0x00000050
block|,
literal|0x00000090
block|,
literal|0x00000151
block|,
literal|0x00000191
block|,
literal|0x000001d1
block|,
literal|0x00000011
block|,
literal|0x00000051
block|,
literal|0x00000198
block|,
literal|0x000001d8
block|,
literal|0x00000018
block|,
literal|0x00000058
block|,
literal|0x00000098
block|,
literal|0x00000159
block|,
literal|0x00000199
block|,
literal|0x000001d9
block|,
literal|0x00000019
block|,
literal|0x00000059
block|,
literal|0x00000099
block|,
literal|0x000000d9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x000000f9
block|,
literal|0x00000000
block|,
literal|0x00000001
block|,
literal|0x00000002
block|,
literal|0x00000003
block|,
literal|0x00000004
block|,
literal|0x00000005
block|,
literal|0x00000008
block|,
literal|0x00000009
block|,
literal|0x0000000a
block|,
literal|0x0000000b
block|,
literal|0x0000000c
block|,
literal|0x0000000d
block|,
literal|0x00000010
block|,
literal|0x00000011
block|,
literal|0x00000012
block|,
literal|0x00000013
block|,
literal|0x00000014
block|,
literal|0x00000015
block|,
literal|0x00000018
block|,
literal|0x00000019
block|,
literal|0x0000001a
block|,
literal|0x0000001b
block|,
literal|0x0000001c
block|,
literal|0x0000001d
block|,
literal|0x00000020
block|,
literal|0x00000021
block|,
literal|0x00000022
block|,
literal|0x00000023
block|,
literal|0x00000024
block|,
literal|0x00000025
block|,
literal|0x00000028
block|,
literal|0x00000029
block|,
literal|0x0000002a
block|,
literal|0x0000002b
block|,
literal|0x0000002c
block|,
literal|0x0000002d
block|,
literal|0x00000030
block|,
literal|0x00000031
block|,
literal|0x00000032
block|,
literal|0x00000033
block|,
literal|0x00000034
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000035
block|,
literal|0x00000010
block|,
literal|0x0000001a
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x0000000e
block|,
literal|0x00000440
block|,
literal|0xd03e4788
block|,
literal|0x012a8160
block|,
literal|0x40806333
block|,
literal|0x00106c10
block|,
literal|0x009c4060
block|,
literal|0x1883800a
block|,
literal|0x018830c6
block|,
literal|0x00000400
block|,
literal|0x000009b5
block|,
literal|0x00000000
block|,
literal|0x00000108
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x13c889af
block|,
literal|0x38490a20
block|,
literal|0x00007bb6
block|,
literal|0x0fff3ffc
block|,
literal|0x00000001
block|,
literal|0x0000a000
block|,
literal|0x00000000
block|,
literal|0x0cc75380
block|,
literal|0x0f0f0f01
block|,
literal|0xdfa91f01
block|,
literal|0x00418a11
block|,
literal|0x00000000
block|,
literal|0x09249126
block|,
literal|0x0a1a7caa
block|,
literal|0x1ce739ce
block|,
literal|0x051701ce
block|,
literal|0x18010000
block|,
literal|0x2e032402
block|,
literal|0x4a0a3c06
block|,
literal|0x621a540b
block|,
literal|0x764f6c1b
block|,
literal|0x845b7a5a
block|,
literal|0x950f8ccf
block|,
literal|0xa5cf9b4f
block|,
literal|0xbddfaf1f
block|,
literal|0xd1ffc93f
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x3fffffff
block|,
literal|0x3fffffff
block|,
literal|0x3fffffff
block|,
literal|0x0003ffff
block|,
literal|0x79a8aa1f
block|,
literal|0x08000000
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x1ce739ce
block|,
literal|0x000001ce
block|,
literal|0x00000007
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x3f3f3f3f
block|,
literal|0x00000000
block|,
literal|0x1ce739ce
block|,
literal|0x000000c0
block|,
literal|0x00180a68
block|,
literal|0x0510001c
block|,
literal|0x00009b40
block|,
literal|0x012a8160
block|,
literal|0x09249126
block|,
literal|0x00180a68
block|,
literal|0x0510001c
block|,
literal|0x00009b40
block|,
literal|0x012a8160
block|,
literal|0x09249126
block|,
literal|0x0001c600
block|,
literal|0x004b6a8e
block|,
literal|0x000003ce
block|,
literal|0x00181400
block|,
literal|0x00820820
block|,
literal|0x066c420f
block|,
literal|0x0f282207
block|,
literal|0x17601685
block|,
literal|0x1f801104
block|,
literal|0x37a00c03
block|,
literal|0x3fc40883
block|,
literal|0x57c00803
block|,
literal|0x5fd80682
block|,
literal|0x7fe00482
block|,
literal|0x7f3c7bba
block|,
literal|0xf3307ff0
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* NB: apply AR_PHY(). */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|uint8_t
name|ar5416_banks_regs
index|[]
init|=
block|{
literal|0x2c
block|,
literal|0x38
block|,
literal|0x2c
block|,
literal|0x3b
block|,
literal|0x2c
block|,
literal|0x38
block|,
literal|0x3c
block|,
literal|0x2c
block|,
literal|0x3a
block|,
literal|0x2c
block|,
literal|0x39
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x38
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x2c
block|,
literal|0x3c
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|ar5416_banks_vals_5ghz
index|[]
init|=
block|{
literal|0x1e5795e5
block|,
literal|0x02008020
block|,
literal|0x02108421
block|,
literal|0x00000008
block|,
literal|0x0e73ff17
block|,
literal|0x00000420
block|,
literal|0x01400018
block|,
literal|0x000001a1
block|,
literal|0x00000001
block|,
literal|0x00000013
block|,
literal|0x00000002
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00004000
block|,
literal|0x00006c00
block|,
literal|0x00002c00
block|,
literal|0x00004800
block|,
literal|0x00004000
block|,
literal|0x00006000
block|,
literal|0x00001000
block|,
literal|0x00004000
block|,
literal|0x00007c00
block|,
literal|0x00007c00
block|,
literal|0x00007c00
block|,
literal|0x00007c00
block|,
literal|0x00007c00
block|,
literal|0x00087c00
block|,
literal|0x00007c00
block|,
literal|0x00005400
block|,
literal|0x00000c00
block|,
literal|0x00001800
block|,
literal|0x00007c00
block|,
literal|0x00006c00
block|,
literal|0x00006c00
block|,
literal|0x00007c00
block|,
literal|0x00002c00
block|,
literal|0x00003c00
block|,
literal|0x00003800
block|,
literal|0x00001c00
block|,
literal|0x00000800
block|,
literal|0x00000408
block|,
literal|0x00004c15
block|,
literal|0x00004188
block|,
literal|0x0000201e
block|,
literal|0x00010408
block|,
literal|0x00000801
block|,
literal|0x00000c08
block|,
literal|0x0000181e
block|,
literal|0x00001016
block|,
literal|0x00002800
block|,
literal|0x00004010
block|,
literal|0x0000081c
block|,
literal|0x00000115
block|,
literal|0x00000015
block|,
literal|0x00000066
block|,
literal|0x0000001c
block|,
literal|0x00000000
block|,
literal|0x00000004
block|,
literal|0x00000015
block|,
literal|0x0000001f
block|,
literal|0x00000000
block|,
literal|0x000000a0
block|,
literal|0x00000000
block|,
literal|0x00000040
block|,
literal|0x0000001c
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|ar5416_banks_vals_2ghz
index|[]
init|=
block|{
literal|0x1e5795e5
block|,
literal|0x02008020
block|,
literal|0x02108421
block|,
literal|0x00000008
block|,
literal|0x0e73ff17
block|,
literal|0x00000420
block|,
literal|0x01c00018
block|,
literal|0x000001a1
block|,
literal|0x00000001
block|,
literal|0x00000013
block|,
literal|0x00000002
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00004000
block|,
literal|0x00006c00
block|,
literal|0x00002c00
block|,
literal|0x00004800
block|,
literal|0x00004000
block|,
literal|0x00006000
block|,
literal|0x00001000
block|,
literal|0x00004000
block|,
literal|0x00007c00
block|,
literal|0x00007c00
block|,
literal|0x00007c00
block|,
literal|0x00007c00
block|,
literal|0x00007c00
block|,
literal|0x00087c00
block|,
literal|0x00007c00
block|,
literal|0x00005400
block|,
literal|0x00000c00
block|,
literal|0x00001800
block|,
literal|0x00007c00
block|,
literal|0x00006c00
block|,
literal|0x00006c00
block|,
literal|0x00007c00
block|,
literal|0x00002c00
block|,
literal|0x00003c00
block|,
literal|0x00003800
block|,
literal|0x00001c00
block|,
literal|0x00000800
block|,
literal|0x00000408
block|,
literal|0x00004c15
block|,
literal|0x00004188
block|,
literal|0x0000201e
block|,
literal|0x00010408
block|,
literal|0x00000801
block|,
literal|0x00000c08
block|,
literal|0x0000181e
block|,
literal|0x00001016
block|,
literal|0x00002800
block|,
literal|0x00004010
block|,
literal|0x0000081c
block|,
literal|0x00000115
block|,
literal|0x00000015
block|,
literal|0x00000066
block|,
literal|0x0000001c
block|,
literal|0x00000000
block|,
literal|0x00000004
block|,
literal|0x00000015
block|,
literal|0x0000001f
block|,
literal|0x00000400
block|,
literal|0x000000a0
block|,
literal|0x00000000
block|,
literal|0x00000040
block|,
literal|0x0000001c
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * EEPROM.  */
end_comment

begin_comment
comment|/* Possible flags for opCapFlags. */
end_comment

begin_define
define|#
directive|define
name|AR5416_OPFLAGS_11A
value|0x01
end_define

begin_define
define|#
directive|define
name|AR5416_OPFLAGS_11G
value|0x02
end_define

begin_define
define|#
directive|define
name|AR5416_OPFLAGS_5G_HT40
value|0x04
end_define

begin_define
define|#
directive|define
name|AR5416_OPFLAGS_2G_HT40
value|0x08
end_define

begin_define
define|#
directive|define
name|AR5416_OPFLAGS_5G_HT20
value|0x10
end_define

begin_define
define|#
directive|define
name|AR5416_OPFLAGS_2G_HT20
value|0x20
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_5G_CAL_PIERS
value|8
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_2G_CAL_PIERS
value|4
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_5G_20_TARGET_POWERS
value|8
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_5G_40_TARGET_POWERS
value|8
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_2G_CCK_TARGET_POWERS
value|3
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_2G_20_TARGET_POWERS
value|4
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_2G_40_TARGET_POWERS
value|4
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_CTLS
value|24
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_BAND_EDGES
value|8
end_define

begin_define
define|#
directive|define
name|AR5416_NUM_PD_GAINS
value|4
end_define

begin_define
define|#
directive|define
name|AR5416_PD_GAIN_ICEPTS
value|5
end_define

begin_define
define|#
directive|define
name|AR5416_EEPROM_MODAL_SPURS
value|5
end_define

begin_define
define|#
directive|define
name|AR5416_MAX_CHAINS
value|2
end_define

begin_struct
struct|struct
name|BaseEepHeader
block|{
name|uint16_t
name|length
decl_stmt|;
name|uint16_t
name|checksum
decl_stmt|;
name|uint16_t
name|version
decl_stmt|;
name|uint8_t
name|opCapFlags
decl_stmt|;
name|uint8_t
name|eepMisc
decl_stmt|;
name|uint16_t
name|regDmn
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|macAddr
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|rxMask
decl_stmt|;
name|uint8_t
name|txMask
decl_stmt|;
name|uint16_t
name|rfSilent
decl_stmt|;
name|uint16_t
name|blueToothOptions
decl_stmt|;
name|uint16_t
name|deviceCap
decl_stmt|;
name|uint32_t
name|binBuildNumber
decl_stmt|;
name|uint8_t
name|deviceType
decl_stmt|;
name|uint8_t
name|futureBase
index|[
literal|33
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|spurChanStruct
block|{
name|uint16_t
name|spurChan
decl_stmt|;
name|uint8_t
name|spurRangeLow
decl_stmt|;
name|uint8_t
name|spurRangeHigh
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|ModalEepHeader
block|{
name|uint32_t
name|antCtrlChain
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|uint32_t
name|antCtrlCommon
decl_stmt|;
name|int8_t
name|antennaGainCh
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|uint8_t
name|switchSettling
decl_stmt|;
name|uint8_t
name|txRxAttenCh
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|uint8_t
name|rxTxMarginCh
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|uint8_t
name|adcDesiredSize
decl_stmt|;
name|int8_t
name|pgaDesiredSize
decl_stmt|;
name|uint8_t
name|xlnaGainCh
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|uint8_t
name|txEndToXpaOff
decl_stmt|;
name|uint8_t
name|txEndToRxOn
decl_stmt|;
name|uint8_t
name|txFrameToXpaOn
decl_stmt|;
name|uint8_t
name|thresh62
decl_stmt|;
name|uint8_t
name|noiseFloorThreshCh
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|uint8_t
name|xpdGain
decl_stmt|;
name|uint8_t
name|xpd
decl_stmt|;
name|int8_t
name|iqCalICh
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|int8_t
name|iqCalQCh
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|uint8_t
name|pdGainOverlap
decl_stmt|;
name|uint8_t
name|ob
decl_stmt|;
name|uint8_t
name|db
decl_stmt|;
name|uint8_t
name|xpaBiasLvl
decl_stmt|;
name|uint8_t
name|pwrDecreaseFor2Chain
decl_stmt|;
name|uint8_t
name|pwrDecreaseFor3Chain
decl_stmt|;
name|uint8_t
name|txFrameToDataStart
decl_stmt|;
name|uint8_t
name|txFrameToPaOn
decl_stmt|;
name|uint8_t
name|ht40PowerIncForPdadc
decl_stmt|;
name|uint8_t
name|bswAtten
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|uint8_t
name|bswMargin
index|[
name|AR5416_MAX_CHAINS
index|]
decl_stmt|;
name|uint8_t
name|swSettleHt40
decl_stmt|;
name|uint8_t
name|futureModal
index|[
literal|22
index|]
decl_stmt|;
name|struct
name|spurChanStruct
name|spurChans
index|[
name|AR5416_EEPROM_MODAL_SPURS
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|calDataPerFreq
block|{
name|uint8_t
name|pwrPdg
index|[
name|AR5416_NUM_PD_GAINS
index|]
index|[
name|AR5416_PD_GAIN_ICEPTS
index|]
decl_stmt|;
name|uint8_t
name|vpdPdg
index|[
name|AR5416_NUM_PD_GAINS
index|]
index|[
name|AR5416_PD_GAIN_ICEPTS
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|CalTargetPowerLegacy
block|{
name|uint8_t
name|bChannel
decl_stmt|;
name|uint8_t
name|tPow2x
index|[
literal|4
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|CalTargetPowerHt
block|{
name|uint8_t
name|bChannel
decl_stmt|;
name|uint8_t
name|tPow2x
index|[
literal|8
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|CalCtlEdges
block|{
name|uint8_t
name|bChannel
decl_stmt|;
name|uint8_t
name|tPowerFlag
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|CalCtlData
block|{
name|struct
name|CalCtlEdges
name|ctlEdges
index|[
name|AR5416_MAX_CHAINS
index|]
index|[
name|AR5416_NUM_BAND_EDGES
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|ar5416eeprom
block|{
name|struct
name|BaseEepHeader
name|baseEepHeader
decl_stmt|;
name|uint8_t
name|custData
index|[
literal|64
index|]
decl_stmt|;
name|struct
name|ModalEepHeader
name|modalHeader
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|calFreqPier5G
index|[
name|AR5416_NUM_5G_CAL_PIERS
index|]
decl_stmt|;
name|uint8_t
name|calFreqPier2G
index|[
name|AR5416_NUM_2G_CAL_PIERS
index|]
decl_stmt|;
name|struct
name|calDataPerFreq
name|calPierData5G
index|[
name|AR5416_MAX_CHAINS
index|]
index|[
name|AR5416_NUM_5G_CAL_PIERS
index|]
decl_stmt|;
name|struct
name|calDataPerFreq
name|calPierData2G
index|[
name|AR5416_MAX_CHAINS
index|]
index|[
name|AR5416_NUM_2G_CAL_PIERS
index|]
decl_stmt|;
name|struct
name|CalTargetPowerLegacy
name|calTPow5G
index|[
name|AR5416_NUM_5G_20_TARGET_POWERS
index|]
decl_stmt|;
name|struct
name|CalTargetPowerHt
name|calTPow5GHT20
index|[
name|AR5416_NUM_5G_20_TARGET_POWERS
index|]
decl_stmt|;
name|struct
name|CalTargetPowerHt
name|calTPow5GHT40
index|[
name|AR5416_NUM_5G_40_TARGET_POWERS
index|]
decl_stmt|;
name|struct
name|CalTargetPowerLegacy
name|calTPowCck
index|[
name|AR5416_NUM_2G_CCK_TARGET_POWERS
index|]
decl_stmt|;
name|struct
name|CalTargetPowerLegacy
name|calTPow2G
index|[
name|AR5416_NUM_2G_20_TARGET_POWERS
index|]
decl_stmt|;
name|struct
name|CalTargetPowerHt
name|calTPow2GHT20
index|[
name|AR5416_NUM_2G_20_TARGET_POWERS
index|]
decl_stmt|;
name|struct
name|CalTargetPowerHt
name|calTPow2GHT40
index|[
name|AR5416_NUM_2G_40_TARGET_POWERS
index|]
decl_stmt|;
name|uint8_t
name|ctlIndex
index|[
name|AR5416_NUM_CTLS
index|]
decl_stmt|;
name|struct
name|CalCtlData
name|ctlData
index|[
name|AR5416_NUM_CTLS
index|]
decl_stmt|;
name|uint8_t
name|padding
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|OTUS_NUM_CHAINS
value|2
end_define

begin_define
define|#
directive|define
name|OTUS_UID
parameter_list|(
name|aid
parameter_list|)
value|(IEEE80211_AID(aid) + 4)
end_define

begin_define
define|#
directive|define
name|OTUS_MAX_TXCMDSZ
value|64
end_define

begin_define
define|#
directive|define
name|OTUS_RXBUFSZ
value|(8 * 1024)
end_define

begin_comment
comment|/* Bumped for later A-MSDU and legacy fast-frames TX support */
end_comment

begin_define
define|#
directive|define
name|OTUS_TXBUFSZ
value|(8 * 1024)
end_define

begin_comment
comment|/* Default EDCA parameters for when QoS is disabled. */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|wmeParams
name|otus_edca_def
index|[
name|WME_NUM_AC
index|]
init|=
block|{
block|{
literal|4
block|,
literal|10
block|,
literal|3
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|10
block|,
literal|7
block|,
literal|0
block|}
block|,
block|{
literal|3
block|,
literal|4
block|,
literal|2
block|,
literal|94
block|}
block|,
block|{
literal|2
block|,
literal|3
block|,
literal|2
block|,
literal|47
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|OTUS_RIDX_CCK1
value|0
end_define

begin_define
define|#
directive|define
name|OTUS_RIDX_OFDM6
value|4
end_define

begin_define
define|#
directive|define
name|OTUS_RIDX_OFDM24
value|8
end_define

begin_define
define|#
directive|define
name|OTUS_RIDX_MAX
value|11
end_define

begin_struct
specifier|static
specifier|const
struct|struct
name|otus_rate
block|{
name|uint8_t
name|rate
decl_stmt|;
name|uint8_t
name|mcs
decl_stmt|;
block|}
name|otus_rates
index|[]
init|=
block|{
block|{
literal|2
block|,
literal|0x0
block|}
block|,
block|{
literal|4
block|,
literal|0x1
block|}
block|,
block|{
literal|11
block|,
literal|0x2
block|}
block|,
block|{
literal|22
block|,
literal|0x3
block|}
block|,
block|{
literal|12
block|,
literal|0xb
block|}
block|,
block|{
literal|18
block|,
literal|0xf
block|}
block|,
block|{
literal|24
block|,
literal|0xa
block|}
block|,
block|{
literal|36
block|,
literal|0xe
block|}
block|,
block|{
literal|48
block|,
literal|0x9
block|}
block|,
block|{
literal|72
block|,
literal|0xd
block|}
block|,
block|{
literal|96
block|,
literal|0x8
block|}
block|,
block|{
literal|108
block|,
literal|0xc
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|otus_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|uint8_t
name|wr_antsignal
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|OTUS_RX_RADIOTAP_PRESENT
define|\
value|(1<< IEEE80211_RADIOTAP_FLAGS |		\ 	 1<< IEEE80211_RADIOTAP_RATE |			\ 	 1<< IEEE80211_RADIOTAP_CHANNEL |		\ 	 1<< IEEE80211_RADIOTAP_DB_ANTSIGNAL)
end_define

begin_struct
struct|struct
name|otus_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint8_t
name|wt_rate
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|OTUS_TX_RADIOTAP_PRESENT
define|\
value|(1<< IEEE80211_RADIOTAP_FLAGS |		\ 	 1<< IEEE80211_RADIOTAP_RATE |			\ 	 1<< IEEE80211_RADIOTAP_CHANNEL)
end_define

begin_struct_decl
struct_decl|struct
name|otus_softc
struct_decl|;
end_struct_decl

begin_comment
comment|/* Firmware commands */
end_comment

begin_struct
struct|struct
name|otus_tx_cmd
block|{
name|uint8_t
modifier|*
name|buf
decl_stmt|;
name|uint16_t
name|buflen
decl_stmt|;
name|void
modifier|*
modifier|*
name|odata
decl_stmt|;
name|uint16_t
name|odatalen
decl_stmt|;
name|uint16_t
name|token
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|otus_tx_cmd
argument_list|)
name|next_cmd
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* TX, RX buffers */
end_comment

begin_struct
struct|struct
name|otus_data
block|{
name|struct
name|otus_softc
modifier|*
name|sc
decl_stmt|;
name|uint8_t
modifier|*
name|buf
decl_stmt|;
name|uint16_t
name|buflen
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|otus_data
argument_list|)
name|next
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|otus_node
block|{
name|struct
name|ieee80211_node
name|ni
decl_stmt|;
name|uint64_t
name|tx_done
decl_stmt|;
name|uint64_t
name|tx_err
decl_stmt|;
name|uint64_t
name|tx_retries
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|OTUS_CONFIG_INDEX
value|0
end_define

begin_define
define|#
directive|define
name|OTUS_IFACE_INDEX
value|0
end_define

begin_comment
comment|/*  * The carl9170 firmware has the following specification:  *  * 0 - USB control  * 1 - TX  * 2 - RX  * 3 - IRQ  * 4 - CMD  * ..  * 10 - end  */
end_comment

begin_enum
enum|enum
block|{
name|OTUS_BULK_TX
block|,
name|OTUS_BULK_RX
block|,
name|OTUS_BULK_IRQ
block|,
name|OTUS_BULK_CMD
block|,
name|OTUS_N_XFER
block|}
enum|;
end_enum

begin_struct
struct|struct
name|otus_vap
block|{
name|struct
name|ieee80211vap
name|vap
decl_stmt|;
name|int
function_decl|(
modifier|*
name|newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|OTUS_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct otus_vap *)(vap))
end_define

begin_define
define|#
directive|define
name|OTUS_NODE
parameter_list|(
name|ni
parameter_list|)
value|((struct otus_node *)(ni))
end_define

begin_define
define|#
directive|define
name|OTUS_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|OTUS_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|OTUS_LOCK_ASSERT
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|OTUS_UNLOCK_ASSERT
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, MA_NOTOWNED)
end_define

begin_comment
comment|/* XXX the TX/RX endpoint dump says it's 0x200, (512)? */
end_comment

begin_define
define|#
directive|define
name|OTUS_MAX_TXSZ
value|512
end_define

begin_define
define|#
directive|define
name|OTUS_MAX_RXSZ
value|512
end_define

begin_comment
comment|/* intr/cmd endpoint dump says 0x40 */
end_comment

begin_define
define|#
directive|define
name|OTUS_MAX_CTRLSZ
value|64
end_define

begin_define
define|#
directive|define
name|OTUS_CMD_LIST_COUNT
value|32
end_define

begin_define
define|#
directive|define
name|OTUS_RX_LIST_COUNT
value|128
end_define

begin_define
define|#
directive|define
name|OTUS_TX_LIST_COUNT
value|32
end_define

begin_struct
struct|struct
name|otus_softc
block|{
name|struct
name|ieee80211com
name|sc_ic
decl_stmt|;
name|struct
name|mbufq
name|sc_snd
decl_stmt|;
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|usb_device
modifier|*
name|sc_udev
decl_stmt|;
name|int
function_decl|(
modifier|*
name|sc_newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211com
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_led_newstate
function_decl|)
parameter_list|(
name|struct
name|otus_softc
modifier|*
parameter_list|)
function_decl|;
name|struct
name|usbd_interface
modifier|*
name|sc_iface
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|struct
name|ar5416eeprom
name|eeprom
decl_stmt|;
name|uint8_t
name|capflags
decl_stmt|;
name|uint8_t
name|rxmask
decl_stmt|;
name|uint8_t
name|txmask
decl_stmt|;
name|int
name|sc_running
range|:
literal|1
decl_stmt|,
name|sc_calibrating
range|:
literal|1
decl_stmt|,
name|sc_scanning
range|:
literal|1
decl_stmt|;
name|int
name|sc_if_flags
decl_stmt|;
name|int
name|sc_tx_timer
decl_stmt|;
name|int
name|fixed_ridx
decl_stmt|;
name|int
name|bb_reset
decl_stmt|;
name|struct
name|ieee80211_channel
modifier|*
name|sc_curchan
decl_stmt|;
name|struct
name|task
name|tx_task
decl_stmt|;
name|struct
name|task
name|wme_update_task
decl_stmt|;
name|struct
name|timeout_task
name|scan_to
decl_stmt|;
name|struct
name|timeout_task
name|calib_to
decl_stmt|;
comment|/* register batch writes */
name|int
name|write_idx
decl_stmt|;
name|uint32_t
name|led_state
decl_stmt|;
comment|/* current firmware message serial / token number */
name|int
name|token
decl_stmt|;
comment|/* current noisefloor, from SET_FREQUENCY */
name|int
name|sc_nf
index|[
name|OTUS_NUM_CHAINS
index|]
decl_stmt|;
comment|/* How many pending, active transmit frames */
name|int
name|sc_tx_n_pending
decl_stmt|;
name|int
name|sc_tx_n_active
decl_stmt|;
specifier|const
name|uint32_t
modifier|*
name|phy_vals
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|reg
decl_stmt|;
name|uint32_t
name|val
decl_stmt|;
block|}
name|__packed
name|write_buf
index|[
name|AR_MAX_WRITE_IDX
operator|+
literal|1
index|]
struct|;
name|struct
name|otus_data
name|sc_rx
index|[
name|OTUS_RX_LIST_COUNT
index|]
decl_stmt|;
name|struct
name|otus_data
name|sc_tx
index|[
name|OTUS_TX_LIST_COUNT
index|]
decl_stmt|;
name|struct
name|otus_tx_cmd
name|sc_cmd
index|[
name|OTUS_CMD_LIST_COUNT
index|]
decl_stmt|;
name|struct
name|usb_xfer
modifier|*
name|sc_xfer
index|[
name|OTUS_N_XFER
index|]
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|otus_data
argument_list|)
name|sc_rx_active
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|otus_data
argument_list|)
name|sc_rx_inactive
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|otus_data
argument_list|)
name|sc_tx_active
index|[
name|OTUS_N_XFER
index|]
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|otus_data
argument_list|)
name|sc_tx_inactive
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|otus_data
argument_list|)
name|sc_tx_pending
index|[
name|OTUS_N_XFER
index|]
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|otus_tx_cmd
argument_list|)
name|sc_cmd_active
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|otus_tx_cmd
argument_list|)
name|sc_cmd_inactive
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|otus_tx_cmd
argument_list|)
name|sc_cmd_pending
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|otus_tx_cmd
argument_list|)
name|sc_cmd_waiting
expr_stmt|;
union|union
block|{
name|struct
name|otus_rx_radiotap_header
name|th
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|64
index|]
decl_stmt|;
block|}
name|sc_rxtapu
union|;
define|#
directive|define
name|sc_rxtap
value|sc_rxtapu.th
name|int
name|sc_rxtap_len
decl_stmt|;
union|union
block|{
name|struct
name|otus_tx_radiotap_header
name|th
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|64
index|]
decl_stmt|;
block|}
name|sc_txtapu
union|;
define|#
directive|define
name|sc_txtap
value|sc_txtapu.th
name|int
name|sc_txtap_len
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __IF_OTUSREG_H__ */
end_comment

end_unit

