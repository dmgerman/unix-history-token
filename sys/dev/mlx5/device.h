begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013-2015, Mellanox Technologies, Ltd.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS `AS IS' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX5_DEVICE_H
end_ifndef

begin_define
define|#
directive|define
name|MLX5_DEVICE_H
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx5/mlx5_ifc.h>
end_include

begin_define
define|#
directive|define
name|FW_INIT_TIMEOUT_MILI
value|2000
end_define

begin_define
define|#
directive|define
name|FW_INIT_WAIT_MS
value|2
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
end_if

begin_define
define|#
directive|define
name|MLX5_SET_HOST_ENDIANNESS
value|0
end_define

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
end_elif

begin_define
define|#
directive|define
name|MLX5_SET_HOST_ENDIANNESS
value|0x80
end_define

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
error|Host endianness not defined
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* helper macros */
end_comment

begin_define
define|#
directive|define
name|__mlx5_nullp
parameter_list|(
name|typ
parameter_list|)
value|((struct mlx5_ifc_##typ##_bits *)0)
end_define

begin_define
define|#
directive|define
name|__mlx5_bit_sz
parameter_list|(
name|typ
parameter_list|,
name|fld
parameter_list|)
value|sizeof(__mlx5_nullp(typ)->fld)
end_define

begin_define
define|#
directive|define
name|__mlx5_bit_off
parameter_list|(
name|typ
parameter_list|,
name|fld
parameter_list|)
value|__offsetof(struct mlx5_ifc_##typ##_bits, fld)
end_define

begin_define
define|#
directive|define
name|__mlx5_dw_off
parameter_list|(
name|typ
parameter_list|,
name|fld
parameter_list|)
value|(__mlx5_bit_off(typ, fld) / 32)
end_define

begin_define
define|#
directive|define
name|__mlx5_64_off
parameter_list|(
name|typ
parameter_list|,
name|fld
parameter_list|)
value|(__mlx5_bit_off(typ, fld) / 64)
end_define

begin_define
define|#
directive|define
name|__mlx5_dw_bit_off
parameter_list|(
name|typ
parameter_list|,
name|fld
parameter_list|)
value|(32 - __mlx5_bit_sz(typ, fld) - (__mlx5_bit_off(typ, fld)& 0x1f))
end_define

begin_define
define|#
directive|define
name|__mlx5_mask
parameter_list|(
name|typ
parameter_list|,
name|fld
parameter_list|)
value|((u32)((1ull<< __mlx5_bit_sz(typ, fld)) - 1))
end_define

begin_define
define|#
directive|define
name|__mlx5_dw_mask
parameter_list|(
name|typ
parameter_list|,
name|fld
parameter_list|)
value|(__mlx5_mask(typ, fld)<< __mlx5_dw_bit_off(typ, fld))
end_define

begin_define
define|#
directive|define
name|__mlx5_st_sz_bits
parameter_list|(
name|typ
parameter_list|)
value|sizeof(struct mlx5_ifc_##typ##_bits)
end_define

begin_define
define|#
directive|define
name|MLX5_FLD_SZ_BYTES
parameter_list|(
name|typ
parameter_list|,
name|fld
parameter_list|)
value|(__mlx5_bit_sz(typ, fld) / 8)
end_define

begin_define
define|#
directive|define
name|MLX5_ST_SZ_BYTES
parameter_list|(
name|typ
parameter_list|)
value|(sizeof(struct mlx5_ifc_##typ##_bits) / 8)
end_define

begin_define
define|#
directive|define
name|MLX5_ST_SZ_DW
parameter_list|(
name|typ
parameter_list|)
value|(sizeof(struct mlx5_ifc_##typ##_bits) / 32)
end_define

begin_define
define|#
directive|define
name|MLX5_ST_SZ_QW
parameter_list|(
name|typ
parameter_list|)
value|(sizeof(struct mlx5_ifc_##typ##_bits) / 64)
end_define

begin_define
define|#
directive|define
name|MLX5_UN_SZ_BYTES
parameter_list|(
name|typ
parameter_list|)
value|(sizeof(union mlx5_ifc_##typ##_bits) / 8)
end_define

begin_define
define|#
directive|define
name|MLX5_UN_SZ_DW
parameter_list|(
name|typ
parameter_list|)
value|(sizeof(union mlx5_ifc_##typ##_bits) / 32)
end_define

begin_define
define|#
directive|define
name|MLX5_BYTE_OFF
parameter_list|(
name|typ
parameter_list|,
name|fld
parameter_list|)
value|(__mlx5_bit_off(typ, fld) / 8)
end_define

begin_define
define|#
directive|define
name|MLX5_ADDR_OF
parameter_list|(
name|typ
parameter_list|,
name|p
parameter_list|,
name|fld
parameter_list|)
value|((char *)(p) + MLX5_BYTE_OFF(typ, fld))
end_define

begin_comment
comment|/* insert a value to a struct */
end_comment

begin_define
define|#
directive|define
name|MLX5_SET
parameter_list|(
name|typ
parameter_list|,
name|p
parameter_list|,
name|fld
parameter_list|,
name|v
parameter_list|)
value|do { \ 	BUILD_BUG_ON(__mlx5_st_sz_bits(typ) % 32);             \ 	BUILD_BUG_ON(__mlx5_bit_sz(typ, fld)> 32); \ 	*((__be32 *)(p) + __mlx5_dw_off(typ, fld)) = \ 	cpu_to_be32((be32_to_cpu(*((__be32 *)(p) + __mlx5_dw_off(typ, fld)))& \ 		     (~__mlx5_dw_mask(typ, fld))) | (((v)& __mlx5_mask(typ, fld)) \<< __mlx5_dw_bit_off(typ, fld))); \ } while (0)
end_define

begin_define
define|#
directive|define
name|MLX5_SET_TO_ONES
parameter_list|(
name|typ
parameter_list|,
name|p
parameter_list|,
name|fld
parameter_list|)
value|do { \ 	BUILD_BUG_ON(__mlx5_st_sz_bits(typ) % 32);             \ 	BUILD_BUG_ON(__mlx5_bit_sz(typ, fld)> 32); \ 	*((__be32 *)(p) + __mlx5_dw_off(typ, fld)) = \ 	cpu_to_be32((be32_to_cpu(*((__be32 *)(p) + __mlx5_dw_off(typ, fld)))& \ 		     (~__mlx5_dw_mask(typ, fld))) | ((__mlx5_mask(typ, fld)) \<< __mlx5_dw_bit_off(typ, fld))); \ } while (0)
end_define

begin_define
define|#
directive|define
name|MLX5_GET
parameter_list|(
name|typ
parameter_list|,
name|p
parameter_list|,
name|fld
parameter_list|)
value|((be32_to_cpu(*((__be32 *)(p) +\ __mlx5_dw_off(typ, fld)))>> __mlx5_dw_bit_off(typ, fld))& \ __mlx5_mask(typ, fld))
end_define

begin_define
define|#
directive|define
name|MLX5_GET_PR
parameter_list|(
name|typ
parameter_list|,
name|p
parameter_list|,
name|fld
parameter_list|)
value|({ \ 	u32 ___t = MLX5_GET(typ, p, fld); \ 	pr_debug(#fld " = 0x%x\n", ___t); \ 	___t; \ })
end_define

begin_define
define|#
directive|define
name|MLX5_SET64
parameter_list|(
name|typ
parameter_list|,
name|p
parameter_list|,
name|fld
parameter_list|,
name|v
parameter_list|)
value|do { \ 	BUILD_BUG_ON(__mlx5_bit_sz(typ, fld) != 64); \ 	BUILD_BUG_ON(__mlx5_bit_off(typ, fld) % 64); \ 	*((__be64 *)(p) + __mlx5_64_off(typ, fld)) = cpu_to_be64(v); \ } while (0)
end_define

begin_define
define|#
directive|define
name|MLX5_GET64
parameter_list|(
name|typ
parameter_list|,
name|p
parameter_list|,
name|fld
parameter_list|)
value|be64_to_cpu(*((__be64 *)(p) + __mlx5_64_off(typ, fld)))
end_define

begin_enum
enum|enum
block|{
name|MLX5_MAX_COMMANDS
init|=
literal|32
block|,
name|MLX5_CMD_DATA_BLOCK_SIZE
init|=
literal|512
block|,
name|MLX5_PCI_CMD_XPORT
init|=
literal|7
block|,
name|MLX5_MKEY_BSF_OCTO_SIZE
init|=
literal|4
block|,
name|MLX5_MAX_PSVS
init|=
literal|4
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_EXTENDED_UD_AV
init|=
literal|0x80000000
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_CQ_FLAGS_OI
init|=
literal|2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_STAT_RATE_OFFSET
init|=
literal|5
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_INLINE_SEG
init|=
literal|0x80000000
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_HW_START_PADDING
init|=
name|MLX5_INLINE_SEG
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_MIN_PKEY_TABLE_SIZE
init|=
literal|128
block|,
name|MLX5_MAX_LOG_PKEY_TABLE
init|=
literal|5
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_MKEY_INBOX_PG_ACCESS
init|=
literal|1
operator|<<
literal|31
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_PERM_LOCAL_READ
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX5_PERM_LOCAL_WRITE
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX5_PERM_REMOTE_READ
init|=
literal|1
operator|<<
literal|4
block|,
name|MLX5_PERM_REMOTE_WRITE
init|=
literal|1
operator|<<
literal|5
block|,
name|MLX5_PERM_ATOMIC
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX5_PERM_UMR_EN
init|=
literal|1
operator|<<
literal|7
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_PCIE_CTRL_SMALL_FENCE
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_PCIE_CTRL_RELAXED_ORDERING
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX5_PCIE_CTRL_NO_SNOOP
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX5_PCIE_CTRL_TLP_PROCE_EN
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX5_PCIE_CTRL_TPH_MASK
init|=
literal|3
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_MKEY_REMOTE_INVAL
init|=
literal|1
operator|<<
literal|24
block|,
name|MLX5_MKEY_FLAG_SYNC_UMR
init|=
literal|1
operator|<<
literal|29
block|,
name|MLX5_MKEY_BSF_EN
init|=
literal|1
operator|<<
literal|30
block|,
name|MLX5_MKEY_LEN64
init|=
literal|1
operator|<<
literal|31
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_EN_RD
init|=
operator|(
name|u64
operator|)
literal|1
block|,
name|MLX5_EN_WR
init|=
operator|(
name|u64
operator|)
literal|2
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_BF_REGS_PER_PAGE
init|=
literal|4
block|,
name|MLX5_MAX_UAR_PAGES
init|=
literal|1
operator|<<
literal|8
block|,
name|MLX5_NON_FP_BF_REGS_PER_PAGE
init|=
literal|2
block|,
name|MLX5_MAX_UUARS
init|=
name|MLX5_MAX_UAR_PAGES
operator|*
name|MLX5_NON_FP_BF_REGS_PER_PAGE
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_MKEY_MASK_LEN
init|=
literal|1ull
operator|<<
literal|0
block|,
name|MLX5_MKEY_MASK_PAGE_SIZE
init|=
literal|1ull
operator|<<
literal|1
block|,
name|MLX5_MKEY_MASK_START_ADDR
init|=
literal|1ull
operator|<<
literal|6
block|,
name|MLX5_MKEY_MASK_PD
init|=
literal|1ull
operator|<<
literal|7
block|,
name|MLX5_MKEY_MASK_EN_RINVAL
init|=
literal|1ull
operator|<<
literal|8
block|,
name|MLX5_MKEY_MASK_EN_SIGERR
init|=
literal|1ull
operator|<<
literal|9
block|,
name|MLX5_MKEY_MASK_BSF_EN
init|=
literal|1ull
operator|<<
literal|12
block|,
name|MLX5_MKEY_MASK_KEY
init|=
literal|1ull
operator|<<
literal|13
block|,
name|MLX5_MKEY_MASK_QPN
init|=
literal|1ull
operator|<<
literal|14
block|,
name|MLX5_MKEY_MASK_LR
init|=
literal|1ull
operator|<<
literal|17
block|,
name|MLX5_MKEY_MASK_LW
init|=
literal|1ull
operator|<<
literal|18
block|,
name|MLX5_MKEY_MASK_RR
init|=
literal|1ull
operator|<<
literal|19
block|,
name|MLX5_MKEY_MASK_RW
init|=
literal|1ull
operator|<<
literal|20
block|,
name|MLX5_MKEY_MASK_A
init|=
literal|1ull
operator|<<
literal|21
block|,
name|MLX5_MKEY_MASK_SMALL_FENCE
init|=
literal|1ull
operator|<<
literal|23
block|,
name|MLX5_MKEY_MASK_FREE
init|=
literal|1ull
operator|<<
literal|29
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_UMR_TRANSLATION_OFFSET_EN
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
name|MLX5_UMR_CHECK_NOT_FREE
init|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|,
name|MLX5_UMR_CHECK_FREE
init|=
operator|(
literal|2
operator|<<
literal|5
operator|)
block|,
name|MLX5_UMR_INLINE
init|=
operator|(
literal|1
operator|<<
literal|7
operator|)
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|MLX5_UMR_MTT_ALIGNMENT
value|0x40
end_define

begin_define
define|#
directive|define
name|MLX5_UMR_MTT_MASK
value|(MLX5_UMR_MTT_ALIGNMENT - 1)
end_define

begin_define
define|#
directive|define
name|MLX5_UMR_MTT_MIN_CHUNK_SIZE
value|MLX5_UMR_MTT_ALIGNMENT
end_define

begin_enum
enum|enum
block|{
name|MLX5_EVENT_QUEUE_TYPE_QP
init|=
literal|0
block|,
name|MLX5_EVENT_QUEUE_TYPE_RQ
init|=
literal|1
block|,
name|MLX5_EVENT_QUEUE_TYPE_SQ
init|=
literal|2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_PORT_CHANGE_SUBTYPE_DOWN
init|=
literal|1
block|,
name|MLX5_PORT_CHANGE_SUBTYPE_ACTIVE
init|=
literal|4
block|,
name|MLX5_PORT_CHANGE_SUBTYPE_INITIALIZED
init|=
literal|5
block|,
name|MLX5_PORT_CHANGE_SUBTYPE_LID
init|=
literal|6
block|,
name|MLX5_PORT_CHANGE_SUBTYPE_PKEY
init|=
literal|7
block|,
name|MLX5_PORT_CHANGE_SUBTYPE_GUID
init|=
literal|8
block|,
name|MLX5_PORT_CHANGE_SUBTYPE_CLIENT_REREG
init|=
literal|9
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_DCBX_EVENT_SUBTYPE_ERROR_STATE_DCBX
init|=
literal|1
block|,
name|MLX5_DCBX_EVENT_SUBTYPE_REMOTE_CONFIG_CHANGE
block|,
name|MLX5_DCBX_EVENT_SUBTYPE_LOCAL_OPER_CHANGE
block|,
name|MLX5_DCBX_EVENT_SUBTYPE_REMOTE_CONFIG_APP_PRIORITY_CHANGE
block|,
name|MLX5_MAX_INLINE_RECEIVE_SIZE
init|=
literal|64
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_DEV_CAP_FLAG_XRC
init|=
literal|1LL
operator|<<
literal|3
block|,
name|MLX5_DEV_CAP_FLAG_BAD_PKEY_CNTR
init|=
literal|1LL
operator|<<
literal|8
block|,
name|MLX5_DEV_CAP_FLAG_BAD_QKEY_CNTR
init|=
literal|1LL
operator|<<
literal|9
block|,
name|MLX5_DEV_CAP_FLAG_APM
init|=
literal|1LL
operator|<<
literal|17
block|,
name|MLX5_DEV_CAP_FLAG_SCQE_BRK_MOD
init|=
literal|1LL
operator|<<
literal|21
block|,
name|MLX5_DEV_CAP_FLAG_BLOCK_MCAST
init|=
literal|1LL
operator|<<
literal|23
block|,
name|MLX5_DEV_CAP_FLAG_CQ_MODER
init|=
literal|1LL
operator|<<
literal|29
block|,
name|MLX5_DEV_CAP_FLAG_RESIZE_CQ
init|=
literal|1LL
operator|<<
literal|30
block|,
name|MLX5_DEV_CAP_FLAG_ATOMIC
init|=
literal|1LL
operator|<<
literal|33
block|,
name|MLX5_DEV_CAP_FLAG_ROCE
init|=
literal|1LL
operator|<<
literal|34
block|,
name|MLX5_DEV_CAP_FLAG_DCT
init|=
literal|1LL
operator|<<
literal|37
block|,
name|MLX5_DEV_CAP_FLAG_SIG_HAND_OVER
init|=
literal|1LL
operator|<<
literal|40
block|,
name|MLX5_DEV_CAP_FLAG_CMDIF_CSUM
init|=
literal|3LL
operator|<<
literal|46
block|,
name|MLX5_DEV_CAP_FLAG_DRAIN_SIGERR
init|=
literal|1LL
operator|<<
literal|48
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_ROCE_VERSION_1
init|=
literal|0
block|,
name|MLX5_ROCE_VERSION_1_5
init|=
literal|1
block|,
name|MLX5_ROCE_VERSION_2
init|=
literal|2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_ROCE_VERSION_1_CAP
init|=
literal|1
operator|<<
name|MLX5_ROCE_VERSION_1
block|,
name|MLX5_ROCE_VERSION_1_5_CAP
init|=
literal|1
operator|<<
name|MLX5_ROCE_VERSION_1_5
block|,
name|MLX5_ROCE_VERSION_2_CAP
init|=
literal|1
operator|<<
name|MLX5_ROCE_VERSION_2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_ROCE_L3_TYPE_IPV4
init|=
literal|0
block|,
name|MLX5_ROCE_L3_TYPE_IPV6
init|=
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_ROCE_L3_TYPE_IPV4_CAP
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_ROCE_L3_TYPE_IPV6_CAP
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_OPCODE_NOP
init|=
literal|0x00
block|,
name|MLX5_OPCODE_SEND_INVAL
init|=
literal|0x01
block|,
name|MLX5_OPCODE_RDMA_WRITE
init|=
literal|0x08
block|,
name|MLX5_OPCODE_RDMA_WRITE_IMM
init|=
literal|0x09
block|,
name|MLX5_OPCODE_SEND
init|=
literal|0x0a
block|,
name|MLX5_OPCODE_SEND_IMM
init|=
literal|0x0b
block|,
name|MLX5_OPCODE_LSO
init|=
literal|0x0e
block|,
name|MLX5_OPCODE_RDMA_READ
init|=
literal|0x10
block|,
name|MLX5_OPCODE_ATOMIC_CS
init|=
literal|0x11
block|,
name|MLX5_OPCODE_ATOMIC_FA
init|=
literal|0x12
block|,
name|MLX5_OPCODE_ATOMIC_MASKED_CS
init|=
literal|0x14
block|,
name|MLX5_OPCODE_ATOMIC_MASKED_FA
init|=
literal|0x15
block|,
name|MLX5_OPCODE_BIND_MW
init|=
literal|0x18
block|,
name|MLX5_OPCODE_CONFIG_CMD
init|=
literal|0x1f
block|,
name|MLX5_RECV_OPCODE_RDMA_WRITE_IMM
init|=
literal|0x00
block|,
name|MLX5_RECV_OPCODE_SEND
init|=
literal|0x01
block|,
name|MLX5_RECV_OPCODE_SEND_IMM
init|=
literal|0x02
block|,
name|MLX5_RECV_OPCODE_SEND_INVAL
init|=
literal|0x03
block|,
name|MLX5_CQE_OPCODE_ERROR
init|=
literal|0x1e
block|,
name|MLX5_CQE_OPCODE_RESIZE
init|=
literal|0x16
block|,
name|MLX5_OPCODE_SET_PSV
init|=
literal|0x20
block|,
name|MLX5_OPCODE_GET_PSV
init|=
literal|0x21
block|,
name|MLX5_OPCODE_CHECK_PSV
init|=
literal|0x22
block|,
name|MLX5_OPCODE_RGET_PSV
init|=
literal|0x26
block|,
name|MLX5_OPCODE_RCHECK_PSV
init|=
literal|0x27
block|,
name|MLX5_OPCODE_UMR
init|=
literal|0x25
block|,
name|MLX5_OPCODE_SIGNATURE_CANCELED
init|=
operator|(
literal|1
operator|<<
literal|15
operator|)
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_SET_PORT_RESET_QKEY
init|=
literal|0
block|,
name|MLX5_SET_PORT_GUID0
init|=
literal|16
block|,
name|MLX5_SET_PORT_NODE_GUID
init|=
literal|17
block|,
name|MLX5_SET_PORT_SYS_GUID
init|=
literal|18
block|,
name|MLX5_SET_PORT_GID_TABLE
init|=
literal|19
block|,
name|MLX5_SET_PORT_PKEY_TABLE
init|=
literal|20
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_MAX_PAGE_SHIFT
init|=
literal|31
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_ADAPTER_PAGE_SHIFT
init|=
literal|12
block|,
name|MLX5_ADAPTER_PAGE_SIZE
init|=
literal|1
operator|<<
name|MLX5_ADAPTER_PAGE_SHIFT
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_CAP_OFF_CMDIF_CSUM
init|=
literal|46
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_inbox_hdr
block|{
name|__be16
name|opcode
decl_stmt|;
name|u8
name|rsvd
index|[
literal|4
index|]
decl_stmt|;
name|__be16
name|opmod
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_outbox_hdr
block|{
name|u8
name|status
decl_stmt|;
name|u8
name|rsvd
index|[
literal|3
index|]
decl_stmt|;
name|__be32
name|syndrome
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_cmd_set_dc_cnak_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|u8
name|enable
decl_stmt|;
name|u8
name|reserved
index|[
literal|47
index|]
decl_stmt|;
name|__be64
name|pa
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_cmd_set_dc_cnak_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_cmd_layout
block|{
name|u8
name|type
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
name|__be32
name|inlen
decl_stmt|;
name|__be64
name|in_ptr
decl_stmt|;
name|__be32
name|in
index|[
literal|4
index|]
decl_stmt|;
name|__be32
name|out
index|[
literal|4
index|]
decl_stmt|;
name|__be64
name|out_ptr
decl_stmt|;
name|__be32
name|outlen
decl_stmt|;
name|u8
name|token
decl_stmt|;
name|u8
name|sig
decl_stmt|;
name|u8
name|rsvd1
decl_stmt|;
name|u8
name|status_own
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_health_buffer
block|{
name|__be32
name|assert_var
index|[
literal|5
index|]
decl_stmt|;
name|__be32
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
name|__be32
name|assert_exit_ptr
decl_stmt|;
name|__be32
name|assert_callra
decl_stmt|;
name|__be32
name|rsvd1
index|[
literal|2
index|]
decl_stmt|;
name|__be32
name|fw_ver
decl_stmt|;
name|__be32
name|hw_id
decl_stmt|;
name|__be32
name|rsvd2
decl_stmt|;
name|u8
name|irisc_index
decl_stmt|;
name|u8
name|synd
decl_stmt|;
name|__be16
name|ext_sync
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_init_seg
block|{
name|__be32
name|fw_rev
decl_stmt|;
name|__be32
name|cmdif_rev_fw_sub
decl_stmt|;
name|__be32
name|rsvd0
index|[
literal|2
index|]
decl_stmt|;
name|__be32
name|cmdq_addr_h
decl_stmt|;
name|__be32
name|cmdq_addr_l_sz
decl_stmt|;
name|__be32
name|cmd_dbell
decl_stmt|;
name|__be32
name|rsvd1
index|[
literal|120
index|]
decl_stmt|;
name|__be32
name|initializing
decl_stmt|;
name|struct
name|mlx5_health_buffer
name|health
decl_stmt|;
name|__be32
name|rsvd2
index|[
literal|880
index|]
decl_stmt|;
name|__be32
name|internal_timer_h
decl_stmt|;
name|__be32
name|internal_timer_l
decl_stmt|;
name|__be32
name|rsvd3
index|[
literal|2
index|]
decl_stmt|;
name|__be32
name|health_counter
decl_stmt|;
name|__be32
name|rsvd4
index|[
literal|1019
index|]
decl_stmt|;
name|__be64
name|ieee1588_clk
decl_stmt|;
name|__be32
name|ieee1588_clk_type
decl_stmt|;
name|__be32
name|clr_intx
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_comp
block|{
name|__be32
name|reserved
index|[
literal|6
index|]
decl_stmt|;
name|__be32
name|cqn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_qp_srq
block|{
name|__be32
name|reserved
index|[
literal|6
index|]
decl_stmt|;
name|__be32
name|qp_srq_n
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_cq_err
block|{
name|__be32
name|cqn
decl_stmt|;
name|u8
name|reserved1
index|[
literal|7
index|]
decl_stmt|;
name|u8
name|syndrome
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_port_state
block|{
name|u8
name|reserved0
index|[
literal|8
index|]
decl_stmt|;
name|u8
name|port
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_gpio
block|{
name|__be32
name|reserved0
index|[
literal|2
index|]
decl_stmt|;
name|__be64
name|gpio_event
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_congestion
block|{
name|u8
name|type
decl_stmt|;
name|u8
name|rsvd0
decl_stmt|;
name|u8
name|congestion_level
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_stall_vl
block|{
name|u8
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|port_vl
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_cmd
block|{
name|__be32
name|vector
decl_stmt|;
name|__be32
name|rsvd
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_page_req
block|{
name|u8
name|rsvd0
index|[
literal|2
index|]
decl_stmt|;
name|__be16
name|func_id
decl_stmt|;
name|__be32
name|num_pages
decl_stmt|;
name|__be32
name|rsvd1
index|[
literal|5
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eqe_vport_change
block|{
name|u8
name|rsvd0
index|[
literal|2
index|]
decl_stmt|;
name|__be16
name|vport_num
decl_stmt|;
name|__be32
name|rsvd1
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PORT_MODULE_EVENT_MODULE_STATUS_MASK
value|0xF
end_define

begin_define
define|#
directive|define
name|PORT_MODULE_EVENT_ERROR_TYPE_MASK
value|0xF
end_define

begin_enum
enum|enum
block|{
name|MLX5_MODULE_STATUS_PLUGGED
init|=
literal|0x1
block|,
name|MLX5_MODULE_STATUS_UNPLUGGED
init|=
literal|0x2
block|,
name|MLX5_MODULE_STATUS_ERROR
init|=
literal|0x3
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_MODULE_EVENT_ERROR_POWER_BUDGET_EXCEEDED
init|=
literal|0x0
block|,
name|MLX5_MODULE_EVENT_ERROR_LONG_RANGE_FOR_NON_MLNX_CABLE_MODULE
init|=
literal|0x1
block|,
name|MLX5_MODULE_EVENT_ERROR_BUS_STUCK
init|=
literal|0x2
block|,
name|MLX5_MODULE_EVENT_ERROR_NO_EEPROM_RETRY_TIMEOUT
init|=
literal|0x3
block|,
name|MLX5_MODULE_EVENT_ERROR_ENFORCE_PART_NUMBER_LIST
init|=
literal|0x4
block|,
name|MLX5_MODULE_EVENT_ERROR_UNKNOWN_IDENTIFIER
init|=
literal|0x5
block|,
name|MLX5_MODULE_EVENT_ERROR_HIGH_TEMPERATURE
init|=
literal|0x6
block|,
name|MLX5_MODULE_EVENT_ERROR_CABLE_IS_SHORTED
init|=
literal|0x7
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_eqe_port_module_event
block|{
name|u8
name|rsvd0
decl_stmt|;
name|u8
name|module
decl_stmt|;
name|u8
name|rsvd1
decl_stmt|;
name|u8
name|module_status
decl_stmt|;
name|u8
name|rsvd2
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|error_type
decl_stmt|;
block|}
struct|;
end_struct

begin_union
union|union
name|ev_data
block|{
name|__be32
name|raw
index|[
literal|7
index|]
decl_stmt|;
name|struct
name|mlx5_eqe_cmd
name|cmd
decl_stmt|;
name|struct
name|mlx5_eqe_comp
name|comp
decl_stmt|;
name|struct
name|mlx5_eqe_qp_srq
name|qp_srq
decl_stmt|;
name|struct
name|mlx5_eqe_cq_err
name|cq_err
decl_stmt|;
name|struct
name|mlx5_eqe_port_state
name|port
decl_stmt|;
name|struct
name|mlx5_eqe_gpio
name|gpio
decl_stmt|;
name|struct
name|mlx5_eqe_congestion
name|cong
decl_stmt|;
name|struct
name|mlx5_eqe_stall_vl
name|stall_vl
decl_stmt|;
name|struct
name|mlx5_eqe_page_req
name|req_pages
decl_stmt|;
name|struct
name|mlx5_eqe_port_module_event
name|port_module_event
decl_stmt|;
name|struct
name|mlx5_eqe_vport_change
name|vport_change
decl_stmt|;
block|}
name|__packed
union|;
end_union

begin_struct
struct|struct
name|mlx5_eqe
block|{
name|u8
name|rsvd0
decl_stmt|;
name|u8
name|type
decl_stmt|;
name|u8
name|rsvd1
decl_stmt|;
name|u8
name|sub_type
decl_stmt|;
name|__be32
name|rsvd2
index|[
literal|7
index|]
decl_stmt|;
name|union
name|ev_data
name|data
decl_stmt|;
name|__be16
name|rsvd3
decl_stmt|;
name|u8
name|signature
decl_stmt|;
name|u8
name|owner
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_cmd_prot_block
block|{
name|u8
name|data
index|[
name|MLX5_CMD_DATA_BLOCK_SIZE
index|]
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|48
index|]
decl_stmt|;
name|__be64
name|next
decl_stmt|;
name|__be32
name|block_num
decl_stmt|;
name|u8
name|rsvd1
decl_stmt|;
name|u8
name|token
decl_stmt|;
name|u8
name|ctrl_sig
decl_stmt|;
name|u8
name|sig
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX5_CQE_SYND_FLUSHED_IN_ERROR
init|=
literal|5
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_err_cqe
block|{
name|u8
name|rsvd0
index|[
literal|32
index|]
decl_stmt|;
name|__be32
name|srqn
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|18
index|]
decl_stmt|;
name|u8
name|vendor_err_synd
decl_stmt|;
name|u8
name|syndrome
decl_stmt|;
name|__be32
name|s_wqe_opcode_qpn
decl_stmt|;
name|__be16
name|wqe_counter
decl_stmt|;
name|u8
name|signature
decl_stmt|;
name|u8
name|op_own
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_cqe64
block|{
name|u8
name|tunneled_etc
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|lro_tcppsh_abort_dupack
decl_stmt|;
name|u8
name|lro_min_ttl
decl_stmt|;
name|__be16
name|lro_tcp_win
decl_stmt|;
name|__be32
name|lro_ack_seq_num
decl_stmt|;
name|__be32
name|rss_hash_result
decl_stmt|;
name|u8
name|rss_hash_type
decl_stmt|;
name|u8
name|ml_path
decl_stmt|;
name|u8
name|rsvd20
index|[
literal|2
index|]
decl_stmt|;
name|__be16
name|check_sum
decl_stmt|;
name|__be16
name|slid
decl_stmt|;
name|__be32
name|flags_rqpn
decl_stmt|;
name|u8
name|hds_ip_ext
decl_stmt|;
name|u8
name|l4_hdr_type_etc
decl_stmt|;
name|__be16
name|vlan_info
decl_stmt|;
name|__be32
name|srqn
decl_stmt|;
comment|/* [31:24]: lro_num_seg, [23:0]: srqn */
name|__be32
name|imm_inval_pkey
decl_stmt|;
name|u8
name|rsvd40
index|[
literal|4
index|]
decl_stmt|;
name|__be32
name|byte_cnt
decl_stmt|;
name|__be64
name|timestamp
decl_stmt|;
name|__be32
name|sop_drop_qpn
decl_stmt|;
name|__be16
name|wqe_counter
decl_stmt|;
name|u8
name|signature
decl_stmt|;
name|u8
name|op_own
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|bool
name|get_cqe_lro_timestamp_valid
parameter_list|(
name|struct
name|mlx5_cqe64
modifier|*
name|cqe
parameter_list|)
block|{
return|return
operator|(
name|cqe
operator|->
name|lro_tcppsh_abort_dupack
operator|>>
literal|7
operator|)
operator|&
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|get_cqe_lro_tcppsh
parameter_list|(
name|struct
name|mlx5_cqe64
modifier|*
name|cqe
parameter_list|)
block|{
return|return
operator|(
name|cqe
operator|->
name|lro_tcppsh_abort_dupack
operator|>>
literal|6
operator|)
operator|&
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|get_cqe_l4_hdr_type
parameter_list|(
name|struct
name|mlx5_cqe64
modifier|*
name|cqe
parameter_list|)
block|{
return|return
operator|(
name|cqe
operator|->
name|l4_hdr_type_etc
operator|>>
literal|4
operator|)
operator|&
literal|0x7
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|get_cqe_vlan
parameter_list|(
name|struct
name|mlx5_cqe64
modifier|*
name|cqe
parameter_list|)
block|{
return|return
name|be16_to_cpu
argument_list|(
name|cqe
operator|->
name|vlan_info
argument_list|)
operator|&
literal|0xfff
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|get_cqe_smac
parameter_list|(
name|struct
name|mlx5_cqe64
modifier|*
name|cqe
parameter_list|,
name|u8
modifier|*
name|smac
parameter_list|)
block|{
name|memcpy
argument_list|(
name|smac
argument_list|,
operator|&
name|cqe
operator|->
name|rss_hash_type
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|smac
operator|+
literal|4
argument_list|,
operator|&
name|cqe
operator|->
name|slid
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|cqe_has_vlan
parameter_list|(
name|struct
name|mlx5_cqe64
modifier|*
name|cqe
parameter_list|)
block|{
return|return
name|cqe
operator|->
name|l4_hdr_type_etc
operator|&
literal|0x1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|cqe_is_tunneled
parameter_list|(
name|struct
name|mlx5_cqe64
modifier|*
name|cqe
parameter_list|)
block|{
return|return
name|cqe
operator|->
name|tunneled_etc
operator|&
literal|0x1
return|;
block|}
end_function

begin_enum
enum|enum
block|{
name|CQE_L4_HDR_TYPE_NONE
init|=
literal|0x0
block|,
name|CQE_L4_HDR_TYPE_TCP_NO_ACK
init|=
literal|0x1
block|,
name|CQE_L4_HDR_TYPE_UDP
init|=
literal|0x2
block|,
name|CQE_L4_HDR_TYPE_TCP_ACK_NO_DATA
init|=
literal|0x3
block|,
name|CQE_L4_HDR_TYPE_TCP_ACK_AND_DATA
init|=
literal|0x4
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
comment|/* source L3 hash types */
name|CQE_RSS_SRC_HTYPE_IP
init|=
literal|0x3
operator|<<
literal|0
block|,
name|CQE_RSS_SRC_HTYPE_IPV4
init|=
literal|0x1
operator|<<
literal|0
block|,
name|CQE_RSS_SRC_HTYPE_IPV6
init|=
literal|0x2
operator|<<
literal|0
block|,
comment|/* destination L3 hash types */
name|CQE_RSS_DST_HTYPE_IP
init|=
literal|0x3
operator|<<
literal|2
block|,
name|CQE_RSS_DST_HTYPE_IPV4
init|=
literal|0x1
operator|<<
literal|2
block|,
name|CQE_RSS_DST_HTYPE_IPV6
init|=
literal|0x2
operator|<<
literal|2
block|,
comment|/* source L4 hash types */
name|CQE_RSS_SRC_HTYPE_L4
init|=
literal|0x3
operator|<<
literal|4
block|,
name|CQE_RSS_SRC_HTYPE_TCP
init|=
literal|0x1
operator|<<
literal|4
block|,
name|CQE_RSS_SRC_HTYPE_UDP
init|=
literal|0x2
operator|<<
literal|4
block|,
name|CQE_RSS_SRC_HTYPE_IPSEC
init|=
literal|0x3
operator|<<
literal|4
block|,
comment|/* destination L4 hash types */
name|CQE_RSS_DST_HTYPE_L4
init|=
literal|0x3
operator|<<
literal|6
block|,
name|CQE_RSS_DST_HTYPE_TCP
init|=
literal|0x1
operator|<<
literal|6
block|,
name|CQE_RSS_DST_HTYPE_UDP
init|=
literal|0x2
operator|<<
literal|6
block|,
name|CQE_RSS_DST_HTYPE_IPSEC
init|=
literal|0x3
operator|<<
literal|6
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|CQE_ROCE_L3_HEADER_TYPE_GRH
init|=
literal|0x0
block|,
name|CQE_ROCE_L3_HEADER_TYPE_IPV6
init|=
literal|0x1
block|,
name|CQE_ROCE_L3_HEADER_TYPE_IPV4
init|=
literal|0x2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|CQE_L2_OK
init|=
literal|1
operator|<<
literal|0
block|,
name|CQE_L3_OK
init|=
literal|1
operator|<<
literal|1
block|,
name|CQE_L4_OK
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_sig_err_cqe
block|{
name|u8
name|rsvd0
index|[
literal|16
index|]
decl_stmt|;
name|__be32
name|expected_trans_sig
decl_stmt|;
name|__be32
name|actual_trans_sig
decl_stmt|;
name|__be32
name|expected_reftag
decl_stmt|;
name|__be32
name|actual_reftag
decl_stmt|;
name|__be16
name|syndrome
decl_stmt|;
name|u8
name|rsvd22
index|[
literal|2
index|]
decl_stmt|;
name|__be32
name|mkey
decl_stmt|;
name|__be64
name|err_offset
decl_stmt|;
name|u8
name|rsvd30
index|[
literal|8
index|]
decl_stmt|;
name|__be32
name|qpn
decl_stmt|;
name|u8
name|rsvd38
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|signature
decl_stmt|;
name|u8
name|op_own
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_srq_next_seg
block|{
name|u8
name|rsvd0
index|[
literal|2
index|]
decl_stmt|;
name|__be16
name|next_wqe_index
decl_stmt|;
name|u8
name|signature
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|11
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_union
union|union
name|mlx5_ext_cqe
block|{
name|struct
name|ib_grh
name|grh
decl_stmt|;
name|u8
name|inl
index|[
literal|64
index|]
decl_stmt|;
block|}
union|;
end_union

begin_struct
struct|struct
name|mlx5_cqe128
block|{
name|union
name|mlx5_ext_cqe
name|inl_grh
decl_stmt|;
name|struct
name|mlx5_cqe64
name|cqe64
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_srq_ctx
block|{
name|u8
name|state_log_sz
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
name|__be32
name|flags_xrcd
decl_stmt|;
name|__be32
name|pgoff_cqn
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|4
index|]
decl_stmt|;
name|u8
name|log_pg_sz
decl_stmt|;
name|u8
name|rsvd2
index|[
literal|7
index|]
decl_stmt|;
name|__be32
name|pd
decl_stmt|;
name|__be16
name|lwm
decl_stmt|;
name|__be16
name|wqe_cnt
decl_stmt|;
name|u8
name|rsvd3
index|[
literal|8
index|]
decl_stmt|;
name|__be64
name|db_record
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_srq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|input_srqn
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|mlx5_srq_ctx
name|ctx
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|208
index|]
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_srq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|srqn
decl_stmt|;
name|u8
name|rsvd
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_destroy_srq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|srqn
decl_stmt|;
name|u8
name|rsvd
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_destroy_srq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_srq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|srqn
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_srq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|8
index|]
decl_stmt|;
name|struct
name|mlx5_srq_ctx
name|ctx
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|32
index|]
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_arm_srq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|srqn
decl_stmt|;
name|__be16
name|rsvd
decl_stmt|;
name|__be16
name|lwm
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_arm_srq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_cq_context
block|{
name|u8
name|status
decl_stmt|;
name|u8
name|cqe_sz_flags
decl_stmt|;
name|u8
name|st
decl_stmt|;
name|u8
name|rsvd3
decl_stmt|;
name|u8
name|rsvd4
index|[
literal|6
index|]
decl_stmt|;
name|__be16
name|page_offset
decl_stmt|;
name|__be32
name|log_sz_usr_page
decl_stmt|;
name|__be16
name|cq_period
decl_stmt|;
name|__be16
name|cq_max_count
decl_stmt|;
name|__be16
name|rsvd20
decl_stmt|;
name|__be16
name|c_eqn
decl_stmt|;
name|u8
name|log_pg_sz
decl_stmt|;
name|u8
name|rsvd25
index|[
literal|7
index|]
decl_stmt|;
name|__be32
name|last_notified_index
decl_stmt|;
name|__be32
name|solicit_producer_index
decl_stmt|;
name|__be32
name|consumer_counter
decl_stmt|;
name|__be32
name|producer_counter
decl_stmt|;
name|u8
name|rsvd48
index|[
literal|8
index|]
decl_stmt|;
name|__be64
name|db_record_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_cq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|input_cqn
decl_stmt|;
name|u8
name|rsvdx
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|mlx5_cq_context
name|ctx
decl_stmt|;
name|u8
name|rsvd6
index|[
literal|192
index|]
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_cq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|cqn
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_destroy_cq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|cqn
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_destroy_cq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_cq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|cqn
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_cq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|8
index|]
decl_stmt|;
name|struct
name|mlx5_cq_context
name|ctx
decl_stmt|;
name|u8
name|rsvd6
index|[
literal|16
index|]
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_modify_cq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|cqn
decl_stmt|;
name|__be32
name|field_select
decl_stmt|;
name|struct
name|mlx5_cq_context
name|ctx
decl_stmt|;
name|u8
name|rsvd
index|[
literal|192
index|]
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_modify_cq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_eq_context
block|{
name|u8
name|status
decl_stmt|;
name|u8
name|ec_oi
decl_stmt|;
name|u8
name|st
decl_stmt|;
name|u8
name|rsvd2
index|[
literal|7
index|]
decl_stmt|;
name|__be16
name|page_pffset
decl_stmt|;
name|__be32
name|log_sz_usr_page
decl_stmt|;
name|u8
name|rsvd3
index|[
literal|7
index|]
decl_stmt|;
name|u8
name|intr
decl_stmt|;
name|u8
name|log_page_size
decl_stmt|;
name|u8
name|rsvd4
index|[
literal|15
index|]
decl_stmt|;
name|__be32
name|consumer_counter
decl_stmt|;
name|__be32
name|produser_counter
decl_stmt|;
name|u8
name|rsvd5
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_eq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|input_eqn
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|mlx5_eq_context
name|ctx
decl_stmt|;
name|u8
name|rsvd2
index|[
literal|8
index|]
decl_stmt|;
name|__be64
name|events_mask
decl_stmt|;
name|u8
name|rsvd3
index|[
literal|176
index|]
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_eq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|eq_number
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_map_eq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be64
name|mask
decl_stmt|;
name|u8
name|mu
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|eqn
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|24
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_map_eq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_eq_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|eqn
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_eq_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
name|struct
name|mlx5_eq_context
name|ctx
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX5_MKEY_STATUS_FREE
init|=
literal|1
operator|<<
literal|6
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_mkey_seg
block|{
comment|/* This is a two bit field occupying bits 31-30. 	 * bit 31 is always 0, 	 * bit 30 is zero for regular MRs and 1 (e.g free) for UMRs that do not have tanslation 	 */
name|u8
name|status
decl_stmt|;
name|u8
name|pcie_control
decl_stmt|;
name|u8
name|flags
decl_stmt|;
name|u8
name|version
decl_stmt|;
name|__be32
name|qpn_mkey7_0
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|4
index|]
decl_stmt|;
name|__be32
name|flags_pd
decl_stmt|;
name|__be64
name|start_addr
decl_stmt|;
name|__be64
name|len
decl_stmt|;
name|__be32
name|bsfs_octo_size
decl_stmt|;
name|u8
name|rsvd2
index|[
literal|16
index|]
decl_stmt|;
name|__be32
name|xlt_oct_size
decl_stmt|;
name|u8
name|rsvd3
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|log2_page_size
decl_stmt|;
name|u8
name|rsvd4
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_special_ctxs_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_special_ctxs_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|dump_fill_mkey
decl_stmt|;
name|__be32
name|reserved_lkey
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_mkey_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|input_mkey_index
decl_stmt|;
name|__be32
name|flags
decl_stmt|;
name|struct
name|mlx5_mkey_seg
name|seg
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|16
index|]
decl_stmt|;
name|__be32
name|xlat_oct_act_size
decl_stmt|;
name|__be32
name|rsvd2
decl_stmt|;
name|u8
name|rsvd3
index|[
literal|168
index|]
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_mkey_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|mkey
decl_stmt|;
name|u8
name|rsvd
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_mkey_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|mkey
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_mkey_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_modify_mkey_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|mkey
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_modify_mkey_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_dump_mkey_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_dump_mkey_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|mkey
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_mad_ifc_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be16
name|remote_lid
decl_stmt|;
name|u8
name|rsvd0
decl_stmt|;
name|u8
name|port
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|4
index|]
decl_stmt|;
name|u8
name|data
index|[
literal|256
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_mad_ifc_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
name|u8
name|data
index|[
literal|256
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_access_reg_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|2
index|]
decl_stmt|;
name|__be16
name|register_id
decl_stmt|;
name|__be32
name|arg
decl_stmt|;
name|__be32
name|data
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_access_reg_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
name|__be32
name|data
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MLX5_ATTR_EXTENDED_PORT_INFO
value|cpu_to_be16(0xff90)
end_define

begin_enum
enum|enum
block|{
name|MLX_EXT_PORT_CAP_FLAG_EXTENDED_PORT_INFO
init|=
literal|1
operator|<<
literal|0
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_allocate_psv_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|npsv_pd
decl_stmt|;
name|__be32
name|rsvd_psv0
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_allocate_psv_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
name|__be32
name|psv_idx
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_destroy_psv_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|psv_number
decl_stmt|;
name|u8
name|rsvd
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_destroy_psv_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|mlx5_host_is_le
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__LITTLE_ENDIAN
argument_list|)
return|return
literal|1
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__BIG_ENDIAN
argument_list|)
return|return
literal|0
return|;
else|#
directive|else
error|#
directive|error
error|Host endianness not defined
endif|#
directive|endif
block|}
end_function

begin_define
define|#
directive|define
name|MLX5_CMD_OP_MAX
value|0x939
end_define

begin_enum
enum|enum
block|{
name|VPORT_STATE_DOWN
init|=
literal|0x0
block|,
name|VPORT_STATE_UP
init|=
literal|0x1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_L3_PROT_TYPE_IPV4
init|=
literal|0
block|,
name|MLX5_L3_PROT_TYPE_IPV6
init|=
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_L4_PROT_TYPE_TCP
init|=
literal|0
block|,
name|MLX5_L4_PROT_TYPE_UDP
init|=
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_HASH_FIELD_SEL_SRC_IP
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_HASH_FIELD_SEL_DST_IP
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_HASH_FIELD_SEL_L4_SPORT
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX5_HASH_FIELD_SEL_L4_DPORT
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX5_HASH_FIELD_SEL_IPSEC_SPI
init|=
literal|1
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_MATCH_OUTER_HEADERS
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_MATCH_MISC_PARAMETERS
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_MATCH_INNER_HEADERS
init|=
literal|1
operator|<<
literal|2
block|,  }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_FLOW_TABLE_TYPE_NIC_RCV
init|=
literal|0
block|,
name|MLX5_FLOW_TABLE_TYPE_EGRESS_ACL
init|=
literal|2
block|,
name|MLX5_FLOW_TABLE_TYPE_INGRESS_ACL
init|=
literal|3
block|,
name|MLX5_FLOW_TABLE_TYPE_ESWITCH
init|=
literal|4
block|,
name|MLX5_FLOW_TABLE_TYPE_SNIFFER_RX
init|=
literal|5
block|,
name|MLX5_FLOW_TABLE_TYPE_SNIFFER_TX
init|=
literal|6
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_MODIFY_ESW_VPORT_CONTEXT_CVLAN_INSERT_NONE
init|=
literal|0
block|,
name|MLX5_MODIFY_ESW_VPORT_CONTEXT_CVLAN_INSERT_IF_NO_VLAN
init|=
literal|1
block|,
name|MLX5_MODIFY_ESW_VPORT_CONTEXT_CVLAN_INSERT_OVERWRITE
init|=
literal|2
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_MODIFY_ESW_VPORT_CONTEXT_FIELD_SELECT_SVLAN_STRIP
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_MODIFY_ESW_VPORT_CONTEXT_FIELD_SELECT_CVLAN_STRIP
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_MODIFY_ESW_VPORT_CONTEXT_FIELD_SELECT_SVLAN_INSERT
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX5_MODIFY_ESW_VPORT_CONTEXT_FIELD_SELECT_CVLAN_INSERT
init|=
literal|1
operator|<<
literal|3
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_UC_ADDR_CHANGE
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|MLX5_MC_ADDR_CHANGE
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|MLX5_VLAN_CHANGE
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|MLX5_PROMISC_CHANGE
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|MLX5_MTU_CHANGE
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_list_type
block|{
name|MLX5_NIC_VPORT_LIST_TYPE_UC
init|=
literal|0x0
block|,
name|MLX5_NIC_VPORT_LIST_TYPE_MC
init|=
literal|0x1
block|,
name|MLX5_NIC_VPORT_LIST_TYPE_VLAN
init|=
literal|0x2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_ESW_VPORT_ADMIN_STATE_DOWN
init|=
literal|0x0
block|,
name|MLX5_ESW_VPORT_ADMIN_STATE_UP
init|=
literal|0x1
block|,
name|MLX5_ESW_VPORT_ADMIN_STATE_AUTO
init|=
literal|0x2
block|, }
enum|;
end_enum

begin_comment
comment|/* MLX5 DEV CAPs */
end_comment

begin_comment
comment|/* TODO: EAT.ME */
end_comment

begin_enum
enum|enum
name|mlx5_cap_mode
block|{
name|HCA_CAP_OPMOD_GET_MAX
init|=
literal|0
block|,
name|HCA_CAP_OPMOD_GET_CUR
init|=
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_cap_type
block|{
name|MLX5_CAP_GENERAL
init|=
literal|0
block|,
name|MLX5_CAP_ETHERNET_OFFLOADS
block|,
name|MLX5_CAP_ODP
block|,
name|MLX5_CAP_ATOMIC
block|,
name|MLX5_CAP_ROCE
block|,
name|MLX5_CAP_IPOIB_OFFLOADS
block|,
name|MLX5_CAP_EOIB_OFFLOADS
block|,
name|MLX5_CAP_FLOW_TABLE
block|,
name|MLX5_CAP_ESWITCH_FLOW_TABLE
block|,
name|MLX5_CAP_ESWITCH
block|,
name|MLX5_CAP_SNAPSHOT
block|,
name|MLX5_CAP_VECTOR_CALC
block|,
name|MLX5_CAP_QOS
block|,
name|MLX5_CAP_DEBUG
block|,
comment|/* NUM OF CAP Types */
name|MLX5_CAP_NUM
block|}
enum|;
end_enum

begin_comment
comment|/* GET Dev Caps macros */
end_comment

begin_define
define|#
directive|define
name|MLX5_CAP_GEN
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(cmd_hca_cap, mdev->hca_caps_cur[MLX5_CAP_GENERAL], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_GEN_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(cmd_hca_cap, mdev->hca_caps_max[MLX5_CAP_GENERAL], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ETH
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(per_protocol_networking_offload_caps,\ 		 mdev->hca_caps_cur[MLX5_CAP_ETHERNET_OFFLOADS], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ETH_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(per_protocol_networking_offload_caps,\ 		 mdev->hca_caps_max[MLX5_CAP_ETHERNET_OFFLOADS], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ROCE
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(roce_cap, mdev->hca_caps_cur[MLX5_CAP_ROCE], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ROCE_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(roce_cap, mdev->hca_caps_max[MLX5_CAP_ROCE], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ATOMIC
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(atomic_caps, mdev->hca_caps_cur[MLX5_CAP_ATOMIC], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ATOMIC_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(atomic_caps, mdev->hca_caps_max[MLX5_CAP_ATOMIC], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_FLOWTABLE
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(flow_table_nic_cap, mdev->hca_caps_cur[MLX5_CAP_FLOW_TABLE], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_FLOWTABLE_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(flow_table_nic_cap, mdev->hca_caps_max[MLX5_CAP_FLOW_TABLE], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW_FLOWTABLE
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(flow_table_eswitch_cap, \ 		 mdev->hca_caps_cur[MLX5_CAP_ESWITCH_FLOW_TABLE], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW_FLOWTABLE_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(flow_table_eswitch_cap, \ 		 mdev->hca_caps_max[MLX5_CAP_ESWITCH_FLOW_TABLE], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW_FLOWTABLE_FDB
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_CAP_ESW_FLOWTABLE(mdev, flow_table_properties_nic_esw_fdb.cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW_FLOWTABLE_FDB_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_CAP_ESW_FLOWTABLE_MAX(mdev, flow_table_properties_nic_esw_fdb.cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW_EGRESS_ACL
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_CAP_ESW_FLOWTABLE(mdev, flow_table_properties_esw_acl_egress.cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW_EGRESS_ACL_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_CAP_ESW_FLOWTABLE_MAX(mdev, flow_table_properties_esw_acl_egress.cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW_INGRESS_ACL
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_CAP_ESW_FLOWTABLE(mdev, flow_table_properties_esw_acl_ingress.cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW_INGRESS_ACL_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_CAP_ESW_FLOWTABLE_MAX(mdev, flow_table_properties_esw_acl_ingress.cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(e_switch_cap, \ 		 mdev->hca_caps_cur[MLX5_CAP_ESWITCH], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ESW_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(e_switch_cap, \ 		 mdev->hca_caps_max[MLX5_CAP_ESWITCH], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ODP
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(odp_cap, mdev->hca_caps_cur[MLX5_CAP_ODP], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_ODP_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(odp_cap, mdev->hca_caps_max[MLX5_CAP_ODP], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_SNAPSHOT
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(snapshot_cap, \ 		 mdev->hca_caps_cur[MLX5_CAP_SNAPSHOT], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_SNAPSHOT_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(snapshot_cap, \ 		 mdev->hca_caps_max[MLX5_CAP_SNAPSHOT], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_EOIB_OFFLOADS
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(per_protocol_networking_offload_caps,\ 		 mdev->hca_caps_cur[MLX5_CAP_EOIB_OFFLOADS], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_EOIB_OFFLOADS_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(per_protocol_networking_offload_caps,\ 		 mdev->hca_caps_max[MLX5_CAP_EOIB_OFFLOADS], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_DEBUG
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(debug_cap, \ 		 mdev->hca_caps_cur[MLX5_CAP_DEBUG], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_DEBUG_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(debug_cap, \ 		 mdev->hca_caps_max[MLX5_CAP_DEBUG], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_QOS
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(qos_cap,\ 		 mdev->hca_caps_cur[MLX5_CAP_QOS], cap)
end_define

begin_define
define|#
directive|define
name|MLX5_CAP_QOS_MAX
parameter_list|(
name|mdev
parameter_list|,
name|cap
parameter_list|)
define|\
value|MLX5_GET(qos_cap,\ 		 mdev->hca_caps_max[MLX5_CAP_QOS], cap)
end_define

begin_enum
enum|enum
block|{
name|MLX5_CMD_STAT_OK
init|=
literal|0x0
block|,
name|MLX5_CMD_STAT_INT_ERR
init|=
literal|0x1
block|,
name|MLX5_CMD_STAT_BAD_OP_ERR
init|=
literal|0x2
block|,
name|MLX5_CMD_STAT_BAD_PARAM_ERR
init|=
literal|0x3
block|,
name|MLX5_CMD_STAT_BAD_SYS_STATE_ERR
init|=
literal|0x4
block|,
name|MLX5_CMD_STAT_BAD_RES_ERR
init|=
literal|0x5
block|,
name|MLX5_CMD_STAT_RES_BUSY
init|=
literal|0x6
block|,
name|MLX5_CMD_STAT_LIM_ERR
init|=
literal|0x8
block|,
name|MLX5_CMD_STAT_BAD_RES_STATE_ERR
init|=
literal|0x9
block|,
name|MLX5_CMD_STAT_IX_ERR
init|=
literal|0xa
block|,
name|MLX5_CMD_STAT_NO_RES_ERR
init|=
literal|0xf
block|,
name|MLX5_CMD_STAT_BAD_INP_LEN_ERR
init|=
literal|0x50
block|,
name|MLX5_CMD_STAT_BAD_OUTP_LEN_ERR
init|=
literal|0x51
block|,
name|MLX5_CMD_STAT_BAD_QP_STATE_ERR
init|=
literal|0x10
block|,
name|MLX5_CMD_STAT_BAD_PKT_ERR
init|=
literal|0x30
block|,
name|MLX5_CMD_STAT_BAD_SIZE_OUTS_CQES_ERR
init|=
literal|0x40
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_IEEE_802_3_COUNTERS_GROUP
init|=
literal|0x0
block|,
name|MLX5_RFC_2863_COUNTERS_GROUP
init|=
literal|0x1
block|,
name|MLX5_RFC_2819_COUNTERS_GROUP
init|=
literal|0x2
block|,
name|MLX5_RFC_3635_COUNTERS_GROUP
init|=
literal|0x3
block|,
name|MLX5_ETHERNET_EXTENDED_COUNTERS_GROUP
init|=
literal|0x5
block|,
name|MLX5_ETHERNET_DISCARD_COUNTERS_GROUP
init|=
literal|0x6
block|,
name|MLX5_PER_PRIORITY_COUNTERS_GROUP
init|=
literal|0x10
block|,
name|MLX5_PER_TRAFFIC_CLASS_COUNTERS_GROUP
init|=
literal|0x11
block|,
name|MLX5_PHYSICAL_LAYER_COUNTERS_GROUP
init|=
literal|0x12
block|,
name|MLX5_INFINIBAND_PORT_COUNTERS_GROUP
init|=
literal|0x20
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_PCIE_PERFORMANCE_COUNTERS_GROUP
init|=
literal|0x0
block|,
name|MLX5_PCIE_LANE_COUNTERS_GROUP
init|=
literal|0x1
block|,
name|MLX5_PCIE_TIMERS_AND_STATES_COUNTERS_GROUP
init|=
literal|0x2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_NUM_UUARS_PER_PAGE
init|=
name|MLX5_NON_FP_BF_REGS_PER_PAGE
block|,
name|MLX5_DEF_TOT_UUARS
init|=
literal|8
operator|*
name|MLX5_NUM_UUARS_PER_PAGE
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|NUM_DRIVER_UARS
init|=
literal|4
block|,
name|NUM_LOW_LAT_UUARS
init|=
literal|4
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_CAP_PORT_TYPE_IB
init|=
literal|0x0
block|,
name|MLX5_CAP_PORT_TYPE_ETH
init|=
literal|0x1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_CMD_HCA_CAP_MIN_WQE_INLINE_MODE_L2
init|=
literal|0x0
block|,
name|MLX5_CMD_HCA_CAP_MIN_WQE_INLINE_MODE_VPORT_CONFIG
init|=
literal|0x1
block|,
name|MLX5_CMD_HCA_CAP_MIN_WQE_INLINE_MODE_NOT_REQUIRED
init|=
literal|0x2
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_QUERY_VPORT_STATE_OUT_STATE_FOLLOW
init|=
literal|0x2
block|, }
enum|;
end_enum

begin_function
specifier|static
specifier|inline
name|u16
name|mlx5_to_sw_pkey_sz
parameter_list|(
name|int
name|pkey_sz
parameter_list|)
block|{
if|if
condition|(
name|pkey_sz
operator|>
name|MLX5_MAX_LOG_PKEY_TABLE
condition|)
return|return
literal|0
return|;
return|return
name|MLX5_MIN_PKEY_TABLE_SIZE
operator|<<
name|pkey_sz
return|;
block|}
end_function

begin_struct
struct|struct
name|mlx5_ifc_mcia_reg_bits
block|{
name|u8
name|l
index|[
literal|0x1
index|]
decl_stmt|;
name|u8
name|reserved_0
index|[
literal|0x7
index|]
decl_stmt|;
name|u8
name|module
index|[
literal|0x8
index|]
decl_stmt|;
name|u8
name|reserved_1
index|[
literal|0x8
index|]
decl_stmt|;
name|u8
name|status
index|[
literal|0x8
index|]
decl_stmt|;
name|u8
name|i2c_device_address
index|[
literal|0x8
index|]
decl_stmt|;
name|u8
name|page_number
index|[
literal|0x8
index|]
decl_stmt|;
name|u8
name|device_address
index|[
literal|0x10
index|]
decl_stmt|;
name|u8
name|reserved_2
index|[
literal|0x10
index|]
decl_stmt|;
name|u8
name|size
index|[
literal|0x10
index|]
decl_stmt|;
name|u8
name|reserved_3
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_0
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_1
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_2
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_3
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_4
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_5
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_6
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_7
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_8
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_9
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_10
index|[
literal|0x20
index|]
decl_stmt|;
name|u8
name|dword_11
index|[
literal|0x20
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MLX5_CMD_OP_QUERY_EEPROM
value|0x93c
end_define

begin_struct
struct|struct
name|mlx5_mini_cqe8
block|{
union|union
block|{
name|__be32
name|rx_hash_result
decl_stmt|;
name|__be16
name|checksum
decl_stmt|;
name|__be16
name|rsvd
decl_stmt|;
struct|struct
block|{
name|__be16
name|wqe_counter
decl_stmt|;
name|u8
name|s_wqe_opcode
decl_stmt|;
name|u8
name|reserved
decl_stmt|;
block|}
name|s_wqe_info
struct|;
block|}
union|;
name|__be32
name|byte_cnt
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX5_NO_INLINE_DATA
block|,
name|MLX5_INLINE_DATA32_SEG
block|,
name|MLX5_INLINE_DATA64_SEG
block|,
name|MLX5_COMPRESSED
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_exp_cqe_zip_recv_type
block|{
name|MLX5_CQE_FORMAT_HASH
block|,
name|MLX5_CQE_FORMAT_CSUM
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|MLX5E_CQE_FORMAT_MASK
value|0xc
end_define

begin_function
specifier|static
specifier|inline
name|int
name|mlx5_get_cqe_format
parameter_list|(
specifier|const
name|struct
name|mlx5_cqe64
modifier|*
name|cqe
parameter_list|)
block|{
return|return
operator|(
name|cqe
operator|->
name|op_own
operator|&
name|MLX5E_CQE_FORMAT_MASK
operator|)
operator|>>
literal|2
return|;
block|}
end_function

begin_comment
comment|/* 8 regular priorities + 1 for multicast */
end_comment

begin_define
define|#
directive|define
name|MLX5_NUM_BYPASS_FTS
value|9
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX5_DEVICE_H */
end_comment

end_unit

