begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013-2017, Mellanox Technologies, Ltd.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS `AS IS' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MLX5_FS_CORE_
end_ifndef

begin_define
define|#
directive|define
name|_MLX5_FS_CORE_
end_define

begin_include
include|#
directive|include
file|<asm/atomic.h>
end_include

begin_include
include|#
directive|include
file|<linux/completion.h>
end_include

begin_include
include|#
directive|include
file|<linux/mutex.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx5/fs.h>
end_include

begin_enum
enum|enum
name|fs_type
block|{
name|FS_TYPE_NAMESPACE
block|,
name|FS_TYPE_PRIO
block|,
name|FS_TYPE_FLOW_TABLE
block|,
name|FS_TYPE_FLOW_GROUP
block|,
name|FS_TYPE_FLOW_ENTRY
block|,
name|FS_TYPE_FLOW_DEST
block|}
enum|;
end_enum

begin_enum
enum|enum
name|fs_ft_type
block|{
name|FS_FT_NIC_RX
init|=
literal|0x0
block|,
name|FS_FT_ESW_EGRESS_ACL
init|=
literal|0x2
block|,
name|FS_FT_ESW_INGRESS_ACL
init|=
literal|0x3
block|,
name|FS_FT_FDB
init|=
literal|0X4
block|,
name|FS_FT_SNIFFER_RX
init|=
literal|0x5
block|,
name|FS_FT_SNIFFER_TX
init|=
literal|0x6
block|}
enum|;
end_enum

begin_enum
enum|enum
name|fs_fte_status
block|{
name|FS_FTE_STATUS_EXISTING
init|=
literal|1UL
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_comment
comment|/* Should always be the first variable in the struct */
end_comment

begin_struct
struct|struct
name|fs_base
block|{
name|struct
name|list_head
name|list
decl_stmt|;
name|struct
name|fs_base
modifier|*
name|parent
decl_stmt|;
name|enum
name|fs_type
name|type
decl_stmt|;
name|struct
name|kref
name|refcount
decl_stmt|;
comment|/* lock the node for writing and traversing */
name|struct
name|mutex
name|lock
decl_stmt|;
name|struct
name|completion
name|complete
decl_stmt|;
name|atomic_t
name|users_refcount
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_flow_rule
block|{
name|struct
name|fs_base
name|base
decl_stmt|;
name|struct
name|mlx5_flow_destination
name|dest_attr
decl_stmt|;
name|struct
name|list_head
name|clients_data
decl_stmt|;
comment|/*protect clients lits*/
name|struct
name|mutex
name|clients_lock
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fs_fte
block|{
name|struct
name|fs_base
name|base
decl_stmt|;
name|u32
name|val
index|[
name|MLX5_ST_SZ_DW
argument_list|(
name|fte_match_param
argument_list|)
index|]
decl_stmt|;
name|uint32_t
name|dests_size
decl_stmt|;
name|uint32_t
name|flow_tag
decl_stmt|;
name|struct
name|list_head
name|dests
decl_stmt|;
name|uint32_t
name|index
decl_stmt|;
comment|/* index in ft */
name|u8
name|action
decl_stmt|;
comment|/* MLX5_FLOW_CONTEXT_ACTION */
name|enum
name|fs_fte_status
name|status
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fs_star_rule
block|{
name|struct
name|mlx5_flow_group
modifier|*
name|fg
decl_stmt|;
name|struct
name|fs_fte
modifier|*
name|fte
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_flow_table
block|{
name|struct
name|fs_base
name|base
decl_stmt|;
comment|/* sorted list by start_index */
name|struct
name|list_head
name|fgs
decl_stmt|;
struct|struct
block|{
name|bool
name|active
decl_stmt|;
name|unsigned
name|int
name|max_types
decl_stmt|;
name|unsigned
name|int
name|num_types
decl_stmt|;
block|}
name|autogroup
struct|;
name|unsigned
name|int
name|max_fte
decl_stmt|;
name|unsigned
name|int
name|level
decl_stmt|;
name|uint32_t
name|id
decl_stmt|;
name|u16
name|vport
decl_stmt|;
name|enum
name|fs_ft_type
name|type
decl_stmt|;
name|struct
name|fs_star_rule
name|star_rule
decl_stmt|;
name|unsigned
name|int
name|shared_refcount
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|fs_prio_flags
block|{
name|MLX5_CORE_FS_PRIO_SHARED
init|=
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|fs_prio
block|{
name|struct
name|fs_base
name|base
decl_stmt|;
name|struct
name|list_head
name|objs
decl_stmt|;
comment|/* each object is a namespace or ft */
name|unsigned
name|int
name|max_ft
decl_stmt|;
name|unsigned
name|int
name|num_ft
decl_stmt|;
name|unsigned
name|int
name|max_ns
decl_stmt|;
name|unsigned
name|int
name|prio
decl_stmt|;
comment|/*When create shared flow table, this lock should be taken*/
name|struct
name|mutex
name|shared_lock
decl_stmt|;
name|u8
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_flow_namespace
block|{
comment|/* parent == NULL => root ns */
name|struct
name|fs_base
name|base
decl_stmt|;
comment|/* sorted by priority number */
name|struct
name|list_head
name|prios
decl_stmt|;
comment|/* list of fs_prios */
name|struct
name|list_head
name|list_notifiers
decl_stmt|;
name|struct
name|rw_semaphore
name|notifiers_rw_sem
decl_stmt|;
name|struct
name|rw_semaphore
name|dests_rw_sem
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_flow_root_namespace
block|{
name|struct
name|mlx5_flow_namespace
name|ns
decl_stmt|;
name|struct
name|mlx5_flow_table
modifier|*
name|ft_level_0
decl_stmt|;
name|enum
name|fs_ft_type
name|table_type
decl_stmt|;
name|struct
name|mlx5_core_dev
modifier|*
name|dev
decl_stmt|;
name|struct
name|mlx5_flow_table
modifier|*
name|root_ft
decl_stmt|;
comment|/* When chaining flow-tables, this lock should be taken */
name|struct
name|mutex
name|fs_chain_lock
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_flow_group
block|{
name|struct
name|fs_base
name|base
decl_stmt|;
name|struct
name|list_head
name|ftes
decl_stmt|;
name|struct
name|mlx5_core_fs_mask
name|mask
decl_stmt|;
name|uint32_t
name|start_index
decl_stmt|;
name|uint32_t
name|max_ftes
decl_stmt|;
name|uint32_t
name|num_ftes
decl_stmt|;
name|uint32_t
name|id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_flow_handler
block|{
name|struct
name|list_head
name|list
decl_stmt|;
name|rule_event_fn
name|add_dst_cb
decl_stmt|;
name|rule_event_fn
name|del_dst_cb
decl_stmt|;
name|void
modifier|*
name|client_context
decl_stmt|;
name|struct
name|mlx5_flow_namespace
modifier|*
name|ns
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fs_client_priv_data
block|{
name|struct
name|mlx5_flow_handler
modifier|*
name|fs_handler
decl_stmt|;
name|struct
name|list_head
name|list
decl_stmt|;
name|void
modifier|*
name|client_dst_data
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|_fs_remove_node
parameter_list|(
name|struct
name|kref
modifier|*
name|kref
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|fs_get_obj
parameter_list|(
name|v
parameter_list|,
name|_base
parameter_list|)
value|{v = container_of((_base), typeof(*v), base); }
end_define

begin_define
define|#
directive|define
name|fs_get_parent
parameter_list|(
name|v
parameter_list|,
name|child
parameter_list|)
value|{v = (child)->base.parent ?		     \ 				  container_of((child)->base.parent,	     \ 					       typeof(*v), base) : NULL; }
end_define

begin_define
define|#
directive|define
name|fs_list_for_each_entry
parameter_list|(
name|pos
parameter_list|,
name|cond
parameter_list|,
name|root
parameter_list|)
define|\
value|list_for_each_entry(pos, root, base.list)	\ 		if (!(cond)) {} else
end_define

begin_define
define|#
directive|define
name|fs_list_for_each_entry_continue
parameter_list|(
name|pos
parameter_list|,
name|cond
parameter_list|,
name|root
parameter_list|)
define|\
value|list_for_each_entry_continue(pos, root, base.list)	\ 		if (!(cond)) {} else
end_define

begin_define
define|#
directive|define
name|fs_list_for_each_entry_reverse
parameter_list|(
name|pos
parameter_list|,
name|cond
parameter_list|,
name|root
parameter_list|)
define|\
value|list_for_each_entry_reverse(pos, root, base.list)	\ 		if (!(cond)) {} else
end_define

begin_define
define|#
directive|define
name|fs_list_for_each_entry_continue_reverse
parameter_list|(
name|pos
parameter_list|,
name|cond
parameter_list|,
name|root
parameter_list|)
define|\
value|list_for_each_entry_continue_reverse(pos, root, base.list)	\ 		if (!(cond)) {} else
end_define

begin_define
define|#
directive|define
name|fs_for_each_ft
parameter_list|(
name|pos
parameter_list|,
name|prio
parameter_list|)
define|\
value|fs_list_for_each_entry(pos, (pos)->base.type == FS_TYPE_FLOW_TABLE, \&(prio)->objs)
end_define

begin_define
define|#
directive|define
name|fs_for_each_ft_reverse
parameter_list|(
name|pos
parameter_list|,
name|prio
parameter_list|)
define|\
value|fs_list_for_each_entry_reverse(pos,			\ 				       (pos)->base.type == FS_TYPE_FLOW_TABLE, \&(prio)->objs)
end_define

begin_define
define|#
directive|define
name|fs_for_each_ns
parameter_list|(
name|pos
parameter_list|,
name|prio
parameter_list|)
define|\
value|fs_list_for_each_entry(pos,			\ 			       (pos)->base.type == FS_TYPE_NAMESPACE, \&(prio)->objs)
end_define

begin_define
define|#
directive|define
name|fs_for_each_ns_or_ft_reverse
parameter_list|(
name|pos
parameter_list|,
name|prio
parameter_list|)
define|\
value|list_for_each_entry_reverse(pos,&(prio)->objs, list)		\ 		if (!((pos)->type == FS_TYPE_NAMESPACE ||		\ 		      (pos)->type == FS_TYPE_FLOW_TABLE)) {} else
end_define

begin_define
define|#
directive|define
name|fs_for_each_ns_or_ft
parameter_list|(
name|pos
parameter_list|,
name|prio
parameter_list|)
define|\
value|list_for_each_entry(pos,&(prio)->objs, list)		\ 		if (!((pos)->type == FS_TYPE_NAMESPACE ||	\ 		      (pos)->type == FS_TYPE_FLOW_TABLE)) {} else
end_define

begin_define
define|#
directive|define
name|fs_for_each_ns_or_ft_continue_reverse
parameter_list|(
name|pos
parameter_list|,
name|prio
parameter_list|)
define|\
value|list_for_each_entry_continue_reverse(pos,&(prio)->objs, list)	\ 		if (!((pos)->type == FS_TYPE_NAMESPACE ||		\ 		      (pos)->type == FS_TYPE_FLOW_TABLE)) {} else
end_define

begin_define
define|#
directive|define
name|fs_for_each_ns_or_ft_continue
parameter_list|(
name|pos
parameter_list|,
name|prio
parameter_list|)
define|\
value|list_for_each_entry_continue(pos,&(prio)->objs, list)		\ 		if (!((pos)->type == FS_TYPE_NAMESPACE ||		\ 		      (pos)->type == FS_TYPE_FLOW_TABLE)) {} else
end_define

begin_define
define|#
directive|define
name|fs_for_each_prio
parameter_list|(
name|pos
parameter_list|,
name|ns
parameter_list|)
define|\
value|fs_list_for_each_entry(pos, (pos)->base.type == FS_TYPE_PRIO, \&(ns)->prios)
end_define

begin_define
define|#
directive|define
name|fs_for_each_prio_reverse
parameter_list|(
name|pos
parameter_list|,
name|ns
parameter_list|)
define|\
value|fs_list_for_each_entry_reverse(pos, (pos)->base.type == FS_TYPE_PRIO, \&(ns)->prios)
end_define

begin_define
define|#
directive|define
name|fs_for_each_prio_continue
parameter_list|(
name|pos
parameter_list|,
name|ns
parameter_list|)
define|\
value|fs_list_for_each_entry_continue(pos, (pos)->base.type == FS_TYPE_PRIO, \&(ns)->prios)
end_define

begin_define
define|#
directive|define
name|fs_for_each_prio_continue_reverse
parameter_list|(
name|pos
parameter_list|,
name|ns
parameter_list|)
define|\
value|fs_list_for_each_entry_continue_reverse(pos,			\ 						(pos)->base.type == FS_TYPE_PRIO, \&(ns)->prios)
end_define

begin_define
define|#
directive|define
name|fs_for_each_fg
parameter_list|(
name|pos
parameter_list|,
name|ft
parameter_list|)
define|\
value|fs_list_for_each_entry(pos, (pos)->base.type == FS_TYPE_FLOW_GROUP, \&(ft)->fgs)
end_define

begin_define
define|#
directive|define
name|fs_for_each_fte
parameter_list|(
name|pos
parameter_list|,
name|fg
parameter_list|)
define|\
value|fs_list_for_each_entry(pos, (pos)->base.type == FS_TYPE_FLOW_ENTRY, \&(fg)->ftes)
end_define

begin_define
define|#
directive|define
name|fs_for_each_dst
parameter_list|(
name|pos
parameter_list|,
name|fte
parameter_list|)
define|\
value|fs_list_for_each_entry(pos, (pos)->base.type == FS_TYPE_FLOW_DEST, \&(fte)->dests)
end_define

begin_function_decl
name|int
name|mlx5_cmd_fs_create_ft
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u16
name|vport
parameter_list|,
name|enum
name|fs_ft_type
name|type
parameter_list|,
name|unsigned
name|int
name|level
parameter_list|,
name|unsigned
name|int
name|log_size
parameter_list|,
name|unsigned
name|int
modifier|*
name|table_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_cmd_fs_destroy_ft
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u16
name|vport
parameter_list|,
name|enum
name|fs_ft_type
name|type
parameter_list|,
name|unsigned
name|int
name|table_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_cmd_fs_create_fg
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u32
modifier|*
name|in
parameter_list|,
name|u16
name|vport
parameter_list|,
name|enum
name|fs_ft_type
name|type
parameter_list|,
name|unsigned
name|int
name|table_id
parameter_list|,
name|unsigned
name|int
modifier|*
name|group_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_cmd_fs_destroy_fg
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u16
name|vport
parameter_list|,
name|enum
name|fs_ft_type
name|type
parameter_list|,
name|unsigned
name|int
name|table_id
parameter_list|,
name|unsigned
name|int
name|group_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_cmd_fs_set_fte
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u16
name|vport
parameter_list|,
name|enum
name|fs_fte_status
modifier|*
name|fte_status
parameter_list|,
name|u32
modifier|*
name|match_val
parameter_list|,
name|enum
name|fs_ft_type
name|type
parameter_list|,
name|unsigned
name|int
name|table_id
parameter_list|,
name|unsigned
name|int
name|index
parameter_list|,
name|unsigned
name|int
name|group_id
parameter_list|,
name|unsigned
name|int
name|flow_tag
parameter_list|,
name|unsigned
name|short
name|action
parameter_list|,
name|int
name|dest_size
parameter_list|,
name|struct
name|list_head
modifier|*
name|dests
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* mlx5_flow_desination */
end_comment

begin_function_decl
name|int
name|mlx5_cmd_fs_delete_fte
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u16
name|vport
parameter_list|,
name|enum
name|fs_fte_status
modifier|*
name|fte_status
parameter_list|,
name|enum
name|fs_ft_type
name|type
parameter_list|,
name|unsigned
name|int
name|table_id
parameter_list|,
name|unsigned
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_cmd_update_root_ft
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|fs_ft_type
name|type
parameter_list|,
name|unsigned
name|int
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_init_fs
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_cleanup_fs
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

