begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013-2015, Mellanox Technologies, Ltd.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS `AS IS' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX5_CORE_CQ_H
end_ifndef

begin_define
define|#
directive|define
name|MLX5_CORE_CQ_H
end_define

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx5/driver.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx5/mlx5_ifc.h>
end_include

begin_struct
struct|struct
name|mlx5_core_cq
block|{
name|u32
name|cqn
decl_stmt|;
name|int
name|cqe_sz
decl_stmt|;
name|__be32
modifier|*
name|set_ci_db
decl_stmt|;
name|__be32
modifier|*
name|arm_db
decl_stmt|;
name|atomic_t
name|refcount
decl_stmt|;
name|struct
name|completion
name|free
decl_stmt|;
name|unsigned
name|vector
decl_stmt|;
name|int
name|irqn
decl_stmt|;
name|void
function_decl|(
modifier|*
name|comp
function_decl|)
parameter_list|(
name|struct
name|mlx5_core_cq
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|event
function_decl|)
parameter_list|(
name|struct
name|mlx5_core_cq
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|struct
name|mlx5_uar
modifier|*
name|uar
decl_stmt|;
name|u32
name|cons_index
decl_stmt|;
name|unsigned
name|arm_sn
decl_stmt|;
name|struct
name|mlx5_rsc_debug
modifier|*
name|dbg
decl_stmt|;
name|int
name|pid
decl_stmt|;
name|int
name|reset_notify_added
decl_stmt|;
name|struct
name|list_head
name|reset_notify
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX5_CQE_SYNDROME_LOCAL_LENGTH_ERR
init|=
literal|0x01
block|,
name|MLX5_CQE_SYNDROME_LOCAL_QP_OP_ERR
init|=
literal|0x02
block|,
name|MLX5_CQE_SYNDROME_LOCAL_PROT_ERR
init|=
literal|0x04
block|,
name|MLX5_CQE_SYNDROME_WR_FLUSH_ERR
init|=
literal|0x05
block|,
name|MLX5_CQE_SYNDROME_MW_BIND_ERR
init|=
literal|0x06
block|,
name|MLX5_CQE_SYNDROME_BAD_RESP_ERR
init|=
literal|0x10
block|,
name|MLX5_CQE_SYNDROME_LOCAL_ACCESS_ERR
init|=
literal|0x11
block|,
name|MLX5_CQE_SYNDROME_REMOTE_INVAL_REQ_ERR
init|=
literal|0x12
block|,
name|MLX5_CQE_SYNDROME_REMOTE_ACCESS_ERR
init|=
literal|0x13
block|,
name|MLX5_CQE_SYNDROME_REMOTE_OP_ERR
init|=
literal|0x14
block|,
name|MLX5_CQE_SYNDROME_TRANSPORT_RETRY_EXC_ERR
init|=
literal|0x15
block|,
name|MLX5_CQE_SYNDROME_RNR_RETRY_EXC_ERR
init|=
literal|0x16
block|,
name|MLX5_CQE_SYNDROME_REMOTE_ABORTED_ERR
init|=
literal|0x22
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_CQE_OWNER_MASK
init|=
literal|1
block|,
name|MLX5_CQE_REQ
init|=
literal|0
block|,
name|MLX5_CQE_RESP_WR_IMM
init|=
literal|1
block|,
name|MLX5_CQE_RESP_SEND
init|=
literal|2
block|,
name|MLX5_CQE_RESP_SEND_IMM
init|=
literal|3
block|,
name|MLX5_CQE_RESP_SEND_INV
init|=
literal|4
block|,
name|MLX5_CQE_RESIZE_CQ
init|=
literal|5
block|,
name|MLX5_CQE_SIG_ERR
init|=
literal|12
block|,
name|MLX5_CQE_REQ_ERR
init|=
literal|13
block|,
name|MLX5_CQE_RESP_ERR
init|=
literal|14
block|,
name|MLX5_CQE_INVALID
init|=
literal|15
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_CQ_MODIFY_PERIOD
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_CQ_MODIFY_COUNT
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_CQ_MODIFY_OVERRUN
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_CQ_OPMOD_RESIZE
init|=
literal|1
block|,
name|MLX5_MODIFY_CQ_MASK_LOG_SIZE
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_MODIFY_CQ_MASK_PG_OFFSET
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_MODIFY_CQ_MASK_PG_SIZE
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_cq_modify_params
block|{
name|int
name|type
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|u32
name|page_offset
decl_stmt|;
name|u8
name|log_cq_size
decl_stmt|;
block|}
name|resize
struct|;
struct|struct
block|{ 		}
name|moder
struct|;
struct|struct
block|{ 		}
name|mapping
struct|;
block|}
name|params
union|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|cqe_sz_to_mlx_sz
parameter_list|(
name|u8
name|size
parameter_list|)
block|{
return|return
name|size
operator|==
literal|64
condition|?
name|CQE_SIZE_64
else|:
name|CQE_SIZE_128
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mlx5_cq_set_ci
parameter_list|(
name|struct
name|mlx5_core_cq
modifier|*
name|cq
parameter_list|)
block|{
operator|*
name|cq
operator|->
name|set_ci_db
operator|=
name|cpu_to_be32
argument_list|(
name|cq
operator|->
name|cons_index
operator|&
literal|0xffffff
argument_list|)
expr_stmt|;
block|}
end_function

begin_enum
enum|enum
block|{
name|MLX5_CQ_DB_REQ_NOT_SOL
init|=
literal|1
operator|<<
literal|24
block|,
name|MLX5_CQ_DB_REQ_NOT
init|=
literal|0
operator|<<
literal|24
block|}
enum|;
end_enum

begin_function
specifier|static
specifier|inline
name|void
name|mlx5_cq_arm
parameter_list|(
name|struct
name|mlx5_core_cq
modifier|*
name|cq
parameter_list|,
name|u32
name|cmd
parameter_list|,
name|void
name|__iomem
modifier|*
name|uar_page
parameter_list|,
name|spinlock_t
modifier|*
name|doorbell_lock
parameter_list|,
name|u32
name|cons_index
parameter_list|)
block|{
name|__be32
name|doorbell
index|[
literal|2
index|]
decl_stmt|;
name|u32
name|sn
decl_stmt|;
name|u32
name|ci
decl_stmt|;
name|sn
operator|=
name|cq
operator|->
name|arm_sn
operator|&
literal|3
expr_stmt|;
name|ci
operator|=
name|cons_index
operator|&
literal|0xffffff
expr_stmt|;
operator|*
name|cq
operator|->
name|arm_db
operator|=
name|cpu_to_be32
argument_list|(
name|sn
operator|<<
literal|28
operator||
name|cmd
operator||
name|ci
argument_list|)
expr_stmt|;
comment|/* Make sure that the doorbell record in host memory is 	 * written before ringing the doorbell via PCI MMIO. 	 */
name|wmb
argument_list|()
expr_stmt|;
name|doorbell
index|[
literal|0
index|]
operator|=
name|cpu_to_be32
argument_list|(
name|sn
operator|<<
literal|28
operator||
name|cmd
operator||
name|ci
argument_list|)
expr_stmt|;
name|doorbell
index|[
literal|1
index|]
operator|=
name|cpu_to_be32
argument_list|(
name|cq
operator|->
name|cqn
argument_list|)
expr_stmt|;
name|mlx5_write64
argument_list|(
name|doorbell
argument_list|,
name|uar_page
operator|+
name|MLX5_CQ_DOORBELL
argument_list|,
name|doorbell_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|int
name|mlx5_init_cq_table
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_cleanup_cq_table
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_create_cq
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|mlx5_create_cq_mbox_in
modifier|*
name|in
parameter_list|,
name|int
name|inlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_destroy_cq
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_query_cq
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|mlx5_query_cq_mbox_out
modifier|*
name|out
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_modify_cq
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|mlx5_modify_cq_mbox_in
modifier|*
name|in
parameter_list|,
name|int
name|in_sz
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_modify_cq_moderation
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_cq
modifier|*
name|cq
parameter_list|,
name|u16
name|cq_period
parameter_list|,
name|u16
name|cq_max_count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_debug_cq_add
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_debug_cq_remove
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_cq
modifier|*
name|cq
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX5_CORE_CQ_H */
end_comment

end_unit

