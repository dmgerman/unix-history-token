begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013-2015, Mellanox Technologies, Ltd.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS `AS IS' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX5_QP_H
end_ifndef

begin_define
define|#
directive|define
name|MLX5_QP_H
end_define

begin_include
include|#
directive|include
file|<dev/mlx5/device.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx5/driver.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx5/mlx5_ifc.h>
end_include

begin_define
define|#
directive|define
name|MLX5_INVALID_LKEY
value|0x100
end_define

begin_define
define|#
directive|define
name|MLX5_SIG_WQE_SIZE
value|(MLX5_SEND_WQE_BB * 5)
end_define

begin_define
define|#
directive|define
name|MLX5_DIF_SIZE
value|8
end_define

begin_define
define|#
directive|define
name|MLX5_STRIDE_BLOCK_OP
value|0x400
end_define

begin_define
define|#
directive|define
name|MLX5_CPY_GRD_MASK
value|0xc0
end_define

begin_define
define|#
directive|define
name|MLX5_CPY_APP_MASK
value|0x30
end_define

begin_define
define|#
directive|define
name|MLX5_CPY_REF_MASK
value|0x0f
end_define

begin_define
define|#
directive|define
name|MLX5_BSF_INC_REFTAG
value|(1<< 6)
end_define

begin_define
define|#
directive|define
name|MLX5_BSF_INL_VALID
value|(1<< 15)
end_define

begin_define
define|#
directive|define
name|MLX5_BSF_REFRESH_DIF
value|(1<< 14)
end_define

begin_define
define|#
directive|define
name|MLX5_BSF_REPEAT_BLOCK
value|(1<< 7)
end_define

begin_define
define|#
directive|define
name|MLX5_BSF_APPTAG_ESCAPE
value|0x1
end_define

begin_define
define|#
directive|define
name|MLX5_BSF_APPREF_ESCAPE
value|0x2
end_define

begin_enum
enum|enum
name|mlx5_qp_optpar
block|{
name|MLX5_QP_OPTPAR_ALT_ADDR_PATH
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_QP_OPTPAR_RRE
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_QP_OPTPAR_RAE
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX5_QP_OPTPAR_RWE
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX5_QP_OPTPAR_PKEY_INDEX
init|=
literal|1
operator|<<
literal|4
block|,
name|MLX5_QP_OPTPAR_Q_KEY
init|=
literal|1
operator|<<
literal|5
block|,
name|MLX5_QP_OPTPAR_RNR_TIMEOUT
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX5_QP_OPTPAR_PRIMARY_ADDR_PATH
init|=
literal|1
operator|<<
literal|7
block|,
name|MLX5_QP_OPTPAR_SRA_MAX
init|=
literal|1
operator|<<
literal|8
block|,
name|MLX5_QP_OPTPAR_RRA_MAX
init|=
literal|1
operator|<<
literal|9
block|,
name|MLX5_QP_OPTPAR_PM_STATE
init|=
literal|1
operator|<<
literal|10
block|,
name|MLX5_QP_OPTPAR_RETRY_COUNT
init|=
literal|1
operator|<<
literal|12
block|,
name|MLX5_QP_OPTPAR_RNR_RETRY
init|=
literal|1
operator|<<
literal|13
block|,
name|MLX5_QP_OPTPAR_ACK_TIMEOUT
init|=
literal|1
operator|<<
literal|14
block|,
name|MLX5_QP_OPTPAR_PRI_PORT
init|=
literal|1
operator|<<
literal|16
block|,
name|MLX5_QP_OPTPAR_SRQN
init|=
literal|1
operator|<<
literal|18
block|,
name|MLX5_QP_OPTPAR_CQN_RCV
init|=
literal|1
operator|<<
literal|19
block|,
name|MLX5_QP_OPTPAR_DC_HS
init|=
literal|1
operator|<<
literal|20
block|,
name|MLX5_QP_OPTPAR_DC_KEY
init|=
literal|1
operator|<<
literal|21
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_qp_state
block|{
name|MLX5_QP_STATE_RST
init|=
literal|0
block|,
name|MLX5_QP_STATE_INIT
init|=
literal|1
block|,
name|MLX5_QP_STATE_RTR
init|=
literal|2
block|,
name|MLX5_QP_STATE_RTS
init|=
literal|3
block|,
name|MLX5_QP_STATE_SQER
init|=
literal|4
block|,
name|MLX5_QP_STATE_SQD
init|=
literal|5
block|,
name|MLX5_QP_STATE_ERR
init|=
literal|6
block|,
name|MLX5_QP_STATE_SQ_DRAINING
init|=
literal|7
block|,
name|MLX5_QP_STATE_SUSPENDED
init|=
literal|9
block|,
name|MLX5_QP_NUM_STATE
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_QP_ST_RC
init|=
literal|0x0
block|,
name|MLX5_QP_ST_UC
init|=
literal|0x1
block|,
name|MLX5_QP_ST_UD
init|=
literal|0x2
block|,
name|MLX5_QP_ST_XRC
init|=
literal|0x3
block|,
name|MLX5_QP_ST_MLX
init|=
literal|0x4
block|,
name|MLX5_QP_ST_DCI
init|=
literal|0x5
block|,
name|MLX5_QP_ST_DCT
init|=
literal|0x6
block|,
name|MLX5_QP_ST_QP0
init|=
literal|0x7
block|,
name|MLX5_QP_ST_QP1
init|=
literal|0x8
block|,
name|MLX5_QP_ST_RAW_ETHERTYPE
init|=
literal|0x9
block|,
name|MLX5_QP_ST_RAW_IPV6
init|=
literal|0xa
block|,
name|MLX5_QP_ST_SNIFFER
init|=
literal|0xb
block|,
name|MLX5_QP_ST_SYNC_UMR
init|=
literal|0xe
block|,
name|MLX5_QP_ST_PTP_1588
init|=
literal|0xd
block|,
name|MLX5_QP_ST_REG_UMR
init|=
literal|0xc
block|,
name|MLX5_QP_ST_MAX
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_NON_ZERO_RQ
init|=
literal|0
operator|<<
literal|24
block|,
name|MLX5_SRQ_RQ
init|=
literal|1
operator|<<
literal|24
block|,
name|MLX5_CRQ_RQ
init|=
literal|2
operator|<<
literal|24
block|,
name|MLX5_ZERO_LEN_RQ
init|=
literal|3
operator|<<
literal|24
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
comment|/* params1 */
name|MLX5_QP_BIT_SRE
init|=
literal|1
operator|<<
literal|15
block|,
name|MLX5_QP_BIT_SWE
init|=
literal|1
operator|<<
literal|14
block|,
name|MLX5_QP_BIT_SAE
init|=
literal|1
operator|<<
literal|13
block|,
comment|/* params2 */
name|MLX5_QP_BIT_RRE
init|=
literal|1
operator|<<
literal|15
block|,
name|MLX5_QP_BIT_RWE
init|=
literal|1
operator|<<
literal|14
block|,
name|MLX5_QP_BIT_RAE
init|=
literal|1
operator|<<
literal|13
block|,
name|MLX5_QP_BIT_RIC
init|=
literal|1
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_WQE_CTRL_CQ_UPDATE
init|=
literal|2
operator|<<
literal|2
block|,
name|MLX5_WQE_CTRL_CQ_UPDATE_AND_EQE
init|=
literal|3
operator|<<
literal|2
block|,
name|MLX5_WQE_CTRL_SOLICITED
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_SEND_WQE_DS
init|=
literal|16
block|,
name|MLX5_SEND_WQE_BB
init|=
literal|64
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|MLX5_SEND_WQEBB_NUM_DS
value|(MLX5_SEND_WQE_BB / MLX5_SEND_WQE_DS)
end_define

begin_enum
enum|enum
block|{
name|MLX5_SEND_WQE_MAX_WQEBBS
init|=
literal|16
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_WQE_FMR_PERM_LOCAL_READ
init|=
literal|1
operator|<<
literal|27
block|,
name|MLX5_WQE_FMR_PERM_LOCAL_WRITE
init|=
literal|1
operator|<<
literal|28
block|,
name|MLX5_WQE_FMR_PERM_REMOTE_READ
init|=
literal|1
operator|<<
literal|29
block|,
name|MLX5_WQE_FMR_PERM_REMOTE_WRITE
init|=
literal|1
operator|<<
literal|30
block|,
name|MLX5_WQE_FMR_PERM_ATOMIC
init|=
literal|1
operator|<<
literal|31
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_FENCE_MODE_NONE
init|=
literal|0
operator|<<
literal|5
block|,
name|MLX5_FENCE_MODE_INITIATOR_SMALL
init|=
literal|1
operator|<<
literal|5
block|,
name|MLX5_FENCE_MODE_STRONG_ORDERING
init|=
literal|3
operator|<<
literal|5
block|,
name|MLX5_FENCE_MODE_SMALL_AND_FENCE
init|=
literal|4
operator|<<
literal|5
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_QP_LAT_SENSITIVE
init|=
literal|1
operator|<<
literal|28
block|,
name|MLX5_QP_BLOCK_MCAST
init|=
literal|1
operator|<<
literal|30
block|,
name|MLX5_QP_ENABLE_SIG
init|=
literal|1
operator|<<
literal|31
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_RCV_DBR
init|=
literal|0
block|,
name|MLX5_SND_DBR
init|=
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_FLAGS_INLINE
init|=
literal|1
operator|<<
literal|7
block|,
name|MLX5_FLAGS_CHECK_FREE
init|=
literal|1
operator|<<
literal|5
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_wqe_fmr_seg
block|{
name|__be32
name|flags
decl_stmt|;
name|__be32
name|mem_key
decl_stmt|;
name|__be64
name|buf_list
decl_stmt|;
name|__be64
name|start_addr
decl_stmt|;
name|__be64
name|reg_len
decl_stmt|;
name|__be32
name|offset
decl_stmt|;
name|__be32
name|page_size
decl_stmt|;
name|u32
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_ctrl_seg
block|{
name|__be32
name|opmod_idx_opcode
decl_stmt|;
name|__be32
name|qpn_ds
decl_stmt|;
name|u8
name|signature
decl_stmt|;
name|u8
name|rsvd
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|fm_ce_se
decl_stmt|;
name|__be32
name|imm
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX5_ETH_WQE_L3_INNER_CSUM
init|=
literal|1
operator|<<
literal|4
block|,
name|MLX5_ETH_WQE_L4_INNER_CSUM
init|=
literal|1
operator|<<
literal|5
block|,
name|MLX5_ETH_WQE_L3_CSUM
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX5_ETH_WQE_L4_CSUM
init|=
literal|1
operator|<<
literal|7
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_wqe_eth_seg
block|{
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
name|u8
name|cs_flags
decl_stmt|;
name|u8
name|rsvd1
decl_stmt|;
name|__be16
name|mss
decl_stmt|;
name|__be32
name|rsvd2
decl_stmt|;
name|__be16
name|inline_hdr_sz
decl_stmt|;
name|u8
name|inline_hdr_start
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_xrc_seg
block|{
name|__be32
name|xrc_srqn
decl_stmt|;
name|u8
name|rsvd
index|[
literal|12
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_masked_atomic_seg
block|{
name|__be64
name|swap_add
decl_stmt|;
name|__be64
name|compare
decl_stmt|;
name|__be64
name|swap_add_mask
decl_stmt|;
name|__be64
name|compare_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_av
block|{
union|union
block|{
struct|struct
block|{
name|__be32
name|qkey
decl_stmt|;
name|__be32
name|reserved
decl_stmt|;
block|}
name|qkey
struct|;
name|__be64
name|dc_key
decl_stmt|;
block|}
name|key
union|;
name|__be32
name|dqp_dct
decl_stmt|;
name|u8
name|stat_rate_sl
decl_stmt|;
name|u8
name|fl_mlid
decl_stmt|;
union|union
block|{
name|__be16
name|rlid
decl_stmt|;
name|__be16
name|udp_sport
decl_stmt|;
block|}
union|;
name|u8
name|reserved0
index|[
literal|4
index|]
decl_stmt|;
name|u8
name|rmac
index|[
literal|6
index|]
decl_stmt|;
name|u8
name|tclass
decl_stmt|;
name|u8
name|hop_limit
decl_stmt|;
name|__be32
name|grh_gid_fl
decl_stmt|;
name|u8
name|rgid
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_datagram_seg
block|{
name|struct
name|mlx5_av
name|av
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_raddr_seg
block|{
name|__be64
name|raddr
decl_stmt|;
name|__be32
name|rkey
decl_stmt|;
name|u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_atomic_seg
block|{
name|__be64
name|swap_add
decl_stmt|;
name|__be64
name|compare
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_data_seg
block|{
name|__be32
name|byte_count
decl_stmt|;
name|__be32
name|lkey
decl_stmt|;
name|__be64
name|addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_umr_ctrl_seg
block|{
name|u8
name|flags
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|3
index|]
decl_stmt|;
name|__be16
name|klm_octowords
decl_stmt|;
name|__be16
name|bsf_octowords
decl_stmt|;
name|__be64
name|mkey_mask
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_seg_set_psv
block|{
name|__be32
name|psv_num
decl_stmt|;
name|__be16
name|syndrome
decl_stmt|;
name|__be16
name|status
decl_stmt|;
name|__be32
name|transient_sig
decl_stmt|;
name|__be32
name|ref_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_seg_get_psv
block|{
name|u8
name|rsvd
index|[
literal|19
index|]
decl_stmt|;
name|u8
name|num_psv
decl_stmt|;
name|__be32
name|l_key
decl_stmt|;
name|__be64
name|va
decl_stmt|;
name|__be32
name|psv_index
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_seg_check_psv
block|{
name|u8
name|rsvd0
index|[
literal|2
index|]
decl_stmt|;
name|__be16
name|err_coalescing_op
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|2
index|]
decl_stmt|;
name|__be16
name|xport_err_op
decl_stmt|;
name|u8
name|rsvd2
index|[
literal|2
index|]
decl_stmt|;
name|__be16
name|xport_err_mask
decl_stmt|;
name|u8
name|rsvd3
index|[
literal|7
index|]
decl_stmt|;
name|u8
name|num_psv
decl_stmt|;
name|__be32
name|l_key
decl_stmt|;
name|__be64
name|va
decl_stmt|;
name|__be32
name|psv_index
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_rwqe_sig
block|{
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
name|u8
name|signature
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|11
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_signature_seg
block|{
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
name|u8
name|signature
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|11
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_wqe_inline_seg
block|{
name|__be32
name|byte_count
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx5_sig_type
block|{
name|MLX5_DIF_CRC
init|=
literal|0x1
block|,
name|MLX5_DIF_IPCS
init|=
literal|0x2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_bsf_inl
block|{
name|__be16
name|vld_refresh
decl_stmt|;
name|__be16
name|dif_apptag
decl_stmt|;
name|__be32
name|dif_reftag
decl_stmt|;
name|u8
name|sig_type
decl_stmt|;
name|u8
name|rp_inv_seed
decl_stmt|;
name|u8
name|rsvd
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|dif_inc_ref_guard_check
decl_stmt|;
name|__be16
name|dif_app_bitmask_check
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_bsf
block|{
struct|struct
name|mlx5_bsf_basic
block|{
name|u8
name|bsf_size_sbs
decl_stmt|;
name|u8
name|check_byte_mask
decl_stmt|;
union|union
block|{
name|u8
name|copy_byte_mask
decl_stmt|;
name|u8
name|bs_selector
decl_stmt|;
name|u8
name|rsvd_wflags
decl_stmt|;
block|}
name|wire
union|;
union|union
block|{
name|u8
name|bs_selector
decl_stmt|;
name|u8
name|rsvd_mflags
decl_stmt|;
block|}
name|mem
union|;
name|__be32
name|raw_data_size
decl_stmt|;
name|__be32
name|w_bfs_psv
decl_stmt|;
name|__be32
name|m_bfs_psv
decl_stmt|;
block|}
name|basic
struct|;
struct|struct
name|mlx5_bsf_ext
block|{
name|__be32
name|t_init_gen_pro_size
decl_stmt|;
name|__be32
name|rsvd_epi_size
decl_stmt|;
name|__be32
name|w_tfs_psv
decl_stmt|;
name|__be32
name|m_tfs_psv
decl_stmt|;
block|}
name|ext
struct|;
name|struct
name|mlx5_bsf_inl
name|w_inl
decl_stmt|;
name|struct
name|mlx5_bsf_inl
name|m_inl
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_klm
block|{
name|__be32
name|bcount
decl_stmt|;
name|__be32
name|key
decl_stmt|;
name|__be64
name|va
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_stride_block_entry
block|{
name|__be16
name|stride
decl_stmt|;
name|__be16
name|bcount
decl_stmt|;
name|__be32
name|key
decl_stmt|;
name|__be64
name|va
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_stride_block_ctrl_seg
block|{
name|__be32
name|bcount_per_cycle
decl_stmt|;
name|__be32
name|op
decl_stmt|;
name|__be32
name|repeat_count
decl_stmt|;
name|u16
name|rsvd
decl_stmt|;
name|__be16
name|num_entries
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_core_qp
block|{
name|struct
name|mlx5_core_rsc_common
name|common
decl_stmt|;
comment|/* must be first */
name|void
function_decl|(
modifier|*
name|event
function_decl|)
parameter_list|(
name|struct
name|mlx5_core_qp
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|qpn
decl_stmt|;
name|struct
name|mlx5_rsc_debug
modifier|*
name|dbg
decl_stmt|;
name|int
name|pid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_qp_path
block|{
name|u8
name|fl_free_ar
decl_stmt|;
name|u8
name|rsvd3
decl_stmt|;
name|__be16
name|pkey_index
decl_stmt|;
name|u8
name|rsvd0
decl_stmt|;
name|u8
name|grh_mlid
decl_stmt|;
name|__be16
name|rlid
decl_stmt|;
name|u8
name|ackto_lt
decl_stmt|;
name|u8
name|mgid_index
decl_stmt|;
name|u8
name|static_rate
decl_stmt|;
name|u8
name|hop_limit
decl_stmt|;
name|__be32
name|tclass_flowlabel
decl_stmt|;
union|union
block|{
name|u8
name|rgid
index|[
literal|16
index|]
decl_stmt|;
name|u8
name|rip
index|[
literal|16
index|]
decl_stmt|;
block|}
union|;
name|u8
name|f_dscp_ecn_prio
decl_stmt|;
name|u8
name|ecn_dscp
decl_stmt|;
name|__be16
name|udp_sport
decl_stmt|;
name|u8
name|dci_cfi_prio_sl
decl_stmt|;
name|u8
name|port
decl_stmt|;
name|u8
name|rmac
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_qp_context
block|{
name|__be32
name|flags
decl_stmt|;
name|__be32
name|flags_pd
decl_stmt|;
name|u8
name|mtu_msgmax
decl_stmt|;
name|u8
name|rq_size_stride
decl_stmt|;
name|__be16
name|sq_crq_size
decl_stmt|;
name|__be32
name|qp_counter_set_usr_page
decl_stmt|;
name|__be32
name|wire_qpn
decl_stmt|;
name|__be32
name|log_pg_sz_remote_qpn
decl_stmt|;
name|struct
name|mlx5_qp_path
name|pri_path
decl_stmt|;
name|struct
name|mlx5_qp_path
name|alt_path
decl_stmt|;
name|__be32
name|params1
decl_stmt|;
name|u8
name|reserved2
index|[
literal|4
index|]
decl_stmt|;
name|__be32
name|next_send_psn
decl_stmt|;
name|__be32
name|cqn_send
decl_stmt|;
name|u8
name|reserved3
index|[
literal|8
index|]
decl_stmt|;
name|__be32
name|last_acked_psn
decl_stmt|;
name|__be32
name|ssn
decl_stmt|;
name|__be32
name|params2
decl_stmt|;
name|__be32
name|rnr_nextrecvpsn
decl_stmt|;
name|__be32
name|xrcd
decl_stmt|;
name|__be32
name|cqn_recv
decl_stmt|;
name|__be64
name|db_rec_addr
decl_stmt|;
name|__be32
name|qkey
decl_stmt|;
name|__be32
name|rq_type_srqn
decl_stmt|;
name|__be32
name|rmsn
decl_stmt|;
name|__be16
name|hw_sq_wqe_counter
decl_stmt|;
name|__be16
name|sw_sq_wqe_counter
decl_stmt|;
name|__be16
name|hw_rcyclic_byte_counter
decl_stmt|;
name|__be16
name|hw_rq_counter
decl_stmt|;
name|__be16
name|sw_rcyclic_byte_counter
decl_stmt|;
name|__be16
name|sw_rq_counter
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|5
index|]
decl_stmt|;
name|u8
name|cgs
decl_stmt|;
name|u8
name|cs_req
decl_stmt|;
name|u8
name|cs_res
decl_stmt|;
name|__be64
name|dc_access_key
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|24
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_qp_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|input_qpn
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
name|__be32
name|opt_param_mask
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|mlx5_qp_context
name|ctx
decl_stmt|;
name|u8
name|rsvd3
index|[
literal|16
index|]
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_create_qp_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|qpn
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_destroy_qp_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|qpn
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_destroy_qp_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_modify_qp_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|qpn
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|4
index|]
decl_stmt|;
name|__be32
name|optparam
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|mlx5_qp_context
name|ctx
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_modify_qp_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_qp_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|qpn
decl_stmt|;
name|u8
name|rsvd
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_query_qp_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd1
index|[
literal|8
index|]
decl_stmt|;
name|__be32
name|optparam
decl_stmt|;
name|u8
name|rsvd0
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|mlx5_qp_context
name|ctx
decl_stmt|;
name|u8
name|rsvd2
index|[
literal|16
index|]
decl_stmt|;
name|__be64
name|pas
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_conf_sqp_mbox_in
block|{
name|struct
name|mlx5_inbox_hdr
name|hdr
decl_stmt|;
name|__be32
name|qpn
decl_stmt|;
name|u8
name|rsvd
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_conf_sqp_mbox_out
block|{
name|struct
name|mlx5_outbox_hdr
name|hdr
decl_stmt|;
name|u8
name|rsvd
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|struct
name|mlx5_core_qp
modifier|*
name|__mlx5_qp_lookup
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|qpn
parameter_list|)
block|{
return|return
name|radix_tree_lookup
argument_list|(
operator|&
name|dev
operator|->
name|priv
operator|.
name|qp_table
operator|.
name|tree
argument_list|,
name|qpn
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mlx5_core_mr
modifier|*
name|__mlx5_mr_lookup
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|key
parameter_list|)
block|{
return|return
name|radix_tree_lookup
argument_list|(
operator|&
name|dev
operator|->
name|priv
operator|.
name|mr_table
operator|.
name|tree
argument_list|,
name|key
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|int
name|mlx5_core_create_qp
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|mlx5_create_qp_mbox_in
modifier|*
name|in
parameter_list|,
name|int
name|inlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_qp_modify
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|mlx5_qp_state
name|cur_state
parameter_list|,
name|enum
name|mlx5_qp_state
name|new_state
parameter_list|,
name|struct
name|mlx5_modify_qp_mbox_in
modifier|*
name|in
parameter_list|,
name|int
name|sqd_event
parameter_list|,
name|struct
name|mlx5_core_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_destroy_qp
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_qp_query
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|mlx5_query_qp_mbox_out
modifier|*
name|out
parameter_list|,
name|int
name|outlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_xrcd_alloc
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u32
modifier|*
name|xrcdn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_core_xrcd_dealloc
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|xrcdn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_init_qp_table
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_cleanup_qp_table
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_debug_qp_add
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_debug_qp_remove
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx5_core_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|mlx5_qp_type_str
parameter_list|(
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|MLX5_QP_ST_RC
case|:
return|return
literal|"RC"
return|;
case|case
name|MLX5_QP_ST_UC
case|:
return|return
literal|"C"
return|;
case|case
name|MLX5_QP_ST_UD
case|:
return|return
literal|"UD"
return|;
case|case
name|MLX5_QP_ST_XRC
case|:
return|return
literal|"XRC"
return|;
case|case
name|MLX5_QP_ST_MLX
case|:
return|return
literal|"MLX"
return|;
case|case
name|MLX5_QP_ST_QP0
case|:
return|return
literal|"QP0"
return|;
case|case
name|MLX5_QP_ST_QP1
case|:
return|return
literal|"QP1"
return|;
case|case
name|MLX5_QP_ST_RAW_ETHERTYPE
case|:
return|return
literal|"RAW_ETHERTYPE"
return|;
case|case
name|MLX5_QP_ST_RAW_IPV6
case|:
return|return
literal|"RAW_IPV6"
return|;
case|case
name|MLX5_QP_ST_SNIFFER
case|:
return|return
literal|"SNIFFER"
return|;
case|case
name|MLX5_QP_ST_SYNC_UMR
case|:
return|return
literal|"SYNC_UMR"
return|;
case|case
name|MLX5_QP_ST_PTP_1588
case|:
return|return
literal|"PTP_1588"
return|;
case|case
name|MLX5_QP_ST_REG_UMR
case|:
return|return
literal|"REG_UMR"
return|;
default|default:
return|return
literal|"Invalid transport type"
return|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|mlx5_qp_state_str
parameter_list|(
name|int
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|MLX5_QP_STATE_RST
case|:
return|return
literal|"RST"
return|;
case|case
name|MLX5_QP_STATE_INIT
case|:
return|return
literal|"INIT"
return|;
case|case
name|MLX5_QP_STATE_RTR
case|:
return|return
literal|"RTR"
return|;
case|case
name|MLX5_QP_STATE_RTS
case|:
return|return
literal|"RTS"
return|;
case|case
name|MLX5_QP_STATE_SQER
case|:
return|return
literal|"SQER"
return|;
case|case
name|MLX5_QP_STATE_SQD
case|:
return|return
literal|"SQD"
return|;
case|case
name|MLX5_QP_STATE_ERR
case|:
return|return
literal|"ERR"
return|;
case|case
name|MLX5_QP_STATE_SQ_DRAINING
case|:
return|return
literal|"SQ_DRAINING"
return|;
case|case
name|MLX5_QP_STATE_SUSPENDED
case|:
return|return
literal|"SUSPENDED"
return|;
default|default:
return|return
literal|"Invalid QP state"
return|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX5_QP_H */
end_comment

end_unit

