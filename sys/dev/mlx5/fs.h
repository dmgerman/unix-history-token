begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013-2017, Mellanox Technologies, Ltd.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS `AS IS' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MLX5_FS_
end_ifndef

begin_define
define|#
directive|define
name|_MLX5_FS_
end_define

begin_include
include|#
directive|include
file|<linux/list.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx5/mlx5_ifc.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx5/device.h>
end_include

begin_include
include|#
directive|include
file|<dev/mlx5/driver.h>
end_include

begin_enum
enum|enum
block|{
name|MLX5_FLOW_CONTEXT_ACTION_FWD_NEXT_PRIO
init|=
literal|1
operator|<<
literal|16
block|, }
enum|;
end_enum

begin_comment
comment|/*Flow tag*/
end_comment

begin_enum
enum|enum
block|{
name|MLX5_FS_DEFAULT_FLOW_TAG
init|=
literal|0xFFFFFF
block|,
name|MLX5_FS_ETH_FLOW_TAG
init|=
literal|0xFFFFFE
block|,
name|MLX5_FS_SNIFFER_FLOW_TAG
init|=
literal|0xFFFFFD
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_FS_FLOW_TAG_MASK
init|=
literal|0xFFFFFF
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|FS_MAX_TYPES
value|10
end_define

begin_define
define|#
directive|define
name|FS_MAX_ENTRIES
value|32000U
end_define

begin_enum
enum|enum
name|mlx5_flow_namespace_type
block|{
name|MLX5_FLOW_NAMESPACE_BYPASS
block|,
name|MLX5_FLOW_NAMESPACE_KERNEL
block|,
name|MLX5_FLOW_NAMESPACE_LEFTOVERS
block|,
name|MLX5_FLOW_NAMESPACE_SNIFFER_RX
block|,
name|MLX5_FLOW_NAMESPACE_SNIFFER_TX
block|,
name|MLX5_FLOW_NAMESPACE_FDB
block|,
name|MLX5_FLOW_NAMESPACE_ESW_EGRESS
block|,
name|MLX5_FLOW_NAMESPACE_ESW_INGRESS
block|, }
enum|;
end_enum

begin_struct_decl
struct_decl|struct
name|mlx5_flow_table
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mlx5_flow_group
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mlx5_flow_rule
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mlx5_flow_namespace
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|mlx5_flow_spec
block|{
name|u8
name|match_criteria_enable
decl_stmt|;
name|u32
name|match_criteria
index|[
name|MLX5_ST_SZ_DW
argument_list|(
name|fte_match_param
argument_list|)
index|]
decl_stmt|;
name|u32
name|match_value
index|[
name|MLX5_ST_SZ_DW
argument_list|(
name|fte_match_param
argument_list|)
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_flow_destination
block|{
name|u32
name|type
decl_stmt|;
union|union
block|{
name|u32
name|tir_num
decl_stmt|;
name|struct
name|mlx5_flow_table
modifier|*
name|ft
decl_stmt|;
name|u32
name|vport_num
decl_stmt|;
block|}
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|FT_NAME_STR_SZ
value|20
end_define

begin_define
define|#
directive|define
name|LEFTOVERS_RULE_NUM
value|2
end_define

begin_function
specifier|static
specifier|inline
name|void
name|build_leftovers_ft_param
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|unsigned
name|int
modifier|*
name|priority
parameter_list|,
name|int
modifier|*
name|n_ent
parameter_list|,
name|int
modifier|*
name|n_grp
parameter_list|)
block|{
name|snprintf
argument_list|(
name|name
argument_list|,
name|FT_NAME_STR_SZ
argument_list|,
literal|"leftovers"
argument_list|)
expr_stmt|;
operator|*
name|priority
operator|=
literal|0
expr_stmt|;
comment|/*Priority of leftovers_prio-0*/
operator|*
name|n_ent
operator|=
name|LEFTOVERS_RULE_NUM
operator|+
literal|1
expr_stmt|;
comment|/*1: star rules*/
operator|*
name|n_grp
operator|=
name|LEFTOVERS_RULE_NUM
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|outer_header_zero
parameter_list|(
name|u32
modifier|*
name|match_criteria
parameter_list|)
block|{
name|int
name|size
init|=
name|MLX5_ST_SZ_BYTES
argument_list|(
name|fte_match_param
argument_list|)
decl_stmt|;
name|char
modifier|*
name|outer_headers_c
init|=
name|MLX5_ADDR_OF
argument_list|(
name|fte_match_param
argument_list|,
name|match_criteria
argument_list|,
name|outer_headers
argument_list|)
decl_stmt|;
return|return
name|outer_headers_c
index|[
literal|0
index|]
operator|==
literal|0
operator|&&
operator|!
name|memcmp
argument_list|(
name|outer_headers_c
argument_list|,
name|outer_headers_c
operator|+
literal|1
argument_list|,
name|size
operator|-
literal|1
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|struct
name|mlx5_flow_namespace
modifier|*
name|mlx5_get_flow_namespace
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|mlx5_flow_namespace_type
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* The underlying implementation create two more entries for  * chaining flow tables. the user should be aware that if he pass  * max_num_ftes as 2^N it will result in doubled size flow table  */
end_comment

begin_function_decl
name|struct
name|mlx5_flow_table
modifier|*
name|mlx5_create_auto_grouped_flow_table
parameter_list|(
name|struct
name|mlx5_flow_namespace
modifier|*
name|ns
parameter_list|,
name|int
name|prio
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|num_flow_table_entries
parameter_list|,
name|int
name|max_num_groups
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mlx5_flow_table
modifier|*
name|mlx5_create_vport_flow_table
parameter_list|(
name|struct
name|mlx5_flow_namespace
modifier|*
name|ns
parameter_list|,
name|u16
name|vport
parameter_list|,
name|int
name|prio
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|num_flow_table_entries
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mlx5_flow_table
modifier|*
name|mlx5_create_flow_table
parameter_list|(
name|struct
name|mlx5_flow_namespace
modifier|*
name|ns
parameter_list|,
name|int
name|prio
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|num_flow_table_entries
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_destroy_flow_table
parameter_list|(
name|struct
name|mlx5_flow_table
modifier|*
name|ft
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* inbox should be set with the following values:  * start_flow_index  * end_flow_index  * match_criteria_enable  * match_criteria  */
end_comment

begin_function_decl
name|struct
name|mlx5_flow_group
modifier|*
name|mlx5_create_flow_group
parameter_list|(
name|struct
name|mlx5_flow_table
modifier|*
name|ft
parameter_list|,
name|u32
modifier|*
name|in
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_destroy_flow_group
parameter_list|(
name|struct
name|mlx5_flow_group
modifier|*
name|fg
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Single destination per rule.  * Group ID is implied by the match criteria.  */
end_comment

begin_function_decl
name|struct
name|mlx5_flow_rule
modifier|*
name|mlx5_add_flow_rule
parameter_list|(
name|struct
name|mlx5_flow_table
modifier|*
name|ft
parameter_list|,
name|u8
name|match_criteria_enable
parameter_list|,
name|u32
modifier|*
name|match_criteria
parameter_list|,
name|u32
modifier|*
name|match_value
parameter_list|,
name|u32
name|action
parameter_list|,
name|u32
name|flow_tag
parameter_list|,
name|struct
name|mlx5_flow_destination
modifier|*
name|dest
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_del_flow_rule
parameter_list|(
name|struct
name|mlx5_flow_rule
modifier|*
name|fr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*The following API is for sniffer*/
end_comment

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|rule_event_fn
function_decl|)
parameter_list|(
name|struct
name|mlx5_flow_rule
modifier|*
name|rule
parameter_list|,
name|bool
name|ctx_changed
parameter_list|,
name|void
modifier|*
name|client_data
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_typedef

begin_struct_decl
struct_decl|struct
name|mlx5_flow_handler
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|flow_client_priv_data
struct_decl|;
end_struct_decl

begin_function_decl
name|void
name|mlx5e_sniffer_roce_mode_notify
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|mdev
parameter_list|,
name|int
name|action
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx5_set_rule_private_data
parameter_list|(
name|struct
name|mlx5_flow_rule
modifier|*
name|rule
parameter_list|,
name|struct
name|mlx5_flow_handler
modifier|*
name|handler
parameter_list|,
name|void
modifier|*
name|client_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mlx5_flow_handler
modifier|*
name|mlx5_register_rule_notifier
parameter_list|(
name|struct
name|mlx5_core_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|mlx5_flow_namespace_type
name|ns_type
parameter_list|,
name|rule_event_fn
name|add_cb
parameter_list|,
name|rule_event_fn
name|del_cb
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_unregister_rule_notifier
parameter_list|(
name|struct
name|mlx5_flow_handler
modifier|*
name|handler
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_flow_iterate_existing_rules
parameter_list|(
name|struct
name|mlx5_flow_namespace
modifier|*
name|ns
parameter_list|,
name|rule_event_fn
name|cb
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_get_match_criteria
parameter_list|(
name|u32
modifier|*
name|match_criteria
parameter_list|,
name|struct
name|mlx5_flow_rule
modifier|*
name|rule
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_get_match_value
parameter_list|(
name|u32
modifier|*
name|match_value
parameter_list|,
name|struct
name|mlx5_flow_rule
modifier|*
name|rule
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u8
name|mlx5_get_match_criteria_enable
parameter_list|(
name|struct
name|mlx5_flow_rule
modifier|*
name|rule
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mlx5_flow_rules_list
modifier|*
name|get_roce_flow_rules
parameter_list|(
name|u8
name|roce_mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx5_del_flow_rules_list
parameter_list|(
name|struct
name|mlx5_flow_rules_list
modifier|*
name|rules_list
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|mlx5_flow_rules_list
block|{
name|struct
name|list_head
name|head
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_flow_rule_node
block|{
name|struct
name|list_head
name|list
decl_stmt|;
name|u32
name|match_criteria
index|[
name|MLX5_ST_SZ_DW
argument_list|(
name|fte_match_param
argument_list|)
index|]
decl_stmt|;
name|u32
name|match_value
index|[
name|MLX5_ST_SZ_DW
argument_list|(
name|fte_match_param
argument_list|)
index|]
decl_stmt|;
name|u8
name|match_criteria_enable
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_core_fs_mask
block|{
name|u8
name|match_criteria_enable
decl_stmt|;
name|u32
name|match_criteria
index|[
name|MLX5_ST_SZ_DW
argument_list|(
name|fte_match_param
argument_list|)
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|bool
name|fs_match_exact_val
parameter_list|(
name|struct
name|mlx5_core_fs_mask
modifier|*
name|mask
parameter_list|,
name|void
modifier|*
name|val1
parameter_list|,
name|void
modifier|*
name|val2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|fs_match_exact_mask
parameter_list|(
name|u8
name|match_criteria_enable1
parameter_list|,
name|u8
name|match_criteria_enable2
parameter_list|,
name|void
modifier|*
name|mask1
parameter_list|,
name|void
modifier|*
name|mask2
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**********end API for sniffer**********/
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

