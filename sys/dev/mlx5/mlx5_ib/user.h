begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013-2015, Mellanox Technologies, Ltd.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS `AS IS' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX5_IB_USER_H
end_ifndef

begin_define
define|#
directive|define
name|MLX5_IB_USER_H
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_enum
enum|enum
block|{
name|MLX5_QP_FLAG_SIGNATURE
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_SRQ_FLAG_SIGNATURE
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_WQ_FLAG_SIGNATURE
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_comment
comment|/* Increment this value if any changes that break userspace ABI  * compatibility are made.  */
end_comment

begin_define
define|#
directive|define
name|MLX5_IB_UVERBS_ABI_VERSION
value|1
end_define

begin_comment
comment|/* Make sure that all structs defined in this file remain laid out so  * that they pack the same way on 32-bit and 64-bit architectures (to  * avoid incompatibility between 32-bit userspace and 64-bit kernels).  * In particular do not use pointer types -- pass pointers in __u64  * instead.  */
end_comment

begin_struct
struct|struct
name|mlx5_ib_alloc_ucontext_req
block|{
name|__u32
name|total_num_uuars
decl_stmt|;
name|__u32
name|num_low_latency_uuars
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_alloc_ucontext_req_v2
block|{
name|__u32
name|total_num_uuars
decl_stmt|;
name|__u32
name|num_low_latency_uuars
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_alloc_ucontext_resp
block|{
name|__u32
name|qp_tab_size
decl_stmt|;
name|__u32
name|bf_reg_size
decl_stmt|;
name|__u32
name|tot_uuars
decl_stmt|;
name|__u32
name|cache_line_size
decl_stmt|;
name|__u16
name|max_sq_desc_sz
decl_stmt|;
name|__u16
name|max_rq_desc_sz
decl_stmt|;
name|__u32
name|max_send_wqebb
decl_stmt|;
name|__u32
name|max_recv_wr
decl_stmt|;
name|__u32
name|max_srq_recv_wr
decl_stmt|;
name|__u16
name|num_ports
decl_stmt|;
name|__u16
name|reserved
decl_stmt|;
name|__u32
name|max_desc_sz_sq_dc
decl_stmt|;
name|__u32
name|atomic_arg_sizes_dc
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|reserved2
index|[
literal|5
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx5_exp_ib_alloc_ucontext_data_resp_mask
block|{
name|MLX5_EXP_ALLOC_CTX_RESP_MASK_CQE_COMP_MAX_NUM
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_EXP_ALLOC_CTX_RESP_MASK_CQE_VERSION
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_EXP_ALLOC_CTX_RESP_MASK_RROCE_UDP_SPORT_MIN
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX5_EXP_ALLOC_CTX_RESP_MASK_RROCE_UDP_SPORT_MAX
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX5_EXP_ALLOC_CTX_RESP_MASK_HCA_CORE_CLOCK_OFFSET
init|=
literal|1
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_exp_ib_alloc_ucontext_data_resp
block|{
name|__u32
name|comp_mask
decl_stmt|;
comment|/* use mlx5_ib_exp_alloc_ucontext_data_resp_mask */
name|__u16
name|cqe_comp_max_num
decl_stmt|;
name|__u8
name|cqe_version
decl_stmt|;
name|__u8
name|reserved
decl_stmt|;
name|__u16
name|rroce_udp_sport_min
decl_stmt|;
name|__u16
name|rroce_udp_sport_max
decl_stmt|;
name|__u32
name|hca_core_clock_offset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_exp_ib_alloc_ucontext_resp
block|{
name|__u32
name|qp_tab_size
decl_stmt|;
name|__u32
name|bf_reg_size
decl_stmt|;
name|__u32
name|tot_uuars
decl_stmt|;
name|__u32
name|cache_line_size
decl_stmt|;
name|__u16
name|max_sq_desc_sz
decl_stmt|;
name|__u16
name|max_rq_desc_sz
decl_stmt|;
name|__u32
name|max_send_wqebb
decl_stmt|;
name|__u32
name|max_recv_wr
decl_stmt|;
name|__u32
name|max_srq_recv_wr
decl_stmt|;
name|__u16
name|num_ports
decl_stmt|;
name|__u16
name|reserved
decl_stmt|;
name|__u32
name|max_desc_sz_sq_dc
decl_stmt|;
name|__u32
name|atomic_arg_sizes_dc
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|reserved2
index|[
literal|5
index|]
decl_stmt|;
comment|/* Some more reserved fields for 	 * future growth of mlx5_ib_alloc_ucontext_resp */
name|__u64
name|prefix_reserved
index|[
literal|8
index|]
decl_stmt|;
name|struct
name|mlx5_exp_ib_alloc_ucontext_data_resp
name|exp_data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_alloc_pd_resp
block|{
name|__u32
name|pdn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_cq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|cqe_size
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
comment|/* explicit padding (optional on i386) */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx5_exp_ib_create_cq_mask
block|{
name|MLX5_EXP_CREATE_CQ_MASK_CQE_COMP_EN
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_EXP_CREATE_CQ_MASK_CQE_COMP_RECV_TYPE
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_EXP_CREATE_CQ_MASK_RESERVED
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_exp_cqe_comp_recv_type
block|{
name|MLX5_IB_CQE_FORMAT_HASH
block|,
name|MLX5_IB_CQE_FORMAT_CSUM
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_exp_ib_create_cq_data
block|{
name|__u32
name|comp_mask
decl_stmt|;
comment|/* use mlx5_exp_ib_creaet_cq_mask */
name|__u8
name|cqe_comp_en
decl_stmt|;
name|__u8
name|cqe_comp_recv_type
decl_stmt|;
comment|/* use mlx5_exp_cqe_comp_recv_type */
name|__u16
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_exp_ib_create_cq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|cqe_size
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
comment|/* explicit padding (optional on i386) */
comment|/* Some more reserved fields for future growth of mlx5_ib_create_cq */
name|__u64
name|prefix_reserved
index|[
literal|8
index|]
decl_stmt|;
comment|/* sizeof prefix aligned with mlx5_ib_create_cq */
name|__u64
name|size_of_prefix
decl_stmt|;
name|struct
name|mlx5_exp_ib_create_cq_data
name|exp_data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_cq_resp
block|{
name|__u32
name|cqn
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_resize_cq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u16
name|cqe_size
decl_stmt|;
name|__u16
name|reserved0
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_srq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
comment|/* explicit padding (optional on i386) */
name|__u32
name|uidx
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_srq_resp
block|{
name|__u32
name|srqn
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_qp
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|sq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_shift
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx5_exp_ib_create_qp_mask
block|{
name|MLX5_EXP_CREATE_QP_MASK_UIDX
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_EXP_CREATE_QP_MASK_SQ_BUFF_ADD
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_EXP_CREATE_QP_MASK_WC_UAR_IDX
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX5_EXP_CREATE_QP_MASK_FLAGS_IDX
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX5_EXP_CREATE_QP_MASK_RESERVED
init|=
literal|1
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_exp_create_qp_flags
block|{
name|MLX5_EXP_CREATE_QP_MULTI_PACKET_WQE_REQ_FLAG
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_exp_drv_create_qp_uar_idx
block|{
name|MLX5_EXP_CREATE_QP_DB_ONLY_UUAR
init|=
operator|-
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_exp_ib_create_qp_data
block|{
name|__u32
name|comp_mask
decl_stmt|;
comment|/* use mlx5_exp_ib_create_qp_mask */
name|__u32
name|uidx
decl_stmt|;
name|__u64
name|sq_buf_addr
decl_stmt|;
name|__u32
name|wc_uar_index
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
comment|/* use mlx5_exp_create_qp_flags */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_exp_ib_create_qp
block|{
comment|/* To allow casting to mlx5_ib_create_qp the prefix is the same as 	 * struct mlx5_ib_create_qp prefix 	 */
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|sq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_shift
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
comment|/* Some more reserved fields for future growth of mlx5_ib_create_qp */
name|__u64
name|prefix_reserved
index|[
literal|8
index|]
decl_stmt|;
comment|/* sizeof prefix aligned with mlx5_ib_create_qp */
name|__u64
name|size_of_prefix
decl_stmt|;
comment|/* Experimental data 	 * Add new experimental data only inside the exp struct 	 */
name|struct
name|mlx5_exp_ib_create_qp_data
name|exp
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX5_EXP_INVALID_UUAR
init|=
operator|-
literal|1
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_ib_create_qp_resp
block|{
name|__u32
name|uuar_index
decl_stmt|;
name|__u32
name|rsvd
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx5_exp_ib_create_qp_resp_mask
block|{
name|MLX5_EXP_CREATE_QP_RESP_MASK_FLAGS_IDX
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_EXP_CREATE_QP_RESP_MASK_RESERVED
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_exp_create_qp_resp_flags
block|{
name|MLX5_EXP_CREATE_QP_RESP_MULTI_PACKET_WQE_FLAG
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_exp_ib_create_qp_resp_data
block|{
name|__u32
name|comp_mask
decl_stmt|;
comment|/* use mlx5_exp_ib_create_qp_resp_mask */
name|__u32
name|flags
decl_stmt|;
comment|/* use mlx5_exp_create_qp_resp_flags */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_exp_ib_create_qp_resp
block|{
name|__u32
name|uuar_index
decl_stmt|;
name|__u32
name|rsvd
decl_stmt|;
comment|/* Some more reserved fields for future growth of mlx5_ib_create_qp_resp */
name|__u64
name|prefix_reserved
index|[
literal|8
index|]
decl_stmt|;
comment|/* sizeof prefix aligned with mlx5_ib_create_qp_resp */
name|__u64
name|size_of_prefix
decl_stmt|;
comment|/* Experimental data 	 * Add new experimental data only inside the exp struct 	 */
name|struct
name|mlx5_exp_ib_create_qp_resp_data
name|exp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_dct
block|{
name|__u32
name|uidx
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_arm_dct
block|{
name|__u64
name|reserved0
decl_stmt|;
name|__u64
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_arm_dct_resp
block|{
name|__u64
name|reserved0
decl_stmt|;
name|__u64
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_wq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|rq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_shift
decl_stmt|;
name|__u32
name|user_index
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX5_IB_USER_H */
end_comment

end_unit

