begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2009 Yahoo! Inc.  * Copyright (c) 2011, 2012 LSI Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * LSI MPT-Fusion Host Adapter FreeBSD  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MPSVAR_H
end_ifndef

begin_define
define|#
directive|define
name|_MPSVAR_H
end_define

begin_define
define|#
directive|define
name|MPS_DRIVER_VERSION
value|"18.00.00.00-fbsd"
end_define

begin_define
define|#
directive|define
name|MPS_DB_MAX_WAIT
value|2500
end_define

begin_define
define|#
directive|define
name|MPS_REQ_FRAMES
value|1024
end_define

begin_define
define|#
directive|define
name|MPS_EVT_REPLY_FRAMES
value|32
end_define

begin_define
define|#
directive|define
name|MPS_REPLY_FRAMES
value|MPS_REQ_FRAMES
end_define

begin_define
define|#
directive|define
name|MPS_CHAIN_FRAMES
value|2048
end_define

begin_define
define|#
directive|define
name|MPS_SENSE_LEN
value|SSD_FULL_SIZE
end_define

begin_define
define|#
directive|define
name|MPS_MSI_COUNT
value|1
end_define

begin_define
define|#
directive|define
name|MPS_SGE64_SIZE
value|12
end_define

begin_define
define|#
directive|define
name|MPS_SGE32_SIZE
value|8
end_define

begin_define
define|#
directive|define
name|MPS_SGC_SIZE
value|8
end_define

begin_define
define|#
directive|define
name|CAN_SLEEP
value|1
end_define

begin_define
define|#
directive|define
name|NO_SLEEP
value|0
end_define

begin_define
define|#
directive|define
name|MPS_PERIODIC_DELAY
value|1
end_define

begin_comment
comment|/* 1 second heartbeat/watchdog check */
end_comment

begin_define
define|#
directive|define
name|MPS_SCSI_RI_INVALID_FRAME
value|(0x00000002)
end_define

begin_define
define|#
directive|define
name|MPS_STRING_LENGTH
value|64
end_define

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_comment
comment|/*  * host mapping related macro definitions  */
end_comment

begin_define
define|#
directive|define
name|MPS_MAPTABLE_BAD_IDX
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|MPS_DPM_BAD_IDX
value|0xFFFF
end_define

begin_define
define|#
directive|define
name|MPS_ENCTABLE_BAD_IDX
value|0xFF
end_define

begin_define
define|#
directive|define
name|MPS_MAX_MISSING_COUNT
value|0x0F
end_define

begin_define
define|#
directive|define
name|MPS_DEV_RESERVED
value|0x20000000
end_define

begin_define
define|#
directive|define
name|MPS_MAP_IN_USE
value|0x10000000
end_define

begin_define
define|#
directive|define
name|MPS_RAID_CHANNEL
value|1
end_define

begin_define
define|#
directive|define
name|MPS_MAP_BAD_ID
value|0xFFFFFFFF
end_define

begin_comment
comment|/*  * WarpDrive controller  */
end_comment

begin_define
define|#
directive|define
name|MPS_CHIP_WD_DEVICE_ID
value|0x007E
end_define

begin_define
define|#
directive|define
name|MPS_WD_LSI_OEM
value|0x80
end_define

begin_define
define|#
directive|define
name|MPS_WD_HIDE_EXPOSE_MASK
value|0x03
end_define

begin_define
define|#
directive|define
name|MPS_WD_HIDE_ALWAYS
value|0x00
end_define

begin_define
define|#
directive|define
name|MPS_WD_EXPOSE_ALWAYS
value|0x01
end_define

begin_define
define|#
directive|define
name|MPS_WD_HIDE_IF_VOLUME
value|0x02
end_define

begin_define
define|#
directive|define
name|MPS_WD_RETRY
value|0x01
end_define

begin_define
define|#
directive|define
name|MPS_MAN_PAGE10_SIZE
value|0x5C
end_define

begin_comment
comment|/* Hardcode for now */
end_comment

begin_define
define|#
directive|define
name|MPS_MAX_DISKS_IN_VOL
value|10
end_define

begin_comment
comment|/*  * WarpDrive Event Logging  */
end_comment

begin_define
define|#
directive|define
name|MPI2_WD_LOG_ENTRY
value|0x8002
end_define

begin_define
define|#
directive|define
name|MPI2_WD_SSD_THROTTLING
value|0x0041
end_define

begin_define
define|#
directive|define
name|MPI2_WD_DRIVE_LIFE_WARN
value|0x0043
end_define

begin_define
define|#
directive|define
name|MPI2_WD_DRIVE_LIFE_DEAD
value|0x0044
end_define

begin_define
define|#
directive|define
name|MPI2_WD_RAIL_MON_FAIL
value|0x004D
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|u8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|u16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|u32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|u64
typedef|;
end_typedef

begin_comment
comment|/**  * struct dev_mapping_table - device mapping information  * @physical_id: SAS address for drives or WWID for RAID volumes  * @device_info: bitfield provides detailed info about the device  * @phy_bits: bitfields indicating controller phys  * @dpm_entry_num: index of this device in device persistent map table  * @dev_handle: device handle for the device pointed by this entry  * @channel: target channel  * @id: target id  * @missing_count: number of times the device not detected by driver  * @hide_flag: Hide this physical disk/not (foreign configuration)  * @init_complete: Whether the start of the day checks completed or not  */
end_comment

begin_struct
struct|struct
name|dev_mapping_table
block|{
name|u64
name|physical_id
decl_stmt|;
name|u32
name|device_info
decl_stmt|;
name|u32
name|phy_bits
decl_stmt|;
name|u16
name|dpm_entry_num
decl_stmt|;
name|u16
name|dev_handle
decl_stmt|;
name|u8
name|reserved1
decl_stmt|;
name|u8
name|channel
decl_stmt|;
name|u16
name|id
decl_stmt|;
name|u8
name|missing_count
decl_stmt|;
name|u8
name|init_complete
decl_stmt|;
name|u8
name|TLR_bits
decl_stmt|;
name|u8
name|reserved2
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct enc_mapping_table -  mapping information about an enclosure  * @enclosure_id: Logical ID of this enclosure  * @start_index: index to the entry in dev_mapping_table  * @phy_bits: bitfields indicating controller phys  * @dpm_entry_num: index of this enclosure in device persistent map table  * @enc_handle: device handle for the enclosure pointed by this entry  * @num_slots: number of slots in the enclosure  * @start_slot: Starting slot id  * @missing_count: number of times the device not detected by driver  * @removal_flag: used to mark the device for removal  * @skip_search: used as a flag to include/exclude enclosure for search  * @init_complete: Whether the start of the day checks completed or not  */
end_comment

begin_struct
struct|struct
name|enc_mapping_table
block|{
name|u64
name|enclosure_id
decl_stmt|;
name|u32
name|start_index
decl_stmt|;
name|u32
name|phy_bits
decl_stmt|;
name|u16
name|dpm_entry_num
decl_stmt|;
name|u16
name|enc_handle
decl_stmt|;
name|u16
name|num_slots
decl_stmt|;
name|u16
name|start_slot
decl_stmt|;
name|u8
name|missing_count
decl_stmt|;
name|u8
name|removal_flag
decl_stmt|;
name|u8
name|skip_search
decl_stmt|;
name|u8
name|init_complete
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct map_removal_table - entries to be removed from mapping table  * @dpm_entry_num: index of this device in device persistent map table  * @dev_handle: device handle for the device pointed by this entry  */
end_comment

begin_struct
struct|struct
name|map_removal_table
block|{
name|u16
name|dpm_entry_num
decl_stmt|;
name|u16
name|dev_handle
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
struct|struct
name|mps_fw_diagnostic_buffer
block|{
name|size_t
name|size
decl_stmt|;
name|uint8_t
name|extended_type
decl_stmt|;
name|uint8_t
name|buffer_type
decl_stmt|;
name|uint8_t
name|force_release
decl_stmt|;
name|uint32_t
name|product_specific
index|[
literal|23
index|]
decl_stmt|;
name|uint8_t
name|immediate
decl_stmt|;
name|uint8_t
name|enabled
decl_stmt|;
name|uint8_t
name|valid_data
decl_stmt|;
name|uint8_t
name|owned_by_firmware
decl_stmt|;
name|uint32_t
name|unique_id
decl_stmt|;
block|}
name|mps_fw_diagnostic_buffer_t
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|mps_softc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mps_command
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mpssas_softc
struct_decl|;
end_struct_decl

begin_union_decl
union_decl|union
name|ccb
union_decl|;
end_union_decl

begin_struct_decl
struct_decl|struct
name|mpssas_target
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mps_column_map
struct_decl|;
end_struct_decl

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_MPT2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|mps_evt_callback_t
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|uintptr_t
parameter_list|,
name|MPI2_EVENT_NOTIFICATION_REPLY
modifier|*
name|reply
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|mps_command_callback_t
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|mps_chain
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mps_chain
argument_list|)
name|chain_link
expr_stmt|;
name|MPI2_SGE_IO_UNION
modifier|*
name|chain
decl_stmt|;
name|uint32_t
name|chain_busaddr
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This needs to be at least 2 to support SMP passthrough.  */
end_comment

begin_define
define|#
directive|define
name|MPS_IOVEC_COUNT
value|2
end_define

begin_struct
struct|struct
name|mps_command
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mps_command
argument_list|)
name|cm_link
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|mps_command
argument_list|)
name|cm_recovery
expr_stmt|;
name|struct
name|mps_softc
modifier|*
name|cm_sc
decl_stmt|;
name|union
name|ccb
modifier|*
name|cm_ccb
decl_stmt|;
name|void
modifier|*
name|cm_data
decl_stmt|;
name|u_int
name|cm_length
decl_stmt|;
name|u_int
name|cm_out_len
decl_stmt|;
name|struct
name|uio
name|cm_uio
decl_stmt|;
name|struct
name|iovec
name|cm_iovec
index|[
name|MPS_IOVEC_COUNT
index|]
decl_stmt|;
name|u_int
name|cm_max_segs
decl_stmt|;
name|u_int
name|cm_sglsize
decl_stmt|;
name|MPI2_SGE_IO_UNION
modifier|*
name|cm_sge
decl_stmt|;
name|uint8_t
modifier|*
name|cm_req
decl_stmt|;
name|uint8_t
modifier|*
name|cm_reply
decl_stmt|;
name|uint32_t
name|cm_reply_data
decl_stmt|;
name|mps_command_callback_t
modifier|*
name|cm_complete
decl_stmt|;
name|void
modifier|*
name|cm_complete_data
decl_stmt|;
name|struct
name|mpssas_target
modifier|*
name|cm_targ
decl_stmt|;
name|MPI2_REQUEST_DESCRIPTOR_UNION
name|cm_desc
decl_stmt|;
name|u_int
name|cm_lun
decl_stmt|;
name|u_int
name|cm_flags
decl_stmt|;
define|#
directive|define
name|MPS_CM_FLAGS_POLLED
value|(1<< 0)
define|#
directive|define
name|MPS_CM_FLAGS_COMPLETE
value|(1<< 1)
define|#
directive|define
name|MPS_CM_FLAGS_SGE_SIMPLE
value|(1<< 2)
define|#
directive|define
name|MPS_CM_FLAGS_DATAOUT
value|(1<< 3)
define|#
directive|define
name|MPS_CM_FLAGS_DATAIN
value|(1<< 4)
define|#
directive|define
name|MPS_CM_FLAGS_WAKEUP
value|(1<< 5)
define|#
directive|define
name|MPS_CM_FLAGS_DD_IO
value|(1<< 6)
define|#
directive|define
name|MPS_CM_FLAGS_USE_UIO
value|(1<< 7)
define|#
directive|define
name|MPS_CM_FLAGS_SMP_PASS
value|(1<< 8)
define|#
directive|define
name|MPS_CM_FLAGS_CHAIN_FAILED
value|(1<< 9)
define|#
directive|define
name|MPS_CM_FLAGS_ERROR_MASK
value|MPS_CM_FLAGS_CHAIN_FAILED
define|#
directive|define
name|MPS_CM_FLAGS_USE_CCB
value|(1<< 10)
name|u_int
name|cm_state
decl_stmt|;
define|#
directive|define
name|MPS_CM_STATE_FREE
value|0
define|#
directive|define
name|MPS_CM_STATE_BUSY
value|1
define|#
directive|define
name|MPS_CM_STATE_TIMEDOUT
value|2
name|bus_dmamap_t
name|cm_dmamap
decl_stmt|;
name|struct
name|scsi_sense_data
modifier|*
name|cm_sense
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_chain
argument_list|)
name|cm_chain_list
expr_stmt|;
name|uint32_t
name|cm_req_busaddr
decl_stmt|;
name|uint32_t
name|cm_sense_busaddr
decl_stmt|;
name|struct
name|callout
name|cm_callout
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mps_column_map
block|{
name|uint16_t
name|dev_handle
decl_stmt|;
name|uint8_t
name|phys_disk_num
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mps_event_handle
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mps_event_handle
argument_list|)
name|eh_list
expr_stmt|;
name|mps_evt_callback_t
modifier|*
name|callback
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
name|u32
name|mask
index|[
name|MPI2_EVENT_NOTIFY_EVENTMASK_WORDS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mps_softc
block|{
name|device_t
name|mps_dev
decl_stmt|;
name|struct
name|cdev
modifier|*
name|mps_cdev
decl_stmt|;
name|u_int
name|mps_flags
decl_stmt|;
define|#
directive|define
name|MPS_FLAGS_INTX
value|(1<< 0)
define|#
directive|define
name|MPS_FLAGS_MSI
value|(1<< 1)
define|#
directive|define
name|MPS_FLAGS_BUSY
value|(1<< 2)
define|#
directive|define
name|MPS_FLAGS_SHUTDOWN
value|(1<< 3)
define|#
directive|define
name|MPS_FLAGS_DIAGRESET
value|(1<< 4)
define|#
directive|define
name|MPS_FLAGS_ATTACH_DONE
value|(1<< 5)
define|#
directive|define
name|MPS_FLAGS_WD_AVAILABLE
value|(1<< 6)
name|u_int
name|mps_debug
decl_stmt|;
name|u_int
name|disable_msix
decl_stmt|;
name|u_int
name|disable_msi
decl_stmt|;
name|int
name|tm_cmds_active
decl_stmt|;
name|int
name|io_cmds_active
decl_stmt|;
name|int
name|io_cmds_highwater
decl_stmt|;
name|int
name|chain_free
decl_stmt|;
name|int
name|max_chains
decl_stmt|;
name|int
name|chain_free_lowwater
decl_stmt|;
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|900030
name|uint64_t
name|chain_alloc_fail
decl_stmt|;
endif|#
directive|endif
name|struct
name|sysctl_ctx_list
name|sysctl_ctx
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|sysctl_tree
decl_stmt|;
name|char
name|fw_version
index|[
literal|16
index|]
decl_stmt|;
name|struct
name|mps_command
modifier|*
name|commands
decl_stmt|;
name|struct
name|mps_chain
modifier|*
name|chains
decl_stmt|;
name|struct
name|callout
name|periodic
decl_stmt|;
name|struct
name|mpssas_softc
modifier|*
name|sassc
decl_stmt|;
name|char
name|tmp_string
index|[
name|MPS_STRING_LENGTH
index|]
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_command
argument_list|)
name|req_list
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_command
argument_list|)
name|high_priority_req_list
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_chain
argument_list|)
name|chain_list
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_command
argument_list|)
name|tm_list
expr_stmt|;
name|int
name|replypostindex
decl_stmt|;
name|int
name|replyfreeindex
decl_stmt|;
name|struct
name|resource
modifier|*
name|mps_regs_resource
decl_stmt|;
name|bus_space_handle_t
name|mps_bhandle
decl_stmt|;
name|bus_space_tag_t
name|mps_btag
decl_stmt|;
name|int
name|mps_regs_rid
decl_stmt|;
name|bus_dma_tag_t
name|mps_parent_dmat
decl_stmt|;
name|bus_dma_tag_t
name|buffer_dmat
decl_stmt|;
name|MPI2_IOC_FACTS_REPLY
modifier|*
name|facts
decl_stmt|;
name|int
name|num_reqs
decl_stmt|;
name|int
name|num_replies
decl_stmt|;
name|int
name|fqdepth
decl_stmt|;
comment|/* Free queue */
name|int
name|pqdepth
decl_stmt|;
comment|/* Post queue */
name|u32
name|event_mask
index|[
name|MPI2_EVENT_NOTIFY_EVENTMASK_WORDS
index|]
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_event_handle
argument_list|)
name|event_list
expr_stmt|;
name|struct
name|mps_event_handle
modifier|*
name|mps_log_eh
decl_stmt|;
name|struct
name|mtx
name|mps_mtx
decl_stmt|;
name|struct
name|intr_config_hook
name|mps_ich
decl_stmt|;
name|struct
name|resource
modifier|*
name|mps_irq
index|[
name|MPS_MSI_COUNT
index|]
decl_stmt|;
name|void
modifier|*
name|mps_intrhand
index|[
name|MPS_MSI_COUNT
index|]
decl_stmt|;
name|int
name|mps_irq_rid
index|[
name|MPS_MSI_COUNT
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|req_frames
decl_stmt|;
name|bus_addr_t
name|req_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|req_dmat
decl_stmt|;
name|bus_dmamap_t
name|req_map
decl_stmt|;
name|uint8_t
modifier|*
name|reply_frames
decl_stmt|;
name|bus_addr_t
name|reply_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|reply_dmat
decl_stmt|;
name|bus_dmamap_t
name|reply_map
decl_stmt|;
name|struct
name|scsi_sense_data
modifier|*
name|sense_frames
decl_stmt|;
name|bus_addr_t
name|sense_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|sense_dmat
decl_stmt|;
name|bus_dmamap_t
name|sense_map
decl_stmt|;
name|uint8_t
modifier|*
name|chain_frames
decl_stmt|;
name|bus_addr_t
name|chain_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|chain_dmat
decl_stmt|;
name|bus_dmamap_t
name|chain_map
decl_stmt|;
name|MPI2_REPLY_DESCRIPTORS_UNION
modifier|*
name|post_queue
decl_stmt|;
name|bus_addr_t
name|post_busaddr
decl_stmt|;
name|uint32_t
modifier|*
name|free_queue
decl_stmt|;
name|bus_addr_t
name|free_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|queues_dmat
decl_stmt|;
name|bus_dmamap_t
name|queues_map
decl_stmt|;
name|uint8_t
modifier|*
name|fw_diag_buffer
decl_stmt|;
name|bus_addr_t
name|fw_diag_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|fw_diag_dmat
decl_stmt|;
name|bus_dmamap_t
name|fw_diag_map
decl_stmt|;
name|uint8_t
name|ir_firmware
decl_stmt|;
comment|/* static config pages */
name|Mpi2IOCPage8_t
name|ioc_pg8
decl_stmt|;
comment|/* host mapping support */
name|struct
name|dev_mapping_table
modifier|*
name|mapping_table
decl_stmt|;
name|struct
name|enc_mapping_table
modifier|*
name|enclosure_table
decl_stmt|;
name|struct
name|map_removal_table
modifier|*
name|removal_table
decl_stmt|;
name|uint8_t
modifier|*
name|dpm_entry_used
decl_stmt|;
name|uint8_t
modifier|*
name|dpm_flush_entry
decl_stmt|;
name|Mpi2DriverMappingPage0_t
modifier|*
name|dpm_pg0
decl_stmt|;
name|uint16_t
name|max_devices
decl_stmt|;
name|uint16_t
name|max_enclosures
decl_stmt|;
name|uint16_t
name|max_expanders
decl_stmt|;
name|uint8_t
name|max_volumes
decl_stmt|;
name|uint8_t
name|num_enc_table_entries
decl_stmt|;
name|uint8_t
name|num_rsvd_entries
decl_stmt|;
name|uint8_t
name|num_channels
decl_stmt|;
name|uint16_t
name|max_dpm_entries
decl_stmt|;
name|uint8_t
name|is_dpm_enable
decl_stmt|;
name|uint8_t
name|track_mapping_events
decl_stmt|;
name|uint32_t
name|pending_map_events
decl_stmt|;
name|uint8_t
name|mt_full_retry
decl_stmt|;
name|uint8_t
name|mt_add_device_failed
decl_stmt|;
comment|/* FW diag Buffer List */
name|mps_fw_diagnostic_buffer_t
name|fw_diag_buffer_list
index|[
name|MPI2_DIAG_BUF_TYPE_COUNT
index|]
decl_stmt|;
comment|/* Event Recording IOCTL support */
name|uint32_t
name|events_to_record
index|[
literal|4
index|]
decl_stmt|;
name|mps_event_entry_t
name|recorded_events
index|[
name|MPS_EVENT_QUEUE_SIZE
index|]
decl_stmt|;
name|uint8_t
name|event_index
decl_stmt|;
name|uint32_t
name|event_number
decl_stmt|;
comment|/* EEDP and TLR support */
name|uint8_t
name|eedp_enabled
decl_stmt|;
name|uint8_t
name|control_TLR
decl_stmt|;
comment|/* Shutdown Event Handler */
name|eventhandler_tag
name|shutdown_eh
decl_stmt|;
comment|/* To track topo events during reset */
define|#
directive|define
name|MPS_DIAG_RESET_TIMEOUT
value|300000
name|uint8_t
name|wait_for_port_enable
decl_stmt|;
name|uint8_t
name|port_enable_complete
decl_stmt|;
name|uint8_t
name|msleep_fake_chan
decl_stmt|;
comment|/* WD controller */
name|uint8_t
name|WD_available
decl_stmt|;
name|uint8_t
name|WD_valid_config
decl_stmt|;
name|uint8_t
name|WD_hide_expose
decl_stmt|;
comment|/* Direct Drive for WarpDrive */
name|uint8_t
name|DD_num_phys_disks
decl_stmt|;
name|uint16_t
name|DD_dev_handle
decl_stmt|;
name|uint32_t
name|DD_stripe_size
decl_stmt|;
name|uint32_t
name|DD_stripe_exponent
decl_stmt|;
name|uint32_t
name|DD_block_size
decl_stmt|;
name|uint16_t
name|DD_block_exponent
decl_stmt|;
name|uint64_t
name|DD_max_lba
decl_stmt|;
name|struct
name|mps_column_map
name|DD_column_map
index|[
name|MPS_MAX_DISKS_IN_VOL
index|]
decl_stmt|;
name|char
name|exclude_ids
index|[
literal|80
index|]
decl_stmt|;
name|struct
name|timeval
name|lastfail
decl_stmt|;
comment|/* StartStopUnit command handling at shutdown */
name|uint32_t
name|SSU_refcount
decl_stmt|;
name|uint8_t
name|SSU_started
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mps_config_params
block|{
name|MPI2_CONFIG_EXT_PAGE_HEADER_UNION
name|hdr
decl_stmt|;
name|u_int
name|action
decl_stmt|;
name|u_int
name|page_address
decl_stmt|;
comment|/* Attributes, not a phys address */
name|u_int
name|status
decl_stmt|;
name|void
modifier|*
name|buffer
decl_stmt|;
name|u_int
name|length
decl_stmt|;
name|int
name|timeout
decl_stmt|;
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_config_params
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|cbdata
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_read_capacity_eedp
block|{
name|uint8_t
name|addr
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|protect
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|uint32_t
name|mps_regread
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
return|return
operator|(
name|bus_space_read_4
argument_list|(
name|sc
operator|->
name|mps_btag
argument_list|,
name|sc
operator|->
name|mps_bhandle
argument_list|,
name|offset
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_regwrite
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|uint32_t
name|offset
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|bus_space_write_4
argument_list|(
name|sc
operator|->
name|mps_btag
argument_list|,
name|sc
operator|->
name|mps_bhandle
argument_list|,
name|offset
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* free_queue must have Little Endian address   * TODO- cm_reply_data is unwanted. We can remove it.  * */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|mps_free_reply
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|uint32_t
name|busaddr
parameter_list|)
block|{
if|if
condition|(
operator|++
name|sc
operator|->
name|replyfreeindex
operator|>=
name|sc
operator|->
name|fqdepth
condition|)
name|sc
operator|->
name|replyfreeindex
operator|=
literal|0
expr_stmt|;
name|sc
operator|->
name|free_queue
index|[
name|sc
operator|->
name|replyfreeindex
index|]
operator|=
name|htole32
argument_list|(
name|busaddr
argument_list|)
expr_stmt|;
name|mps_regwrite
argument_list|(
name|sc
argument_list|,
name|MPI2_REPLY_FREE_HOST_INDEX_OFFSET
argument_list|,
name|sc
operator|->
name|replyfreeindex
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mps_chain
operator|*
name|mps_alloc_chain
argument_list|(
argument|struct mps_softc *sc
argument_list|)
block|{ 	struct
name|mps_chain
operator|*
name|chain
block|;
if|if
condition|(
operator|(
name|chain
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sc
operator|->
name|chain_list
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sc
operator|->
name|chain_list
argument_list|,
name|chain
argument_list|,
name|chain_link
argument_list|)
expr_stmt|;
name|sc
operator|->
name|chain_free
operator|--
expr_stmt|;
if|if
condition|(
name|sc
operator|->
name|chain_free
operator|<
name|sc
operator|->
name|chain_free_lowwater
condition|)
name|sc
operator|->
name|chain_free_lowwater
operator|=
name|sc
operator|->
name|chain_free
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|900030
end_if

begin_else
else|else
name|sc
operator|->
name|chain_alloc_fail
operator|++
expr_stmt|;
end_else

begin_endif
endif|#
directive|endif
end_endif

begin_return
return|return
operator|(
name|chain
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|void
name|mps_free_chain
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_chain
modifier|*
name|chain
parameter_list|)
block|{
if|#
directive|if
literal|0
block|bzero(chain->chain, 128);
endif|#
directive|endif
name|sc
operator|->
name|chain_free
operator|++
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sc
operator|->
name|chain_list
argument_list|,
name|chain
argument_list|,
name|chain_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_free_command
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|)
block|{
name|struct
name|mps_chain
modifier|*
name|chain
decl_stmt|,
modifier|*
name|chain_temp
decl_stmt|;
if|if
condition|(
name|cm
operator|->
name|cm_reply
operator|!=
name|NULL
condition|)
name|mps_free_reply
argument_list|(
name|sc
argument_list|,
name|cm
operator|->
name|cm_reply_data
argument_list|)
expr_stmt|;
name|cm
operator|->
name|cm_reply
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_flags
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_complete
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_complete_data
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_ccb
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_targ
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_max_segs
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_lun
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_state
operator|=
name|MPS_CM_STATE_FREE
expr_stmt|;
name|cm
operator|->
name|cm_data
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_length
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_out_len
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_sglsize
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_sge
operator|=
name|NULL
expr_stmt|;
name|TAILQ_FOREACH_SAFE
argument_list|(
argument|chain
argument_list|,
argument|&cm->cm_chain_list
argument_list|,
argument|chain_link
argument_list|,
argument|chain_temp
argument_list|)
block|{
name|TAILQ_REMOVE
argument_list|(
operator|&
name|cm
operator|->
name|cm_chain_list
argument_list|,
name|chain
argument_list|,
name|chain_link
argument_list|)
expr_stmt|;
name|mps_free_chain
argument_list|(
name|sc
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sc
operator|->
name|req_list
argument_list|,
name|cm
argument_list|,
name|cm_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mps_command
operator|*
name|mps_alloc_command
argument_list|(
argument|struct mps_softc *sc
argument_list|)
block|{ 	struct
name|mps_command
operator|*
name|cm
block|;
name|cm
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sc
operator|->
name|req_list
argument_list|)
block|;
if|if
condition|(
name|cm
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sc
operator|->
name|req_list
argument_list|,
name|cm
argument_list|,
name|cm_link
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|KASSERT
argument_list|(
name|cm
operator|->
name|cm_state
operator|==
name|MPS_CM_STATE_FREE
argument_list|,
operator|(
literal|"mps: Allocating busy command\n"
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cm
operator|->
name|cm_state
operator|=
name|MPS_CM_STATE_BUSY
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|cm
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|void
name|mps_free_high_priority_command
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|)
block|{
name|struct
name|mps_chain
modifier|*
name|chain
decl_stmt|,
modifier|*
name|chain_temp
decl_stmt|;
if|if
condition|(
name|cm
operator|->
name|cm_reply
operator|!=
name|NULL
condition|)
name|mps_free_reply
argument_list|(
name|sc
argument_list|,
name|cm
operator|->
name|cm_reply_data
argument_list|)
expr_stmt|;
name|cm
operator|->
name|cm_reply
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_flags
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_complete
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_complete_data
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_ccb
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_targ
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_lun
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_state
operator|=
name|MPS_CM_STATE_FREE
expr_stmt|;
name|TAILQ_FOREACH_SAFE
argument_list|(
argument|chain
argument_list|,
argument|&cm->cm_chain_list
argument_list|,
argument|chain_link
argument_list|,
argument|chain_temp
argument_list|)
block|{
name|TAILQ_REMOVE
argument_list|(
operator|&
name|cm
operator|->
name|cm_chain_list
argument_list|,
name|chain
argument_list|,
name|chain_link
argument_list|)
expr_stmt|;
name|mps_free_chain
argument_list|(
name|sc
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sc
operator|->
name|high_priority_req_list
argument_list|,
name|cm
argument_list|,
name|cm_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mps_command
operator|*
name|mps_alloc_high_priority_command
argument_list|(
argument|struct mps_softc *sc
argument_list|)
block|{ 	struct
name|mps_command
operator|*
name|cm
block|;
name|cm
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sc
operator|->
name|high_priority_req_list
argument_list|)
block|;
if|if
condition|(
name|cm
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sc
operator|->
name|high_priority_req_list
argument_list|,
name|cm
argument_list|,
name|cm_link
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|KASSERT
argument_list|(
name|cm
operator|->
name|cm_state
operator|==
name|MPS_CM_STATE_FREE
argument_list|,
operator|(
literal|"mps: Allocating busy command\n"
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cm
operator|->
name|cm_state
operator|=
name|MPS_CM_STATE_BUSY
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|cm
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|void
name|mps_lock
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|sc
operator|->
name|mps_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_unlock
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
block|{
name|mtx_unlock
argument_list|(
operator|&
name|sc
operator|->
name|mps_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|MPS_INFO
value|(1<< 0)
end_define

begin_comment
comment|/* Basic info */
end_comment

begin_define
define|#
directive|define
name|MPS_FAULT
value|(1<< 1)
end_define

begin_comment
comment|/* Hardware faults */
end_comment

begin_define
define|#
directive|define
name|MPS_EVENT
value|(1<< 2)
end_define

begin_comment
comment|/* Event data from the controller */
end_comment

begin_define
define|#
directive|define
name|MPS_LOG
value|(1<< 3)
end_define

begin_comment
comment|/* Log data from the controller */
end_comment

begin_define
define|#
directive|define
name|MPS_RECOVERY
value|(1<< 4)
end_define

begin_comment
comment|/* Command error recovery tracing */
end_comment

begin_define
define|#
directive|define
name|MPS_ERROR
value|(1<< 5)
end_define

begin_comment
comment|/* Parameter errors, programming bugs */
end_comment

begin_define
define|#
directive|define
name|MPS_INIT
value|(1<< 6)
end_define

begin_comment
comment|/* Things related to system init */
end_comment

begin_define
define|#
directive|define
name|MPS_XINFO
value|(1<< 7)
end_define

begin_comment
comment|/* More detailed/noisy info */
end_comment

begin_define
define|#
directive|define
name|MPS_USER
value|(1<< 8)
end_define

begin_comment
comment|/* Trace user-generated commands */
end_comment

begin_define
define|#
directive|define
name|MPS_MAPPING
value|(1<< 9)
end_define

begin_comment
comment|/* Trace device mappings */
end_comment

begin_define
define|#
directive|define
name|MPS_TRACE
value|(1<< 10)
end_define

begin_comment
comment|/* Function-by-function trace */
end_comment

begin_define
define|#
directive|define
name|mps_printf
parameter_list|(
name|sc
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|device_printf((sc)->mps_dev, ##args)
end_define

begin_define
define|#
directive|define
name|mps_vprintf
parameter_list|(
name|sc
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|do {							\ 	if (bootverbose)				\ 		mps_printf(sc, ##args);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|mps_dprint
parameter_list|(
name|sc
parameter_list|,
name|level
parameter_list|,
name|msg
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|do {							\ 	if ((sc)->mps_debug& (level))			\ 		device_printf((sc)->mps_dev, msg, ##args);	\ } while (0)
end_define

begin_define
define|#
directive|define
name|mps_dprint_field
parameter_list|(
name|sc
parameter_list|,
name|level
parameter_list|,
name|msg
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|do {								\ 	if ((sc)->mps_debug& (level))				\ 		printf("\t" msg, ##args);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|MPS_PRINTFIELD_START
parameter_list|(
name|sc
parameter_list|,
name|tag
modifier|...
parameter_list|)
define|\
value|mps_dprint((sc), MPS_XINFO, ##tag);	\ 	mps_dprint_field((sc), MPS_XINFO, ":\n")
end_define

begin_define
define|#
directive|define
name|MPS_PRINTFIELD_END
parameter_list|(
name|sc
parameter_list|,
name|tag
parameter_list|)
define|\
value|mps_dprint((sc), MPS_XINFO, tag "\n")
end_define

begin_define
define|#
directive|define
name|MPS_PRINTFIELD
parameter_list|(
name|sc
parameter_list|,
name|facts
parameter_list|,
name|attr
parameter_list|,
name|fmt
parameter_list|)
define|\
value|mps_dprint_field((sc), MPS_XINFO, #attr ": " #fmt "\n", (facts)->attr)
end_define

begin_define
define|#
directive|define
name|MPS_EVENTFIELD_START
parameter_list|(
name|sc
parameter_list|,
name|tag
modifier|...
parameter_list|)
define|\
value|mps_dprint((sc), MPS_EVENT, ##tag);	\ 	mps_dprint_field((sc), MPS_EVENT, ":\n")
end_define

begin_define
define|#
directive|define
name|MPS_EVENTFIELD
parameter_list|(
name|sc
parameter_list|,
name|facts
parameter_list|,
name|attr
parameter_list|,
name|fmt
parameter_list|)
define|\
value|mps_dprint_field((sc), MPS_EVENT, #attr ": " #fmt "\n", (facts)->attr)
end_define

begin_define
define|#
directive|define
name|MPS_FUNCTRACE
parameter_list|(
name|sc
parameter_list|)
define|\
value|mps_dprint((sc), MPS_TRACE, "%s\n", __func__)
end_define

begin_define
define|#
directive|define
name|CAN_SLEEP
value|1
end_define

begin_define
define|#
directive|define
name|NO_SLEEP
value|0
end_define

begin_function
specifier|static
name|__inline
name|void
name|mps_from_u64
parameter_list|(
name|uint64_t
name|data
parameter_list|,
name|U64
modifier|*
name|mps
parameter_list|)
block|{
operator|(
name|mps
operator|)
operator|->
name|High
operator|=
name|htole32
argument_list|(
call|(
name|uint32_t
call|)
argument_list|(
operator|(
name|data
operator|)
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
operator|(
name|mps
operator|)
operator|->
name|Low
operator|=
name|htole32
argument_list|(
call|(
name|uint32_t
call|)
argument_list|(
operator|(
name|data
operator|)
operator|&
literal|0xffffffff
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint64_t
name|mps_to_u64
parameter_list|(
name|U64
modifier|*
name|data
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|le32toh
argument_list|(
name|data
operator|->
name|High
argument_list|)
operator|<<
literal|32
operator|)
operator||
name|le32toh
argument_list|(
name|data
operator|->
name|Low
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_mask_intr
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
block|{
name|uint32_t
name|mask
decl_stmt|;
name|mask
operator|=
name|mps_regread
argument_list|(
name|sc
argument_list|,
name|MPI2_HOST_INTERRUPT_MASK_OFFSET
argument_list|)
expr_stmt|;
name|mask
operator||=
name|MPI2_HIM_REPLY_INT_MASK
expr_stmt|;
name|mps_regwrite
argument_list|(
name|sc
argument_list|,
name|MPI2_HOST_INTERRUPT_MASK_OFFSET
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_unmask_intr
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
block|{
name|uint32_t
name|mask
decl_stmt|;
name|mask
operator|=
name|mps_regread
argument_list|(
name|sc
argument_list|,
name|MPI2_HOST_INTERRUPT_MASK_OFFSET
argument_list|)
expr_stmt|;
name|mask
operator|&=
operator|~
name|MPI2_HIM_REPLY_INT_MASK
expr_stmt|;
name|mps_regwrite
argument_list|(
name|sc
argument_list|,
name|MPI2_HOST_INTERRUPT_MASK_OFFSET
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|int
name|mps_pci_setup_interrupts
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_pci_restore
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_attach
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_free
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_intr
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_intr_msi
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_intr_locked
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_register_events
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|u32
modifier|*
parameter_list|,
name|mps_evt_callback_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|mps_event_handle
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_restart
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_update_events
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_event_handle
modifier|*
parameter_list|,
name|u32
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_deregister_events
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_event_handle
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_push_sge
parameter_list|(
name|struct
name|mps_command
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_add_dmaseg
parameter_list|(
name|struct
name|mps_command
modifier|*
parameter_list|,
name|vm_paddr_t
parameter_list|,
name|size_t
parameter_list|,
name|u_int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_attach_sas
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_detach_sas
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_read_config_page
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_config_params
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_write_config_page
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_config_params
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_memaddr_cb
parameter_list|(
name|void
modifier|*
parameter_list|,
name|bus_dma_segment_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpi_init_sge
parameter_list|(
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|,
name|void
modifier|*
name|req
parameter_list|,
name|void
modifier|*
name|sge
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_attach_user
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_detach_user
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpssas_record_event
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|MPI2_EVENT_NOTIFICATION_REPLY
modifier|*
name|event_reply
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_map_command
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_wait_command
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|,
name|int
name|timeout
parameter_list|,
name|int
name|sleep_flag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_request_polled
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_get_bios_pg3
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|Mpi2ConfigReply_t
modifier|*
name|mpi_reply
parameter_list|,
name|Mpi2BiosPage3_t
modifier|*
name|config_page
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_get_raid_volume_pg0
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|Mpi2ConfigReply_t
modifier|*
name|mpi_reply
parameter_list|,
name|Mpi2RaidVolPage0_t
modifier|*
name|config_page
parameter_list|,
name|u32
name|page_address
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_get_ioc_pg8
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|Mpi2ConfigReply_t
modifier|*
parameter_list|,
name|Mpi2IOCPage8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_get_man_pg10
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|Mpi2ConfigReply_t
modifier|*
name|mpi_reply
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_get_sas_device_pg0
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|Mpi2ConfigReply_t
modifier|*
parameter_list|,
name|Mpi2SasDevicePage0_t
modifier|*
parameter_list|,
name|u32
parameter_list|,
name|u16
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_get_dpm_pg0
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|Mpi2ConfigReply_t
modifier|*
parameter_list|,
name|Mpi2DriverMappingPage0_t
modifier|*
parameter_list|,
name|u16
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_get_raid_volume_pg1
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|Mpi2ConfigReply_t
modifier|*
name|mpi_reply
parameter_list|,
name|Mpi2RaidVolPage1_t
modifier|*
name|config_page
parameter_list|,
name|u32
name|form
parameter_list|,
name|u16
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_get_volume_wwid
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|u16
name|volume_handle
parameter_list|,
name|u64
modifier|*
name|wwid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_get_raid_pd_pg0
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|Mpi2ConfigReply_t
modifier|*
name|mpi_reply
parameter_list|,
name|Mpi2RaidPhysDiskPage0_t
modifier|*
name|config_page
parameter_list|,
name|u32
name|page_address
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpssas_ir_shutdown
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_reinit
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpssas_handle_reinit
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_base_static_config_pages
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_wd_config_pages
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_mapping_initialize
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_mapping_topology_change_event
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|Mpi2EventDataSasTopologyChangeList_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_mapping_is_reinit_required
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_mapping_free_memory
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_config_set_dpm_pg0
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|Mpi2ConfigReply_t
modifier|*
parameter_list|,
name|Mpi2DriverMappingPage0_t
modifier|*
parameter_list|,
name|u16
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_mapping_exit
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_mapping_check_devices
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_mapping_allocate_memory
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|mps_mapping_get_sas_id
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|u16
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|mps_mapping_get_sas_id_from_handle
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|u16
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|mps_mapping_get_raid_id
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|u64
name|wwid
parameter_list|,
name|u16
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|mps_mapping_get_raid_id_from_handle
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|u16
name|volHandle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_mapping_enclosure_dev_status_change_event
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|Mpi2EventDataSasEnclDevStatusChange_t
modifier|*
name|event_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_mapping_ir_config_change_event
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|Mpi2EventDataIrConfigChangeList_t
modifier|*
name|event_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpssas_evt_handler
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|uintptr_t
name|data
parameter_list|,
name|MPI2_EVENT_NOTIFICATION_REPLY
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpssas_prepare_remove
parameter_list|(
name|struct
name|mpssas_softc
modifier|*
name|sassc
parameter_list|,
name|uint16_t
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpssas_prepare_volume_remove
parameter_list|(
name|struct
name|mpssas_softc
modifier|*
name|sassc
parameter_list|,
name|uint16_t
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpssas_startup
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mpssas_target
modifier|*
name|mpssas_find_target_by_handle
parameter_list|(
name|struct
name|mpssas_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpssas_realloc_targets
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|int
name|maxtargets
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mps_command
modifier|*
name|mpssas_alloc_tm
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpssas_free_tm
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_command
modifier|*
name|tm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpssas_release_simq_reinit
parameter_list|(
name|struct
name|mpssas_softc
modifier|*
name|sassc
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|SYSCTL_DECL
argument_list|(
name|_hw_mps
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/* Compatibility shims for different OS versions */
end_comment

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|800001
end_if

begin_define
define|#
directive|define
name|mps_kproc_create
parameter_list|(
name|func
parameter_list|,
name|farg
parameter_list|,
name|proc_ptr
parameter_list|,
name|flags
parameter_list|,
name|stackpgs
parameter_list|,
name|fmtstr
parameter_list|,
name|arg
parameter_list|)
define|\
value|kproc_create(func, farg, proc_ptr, flags, stackpgs, fmtstr, arg)
end_define

begin_define
define|#
directive|define
name|mps_kproc_exit
parameter_list|(
name|arg
parameter_list|)
value|kproc_exit(arg)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|mps_kproc_create
parameter_list|(
name|func
parameter_list|,
name|farg
parameter_list|,
name|proc_ptr
parameter_list|,
name|flags
parameter_list|,
name|stackpgs
parameter_list|,
name|fmtstr
parameter_list|,
name|arg
parameter_list|)
define|\
value|kthread_create(func, farg, proc_ptr, flags, stackpgs, fmtstr, arg)
end_define

begin_define
define|#
directive|define
name|mps_kproc_exit
parameter_list|(
name|arg
parameter_list|)
value|kthread_exit(arg)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|CAM_PRIORITY_XPT
argument_list|)
end_if

begin_define
define|#
directive|define
name|MPS_PRIORITY_XPT
value|CAM_PRIORITY_XPT
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|MPS_PRIORITY_XPT
value|5
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|<
literal|800107
end_if

begin_comment
comment|// Prior to FreeBSD-8.0 scp3_flags was not defined.
end_comment

begin_define
define|#
directive|define
name|spc3_flags
value|reserved
end_define

begin_define
define|#
directive|define
name|SPC3_SID_PROTECT
value|0x01
end_define

begin_define
define|#
directive|define
name|SPC3_SID_3PC
value|0x08
end_define

begin_define
define|#
directive|define
name|SPC3_SID_TPGS_MASK
value|0x30
end_define

begin_define
define|#
directive|define
name|SPC3_SID_TPGS_IMPLICIT
value|0x10
end_define

begin_define
define|#
directive|define
name|SPC3_SID_TPGS_EXPLICIT
value|0x20
end_define

begin_define
define|#
directive|define
name|SPC3_SID_ACC
value|0x40
end_define

begin_define
define|#
directive|define
name|SPC3_SID_SCCS
value|0x80
end_define

begin_define
define|#
directive|define
name|CAM_PRIORITY_NORMAL
value|CAM_PRIORITY_NONE
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

