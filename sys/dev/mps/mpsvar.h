begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2009 Yahoo! Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MPSVAR_H
end_ifndef

begin_define
define|#
directive|define
name|_MPSVAR_H
end_define

begin_define
define|#
directive|define
name|MPS_DB_MAX_WAIT
value|2500
end_define

begin_define
define|#
directive|define
name|MPS_REQ_FRAMES
value|1024
end_define

begin_define
define|#
directive|define
name|MPS_EVT_REPLY_FRAMES
value|32
end_define

begin_define
define|#
directive|define
name|MPS_REPLY_FRAMES
value|MPS_REQ_FRAMES
end_define

begin_define
define|#
directive|define
name|MPS_CHAIN_FRAMES
value|1024
end_define

begin_define
define|#
directive|define
name|MPS_SENSE_LEN
value|SSD_FULL_SIZE
end_define

begin_define
define|#
directive|define
name|MPS_MSI_COUNT
value|1
end_define

begin_define
define|#
directive|define
name|MPS_SGE64_SIZE
value|12
end_define

begin_define
define|#
directive|define
name|MPS_SGE32_SIZE
value|8
end_define

begin_define
define|#
directive|define
name|MPS_SGC_SIZE
value|8
end_define

begin_define
define|#
directive|define
name|MPS_PERIODIC_DELAY
value|1
end_define

begin_comment
comment|/* 1 second heartbeat/watchdog check */
end_comment

begin_struct_decl
struct_decl|struct
name|mps_softc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mps_command
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mpssas_softc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mpssas_target
struct_decl|;
end_struct_decl

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_MPT2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|mps_evt_callback_t
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|uintptr_t
parameter_list|,
name|MPI2_EVENT_NOTIFICATION_REPLY
modifier|*
name|reply
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|mps_command_callback_t
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|mps_chain
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mps_chain
argument_list|)
name|chain_link
expr_stmt|;
name|MPI2_SGE_IO_UNION
modifier|*
name|chain
decl_stmt|;
name|uint32_t
name|chain_busaddr
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This needs to be at least 2 to support SMP passthrough.  */
end_comment

begin_define
define|#
directive|define
name|MPS_IOVEC_COUNT
value|2
end_define

begin_struct
struct|struct
name|mps_command
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mps_command
argument_list|)
name|cm_link
expr_stmt|;
name|struct
name|mps_softc
modifier|*
name|cm_sc
decl_stmt|;
name|void
modifier|*
name|cm_data
decl_stmt|;
name|u_int
name|cm_length
decl_stmt|;
name|struct
name|uio
name|cm_uio
decl_stmt|;
name|struct
name|iovec
name|cm_iovec
index|[
name|MPS_IOVEC_COUNT
index|]
decl_stmt|;
name|u_int
name|cm_max_segs
decl_stmt|;
name|u_int
name|cm_sglsize
decl_stmt|;
name|MPI2_SGE_IO_UNION
modifier|*
name|cm_sge
decl_stmt|;
name|uint8_t
modifier|*
name|cm_req
decl_stmt|;
name|uint8_t
modifier|*
name|cm_reply
decl_stmt|;
name|uint32_t
name|cm_reply_data
decl_stmt|;
name|mps_command_callback_t
modifier|*
name|cm_complete
decl_stmt|;
name|void
modifier|*
name|cm_complete_data
decl_stmt|;
name|struct
name|mpssas_target
modifier|*
name|cm_targ
decl_stmt|;
name|MPI2_REQUEST_DESCRIPTOR_UNION
name|cm_desc
decl_stmt|;
name|u_int
name|cm_flags
decl_stmt|;
define|#
directive|define
name|MPS_CM_FLAGS_POLLED
value|(1<< 0)
define|#
directive|define
name|MPS_CM_FLAGS_COMPLETE
value|(1<< 1)
define|#
directive|define
name|MPS_CM_FLAGS_SGE_SIMPLE
value|(1<< 2)
define|#
directive|define
name|MPS_CM_FLAGS_DATAOUT
value|(1<< 3)
define|#
directive|define
name|MPS_CM_FLAGS_DATAIN
value|(1<< 4)
define|#
directive|define
name|MPS_CM_FLAGS_WAKEUP
value|(1<< 5)
define|#
directive|define
name|MPS_CM_FLAGS_ACTIVE
value|(1<< 6)
define|#
directive|define
name|MPS_CM_FLAGS_USE_UIO
value|(1<< 7)
define|#
directive|define
name|MPS_CM_FLAGS_SMP_PASS
value|(1<< 8)
define|#
directive|define
name|MPS_CM_FLAGS_CHAIN_FAILED
value|(1<< 9)
define|#
directive|define
name|MPS_CM_FLAGS_ERROR_MASK
value|MPS_CM_FLAGS_CHAIN_FAILED
name|u_int
name|cm_state
decl_stmt|;
define|#
directive|define
name|MPS_CM_STATE_FREE
value|0
define|#
directive|define
name|MPS_CM_STATE_BUSY
value|1
define|#
directive|define
name|MPS_CM_STATE_TIMEDOUT
value|2
name|bus_dmamap_t
name|cm_dmamap
decl_stmt|;
name|struct
name|scsi_sense_data
modifier|*
name|cm_sense
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_chain
argument_list|)
name|cm_chain_list
expr_stmt|;
name|uint32_t
name|cm_req_busaddr
decl_stmt|;
name|uint32_t
name|cm_sense_busaddr
decl_stmt|;
name|struct
name|callout
name|cm_callout
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mps_event_handle
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mps_event_handle
argument_list|)
name|eh_list
expr_stmt|;
name|mps_evt_callback_t
modifier|*
name|callback
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
name|uint8_t
name|mask
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mps_softc
block|{
name|device_t
name|mps_dev
decl_stmt|;
name|struct
name|cdev
modifier|*
name|mps_cdev
decl_stmt|;
name|u_int
name|mps_flags
decl_stmt|;
define|#
directive|define
name|MPS_FLAGS_INTX
value|(1<< 0)
define|#
directive|define
name|MPS_FLAGS_MSI
value|(1<< 1)
define|#
directive|define
name|MPS_FLAGS_BUSY
value|(1<< 2)
define|#
directive|define
name|MPS_FLAGS_SHUTDOWN
value|(1<< 3)
define|#
directive|define
name|MPS_FLAGS_ATTACH_DONE
value|(1<< 4)
name|u_int
name|mps_debug
decl_stmt|;
name|u_int
name|allow_multiple_tm_cmds
decl_stmt|;
name|int
name|tm_cmds_active
decl_stmt|;
name|int
name|io_cmds_active
decl_stmt|;
name|int
name|io_cmds_highwater
decl_stmt|;
name|int
name|chain_free
decl_stmt|;
name|int
name|chain_free_lowwater
decl_stmt|;
name|uint64_t
name|chain_alloc_fail
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|sysctl_ctx
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|sysctl_tree
decl_stmt|;
name|struct
name|mps_command
modifier|*
name|commands
decl_stmt|;
name|struct
name|mps_chain
modifier|*
name|chains
decl_stmt|;
name|struct
name|callout
name|periodic
decl_stmt|;
name|struct
name|mpssas_softc
modifier|*
name|sassc
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_command
argument_list|)
name|req_list
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_chain
argument_list|)
name|chain_list
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_command
argument_list|)
name|tm_list
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_command
argument_list|)
name|io_list
expr_stmt|;
name|int
name|replypostindex
decl_stmt|;
name|int
name|replyfreeindex
decl_stmt|;
name|struct
name|resource
modifier|*
name|mps_regs_resource
decl_stmt|;
name|bus_space_handle_t
name|mps_bhandle
decl_stmt|;
name|bus_space_tag_t
name|mps_btag
decl_stmt|;
name|int
name|mps_regs_rid
decl_stmt|;
name|bus_dma_tag_t
name|mps_parent_dmat
decl_stmt|;
name|bus_dma_tag_t
name|buffer_dmat
decl_stmt|;
name|MPI2_IOC_FACTS_REPLY
modifier|*
name|facts
decl_stmt|;
name|MPI2_PORT_FACTS_REPLY
modifier|*
name|pfacts
decl_stmt|;
name|int
name|num_reqs
decl_stmt|;
name|int
name|num_replies
decl_stmt|;
name|int
name|fqdepth
decl_stmt|;
comment|/* Free queue */
name|int
name|pqdepth
decl_stmt|;
comment|/* Post queue */
name|uint8_t
name|event_mask
index|[
literal|16
index|]
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mps_event_handle
argument_list|)
name|event_list
expr_stmt|;
name|struct
name|mps_event_handle
modifier|*
name|mps_log_eh
decl_stmt|;
name|struct
name|mtx
name|mps_mtx
decl_stmt|;
name|struct
name|intr_config_hook
name|mps_ich
decl_stmt|;
name|struct
name|resource
modifier|*
name|mps_irq
index|[
name|MPS_MSI_COUNT
index|]
decl_stmt|;
name|void
modifier|*
name|mps_intrhand
index|[
name|MPS_MSI_COUNT
index|]
decl_stmt|;
name|int
name|mps_irq_rid
index|[
name|MPS_MSI_COUNT
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|req_frames
decl_stmt|;
name|bus_addr_t
name|req_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|req_dmat
decl_stmt|;
name|bus_dmamap_t
name|req_map
decl_stmt|;
name|uint8_t
modifier|*
name|reply_frames
decl_stmt|;
name|bus_addr_t
name|reply_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|reply_dmat
decl_stmt|;
name|bus_dmamap_t
name|reply_map
decl_stmt|;
name|struct
name|scsi_sense_data
modifier|*
name|sense_frames
decl_stmt|;
name|bus_addr_t
name|sense_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|sense_dmat
decl_stmt|;
name|bus_dmamap_t
name|sense_map
decl_stmt|;
name|uint8_t
modifier|*
name|chain_frames
decl_stmt|;
name|bus_addr_t
name|chain_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|chain_dmat
decl_stmt|;
name|bus_dmamap_t
name|chain_map
decl_stmt|;
name|MPI2_REPLY_DESCRIPTORS_UNION
modifier|*
name|post_queue
decl_stmt|;
name|bus_addr_t
name|post_busaddr
decl_stmt|;
name|uint32_t
modifier|*
name|free_queue
decl_stmt|;
name|bus_addr_t
name|free_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|queues_dmat
decl_stmt|;
name|bus_dmamap_t
name|queues_map
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mps_config_params
block|{
name|MPI2_CONFIG_EXT_PAGE_HEADER_UNION
name|hdr
decl_stmt|;
name|u_int
name|action
decl_stmt|;
name|u_int
name|page_address
decl_stmt|;
comment|/* Attributes, not a phys address */
name|u_int
name|status
decl_stmt|;
name|void
modifier|*
name|buffer
decl_stmt|;
name|u_int
name|length
decl_stmt|;
name|int
name|timeout
decl_stmt|;
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_config_params
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|cbdata
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|uint32_t
name|mps_regread
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
block|{
return|return
operator|(
name|bus_space_read_4
argument_list|(
name|sc
operator|->
name|mps_btag
argument_list|,
name|sc
operator|->
name|mps_bhandle
argument_list|,
name|offset
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_regwrite
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|uint32_t
name|offset
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|bus_space_write_4
argument_list|(
name|sc
operator|->
name|mps_btag
argument_list|,
name|sc
operator|->
name|mps_bhandle
argument_list|,
name|offset
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_free_reply
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|uint32_t
name|busaddr
parameter_list|)
block|{
if|if
condition|(
operator|++
name|sc
operator|->
name|replyfreeindex
operator|>=
name|sc
operator|->
name|fqdepth
condition|)
name|sc
operator|->
name|replyfreeindex
operator|=
literal|0
expr_stmt|;
name|sc
operator|->
name|free_queue
index|[
name|sc
operator|->
name|replyfreeindex
index|]
operator|=
name|busaddr
expr_stmt|;
name|mps_regwrite
argument_list|(
name|sc
argument_list|,
name|MPI2_REPLY_FREE_HOST_INDEX_OFFSET
argument_list|,
name|sc
operator|->
name|replyfreeindex
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mps_chain
operator|*
name|mps_alloc_chain
argument_list|(
argument|struct mps_softc *sc
argument_list|)
block|{ 	struct
name|mps_chain
operator|*
name|chain
block|;
if|if
condition|(
operator|(
name|chain
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sc
operator|->
name|chain_list
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sc
operator|->
name|chain_list
argument_list|,
name|chain
argument_list|,
name|chain_link
argument_list|)
expr_stmt|;
name|sc
operator|->
name|chain_free
operator|--
expr_stmt|;
if|if
condition|(
name|sc
operator|->
name|chain_free
operator|<
name|sc
operator|->
name|chain_free_lowwater
condition|)
name|sc
operator|->
name|chain_free_lowwater
operator|=
name|sc
operator|->
name|chain_free
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|sc
operator|->
name|chain_alloc_fail
operator|++
expr_stmt|;
end_else

begin_return
return|return
operator|(
name|chain
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|void
name|mps_free_chain
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_chain
modifier|*
name|chain
parameter_list|)
block|{
if|#
directive|if
literal|0
block|bzero(chain->chain, 128);
endif|#
directive|endif
name|sc
operator|->
name|chain_free
operator|++
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sc
operator|->
name|chain_list
argument_list|,
name|chain
argument_list|,
name|chain_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_free_command
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|)
block|{
name|struct
name|mps_chain
modifier|*
name|chain
decl_stmt|,
modifier|*
name|chain_temp
decl_stmt|;
if|if
condition|(
name|cm
operator|->
name|cm_reply
operator|!=
name|NULL
condition|)
block|{
name|mps_free_reply
argument_list|(
name|sc
argument_list|,
name|cm
operator|->
name|cm_reply_data
argument_list|)
expr_stmt|;
name|cm
operator|->
name|cm_reply
operator|=
name|NULL
expr_stmt|;
block|}
name|cm
operator|->
name|cm_flags
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_complete
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_complete_data
operator|=
name|NULL
expr_stmt|;
name|cm
operator|->
name|cm_targ
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_max_segs
operator|=
literal|0
expr_stmt|;
name|cm
operator|->
name|cm_state
operator|=
name|MPS_CM_STATE_FREE
expr_stmt|;
name|TAILQ_FOREACH_SAFE
argument_list|(
argument|chain
argument_list|,
argument|&cm->cm_chain_list
argument_list|,
argument|chain_link
argument_list|,
argument|chain_temp
argument_list|)
block|{
name|TAILQ_REMOVE
argument_list|(
operator|&
name|cm
operator|->
name|cm_chain_list
argument_list|,
name|chain
argument_list|,
name|chain_link
argument_list|)
expr_stmt|;
name|mps_free_chain
argument_list|(
name|sc
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sc
operator|->
name|req_list
argument_list|,
name|cm
argument_list|,
name|cm_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mps_command
operator|*
name|mps_alloc_command
argument_list|(
argument|struct mps_softc *sc
argument_list|)
block|{ 	struct
name|mps_command
operator|*
name|cm
block|;
name|cm
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sc
operator|->
name|req_list
argument_list|)
block|;
if|if
condition|(
name|cm
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sc
operator|->
name|req_list
argument_list|,
name|cm
argument_list|,
name|cm_link
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|KASSERT
argument_list|(
name|cm
operator|->
name|cm_state
operator|==
name|MPS_CM_STATE_FREE
argument_list|,
operator|(
literal|"mps: Allocating busy command\n"
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cm
operator|->
name|cm_state
operator|=
name|MPS_CM_STATE_BUSY
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|cm
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|void
name|mps_lock
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|sc
operator|->
name|mps_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_unlock
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
block|{
name|mtx_unlock
argument_list|(
operator|&
name|sc
operator|->
name|mps_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|MPS_INFO
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|MPS_TRACE
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|MPS_FAULT
value|(1<< 2)
end_define

begin_define
define|#
directive|define
name|MPS_EVENT
value|(1<< 3)
end_define

begin_define
define|#
directive|define
name|MPS_LOG
value|(1<< 4)
end_define

begin_define
define|#
directive|define
name|mps_printf
parameter_list|(
name|sc
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|device_printf((sc)->mps_dev, ##args)
end_define

begin_define
define|#
directive|define
name|mps_dprint
parameter_list|(
name|sc
parameter_list|,
name|level
parameter_list|,
name|msg
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|do {							\ 	if (sc->mps_debug& level)			\ 		device_printf(sc->mps_dev, msg, ##args);	\ } while (0)
end_define

begin_define
define|#
directive|define
name|mps_dprint_field
parameter_list|(
name|sc
parameter_list|,
name|level
parameter_list|,
name|msg
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|do {								\ 	if (sc->mps_debug& level)				\ 		printf("\t" msg, ##args);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|MPS_PRINTFIELD_START
parameter_list|(
name|sc
parameter_list|,
name|tag
modifier|...
parameter_list|)
define|\
value|mps_dprint((sc), MPS_INFO, ##tag);	\ 	mps_dprint_field((sc), MPS_INFO, ":\n")
end_define

begin_define
define|#
directive|define
name|MPS_PRINTFIELD_END
parameter_list|(
name|sc
parameter_list|,
name|tag
parameter_list|)
define|\
value|mps_dprint((sc), MPS_INFO, tag "\n")
end_define

begin_define
define|#
directive|define
name|MPS_PRINTFIELD
parameter_list|(
name|sc
parameter_list|,
name|facts
parameter_list|,
name|attr
parameter_list|,
name|fmt
parameter_list|)
define|\
value|mps_dprint_field((sc), MPS_INFO, #attr ": " #fmt "\n", (facts)->attr)
end_define

begin_define
define|#
directive|define
name|MPS_EVENTFIELD_START
parameter_list|(
name|sc
parameter_list|,
name|tag
modifier|...
parameter_list|)
define|\
value|mps_dprint((sc), MPS_EVENT, ##tag);	\ 	mps_dprint_field((sc), MPS_EVENT, ":\n")
end_define

begin_define
define|#
directive|define
name|MPS_EVENTFIELD
parameter_list|(
name|sc
parameter_list|,
name|facts
parameter_list|,
name|attr
parameter_list|,
name|fmt
parameter_list|)
define|\
value|mps_dprint_field((sc), MPS_EVENT, #attr ": " #fmt "\n", (facts)->attr)
end_define

begin_function
specifier|static
name|__inline
name|void
name|mps_from_u64
parameter_list|(
name|uint64_t
name|data
parameter_list|,
name|U64
modifier|*
name|mps
parameter_list|)
block|{
operator|(
name|mps
operator|)
operator|->
name|High
operator|=
call|(
name|uint32_t
call|)
argument_list|(
operator|(
name|data
operator|)
operator|>>
literal|32
argument_list|)
expr_stmt|;
operator|(
name|mps
operator|)
operator|->
name|Low
operator|=
call|(
name|uint32_t
call|)
argument_list|(
operator|(
name|data
operator|)
operator|&
literal|0xffffffff
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint64_t
name|mps_to_u64
parameter_list|(
name|U64
modifier|*
name|data
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|data
operator|->
name|High
operator|<<
literal|32
operator|)
operator||
name|data
operator|->
name|Low
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_mask_intr
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
block|{
name|uint32_t
name|mask
decl_stmt|;
name|mask
operator|=
name|mps_regread
argument_list|(
name|sc
argument_list|,
name|MPI2_HOST_INTERRUPT_MASK_OFFSET
argument_list|)
expr_stmt|;
name|mask
operator||=
name|MPI2_HIM_REPLY_INT_MASK
expr_stmt|;
name|mps_regwrite
argument_list|(
name|sc
argument_list|,
name|MPI2_HOST_INTERRUPT_MASK_OFFSET
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mps_unmask_intr
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
block|{
name|uint32_t
name|mask
decl_stmt|;
name|mask
operator|=
name|mps_regread
argument_list|(
name|sc
argument_list|,
name|MPI2_HOST_INTERRUPT_MASK_OFFSET
argument_list|)
expr_stmt|;
name|mask
operator|&=
operator|~
name|MPI2_HIM_REPLY_INT_MASK
expr_stmt|;
name|mps_regwrite
argument_list|(
name|sc
argument_list|,
name|MPI2_HOST_INTERRUPT_MASK_OFFSET
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|int
name|mps_pci_setup_interrupts
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_attach
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_free
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_intr
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_intr_msi
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_intr_locked
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_register_events
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|,
name|mps_evt_callback_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|mps_event_handle
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_update_events
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_event_handle
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_deregister_events
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_event_handle
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_request_polled
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_enqueue_request
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_command
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_push_sge
parameter_list|(
name|struct
name|mps_command
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_add_dmaseg
parameter_list|(
name|struct
name|mps_command
modifier|*
parameter_list|,
name|vm_paddr_t
parameter_list|,
name|size_t
parameter_list|,
name|u_int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_attach_sas
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_detach_sas
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_map_command
parameter_list|(
name|struct
name|mps_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_read_config_page
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_config_params
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_write_config_page
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|,
name|struct
name|mps_config_params
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_memaddr_cb
parameter_list|(
name|void
modifier|*
parameter_list|,
name|bus_dma_segment_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpi_init_sge
parameter_list|(
name|struct
name|mps_command
modifier|*
name|cm
parameter_list|,
name|void
modifier|*
name|req
parameter_list|,
name|void
modifier|*
name|sge
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mps_attach_user
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mps_detach_user
parameter_list|(
name|struct
name|mps_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|SYSCTL_DECL
argument_list|(
name|_hw_mps
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

