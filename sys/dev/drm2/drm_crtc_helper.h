begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright Â© 2006 Keith Packard  * Copyright Â© 2007-2008 Dave Airlie  * Copyright Â© 2007-2008 Intel Corporation  *   Jesse Barnes<jesse.barnes@intel.com>  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * The DRM mode setting helper functions are common code for drivers to use if  * they wish.  Drivers are not forced to use this code in their  * implementations but it would be useful if they code they do use at least  * provides a consistent interface and operation to userspace  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__DRM_CRTC_HELPER_H__
end_ifndef

begin_define
define|#
directive|define
name|__DRM_CRTC_HELPER_H__
end_define

begin_enum
enum|enum
name|mode_set_atomic
block|{
name|LEAVE_ATOMIC_MODE_SET
block|,
name|ENTER_ATOMIC_MODE_SET
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|drm_crtc_helper_funcs
block|{
comment|/* 	 * Control power levels on the CRTC.  If the mode passed in is 	 * unsupported, the provider must use the next lowest power level. 	 */
name|void
function_decl|(
modifier|*
name|dpms
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|prepare
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|commit
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
comment|/* Provider can fixup or change mode timings before modeset occurs */
name|bool
function_decl|(
modifier|*
name|mode_fixup
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|)
function_decl|;
comment|/* Actually set the mode */
name|int
function_decl|(
modifier|*
name|mode_set
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|old_fb
parameter_list|)
function_decl|;
comment|/* Move the crtc on the current fb to the given position *optional* */
name|int
function_decl|(
modifier|*
name|mode_set_base
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|old_fb
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mode_set_base_atomic
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|enum
name|mode_set_atomic
parameter_list|)
function_decl|;
comment|/* reload the current crtc LUT */
name|void
function_decl|(
modifier|*
name|load_lut
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
comment|/* disable crtc when not in use - more explicit than dpms off */
name|void
function_decl|(
modifier|*
name|disable
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_encoder_helper_funcs
block|{
name|void
function_decl|(
modifier|*
name|dpms
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|save
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|restore
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
name|bool
function_decl|(
modifier|*
name|mode_fixup
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|prepare
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|commit
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|mode_set
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|)
function_decl|;
name|struct
name|drm_crtc
modifier|*
function_decl|(
modifier|*
name|get_crtc
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
comment|/* detect for DAC style encoders */
name|enum
name|drm_connector_status
function_decl|(
modifier|*
name|detect
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
comment|/* disable encoder when not in use - more explicit than dpms off */
name|void
function_decl|(
modifier|*
name|disable
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_connector_helper_funcs
block|{
name|int
function_decl|(
modifier|*
name|get_modes
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mode_valid
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
name|struct
name|drm_encoder
modifier|*
function_decl|(
modifier|*
name|best_encoder
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|int
name|drm_helper_probe_single_connector_modes
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|uint32_t
name|maxX
parameter_list|,
name|uint32_t
name|maxY
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_helper_disable_unused_functions
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_crtc_helper_set_config
parameter_list|(
name|struct
name|drm_mode_set
modifier|*
name|set
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|drm_crtc_helper_set_mode
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|old_fb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|drm_helper_crtc_in_use
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|drm_helper_encoder_in_use
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_helper_connector_dpms
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_helper_mode_fill_fb_struct
parameter_list|(
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|,
name|struct
name|drm_mode_fb_cmd2
modifier|*
name|mode_cmd
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|drm_crtc_helper_add
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
specifier|const
name|struct
name|drm_crtc_helper_funcs
modifier|*
name|funcs
parameter_list|)
block|{
name|crtc
operator|->
name|helper_private
operator|=
name|__DECONST
argument_list|(
name|void
operator|*
argument_list|,
name|funcs
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|drm_encoder_helper_add
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
specifier|const
name|struct
name|drm_encoder_helper_funcs
modifier|*
name|funcs
parameter_list|)
block|{
name|encoder
operator|->
name|helper_private
operator|=
name|__DECONST
argument_list|(
name|void
operator|*
argument_list|,
name|funcs
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|drm_connector_helper_add
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
specifier|const
name|struct
name|drm_connector_helper_funcs
modifier|*
name|funcs
parameter_list|)
block|{
name|connector
operator|->
name|helper_private
operator|=
name|__DECONST
argument_list|(
name|void
operator|*
argument_list|,
name|funcs
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
specifier|extern
name|int
name|drm_helper_resume_force_mode
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_kms_helper_poll_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_kms_helper_poll_fini
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_helper_hpd_irq_event
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_kms_helper_poll_disable
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_kms_helper_poll_enable
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|drm_fetch_cmdline_mode_from_kenv
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_cmdline_mode
modifier|*
name|cmdline_mode
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

