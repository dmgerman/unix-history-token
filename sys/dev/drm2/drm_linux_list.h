begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_linux_list.h -- linux list functions for the BSDs.  * Created: Mon Apr 7 14:30:16 1999 by anholt@FreeBSD.org  */
end_comment

begin_comment
comment|/*-  * Copyright 2003 Eric Anholt  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Eric Anholt<anholt@FreeBSD.org>  *  */
end_comment

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|_DRM_LINUX_LIST_H_
end_ifndef

begin_define
define|#
directive|define
name|_DRM_LINUX_LIST_H_
end_define

begin_struct
struct|struct
name|list_head
block|{
name|struct
name|list_head
modifier|*
name|next
decl_stmt|,
modifier|*
name|prev
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|list_entry
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
value|container_of(ptr,type,member)
end_define

begin_function
specifier|static
name|__inline__
name|void
name|INIT_LIST_HEAD
parameter_list|(
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
operator|(
name|head
operator|)
operator|->
name|next
operator|=
name|head
expr_stmt|;
operator|(
name|head
operator|)
operator|->
name|prev
operator|=
name|head
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|LIST_HEAD_INIT
parameter_list|(
name|name
parameter_list|)
value|{&(name),&(name) }
end_define

begin_define
define|#
directive|define
name|DRM_LIST_HEAD
parameter_list|(
name|name
parameter_list|)
define|\
value|struct list_head name = LIST_HEAD_INIT(name)
end_define

begin_function
specifier|static
name|__inline__
name|int
name|list_empty
parameter_list|(
specifier|const
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
return|return
operator|(
name|head
operator|)
operator|->
name|next
operator|==
name|head
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|list_add
parameter_list|(
name|struct
name|list_head
modifier|*
name|new
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
operator|(
name|head
operator|)
operator|->
name|next
operator|->
name|prev
operator|=
name|new
expr_stmt|;
operator|(
name|new
operator|)
operator|->
name|next
operator|=
operator|(
name|head
operator|)
operator|->
name|next
expr_stmt|;
operator|(
name|new
operator|)
operator|->
name|prev
operator|=
name|head
expr_stmt|;
operator|(
name|head
operator|)
operator|->
name|next
operator|=
name|new
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|list_add_tail
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
operator|(
name|entry
operator|)
operator|->
name|prev
operator|=
operator|(
name|head
operator|)
operator|->
name|prev
expr_stmt|;
operator|(
name|entry
operator|)
operator|->
name|next
operator|=
name|head
expr_stmt|;
operator|(
name|head
operator|)
operator|->
name|prev
operator|->
name|next
operator|=
name|entry
expr_stmt|;
operator|(
name|head
operator|)
operator|->
name|prev
operator|=
name|entry
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|list_del
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|)
block|{
operator|(
name|entry
operator|)
operator|->
name|next
operator|->
name|prev
operator|=
operator|(
name|entry
operator|)
operator|->
name|prev
expr_stmt|;
operator|(
name|entry
operator|)
operator|->
name|prev
operator|->
name|next
operator|=
operator|(
name|entry
operator|)
operator|->
name|next
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_replace
parameter_list|(
name|struct
name|list_head
modifier|*
name|old
parameter_list|,
name|struct
name|list_head
modifier|*
name|new
parameter_list|)
block|{
name|new
operator|->
name|next
operator|=
name|old
operator|->
name|next
expr_stmt|;
name|new
operator|->
name|next
operator|->
name|prev
operator|=
name|new
expr_stmt|;
name|new
operator|->
name|prev
operator|=
name|old
operator|->
name|prev
expr_stmt|;
name|new
operator|->
name|prev
operator|->
name|next
operator|=
name|new
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_move
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|list_del
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|list_add
argument_list|(
name|list
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_move_tail
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|list_del
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|list_add_tail
argument_list|(
name|list
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|list_del_init
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|)
block|{
operator|(
name|entry
operator|)
operator|->
name|next
operator|->
name|prev
operator|=
operator|(
name|entry
operator|)
operator|->
name|prev
expr_stmt|;
operator|(
name|entry
operator|)
operator|->
name|prev
operator|->
name|next
operator|=
operator|(
name|entry
operator|)
operator|->
name|next
expr_stmt|;
name|INIT_LIST_HEAD
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|list_for_each
parameter_list|(
name|entry
parameter_list|,
name|head
parameter_list|)
define|\
value|for (entry = (head)->next; entry != head; entry = (entry)->next)
end_define

begin_define
define|#
directive|define
name|list_for_each_prev
parameter_list|(
name|entry
parameter_list|,
name|head
parameter_list|)
define|\
value|for (entry = (head)->prev; entry != (head); \                 entry = entry->prev)
end_define

begin_define
define|#
directive|define
name|list_for_each_safe
parameter_list|(
name|entry
parameter_list|,
name|temp
parameter_list|,
name|head
parameter_list|)
define|\
value|for (entry = (head)->next, temp = (entry)->next;		\ 	entry != head; 						\ 	entry = temp, temp = entry->next)
end_define

begin_define
define|#
directive|define
name|list_for_each_entry
parameter_list|(
name|pos
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (pos = list_entry((head)->next, __typeof(*pos), member);	\&pos->member != (head);					 	\ 	pos = list_entry(pos->member.next, __typeof(*pos), member))
end_define

begin_define
define|#
directive|define
name|list_for_each_entry_continue_reverse
parameter_list|(
name|pos
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (pos = list_entry(pos->member.prev, __typeof(*pos), member);  \&pos->member != (head);    				\              pos = list_entry(pos->member.prev, __typeof(*pos), member))
end_define

begin_comment
comment|/**  * list_for_each_entry_safe - iterate over list of given type safe against removal of list entry  * @pos:        the type * to use as a loop cursor.  * @n:          another type * to use as temporary storage  * @head:       the head for your list.  * @member:     the name of the list_struct within the struct.  */
end_comment

begin_define
define|#
directive|define
name|list_for_each_entry_safe
parameter_list|(
name|pos
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (pos = list_entry((head)->next, __typeof(*pos), member),	\ 	    n = list_entry(pos->member.next, __typeof(*pos), member);	\&pos->member != (head);					\ 	    pos = n, n = list_entry(n->member.next, __typeof(*n), member))
end_define

begin_define
define|#
directive|define
name|list_for_each_entry_safe_from
parameter_list|(
name|pos
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (n = list_entry(pos->member.next, __typeof(*pos), member);		\&pos->member != (head);						\ 	     pos = n, n = list_entry(n->member.next, __typeof(*n), member))
end_define

begin_define
define|#
directive|define
name|list_first_entry
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|list_entry((ptr)->next, type, member)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|__list_splice
parameter_list|(
specifier|const
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|prev
parameter_list|,
name|struct
name|list_head
modifier|*
name|next
parameter_list|)
block|{
name|struct
name|list_head
modifier|*
name|first
init|=
name|list
operator|->
name|next
decl_stmt|;
name|struct
name|list_head
modifier|*
name|last
init|=
name|list
operator|->
name|prev
decl_stmt|;
name|first
operator|->
name|prev
operator|=
name|prev
expr_stmt|;
name|prev
operator|->
name|next
operator|=
name|first
expr_stmt|;
name|last
operator|->
name|next
operator|=
name|next
expr_stmt|;
name|next
operator|->
name|prev
operator|=
name|last
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_splice
parameter_list|(
specifier|const
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
if|if
condition|(
name|list_empty
argument_list|(
name|list
argument_list|)
condition|)
return|return;
name|__list_splice
argument_list|(
name|list
argument_list|,
name|head
argument_list|,
name|head
operator|->
name|next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|drm_list_sort
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|,
name|int
function_decl|(
modifier|*
name|cmp
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|list_head
modifier|*
name|a
parameter_list|,
name|struct
name|list_head
modifier|*
name|b
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* hlist, copied from sys/dev/ofed/linux/list.h */
end_comment

begin_struct
struct|struct
name|hlist_head
block|{
name|struct
name|hlist_node
modifier|*
name|first
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hlist_node
block|{
name|struct
name|hlist_node
modifier|*
name|next
decl_stmt|,
modifier|*
modifier|*
name|pprev
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|HLIST_HEAD_INIT
value|{ }
end_define

begin_define
define|#
directive|define
name|HLIST_HEAD
parameter_list|(
name|name
parameter_list|)
value|struct hlist_head name = HLIST_HEAD_INIT
end_define

begin_define
define|#
directive|define
name|INIT_HLIST_HEAD
parameter_list|(
name|head
parameter_list|)
value|(head)->first = NULL
end_define

begin_define
define|#
directive|define
name|INIT_HLIST_NODE
parameter_list|(
name|node
parameter_list|)
define|\
value|do {									\ 	(node)->next = NULL;						\ 	(node)->pprev = NULL;						\ } while (0)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|hlist_unhashed
parameter_list|(
specifier|const
name|struct
name|hlist_node
modifier|*
name|h
parameter_list|)
block|{
return|return
operator|!
name|h
operator|->
name|pprev
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hlist_empty
parameter_list|(
specifier|const
name|struct
name|hlist_head
modifier|*
name|h
parameter_list|)
block|{
return|return
operator|!
name|h
operator|->
name|first
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_del
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|->
name|next
condition|)
name|n
operator|->
name|next
operator|->
name|pprev
operator|=
name|n
operator|->
name|pprev
expr_stmt|;
operator|*
name|n
operator|->
name|pprev
operator|=
name|n
operator|->
name|next
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_del_init
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|)
block|{
if|if
condition|(
name|hlist_unhashed
argument_list|(
name|n
argument_list|)
condition|)
return|return;
name|hlist_del
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|INIT_HLIST_NODE
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_add_head
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|,
name|struct
name|hlist_head
modifier|*
name|h
parameter_list|)
block|{
name|n
operator|->
name|next
operator|=
name|h
operator|->
name|first
expr_stmt|;
if|if
condition|(
name|h
operator|->
name|first
condition|)
name|h
operator|->
name|first
operator|->
name|pprev
operator|=
operator|&
name|n
operator|->
name|next
expr_stmt|;
name|h
operator|->
name|first
operator|=
name|n
expr_stmt|;
name|n
operator|->
name|pprev
operator|=
operator|&
name|h
operator|->
name|first
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_add_before
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|,
name|struct
name|hlist_node
modifier|*
name|next
parameter_list|)
block|{
name|n
operator|->
name|pprev
operator|=
name|next
operator|->
name|pprev
expr_stmt|;
name|n
operator|->
name|next
operator|=
name|next
expr_stmt|;
name|next
operator|->
name|pprev
operator|=
operator|&
name|n
operator|->
name|next
expr_stmt|;
operator|*
operator|(
name|n
operator|->
name|pprev
operator|)
operator|=
name|n
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_add_after
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|,
name|struct
name|hlist_node
modifier|*
name|next
parameter_list|)
block|{
name|next
operator|->
name|next
operator|=
name|n
operator|->
name|next
expr_stmt|;
name|n
operator|->
name|next
operator|=
name|next
expr_stmt|;
name|next
operator|->
name|pprev
operator|=
operator|&
name|n
operator|->
name|next
expr_stmt|;
if|if
condition|(
name|next
operator|->
name|next
condition|)
name|next
operator|->
name|next
operator|->
name|pprev
operator|=
operator|&
name|next
operator|->
name|next
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_move_list
parameter_list|(
name|struct
name|hlist_head
modifier|*
name|old
parameter_list|,
name|struct
name|hlist_head
modifier|*
name|new
parameter_list|)
block|{
name|new
operator|->
name|first
operator|=
name|old
operator|->
name|first
expr_stmt|;
if|if
condition|(
name|new
operator|->
name|first
condition|)
name|new
operator|->
name|first
operator|->
name|pprev
operator|=
operator|&
name|new
operator|->
name|first
expr_stmt|;
name|old
operator|->
name|first
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|hlist_entry
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|field
parameter_list|)
value|container_of(ptr, type, field)
end_define

begin_define
define|#
directive|define
name|hlist_for_each
parameter_list|(
name|p
parameter_list|,
name|head
parameter_list|)
define|\
value|for (p = (head)->first; p; p = p->next)
end_define

begin_define
define|#
directive|define
name|hlist_for_each_safe
parameter_list|(
name|p
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|)
define|\
value|for (p = (head)->first; p&& ({ n = p->next; 1; }); p = n)
end_define

begin_define
define|#
directive|define
name|hlist_for_each_entry
parameter_list|(
name|tp
parameter_list|,
name|p
parameter_list|,
name|head
parameter_list|,
name|field
parameter_list|)
define|\
value|for (p = (head)->first;						\ 	    p ? (tp = hlist_entry(p, typeof(*tp), field)): NULL; p = p->next)
end_define

begin_define
define|#
directive|define
name|hlist_for_each_entry_continue
parameter_list|(
name|tp
parameter_list|,
name|p
parameter_list|,
name|field
parameter_list|)
define|\
value|for (p = (p)->next;						\ 	    p ? (tp = hlist_entry(p, typeof(*tp), field)): NULL; p = p->next)
end_define

begin_define
define|#
directive|define
name|hlist_for_each_entry_from
parameter_list|(
name|tp
parameter_list|,
name|p
parameter_list|,
name|field
parameter_list|)
define|\
value|for (; p ? (tp = hlist_entry(p, typeof(*tp), field)): NULL; p = p->next)
end_define

begin_define
define|#
directive|define
name|hlist_for_each_entry_safe
parameter_list|(
name|tpos
parameter_list|,
name|pos
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (pos = (head)->first;					 \ 	     (pos) != 0&& ({ n = (pos)->next; \ 		 tpos = hlist_entry((pos), typeof(*(tpos)), member); 1;}); \ 	     pos = (n))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DRM_LINUX_LIST_H_ */
end_comment

end_unit

