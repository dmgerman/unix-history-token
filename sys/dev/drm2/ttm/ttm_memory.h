begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**************************************************************************  *  * Copyright (c) 2006-2009 VMware, Inc., Palo Alto, CA., USA  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the  * "Software"), to deal in the Software without restriction, including  * without limitation the rights to use, copy, modify, merge, publish,  * distribute, sub license, and/or sell copies of the Software, and to  * permit persons to whom the Software is furnished to do so, subject to  * the following conditions:  *  * The above copyright notice and this permission notice (including the  * next paragraph) shall be included in all copies or substantial portions  * of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL  * THE COPYRIGHT HOLDERS, AUTHORS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,  * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE  * USE OR OTHER DEALINGS IN THE SOFTWARE.  *  **************************************************************************/
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TTM_MEMORY_H
end_ifndef

begin_define
define|#
directive|define
name|TTM_MEMORY_H
end_define

begin_comment
comment|/**  * struct ttm_mem_shrink - callback to shrink TTM memory usage.  *  * @do_shrink: The callback function.  *  * Arguments to the do_shrink functions are intended to be passed using  * inheritance. That is, the argument class derives from struct ttm_mem_shrink,  * and can be accessed using container_of().  */
end_comment

begin_struct
struct|struct
name|ttm_mem_shrink
block|{
name|int
function_decl|(
modifier|*
name|do_shrink
function_decl|)
parameter_list|(
name|struct
name|ttm_mem_shrink
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct ttm_mem_global - Global memory accounting structure.  *  * @shrink: A single callback to shrink TTM memory usage. Extend this  * to a linked list to be able to handle multiple callbacks when needed.  * @swap_queue: A workqueue to handle shrinking in low memory situations. We  * need a separate workqueue since it will spend a lot of time waiting  * for the GPU, and this will otherwise block other workqueue tasks(?)  * At this point we use only a single-threaded workqueue.  * @work: The workqueue callback for the shrink queue.  * @lock: Lock to protect the @shrink - and the memory accounting members,  * that is, essentially the whole structure with some exceptions.  * @zones: Array of pointers to accounting zones.  * @num_zones: Number of populated entries in the @zones array.  * @zone_kernel: Pointer to the kernel zone.  * @zone_highmem: Pointer to the highmem zone if there is one.  * @zone_dma32: Pointer to the dma32 zone if there is one.  *  * Note that this structure is not per device. It should be global for all  * graphics devices.  */
end_comment

begin_define
define|#
directive|define
name|TTM_MEM_MAX_ZONES
value|2
end_define

begin_struct_decl
struct_decl|struct
name|ttm_mem_zone
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ttm_mem_global
block|{
name|u_int
name|kobj_ref
decl_stmt|;
name|struct
name|ttm_mem_shrink
modifier|*
name|shrink
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|swap_queue
decl_stmt|;
name|struct
name|task
name|work
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
name|struct
name|ttm_mem_zone
modifier|*
name|zones
index|[
name|TTM_MEM_MAX_ZONES
index|]
decl_stmt|;
name|unsigned
name|int
name|num_zones
decl_stmt|;
name|struct
name|ttm_mem_zone
modifier|*
name|zone_kernel
decl_stmt|;
name|struct
name|ttm_mem_zone
modifier|*
name|zone_dma32
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * ttm_mem_init_shrink - initialize a struct ttm_mem_shrink object  *  * @shrink: The object to initialize.  * @func: The callback function.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|ttm_mem_init_shrink
parameter_list|(
name|struct
name|ttm_mem_shrink
modifier|*
name|shrink
parameter_list|,
name|int
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|struct
name|ttm_mem_shrink
modifier|*
parameter_list|)
parameter_list|)
block|{
name|shrink
operator|->
name|do_shrink
operator|=
name|func
expr_stmt|;
block|}
end_function

begin_comment
comment|/**  * ttm_mem_register_shrink - register a struct ttm_mem_shrink object.  *  * @glob: The struct ttm_mem_global object to register with.  * @shrink: An initialized struct ttm_mem_shrink object to register.  *  * Returns:  * -EBUSY: There's already a callback registered. (May change).  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|ttm_mem_register_shrink
parameter_list|(
name|struct
name|ttm_mem_global
modifier|*
name|glob
parameter_list|,
name|struct
name|ttm_mem_shrink
modifier|*
name|shrink
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|glob
operator|->
name|lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|glob
operator|->
name|shrink
operator|!=
name|NULL
condition|)
block|{
name|mtx_unlock
argument_list|(
operator|&
name|glob
operator|->
name|lock
argument_list|)
expr_stmt|;
return|return
operator|-
name|EBUSY
return|;
block|}
name|glob
operator|->
name|shrink
operator|=
name|shrink
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|glob
operator|->
name|lock
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/**  * ttm_mem_unregister_shrink - unregister a struct ttm_mem_shrink object.  *  * @glob: The struct ttm_mem_global object to unregister from.  * @shrink: A previously registert struct ttm_mem_shrink object.  *  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|ttm_mem_unregister_shrink
parameter_list|(
name|struct
name|ttm_mem_global
modifier|*
name|glob
parameter_list|,
name|struct
name|ttm_mem_shrink
modifier|*
name|shrink
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|glob
operator|->
name|lock
argument_list|)
expr_stmt|;
name|MPASS
argument_list|(
name|glob
operator|->
name|shrink
operator|==
name|shrink
argument_list|)
expr_stmt|;
name|glob
operator|->
name|shrink
operator|=
name|NULL
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|glob
operator|->
name|lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_struct_decl
struct_decl|struct
name|vm_page
struct_decl|;
end_struct_decl

begin_function_decl
specifier|extern
name|int
name|ttm_mem_global_init
parameter_list|(
name|struct
name|ttm_mem_global
modifier|*
name|glob
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ttm_mem_global_release
parameter_list|(
name|struct
name|ttm_mem_global
modifier|*
name|glob
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ttm_mem_global_alloc
parameter_list|(
name|struct
name|ttm_mem_global
modifier|*
name|glob
parameter_list|,
name|uint64_t
name|memory
parameter_list|,
name|bool
name|no_wait
parameter_list|,
name|bool
name|interruptible
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ttm_mem_global_free
parameter_list|(
name|struct
name|ttm_mem_global
modifier|*
name|glob
parameter_list|,
name|uint64_t
name|amount
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ttm_mem_global_alloc_page
parameter_list|(
name|struct
name|ttm_mem_global
modifier|*
name|glob
parameter_list|,
name|struct
name|vm_page
modifier|*
name|page
parameter_list|,
name|bool
name|no_wait
parameter_list|,
name|bool
name|interruptible
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ttm_mem_global_free_page
parameter_list|(
name|struct
name|ttm_mem_global
modifier|*
name|glob
parameter_list|,
name|struct
name|vm_page
modifier|*
name|page
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|size_t
name|ttm_round_pot
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

