begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright Â© 2006 Keith Packard  * Copyright Â© 2007-2008 Dave Airlie  * Copyright Â© 2007-2008 Intel Corporation  *   Jesse Barnes<jesse.barnes@intel.com>  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__DRM_CRTC_H__
end_ifndef

begin_define
define|#
directive|define
name|__DRM_CRTC_H__
end_define

begin_include
include|#
directive|include
file|<dev/drm2/drm_gem_names.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/drm_fourcc.h>
end_include

begin_struct_decl
struct_decl|struct
name|drm_device
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|drm_mode_set
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|drm_framebuffer
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|i2c_adapter
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|DRM_MODE_OBJECT_CRTC
value|0xcccccccc
end_define

begin_define
define|#
directive|define
name|DRM_MODE_OBJECT_CONNECTOR
value|0xc0c0c0c0
end_define

begin_define
define|#
directive|define
name|DRM_MODE_OBJECT_ENCODER
value|0xe0e0e0e0
end_define

begin_define
define|#
directive|define
name|DRM_MODE_OBJECT_MODE
value|0xdededede
end_define

begin_define
define|#
directive|define
name|DRM_MODE_OBJECT_PROPERTY
value|0xb0b0b0b0
end_define

begin_define
define|#
directive|define
name|DRM_MODE_OBJECT_FB
value|0xfbfbfbfb
end_define

begin_define
define|#
directive|define
name|DRM_MODE_OBJECT_BLOB
value|0xbbbbbbbb
end_define

begin_define
define|#
directive|define
name|DRM_MODE_OBJECT_PLANE
value|0xeeeeeeee
end_define

begin_struct
struct|struct
name|drm_mode_object
block|{
name|uint32_t
name|id
decl_stmt|;
name|uint32_t
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Note on terminology:  here, for brevity and convenience, we refer to connector  * control chips as 'CRTCs'.  They can control any type of connector, VGA, LVDS,  * DVI, etc.  And 'screen' refers to the whole of the visible display, which  * may span multiple monitors (and therefore multiple CRTC and connector  * structures).  */
end_comment

begin_enum
enum|enum
name|drm_mode_status
block|{
name|MODE_OK
init|=
literal|0
block|,
comment|/* Mode OK */
name|MODE_HSYNC
block|,
comment|/* hsync out of range */
name|MODE_VSYNC
block|,
comment|/* vsync out of range */
name|MODE_H_ILLEGAL
block|,
comment|/* mode has illegal horizontal timings */
name|MODE_V_ILLEGAL
block|,
comment|/* mode has illegal horizontal timings */
name|MODE_BAD_WIDTH
block|,
comment|/* requires an unsupported linepitch */
name|MODE_NOMODE
block|,
comment|/* no mode with a maching name */
name|MODE_NO_INTERLACE
block|,
comment|/* interlaced mode not supported */
name|MODE_NO_DBLESCAN
block|,
comment|/* doublescan mode not supported */
name|MODE_NO_VSCAN
block|,
comment|/* multiscan mode not supported */
name|MODE_MEM
block|,
comment|/* insufficient video memory */
name|MODE_VIRTUAL_X
block|,
comment|/* mode width too large for specified virtual size */
name|MODE_VIRTUAL_Y
block|,
comment|/* mode height too large for specified virtual size */
name|MODE_MEM_VIRT
block|,
comment|/* insufficient video memory given virtual size */
name|MODE_NOCLOCK
block|,
comment|/* no fixed clock available */
name|MODE_CLOCK_HIGH
block|,
comment|/* clock required is too high */
name|MODE_CLOCK_LOW
block|,
comment|/* clock required is too low */
name|MODE_CLOCK_RANGE
block|,
comment|/* clock/mode isn't in a ClockRange */
name|MODE_BAD_HVALUE
block|,
comment|/* horizontal timing was out of range */
name|MODE_BAD_VVALUE
block|,
comment|/* vertical timing was out of range */
name|MODE_BAD_VSCAN
block|,
comment|/* VScan value out of range */
name|MODE_HSYNC_NARROW
block|,
comment|/* horizontal sync too narrow */
name|MODE_HSYNC_WIDE
block|,
comment|/* horizontal sync too wide */
name|MODE_HBLANK_NARROW
block|,
comment|/* horizontal blanking too narrow */
name|MODE_HBLANK_WIDE
block|,
comment|/* horizontal blanking too wide */
name|MODE_VSYNC_NARROW
block|,
comment|/* vertical sync too narrow */
name|MODE_VSYNC_WIDE
block|,
comment|/* vertical sync too wide */
name|MODE_VBLANK_NARROW
block|,
comment|/* vertical blanking too narrow */
name|MODE_VBLANK_WIDE
block|,
comment|/* vertical blanking too wide */
name|MODE_PANEL
block|,
comment|/* exceeds panel dimensions */
name|MODE_INTERLACE_WIDTH
block|,
comment|/* width too large for interlaced mode */
name|MODE_ONE_WIDTH
block|,
comment|/* only one width is supported */
name|MODE_ONE_HEIGHT
block|,
comment|/* only one height is supported */
name|MODE_ONE_SIZE
block|,
comment|/* only one resolution is supported */
name|MODE_NO_REDUCED
block|,
comment|/* monitor doesn't accept reduced blanking */
name|MODE_UNVERIFIED
init|=
operator|-
literal|3
block|,
comment|/* mode needs to reverified */
name|MODE_BAD
init|=
operator|-
literal|2
block|,
comment|/* unspecified reason */
name|MODE_ERROR
init|=
operator|-
literal|1
comment|/* error condition */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DRM_MODE_TYPE_CLOCK_CRTC_C
value|(DRM_MODE_TYPE_CLOCK_C | \ 				    DRM_MODE_TYPE_CRTC_C)
end_define

begin_define
define|#
directive|define
name|DRM_MODE
parameter_list|(
name|nm
parameter_list|,
name|t
parameter_list|,
name|c
parameter_list|,
name|hd
parameter_list|,
name|hss
parameter_list|,
name|hse
parameter_list|,
name|ht
parameter_list|,
name|hsk
parameter_list|,
name|vd
parameter_list|,
name|vss
parameter_list|,
name|vse
parameter_list|,
name|vt
parameter_list|,
name|vs
parameter_list|,
name|f
parameter_list|)
define|\
value|.name = nm, .status = 0, .type = (t), .clock = (c), \ 	.hdisplay = (hd), .hsync_start = (hss), .hsync_end = (hse), \ 	.htotal = (ht), .hskew = (hsk), .vdisplay = (vd), \ 	.vsync_start = (vss), .vsync_end = (vse), .vtotal = (vt), \ 	.vscan = (vs), .flags = (f), .vrefresh = 0
end_define

begin_define
define|#
directive|define
name|CRTC_INTERLACE_HALVE_V
value|0x1
end_define

begin_comment
comment|/* halve V values for interlacing */
end_comment

begin_struct
struct|struct
name|drm_display_mode
block|{
comment|/* Header */
name|struct
name|list_head
name|head
decl_stmt|;
name|struct
name|drm_mode_object
name|base
decl_stmt|;
name|char
name|name
index|[
name|DRM_DISPLAY_MODE_LEN
index|]
decl_stmt|;
name|int
name|connector_count
decl_stmt|;
name|enum
name|drm_mode_status
name|status
decl_stmt|;
name|int
name|type
decl_stmt|;
comment|/* Proposed mode values */
name|int
name|clock
decl_stmt|;
comment|/* in kHz */
name|int
name|hdisplay
decl_stmt|;
name|int
name|hsync_start
decl_stmt|;
name|int
name|hsync_end
decl_stmt|;
name|int
name|htotal
decl_stmt|;
name|int
name|hskew
decl_stmt|;
name|int
name|vdisplay
decl_stmt|;
name|int
name|vsync_start
decl_stmt|;
name|int
name|vsync_end
decl_stmt|;
name|int
name|vtotal
decl_stmt|;
name|int
name|vscan
decl_stmt|;
name|unsigned
name|int
name|flags
decl_stmt|;
comment|/* Addressable image size (may be 0 for projectors, etc.) */
name|int
name|width_mm
decl_stmt|;
name|int
name|height_mm
decl_stmt|;
comment|/* Actual mode we give to hw */
name|int
name|clock_index
decl_stmt|;
name|int
name|synth_clock
decl_stmt|;
name|int
name|crtc_hdisplay
decl_stmt|;
name|int
name|crtc_hblank_start
decl_stmt|;
name|int
name|crtc_hblank_end
decl_stmt|;
name|int
name|crtc_hsync_start
decl_stmt|;
name|int
name|crtc_hsync_end
decl_stmt|;
name|int
name|crtc_htotal
decl_stmt|;
name|int
name|crtc_hskew
decl_stmt|;
name|int
name|crtc_vdisplay
decl_stmt|;
name|int
name|crtc_vblank_start
decl_stmt|;
name|int
name|crtc_vblank_end
decl_stmt|;
name|int
name|crtc_vsync_start
decl_stmt|;
name|int
name|crtc_vsync_end
decl_stmt|;
name|int
name|crtc_vtotal
decl_stmt|;
name|int
name|crtc_hadjusted
decl_stmt|;
name|int
name|crtc_vadjusted
decl_stmt|;
comment|/* Driver private mode info */
name|int
name|private_size
decl_stmt|;
name|int
modifier|*
name|private
decl_stmt|;
name|int
name|private_flags
decl_stmt|;
name|int
name|vrefresh
decl_stmt|;
comment|/* in Hz */
name|int
name|hsync
decl_stmt|;
comment|/* in kHz */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|drm_connector_status
block|{
name|connector_status_connected
init|=
literal|1
block|,
name|connector_status_disconnected
init|=
literal|2
block|,
name|connector_status_unknown
init|=
literal|3
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|subpixel_order
block|{
name|SubPixelUnknown
init|=
literal|0
block|,
name|SubPixelHorizontalRGB
block|,
name|SubPixelHorizontalBGR
block|,
name|SubPixelVerticalRGB
block|,
name|SubPixelVerticalBGR
block|,
name|SubPixelNone
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|DRM_COLOR_FORMAT_RGB444
value|(1<<0)
end_define

begin_define
define|#
directive|define
name|DRM_COLOR_FORMAT_YCRCB444
value|(1<<1)
end_define

begin_define
define|#
directive|define
name|DRM_COLOR_FORMAT_YCRCB422
value|(1<<2)
end_define

begin_comment
comment|/*  * Describes a given display (e.g. CRT or flat panel) and its limitations.  */
end_comment

begin_struct
struct|struct
name|drm_display_info
block|{
name|char
name|name
index|[
name|DRM_DISPLAY_INFO_LEN
index|]
decl_stmt|;
comment|/* Physical size */
name|unsigned
name|int
name|width_mm
decl_stmt|;
name|unsigned
name|int
name|height_mm
decl_stmt|;
comment|/* Clock limits FIXME: storage format */
name|unsigned
name|int
name|min_vfreq
decl_stmt|,
name|max_vfreq
decl_stmt|;
name|unsigned
name|int
name|min_hfreq
decl_stmt|,
name|max_hfreq
decl_stmt|;
name|unsigned
name|int
name|pixel_clock
decl_stmt|;
name|unsigned
name|int
name|bpc
decl_stmt|;
name|enum
name|subpixel_order
name|subpixel_order
decl_stmt|;
name|u32
name|color_formats
decl_stmt|;
name|u8
name|cea_rev
decl_stmt|;
name|char
modifier|*
name|raw_edid
decl_stmt|;
comment|/* if any */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_framebuffer_funcs
block|{
name|void
function_decl|(
modifier|*
name|destroy
function_decl|)
parameter_list|(
name|struct
name|drm_framebuffer
modifier|*
name|framebuffer
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|create_handle
function_decl|)
parameter_list|(
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|,
name|unsigned
name|int
modifier|*
name|handle
parameter_list|)
function_decl|;
comment|/** 	 * Optinal callback for the dirty fb ioctl. 	 * 	 * Userspace can notify the driver via this callback 	 * that a area of the framebuffer has changed and should 	 * be flushed to the display hardware. 	 * 	 * See documentation in drm_mode.h for the struct 	 * drm_mode_fb_dirty_cmd for more information as all 	 * the semantics and arguments have a one to one mapping 	 * on this function. 	 */
name|int
function_decl|(
modifier|*
name|dirty
function_decl|)
parameter_list|(
name|struct
name|drm_framebuffer
modifier|*
name|framebuffer
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|,
name|unsigned
name|flags
parameter_list|,
name|unsigned
name|color
parameter_list|,
name|struct
name|drm_clip_rect
modifier|*
name|clips
parameter_list|,
name|unsigned
name|num_clips
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_framebuffer
block|{
name|struct
name|drm_device
modifier|*
name|dev
decl_stmt|;
name|struct
name|list_head
name|head
decl_stmt|;
name|struct
name|drm_mode_object
name|base
decl_stmt|;
specifier|const
name|struct
name|drm_framebuffer_funcs
modifier|*
name|funcs
decl_stmt|;
name|unsigned
name|int
name|pitches
index|[
literal|4
index|]
decl_stmt|;
name|unsigned
name|int
name|offsets
index|[
literal|4
index|]
decl_stmt|;
name|unsigned
name|int
name|width
decl_stmt|;
name|unsigned
name|int
name|height
decl_stmt|;
comment|/* depth can be 15 or 16 */
name|unsigned
name|int
name|depth
decl_stmt|;
name|int
name|bits_per_pixel
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|uint32_t
name|pixel_format
decl_stmt|;
comment|/* fourcc format */
name|struct
name|list_head
name|filp_head
decl_stmt|;
comment|/* if you are using the helper */
name|void
modifier|*
name|helper_private
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_property_blob
block|{
name|struct
name|drm_mode_object
name|base
decl_stmt|;
name|struct
name|list_head
name|head
decl_stmt|;
name|unsigned
name|int
name|length
decl_stmt|;
name|unsigned
name|char
name|data
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_property_enum
block|{
name|uint64_t
name|value
decl_stmt|;
name|struct
name|list_head
name|head
decl_stmt|;
name|char
name|name
index|[
name|DRM_PROP_NAME_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_property
block|{
name|struct
name|list_head
name|head
decl_stmt|;
name|struct
name|drm_mode_object
name|base
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|char
name|name
index|[
name|DRM_PROP_NAME_LEN
index|]
decl_stmt|;
name|uint32_t
name|num_values
decl_stmt|;
name|uint64_t
modifier|*
name|values
decl_stmt|;
name|struct
name|list_head
name|enum_blob_list
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|drm_crtc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|drm_connector
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|drm_encoder
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|drm_pending_vblank_event
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|drm_plane
struct_decl|;
end_struct_decl

begin_comment
comment|/**  * drm_crtc_funcs - control CRTCs for a given device  * @reset: reset CRTC after state has been invalidate (e.g. resume)  * @dpms: control display power levels  * @save: save CRTC state  * @resore: restore CRTC state  * @lock: lock the CRTC  * @unlock: unlock the CRTC  * @shadow_allocate: allocate shadow pixmap  * @shadow_create: create shadow pixmap for rotation support  * @shadow_destroy: free shadow pixmap  * @mode_fixup: fixup proposed mode  * @mode_set: set the desired mode on the CRTC  * @gamma_set: specify color ramp for CRTC  * @destroy: deinit and free object.  *  * The drm_crtc_funcs structure is the central CRTC management structure  * in the DRM.  Each CRTC controls one or more connectors (note that the name  * CRTC is simply historical, a CRTC may control LVDS, VGA, DVI, TV out, etc.  * connectors, not just CRTs).  *  * Each driver is responsible for filling out this structure at startup time,  * in addition to providing other modesetting features, like i2c and DDC  * bus accessors.  */
end_comment

begin_struct
struct|struct
name|drm_crtc_funcs
block|{
comment|/* Save CRTC state */
name|void
function_decl|(
modifier|*
name|save
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
comment|/* suspend? */
comment|/* Restore CRTC state */
name|void
function_decl|(
modifier|*
name|restore
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
comment|/* resume? */
comment|/* Reset CRTC state */
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
comment|/* cursor controls */
name|int
function_decl|(
modifier|*
name|cursor_set
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|,
name|uint32_t
name|handle
parameter_list|,
name|uint32_t
name|width
parameter_list|,
name|uint32_t
name|height
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|cursor_move
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
comment|/* Set gamma on the CRTC */
name|void
function_decl|(
modifier|*
name|gamma_set
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|u16
modifier|*
name|r
parameter_list|,
name|u16
modifier|*
name|g
parameter_list|,
name|u16
modifier|*
name|b
parameter_list|,
name|uint32_t
name|start
parameter_list|,
name|uint32_t
name|size
parameter_list|)
function_decl|;
comment|/* Object destroy routine */
name|void
function_decl|(
modifier|*
name|destroy
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_config
function_decl|)
parameter_list|(
name|struct
name|drm_mode_set
modifier|*
name|set
parameter_list|)
function_decl|;
comment|/* 	 * Flip to the given framebuffer.  This implements the page 	 * flip ioctl descibed in drm_mode.h, specifically, the 	 * implementation must return immediately and block all 	 * rendering to the current fb until the flip has completed. 	 * If userspace set the event flag in the ioctl, the event 	 * argument will point to an event to send back when the flip 	 * completes, otherwise it will be NULL. 	 */
name|int
function_decl|(
modifier|*
name|page_flip
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|,
name|struct
name|drm_pending_vblank_event
modifier|*
name|event
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * drm_crtc - central CRTC control structure  * @enabled: is this CRTC enabled?  * @x: x position on screen  * @y: y position on screen  * @funcs: CRTC control functions  *  * Each CRTC may have one or more connectors associated with it.  This structure  * allows the CRTC to be controlled.  */
end_comment

begin_struct
struct|struct
name|drm_crtc
block|{
name|struct
name|drm_device
modifier|*
name|dev
decl_stmt|;
name|struct
name|list_head
name|head
decl_stmt|;
name|struct
name|drm_mode_object
name|base
decl_stmt|;
comment|/* framebuffer the connector is currently bound to */
name|struct
name|drm_framebuffer
modifier|*
name|fb
decl_stmt|;
name|bool
name|enabled
decl_stmt|;
comment|/* Requested mode from modesetting. */
name|struct
name|drm_display_mode
name|mode
decl_stmt|;
comment|/* Programmed mode in hw, after adjustments for encoders, 	 * crtc, panel scaling etc. Needed for timestamping etc. 	 */
name|struct
name|drm_display_mode
name|hwmode
decl_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
specifier|const
name|struct
name|drm_crtc_funcs
modifier|*
name|funcs
decl_stmt|;
comment|/* CRTC gamma size for reporting to userspace */
name|uint32_t
name|gamma_size
decl_stmt|;
name|uint16_t
modifier|*
name|gamma_store
decl_stmt|;
comment|/* Constants needed for precise vblank and swap timestamping. */
name|int64_t
name|framedur_ns
decl_stmt|,
name|linedur_ns
decl_stmt|,
name|pixeldur_ns
decl_stmt|;
comment|/* if you are using the helper */
name|void
modifier|*
name|helper_private
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * drm_connector_funcs - control connectors on a given device  * @dpms: set power state (see drm_crtc_funcs above)  * @save: save connector state  * @restore: restore connector state  * @reset: reset connector after state has been invalidate (e.g. resume)  * @mode_valid: is this mode valid on the given connector?  * @mode_fixup: try to fixup proposed mode for this connector  * @mode_set: set this mode  * @detect: is this connector active?  * @get_modes: get mode list for this connector  * @set_property: property for this connector may need update  * @destroy: make object go away  * @force: notify the driver the connector is forced on  *  * Each CRTC may have one or more connectors attached to it.  The functions  * below allow the core DRM code to control connectors, enumerate available modes,  * etc.  */
end_comment

begin_struct
struct|struct
name|drm_connector_funcs
block|{
name|void
function_decl|(
modifier|*
name|dpms
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|save
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|restore
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
comment|/* Check to see if anything is attached to the connector. 	 * @force is set to false whilst polling, true when checking the 	 * connector due to user request. @force can be used by the driver 	 * to avoid expensive, destructive operations during automated 	 * probing. 	 */
name|enum
name|drm_connector_status
function_decl|(
modifier|*
name|detect
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|bool
name|force
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|fill_modes
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|uint32_t
name|max_width
parameter_list|,
name|uint32_t
name|max_height
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_property
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_property
modifier|*
name|property
parameter_list|,
name|uint64_t
name|val
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|destroy
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|force
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_encoder_funcs
block|{
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|destroy
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DRM_CONNECTOR_MAX_UMODES
value|16
end_define

begin_define
define|#
directive|define
name|DRM_CONNECTOR_MAX_PROPERTY
value|16
end_define

begin_define
define|#
directive|define
name|DRM_CONNECTOR_LEN
value|32
end_define

begin_define
define|#
directive|define
name|DRM_CONNECTOR_MAX_ENCODER
value|2
end_define

begin_comment
comment|/**  * drm_encoder - central DRM encoder structure  */
end_comment

begin_struct
struct|struct
name|drm_encoder
block|{
name|struct
name|drm_device
modifier|*
name|dev
decl_stmt|;
name|struct
name|list_head
name|head
decl_stmt|;
name|struct
name|drm_mode_object
name|base
decl_stmt|;
name|int
name|encoder_type
decl_stmt|;
name|uint32_t
name|possible_crtcs
decl_stmt|;
name|uint32_t
name|possible_clones
decl_stmt|;
name|struct
name|drm_crtc
modifier|*
name|crtc
decl_stmt|;
specifier|const
name|struct
name|drm_encoder_funcs
modifier|*
name|funcs
decl_stmt|;
name|void
modifier|*
name|helper_private
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|drm_connector_force
block|{
name|DRM_FORCE_UNSPECIFIED
block|,
name|DRM_FORCE_OFF
block|,
name|DRM_FORCE_ON
block|,
comment|/* force on analog part normally */
name|DRM_FORCE_ON_DIGITAL
block|,
comment|/* for DVI-I use digital connector */
block|}
enum|;
end_enum

begin_comment
comment|/* should we poll this connector for connects and disconnects */
end_comment

begin_comment
comment|/* hot plug detectable */
end_comment

begin_define
define|#
directive|define
name|DRM_CONNECTOR_POLL_HPD
value|(1<< 0)
end_define

begin_comment
comment|/* poll for connections */
end_comment

begin_define
define|#
directive|define
name|DRM_CONNECTOR_POLL_CONNECT
value|(1<< 1)
end_define

begin_comment
comment|/* can cleanly poll for disconnections without flickering the screen */
end_comment

begin_comment
comment|/* DACs should rarely do this without a lot of testing */
end_comment

begin_define
define|#
directive|define
name|DRM_CONNECTOR_POLL_DISCONNECT
value|(1<< 2)
end_define

begin_define
define|#
directive|define
name|MAX_ELD_BYTES
value|128
end_define

begin_comment
comment|/**  * drm_connector - central DRM connector control structure  * @crtc: CRTC this connector is currently connected to, NULL if none  * @interlace_allowed: can this connector handle interlaced modes?  * @doublescan_allowed: can this connector handle doublescan?  * @available_modes: modes available on this connector (from get_modes() + user)  * @initial_x: initial x position for this connector  * @initial_y: initial y position for this connector  * @status: connector connected?  * @funcs: connector control functions  *  * Each connector may be connected to one or more CRTCs, or may be clonable by  * another connector if they can share a CRTC.  Each connector also has a specific  * position in the broader display (referred to as a 'screen' though it could  * span multiple monitors).  */
end_comment

begin_struct
struct|struct
name|drm_connector
block|{
name|struct
name|drm_device
modifier|*
name|dev
decl_stmt|;
comment|/* struct device kdev; XXXKIB */
name|struct
name|device_attribute
modifier|*
name|attr
decl_stmt|;
name|struct
name|list_head
name|head
decl_stmt|;
name|struct
name|drm_mode_object
name|base
decl_stmt|;
name|int
name|connector_type
decl_stmt|;
name|int
name|connector_type_id
decl_stmt|;
name|bool
name|interlace_allowed
decl_stmt|;
name|bool
name|doublescan_allowed
decl_stmt|;
name|struct
name|list_head
name|modes
decl_stmt|;
comment|/* list of modes on this connector */
name|int
name|initial_x
decl_stmt|,
name|initial_y
decl_stmt|;
name|enum
name|drm_connector_status
name|status
decl_stmt|;
comment|/* these are modes added by probing with DDC or the BIOS */
name|struct
name|list_head
name|probed_modes
decl_stmt|;
name|struct
name|drm_display_info
name|display_info
decl_stmt|;
specifier|const
name|struct
name|drm_connector_funcs
modifier|*
name|funcs
decl_stmt|;
name|struct
name|list_head
name|user_modes
decl_stmt|;
name|struct
name|drm_property_blob
modifier|*
name|edid_blob_ptr
decl_stmt|;
name|u32
name|property_ids
index|[
name|DRM_CONNECTOR_MAX_PROPERTY
index|]
decl_stmt|;
name|uint64_t
name|property_values
index|[
name|DRM_CONNECTOR_MAX_PROPERTY
index|]
decl_stmt|;
name|uint8_t
name|polled
decl_stmt|;
comment|/* DRM_CONNECTOR_POLL_* */
comment|/* requested DPMS state */
name|int
name|dpms
decl_stmt|;
name|void
modifier|*
name|helper_private
decl_stmt|;
comment|/* forced on connector */
name|enum
name|drm_connector_force
name|force
decl_stmt|;
name|uint32_t
name|encoder_ids
index|[
name|DRM_CONNECTOR_MAX_ENCODER
index|]
decl_stmt|;
name|uint32_t
name|force_encoder_id
decl_stmt|;
name|struct
name|drm_encoder
modifier|*
name|encoder
decl_stmt|;
comment|/* currently active encoder */
comment|/* EDID bits */
name|uint8_t
name|eld
index|[
name|MAX_ELD_BYTES
index|]
decl_stmt|;
name|bool
name|dvi_dual
decl_stmt|;
name|int
name|max_tmds_clock
decl_stmt|;
comment|/* in MHz */
name|bool
name|latency_present
index|[
literal|2
index|]
decl_stmt|;
name|int
name|video_latency
index|[
literal|2
index|]
decl_stmt|;
comment|/* [0]: progressive, [1]: interlaced */
name|int
name|audio_latency
index|[
literal|2
index|]
decl_stmt|;
name|int
name|null_edid_counter
decl_stmt|;
comment|/* needed to workaround some HW bugs where we get all 0s */
block|}
struct|;
end_struct

begin_comment
comment|/**  * drm_plane_funcs - driver plane control functions  * @update_plane: update the plane configuration  * @disable_plane: shut down the plane  * @destroy: clean up plane resources  */
end_comment

begin_struct
struct|struct
name|drm_plane_funcs
block|{
name|int
function_decl|(
modifier|*
name|update_plane
function_decl|)
parameter_list|(
name|struct
name|drm_plane
modifier|*
name|plane
parameter_list|,
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|,
name|int
name|crtc_x
parameter_list|,
name|int
name|crtc_y
parameter_list|,
name|unsigned
name|int
name|crtc_w
parameter_list|,
name|unsigned
name|int
name|crtc_h
parameter_list|,
name|uint32_t
name|src_x
parameter_list|,
name|uint32_t
name|src_y
parameter_list|,
name|uint32_t
name|src_w
parameter_list|,
name|uint32_t
name|src_h
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|disable_plane
function_decl|)
parameter_list|(
name|struct
name|drm_plane
modifier|*
name|plane
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|destroy
function_decl|)
parameter_list|(
name|struct
name|drm_plane
modifier|*
name|plane
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * drm_plane - central DRM plane control structure  * @dev: DRM device this plane belongs to  * @head: for list management  * @base: base mode object  * @possible_crtcs: pipes this plane can be bound to  * @format_types: array of formats supported by this plane  * @format_count: number of formats supported  * @crtc: currently bound CRTC  * @fb: currently bound fb  * @gamma_size: size of gamma table  * @gamma_store: gamma correction table  * @enabled: enabled flag  * @funcs: helper functions  * @helper_private: storage for drver layer  */
end_comment

begin_struct
struct|struct
name|drm_plane
block|{
name|struct
name|drm_device
modifier|*
name|dev
decl_stmt|;
name|struct
name|list_head
name|head
decl_stmt|;
name|struct
name|drm_mode_object
name|base
decl_stmt|;
name|uint32_t
name|possible_crtcs
decl_stmt|;
name|uint32_t
modifier|*
name|format_types
decl_stmt|;
name|uint32_t
name|format_count
decl_stmt|;
name|struct
name|drm_crtc
modifier|*
name|crtc
decl_stmt|;
name|struct
name|drm_framebuffer
modifier|*
name|fb
decl_stmt|;
comment|/* CRTC gamma size for reporting to userspace */
name|uint32_t
name|gamma_size
decl_stmt|;
name|uint16_t
modifier|*
name|gamma_store
decl_stmt|;
name|bool
name|enabled
decl_stmt|;
specifier|const
name|struct
name|drm_plane_funcs
modifier|*
name|funcs
decl_stmt|;
name|void
modifier|*
name|helper_private
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct drm_mode_set  *  * Represents a single crtc the connectors that it drives with what mode  * and from which framebuffer it scans out from.  *  * This is used to set modes.  */
end_comment

begin_struct
struct|struct
name|drm_mode_set
block|{
name|struct
name|list_head
name|head
decl_stmt|;
name|struct
name|drm_framebuffer
modifier|*
name|fb
decl_stmt|;
name|struct
name|drm_crtc
modifier|*
name|crtc
decl_stmt|;
name|struct
name|drm_display_mode
modifier|*
name|mode
decl_stmt|;
name|uint32_t
name|x
decl_stmt|;
name|uint32_t
name|y
decl_stmt|;
name|struct
name|drm_connector
modifier|*
modifier|*
name|connectors
decl_stmt|;
name|size_t
name|num_connectors
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct drm_mode_config_funcs - configure CRTCs for a given screen layout  */
end_comment

begin_struct
struct|struct
name|drm_mode_config_funcs
block|{
name|int
function_decl|(
modifier|*
name|fb_create
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|,
name|struct
name|drm_mode_fb_cmd2
modifier|*
name|mode_cmd
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
modifier|*
name|res
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|output_poll_changed
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_mode_group
block|{
name|uint32_t
name|num_crtcs
decl_stmt|;
name|uint32_t
name|num_encoders
decl_stmt|;
name|uint32_t
name|num_connectors
decl_stmt|;
comment|/* list of object IDs for this group */
name|uint32_t
modifier|*
name|id_list
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * drm_mode_config - Mode configuration control structure  *  */
end_comment

begin_struct
struct|struct
name|drm_mode_config
block|{
name|struct
name|sx
name|mutex
decl_stmt|;
comment|/* protects configuration (mode lists etc.) */
name|struct
name|drm_gem_names
name|crtc_names
decl_stmt|;
comment|/* use this idr for all IDs, fb, crtc, connector, modes */
comment|/* this is limited to one for now */
name|int
name|num_fb
decl_stmt|;
name|struct
name|list_head
name|fb_list
decl_stmt|;
name|int
name|num_connector
decl_stmt|;
name|struct
name|list_head
name|connector_list
decl_stmt|;
name|int
name|num_encoder
decl_stmt|;
name|struct
name|list_head
name|encoder_list
decl_stmt|;
name|int
name|num_plane
decl_stmt|;
name|struct
name|list_head
name|plane_list
decl_stmt|;
name|int
name|num_crtc
decl_stmt|;
name|struct
name|list_head
name|crtc_list
decl_stmt|;
name|struct
name|list_head
name|property_list
decl_stmt|;
name|int
name|min_width
decl_stmt|,
name|min_height
decl_stmt|;
name|int
name|max_width
decl_stmt|,
name|max_height
decl_stmt|;
specifier|const
name|struct
name|drm_mode_config_funcs
modifier|*
name|funcs
decl_stmt|;
name|resource_size_t
name|fb_base
decl_stmt|;
comment|/* output poll support */
name|bool
name|poll_enabled
decl_stmt|;
name|struct
name|timeout_task
name|output_poll_task
decl_stmt|;
comment|/* pointers to standard properties */
name|struct
name|list_head
name|property_blob_list
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|edid_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|dpms_property
decl_stmt|;
comment|/* DVI-I properties */
name|struct
name|drm_property
modifier|*
name|dvi_i_subconnector_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|dvi_i_select_subconnector_property
decl_stmt|;
comment|/* TV properties */
name|struct
name|drm_property
modifier|*
name|tv_subconnector_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_select_subconnector_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_mode_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_left_margin_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_right_margin_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_top_margin_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_bottom_margin_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_brightness_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_contrast_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_flicker_reduction_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_overscan_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_saturation_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|tv_hue_property
decl_stmt|;
comment|/* Optional properties */
name|struct
name|drm_property
modifier|*
name|scaling_mode_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|dithering_mode_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|dirty_info_property
decl_stmt|;
comment|/* dumb ioctl parameters */
name|uint32_t
name|preferred_depth
decl_stmt|,
name|prefer_shadow
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|obj_to_crtc
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct drm_crtc, base)
end_define

begin_define
define|#
directive|define
name|obj_to_connector
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct drm_connector, base)
end_define

begin_define
define|#
directive|define
name|obj_to_encoder
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct drm_encoder, base)
end_define

begin_define
define|#
directive|define
name|obj_to_mode
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct drm_display_mode, base)
end_define

begin_define
define|#
directive|define
name|obj_to_fb
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct drm_framebuffer, base)
end_define

begin_define
define|#
directive|define
name|obj_to_property
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct drm_property, base)
end_define

begin_define
define|#
directive|define
name|obj_to_blob
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct drm_property_blob, base)
end_define

begin_define
define|#
directive|define
name|obj_to_plane
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct drm_plane, base)
end_define

begin_struct
struct|struct
name|drm_prop_enum_list
block|{
name|int
name|type
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
block|}
struct|;
end_struct

begin_if
if|#
directive|if
name|defined
argument_list|(
name|MODE_SETTING_LOCKING_IS_NOT_BROKEN
argument_list|)
end_if

begin_define
define|#
directive|define
name|DRM_MODE_CONFIG_ASSERT_LOCKED
parameter_list|(
name|dev
parameter_list|)
define|\
value|sx_assert(&dev->mode_config.mutex, SA_XLOCKED)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DRM_MODE_CONFIG_ASSERT_LOCKED
parameter_list|(
name|dev
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|char
modifier|*
name|drm_get_dirty_info_name
parameter_list|(
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|drm_get_connector_status_name
parameter_list|(
name|enum
name|drm_connector_status
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_crtc_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
specifier|const
name|struct
name|drm_crtc_funcs
modifier|*
name|funcs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_crtc_cleanup
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_connector_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
specifier|const
name|struct
name|drm_connector_funcs
modifier|*
name|funcs
parameter_list|,
name|int
name|connector_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_connector_cleanup
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_encoder_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
specifier|const
name|struct
name|drm_encoder_funcs
modifier|*
name|funcs
parameter_list|,
name|int
name|encoder_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_plane_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_plane
modifier|*
name|plane
parameter_list|,
name|unsigned
name|long
name|possible_crtcs
parameter_list|,
specifier|const
name|struct
name|drm_plane_funcs
modifier|*
name|funcs
parameter_list|,
specifier|const
name|uint32_t
modifier|*
name|formats
parameter_list|,
name|uint32_t
name|format_count
parameter_list|,
name|bool
name|priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_plane_cleanup
parameter_list|(
name|struct
name|drm_plane
modifier|*
name|plane
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_encoder_cleanup
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|drm_get_connector_name
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|drm_get_dpms_name
parameter_list|(
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|drm_get_dvi_i_subconnector_name
parameter_list|(
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|drm_get_dvi_i_select_name
parameter_list|(
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|drm_get_tv_subconnector_name
parameter_list|(
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|drm_get_tv_select_name
parameter_list|(
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_fb_release
parameter_list|(
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_group_init_legacy_group
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_mode_group
modifier|*
name|group
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|edid
modifier|*
name|drm_get_edid
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|device_t
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_add_edid_modes
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|edid
modifier|*
name|edid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_probed_add
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_remove
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_display_mode
modifier|*
name|drm_mode_duplicate
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
specifier|const
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_debug_printmodeline
parameter_list|(
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_config_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_config_reset
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_config_cleanup
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_set_name
parameter_list|(
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|drm_mode_equal
parameter_list|(
name|struct
name|drm_display_mode
modifier|*
name|mode1
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_width
parameter_list|(
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_height
parameter_list|(
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* for us by fb module */
end_comment

begin_function_decl
specifier|extern
name|int
name|drm_mode_attachmode_crtc
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
specifier|const
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_detachmode_crtc
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_display_mode
modifier|*
name|drm_mode_create
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_destroy
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_list_concat
parameter_list|(
name|struct
name|list_head
modifier|*
name|head
parameter_list|,
name|struct
name|list_head
modifier|*
name|new
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_validate_size
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|list_head
modifier|*
name|mode_list
parameter_list|,
name|int
name|maxX
parameter_list|,
name|int
name|maxY
parameter_list|,
name|int
name|maxPitch
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_validate_clocks
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|list_head
modifier|*
name|mode_list
parameter_list|,
name|int
modifier|*
name|min
parameter_list|,
name|int
modifier|*
name|max
parameter_list|,
name|int
name|n_ranges
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_prune_invalid
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|list_head
modifier|*
name|mode_list
parameter_list|,
name|bool
name|verbose
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_sort
parameter_list|(
name|struct
name|list_head
modifier|*
name|mode_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_hsync
parameter_list|(
specifier|const
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_vrefresh
parameter_list|(
specifier|const
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_set_crtcinfo
parameter_list|(
name|struct
name|drm_display_mode
modifier|*
name|p
parameter_list|,
name|int
name|adjust_flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_connector_list_update
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_connector_update_edid_property
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|edid
modifier|*
name|edid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_connector_property_set_value
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_property
modifier|*
name|property
parameter_list|,
name|uint64_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_connector_property_get_value
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_property
modifier|*
name|property
parameter_list|,
name|uint64_t
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_display_mode
modifier|*
name|drm_crtc_mode_create
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_framebuffer_set_object
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|unsigned
name|long
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_framebuffer_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|,
specifier|const
name|struct
name|drm_framebuffer_funcs
modifier|*
name|funcs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_framebuffer_cleanup
parameter_list|(
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drmfb_probe
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drmfb_remove
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_crtc_probe_connector_modes
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|maxX
parameter_list|,
name|int
name|maxY
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|drm_crtc_in_use
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_connector_attach_property
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_property
modifier|*
name|property
parameter_list|,
name|uint64_t
name|init_val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_property
modifier|*
name|drm_property_create
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|flags
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|num_values
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_property
modifier|*
name|drm_property_create_enum
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|flags
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|struct
name|drm_prop_enum_list
modifier|*
name|props
parameter_list|,
name|int
name|num_values
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|drm_property
modifier|*
name|drm_property_create_range
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|flags
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|uint64_t
name|min
parameter_list|,
name|uint64_t
name|max
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_property_destroy
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_property
modifier|*
name|property
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_property_add_enum
parameter_list|(
name|struct
name|drm_property
modifier|*
name|property
parameter_list|,
name|int
name|index
parameter_list|,
name|uint64_t
name|value
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_create_dvi_i_properties
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_create_tv_properties
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|num_formats
parameter_list|,
name|char
modifier|*
name|formats
index|[]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_create_scaling_mode_property
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_create_dithering_property
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_create_dirty_info_property
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|drm_get_encoder_name
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_connector_attach_encoder
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_mode_connector_detach_encoder
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_crtc_set_gamma_size
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|int
name|gamma_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_mode_object
modifier|*
name|drm_mode_object_find
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|uint32_t
name|id
parameter_list|,
name|uint32_t
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* IOCTLs */
end_comment

begin_function_decl
specifier|extern
name|int
name|drm_mode_getresources
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_getplane_res
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_getcrtc
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_getconnector
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_setcrtc
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_getplane
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_setplane
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_cursor_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_addfb
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_addfb2
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|drm_mode_legacy_fb_format
parameter_list|(
name|uint32_t
name|bpp
parameter_list|,
name|uint32_t
name|depth
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_rmfb
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_getfb
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_dirtyfb_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_addmode_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_rmmode_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_attachmode_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_detachmode_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_getproperty_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_getblob_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_connector_property_set_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_hotplug_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_replacefb
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_getencoder
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_gamma_get_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_gamma_set_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|drm_detect_hdmi_monitor
parameter_list|(
name|struct
name|edid
modifier|*
name|edid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|drm_detect_monitor_audio
parameter_list|(
name|struct
name|edid
modifier|*
name|edid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_page_flip_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_display_mode
modifier|*
name|drm_cvt_mode
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|hdisplay
parameter_list|,
name|int
name|vdisplay
parameter_list|,
name|int
name|vrefresh
parameter_list|,
name|bool
name|reduced
parameter_list|,
name|bool
name|interlaced
parameter_list|,
name|bool
name|margins
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_display_mode
modifier|*
name|drm_gtf_mode
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|hdisplay
parameter_list|,
name|int
name|vdisplay
parameter_list|,
name|int
name|vrefresh
parameter_list|,
name|bool
name|interlaced
parameter_list|,
name|int
name|margins
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_display_mode
modifier|*
name|drm_gtf_mode_complex
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|hdisplay
parameter_list|,
name|int
name|vdisplay
parameter_list|,
name|int
name|vrefresh
parameter_list|,
name|bool
name|interlaced
parameter_list|,
name|int
name|margins
parameter_list|,
name|int
name|GTF_M
parameter_list|,
name|int
name|GTF_2C
parameter_list|,
name|int
name|GTF_K
parameter_list|,
name|int
name|GTF_2J
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_add_modes_noedid
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|int
name|hdisplay
parameter_list|,
name|int
name|vdisplay
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_edid_header_is_valid
parameter_list|(
specifier|const
name|u8
modifier|*
name|raw_edid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|drm_edid_is_valid
parameter_list|(
name|struct
name|edid
modifier|*
name|edid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|drm_display_mode
modifier|*
name|drm_mode_find_dmt
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|hsize
parameter_list|,
name|int
name|vsize
parameter_list|,
name|int
name|fresh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_create_dumb_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_mmap_dumb_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|drm_mode_destroy_dumb_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|drm_fb_get_bpp_depth
parameter_list|(
name|uint32_t
name|format
parameter_list|,
name|unsigned
name|int
modifier|*
name|depth
parameter_list|,
name|int
modifier|*
name|bpp
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __DRM_CRTC_H__ */
end_comment

end_unit

