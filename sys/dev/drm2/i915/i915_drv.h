begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* i915_drv.h -- Private header for the I915 driver -*- linux-c -*-  */
end_comment

begin_comment
comment|/*  *  * Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the  * "Software"), to deal in the Software without restriction, including  * without limitation the rights to use, copy, modify, merge, publish,  * distribute, sub license, and/or sell copies of the Software, and to  * permit persons to whom the Software is furnished to do so, subject to  * the following conditions:  *  * The above copyright notice and this permission notice (including the  * next paragraph) shall be included in all copies or substantial portions  * of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.  * IN NO EVENT SHALL TUNGSTEN GRAPHICS AND/OR ITS SUPPLIERS BE LIABLE FOR  * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE  * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  *  */
end_comment

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|_I915_DRV_H_
end_ifndef

begin_define
define|#
directive|define
name|_I915_DRV_H_
end_define

begin_include
include|#
directive|include
file|<dev/agp/agp_i810.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/drm_mm.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/i915/i915_reg.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/i915/intel_ringbuffer.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/i915/intel_bios.h>
end_include

begin_comment
comment|/* General customization:  */
end_comment

begin_define
define|#
directive|define
name|DRIVER_AUTHOR
value|"Tungsten Graphics, Inc."
end_define

begin_define
define|#
directive|define
name|DRIVER_NAME
value|"i915"
end_define

begin_define
define|#
directive|define
name|DRIVER_DESC
value|"Intel Graphics"
end_define

begin_define
define|#
directive|define
name|DRIVER_DATE
value|"20080730"
end_define

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|DRM_I915_GEM
argument_list|)
expr_stmt|;
end_expr_stmt

begin_enum
enum|enum
name|pipe
block|{
name|PIPE_A
init|=
literal|0
block|,
name|PIPE_B
block|,
name|PIPE_C
block|,
name|I915_MAX_PIPES
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|pipe_name
parameter_list|(
name|p
parameter_list|)
value|((p) + 'A')
end_define

begin_define
define|#
directive|define
name|I915_NUM_PIPE
value|2
end_define

begin_enum
enum|enum
name|plane
block|{
name|PLANE_A
init|=
literal|0
block|,
name|PLANE_B
block|,
name|PLANE_C
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|plane_name
parameter_list|(
name|p
parameter_list|)
value|((p) + 'A')
end_define

begin_define
define|#
directive|define
name|I915_GEM_GPU_DOMAINS
value|(~(I915_GEM_DOMAIN_CPU | I915_GEM_DOMAIN_GTT))
end_define

begin_define
define|#
directive|define
name|for_each_pipe
parameter_list|(
name|p
parameter_list|)
value|for ((p) = 0; (p)< dev_priv->num_pipe; (p)++)
end_define

begin_comment
comment|/* Interface history:  *  * 1.1: Original.  * 1.2: Add Power Management  * 1.3: Add vblank support  * 1.4: Fix cmdbuffer path, add heap destroy  * 1.5: Add vblank pipe configuration  * 1.6: - New ioctl for scheduling buffer swaps on vertical blank  *      - Support vertical blank on secondary display pipe  */
end_comment

begin_define
define|#
directive|define
name|DRIVER_MAJOR
value|1
end_define

begin_define
define|#
directive|define
name|DRIVER_MINOR
value|6
end_define

begin_define
define|#
directive|define
name|DRIVER_PATCHLEVEL
value|0
end_define

begin_define
define|#
directive|define
name|WATCH_COHERENCY
value|0
end_define

begin_define
define|#
directive|define
name|WATCH_BUF
value|0
end_define

begin_define
define|#
directive|define
name|WATCH_EXEC
value|0
end_define

begin_define
define|#
directive|define
name|WATCH_LRU
value|0
end_define

begin_define
define|#
directive|define
name|WATCH_RELOC
value|0
end_define

begin_define
define|#
directive|define
name|WATCH_INACTIVE
value|0
end_define

begin_define
define|#
directive|define
name|WATCH_PWRITE
value|0
end_define

begin_define
define|#
directive|define
name|I915_GEM_PHYS_CURSOR_0
value|1
end_define

begin_define
define|#
directive|define
name|I915_GEM_PHYS_CURSOR_1
value|2
end_define

begin_define
define|#
directive|define
name|I915_GEM_PHYS_OVERLAY_REGS
value|3
end_define

begin_define
define|#
directive|define
name|I915_MAX_PHYS_OBJECT
value|(I915_GEM_PHYS_OVERLAY_REGS)
end_define

begin_struct
struct|struct
name|drm_i915_gem_phys_object
block|{
name|int
name|id
decl_stmt|;
name|drm_dma_handle_t
modifier|*
name|handle
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|cur_obj
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|drm_i915_private
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|drm_i915_display_funcs
block|{
name|void
function_decl|(
modifier|*
name|dpms
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|bool
function_decl|(
modifier|*
name|fbc_enabled
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|enable_fbc
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|unsigned
name|long
name|interval
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|disable_fbc
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_display_clock_speed
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_fifo_size
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|plane
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|update_wm
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|update_sprite_wm
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|pipe
parameter_list|,
name|uint32_t
name|sprite_width
parameter_list|,
name|int
name|pixel_size
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|crtc_mode_set
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|old_fb
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|write_eld
function_decl|)
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|fdi_link_train
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|init_clock_gating
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|init_pch_clock_gating
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|queue_flip
function_decl|)
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|,
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|force_wake_get
function_decl|)
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|force_wake_put
function_decl|)
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|update_plane
function_decl|)
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
function_decl|;
comment|/* clock updates for mode set */
comment|/* cursor updates */
comment|/* render clock increase/decrease */
comment|/* display clock increase/decrease */
comment|/* pll clock increase/decrease */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_device_info
block|{
name|u8
name|gen
decl_stmt|;
name|u8
name|is_mobile
range|:
literal|1
decl_stmt|;
name|u8
name|is_i85x
range|:
literal|1
decl_stmt|;
name|u8
name|is_i915g
range|:
literal|1
decl_stmt|;
name|u8
name|is_i945gm
range|:
literal|1
decl_stmt|;
name|u8
name|is_g33
range|:
literal|1
decl_stmt|;
name|u8
name|need_gfx_hws
range|:
literal|1
decl_stmt|;
name|u8
name|is_g4x
range|:
literal|1
decl_stmt|;
name|u8
name|is_pineview
range|:
literal|1
decl_stmt|;
name|u8
name|is_broadwater
range|:
literal|1
decl_stmt|;
name|u8
name|is_crestline
range|:
literal|1
decl_stmt|;
name|u8
name|is_ivybridge
range|:
literal|1
decl_stmt|;
name|u8
name|has_fbc
range|:
literal|1
decl_stmt|;
name|u8
name|has_pipe_cxsr
range|:
literal|1
decl_stmt|;
name|u8
name|has_hotplug
range|:
literal|1
decl_stmt|;
name|u8
name|cursor_needs_physical
range|:
literal|1
decl_stmt|;
name|u8
name|has_overlay
range|:
literal|1
decl_stmt|;
name|u8
name|overlay_needs_physical
range|:
literal|1
decl_stmt|;
name|u8
name|supports_tv
range|:
literal|1
decl_stmt|;
name|u8
name|has_bsd_ring
range|:
literal|1
decl_stmt|;
name|u8
name|has_blt_ring
range|:
literal|1
decl_stmt|;
name|u8
name|has_llc
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|I915_PPGTT_PD_ENTRIES
value|512
end_define

begin_define
define|#
directive|define
name|I915_PPGTT_PT_ENTRIES
value|1024
end_define

begin_struct
struct|struct
name|i915_hw_ppgtt
block|{
name|unsigned
name|num_pd_entries
decl_stmt|;
name|vm_page_t
modifier|*
name|pt_pages
decl_stmt|;
name|uint32_t
name|pd_offset
decl_stmt|;
name|vm_paddr_t
modifier|*
name|pt_dma_addr
decl_stmt|;
name|vm_paddr_t
name|scratch_page_dma_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* This must match up with the value previously used for execbuf2.rsvd1. */
end_comment

begin_define
define|#
directive|define
name|DEFAULT_CONTEXT_ID
value|0
end_define

begin_struct
struct|struct
name|i915_hw_context
block|{
name|uint32_t
name|id
decl_stmt|;
name|bool
name|is_initialized
decl_stmt|;
name|struct
name|drm_i915_file_private
modifier|*
name|file_priv
decl_stmt|;
name|struct
name|intel_ring_buffer
modifier|*
name|ring
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|no_fbc_reason
block|{
name|FBC_NO_OUTPUT
block|,
comment|/* no outputs enabled to compress */
name|FBC_STOLEN_TOO_SMALL
block|,
comment|/* not enough space to hold compressed buffers */
name|FBC_UNSUPPORTED_MODE
block|,
comment|/* interlace or doublescanned mode */
name|FBC_MODE_TOO_LARGE
block|,
comment|/* mode too large for compression */
name|FBC_BAD_PLANE
block|,
comment|/* fbc not supported on plane */
name|FBC_NOT_TILED
block|,
comment|/* buffer not tiled */
name|FBC_MULTIPLE_PIPES
block|,
comment|/* more than one pipe active */
name|FBC_MODULE_PARAM
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mem_block
block|{
name|struct
name|mem_block
modifier|*
name|next
decl_stmt|;
name|struct
name|mem_block
modifier|*
name|prev
decl_stmt|;
name|int
name|start
decl_stmt|;
name|int
name|size
decl_stmt|;
name|struct
name|drm_file
modifier|*
name|file_priv
decl_stmt|;
comment|/* NULL: free, -1: heap, other: real files */
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|opregion_header
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|opregion_acpi
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|opregion_swsci
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|opregion_asle
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|intel_opregion
block|{
name|struct
name|opregion_header
modifier|*
name|header
decl_stmt|;
name|struct
name|opregion_acpi
modifier|*
name|acpi
decl_stmt|;
name|struct
name|opregion_swsci
modifier|*
name|swsci
decl_stmt|;
name|struct
name|opregion_asle
modifier|*
name|asle
decl_stmt|;
name|void
modifier|*
name|vbt
decl_stmt|;
name|u32
modifier|*
name|lid_state
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|OPREGION_SIZE
value|(8*1024)
end_define

begin_define
define|#
directive|define
name|I915_FENCE_REG_NONE
value|-1
end_define

begin_define
define|#
directive|define
name|I915_MAX_NUM_FENCES
value|16
end_define

begin_comment
comment|/* 16 fences + sign bit for FENCE_REG_NONE */
end_comment

begin_define
define|#
directive|define
name|I915_MAX_NUM_FENCE_BITS
value|5
end_define

begin_struct
struct|struct
name|drm_i915_fence_reg
block|{
name|struct
name|list_head
name|lru_list
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
decl_stmt|;
name|uint32_t
name|setup_seqno
decl_stmt|;
name|int
name|pin_count
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sdvo_device_mapping
block|{
name|u8
name|initialized
decl_stmt|;
name|u8
name|dvo_port
decl_stmt|;
name|u8
name|slave_addr
decl_stmt|;
name|u8
name|dvo_wiring
decl_stmt|;
name|u8
name|i2c_pin
decl_stmt|;
name|u8
name|ddc_pin
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|intel_pch
block|{
name|PCH_IBX
block|,
comment|/* Ibexpeak PCH */
name|PCH_CPT
block|,
comment|/* Cougarpoint PCH */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|QUIRK_PIPEA_FORCE
value|(1<<0)
end_define

begin_define
define|#
directive|define
name|QUIRK_LVDS_SSC_DISABLE
value|(1<<1)
end_define

begin_struct_decl
struct_decl|struct
name|intel_fbdev
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|intel_fbc_work
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
struct|struct
name|drm_i915_private
block|{
name|struct
name|drm_device
modifier|*
name|dev
decl_stmt|;
name|device_t
modifier|*
name|gmbus_bridge
decl_stmt|;
name|device_t
modifier|*
name|bbbus_bridge
decl_stmt|;
name|device_t
modifier|*
name|gmbus
decl_stmt|;
name|device_t
modifier|*
name|bbbus
decl_stmt|;
comment|/** gmbus_sx protects against concurrent usage of the single hw gmbus 	 * controller on different i2c buses. */
name|struct
name|sx
name|gmbus_sx
decl_stmt|;
name|int
name|has_gem
decl_stmt|;
name|int
name|relative_constants_mode
decl_stmt|;
name|drm_local_map_t
modifier|*
name|sarea
decl_stmt|;
name|drm_local_map_t
modifier|*
name|mmio_map
decl_stmt|;
comment|/** gt_fifo_count and the subsequent register write are synchronized 	 * with dev->struct_mutex. */
name|unsigned
name|gt_fifo_count
decl_stmt|;
comment|/** forcewake_count is protected by gt_lock */
name|unsigned
name|forcewake_count
decl_stmt|;
comment|/** gt_lock is also taken in irq contexts. */
name|struct
name|mtx
name|gt_lock
decl_stmt|;
name|drm_i915_sarea_t
modifier|*
name|sarea_priv
decl_stmt|;
comment|/* drm_i915_ring_buffer_t ring; */
name|struct
name|intel_ring_buffer
name|rings
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|uint32_t
name|next_seqno
decl_stmt|;
name|drm_dma_handle_t
modifier|*
name|status_page_dmah
decl_stmt|;
name|void
modifier|*
name|hw_status_page
decl_stmt|;
name|dma_addr_t
name|dma_status_page
decl_stmt|;
name|uint32_t
name|counter
decl_stmt|;
name|unsigned
name|int
name|status_gfx_addr
decl_stmt|;
name|drm_local_map_t
name|hws_map
decl_stmt|;
name|struct
name|drm_gem_object
modifier|*
name|hws_obj
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|pwrctx
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|renderctx
decl_stmt|;
name|unsigned
name|int
name|cpp
decl_stmt|;
name|int
name|back_offset
decl_stmt|;
name|int
name|front_offset
decl_stmt|;
name|int
name|current_page
decl_stmt|;
name|int
name|page_flipping
decl_stmt|;
name|atomic_t
name|irq_received
decl_stmt|;
name|u32
name|trace_irq_seqno
decl_stmt|;
comment|/** Cached value of IER to avoid reads in updating the bitfield */
name|u32
name|pipestat
index|[
literal|2
index|]
decl_stmt|;
name|u32
name|irq_mask
decl_stmt|;
name|u32
name|gt_irq_mask
decl_stmt|;
name|u32
name|pch_irq_mask
decl_stmt|;
name|struct
name|mtx
name|irq_lock
decl_stmt|;
name|u32
name|hotplug_supported_mask
decl_stmt|;
name|int
name|tex_lru_log_granularity
decl_stmt|;
name|int
name|allow_batchbuffer
decl_stmt|;
name|unsigned
name|int
name|sr01
decl_stmt|,
name|adpa
decl_stmt|,
name|ppcr
decl_stmt|,
name|dvob
decl_stmt|,
name|dvoc
decl_stmt|,
name|lvds
decl_stmt|;
name|int
name|vblank_pipe
decl_stmt|;
name|int
name|num_pipe
decl_stmt|;
comment|/* For hangcheck timer */
define|#
directive|define
name|DRM_I915_HANGCHECK_PERIOD
value|((1500
comment|/* in ms */
value|* hz) / 1000)
name|int
name|hangcheck_count
decl_stmt|;
name|uint32_t
name|last_acthd
decl_stmt|;
name|uint32_t
name|last_acthd_bsd
decl_stmt|;
name|uint32_t
name|last_acthd_blt
decl_stmt|;
name|uint32_t
name|last_instdone
decl_stmt|;
name|uint32_t
name|last_instdone1
decl_stmt|;
name|struct
name|intel_opregion
name|opregion
decl_stmt|;
comment|/* overlay */
name|struct
name|intel_overlay
modifier|*
name|overlay
decl_stmt|;
name|bool
name|sprite_scaling_enabled
decl_stmt|;
comment|/* LVDS info */
name|int
name|backlight_level
decl_stmt|;
comment|/* restore backlight to this value */
name|bool
name|backlight_enabled
decl_stmt|;
name|struct
name|drm_display_mode
modifier|*
name|lfp_lvds_vbt_mode
decl_stmt|;
comment|/* if any */
name|struct
name|drm_display_mode
modifier|*
name|sdvo_lvds_vbt_mode
decl_stmt|;
comment|/* if any */
comment|/* Feature bits from the VBIOS */
name|unsigned
name|int
name|int_tv_support
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|lvds_dither
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|lvds_vbt
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|int_crt_support
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|lvds_use_ssc
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|display_clock_mode
range|:
literal|1
decl_stmt|;
name|int
name|lvds_ssc_freq
decl_stmt|;
struct|struct
block|{
name|int
name|rate
decl_stmt|;
name|int
name|lanes
decl_stmt|;
name|int
name|preemphasis
decl_stmt|;
name|int
name|vswing
decl_stmt|;
name|bool
name|initialized
decl_stmt|;
name|bool
name|support
decl_stmt|;
name|int
name|bpp
decl_stmt|;
name|struct
name|edp_power_seq
name|pps
decl_stmt|;
block|}
name|edp
struct|;
name|bool
name|no_aux_handshake
decl_stmt|;
name|int
name|crt_ddc_pin
decl_stmt|;
name|struct
name|drm_i915_fence_reg
name|fence_regs
index|[
name|I915_MAX_NUM_FENCES
index|]
decl_stmt|;
comment|/* assume 965 */
name|int
name|fence_reg_start
decl_stmt|;
comment|/* 4 if userland hasn't ioctl'd us yet */
name|int
name|num_fence_regs
decl_stmt|;
comment|/* 8 on pre-965, 16 otherwise */
comment|/* PCH chipset type */
name|enum
name|intel_pch
name|pch_type
decl_stmt|;
comment|/* Display functions */
name|struct
name|drm_i915_display_funcs
name|display
decl_stmt|;
name|unsigned
name|long
name|quirks
decl_stmt|;
comment|/* Register state */
name|bool
name|modeset_on_lid
decl_stmt|;
name|u8
name|saveLBB
decl_stmt|;
name|u32
name|saveDSPACNTR
decl_stmt|;
name|u32
name|saveDSPBCNTR
decl_stmt|;
name|u32
name|saveDSPARB
decl_stmt|;
name|u32
name|saveHWS
decl_stmt|;
name|u32
name|savePIPEACONF
decl_stmt|;
name|u32
name|savePIPEBCONF
decl_stmt|;
name|u32
name|savePIPEASRC
decl_stmt|;
name|u32
name|savePIPEBSRC
decl_stmt|;
name|u32
name|saveFPA0
decl_stmt|;
name|u32
name|saveFPA1
decl_stmt|;
name|u32
name|saveDPLL_A
decl_stmt|;
name|u32
name|saveDPLL_A_MD
decl_stmt|;
name|u32
name|saveHTOTAL_A
decl_stmt|;
name|u32
name|saveHBLANK_A
decl_stmt|;
name|u32
name|saveHSYNC_A
decl_stmt|;
name|u32
name|saveVTOTAL_A
decl_stmt|;
name|u32
name|saveVBLANK_A
decl_stmt|;
name|u32
name|saveVSYNC_A
decl_stmt|;
name|u32
name|saveBCLRPAT_A
decl_stmt|;
name|u32
name|saveTRANSACONF
decl_stmt|;
name|u32
name|saveTRANS_HTOTAL_A
decl_stmt|;
name|u32
name|saveTRANS_HBLANK_A
decl_stmt|;
name|u32
name|saveTRANS_HSYNC_A
decl_stmt|;
name|u32
name|saveTRANS_VTOTAL_A
decl_stmt|;
name|u32
name|saveTRANS_VBLANK_A
decl_stmt|;
name|u32
name|saveTRANS_VSYNC_A
decl_stmt|;
name|u32
name|savePIPEASTAT
decl_stmt|;
name|u32
name|saveDSPASTRIDE
decl_stmt|;
name|u32
name|saveDSPASIZE
decl_stmt|;
name|u32
name|saveDSPAPOS
decl_stmt|;
name|u32
name|saveDSPAADDR
decl_stmt|;
name|u32
name|saveDSPASURF
decl_stmt|;
name|u32
name|saveDSPATILEOFF
decl_stmt|;
name|u32
name|savePFIT_PGM_RATIOS
decl_stmt|;
name|u32
name|saveBLC_HIST_CTL
decl_stmt|;
name|u32
name|saveBLC_PWM_CTL
decl_stmt|;
name|u32
name|saveBLC_PWM_CTL2
decl_stmt|;
name|u32
name|saveBLC_CPU_PWM_CTL
decl_stmt|;
name|u32
name|saveBLC_CPU_PWM_CTL2
decl_stmt|;
name|u32
name|saveFPB0
decl_stmt|;
name|u32
name|saveFPB1
decl_stmt|;
name|u32
name|saveDPLL_B
decl_stmt|;
name|u32
name|saveDPLL_B_MD
decl_stmt|;
name|u32
name|saveHTOTAL_B
decl_stmt|;
name|u32
name|saveHBLANK_B
decl_stmt|;
name|u32
name|saveHSYNC_B
decl_stmt|;
name|u32
name|saveVTOTAL_B
decl_stmt|;
name|u32
name|saveVBLANK_B
decl_stmt|;
name|u32
name|saveVSYNC_B
decl_stmt|;
name|u32
name|saveBCLRPAT_B
decl_stmt|;
name|u32
name|saveTRANSBCONF
decl_stmt|;
name|u32
name|saveTRANS_HTOTAL_B
decl_stmt|;
name|u32
name|saveTRANS_HBLANK_B
decl_stmt|;
name|u32
name|saveTRANS_HSYNC_B
decl_stmt|;
name|u32
name|saveTRANS_VTOTAL_B
decl_stmt|;
name|u32
name|saveTRANS_VBLANK_B
decl_stmt|;
name|u32
name|saveTRANS_VSYNC_B
decl_stmt|;
name|u32
name|savePIPEBSTAT
decl_stmt|;
name|u32
name|saveDSPBSTRIDE
decl_stmt|;
name|u32
name|saveDSPBSIZE
decl_stmt|;
name|u32
name|saveDSPBPOS
decl_stmt|;
name|u32
name|saveDSPBADDR
decl_stmt|;
name|u32
name|saveDSPBSURF
decl_stmt|;
name|u32
name|saveDSPBTILEOFF
decl_stmt|;
name|u32
name|saveVGA0
decl_stmt|;
name|u32
name|saveVGA1
decl_stmt|;
name|u32
name|saveVGA_PD
decl_stmt|;
name|u32
name|saveVGACNTRL
decl_stmt|;
name|u32
name|saveADPA
decl_stmt|;
name|u32
name|saveLVDS
decl_stmt|;
name|u32
name|savePP_ON_DELAYS
decl_stmt|;
name|u32
name|savePP_OFF_DELAYS
decl_stmt|;
name|u32
name|saveDVOA
decl_stmt|;
name|u32
name|saveDVOB
decl_stmt|;
name|u32
name|saveDVOC
decl_stmt|;
name|u32
name|savePP_ON
decl_stmt|;
name|u32
name|savePP_OFF
decl_stmt|;
name|u32
name|savePP_CONTROL
decl_stmt|;
name|u32
name|savePP_DIVISOR
decl_stmt|;
name|u32
name|savePFIT_CONTROL
decl_stmt|;
name|u32
name|save_palette_a
index|[
literal|256
index|]
decl_stmt|;
name|u32
name|save_palette_b
index|[
literal|256
index|]
decl_stmt|;
name|u32
name|saveDPFC_CB_BASE
decl_stmt|;
name|u32
name|saveFBC_CFB_BASE
decl_stmt|;
name|u32
name|saveFBC_LL_BASE
decl_stmt|;
name|u32
name|saveFBC_CONTROL
decl_stmt|;
name|u32
name|saveFBC_CONTROL2
decl_stmt|;
name|u32
name|saveIER
decl_stmt|;
name|u32
name|saveIIR
decl_stmt|;
name|u32
name|saveIMR
decl_stmt|;
name|u32
name|saveDEIER
decl_stmt|;
name|u32
name|saveDEIMR
decl_stmt|;
name|u32
name|saveGTIER
decl_stmt|;
name|u32
name|saveGTIMR
decl_stmt|;
name|u32
name|saveFDI_RXA_IMR
decl_stmt|;
name|u32
name|saveFDI_RXB_IMR
decl_stmt|;
name|u32
name|saveCACHE_MODE_0
decl_stmt|;
name|u32
name|saveMI_ARB_STATE
decl_stmt|;
name|u32
name|saveSWF0
index|[
literal|16
index|]
decl_stmt|;
name|u32
name|saveSWF1
index|[
literal|16
index|]
decl_stmt|;
name|u32
name|saveSWF2
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|saveMSR
decl_stmt|;
name|u8
name|saveSR
index|[
literal|8
index|]
decl_stmt|;
name|u8
name|saveGR
index|[
literal|25
index|]
decl_stmt|;
name|u8
name|saveAR_INDEX
decl_stmt|;
name|u8
name|saveAR
index|[
literal|21
index|]
decl_stmt|;
name|u8
name|saveDACMASK
decl_stmt|;
name|u8
name|saveCR
index|[
literal|37
index|]
decl_stmt|;
name|uint64_t
name|saveFENCE
index|[
name|I915_MAX_NUM_FENCES
index|]
decl_stmt|;
name|u32
name|saveCURACNTR
decl_stmt|;
name|u32
name|saveCURAPOS
decl_stmt|;
name|u32
name|saveCURABASE
decl_stmt|;
name|u32
name|saveCURBCNTR
decl_stmt|;
name|u32
name|saveCURBPOS
decl_stmt|;
name|u32
name|saveCURBBASE
decl_stmt|;
name|u32
name|saveCURSIZE
decl_stmt|;
name|u32
name|saveDP_B
decl_stmt|;
name|u32
name|saveDP_C
decl_stmt|;
name|u32
name|saveDP_D
decl_stmt|;
name|u32
name|savePIPEA_GMCH_DATA_M
decl_stmt|;
name|u32
name|savePIPEB_GMCH_DATA_M
decl_stmt|;
name|u32
name|savePIPEA_GMCH_DATA_N
decl_stmt|;
name|u32
name|savePIPEB_GMCH_DATA_N
decl_stmt|;
name|u32
name|savePIPEA_DP_LINK_M
decl_stmt|;
name|u32
name|savePIPEB_DP_LINK_M
decl_stmt|;
name|u32
name|savePIPEA_DP_LINK_N
decl_stmt|;
name|u32
name|savePIPEB_DP_LINK_N
decl_stmt|;
name|u32
name|saveFDI_RXA_CTL
decl_stmt|;
name|u32
name|saveFDI_TXA_CTL
decl_stmt|;
name|u32
name|saveFDI_RXB_CTL
decl_stmt|;
name|u32
name|saveFDI_TXB_CTL
decl_stmt|;
name|u32
name|savePFA_CTL_1
decl_stmt|;
name|u32
name|savePFB_CTL_1
decl_stmt|;
name|u32
name|savePFA_WIN_SZ
decl_stmt|;
name|u32
name|savePFB_WIN_SZ
decl_stmt|;
name|u32
name|savePFA_WIN_POS
decl_stmt|;
name|u32
name|savePFB_WIN_POS
decl_stmt|;
name|u32
name|savePCH_DREF_CONTROL
decl_stmt|;
name|u32
name|saveDISP_ARB_CTL
decl_stmt|;
name|u32
name|savePIPEA_DATA_M1
decl_stmt|;
name|u32
name|savePIPEA_DATA_N1
decl_stmt|;
name|u32
name|savePIPEA_LINK_M1
decl_stmt|;
name|u32
name|savePIPEA_LINK_N1
decl_stmt|;
name|u32
name|savePIPEB_DATA_M1
decl_stmt|;
name|u32
name|savePIPEB_DATA_N1
decl_stmt|;
name|u32
name|savePIPEB_LINK_M1
decl_stmt|;
name|u32
name|savePIPEB_LINK_N1
decl_stmt|;
name|u32
name|saveMCHBAR_RENDER_STANDBY
decl_stmt|;
name|u32
name|savePCH_PORT_HOTPLUG
decl_stmt|;
struct|struct
block|{
comment|/** Memory allocator for GTT stolen memory */
name|struct
name|drm_mm
name|stolen
decl_stmt|;
comment|/** Memory allocator for GTT */
name|struct
name|drm_mm
name|gtt_space
decl_stmt|;
comment|/** List of all objects in gtt_space. Used to restore gtt 		 * mappings on resume */
name|struct
name|list_head
name|gtt_list
decl_stmt|;
comment|/** Usable portion of the GTT for GEM */
name|unsigned
name|long
name|gtt_start
decl_stmt|;
name|unsigned
name|long
name|gtt_mappable_end
decl_stmt|;
name|unsigned
name|long
name|gtt_end
decl_stmt|;
comment|/** PPGTT used for aliasing the PPGTT with the GTT */
name|struct
name|i915_hw_ppgtt
modifier|*
name|aliasing_ppgtt
decl_stmt|;
comment|/** 		 * List of objects currently involved in rendering from the 		 * ringbuffer. 		 * 		 * Includes buffers having the contents of their GPU caches 		 * flushed, not necessarily primitives.  last_rendering_seqno 		 * represents when the rendering involved will be completed. 		 * 		 * A reference is held on the buffer while on this list. 		 */
name|struct
name|list_head
name|active_list
decl_stmt|;
comment|/** 		 * List of objects which are not in the ringbuffer but which 		 * still have a write_domain which needs to be flushed before 		 * unbinding. 		 * 		 * A reference is held on the buffer while on this list. 		 */
name|struct
name|list_head
name|flushing_list
decl_stmt|;
comment|/** 		 * LRU list of objects which are not in the ringbuffer and 		 * are ready to unbind, but are still in the GTT. 		 * 		 * last_rendering_seqno is 0 while an object is in this list. 		 * 		 * A reference is not held on the buffer while on this list, 		 * as merely being GTT-bound shouldn't prevent its being 		 * freed, and we'll pull it off the list in the free path. 		 */
name|struct
name|list_head
name|inactive_list
decl_stmt|;
comment|/** 		 * LRU list of objects which are not in the ringbuffer but 		 * are still pinned in the GTT. 		 */
name|struct
name|list_head
name|pinned_list
decl_stmt|;
comment|/** LRU list of objects with fence regs on them. */
name|struct
name|list_head
name|fence_list
decl_stmt|;
comment|/** 		 * List of objects currently pending being freed. 		 * 		 * These objects are no longer in use, but due to a signal 		 * we were prevented from freeing them at the appointed time. 		 */
name|struct
name|list_head
name|deferred_free_list
decl_stmt|;
comment|/** 		 * We leave the user IRQ off as much as possible, 		 * but this means that requests will finish and never 		 * be retired once the system goes idle. Set a timer to 		 * fire periodically while the ring is running. When it 		 * fires, go retire requests. 		 */
name|struct
name|timeout_task
name|retire_task
decl_stmt|;
comment|/** 		 * Are we in a non-interruptible section of code like 		 * modesetting? 		 */
name|bool
name|interruptible
decl_stmt|;
name|uint32_t
name|next_gem_seqno
decl_stmt|;
comment|/** 		 * Waiting sequence number, if any 		 */
name|uint32_t
name|waiting_gem_seqno
decl_stmt|;
comment|/** 		 * Last seq seen at irq time 		 */
name|uint32_t
name|irq_gem_seqno
decl_stmt|;
comment|/** 		 * Flag if the X Server, and thus DRM, is not currently in 		 * control of the device. 		 * 		 * This is set between LeaveVT and EnterVT.  It needs to be 		 * replaced with a semaphore.  It also needs to be 		 * transitioned away from for kernel modesetting. 		 */
name|int
name|suspended
decl_stmt|;
comment|/** 		 * Flag if the hardware appears to be wedged. 		 * 		 * This is set when attempts to idle the device timeout. 		 * It prevents command submission from occuring and makes 		 * every pending request fail 		 */
name|int
name|wedged
decl_stmt|;
comment|/** Bit 6 swizzling required for X tiling */
name|uint32_t
name|bit_6_swizzle_x
decl_stmt|;
comment|/** Bit 6 swizzling required for Y tiling */
name|uint32_t
name|bit_6_swizzle_y
decl_stmt|;
comment|/* storage for physical objects */
name|struct
name|drm_i915_gem_phys_object
modifier|*
name|phys_objs
index|[
name|I915_MAX_PHYS_OBJECT
index|]
decl_stmt|;
comment|/* accounting, useful for userland debugging */
name|size_t
name|gtt_total
decl_stmt|;
name|size_t
name|mappable_gtt_total
decl_stmt|;
name|size_t
name|object_memory
decl_stmt|;
name|u32
name|object_count
decl_stmt|;
name|struct
name|intel_gtt
name|gtt
decl_stmt|;
name|eventhandler_tag
name|i915_lowmem
decl_stmt|;
block|}
name|mm
struct|;
specifier|const
name|struct
name|intel_device_info
modifier|*
name|info
decl_stmt|;
name|struct
name|sdvo_device_mapping
name|sdvo_mappings
index|[
literal|2
index|]
decl_stmt|;
comment|/* indicate whether the LVDS_BORDER should be enabled or not */
name|unsigned
name|int
name|lvds_border_bits
decl_stmt|;
comment|/* Panel fitter placement and size for Ironlake+ */
name|u32
name|pch_pf_pos
decl_stmt|,
name|pch_pf_size
decl_stmt|;
name|struct
name|drm_crtc
modifier|*
name|plane_to_crtc_mapping
index|[
literal|3
index|]
decl_stmt|;
name|struct
name|drm_crtc
modifier|*
name|pipe_to_crtc_mapping
index|[
literal|3
index|]
decl_stmt|;
comment|/* wait_queue_head_t pending_flip_queue; XXXKIB */
name|bool
name|flip_pending_is_done
decl_stmt|;
comment|/* Reclocking support */
name|bool
name|render_reclock_avail
decl_stmt|;
name|bool
name|lvds_downclock_avail
decl_stmt|;
comment|/* indicates the reduced downclock for LVDS*/
name|int
name|lvds_downclock
decl_stmt|;
name|struct
name|task
name|idle_task
decl_stmt|;
name|struct
name|callout
name|idle_callout
decl_stmt|;
name|bool
name|busy
decl_stmt|;
name|u16
name|orig_clock
decl_stmt|;
name|int
name|child_dev_num
decl_stmt|;
name|struct
name|child_device_config
modifier|*
name|child_dev
decl_stmt|;
name|struct
name|drm_connector
modifier|*
name|int_lvds_connector
decl_stmt|;
name|struct
name|drm_connector
modifier|*
name|int_edp_connector
decl_stmt|;
name|device_t
name|bridge_dev
decl_stmt|;
name|bool
name|mchbar_need_disable
decl_stmt|;
name|int
name|mch_res_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|mch_res
decl_stmt|;
name|struct
name|mtx
name|rps_lock
decl_stmt|;
name|u32
name|pm_iir
decl_stmt|;
name|struct
name|task
name|rps_task
decl_stmt|;
name|u8
name|cur_delay
decl_stmt|;
name|u8
name|min_delay
decl_stmt|;
name|u8
name|max_delay
decl_stmt|;
name|u8
name|fmax
decl_stmt|;
name|u8
name|fstart
decl_stmt|;
name|u64
name|last_count1
decl_stmt|;
name|unsigned
name|long
name|last_time1
decl_stmt|;
name|unsigned
name|long
name|chipset_power
decl_stmt|;
name|u64
name|last_count2
decl_stmt|;
name|struct
name|timespec
name|last_time2
decl_stmt|;
name|unsigned
name|long
name|gfx_power
decl_stmt|;
name|int
name|c_m
decl_stmt|;
name|int
name|r_t
decl_stmt|;
name|u8
name|corr
decl_stmt|;
name|struct
name|mtx
modifier|*
name|mchdev_lock
decl_stmt|;
name|enum
name|no_fbc_reason
name|no_fbc_reason
decl_stmt|;
name|unsigned
name|int
name|stop_rings
decl_stmt|;
name|unsigned
name|long
name|cfb_size
decl_stmt|;
name|unsigned
name|int
name|cfb_fb
decl_stmt|;
name|int
name|cfb_plane
decl_stmt|;
name|int
name|cfb_y
decl_stmt|;
name|struct
name|intel_fbc_work
modifier|*
name|fbc_work
decl_stmt|;
name|unsigned
name|int
name|fsb_freq
decl_stmt|,
name|mem_freq
decl_stmt|,
name|is_ddr3
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|tq
decl_stmt|;
name|struct
name|task
name|error_task
decl_stmt|;
name|struct
name|task
name|hotplug_task
decl_stmt|;
name|int
name|error_completion
decl_stmt|;
name|struct
name|mtx
name|error_completion_lock
decl_stmt|;
name|struct
name|drm_i915_error_state
modifier|*
name|first_error
decl_stmt|;
name|struct
name|mtx
name|error_lock
decl_stmt|;
name|struct
name|callout
name|hangcheck_timer
decl_stmt|;
name|unsigned
name|long
name|last_gpu_reset
decl_stmt|;
name|struct
name|intel_fbdev
modifier|*
name|fbdev
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|broadcast_rgb_property
decl_stmt|;
name|struct
name|drm_property
modifier|*
name|force_audio_property
decl_stmt|;
name|bool
name|hw_contexts_disabled
decl_stmt|;
name|uint32_t
name|hw_context_size
decl_stmt|;
block|}
name|drm_i915_private_t
typedef|;
end_typedef

begin_comment
comment|/* Iterate over initialised rings */
end_comment

begin_define
define|#
directive|define
name|for_each_ring
parameter_list|(
name|ring__
parameter_list|,
name|dev_priv__
parameter_list|,
name|i__
parameter_list|)
define|\
value|for ((i__) = 0; (i__)< I915_NUM_RINGS; (i__)++) \ 		if (((ring__) =&(dev_priv__)->rings[(i__)]), intel_ring_initialized((ring__)))
end_define

begin_enum
enum|enum
name|hdmi_force_audio
block|{
name|HDMI_AUDIO_OFF_DVI
init|=
operator|-
literal|2
block|,
comment|/* no aux data for HDMI-DVI converter */
name|HDMI_AUDIO_OFF
block|,
comment|/* force turn off HDMI audio */
name|HDMI_AUDIO_AUTO
block|,
comment|/* trust EDID */
name|HDMI_AUDIO_ON
block|,
comment|/* force turn on HDMI audio */
block|}
enum|;
end_enum

begin_enum
enum|enum
name|i915_cache_level
block|{
name|I915_CACHE_NONE
block|,
name|I915_CACHE_LLC
block|,
name|I915_CACHE_LLC_MLC
block|,
comment|/* gen6+ */
block|}
enum|;
end_enum

begin_enum
enum|enum
name|intel_chip_family
block|{
name|CHIP_I8XX
init|=
literal|0x01
block|,
name|CHIP_I9XX
init|=
literal|0x02
block|,
name|CHIP_I915
init|=
literal|0x04
block|,
name|CHIP_I965
init|=
literal|0x08
block|, }
enum|;
end_enum

begin_comment
comment|/** driver private structure attached to each drm_gem_object */
end_comment

begin_struct
struct|struct
name|drm_i915_gem_object
block|{
name|struct
name|drm_gem_object
name|base
decl_stmt|;
comment|/** Current space allocated to this object in the GTT, if any. */
name|struct
name|drm_mm_node
modifier|*
name|gtt_space
decl_stmt|;
name|struct
name|list_head
name|gtt_list
decl_stmt|;
comment|/** This object's place on the active/flushing/inactive lists */
name|struct
name|list_head
name|ring_list
decl_stmt|;
name|struct
name|list_head
name|mm_list
decl_stmt|;
comment|/** This object's place on GPU write list */
name|struct
name|list_head
name|gpu_write_list
decl_stmt|;
comment|/** This object's place in the batchbuffer or on the eviction list */
name|struct
name|list_head
name|exec_list
decl_stmt|;
comment|/** 	 * This is set if the object is on the active or flushing lists 	 * (has pending rendering), and is not set if it's on inactive (ready 	 * to be unbound). 	 */
name|unsigned
name|int
name|active
range|:
literal|1
decl_stmt|;
comment|/** 	 * This is set if the object has been written to since last bound 	 * to the GTT 	 */
name|unsigned
name|int
name|dirty
range|:
literal|1
decl_stmt|;
comment|/** 	 * This is set if the object has been written to since the last 	 * GPU flush. 	 */
name|unsigned
name|int
name|pending_gpu_write
range|:
literal|1
decl_stmt|;
comment|/** 	 * Fence register bits (if any) for this object.  Will be set 	 * as needed when mapped into the GTT. 	 * Protected by dev->struct_mutex. 	 */
name|signed
name|int
name|fence_reg
range|:
name|I915_MAX_NUM_FENCE_BITS
decl_stmt|;
comment|/** 	 * Advice: are the backing pages purgeable? 	 */
name|unsigned
name|int
name|madv
range|:
literal|2
decl_stmt|;
comment|/** 	 * Current tiling mode for the object. 	 */
name|unsigned
name|int
name|tiling_mode
range|:
literal|2
decl_stmt|;
name|unsigned
name|int
name|tiling_changed
range|:
literal|1
decl_stmt|;
comment|/** How many users have pinned this object in GTT space. The following 	 * users can each hold at most one reference: pwrite/pread, pin_ioctl 	 * (via user_pin_count), execbuffer (objects are not allowed multiple 	 * times for the same batchbuffer), and the framebuffer code. When 	 * switching/pageflipping, the framebuffer code has at most two buffers 	 * pinned per crtc. 	 * 	 * In the worst case this is 1 + 1 + 1 + 2*2 = 7. That would fit into 3 	 * bits with absolutely no headroom. So use 4 bits. */
name|unsigned
name|int
name|pin_count
range|:
literal|4
decl_stmt|;
define|#
directive|define
name|DRM_I915_GEM_OBJECT_MAX_PIN_COUNT
value|0xf
comment|/** 	 * Is the object at the current location in the gtt mappable and 	 * fenceable? Used to avoid costly recalculations. 	 */
name|unsigned
name|int
name|map_and_fenceable
range|:
literal|1
decl_stmt|;
comment|/** 	 * Whether the current gtt mapping needs to be mappable (and isn't just 	 * mappable by accident). Track pin and fault separate for a more 	 * accurate mappable working set. 	 */
name|unsigned
name|int
name|fault_mappable
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|pin_mappable
range|:
literal|1
decl_stmt|;
comment|/* 	 * Is the GPU currently using a fence to access this buffer, 	 */
name|unsigned
name|int
name|pending_fenced_gpu_access
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|fenced_gpu_access
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|cache_level
range|:
literal|2
decl_stmt|;
name|unsigned
name|int
name|has_aliasing_ppgtt_mapping
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|has_global_gtt_mapping
range|:
literal|1
decl_stmt|;
name|vm_page_t
modifier|*
name|pages
decl_stmt|;
comment|/** 	 * DMAR support 	 */
name|struct
name|sglist
modifier|*
name|sg_list
decl_stmt|;
comment|/** 	 * Used for performing relocations during execbuffer insertion. 	 */
name|LIST_ENTRY
argument_list|(
argument|drm_i915_gem_object
argument_list|)
name|exec_node
expr_stmt|;
name|unsigned
name|long
name|exec_handle
decl_stmt|;
name|struct
name|drm_i915_gem_exec_object2
modifier|*
name|exec_entry
decl_stmt|;
comment|/** 	 * Current offset of the object in GTT space. 	 * 	 * This is the same as gtt_space->start 	 */
name|uint32_t
name|gtt_offset
decl_stmt|;
comment|/** Breadcrumb of last rendering to the buffer. */
name|uint32_t
name|last_rendering_seqno
decl_stmt|;
name|struct
name|intel_ring_buffer
modifier|*
name|ring
decl_stmt|;
comment|/** Breadcrumb of last fenced GPU access to the buffer. */
name|uint32_t
name|last_fenced_seqno
decl_stmt|;
name|struct
name|intel_ring_buffer
modifier|*
name|last_fenced_ring
decl_stmt|;
comment|/** Current tiling stride for the object, if it's tiled. */
name|uint32_t
name|stride
decl_stmt|;
comment|/** Record of address bit 17 of each page at last unbind. */
name|unsigned
name|long
modifier|*
name|bit_17
decl_stmt|;
comment|/** 	 * If present, while GEM_DOMAIN_CPU is in the read domain this array 	 * flags which individual pages are valid. 	 */
name|uint8_t
modifier|*
name|page_cpu_valid
decl_stmt|;
comment|/** User space pin count and filp owning the pin */
name|uint32_t
name|user_pin_count
decl_stmt|;
name|struct
name|drm_file
modifier|*
name|pin_filp
decl_stmt|;
comment|/** for phy allocated objects */
name|struct
name|drm_i915_gem_phys_object
modifier|*
name|phys_obj
decl_stmt|;
comment|/** 	 * Number of crtcs where this object is currently the fb, but 	 * will be page flipped away on the next vblank.  When it 	 * reaches 0, dev_priv->pending_flip_queue will be woken up. 	 */
name|int
name|pending_flip
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|to_intel_bo
parameter_list|(
name|x
parameter_list|)
value|__containerof(x, struct drm_i915_gem_object, base)
end_define

begin_comment
comment|/**  * Request queue structure.  *  * The request queue allows us to note sequence numbers that have been emitted  * and may be associated with active buffers to be retired.  *  * By keeping this list, we can avoid having to do questionable  * sequence-number comparisons on buffer last_rendering_seqnos, and associate  * an emission time with seqnos for tracking how far ahead of the GPU we are.  */
end_comment

begin_struct
struct|struct
name|drm_i915_gem_request
block|{
comment|/** On Which ring this request was generated */
name|struct
name|intel_ring_buffer
modifier|*
name|ring
decl_stmt|;
comment|/** GEM sequence number associated with this request. */
name|uint32_t
name|seqno
decl_stmt|;
comment|/** Postion in the ringbuffer of the end of the request */
name|u32
name|tail
decl_stmt|;
comment|/** Time at which this request was emitted, in jiffies. */
name|unsigned
name|long
name|emitted_jiffies
decl_stmt|;
comment|/** global list entry for this request */
name|struct
name|list_head
name|list
decl_stmt|;
name|struct
name|drm_i915_file_private
modifier|*
name|file_priv
decl_stmt|;
comment|/** file_priv list entry for this request */
name|struct
name|list_head
name|client_list
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_i915_file_private
block|{
struct|struct
block|{
name|struct
name|list_head
name|request_list
decl_stmt|;
name|struct
name|mtx
name|lck
decl_stmt|;
block|}
name|mm
struct|;
name|struct
name|drm_gem_names
name|context_idr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|drm_i915_error_state
block|{
name|u32
name|eir
decl_stmt|;
name|u32
name|pgtbl_er
decl_stmt|;
name|u32
name|pipestat
index|[
name|I915_MAX_PIPES
index|]
decl_stmt|;
name|u32
name|tail
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|head
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|ipeir
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|ipehr
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|instdone
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|acthd
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|semaphore_mboxes
index|[
name|I915_NUM_RINGS
index|]
index|[
name|I915_NUM_RINGS
operator|-
literal|1
index|]
decl_stmt|;
comment|/* our own tracking of ring head and tail */
name|u32
name|cpu_ring_head
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|cpu_ring_tail
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|error
decl_stmt|;
comment|/* gen6+ */
name|u32
name|instpm
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|instps
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|instdone1
decl_stmt|;
name|u32
name|seqno
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u64
name|bbaddr
decl_stmt|;
name|u32
name|fault_reg
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u32
name|done_reg
decl_stmt|;
name|u32
name|faddr
index|[
name|I915_NUM_RINGS
index|]
decl_stmt|;
name|u64
name|fence
index|[
name|I915_MAX_NUM_FENCES
index|]
decl_stmt|;
name|struct
name|timeval
name|time
decl_stmt|;
struct|struct
name|drm_i915_error_ring
block|{
struct|struct
name|drm_i915_error_object
block|{
name|int
name|page_count
decl_stmt|;
name|u32
name|gtt_offset
decl_stmt|;
name|u32
modifier|*
name|pages
index|[
literal|0
index|]
decl_stmt|;
block|}
modifier|*
name|ringbuffer
struct|,
modifier|*
name|batchbuffer
struct|;
struct|struct
name|drm_i915_error_request
block|{
name|long
name|jiffies
decl_stmt|;
name|u32
name|seqno
decl_stmt|;
name|u32
name|tail
decl_stmt|;
block|}
modifier|*
name|requests
struct|;
name|int
name|num_requests
decl_stmt|;
block|}
name|ring
index|[
name|I915_NUM_RINGS
index|]
struct|;
struct|struct
name|drm_i915_error_buffer
block|{
name|u32
name|size
decl_stmt|;
name|u32
name|name
decl_stmt|;
name|u32
name|seqno
decl_stmt|;
name|u32
name|gtt_offset
decl_stmt|;
name|u32
name|read_domains
decl_stmt|;
name|u32
name|write_domain
decl_stmt|;
name|s32
name|fence_reg
range|:
name|I915_MAX_NUM_FENCE_BITS
decl_stmt|;
name|s32
name|pinned
range|:
literal|2
decl_stmt|;
name|u32
name|tiling
range|:
literal|2
decl_stmt|;
name|u32
name|dirty
range|:
literal|1
decl_stmt|;
name|u32
name|purgeable
range|:
literal|1
decl_stmt|;
name|s32
name|ring
range|:
literal|4
decl_stmt|;
name|u32
name|cache_level
range|:
literal|2
decl_stmt|;
block|}
modifier|*
name|active_bo
struct|,
modifier|*
name|pinned_bo
struct|;
name|u32
name|active_bo_count
decl_stmt|,
name|pinned_bo_count
decl_stmt|;
name|struct
name|intel_overlay_error_state
modifier|*
name|overlay
decl_stmt|;
name|struct
name|intel_display_error_state
modifier|*
name|display
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * RC6 is a special power stage which allows the GPU to enter an very  * low-voltage mode when idle, using down to 0V while at this stage.  This  * stage is entered automatically when the GPU is idle when RC6 support is  * enabled, and as soon as new workload arises GPU wakes up automatically as well.  *  * There are different RC6 modes available in Intel GPU, which differentiate  * among each other with the latency required to enter and leave RC6 and  * voltage consumed by the GPU in different states.  *  * The combination of the following flags define which states GPU is allowed  * to enter, while RC6 is the normal RC6 state, RC6p is the deep RC6, and  * RC6pp is deepest RC6. Their support by hardware varies according to the  * GPU, BIOS, chipset and platform. RC6 is usually the safest one and the one  * which brings the most power savings; deeper states save more power, but  * require higher latency to switch to and wake up.  */
end_comment

begin_define
define|#
directive|define
name|INTEL_RC6_ENABLE
value|(1<<0)
end_define

begin_define
define|#
directive|define
name|INTEL_RC6p_ENABLE
value|(1<<1)
end_define

begin_define
define|#
directive|define
name|INTEL_RC6pp_ENABLE
value|(1<<2)
end_define

begin_decl_stmt
specifier|extern
name|int
name|intel_iommu_enabled
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|drm_ioctl_desc
name|i915_ioctls
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|drm_driver_info
name|i915_driver_info
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|cdev_pager_ops
name|i915_gem_pager_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|i915_fbpercrtc
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|i915_panel_ignore_lid
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|i915_powersave
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|i915_semaphores
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|i915_lvds_downclock
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|i915_panel_use_ssc
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|i915_vbt_sdvo_panel_type
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|i915_enable_rc6
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|i915_enable_fbc
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|i915_enable_ppgtt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|i915_enable_hangcheck
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|const
name|struct
name|intel_device_info
modifier|*
name|i915_get_device_id
parameter_list|(
name|int
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_gpu_reset
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_reset
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* i915_debug.c */
end_comment

begin_function_decl
name|int
name|i915_sysctl_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|sysctl_ctx_list
modifier|*
name|ctx
parameter_list|,
name|struct
name|sysctl_oid
modifier|*
name|top
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_sysctl_cleanup
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* i915_dma.c */
end_comment

begin_function_decl
name|int
name|i915_batchbuffer
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_cmdbuffer
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_getparam
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|i915_kernel_lost_context
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_driver_load
parameter_list|(
name|struct
name|drm_device
modifier|*
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_driver_unload
parameter_list|(
name|struct
name|drm_device
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_driver_open
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|i915_driver_lastclose
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|i915_driver_preclose
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|i915_driver_postclose
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_driver_device_is_agp
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|i915_compat_ioctl
parameter_list|(
name|struct
name|file
modifier|*
name|filp
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|unsigned
name|long
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_emit_box
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_clip_rect
name|__user
modifier|*
name|boxes
parameter_list|,
name|int
name|i
parameter_list|,
name|int
name|DR1
parameter_list|,
name|int
name|DR4
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_emit_box_p
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_clip_rect
modifier|*
name|box
parameter_list|,
name|int
name|DR1
parameter_list|,
name|int
name|DR4
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|long
name|i915_chipset_val
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|long
name|i915_mch_val
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_update_gfx_val
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|long
name|i915_gfx_val
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|long
name|i915_read_mch_val
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|i915_gpu_raise
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|i915_gpu_lower
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|i915_gpu_busy
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|i915_gpu_turbo_disable
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* i915_irq.c */
end_comment

begin_function_decl
specifier|extern
name|int
name|i915_irq_emit
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_irq_wait
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_irq_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_vblank_pipe_set
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_vblank_pipe_get
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_vblank_swap
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|intel_enable_asle
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_hangcheck_elapsed
parameter_list|(
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_handle_error
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|bool
name|wedged
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_enable_pipestat
parameter_list|(
name|drm_i915_private_t
modifier|*
name|dev_priv
parameter_list|,
name|int
name|pipe
parameter_list|,
name|u32
name|mask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_disable_pipestat
parameter_list|(
name|drm_i915_private_t
modifier|*
name|dev_priv
parameter_list|,
name|int
name|pipe
parameter_list|,
name|u32
name|mask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_destroy_error_state
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* i915_gem.c */
end_comment

begin_function_decl
name|int
name|i915_gem_create
parameter_list|(
name|struct
name|drm_file
modifier|*
name|file
parameter_list|,
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|uint32_t
modifier|*
name|handle_p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_init_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_create_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_pread_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_pwrite_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_mmap_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_mmap_gtt_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_set_domain_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_sw_finish_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_execbuffer
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_execbuffer2
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_pin_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_unpin_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_busy_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_throttle_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_madvise_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_entervt_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_leavevt_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_set_tiling
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_get_tiling
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_get_aperture_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_load
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_unload
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_init_object
parameter_list|(
name|struct
name|drm_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_free_object
parameter_list|(
name|struct
name|drm_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_object_pin
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|uint32_t
name|alignment
parameter_list|,
name|bool
name|map_and_fenceable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_object_unpin
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_object_unbind
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_lastclose
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|i915_get_gem_seqno
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|i915_gem_object_pin_fence
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|->
name|fence_reg
operator|!=
name|I915_FENCE_REG_NONE
condition|)
block|{
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
init|=
name|obj
operator|->
name|base
operator|.
name|dev
operator|->
name|dev_private
decl_stmt|;
name|dev_priv
operator|->
name|fence_regs
index|[
name|obj
operator|->
name|fence_reg
index|]
operator|.
name|pin_count
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|i915_gem_object_unpin_fence
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|->
name|fence_reg
operator|!=
name|I915_FENCE_REG_NONE
condition|)
block|{
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
init|=
name|obj
operator|->
name|base
operator|.
name|dev
operator|->
name|dev_private
decl_stmt|;
name|dev_priv
operator|->
name|fence_regs
index|[
name|obj
operator|->
name|fence_reg
index|]
operator|.
name|pin_count
operator|--
expr_stmt|;
block|}
block|}
end_function

begin_function_decl
name|void
name|i915_gem_retire_requests
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_retire_requests_ring
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_clflush_object
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|drm_i915_gem_object
modifier|*
name|i915_gem_alloc_object
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_do_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|unsigned
name|long
name|start
parameter_list|,
name|unsigned
name|long
name|mappable_end
parameter_list|,
name|unsigned
name|long
name|end
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|i915_gem_get_unfenced_gtt_alignment
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|uint32_t
name|size
parameter_list|,
name|int
name|tiling_mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_mutex_lock_interruptible
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_object_set_to_gtt_domain
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|bool
name|write
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_object_pin_to_display_plane
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|u32
name|alignment
parameter_list|,
name|struct
name|intel_ring_buffer
modifier|*
name|pipelined
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_object_finish_gpu
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_flush_ring
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|uint32_t
name|invalidate_domains
parameter_list|,
name|uint32_t
name|flush_domains
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_release_mmap
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_object_wait_rendering
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_object_put_fence
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_idle
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_init_hw
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_init_swizzling
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_init_ppgtt
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_cleanup_ringbuffer
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gpu_idle
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|bool
name|do_retire
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_object_move_to_active
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|uint32_t
name|seqno
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_add_request
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file
parameter_list|,
name|struct
name|drm_i915_gem_request
modifier|*
name|request
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_object_get_fence
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|struct
name|intel_ring_buffer
modifier|*
name|pipelined
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_reset
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_wait_request
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|uint32_t
name|seqno
parameter_list|,
name|bool
name|do_retire
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_mmap
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|int
name|prot
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_fault
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|int
name|prot
parameter_list|,
name|uint64_t
modifier|*
name|phys
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_release
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_object_set_cache_level
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|enum
name|i915_cache_level
name|cache_level
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* i915_gem_context.c */
end_comment

begin_function_decl
name|void
name|i915_gem_context_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_context_fini
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_context_close
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_switch_context
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file
parameter_list|,
name|int
name|to_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_context_create_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_context_destroy_ioctl
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_free_all_phys_object
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_detach_phys_object
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_attach_phys_object
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|align
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_dumb_create
parameter_list|(
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|,
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_mode_create_dumb
modifier|*
name|args
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_mmap_gtt
parameter_list|(
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|,
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|uint32_t
name|handle
parameter_list|,
name|uint64_t
modifier|*
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_dumb_destroy
parameter_list|(
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|,
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|uint32_t
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* i915_gem_tiling.c */
end_comment

begin_function_decl
name|void
name|i915_gem_detect_bit_6_swizzle
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_object_do_bit_17_swizzle
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_object_save_bit_17_swizzle
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* i915_gem_evict.c */
end_comment

begin_function_decl
name|int
name|i915_gem_evict_something
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|min_size
parameter_list|,
name|unsigned
name|alignment
parameter_list|,
name|bool
name|mappable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_evict_everything
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|bool
name|purgeable_only
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_evict_inactive
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|bool
name|purgeable_only
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* i915_suspend.c */
end_comment

begin_function_decl
specifier|extern
name|int
name|i915_save_state
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|i915_restore_state
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* intel_iic.c */
end_comment

begin_function_decl
specifier|extern
name|int
name|intel_setup_gmbus
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_teardown_gmbus
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_gmbus_set_speed
parameter_list|(
name|device_t
name|idev
parameter_list|,
name|int
name|speed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_gmbus_force_bit
parameter_list|(
name|device_t
name|idev
parameter_list|,
name|bool
name|force_bit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_iic_reset
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* intel_opregion.c */
end_comment

begin_function_decl
name|int
name|intel_opregion_setup
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_opregion_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_opregion_fini
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|opregion_asle_intr
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|opregion_enable_asle
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* i915_gem_gtt.c */
end_comment

begin_function_decl
name|int
name|i915_gem_init_aliasing_ppgtt
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_cleanup_aliasing_ppgtt
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_ppgtt_bind_object
parameter_list|(
name|struct
name|i915_hw_ppgtt
modifier|*
name|ppgtt
parameter_list|,
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|enum
name|i915_cache_level
name|cache_level
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_ppgtt_unbind_object
parameter_list|(
name|struct
name|i915_hw_ppgtt
modifier|*
name|ppgtt
parameter_list|,
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_restore_gtt_mappings
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i915_gem_gtt_bind_object
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_gtt_unbind_object
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i915_gem_gtt_rebind_object
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|enum
name|i915_cache_level
name|cache_level
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* modesetting */
end_comment

begin_function_decl
specifier|extern
name|void
name|intel_modeset_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_modeset_gem_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_modeset_cleanup
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_modeset_vga_set_state
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|bool
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_fbc_enabled
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_disable_fbc
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|ironlake_set_drps
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|u8
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ironlake_init_pch_refclk
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ironlake_enable_rc6
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|gen6_set_rps
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|u8
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_detect_pch
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_trans_dp_port_sel
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__gen6_gt_force_wake_get
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__gen6_gt_force_wake_mt_get
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__gen6_gt_force_wake_put
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__gen6_gt_force_wake_mt_put
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|intel_overlay_error_state
modifier|*
name|intel_overlay_capture_error_state
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_overlay_print_error_state
parameter_list|(
name|struct
name|sbuf
modifier|*
name|m
parameter_list|,
name|struct
name|intel_overlay_error_state
modifier|*
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|intel_display_error_state
modifier|*
name|intel_display_capture_error_state
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_display_print_error_state
parameter_list|(
name|struct
name|sbuf
modifier|*
name|m
parameter_list|,
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|intel_display_error_state
modifier|*
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|trace_i915_reg_rw
parameter_list|(
name|boolean_t
name|rw
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint64_t
name|val
parameter_list|,
name|int
name|sz
parameter_list|)
block|{
name|CTR4
argument_list|(
name|KTR_DRM_REG
argument_list|,
literal|"[%x/%d] %c %x"
argument_list|,
name|reg
argument_list|,
name|sz
argument_list|,
name|rw
condition|?
literal|"w"
else|:
literal|"r"
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* On SNB platform, before reading ring registers forcewake bit  * must be set to prevent GT core from power down and stale values being  * returned.  */
end_comment

begin_function_decl
name|void
name|gen6_gt_force_wake_get
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|gen6_gt_force_wake_put
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__gen6_gt_wait_for_fifo
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* We give fast paths for the really cool registers */
end_comment

begin_define
define|#
directive|define
name|NEEDS_FORCE_WAKE
parameter_list|(
name|dev_priv
parameter_list|,
name|reg
parameter_list|)
define|\
value|(((dev_priv)->info->gen>= 6)&& \ 	 ((reg)< 0x40000)&&		 \ 	 ((reg) != FORCEWAKE))
end_define

begin_define
define|#
directive|define
name|__i915_read
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
define|\
value|u##x i915_read##x(struct drm_i915_private *dev_priv, u32 reg);
end_define

begin_macro
name|__i915_read
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
end_macro

begin_macro
name|__i915_read
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
end_macro

begin_macro
name|__i915_read
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
end_macro

begin_macro
name|__i915_read
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|__i915_read
end_undef

begin_define
define|#
directive|define
name|__i915_write
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
define|\
value|void i915_write##x(struct drm_i915_private *dev_priv, u32 reg, u##x val);
end_define

begin_macro
name|__i915_write
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
end_macro

begin_macro
name|__i915_write
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
end_macro

begin_macro
name|__i915_write
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
end_macro

begin_macro
name|__i915_write
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|__i915_write
end_undef

begin_define
define|#
directive|define
name|I915_READ8
parameter_list|(
name|reg
parameter_list|)
value|i915_read8(dev_priv, (reg))
end_define

begin_define
define|#
directive|define
name|I915_WRITE8
parameter_list|(
name|reg
parameter_list|,
name|val
parameter_list|)
value|i915_write8(dev_priv, (reg), (val))
end_define

begin_define
define|#
directive|define
name|I915_READ16
parameter_list|(
name|reg
parameter_list|)
value|i915_read16(dev_priv, (reg))
end_define

begin_define
define|#
directive|define
name|I915_WRITE16
parameter_list|(
name|reg
parameter_list|,
name|val
parameter_list|)
value|i915_write16(dev_priv, (reg), (val))
end_define

begin_define
define|#
directive|define
name|I915_READ16_NOTRACE
parameter_list|(
name|reg
parameter_list|)
value|DRM_READ16(dev_priv->mmio_map, (reg))
end_define

begin_define
define|#
directive|define
name|I915_WRITE16_NOTRACE
parameter_list|(
name|reg
parameter_list|,
name|val
parameter_list|)
value|DRM_WRITE16(dev_priv->mmio_map, (reg), (val))
end_define

begin_define
define|#
directive|define
name|I915_READ
parameter_list|(
name|reg
parameter_list|)
value|i915_read32(dev_priv, (reg))
end_define

begin_define
define|#
directive|define
name|I915_WRITE
parameter_list|(
name|reg
parameter_list|,
name|val
parameter_list|)
value|i915_write32(dev_priv, (reg), (val))
end_define

begin_define
define|#
directive|define
name|I915_READ_NOTRACE
parameter_list|(
name|reg
parameter_list|)
value|DRM_READ32(dev_priv->mmio_map, (reg))
end_define

begin_define
define|#
directive|define
name|I915_WRITE_NOTRACE
parameter_list|(
name|reg
parameter_list|,
name|val
parameter_list|)
value|DRM_WRITE32(dev_priv->mmio_map, (reg), (val))
end_define

begin_define
define|#
directive|define
name|I915_WRITE64
parameter_list|(
name|reg
parameter_list|,
name|val
parameter_list|)
value|i915_write64(dev_priv, (reg), (val))
end_define

begin_define
define|#
directive|define
name|I915_READ64
parameter_list|(
name|reg
parameter_list|)
value|i915_read64(dev_priv, (reg))
end_define

begin_define
define|#
directive|define
name|POSTING_READ
parameter_list|(
name|reg
parameter_list|)
value|(void)I915_READ_NOTRACE(reg)
end_define

begin_define
define|#
directive|define
name|POSTING_READ16
parameter_list|(
name|reg
parameter_list|)
value|(void)I915_READ16_NOTRACE(reg)
end_define

begin_define
define|#
directive|define
name|I915_VERBOSE
value|0
end_define

begin_define
define|#
directive|define
name|LP_RING
parameter_list|(
name|d
parameter_list|)
value|(&((struct drm_i915_private *)(d))->rings[RCS])
end_define

begin_define
define|#
directive|define
name|BEGIN_LP_RING
parameter_list|(
name|n
parameter_list|)
define|\
value|intel_ring_begin(LP_RING(dev_priv), (n))
end_define

begin_define
define|#
directive|define
name|OUT_RING
parameter_list|(
name|x
parameter_list|)
define|\
value|intel_ring_emit(LP_RING(dev_priv), x)
end_define

begin_define
define|#
directive|define
name|ADVANCE_LP_RING
parameter_list|()
define|\
value|intel_ring_advance(LP_RING(dev_priv))
end_define

begin_define
define|#
directive|define
name|RING_LOCK_TEST_WITH_RETURN
parameter_list|(
name|dev
parameter_list|,
name|file
parameter_list|)
value|do {			\ 	if (LP_RING(dev->dev_private)->obj == NULL)			\ 		LOCK_TEST_WITH_RETURN(dev, file);			\ } while (0)
end_define

begin_comment
comment|/**  * Reads a dword out of the status page, which is written to from the command  * queue by automatic updates, MI_REPORT_HEAD, MI_STORE_DATA_INDEX, or  * MI_STORE_DATA_IMM.  *  * The following dwords have a reserved meaning:  * 0x00: ISR copy, updated when an ISR bit not set in the HWSTAM changes.  * 0x04: ring 0 head pointer  * 0x05: ring 1 head pointer (915-class)  * 0x06: ring 2 head pointer (915-class)  * 0x10-0x1b: Context status DWords (GM45)  * 0x1f: Last written status offset. (GM45)  *  * The area from dword 0x20 to 0x3ff is available for driver usage.  */
end_comment

begin_define
define|#
directive|define
name|READ_HWSP
parameter_list|(
name|dev_priv
parameter_list|,
name|reg
parameter_list|)
value|(((volatile u32*)(dev_priv->hw_status_page))[reg])
end_define

begin_define
define|#
directive|define
name|READ_BREADCRUMB
parameter_list|(
name|dev_priv
parameter_list|)
value|READ_HWSP(dev_priv, I915_BREADCRUMB_INDEX)
end_define

begin_define
define|#
directive|define
name|I915_GEM_HWS_INDEX
value|0x20
end_define

begin_define
define|#
directive|define
name|I915_BREADCRUMB_INDEX
value|0x21
end_define

begin_define
define|#
directive|define
name|INTEL_INFO
parameter_list|(
name|dev
parameter_list|)
value|(((struct drm_i915_private *) (dev)->dev_private)->info)
end_define

begin_define
define|#
directive|define
name|IS_I830
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x3577)
end_define

begin_define
define|#
directive|define
name|IS_845G
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x2562)
end_define

begin_define
define|#
directive|define
name|IS_I85X
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_i85x)
end_define

begin_define
define|#
directive|define
name|IS_I865G
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x2572)
end_define

begin_define
define|#
directive|define
name|IS_I915G
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_i915g)
end_define

begin_define
define|#
directive|define
name|IS_I915GM
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x2592)
end_define

begin_define
define|#
directive|define
name|IS_I945G
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x2772)
end_define

begin_define
define|#
directive|define
name|IS_I945GM
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_i945gm)
end_define

begin_define
define|#
directive|define
name|IS_BROADWATER
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_broadwater)
end_define

begin_define
define|#
directive|define
name|IS_CRESTLINE
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_crestline)
end_define

begin_define
define|#
directive|define
name|IS_GM45
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x2A42)
end_define

begin_define
define|#
directive|define
name|IS_G4X
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_g4x)
end_define

begin_define
define|#
directive|define
name|IS_PINEVIEW_G
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0xa001)
end_define

begin_define
define|#
directive|define
name|IS_PINEVIEW_M
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0xa011)
end_define

begin_define
define|#
directive|define
name|IS_PINEVIEW
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_pineview)
end_define

begin_define
define|#
directive|define
name|IS_G33
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_g33)
end_define

begin_define
define|#
directive|define
name|IS_IRONLAKE_D
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x0042)
end_define

begin_define
define|#
directive|define
name|IS_IRONLAKE_M
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x0046)
end_define

begin_define
define|#
directive|define
name|IS_IVYBRIDGE
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_ivybridge)
end_define

begin_define
define|#
directive|define
name|IS_MOBILE
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->is_mobile)
end_define

begin_comment
comment|/* XXXKIB LEGACY */
end_comment

begin_define
define|#
directive|define
name|IS_I965G
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x2972 || \ 		       (dev)->pci_device == 0x2982 || \ 		       (dev)->pci_device == 0x2992 || \ 		       (dev)->pci_device == 0x29A2 || \ 		       (dev)->pci_device == 0x2A02 || \ 		       (dev)->pci_device == 0x2A12 || \ 		       (dev)->pci_device == 0x2A42 || \ 		       (dev)->pci_device == 0x2E02 || \ 		       (dev)->pci_device == 0x2E12 || \ 		       (dev)->pci_device == 0x2E22 || \ 		       (dev)->pci_device == 0x2E32)
end_define

begin_define
define|#
directive|define
name|IS_I965GM
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0x2A02)
end_define

begin_define
define|#
directive|define
name|IS_IGDG
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0xa001)
end_define

begin_define
define|#
directive|define
name|IS_IGDGM
parameter_list|(
name|dev
parameter_list|)
value|((dev)->pci_device == 0xa011)
end_define

begin_define
define|#
directive|define
name|IS_IGD
parameter_list|(
name|dev
parameter_list|)
value|(IS_IGDG(dev) || IS_IGDGM(dev))
end_define

begin_define
define|#
directive|define
name|IS_I9XX
parameter_list|(
name|dev
parameter_list|)
value|(IS_I915G(dev) || IS_I915GM(dev) || IS_I945G(dev) || \ 		      IS_I945GM(dev) || IS_I965G(dev) || IS_G33(dev))
end_define

begin_comment
comment|/* XXXKIB LEGACY END */
end_comment

begin_define
define|#
directive|define
name|IS_GEN2
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen == 2)
end_define

begin_define
define|#
directive|define
name|IS_GEN3
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen == 3)
end_define

begin_define
define|#
directive|define
name|IS_GEN4
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen == 4)
end_define

begin_define
define|#
directive|define
name|IS_GEN5
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen == 5)
end_define

begin_define
define|#
directive|define
name|IS_GEN6
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen == 6)
end_define

begin_define
define|#
directive|define
name|IS_GEN7
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen == 7)
end_define

begin_define
define|#
directive|define
name|HAS_BSD
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->has_bsd_ring)
end_define

begin_define
define|#
directive|define
name|HAS_BLT
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->has_blt_ring)
end_define

begin_define
define|#
directive|define
name|HAS_LLC
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->has_llc)
end_define

begin_define
define|#
directive|define
name|I915_NEED_GFX_HWS
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->need_gfx_hws)
end_define

begin_define
define|#
directive|define
name|HAS_HW_CONTEXTS
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen>= 6)
end_define

begin_define
define|#
directive|define
name|HAS_ALIASING_PPGTT
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen>=6)
end_define

begin_define
define|#
directive|define
name|HAS_OVERLAY
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->has_overlay)
end_define

begin_define
define|#
directive|define
name|OVERLAY_NEEDS_PHYSICAL
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->overlay_needs_physical)
end_define

begin_comment
comment|/* With the 945 and later, Y tiling got adjusted so that it was 32 128-byte  * rows, which changed the alignment requirements and fence programming.  */
end_comment

begin_define
define|#
directive|define
name|HAS_128_BYTE_Y_TILING
parameter_list|(
name|dev
parameter_list|)
value|(!IS_GEN2(dev)&& !(IS_I915G(dev) || \ 						      IS_I915GM(dev)))
end_define

begin_define
define|#
directive|define
name|SUPPORTS_DIGITAL_OUTPUTS
parameter_list|(
name|dev
parameter_list|)
value|(!IS_GEN2(dev)&& !IS_PINEVIEW(dev))
end_define

begin_define
define|#
directive|define
name|SUPPORTS_INTEGRATED_HDMI
parameter_list|(
name|dev
parameter_list|)
value|(IS_G4X(dev) || IS_GEN5(dev))
end_define

begin_define
define|#
directive|define
name|SUPPORTS_INTEGRATED_DP
parameter_list|(
name|dev
parameter_list|)
value|(IS_G4X(dev) || IS_GEN5(dev))
end_define

begin_define
define|#
directive|define
name|SUPPORTS_EDP
parameter_list|(
name|dev
parameter_list|)
value|(IS_IRONLAKE_M(dev))
end_define

begin_define
define|#
directive|define
name|SUPPORTS_TV
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->supports_tv)
end_define

begin_define
define|#
directive|define
name|I915_HAS_HOTPLUG
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->has_hotplug)
end_define

begin_comment
comment|/* dsparb controlled by hw only */
end_comment

begin_define
define|#
directive|define
name|DSPARB_HWCONTROL
parameter_list|(
name|dev
parameter_list|)
value|(IS_G4X(dev) || IS_IRONLAKE(dev))
end_define

begin_define
define|#
directive|define
name|HAS_FW_BLC
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen> 2)
end_define

begin_define
define|#
directive|define
name|HAS_PIPE_CXSR
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->has_pipe_cxsr)
end_define

begin_define
define|#
directive|define
name|I915_HAS_FBC
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->has_fbc)
end_define

begin_define
define|#
directive|define
name|HAS_PCH_SPLIT
parameter_list|(
name|dev
parameter_list|)
value|(IS_GEN5(dev) || IS_GEN6(dev) || IS_IVYBRIDGE(dev))
end_define

begin_define
define|#
directive|define
name|HAS_PIPE_CONTROL
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_INFO(dev)->gen>= 5)
end_define

begin_define
define|#
directive|define
name|INTEL_PCH_TYPE
parameter_list|(
name|dev
parameter_list|)
value|(((struct drm_i915_private *)(dev)->dev_private)->pch_type)
end_define

begin_define
define|#
directive|define
name|HAS_PCH_CPT
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_PCH_TYPE(dev) == PCH_CPT)
end_define

begin_define
define|#
directive|define
name|HAS_PCH_IBX
parameter_list|(
name|dev
parameter_list|)
value|(INTEL_PCH_TYPE(dev) == PCH_IBX)
end_define

begin_define
define|#
directive|define
name|PRIMARY_RINGBUFFER_SIZE
value|(128*1024)
end_define

begin_function
specifier|static
specifier|inline
name|bool
name|i915_seqno_passed
parameter_list|(
name|uint32_t
name|seq1
parameter_list|,
name|uint32_t
name|seq2
parameter_list|)
block|{
return|return
operator|(
call|(
name|int32_t
call|)
argument_list|(
name|seq1
operator|-
name|seq2
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
end_function

begin_function_decl
name|u32
name|i915_gem_next_request_seqno
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

