begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|_INTEL_RINGBUFFER_H_
end_ifndef

begin_define
define|#
directive|define
name|_INTEL_RINGBUFFER_H_
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * Gen2 BSpec "1. Programming Environment" / 1.4.4.6 "Ring Buffer Use"  * Gen3 BSpec "vol1c Memory Interface Functions" / 2.3.4.5 "Ring Buffer Use"  * Gen4+ BSpec "vol1c Memory Interface and Command Stream" / 5.3.4.5 "Ring Buffer Use"  *  * "If the Ring Buffer Head Pointer and the Tail Pointer are on the same  * cacheline, the Head Pointer must not be greater than the Tail  * Pointer."  */
end_comment

begin_define
define|#
directive|define
name|I915_RING_FREE_SPACE
value|64
end_define

begin_struct
struct|struct
name|intel_hw_status_page
block|{
name|u32
modifier|*
name|page_addr
decl_stmt|;
name|unsigned
name|int
name|gfx_addr
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|I915_READ_TAIL
parameter_list|(
name|ring
parameter_list|)
value|I915_READ(RING_TAIL((ring)->mmio_base))
end_define

begin_define
define|#
directive|define
name|I915_WRITE_TAIL
parameter_list|(
name|ring
parameter_list|,
name|val
parameter_list|)
value|I915_WRITE(RING_TAIL((ring)->mmio_base), val)
end_define

begin_define
define|#
directive|define
name|I915_READ_START
parameter_list|(
name|ring
parameter_list|)
value|I915_READ(RING_START((ring)->mmio_base))
end_define

begin_define
define|#
directive|define
name|I915_WRITE_START
parameter_list|(
name|ring
parameter_list|,
name|val
parameter_list|)
value|I915_WRITE(RING_START((ring)->mmio_base), val)
end_define

begin_define
define|#
directive|define
name|I915_READ_HEAD
parameter_list|(
name|ring
parameter_list|)
value|I915_READ(RING_HEAD((ring)->mmio_base))
end_define

begin_define
define|#
directive|define
name|I915_WRITE_HEAD
parameter_list|(
name|ring
parameter_list|,
name|val
parameter_list|)
value|I915_WRITE(RING_HEAD((ring)->mmio_base), val)
end_define

begin_define
define|#
directive|define
name|I915_READ_CTL
parameter_list|(
name|ring
parameter_list|)
value|I915_READ(RING_CTL((ring)->mmio_base))
end_define

begin_define
define|#
directive|define
name|I915_WRITE_CTL
parameter_list|(
name|ring
parameter_list|,
name|val
parameter_list|)
value|I915_WRITE(RING_CTL((ring)->mmio_base), val)
end_define

begin_define
define|#
directive|define
name|I915_READ_IMR
parameter_list|(
name|ring
parameter_list|)
value|I915_READ(RING_IMR((ring)->mmio_base))
end_define

begin_define
define|#
directive|define
name|I915_WRITE_IMR
parameter_list|(
name|ring
parameter_list|,
name|val
parameter_list|)
value|I915_WRITE(RING_IMR((ring)->mmio_base), val)
end_define

begin_define
define|#
directive|define
name|I915_READ_NOPID
parameter_list|(
name|ring
parameter_list|)
value|I915_READ(RING_NOPID((ring)->mmio_base))
end_define

begin_define
define|#
directive|define
name|I915_READ_SYNC_0
parameter_list|(
name|ring
parameter_list|)
value|I915_READ(RING_SYNC_0((ring)->mmio_base))
end_define

begin_define
define|#
directive|define
name|I915_READ_SYNC_1
parameter_list|(
name|ring
parameter_list|)
value|I915_READ(RING_SYNC_1((ring)->mmio_base))
end_define

begin_struct
struct|struct
name|intel_ring_buffer
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
enum|enum
name|intel_ring_id
block|{
name|RCS
init|=
literal|0x0
block|,
name|VCS
block|,
name|BCS
block|, 	}
name|id
enum|;
define|#
directive|define
name|I915_NUM_RINGS
value|3
name|u32
name|mmio_base
decl_stmt|;
name|void
name|__iomem
modifier|*
name|virtual_start
decl_stmt|;
name|struct
name|drm_device
modifier|*
name|dev
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
decl_stmt|;
name|u32
name|head
decl_stmt|;
name|u32
name|tail
decl_stmt|;
name|int
name|space
decl_stmt|;
name|int
name|size
decl_stmt|;
name|int
name|effective_size
decl_stmt|;
name|struct
name|intel_hw_status_page
name|status_page
decl_stmt|;
comment|/** We track the position of the requests in the ring buffer, and 	 * when each is retired we increment last_retired_head as the GPU 	 * must have finished processing the request and so we know we 	 * can advance the ringbuffer up to that position. 	 * 	 * last_retired_head is set to -1 after the value is consumed so 	 * we can detect new retirements. 	 */
name|u32
name|last_retired_head
decl_stmt|;
name|u32
name|irq_refcount
decl_stmt|;
comment|/* protected by dev_priv->irq_lock */
name|u32
name|irq_enable_mask
decl_stmt|;
comment|/* bitmask to enable ring interrupt */
name|u32
name|trace_irq_seqno
decl_stmt|;
name|u32
name|sync_seqno
index|[
name|I915_NUM_RINGS
operator|-
literal|1
index|]
decl_stmt|;
name|bool
name|__must_check
function_decl|(
modifier|*
name|irq_get
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|irq_put
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|write_tail
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|u32
name|value
parameter_list|)
function_decl|;
name|int
name|__must_check
function_decl|(
modifier|*
name|flush
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|u32
name|invalidate_domains
parameter_list|,
name|u32
name|flush_domains
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|add_request
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
comment|/* Some chipsets are not quite as coherent as advertised and need 	 * an expensive kick to force a true read of the up-to-date seqno. 	 * However, the up-to-date seqno is not always required and the last 	 * seen value is good enough. Note that the seqno will always be 	 * monotonic, even if not coherent. 	 */
name|u32
function_decl|(
modifier|*
name|get_seqno
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|bool
name|lazy_coherency
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dispatch_execbuffer
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|u32
name|offset
parameter_list|,
name|u32
name|length
parameter_list|,
name|unsigned
name|flags
parameter_list|)
function_decl|;
define|#
directive|define
name|I915_DISPATCH_SECURE
value|0x1
define|#
directive|define
name|I915_DISPATCH_PINNED
value|0x2
name|void
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sync_to
function_decl|)
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|struct
name|intel_ring_buffer
modifier|*
name|to
parameter_list|,
name|u32
name|seqno
parameter_list|)
function_decl|;
name|u32
name|semaphore_register
index|[
literal|3
index|]
decl_stmt|;
comment|/*our mbox written by others */
name|u32
name|signal_mbox
index|[
literal|2
index|]
decl_stmt|;
comment|/* mboxes this ring signals to */
comment|/** 	 * List of objects currently involved in rendering from the 	 * ringbuffer. 	 * 	 * Includes buffers having the contents of their GPU caches 	 * flushed, not necessarily primitives.  last_rendering_seqno 	 * represents when the rendering involved will be completed. 	 * 	 * A reference is held on the buffer while on this list. 	 */
name|struct
name|list_head
name|active_list
decl_stmt|;
comment|/** 	 * List of breadcrumbs associated with GPU requests currently 	 * outstanding. 	 */
name|struct
name|list_head
name|request_list
decl_stmt|;
comment|/** 	 * Do we have some not yet emitted requests outstanding? 	 */
name|u32
name|outstanding_lazy_request
decl_stmt|;
name|bool
name|gpu_caches_dirty
decl_stmt|;
name|wait_queue_head_t
name|irq_queue
decl_stmt|;
comment|/** 	 * Do an explicit TLB flush before MI_SET_CONTEXT 	 */
name|bool
name|itlb_before_ctx_switch
decl_stmt|;
name|struct
name|i915_hw_context
modifier|*
name|default_context
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|last_context_obj
decl_stmt|;
name|void
modifier|*
name|private
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|bool
name|intel_ring_initialized
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
block|{
return|return
name|ring
operator|->
name|obj
operator|!=
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|intel_ring_flag
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
block|{
return|return
literal|1
operator|<<
name|ring
operator|->
name|id
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|intel_ring_sync_index
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|struct
name|intel_ring_buffer
modifier|*
name|other
parameter_list|)
block|{
name|int
name|idx
decl_stmt|;
comment|/* 	 * cs -> 0 = vcs, 1 = bcs 	 * vcs -> 0 = bcs, 1 = cs, 	 * bcs -> 0 = cs, 1 = vcs. 	 */
name|idx
operator|=
operator|(
name|other
operator|-
name|ring
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
name|idx
operator|+=
name|I915_NUM_RINGS
expr_stmt|;
return|return
name|idx
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|intel_read_status_page
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|int
name|reg
parameter_list|)
block|{
comment|/* Ensure that the compiler doesn't optimize away the load. */
name|barrier
argument_list|()
expr_stmt|;
return|return
name|atomic_load_acq_32
argument_list|(
name|ring
operator|->
name|status_page
operator|.
name|page_addr
operator|+
name|reg
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * Reads a dword out of the status page, which is written to from the command  * queue by automatic updates, MI_REPORT_HEAD, MI_STORE_DATA_INDEX, or  * MI_STORE_DATA_IMM.  *  * The following dwords have a reserved meaning:  * 0x00: ISR copy, updated when an ISR bit not set in the HWSTAM changes.  * 0x04: ring 0 head pointer  * 0x05: ring 1 head pointer (915-class)  * 0x06: ring 2 head pointer (915-class)  * 0x10-0x1b: Context status DWords (GM45)  * 0x1f: Last written status offset. (GM45)  *  * The area from dword 0x20 to 0x3ff is available for driver usage.  */
end_comment

begin_define
define|#
directive|define
name|I915_GEM_HWS_INDEX
value|0x20
end_define

begin_define
define|#
directive|define
name|I915_GEM_HWS_SCRATCH_INDEX
value|0x30
end_define

begin_define
define|#
directive|define
name|I915_GEM_HWS_SCRATCH_ADDR
value|(I915_GEM_HWS_SCRATCH_INDEX<< MI_STORE_DWORD_INDEX_SHIFT)
end_define

begin_function_decl
name|void
name|intel_cleanup_ring_buffer
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__must_check
name|intel_ring_begin
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|intel_ring_emit
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|u32
name|data
parameter_list|)
block|{
name|iowrite32
argument_list|(
name|data
argument_list|,
name|ring
operator|->
name|virtual_start
operator|+
name|ring
operator|->
name|tail
argument_list|)
expr_stmt|;
name|ring
operator|->
name|tail
operator|+=
literal|4
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|intel_ring_advance
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__must_check
name|intel_ring_idle
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|intel_ring_flush_all_caches
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|intel_ring_invalidate_all_caches
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|intel_init_render_ring_buffer
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|intel_init_bsd_ring_buffer
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|intel_init_blt_ring_buffer
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u32
name|intel_ring_get_active_head
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|intel_ring_setup_status_page
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|u32
name|intel_ring_get_tail
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
block|{
return|return
name|ring
operator|->
name|tail
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|intel_ring_get_seqno
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|)
block|{
name|BUG_ON
argument_list|(
name|ring
operator|->
name|outstanding_lazy_request
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
name|ring
operator|->
name|outstanding_lazy_request
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_function
specifier|static
specifier|inline
name|void
name|i915_trace_irq_get
parameter_list|(
name|struct
name|intel_ring_buffer
modifier|*
name|ring
parameter_list|,
name|u32
name|seqno
parameter_list|)
block|{
if|if
condition|(
name|ring
operator|->
name|trace_irq_seqno
operator|==
literal|0
operator|&&
name|ring
operator|->
name|irq_get
argument_list|(
name|ring
argument_list|)
condition|)
name|ring
operator|->
name|trace_irq_seqno
operator|=
name|seqno
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DRI warts */
end_comment

begin_function_decl
name|int
name|intel_render_ring_init_dri
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|u64
name|start
parameter_list|,
name|u32
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _INTEL_RINGBUFFER_H_ */
end_comment

end_unit

