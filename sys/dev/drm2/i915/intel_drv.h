begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2006 Dave Airlie<airlied@linux.ie>  * Copyright (c) 2007-2008 Intel Corporation  *   Jesse Barnes<jesse.barnes@intel.com>  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS  * IN THE SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__INTEL_DRV_H__
end_ifndef

begin_define
define|#
directive|define
name|__INTEL_DRV_H__
end_define

begin_include
include|#
directive|include
file|<dev/drm2/i915/i915_drm.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/i915/i915_drv.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/drm_crtc.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/drm_crtc_helper.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/drm_fb_helper.h>
end_include

begin_include
include|#
directive|include
file|<dev/drm2/drm_dp_helper.h>
end_include

begin_define
define|#
directive|define
name|_intel_wait_for
parameter_list|(
name|DEV
parameter_list|,
name|COND
parameter_list|,
name|MS
parameter_list|,
name|W
parameter_list|,
name|WMSG
parameter_list|)
define|\
value|({									\ 	int end, ret;							\ 									\ 	end = ticks + (MS) * hz / 1000;					\ 	ret = 0;							\ 									\ 	while (!(COND)) {						\ 		if (time_after(ticks, end)) {				\ 			ret = -ETIMEDOUT;				\ 			break;						\ 		}							\ 		if (W)							\ 			pause((WMSG), 1);				\ 		else							\ 			DELAY(1000);					\ 	}								\ 									\ 	ret;								\ })
end_define

begin_define
define|#
directive|define
name|_wait_for
parameter_list|(
name|COND
parameter_list|,
name|MS
parameter_list|,
name|W
parameter_list|,
name|WMSG
parameter_list|)
value|({ \ 	int timeout__ = ticks + (MS) * hz / 1000;			\ 	int ret__ = 0;							\ 	while (!(COND)) {						\ 		if (time_after(ticks, timeout__)) {			\ 			ret__ = -ETIMEDOUT;				\ 			break;						\ 		}							\ 		if (W) {						\ 			pause((WMSG), 1);				\ 		} else {						\ 			DELAY(1000);					\ 		}							\ 	}								\ 	ret__;								\ })
end_define

begin_define
define|#
directive|define
name|wait_for_atomic_us
parameter_list|(
name|COND
parameter_list|,
name|US
parameter_list|)
value|({ \ 	int i, ret__ = -ETIMEDOUT;	\ 	for (i = 0; i< (US); i++) {	\ 		if ((COND)) {		\ 			ret__ = 0;	\ 			break;		\ 		}			\ 		DELAY(1);		\ 	}				\ 	ret__;				\ })
end_define

begin_define
define|#
directive|define
name|wait_for
parameter_list|(
name|COND
parameter_list|,
name|MS
parameter_list|)
value|_intel_wait_for(NULL, COND, MS, 1, "915wfi")
end_define

begin_define
define|#
directive|define
name|wait_for_atomic
parameter_list|(
name|COND
parameter_list|,
name|MS
parameter_list|)
value|_intel_wait_for(NULL, COND, MS, 0, "915wfa")
end_define

begin_define
define|#
directive|define
name|KHz
parameter_list|(
name|x
parameter_list|)
value|(1000*x)
end_define

begin_define
define|#
directive|define
name|MHz
parameter_list|(
name|x
parameter_list|)
value|KHz(1000*x)
end_define

begin_comment
comment|/*  * Display related stuff  */
end_comment

begin_comment
comment|/* store information about an Ixxx DVO */
end_comment

begin_comment
comment|/* The i830->i865 use multiple DVOs with multiple i2cs */
end_comment

begin_comment
comment|/* the i915, i945 have a single sDVO i2c bus - which is different */
end_comment

begin_define
define|#
directive|define
name|MAX_OUTPUTS
value|6
end_define

begin_comment
comment|/* maximum connectors per crtcs in the mode set */
end_comment

begin_define
define|#
directive|define
name|INTELFB_CONN_LIMIT
value|4
end_define

begin_define
define|#
directive|define
name|INTEL_I2C_BUS_DVO
value|1
end_define

begin_define
define|#
directive|define
name|INTEL_I2C_BUS_SDVO
value|2
end_define

begin_comment
comment|/* these are outputs from the chip - integrated only    external chips are via DVO or SDVO output */
end_comment

begin_define
define|#
directive|define
name|INTEL_OUTPUT_UNUSED
value|0
end_define

begin_define
define|#
directive|define
name|INTEL_OUTPUT_ANALOG
value|1
end_define

begin_define
define|#
directive|define
name|INTEL_OUTPUT_DVO
value|2
end_define

begin_define
define|#
directive|define
name|INTEL_OUTPUT_SDVO
value|3
end_define

begin_define
define|#
directive|define
name|INTEL_OUTPUT_LVDS
value|4
end_define

begin_define
define|#
directive|define
name|INTEL_OUTPUT_TVOUT
value|5
end_define

begin_define
define|#
directive|define
name|INTEL_OUTPUT_HDMI
value|6
end_define

begin_define
define|#
directive|define
name|INTEL_OUTPUT_DISPLAYPORT
value|7
end_define

begin_define
define|#
directive|define
name|INTEL_OUTPUT_EDP
value|8
end_define

begin_define
define|#
directive|define
name|INTEL_OUTPUT_UNKNOWN
value|9
end_define

begin_define
define|#
directive|define
name|INTEL_DVO_CHIP_NONE
value|0
end_define

begin_define
define|#
directive|define
name|INTEL_DVO_CHIP_LVDS
value|1
end_define

begin_define
define|#
directive|define
name|INTEL_DVO_CHIP_TMDS
value|2
end_define

begin_define
define|#
directive|define
name|INTEL_DVO_CHIP_TVOUT
value|4
end_define

begin_comment
comment|/* drm_display_mode->private_flags */
end_comment

begin_define
define|#
directive|define
name|INTEL_MODE_PIXEL_MULTIPLIER_SHIFT
value|(0x0)
end_define

begin_define
define|#
directive|define
name|INTEL_MODE_PIXEL_MULTIPLIER_MASK
value|(0xf<< INTEL_MODE_PIXEL_MULTIPLIER_SHIFT)
end_define

begin_define
define|#
directive|define
name|INTEL_MODE_DP_FORCE_6BPC
value|(0x10)
end_define

begin_comment
comment|/* This flag must be set by the encoder's mode_fixup if it changes the crtc  * timings in the mode to prevent the crtc fixup from overwriting them.  * Currently only lvds needs that. */
end_comment

begin_define
define|#
directive|define
name|INTEL_MODE_CRTC_TIMINGS_SET
value|(0x20)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|intel_mode_set_pixel_multiplier
parameter_list|(
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|int
name|multiplier
parameter_list|)
block|{
name|mode
operator|->
name|clock
operator|*=
name|multiplier
expr_stmt|;
name|mode
operator|->
name|private_flags
operator||=
name|multiplier
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|intel_mode_get_pixel_multiplier
parameter_list|(
specifier|const
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
block|{
return|return
operator|(
name|mode
operator|->
name|private_flags
operator|&
name|INTEL_MODE_PIXEL_MULTIPLIER_MASK
operator|)
operator|>>
name|INTEL_MODE_PIXEL_MULTIPLIER_SHIFT
return|;
block|}
end_function

begin_struct
struct|struct
name|intel_framebuffer
block|{
name|struct
name|drm_framebuffer
name|base
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_fbdev
block|{
name|struct
name|drm_fb_helper
name|helper
decl_stmt|;
name|struct
name|intel_framebuffer
name|ifb
decl_stmt|;
name|struct
name|list_head
name|fbdev_list
decl_stmt|;
name|struct
name|drm_display_mode
modifier|*
name|our_mode
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_encoder
block|{
name|struct
name|drm_encoder
name|base
decl_stmt|;
comment|/* 	 * The new crtc this encoder will be driven from. Only differs from 	 * base->crtc while a modeset is in progress. 	 */
name|struct
name|intel_crtc
modifier|*
name|new_crtc
decl_stmt|;
name|int
name|type
decl_stmt|;
name|bool
name|needs_tv_clock
decl_stmt|;
comment|/* 	 * Intel hw has only one MUX where encoders could be clone, hence a 	 * simple flag is enough to compute the possible_clones mask. 	 */
name|bool
name|cloneable
decl_stmt|;
name|bool
name|connectors_active
decl_stmt|;
name|void
function_decl|(
modifier|*
name|hot_plug
function_decl|)
parameter_list|(
name|struct
name|intel_encoder
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|pre_enable
function_decl|)
parameter_list|(
name|struct
name|intel_encoder
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|enable
function_decl|)
parameter_list|(
name|struct
name|intel_encoder
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|disable
function_decl|)
parameter_list|(
name|struct
name|intel_encoder
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|post_disable
function_decl|)
parameter_list|(
name|struct
name|intel_encoder
modifier|*
parameter_list|)
function_decl|;
comment|/* Read out the current hw state of this connector, returning true if 	 * the encoder is active. If the encoder is enabled it also set the pipe 	 * it is connected to in the pipe parameter. */
name|bool
function_decl|(
modifier|*
name|get_hw_state
function_decl|)
parameter_list|(
name|struct
name|intel_encoder
modifier|*
parameter_list|,
name|enum
name|pipe
modifier|*
name|pipe
parameter_list|)
function_decl|;
name|int
name|crtc_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_panel
block|{
name|struct
name|drm_display_mode
modifier|*
name|fixed_mode
decl_stmt|;
name|int
name|fitting_mode
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_connector
block|{
name|struct
name|drm_connector
name|base
decl_stmt|;
comment|/* 	 * The fixed encoder this connector is connected to. 	 */
name|struct
name|intel_encoder
modifier|*
name|encoder
decl_stmt|;
comment|/* 	 * The new encoder this connector will be driven. Only differs from 	 * encoder while a modeset is in progress. 	 */
name|struct
name|intel_encoder
modifier|*
name|new_encoder
decl_stmt|;
comment|/* Reads out the current hw, returning true if the connector is enabled 	 * and active (i.e. dpms ON state). */
name|bool
function_decl|(
modifier|*
name|get_hw_state
function_decl|)
parameter_list|(
name|struct
name|intel_connector
modifier|*
parameter_list|)
function_decl|;
comment|/* Panel info for eDP and LVDS */
name|struct
name|intel_panel
name|panel
decl_stmt|;
comment|/* Cached EDID for eDP and LVDS. May hold ERR_PTR for invalid EDID. */
name|struct
name|edid
modifier|*
name|edid
decl_stmt|;
name|int
name|edid_err
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_crtc
block|{
name|struct
name|drm_crtc
name|base
decl_stmt|;
name|enum
name|pipe
name|pipe
decl_stmt|;
name|enum
name|plane
name|plane
decl_stmt|;
name|enum
name|transcoder
name|cpu_transcoder
decl_stmt|;
name|u8
name|lut_r
index|[
literal|256
index|]
decl_stmt|,
name|lut_g
index|[
literal|256
index|]
decl_stmt|,
name|lut_b
index|[
literal|256
index|]
decl_stmt|;
comment|/* 	 * Whether the crtc and the connected output pipeline is active. Implies 	 * that crtc->enabled is set, i.e. the current mode configuration has 	 * some outputs connected to this crtc. 	 */
name|bool
name|active
decl_stmt|;
name|bool
name|primary_disabled
decl_stmt|;
comment|/* is the crtc obscured by a plane? */
name|bool
name|lowfreq_avail
decl_stmt|;
name|struct
name|intel_overlay
modifier|*
name|overlay
decl_stmt|;
name|struct
name|intel_unpin_work
modifier|*
name|unpin_work
decl_stmt|;
name|int
name|fdi_lanes
decl_stmt|;
name|atomic_t
name|unpin_work_count
decl_stmt|;
comment|/* Display surface base address adjustement for pageflips. Note that on 	 * gen4+ this only adjusts up to a tile, offsets within a tile are 	 * handled in the hw itself (with the TILEOFF register). */
name|unsigned
name|long
name|dspaddr_offset
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|cursor_bo
decl_stmt|;
name|uint32_t
name|cursor_addr
decl_stmt|;
name|int16_t
name|cursor_x
decl_stmt|,
name|cursor_y
decl_stmt|;
name|int16_t
name|cursor_width
decl_stmt|,
name|cursor_height
decl_stmt|;
name|bool
name|cursor_visible
decl_stmt|;
name|unsigned
name|int
name|bpp
decl_stmt|;
comment|/* We can share PLLs across outputs if the timings match */
name|struct
name|intel_pch_pll
modifier|*
name|pch_pll
decl_stmt|;
name|uint32_t
name|ddi_pll_sel
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_plane
block|{
name|struct
name|drm_plane
name|base
decl_stmt|;
name|enum
name|pipe
name|pipe
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
decl_stmt|;
name|bool
name|can_scale
decl_stmt|;
name|int
name|max_downscale
decl_stmt|;
name|u32
name|lut_r
index|[
literal|1024
index|]
decl_stmt|,
name|lut_g
index|[
literal|1024
index|]
decl_stmt|,
name|lut_b
index|[
literal|1024
index|]
decl_stmt|;
name|void
function_decl|(
modifier|*
name|update_plane
function_decl|)
parameter_list|(
name|struct
name|drm_plane
modifier|*
name|plane
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|fb
parameter_list|,
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|int
name|crtc_x
parameter_list|,
name|int
name|crtc_y
parameter_list|,
name|unsigned
name|int
name|crtc_w
parameter_list|,
name|unsigned
name|int
name|crtc_h
parameter_list|,
name|uint32_t
name|x
parameter_list|,
name|uint32_t
name|y
parameter_list|,
name|uint32_t
name|src_w
parameter_list|,
name|uint32_t
name|src_h
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|disable_plane
function_decl|)
parameter_list|(
name|struct
name|drm_plane
modifier|*
name|plane
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|update_colorkey
function_decl|)
parameter_list|(
name|struct
name|drm_plane
modifier|*
name|plane
parameter_list|,
name|struct
name|drm_intel_sprite_colorkey
modifier|*
name|key
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|get_colorkey
function_decl|)
parameter_list|(
name|struct
name|drm_plane
modifier|*
name|plane
parameter_list|,
name|struct
name|drm_intel_sprite_colorkey
modifier|*
name|key
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_watermark_params
block|{
name|unsigned
name|long
name|fifo_size
decl_stmt|;
name|unsigned
name|long
name|max_wm
decl_stmt|;
name|unsigned
name|long
name|default_wm
decl_stmt|;
name|unsigned
name|long
name|guard_size
decl_stmt|;
name|unsigned
name|long
name|cacheline_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cxsr_latency
block|{
name|int
name|is_desktop
decl_stmt|;
name|int
name|is_ddr3
decl_stmt|;
name|unsigned
name|long
name|fsb_freq
decl_stmt|;
name|unsigned
name|long
name|mem_freq
decl_stmt|;
name|unsigned
name|long
name|display_sr
decl_stmt|;
name|unsigned
name|long
name|display_hpll_disable
decl_stmt|;
name|unsigned
name|long
name|cursor_sr
decl_stmt|;
name|unsigned
name|long
name|cursor_hpll_disable
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|to_intel_crtc
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct intel_crtc, base)
end_define

begin_define
define|#
directive|define
name|to_intel_connector
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct intel_connector, base)
end_define

begin_define
define|#
directive|define
name|to_intel_encoder
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct intel_encoder, base)
end_define

begin_define
define|#
directive|define
name|to_intel_framebuffer
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct intel_framebuffer, base)
end_define

begin_define
define|#
directive|define
name|to_intel_plane
parameter_list|(
name|x
parameter_list|)
value|container_of(x, struct intel_plane, base)
end_define

begin_define
define|#
directive|define
name|DIP_HEADER_SIZE
value|5
end_define

begin_define
define|#
directive|define
name|DIP_TYPE_AVI
value|0x82
end_define

begin_define
define|#
directive|define
name|DIP_VERSION_AVI
value|0x2
end_define

begin_define
define|#
directive|define
name|DIP_LEN_AVI
value|13
end_define

begin_define
define|#
directive|define
name|DIP_AVI_PR_1
value|0
end_define

begin_define
define|#
directive|define
name|DIP_AVI_PR_2
value|1
end_define

begin_define
define|#
directive|define
name|DIP_TYPE_SPD
value|0x83
end_define

begin_define
define|#
directive|define
name|DIP_VERSION_SPD
value|0x1
end_define

begin_define
define|#
directive|define
name|DIP_LEN_SPD
value|25
end_define

begin_define
define|#
directive|define
name|DIP_SPD_UNKNOWN
value|0
end_define

begin_define
define|#
directive|define
name|DIP_SPD_DSTB
value|0x1
end_define

begin_define
define|#
directive|define
name|DIP_SPD_DVDP
value|0x2
end_define

begin_define
define|#
directive|define
name|DIP_SPD_DVHS
value|0x3
end_define

begin_define
define|#
directive|define
name|DIP_SPD_HDDVR
value|0x4
end_define

begin_define
define|#
directive|define
name|DIP_SPD_DVC
value|0x5
end_define

begin_define
define|#
directive|define
name|DIP_SPD_DSC
value|0x6
end_define

begin_define
define|#
directive|define
name|DIP_SPD_VCD
value|0x7
end_define

begin_define
define|#
directive|define
name|DIP_SPD_GAME
value|0x8
end_define

begin_define
define|#
directive|define
name|DIP_SPD_PC
value|0x9
end_define

begin_define
define|#
directive|define
name|DIP_SPD_BD
value|0xa
end_define

begin_define
define|#
directive|define
name|DIP_SPD_SCD
value|0xb
end_define

begin_struct
struct|struct
name|dip_infoframe
block|{
name|uint8_t
name|type
decl_stmt|;
comment|/* HB0 */
name|uint8_t
name|ver
decl_stmt|;
comment|/* HB1 */
name|uint8_t
name|len
decl_stmt|;
comment|/* HB2 - body len, not including checksum */
name|uint8_t
name|ecc
decl_stmt|;
comment|/* Header ECC */
name|uint8_t
name|checksum
decl_stmt|;
comment|/* PB0 */
union|union
block|{
struct|struct
block|{
comment|/* PB1 - Y 6:5, A 4:4, B 3:2, S 1:0 */
name|uint8_t
name|Y_A_B_S
decl_stmt|;
comment|/* PB2 - C 7:6, M 5:4, R 3:0 */
name|uint8_t
name|C_M_R
decl_stmt|;
comment|/* PB3 - ITC 7:7, EC 6:4, Q 3:2, SC 1:0 */
name|uint8_t
name|ITC_EC_Q_SC
decl_stmt|;
comment|/* PB4 - VIC 6:0 */
name|uint8_t
name|VIC
decl_stmt|;
comment|/* PB5 - YQ 7:6, CN 5:4, PR 3:0 */
name|uint8_t
name|YQ_CN_PR
decl_stmt|;
comment|/* PB6 to PB13 */
name|uint16_t
name|top_bar_end
decl_stmt|;
name|uint16_t
name|bottom_bar_start
decl_stmt|;
name|uint16_t
name|left_bar_end
decl_stmt|;
name|uint16_t
name|right_bar_start
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
name|avi
struct|;
struct|struct
block|{
name|uint8_t
name|vn
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|pd
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|sdi
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
name|spd
struct|;
name|uint8_t
name|payload
index|[
literal|27
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
name|body
union|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|intel_hdmi
block|{
name|u32
name|sdvox_reg
decl_stmt|;
name|int
name|ddc_bus
decl_stmt|;
name|uint32_t
name|color_range
decl_stmt|;
name|bool
name|has_hdmi_sink
decl_stmt|;
name|bool
name|has_audio
decl_stmt|;
name|enum
name|hdmi_force_audio
name|force_audio
decl_stmt|;
name|void
function_decl|(
modifier|*
name|write_infoframe
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
name|struct
name|dip_infoframe
modifier|*
name|frame
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_infoframes
function_decl|)
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DP_MAX_DOWNSTREAM_PORTS
value|0x10
end_define

begin_define
define|#
directive|define
name|DP_LINK_CONFIGURATION_SIZE
value|9
end_define

begin_struct
struct|struct
name|intel_dp
block|{
name|uint32_t
name|output_reg
decl_stmt|;
name|uint32_t
name|DP
decl_stmt|;
name|uint8_t
name|link_configuration
index|[
name|DP_LINK_CONFIGURATION_SIZE
index|]
decl_stmt|;
name|bool
name|has_audio
decl_stmt|;
name|enum
name|hdmi_force_audio
name|force_audio
decl_stmt|;
name|uint32_t
name|color_range
decl_stmt|;
name|uint8_t
name|link_bw
decl_stmt|;
name|uint8_t
name|lane_count
decl_stmt|;
name|uint8_t
name|dpcd
index|[
name|DP_RECEIVER_CAP_SIZE
index|]
decl_stmt|;
name|uint8_t
name|downstream_ports
index|[
name|DP_MAX_DOWNSTREAM_PORTS
index|]
decl_stmt|;
name|device_t
name|dp_iic_bus
decl_stmt|;
name|device_t
name|adapter
decl_stmt|;
name|bool
name|is_pch_edp
decl_stmt|;
name|uint8_t
name|train_set
index|[
literal|4
index|]
decl_stmt|;
name|int
name|panel_power_up_delay
decl_stmt|;
name|int
name|panel_power_down_delay
decl_stmt|;
name|int
name|panel_power_cycle_delay
decl_stmt|;
name|int
name|backlight_on_delay
decl_stmt|;
name|int
name|backlight_off_delay
decl_stmt|;
name|struct
name|timeout_task
name|panel_vdd_work
decl_stmt|;
name|bool
name|want_panel_vdd
decl_stmt|;
name|struct
name|intel_connector
modifier|*
name|attached_connector
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_digital_port
block|{
name|struct
name|intel_encoder
name|base
decl_stmt|;
name|enum
name|port
name|port
decl_stmt|;
name|u32
name|port_reversal
decl_stmt|;
name|struct
name|intel_dp
name|dp
decl_stmt|;
name|struct
name|intel_hdmi
name|hdmi
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|struct
name|drm_crtc
modifier|*
name|intel_get_crtc_for_pipe
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|pipe
parameter_list|)
block|{
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
init|=
name|dev
operator|->
name|dev_private
decl_stmt|;
return|return
name|dev_priv
operator|->
name|pipe_to_crtc_mapping
index|[
name|pipe
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|drm_crtc
modifier|*
name|intel_get_crtc_for_plane
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|plane
parameter_list|)
block|{
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
init|=
name|dev
operator|->
name|dev_private
decl_stmt|;
return|return
name|dev_priv
operator|->
name|plane_to_crtc_mapping
index|[
name|plane
index|]
return|;
block|}
end_function

begin_struct
struct|struct
name|intel_unpin_work
block|{
name|struct
name|task
name|work
decl_stmt|;
name|struct
name|drm_crtc
modifier|*
name|crtc
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|old_fb_obj
decl_stmt|;
name|struct
name|drm_i915_gem_object
modifier|*
name|pending_flip_obj
decl_stmt|;
name|struct
name|drm_pending_vblank_event
modifier|*
name|event
decl_stmt|;
name|atomic_t
name|pending
decl_stmt|;
define|#
directive|define
name|INTEL_FLIP_INACTIVE
value|0
define|#
directive|define
name|INTEL_FLIP_PENDING
value|1
define|#
directive|define
name|INTEL_FLIP_COMPLETE
value|2
name|bool
name|enable_stall_check
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|intel_fbc_work
block|{
name|struct
name|timeout_task
name|work
decl_stmt|;
name|struct
name|drm_crtc
modifier|*
name|crtc
decl_stmt|;
name|struct
name|drm_framebuffer
modifier|*
name|fb
decl_stmt|;
name|int
name|interval
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|intel_pch_rawclk
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|intel_connector_update_modes
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|edid
modifier|*
name|edid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|intel_ddc_get_modes
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|c
parameter_list|,
name|device_t
name|adapter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_attach_force_audio_property
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_attach_broadcast_rgb_property
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_crt_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_hdmi_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|sdvox_reg
parameter_list|,
name|enum
name|port
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_hdmi_init_connector
parameter_list|(
name|struct
name|intel_digital_port
modifier|*
name|intel_dig_port
parameter_list|,
name|struct
name|intel_connector
modifier|*
name|intel_connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|intel_hdmi
modifier|*
name|enc_to_intel_hdmi
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_hdmi_mode_fixup
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
specifier|const
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dip_infoframe_csum
parameter_list|(
name|struct
name|dip_infoframe
modifier|*
name|avi_if
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_sdvo_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|uint32_t
name|sdvo_reg
parameter_list|,
name|bool
name|is_sdvob
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dvo_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_tv_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_mark_busy
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_mark_fb_busy
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_mark_idle
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_lvds_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dp_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|output_reg
parameter_list|,
name|enum
name|port
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dp_init_connector
parameter_list|(
name|struct
name|intel_digital_port
modifier|*
name|intel_dig_port
parameter_list|,
name|struct
name|intel_connector
modifier|*
name|intel_connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|intel_dp_set_m_n
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dp_init_link_config
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dp_start_link_train
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dp_complete_link_train
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dp_sink_dpms
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dp_encoder_destroy
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_dp_check_link_status
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_dp_mode_fixup
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
specifier|const
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_dpd_is_edp
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ironlake_edp_backlight_on
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ironlake_edp_backlight_off
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ironlake_edp_panel_on
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ironlake_edp_panel_off
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ironlake_edp_panel_vdd_on
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ironlake_edp_panel_vdd_off
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|,
name|bool
name|sync
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_edp_link_config
parameter_list|(
name|struct
name|intel_encoder
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_edp_target_clock
parameter_list|(
name|struct
name|intel_encoder
modifier|*
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_encoder_is_pch_edp
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_plane_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|enum
name|pipe
name|pipe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_flush_display_plane
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|,
name|enum
name|plane
name|plane
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* intel_panel.c */
end_comment

begin_function_decl
specifier|extern
name|int
name|intel_panel_init
parameter_list|(
name|struct
name|intel_panel
modifier|*
name|panel
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|fixed_mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_panel_fini
parameter_list|(
name|struct
name|intel_panel
modifier|*
name|panel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_fixed_panel_mode
parameter_list|(
name|struct
name|drm_display_mode
modifier|*
name|fixed_mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_pch_panel_fitting
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|fitting_mode
parameter_list|,
specifier|const
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|adjusted_mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u32
name|intel_panel_get_max_backlight
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_panel_set_backlight
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|u32
name|level
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_panel_setup_backlight
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_panel_enable_backlight
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|enum
name|pipe
name|pipe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_panel_disable_backlight
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_panel_destroy_backlight
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|enum
name|drm_connector_status
name|intel_panel_detect
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|intel_set_config
block|{
name|struct
name|drm_encoder
modifier|*
modifier|*
name|save_connector_encoders
decl_stmt|;
name|struct
name|drm_crtc
modifier|*
modifier|*
name|save_encoder_crtcs
decl_stmt|;
name|bool
name|fb_changed
decl_stmt|;
name|bool
name|mode_changed
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|bool
name|intel_set_mode
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|struct
name|drm_framebuffer
modifier|*
name|old_fb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_modeset_disable
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_crtc_load_lut
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_crtc_update_dpms
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_encoder_noop
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_encoder_destroy
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_encoder_dpms
parameter_list|(
name|struct
name|intel_encoder
modifier|*
name|encoder
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_encoder_check_is_cloned
parameter_list|(
name|struct
name|intel_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_connector_dpms
parameter_list|(
name|struct
name|drm_connector
modifier|*
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_connector_get_hw_state
parameter_list|(
name|struct
name|intel_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_modeset_check_state
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|struct
name|intel_encoder
modifier|*
name|intel_attached_encoder
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
block|{
return|return
name|to_intel_connector
argument_list|(
name|connector
argument_list|)
operator|->
name|encoder
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|intel_dp
modifier|*
name|enc_to_intel_dp
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
block|{
name|struct
name|intel_digital_port
modifier|*
name|intel_dig_port
init|=
name|container_of
argument_list|(
name|encoder
argument_list|,
expr|struct
name|intel_digital_port
argument_list|,
name|base
operator|.
name|base
argument_list|)
decl_stmt|;
return|return
operator|&
name|intel_dig_port
operator|->
name|dp
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|intel_digital_port
modifier|*
name|enc_to_dig_port
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|encoder
argument_list|,
expr|struct
name|intel_digital_port
argument_list|,
name|base
operator|.
name|base
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|intel_digital_port
modifier|*
name|dp_to_dig_port
parameter_list|(
name|struct
name|intel_dp
modifier|*
name|intel_dp
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|intel_dp
argument_list|,
expr|struct
name|intel_digital_port
argument_list|,
name|dp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|intel_digital_port
modifier|*
name|hdmi_to_dig_port
parameter_list|(
name|struct
name|intel_hdmi
modifier|*
name|intel_hdmi
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|intel_hdmi
argument_list|,
expr|struct
name|intel_digital_port
argument_list|,
name|hdmi
argument_list|)
return|;
block|}
end_function

begin_function_decl
specifier|extern
name|void
name|intel_connector_attach_encoder
parameter_list|(
name|struct
name|intel_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|intel_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_encoder
modifier|*
name|intel_best_encoder
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|drm_display_mode
modifier|*
name|intel_crtc_mode_get
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|intel_get_pipe_from_crtc_id
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|enum
name|transcoder
name|intel_pipe_to_cpu_transcoder
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|,
name|enum
name|pipe
name|pipe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_wait_for_vblank
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|pipe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_wait_for_pipe_off
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|pipe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ironlake_get_lanes_required
parameter_list|(
name|int
name|target_clock
parameter_list|,
name|int
name|link_bw
parameter_list|,
name|int
name|bpp
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|intel_load_detect_pipe
block|{
name|struct
name|drm_framebuffer
modifier|*
name|release_fb
decl_stmt|;
name|bool
name|load_detect_temp
decl_stmt|;
name|int
name|dpms_mode
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|bool
name|intel_get_load_detect_pipe
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|,
name|struct
name|intel_load_detect_pipe
modifier|*
name|old
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_release_load_detect_pipe
parameter_list|(
name|struct
name|drm_connector
modifier|*
name|connector
parameter_list|,
name|struct
name|intel_load_detect_pipe
modifier|*
name|old
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intelfb_restore
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_crtc_fb_gamma_set
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|u16
name|red
parameter_list|,
name|u16
name|green
parameter_list|,
name|u16
name|blue
parameter_list|,
name|int
name|regno
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_crtc_fb_gamma_get
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|u16
modifier|*
name|red
parameter_list|,
name|u16
modifier|*
name|green
parameter_list|,
name|u16
modifier|*
name|blue
parameter_list|,
name|int
name|regno
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_enable_clock_gating
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_pin_and_fence_fb_obj
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|,
name|struct
name|intel_ring_buffer
modifier|*
name|pipelined
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_unpin_fb_obj
parameter_list|(
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_framebuffer_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|struct
name|intel_framebuffer
modifier|*
name|ifb
parameter_list|,
name|struct
name|drm_mode_fb_cmd2
modifier|*
name|mode_cmd
parameter_list|,
name|struct
name|drm_i915_gem_object
modifier|*
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_fbdev_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_fbdev_fini
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_fbdev_set_suspend
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_prepare_page_flip
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|plane
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_finish_page_flip
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|pipe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_finish_page_flip_plane
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|plane
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_setup_overlay
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_cleanup_overlay
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_overlay_switch_off
parameter_list|(
name|struct
name|intel_overlay
modifier|*
name|overlay
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_overlay_put_image
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_overlay_attrs
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_fb_output_poll_changed
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_fb_restore_mode
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|assert_pipe
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|,
name|enum
name|pipe
name|pipe
parameter_list|,
name|bool
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|assert_pipe_enabled
parameter_list|(
name|d
parameter_list|,
name|p
parameter_list|)
value|assert_pipe(d, p, true)
end_define

begin_define
define|#
directive|define
name|assert_pipe_disabled
parameter_list|(
name|d
parameter_list|,
name|p
parameter_list|)
value|assert_pipe(d, p, false)
end_define

begin_function_decl
specifier|extern
name|void
name|intel_init_clock_gating
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_write_eld
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_cpt_verify_modeset
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|pipe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_prepare_ddi
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|hsw_fdi_link_train
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|enum
name|port
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* For use by IVB LP watermark workaround in intel_sprite.c */
end_comment

begin_function_decl
specifier|extern
name|void
name|intel_update_watermarks
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_update_sprite_watermarks
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|pipe
parameter_list|,
name|uint32_t
name|sprite_width
parameter_list|,
name|int
name|pixel_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_update_linetime_watermarks
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|int
name|pipe
parameter_list|,
name|struct
name|drm_display_mode
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|unsigned
name|long
name|intel_gen4_compute_page_offset
parameter_list|(
name|int
modifier|*
name|x
parameter_list|,
name|int
modifier|*
name|y
parameter_list|,
name|unsigned
name|int
name|tiling_mode
parameter_list|,
name|unsigned
name|int
name|bpp
parameter_list|,
name|unsigned
name|int
name|pitch
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_sprite_set_colorkey
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_sprite_get_colorkey
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|drm_file
modifier|*
name|file_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u32
name|intel_dpio_read
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|,
name|int
name|reg
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Power-related functions, located in intel_pm.c */
end_comment

begin_function_decl
specifier|extern
name|void
name|intel_init_pm
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* FBC */
end_comment

begin_function_decl
specifier|extern
name|bool
name|intel_fbc_enabled
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_enable_fbc
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|unsigned
name|long
name|interval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_update_fbc
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* IPS */
end_comment

begin_function_decl
specifier|extern
name|void
name|intel_gpu_ips_init
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_gpu_ips_teardown
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_init_power_wells
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_enable_gt_powersave
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_disable_gt_powersave
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|gen6_gt_check_fifodbg
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ironlake_teardown_rc6
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_ddi_get_hw_state
parameter_list|(
name|struct
name|intel_encoder
modifier|*
name|encoder
parameter_list|,
name|enum
name|pipe
modifier|*
name|pipe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|intel_ddi_get_cdclk_freq
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_pll_init
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_enable_pipe_func
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_disable_transcoder_func
parameter_list|(
name|struct
name|drm_i915_private
modifier|*
name|dev_priv
parameter_list|,
name|enum
name|transcoder
name|cpu_transcoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_enable_pipe_clock
parameter_list|(
name|struct
name|intel_crtc
modifier|*
name|intel_crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_disable_pipe_clock
parameter_list|(
name|struct
name|intel_crtc
modifier|*
name|intel_crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_setup_hw_pll_state
parameter_list|(
name|struct
name|drm_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_ddi_pll_mode_set
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|,
name|int
name|clock
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_put_crtc_pll
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_set_pipe_settings
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_prepare_link_retrain
parameter_list|(
name|struct
name|drm_encoder
modifier|*
name|encoder
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|intel_ddi_connector_get_hw_state
parameter_list|(
name|struct
name|intel_connector
modifier|*
name|intel_connector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|intel_ddi_fdi_disable
parameter_list|(
name|struct
name|drm_crtc
modifier|*
name|crtc
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __INTEL_DRV_H__ */
end_comment

end_unit

