begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*  * Copyright (c) 2002 M Warner Losh.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * This software may be derived from NetBSD i82365.c and other files with  * the following copyright:  *  * Copyright (c) 1997 Marc Horowitz.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by Marc Horowitz.  * 4. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * Structure to manage the ExCA part of the chip.  */
end_comment

begin_struct_decl
struct_decl|struct
name|exca_softc
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|uint8_t
function_decl|(
name|exca_read_t
function_decl|)
parameter_list|(
name|struct
name|exca_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|exca_write_t
function_decl|)
parameter_list|(
name|struct
name|exca_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|exca_softc
block|{
name|device_t
name|dev
decl_stmt|;
name|exca_read_t
modifier|*
name|read_exca
decl_stmt|;
name|exca_write_t
modifier|*
name|write_exca
decl_stmt|;
name|int
name|memalloc
decl_stmt|;
name|struct
name|pccard_mem_handle
name|mem
index|[
name|EXCA_MEM_WINS
index|]
decl_stmt|;
name|int
name|ioalloc
decl_stmt|;
name|struct
name|pccard_io_handle
name|io
index|[
name|EXCA_IO_WINS
index|]
decl_stmt|;
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|EXCA_SOCKET_PRESENT
value|0x00000001
name|uint32_t
name|offset
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|exca_init
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|device_t
name|dev
parameter_list|,
name|exca_write_t
modifier|*
name|wrfn
parameter_list|,
name|exca_read_t
modifier|*
name|rdfn
parameter_list|,
name|bus_space_tag_t
parameter_list|,
name|bus_space_handle_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exca_io_map
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|int
name|width
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exca_io_unmap_res
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|resource
modifier|*
name|res
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exca_is_pcic
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exca_mem_map
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|int
name|kind
parameter_list|,
name|struct
name|resource
modifier|*
name|res
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exca_mem_set_flags
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|resource
modifier|*
name|res
parameter_list|,
name|uint32_t
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exca_mem_set_offset
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|resource
modifier|*
name|res
parameter_list|,
name|uint32_t
name|cardaddr
parameter_list|,
name|uint32_t
modifier|*
name|deltap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exca_mem_unmap_res
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|resource
modifier|*
name|res
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exca_probe_slots
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|struct
name|exca_softc
modifier|*
parameter_list|,
name|exca_write_t
modifier|*
parameter_list|,
name|exca_read_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|exca_reset
parameter_list|(
name|struct
name|exca_softc
modifier|*
parameter_list|,
name|device_t
name|child
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|uint8_t
name|exca_read
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|int
name|reg
parameter_list|)
block|{
return|return
operator|(
name|sc
operator|->
name|read_exca
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|exca_write
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|sc
operator|->
name|write_exca
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|exca_setb
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint8_t
name|mask
parameter_list|)
block|{
name|exca_write
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|,
name|exca_read
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|)
operator||
name|mask
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|exca_clrb
parameter_list|(
name|struct
name|exca_softc
modifier|*
name|sc
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint8_t
name|mask
parameter_list|)
block|{
name|exca_write
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|,
name|exca_read
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|)
operator|&
operator|~
name|mask
argument_list|)
expr_stmt|;
block|}
end_function

end_unit

