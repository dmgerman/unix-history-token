begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * FreeBSD platform specific, shared driver option settings, data structures,  * function declarations and includes.  *  * Copyright (c) 1994-2001 Justin T. Gibbs.  * Copyright (c) 2001-2003 Adaptec Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * Alternatively, this software may be distributed under the terms of the  * GNU Public License ("GPL").  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $Id: //depot/aic7xxx/freebsd/dev/aic7xxx/aic_osm_lib.h#5 $  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/******************************** OS Includes *********************************/
end_comment

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
end_if

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*************************** Library Symbol Mapping ***************************/
end_comment

begin_define
define|#
directive|define
name|AIC_LIB_ENTRY_CONCAT
parameter_list|(
name|x
parameter_list|,
name|prefix
parameter_list|)
value|prefix ## x
end_define

begin_define
define|#
directive|define
name|AIC_LIB_ENTRY_EXPAND
parameter_list|(
name|x
parameter_list|,
name|prefix
parameter_list|)
value|AIC_LIB_ENTRY_CONCAT(x, prefix)
end_define

begin_define
define|#
directive|define
name|AIC_LIB_ENTRY
parameter_list|(
name|x
parameter_list|)
value|AIC_LIB_ENTRY_EXPAND(x, AIC_LIB_PREFIX)
end_define

begin_define
define|#
directive|define
name|AIC_CONST_ENTRY
parameter_list|(
name|x
parameter_list|)
value|AIC_LIB_ENTRY_EXPAND(x,AIC_CONST_PREFIX)
end_define

begin_define
define|#
directive|define
name|aic_softc
value|AIC_LIB_ENTRY(_softc)
end_define

begin_define
define|#
directive|define
name|aic_tailq
value|AIC_LIB_ENTRY(_tailq)
end_define

begin_define
define|#
directive|define
name|aic_transinfo
value|AIC_LIB_ENTRY(_transinfo)
end_define

begin_define
define|#
directive|define
name|aic_platform_data
value|AIC_LIB_ENTRY(_platform_data)
end_define

begin_define
define|#
directive|define
name|aic_devinfo
value|AIC_LIB_ENTRY(_devinfo)
end_define

begin_define
define|#
directive|define
name|aic_lock
value|AIC_LIB_ENTRY(_lock)
end_define

begin_define
define|#
directive|define
name|aic_unlock
value|AIC_LIB_ENTRY(_unlock)
end_define

begin_define
define|#
directive|define
name|aic_callback_t
value|AIC_LIB_ENTRY(_callback_t)
end_define

begin_define
define|#
directive|define
name|aic_platform_freeze_devq
value|AIC_LIB_ENTRY(_platform_freeze_devq)
end_define

begin_define
define|#
directive|define
name|aic_platform_abort_scbs
value|AIC_LIB_ENTRY(_platform_abort_scbs)
end_define

begin_define
define|#
directive|define
name|aic_platform_timeout
value|AIC_LIB_ENTRY(_platform_timeout)
end_define

begin_define
define|#
directive|define
name|aic_timeout
value|AIC_LIB_ENTRY(_timeout)
end_define

begin_define
define|#
directive|define
name|aic_set_recoveryscb
value|AIC_LIB_ENTRY(_set_recoveryscb)
end_define

begin_define
define|#
directive|define
name|aic_spawn_recovery_thread
value|AIC_LIB_ENTRY(_spawn_recovery_thread)
end_define

begin_define
define|#
directive|define
name|aic_wakeup_recovery_thread
value|AIC_LIB_ENTRY(_wakeup_recovery_thread)
end_define

begin_define
define|#
directive|define
name|aic_terminate_recovery_thread
define|\
value|AIC_LIB_ENTRY(_terminate_recovery_thread)
end_define

begin_define
define|#
directive|define
name|aic_recovery_thread
value|AIC_LIB_ENTRY(_recovery_thread)
end_define

begin_define
define|#
directive|define
name|aic_recover_commands
value|AIC_LIB_ENTRY(_recover_commands)
end_define

begin_define
define|#
directive|define
name|aic_calc_geometry
value|AIC_LIB_ENTRY(_calc_geometry)
end_define

begin_define
define|#
directive|define
name|AIC_RESOURCE_SHORTAGE
value|AIC_CONST_ENTRY(_RESOURCE_SHORTAGE)
end_define

begin_define
define|#
directive|define
name|AIC_SHUTDOWN_RECOVERY
value|AIC_CONST_ENTRY(_SHUTDOWN_RECOVERY)
end_define

begin_comment
comment|/********************************* Byte Order *********************************/
end_comment

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
end_if

begin_define
define|#
directive|define
name|aic_htobe16
parameter_list|(
name|x
parameter_list|)
value|htobe16(x)
end_define

begin_define
define|#
directive|define
name|aic_htobe32
parameter_list|(
name|x
parameter_list|)
value|htobe32(x)
end_define

begin_define
define|#
directive|define
name|aic_htobe64
parameter_list|(
name|x
parameter_list|)
value|htobe64(x)
end_define

begin_define
define|#
directive|define
name|aic_htole16
parameter_list|(
name|x
parameter_list|)
value|htole16(x)
end_define

begin_define
define|#
directive|define
name|aic_htole32
parameter_list|(
name|x
parameter_list|)
value|htole32(x)
end_define

begin_define
define|#
directive|define
name|aic_htole64
parameter_list|(
name|x
parameter_list|)
value|htole64(x)
end_define

begin_define
define|#
directive|define
name|aic_be16toh
parameter_list|(
name|x
parameter_list|)
value|be16toh(x)
end_define

begin_define
define|#
directive|define
name|aic_be32toh
parameter_list|(
name|x
parameter_list|)
value|be32toh(x)
end_define

begin_define
define|#
directive|define
name|aic_be64toh
parameter_list|(
name|x
parameter_list|)
value|be64toh(x)
end_define

begin_define
define|#
directive|define
name|aic_le16toh
parameter_list|(
name|x
parameter_list|)
value|le16toh(x)
end_define

begin_define
define|#
directive|define
name|aic_le32toh
parameter_list|(
name|x
parameter_list|)
value|le32toh(x)
end_define

begin_define
define|#
directive|define
name|aic_le64toh
parameter_list|(
name|x
parameter_list|)
value|le64toh(x)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|aic_htobe16
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_htobe32
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_htobe64
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_htole16
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_htole32
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_htole64
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_be16toh
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_be32toh
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_be64toh
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_le16toh
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_le32toh
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|aic_le64toh
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/************************* Forward Declarations *******************************/
end_comment

begin_typedef
typedef|typedef
name|device_t
name|aic_dev_softc_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|union
name|ccb
modifier|*
name|aic_io_ctx_t
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|aic_softc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|scb
struct_decl|;
end_struct_decl

begin_comment
comment|/*************************** Timer DataStructures *****************************/
end_comment

begin_typedef
typedef|typedef
name|struct
name|callout
name|aic_timer_t
typedef|;
end_typedef

begin_comment
comment|/****************************** Error Recovery ********************************/
end_comment

begin_function_decl
name|void
name|aic_set_recoveryscb
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|,
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|timeout_t
name|aic_platform_timeout
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|aic_spawn_recovery_thread
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aic_terminate_recovery_thread
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_wakeup_recovery_thread
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|aic_wakeup_recovery_thread
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|)
block|{
name|wakeup
argument_list|(
name|aic
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/****************************** Kernel Threads ********************************/
end_comment

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>
literal|500005
end_if

begin_define
define|#
directive|define
name|aic_kthread_create
parameter_list|(
name|func
parameter_list|,
name|farg
parameter_list|,
name|proc_ptr
parameter_list|,
name|flags
parameter_list|,
name|stackpgs
parameter_list|,
name|fmtstr
parameter_list|,
name|arg
parameter_list|)
define|\
value|kthread_create(func, farg, proc_ptr, flags, stackpgs, fmtstr, arg)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|aic_kthread_create
parameter_list|(
name|func
parameter_list|,
name|farg
parameter_list|,
name|proc_ptr
parameter_list|,
name|flags
parameter_list|,
name|stackpgs
parameter_list|,
name|fmtstr
parameter_list|,
name|arg
parameter_list|)
define|\
value|kthread_create(func, farg, proc_ptr, fmtstr, arg)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/******************************* Bus Space/DMA ********************************/
end_comment

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|501102
end_if

begin_define
define|#
directive|define
name|aic_dma_tag_create
parameter_list|(
name|aic
parameter_list|,
name|parent_tag
parameter_list|,
name|alignment
parameter_list|,
name|boundary
parameter_list|,	\
name|lowaddr
parameter_list|,
name|highaddr
parameter_list|,
name|filter
parameter_list|,
name|filterarg
parameter_list|,	\
name|maxsize
parameter_list|,
name|nsegments
parameter_list|,
name|maxsegsz
parameter_list|,
name|flags
parameter_list|,		\
name|dma_tagp
parameter_list|)
define|\
value|bus_dma_tag_create(parent_tag, alignment, boundary,		\ 			   lowaddr, highaddr, filter, filterarg,	\ 			   maxsize, nsegments, maxsegsz, flags,		\ 			   busdma_lock_mutex,&Giant,			\ 			   dma_tagp)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|aic_dma_tag_create
parameter_list|(
name|aic
parameter_list|,
name|parent_tag
parameter_list|,
name|alignment
parameter_list|,
name|boundary
parameter_list|,	\
name|lowaddr
parameter_list|,
name|highaddr
parameter_list|,
name|filter
parameter_list|,
name|filterarg
parameter_list|,	\
name|maxsize
parameter_list|,
name|nsegments
parameter_list|,
name|maxsegsz
parameter_list|,
name|flags
parameter_list|,		\
name|dma_tagp
parameter_list|)
define|\
value|bus_dma_tag_create(parent_tag, alignment, boundary,		\ 			   lowaddr, highaddr, filter, filterarg,	\ 			   maxsize, nsegments, maxsegsz, flags,		\ 			   dma_tagp)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|aic_dma_tag_destroy
parameter_list|(
name|aic
parameter_list|,
name|tag
parameter_list|)
define|\
value|bus_dma_tag_destroy(tag)
end_define

begin_define
define|#
directive|define
name|aic_dmamem_alloc
parameter_list|(
name|aic
parameter_list|,
name|dmat
parameter_list|,
name|vaddr
parameter_list|,
name|flags
parameter_list|,
name|mapp
parameter_list|)
define|\
value|bus_dmamem_alloc(dmat, vaddr, flags, mapp)
end_define

begin_define
define|#
directive|define
name|aic_dmamem_free
parameter_list|(
name|aic
parameter_list|,
name|dmat
parameter_list|,
name|vaddr
parameter_list|,
name|map
parameter_list|)
define|\
value|bus_dmamem_free(dmat, vaddr, map)
end_define

begin_define
define|#
directive|define
name|aic_dmamap_create
parameter_list|(
name|aic
parameter_list|,
name|tag
parameter_list|,
name|flags
parameter_list|,
name|mapp
parameter_list|)
define|\
value|bus_dmamap_create(tag, flags, mapp)
end_define

begin_define
define|#
directive|define
name|aic_dmamap_destroy
parameter_list|(
name|aic
parameter_list|,
name|tag
parameter_list|,
name|map
parameter_list|)
define|\
value|bus_dmamap_destroy(tag, map)
end_define

begin_define
define|#
directive|define
name|aic_dmamap_load
parameter_list|(
name|aic
parameter_list|,
name|dmat
parameter_list|,
name|map
parameter_list|,
name|addr
parameter_list|,
name|buflen
parameter_list|,
name|callback
parameter_list|,		\
name|callback_arg
parameter_list|,
name|flags
parameter_list|)
define|\
value|bus_dmamap_load(dmat, map, addr, buflen, callback, callback_arg, flags)
end_define

begin_define
define|#
directive|define
name|aic_dmamap_unload
parameter_list|(
name|aic
parameter_list|,
name|tag
parameter_list|,
name|map
parameter_list|)
define|\
value|bus_dmamap_unload(tag, map)
end_define

begin_comment
comment|/* XXX Need to update Bus DMA for partial map syncs */
end_comment

begin_define
define|#
directive|define
name|aic_dmamap_sync
parameter_list|(
name|aic
parameter_list|,
name|dma_tag
parameter_list|,
name|dmamap
parameter_list|,
name|offset
parameter_list|,
name|len
parameter_list|,
name|op
parameter_list|)
define|\
value|bus_dmamap_sync(dma_tag, dmamap, op)
end_define

begin_comment
comment|/***************************** Core Includes **********************************/
end_comment

begin_include
include|#
directive|include
include|AIC_CORE_INCLUDE
end_include

begin_comment
comment|/***************************** Timer Facilities *******************************/
end_comment

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
end_if

begin_define
define|#
directive|define
name|aic_timer_init
parameter_list|(
name|timer
parameter_list|)
value|callout_init(timer,
comment|/*mpsafe*/
value|0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|aic_timer_init
value|callout_init
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|aic_timer_stop
value|callout_stop
end_define

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_timer_reset
parameter_list|(
name|aic_timer_t
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|aic_callback_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|u_int
name|aic_get_timeout
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_scb_timer_reset
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|aic_timer_reset
parameter_list|(
name|aic_timer_t
modifier|*
name|timer
parameter_list|,
name|u_int
name|usec
parameter_list|,
name|aic_callback_t
modifier|*
name|func
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|callout_reset
argument_list|(
name|timer
argument_list|,
operator|(
name|usec
operator|*
name|hz
operator|)
operator|/
literal|1000000
argument_list|,
name|func
argument_list|,
name|arg
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int
name|aic_get_timeout
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
return|return
operator|(
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|timeout
operator|*
literal|1000
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_scb_timer_reset
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|,
name|u_int
name|usec
parameter_list|)
block|{
name|untimeout
argument_list|(
name|aic_platform_timeout
argument_list|,
operator|(
name|caddr_t
operator|)
name|scb
argument_list|,
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|timeout_ch
argument_list|)
expr_stmt|;
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|timeout_ch
operator|=
name|timeout
argument_list|(
name|aic_platform_timeout
argument_list|,
name|scb
argument_list|,
operator|(
name|usec
operator|*
name|hz
operator|)
operator|/
literal|1000000
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_scb_timer_start
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
if|if
condition|(
name|AIC_SCB_DATA
argument_list|(
name|scb
operator|->
name|aic_softc
argument_list|)
operator|->
name|recovery_scbs
operator|==
literal|0
operator|&&
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|timeout
operator|!=
name|CAM_TIME_INFINITY
condition|)
block|{
name|uint64_t
name|time
decl_stmt|;
name|time
operator|=
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|timeout
expr_stmt|;
name|time
operator|*=
name|hz
expr_stmt|;
name|time
operator|/=
literal|1000
expr_stmt|;
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|timeout_ch
operator|=
name|timeout
argument_list|(
name|aic_platform_timeout
argument_list|,
name|scb
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/************************** Transaction Operations ****************************/
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_set_transaction_status
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_set_scsi_status
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|uint32_t
name|aic_get_transaction_status
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|uint32_t
name|aic_get_scsi_status
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_set_transaction_tag
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|,
name|int
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|u_long
name|aic_get_transfer_length
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|aic_get_transfer_dir
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_set_residual
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|,
name|u_long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_set_sense_residual
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|,
name|u_long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|u_long
name|aic_get_residual
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|aic_perform_autosense
parameter_list|(
name|struct
name|scb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|uint32_t
name|aic_get_sense_bufsize
parameter_list|(
name|struct
name|aic_softc
modifier|*
parameter_list|,
name|struct
name|scb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_freeze_ccb
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_freeze_scb
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_platform_freeze_devq
parameter_list|(
name|struct
name|aic_softc
modifier|*
parameter_list|,
name|struct
name|scb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|aic_platform_abort_scbs
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|,
name|int
name|target
parameter_list|,
name|char
name|channel
parameter_list|,
name|int
name|lun
parameter_list|,
name|u_int
name|tag
parameter_list|,
name|role_t
name|role
parameter_list|,
name|uint32_t
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|aic_set_transaction_status
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|,
name|uint32_t
name|status
parameter_list|)
block|{
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|status
operator|&=
operator|~
name|CAM_STATUS_MASK
expr_stmt|;
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|status
operator||=
name|status
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_set_scsi_status
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|,
name|uint32_t
name|status
parameter_list|)
block|{
name|scb
operator|->
name|io_ctx
operator|->
name|csio
operator|.
name|scsi_status
operator|=
name|status
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|aic_get_transaction_status
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
return|return
operator|(
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|status
operator|&
name|CAM_STATUS_MASK
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|aic_get_scsi_status
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
return|return
operator|(
name|scb
operator|->
name|io_ctx
operator|->
name|csio
operator|.
name|scsi_status
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_set_transaction_tag
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|,
name|int
name|enabled
parameter_list|,
name|u_int
name|type
parameter_list|)
block|{
name|scb
operator|->
name|io_ctx
operator|->
name|csio
operator|.
name|tag_action
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|flags
operator||=
name|CAM_TAG_ACTION_VALID
expr_stmt|;
else|else
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|flags
operator|&=
operator|~
name|CAM_TAG_ACTION_VALID
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|aic_get_transfer_length
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
return|return
operator|(
name|scb
operator|->
name|io_ctx
operator|->
name|csio
operator|.
name|dxfer_len
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|aic_get_transfer_dir
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
return|return
operator|(
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|flags
operator|&
name|CAM_DIR_MASK
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_set_residual
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|,
name|u_long
name|resid
parameter_list|)
block|{
name|scb
operator|->
name|io_ctx
operator|->
name|csio
operator|.
name|resid
operator|=
name|resid
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_set_sense_residual
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|,
name|u_long
name|resid
parameter_list|)
block|{
name|scb
operator|->
name|io_ctx
operator|->
name|csio
operator|.
name|sense_resid
operator|=
name|resid
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|aic_get_residual
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
return|return
operator|(
name|scb
operator|->
name|io_ctx
operator|->
name|csio
operator|.
name|resid
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|aic_perform_autosense
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
return|return
operator|(
operator|!
operator|(
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|flags
operator|&
name|CAM_DIS_AUTOSENSE
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|aic_get_sense_bufsize
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|,
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
return|return
operator|(
sizeof|sizeof
argument_list|(
expr|struct
name|scsi_sense_data
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_freeze_ccb
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
block|{
if|if
condition|(
operator|(
name|ccb
operator|->
name|ccb_h
operator|.
name|status
operator|&
name|CAM_DEV_QFRZN
operator|)
operator|==
literal|0
condition|)
block|{
name|ccb
operator|->
name|ccb_h
operator|.
name|status
operator||=
name|CAM_DEV_QFRZN
expr_stmt|;
name|xpt_freeze_devq
argument_list|(
name|ccb
operator|->
name|ccb_h
operator|.
name|path
argument_list|,
comment|/*count*/
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_freeze_scb
parameter_list|(
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
name|aic_freeze_ccb
argument_list|(
name|scb
operator|->
name|io_ctx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_platform_freeze_devq
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|,
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
comment|/* Nothing to do here for FreeBSD */
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|aic_platform_abort_scbs
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|,
name|int
name|target
parameter_list|,
name|char
name|channel
parameter_list|,
name|int
name|lun
parameter_list|,
name|u_int
name|tag
parameter_list|,
name|role_t
name|role
parameter_list|,
name|uint32_t
name|status
parameter_list|)
block|{
comment|/* Nothing to do here for FreeBSD */
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_platform_scb_free
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|,
name|struct
name|scb
modifier|*
name|scb
parameter_list|)
block|{
comment|/* What do we do to generically handle driver resource shortages??? */
if|if
condition|(
operator|(
name|aic
operator|->
name|flags
operator|&
name|AIC_RESOURCE_SHORTAGE
operator|)
operator|!=
literal|0
operator|&&
name|scb
operator|->
name|io_ctx
operator|!=
name|NULL
operator|&&
operator|(
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|status
operator|&
name|CAM_RELEASE_SIMQ
operator|)
operator|==
literal|0
condition|)
block|{
name|scb
operator|->
name|io_ctx
operator|->
name|ccb_h
operator|.
name|status
operator||=
name|CAM_RELEASE_SIMQ
expr_stmt|;
name|aic
operator|->
name|flags
operator|&=
operator|~
name|AIC_RESOURCE_SHORTAGE
expr_stmt|;
block|}
name|scb
operator|->
name|io_ctx
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_comment
comment|/*************************** CAM CCB Operations *******************************/
end_comment

begin_function_decl
name|void
name|aic_calc_geometry
parameter_list|(
name|struct
name|ccb_calc_geometry
modifier|*
name|ccg
parameter_list|,
name|int
name|extended
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/****************************** OS Primitives *********************************/
end_comment

begin_define
define|#
directive|define
name|aic_delay
value|DELAY
end_define

begin_comment
comment|/********************************** PCI ***************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|AIC_PCI_CONFIG
end_ifdef

begin_function_decl
specifier|static
name|__inline
name|uint32_t
name|aic_pci_read_config
parameter_list|(
name|aic_dev_softc_t
name|pci
parameter_list|,
name|int
name|reg
parameter_list|,
name|int
name|width
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|aic_pci_write_config
parameter_list|(
name|aic_dev_softc_t
name|pci
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint32_t
name|value
parameter_list|,
name|int
name|width
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|aic_get_pci_function
parameter_list|(
name|aic_dev_softc_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|aic_get_pci_slot
parameter_list|(
name|aic_dev_softc_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|aic_get_pci_bus
parameter_list|(
name|aic_dev_softc_t
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|uint32_t
name|aic_pci_read_config
parameter_list|(
name|aic_dev_softc_t
name|pci
parameter_list|,
name|int
name|reg
parameter_list|,
name|int
name|width
parameter_list|)
block|{
return|return
operator|(
name|pci_read_config
argument_list|(
name|pci
argument_list|,
name|reg
argument_list|,
name|width
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|aic_pci_write_config
parameter_list|(
name|aic_dev_softc_t
name|pci
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint32_t
name|value
parameter_list|,
name|int
name|width
parameter_list|)
block|{
name|pci_write_config
argument_list|(
name|pci
argument_list|,
name|reg
argument_list|,
name|value
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|aic_get_pci_function
parameter_list|(
name|aic_dev_softc_t
name|pci
parameter_list|)
block|{
return|return
operator|(
name|pci_get_function
argument_list|(
name|pci
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|aic_get_pci_slot
parameter_list|(
name|aic_dev_softc_t
name|pci
parameter_list|)
block|{
return|return
operator|(
name|pci_get_slot
argument_list|(
name|pci
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|aic_get_pci_bus
parameter_list|(
name|aic_dev_softc_t
name|pci
parameter_list|)
block|{
return|return
operator|(
name|pci_get_bus
argument_list|(
name|pci
argument_list|)
operator|)
return|;
block|}
end_function

begin_typedef
typedef|typedef
enum|enum
block|{
name|AIC_POWER_STATE_D0
init|=
name|PCI_POWERSTATE_D0
block|,
name|AIC_POWER_STATE_D1
init|=
name|PCI_POWERSTATE_D1
block|,
name|AIC_POWER_STATE_D2
init|=
name|PCI_POWERSTATE_D2
block|,
name|AIC_POWER_STATE_D3
init|=
name|PCI_POWERSTATE_D3
block|}
name|aic_power_state
typedef|;
end_typedef

begin_function_decl
specifier|static
name|__inline
name|int
name|aic_power_state_change
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|,
name|aic_power_state
name|new_state
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|aic_power_state_change
parameter_list|(
name|struct
name|aic_softc
modifier|*
name|aic
parameter_list|,
name|aic_power_state
name|new_state
parameter_list|)
block|{
return|return
operator|(
name|pci_set_powerstate
argument_list|(
name|aic
operator|->
name|dev_softc
argument_list|,
name|new_state
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

