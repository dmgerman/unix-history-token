begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Aic7xxx SCSI host adapter firmware asssembler symbol table definitions  *  * Copyright (c) 1997 Justin T. Gibbs.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    substantially similar to the "NO WARRANTY" disclaimer below  *    ("Disclaimer") and any redistribution must be conditioned upon  *    including a substantially similar Disclaimer requirement for further  *    binary redistribution.  * 3. Neither the names of the above-listed copyright holders nor the names  *    of any contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * Alternatively, this software may be distributed under the terms of the  * GNU General Public License ("GPL") version 2 as published by the Free  * Software Foundation.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  *  * $Id: //depot/aic7xxx/aic7xxx/aicasm/aicasm_symbol.h#11 $  *  * $FreeBSD$  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_include
include|#
directive|include
file|"../queue.h"
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
enum|enum
block|{
name|UNINITIALIZED
block|,
name|REGISTER
block|,
name|ALIAS
block|,
name|SCBLOC
block|,
name|SRAMLOC
block|,
name|MASK
block|,
name|BIT
block|,
name|CONST
block|,
name|DOWNLOAD_CONST
block|,
name|LABEL
block|,
name|CONDITIONAL
block|,
name|MACRO
block|}
name|symtype
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|RO
init|=
literal|0x01
block|,
name|WO
init|=
literal|0x02
block|,
name|RW
init|=
literal|0x03
block|}
name|amode_t
typedef|;
end_typedef

begin_struct
struct|struct
name|reg_info
block|{
name|u_int
name|address
decl_stmt|;
name|int
name|size
decl_stmt|;
name|amode_t
name|mode
decl_stmt|;
name|u_int8_t
name|valid_bitmask
decl_stmt|;
name|u_int8_t
name|modes
decl_stmt|;
name|int
name|typecheck_masks
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|SLIST_HEAD
argument_list|(
argument|symlist
argument_list|,
argument|symbol_node
argument_list|)
name|symlist_t
expr_stmt|;
end_typedef

begin_struct
struct|struct
name|mask_info
block|{
name|symlist_t
name|symrefs
decl_stmt|;
name|u_int8_t
name|mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|const_info
block|{
name|u_int
name|value
decl_stmt|;
name|int
name|define
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|alias_info
block|{
name|struct
name|symbol
modifier|*
name|parent
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|label_info
block|{
name|int
name|address
decl_stmt|;
name|int
name|exported
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cond_info
block|{
name|int
name|func_num
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|macro_arg
block|{
name|STAILQ_ENTRY
argument_list|(
argument|macro_arg
argument_list|)
name|links
expr_stmt|;
name|regex_t
name|arg_regex
decl_stmt|;
name|char
modifier|*
name|replacement_text
decl_stmt|;
block|}
struct|;
end_struct

begin_macro
name|STAILQ_HEAD
argument_list|(
argument|macro_arg_list
argument_list|,
argument|macro_arg
argument_list|)
end_macro

begin_expr_stmt
name|args
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|macro_info
block|{
name|struct
name|macro_arg_list
name|args
decl_stmt|;
name|int
name|narg
decl_stmt|;
specifier|const
name|char
modifier|*
name|body
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
struct|struct
name|expression_info
block|{
name|symlist_t
name|referenced_syms
decl_stmt|;
name|int
name|value
decl_stmt|;
block|}
name|expression_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|symbol
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|symtype
name|type
decl_stmt|;
union|union
block|{
name|struct
name|reg_info
modifier|*
name|rinfo
decl_stmt|;
name|struct
name|mask_info
modifier|*
name|minfo
decl_stmt|;
name|struct
name|const_info
modifier|*
name|cinfo
decl_stmt|;
name|struct
name|alias_info
modifier|*
name|ainfo
decl_stmt|;
name|struct
name|label_info
modifier|*
name|linfo
decl_stmt|;
name|struct
name|cond_info
modifier|*
name|condinfo
decl_stmt|;
name|struct
name|macro_info
modifier|*
name|macroinfo
decl_stmt|;
block|}
name|info
union|;
block|}
name|symbol_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|symbol_ref
block|{
name|symbol_t
modifier|*
name|symbol
decl_stmt|;
name|int
name|offset
decl_stmt|;
block|}
name|symbol_ref_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|symbol_node
block|{
name|SLIST_ENTRY
argument_list|(
argument|symbol_node
argument_list|)
name|links
expr_stmt|;
name|symbol_t
modifier|*
name|symbol
decl_stmt|;
block|}
name|symbol_node_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|critical_section
block|{
name|TAILQ_ENTRY
argument_list|(
argument|critical_section
argument_list|)
name|links
expr_stmt|;
name|int
name|begin_addr
decl_stmt|;
name|int
name|end_addr
decl_stmt|;
block|}
name|critical_section_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|SCOPE_ROOT
block|,
name|SCOPE_IF
block|,
name|SCOPE_ELSE_IF
block|,
name|SCOPE_ELSE
block|}
name|scope_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|patch_info
block|{
name|int
name|skip_patch
decl_stmt|;
name|int
name|skip_instr
decl_stmt|;
block|}
name|patch_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|scope
block|{
name|SLIST_ENTRY
argument_list|(
argument|scope
argument_list|)
name|scope_stack_links
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|scope
argument_list|)
name|scope_links
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|scope
argument_list|)
name|inner_scope
expr_stmt|;
name|scope_type
name|type
decl_stmt|;
name|int
name|inner_scope_patches
decl_stmt|;
name|int
name|begin_addr
decl_stmt|;
name|int
name|end_addr
decl_stmt|;
name|patch_info_t
name|patches
index|[
literal|2
index|]
decl_stmt|;
name|int
name|func_num
decl_stmt|;
block|}
name|scope_t
typedef|;
end_typedef

begin_expr_stmt
name|TAILQ_HEAD
argument_list|(
name|cs_tailq
argument_list|,
name|critical_section
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SLIST_HEAD
argument_list|(
name|scope_list
argument_list|,
name|scope
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|TAILQ_HEAD
argument_list|(
name|scope_tailq
argument_list|,
name|scope
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|symbol_delete
name|__P
argument_list|(
operator|(
name|symbol_t
operator|*
name|symbol
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symtable_open
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symtable_close
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|symbol_t
modifier|*
name|symtable_get
name|__P
argument_list|(
operator|(
name|char
operator|*
name|name
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|symbol_node_t
modifier|*
name|symlist_search
name|__P
argument_list|(
operator|(
name|symlist_t
operator|*
name|symlist
operator|,
name|char
operator|*
name|symname
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symlist_add
name|__P
argument_list|(
operator|(
name|symlist_t
operator|*
name|symlist
operator|,
name|symbol_t
operator|*
name|symbol
operator|,
name|int
name|how
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|SYMLIST_INSERT_HEAD
value|0x00
end_define

begin_define
define|#
directive|define
name|SYMLIST_SORT
value|0x01
end_define

begin_decl_stmt
name|void
name|symlist_free
name|__P
argument_list|(
operator|(
name|symlist_t
operator|*
name|symlist
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symlist_merge
name|__P
argument_list|(
operator|(
name|symlist_t
operator|*
name|symlist_dest
operator|,
name|symlist_t
operator|*
name|symlist_src1
operator|,
name|symlist_t
operator|*
name|symlist_src2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symtable_dump
name|__P
argument_list|(
operator|(
name|FILE
operator|*
name|ofile
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

