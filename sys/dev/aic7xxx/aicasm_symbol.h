begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Aic7xxx SCSI host adapter firmware asssembler symbol table definitions  *  * Copyright (c) 1997 Justin T. Gibbs.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice immediately at the beginning of the file, without modification,  *    this list of conditions, and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *      $Id: aicasm_symbol.h,v 1.1 1997/03/16 07:08:19 gibbs Exp $  */
end_comment

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_typedef
typedef|typedef
enum|enum
block|{
name|UNINITIALIZED
block|,
name|REGISTER
block|,
name|ALIAS
block|,
name|SCBLOC
block|,
name|SRAMLOC
block|,
name|MASK
block|,
name|BIT
block|,
name|CONST
block|,
name|DOWNLOAD_CONST
block|,
name|LABEL
block|,
name|CONDITIONAL
block|}
name|symtype
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|RO
init|=
literal|0x01
block|,
name|WO
init|=
literal|0x02
block|,
name|RW
init|=
literal|0x03
block|}
name|amode_t
typedef|;
end_typedef

begin_struct
struct|struct
name|reg_info
block|{
name|u_int8_t
name|address
decl_stmt|;
name|int
name|size
decl_stmt|;
name|amode_t
name|mode
decl_stmt|;
name|u_int8_t
name|valid_bitmask
decl_stmt|;
name|int
name|typecheck_masks
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|SLIST_HEAD
argument_list|(
argument|symlist
argument_list|,
argument|symbol_node
argument_list|)
name|symlist_t
expr_stmt|;
end_typedef

begin_struct
struct|struct
name|mask_info
block|{
name|symlist_t
name|symrefs
decl_stmt|;
name|u_int8_t
name|mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|const_info
block|{
name|u_int8_t
name|value
decl_stmt|;
name|int
name|define
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|alias_info
block|{
name|struct
name|symbol
modifier|*
name|parent
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|label_info
block|{
name|int
name|address
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cond_info
block|{
name|int
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
struct|struct
name|expression_info
block|{
name|symlist_t
name|referenced_syms
decl_stmt|;
name|int
name|value
decl_stmt|;
block|}
name|expression_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|symbol
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|symtype
name|type
decl_stmt|;
union|union
block|{
name|struct
name|reg_info
modifier|*
name|rinfo
decl_stmt|;
name|struct
name|mask_info
modifier|*
name|minfo
decl_stmt|;
name|struct
name|const_info
modifier|*
name|cinfo
decl_stmt|;
name|struct
name|alias_info
modifier|*
name|ainfo
decl_stmt|;
name|struct
name|label_info
modifier|*
name|linfo
decl_stmt|;
name|struct
name|cond_info
modifier|*
name|condinfo
decl_stmt|;
block|}
name|info
union|;
block|}
name|symbol_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|symbol_ref
block|{
name|symbol_t
modifier|*
name|symbol
decl_stmt|;
name|int
name|offset
decl_stmt|;
block|}
name|symbol_ref_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|symbol_node
block|{
name|SLIST_ENTRY
argument_list|(
argument|symbol_node
argument_list|)
name|links
expr_stmt|;
name|symbol_t
modifier|*
name|symbol
decl_stmt|;
block|}
name|symbol_node_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|patch
block|{
name|STAILQ_ENTRY
argument_list|(
argument|patch
argument_list|)
name|links
expr_stmt|;
name|int
name|negative
decl_stmt|;
name|int
name|begin
decl_stmt|;
name|int
name|end
decl_stmt|;
name|int
name|options
decl_stmt|;
block|}
name|patch_t
typedef|;
end_typedef

begin_decl_stmt
name|void
name|symbol_delete
name|__P
argument_list|(
operator|(
name|symbol_t
operator|*
name|symbol
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symtable_open
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symtable_close
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|symbol_t
modifier|*
name|symtable_get
name|__P
argument_list|(
operator|(
name|char
operator|*
name|name
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|symbol_node_t
modifier|*
name|symlist_search
name|__P
argument_list|(
operator|(
name|symlist_t
operator|*
name|symlist
operator|,
name|char
operator|*
name|symname
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symlist_add
name|__P
argument_list|(
operator|(
name|symlist_t
operator|*
name|symlist
operator|,
name|symbol_t
operator|*
name|symbol
operator|,
name|int
name|how
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|SYMLIST_INSERT_HEAD
value|0x00
end_define

begin_define
define|#
directive|define
name|SYMLIST_SORT
value|0x01
end_define

begin_decl_stmt
name|void
name|symlist_free
name|__P
argument_list|(
operator|(
name|symlist_t
operator|*
name|symlist
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symlist_merge
name|__P
argument_list|(
operator|(
name|symlist_t
operator|*
name|symlist_dest
operator|,
name|symlist_t
operator|*
name|symlist_src1
operator|,
name|symlist_t
operator|*
name|symlist_src2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|symtable_dump
name|__P
argument_list|(
operator|(
name|FILE
operator|*
name|ofile
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

