begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2009, Pyun YongHyeon<yongari@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IF_ALCVAR_H
end_ifndef

begin_define
define|#
directive|define
name|_IF_ALCVAR_H
end_define

begin_define
define|#
directive|define
name|ALC_TX_RING_CNT
value|256
end_define

begin_define
define|#
directive|define
name|ALC_TX_RING_ALIGN
value|sizeof(struct tx_desc)
end_define

begin_define
define|#
directive|define
name|ALC_RX_RING_CNT
value|256
end_define

begin_define
define|#
directive|define
name|ALC_RX_RING_ALIGN
value|sizeof(struct rx_desc)
end_define

begin_define
define|#
directive|define
name|ALC_RX_BUF_ALIGN
value|4
end_define

begin_define
define|#
directive|define
name|ALC_RR_RING_CNT
value|ALC_RX_RING_CNT
end_define

begin_define
define|#
directive|define
name|ALC_RR_RING_ALIGN
value|sizeof(struct rx_rdesc)
end_define

begin_define
define|#
directive|define
name|ALC_CMB_ALIGN
value|8
end_define

begin_define
define|#
directive|define
name|ALC_SMB_ALIGN
value|8
end_define

begin_define
define|#
directive|define
name|ALC_TSO_MAXSEGSIZE
value|4096
end_define

begin_define
define|#
directive|define
name|ALC_TSO_MAXSIZE
value|(65535 + sizeof(struct ether_vlan_header))
end_define

begin_define
define|#
directive|define
name|ALC_MAXTXSEGS
value|32
end_define

begin_define
define|#
directive|define
name|ALC_ADDR_LO
parameter_list|(
name|x
parameter_list|)
value|((uint64_t) (x)& 0xFFFFFFFF)
end_define

begin_define
define|#
directive|define
name|ALC_ADDR_HI
parameter_list|(
name|x
parameter_list|)
value|((uint64_t) (x)>> 32)
end_define

begin_define
define|#
directive|define
name|ALC_DESC_INC
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|((x) = ((x) + 1) % (y))
end_define

begin_comment
comment|/* Water mark to kick reclaiming Tx buffers. */
end_comment

begin_define
define|#
directive|define
name|ALC_TX_DESC_HIWAT
value|((ALC_TX_RING_CNT * 6) / 10)
end_define

begin_define
define|#
directive|define
name|ALC_MSI_MESSAGES
value|1
end_define

begin_define
define|#
directive|define
name|ALC_MSIX_MESSAGES
value|1
end_define

begin_define
define|#
directive|define
name|ALC_TX_RING_SZ
define|\
value|(sizeof(struct tx_desc) * ALC_TX_RING_CNT)
end_define

begin_define
define|#
directive|define
name|ALC_RX_RING_SZ
define|\
value|(sizeof(struct rx_desc) * ALC_RX_RING_CNT)
end_define

begin_define
define|#
directive|define
name|ALC_RR_RING_SZ
define|\
value|(sizeof(struct rx_rdesc) * ALC_RR_RING_CNT)
end_define

begin_define
define|#
directive|define
name|ALC_CMB_SZ
value|(sizeof(struct cmb))
end_define

begin_define
define|#
directive|define
name|ALC_SMB_SZ
value|(sizeof(struct smb))
end_define

begin_define
define|#
directive|define
name|ALC_PROC_MIN
value|16
end_define

begin_define
define|#
directive|define
name|ALC_PROC_MAX
value|(ALC_RX_RING_CNT - 1)
end_define

begin_define
define|#
directive|define
name|ALC_PROC_DEFAULT
value|(ALC_RX_RING_CNT / 4)
end_define

begin_comment
comment|/*  * The number of bits reserved for MSS in AR813x/AR815x controllers  * are 13 bits. This limits the maximum interface MTU size in TSO  * case(8191 + sizeof(struct ip) + sizeof(struct tcphdr)) as upper  * stack should not generate TCP segments with MSS greater than the  * limit. Also Atheros says that maximum MTU for TSO is 6KB.  */
end_comment

begin_define
define|#
directive|define
name|ALC_TSO_MTU
value|(6 * 1024)
end_define

begin_struct
struct|struct
name|alc_rxdesc
block|{
name|struct
name|mbuf
modifier|*
name|rx_m
decl_stmt|;
name|bus_dmamap_t
name|rx_dmamap
decl_stmt|;
name|struct
name|rx_desc
modifier|*
name|rx_desc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|alc_txdesc
block|{
name|struct
name|mbuf
modifier|*
name|tx_m
decl_stmt|;
name|bus_dmamap_t
name|tx_dmamap
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|alc_ring_data
block|{
name|struct
name|tx_desc
modifier|*
name|alc_tx_ring
decl_stmt|;
name|bus_addr_t
name|alc_tx_ring_paddr
decl_stmt|;
name|struct
name|rx_desc
modifier|*
name|alc_rx_ring
decl_stmt|;
name|bus_addr_t
name|alc_rx_ring_paddr
decl_stmt|;
name|struct
name|rx_rdesc
modifier|*
name|alc_rr_ring
decl_stmt|;
name|bus_addr_t
name|alc_rr_ring_paddr
decl_stmt|;
name|struct
name|cmb
modifier|*
name|alc_cmb
decl_stmt|;
name|bus_addr_t
name|alc_cmb_paddr
decl_stmt|;
name|struct
name|smb
modifier|*
name|alc_smb
decl_stmt|;
name|bus_addr_t
name|alc_smb_paddr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|alc_chain_data
block|{
name|bus_dma_tag_t
name|alc_parent_tag
decl_stmt|;
name|bus_dma_tag_t
name|alc_buffer_tag
decl_stmt|;
name|bus_dma_tag_t
name|alc_tx_tag
decl_stmt|;
name|struct
name|alc_txdesc
name|alc_txdesc
index|[
name|ALC_TX_RING_CNT
index|]
decl_stmt|;
name|bus_dma_tag_t
name|alc_rx_tag
decl_stmt|;
name|struct
name|alc_rxdesc
name|alc_rxdesc
index|[
name|ALC_RX_RING_CNT
index|]
decl_stmt|;
name|bus_dma_tag_t
name|alc_tx_ring_tag
decl_stmt|;
name|bus_dmamap_t
name|alc_tx_ring_map
decl_stmt|;
name|bus_dma_tag_t
name|alc_rx_ring_tag
decl_stmt|;
name|bus_dmamap_t
name|alc_rx_ring_map
decl_stmt|;
name|bus_dma_tag_t
name|alc_rr_ring_tag
decl_stmt|;
name|bus_dmamap_t
name|alc_rr_ring_map
decl_stmt|;
name|bus_dmamap_t
name|alc_rx_sparemap
decl_stmt|;
name|bus_dma_tag_t
name|alc_cmb_tag
decl_stmt|;
name|bus_dmamap_t
name|alc_cmb_map
decl_stmt|;
name|bus_dma_tag_t
name|alc_smb_tag
decl_stmt|;
name|bus_dmamap_t
name|alc_smb_map
decl_stmt|;
name|int
name|alc_tx_prod
decl_stmt|;
name|int
name|alc_tx_cons
decl_stmt|;
name|int
name|alc_tx_cnt
decl_stmt|;
name|int
name|alc_rx_cons
decl_stmt|;
name|int
name|alc_rr_cons
decl_stmt|;
name|int
name|alc_rxlen
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|alc_rxhead
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|alc_rxtail
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|alc_rxprev_tail
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|alc_hw_stats
block|{
comment|/* Rx stats. */
name|uint32_t
name|rx_frames
decl_stmt|;
name|uint32_t
name|rx_bcast_frames
decl_stmt|;
name|uint32_t
name|rx_mcast_frames
decl_stmt|;
name|uint32_t
name|rx_pause_frames
decl_stmt|;
name|uint32_t
name|rx_control_frames
decl_stmt|;
name|uint32_t
name|rx_crcerrs
decl_stmt|;
name|uint32_t
name|rx_lenerrs
decl_stmt|;
name|uint64_t
name|rx_bytes
decl_stmt|;
name|uint32_t
name|rx_runts
decl_stmt|;
name|uint32_t
name|rx_fragments
decl_stmt|;
name|uint32_t
name|rx_pkts_64
decl_stmt|;
name|uint32_t
name|rx_pkts_65_127
decl_stmt|;
name|uint32_t
name|rx_pkts_128_255
decl_stmt|;
name|uint32_t
name|rx_pkts_256_511
decl_stmt|;
name|uint32_t
name|rx_pkts_512_1023
decl_stmt|;
name|uint32_t
name|rx_pkts_1024_1518
decl_stmt|;
name|uint32_t
name|rx_pkts_1519_max
decl_stmt|;
name|uint32_t
name|rx_pkts_truncated
decl_stmt|;
name|uint32_t
name|rx_fifo_oflows
decl_stmt|;
name|uint32_t
name|rx_rrs_errs
decl_stmt|;
name|uint32_t
name|rx_alignerrs
decl_stmt|;
name|uint64_t
name|rx_bcast_bytes
decl_stmt|;
name|uint64_t
name|rx_mcast_bytes
decl_stmt|;
name|uint32_t
name|rx_pkts_filtered
decl_stmt|;
comment|/* Tx stats. */
name|uint32_t
name|tx_frames
decl_stmt|;
name|uint32_t
name|tx_bcast_frames
decl_stmt|;
name|uint32_t
name|tx_mcast_frames
decl_stmt|;
name|uint32_t
name|tx_pause_frames
decl_stmt|;
name|uint32_t
name|tx_excess_defer
decl_stmt|;
name|uint32_t
name|tx_control_frames
decl_stmt|;
name|uint32_t
name|tx_deferred
decl_stmt|;
name|uint64_t
name|tx_bytes
decl_stmt|;
name|uint32_t
name|tx_pkts_64
decl_stmt|;
name|uint32_t
name|tx_pkts_65_127
decl_stmt|;
name|uint32_t
name|tx_pkts_128_255
decl_stmt|;
name|uint32_t
name|tx_pkts_256_511
decl_stmt|;
name|uint32_t
name|tx_pkts_512_1023
decl_stmt|;
name|uint32_t
name|tx_pkts_1024_1518
decl_stmt|;
name|uint32_t
name|tx_pkts_1519_max
decl_stmt|;
name|uint32_t
name|tx_single_colls
decl_stmt|;
name|uint32_t
name|tx_multi_colls
decl_stmt|;
name|uint32_t
name|tx_late_colls
decl_stmt|;
name|uint32_t
name|tx_excess_colls
decl_stmt|;
name|uint32_t
name|tx_abort
decl_stmt|;
name|uint32_t
name|tx_underrun
decl_stmt|;
name|uint32_t
name|tx_desc_underrun
decl_stmt|;
name|uint32_t
name|tx_lenerrs
decl_stmt|;
name|uint32_t
name|tx_pkts_truncated
decl_stmt|;
name|uint64_t
name|tx_bcast_bytes
decl_stmt|;
name|uint64_t
name|tx_mcast_bytes
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|alc_ident
block|{
name|uint16_t
name|vendorid
decl_stmt|;
name|uint16_t
name|deviceid
decl_stmt|;
name|uint32_t
name|max_framelen
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Software state per device.  */
end_comment

begin_struct
struct|struct
name|alc_softc
block|{
name|struct
name|ifnet
modifier|*
name|alc_ifp
decl_stmt|;
name|device_t
name|alc_dev
decl_stmt|;
name|device_t
name|alc_miibus
decl_stmt|;
name|struct
name|resource
modifier|*
name|alc_res
index|[
literal|1
index|]
decl_stmt|;
name|struct
name|resource_spec
modifier|*
name|alc_res_spec
decl_stmt|;
name|struct
name|resource
modifier|*
name|alc_irq
index|[
name|ALC_MSI_MESSAGES
index|]
decl_stmt|;
name|struct
name|resource_spec
modifier|*
name|alc_irq_spec
decl_stmt|;
name|void
modifier|*
name|alc_intrhand
index|[
name|ALC_MSI_MESSAGES
index|]
decl_stmt|;
name|struct
name|alc_ident
modifier|*
name|alc_ident
decl_stmt|;
name|int
name|alc_rev
decl_stmt|;
name|int
name|alc_chip_rev
decl_stmt|;
name|int
name|alc_phyaddr
decl_stmt|;
name|uint8_t
name|alc_eaddr
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|uint32_t
name|alc_dma_rd_burst
decl_stmt|;
name|uint32_t
name|alc_dma_wr_burst
decl_stmt|;
name|uint32_t
name|alc_rcb
decl_stmt|;
name|int
name|alc_expcap
decl_stmt|;
name|int
name|alc_pmcap
decl_stmt|;
name|int
name|alc_flags
decl_stmt|;
define|#
directive|define
name|ALC_FLAG_PCIE
value|0x0001
define|#
directive|define
name|ALC_FLAG_PCIX
value|0x0002
define|#
directive|define
name|ALC_FLAG_MSI
value|0x0004
define|#
directive|define
name|ALC_FLAG_MSIX
value|0x0008
define|#
directive|define
name|ALC_FLAG_PM
value|0x0010
define|#
directive|define
name|ALC_FLAG_FASTETHER
value|0x0020
define|#
directive|define
name|ALC_FLAG_JUMBO
value|0x0040
define|#
directive|define
name|ALC_FLAG_ASPM_MON
value|0x0080
define|#
directive|define
name|ALC_FLAG_CMB_BUG
value|0x0100
define|#
directive|define
name|ALC_FLAG_SMB_BUG
value|0x0200
define|#
directive|define
name|ALC_FLAG_L0S
value|0x0400
define|#
directive|define
name|ALC_FLAG_L1S
value|0x0800
define|#
directive|define
name|ALC_FLAG_APS
value|0x1000
define|#
directive|define
name|ALC_FLAG_LINK
value|0x8000
name|struct
name|callout
name|alc_tick_ch
decl_stmt|;
name|struct
name|alc_hw_stats
name|alc_stats
decl_stmt|;
name|struct
name|alc_chain_data
name|alc_cdata
decl_stmt|;
name|struct
name|alc_ring_data
name|alc_rdata
decl_stmt|;
name|int
name|alc_if_flags
decl_stmt|;
name|int
name|alc_watchdog_timer
decl_stmt|;
name|int
name|alc_process_limit
decl_stmt|;
specifier|volatile
name|int
name|alc_morework
decl_stmt|;
name|int
name|alc_int_rx_mod
decl_stmt|;
name|int
name|alc_int_tx_mod
decl_stmt|;
name|int
name|alc_buf_size
decl_stmt|;
name|struct
name|task
name|alc_int_task
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|alc_tq
decl_stmt|;
name|struct
name|mtx
name|alc_mtx
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Register access macros. */
end_comment

begin_define
define|#
directive|define
name|CSR_WRITE_4
parameter_list|(
name|_sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_write_4((_sc)->alc_res[0], (reg), (val))
end_define

begin_define
define|#
directive|define
name|CSR_WRITE_2
parameter_list|(
name|_sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_write_2((_sc)->alc_res[0], (reg), (val))
end_define

begin_define
define|#
directive|define
name|CSR_WRITE_1
parameter_list|(
name|_sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_write_1((_sc)->alc_res[0], (reg), (val))
end_define

begin_define
define|#
directive|define
name|CSR_READ_2
parameter_list|(
name|_sc
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_read_2((_sc)->alc_res[0], (reg))
end_define

begin_define
define|#
directive|define
name|CSR_READ_4
parameter_list|(
name|_sc
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_read_4((_sc)->alc_res[0], (reg))
end_define

begin_define
define|#
directive|define
name|ALC_RXCHAIN_RESET
parameter_list|(
name|_sc
parameter_list|)
define|\
value|do {									\ 	(_sc)->alc_cdata.alc_rxhead = NULL;				\ 	(_sc)->alc_cdata.alc_rxtail = NULL;				\ 	(_sc)->alc_cdata.alc_rxprev_tail = NULL;			\ 	(_sc)->alc_cdata.alc_rxlen = 0;					\ } while (0)
end_define

begin_define
define|#
directive|define
name|ALC_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->alc_mtx)
end_define

begin_define
define|#
directive|define
name|ALC_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->alc_mtx)
end_define

begin_define
define|#
directive|define
name|ALC_LOCK_ASSERT
parameter_list|(
name|_sc
parameter_list|)
value|mtx_assert(&(_sc)->alc_mtx, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|ALC_TX_TIMEOUT
value|5
end_define

begin_define
define|#
directive|define
name|ALC_RESET_TIMEOUT
value|100
end_define

begin_define
define|#
directive|define
name|ALC_TIMEOUT
value|1000
end_define

begin_define
define|#
directive|define
name|ALC_PHY_TIMEOUT
value|1000
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _IF_ALCVAR_H */
end_comment

end_unit

