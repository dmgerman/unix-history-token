begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002-2007 Neterion, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  *  FileName :    xgehal-config.h  *  *  Description:  Xframe configuration.  *  *  Created:      14 May 2004  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XGE_HAL_CONFIG_H
end_ifndef

begin_define
define|#
directive|define
name|XGE_HAL_CONFIG_H
end_define

begin_include
include|#
directive|include
file|<dev/nxge/include/xge-os-pal.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-types.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xge-queue.h>
end_include

begin_macro
name|__EXTERN_BEGIN_DECLS
end_macro

begin_define
define|#
directive|define
name|XGE_HAL_DEFAULT_USE_HARDCODE
value|-1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|XGEHAL_RNIC
end_ifdef

begin_define
define|#
directive|define
name|XGE_HAL_MAX_VIRTUAL_PATHS
value|17
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|XGE_HAL_MAX_VIRTUAL_PATHS
value|8
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|XGE_HAL_MAX_INTR_PER_VP
value|4
end_define

begin_comment
comment|/**  * struct xge_hal_tti_config_t - Xframe Tx interrupt configuration.  * @enabled: Set to 1, if TTI feature is enabled.  * @urange_a: Link utilization range A. The value from 0 to 100%.  * @ufc_a: Frame count for the utilization range A. Interrupt will be generated  *         each time when (and only when) the line is utilized no more  *         than @urange_a percent in the transmit direction,  *         and number of transmitted frames is greater or equal @ufc_a.  * @urange_b: Link utilization range B.  * @ufc_b: Frame count for the utilization range B.  * @urange_c: Link utilization range C.  * @ufc_c: Frame count for the utilization range C.  * @urange_d: Link utilization range D.  * @ufc_d: Frame count for the utilization range D.  * @timer_val_us: Interval of time, in microseconds, at which transmit timer  *             interrupt is to be generated. Note that unless @timer_ci_en  *             is set, the timer interrupt is generated only in presence  *             of the transmit traffic. Note also that timer interrupt  *             and utilization interrupt are two separate interrupt  *             sources.  * @timer_ac_en: Enable auto-cancel. That is, reset the timer if utilization  *               interrupt was generated during the interval.  * @timer_ci_en: Enable/disable continuous interrupt. Set this value  *               to 1 in order to generate continuous interrupt  *               at fixed @timer_val intervals of time, independently  *               of whether there is transmit traffic or not.  * @enabled: Set to 1, if TTI feature is enabled.  *  * Xframe transmit interrupt configuration.  * See Xframe User Guide, Section 3.5 "Device Interrupts"  * for more details. Note also (min, max)  * ranges in the body of the xge_hal_tx_intr_config_t structure.  * Note: Valid (min, max) range for each attribute is specified in the body of  * the xge_hal_tti_config_t{} structure. Please refer to the  * corresponding header file.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_tti_config_t
block|{
name|int
name|enabled
decl_stmt|;
define|#
directive|define
name|XGE_HAL_TTI_ENABLE
value|1
define|#
directive|define
name|XGE_HAL_TTI_DISABLE
value|0
comment|/* Line utilization interrupts */
name|int
name|urange_a
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_URANGE_A
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_URANGE_A
value|100
name|int
name|ufc_a
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_UFC_A
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_UFC_A
value|65535
name|int
name|urange_b
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_URANGE_B
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_URANGE_B
value|100
name|int
name|ufc_b
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_UFC_B
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_UFC_B
value|65535
name|int
name|urange_c
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_URANGE_C
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_URANGE_C
value|100
name|int
name|ufc_c
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_UFC_C
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_UFC_C
value|65535
name|int
name|ufc_d
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_UFC_D
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_UFC_D
value|65535
name|int
name|timer_val_us
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_TIMER_VAL
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_TIMER_VAL
value|65535
name|int
name|timer_ac_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_TIMER_AC_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_TIMER_AC_EN
value|1
name|int
name|timer_ci_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TX_TIMER_CI_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_TX_TIMER_CI_EN
value|1
block|}
name|xge_hal_tti_config_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_rti_config_t - Xframe Rx interrupt configuration.  * @urange_a: Link utilization range A. The value from 0 to 100%.  * @ufc_a: Frame count for the utilization range A. Interrupt will be generated  *         each time when (and only when) the line is utilized no more  *         than @urange_a percent inbound,  *         and number of received frames is greater or equal @ufc_a.  * @urange_b: Link utilization range B.  * @ufc_b: Frame count for the utilization range B.  * @urange_c: Link utilization range C.  * @ufc_c: Frame count for the utilization range C.  * @urange_d: Link utilization range D.  * @ufc_d: Frame count for the utilization range D.  * @timer_ac_en: Enable auto-cancel. That is, reset the timer if utilization  *               interrupt was generated during the interval.  * @timer_val_us: Interval of time, in microseconds, at which receive timer  *             interrupt is to be generated. The timer interrupt is generated  *             only in presence of the inbound traffic. Note also that timer  *             interrupt and utilization interrupt are two separate interrupt  *             sources.  *  * Xframe receive interrupt configuration.  * See Xframe User Guide, Section 3.5 "Device Interrupts"  * for more details. Note also (min, max)  * ranges in the body of the xge_hal_intr_config_t structure.  * Note: Valid (min, max) range for each attribute is specified in the body of  * the xge_hal_rti_config_t{} structure. Please refer to the  * corresponding header file.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_rti_config_t
block|{
name|int
name|urange_a
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RX_URANGE_A
value|0
define|#
directive|define
name|XGE_HAL_MAX_RX_URANGE_A
value|127
name|int
name|ufc_a
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RX_UFC_A
value|0
define|#
directive|define
name|XGE_HAL_MAX_RX_UFC_A
value|65535
name|int
name|urange_b
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RX_URANGE_B
value|0
define|#
directive|define
name|XGE_HAL_MAX_RX_URANGE_B
value|127
name|int
name|ufc_b
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RX_UFC_B
value|0
define|#
directive|define
name|XGE_HAL_MAX_RX_UFC_B
value|65535
name|int
name|urange_c
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RX_URANGE_C
value|0
define|#
directive|define
name|XGE_HAL_MAX_RX_URANGE_C
value|127
name|int
name|ufc_c
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RX_UFC_C
value|0
define|#
directive|define
name|XGE_HAL_MAX_RX_UFC_C
value|65535
name|int
name|ufc_d
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RX_UFC_D
value|0
define|#
directive|define
name|XGE_HAL_MAX_RX_UFC_D
value|65535
name|int
name|timer_ac_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RX_TIMER_AC_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_RX_TIMER_AC_EN
value|1
name|int
name|timer_val_us
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RX_TIMER_VAL
value|0
define|#
directive|define
name|XGE_HAL_MAX_RX_TIMER_VAL
value|65535
block|}
name|xge_hal_rti_config_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_fifo_queue_t - Single fifo configuration.  * @max: Max numbers of TxDLs (that is, lists of Tx descriptors) per queue.  * @initial: Initial numbers of TxDLs per queue (can grow up to @max).  * @intr: Boolean. Use 1 to generate interrupt for  each completed TxDL.  *        Use 0 otherwise.  * @intr_vector: TBD  * @no_snoop_bits: If non-zero, specifies no-snoop PCI operation,  *              which generally improves latency of the host bridge operation  *              (see PCI specification). For valid values please refer  *              to xge_hal_fifo_queue_t{} in the driver sources.  * @priority: TBD  * @configured: Boolean. Use 1 to specify that the fifo is configured.  *              Only "configured" fifos can be activated and used to post  *              Tx descriptors. Any subset of 8 available fifos can be  *              "configured".  * @tti: TBD  *  * Single fifo configuration.  * Note: Valid (min, max) range for each attribute is specified in the body of  * the xge_hal_fifo_queue_t{} structure. Please refer to the  * corresponding header file.  * See also: xge_hal_fifo_config_t{}  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_fifo_queue_t
block|{
name|int
name|max
decl_stmt|;
name|int
name|initial
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_FIFO_QUEUE_LENGTH
value|2
define|#
directive|define
name|XGE_HAL_MAX_FIFO_QUEUE_LENGTH
value|8192
name|int
name|intr
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_FIFO_QUEUE_INTR
value|0
define|#
directive|define
name|XGE_HAL_MAX_FIFO_QUEUE_INTR
value|1
name|int
name|intr_vector
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_FIFO_QUEUE_INTR_VECTOR
value|0
define|#
directive|define
name|XGE_HAL_MAX_FIFO_QUEUE_INTR_VECTOR
value|64
name|int
name|no_snoop_bits
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_FIFO_QUEUE_NO_SNOOP_DISABLED
value|0
define|#
directive|define
name|XGE_HAL_MAX_FIFO_QUEUE_NO_SNOOP_TXD
value|1
define|#
directive|define
name|XGE_HAL_MAX_FIFO_QUEUE_NO_SNOOP_BUFFER
value|2
define|#
directive|define
name|XGE_HAL_MAX_FIFO_QUEUE_NO_SNOOP_ALL
value|3
name|int
name|priority
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_FIFO_PRIORITY
value|0
define|#
directive|define
name|XGE_HAL_MAX_FIFO_PRIORITY
value|63
name|int
name|configured
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_FIFO_CONFIGURED
value|0
define|#
directive|define
name|XGE_HAL_MAX_FIFO_CONFIGURED
value|1
define|#
directive|define
name|XGE_HAL_MAX_FIFO_TTI_NUM
value|7
define|#
directive|define
name|XGE_HAL_MAX_FIFO_TTI_RING_0
value|56
name|xge_hal_tti_config_t
name|tti
index|[
name|XGE_HAL_MAX_FIFO_TTI_NUM
index|]
decl_stmt|;
block|}
name|xge_hal_fifo_queue_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_fifo_config_t - Configuration of all 8 fifos.  * @max_frags: Max number of Tx buffers per TxDL (that is, per single  *             transmit operation).  *             No more than 256 transmit buffers can be specified.  * @max_aligned_frags: Number of fragments to be aligned out of  *             maximum fragments (see @max_frags).  * @reserve_threshold: Descriptor reservation threshold.  *                     At least @reserve_threshold descriptors will remain  *                     unallocated at all times.  * @memblock_size: Fifo descriptors are allocated in blocks of @mem_block_size  *                 bytes. Setting @memblock_size to page size ensures  *                 by-page allocation of descriptors. 128K bytes is the  *                 maximum supported block size.  * @queue: Array of per-fifo configurations.  * @alignment_size: per Tx fragment DMA-able memory used to align transmit data  *                  (e.g., to align on a cache line).  *  * Configuration of all Xframe fifos. Includes array of xge_hal_fifo_queue_t  * structures.  * Note: Valid (min, max) range for each attribute is specified in the body of  * the xge_hal_fifo_config_t{} structure. Please refer to the  * corresponding header file.  * See also: xge_hal_ring_queue_t{}.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_fifo_config_t
block|{
name|int
name|max_frags
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_FIFO_FRAGS
value|1
define|#
directive|define
name|XGE_HAL_MAX_FIFO_FRAGS
value|256
name|int
name|reserve_threshold
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_FIFO_RESERVE_THRESHOLD
value|0
define|#
directive|define
name|XGE_HAL_MAX_FIFO_RESERVE_THRESHOLD
value|8192
name|int
name|memblock_size
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_FIFO_MEMBLOCK_SIZE
value|4096
define|#
directive|define
name|XGE_HAL_MAX_FIFO_MEMBLOCK_SIZE
value|131072
name|int
name|alignment_size
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_ALIGNMENT_SIZE
value|0
define|#
directive|define
name|XGE_HAL_MAX_ALIGNMENT_SIZE
value|65536
name|int
name|max_aligned_frags
decl_stmt|;
comment|/* range: (1, @max_frags) */
define|#
directive|define
name|XGE_HAL_MIN_FIFO_NUM
value|1
define|#
directive|define
name|XGE_HAL_MAX_FIFO_NUM_HERC
value|8
define|#
directive|define
name|XGE_HAL_MAX_FIFO_NUM_TITAN
value|(XGE_HAL_MAX_VIRTUAL_PATHS - 1)
define|#
directive|define
name|XGE_HAL_MAX_FIFO_NUM
value|(XGE_HAL_MAX_VIRTUAL_PATHS)
name|xge_hal_fifo_queue_t
name|queue
index|[
name|XGE_HAL_MAX_FIFO_NUM
index|]
decl_stmt|;
block|}
name|xge_hal_fifo_config_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_rts_port_t - RTS port entry  * @num: Port number  * @udp: Port is UDP (default TCP)  * @src: Port is Source (default Destination)  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_rts_port_t
block|{
name|int
name|num
decl_stmt|;
name|int
name|udp
decl_stmt|;
name|int
name|src
decl_stmt|;
block|}
name|xge_hal_rts_port_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_ring_queue_t - Single ring configuration.  * @max: Max numbers of RxD blocks per queue  * @initial: Initial numbers of RxD blocks per queue  *           (can grow up to @max)  * @buffer_mode: Receive buffer mode (1, 2, 3, or 5); for details please refer  *               to Xframe User Guide.  * @dram_size_mb: Size (in MB) of Xframe DRAM used for _that_ ring.  *                Note that 64MB of available  *                on-board DRAM is shared between receive rings.  *                If a single ring is used, @dram_size_mb can be set to 64.  *                Sum of all rings' @dram_size_mb cannot exceed 64.  * @intr_vector: TBD  * @backoff_interval_us: Time (in microseconds), after which Xframe  *      tries to download RxDs posted by the host.  *      Note that the "backoff" does not happen if host posts receive  *      descriptors in the timely fashion.  * @max_frm_len: Maximum frame length that can be received on _that_ ring.  *               Setting this field to -1 ensures that the ring will  *               "accept" MTU-size frames (note that MTU can be changed at  *               runtime).  *               Any value other than (-1) specifies a certain "hard"  *               limit on the receive frame sizes.  *               The field can be used to activate receive frame-length based  *               steering.  * @priority:    Ring priority. 0 - highest, 7 - lowest. The value is used  *               to give prioritized access to PCI-X. See Xframe documentation  *               for details.  * @rth_en: Enable Receive Traffic Hashing (RTH).  * @no_snoop_bits: If non-zero, specifies no-snoop PCI operation,  *              which generally improves latency of the host bridge operation  *              (see PCI specification). For valid values please refer  *              to xge_hal_ring_queue_t{} in the driver sources.  * @indicate_max_pkts: Sets maximum number of received frames to be processed  *              within single interrupt.  * @configured: Boolean. Use 1 to specify that the ring is configured.  *              Only "configured" rings can be activated and used to post  *              Rx descriptors. Any subset of 8 available rings can be  *              "configured".  * @rts_mac_en: 1 - To enable Receive MAC address steering.  *		0 - To disable Receive MAC address steering.  * @rth_en: TBD  * @rts_port_en: TBD  * @rts_ports: TBD  * @rti: Xframe receive interrupt configuration.  *  * Single ring configuration.  * Note: Valid (min, max) range for each attribute is specified in the body of  * the xge_hal_ring_queue_t{} structure. Please refer to the  * corresponding header file.  * See also: xge_hal_fifo_config_t{}.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_ring_queue_t
block|{
name|int
name|max
decl_stmt|;
name|int
name|initial
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_QUEUE_BLOCKS
value|1
define|#
directive|define
name|XGE_HAL_MAX_RING_QUEUE_BLOCKS
value|64
name|int
name|buffer_mode
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RING_QUEUE_BUFFER_MODE_1
value|1
define|#
directive|define
name|XGE_HAL_RING_QUEUE_BUFFER_MODE_2
value|2
define|#
directive|define
name|XGE_HAL_RING_QUEUE_BUFFER_MODE_3
value|3
define|#
directive|define
name|XGE_HAL_RING_QUEUE_BUFFER_MODE_5
value|5
name|int
name|dram_size_mb
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_QUEUE_SIZE
value|0
define|#
directive|define
name|XGE_HAL_MAX_RING_QUEUE_SIZE_XENA
value|64
define|#
directive|define
name|XGE_HAL_MAX_RING_QUEUE_SIZE_HERC
value|32
name|int
name|intr_vector
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_QUEUE_INTR_VECTOR
value|0
define|#
directive|define
name|XGE_HAL_MAX_RING_QUEUE_INTR_VECTOR
value|64
name|int
name|backoff_interval_us
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_BACKOFF_INTERVAL_US
value|1
define|#
directive|define
name|XGE_HAL_MAX_BACKOFF_INTERVAL_US
value|125000
name|int
name|max_frm_len
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_MAX_FRM_LEN
value|-1
define|#
directive|define
name|XGE_HAL_MAX_MAX_FRM_LEN
value|9622
name|int
name|priority
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_PRIORITY
value|0
define|#
directive|define
name|XGE_HAL_MAX_RING_PRIORITY
value|7
name|int
name|no_snoop_bits
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_QUEUE_NO_SNOOP_DISABLED
value|0
define|#
directive|define
name|XGE_HAL_MAX_RING_QUEUE_NO_SNOOP_RXD
value|1
define|#
directive|define
name|XGE_HAL_MAX_RING_QUEUE_NO_SNOOP_BUFFER
value|2
define|#
directive|define
name|XGE_HAL_MAX_RING_QUEUE_NO_SNOOP_ALL
value|3
name|int
name|indicate_max_pkts
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_INDICATE_MAX_PKTS
value|1
define|#
directive|define
name|XGE_HAL_MAX_RING_INDICATE_MAX_PKTS
value|65536
name|int
name|configured
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_CONFIGURED
value|0
define|#
directive|define
name|XGE_HAL_MAX_RING_CONFIGURED
value|1
name|int
name|rts_mac_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_RTS_MAC_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_RING_RTS_MAC_EN
value|1
name|int
name|rth_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_RTH_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_RING_RTH_EN
value|1
name|int
name|rts_port_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_RTS_PORT_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_RING_RTS_PORT_EN
value|1
define|#
directive|define
name|XGE_HAL_MAX_STEERABLE_PORTS
value|32
name|xge_hal_rts_port_t
name|rts_ports
index|[
name|XGE_HAL_MAX_STEERABLE_PORTS
index|]
decl_stmt|;
name|xge_hal_rti_config_t
name|rti
decl_stmt|;
block|}
name|xge_hal_ring_queue_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_ring_config_t - Array of ring configurations.  * @memblock_size: Ring descriptors are allocated in blocks of @mem_block_size  *                 bytes. Setting @memblock_size to page size ensures  *                 by-page allocation of descriptors. 128K bytes is the  *                 upper limit.  * @scatter_mode: Xframe supports two receive scatter modes: A and B.  *                For details please refer to Xframe User Guide.  * @strip_vlan_tag: TBD  * @queue: Array of all Xframe ring configurations.  *  * Array of ring configurations.  * See also: xge_hal_ring_queue_t{}.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_ring_config_t
block|{
name|int
name|memblock_size
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RING_MEMBLOCK_SIZE
value|4096
define|#
directive|define
name|XGE_HAL_MAX_RING_MEMBLOCK_SIZE
value|131072
name|int
name|scatter_mode
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RING_QUEUE_SCATTER_MODE_A
value|0
define|#
directive|define
name|XGE_HAL_RING_QUEUE_SCATTER_MODE_B
value|1
name|int
name|strip_vlan_tag
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RING_DONOT_STRIP_VLAN_TAG
value|0
define|#
directive|define
name|XGE_HAL_RING_STRIP_VLAN_TAG
value|1
define|#
directive|define
name|XGE_HAL_MIN_RING_NUM
value|1
define|#
directive|define
name|XGE_HAL_MAX_RING_NUM_HERC
value|8
define|#
directive|define
name|XGE_HAL_MAX_RING_NUM_TITAN
value|(XGE_HAL_MAX_VIRTUAL_PATHS - 1)
define|#
directive|define
name|XGE_HAL_MAX_RING_NUM
value|(XGE_HAL_MAX_VIRTUAL_PATHS)
name|xge_hal_ring_queue_t
name|queue
index|[
name|XGE_HAL_MAX_RING_NUM
index|]
decl_stmt|;
block|}
name|xge_hal_ring_config_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_mac_config_t - MAC configuration.  * @media: Transponder type.  * @tmac_util_period: The sampling period over which the transmit utilization  *                    is calculated.  * @rmac_util_period: The sampling period over which the receive utilization  *                    is calculated.  * @rmac_strip_pad: Determines whether padding of received frames is removed by  *                  the MAC or sent to the host.  * @rmac_bcast_en: Enable frames containing broadcast address to be  *                 passed to the host.  * @rmac_pause_gen_en: Received pause generation enable.  * @rmac_pause_rcv_en: Receive pause enable.  * @rmac_pause_time: The value to be inserted in outgoing pause frames.  *             Has units of pause quanta (one pause quanta = 512 bit times).  * @mc_pause_threshold_q0q3: Contains thresholds for pause frame generation  *     for queues 0 through 3. The threshold value indicates portion of the  *     individual receive buffer queue size. Thresholds have a range of 0 to  *     255, allowing 256 possible watermarks in a queue.  * @mc_pause_threshold_q4q7: Contains thresholds for pause frame generation  *     for queues 4 through 7. The threshold value indicates portion of the  *     individual receive buffer queue size. Thresholds have a range of 0 to  *     255, allowing 256 possible watermarks in a queue.  *  * MAC configuration. This includes various aspects of configuration, including:  * - Pause frame threshold;  * - sampling rate to calculate link utilization;  * - enabling/disabling broadcasts.  *  * See Xframe User Guide for more details.  * Note: Valid (min, max) range for each attribute is specified in the body of  * the xge_hal_mac_config_t{} structure. Please refer to the  * corresponding include file.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_mac_config_t
block|{
name|int
name|media
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_MEDIA
value|0
define|#
directive|define
name|XGE_HAL_MEDIA_SR
value|0
define|#
directive|define
name|XGE_HAL_MEDIA_SW
value|1
define|#
directive|define
name|XGE_HAL_MEDIA_LR
value|2
define|#
directive|define
name|XGE_HAL_MEDIA_LW
value|3
define|#
directive|define
name|XGE_HAL_MEDIA_ER
value|4
define|#
directive|define
name|XGE_HAL_MEDIA_EW
value|5
define|#
directive|define
name|XGE_HAL_MAX_MEDIA
value|5
name|int
name|tmac_util_period
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TMAC_UTIL_PERIOD
value|0
define|#
directive|define
name|XGE_HAL_MAX_TMAC_UTIL_PERIOD
value|15
name|int
name|rmac_util_period
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RMAC_UTIL_PERIOD
value|0
define|#
directive|define
name|XGE_HAL_MAX_RMAC_UTIL_PERIOD
value|15
name|int
name|rmac_bcast_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RMAC_BCAST_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_RMAC_BCAST_EN
value|1
name|int
name|rmac_pause_gen_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RMAC_PAUSE_GEN_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_RMAC_PAUSE_GEN_EN
value|1
name|int
name|rmac_pause_rcv_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RMAC_PAUSE_RCV_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_RMAC_PAUSE_RCV_EN
value|1
name|int
name|rmac_pause_time
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RMAC_HIGH_PTIME
value|16
define|#
directive|define
name|XGE_HAL_MAX_RMAC_HIGH_PTIME
value|65535
name|int
name|mc_pause_threshold_q0q3
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_MC_PAUSE_THRESHOLD_Q0Q3
value|0
define|#
directive|define
name|XGE_HAL_MAX_MC_PAUSE_THRESHOLD_Q0Q3
value|254
name|int
name|mc_pause_threshold_q4q7
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_MC_PAUSE_THRESHOLD_Q4Q7
value|0
define|#
directive|define
name|XGE_HAL_MAX_MC_PAUSE_THRESHOLD_Q4Q7
value|254
block|}
name|xge_hal_mac_config_t
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|XGEHAL_RNIC
end_ifdef

begin_comment
comment|/*  * struct xge_hal_vp_config_t - Configuration of virtual path  * @vp_id: Virtual Path Id  * @vp_valid: Flag specifies if the configuration is valid  * @bitmap_intr_num: Interrupt Number associated with the bitmap  * @nce_oid_start: The start of the NCE ID range  * @nce_oid_end: The end of the NCE ID range  * @session_oid_start: The start of the Session ID range  * @session_oid_end: The end of the Session ID range  * @srq_oid_start: The start of the HSRQ ID range  * @srq_oid_end: The end of the SRQ ID range  * @cqrq_oid_start: The start of the CQRQ range  * @cqrq_oid_end: The end of the CQRQ range  * @umq_length: Length of up message queue  * @umq_int_ctrl: Interrupt control for up Message queue  * @umq_gen_compl: Generate completion for up message queue  * @dmq_length: Length of down message queue  * @dmq_int_ctrl: Interrupt control for down Message queue  * @dmq_gen_compl: Generate completion for up message queue  *  * This structure is used by the driver to pass the configuration parameters to  * configure Virtual Path.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_vp_config_t
block|{
name|u32
name|vp_id
decl_stmt|;
name|u32
name|vp_valid
decl_stmt|;
define|#
directive|define
name|XGE_HAL_VP_CONFIG_INVALID
value|0
define|#
directive|define
name|XGE_HAL_VP_CONFIG_VALID
value|1
name|int
name|bitmap_intr_num
decl_stmt|;
define|#
directive|define
name|XGE_HAL_BITMAP_INTR_NUM_MIN
value|0
define|#
directive|define
name|XGE_HAL_BITMAP_INTR_NUM_MAX
value|3
name|u32
name|nce_oid_start
decl_stmt|;
name|u32
name|nce_oid_end
decl_stmt|;
name|u32
name|session_oid_start
decl_stmt|;
name|u32
name|session_oid_end
decl_stmt|;
name|u32
name|srq_oid_start
decl_stmt|;
name|u32
name|srq_oid_end
decl_stmt|;
name|u32
name|cqrq_oid_start
decl_stmt|;
name|u32
name|cqrq_oid_end
decl_stmt|;
name|u32
name|umq_length
decl_stmt|;
name|u32
name|umq_int_ctrl
decl_stmt|;
name|u32
name|umq_gen_compl
decl_stmt|;
name|u32
name|dmq_length
decl_stmt|;
name|u32
name|dmq_int_ctrl
decl_stmt|;
name|u32
name|dmq_gen_compl
decl_stmt|;
block|}
name|xge_hal_vp_config_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * struct xge_hal_device_config_t - Device configuration.  * @mtu: Current mtu size.  * @isr_polling_cnt: Maximum number of times to "poll" for Tx and Rx  *                   completions. Used in xge_hal_device_handle_irq().  * @latency_timer: Specifies, in units of PCI bus clocks, and in conformance  *                 with the PCI Specification, the value of the Latency Timer  *                 for this PCI bus master.  * Specify either zero or -1 to use BIOS default.  * @napi_weight: (TODO)  * @max_splits_trans: Maximum number of PCI-X split transactions.  * Specify (-1) to use BIOS default.  * @mmrb_count: Maximum Memory Read Byte Count. Use (-1) to use default  *              BIOS value. Otherwise: mmrb_count = 0 corresponds to 512B;  *              1 - 1KB, 2 - 2KB, and 3 - 4KB.  * @shared_splits: The number of Outstanding Split Transactions that is  *              shared by Tx and Rx requests. The device stops issuing Tx  *              requests once the number of Outstanding Split Transactions is  *              equal to the value of Shared_Splits.  *              A value of zero indicates that the Tx and Rx share all allocated  *              Split Requests, i.e. the device can issue both types (Tx and Rx)  *              of read requests until the number of Maximum Outstanding Split  *              Transactions is reached.  * @stats_refresh_time_sec: Sets the default interval for automatic stats transfer  *              to the host. This includes MAC stats as well as PCI stats.  *              See xge_hal_stats_hw_info_t{}.  * @pci_freq_mherz: PCI clock frequency, e.g.: 133 for 133MHz.  * @intr_mode: Line, MSI, or MSI-X interrupt.  * @sched_timer_us: If greater than zero, specifies time interval  *              (in microseconds) for the device to generate  *              interrupt. Note that unlike tti and rti interrupts,  *              the scheduled interrupt is generated independently of  *              whether there is transmit or receive traffic, respectively.  * @sched_timer_one_shot: 1 - generate scheduled interrupt only once.  *              0 - generate scheduled interrupt periodically at the specified  *              @sched_timer_us interval.  *  * @ring: See xge_hal_ring_config_t{}.  * @mac: See xge_hal_mac_config_t{}.  * @tti: See xge_hal_tti_config_t{}.  * @fifo: See xge_hal_fifo_config_t{}.  *  * @dump_on_serr: Dump adapter state ("about", statistics, registers) on SERR#.  * @dump_on_eccerr: Dump adapter state ("about", statistics, registers) on  *                  ECC error.  * @dump_on_parityerr: Dump adapter state ("about", statistics, registers) on  *                     parity error.  * @rth_en: Enable Receive Traffic Hashing(RTH) using IT(Indirection Table).  * @rth_bucket_size: RTH bucket width (in bits). For valid range please see  *                   xge_hal_device_config_t{} in the driver sources.  * @rth_spdm_en: Enable Receive Traffic Hashing(RTH) using SPDM(Socket Pair  *		Direct Match).  * @rth_spdm_use_l4: Set to 1, if the L4 ports are used in the calculation of  *	hash value in the RTH SPDM based steering.  * @rxufca_intr_thres: (TODO)  * @rxufca_lo_lim: (TODO)  * @rxufca_hi_lim: (TODO)  * @rxufca_lbolt_period: (TODO)  * @link_valid_cnt: link-valid counting is done only at device-open time,  * to determine with the specified certainty that the link is up. See also  * @link_retry_cnt.  * @link_retry_cnt: Max number of polls for link-up. Done only at device  * open time. Reducing this value as well as the previous @link_valid_cnt,  * speeds up device startup, which may be important if the driver  * is compiled into OS.  * @link_stability_period: Specify the period for which the link must be  * stable in order for the adapter to declare "LINK UP".  * The enumerated settings (see Xframe-II UG) are:  *      0 ........... instantaneous  *      1 ........... 500 ´s  *      2 ........... 1 ms  *      3 ........... 64 ms  *      4 ........... 256 ms  *      5 ........... 512 ms  *      6 ........... 1 s  *      7 ........... 2 s  * @device_poll_millis: Specify the interval (in mulliseconds) between  * successive xge_hal_device_poll() runs.  * stable in order for the adapter to declare "LINK UP".  * @no_isr_events: TBD  * @lro_sg_size: TBD  * @lro_frm_len: TBD  * @bimodal_interrupts: Enable bimodal interrupts in device  * @bimodal_timer_lo_us: TBD  * @bimodal_timer_hi_us: TBD  * @rts_mac_en: Enable Receive Traffic Steering using MAC destination address  * @rts_qos_en: TBD  * @rts_port_en: TBD  * @vp_config: Configuration for virtual paths  * @max_cqe_groups:  The maximum number of adapter CQE group blocks a CQRQ  * can own at any one time.  * @max_num_wqe_od_groups: The maximum number of WQE Headers/OD Groups that  * this S-RQ can own at any one time.  * @no_wqe_threshold: Maximum number of times adapter polls WQE Hdr blocks for  * WQEs before generating a message or interrupt.  * @refill_threshold_high:This field provides a hysteresis upper bound for  * automatic adapter refill operations.  * @refill_threshold_low:This field provides a hysteresis lower bound for  * automatic adapter refill operations.  * @eol_policy:This field sets the policy for handling the end of list condition.  * 2'b00 - When EOL is reached,poll until last block wrapper size is no longer 0.  * 2'b01 - Send UMQ message when EOL is reached.  * 2'b1x - Poll until the poll_count_max is reached and if still EOL,send UMQ message  * @eol_poll_count_max:sets the maximum number of times the queue manager will poll for  * a non-zero block wrapper before giving up and sending a UMQ message  * @ack_blk_limit: Limit on the maximum number of ACK list blocks that can be held  * by a session at any one time.  * @poll_or_doorbell: TBD  *  * Xframe configuration.  * Contains per-device configuration parameters, including:  * - latency timer (settable via PCI configuration space);  * - maximum number of split transactions;  * - maximum number of shared splits;  * - stats sampling interval, etc.  *  * In addition, xge_hal_device_config_t{} includes "subordinate"  * configurations, including:  * - fifos and rings;  * - MAC (see xge_hal_mac_config_t{}).  *  * See Xframe User Guide for more details.  * Note: Valid (min, max) range for each attribute is specified in the body of  * the xge_hal_device_config_t{} structure. Please refer to the  * corresponding include file.  * See also: xge_hal_tti_config_t{}, xge_hal_stats_hw_info_t{},  * xge_hal_mac_config_t{}.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_device_config_t
block|{
name|int
name|mtu
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_INITIAL_MTU
value|XGE_HAL_MIN_MTU
define|#
directive|define
name|XGE_HAL_MAX_INITIAL_MTU
value|XGE_HAL_MAX_MTU
name|int
name|isr_polling_cnt
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_ISR_POLLING_CNT
value|0
define|#
directive|define
name|XGE_HAL_MAX_ISR_POLLING_CNT
value|65536
name|int
name|latency_timer
decl_stmt|;
define|#
directive|define
name|XGE_HAL_USE_BIOS_DEFAULT_LATENCY
value|-1
define|#
directive|define
name|XGE_HAL_MIN_LATENCY_TIMER
value|8
define|#
directive|define
name|XGE_HAL_MAX_LATENCY_TIMER
value|255
name|int
name|napi_weight
decl_stmt|;
define|#
directive|define
name|XGE_HAL_DEF_NAPI_WEIGHT
value|64
name|int
name|max_splits_trans
decl_stmt|;
define|#
directive|define
name|XGE_HAL_USE_BIOS_DEFAULT_SPLITS
value|-1
define|#
directive|define
name|XGE_HAL_ONE_SPLIT_TRANSACTION
value|0
define|#
directive|define
name|XGE_HAL_TWO_SPLIT_TRANSACTION
value|1
define|#
directive|define
name|XGE_HAL_THREE_SPLIT_TRANSACTION
value|2
define|#
directive|define
name|XGE_HAL_FOUR_SPLIT_TRANSACTION
value|3
define|#
directive|define
name|XGE_HAL_EIGHT_SPLIT_TRANSACTION
value|4
define|#
directive|define
name|XGE_HAL_TWELVE_SPLIT_TRANSACTION
value|5
define|#
directive|define
name|XGE_HAL_SIXTEEN_SPLIT_TRANSACTION
value|6
define|#
directive|define
name|XGE_HAL_THIRTYTWO_SPLIT_TRANSACTION
value|7
name|int
name|mmrb_count
decl_stmt|;
define|#
directive|define
name|XGE_HAL_DEFAULT_BIOS_MMRB_COUNT
value|-1
define|#
directive|define
name|XGE_HAL_MIN_MMRB_COUNT
value|0
comment|/* 512b */
define|#
directive|define
name|XGE_HAL_MAX_MMRB_COUNT
value|3
comment|/* 4k */
name|int
name|shared_splits
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_SHARED_SPLITS
value|0
define|#
directive|define
name|XGE_HAL_MAX_SHARED_SPLITS
value|31
name|int
name|stats_refresh_time_sec
decl_stmt|;
define|#
directive|define
name|XGE_HAL_STATS_REFRESH_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_MIN_STATS_REFRESH_TIME
value|1
define|#
directive|define
name|XGE_HAL_MAX_STATS_REFRESH_TIME
value|300
name|int
name|pci_freq_mherz
decl_stmt|;
define|#
directive|define
name|XGE_HAL_PCI_FREQ_MHERZ_33
value|33
define|#
directive|define
name|XGE_HAL_PCI_FREQ_MHERZ_66
value|66
define|#
directive|define
name|XGE_HAL_PCI_FREQ_MHERZ_100
value|100
define|#
directive|define
name|XGE_HAL_PCI_FREQ_MHERZ_133
value|133
define|#
directive|define
name|XGE_HAL_PCI_FREQ_MHERZ_266
value|266
name|int
name|intr_mode
decl_stmt|;
define|#
directive|define
name|XGE_HAL_INTR_MODE_IRQLINE
value|0
define|#
directive|define
name|XGE_HAL_INTR_MODE_MSI
value|1
define|#
directive|define
name|XGE_HAL_INTR_MODE_MSIX
value|2
name|int
name|sched_timer_us
decl_stmt|;
define|#
directive|define
name|XGE_HAL_SCHED_TIMER_DISABLED
value|0
define|#
directive|define
name|XGE_HAL_SCHED_TIMER_MIN
value|0
define|#
directive|define
name|XGE_HAL_SCHED_TIMER_MAX
value|0xFFFFF
name|int
name|sched_timer_one_shot
decl_stmt|;
define|#
directive|define
name|XGE_HAL_SCHED_TIMER_ON_SHOT_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_SCHED_TIMER_ON_SHOT_ENABLE
value|1
name|xge_hal_ring_config_t
name|ring
decl_stmt|;
name|xge_hal_mac_config_t
name|mac
decl_stmt|;
name|xge_hal_fifo_config_t
name|fifo
decl_stmt|;
name|int
name|dump_on_serr
decl_stmt|;
define|#
directive|define
name|XGE_HAL_DUMP_ON_SERR_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_DUMP_ON_SERR_ENABLE
value|1
name|int
name|dump_on_eccerr
decl_stmt|;
define|#
directive|define
name|XGE_HAL_DUMP_ON_ECCERR_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_DUMP_ON_ECCERR_ENABLE
value|1
name|int
name|dump_on_parityerr
decl_stmt|;
define|#
directive|define
name|XGE_HAL_DUMP_ON_PARITYERR_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_DUMP_ON_PARITYERR_ENABLE
value|1
name|int
name|rth_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RTH_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_RTH_ENABLE
value|1
name|int
name|rth_bucket_size
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_RTH_BUCKET_SIZE
value|1
define|#
directive|define
name|XGE_HAL_MAX_RTH_BUCKET_SIZE
value|8
name|int
name|rth_spdm_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RTH_SPDM_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_RTH_SPDM_ENABLE
value|1
name|int
name|rth_spdm_use_l4
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RTH_SPDM_USE_L4
value|1
name|int
name|rxufca_intr_thres
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RXUFCA_INTR_THRES_MIN
value|1
define|#
directive|define
name|XGE_HAL_RXUFCA_INTR_THRES_MAX
value|4096
name|int
name|rxufca_lo_lim
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RXUFCA_LO_LIM_MIN
value|1
define|#
directive|define
name|XGE_HAL_RXUFCA_LO_LIM_MAX
value|16
name|int
name|rxufca_hi_lim
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RXUFCA_HI_LIM_MIN
value|1
define|#
directive|define
name|XGE_HAL_RXUFCA_HI_LIM_MAX
value|256
name|int
name|rxufca_lbolt_period
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RXUFCA_LBOLT_PERIOD_MIN
value|1
define|#
directive|define
name|XGE_HAL_RXUFCA_LBOLT_PERIOD_MAX
value|1024
name|int
name|link_valid_cnt
decl_stmt|;
define|#
directive|define
name|XGE_HAL_LINK_VALID_CNT_MIN
value|0
define|#
directive|define
name|XGE_HAL_LINK_VALID_CNT_MAX
value|127
name|int
name|link_retry_cnt
decl_stmt|;
define|#
directive|define
name|XGE_HAL_LINK_RETRY_CNT_MIN
value|0
define|#
directive|define
name|XGE_HAL_LINK_RETRY_CNT_MAX
value|127
name|int
name|link_stability_period
decl_stmt|;
define|#
directive|define
name|XGE_HAL_DEFAULT_LINK_STABILITY_PERIOD
value|2
comment|/* 1ms */
define|#
directive|define
name|XGE_HAL_MIN_LINK_STABILITY_PERIOD
value|0
comment|/* instantaneous */
define|#
directive|define
name|XGE_HAL_MAX_LINK_STABILITY_PERIOD
value|7
comment|/* 2s */
name|int
name|device_poll_millis
decl_stmt|;
define|#
directive|define
name|XGE_HAL_DEFAULT_DEVICE_POLL_MILLIS
value|1000
define|#
directive|define
name|XGE_HAL_MIN_DEVICE_POLL_MILLIS
value|1
define|#
directive|define
name|XGE_HAL_MAX_DEVICE_POLL_MILLIS
value|100000
name|int
name|no_isr_events
decl_stmt|;
define|#
directive|define
name|XGE_HAL_NO_ISR_EVENTS_MIN
value|0
define|#
directive|define
name|XGE_HAL_NO_ISR_EVENTS_MAX
value|1
name|int
name|lro_sg_size
decl_stmt|;
define|#
directive|define
name|XGE_HAL_LRO_DEFAULT_SG_SIZE
value|10
define|#
directive|define
name|XGE_HAL_LRO_MIN_SG_SIZE
value|1
define|#
directive|define
name|XGE_HAL_LRO_MAX_SG_SIZE
value|64
name|int
name|lro_frm_len
decl_stmt|;
define|#
directive|define
name|XGE_HAL_LRO_DEFAULT_FRM_LEN
value|65536
define|#
directive|define
name|XGE_HAL_LRO_MIN_FRM_LEN
value|4096
define|#
directive|define
name|XGE_HAL_LRO_MAX_FRM_LEN
value|65536
name|int
name|bimodal_interrupts
decl_stmt|;
define|#
directive|define
name|XGE_HAL_BIMODAL_INTR_MIN
value|-1
define|#
directive|define
name|XGE_HAL_BIMODAL_INTR_MAX
value|1
name|int
name|bimodal_timer_lo_us
decl_stmt|;
define|#
directive|define
name|XGE_HAL_BIMODAL_TIMER_LO_US_MIN
value|1
define|#
directive|define
name|XGE_HAL_BIMODAL_TIMER_LO_US_MAX
value|127
name|int
name|bimodal_timer_hi_us
decl_stmt|;
define|#
directive|define
name|XGE_HAL_BIMODAL_TIMER_HI_US_MIN
value|128
define|#
directive|define
name|XGE_HAL_BIMODAL_TIMER_HI_US_MAX
value|65535
name|int
name|rts_mac_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RTS_MAC_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_RTS_MAC_ENABLE
value|1
name|int
name|rts_qos_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RTS_QOS_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_RTS_QOS_ENABLE
value|1
name|int
name|rts_port_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_RTS_PORT_DISABLE
value|0
define|#
directive|define
name|XGE_HAL_RTS_PORT_ENABLE
value|1
ifdef|#
directive|ifdef
name|XGEHAL_RNIC
name|xge_hal_vp_config_t
name|vp_config
index|[
name|XGE_HAL_MAX_VIRTUAL_PATHS
index|]
decl_stmt|;
name|int
name|max_cqe_groups
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MAX_CQE_GROUPS_MIN
value|1
define|#
directive|define
name|XGE_HAL_MAX_CQE_GROUPS_MAX
value|16
name|int
name|max_num_wqe_od_groups
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MAX_NUM_OD_GROUPS_MIN
value|1
define|#
directive|define
name|XGE_HAL_MAX_NUM_OD_GROUPS_MAX
value|16
name|int
name|no_wqe_threshold
decl_stmt|;
define|#
directive|define
name|XGE_HAL_NO_WQE_THRESHOLD_MIN
value|1
define|#
directive|define
name|XGE_HAL_NO_WQE_THRESHOLD_MAX
value|16
name|int
name|refill_threshold_high
decl_stmt|;
define|#
directive|define
name|XGE_HAL_REFILL_THRESHOLD_HIGH_MIN
value|1
define|#
directive|define
name|XGE_HAL_REFILL_THRESHOLD_HIGH_MAX
value|16
name|int
name|refill_threshold_low
decl_stmt|;
define|#
directive|define
name|XGE_HAL_REFILL_THRESHOLD_LOW_MIN
value|1
define|#
directive|define
name|XGE_HAL_REFILL_THRESHOLD_LOW_MAX
value|16
name|int
name|ack_blk_limit
decl_stmt|;
define|#
directive|define
name|XGE_HAL_ACK_BLOCK_LIMIT_MIN
value|1
define|#
directive|define
name|XGE_HAL_ACK_BLOCK_LIMIT_MAX
value|16
name|int
name|poll_or_doorbell
decl_stmt|;
define|#
directive|define
name|XGE_HAL_POLL_OR_DOORBELL_POLL
value|1
define|#
directive|define
name|XGE_HAL_POLL_OR_DOORBELL_DOORBELL
value|0
endif|#
directive|endif
block|}
name|xge_hal_device_config_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_driver_config_t - HAL (layer) configuration.  * @periodic_poll_interval_millis: Interval, in milliseconds, which is used to  *                                 periodically poll HAL, i.e, invoke  *                                 xge_hal_device_poll().  *                                 Note that HAL does not maintain its own  *                                 polling context. HAL relies on ULD to  *                                 provide one.  * @queue_size_initial: Initial size of the HAL protected event queue.  *                      The queue is shared by HAL and upper-layer drivers.  *                      The queue is used to exchange and process slow-path  *                      events. See xge_hal_event_e.  * @queue_size_max: Maximum size of the HAL queue. Depending on the load,  *                  the queue may grow at run-time up to @queue_max_size.  * @tracebuf_size: Size of the trace buffer. Set it to '0' to disable.  * HAL configuration. (Note: do not confuse HAL layer with (possibly multiple)  * HAL devices.)  * Currently this structure contains just a few basic values.  * Note: Valid (min, max) range for each attribute is specified in the body of  * the structure. Please refer to the corresponding header file.  * See also: xge_hal_device_poll()  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_driver_config_t
block|{
name|int
name|queue_size_initial
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_QUEUE_SIZE_INITIAL
value|1
define|#
directive|define
name|XGE_HAL_MAX_QUEUE_SIZE_INITIAL
value|16
name|int
name|queue_size_max
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_QUEUE_SIZE_MAX
value|1
define|#
directive|define
name|XGE_HAL_MAX_QUEUE_SIZE_MAX
value|16
ifdef|#
directive|ifdef
name|XGE_TRACE_INTO_CIRCULAR_ARR
name|int
name|tracebuf_size
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_CIRCULAR_ARR
value|4096
define|#
directive|define
name|XGE_HAL_MAX_CIRCULAR_ARR
value|1048576
define|#
directive|define
name|XGE_HAL_DEF_CIRCULAR_ARR
value|XGE_OS_HOST_PAGE_SIZE
name|int
name|tracebuf_timestamp_en
decl_stmt|;
define|#
directive|define
name|XGE_HAL_MIN_TIMESTAMP_EN
value|0
define|#
directive|define
name|XGE_HAL_MAX_TIMESTAMP_EN
value|1
endif|#
directive|endif
block|}
name|xge_hal_driver_config_t
typedef|;
end_typedef

begin_comment
comment|/* ========================== PRIVATE API ================================= */
end_comment

begin_function_decl
name|xge_hal_status_e
name|__hal_device_config_check_common
parameter_list|(
name|xge_hal_device_config_t
modifier|*
name|new_config
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_config_check_xena
parameter_list|(
name|xge_hal_device_config_t
modifier|*
name|new_config
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_config_check_herc
parameter_list|(
name|xge_hal_device_config_t
modifier|*
name|new_config
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_driver_config_check
parameter_list|(
name|xge_hal_driver_config_t
modifier|*
name|new_config
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XGE_HAL_CONFIG_H */
end_comment

end_unit

