begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002-2007 Neterion, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XGE_HAL_TYPES_H
end_ifndef

begin_define
define|#
directive|define
name|XGE_HAL_TYPES_H
end_define

begin_include
include|#
directive|include
file|<dev/nxge/include/xge-os-pal.h>
end_include

begin_macro
name|__EXTERN_BEGIN_DECLS
end_macro

begin_comment
comment|/*  * BIT(loc) - set bit at offset  */
end_comment

begin_define
define|#
directive|define
name|BIT
parameter_list|(
name|loc
parameter_list|)
value|(0x8000000000000000ULL>> (loc))
end_define

begin_comment
comment|/*  * vBIT(val, loc, sz) - set bits at offset  */
end_comment

begin_define
define|#
directive|define
name|vBIT
parameter_list|(
name|val
parameter_list|,
name|loc
parameter_list|,
name|sz
parameter_list|)
value|(((u64)(val))<< (64-(loc)-(sz)))
end_define

begin_define
define|#
directive|define
name|vBIT32
parameter_list|(
name|val
parameter_list|,
name|loc
parameter_list|,
name|sz
parameter_list|)
value|(((u32)(val))<< (32-(loc)-(sz)))
end_define

begin_comment
comment|/*  * bVALx(bits, loc) - Get the value of x bits at location  */
end_comment

begin_define
define|#
directive|define
name|bVAL1
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+1)))& 0x1)
end_define

begin_define
define|#
directive|define
name|bVAL2
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+2)))& 0x3)
end_define

begin_define
define|#
directive|define
name|bVAL3
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+3)))& 0x7)
end_define

begin_define
define|#
directive|define
name|bVAL4
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+4)))& 0xF)
end_define

begin_define
define|#
directive|define
name|bVAL5
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+5)))& 0x1F)
end_define

begin_define
define|#
directive|define
name|bVAL6
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+6)))& 0x3F)
end_define

begin_define
define|#
directive|define
name|bVAL7
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+7)))& 0x7F)
end_define

begin_define
define|#
directive|define
name|bVAL8
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+8)))& 0xFF)
end_define

begin_define
define|#
directive|define
name|bVAL12
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+12)))& 0xFFF)
end_define

begin_define
define|#
directive|define
name|bVAL14
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+14)))& 0x3FFF)
end_define

begin_define
define|#
directive|define
name|bVAL16
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+16)))& 0xFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL20
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+20)))& 0xFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL22
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+22)))& 0x3FFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL24
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+24)))& 0xFFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL28
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+28)))& 0xFFFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL32
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+32)))& 0xFFFFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL36
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+36)))& 0xFFFFFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL40
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+40)))& 0xFFFFFFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL44
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+44)))& 0xFFFFFFFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL48
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+48)))& 0xFFFFFFFFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL52
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+52)))& 0xFFFFFFFFFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL56
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+56)))& 0xFFFFFFFFFFFFFF)
end_define

begin_define
define|#
directive|define
name|bVAL60
parameter_list|(
name|bits
parameter_list|,
name|loc
parameter_list|)
value|((((u64)bits)>> (64-(loc+60)))& 0xFFFFFFFFFFFFFFF)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_BASE_INF
value|100
end_define

begin_define
define|#
directive|define
name|XGE_HAL_BASE_ERR
value|200
end_define

begin_define
define|#
directive|define
name|XGE_HAL_BASE_BADCFG
value|300
end_define

begin_define
define|#
directive|define
name|XGE_HAL_ALL_FOXES
value|0xFFFFFFFFFFFFFFFFULL
end_define

begin_comment
comment|/**  * enum xge_hal_status_e - HAL return codes.  * @XGE_HAL_OK: Success.  * @XGE_HAL_FAIL: Failure.  * @XGE_HAL_COMPLETIONS_REMAIN: There are more completions on a channel.  *      (specific to polling mode completion processing).  * @XGE_HAL_INF_NO_MORE_COMPLETED_DESCRIPTORS: No more completed  * descriptors. See xge_hal_fifo_dtr_next_completed().  * @XGE_HAL_INF_OUT_OF_DESCRIPTORS: Out of descriptors. Channel  * descriptors  *           are reserved (via xge_hal_fifo_dtr_reserve(),  *           xge_hal_fifo_dtr_reserve())  *           and not yet freed (via xge_hal_fifo_dtr_free(),  *           xge_hal_ring_dtr_free()).  * @XGE_HAL_INF_CHANNEL_IS_NOT_READY: Channel is not ready for  * operation.  * @XGE_HAL_INF_MEM_STROBE_CMD_EXECUTING: Indicates that host needs to  * poll until PIO is executed.  * @XGE_HAL_INF_STATS_IS_NOT_READY: Cannot retrieve statistics because  * HAL and/or device is not yet initialized.  * @XGE_HAL_INF_NO_MORE_FREED_DESCRIPTORS: No descriptors left to  * reserve. Internal use only.  * @XGE_HAL_INF_IRQ_POLLING_CONTINUE: Returned by the ULD channel  * callback when instructed to exit descriptor processing loop  * prematurely. Typical usage: polling mode of processing completed  * descriptors.  *           Upon getting LRO_ISED, ll driver shall  *           1) initialise lro struct with mbuf if sg_num == 1.  *           2) else it will update m_data_ptr_of_mbuf to tcp pointer and  *           append the new mbuf to the tail of mbuf chain in lro struct.  *  * @XGE_HAL_INF_LRO_BEGIN: Returned by ULD LRO module, when new LRO is  * being initiated.  * @XGE_HAL_INF_LRO_CONT: Returned by ULD LRO module, when new frame  * is appended at the end of existing LRO.  * @XGE_HAL_INF_LRO_UNCAPABLE: Returned by ULD LRO module, when new  * frame is not LRO capable.  * @XGE_HAL_INF_LRO_END_1: Returned by ULD LRO module, when new frame  * triggers LRO flush.  * @XGE_HAL_INF_LRO_END_2: Returned by ULD LRO module, when new  * frame triggers LRO flush. Lro frame should be flushed first then  * new frame should be flushed next.  * @XGE_HAL_INF_LRO_END_3: Returned by ULD LRO module, when new  * frame triggers close of current LRO session and opening of new LRO session  * with the frame.  * @XGE_HAL_INF_LRO_SESSIONS_XCDED: Returned by ULD LRO module, when no  * more LRO sessions can be added.  * @XGE_HAL_INF_NOT_ENOUGH_HW_CQES: TBD  * @XGE_HAL_ERR_DRIVER_NOT_INITIALIZED: HAL is not initialized.  * @XGE_HAL_ERR_OUT_OF_MEMORY: Out of memory (example, when and  * allocating descriptors).  * @XGE_HAL_ERR_CHANNEL_NOT_FOUND: xge_hal_channel_open will return this  * error if corresponding channel is not configured.  * @XGE_HAL_ERR_WRONG_IRQ: Returned by HAL's ISR when the latter is  * invoked not because of the Xframe-generated interrupt.  * @XGE_HAL_ERR_OUT_OF_MAC_ADDRESSES: Returned when user tries to  * configure more than XGE_HAL_MAX_MAC_ADDRESSES  mac addresses.  * @XGE_HAL_ERR_BAD_DEVICE_ID: Unknown device PCI ID.  * @XGE_HAL_ERR_OUT_ALIGNED_FRAGS: Too many unaligned fragments  * in a scatter-gather list.  * @XGE_HAL_ERR_DEVICE_NOT_INITIALIZED: Device is not initialized.  * Typically means wrong sequence of API calls.  * @XGE_HAL_ERR_SWAPPER_CTRL: Error during device initialization: failed  * to set Xframe byte swapper in accordnace with the host  * endian-ness.  * @XGE_HAL_ERR_DEVICE_IS_NOT_QUIESCENT: Failed to restore the device to  * a "quiescent" state.  * @XGE_HAL_ERR_INVALID_MTU_SIZE: Returned when MTU size specified by  * caller is not in the (64, 9600) range.  * @XGE_HAL_ERR_OUT_OF_MAPPING: Failed to map DMA-able memory.  * @XGE_HAL_ERR_BAD_SUBSYSTEM_ID: Bad PCI subsystem ID. (Currently we  * check for zero/non-zero only.)  * @XGE_HAL_ERR_INVALID_BAR_ID: Invalid BAR ID. Xframe supports two Base  * Address Register Spaces: BAR0 (id=0) and BAR1 (id=1).  * @XGE_HAL_ERR_INVALID_OFFSET: Invalid offset. Example, attempt to read  * register value (with offset) outside of the BAR0 space.  * @XGE_HAL_ERR_INVALID_DEVICE: Invalid device. The HAL device handle  * (passed by ULD) is invalid.  * @XGE_HAL_ERR_OUT_OF_SPACE: Out-of-provided-buffer-space. Returned by  * management "get" routines when the retrieved information does  * not fit into the provided buffer.  * @XGE_HAL_ERR_INVALID_VALUE_BIT_SIZE: Invalid bit size.  * @XGE_HAL_ERR_VERSION_CONFLICT: Upper-layer driver and HAL (versions)  * are not compatible.  * @XGE_HAL_ERR_INVALID_MAC_ADDRESS: Invalid MAC address.  * @XGE_HAL_ERR_SPDM_NOT_ENABLED: SPDM support is not enabled.  * @XGE_HAL_ERR_SPDM_TABLE_FULL: SPDM table is full.  * @XGE_HAL_ERR_SPDM_INVALID_ENTRY: Invalid SPDM entry.  * @XGE_HAL_ERR_SPDM_ENTRY_NOT_FOUND: Unable to locate the entry in the  * SPDM table.  * @XGE_HAL_ERR_SPDM_TABLE_DATA_INCONSISTENT: Local SPDM table is not in  * synch ith the actual one.  * @XGE_HAL_ERR_INVALID_PCI_INFO: Invalid or unrecognized PCI frequency,  * and or width, and or mode (Xframe-II only, see UG on PCI_INFO register).  * @XGE_HAL_ERR_CRITICAL: Critical error. Returned by HAL APIs  * (including xge_hal_device_handle_tcode()) on: ECC, parity, SERR.  * Also returned when PIO read does not go through ("all-foxes")  * because of "slot-freeze".  * @XGE_HAL_ERR_RESET_FAILED: Failed to soft-reset the device.  * Returned by xge_hal_device_reset(). One circumstance when it could  * happen: slot freeze by the system (see @XGE_HAL_ERR_CRITICAL).  * @XGE_HAL_ERR_TOO_MANY: This error is returned if there were laready  * maximum number of sessions or queues allocated  * @XGE_HAL_ERR_PKT_DROP: TBD  * @XGE_HAL_BADCFG_TX_URANGE_A: Invalid Tx link utilization range A. See  * the structure xge_hal_tti_config_t{} for valid values.  * @XGE_HAL_BADCFG_TX_UFC_A: Invalid frame count for Tx link utilization  * range A. See the structure xge_hal_tti_config_t{} for valid values.  * @XGE_HAL_BADCFG_TX_URANGE_B: Invalid Tx link utilization range B. See  * the structure xge_hal_tti_config_t{} for valid values.  * @XGE_HAL_BADCFG_TX_UFC_B: Invalid frame count for Tx link utilization  * range B. See the strucuture  xge_hal_tti_config_t{} for valid values.  * @XGE_HAL_BADCFG_TX_URANGE_C: Invalid Tx link utilization range C. See  * the structure  xge_hal_tti_config_t{} for valid values.  * @XGE_HAL_BADCFG_TX_UFC_C: Invalid frame count for Tx link utilization  * range C. See the structure xge_hal_tti_config_t{} for valid values.  * @XGE_HAL_BADCFG_TX_UFC_D: Invalid frame count for Tx link utilization  * range D. See the structure  xge_hal_tti_config_t{} for valid values.  * @XGE_HAL_BADCFG_TX_TIMER_VAL: Invalid Tx timer value. See the  * structure xge_hal_tti_config_t{} for valid values.  * @XGE_HAL_BADCFG_TX_TIMER_CI_EN: Invalid Tx timer continuous interrupt  * enable. See the structure xge_hal_tti_config_t{} for valid values.  * @XGE_HAL_BADCFG_RX_URANGE_A: Invalid Rx link utilization range A. See  * the structure xge_hal_rti_config_t{} for valid values.  * @XGE_HAL_BADCFG_RX_UFC_A: Invalid frame count for Rx link utilization  * range A. See the structure xge_hal_rti_config_t{} for valid values.  * @XGE_HAL_BADCFG_RX_URANGE_B: Invalid Rx link utilization range B. See  * the structure xge_hal_rti_config_t{} for valid values.  * @XGE_HAL_BADCFG_RX_UFC_B: Invalid frame count for Rx link utilization  * range B. See the structure xge_hal_rti_config_t{} for valid values.  * @XGE_HAL_BADCFG_RX_URANGE_C: Invalid Rx link utilization range C. See  * the structure xge_hal_rti_config_t{} for valid values.  * @XGE_HAL_BADCFG_RX_UFC_C: Invalid frame count for Rx link utilization  * range C. See the structure xge_hal_rti_config_t{} for valid values.  * @XGE_HAL_BADCFG_RX_UFC_D: Invalid frame count for Rx link utilization  * range D. See the structure xge_hal_rti_config_t{} for valid values.  * @XGE_HAL_BADCFG_RX_TIMER_VAL:  Invalid Rx timer value. See the  * structure xge_hal_rti_config_t{} for valid values.  * @XGE_HAL_BADCFG_FIFO_QUEUE_INITIAL_LENGTH: Invalid initial fifo queue  * length. See the structure xge_hal_fifo_queue_t for valid values.  * @XGE_HAL_BADCFG_FIFO_QUEUE_MAX_LENGTH: Invalid fifo queue max length.  * See the structure xge_hal_fifo_queue_t for valid values.  * @XGE_HAL_BADCFG_FIFO_QUEUE_INTR: Invalid fifo queue interrupt mode.  * See the structure xge_hal_fifo_queue_t for valid values.  * @XGE_HAL_BADCFG_RING_QUEUE_INITIAL_BLOCKS: Invalid Initial number of  * RxD blocks for the ring. See the structure xge_hal_ring_queue_t for  * valid values.  * @XGE_HAL_BADCFG_RING_QUEUE_MAX_BLOCKS: Invalid maximum number of RxD  * blocks for the ring. See the structure xge_hal_ring_queue_t for  * valid values.  * @XGE_HAL_BADCFG_RING_QUEUE_BUFFER_MODE: Invalid ring buffer mode. See  * the structure xge_hal_ring_queue_t for valid values.  * @XGE_HAL_BADCFG_RING_QUEUE_SIZE: Invalid ring queue size. See the  * structure xge_hal_ring_queue_t for valid values.  * @XGE_HAL_BADCFG_BACKOFF_INTERVAL_US: Invalid backoff timer interval  * for the ring. See the structure xge_hal_ring_queue_t for valid values.  * @XGE_HAL_BADCFG_MAX_FRM_LEN: Invalid ring max frame length. See the  * structure xge_hal_ring_queue_t for valid values.  * @XGE_HAL_BADCFG_RING_PRIORITY: Invalid ring priority. See the  * structure xge_hal_ring_queue_t for valid values.  * @XGE_HAL_BADCFG_TMAC_UTIL_PERIOD: Invalid tmac util period. See the  * structure xge_hal_mac_config_t{} for valid values.  * @XGE_HAL_BADCFG_RMAC_UTIL_PERIOD: Invalid rmac util period. See the  * structure xge_hal_mac_config_t{} for valid values.  * @XGE_HAL_BADCFG_RMAC_BCAST_EN: Invalid rmac brodcast enable. See the  * structure xge_hal_mac_config_t{} for valid values.  * @XGE_HAL_BADCFG_RMAC_HIGH_PTIME: Invalid rmac pause time. See the  * structure xge_hal_mac_config_t{} for valid values.  * @XGE_HAL_BADCFG_MC_PAUSE_THRESHOLD_Q0Q3: Invalid threshold for pause  * frame generation for queues 0 through 3. See the structure  * xge_hal_mac_config_t{} for valid values.  * @XGE_HAL_BADCFG_MC_PAUSE_THRESHOLD_Q4Q7:Invalid threshold for pause  * frame generation for queues 4 through 7. See the structure  * xge_hal_mac_config_t{} for valid values.  * @XGE_HAL_BADCFG_FIFO_FRAGS: Invalid fifo max fragments length. See  * the structure xge_hal_fifo_config_t{} for valid values.  * @XGE_HAL_BADCFG_FIFO_RESERVE_THRESHOLD: Invalid fifo reserve  * threshold. See the structure xge_hal_fifo_config_t{} for valid values.  * @XGE_HAL_BADCFG_FIFO_MEMBLOCK_SIZE: Invalid fifo descriptors memblock  * size. See the structure xge_hal_fifo_config_t{} for valid values.  * @XGE_HAL_BADCFG_RING_MEMBLOCK_SIZE: Invalid ring descriptors memblock  * size. See the structure xge_hal_ring_config_t{} for valid values.  * @XGE_HAL_BADCFG_MAX_MTU: Invalid max mtu for the device. See the  * structure xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_ISR_POLLING_CNT: Invalid isr polling count. See the  * structure xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_LATENCY_TIMER: Invalid Latency timer. See the  * structure xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_MAX_SPLITS_TRANS: Invalid maximum  number of pci-x  * split transactions. See the structure xge_hal_device_config_t{} for valid  * values.  * @XGE_HAL_BADCFG_MMRB_COUNT: Invalid mmrb count.  See the structure  * xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_SHARED_SPLITS: Invalid number of outstanding split  * transactions that is shared by Tx and Rx requests. See the structure  * xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_STATS_REFRESH_TIME: Invalid time interval for  * automatic statistics transfer to the host. See the structure  * xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_PCI_FREQ_MHERZ:  Invalid pci clock frequency. See the  * structure xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_PCI_MODE: Invalid pci mode. See the structure  * xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_INTR_MODE: Invalid interrupt mode. See the structure  * xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_SCHED_TIMER_US: Invalid scheduled timer interval to  * generate interrupt. See the structure  xge_hal_device_config_t{}  * for valid values.  * @XGE_HAL_BADCFG_SCHED_TIMER_ON_SHOT: Invalid scheduled timer one  * shot. See the structure xge_hal_device_config_t{} for valid values.  * @XGE_HAL_BADCFG_QUEUE_SIZE_INITIAL: Invalid driver queue initial  * size. See the structure xge_hal_driver_config_t{} for valid values.  * @XGE_HAL_BADCFG_QUEUE_SIZE_MAX: Invalid driver queue max size.  See  * the structure xge_hal_driver_config_t{} for valid values.  * @XGE_HAL_BADCFG_RING_RTH_EN: Invalid value of RTH-enable. See  * the structure xge_hal_ring_queue_t for valid values.  * @XGE_HAL_BADCFG_RING_INDICATE_MAX_PKTS: Invalid value configured for  * indicate_max_pkts variable.  * @XGE_HAL_BADCFG_TX_TIMER_AC_EN: Invalid value for Tx timer  * auto-cancel. See xge_hal_tti_config_t{}.  * @XGE_HAL_BADCFG_RX_TIMER_AC_EN: Invalid value for Rx timer  * auto-cancel. See xge_hal_rti_config_t{}.  * @XGE_HAL_BADCFG_RXUFCA_INTR_THRES: TODO  * @XGE_HAL_BADCFG_RXUFCA_LO_LIM: TODO  * @XGE_HAL_BADCFG_RXUFCA_HI_LIM: TODO  * @XGE_HAL_BADCFG_RXUFCA_LBOLT_PERIOD: TODO  * @XGE_HAL_BADCFG_TRACEBUF_SIZE: Bad configuration: the size of the circular  * (in memory) trace buffer either too large or too small. See the  * the corresponding header file or README for the acceptable range.  * @XGE_HAL_BADCFG_LINK_VALID_CNT: Bad configuration: the link-valid  * counter cannot have the specified value. Note that the link-valid  * counting is done only at device-open time, to determine with the  * specified certainty that the link is up. See the  * the corresponding header file or README for the acceptable range.  * See also @XGE_HAL_BADCFG_LINK_RETRY_CNT.  * @XGE_HAL_BADCFG_LINK_RETRY_CNT: Bad configuration: the specified  * link-up retry count is out of the valid range. Note that the link-up  * retry counting is done only at device-open time.  * See also xge_hal_device_config_t{}.  * @XGE_HAL_BADCFG_LINK_STABILITY_PERIOD: Invalid link stability period.  * @XGE_HAL_BADCFG_DEVICE_POLL_MILLIS: Invalid device poll interval.  * @XGE_HAL_BADCFG_RMAC_PAUSE_GEN_EN: TBD  * @XGE_HAL_BADCFG_RMAC_PAUSE_RCV_EN: TBD  * @XGE_HAL_BADCFG_MEDIA: TBD  * @XGE_HAL_BADCFG_NO_ISR_EVENTS: TBD  * See the structure xge_hal_device_config_t{} for valid values.  * @XGE_HAL_EOF_TRACE_BUF: End of the circular (in memory) trace buffer.  * Returned by xge_hal_mgmt_trace_read(), when user tries to read the trace  * past the buffer limits. Used to enable user to load the trace in two  * or more reads.  * @XGE_HAL_BADCFG_RING_RTS_MAC_EN: Invalid value of RTS_MAC_EN enable. See  * the structure xge_hal_ring_queue_t for valid values.  * @XGE_HAL_BADCFG_LRO_SG_SIZE : Invalid value of LRO scatter gatter size.  * See the structure xge_hal_device_config_t for valid values.  * @XGE_HAL_BADCFG_LRO_FRM_LEN : Invalid value of LRO frame length.  * See the structure xge_hal_device_config_t for valid values.  * @XGE_HAL_BADCFG_WQE_NUM_ODS: TBD  * @XGE_HAL_BADCFG_BIMODAL_INTR: Invalid value to configure bimodal interrupts  * Enumerates status and error codes returned by HAL public  * API functions.  * @XGE_HAL_BADCFG_BIMODAL_TIMER_LO_US: TBD  * @XGE_HAL_BADCFG_BIMODAL_TIMER_HI_US: TBD  * @XGE_HAL_BADCFG_BIMODAL_XENA_NOT_ALLOWED: TBD  * @XGE_HAL_BADCFG_RTS_QOS_EN: TBD  * @XGE_HAL_BADCFG_FIFO_QUEUE_INTR_VECTOR: TBD  * @XGE_HAL_BADCFG_RING_QUEUE_INTR_VECTOR: TBD  * @XGE_HAL_BADCFG_RTS_PORT_EN: TBD  * @XGE_HAL_BADCFG_RING_RTS_PORT_EN: TBD  *  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_status_e
block|{
name|XGE_HAL_OK
init|=
literal|0
block|,
name|XGE_HAL_FAIL
init|=
literal|1
block|,
name|XGE_HAL_COMPLETIONS_REMAIN
init|=
literal|2
block|,
name|XGE_HAL_INF_NO_MORE_COMPLETED_DESCRIPTORS
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|1
block|,
name|XGE_HAL_INF_OUT_OF_DESCRIPTORS
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|2
block|,
name|XGE_HAL_INF_CHANNEL_IS_NOT_READY
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|3
block|,
name|XGE_HAL_INF_MEM_STROBE_CMD_EXECUTING
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|4
block|,
name|XGE_HAL_INF_STATS_IS_NOT_READY
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|5
block|,
name|XGE_HAL_INF_NO_MORE_FREED_DESCRIPTORS
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|6
block|,
name|XGE_HAL_INF_IRQ_POLLING_CONTINUE
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|7
block|,
name|XGE_HAL_INF_LRO_BEGIN
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|8
block|,
name|XGE_HAL_INF_LRO_CONT
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|9
block|,
name|XGE_HAL_INF_LRO_UNCAPABLE
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|10
block|,
name|XGE_HAL_INF_LRO_END_1
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|11
block|,
name|XGE_HAL_INF_LRO_END_2
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|12
block|,
name|XGE_HAL_INF_LRO_END_3
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|13
block|,
name|XGE_HAL_INF_LRO_SESSIONS_XCDED
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|14
block|,
name|XGE_HAL_INF_NOT_ENOUGH_HW_CQES
init|=
name|XGE_HAL_BASE_INF
operator|+
literal|15
block|,
name|XGE_HAL_ERR_DRIVER_NOT_INITIALIZED
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|1
block|,
name|XGE_HAL_ERR_OUT_OF_MEMORY
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|4
block|,
name|XGE_HAL_ERR_CHANNEL_NOT_FOUND
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|5
block|,
name|XGE_HAL_ERR_WRONG_IRQ
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|6
block|,
name|XGE_HAL_ERR_OUT_OF_MAC_ADDRESSES
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|7
block|,
name|XGE_HAL_ERR_SWAPPER_CTRL
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|8
block|,
name|XGE_HAL_ERR_DEVICE_IS_NOT_QUIESCENT
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|9
block|,
name|XGE_HAL_ERR_INVALID_MTU_SIZE
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|10
block|,
name|XGE_HAL_ERR_OUT_OF_MAPPING
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|11
block|,
name|XGE_HAL_ERR_BAD_SUBSYSTEM_ID
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|12
block|,
name|XGE_HAL_ERR_INVALID_BAR_ID
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|13
block|,
name|XGE_HAL_ERR_INVALID_OFFSET
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|14
block|,
name|XGE_HAL_ERR_INVALID_DEVICE
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|15
block|,
name|XGE_HAL_ERR_OUT_OF_SPACE
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|16
block|,
name|XGE_HAL_ERR_INVALID_VALUE_BIT_SIZE
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|17
block|,
name|XGE_HAL_ERR_VERSION_CONFLICT
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|18
block|,
name|XGE_HAL_ERR_INVALID_MAC_ADDRESS
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|19
block|,
name|XGE_HAL_ERR_BAD_DEVICE_ID
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|20
block|,
name|XGE_HAL_ERR_OUT_ALIGNED_FRAGS
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|21
block|,
name|XGE_HAL_ERR_DEVICE_NOT_INITIALIZED
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|22
block|,
name|XGE_HAL_ERR_SPDM_NOT_ENABLED
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|23
block|,
name|XGE_HAL_ERR_SPDM_TABLE_FULL
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|24
block|,
name|XGE_HAL_ERR_SPDM_INVALID_ENTRY
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|25
block|,
name|XGE_HAL_ERR_SPDM_ENTRY_NOT_FOUND
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|26
block|,
name|XGE_HAL_ERR_SPDM_TABLE_DATA_INCONSISTENT
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|27
block|,
name|XGE_HAL_ERR_INVALID_PCI_INFO
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|28
block|,
name|XGE_HAL_ERR_CRITICAL
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|29
block|,
name|XGE_HAL_ERR_RESET_FAILED
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|30
block|,
name|XGE_HAL_ERR_TOO_MANY
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|32
block|,
name|XGE_HAL_ERR_PKT_DROP
init|=
name|XGE_HAL_BASE_ERR
operator|+
literal|33
block|,
name|XGE_HAL_BADCFG_TX_URANGE_A
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|1
block|,
name|XGE_HAL_BADCFG_TX_UFC_A
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|2
block|,
name|XGE_HAL_BADCFG_TX_URANGE_B
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|3
block|,
name|XGE_HAL_BADCFG_TX_UFC_B
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|4
block|,
name|XGE_HAL_BADCFG_TX_URANGE_C
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|5
block|,
name|XGE_HAL_BADCFG_TX_UFC_C
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|6
block|,
name|XGE_HAL_BADCFG_TX_UFC_D
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|8
block|,
name|XGE_HAL_BADCFG_TX_TIMER_VAL
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|9
block|,
name|XGE_HAL_BADCFG_TX_TIMER_CI_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|10
block|,
name|XGE_HAL_BADCFG_RX_URANGE_A
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|11
block|,
name|XGE_HAL_BADCFG_RX_UFC_A
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|12
block|,
name|XGE_HAL_BADCFG_RX_URANGE_B
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|13
block|,
name|XGE_HAL_BADCFG_RX_UFC_B
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|14
block|,
name|XGE_HAL_BADCFG_RX_URANGE_C
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|15
block|,
name|XGE_HAL_BADCFG_RX_UFC_C
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|16
block|,
name|XGE_HAL_BADCFG_RX_UFC_D
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|17
block|,
name|XGE_HAL_BADCFG_RX_TIMER_VAL
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|18
block|,
name|XGE_HAL_BADCFG_FIFO_QUEUE_INITIAL_LENGTH
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|19
block|,
name|XGE_HAL_BADCFG_FIFO_QUEUE_MAX_LENGTH
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|20
block|,
name|XGE_HAL_BADCFG_FIFO_QUEUE_INTR
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|21
block|,
name|XGE_HAL_BADCFG_RING_QUEUE_INITIAL_BLOCKS
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|22
block|,
name|XGE_HAL_BADCFG_RING_QUEUE_MAX_BLOCKS
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|23
block|,
name|XGE_HAL_BADCFG_RING_QUEUE_BUFFER_MODE
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|24
block|,
name|XGE_HAL_BADCFG_RING_QUEUE_SIZE
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|25
block|,
name|XGE_HAL_BADCFG_BACKOFF_INTERVAL_US
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|26
block|,
name|XGE_HAL_BADCFG_MAX_FRM_LEN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|27
block|,
name|XGE_HAL_BADCFG_RING_PRIORITY
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|28
block|,
name|XGE_HAL_BADCFG_TMAC_UTIL_PERIOD
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|29
block|,
name|XGE_HAL_BADCFG_RMAC_UTIL_PERIOD
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|30
block|,
name|XGE_HAL_BADCFG_RMAC_BCAST_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|31
block|,
name|XGE_HAL_BADCFG_RMAC_HIGH_PTIME
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|32
block|,
name|XGE_HAL_BADCFG_MC_PAUSE_THRESHOLD_Q0Q3
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|33
block|,
name|XGE_HAL_BADCFG_MC_PAUSE_THRESHOLD_Q4Q7
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|34
block|,
name|XGE_HAL_BADCFG_FIFO_FRAGS
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|35
block|,
name|XGE_HAL_BADCFG_FIFO_RESERVE_THRESHOLD
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|37
block|,
name|XGE_HAL_BADCFG_FIFO_MEMBLOCK_SIZE
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|38
block|,
name|XGE_HAL_BADCFG_RING_MEMBLOCK_SIZE
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|39
block|,
name|XGE_HAL_BADCFG_MAX_MTU
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|40
block|,
name|XGE_HAL_BADCFG_ISR_POLLING_CNT
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|41
block|,
name|XGE_HAL_BADCFG_LATENCY_TIMER
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|42
block|,
name|XGE_HAL_BADCFG_MAX_SPLITS_TRANS
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|43
block|,
name|XGE_HAL_BADCFG_MMRB_COUNT
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|44
block|,
name|XGE_HAL_BADCFG_SHARED_SPLITS
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|45
block|,
name|XGE_HAL_BADCFG_STATS_REFRESH_TIME
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|46
block|,
name|XGE_HAL_BADCFG_PCI_FREQ_MHERZ
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|47
block|,
name|XGE_HAL_BADCFG_PCI_MODE
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|48
block|,
name|XGE_HAL_BADCFG_INTR_MODE
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|49
block|,
name|XGE_HAL_BADCFG_SCHED_TIMER_US
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|50
block|,
name|XGE_HAL_BADCFG_SCHED_TIMER_ON_SHOT
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|51
block|,
name|XGE_HAL_BADCFG_QUEUE_SIZE_INITIAL
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|52
block|,
name|XGE_HAL_BADCFG_QUEUE_SIZE_MAX
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|53
block|,
name|XGE_HAL_BADCFG_RING_RTH_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|54
block|,
name|XGE_HAL_BADCFG_RING_INDICATE_MAX_PKTS
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|55
block|,
name|XGE_HAL_BADCFG_TX_TIMER_AC_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|56
block|,
name|XGE_HAL_BADCFG_RX_TIMER_AC_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|57
block|,
name|XGE_HAL_BADCFG_RXUFCA_INTR_THRES
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|58
block|,
name|XGE_HAL_BADCFG_RXUFCA_LO_LIM
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|59
block|,
name|XGE_HAL_BADCFG_RXUFCA_HI_LIM
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|60
block|,
name|XGE_HAL_BADCFG_RXUFCA_LBOLT_PERIOD
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|61
block|,
name|XGE_HAL_BADCFG_TRACEBUF_SIZE
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|62
block|,
name|XGE_HAL_BADCFG_LINK_VALID_CNT
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|63
block|,
name|XGE_HAL_BADCFG_LINK_RETRY_CNT
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|64
block|,
name|XGE_HAL_BADCFG_LINK_STABILITY_PERIOD
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|65
block|,
name|XGE_HAL_BADCFG_DEVICE_POLL_MILLIS
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|66
block|,
name|XGE_HAL_BADCFG_RMAC_PAUSE_GEN_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|67
block|,
name|XGE_HAL_BADCFG_RMAC_PAUSE_RCV_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|68
block|,
name|XGE_HAL_BADCFG_MEDIA
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|69
block|,
name|XGE_HAL_BADCFG_NO_ISR_EVENTS
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|70
block|,
name|XGE_HAL_BADCFG_RING_RTS_MAC_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|71
block|,
name|XGE_HAL_BADCFG_LRO_SG_SIZE
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|72
block|,
name|XGE_HAL_BADCFG_LRO_FRM_LEN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|73
block|,
name|XGE_HAL_BADCFG_WQE_NUM_ODS
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|74
block|,
name|XGE_HAL_BADCFG_BIMODAL_INTR
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|75
block|,
name|XGE_HAL_BADCFG_BIMODAL_TIMER_LO_US
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|76
block|,
name|XGE_HAL_BADCFG_BIMODAL_TIMER_HI_US
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|77
block|,
name|XGE_HAL_BADCFG_BIMODAL_XENA_NOT_ALLOWED
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|78
block|,
name|XGE_HAL_BADCFG_RTS_QOS_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|79
block|,
name|XGE_HAL_BADCFG_FIFO_QUEUE_INTR_VECTOR
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|80
block|,
name|XGE_HAL_BADCFG_RING_QUEUE_INTR_VECTOR
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|81
block|,
name|XGE_HAL_BADCFG_RTS_PORT_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|82
block|,
name|XGE_HAL_BADCFG_RING_RTS_PORT_EN
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|83
block|,
name|XGE_HAL_BADCFG_TRACEBUF_TIMESTAMP
init|=
name|XGE_HAL_BASE_BADCFG
operator|+
literal|84
block|,
name|XGE_HAL_EOF_TRACE_BUF
init|=
operator|-
literal|1
block|}
name|xge_hal_status_e
typedef|;
end_typedef

begin_define
define|#
directive|define
name|XGE_HAL_ETH_ALEN
value|6
end_define

begin_typedef
typedef|typedef
name|u8
name|macaddr_t
index|[
name|XGE_HAL_ETH_ALEN
index|]
typedef|;
end_typedef

begin_define
define|#
directive|define
name|XGE_HAL_PCI_XFRAME_CONFIG_SPACE_SIZE
value|0x100
end_define

begin_comment
comment|/* frames sizes */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_HEADER_ETHERNET_II_802_3_SIZE
value|14
end_define

begin_define
define|#
directive|define
name|XGE_HAL_HEADER_802_2_SIZE
value|3
end_define

begin_define
define|#
directive|define
name|XGE_HAL_HEADER_SNAP_SIZE
value|5
end_define

begin_define
define|#
directive|define
name|XGE_HAL_HEADER_VLAN_SIZE
value|4
end_define

begin_define
define|#
directive|define
name|XGE_HAL_MAC_HEADER_MAX_SIZE
define|\
value|(XGE_HAL_HEADER_ETHERNET_II_802_3_SIZE + \ 	         XGE_HAL_HEADER_802_2_SIZE + \ 	         XGE_HAL_HEADER_SNAP_SIZE)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TCPIP_HEADER_MAX_SIZE
value|(64 + 64)
end_define

begin_comment
comment|/* 32bit alignments */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_HEADER_ETHERNET_II_802_3_ALIGN
value|2
end_define

begin_define
define|#
directive|define
name|XGE_HAL_HEADER_802_2_SNAP_ALIGN
value|2
end_define

begin_define
define|#
directive|define
name|XGE_HAL_HEADER_802_2_ALIGN
value|3
end_define

begin_define
define|#
directive|define
name|XGE_HAL_HEADER_SNAP_ALIGN
value|1
end_define

begin_define
define|#
directive|define
name|XGE_HAL_L3_CKSUM_OK
value|0xFFFF
end_define

begin_define
define|#
directive|define
name|XGE_HAL_L4_CKSUM_OK
value|0xFFFF
end_define

begin_define
define|#
directive|define
name|XGE_HAL_MIN_MTU
value|46
end_define

begin_define
define|#
directive|define
name|XGE_HAL_MAX_MTU
value|9600
end_define

begin_define
define|#
directive|define
name|XGE_HAL_DEFAULT_MTU
value|1500
end_define

begin_define
define|#
directive|define
name|XGE_HAL_SEGEMENT_OFFLOAD_MAX_SIZE
value|81920
end_define

begin_define
define|#
directive|define
name|XGE_HAL_PCISIZE_XENA
value|26
end_define

begin_comment
comment|/* multiples of dword */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_PCISIZE_HERC
value|64
end_define

begin_comment
comment|/* multiples of dword */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_MAX_MSIX_MESSAGES
value|64
end_define

begin_define
define|#
directive|define
name|XGE_HAL_MAX_MSIX_MESSAGES_WITH_ADDR
value|XGE_HAL_MAX_MSIX_MESSAGES * 2
end_define

begin_comment
comment|/*  Highest level interrupt blocks */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_TX_PIC_INTR
value|(0x0001<<0)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TX_DMA_INTR
value|(0x0001<<1)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TX_MAC_INTR
value|(0x0001<<2)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TX_XGXS_INTR
value|(0x0001<<3)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TX_TRAFFIC_INTR
value|(0x0001<<4)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_RX_PIC_INTR
value|(0x0001<<5)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_RX_DMA_INTR
value|(0x0001<<6)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_RX_MAC_INTR
value|(0x0001<<7)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_RX_XGXS_INTR
value|(0x0001<<8)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_RX_TRAFFIC_INTR
value|(0x0001<<9)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_MC_INTR
value|(0x0001<<10)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_SCHED_INTR
value|(0x0001<<11)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_ALL_INTRS
value|(XGE_HAL_TX_PIC_INTR   | \ 	                           XGE_HAL_TX_DMA_INTR     | \ 	                           XGE_HAL_TX_MAC_INTR     | \ 	                           XGE_HAL_TX_XGXS_INTR    | \ 	                           XGE_HAL_TX_TRAFFIC_INTR | \ 	                           XGE_HAL_RX_PIC_INTR     | \ 	                           XGE_HAL_RX_DMA_INTR     | \ 	                           XGE_HAL_RX_MAC_INTR     | \ 	                           XGE_HAL_RX_XGXS_INTR    | \ 	                           XGE_HAL_RX_TRAFFIC_INTR | \ 	                           XGE_HAL_MC_INTR         | \ 	               XGE_HAL_SCHED_INTR)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_GEN_MASK_INTR
value|(0x0001<<12)
end_define

begin_comment
comment|/* Interrupt masks for the general interrupt mask register */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_ALL_INTRS_DIS
value|0xFFFFFFFFFFFFFFFFULL
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXPIC_INT_M
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXDMA_INT_M
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXMAC_INT_M
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXXGXS_INT_M
value|BIT(3)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXTRAFFIC_INT_M
value|BIT(8)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_PIC_RX_INT_M
value|BIT(32)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_RXDMA_INT_M
value|BIT(33)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_RXMAC_INT_M
value|BIT(34)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_MC_INT_M
value|BIT(35)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_RXXGXS_INT_M
value|BIT(36)
end_define

begin_define
define|#
directive|define
name|XGE_HAL_RXTRAFFIC_INT_M
value|BIT(40)
end_define

begin_comment
comment|/* MSI level Interrupts */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_MAX_MSIX_VECTORS
value|(16)
end_define

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_ipv4
block|{
name|u32
name|addr
decl_stmt|;
block|}
name|xge_hal_ipv4
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_ipv6
block|{
name|u64
name|addr
index|[
literal|2
index|]
decl_stmt|;
block|}
name|xge_hal_ipv6
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|xge_hal_ipaddr_t
block|{
name|xge_hal_ipv4
name|ipv4
decl_stmt|;
name|xge_hal_ipv6
name|ipv6
decl_stmt|;
block|}
name|xge_hal_ipaddr_t
typedef|;
end_typedef

begin_comment
comment|/* DMA level Interrupts */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_TXDMA_PFC_INT_M
value|BIT(0)
end_define

begin_comment
comment|/*  PFC block interrupts */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_PFC_MISC_ERR_1
value|BIT(0)
end_define

begin_comment
comment|/* Interrupt to indicate FIFO full */
end_comment

begin_comment
comment|/* basic handles */
end_comment

begin_typedef
typedef|typedef
name|void
modifier|*
name|xge_hal_device_h
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
modifier|*
name|xge_hal_dtr_h
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
modifier|*
name|xge_hal_channel_h
typedef|;
end_typedef

begin_comment
comment|/*  * I2C device id. Used in I2C control register for accessing EEPROM device  * memory.  */
end_comment

begin_define
define|#
directive|define
name|XGE_DEV_ID
value|5
end_define

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_xpak_alarm_type_e
block|{
name|XGE_HAL_XPAK_ALARM_EXCESS_TEMP
init|=
literal|1
block|,
name|XGE_HAL_XPAK_ALARM_EXCESS_BIAS_CURRENT
init|=
literal|2
block|,
name|XGE_HAL_XPAK_ALARM_EXCESS_LASER_OUTPUT
init|=
literal|3
block|, }
name|xge_hal_xpak_alarm_type_e
typedef|;
end_typedef

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XGE_HAL_TYPES_H */
end_comment

end_unit

