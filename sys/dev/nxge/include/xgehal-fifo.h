begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002-2007 Neterion, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  *  FileName :    xgehal-fifo.h  *  *  Description:  Tx fifo object functionality  *  *  Created:      19 May 2004  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XGE_HAL_FIFO_H
end_ifndef

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_H
end_define

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-channel.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-config.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-mm.h>
end_include

begin_macro
name|__EXTERN_BEGIN_DECLS
end_macro

begin_comment
comment|/* HW fifo configuration */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_INT_PER_LIST_THRESHOLD
value|65
end_define

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_MAX_WRR
value|5
end_define

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_MAX_PARTITION
value|4
end_define

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_MAX_WRR_STATE
value|36
end_define

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_HW_PAIR_OFFSET
value|0x20000
end_define

begin_comment
comment|/* HW FIFO Weight Calender */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_WRR_0
value|0x0706050407030602ULL
end_define

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_WRR_1
value|0x0507040601070503ULL
end_define

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_WRR_2
value|0x0604070205060700ULL
end_define

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_WRR_3
value|0x0403060705010207ULL
end_define

begin_define
define|#
directive|define
name|XGE_HAL_FIFO_WRR_4
value|0x0604050300000000ULL
end_define

begin_comment
comment|/*  * xge_hal_fifo_hw_pair_t  *  * Represent a single fifo in the BAR1 memory space.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|u64
name|txdl_pointer
decl_stmt|;
comment|/* offset 0x0 */
name|u64
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u64
name|list_control
decl_stmt|;
comment|/* offset 0x18 */
define|#
directive|define
name|XGE_HAL_TX_FIFO_LAST_TXD_NUM
parameter_list|(
name|val
parameter_list|)
value|vBIT(val,0,8)
define|#
directive|define
name|XGE_HAL_TX_FIFO_FIRST_LIST
value|BIT(14)
define|#
directive|define
name|XGE_HAL_TX_FIFO_LAST_LIST
value|BIT(15)
define|#
directive|define
name|XGE_HAL_TX_FIFO_FIRSTNLAST_LIST
value|vBIT(3,14,2)
define|#
directive|define
name|XGE_HAL_TX_FIFO_SPECIAL_FUNC
value|BIT(23)
define|#
directive|define
name|XGE_HAL_TX_FIFO_NO_SNOOP
parameter_list|(
name|n
parameter_list|)
value|vBIT(n,30,2)
block|}
name|xge_hal_fifo_hw_pair_t
typedef|;
end_typedef

begin_comment
comment|/* Bad TxDL transfer codes */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_TXD_T_CODE_OK
value|0x0
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXD_T_CODE_UNUSED_1
value|0x1
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXD_T_CODE_ABORT_BUFFER
value|0x2
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXD_T_CODE_ABORT_DTOR
value|0x3
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXD_T_CODE_UNUSED_5
value|0x5
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXD_T_CODE_PARITY
value|0x7
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXD_T_CODE_LOSS_OF_LINK
value|0xA
end_define

begin_define
define|#
directive|define
name|XGE_HAL_TXD_T_CODE_GENERAL_ERR
value|0xF
end_define

begin_comment
comment|/**  * struct xge_hal_fifo_txd_t - TxD.  * @control_1: Control_1.  * @control_2: Control_2.  * @buffer_pointer: Buffer_Address.  * @host_control: Host_Control.Opaque 64bit data stored by ULD inside the Xframe  *            descriptor prior to posting the latter on the channel  *            via xge_hal_fifo_dtr_post() or xge_hal_ring_dtr_post().  *            The %host_control is returned as is to the ULD with each  *            completed descriptor.  *  * Transmit descriptor (TxD).Fifo descriptor contains configured number  * (list) of TxDs. * For more details please refer to Xframe User Guide,  * Section 5.4.2 "Transmit Descriptor (TxD) Format".  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_fifo_txd_t
block|{
name|u64
name|control_1
decl_stmt|;
define|#
directive|define
name|XGE_HAL_TXD_LIST_OWN_XENA
value|BIT(7)
define|#
directive|define
name|XGE_HAL_TXD_T_CODE
value|(BIT(12)|BIT(13)|BIT(14)|BIT(15))
define|#
directive|define
name|XGE_HAL_GET_TXD_T_CODE
parameter_list|(
name|val
parameter_list|)
value|((val& XGE_HAL_TXD_T_CODE)>>48)
define|#
directive|define
name|XGE_HAL_SET_TXD_T_CODE
parameter_list|(
name|x
parameter_list|,
name|val
parameter_list|)
value|(x |= (((u64)val& 0xF)<< 48))
define|#
directive|define
name|XGE_HAL_TXD_GATHER_CODE
value|(BIT(22) | BIT(23))
define|#
directive|define
name|XGE_HAL_TXD_GATHER_CODE_FIRST
value|BIT(22)
define|#
directive|define
name|XGE_HAL_TXD_GATHER_CODE_LAST
value|BIT(23)
define|#
directive|define
name|XGE_HAL_TXD_NO_LSO
value|0
define|#
directive|define
name|XGE_HAL_TXD_UDF_COF
value|1
define|#
directive|define
name|XGE_HAL_TXD_TCP_LSO
value|2
define|#
directive|define
name|XGE_HAL_TXD_UDP_LSO
value|3
define|#
directive|define
name|XGE_HAL_TXD_LSO_COF_CTRL
parameter_list|(
name|val
parameter_list|)
value|vBIT(val,30,2)
define|#
directive|define
name|XGE_HAL_TXD_TCP_LSO_MSS
parameter_list|(
name|val
parameter_list|)
value|vBIT(val,34,14)
define|#
directive|define
name|XGE_HAL_TXD_BUFFER0_SIZE
parameter_list|(
name|val
parameter_list|)
value|vBIT(val,48,16)
define|#
directive|define
name|XGE_HAL_TXD_GET_LSO_BYTES_SENT
parameter_list|(
name|val
parameter_list|)
value|((val& vBIT(0xFFFF,16,16))>>32)
name|u64
name|control_2
decl_stmt|;
define|#
directive|define
name|XGE_HAL_TXD_TX_CKO_CONTROL
value|(BIT(5)|BIT(6)|BIT(7))
define|#
directive|define
name|XGE_HAL_TXD_TX_CKO_IPV4_EN
value|BIT(5)
define|#
directive|define
name|XGE_HAL_TXD_TX_CKO_TCP_EN
value|BIT(6)
define|#
directive|define
name|XGE_HAL_TXD_TX_CKO_UDP_EN
value|BIT(7)
define|#
directive|define
name|XGE_HAL_TXD_VLAN_ENABLE
value|BIT(15)
define|#
directive|define
name|XGE_HAL_TXD_VLAN_TAG
parameter_list|(
name|val
parameter_list|)
value|vBIT(val,16,16)
define|#
directive|define
name|XGE_HAL_TXD_INT_NUMBER
parameter_list|(
name|val
parameter_list|)
value|vBIT(val,34,6)
define|#
directive|define
name|XGE_HAL_TXD_INT_TYPE_PER_LIST
value|BIT(47)
define|#
directive|define
name|XGE_HAL_TXD_INT_TYPE_UTILZ
value|BIT(46)
define|#
directive|define
name|XGE_HAL_TXD_SET_MARKER
value|vBIT(0x6,0,4)
name|u64
name|buffer_pointer
decl_stmt|;
name|u64
name|host_control
decl_stmt|;
block|}
name|xge_hal_fifo_txd_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xge_hal_fifo_txd_t
modifier|*
name|xge_hal_fifo_txdl_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_fifo_t - Fifo channel.  * @channel: Channel "base" of this fifo, the common part of all HAL  *           channels.  * @post_lock_ptr: Points to a lock that serializes (pointer, control) PIOs.  *           Note that for Xena the serialization is done across all device  *           fifos.  * @hw_pair: Per-fifo (Pointer, Control) pair used to send descriptors to the  *           Xframe hardware (for details see Xframe user guide).  * @config: Fifo configuration, part of device configuration  *          (see xge_hal_device_config_t{}).  * @no_snoop_bits: See xge_hal_fifo_config_t{}.  * @txdl_per_memblock: Number of TxDLs (TxD lists) per memblock.  * on TxDL please refer to Xframe UG.  * @interrupt_type: FIXME: to-be-defined.  * @txdl_size: Configured TxDL size (i.e., number of TxDs in a list), plus  *             per-TxDL HAL private space (xge_hal_fifo_txdl_priv_t).  * @priv_size: Per-Tx descriptor space reserved for upper-layer driver  *             usage.  * @mempool: Memory pool, from which descriptors get allocated.  * @align_size: TBD  *  * Fifo channel.  * Note: The structure is cache line aligned.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_fifo_t
block|{
name|xge_hal_channel_t
name|channel
decl_stmt|;
name|spinlock_t
modifier|*
name|post_lock_ptr
decl_stmt|;
name|xge_hal_fifo_hw_pair_t
modifier|*
name|hw_pair
decl_stmt|;
name|xge_hal_fifo_config_t
modifier|*
name|config
decl_stmt|;
name|int
name|no_snoop_bits
decl_stmt|;
name|int
name|txdl_per_memblock
decl_stmt|;
name|u64
name|interrupt_type
decl_stmt|;
name|int
name|txdl_size
decl_stmt|;
name|int
name|priv_size
decl_stmt|;
name|xge_hal_mempool_t
modifier|*
name|mempool
decl_stmt|;
name|int
name|align_size
decl_stmt|;
block|}
name|__xge_os_attr_cacheline_aligned
name|xge_hal_fifo_t
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_fifo_txdl_priv_t - Transmit descriptor HAL-private  * data.  * @dma_addr: DMA (mapped) address of _this_ descriptor.  * @dma_handle: DMA handle used to map the descriptor onto device.  * @dma_offset: Descriptor's offset in the memory block. HAL allocates  * descriptors in memory blocks (see  * xge_hal_fifo_config_t{})  * Each memblock is a contiguous block of DMA-able memory.  * @frags: Total number of fragments (that is, contiguous data buffers)  * carried by this TxDL.  * @align_vaddr_start: (TODO).  * @align_vaddr: Virtual address of the per-TxDL area in memory used for  * alignement. Used to place one or more mis-aligned fragments  * (the maximum defined by configration variable  * @max_aligned_frags).  * @align_dma_addr: DMA address translated from the @align_vaddr.  * @align_dma_handle: DMA handle that corresponds to @align_dma_addr.  * @align_dma_acch: DMA access handle corresponds to @align_dma_addr.  * @align_dma_offset: The current offset into the @align_vaddr area.  * Grows while filling the descriptor, gets reset.  * @align_used_frags: (TODO).  * @alloc_frags: Total number of fragments allocated.  * @dang_frags: Number of fragments kept from release until this TxDL is freed.  * @bytes_sent: TODO  * @unused: TODO  * @dang_txdl: (TODO).  * @next_txdl_priv: (TODO).  * @first_txdp: (TODO).  * @dang_dtrh: Pointer to TxDL (list) kept from release until this TxDL  * is freed.  * @linked_txdl_priv: Pointer to any linked TxDL for creating contiguous  * TxDL list.  * @dtrh: Corresponding dtrh to this TxDL.  * @memblock: Pointer to the TxDL memory block or memory page.  * on the next send operation.  * @dma_object: DMA address and handle of the memory block that contains  * the descriptor. This member is used only in the "checked"  * version of the HAL (to enforce certain assertions);  * otherwise it gets compiled out.  * @allocated: True if the descriptor is reserved, 0 otherwise. Internal usage.  *  * Per-transmit decsriptor HAL-private data. HAL uses the space to keep DMA  * information associated with the descriptor. Note that ULD can ask HAL  * to allocate additional per-descriptor space for its own (ULD-specific)  * purposes.  *  * See also: xge_hal_ring_rxd_priv_t{}.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_fifo_txdl_priv_t
block|{
name|dma_addr_t
name|dma_addr
decl_stmt|;
name|pci_dma_h
name|dma_handle
decl_stmt|;
name|ptrdiff_t
name|dma_offset
decl_stmt|;
name|int
name|frags
decl_stmt|;
name|char
modifier|*
name|align_vaddr_start
decl_stmt|;
name|char
modifier|*
name|align_vaddr
decl_stmt|;
name|dma_addr_t
name|align_dma_addr
decl_stmt|;
name|pci_dma_h
name|align_dma_handle
decl_stmt|;
name|pci_dma_acc_h
name|align_dma_acch
decl_stmt|;
name|ptrdiff_t
name|align_dma_offset
decl_stmt|;
name|int
name|align_used_frags
decl_stmt|;
name|int
name|alloc_frags
decl_stmt|;
name|int
name|dang_frags
decl_stmt|;
name|unsigned
name|int
name|bytes_sent
decl_stmt|;
name|int
name|unused
decl_stmt|;
name|xge_hal_fifo_txd_t
modifier|*
name|dang_txdl
decl_stmt|;
name|struct
name|xge_hal_fifo_txdl_priv_t
modifier|*
name|next_txdl_priv
decl_stmt|;
name|xge_hal_fifo_txd_t
modifier|*
name|first_txdp
decl_stmt|;
name|void
modifier|*
name|memblock
decl_stmt|;
ifdef|#
directive|ifdef
name|XGE_DEBUG_ASSERT
name|xge_hal_mempool_dma_t
modifier|*
name|dma_object
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|XGE_OS_MEMORY_CHECK
name|int
name|allocated
decl_stmt|;
endif|#
directive|endif
block|}
name|xge_hal_fifo_txdl_priv_t
typedef|;
end_typedef

begin_comment
comment|/**  * xge_hal_fifo_get_max_frags_cnt - Return the max fragments allocated  * for the fifo.  * @channelh: Channel handle.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|xge_hal_fifo_get_max_frags_cnt
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|)
block|{
return|return
operator|(
operator|(
name|xge_hal_fifo_t
operator|*
operator|)
name|channelh
operator|)
operator|->
name|config
operator|->
name|max_frags
return|;
block|}
end_function

begin_comment
comment|/* ========================= FIFO PRIVATE API ============================= */
end_comment

begin_function_decl
name|xge_hal_status_e
name|__hal_fifo_open
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_channel_attr_t
modifier|*
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_fifo_close
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_fifo_hw_initialize
parameter_list|(
name|xge_hal_device_h
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_fifo_dtr_align_alloc_map
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_fifo_dtr_align_free_unmap
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|XGE_DEBUG_FP
argument_list|)
operator|&&
operator|(
name|XGE_DEBUG_FP
operator|&
name|XGE_DEBUG_FP_FIFO
operator|)
end_if

begin_define
define|#
directive|define
name|__HAL_STATIC_FIFO
end_define

begin_define
define|#
directive|define
name|__HAL_INLINE_FIFO
end_define

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|xge_hal_fifo_txdl_priv_t
modifier|*
name|__hal_fifo_txdl_priv
parameter_list|(
name|xge_hal_dtr_h
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|__hal_fifo_dtr_post_single
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|u64
name|ctrl_1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|__hal_fifo_txdl_restore_many
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_fifo_txd_t
modifier|*
name|txdp
parameter_list|,
name|int
name|txdl_count
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ========================= FIFO PUBLIC API ============================== */
end_comment

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|xge_hal_status_e
name|xge_hal_fifo_dtr_reserve
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
modifier|*
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
modifier|*
name|xge_hal_fifo_dtr_private
parameter_list|(
name|xge_hal_dtr_h
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|int
name|xge_hal_fifo_dtr_buffer_cnt
parameter_list|(
name|xge_hal_dtr_h
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|xge_hal_status_e
name|xge_hal_fifo_dtr_reserve_sp
parameter_list|(
name|xge_hal_channel_h
name|channel
parameter_list|,
name|int
name|dtr_sp_size
parameter_list|,
name|xge_hal_dtr_h
name|dtr_sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|xge_hal_fifo_dtr_post
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|xge_hal_fifo_dtr_post_many
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|int
name|num
parameter_list|,
name|xge_hal_dtr_h
name|dtrs
index|[]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|xge_hal_status_e
name|xge_hal_fifo_dtr_next_completed
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
modifier|*
name|dtrh
parameter_list|,
name|u8
modifier|*
name|t_code
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|xge_hal_fifo_dtr_free
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|xge_hal_fifo_dtr_buffer_set
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|int
name|frag_idx
parameter_list|,
name|dma_addr_t
name|dma_pointer
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|xge_hal_status_e
name|xge_hal_fifo_dtr_buffer_set_aligned
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|int
name|frag_idx
parameter_list|,
name|void
modifier|*
name|vaddr
parameter_list|,
name|dma_addr_t
name|dma_pointer
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|misaligned_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|xge_hal_status_e
name|xge_hal_fifo_dtr_buffer_append
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|void
modifier|*
name|vaddr
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|xge_hal_fifo_dtr_buffer_finalize
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|int
name|frag_idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|xge_hal_fifo_dtr_mss_set
parameter_list|(
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|int
name|mss
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|xge_hal_fifo_dtr_cksum_set_bits
parameter_list|(
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|u64
name|cksum_bits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|void
name|xge_hal_fifo_dtr_vlan_set
parameter_list|(
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|u16
name|vlan_tag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_FIFO
name|__HAL_INLINE_FIFO
name|xge_hal_status_e
name|xge_hal_fifo_is_next_dtr_completed
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* XGE_FASTPATH_EXTERN */
end_comment

begin_define
define|#
directive|define
name|__HAL_STATIC_FIFO
value|static
end_define

begin_define
define|#
directive|define
name|__HAL_INLINE_FIFO
value|inline
end_define

begin_include
include|#
directive|include
file|<dev/nxge/xgehal/xgehal-fifo-fp.c>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XGE_FASTPATH_INLINE */
end_comment

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XGE_HAL_FIFO_H */
end_comment

end_unit

