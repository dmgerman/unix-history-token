begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002-2007 Neterion, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  *  FileName :    xgehal-channel.h  *  *  Description:  HAL channel object functionality  *  *  Created:      19 May 2004  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XGE_HAL_CHANNEL_H
end_ifndef

begin_define
define|#
directive|define
name|XGE_HAL_CHANNEL_H
end_define

begin_include
include|#
directive|include
file|<dev/nxge/include/xge-os-pal.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xge-list.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-types.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-stats.h>
end_include

begin_macro
name|__EXTERN_BEGIN_DECLS
end_macro

begin_comment
comment|/**  * enum xge_hal_channel_type_e - Enumerated channel types.  * @XGE_HAL_CHANNEL_TYPE_FIFO: fifo.  * @XGE_HAL_CHANNEL_TYPE_RING: ring.  * @XGE_HAL_CHANNEL_TYPE_SEND_QUEUE: Send Queue  * @XGE_HAL_CHANNEL_TYPE_RECEIVE_QUEUE: Receive Queue  * @XGE_HAL_CHANNEL_TYPE_COMPLETION_QUEUE: Receive queue completion queue  * @XGE_HAL_CHANNEL_TYPE_UP_MESSAGE_QUEUE: Up message queue  * @XGE_HAL_CHANNEL_TYPE_DOWN_MESSAGE_QUEUE: Down message queue  * @XGE_HAL_CHANNEL_TYPE_MAX: Maximum number of HAL-supported  * (and recognized) channel types. Currently: two.  *  * Enumerated channel types. Currently there are only two link-layer  * channels - Xframe fifo and Xframe ring. In the future the list will grow.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_channel_type_e
block|{
name|XGE_HAL_CHANNEL_TYPE_FIFO
block|,
name|XGE_HAL_CHANNEL_TYPE_RING
block|,
name|XGE_HAL_CHANNEL_TYPE_SEND_QUEUE
block|,
name|XGE_HAL_CHANNEL_TYPE_RECEIVE_QUEUE
block|,
name|XGE_HAL_CHANNEL_TYPE_COMPLETION_QUEUE
block|,
name|XGE_HAL_CHANNEL_TYPE_UP_MESSAGE_QUEUE
block|,
name|XGE_HAL_CHANNEL_TYPE_DOWN_MESSAGE_QUEUE
block|,
name|XGE_HAL_CHANNEL_TYPE_MAX
block|}
name|xge_hal_channel_type_e
typedef|;
end_typedef

begin_comment
comment|/**  * enum xge_hal_channel_flag_e - Channel flags.  * @XGE_HAL_CHANNEL_FLAG_NONE: zero (nil) flag.  * @XGE_HAL_CHANNEL_FLAG_USE_TX_LOCK: use lock when posting transmit  * descriptor.  * @XGE_HAL_CHANNEL_FLAG_FREE_RXD: to-be-defined.  *  * Channel opening flags. Reserved for future usage.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_channel_flag_e
block|{
name|XGE_HAL_CHANNEL_FLAG_NONE
init|=
literal|0x0
block|,
name|XGE_HAL_CHANNEL_FLAG_USE_TX_LOCK
init|=
literal|0x1
block|,
name|XGE_HAL_CHANNEL_FLAG_FREE_RXD
init|=
literal|0x2
block|}
name|xge_hal_channel_flag_e
typedef|;
end_typedef

begin_comment
comment|/**  * enum xge_hal_dtr_state_e - Descriptor (DTR) state.  * @XGE_HAL_DTR_STATE_NONE: Invalid state.  * @XGE_HAL_DTR_STATE_AVAIL: Descriptor is available for reservation  * (via xge_hal_fifo_dtr_reserve(), xge_hal_ring_dtr_reserve(), etc.).  * @XGE_HAL_DTR_STATE_POSTED: Descriptor is posted for processing by the  * device.  * @XGE_HAL_DTR_STATE_FREED: Descriptor is free and can be reused for  * filling-in and posting later.  *  * Xframe/HAL descriptor states. For more on descriptor states and transitions  * please refer to ch_intern{}.  *  * See also: xge_hal_channel_dtr_term_f{}.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_dtr_state_e
block|{
name|XGE_HAL_DTR_STATE_NONE
init|=
literal|0
block|,
name|XGE_HAL_DTR_STATE_AVAIL
init|=
literal|1
block|,
name|XGE_HAL_DTR_STATE_POSTED
init|=
literal|2
block|,
name|XGE_HAL_DTR_STATE_FREED
init|=
literal|3
block|}
name|xge_hal_dtr_state_e
typedef|;
end_typedef

begin_comment
comment|/**  * enum xge_hal_channel_reopen_e - Channel open, close, or reopen option.  * @XGE_HAL_CHANNEL_RESET_ONLY: Do not (de)allocate channel; used with  * xge_hal_channel_open(), xge_hal_channel_close().  * @XGE_HAL_CHANNEL_OC_NORMAL: Do (de)allocate channel; used with  * xge_hal_channel_open(), xge_hal_channel_close().  *  * Enumerates options used with channel open and close operations.  * The @XGE_HAL_CHANNEL_RESET_ONLY can be used when resetting the device;  * in this case there is actually no need to free and then again malloc  * the memory (including DMA-able memory) used for channel operation.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_channel_reopen_e
block|{
name|XGE_HAL_CHANNEL_RESET_ONLY
init|=
literal|1
block|,
name|XGE_HAL_CHANNEL_OC_NORMAL
init|=
literal|2
block|}
name|xge_hal_channel_reopen_e
typedef|;
end_typedef

begin_comment
comment|/**  * function xge_hal_channel_callback_f - Channel callback.  * @channelh: Channel "containing" 1 or more completed descriptors.  * @dtrh: First completed descriptor.  * @t_code: Transfer code, as per Xframe User Guide.  *          Returned by HAL.  * @host_control: Opaque 64bit data stored by ULD inside the Xframe  *            descriptor prior to posting the latter on the channel  *            via xge_hal_fifo_dtr_post() or xge_hal_ring_dtr_post().  *            The @host_control is returned as is to the ULD with each  *            completed descriptor.  * @userdata: Opaque per-channel data specified at channel open  *            time, via xge_hal_channel_open().  *  * Channel completion callback (type declaration). A single per-channel  * callback is specified at channel open time, via  * xge_hal_channel_open().  * Typically gets called as part of the processing of the Interrupt  * Service Routine.  *  * Channel callback gets called by HAL if, and only if, there is at least  * one new completion on a given ring or fifo channel. Upon processing the  * first @dtrh ULD is _supposed_ to continue consuming completions  * using√°one of the following HAL APIs:  *    - xge_hal_fifo_dtr_next_completed()  *      or  *    - xge_hal_ring_dtr_next_completed().  *  * Note that failure to process new completions in a timely fashion  * leads to XGE_HAL_INF_OUT_OF_DESCRIPTORS condition.  *  * Non-zero @t_code means failure to process (transmit or receive, depending  * on the channel type) the descriptor.  *  * In the "transmit" case the failure could happen, for instance, when the  * link is down, in which case Xframe completes the descriptor because it  * is not able to send the data out.  *  * For details please refer to Xframe User Guide.  *  * See also: xge_hal_fifo_dtr_next_completed(),  * xge_hal_ring_dtr_next_completed(), xge_hal_channel_dtr_term_f{}.  */
end_comment

begin_typedef
typedef|typedef
name|xge_hal_status_e
function_decl|(
modifier|*
name|xge_hal_channel_callback_f
function_decl|)
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|u8
name|t_code
parameter_list|,
name|void
modifier|*
name|userdata
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**  * function xge_hal_channel_dtr_init_f - Initialize descriptor callback.  * @channelh: Channel "containing" the @dtrh descriptor.  * @dtrh: Descriptor.  * @index: Index of the descriptor in the channel's set of descriptors.  * @userdata: Per-channel user data (a.k.a. context) specified at  * channel open time, via xge_hal_channel_open().  * @reopen: See  xge_hal_channel_reopen_e{}.  *  * Initialize descriptor callback. Unless NULL is specified in the  * xge_hal_channel_attr_t{} structure passed to xge_hal_channel_open()),  * HAL invokes the callback as part of the xge_hal_channel_open()  * implementation.  * For the ring type of channel the ULD is expected to fill in this descriptor  * with buffer(s) and control information.  * For the fifo type of channel the ULD could use the callback to  * pre-set DMA mappings and/or alignment buffers.  *  * See also: xge_hal_channel_attr_t{}, xge_hal_channel_dtr_term_f{}.  */
end_comment

begin_typedef
typedef|typedef
name|xge_hal_status_e
function_decl|(
modifier|*
name|xge_hal_channel_dtr_init_f
function_decl|)
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|int
name|index
parameter_list|,
name|void
modifier|*
name|userdata
parameter_list|,
name|xge_hal_channel_reopen_e
name|reopen
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**  * function xge_hal_channel_dtr_term_f - Terminate descriptor callback.  * @channelh: Channel "containing" the @dtrh descriptor.  * @dtrh: First completed descriptor.  * @state: One of the xge_hal_dtr_state_e{} enumerated states.  * @userdata: Per-channel user data (a.k.a. context) specified at  * channel open time, via xge_hal_channel_open().  * @reopen: See  xge_hal_channel_reopen_e{}.  *  * Terminate descriptor callback. Unless NULL is specified in the  * xge_hal_channel_attr_t{} structure passed to xge_hal_channel_open()),  * HAL invokes the callback as part of closing the corresponding  * channel, prior to de-allocating the channel and associated data  * structures (including descriptors).  * ULD should utilize the callback to (for instance) unmap  * and free DMA data buffers associated with the posted (state =  * XGE_HAL_DTR_STATE_POSTED) descriptors,  * as well as other relevant cleanup functions.  *  * See also: xge_hal_channel_attr_t{}, xge_hal_channel_dtr_init_f{}.  */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|xge_hal_channel_dtr_term_f
function_decl|)
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|xge_hal_dtr_state_e
name|state
parameter_list|,
name|void
modifier|*
name|userdata
parameter_list|,
name|xge_hal_channel_reopen_e
name|reopen
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_channel_attr_t - Channel open "template".  * @type: xge_hal_channel_type_e channel type.  * @vp_id: Virtual path id  * @post_qid: Queue ID to post descriptors. For the link layer this  *            number should be in the 0..7 range.  * @compl_qid: Completion queue ID. Must be set to zero for the link layer.  * @callback: Channel completion callback. HAL invokes the callback when there  *            are new completions on that channel. In many implementations  *            the @callback executes in the hw interrupt context.  * @dtr_init: Channel's descriptor-initialize callback.  *            See xge_hal_channel_dtr_init_f{}.  *            If not NULL, HAL invokes the callback when opening  *            the channel via xge_hal_channel_open().  * @dtr_term: Channel's descriptor-terminate callback. If not NULL,  *          HAL invokes the callback when closing the corresponding channel.  *          See also xge_hal_channel_dtr_term_f{}.  * @userdata: User-defined "context" of _that_ channel. Passed back to the  *            user as one of the @callback, @dtr_init, and @dtr_term arguments.  * @per_dtr_space: If specified (i.e., greater than zero): extra space  *              reserved by HAL per each transmit or receive (depending on the  *              channel type) descriptor. Can be used to store,  *              and retrieve on completion, information specific  *              to the upper-layer.  * @flags: xge_hal_channel_flag_e enumerated flags.  *  * Channel open "template". User fills the structure with channel  * attributes and passes it to xge_hal_channel_open().  * Usage: See ex_open{}.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_channel_attr_t
block|{
name|xge_hal_channel_type_e
name|type
decl_stmt|;
ifdef|#
directive|ifdef
name|XGEHAL_RNIC
name|u32
name|vp_id
decl_stmt|;
endif|#
directive|endif
name|int
name|post_qid
decl_stmt|;
name|int
name|compl_qid
decl_stmt|;
name|xge_hal_channel_callback_f
name|callback
decl_stmt|;
name|xge_hal_channel_dtr_init_f
name|dtr_init
decl_stmt|;
name|xge_hal_channel_dtr_term_f
name|dtr_term
decl_stmt|;
name|void
modifier|*
name|userdata
decl_stmt|;
name|int
name|per_dtr_space
decl_stmt|;
name|xge_hal_channel_flag_e
name|flags
decl_stmt|;
block|}
name|xge_hal_channel_attr_t
typedef|;
end_typedef

begin_comment
comment|/*  * xge_hal_channel_t  * ---------- complete/free section ---------------  * @item: List item; used to maintain a list of open channels.  * @callback: Channel completion callback. See  * xge_hal_channel_callback_f.  * @compl_index: Completion index. At any point in time points on the  *               position in the channel, which will contain next  *               to-be-completed descriptor.  * @length: Channel length. Currently allocated number of descriptors.  *          The channel length "grows" when more descriptors get allocated.  *          See _hal_mempool_grow.  * @free_arr: Free array. Contains completed descriptors that were freed  *            (i.e., handed over back to HAL) by ULD.  *            See xge_hal_fifo_dtr_free(), xge_hal_ring_dtr_free().  * @free_lock: Lock to protect @free_arr.  * ----------- reserve/post section ---------------  * @post_index: Post index. At any point in time points on the  *              position in the channel, which'll contain next to-be-posted  *              descriptor.  * @post_lock: Lock to serialize multiple concurrent "posters" of descriptors  *             on the given channel.  * @reserve_arr: Reserve array. Contains descriptors that can be reserved  *               by ULD for the subsequent send or receive operation.  *               See xge_hal_fifo_dtr_reserve(),  *               xge_hal_ring_dtr_reserve().  * @reserve_length: Length of the @reserve_arr. The length dynamically  *                  changes: it decrements each time descriptor is reserved.  * @reserve_lock: Lock to serialize multiple concurrent threads accessing  *                @reserve_arr.  * @reserve_threshold: Reserve threshold. Minimal number of free descriptors  *                     that ought to be preserved in the channel at all times.  *                     Note that @reserve_threshold>= 0&&  *                     @reserve_threshold< @reserve_max.  * ------------ common section --------------------  * @devh: Device handle. HAL device object that contains _this_ channel.  * @dmah: Channel's DMA address. Used to synchronize (to/from device)  *        descriptors.  * @regh0: Base address of the device memory space handle. Copied from HAL device  *         at channel open time.  * @regh1: Base address of the device memory space handle. Copied from HAL device  *         at channel open time.  * @userdata: Per-channel opaque (void*) user-defined context, which may be  *            upper-layer driver object, ULP connection, etc.  *            Once channel is open, @userdata is passed back to user via  *            xge_hal_channel_callback_f.  * @work_arr: Work array. Contains descriptors posted to the channel.  *            Note that at any point in time @work_arr contains 3 types of  *            descriptors:  *            1) posted but not yet consumed by Xframe device;  *            2) consumed but not yet completed;  *            3) completed but not yet freed  *            (via xge_hal_fifo_dtr_free() or xge_hal_ring_dtr_free())  * @saved_arr: Array used internally to optimize channel full-duplex  *             operation.  * @stats: Channel statistcis. Includes HAL internal counters, including  *         for instance, number of times out-of-descriptors  *         (see XGE_HAL_INF_OUT_OF_DESCRIPTORS) condition happened.  * ------------- "slow" section  ------------------  * @type: Channel type. See xge_hal_channel_type_e{}.  * @vp_id: Virtual path id  * @post_qid: Identifies Xframe queue used for posting descriptors.  * @compl_qid: Identifies Xframe completion queue.  * @flags: Channel flags. See xge_hal_channel_flag_e{}.  * @reserve_initial: Initial number of descriptors allocated at channel open  *                   time (see xge_hal_channel_open()). The number of  *                   channel descriptors can grow at runtime  *                   up to @reserve_max value.  * @reserve_max: Maximum number of channel descriptors. See @reserve_initial.  * @is_open: True, if channel is open; false - otherwise.  * @per_dtr_space: Per-descriptor space (in bytes) that channel user can utilize  *                 to store per-operation control information.  * HAL channel object. HAL devices (see xge_hal_device_t{}) contains  * zero or more channels. HAL channel contains zero or more descriptors. The  * latter are used by ULD(s) to manage the device and/or send and receive data  * to remote peer(s) via the channel.  *  * See also: xge_hal_channel_type_e{}, xge_hal_channel_flag_e,  * xge_hal_channel_callback_f{}  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|/* complete/free section */
name|xge_list_t
name|item
decl_stmt|;
name|xge_hal_channel_callback_f
name|callback
decl_stmt|;
name|void
modifier|*
modifier|*
name|free_arr
decl_stmt|;
name|int
name|length
decl_stmt|;
name|int
name|free_length
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|XGE_HAL_RX_MULTI_FREE_IRQ
argument_list|)
operator|||
name|defined
argument_list|(
name|XGE_HAL_TX_MULTI_FREE_IRQ
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|XGE_HAL_RX_MULTI_FREE
argument_list|)
operator|||
name|defined
argument_list|(
name|XGE_HAL_TX_MULTI_FREE
argument_list|)
name|spinlock_t
name|free_lock
decl_stmt|;
endif|#
directive|endif
name|int
name|compl_index
decl_stmt|;
name|unsigned
name|int
name|usage_cnt
decl_stmt|;
name|unsigned
name|int
name|poll_bytes
decl_stmt|;
name|int
name|unused0
decl_stmt|;
comment|/* reserve/post data path section */
ifdef|#
directive|ifdef
name|__XGE_WIN__
name|int
name|__xge_os_attr_cacheline_aligned
name|post_index
decl_stmt|;
else|#
directive|else
name|int
name|post_index
name|__xge_os_attr_cacheline_aligned
decl_stmt|;
endif|#
directive|endif
name|spinlock_t
name|reserve_lock
decl_stmt|;
name|spinlock_t
name|post_lock
decl_stmt|;
name|void
modifier|*
modifier|*
name|reserve_arr
decl_stmt|;
name|int
name|reserve_length
decl_stmt|;
name|int
name|reserve_threshold
decl_stmt|;
name|int
name|reserve_top
decl_stmt|;
name|int
name|unused1
decl_stmt|;
comment|/* common section */
name|xge_hal_device_h
name|devh
decl_stmt|;
name|pci_dev_h
name|pdev
decl_stmt|;
name|pci_reg_h
name|regh0
decl_stmt|;
name|pci_reg_h
name|regh1
decl_stmt|;
name|void
modifier|*
name|userdata
decl_stmt|;
name|void
modifier|*
modifier|*
name|work_arr
decl_stmt|;
name|void
modifier|*
modifier|*
name|saved_arr
decl_stmt|;
name|void
modifier|*
modifier|*
name|orig_arr
decl_stmt|;
name|xge_hal_stats_channel_info_t
name|stats
decl_stmt|;
comment|/* slow section */
name|xge_hal_channel_type_e
name|type
decl_stmt|;
ifdef|#
directive|ifdef
name|XGEHAL_RNIC
name|u32
name|vp_id
decl_stmt|;
endif|#
directive|endif
name|int
name|post_qid
decl_stmt|;
name|int
name|compl_qid
decl_stmt|;
name|xge_hal_channel_flag_e
name|flags
decl_stmt|;
name|int
name|reserve_initial
decl_stmt|;
name|int
name|reserve_max
decl_stmt|;
name|int
name|is_open
decl_stmt|;
name|int
name|per_dtr_space
decl_stmt|;
name|xge_hal_channel_dtr_term_f
name|dtr_term
decl_stmt|;
name|xge_hal_channel_dtr_init_f
name|dtr_init
decl_stmt|;
comment|/* MSI stuff */
name|u32
name|msi_msg
decl_stmt|;
name|u8
name|rti
decl_stmt|;
name|u8
name|tti
decl_stmt|;
name|u16
name|unused2
decl_stmt|;
comment|/* MSI-X stuff */
name|u64
name|msix_address
decl_stmt|;
name|u32
name|msix_data
decl_stmt|;
name|int
name|msix_idx
decl_stmt|;
specifier|volatile
name|int
name|in_interrupt
decl_stmt|;
name|unsigned
name|int
name|magic
decl_stmt|;
ifdef|#
directive|ifdef
name|__XGE_WIN__
block|}
name|__xge_os_attr_cacheline_aligned
name|xge_hal_channel_t
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_expr_stmt
unit|} xge_hal_channel_t
name|__xge_os_attr_cacheline_aligned
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ========================== CHANNEL PRIVATE API ========================= */
end_comment

begin_function_decl
name|xge_hal_status_e
name|__hal_channel_initialize
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_channel_attr_t
modifier|*
name|attr
parameter_list|,
name|void
modifier|*
modifier|*
name|reserve_arr
parameter_list|,
name|int
name|reserve_initial
parameter_list|,
name|int
name|reserve_max
parameter_list|,
name|int
name|reserve_threshold
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_channel_terminate
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_channel_t
modifier|*
name|__hal_channel_allocate
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|int
name|post_qid
parameter_list|,
ifdef|#
directive|ifdef
name|XGEHAL_RNIC
name|u32
name|vp_id
parameter_list|,
endif|#
directive|endif
name|xge_hal_channel_type_e
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_channel_free
parameter_list|(
name|xge_hal_channel_t
modifier|*
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|XGE_DEBUG_FP
argument_list|)
operator|&&
operator|(
name|XGE_DEBUG_FP
operator|&
name|XGE_DEBUG_FP_CHANNEL
operator|)
end_if

begin_define
define|#
directive|define
name|__HAL_STATIC_CHANNEL
end_define

begin_define
define|#
directive|define
name|__HAL_INLINE_CHANNEL
end_define

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|__hal_channel_dtr_alloc
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
modifier|*
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_channel_dtr_post
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_channel_dtr_try_complete
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
modifier|*
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_channel_dtr_complete
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_channel_dtr_free
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_channel_dtr_dealloc
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_channel_dtr_restore
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|int
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ========================== CHANNEL PUBLIC API ========================= */
end_comment

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|int
name|xge_hal_channel_dtr_count
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
modifier|*
name|xge_hal_channel_userdata
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|int
name|xge_hal_channel_id
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|int
name|xge_hal_check_alignment
parameter_list|(
name|dma_addr_t
name|dma_pointer
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|alignment
parameter_list|,
name|int
name|copy_size
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* XGE_FASTPATH_EXTERN */
end_comment

begin_define
define|#
directive|define
name|__HAL_STATIC_CHANNEL
value|static
end_define

begin_define
define|#
directive|define
name|__HAL_INLINE_CHANNEL
value|inline
end_define

begin_include
include|#
directive|include
file|<dev/nxge/xgehal/xgehal-channel-fp.c>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XGE_FASTPATH_INLINE */
end_comment

begin_function_decl
name|xge_hal_status_e
name|xge_hal_channel_open
parameter_list|(
name|xge_hal_device_h
name|hldev
parameter_list|,
name|xge_hal_channel_attr_t
modifier|*
name|attr
parameter_list|,
name|xge_hal_channel_h
modifier|*
name|channel
parameter_list|,
name|xge_hal_channel_reopen_e
name|reopen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_channel_close
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_channel_reopen_e
name|reopen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_channel_abort
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_channel_reopen_e
name|reopen
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XGE_HAL_CHANNEL_H */
end_comment

end_unit

