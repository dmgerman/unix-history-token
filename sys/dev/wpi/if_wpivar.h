begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2006,2007  *	Damien Bergamini<damien.bergamini@free.fr>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_struct
struct|struct
name|wpi_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint64_t
name|wr_tsft
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|int8_t
name|wr_dbm_antsignal
decl_stmt|;
name|int8_t
name|wr_dbm_antnoise
decl_stmt|;
name|uint8_t
name|wr_antenna
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_RX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_TSFT) |				\ 	 (1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTSIGNAL) |			\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTNOISE) |			\ 	 (1<< IEEE80211_RADIOTAP_ANTENNA))
end_define

begin_struct
struct|struct
name|wpi_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint8_t
name|wt_rate
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL))
end_define

begin_struct
struct|struct
name|wpi_dma_info
block|{
name|bus_dma_tag_t
name|tag
decl_stmt|;
name|bus_dmamap_t
name|map
decl_stmt|;
name|bus_addr_t
name|paddr
decl_stmt|;
name|caddr_t
name|vaddr
decl_stmt|;
name|bus_size_t
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_tx_data
block|{
name|bus_dmamap_t
name|map
decl_stmt|;
name|bus_addr_t
name|cmd_paddr
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_tx_ring
block|{
name|struct
name|wpi_dma_info
name|desc_dma
decl_stmt|;
name|struct
name|wpi_dma_info
name|cmd_dma
decl_stmt|;
name|struct
name|wpi_tx_desc
modifier|*
name|desc
decl_stmt|;
name|struct
name|wpi_tx_cmd
modifier|*
name|cmd
decl_stmt|;
name|struct
name|wpi_tx_data
name|data
index|[
name|WPI_TX_RING_COUNT
index|]
decl_stmt|;
name|bus_dma_tag_t
name|data_dmat
decl_stmt|;
name|int
name|qid
decl_stmt|;
name|int
name|queued
decl_stmt|;
name|int
name|cur
decl_stmt|;
name|int
name|update
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_rx_data
block|{
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|bus_dmamap_t
name|map
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_rx_ring
block|{
name|struct
name|wpi_dma_info
name|desc_dma
decl_stmt|;
name|uint32_t
modifier|*
name|desc
decl_stmt|;
name|struct
name|wpi_rx_data
name|data
index|[
name|WPI_RX_RING_COUNT
index|]
decl_stmt|;
name|bus_dma_tag_t
name|data_dmat
decl_stmt|;
name|int
name|cur
decl_stmt|;
name|int
name|update
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_node
block|{
name|struct
name|ieee80211_node
name|ni
decl_stmt|;
comment|/* must be the first */
name|uint8_t
name|id
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_NODE
parameter_list|(
name|ni
parameter_list|)
value|((struct wpi_node *)(ni))
end_define

begin_struct
struct|struct
name|wpi_power_sample
block|{
name|uint8_t
name|index
decl_stmt|;
name|int8_t
name|power
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_power_group
block|{
define|#
directive|define
name|WPI_SAMPLES_COUNT
value|5
name|struct
name|wpi_power_sample
name|samples
index|[
name|WPI_SAMPLES_COUNT
index|]
decl_stmt|;
name|uint8_t
name|chan
decl_stmt|;
name|int8_t
name|maxpwr
decl_stmt|;
name|int16_t
name|temp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_buf
block|{
name|void
modifier|*
name|data
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|size_t
name|size
decl_stmt|;
name|int
name|code
decl_stmt|;
name|int
name|ac
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_vap
block|{
name|struct
name|ieee80211vap
name|vap
decl_stmt|;
name|struct
name|wpi_buf
name|wv_bcbuf
decl_stmt|;
name|int
function_decl|(
modifier|*
name|newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct wpi_vap *)(vap))
end_define

begin_struct
struct|struct
name|wpi_fw_part
block|{
specifier|const
name|uint8_t
modifier|*
name|text
decl_stmt|;
name|uint32_t
name|textsz
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|data
decl_stmt|;
name|uint32_t
name|datasz
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_fw_info
block|{
specifier|const
name|uint8_t
modifier|*
name|data
decl_stmt|;
name|size_t
name|size
decl_stmt|;
name|struct
name|wpi_fw_part
name|init
decl_stmt|;
name|struct
name|wpi_fw_part
decl|main
decl_stmt|;
name|struct
name|wpi_fw_part
name|boot
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_softc
block|{
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|int
name|sc_debug
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
comment|/* Shared area. */
name|struct
name|wpi_dma_info
name|shared_dma
decl_stmt|;
name|struct
name|wpi_shared
modifier|*
name|shared
decl_stmt|;
name|struct
name|wpi_tx_ring
name|txq
index|[
name|WPI_NTXQUEUES
index|]
decl_stmt|;
name|struct
name|mtx
name|txq_mtx
decl_stmt|;
name|uint32_t
name|txq_active
decl_stmt|;
name|struct
name|wpi_rx_ring
name|rxq
decl_stmt|;
comment|/* TX Thermal Callibration. */
name|struct
name|callout
name|calib_to
decl_stmt|;
name|int
name|calib_cnt
decl_stmt|;
comment|/* Watch dog timers. */
name|struct
name|callout
name|watchdog_to
decl_stmt|;
name|struct
name|callout
name|watchdog_rfkill
decl_stmt|;
comment|/* Firmware image. */
name|struct
name|wpi_fw_info
name|fw
decl_stmt|;
name|uint32_t
name|errptr
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq
decl_stmt|;
name|struct
name|resource
modifier|*
name|mem
decl_stmt|;
name|bus_space_tag_t
name|sc_st
decl_stmt|;
name|bus_space_handle_t
name|sc_sh
decl_stmt|;
name|void
modifier|*
name|sc_ih
decl_stmt|;
name|bus_size_t
name|sc_sz
decl_stmt|;
name|int
name|sc_cap_off
decl_stmt|;
comment|/* PCIe Capabilities. */
name|struct
name|wpi_rxon
name|rxon
decl_stmt|;
name|int
name|temp
decl_stmt|;
name|uint32_t
name|qfullmsk
decl_stmt|;
name|uint32_t
name|nodesmsk
decl_stmt|;
name|struct
name|mtx
name|nt_mtx
decl_stmt|;
name|int
name|sc_tx_timer
decl_stmt|;
name|int
name|sc_scan_timer
decl_stmt|;
name|void
function_decl|(
modifier|*
name|sc_node_free
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_scan_curchan
function_decl|)
parameter_list|(
name|struct
name|ieee80211_scan_state
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|struct
name|wpi_rx_radiotap_header
name|sc_rxtap
decl_stmt|;
name|struct
name|wpi_tx_radiotap_header
name|sc_txtap
decl_stmt|;
comment|/* Firmware image. */
specifier|const
name|struct
name|firmware
modifier|*
name|fw_fp
decl_stmt|;
comment|/* Firmware DMA transfer. */
name|struct
name|wpi_dma_info
name|fw_dma
decl_stmt|;
comment|/* Tasks used by the driver. */
name|struct
name|task
name|sc_reinittask
decl_stmt|;
name|struct
name|task
name|sc_radiooff_task
decl_stmt|;
name|struct
name|task
name|sc_radioon_task
decl_stmt|;
name|struct
name|task
name|sc_start_task
decl_stmt|;
comment|/* Eeprom info. */
name|uint8_t
name|cap
decl_stmt|;
name|uint16_t
name|rev
decl_stmt|;
name|uint8_t
name|type
decl_stmt|;
name|struct
name|wpi_eeprom_chan
name|eeprom_channels
index|[
name|WPI_CHAN_BANDS_COUNT
index|]
index|[
name|WPI_MAX_CHAN_PER_BAND
index|]
decl_stmt|;
name|struct
name|wpi_power_group
name|groups
index|[
name|WPI_POWER_GROUPS_COUNT
index|]
decl_stmt|;
name|int8_t
name|maxpwr
index|[
name|IEEE80211_CHAN_MAX
index|]
decl_stmt|;
name|char
name|domain
index|[
literal|4
index|]
decl_stmt|;
comment|/* Regulatory domain. */
block|}
struct|;
end_struct

begin_comment
comment|/* WPI_LOCK> WPI_NT_LOCK> WPI_TXQ_LOCK */
end_comment

begin_define
define|#
directive|define
name|WPI_LOCK_INIT
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_init(&(_sc)->sc_mtx, device_get_nameunit((_sc)->sc_dev), \ 	    MTX_NETWORK_LOCK, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|WPI_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_LOCK_ASSERT
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|WPI_LOCK_DESTROY
parameter_list|(
name|_sc
parameter_list|)
value|mtx_destroy(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_NT_LOCK_INIT
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_init(&(_sc)->nt_mtx, "node table lock", NULL, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|WPI_NT_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->nt_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_NT_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->nt_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_NT_LOCK_DESTROY
parameter_list|(
name|_sc
parameter_list|)
value|mtx_destroy(&(_sc)->nt_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_TXQ_LOCK_INIT
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_init(&(_sc)->txq_mtx, "txq/cmdq lock", NULL, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|WPI_TXQ_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->txq_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_TXQ_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->txq_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_TXQ_LOCK_DESTROY
parameter_list|(
name|_sc
parameter_list|)
value|mtx_destroy(&(_sc)->txq_mtx)
end_define

end_unit

