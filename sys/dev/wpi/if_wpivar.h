begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2006,2007  *	Damien Bergamini<damien.bergamini@free.fr>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_include
include|#
directive|include
file|<net80211/ieee80211_amrr.h>
end_include

begin_struct
struct|struct
name|wpi_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint64_t
name|wr_tsft
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|int8_t
name|wr_dbm_antsignal
decl_stmt|;
name|int8_t
name|wr_dbm_antnoise
decl_stmt|;
name|uint8_t
name|wr_antenna
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_RX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_TSFT) |				\ 	 (1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTSIGNAL) |			\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTNOISE) |			\ 	 (1<< IEEE80211_RADIOTAP_ANTENNA))
end_define

begin_struct
struct|struct
name|wpi_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint8_t
name|wt_rate
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
name|uint8_t
name|wt_hwqueue
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL))
end_define

begin_struct
struct|struct
name|wpi_dma_info
block|{
name|bus_dma_tag_t
name|tag
decl_stmt|;
name|bus_dmamap_t
name|map
decl_stmt|;
name|bus_addr_t
name|paddr
decl_stmt|;
comment|/* aligned p address */
name|bus_addr_t
name|paddr_start
decl_stmt|;
comment|/* possibly unaligned p start*/
name|caddr_t
name|vaddr
decl_stmt|;
comment|/* aligned v address */
name|caddr_t
name|vaddr_start
decl_stmt|;
comment|/* possibly unaligned v start */
name|bus_size_t
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_tx_data
block|{
name|bus_dmamap_t
name|map
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_tx_ring
block|{
name|struct
name|wpi_dma_info
name|desc_dma
decl_stmt|;
name|struct
name|wpi_dma_info
name|cmd_dma
decl_stmt|;
name|struct
name|wpi_tx_desc
modifier|*
name|desc
decl_stmt|;
name|struct
name|wpi_tx_cmd
modifier|*
name|cmd
decl_stmt|;
name|struct
name|wpi_tx_data
modifier|*
name|data
decl_stmt|;
name|bus_dma_tag_t
name|data_dmat
decl_stmt|;
name|int
name|qid
decl_stmt|;
name|int
name|count
decl_stmt|;
name|int
name|queued
decl_stmt|;
name|int
name|cur
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_RBUF_COUNT
value|( WPI_RX_RING_COUNT + 16 )
end_define

begin_struct
struct|struct
name|wpi_rx_data
block|{
name|bus_dmamap_t
name|map
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_rx_ring
block|{
name|struct
name|wpi_dma_info
name|desc_dma
decl_stmt|;
name|uint32_t
modifier|*
name|desc
decl_stmt|;
name|struct
name|wpi_rx_data
name|data
index|[
name|WPI_RX_RING_COUNT
index|]
decl_stmt|;
name|bus_dma_tag_t
name|data_dmat
decl_stmt|;
name|int
name|cur
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_amrr
block|{
name|struct
name|ieee80211_node
name|ni
decl_stmt|;
comment|/* must be the first */
name|int
name|txcnt
decl_stmt|;
name|int
name|retrycnt
decl_stmt|;
name|int
name|success
decl_stmt|;
name|int
name|success_threshold
decl_stmt|;
name|int
name|recovery
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_node
block|{
name|struct
name|ieee80211_node
name|ni
decl_stmt|;
comment|/* must be the first */
name|struct
name|ieee80211_amrr_node
name|amn
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_NODE
parameter_list|(
name|ni
parameter_list|)
value|((struct wpi_node *)(ni))
end_define

begin_struct
struct|struct
name|wpi_power_sample
block|{
name|uint8_t
name|index
decl_stmt|;
name|int8_t
name|power
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_power_group
block|{
define|#
directive|define
name|WPI_SAMPLES_COUNT
value|5
name|struct
name|wpi_power_sample
name|samples
index|[
name|WPI_SAMPLES_COUNT
index|]
decl_stmt|;
name|uint8_t
name|chan
decl_stmt|;
name|int8_t
name|maxpwr
decl_stmt|;
name|int16_t
name|temp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpi_vap
block|{
name|struct
name|ieee80211vap
name|vap
decl_stmt|;
name|struct
name|ieee80211_amrr
name|amrr
decl_stmt|;
name|int
function_decl|(
modifier|*
name|newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct wpi_vap *)(vap))
end_define

begin_struct
struct|struct
name|wpi_softc
block|{
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
comment|/* Flags indicating the current state the driver 	 * expects the hardware to be in 	 */
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|WPI_FLAG_HW_RADIO_OFF
value|(1<< 0)
define|#
directive|define
name|WPI_FLAG_SCANNING
value|(1<< 1)
define|#
directive|define
name|WPI_FLAG_BUSY
value|(1<< 2)
define|#
directive|define
name|WPI_FLAG_AUTH
value|(1<< 3)
comment|/* shared area */
name|struct
name|wpi_dma_info
name|shared_dma
decl_stmt|;
name|struct
name|wpi_shared
modifier|*
name|shared
decl_stmt|;
name|struct
name|wpi_tx_ring
name|txq
index|[
name|WME_NUM_AC
index|]
decl_stmt|;
name|struct
name|wpi_tx_ring
name|cmdq
decl_stmt|;
name|struct
name|wpi_rx_ring
name|rxq
decl_stmt|;
comment|/* TX Thermal Callibration */
name|struct
name|callout
name|calib_to
decl_stmt|;
name|int
name|calib_cnt
decl_stmt|;
comment|/* Watch dog timer */
name|struct
name|callout
name|watchdog_to
decl_stmt|;
comment|/* Hardware switch polling timer */
name|struct
name|callout
name|hwswitch_to
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq
decl_stmt|;
name|struct
name|resource
modifier|*
name|mem
decl_stmt|;
name|bus_space_tag_t
name|sc_st
decl_stmt|;
name|bus_space_handle_t
name|sc_sh
decl_stmt|;
name|void
modifier|*
name|sc_ih
decl_stmt|;
name|int
name|mem_rid
decl_stmt|;
name|int
name|irq_rid
decl_stmt|;
name|struct
name|wpi_config
name|config
decl_stmt|;
name|int
name|temp
decl_stmt|;
name|int
name|sc_tx_timer
decl_stmt|;
name|int
name|sc_scan_timer
decl_stmt|;
name|struct
name|bpf_if
modifier|*
name|sc_drvbpf
decl_stmt|;
name|struct
name|wpi_rx_radiotap_header
name|sc_rxtap
decl_stmt|;
name|int
name|sc_rxtap_len
decl_stmt|;
name|struct
name|wpi_tx_radiotap_header
name|sc_txtap
decl_stmt|;
name|int
name|sc_txtap_len
decl_stmt|;
comment|/* firmware image */
specifier|const
name|struct
name|firmware
modifier|*
name|fw_fp
decl_stmt|;
comment|/* firmware DMA transfer */
name|struct
name|wpi_dma_info
name|fw_dma
decl_stmt|;
comment|/* command queue related variables */
define|#
directive|define
name|WPI_SCAN_START
value|(1<<0)
define|#
directive|define
name|WPI_SCAN_CURCHAN
value|(1<<1)
define|#
directive|define
name|WPI_SCAN_STOP
value|(1<<2)
define|#
directive|define
name|WPI_SET_CHAN
value|(1<<3)
define|#
directive|define
name|WPI_AUTH
value|(1<<4)
define|#
directive|define
name|WPI_RUN
value|(1<<5)
define|#
directive|define
name|WPI_SCAN_NEXT
value|(1<<6)
define|#
directive|define
name|WPI_RESTART
value|(1<<7)
define|#
directive|define
name|WPI_RF_RESTART
value|(1<<8)
define|#
directive|define
name|WPI_CMD_MAXOPS
value|10
comment|/* command queuing request type */
define|#
directive|define
name|WPI_QUEUE_NORMAL
value|0
define|#
directive|define
name|WPI_QUEUE_CLEAR
value|1
name|int
name|sc_cmd
index|[
name|WPI_CMD_MAXOPS
index|]
decl_stmt|;
name|int
name|sc_cmd_arg
index|[
name|WPI_CMD_MAXOPS
index|]
decl_stmt|;
name|int
name|sc_cmd_cur
decl_stmt|;
comment|/* current queued scan task */
name|int
name|sc_cmd_next
decl_stmt|;
comment|/* last queued scan task */
name|struct
name|mtx
name|sc_cmdlock
decl_stmt|;
comment|/* Task queues used to control the driver */
name|struct
name|taskqueue
modifier|*
name|sc_tq
decl_stmt|;
comment|/* Main command task queue */
name|struct
name|taskqueue
modifier|*
name|sc_tq2
decl_stmt|;
comment|/* firmware reset task queue */
comment|/* Tasks used by the driver */
name|struct
name|task
name|sc_radioontask
decl_stmt|;
comment|/* enable rf transmitter task*/
name|struct
name|task
name|sc_radioofftask
decl_stmt|;
comment|/* disable rf transmitter task*/
name|struct
name|task
name|sc_opstask
decl_stmt|;
comment|/* operation handling task */
name|struct
name|task
name|sc_restarttask
decl_stmt|;
comment|/* reset firmware task */
name|struct
name|task
name|sc_bmiss_task
decl_stmt|;
comment|/* beacon miss */
comment|/* Eeprom info */
name|uint8_t
name|cap
decl_stmt|;
name|uint16_t
name|rev
decl_stmt|;
name|uint8_t
name|type
decl_stmt|;
name|struct
name|wpi_power_group
name|groups
index|[
name|WPI_POWER_GROUPS_COUNT
index|]
decl_stmt|;
name|int8_t
name|maxpwr
index|[
name|IEEE80211_CHAN_MAX
index|]
decl_stmt|;
name|char
name|domain
index|[
literal|4
index|]
decl_stmt|;
comment|/*reglatory domain XXX */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_LOCK_INIT
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_init(&(_sc)->sc_mtx, device_get_nameunit((_sc)->sc_dev), \             MTX_NETWORK_LOCK, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|WPI_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_LOCK_ASSERT
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->sc_mtx, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|WPI_LOCK_DESTROY
parameter_list|(
name|_sc
parameter_list|)
value|mtx_destroy(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|WPI_CMD_LOCK_INIT
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_init(&(_sc)->sc_cmdlock, device_get_nameunit((_sc)->sc_dev), \ 	    NULL, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|WPI_CMD_LOCK_DESTROY
parameter_list|(
name|_sc
parameter_list|)
value|mtx_destroy(&(_sc)->sc_cmdlock)
end_define

begin_define
define|#
directive|define
name|WPI_CMD_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->sc_cmdlock)
end_define

begin_define
define|#
directive|define
name|WPI_CMD_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->sc_cmdlock)
end_define

end_unit

