begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2006,2007  *	Damien Bergamini<damien.bergamini@free.fr>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_define
define|#
directive|define
name|WPI_TX_RING_COUNT
value|256
end_define

begin_define
define|#
directive|define
name|WPI_CMD_RING_COUNT
value|256
end_define

begin_define
define|#
directive|define
name|WPI_RX_RING_COUNT
value|64
end_define

begin_comment
comment|/*  * Rings must be aligned on a 16K boundary.  */
end_comment

begin_define
define|#
directive|define
name|WPI_RING_DMA_ALIGN
value|0x4000
end_define

begin_comment
comment|/* maximum scatter/gather */
end_comment

begin_define
define|#
directive|define
name|WPI_MAX_SCATTER
value|4
end_define

begin_comment
comment|/* maximum Rx buffer size */
end_comment

begin_define
define|#
directive|define
name|WPI_RBUF_SIZE
value|( 3 * 1024 )
end_define

begin_comment
comment|/* XXX 3000 but must be aligned */
end_comment

begin_comment
comment|/*  * Control and status registers.  */
end_comment

begin_define
define|#
directive|define
name|WPI_HWCONFIG
value|0x000
end_define

begin_define
define|#
directive|define
name|WPI_INTR
value|0x008
end_define

begin_define
define|#
directive|define
name|WPI_MASK
value|0x00c
end_define

begin_define
define|#
directive|define
name|WPI_INTR_STATUS
value|0x010
end_define

begin_define
define|#
directive|define
name|WPI_GPIO_STATUS
value|0x018
end_define

begin_define
define|#
directive|define
name|WPI_RESET
value|0x020
end_define

begin_define
define|#
directive|define
name|WPI_GPIO_CTL
value|0x024
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_CTL
value|0x02c
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_STATUS
value|0x030
end_define

begin_define
define|#
directive|define
name|WPI_UCODE_SET
value|0x058
end_define

begin_define
define|#
directive|define
name|WPI_UCODE_CLR
value|0x05c
end_define

begin_define
define|#
directive|define
name|WPI_TEMPERATURE
value|0x060
end_define

begin_define
define|#
directive|define
name|WPI_CHICKEN
value|0x100
end_define

begin_define
define|#
directive|define
name|WPI_PLL_CTL
value|0x20c
end_define

begin_define
define|#
directive|define
name|WPI_WRITE_MEM_ADDR
value|0x444
end_define

begin_define
define|#
directive|define
name|WPI_READ_MEM_ADDR
value|0x448
end_define

begin_define
define|#
directive|define
name|WPI_WRITE_MEM_DATA
value|0x44c
end_define

begin_define
define|#
directive|define
name|WPI_READ_MEM_DATA
value|0x450
end_define

begin_define
define|#
directive|define
name|WPI_TX_WIDX
value|0x460
end_define

begin_define
define|#
directive|define
name|WPI_TX_CTL
parameter_list|(
name|qid
parameter_list|)
value|(0x940 + (qid) * 8)
end_define

begin_define
define|#
directive|define
name|WPI_TX_BASE
parameter_list|(
name|qid
parameter_list|)
value|(0x944 + (qid) * 8)
end_define

begin_define
define|#
directive|define
name|WPI_TX_DESC
parameter_list|(
name|qid
parameter_list|)
value|(0x980 + (qid) * 80)
end_define

begin_define
define|#
directive|define
name|WPI_RX_CONFIG
value|0xc00
end_define

begin_define
define|#
directive|define
name|WPI_RX_BASE
value|0xc04
end_define

begin_define
define|#
directive|define
name|WPI_RX_WIDX
value|0xc20
end_define

begin_define
define|#
directive|define
name|WPI_RX_RIDX_PTR
value|0xc24
end_define

begin_define
define|#
directive|define
name|WPI_RX_CTL
value|0xcc0
end_define

begin_define
define|#
directive|define
name|WPI_RX_STATUS
value|0xcc4
end_define

begin_define
define|#
directive|define
name|WPI_TX_CONFIG
parameter_list|(
name|qid
parameter_list|)
value|(0xd00 + (qid) * 32)
end_define

begin_define
define|#
directive|define
name|WPI_TX_CREDIT
parameter_list|(
name|qid
parameter_list|)
value|(0xd04 + (qid) * 32)
end_define

begin_define
define|#
directive|define
name|WPI_TX_STATE
parameter_list|(
name|qid
parameter_list|)
value|(0xd08 + (qid) * 32)
end_define

begin_define
define|#
directive|define
name|WPI_TX_BASE_PTR
value|0xe80
end_define

begin_define
define|#
directive|define
name|WPI_MSG_CONFIG
value|0xe88
end_define

begin_define
define|#
directive|define
name|WPI_TX_STATUS
value|0xe90
end_define

begin_comment
comment|/*  * NIC internal memory offsets.  */
end_comment

begin_define
define|#
directive|define
name|WPI_MEM_MODE
value|0x2e00
end_define

begin_define
define|#
directive|define
name|WPI_MEM_RA
value|0x2e04
end_define

begin_define
define|#
directive|define
name|WPI_MEM_TXCFG
value|0x2e10
end_define

begin_define
define|#
directive|define
name|WPI_MEM_MAGIC4
value|0x2e14
end_define

begin_define
define|#
directive|define
name|WPI_MEM_MAGIC5
value|0x2e20
end_define

begin_define
define|#
directive|define
name|WPI_MEM_BYPASS1
value|0x2e2c
end_define

begin_define
define|#
directive|define
name|WPI_MEM_BYPASS2
value|0x2e30
end_define

begin_define
define|#
directive|define
name|WPI_MEM_CLOCK1
value|0x3004
end_define

begin_define
define|#
directive|define
name|WPI_MEM_CLOCK2
value|0x3008
end_define

begin_define
define|#
directive|define
name|WPI_MEM_POWER
value|0x300c
end_define

begin_define
define|#
directive|define
name|WPI_MEM_PCIDEV
value|0x3010
end_define

begin_define
define|#
directive|define
name|WPI_MEM_HW_RADIO_OFF
value|0x3014
end_define

begin_define
define|#
directive|define
name|WPI_MEM_UCODE_CTL
value|0x3400
end_define

begin_define
define|#
directive|define
name|WPI_MEM_UCODE_SRC
value|0x3404
end_define

begin_define
define|#
directive|define
name|WPI_MEM_UCODE_DST
value|0x3408
end_define

begin_define
define|#
directive|define
name|WPI_MEM_UCODE_SIZE
value|0x340c
end_define

begin_define
define|#
directive|define
name|WPI_MEM_UCODE_BASE
value|0x3800
end_define

begin_define
define|#
directive|define
name|WPI_MEM_TEXT_BASE
value|0x3490
end_define

begin_define
define|#
directive|define
name|WPI_MEM_TEXT_SIZE
value|0x3494
end_define

begin_define
define|#
directive|define
name|WPI_MEM_DATA_BASE
value|0x3498
end_define

begin_define
define|#
directive|define
name|WPI_MEM_DATA_SIZE
value|0x349c
end_define

begin_comment
comment|/* possible flags for register WPI_HWCONFIG */
end_comment

begin_define
define|#
directive|define
name|WPI_HW_ALM_MB
value|(1<< 8)
end_define

begin_define
define|#
directive|define
name|WPI_HW_ALM_MM
value|(1<< 9)
end_define

begin_define
define|#
directive|define
name|WPI_HW_SKU_MRC
value|(1<< 10)
end_define

begin_define
define|#
directive|define
name|WPI_HW_REV_D
value|(1<< 11)
end_define

begin_define
define|#
directive|define
name|WPI_HW_TYPE_B
value|(1<< 12)
end_define

begin_comment
comment|/* possible flags for registers WPI_READ_MEM_ADDR/WPI_WRITE_MEM_ADDR */
end_comment

begin_define
define|#
directive|define
name|WPI_MEM_4
value|((sizeof (uint32_t) - 1)<< 24)
end_define

begin_comment
comment|/* possible values for WPI_MEM_UCODE_DST */
end_comment

begin_define
define|#
directive|define
name|WPI_FW_TEXT
value|0x00000000
end_define

begin_comment
comment|/* possible flags for WPI_GPIO_STATUS */
end_comment

begin_define
define|#
directive|define
name|WPI_POWERED
value|(1<< 9)
end_define

begin_comment
comment|/* possible flags for register WPI_RESET */
end_comment

begin_define
define|#
directive|define
name|WPI_NEVO_RESET
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|WPI_SW_RESET
value|(1<< 7)
end_define

begin_define
define|#
directive|define
name|WPI_MASTER_DISABLED
value|(1<< 8)
end_define

begin_define
define|#
directive|define
name|WPI_STOP_MASTER
value|(1<< 9)
end_define

begin_comment
comment|/* possible flags for register WPI_GPIO_CTL */
end_comment

begin_define
define|#
directive|define
name|WPI_GPIO_CLOCK
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|WPI_GPIO_INIT
value|(1<< 2)
end_define

begin_define
define|#
directive|define
name|WPI_GPIO_MAC
value|(1<< 3)
end_define

begin_define
define|#
directive|define
name|WPI_GPIO_SLEEP
value|(1<< 4)
end_define

begin_define
define|#
directive|define
name|WPI_GPIO_PWR_STATUS
value|0x07000000
end_define

begin_define
define|#
directive|define
name|WPI_GPIO_PWR_SLEEP
value|(4<< 24)
end_define

begin_comment
comment|/* possible flags for register WPI_CHICKEN */
end_comment

begin_define
define|#
directive|define
name|WPI_CHICKEN_RXNOLOS
value|(1<< 23)
end_define

begin_comment
comment|/* possible flags for register WPI_PLL_CTL */
end_comment

begin_define
define|#
directive|define
name|WPI_PLL_INIT
value|(1<< 24)
end_define

begin_comment
comment|/* possible flags for register WPI_UCODE_CLR */
end_comment

begin_define
define|#
directive|define
name|WPI_RADIO_OFF
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|WPI_DISABLE_CMD
value|(1<< 2)
end_define

begin_comment
comment|/* possible flags for WPI_RX_STATUS */
end_comment

begin_define
define|#
directive|define
name|WPI_RX_IDLE
value|(1<< 24)
end_define

begin_comment
comment|/* possible flags for register WPI_UC_CTL */
end_comment

begin_define
define|#
directive|define
name|WPI_UC_ENABLE
value|(1<< 30)
end_define

begin_define
define|#
directive|define
name|WPI_UC_RUN
value|(1U<< 31)
end_define

begin_comment
comment|/* possible flags for register WPI_INTR_CSR */
end_comment

begin_define
define|#
directive|define
name|WPI_ALIVE_INTR
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|WPI_WAKEUP_INTR
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|WPI_SW_ERROR
value|(1<< 25)
end_define

begin_define
define|#
directive|define
name|WPI_TX_INTR
value|(1<< 27)
end_define

begin_define
define|#
directive|define
name|WPI_HW_ERROR
value|(1<< 29)
end_define

begin_define
define|#
directive|define
name|WPI_RX_INTR
value|(1U<< 31)
end_define

begin_define
define|#
directive|define
name|WPI_INTR_MASK
define|\
value|(WPI_SW_ERROR | WPI_HW_ERROR | WPI_TX_INTR | WPI_RX_INTR |	\ 	 WPI_ALIVE_INTR | WPI_WAKEUP_INTR)
end_define

begin_comment
comment|/* possible flags for register WPI_TX_STATUS */
end_comment

begin_define
define|#
directive|define
name|WPI_TX_IDLE
parameter_list|(
name|qid
parameter_list|)
value|(1<< ((qid) + 24) | 1<< ((qid) + 16))
end_define

begin_comment
comment|/* possible flags for register WPI_EEPROM_CTL */
end_comment

begin_define
define|#
directive|define
name|WPI_EEPROM_READY
value|(1<< 0)
end_define

begin_comment
comment|/* possible flags for register WPI_EEPROM_STATUS */
end_comment

begin_define
define|#
directive|define
name|WPI_EEPROM_VERSION
value|0x00000007
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_LOCKED
value|0x00000180
end_define

begin_struct
struct|struct
name|wpi_shared
block|{
name|uint32_t
name|txbase
index|[
literal|8
index|]
decl_stmt|;
name|uint32_t
name|next
decl_stmt|;
name|uint32_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_MAX_SEG_LEN
value|65520
end_define

begin_struct
struct|struct
name|wpi_tx_desc
block|{
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|WPI_PAD32
parameter_list|(
name|x
parameter_list|)
value|(roundup2(x, 4) - (x))
struct|struct
block|{
name|uint32_t
name|addr
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
name|segs
index|[
name|WPI_MAX_SCATTER
index|]
struct|;
name|uint8_t
name|reserved
index|[
literal|28
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|wpi_tx_stat
block|{
name|uint8_t
name|nrts
decl_stmt|;
name|uint8_t
name|ntries
decl_stmt|;
name|uint8_t
name|nkill
decl_stmt|;
name|uint8_t
name|rate
decl_stmt|;
name|uint32_t
name|duration
decl_stmt|;
name|uint32_t
name|status
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|wpi_rx_desc
block|{
name|uint32_t
name|len
decl_stmt|;
name|uint8_t
name|type
decl_stmt|;
define|#
directive|define
name|WPI_UC_READY
value|1
define|#
directive|define
name|WPI_RX_DONE
value|27
define|#
directive|define
name|WPI_TX_DONE
value|28
define|#
directive|define
name|WPI_START_SCAN
value|130
define|#
directive|define
name|WPI_SCAN_RESULTS
value|131
define|#
directive|define
name|WPI_STOP_SCAN
value|132
define|#
directive|define
name|WPI_STATE_CHANGED
value|161
define|#
directive|define
name|WPI_MISSED_BEACON
value|162
name|uint8_t
name|flags
decl_stmt|;
name|uint8_t
name|idx
decl_stmt|;
name|uint8_t
name|qid
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|wpi_rx_stat
block|{
name|uint8_t
name|len
decl_stmt|;
define|#
directive|define
name|WPI_STAT_MAXLEN
value|20
name|uint8_t
name|id
decl_stmt|;
name|uint8_t
name|rssi
decl_stmt|;
comment|/* received signal strength */
define|#
directive|define
name|WPI_RSSI_OFFSET
value|95
name|uint8_t
name|agc
decl_stmt|;
comment|/* access gain control */
name|uint16_t
name|signal
decl_stmt|;
name|uint16_t
name|noise
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|wpi_rx_head
block|{
name|uint16_t
name|chan
decl_stmt|;
name|uint16_t
name|flags
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|rate
decl_stmt|;
name|uint16_t
name|len
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|wpi_rx_tail
block|{
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|WPI_RX_NO_CRC_ERR
value|(1<< 0)
define|#
directive|define
name|WPI_RX_NO_OVFL_ERR
value|(1<< 1)
comment|/* shortcut for the above */
define|#
directive|define
name|WPI_RX_NOERROR
value|(WPI_RX_NO_CRC_ERR | WPI_RX_NO_OVFL_ERR)
name|uint64_t
name|tstamp
decl_stmt|;
name|uint32_t
name|tbeacon
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|wpi_tx_cmd
block|{
name|uint8_t
name|code
decl_stmt|;
define|#
directive|define
name|WPI_CMD_CONFIGURE
value|16
define|#
directive|define
name|WPI_CMD_ASSOCIATE
value|17
define|#
directive|define
name|WPI_CMD_SET_WME
value|19
define|#
directive|define
name|WPI_CMD_TSF
value|20
define|#
directive|define
name|WPI_CMD_ADD_NODE
value|24
define|#
directive|define
name|WPI_CMD_TX_DATA
value|28
define|#
directive|define
name|WPI_CMD_MRR_SETUP
value|71
define|#
directive|define
name|WPI_CMD_SET_LED
value|72
define|#
directive|define
name|WPI_CMD_SET_POWER_MODE
value|119
define|#
directive|define
name|WPI_CMD_SCAN
value|128
define|#
directive|define
name|WPI_CMD_SET_BEACON
value|145
define|#
directive|define
name|WPI_CMD_TXPOWER
value|151
define|#
directive|define
name|WPI_CMD_BLUETOOTH
value|155
name|uint8_t
name|flags
decl_stmt|;
name|uint8_t
name|idx
decl_stmt|;
name|uint8_t
name|qid
decl_stmt|;
name|uint8_t
name|data
index|[
literal|360
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for WPI_CMD_CONFIGURE */
end_comment

begin_struct
struct|struct
name|wpi_config
block|{
name|uint8_t
name|myaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
name|uint8_t
name|bssid
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint16_t
name|reserved2
decl_stmt|;
name|uint8_t
name|wlap_bssid_addr
index|[
literal|6
index|]
decl_stmt|;
name|uint16_t
name|reserved3
decl_stmt|;
name|uint8_t
name|mode
decl_stmt|;
define|#
directive|define
name|WPI_MODE_HOSTAP
value|1
define|#
directive|define
name|WPI_MODE_STA
value|3
define|#
directive|define
name|WPI_MODE_IBSS
value|4
define|#
directive|define
name|WPI_MODE_MONITOR
value|6
name|uint8_t
name|air_propogation
decl_stmt|;
name|uint16_t
name|reserved4
decl_stmt|;
name|uint8_t
name|ofdm_mask
decl_stmt|;
name|uint8_t
name|cck_mask
decl_stmt|;
name|uint16_t
name|associd
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|WPI_CONFIG_24GHZ
value|(1<< 0)
define|#
directive|define
name|WPI_CONFIG_CCK
value|(1<< 1)
define|#
directive|define
name|WPI_CONFIG_AUTO
value|(1<< 2)
define|#
directive|define
name|WPI_CONFIG_SHSLOT
value|(1<< 4)
define|#
directive|define
name|WPI_CONFIG_SHPREAMBLE
value|(1<< 5)
define|#
directive|define
name|WPI_CONFIG_NODIVERSITY
value|(1<< 7)
define|#
directive|define
name|WPI_CONFIG_ANTENNA_A
value|(1<< 8)
define|#
directive|define
name|WPI_CONFIG_ANTENNA_B
value|(1<< 9)
define|#
directive|define
name|WPI_CONFIG_TSF
value|(1<< 15)
name|uint32_t
name|filter
decl_stmt|;
define|#
directive|define
name|WPI_FILTER_PROMISC
value|(1<< 0)
define|#
directive|define
name|WPI_FILTER_CTL
value|(1<< 1)
define|#
directive|define
name|WPI_FILTER_MULTICAST
value|(1<< 2)
define|#
directive|define
name|WPI_FILTER_NODECRYPT
value|(1<< 3)
define|#
directive|define
name|WPI_FILTER_BSS
value|(1<< 5)
define|#
directive|define
name|WPI_FILTER_BEACON
value|(1<< 6)
name|uint8_t
name|chan
decl_stmt|;
name|uint16_t
name|reserved6
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command WPI_CMD_ASSOCIATE */
end_comment

begin_struct
struct|struct
name|wpi_assoc
block|{
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|filter
decl_stmt|;
name|uint8_t
name|ofdm_mask
decl_stmt|;
name|uint8_t
name|cck_mask
decl_stmt|;
name|uint16_t
name|reserved
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command WPI_CMD_SET_WME */
end_comment

begin_struct
struct|struct
name|wpi_wme_setup
block|{
name|uint32_t
name|flags
decl_stmt|;
struct|struct
block|{
name|uint16_t
name|cwmin
decl_stmt|;
name|uint16_t
name|cwmax
decl_stmt|;
name|uint8_t
name|aifsn
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint16_t
name|txop
decl_stmt|;
block|}
name|__packed
name|ac
index|[
name|WME_NUM_AC
index|]
struct|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command WPI_CMD_TSF */
end_comment

begin_struct
struct|struct
name|wpi_cmd_tsf
block|{
name|uint64_t
name|tstamp
decl_stmt|;
name|uint16_t
name|bintval
decl_stmt|;
name|uint16_t
name|atim
decl_stmt|;
name|uint32_t
name|binitval
decl_stmt|;
name|uint16_t
name|lintval
decl_stmt|;
name|uint16_t
name|reserved
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for WPI_CMD_ADD_NODE */
end_comment

begin_struct
struct|struct
name|wpi_node_info
block|{
name|uint8_t
name|control
decl_stmt|;
define|#
directive|define
name|WPI_NODE_UPDATE
value|(1<< 0)
name|uint8_t
name|reserved1
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|bssid
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint16_t
name|reserved2
decl_stmt|;
name|uint8_t
name|id
decl_stmt|;
define|#
directive|define
name|WPI_ID_BSS
value|0
define|#
directive|define
name|WPI_ID_BROADCAST
value|24
name|uint8_t
name|flags
decl_stmt|;
name|uint16_t
name|reserved3
decl_stmt|;
name|uint16_t
name|key_flags
decl_stmt|;
name|uint8_t
name|tkip
decl_stmt|;
name|uint8_t
name|reserved4
decl_stmt|;
name|uint16_t
name|ttak
index|[
literal|5
index|]
decl_stmt|;
name|uint16_t
name|reserved5
decl_stmt|;
name|uint8_t
name|key
index|[
name|IEEE80211_KEYBUF_SIZE
index|]
decl_stmt|;
name|uint32_t
name|action
decl_stmt|;
define|#
directive|define
name|WPI_ACTION_SET_RATE
value|4
name|uint32_t
name|mask
decl_stmt|;
name|uint16_t
name|tid
decl_stmt|;
name|uint8_t
name|rate
decl_stmt|;
name|uint8_t
name|antenna
decl_stmt|;
define|#
directive|define
name|WPI_ANTENNA_A
value|(1<<6)
define|#
directive|define
name|WPI_ANTENNA_B
value|(1<<7)
define|#
directive|define
name|WPI_ANTENNA_BOTH
value|(WPI_ANTENNA_A|WPI_ANTENNA_B)
name|uint8_t
name|add_imm
decl_stmt|;
name|uint8_t
name|del_imm
decl_stmt|;
name|uint16_t
name|add_imm_start
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command WPI_CMD_TX_DATA */
end_comment

begin_struct
struct|struct
name|wpi_cmd_data
block|{
name|uint16_t
name|len
decl_stmt|;
name|uint16_t
name|lnext
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|WPI_TX_NEED_RTS
value|(1<<  1)
define|#
directive|define
name|WPI_TX_NEED_CTS
value|(1<<  2)
define|#
directive|define
name|WPI_TX_NEED_ACK
value|(1<<  3)
define|#
directive|define
name|WPI_TX_FULL_TXOP
value|(1<<  7)
define|#
directive|define
name|WPI_TX_BT_DISABLE
value|(1<< 12)
comment|/* bluetooth coexistence */
define|#
directive|define
name|WPI_TX_AUTO_SEQ
value|(1<< 13)
define|#
directive|define
name|WPI_TX_INSERT_TSTAMP
value|(1<< 16)
name|uint8_t
name|rate
decl_stmt|;
name|uint8_t
name|id
decl_stmt|;
name|uint8_t
name|tid
decl_stmt|;
name|uint8_t
name|security
decl_stmt|;
name|uint8_t
name|key
index|[
name|IEEE80211_KEYBUF_SIZE
index|]
decl_stmt|;
name|uint8_t
name|tkip
index|[
name|IEEE80211_WEP_MICLEN
index|]
decl_stmt|;
name|uint32_t
name|fnext
decl_stmt|;
name|uint32_t
name|lifetime
decl_stmt|;
define|#
directive|define
name|WPI_LIFETIME_INFINITE
value|0xffffffff
name|uint8_t
name|ofdm_mask
decl_stmt|;
name|uint8_t
name|cck_mask
decl_stmt|;
name|uint8_t
name|rts_ntries
decl_stmt|;
name|uint8_t
name|data_ntries
decl_stmt|;
name|uint16_t
name|timeout
decl_stmt|;
name|uint16_t
name|txop
decl_stmt|;
name|struct
name|ieee80211_frame
name|wh
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command WPI_CMD_SET_BEACON */
end_comment

begin_struct
struct|struct
name|wpi_cmd_beacon
block|{
name|uint16_t
name|len
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
comment|/* same as wpi_cmd_data */
name|uint8_t
name|rate
decl_stmt|;
name|uint8_t
name|id
decl_stmt|;
name|uint8_t
name|reserved2
index|[
literal|30
index|]
decl_stmt|;
name|uint32_t
name|lifetime
decl_stmt|;
name|uint8_t
name|ofdm_mask
decl_stmt|;
name|uint8_t
name|cck_mask
decl_stmt|;
name|uint16_t
name|reserved3
index|[
literal|3
index|]
decl_stmt|;
name|uint16_t
name|tim
decl_stmt|;
name|uint8_t
name|timsz
decl_stmt|;
name|uint8_t
name|reserved4
decl_stmt|;
name|struct
name|ieee80211_frame
name|wh
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for notification WPI_MISSED_BEACON */
end_comment

begin_struct
struct|struct
name|wpi_missed_beacon
block|{
name|uint32_t
name|consecutive
decl_stmt|;
name|uint32_t
name|total
decl_stmt|;
name|uint32_t
name|expected
decl_stmt|;
name|uint32_t
name|received
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for WPI_CMD_MRR_SETUP */
end_comment

begin_struct
struct|struct
name|wpi_mrr_setup
block|{
name|uint8_t
name|which
decl_stmt|;
define|#
directive|define
name|WPI_MRR_CTL
value|0
define|#
directive|define
name|WPI_MRR_DATA
value|1
name|uint8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
struct|struct
block|{
name|uint8_t
name|signal
decl_stmt|;
name|uint8_t
name|flags
decl_stmt|;
name|uint8_t
name|ntries
decl_stmt|;
name|uint8_t
name|next
decl_stmt|;
define|#
directive|define
name|WPI_OFDM6
value|0
define|#
directive|define
name|WPI_OFDM54
value|7
define|#
directive|define
name|WPI_CCK1
value|8
define|#
directive|define
name|WPI_CCK2
value|9
define|#
directive|define
name|WPI_CCK11
value|11
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
name|rates
index|[
name|WPI_CCK11
operator|+
literal|1
index|]
struct|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for WPI_CMD_SET_LED */
end_comment

begin_struct
struct|struct
name|wpi_cmd_led
block|{
name|uint32_t
name|unit
decl_stmt|;
comment|/* multiplier (in usecs) */
name|uint8_t
name|which
decl_stmt|;
define|#
directive|define
name|WPI_LED_ACTIVITY
value|1
define|#
directive|define
name|WPI_LED_LINK
value|2
name|uint8_t
name|off
decl_stmt|;
name|uint8_t
name|on
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for WPI_CMD_SET_POWER_MODE */
end_comment

begin_struct
struct|struct
name|wpi_power
block|{
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|WPI_POWER_CAM
value|0
comment|/* constantly awake mode */
name|uint32_t
name|rx_timeout
decl_stmt|;
name|uint32_t
name|tx_timeout
decl_stmt|;
name|uint32_t
name|sleep
index|[
literal|5
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command WPI_CMD_SCAN */
end_comment

begin_struct
struct|struct
name|wpi_scan_hdr
block|{
name|uint16_t
name|len
decl_stmt|;
name|uint8_t
name|reserved1
decl_stmt|;
name|uint8_t
name|nchan
decl_stmt|;
name|uint16_t
name|quiet
decl_stmt|;
name|uint16_t
name|threshold
decl_stmt|;
name|uint16_t
name|promotion
decl_stmt|;
name|uint16_t
name|reserved2
decl_stmt|;
name|uint32_t
name|maxtimeout
decl_stmt|;
name|uint32_t
name|suspend
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|filter
decl_stmt|;
struct|struct
block|{
name|uint16_t
name|len
decl_stmt|;
name|uint16_t
name|lnext
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
name|uint8_t
name|rate
decl_stmt|;
name|uint8_t
name|id
decl_stmt|;
name|uint8_t
name|tid
decl_stmt|;
name|uint8_t
name|security
decl_stmt|;
name|uint8_t
name|key
index|[
name|IEEE80211_KEYBUF_SIZE
index|]
decl_stmt|;
name|uint8_t
name|tkip
index|[
name|IEEE80211_WEP_MICLEN
index|]
decl_stmt|;
name|uint32_t
name|fnext
decl_stmt|;
name|uint32_t
name|lifetime
decl_stmt|;
name|uint8_t
name|ofdm_mask
decl_stmt|;
name|uint8_t
name|cck_mask
decl_stmt|;
name|uint8_t
name|rts_ntries
decl_stmt|;
name|uint8_t
name|data_ntries
decl_stmt|;
name|uint16_t
name|timeout
decl_stmt|;
name|uint16_t
name|txop
decl_stmt|;
block|}
name|tx
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
struct|;
define|#
directive|define
name|WPI_SCAN_MAX_ESSIDS
value|4
struct|struct
block|{
name|uint8_t
name|id
decl_stmt|;
name|uint8_t
name|esslen
decl_stmt|;
name|uint8_t
name|essid
index|[
name|IEEE80211_NWID_LEN
index|]
decl_stmt|;
block|}
name|scan_essids
index|[
name|WPI_SCAN_MAX_ESSIDS
index|]
struct|;
comment|/* followed by probe request body */
comment|/* followed by nchan x wpi_scan_chan */
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|wpi_scan_chan
block|{
name|uint8_t
name|flags
decl_stmt|;
name|uint8_t
name|chan
decl_stmt|;
define|#
directive|define
name|WPI_CHAN_ACTIVE
value|(1<< 0)
define|#
directive|define
name|WPI_CHAN_DIRECT
value|(1<< 1)
name|uint8_t
name|gain_radio
decl_stmt|;
name|uint8_t
name|gain_dsp
decl_stmt|;
name|uint16_t
name|active
decl_stmt|;
comment|/* msecs */
name|uint16_t
name|passive
decl_stmt|;
comment|/* msecs */
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for WPI_CMD_BLUETOOTH */
end_comment

begin_struct
struct|struct
name|wpi_bluetooth
block|{
name|uint8_t
name|flags
decl_stmt|;
name|uint8_t
name|lead
decl_stmt|;
name|uint8_t
name|kill
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint32_t
name|ack
decl_stmt|;
name|uint32_t
name|cts
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for command WPI_CMD_TXPOWER */
end_comment

begin_struct
struct|struct
name|wpi_cmd_txpower
block|{
name|uint8_t
name|band
decl_stmt|;
define|#
directive|define
name|WPI_RATE_5GHZ
value|0
define|#
directive|define
name|WPI_RATE_2GHZ
value|1
name|uint8_t
name|reserved
decl_stmt|;
name|uint16_t
name|channel
decl_stmt|;
define|#
directive|define
name|WPI_RATE_MAPPING_COUNT
value|12
struct|struct
block|{
name|uint8_t
name|rate
decl_stmt|;
name|uint8_t
name|gain_radio
decl_stmt|;
name|uint8_t
name|gain_dsp
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
block|}
name|__packed
name|rates
index|[
name|WPI_RATE_MAPPING_COUNT
index|]
struct|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_FW_MAIN_TEXT_MAXSZ
value|(80 * 1024 )
end_define

begin_define
define|#
directive|define
name|WPI_FW_MAIN_DATA_MAXSZ
value|(32 * 1024 )
end_define

begin_define
define|#
directive|define
name|WPI_FW_INIT_TEXT_MAXSZ
value|(80 * 1024 )
end_define

begin_define
define|#
directive|define
name|WPI_FW_INIT_DATA_MAXSZ
value|(32 * 1024 )
end_define

begin_define
define|#
directive|define
name|WPI_FW_BOOT_TEXT_MAXSZ
value|1024
end_define

begin_define
define|#
directive|define
name|WPI_FW_UPDATED
value|(1<< 31 )
end_define

begin_comment
comment|/* firmware image header */
end_comment

begin_struct
struct|struct
name|wpi_firmware_hdr
block|{
define|#
directive|define
name|WPI_FW_MINVERSION
value|2144
name|uint32_t
name|version
decl_stmt|;
name|uint32_t
name|rtextsz
decl_stmt|;
name|uint32_t
name|rdatasz
decl_stmt|;
name|uint32_t
name|itextsz
decl_stmt|;
name|uint32_t
name|idatasz
decl_stmt|;
name|uint32_t
name|btextsz
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for WPI_UC_READY notification */
end_comment

begin_struct
struct|struct
name|wpi_ucode_info
block|{
name|uint32_t
name|version
decl_stmt|;
name|uint8_t
name|revision
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|type
decl_stmt|;
name|uint8_t
name|subtype
decl_stmt|;
name|uint16_t
name|reserved
decl_stmt|;
name|uint32_t
name|logptr
decl_stmt|;
name|uint32_t
name|errorptr
decl_stmt|;
name|uint32_t
name|timestamp
decl_stmt|;
name|uint32_t
name|valid
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for WPI_START_SCAN notification */
end_comment

begin_struct
struct|struct
name|wpi_start_scan
block|{
name|uint64_t
name|tstamp
decl_stmt|;
name|uint32_t
name|tbeacon
decl_stmt|;
name|uint8_t
name|chan
decl_stmt|;
name|uint8_t
name|band
decl_stmt|;
name|uint16_t
name|reserved
decl_stmt|;
name|uint32_t
name|status
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* structure for WPI_STOP_SCAN notification */
end_comment

begin_struct
struct|struct
name|wpi_stop_scan
block|{
name|uint8_t
name|nchan
decl_stmt|;
name|uint8_t
name|status
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|chan
decl_stmt|;
name|uint64_t
name|tsf
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_EEPROM_MAC
value|0x015
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_REVISION
value|0x035
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_CAPABILITIES
value|0x045
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_TYPE
value|0x04a
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_DOMAIN
value|0x060
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_BAND1
value|0x063
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_BAND2
value|0x072
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_BAND3
value|0x080
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_BAND4
value|0x08d
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_BAND5
value|0x099
end_define

begin_define
define|#
directive|define
name|WPI_EEPROM_POWER_GRP
value|0x100
end_define

begin_struct
struct|struct
name|wpi_eeprom_chan
block|{
name|uint8_t
name|flags
decl_stmt|;
define|#
directive|define
name|WPI_EEPROM_CHAN_VALID
value|(1<<0)
define|#
directive|define
name|WPI_EEPROM_CHAN_IBSS
value|(1<<1)
define|#
directive|define
name|WPI_EEPROM_CHAN_ACTIVE
value|(1<<3)
define|#
directive|define
name|WPI_EEPROM_CHAN_RADAR
value|(1<<4)
name|int8_t
name|maxpwr
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|wpi_eeprom_sample
block|{
name|uint8_t
name|index
decl_stmt|;
name|int8_t
name|power
decl_stmt|;
name|uint16_t
name|volt
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_POWER_GROUPS_COUNT
value|5
end_define

begin_struct
struct|struct
name|wpi_eeprom_group
block|{
name|struct
name|wpi_eeprom_sample
name|samples
index|[
literal|5
index|]
decl_stmt|;
name|int32_t
name|coef
index|[
literal|5
index|]
decl_stmt|;
name|int32_t
name|corr
index|[
literal|5
index|]
decl_stmt|;
name|int8_t
name|maxpwr
decl_stmt|;
name|uint8_t
name|chan
decl_stmt|;
name|int16_t
name|temp
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_CHAN_BANDS_COUNT
value|5
end_define

begin_define
define|#
directive|define
name|WPI_MAX_CHAN_PER_BAND
value|14
end_define

begin_struct
specifier|static
specifier|const
struct|struct
name|wpi_chan_band
block|{
name|uint32_t
name|addr
decl_stmt|;
comment|/* offset in EEPROM */
name|uint8_t
name|nchan
decl_stmt|;
name|uint8_t
name|chan
index|[
name|WPI_MAX_CHAN_PER_BAND
index|]
decl_stmt|;
block|}
name|wpi_bands
index|[
literal|5
index|]
init|=
block|{
block|{
name|WPI_EEPROM_BAND1
block|,
literal|14
block|,
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|}
block|}
block|,
block|{
name|WPI_EEPROM_BAND2
block|,
literal|13
block|,
block|{
literal|183
block|,
literal|184
block|,
literal|185
block|,
literal|187
block|,
literal|188
block|,
literal|189
block|,
literal|192
block|,
literal|196
block|,
literal|7
block|,
literal|8
block|,
literal|11
block|,
literal|12
block|,
literal|16
block|}
block|}
block|,
block|{
name|WPI_EEPROM_BAND3
block|,
literal|12
block|,
block|{
literal|34
block|,
literal|36
block|,
literal|38
block|,
literal|40
block|,
literal|42
block|,
literal|44
block|,
literal|46
block|,
literal|48
block|,
literal|52
block|,
literal|56
block|,
literal|60
block|,
literal|64
block|}
block|}
block|,
block|{
name|WPI_EEPROM_BAND4
block|,
literal|11
block|,
block|{
literal|100
block|,
literal|104
block|,
literal|108
block|,
literal|112
block|,
literal|116
block|,
literal|120
block|,
literal|124
block|,
literal|128
block|,
literal|132
block|,
literal|136
block|,
literal|140
block|}
block|}
block|,
block|{
name|WPI_EEPROM_BAND5
block|,
literal|6
block|,
block|{
literal|145
block|,
literal|149
block|,
literal|153
block|,
literal|157
block|,
literal|161
block|,
literal|165
block|}
block|}
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPI_MAX_PWR_INDEX
value|77
end_define

begin_comment
comment|/*  * RF Tx gain values from highest to lowest power (values obtained from  * the reference driver.)  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|uint8_t
name|wpi_rf_gain_2ghz
index|[
name|WPI_MAX_PWR_INDEX
operator|+
literal|1
index|]
init|=
block|{
literal|0xfb
block|,
literal|0xfb
block|,
literal|0xfb
block|,
literal|0xfb
block|,
literal|0xfb
block|,
literal|0xfb
block|,
literal|0xfb
block|,
literal|0xfb
block|,
literal|0xbb
block|,
literal|0xbb
block|,
literal|0xbb
block|,
literal|0xbb
block|,
literal|0xf3
block|,
literal|0xf3
block|,
literal|0xf3
block|,
literal|0xf3
block|,
literal|0xf3
block|,
literal|0xd3
block|,
literal|0xd3
block|,
literal|0xb3
block|,
literal|0xb3
block|,
literal|0xb3
block|,
literal|0x93
block|,
literal|0x93
block|,
literal|0x93
block|,
literal|0x93
block|,
literal|0x93
block|,
literal|0x93
block|,
literal|0x93
block|,
literal|0x73
block|,
literal|0xeb
block|,
literal|0xeb
block|,
literal|0xeb
block|,
literal|0xcb
block|,
literal|0xcb
block|,
literal|0xcb
block|,
literal|0xcb
block|,
literal|0xcb
block|,
literal|0xcb
block|,
literal|0xcb
block|,
literal|0xab
block|,
literal|0xab
block|,
literal|0xab
block|,
literal|0x8b
block|,
literal|0xe3
block|,
literal|0xe3
block|,
literal|0xe3
block|,
literal|0xe3
block|,
literal|0xe3
block|,
literal|0xe3
block|,
literal|0xc3
block|,
literal|0xc3
block|,
literal|0xc3
block|,
literal|0xc3
block|,
literal|0xa3
block|,
literal|0xa3
block|,
literal|0xa3
block|,
literal|0xa3
block|,
literal|0x83
block|,
literal|0x83
block|,
literal|0x83
block|,
literal|0x83
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x43
block|,
literal|0x43
block|,
literal|0x43
block|,
literal|0x43
block|,
literal|0x23
block|,
literal|0x23
block|,
literal|0x23
block|,
literal|0x23
block|,
literal|0x03
block|,
literal|0x03
block|,
literal|0x03
block|,
literal|0x03
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uint8_t
name|wpi_rf_gain_5ghz
index|[
name|WPI_MAX_PWR_INDEX
operator|+
literal|1
index|]
init|=
block|{
literal|0xfb
block|,
literal|0xfb
block|,
literal|0xfb
block|,
literal|0xdb
block|,
literal|0xdb
block|,
literal|0xbb
block|,
literal|0xbb
block|,
literal|0x9b
block|,
literal|0x9b
block|,
literal|0x7b
block|,
literal|0x7b
block|,
literal|0x7b
block|,
literal|0x7b
block|,
literal|0x5b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x1b
block|,
literal|0x1b
block|,
literal|0x1b
block|,
literal|0x73
block|,
literal|0x73
block|,
literal|0x73
block|,
literal|0x53
block|,
literal|0x53
block|,
literal|0x53
block|,
literal|0x53
block|,
literal|0x53
block|,
literal|0x33
block|,
literal|0x33
block|,
literal|0x33
block|,
literal|0x33
block|,
literal|0x13
block|,
literal|0x13
block|,
literal|0x13
block|,
literal|0x13
block|,
literal|0x13
block|,
literal|0xab
block|,
literal|0xab
block|,
literal|0xab
block|,
literal|0x8b
block|,
literal|0x8b
block|,
literal|0x8b
block|,
literal|0x8b
block|,
literal|0x6b
block|,
literal|0x6b
block|,
literal|0x6b
block|,
literal|0x6b
block|,
literal|0x4b
block|,
literal|0x4b
block|,
literal|0x4b
block|,
literal|0x4b
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0x2b
block|,
literal|0x0b
block|,
literal|0x0b
block|,
literal|0x0b
block|,
literal|0x0b
block|,
literal|0x83
block|,
literal|0x83
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x63
block|,
literal|0x43
block|,
literal|0x43
block|,
literal|0x43
block|,
literal|0x43
block|,
literal|0x23
block|,
literal|0x23
block|,
literal|0x23
block|,
literal|0x23
block|,
literal|0x03
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * DSP pre-DAC gain values from highest to lowest power (values obtained  * from the reference driver.)  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|uint8_t
name|wpi_dsp_gain_2ghz
index|[
name|WPI_MAX_PWR_INDEX
operator|+
literal|1
index|]
init|=
block|{
literal|0x7f
block|,
literal|0x7f
block|,
literal|0x7f
block|,
literal|0x7f
block|,
literal|0x7d
block|,
literal|0x6e
block|,
literal|0x69
block|,
literal|0x62
block|,
literal|0x7d
block|,
literal|0x73
block|,
literal|0x6c
block|,
literal|0x63
block|,
literal|0x77
block|,
literal|0x6f
block|,
literal|0x69
block|,
literal|0x61
block|,
literal|0x5c
block|,
literal|0x6a
block|,
literal|0x64
block|,
literal|0x78
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x7d
block|,
literal|0x77
block|,
literal|0x70
block|,
literal|0x6a
block|,
literal|0x65
block|,
literal|0x61
block|,
literal|0x5b
block|,
literal|0x6b
block|,
literal|0x79
block|,
literal|0x73
block|,
literal|0x6d
block|,
literal|0x7f
block|,
literal|0x79
block|,
literal|0x73
block|,
literal|0x6c
block|,
literal|0x66
block|,
literal|0x60
block|,
literal|0x5c
block|,
literal|0x6e
block|,
literal|0x68
block|,
literal|0x62
block|,
literal|0x74
block|,
literal|0x7d
block|,
literal|0x77
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x65
block|,
literal|0x60
block|,
literal|0x71
block|,
literal|0x6a
block|,
literal|0x66
block|,
literal|0x5f
block|,
literal|0x71
block|,
literal|0x6a
block|,
literal|0x66
block|,
literal|0x5f
block|,
literal|0x71
block|,
literal|0x6a
block|,
literal|0x66
block|,
literal|0x5f
block|,
literal|0x71
block|,
literal|0x6a
block|,
literal|0x66
block|,
literal|0x5f
block|,
literal|0x71
block|,
literal|0x6a
block|,
literal|0x66
block|,
literal|0x5f
block|,
literal|0x71
block|,
literal|0x6a
block|,
literal|0x66
block|,
literal|0x5f
block|,
literal|0x71
block|,
literal|0x6a
block|,
literal|0x66
block|,
literal|0x5f
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uint8_t
name|wpi_dsp_gain_5ghz
index|[
name|WPI_MAX_PWR_INDEX
operator|+
literal|1
index|]
init|=
block|{
literal|0x7f
block|,
literal|0x78
block|,
literal|0x72
block|,
literal|0x77
block|,
literal|0x65
block|,
literal|0x71
block|,
literal|0x66
block|,
literal|0x72
block|,
literal|0x67
block|,
literal|0x75
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x5c
block|,
literal|0x6c
block|,
literal|0x7d
block|,
literal|0x76
block|,
literal|0x6d
block|,
literal|0x66
block|,
literal|0x60
block|,
literal|0x5a
block|,
literal|0x68
block|,
literal|0x62
block|,
literal|0x5c
block|,
literal|0x76
block|,
literal|0x6f
block|,
literal|0x68
block|,
literal|0x7e
block|,
literal|0x79
block|,
literal|0x71
block|,
literal|0x69
block|,
literal|0x63
block|,
literal|0x76
block|,
literal|0x6f
block|,
literal|0x68
block|,
literal|0x62
block|,
literal|0x74
block|,
literal|0x6d
block|,
literal|0x66
block|,
literal|0x62
block|,
literal|0x5d
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x78
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x78
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x78
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x78
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x78
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x78
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x78
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x78
block|,
literal|0x71
block|,
literal|0x6b
block|,
literal|0x63
block|,
literal|0x78
block|}
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|WPI_READ
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_space_read_4((sc)->sc_st, (sc)->sc_sh, (reg))
end_define

begin_define
define|#
directive|define
name|WPI_WRITE
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_space_write_4((sc)->sc_st, (sc)->sc_sh, (reg), (val))
end_define

begin_define
define|#
directive|define
name|WPI_WRITE_REGION_4
parameter_list|(
name|sc
parameter_list|,
name|offset
parameter_list|,
name|datap
parameter_list|,
name|count
parameter_list|)
define|\
value|bus_space_write_region_4((sc)->sc_st, (sc)->sc_sh, (offset),	\ 			     (datap), (count))
end_define

end_unit

