begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2005  *	Damien Bergamini<damien.bergamini@free.fr>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_struct
struct|struct
name|ural_node
block|{
name|struct
name|ieee80211_node
name|ni
decl_stmt|;
name|struct
name|ieee80211_amrr_node
name|amn
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|URAL_NODE
parameter_list|(
name|ni
parameter_list|)
value|((struct ural_node *)(ni))
end_define

begin_struct
struct|struct
name|ural_vap
block|{
name|struct
name|ieee80211vap
name|vap
decl_stmt|;
name|struct
name|ieee80211_beacon_offsets
name|bo
decl_stmt|;
name|struct
name|ieee80211_amrr
name|amrr
decl_stmt|;
name|int
function_decl|(
modifier|*
name|newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|URAL_VAP
parameter_list|(
name|vap
parameter_list|)
value|((struct ural_vap *)(vap))
end_define

begin_struct
struct|struct
name|ural_config_copy_chan
block|{
name|uint32_t
name|chan_to_ieee
decl_stmt|;
name|enum
name|ieee80211_phymode
name|chan_to_mode
decl_stmt|;
name|uint8_t
name|chan_is_5ghz
range|:
literal|1
decl_stmt|;
name|uint8_t
name|chan_is_2ghz
range|:
literal|1
decl_stmt|;
name|uint8_t
name|chan_is_b
range|:
literal|1
decl_stmt|;
name|uint8_t
name|chan_is_a
range|:
literal|1
decl_stmt|;
name|uint8_t
name|chan_is_g
range|:
literal|1
decl_stmt|;
name|uint8_t
name|unused
range|:
literal|3
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ural_config_copy_bss
block|{
name|uint16_t
name|ni_intval
decl_stmt|;
name|uint8_t
name|ni_bssid
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|fixed_rate_none
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ural_config_copy
block|{
name|struct
name|ural_config_copy_chan
name|ic_curchan
decl_stmt|;
name|struct
name|ural_config_copy_chan
name|ic_bsschan
decl_stmt|;
name|struct
name|ural_config_copy_bss
name|iv_bss
decl_stmt|;
name|enum
name|ieee80211_opmode
name|ic_opmode
decl_stmt|;
name|uint32_t
name|ic_flags
decl_stmt|;
name|uint32_t
name|if_flags
decl_stmt|;
name|uint16_t
name|ic_txpowlimit
decl_stmt|;
name|uint16_t
name|ic_curmode
decl_stmt|;
name|uint8_t
name|ic_myaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|if_broadcastaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ural_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|uint8_t
name|wr_antenna
decl_stmt|;
name|uint8_t
name|wr_antsignal
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RAL_RX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	     (1<< IEEE80211_RADIOTAP_RATE) |				\ 	     (1<< IEEE80211_RADIOTAP_CHANNEL) |			\ 	     (1<< IEEE80211_RADIOTAP_ANTENNA) |			\ 	     (1<< IEEE80211_RADIOTAP_DB_ANTSIGNAL))
end_define

begin_struct
struct|struct
name|ural_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint8_t
name|wt_rate
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
name|uint8_t
name|wt_antenna
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RAL_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	     (1<< IEEE80211_RADIOTAP_RATE) |				\ 	     (1<< IEEE80211_RADIOTAP_CHANNEL) |			\ 	     (1<< IEEE80211_RADIOTAP_ANTENNA))
end_define

begin_struct
struct|struct
name|ural_bbp_prom
block|{
name|uint8_t
name|val
decl_stmt|;
name|uint8_t
name|reg
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|ural_ifq
block|{
name|struct
name|mbuf
modifier|*
name|ifq_head
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|ifq_tail
decl_stmt|;
name|uint16_t
name|ifq_len
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|URAL_BULK_DT_WR
block|,
name|URAL_BULK_DT_RD
block|,
name|URAL_BULK_CS_WR
block|,
name|URAL_BULK_CS_RD
block|,
name|URAL_N_TRANSFER
init|=
literal|4
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ural_softc
block|{
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|struct
name|ural_ifq
name|sc_tx_queue
decl_stmt|;
name|struct
name|usb2_config_td
name|sc_config_td
decl_stmt|;
name|struct
name|ural_tx_desc
name|sc_tx_desc
decl_stmt|;
name|struct
name|ural_rx_desc
name|sc_rx_desc
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|struct
name|usb2_callout
name|sc_watchdog
decl_stmt|;
name|struct
name|ural_bbp_prom
name|sc_bbp_prom
index|[
literal|16
index|]
decl_stmt|;
name|struct
name|ural_rx_radiotap_header
name|sc_rxtap
decl_stmt|;
name|struct
name|ural_tx_radiotap_header
name|sc_txtap
decl_stmt|;
name|struct
name|usb2_xfer
modifier|*
name|sc_xfer
index|[
name|URAL_N_TRANSFER
index|]
decl_stmt|;
name|struct
name|usb2_device
modifier|*
name|sc_udev
decl_stmt|;
specifier|const
name|struct
name|ieee80211_rate_table
modifier|*
name|sc_rates
decl_stmt|;
name|enum
name|ieee80211_state
name|sc_ns_state
decl_stmt|;
name|uint32_t
name|sc_unit
decl_stmt|;
name|uint32_t
name|sc_asic_rev
decl_stmt|;
name|uint32_t
name|sc_rf_regs
index|[
literal|4
index|]
decl_stmt|;
name|int
name|sc_ns_arg
decl_stmt|;
name|uint16_t
name|sc_flags
decl_stmt|;
define|#
directive|define
name|URAL_FLAG_READ_STALL
value|0x0001
define|#
directive|define
name|URAL_FLAG_WRITE_STALL
value|0x0002
define|#
directive|define
name|URAL_FLAG_LL_READY
value|0x0004
define|#
directive|define
name|URAL_FLAG_HL_READY
value|0x0008
define|#
directive|define
name|URAL_FLAG_WAIT_COMMAND
value|0x0010
name|uint16_t
name|sc_txtap_len
decl_stmt|;
name|uint16_t
name|sc_rxtap_len
decl_stmt|;
name|uint16_t
name|sc_sta
index|[
literal|11
index|]
decl_stmt|;
name|uint8_t
name|sc_rf_rev
decl_stmt|;
name|uint8_t
name|sc_txpow
index|[
literal|14
index|]
decl_stmt|;
name|uint8_t
name|sc_led_mode
decl_stmt|;
name|uint8_t
name|sc_hw_radio
decl_stmt|;
name|uint8_t
name|sc_rx_ant
decl_stmt|;
name|uint8_t
name|sc_tx_ant
decl_stmt|;
name|uint8_t
name|sc_nb_ant
decl_stmt|;
name|uint8_t
name|sc_amrr_timer
decl_stmt|;
name|uint8_t
name|sc_myaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|char
name|sc_name
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

end_unit

