begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004 M. Warner Losh.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification, immediately at the beginning of the file.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/* XXX should audit this file to see if additional copyrights needed */
end_comment

begin_enum
enum|enum
name|fdc_type
block|{
name|FDC_NE765
block|,
name|FDC_ENHANCED
block|,
name|FDC_UNKNOWN
init|=
operator|-
literal|1
block|}
enum|;
end_enum

begin_enum
enum|enum
name|fdc_states
block|{
name|DEVIDLE
block|,
name|FINDWORK
block|,
name|DOSEEK
block|,
name|SEEKCOMPLETE
block|,
name|IOCOMPLETE
block|,
name|RECALCOMPLETE
block|,
name|STARTRECAL
block|,
name|RESETCTLR
block|,
name|SEEKWAIT
block|,
name|RECALWAIT
block|,
name|MOTORWAIT
block|,
name|IOTIMEDOUT
block|,
name|RESETCOMPLETE
block|,
name|PIOREAD
block|}
enum|;
end_enum

begin_ifdef
ifdef|#
directive|ifdef
name|FDC_DEBUG
end_ifdef

begin_decl_stmt
specifier|static
name|char
specifier|const
modifier|*
specifier|const
name|fdstates
index|[]
init|=
block|{
literal|"DEVIDLE"
block|,
literal|"FINDWORK"
block|,
literal|"DOSEEK"
block|,
literal|"SEEKCOMPLETE"
block|,
literal|"IOCOMPLETE"
block|,
literal|"RECALCOMPLETE"
block|,
literal|"STARTRECAL"
block|,
literal|"RESETCTLR"
block|,
literal|"SEEKWAIT"
block|,
literal|"RECALWAIT"
block|,
literal|"MOTORWAIT"
block|,
literal|"IOTIMEDOUT"
block|,
literal|"RESETCOMPLETE"
block|,
literal|"PIOREAD"
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Per controller structure (softc).  */
end_comment

begin_struct
struct|struct
name|fdc_data
block|{
name|int
name|fdcu
decl_stmt|;
comment|/* our unit number */
name|int
name|dmacnt
decl_stmt|;
name|int
name|dmachan
decl_stmt|;
name|int
name|flags
decl_stmt|;
define|#
directive|define
name|FDC_STAT_VALID
value|0x08
define|#
directive|define
name|FDC_HAS_FIFO
value|0x10
define|#
directive|define
name|FDC_NEEDS_RESET
value|0x20
define|#
directive|define
name|FDC_NODMA
value|0x40
define|#
directive|define
name|FDC_ISPNP
value|0x80
define|#
directive|define
name|FDC_ISPCMCIA
value|0x100
name|struct
name|fd_data
modifier|*
name|fd
decl_stmt|;
name|int
name|fdu
decl_stmt|;
comment|/* the active drive	*/
name|enum
name|fdc_states
name|state
decl_stmt|;
name|int
name|retry
decl_stmt|;
name|int
name|fdout
decl_stmt|;
comment|/* mirror of the w/o digital output reg */
name|u_int
name|status
index|[
literal|7
index|]
decl_stmt|;
comment|/* copy of the registers */
name|enum
name|fdc_type
name|fdct
decl_stmt|;
comment|/* chip version of FDC */
name|int
name|fdc_errs
decl_stmt|;
comment|/* number of logged errors */
name|int
name|dma_overruns
decl_stmt|;
comment|/* number of DMA overruns */
name|struct
name|bio_queue_head
name|head
decl_stmt|;
name|struct
name|bio
modifier|*
name|bp
decl_stmt|;
comment|/* active buffer */
name|struct
name|resource
modifier|*
name|res_ioport
decl_stmt|,
modifier|*
name|res_ctl
decl_stmt|,
modifier|*
name|res_irq
decl_stmt|,
modifier|*
name|res_drq
decl_stmt|;
name|int
name|rid_ioport
decl_stmt|,
name|rid_ctl
decl_stmt|,
name|rid_irq
decl_stmt|,
name|rid_drq
decl_stmt|;
name|int
name|port_off
decl_stmt|;
name|bus_space_tag_t
name|portt
decl_stmt|;
name|bus_space_handle_t
name|porth
decl_stmt|;
name|bus_space_tag_t
name|ctlt
decl_stmt|;
name|bus_space_handle_t
name|ctlh
decl_stmt|;
name|void
modifier|*
name|fdc_intr
decl_stmt|;
name|struct
name|device
modifier|*
name|fdc_dev
decl_stmt|;
name|void
function_decl|(
modifier|*
name|fdctl_wr
function_decl|)
parameter_list|(
name|struct
name|fdc_data
modifier|*
name|fdc
parameter_list|,
name|u_int8_t
name|v
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|int
name|fdu_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|fdcu_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|fdsu_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|fd_data
modifier|*
name|fd_p
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|fdc_data
modifier|*
name|fdc_p
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|enum
name|fdc_type
name|fdc_t
typedef|;
end_typedef

begin_comment
comment|/* error returns for fd_cmd() */
end_comment

begin_define
define|#
directive|define
name|FD_FAILED
value|-1
end_define

begin_define
define|#
directive|define
name|FD_NOT_VALID
value|-2
end_define

begin_define
define|#
directive|define
name|FDC_ERRMAX
value|100
end_define

begin_comment
comment|/* do not log more */
end_comment

begin_decl_stmt
specifier|extern
name|devclass_t
name|fdc_devclass
decl_stmt|;
end_decl_stmt

begin_enum
enum|enum
name|fdc_device_ivars
block|{
name|FDC_IVAR_FDUNIT
block|,
name|FDC_IVAR_FDTYPE
block|, }
enum|;
end_enum

begin_expr_stmt
name|__BUS_ACCESSOR
argument_list|(
name|fdc
argument_list|,
name|fdunit
argument_list|,
name|FDC
argument_list|,
name|FDUNIT
argument_list|,
name|int
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__BUS_ACCESSOR
argument_list|(
name|fdc
argument_list|,
name|fdtype
argument_list|,
name|FDC
argument_list|,
name|FDTYPE
argument_list|,
name|int
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|int
name|fdc_alloc_resources
parameter_list|(
name|struct
name|fdc_data
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fdout_wr
parameter_list|(
name|fdc_p
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fd_cmd
parameter_list|(
name|struct
name|fdc_data
modifier|*
parameter_list|,
name|int
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fdc_release_resources
parameter_list|(
name|struct
name|fdc_data
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fdc_attach
parameter_list|(
name|device_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fdc_hints_probe
parameter_list|(
name|device_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fdc_detach
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|device_t
name|fdc_add_child
parameter_list|(
name|device_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fdc_initial_reset
parameter_list|(
name|struct
name|fdc_data
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fdc_print_child
parameter_list|(
name|device_t
parameter_list|,
name|device_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fdc_read_ivar
parameter_list|(
name|device_t
parameter_list|,
name|device_t
parameter_list|,
name|int
parameter_list|,
name|uintptr_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fdc_write_ivar
parameter_list|(
name|device_t
parameter_list|,
name|device_t
parameter_list|,
name|int
parameter_list|,
name|uintptr_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fdc_isa_alloc_resources
parameter_list|(
name|device_t
parameter_list|,
name|struct
name|fdc_data
modifier|*
parameter_list|)
function_decl|;
end_function_decl

end_unit

