begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2016 Stanislav Galabov.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MTKSWITCHVAR_H__
end_ifndef

begin_define
define|#
directive|define
name|__MTKSWITCHVAR_H__
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|MTK_SWITCH_NONE
block|,
name|MTK_SWITCH_RT3050
block|,
name|MTK_SWITCH_RT3352
block|,
name|MTK_SWITCH_RT5350
block|,
name|MTK_SWITCH_MT7620
block|,
name|MTK_SWITCH_MT7621
block|,
name|MTK_SWITCH_MT7628
block|, }
name|mtk_switch_type
typedef|;
end_typedef

begin_define
define|#
directive|define
name|MTK_IS_SWITCH
parameter_list|(
name|_sc
parameter_list|,
name|_type
parameter_list|)
define|\
value|(!!((_sc)->sc_switchtype == MTK_SWITCH_ ## _type))
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_MAX_PORTS
value|7
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_MAX_PHYS
value|7
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_CPU_PORT
value|6
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_LINK_UP
value|(1<<0)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_SPEED_MASK
value|(3<<1)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_SPEED_10
value|(0<<1)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_SPEED_100
value|(1<<1)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_SPEED_1000
value|(2<<1)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_DUPLEX
value|(1<<3)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_TXFLOW
value|(1<<4)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_RXFLOW
value|(1<<5)
end_define

begin_struct
struct|struct
name|mtkswitch_softc
block|{
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|resource
modifier|*
name|sc_res
decl_stmt|;
name|int
name|numphys
decl_stmt|;
name|uint32_t
name|phymap
decl_stmt|;
name|int
name|numports
decl_stmt|;
name|uint32_t
name|portmap
decl_stmt|;
name|int
name|cpuport
decl_stmt|;
name|uint32_t
name|valid_vlans
decl_stmt|;
name|mtk_switch_type
name|sc_switchtype
decl_stmt|;
name|char
modifier|*
name|ifname
index|[
name|MTKSWITCH_MAX_PHYS
index|]
decl_stmt|;
name|device_t
name|miibus
index|[
name|MTKSWITCH_MAX_PHYS
index|]
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
index|[
name|MTKSWITCH_MAX_PHYS
index|]
decl_stmt|;
name|struct
name|callout
name|callout_tick
decl_stmt|;
name|etherswitch_info_t
name|info
decl_stmt|;
name|uint32_t
name|vlan_mode
decl_stmt|;
struct|struct
block|{
comment|/* Global setup */
name|int
function_decl|(
modifier|*
name|mtkswitch_reset
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mtkswitch_hw_setup
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mtkswitch_hw_global_setup
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|)
function_decl|;
comment|/* Port functions */
name|void
function_decl|(
modifier|*
name|mtkswitch_port_init
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|mtkswitch_get_port_status
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* ATU functions */
name|int
function_decl|(
modifier|*
name|mtkswitch_atu_flush
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|)
function_decl|;
comment|/* VLAN functions */
name|int
function_decl|(
modifier|*
name|mtkswitch_port_vlan_setup
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|etherswitch_port_t
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mtkswitch_port_vlan_get
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|etherswitch_port_t
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|mtkswitch_vlan_init_hw
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mtkswitch_vlan_getvgroup
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|etherswitch_vlangroup_t
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mtkswitch_vlan_setvgroup
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|etherswitch_vlangroup_t
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mtkswitch_vlan_get_pvid
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mtkswitch_vlan_set_pvid
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* PHY functions */
name|int
function_decl|(
modifier|*
name|mtkswitch_phy_read
function_decl|)
parameter_list|(
name|device_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mtkswitch_phy_write
function_decl|)
parameter_list|(
name|device_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* Register functions */
name|int
function_decl|(
modifier|*
name|mtkswitch_reg_read
function_decl|)
parameter_list|(
name|device_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mtkswitch_reg_write
function_decl|)
parameter_list|(
name|device_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* Internal register access functions */
name|uint32_t
function_decl|(
modifier|*
name|mtkswitch_read
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|mtkswitch_write
function_decl|)
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
block|}
name|hal
struct|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MTKSWITCH_LOCK
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_lock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_unlock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_LOCK_ASSERT
parameter_list|(
name|_sc
parameter_list|,
name|_what
parameter_list|)
define|\
value|mtx_assert(&(_sc)->sc_mtx, (_what))
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_TRYLOCK
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_trylock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_READ
parameter_list|(
name|_sc
parameter_list|,
name|_reg
parameter_list|)
define|\
value|bus_read_4((_sc)->sc_res, (_reg))
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_WRITE
parameter_list|(
name|_sc
parameter_list|,
name|_reg
parameter_list|,
name|_val
parameter_list|)
define|\
value|bus_write_4((_sc)->sc_res, (_reg), (_val))
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_MOD
parameter_list|(
name|_sc
parameter_list|,
name|_reg
parameter_list|,
name|_clr
parameter_list|,
name|_set
parameter_list|)
define|\
value|MTKSWITCH_WRITE((_sc), (_reg),	\ 	        ((MTKSWITCH_READ((_sc), (_reg))& ~(_clr)) | (_set))
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_REG32
parameter_list|(
name|addr
parameter_list|)
value|((addr)& ~(0x3))
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_IS_HI16
parameter_list|(
name|addr
parameter_list|)
value|(((addr)& 0x3)> 0x1)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_HI16
parameter_list|(
name|x
parameter_list|)
value|(((x)>> 16)& 0xffff)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_LO16
parameter_list|(
name|x
parameter_list|)
value|((x)& 0xffff)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_TO_HI16
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0xffff)<< 16)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_TO_LO16
parameter_list|(
name|x
parameter_list|)
value|((x)& 0xffff)
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_HI16_MSK
value|0xffff0000
end_define

begin_define
define|#
directive|define
name|MTKSWITCH_LO16_MSK
value|0x0000ffff
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|DEBUG
argument_list|)
end_if

begin_define
define|#
directive|define
name|DPRINTF
parameter_list|(
name|dev
parameter_list|,
name|args
modifier|...
parameter_list|)
value|device_printf(dev, args)
end_define

begin_define
define|#
directive|define
name|DEVERR
parameter_list|(
name|dev
parameter_list|,
name|err
parameter_list|,
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
value|do {	\ 	    if (err != 0) device_printf(dev, fmt, err, args);	\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|DEBUG_INCRVAR
parameter_list|(
name|var
parameter_list|)
value|do {	\ 	    var++;				\ 	} while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DPRINTF
parameter_list|(
name|dev
parameter_list|,
name|args
modifier|...
parameter_list|)
end_define

begin_define
define|#
directive|define
name|DEVERR
parameter_list|(
name|dev
parameter_list|,
name|err
parameter_list|,
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
end_define

begin_define
define|#
directive|define
name|DEBUG_INCRVAR
parameter_list|(
name|var
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|void
name|mtk_attach_switch_rt3050
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mtk_attach_switch_mt7620
parameter_list|(
name|struct
name|mtkswitch_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __MTKSWITCHVAR_H__ */
end_comment

end_unit

