begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2014 Jakub Wojciech Klama<jceel@FreeBSD.org>  * Copyright (c) 2015-2016 Vladimir Kondratyev<wulf@cicgroup.ru>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEV_EVDEV_EVDEV_PRIVATE_H
end_ifndef

begin_define
define|#
directive|define
name|_DEV_EVDEV_EVDEV_PRIVATE_H
end_define

begin_include
include|#
directive|include
file|<sys/bitstring.h>
end_include

begin_include
include|#
directive|include
file|<sys/kbio.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<sys/selinfo.h>
end_include

begin_include
include|#
directive|include
file|<dev/evdev/evdev.h>
end_include

begin_include
include|#
directive|include
file|<dev/evdev/input.h>
end_include

begin_include
include|#
directive|include
file|<dev/kbd/kbdreg.h>
end_include

begin_define
define|#
directive|define
name|NAMELEN
value|80
end_define

begin_comment
comment|/*  * bitstr_t implementation must be identical to one found in EVIOCG*  * libevdev ioctls. Our bitstring(3) API is compatible since r299090.  */
end_comment

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|bitstr_t
argument_list|)
operator|==
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
argument_list|,
literal|"bitstr_t size mismatch"
argument_list|)
assert|;
end_assert

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_EVDEV
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct_decl
struct_decl|struct
name|evdev_client
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|evdev_mt
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|CURRENT_MT_SLOT
parameter_list|(
name|evdev
parameter_list|)
value|((evdev)->ev_absinfo[ABS_MT_SLOT].value)
end_define

begin_define
define|#
directive|define
name|MAXIMAL_MT_SLOT
parameter_list|(
name|evdev
parameter_list|)
value|((evdev)->ev_absinfo[ABS_MT_SLOT].maximum)
end_define

begin_enum
enum|enum
name|evdev_key_events
block|{
name|KEY_EVENT_UP
block|,
name|KEY_EVENT_DOWN
block|,
name|KEY_EVENT_REPEAT
block|}
enum|;
end_enum

begin_comment
comment|/* evdev clock IDs in Linux semantic */
end_comment

begin_enum
enum|enum
name|evdev_clock_id
block|{
name|EV_CLOCK_REALTIME
init|=
literal|0
block|,
comment|/* UTC clock */
name|EV_CLOCK_MONOTONIC
block|,
comment|/* monotonic, stops on suspend */
name|EV_CLOCK_BOOTTIME
comment|/* monotonic, suspend-awared */
block|}
enum|;
end_enum

begin_enum
enum|enum
name|evdev_lock_type
block|{
name|EV_LOCK_INTERNAL
init|=
literal|0
block|,
comment|/* Internal evdev mutex */
name|EV_LOCK_MTX
block|,
comment|/* Driver`s mutex */
block|}
enum|;
end_enum

begin_struct
struct|struct
name|evdev_dev
block|{
name|char
name|ev_name
index|[
name|NAMELEN
index|]
decl_stmt|;
name|char
name|ev_shortname
index|[
name|NAMELEN
index|]
decl_stmt|;
name|char
name|ev_serial
index|[
name|NAMELEN
index|]
decl_stmt|;
name|struct
name|cdev
modifier|*
name|ev_cdev
decl_stmt|;
name|int
name|ev_unit
decl_stmt|;
name|enum
name|evdev_lock_type
name|ev_lock_type
decl_stmt|;
name|struct
name|mtx
modifier|*
name|ev_lock
decl_stmt|;
name|struct
name|mtx
name|ev_mtx
decl_stmt|;
name|struct
name|input_id
name|ev_id
decl_stmt|;
name|struct
name|evdev_client
modifier|*
name|ev_grabber
decl_stmt|;
name|size_t
name|ev_report_size
decl_stmt|;
comment|/* Supported features: */
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_prop_flags
parameter_list|,
name|INPUT_PROP_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_type_flags
parameter_list|,
name|EV_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_key_flags
parameter_list|,
name|KEY_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_rel_flags
parameter_list|,
name|REL_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_abs_flags
parameter_list|,
name|ABS_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_msc_flags
parameter_list|,
name|MSC_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_led_flags
parameter_list|,
name|LED_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_snd_flags
parameter_list|,
name|SND_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_sw_flags
parameter_list|,
name|SW_CNT
parameter_list|)
function_decl|;
name|struct
name|input_absinfo
modifier|*
name|ev_absinfo
decl_stmt|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_flags
parameter_list|,
name|EVDEV_FLAG_CNT
parameter_list|)
function_decl|;
comment|/* Repeat parameters& callout: */
name|int
name|ev_rep
index|[
name|REP_CNT
index|]
decl_stmt|;
name|struct
name|callout
name|ev_rep_callout
decl_stmt|;
name|uint16_t
name|ev_rep_key
decl_stmt|;
comment|/* State: */
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_key_states
parameter_list|,
name|KEY_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_led_states
parameter_list|,
name|LED_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_snd_states
parameter_list|,
name|SND_CNT
parameter_list|)
function_decl|;
name|bitstr_t
name|bit_decl
parameter_list|(
name|ev_sw_states
parameter_list|,
name|SW_CNT
parameter_list|)
function_decl|;
name|bool
name|ev_report_opened
decl_stmt|;
comment|/* Multitouch protocol type B state: */
name|struct
name|evdev_mt
modifier|*
name|ev_mt
decl_stmt|;
comment|/* Counters: */
name|uint64_t
name|ev_event_count
decl_stmt|;
name|uint64_t
name|ev_report_count
decl_stmt|;
comment|/* Parent driver callbacks: */
specifier|const
name|struct
name|evdev_methods
modifier|*
name|ev_methods
decl_stmt|;
name|void
modifier|*
name|ev_softc
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|evdev_dev
argument_list|)
name|ev_link
expr_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|evdev_client
argument_list|)
name|ev_clients
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|EVDEV_LOCK
parameter_list|(
name|evdev
parameter_list|)
value|mtx_lock((evdev)->ev_lock)
end_define

begin_define
define|#
directive|define
name|EVDEV_UNLOCK
parameter_list|(
name|evdev
parameter_list|)
value|mtx_unlock((evdev)->ev_lock)
end_define

begin_define
define|#
directive|define
name|EVDEV_LOCK_ASSERT
parameter_list|(
name|evdev
parameter_list|)
value|mtx_assert((evdev)->ev_lock, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|EVDEV_ENTER
parameter_list|(
name|evdev
parameter_list|)
value|do {					\ 	if ((evdev)->ev_lock_type == EV_LOCK_INTERNAL)			\ 		EVDEV_LOCK(evdev);					\ 	else								\ 		EVDEV_LOCK_ASSERT(evdev);				\ } while (0)
end_define

begin_define
define|#
directive|define
name|EVDEV_EXIT
parameter_list|(
name|evdev
parameter_list|)
value|do {					\ 	if ((evdev)->ev_lock_type == EV_LOCK_INTERNAL)			\ 		EVDEV_UNLOCK(evdev);					\ } while (0)
end_define

begin_struct
struct|struct
name|evdev_client
block|{
name|struct
name|evdev_dev
modifier|*
name|ec_evdev
decl_stmt|;
name|struct
name|mtx
name|ec_buffer_mtx
decl_stmt|;
name|size_t
name|ec_buffer_size
decl_stmt|;
name|size_t
name|ec_buffer_head
decl_stmt|;
name|size_t
name|ec_buffer_tail
decl_stmt|;
name|size_t
name|ec_buffer_ready
decl_stmt|;
name|enum
name|evdev_clock_id
name|ec_clock_id
decl_stmt|;
name|struct
name|selinfo
name|ec_selp
decl_stmt|;
name|struct
name|sigio
modifier|*
name|ec_sigio
decl_stmt|;
name|bool
name|ec_async
decl_stmt|;
name|bool
name|ec_revoked
decl_stmt|;
name|bool
name|ec_blocked
decl_stmt|;
name|bool
name|ec_selected
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|evdev_client
argument_list|)
name|ec_link
expr_stmt|;
name|struct
name|input_event
name|ec_buffer
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|EVDEV_CLIENT_LOCKQ
parameter_list|(
name|client
parameter_list|)
value|mtx_lock(&(client)->ec_buffer_mtx)
end_define

begin_define
define|#
directive|define
name|EVDEV_CLIENT_UNLOCKQ
parameter_list|(
name|client
parameter_list|)
value|mtx_unlock(&(client)->ec_buffer_mtx)
end_define

begin_define
define|#
directive|define
name|EVDEV_CLIENT_LOCKQ_ASSERT
parameter_list|(
name|client
parameter_list|)
define|\
value|mtx_assert(&(client)->ec_buffer_mtx, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|EVDEV_CLIENT_EMPTYQ
parameter_list|(
name|client
parameter_list|)
define|\
value|((client)->ec_buffer_head == (client)->ec_buffer_ready)
end_define

begin_define
define|#
directive|define
name|EVDEV_CLIENT_SIZEQ
parameter_list|(
name|client
parameter_list|)
define|\
value|(((client)->ec_buffer_ready + (client)->ec_buffer_size - \       (client)->ec_buffer_head) % (client)->ec_buffer_size)
end_define

begin_comment
comment|/* Input device interface: */
end_comment

begin_function_decl
name|void
name|evdev_send_event
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_inject_event
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_cdev_create
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_cdev_destroy
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|evdev_event_supported
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_abs_bit
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_absinfo
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|struct
name|input_absinfo
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Client interface: */
end_comment

begin_function_decl
name|int
name|evdev_register_client
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|struct
name|evdev_client
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_dispose_client
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|struct
name|evdev_client
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_grab_client
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|struct
name|evdev_client
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_release_client
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|struct
name|evdev_client
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_client_push
parameter_list|(
name|struct
name|evdev_client
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_notify_event
parameter_list|(
name|struct
name|evdev_client
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_revoke_client
parameter_list|(
name|struct
name|evdev_client
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Multitouch related functions: */
end_comment

begin_function_decl
name|void
name|evdev_mt_init
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_mt_free
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int32_t
name|evdev_get_last_mt_slot
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_last_mt_slot
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int32_t
name|evdev_get_mt_value
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|int32_t
parameter_list|,
name|int16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_mt_value
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|int32_t
parameter_list|,
name|int16_t
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_send_mt_compat
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_send_mt_autorel
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Utility functions: */
end_comment

begin_function_decl
name|void
name|evdev_client_dumpqueue
parameter_list|(
name|struct
name|evdev_client
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEV_EVDEV_EVDEV_PRIVATE_H */
end_comment

end_unit

