begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2014 Jakub Wojciech Klama<jceel@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEV_EVDEV_EVDEV_H
end_ifndef

begin_define
define|#
directive|define
name|_DEV_EVDEV_EVDEV_H
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/kbio.h>
end_include

begin_include
include|#
directive|include
file|<dev/evdev/input.h>
end_include

begin_include
include|#
directive|include
file|<dev/kbd/kbdreg.h>
end_include

begin_define
define|#
directive|define
name|NAMELEN
value|80
end_define

begin_struct_decl
struct_decl|struct
name|evdev_dev
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|int
function_decl|(
name|evdev_open_t
function_decl|)
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|evdev_close_t
function_decl|)
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|evdev_event_t
function_decl|)
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|evdev_keycode_t
function_decl|)
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|input_keymap_entry
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * Keyboard and mouse events recipient mask.  * evdev_rcpt_mask variable should be respected by keyboard and mouse drivers  * that are able to send events through both evdev and sysmouse/kbdmux  * interfaces so user can choose prefered one to not receive one event twice.  */
end_comment

begin_define
define|#
directive|define
name|EVDEV_RCPT_SYSMOUSE
value|(1<<0)
end_define

begin_define
define|#
directive|define
name|EVDEV_RCPT_KBDMUX
value|(1<<1)
end_define

begin_define
define|#
directive|define
name|EVDEV_RCPT_HW_MOUSE
value|(1<<2)
end_define

begin_define
define|#
directive|define
name|EVDEV_RCPT_HW_KBD
value|(1<<3)
end_define

begin_decl_stmt
specifier|extern
name|int
name|evdev_rcpt_mask
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|ABS_MT_FIRST
value|ABS_MT_TOUCH_MAJOR
end_define

begin_define
define|#
directive|define
name|ABS_MT_LAST
value|ABS_MT_TOOL_Y
end_define

begin_define
define|#
directive|define
name|ABS_IS_MT
parameter_list|(
name|x
parameter_list|)
value|((x)>= ABS_MT_FIRST&& (x)<= ABS_MT_LAST)
end_define

begin_define
define|#
directive|define
name|ABS_MT_INDEX
parameter_list|(
name|x
parameter_list|)
value|((x) - ABS_MT_FIRST)
end_define

begin_define
define|#
directive|define
name|MT_CNT
value|(ABS_MT_INDEX(ABS_MT_LAST) + 1)
end_define

begin_comment
comment|/* Multitouch protocol type A */
end_comment

begin_define
define|#
directive|define
name|MAX_MT_REPORTS
value|5
end_define

begin_comment
comment|/* Multitouch protocol type B interface */
end_comment

begin_define
define|#
directive|define
name|MAX_MT_SLOTS
value|16
end_define

begin_define
define|#
directive|define
name|EVDEV_FLAG_SOFTREPEAT
value|0x00
end_define

begin_comment
comment|/* use evdev to repeat keys */
end_comment

begin_define
define|#
directive|define
name|EVDEV_FLAG_MT_STCOMPAT
value|0x01
end_define

begin_comment
comment|/* autogenerate ST-compatible events 					 * for MT protocol type B reports */
end_comment

begin_define
define|#
directive|define
name|EVDEV_FLAG_MT_AUTOREL
value|0x02
end_define

begin_comment
comment|/* Autorelease MT-slots not listed in 					 * current MT protocol type B report */
end_comment

begin_define
define|#
directive|define
name|EVDEV_FLAG_MAX
value|0x1F
end_define

begin_define
define|#
directive|define
name|EVDEV_FLAG_CNT
value|(EVDEV_FLAG_MAX + 1)
end_define

begin_struct
struct|struct
name|evdev_methods
block|{
name|evdev_open_t
modifier|*
name|ev_open
decl_stmt|;
name|evdev_close_t
modifier|*
name|ev_close
decl_stmt|;
name|evdev_event_t
modifier|*
name|ev_event
decl_stmt|;
name|evdev_keycode_t
modifier|*
name|ev_get_keycode
decl_stmt|;
name|evdev_keycode_t
modifier|*
name|ev_set_keycode
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Input device interface: */
end_comment

begin_function_decl
name|struct
name|evdev_dev
modifier|*
name|evdev_alloc
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_free
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_name
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_id
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_phys
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_serial
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_methods
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
specifier|const
name|struct
name|evdev_methods
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_register
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_register_mtx
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|struct
name|mtx
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_unregister
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_push_event
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_prop
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_event
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_key
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_rel
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_abs
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|int32_t
parameter_list|,
name|int32_t
parameter_list|,
name|int32_t
parameter_list|,
name|int32_t
parameter_list|,
name|int32_t
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_msc
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_led
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_snd
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_sw
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_repeat_params
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|evdev_set_report_size
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_set_flag
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Multitouch related functions: */
end_comment

begin_function_decl
name|int32_t
name|evdev_get_mt_slot_by_tracking_id
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_nfingers
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_mt_compat
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_push_nfingers
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_push_mt_compat
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Utility functions: */
end_comment

begin_function_decl
name|uint16_t
name|evdev_hid2key
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_support_all_known_keys
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint16_t
name|evdev_scancode2key
parameter_list|(
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_push_mouse_btn
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_push_leds
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|evdev_push_repeats
parameter_list|(
name|struct
name|evdev_dev
modifier|*
parameter_list|,
name|keyboard_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|evdev_event_t
name|evdev_ev_kbd_event
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Event reporting shortcuts: */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|evdev_sync
parameter_list|(
name|struct
name|evdev_dev
modifier|*
name|evdev
parameter_list|)
block|{
return|return
operator|(
name|evdev_push_event
argument_list|(
name|evdev
argument_list|,
name|EV_SYN
argument_list|,
name|SYN_REPORT
argument_list|,
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|evdev_mt_sync
parameter_list|(
name|struct
name|evdev_dev
modifier|*
name|evdev
parameter_list|)
block|{
return|return
operator|(
name|evdev_push_event
argument_list|(
name|evdev
argument_list|,
name|EV_SYN
argument_list|,
name|SYN_MT_REPORT
argument_list|,
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|evdev_push_key
parameter_list|(
name|struct
name|evdev_dev
modifier|*
name|evdev
parameter_list|,
name|uint16_t
name|code
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
return|return
operator|(
name|evdev_push_event
argument_list|(
name|evdev
argument_list|,
name|EV_KEY
argument_list|,
name|code
argument_list|,
name|value
operator|!=
literal|0
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|evdev_push_rel
parameter_list|(
name|struct
name|evdev_dev
modifier|*
name|evdev
parameter_list|,
name|uint16_t
name|code
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
return|return
operator|(
name|evdev_push_event
argument_list|(
name|evdev
argument_list|,
name|EV_REL
argument_list|,
name|code
argument_list|,
name|value
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|evdev_push_abs
parameter_list|(
name|struct
name|evdev_dev
modifier|*
name|evdev
parameter_list|,
name|uint16_t
name|code
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
return|return
operator|(
name|evdev_push_event
argument_list|(
name|evdev
argument_list|,
name|EV_ABS
argument_list|,
name|code
argument_list|,
name|value
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|evdev_push_msc
parameter_list|(
name|struct
name|evdev_dev
modifier|*
name|evdev
parameter_list|,
name|uint16_t
name|code
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
return|return
operator|(
name|evdev_push_event
argument_list|(
name|evdev
argument_list|,
name|EV_MSC
argument_list|,
name|code
argument_list|,
name|value
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|evdev_push_led
parameter_list|(
name|struct
name|evdev_dev
modifier|*
name|evdev
parameter_list|,
name|uint16_t
name|code
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
return|return
operator|(
name|evdev_push_event
argument_list|(
name|evdev
argument_list|,
name|EV_LED
argument_list|,
name|code
argument_list|,
name|value
operator|!=
literal|0
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|evdev_push_snd
parameter_list|(
name|struct
name|evdev_dev
modifier|*
name|evdev
parameter_list|,
name|uint16_t
name|code
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
return|return
operator|(
name|evdev_push_event
argument_list|(
name|evdev
argument_list|,
name|EV_SND
argument_list|,
name|code
argument_list|,
name|value
operator|!=
literal|0
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|evdev_push_sw
parameter_list|(
name|struct
name|evdev_dev
modifier|*
name|evdev
parameter_list|,
name|uint16_t
name|code
parameter_list|,
name|int32_t
name|value
parameter_list|)
block|{
return|return
operator|(
name|evdev_push_event
argument_list|(
name|evdev
argument_list|,
name|EV_SW
argument_list|,
name|code
argument_list|,
name|value
operator|!=
literal|0
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEV_EVDEV_EVDEV_H */
end_comment

end_unit

