begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*  * Qlogic Host Adapter Inline Functions  *  * Copyright (c) 1999, 2000, 2001 by Matthew Jacob  * Feral Software  * All rights reserved.  * mjacob@feral.com  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice immediately at the beginning of the file, without modification,  *    this list of conditions, and the following disclaimer.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ISP_INLINE_H
end_ifndef

begin_define
define|#
directive|define
name|_ISP_INLINE_H
end_define

begin_comment
comment|/*  * Handle Functions.  * For each outstanding command there will be a non-zero handle.  * There will be at most isp_maxcmds handles, and isp_lasthdls  * will be a seed for the last handled allocated.  */
end_comment

begin_function_decl
specifier|static
name|INLINE
name|int
name|isp_save_xs
parameter_list|(
name|struct
name|ispsoftc
modifier|*
parameter_list|,
name|XS_T
modifier|*
parameter_list|,
name|u_int16_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|INLINE
name|XS_T
modifier|*
name|isp_find_xs
parameter_list|(
name|struct
name|ispsoftc
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|INLINE
name|u_int16_t
name|isp_find_handle
parameter_list|(
name|struct
name|ispsoftc
modifier|*
parameter_list|,
name|XS_T
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|INLINE
name|int
name|isp_handle_index
parameter_list|(
name|u_int16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|INLINE
name|void
name|isp_destroy_handle
parameter_list|(
name|struct
name|ispsoftc
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|INLINE
name|void
name|isp_remove_handle
parameter_list|(
name|struct
name|ispsoftc
modifier|*
parameter_list|,
name|XS_T
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|INLINE
name|int
name|isp_save_xs
parameter_list|(
name|struct
name|ispsoftc
modifier|*
name|isp
parameter_list|,
name|XS_T
modifier|*
name|xs
parameter_list|,
name|u_int16_t
modifier|*
name|handlep
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
name|isp
operator|->
name|isp_lasthdls
operator|,
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|isp
operator|->
name|isp_maxcmds
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isp
operator|->
name|isp_xflist
index|[
name|j
index|]
operator|==
name|NULL
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|++
name|j
operator|==
name|isp
operator|->
name|isp_maxcmds
condition|)
block|{
name|j
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|isp
operator|->
name|isp_maxcmds
condition|)
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
name|isp
operator|->
name|isp_xflist
index|[
name|j
index|]
operator|=
name|xs
expr_stmt|;
operator|*
name|handlep
operator|=
name|j
operator|+
literal|1
expr_stmt|;
if|if
condition|(
operator|++
name|j
operator|==
name|isp
operator|->
name|isp_maxcmds
condition|)
name|j
operator|=
literal|0
expr_stmt|;
name|isp
operator|->
name|isp_lasthdls
operator|=
operator|(
name|u_int16_t
operator|)
name|j
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|INLINE
name|XS_T
modifier|*
name|isp_find_xs
parameter_list|(
name|struct
name|ispsoftc
modifier|*
name|isp
parameter_list|,
name|u_int16_t
name|handle
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|<
literal|1
operator|||
name|handle
operator|>
operator|(
name|u_int16_t
operator|)
name|isp
operator|->
name|isp_maxcmds
condition|)
block|{
return|return
operator|(
name|NULL
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|isp
operator|->
name|isp_xflist
index|[
name|handle
operator|-
literal|1
index|]
operator|)
return|;
block|}
block|}
end_function

begin_function
specifier|static
name|INLINE
name|u_int16_t
name|isp_find_handle
parameter_list|(
name|struct
name|ispsoftc
modifier|*
name|isp
parameter_list|,
name|XS_T
modifier|*
name|xs
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
if|if
condition|(
name|xs
operator|!=
name|NULL
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|isp
operator|->
name|isp_maxcmds
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isp
operator|->
name|isp_xflist
index|[
name|i
index|]
operator|==
name|xs
condition|)
block|{
return|return
operator|(
operator|(
name|u_int16_t
operator|)
name|i
operator|+
literal|1
operator|)
return|;
block|}
block|}
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|INLINE
name|int
name|isp_handle_index
parameter_list|(
name|u_int16_t
name|handle
parameter_list|)
block|{
return|return
operator|(
name|handle
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|INLINE
name|void
name|isp_destroy_handle
parameter_list|(
name|struct
name|ispsoftc
modifier|*
name|isp
parameter_list|,
name|u_int16_t
name|handle
parameter_list|)
block|{
if|if
condition|(
name|handle
operator|>
literal|0
operator|&&
name|handle
operator|<=
operator|(
name|u_int16_t
operator|)
name|isp
operator|->
name|isp_maxcmds
condition|)
block|{
name|isp
operator|->
name|isp_xflist
index|[
name|isp_handle_index
argument_list|(
name|handle
argument_list|)
index|]
operator|=
name|NULL
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|INLINE
name|void
name|isp_remove_handle
parameter_list|(
name|struct
name|ispsoftc
modifier|*
name|isp
parameter_list|,
name|XS_T
modifier|*
name|xs
parameter_list|)
block|{
name|isp_destroy_handle
argument_list|(
name|isp
argument_list|,
name|isp_find_handle
argument_list|(
name|isp
argument_list|,
name|xs
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
specifier|static
name|INLINE
name|int
name|isp_getrqentry
parameter_list|(
name|struct
name|ispsoftc
modifier|*
parameter_list|,
name|u_int16_t
modifier|*
parameter_list|,
name|u_int16_t
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|INLINE
name|int
name|isp_getrqentry
parameter_list|(
name|struct
name|ispsoftc
modifier|*
name|isp
parameter_list|,
name|u_int16_t
modifier|*
name|iptrp
parameter_list|,
name|u_int16_t
modifier|*
name|optrp
parameter_list|,
name|void
modifier|*
modifier|*
name|resultp
parameter_list|)
block|{
specifier|volatile
name|u_int16_t
name|iptr
decl_stmt|,
name|optr
decl_stmt|;
name|optr
operator|=
name|isp
operator|->
name|isp_reqodx
operator|=
name|ISP_READ
argument_list|(
name|isp
argument_list|,
name|OUTMAILBOX4
argument_list|)
expr_stmt|;
name|iptr
operator|=
name|isp
operator|->
name|isp_reqidx
expr_stmt|;
operator|*
name|resultp
operator|=
name|ISP_QUEUE_ENTRY
argument_list|(
name|isp
operator|->
name|isp_rquest
argument_list|,
name|iptr
argument_list|)
expr_stmt|;
name|iptr
operator|=
name|ISP_NXT_QENTRY
argument_list|(
name|iptr
argument_list|,
name|RQUEST_QUEUE_LEN
argument_list|(
name|isp
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iptr
operator|==
name|optr
condition|)
block|{
return|return
operator|(
literal|1
operator|)
return|;
block|}
if|if
condition|(
name|optrp
condition|)
operator|*
name|optrp
operator|=
name|optr
expr_stmt|;
if|if
condition|(
name|iptrp
condition|)
operator|*
name|iptrp
operator|=
name|iptr
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function_decl
specifier|static
name|INLINE
name|void
name|isp_print_qentry
parameter_list|(
name|struct
name|ispsoftc
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|TBA
value|(4 * (((QENTRY_LEN>> 2) * 3) + 1) + 1)
end_define

begin_function
specifier|static
name|INLINE
name|void
name|isp_print_qentry
parameter_list|(
name|struct
name|ispsoftc
modifier|*
name|isp
parameter_list|,
name|char
modifier|*
name|msg
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|char
name|buf
index|[
name|TBA
index|]
decl_stmt|;
name|int
name|amt
decl_stmt|,
name|i
decl_stmt|,
name|j
decl_stmt|;
name|u_int8_t
modifier|*
name|ptr
init|=
name|arg
decl_stmt|;
name|isp_prt
argument_list|(
name|isp
argument_list|,
name|ISP_LOGALL
argument_list|,
literal|"%s index %d=>"
argument_list|,
name|msg
argument_list|,
name|idx
argument_list|)
expr_stmt|;
for|for
control|(
name|buf
index|[
literal|0
index|]
operator|=
literal|0
operator|,
name|amt
operator|=
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|buf
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|SNPRINTF
argument_list|(
name|buf
argument_list|,
name|TBA
argument_list|,
literal|"  "
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
operator|(
name|QENTRY_LEN
operator|>>
literal|2
operator|)
condition|;
name|j
operator|++
control|)
block|{
name|SNPRINTF
argument_list|(
name|buf
argument_list|,
name|TBA
argument_list|,
literal|"%s %02x"
argument_list|,
name|buf
argument_list|,
name|ptr
index|[
name|amt
operator|++
index|]
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
name|isp_prt
argument_list|(
name|isp
argument_list|,
name|ISP_LOGALL
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function_decl
specifier|static
name|INLINE
name|void
name|isp_print_bytes
parameter_list|(
name|struct
name|ispsoftc
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|INLINE
name|void
name|isp_print_bytes
parameter_list|(
name|struct
name|ispsoftc
modifier|*
name|isp
parameter_list|,
name|char
modifier|*
name|msg
parameter_list|,
name|int
name|amt
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|char
name|buf
index|[
literal|128
index|]
decl_stmt|;
name|u_int8_t
modifier|*
name|ptr
init|=
name|arg
decl_stmt|;
name|int
name|off
decl_stmt|;
if|if
condition|(
name|msg
condition|)
name|isp_prt
argument_list|(
name|isp
argument_list|,
name|ISP_LOGALL
argument_list|,
literal|"%s:"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|off
operator|=
literal|0
expr_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|off
operator|<
name|amt
condition|)
block|{
name|int
name|j
decl_stmt|,
name|to
decl_stmt|;
name|to
operator|=
name|off
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
literal|16
condition|;
name|j
operator|++
control|)
block|{
name|SNPRINTF
argument_list|(
name|buf
argument_list|,
literal|128
argument_list|,
literal|"%s %02x"
argument_list|,
name|buf
argument_list|,
name|ptr
index|[
name|off
operator|++
index|]
operator|&
literal|0xff
argument_list|)
expr_stmt|;
if|if
condition|(
name|off
operator|==
name|amt
condition|)
break|break;
block|}
name|isp_prt
argument_list|(
name|isp
argument_list|,
name|ISP_LOGALL
argument_list|,
literal|"0x%08x:%s"
argument_list|,
name|to
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * Do the common path to try and ensure that link is up, we've scanned  * the fabric (if we're on a fabric), and that we've synchronized this  * all with our own database and done the appropriate logins.  *  * We repeatedly check for firmware state and loop state after each  * action because things may have changed while we were doing this.  * Any failure or change of state causes us to return a nonzero value.  *  * We honor HBA roles in that if we're not in Initiator mode, we don't  * attempt to sync up the database (that's for somebody else to do,  * if ever).  *  * We assume we enter here with any locks held.  */
end_comment

begin_function_decl
specifier|static
name|INLINE
name|int
name|isp_fc_runstate
parameter_list|(
name|struct
name|ispsoftc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|INLINE
name|int
name|isp_fc_runstate
parameter_list|(
name|struct
name|ispsoftc
modifier|*
name|isp
parameter_list|,
name|int
name|tval
parameter_list|)
block|{
name|fcparam
modifier|*
name|fcp
decl_stmt|;
name|int
modifier|*
name|tptr
decl_stmt|;
if|if
condition|(
name|IS_SCSI
argument_list|(
name|isp
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|tptr
operator|=
name|tval
condition|?
operator|&
name|tval
else|:
name|NULL
expr_stmt|;
if|if
condition|(
name|isp_control
argument_list|(
name|isp
argument_list|,
name|ISPCTL_FCLINK_TEST
argument_list|,
name|tptr
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
name|fcp
operator|=
name|FCPARAM
argument_list|(
name|isp
argument_list|)
expr_stmt|;
if|if
condition|(
name|fcp
operator|->
name|isp_fwstate
operator|!=
name|FW_READY
operator|||
name|fcp
operator|->
name|isp_loopstate
operator|<
name|LOOP_PDB_RCVD
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
if|if
condition|(
name|isp_control
argument_list|(
name|isp
argument_list|,
name|ISPCTL_SCAN_FABRIC
argument_list|,
name|NULL
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
if|if
condition|(
name|isp_control
argument_list|(
name|isp
argument_list|,
name|ISPCTL_SCAN_LOOP
argument_list|,
name|NULL
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
if|if
condition|(
operator|(
name|isp
operator|->
name|isp_role
operator|&
name|ISP_ROLE_INITIATOR
operator|)
operator|==
literal|0
condition|)
block|{
return|return
operator|(
literal|0
operator|)
return|;
block|}
if|if
condition|(
name|isp_control
argument_list|(
name|isp
argument_list|,
name|ISPCTL_PDB_SYNC
argument_list|,
name|NULL
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
if|if
condition|(
name|fcp
operator|->
name|isp_fwstate
operator|!=
name|FW_READY
operator|||
name|fcp
operator|->
name|isp_loopstate
operator|!=
name|LOOP_READY
condition|)
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ISP_INLINE_H */
end_comment

end_unit

