begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*  * Qlogic Host Adapter Inline Functions  *  * Copyright (c) 1999 by Matthew Jacob  * Feral Software  * All rights reserved.  * mjacob@feral.com  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice immediately at the beginning of the file, without modification,  *    this list of conditions, and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ISP_INLINE_H
end_ifndef

begin_define
define|#
directive|define
name|_ISP_INLINE_H
end_define

begin_decl_stmt
specifier|static
name|INLINE
name|void
name|isp_prtstst
name|__P
argument_list|(
operator|(
name|ispstatusreq_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|INLINE
name|char
modifier|*
name|isp2100_fw_statename
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|INLINE
name|char
modifier|*
name|isp2100_pdb_statename
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|INLINE
name|void
name|isp_prtstst
parameter_list|(
name|sp
parameter_list|)
name|ispstatusreq_t
modifier|*
name|sp
decl_stmt|;
block|{
name|char
name|buf
index|[
literal|128
index|]
decl_stmt|;
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"states->"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_state_flags
operator|&
name|RQSF_GOT_BUS
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"GOT_BUS "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_state_flags
operator|&
name|RQSF_GOT_TARGET
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"GOT_TGT "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_state_flags
operator|&
name|RQSF_SENT_CDB
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"SENT_CDB "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_state_flags
operator|&
name|RQSF_XFRD_DATA
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"XFRD_DATA "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_state_flags
operator|&
name|RQSF_GOT_STATUS
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"GOT_STS "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_state_flags
operator|&
name|RQSF_GOT_SENSE
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"GOT_SNS "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_state_flags
operator|&
name|RQSF_XFER_COMPLETE
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"XFR_CMPLT "
argument_list|)
expr_stmt|;
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"status->"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_status_flags
operator|&
name|RQSTF_DISCONNECT
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"Disconnect "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_status_flags
operator|&
name|RQSTF_SYNCHRONOUS
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"Sync_xfr "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_status_flags
operator|&
name|RQSTF_PARITY_ERROR
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"Parity "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_status_flags
operator|&
name|RQSTF_BUS_RESET
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"Bus_Reset "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_status_flags
operator|&
name|RQSTF_DEVICE_RESET
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"Device_Reset "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_status_flags
operator|&
name|RQSTF_ABORTED
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"Aborted "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_status_flags
operator|&
name|RQSTF_TIMEOUT
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"Timeout "
argument_list|)
expr_stmt|;
if|if
condition|(
name|sp
operator|->
name|req_status_flags
operator|&
name|RQSTF_NEGOTIATION
condition|)
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"%s%s"
argument_list|,
name|buf
argument_list|,
literal|"Negotiation "
argument_list|)
expr_stmt|;
name|PRINTF
argument_list|(
name|buf
argument_list|,
literal|"%s\n"
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|INLINE
name|char
modifier|*
name|isp2100_fw_statename
parameter_list|(
name|state
parameter_list|)
name|int
name|state
decl_stmt|;
block|{
specifier|static
name|char
name|buf
index|[
literal|16
index|]
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|FW_CONFIG_WAIT
case|:
return|return
literal|"Config Wait"
return|;
case|case
name|FW_WAIT_AL_PA
case|:
return|return
literal|"Waiting for AL_PA"
return|;
case|case
name|FW_WAIT_LOGIN
case|:
return|return
literal|"Wait Login"
return|;
case|case
name|FW_READY
case|:
return|return
literal|"Ready"
return|;
case|case
name|FW_LOSS_OF_SYNC
case|:
return|return
literal|"Loss Of Sync"
return|;
case|case
name|FW_ERROR
case|:
return|return
literal|"Error"
return|;
case|case
name|FW_REINIT
case|:
return|return
literal|"Re-Init"
return|;
case|case
name|FW_NON_PART
case|:
return|return
literal|"Nonparticipating"
return|;
default|default:
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"0x%x"
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
block|}
end_function

begin_function
specifier|static
name|INLINE
name|char
modifier|*
name|isp2100_pdb_statename
parameter_list|(
name|int
name|pdb_state
parameter_list|)
block|{
specifier|static
name|char
name|buf
index|[
literal|16
index|]
decl_stmt|;
switch|switch
condition|(
name|pdb_state
condition|)
block|{
case|case
name|PDB_STATE_DISCOVERY
case|:
return|return
literal|"Port Discovery"
return|;
case|case
name|PDB_STATE_WDISC_ACK
case|:
return|return
literal|"Waiting Port Discovery ACK"
return|;
case|case
name|PDB_STATE_PLOGI
case|:
return|return
literal|"Port Login"
return|;
case|case
name|PDB_STATE_PLOGI_ACK
case|:
return|return
literal|"Wait Port Login ACK"
return|;
case|case
name|PDB_STATE_PRLI
case|:
return|return
literal|"Process Login"
return|;
case|case
name|PDB_STATE_PRLI_ACK
case|:
return|return
literal|"Wait Process Login ACK"
return|;
case|case
name|PDB_STATE_LOGGED_IN
case|:
return|return
literal|"Logged In"
return|;
case|case
name|PDB_STATE_PORT_UNAVAIL
case|:
return|return
literal|"Port Unavailable"
return|;
case|case
name|PDB_STATE_PRLO
case|:
return|return
literal|"Process Logout"
return|;
case|case
name|PDB_STATE_PRLO_ACK
case|:
return|return
literal|"Wait Process Logout ACK"
return|;
case|case
name|PDB_STATE_PLOGO
case|:
return|return
literal|"Port Logout"
return|;
case|case
name|PDB_STATE_PLOG_ACK
case|:
return|return
literal|"Wait Port Logout ACK"
return|;
default|default:
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"0x%x"
argument_list|,
name|pdb_state
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
block|}
end_function

begin_comment
comment|/*  * Handle Functions.  * For each outstanding command there will be a non-zero handle.  * There will be at most isp_maxcmds handles, and isp_lasthdls  * will be a seed for the last handled allocated.  */
end_comment

begin_decl_stmt
specifier|static
name|INLINE
name|int
name|isp_save_xs
name|__P
argument_list|(
operator|(
expr|struct
name|ispsoftc
operator|*
operator|,
name|ISP_SCSI_XFER_T
operator|*
operator|,
name|u_int32_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|INLINE
name|ISP_SCSI_XFER_T
modifier|*
name|isp_find_xs
name|__P
argument_list|(
operator|(
expr|struct
name|ispsoftc
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|INLINE
name|u_int32_t
name|isp_find_handle
name|__P
argument_list|(
operator|(
expr|struct
name|ispsoftc
operator|*
operator|,
name|ISP_SCSI_XFER_T
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|INLINE
name|void
name|isp_destroy_handle
name|__P
argument_list|(
operator|(
expr|struct
name|ispsoftc
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|INLINE
name|void
name|isp_remove_handle
name|__P
argument_list|(
operator|(
expr|struct
name|ispsoftc
operator|*
operator|,
name|ISP_SCSI_XFER_T
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|INLINE
name|int
name|isp_save_xs
parameter_list|(
name|isp
parameter_list|,
name|xs
parameter_list|,
name|handlep
parameter_list|)
name|struct
name|ispsoftc
modifier|*
name|isp
decl_stmt|;
name|ISP_SCSI_XFER_T
modifier|*
name|xs
decl_stmt|;
name|u_int32_t
modifier|*
name|handlep
decl_stmt|;
block|{
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
name|isp
operator|->
name|isp_lasthdls
operator|,
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|isp
operator|->
name|isp_maxcmds
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isp
operator|->
name|isp_xflist
index|[
name|j
index|]
operator|==
name|NULL
condition|)
block|{
break|break;
block|}
if|if
condition|(
operator|++
name|j
operator|==
name|isp
operator|->
name|isp_maxcmds
condition|)
block|{
name|j
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|isp
operator|->
name|isp_maxcmds
condition|)
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
name|isp
operator|->
name|isp_xflist
index|[
name|j
index|]
operator|=
name|xs
expr_stmt|;
operator|*
name|handlep
operator|=
name|j
operator|+
literal|1
expr_stmt|;
if|if
condition|(
operator|++
name|j
operator|==
name|isp
operator|->
name|isp_maxcmds
condition|)
name|j
operator|=
literal|0
expr_stmt|;
name|isp
operator|->
name|isp_lasthdls
operator|=
name|j
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|INLINE
name|ISP_SCSI_XFER_T
modifier|*
name|isp_find_xs
parameter_list|(
name|isp
parameter_list|,
name|handle
parameter_list|)
name|struct
name|ispsoftc
modifier|*
name|isp
decl_stmt|;
name|u_int32_t
name|handle
decl_stmt|;
block|{
if|if
condition|(
name|handle
operator|<
literal|1
operator|||
name|handle
operator|>
operator|(
name|u_int32_t
operator|)
name|isp
operator|->
name|isp_maxcmds
condition|)
block|{
return|return
operator|(
name|NULL
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|isp
operator|->
name|isp_xflist
index|[
name|handle
operator|-
literal|1
index|]
operator|)
return|;
block|}
block|}
end_function

begin_function
specifier|static
name|INLINE
name|u_int32_t
name|isp_find_handle
parameter_list|(
name|isp
parameter_list|,
name|xs
parameter_list|)
name|struct
name|ispsoftc
modifier|*
name|isp
decl_stmt|;
name|ISP_SCSI_XFER_T
modifier|*
name|xs
decl_stmt|;
block|{
name|int
name|i
decl_stmt|;
if|if
condition|(
name|xs
operator|!=
name|NULL
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|isp
operator|->
name|isp_maxcmds
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|isp
operator|->
name|isp_xflist
index|[
name|i
index|]
operator|==
name|xs
condition|)
block|{
return|return
operator|(
operator|(
name|u_int32_t
operator|)
name|i
operator|+
literal|1
operator|)
return|;
block|}
block|}
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|INLINE
name|void
name|isp_destroy_handle
parameter_list|(
name|isp
parameter_list|,
name|handle
parameter_list|)
name|struct
name|ispsoftc
modifier|*
name|isp
decl_stmt|;
name|u_int32_t
name|handle
decl_stmt|;
block|{
if|if
condition|(
name|handle
operator|>
literal|0
operator|&&
name|handle
operator|<=
operator|(
name|u_int32_t
operator|)
name|isp
operator|->
name|isp_maxcmds
condition|)
block|{
name|isp
operator|->
name|isp_xflist
index|[
name|handle
operator|-
literal|1
index|]
operator|=
name|NULL
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|INLINE
name|void
name|isp_remove_handle
parameter_list|(
name|isp
parameter_list|,
name|xs
parameter_list|)
name|struct
name|ispsoftc
modifier|*
name|isp
decl_stmt|;
name|ISP_SCSI_XFER_T
modifier|*
name|xs
decl_stmt|;
block|{
name|isp_destroy_handle
argument_list|(
name|isp
argument_list|,
name|isp_find_handle
argument_list|(
name|isp
argument_list|,
name|xs
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ISP_INLINE_H */
end_comment

end_unit

