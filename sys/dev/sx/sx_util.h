begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Device driver for Specialix I/O8+ multiport serial card.  *  * Copyright 2003 Frank Mayhar<frank@exit.com>  *  * Derived from the "si" driver by Peter Wemm<peter@netplex.com.au>, using  * lots of information from the Linux "specialix" driver by Roger Wolff  *<R.E.Wolff@BitWizard.nl> and from the Intel CD1865 "Intelligent Eight-  * Channel Communications Controller" datasheet.  Roger was also nice  * enough to answer numerous questions about stuff specific to the I/O8+  * not covered by the CD1865 datasheet.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notices, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notices, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY ``AS IS'' AND ANY EXPRESS OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN  * NO EVENT SHALL THE AUTHORS BE LIABLE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/* Utility functions and macros for the Specialix I/O8+ driver. */
end_comment

begin_comment
comment|/*  * sx_cd1865_out()  *	Write a CD1865 register on the card.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|sx_cd1865_out
parameter_list|(
name|struct
name|sx_softc
modifier|*
name|sc
parameter_list|,
name|unsigned
name|int
name|reg
parameter_list|,
name|unsigned
name|char
name|val
parameter_list|)
block|{
name|bus_space_write_1
argument_list|(
name|sc
operator|->
name|sc_st
argument_list|,
name|sc
operator|->
name|sc_sh
argument_list|,
name|SX_ADDR_REG
argument_list|,
name|reg
argument_list|)
expr_stmt|;
name|bus_space_write_1
argument_list|(
name|sc
operator|->
name|sc_st
argument_list|,
name|sc
operator|->
name|sc_sh
argument_list|,
name|SX_DATA_REG
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * sx_cd1865_in()  *	Read a register from the card.  */
end_comment

begin_function
specifier|static
name|__inline
name|unsigned
name|char
name|sx_cd1865_in
parameter_list|(
name|struct
name|sx_softc
modifier|*
name|sc
parameter_list|,
name|unsigned
name|int
name|reg
parameter_list|)
block|{
name|bus_space_write_1
argument_list|(
name|sc
operator|->
name|sc_st
argument_list|,
name|sc
operator|->
name|sc_sh
argument_list|,
name|SX_ADDR_REG
argument_list|,
name|reg
argument_list|)
expr_stmt|;
return|return
operator|(
name|bus_space_read_1
argument_list|(
name|sc
operator|->
name|sc_st
argument_list|,
name|sc
operator|->
name|sc_sh
argument_list|,
name|SX_DATA_REG
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * sx_cd1865_bis()  *	Set bits in a CD1865 register.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|sx_cd1865_bis
parameter_list|(
name|struct
name|sx_softc
modifier|*
name|sc
parameter_list|,
name|unsigned
name|int
name|reg
parameter_list|,
name|unsigned
name|char
name|bits
parameter_list|)
block|{
specifier|register
name|unsigned
name|char
name|rval
decl_stmt|;
name|rval
operator|=
name|sx_cd1865_in
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|)
expr_stmt|;
name|rval
operator||=
name|bits
expr_stmt|;
name|sx_cd1865_out
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|,
name|rval
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * sx_cd1865_bic()  *	Clear bits in a CD1865 register.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|sx_cd1865_bic
parameter_list|(
name|struct
name|sx_softc
modifier|*
name|sc
parameter_list|,
name|unsigned
name|int
name|reg
parameter_list|,
name|unsigned
name|char
name|bits
parameter_list|)
block|{
specifier|register
name|unsigned
name|char
name|rval
decl_stmt|;
name|rval
operator|=
name|sx_cd1865_in
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|)
expr_stmt|;
name|rval
operator|&=
operator|~
name|bits
expr_stmt|;
name|sx_cd1865_out
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|,
name|rval
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * sx_cd1865_wait_CCR()  *	Spin waiting for the board Channel Command Register to clear.  *  * Description:  *	The CD1865 processor clears the Channel Command Register to  *	indicate that it has completed the last command.  This routine  *	waits for the CCR to become zero by watching the register,  *	delaying ten microseconds between each check.  We time out after  *	ten milliseconds (or SX_CCR_TIMEOUT microseconds).  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|sx_cd1865_wait_CCR
parameter_list|(
name|struct
name|sx_softc
modifier|*
name|sc
parameter_list|,
name|unsigned
name|int
name|ei_flag
parameter_list|)
block|{
name|unsigned
name|int
name|to
init|=
name|SX_CCR_TIMEOUT
operator|/
literal|10
decl_stmt|;
while|while
condition|(
name|to
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|sx_cd1865_in
argument_list|(
name|sc
argument_list|,
name|CD1865_CCR
operator||
name|ei_flag
argument_list|)
operator|==
literal|0
condition|)
return|return;
name|DELAY
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"sx: Timeout waiting for CCR to clear.\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * sx_cd1865_etcmode()  *	Set or clear embedded transmit command mode on a CD1865 port.  *  * Description:  *	We can use commands embedded in the transmit data stream to do  *	things like start and stop breaks or insert time delays.  We normally  *	run with embedded commands disabled; this routine selects the channel  *	we're dealing with and enables or disables embedded commands depending  *	on the flag passed to it.  The caller must remember this state and  *	escape any NULs it sends while embedded commands are enabled.  *	Should be called at spltty().  Disables interrupts for the duration  *	of the routine.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|sx_cd1865_etcmode
parameter_list|(
name|struct
name|sx_softc
modifier|*
name|sc
parameter_list|,
name|unsigned
name|int
name|ei_flag
parameter_list|,
name|int
name|chan
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|sx_cd1865_out
argument_list|(
name|sc
argument_list|,
name|CD1865_CAR
operator||
name|ei_flag
argument_list|,
name|chan
argument_list|)
expr_stmt|;
comment|/* Select channel.       */
if|if
condition|(
name|mode
condition|)
block|{
comment|/* Enable embedded commands?          */
name|sx_cd1865_bis
argument_list|(
name|sc
argument_list|,
name|CD1865_COR2
operator||
name|ei_flag
argument_list|,
name|CD1865_COR2_ETC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sx_cd1865_bic
argument_list|(
name|sc
argument_list|,
name|CD1865_COR2
operator||
name|ei_flag
argument_list|,
name|CD1865_COR2_ETC
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Wait for the CCR to clear, ding the card, let it know stuff 	 * changed, then wait for CCR to clear again. 	 */
name|sx_cd1865_wait_CCR
argument_list|(
name|sc
argument_list|,
name|ei_flag
argument_list|)
expr_stmt|;
name|sx_cd1865_out
argument_list|(
name|sc
argument_list|,
name|CD1865_CCR
operator||
name|ei_flag
argument_list|,
name|CD1865_CCR_CORCHG2
argument_list|)
expr_stmt|;
name|sx_cd1865_wait_CCR
argument_list|(
name|sc
argument_list|,
name|ei_flag
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|int
name|sx_probe_io8
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sx_init_cd1865
parameter_list|(
name|struct
name|sx_softc
modifier|*
name|sc
parameter_list|,
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|sx_port
modifier|*
name|sx_int_port
parameter_list|(
name|struct
name|sx_softc
modifier|*
name|sc
parameter_list|,
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

end_unit

