begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) HighPoint Technologies, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<dev/hptrr/hptrr_config.h>
end_include

begin_comment
comment|/*  * $Id: him.h,v 1.41 2007/01/12 09:12:49 gmm Exp $  * Copyright (C) 2004-2005 HighPoint Technologies, Inc. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_HPT_HIM_H_
end_ifndef

begin_define
define|#
directive|define
name|_HPT_HIM_H_
end_define

begin_define
define|#
directive|define
name|VERMAGIC_HIM
value|41
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<dev/hptrr/list.h>
define|#
directive|define
name|SECTOR_TO_BYTE_SHIFT
value|9
define|#
directive|define
name|SECTOR_TO_BYTE
parameter_list|(
name|x
parameter_list|)
value|((HPT_U32)(x)<< SECTOR_TO_BYTE_SHIFT)
define|#
directive|define
name|BYTE_TO_SECTOR
parameter_list|(
name|x
parameter_list|)
value|((x)>>SECTOR_TO_BYTE_SHIFT)
typedef|typedef
struct|struct
name|_PCI_ID
block|{
name|HPT_U16
name|vid
decl_stmt|;
name|HPT_U16
name|did
decl_stmt|;
name|HPT_U32
name|subsys
decl_stmt|;
name|HPT_U8
name|rev
decl_stmt|;
name|HPT_U8
name|nbase
decl_stmt|;
name|HPT_U16
name|reserve
decl_stmt|;
block|}
name|PCI_ID
typedef|;
typedef|typedef
struct|struct
name|_PCI_ADDRESS
block|{
name|HPT_U8
name|tree
decl_stmt|;
name|HPT_U8
name|bus
decl_stmt|;
name|HPT_U8
name|device
decl_stmt|;
name|HPT_U8
name|function
decl_stmt|;
block|}
name|PCI_ADDRESS
typedef|;
typedef|typedef
struct|struct
name|_HIM_ADAPTER_CONFIG
block|{
name|PCI_ADDRESS
name|pci_addr
decl_stmt|;
name|PCI_ID
name|pci_id
decl_stmt|;
name|HPT_U8
name|max_devices
decl_stmt|;
name|HPT_U8
name|reserve1
decl_stmt|;
name|HPT_U8
name|bDevsPerBus
decl_stmt|;
name|HPT_U8
name|first_on_slot
decl_stmt|;
name|HPT_U8
name|bChipType
decl_stmt|;
name|HPT_U8
name|bChipIntrNum
decl_stmt|;
name|HPT_U8
name|bChipFlags
decl_stmt|;
name|HPT_U8
name|bNumBuses
decl_stmt|;
name|HPT_U8
name|szVendorID
index|[
literal|36
index|]
decl_stmt|;
name|HPT_U8
name|szProductID
index|[
literal|36
index|]
decl_stmt|;
block|}
name|HIM_ADAPTER_CONFIG
operator|,
typedef|*
name|PHIM_ADAPTER_CONFIG
typedef|;
typedef|typedef
struct|struct
name|_HIM_CHANNEL_CONFIG
block|{
name|HPT_U32
name|io_port
decl_stmt|;
name|HPT_U32
name|ctl_port
decl_stmt|;
block|}
name|HIM_CHANNEL_CONFIG
operator|,
typedef|*
name|PHIM_CHANNEL_CONFIG
typedef|;
typedef|typedef
struct|struct
name|_HIM_DEVICE_FLAGS
block|{
name|HPT_U32
name|df_atapi
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_removable_drive
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_on_line
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_reduce_mode
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_sata
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_on_pm_port
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_support_read_ahead
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_read_ahead_enabled
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_support_write_cache
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_write_cache_enabled
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_cdrom_device
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_tape_device
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_support_tcq
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_tcq_enabled
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_support_ncq
range|:
literal|1
decl_stmt|;
name|HPT_U32
name|df_ncq_enabled
range|:
literal|1
decl_stmt|;
block|}
name|DEVICE_FLAGS
operator|,
typedef|*
name|PDEVICE_FLAGS
typedef|;
pragma|#
directive|pragma
name|pack
name|(
name|1
name|)
typedef|typedef
struct|struct
name|_IDENTIFY_DATA2
block|{
name|HPT_U16
name|GeneralConfiguration
decl_stmt|;
name|HPT_U16
name|NumberOfCylinders
decl_stmt|;
name|HPT_U16
name|Reserved1
decl_stmt|;
name|HPT_U16
name|NumberOfHeads
decl_stmt|;
name|HPT_U16
name|UnformattedBytesPerTrack
decl_stmt|;
name|HPT_U16
name|UnformattedBytesPerSector
decl_stmt|;
name|HPT_U16
name|SectorsPerTrack
decl_stmt|;
name|HPT_U16
name|VendorUnique1
index|[
literal|3
index|]
decl_stmt|;
name|HPT_U16
name|SerialNumber
index|[
literal|10
index|]
decl_stmt|;
name|HPT_U16
name|BufferType
decl_stmt|;
name|HPT_U16
name|BufferSectorSize
decl_stmt|;
name|HPT_U16
name|NumberOfEccBytes
decl_stmt|;
name|HPT_U16
name|FirmwareRevision
index|[
literal|4
index|]
decl_stmt|;
name|HPT_U16
name|ModelNumber
index|[
literal|20
index|]
decl_stmt|;
name|HPT_U8
name|MaximumBlockTransfer
decl_stmt|;
name|HPT_U8
name|VendorUnique2
decl_stmt|;
name|HPT_U16
name|DoubleWordIo
decl_stmt|;
name|HPT_U16
name|Capabilities
decl_stmt|;
name|HPT_U16
name|Reserved2
decl_stmt|;
name|HPT_U8
name|VendorUnique3
decl_stmt|;
name|HPT_U8
name|PioCycleTimingMode
decl_stmt|;
name|HPT_U8
name|VendorUnique4
decl_stmt|;
name|HPT_U8
name|DmaCycleTimingMode
decl_stmt|;
name|HPT_U16
name|TranslationFieldsValid
decl_stmt|;
name|HPT_U16
name|NumberOfCurrentCylinders
decl_stmt|;
name|HPT_U16
name|NumberOfCurrentHeads
decl_stmt|;
name|HPT_U16
name|CurrentSectorsPerTrack
decl_stmt|;
name|HPT_U32
name|CurrentSectorCapacity
decl_stmt|;
name|HPT_U16
name|CurrentMultiSectorSetting
decl_stmt|;
name|HPT_U32
name|UserAddressableSectors
decl_stmt|;
name|HPT_U8
name|SingleWordDMASupport
decl_stmt|;
name|HPT_U8
name|SingleWordDMAActive
decl_stmt|;
name|HPT_U8
name|MultiWordDMASupport
decl_stmt|;
name|HPT_U8
name|MultiWordDMAActive
decl_stmt|;
name|HPT_U8
name|AdvancedPIOModes
decl_stmt|;
name|HPT_U8
name|Reserved4
decl_stmt|;
name|HPT_U16
name|MinimumMWXferCycleTime
decl_stmt|;
name|HPT_U16
name|RecommendedMWXferCycleTime
decl_stmt|;
name|HPT_U16
name|MinimumPIOCycleTime
decl_stmt|;
name|HPT_U16
name|MinimumPIOCycleTimeIORDY
decl_stmt|;
name|HPT_U16
name|Reserved5
index|[
literal|2
index|]
decl_stmt|;
name|HPT_U16
name|ReleaseTimeOverlapped
decl_stmt|;
name|HPT_U16
name|ReleaseTimeServiceCommand
decl_stmt|;
name|HPT_U16
name|MajorRevision
decl_stmt|;
name|HPT_U16
name|MinorRevision
decl_stmt|;
block|}
ifdef|#
directive|ifdef
name|__GNUC__
name|__attribute__
typedef|((
name|packed
typedef|))
endif|#
directive|endif
name|IDENTIFY_DATA2
operator|,
typedef|*
name|PIDENTIFY_DATA2
typedef|;
pragma|#
directive|pragma
name|pack
name|(
name|)
typedef|typedef
struct|struct
name|_HIM_DEVICE_CONFIG
block|{
name|HPT_U64
name|capacity
decl_stmt|;
name|DEVICE_FLAGS
name|flags
decl_stmt|;
name|HPT_U8
name|path_id
decl_stmt|;
name|HPT_U8
name|target_id
decl_stmt|;
name|HPT_U8
name|max_queue_depth
decl_stmt|;
name|HPT_U8
name|spin_up_mode
decl_stmt|;
name|HPT_U8
name|reserved
decl_stmt|;
name|HPT_U8
name|transfer_mode
decl_stmt|;
name|HPT_U8
name|bMaxShowMode
decl_stmt|;
name|HPT_U8
name|bDeUsable_Mode
decl_stmt|;
name|HPT_U16
name|max_sectors_per_cmd
decl_stmt|;
name|PIDENTIFY_DATA2
name|pIdentifyData
decl_stmt|;
block|}
name|HIM_DEVICE_CONFIG
operator|,
typedef|*
name|PHIM_DEVICE_CONFIG
typedef|;
define|#
directive|define
name|_DIT_MODE
value|0
define|#
directive|define
name|_DIT_601
value|1
define|#
directive|define
name|_DIT_READ_AHEAD
value|2
define|#
directive|define
name|_DIT_WRITE_CACHE
value|3
define|#
directive|define
name|_DIT_TCQ
value|4
define|#
directive|define
name|_DIT_NCQ
value|5
define|#
directive|define
name|_DIT_BEEP_OFF
value|6
define|#
directive|define
name|_DIT_SPIN_UP_MODE
value|7
define|#
directive|define
name|SPIN_UP_MODE_NOSUPPORT
value|0
define|#
directive|define
name|SPIN_UP_MODE_FULL
value|1
define|#
directive|define
name|SPIN_UP_MODE_STANDBY
value|2
struct|struct
name|tcq_control
block|{
name|HPT_U8
name|enable
decl_stmt|;
name|HPT_U8
name|depth
decl_stmt|;
block|}
struct|;
struct|struct
name|ncq_control
block|{
name|HPT_U8
name|enable
decl_stmt|;
name|HPT_U8
name|depth
decl_stmt|;
block|}
struct|;
typedef|typedef
struct|struct
name|_HIM_ALTERABLE_DEV_INFO
block|{
name|HPT_U8
name|type
decl_stmt|;
union|union
block|{
name|HPT_U8
name|mode
decl_stmt|;
name|HPT_U8
name|enable_read_ahead
decl_stmt|;
name|HPT_U8
name|enable_read_cache
decl_stmt|;
name|HPT_U8
name|enable_write_cache
decl_stmt|;
name|struct
name|tcq_control
name|tcq
decl_stmt|;
name|struct
name|ncq_control
name|ncq
decl_stmt|;
name|void
modifier|*
name|adapter
decl_stmt|;
name|HPT_U8
name|spin_up_mode
decl_stmt|;
block|}
name|u
union|;
block|}
name|HIM_ALTERABLE_DEV_INFO
operator|,
typedef|*
name|PHIM_ALTERABLE_DEV_INFO
typedef|;
struct_decl|struct
name|_COMMAND
struct_decl|;
struct_decl|struct
name|_IOCTL_ARG
struct_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|PROBE_CALLBACK
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
name|dev
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|_HIM
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|_HIM
modifier|*
name|next
decl_stmt|;
name|HPT_UINT
name|max_sg_descriptors
decl_stmt|;
define|#
directive|define
name|_HIM_INTERFACE
parameter_list|(
name|_type
parameter_list|,
name|_fn
parameter_list|,
name|_args
parameter_list|)
value|_type (* _fn) _args;
include|#
directive|include
file|<dev/hptrr/himfuncs.h>
block|}
name|HIM
operator|,
typedef|*
name|PHIM
typedef|;
pragma|#
directive|pragma
name|pack
name|(
name|1
name|)
ifdef|#
directive|ifdef
name|SG_FLAG_EOT
error|#
directive|error
literal|"don't use SG_FLAG_EOT with _SG.eot. clean the code!"
endif|#
directive|endif
typedef|typedef
struct|struct
name|_SG
block|{
name|HPT_U32
name|size
decl_stmt|;
name|HPT_UINT
name|eot
decl_stmt|;
union|union
block|{
name|HPT_U8
name|FAR
modifier|*
name|_logical
decl_stmt|;
name|BUS_ADDRESS
name|bus
decl_stmt|;
block|}
name|addr
union|;
block|}
name|SG
operator|,
typedef|*
name|PSG
typedef|;
pragma|#
directive|pragma
name|pack
name|(
name|)
typedef|typedef
struct|struct
name|_AtaCommand
block|{
name|HPT_U64
name|Lba
decl_stmt|;
name|HPT_U16
name|nSectors
decl_stmt|;
name|HPT_U16
name|pad
decl_stmt|;
block|}
name|AtaComm
operator|,
typedef|*
name|PAtaComm
typedef|;
define|#
directive|define
name|ATA_CMD_SET_FEATURES
value|0xef
define|#
directive|define
name|ATA_CMD_FLUSH
value|0xE7
define|#
directive|define
name|ATA_CMD_VERIFY
value|0x40
define|#
directive|define
name|ATA_CMD_STANDBY
value|0xe2
define|#
directive|define
name|ATA_CMD_READ_MULTI
value|0xC4
define|#
directive|define
name|ATA_CMD_READ_MULTI_EXT
value|0x29
define|#
directive|define
name|ATA_CMD_WRITE_MULTI
value|0xC5
define|#
directive|define
name|ATA_CMD_WRITE_MULTI_EXT
value|0x39
define|#
directive|define
name|ATA_CMD_WRITE_MULTI_FUA_EXT
value|0xCE
define|#
directive|define
name|ATA_SET_FEATURES_XFER
value|0x3
define|#
directive|define
name|ATA_SECTOR_SIZE
value|512
typedef|typedef
struct|struct
name|_PassthroughCmd
block|{
name|HPT_U16
name|bFeaturesReg
decl_stmt|;
name|HPT_U16
name|bSectorCountReg
decl_stmt|;
name|HPT_U16
name|bLbaLowReg
decl_stmt|;
name|HPT_U16
name|bLbaMidReg
decl_stmt|;
name|HPT_U16
name|bLbaHighReg
decl_stmt|;
name|HPT_U8
name|bDriveHeadReg
decl_stmt|;
name|HPT_U8
name|bCommandReg
decl_stmt|;
name|HPT_U8
name|nSectors
decl_stmt|;
name|HPT_U8
modifier|*
name|pDataBuffer
decl_stmt|;
block|}
name|PassthroughCmd
typedef|;
define|#
directive|define
name|CTRL_CMD_REBUILD
value|1
define|#
directive|define
name|CTRL_CMD_VERIFY
value|2
define|#
directive|define
name|CTRL_CMD_INIT
value|3
typedef|typedef
struct|struct
name|_R5ControlCmd
block|{
name|HPT_U64
name|StripeLine
decl_stmt|;
name|HPT_U16
name|Offset
decl_stmt|;
name|HPT_U8
name|Command
decl_stmt|;
name|HPT_U8
name|reserve1
decl_stmt|;
block|}
name|R5ControlCmd
operator|,
typedef|*
name|PR5ControlCmd
typedef|;
typedef|typedef
struct|struct
name|_HPT_ADDRESS
block|{
name|HPT_U8
modifier|*
name|logical
decl_stmt|;
name|BUS_ADDRESS
name|bus
decl_stmt|;
block|}
name|HPT_ADDRESS
typedef|;
typedef|typedef
struct|struct
name|ctl_pages
block|{
name|HPT_ADDRESS
modifier|*
name|pages
decl_stmt|;
name|HPT_UINT
name|page_size
decl_stmt|;
name|HPT_UINT
name|npages
decl_stmt|;
name|HPT_UINT
name|min_sg_descriptors
decl_stmt|;
block|}
name|CONTROL_PAGES
operator|,
typedef|*
name|PCONTROL_PAGES
typedef|;
typedef|typedef
struct|struct
name|_R1ControlCmd
block|{
name|HPT_U64
name|Lba
decl_stmt|;
name|HPT_U16
name|nSectors
decl_stmt|;
name|HPT_U8
name|Command
decl_stmt|;
comment|/* CTRL_CMD_XXX */
name|HPT_U8
name|reserve1
decl_stmt|;
name|PCONTROL_PAGES
name|ctl_pages
decl_stmt|;
block|}
name|R1ControlCmd
operator|,
typedef|*
name|PR1ControlCmd
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|TQ_PROC
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
struct|struct
name|tq_item
block|{
name|TQ_PROC
name|proc
decl_stmt|;
name|void
modifier|*
name|arg
decl_stmt|;
name|struct
name|tq_item
modifier|*
name|next
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|INIT_TQ_ITEM
parameter_list|(
name|t
parameter_list|,
name|p
parameter_list|,
name|a
parameter_list|)
define|\
value|do { (t)->proc = p; (t)->arg = a; (t)->next = 0; } while (0)
typedef|typedef
struct|struct
name|_COMMAND
block|{
name|struct
name|_VBUS
modifier|*
name|vbus
decl_stmt|;
name|struct
name|freelist
modifier|*
name|grplist
decl_stmt|;
name|HPT_UINT
name|grpcnt
decl_stmt|;
name|struct
name|list_head
name|q_link
decl_stmt|;
name|struct
name|tq_item
name|done_dpc
decl_stmt|;
name|HPT_UINT
name|extsize
decl_stmt|;
name|void
modifier|*
name|ext
decl_stmt|;
name|void
modifier|*
name|target
decl_stmt|;
name|void
modifier|*
name|priv
decl_stmt|;
name|HPT_UPTR
name|priv2
decl_stmt|;
name|int
name|priority
decl_stmt|;
name|struct
name|lock_request
modifier|*
name|owned_lock
decl_stmt|;
name|struct
name|lock_request
modifier|*
name|lock_req
decl_stmt|;
union|union
block|{
comment|/* Ide Command */
name|AtaComm
name|Ide
decl_stmt|;
name|PassthroughCmd
name|Passthrough
decl_stmt|;
comment|/* Atapi Command */
name|HPT_U8
name|Atapi
index|[
literal|12
index|]
decl_stmt|;
comment|/* Control command */
name|R5ControlCmd
name|R5Control
decl_stmt|;
name|R1ControlCmd
name|R1Control
decl_stmt|;
block|}
name|uCmd
union|;
name|HPT_U8
name|type
decl_stmt|;
comment|/* CMD_TYPE_* */
struct|struct
block|{
name|HPT_U8
name|physical_sg
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|data_in
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|data_out
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|transform
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|hard_flush
range|:
literal|2
decl_stmt|;
name|HPT_U8
name|from_cc
range|:
literal|1
decl_stmt|;
block|}
name|flags
struct|;
comment|/* return status */
name|HPT_U8
name|Result
decl_stmt|;
comment|/* retry count */
name|HPT_U8
name|RetryCount
decl_stmt|;
name|PSG
name|psg
decl_stmt|;
name|int
function_decl|(
modifier|*
name|buildsgl
function_decl|)
parameter_list|(
name|struct
name|_COMMAND
modifier|*
name|cmd
parameter_list|,
name|PSG
name|psg
parameter_list|,
name|int
name|logical
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|done
function_decl|)
parameter_list|(
name|struct
name|_COMMAND
modifier|*
name|cmd
parameter_list|)
function_decl|;
block|}
name|COMMAND
operator|,
typedef|*
name|PCOMMAND
typedef|;
comment|/* command types */
define|#
directive|define
name|CMD_TYPE_IO
value|0
define|#
directive|define
name|CMD_TYPE_CONTROL
value|1
define|#
directive|define
name|CMD_TYPE_ATAPI
value|2
define|#
directive|define
name|CMD_TYPE_PASSTHROUGH
value|3
define|#
directive|define
name|CMD_TYPE_FLUSH
value|4
comment|/* flush command flags */
define|#
directive|define
name|CF_HARD_FLUSH_CACHE
value|1
define|#
directive|define
name|CF_HARD_FLUSH_STANDBY
value|2
comment|/* command return values */
define|#
directive|define
name|RETURN_PENDING
value|0
define|#
directive|define
name|RETURN_SUCCESS
value|1
define|#
directive|define
name|RETURN_BAD_DEVICE
value|2
define|#
directive|define
name|RETURN_BAD_PARAMETER
value|3
define|#
directive|define
name|RETURN_WRITE_NO_DRQ
value|4
define|#
directive|define
name|RETURN_DEVICE_BUSY
value|5
define|#
directive|define
name|RETURN_INVALID_REQUEST
value|6
define|#
directive|define
name|RETURN_SELECTION_TIMEOUT
value|7
define|#
directive|define
name|RETURN_IDE_ERROR
value|8
define|#
directive|define
name|RETURN_NEED_LOGICAL_SG
value|9
define|#
directive|define
name|RETURN_NEED_PHYSICAL_SG
value|10
define|#
directive|define
name|RETURN_RETRY
value|11
define|#
directive|define
name|RETURN_DATA_ERROR
value|12
define|#
directive|define
name|RETURN_BUS_RESET
value|13
define|#
directive|define
name|RETURN_BAD_TRANSFER_LENGTH
value|14
define|#
directive|define
name|RETURN_INSUFFICIENT_MEMORY
value|15
define|#
directive|define
name|RETURN_SECTOR_ERROR
value|16
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

