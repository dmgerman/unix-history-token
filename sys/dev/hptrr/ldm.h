begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) HighPoint Technologies, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<dev/hptrr/hptrr_config.h>
end_include

begin_comment
comment|/*  * $Id: ldm.h,v 1.59 2007/04/17 07:00:06 mah Exp $  * Copyright (C) 2004-2005 HighPoint Technologies, Inc. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_HPT_LDM_H_
end_ifndef

begin_define
define|#
directive|define
name|_HPT_LDM_H_
end_define

begin_define
define|#
directive|define
name|VERMAGIC_LDM
value|57
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|__hpt_set_ver
parameter_list|(
name|x
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|v5
parameter_list|)
value|x ## _R_ ## v1 ## _ ## v2 ## _ ## v3 ## _ ## v4 ## _ ## v5
define|#
directive|define
name|_hpt_set_ver
parameter_list|(
name|x
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|v5
parameter_list|)
value|__hpt_set_ver(x, v1, v2, v3, v4, v5)
define|#
directive|define
name|hpt_set_ver
parameter_list|(
name|x
parameter_list|)
value|_hpt_set_ver(x, VERMAGIC_OSM, VERMAGIC_HIM, VERMAGIC_LDM, VERMAGIC_ARRAY, MAX_MEMBERS)
define|#
directive|define
name|ldm_register_him
value|hpt_set_ver(ldm_register_him)
define|#
directive|define
name|ldm_register_vdev_class
value|hpt_set_ver(ldm_register_vdev_class)
define|#
directive|define
name|ldm_alloc_cmds
value|hpt_set_ver(ldm_alloc_cmds)
ifndef|#
directive|ifndef
name|HPT_INTERFACE_VERSION
define|#
directive|define
name|HPT_INTERFACE_VERSION
value|0x02000001
endif|#
directive|endif
define|#
directive|define
name|MAX_PARTITIONS_PER_DISK
value|4
if|#
directive|if
name|defined
argument_list|(
name|__MAX_PARTITIONS_PER_DISK
argument_list|)
operator|&&
name|MAX_PARTITIONS_PER_DISK
operator|>
name|__MAX_PARTITIONS_PER_DISK
error|#
directive|error
literal|"Please redefine MAX_PARTITIONS_PER_DISK!!!"
endif|#
directive|endif
define|#
directive|define
name|MAX
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(((a)>(b))?(a):(b))
define|#
directive|define
name|MIN
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(((a)<(b))?(a):(b))
struct|struct
name|freelist
block|{
name|int
name|dma
decl_stmt|;
name|HPT_UINT
name|alignment
decl_stmt|;
name|HPT_UINT
name|count
decl_stmt|;
name|HPT_UINT
name|size
decl_stmt|;
name|void
modifier|*
name|head
decl_stmt|;
name|struct
name|freelist
modifier|*
name|next
decl_stmt|;
ifdef|#
directive|ifdef
name|DBG
name|char
modifier|*
name|tag
decl_stmt|;
name|HPT_UINT
name|reserved_count
decl_stmt|;
define|#
directive|define
name|freelist_debug_tag
parameter_list|(
name|list
parameter_list|,
name|_tag
parameter_list|)
value|(list)->tag = _tag
else|#
directive|else
define|#
directive|define
name|freelist_debug_tag
parameter_list|(
name|list
parameter_list|,
name|_tag
parameter_list|)
endif|#
directive|endif
block|}
struct|;
name|void
name|freelist_reserve
parameter_list|(
name|struct
name|freelist
modifier|*
name|list
parameter_list|,
name|void
modifier|*
name|osext
parameter_list|,
name|HPT_UINT
name|size
parameter_list|,
name|HPT_UINT
name|count
parameter_list|)
function_decl|;
name|void
modifier|*
name|freelist_get
parameter_list|(
name|struct
name|freelist
modifier|*
parameter_list|)
function_decl|;
name|void
name|freelist_put
parameter_list|(
name|struct
name|freelist
modifier|*
parameter_list|,
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
name|void
name|freelist_reserve_dma
parameter_list|(
name|struct
name|freelist
modifier|*
name|list
parameter_list|,
name|void
modifier|*
name|osext
parameter_list|,
name|HPT_UINT
name|size
parameter_list|,
name|HPT_UINT
name|alignment
parameter_list|,
name|HPT_UINT
name|count
parameter_list|)
function_decl|;
name|void
modifier|*
name|freelist_get_dma
parameter_list|(
name|struct
name|freelist
modifier|*
parameter_list|,
name|BUS_ADDRESS
modifier|*
name|busaddr
parameter_list|)
function_decl|;
name|void
name|freelist_put_dma
parameter_list|(
name|struct
name|freelist
modifier|*
parameter_list|,
name|void
modifier|*
name|p
parameter_list|,
name|BUS_ADDRESS
name|busaddr
parameter_list|)
function_decl|;
define|#
directive|define
name|freelist_reserve_with_tag
parameter_list|(
name|list
parameter_list|,
name|osext
parameter_list|,
name|size
parameter_list|,
name|count
parameter_list|)
define|\
value|do {\ 		freelist_debug_tag(list, #list  " at " __FILE__);\ 		freelist_reserve(list, osext, size, count);\ 	}while(0)
define|#
directive|define
name|freelist_reserve_dma_with_tag
parameter_list|(
name|list
parameter_list|,
name|osext
parameter_list|,
name|size
parameter_list|,
name|alignment
parameter_list|,
name|count
parameter_list|)
define|\
value|do {\ 		freelist_debug_tag(list, #list " at " __FILE__);\ 		freelist_reserve_dma(list, osext, size, alignment, count);\ 	}while(0)
struct|struct
name|lock_request
block|{
name|HPT_U64
name|start
decl_stmt|,
name|end
decl_stmt|;
name|struct
name|lock_request
modifier|*
name|next
decl_stmt|;
name|struct
name|list_head
name|waiters
decl_stmt|;
comment|/* blocked commands */
name|struct
name|tq_item
name|callback
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|INIT_LOCK_REQUEST
parameter_list|(
name|req
parameter_list|,
name|_start
parameter_list|,
name|_end
parameter_list|,
name|_cb
parameter_list|,
name|_arg
parameter_list|)
define|\
value|do {\ 		(req)->next = 0;\ 		(req)->start = _start;\ 		(req)->end = _end;\ 		INIT_TQ_ITEM(&(req)->callback, _cb, _arg);\ 		INIT_LIST_HEAD(&(req)->waiters);\ 	} while (0)
struct|struct
name|task_queue
block|{
name|struct
name|tq_item
modifier|*
name|head
decl_stmt|,
modifier|*
name|tail
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|TQ_EMPTY
parameter_list|(
name|tq
parameter_list|)
value|((tq)->head==0)
struct|struct
name|dmapool_order
block|{
name|HPT_UINT
name|npages
decl_stmt|;
name|struct
name|tq_item
name|wakeup_fn
decl_stmt|;
name|struct
name|dmapool_order
modifier|*
name|next
decl_stmt|;
block|}
struct|;
struct|struct
name|dmapool_client
block|{
name|void
modifier|*
name|handle
decl_stmt|;
name|HPT_UINT
function_decl|(
modifier|*
name|shrink
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|HPT_UINT
name|npages
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|resume
function_decl|)
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
name|struct
name|dmapool_client
modifier|*
name|next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|_VBUS
modifier|*
name|PVBUS
typedef|;
typedef|typedef
name|struct
name|_VDEV
modifier|*
name|PVDEV
typedef|;
name|void
name|dmapool_register_client
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|struct
name|dmapool_client
modifier|*
name|client
parameter_list|)
function_decl|;
name|void
name|dmapool_active
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
comment|/* return 0 if the request is immediately satisfied, non-zero otherwise. */
name|int
name|dmapool_make_order
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|struct
name|dmapool_order
modifier|*
name|order
parameter_list|)
function_decl|;
name|void
modifier|*
name|dmapool_get_page
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|BUS_ADDRESS
modifier|*
name|busaddr
parameter_list|)
function_decl|;
name|void
modifier|*
name|dmapool_get_page_at
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|void
modifier|*
name|p
parameter_list|,
name|BUS_ADDRESS
modifier|*
name|busaddr
parameter_list|)
function_decl|;
name|void
name|dmapool_put_page
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|void
modifier|*
name|p
parameter_list|,
name|BUS_ADDRESS
name|busaddr
parameter_list|)
function_decl|;
name|void
name|dmapool_init
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|HPT_UINT
name|dmapool_max_class_pages
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
struct|struct
name|timer_call
block|{
name|HPT_U32
name|interval
decl_stmt|;
comment|/*microseconds*/
name|HPT_TIME
name|expire_time
decl_stmt|;
comment|/*microseconds*/
name|void
function_decl|(
modifier|*
name|proc
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|arg
decl_stmt|;
name|struct
name|timer_call
modifier|*
modifier|*
name|pprev
decl_stmt|;
name|struct
name|timer_call
modifier|*
name|next
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|ldm_init_timer
parameter_list|(
name|timer
parameter_list|)
value|do { (timer)->next=0; (timer)->pprev=0; } while (0)
define|#
directive|define
name|INIT_TIMER_CALL
parameter_list|(
name|timer
parameter_list|,
name|_interval
parameter_list|,
name|_proc
parameter_list|,
name|_arg
parameter_list|)
define|\
value|do { \ 		HPT_ASSERT((timer)->next==0&& (timer)->pprev==0);\ 		(timer)->interval = _interval;\ 		(timer)->proc = _proc;\ 		(timer)->arg = _arg;\ 	} while(0)
name|void
name|ldm_request_timer
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|struct
name|timer_call
modifier|*
name|tc
parameter_list|)
function_decl|;
name|void
name|ldm_remove_timer
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|struct
name|timer_call
modifier|*
name|tc
parameter_list|)
function_decl|;
name|void
name|ldm_on_timer
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|_LDM_ADAPTER
block|{
name|struct
name|_LDM_ADAPTER
modifier|*
name|next
decl_stmt|;
name|HIM
modifier|*
name|him
decl_stmt|;
name|void
modifier|*
name|him_handle
decl_stmt|;
name|PVBUS
name|vbus
decl_stmt|;
name|struct
name|freelist
name|freelist_dev
decl_stmt|;
name|struct
name|freelist
name|freelist_plugged_dpc
decl_stmt|;
name|HPT_BOOL
name|master
decl_stmt|;
block|}
name|LDM_ADAPTER
operator|,
typedef|*
name|PLDM_ADAPTER
typedef|;
typedef|typedef
struct|struct
name|_IOCTL_ARG
block|{
name|struct
name|list_head
name|link
decl_stmt|;
name|PVBUS
name|vbus
decl_stmt|;
name|HPT_U32
name|dwIoControlCode
decl_stmt|;
name|HPT_U32
name|nInBufferSize
decl_stmt|;
name|HPT_U32
name|nOutBufferSize
decl_stmt|;
name|void
modifier|*
name|lpInBuffer
decl_stmt|;
name|void
modifier|*
name|lpOutBuffer
decl_stmt|;
name|HPT_U32
modifier|*
name|lpBytesReturned
decl_stmt|;
name|void
modifier|*
name|ioctl_cmnd
decl_stmt|;
name|void
function_decl|(
modifier|*
name|done
function_decl|)
parameter_list|(
name|struct
name|_IOCTL_ARG
modifier|*
parameter_list|)
function_decl|;
name|int
name|result
decl_stmt|;
comment|/* HPT_IOCTL_RESULT_ */
name|struct
name|tq_item
name|dpc
decl_stmt|;
block|}
name|IOCTL_ARG
typedef|;
define|#
directive|define
name|HPT_IOCTL_RESULT_OK
value|0
define|#
directive|define
name|HPT_IOCTL_RESULT_FAILED
value|(-1)
define|#
directive|define
name|HPT_IOCTL_RESULT_INVALID
value|(-2)
define|#
directive|define
name|HPT_IOCTL_RESULT_RETRY
value|(-3)
define|#
directive|define
name|HPT_IOCTL_RESULT_WRONG_VBUS
value|(-4)
name|void
name|ldm_ioctl
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|IOCTL_ARG
modifier|*
name|IAPnt
parameter_list|)
function_decl|;
name|HPT_U32
name|ldm_get_device_id
parameter_list|(
name|PVDEV
name|vd
parameter_list|)
function_decl|;
comment|/* for ioctl */
name|void
name|ldm_set_rebuild_priority
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|int
name|priority
parameter_list|)
function_decl|;
name|void
name|ldm_set_autorebuild
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
include|#
directive|include
file|<dev/hptrr/array.h>
typedef|typedef
struct|struct
name|hpt_raw_disk
block|{
ifdef|#
directive|ifdef
name|SUPPORT_ARRAY
name|PRAW_PARTITION
name|raw_part_list
decl_stmt|;
name|HPT_RAW_LBA
name|max_available_capacity
decl_stmt|;
name|HPT_RAW_LBA
name|total_available_capacity
decl_stmt|;
endif|#
directive|endif
name|HPT_RAW_LBA
name|real_capacity
decl_stmt|;
name|HPT_RAW_LBA
name|head_position
decl_stmt|;
name|HPT_U16
name|max_sectors_per_cmd
decl_stmt|;
name|HPT_U8
name|user_select_mode
decl_stmt|;
name|HPT_U8
name|uninitialized
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|legacy_disk
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|is_spare
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|v3_format
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|need_sync
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|temp_spare
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|need_check_array
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|df_user_mode_set
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|df_read_ahead_set
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|enable_read_ahead
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|df_write_cache_set
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|enable_write_cache
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|df_tcq_set
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|enable_tcq
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|df_ncq_set
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|enable_ncq
range|:
literal|1
decl_stmt|;
name|HIM
modifier|*
name|him
decl_stmt|;
name|int
name|index
decl_stmt|;
name|PLDM_ADAPTER
name|adapter
decl_stmt|;
name|void
modifier|*
name|phy_dev
decl_stmt|;
name|PIDENTIFY_DATA2
name|identify_data
decl_stmt|;
name|char
name|model
index|[
literal|40
index|]
decl_stmt|;
name|struct
name|tq_item
name|reset_dpc
decl_stmt|;
name|int
name|reset_pending
decl_stmt|;
name|struct
name|tq_item
name|fail_dpc
decl_stmt|;
name|int
name|fail_pending
decl_stmt|;
block|}
name|HPT_RAW_DISK
operator|,
typedef|*
name|PHPT_RAW_DISK
typedef|;
struct|struct
name|vdev_class
block|{
name|struct
name|vdev_class
modifier|*
name|next
decl_stmt|;
name|HPT_U8
name|type
decl_stmt|;
name|HPT_U8
name|stripped
decl_stmt|;
comment|/* RAID0,3,5,6 */
name|HPT_U8
name|redundancy
decl_stmt|;
comment|/* RAID1-1, RAID3/5-1, RAID6-2 */
name|HPT_U8
name|must_init
decl_stmt|;
comment|/* RAID3,5,6 */
name|HPT_UINT
name|vbus_ext_size
decl_stmt|;
name|HPT_UINT
name|vbus_ext_offset
decl_stmt|;
comment|/* used by LDM */
name|HPT_UINT
name|dev_ext_size
decl_stmt|;
name|HPT_UINT
name|cmd_ext_size
decl_stmt|;
name|void
function_decl|(
modifier|*
name|get_mem_info
function_decl|)
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|void
modifier|*
name|osext
parameter_list|,
name|int
name|phydev_count
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|queue_cmd
function_decl|)
parameter_list|(
name|PCOMMAND
name|cmd
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|member_failed
function_decl|)
parameter_list|(
name|struct
name|_VDEV
modifier|*
name|vd
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|initialize
function_decl|)
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|release
function_decl|)
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|add
function_decl|)
parameter_list|(
name|PVDEV
name|vd
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|remove
function_decl|)
parameter_list|(
name|PVDEV
name|vd
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|PVDEV
name|vd
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sync_stamp
function_decl|)
parameter_list|(
name|PVDEV
name|vd
parameter_list|)
function_decl|;
block|}
struct|;
define|#
directive|define
name|VDEV_CLASS_CONSTRUCTOR
parameter_list|(
name|type
parameter_list|,
name|prefix
parameter_list|)
value|{ \ 	0, \ 	type, \ 	prefix ## _stripped, \ 	prefix ## _redundancy, \ 	prefix ## _must_init, \ 	prefix ## _vbus_ext_size, \ 	0, \ 	prefix ## _dev_ext_size, \ 	prefix ## _cmd_ext_size, \ 	prefix ## _get_mem_info, \ 	prefix ## _queue_cmd, \ 	prefix ## _member_failed, \ 	prefix ## _initialize, \ 	prefix ## _release, \ 	prefix ## _add, \ 	prefix ## _remove, \ 	prefix ## _reset, \ 	prefix ## _sync_stamp, \ }
define|#
directive|define
name|VD_RAW
value|1
define|#
directive|define
name|VD_PARTITION
value|4
define|#
directive|define
name|mIsArray
parameter_list|(
name|vdev_type
parameter_list|)
value|((vdev_type)>VD_PARTITION)
define|#
directive|define
name|VD_RAID0
value|5
define|#
directive|define
name|VD_RAID1
value|6
define|#
directive|define
name|VD_JBOD
value|7
define|#
directive|define
name|VD_RAID5
value|8
define|#
directive|define
name|VD_RAID6
value|9
define|#
directive|define
name|MAX_VD_TYPE_ID
value|9
name|struct
name|vdev_class
modifier|*
name|ldm_find_vdev_class
parameter_list|(
name|HPT_U8
name|type
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|_VDEV
block|{
name|PVBUS
name|vbus
decl_stmt|;
name|PVDEV
name|parent
decl_stmt|;
name|void
modifier|*
name|ext
decl_stmt|;
name|HPT_U64
name|capacity
decl_stmt|;
name|int
name|target_id
decl_stmt|;
name|HPT_UINT
name|cmds_per_request
decl_stmt|;
union|union
block|{
ifdef|#
directive|ifdef
name|SUPPORT_ARRAY
name|HPT_ARRAY
name|array
decl_stmt|;
name|HPT_PARTITION
name|partition
decl_stmt|;
endif|#
directive|endif
name|HPT_RAW_DISK
name|raw
decl_stmt|;
block|}
name|u
union|;
name|HPT_U8
name|vf_online
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|vf_bootmark
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|vf_bootable
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|vf_resetting
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|vf_quiesced
range|:
literal|1
decl_stmt|;
name|HPT_U8
name|cache_policy
decl_stmt|;
comment|/* see CACHE_POLICY_* */
name|HPT_UINT
name|cq_len
decl_stmt|;
name|HPT_UINT
name|cmds_sent
decl_stmt|;
name|HPT_UINT
name|max_queue_depth
decl_stmt|;
name|struct
name|list_head
name|link
decl_stmt|;
name|struct
name|vdev_class
modifier|*
name|Class
decl_stmt|;
name|struct
name|list_head
name|cq_wait_send
decl_stmt|;
name|struct
name|list_head
name|cq_sent
decl_stmt|;
name|int
name|cq_priority
decl_stmt|;
name|struct
name|list_head
name|cq_wait_lock
decl_stmt|;
name|struct
name|lock_request
modifier|*
name|locks_granted
decl_stmt|;
name|struct
name|lock_request
modifier|*
name|locks_wait
decl_stmt|;
name|HPT_U32
name|ioctl_id
decl_stmt|;
name|void
modifier|*
name|cc_ext
decl_stmt|;
block|}
name|VDEV
typedef|;
define|#
directive|define
name|CACHE_POLICY_NONE
value|0
define|#
directive|define
name|CACHE_POLICY_WRITE_THROUGH
value|1
define|#
directive|define
name|CACHE_POLICY_WRITE_BACK
value|2
specifier|extern
name|HIM
modifier|*
name|him_list
decl_stmt|;
name|void
name|ldm_register_him
parameter_list|(
name|PHIM
name|him
parameter_list|)
function_decl|;
name|void
name|ldm_register_vdev_class
parameter_list|(
name|struct
name|vdev_class
modifier|*
name|Class
parameter_list|)
function_decl|;
name|HPT_BOOL
name|ldm_register_adapter
parameter_list|(
name|PLDM_ADAPTER
name|adapter
parameter_list|)
function_decl|;
name|int
name|init_config
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|HPT_UINT
name|ldm_get_vbus_size
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|ldm_create_vbus
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|void
modifier|*
name|osext
parameter_list|)
function_decl|;
name|void
name|ldm_get_mem_info
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|void
modifier|*
name|osext
parameter_list|)
function_decl|;
name|void
modifier|*
name|ldm_get_vbus_ext
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|struct
name|vdev_class
modifier|*
name|Class
parameter_list|)
function_decl|;
name|PVBUS
name|ldm_get_next_vbus
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|void
modifier|*
modifier|*
name|posext
parameter_list|)
function_decl|;
define|#
directive|define
name|ldm_for_each_vbus
parameter_list|(
name|vbus
parameter_list|,
name|vbus_ext
parameter_list|)
define|\
value|for (vbus = ldm_get_next_vbus(0, (void **)(void *)&vbus_ext); vbus; \ 		vbus = ldm_get_next_vbus(vbus, (void **)(void *)&vbus_ext))
name|void
name|ldm_initialize_vbus_async
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|PLDM_ADAPTER
name|master_adapter
parameter_list|,
name|void
function_decl|(
modifier|*
name|done
function_decl|)
parameter_list|(
name|void
modifier|*
name|osext
parameter_list|)
parameter_list|)
function_decl|;
comment|/* ldm_initialize_vbus is deprecated since it will hold the CPU too long. */
define|#
directive|define
name|ldm_initialize_vbus
parameter_list|(
name|vbus
parameter_list|,
name|adapter
parameter_list|)
value|ldm_initialize_vbus_async(vbus, adapter, 0)
name|void
name|ldm_release_vbus
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|PVDEV
name|ldm_create_vdev
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|HPT_U8
name|type
parameter_list|)
function_decl|;
name|void
name|ldm_release_vdev
parameter_list|(
name|PVDEV
name|vd
parameter_list|)
function_decl|;
name|PVDEV
name|ldm_find_target
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|int
name|id
parameter_list|)
function_decl|;
name|PVDEV
name|ldm_find_stamp
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|HPT_U32
name|stamp
parameter_list|,
name|int
name|seq
parameter_list|)
function_decl|;
name|PCOMMAND
name|ldm_alloc_cmds
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|HPT_UINT
name|cnt
parameter_list|)
function_decl|;
name|void
name|ldm_free_cmds
parameter_list|(
name|PCOMMAND
name|cmd
parameter_list|)
function_decl|;
name|HPT_UINT
name|ldm_get_cmd_size
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|PCOMMAND
name|ldm_alloc_cmds_from_list
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|struct
name|freelist
modifier|*
name|list
parameter_list|,
name|HPT_UINT
name|cnt
parameter_list|)
function_decl|;
name|void
name|ldm_free_cmds_to_list
parameter_list|(
name|struct
name|freelist
modifier|*
name|list
parameter_list|,
name|PCOMMAND
name|cmd
parameter_list|)
function_decl|;
name|PCOMMAND
name|__ldm_alloc_cmd
parameter_list|(
name|struct
name|freelist
modifier|*
name|list
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|OS_SUPPORT_TASK
define|#
directive|define
name|CMD_SET_PRIORITY
parameter_list|(
name|cmd
parameter_list|,
name|pri
parameter_list|)
value|cmd->priority = (pri)
else|#
directive|else
define|#
directive|define
name|CMD_SET_PRIORITY
parameter_list|(
name|cmd
parameter_list|,
name|pri
parameter_list|)
endif|#
directive|endif
define|#
directive|define
name|CMD_GROUP_GET
parameter_list|(
name|grp
parameter_list|,
name|cmd
parameter_list|)
define|\
value|do {\ 		grp->grplist->count++;\ 		cmd = __ldm_alloc_cmd(grp->grplist);\ 		cmd->vbus = grp->vbus;\ 		cmd->grplist = grp->grplist;\ 		CMD_SET_PRIORITY(cmd, grp->priority);\ 	} while(0)
define|#
directive|define
name|CMD_GROUP_PUT
parameter_list|(
name|grp
parameter_list|,
name|cmd
parameter_list|)
define|\
value|do {\ 		freelist_put(grp->grplist, cmd);\ 		grp->grplist->count--;\ 	} while (0)
name|void
name|ldm_queue_cmd
parameter_list|(
name|PCOMMAND
name|cmd
parameter_list|)
function_decl|;
name|void
name|vdev_queue_cmd
parameter_list|(
name|PCOMMAND
name|cmd
parameter_list|)
function_decl|;
name|void
name|ldm_finish_cmd
parameter_list|(
name|PCOMMAND
name|cmd
parameter_list|)
function_decl|;
name|int
name|ldm_acquire_lock
parameter_list|(
name|PVDEV
name|vd
parameter_list|,
name|struct
name|lock_request
modifier|*
name|req
parameter_list|)
function_decl|;
name|void
name|ldm_release_lock
parameter_list|(
name|PVDEV
name|vd
parameter_list|,
name|struct
name|lock_request
modifier|*
name|req
parameter_list|)
function_decl|;
name|void
name|ldm_queue_task
parameter_list|(
name|struct
name|task_queue
modifier|*
name|tq
parameter_list|,
name|struct
name|tq_item
modifier|*
name|t
parameter_list|)
function_decl|;
name|void
name|ldm_queue_vbus_dpc
parameter_list|(
name|PVBUS
name|vbus
parameter_list|,
name|struct
name|tq_item
modifier|*
name|t
parameter_list|)
function_decl|;
name|HPT_BOOL
name|ldm_intr
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|void
name|ldm_run
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|int
name|ldm_idle
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|int
name|ldm_reset_vbus
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|void
name|ldm_suspend
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|void
name|ldm_resume
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
name|void
name|ldm_shutdown
parameter_list|(
name|PVBUS
name|vbus
parameter_list|)
function_decl|;
comment|/*shutdown all the controllers*/
define|#
directive|define
name|HIM_EVENT_DEVICE_REMOVED
value|1
define|#
directive|define
name|HIM_EVENT_DEVICE_PLUGGED
value|2
define|#
directive|define
name|HIM_EVENT_DEVICE_ERROR
value|3
define|#
directive|define
name|HIM_EVENT_RESET_REQUIRED
value|4
define|#
directive|define
name|HIM_EVENT_QUIESCE_DEVICE
value|5
define|#
directive|define
name|HIM_EVENT_UNQUIESCE_DEVICE
value|6
define|#
directive|define
name|HIM_EVENT_CONFIG_CHANGED
value|7
name|void
name|ldm_event_notify
parameter_list|(
name|HPT_U32
name|event
parameter_list|,
name|void
modifier|*
name|arg1
parameter_list|,
name|void
modifier|*
name|arg2
parameter_list|)
function_decl|;
name|void
name|log_sector_repair
parameter_list|(
name|PVDEV
name|vd
parameter_list|,
name|int
name|success
parameter_list|,
name|HPT_LBA
name|lba
parameter_list|,
name|HPT_U16
name|nsectors
parameter_list|)
function_decl|;
name|void
name|ldm_register_device
parameter_list|(
name|PVDEV
name|vd
parameter_list|)
function_decl|;
name|void
name|ldm_unregister_device
parameter_list|(
name|PVDEV
name|vd
parameter_list|)
function_decl|;
name|PVBUS
name|him_handle_to_vbus
parameter_list|(
name|void
modifier|*
name|him_handle
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

