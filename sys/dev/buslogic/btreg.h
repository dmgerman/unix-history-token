begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Generic register and struct definitions for the BusLogic  * MultiMaster SCSI host adapters.  Product specific probe and  * attach routines can be found in:  * i386/isa/bt_isa.c	BT-54X, BT-445 cards  * i386/eisa/bt_eisa.c	BT-74x, BT-75x cards  * pci/bt_pci.c		BT-946, BT-948, BT-956, BT-958 cards  *  * Copyright (c) 1998 Justin T. Gibbs.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification, immediately at the beginning of the file.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *      $Id: btreg.h,v 1.1 1998/09/15 07:32:49 gibbs Exp $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_BTREG_H_
end_ifndef

begin_define
define|#
directive|define
name|_BTREG_H_
end_define

begin_include
include|#
directive|include
file|"bt.h"
end_include

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_define
define|#
directive|define
name|BT_MAXTRANSFER_SIZE
value|0xffffffff
end_define

begin_comment
comment|/* limited by 32bit counter */
end_comment

begin_define
define|#
directive|define
name|BT_NSEG
value|32
end_define

begin_comment
comment|/* The number of dma segments supported.                                  * BT_NSEG can be maxed out at 8192 entries,                                  * but the kernel will never need to transfer                                  * such a large request.  To reduce the                                  * driver's memory consumption, we reduce the                                  * max to 32.  16 would work if all transfers                                  * are paged alined since the kernel will only                                  * generate at most a 64k transfer, but to                                  * handle non-page aligned transfers, you need                                  * 17, so we round to the next power of two                                  * to make allocating SG space easy and                                  * efficient. 				 */
end_comment

begin_define
define|#
directive|define
name|ALL_TARGETS
value|(~0)
end_define

begin_comment
comment|/*  * Control Register pp. 1-8, 1-9 (Write Only)  */
end_comment

begin_define
define|#
directive|define
name|CONTROL_REG
value|0x00
end_define

begin_define
define|#
directive|define
name|HARD_RESET
value|0x80
end_define

begin_comment
comment|/* Hard Reset - return to POST state */
end_comment

begin_define
define|#
directive|define
name|SOFT_RESET
value|0x40
end_define

begin_comment
comment|/* Soft Reset - Clears Adapter state */
end_comment

begin_define
define|#
directive|define
name|RESET_INTR
value|0x20
end_define

begin_comment
comment|/* Reset/Ack Interrupt */
end_comment

begin_define
define|#
directive|define
name|RESET_SBUS
value|0x10
end_define

begin_comment
comment|/* Drive SCSI bus reset signal */
end_comment

begin_comment
comment|/*  * Status Register pp. 1-9, 1-10 (Read Only)  */
end_comment

begin_define
define|#
directive|define
name|STATUS_REG
value|0x00
end_define

begin_define
define|#
directive|define
name|DIAG_ACTIVE
value|0x80
end_define

begin_comment
comment|/* Performing Internal Diags */
end_comment

begin_define
define|#
directive|define
name|DIAG_FAIL
value|0x40
end_define

begin_comment
comment|/* Internal Diags failed */
end_comment

begin_define
define|#
directive|define
name|INIT_REQUIRED
value|0x20
end_define

begin_comment
comment|/* MBOXes need initialization */
end_comment

begin_define
define|#
directive|define
name|HA_READY
value|0x10
end_define

begin_comment
comment|/* HA ready for new commands */
end_comment

begin_define
define|#
directive|define
name|CMD_REG_BUSY
value|0x08
end_define

begin_comment
comment|/* HA busy with last cmd byte */
end_comment

begin_define
define|#
directive|define
name|DATAIN_REG_READY
value|0x04
end_define

begin_comment
comment|/* Data-in Byte available */
end_comment

begin_define
define|#
directive|define
name|STATUS_REG_RSVD
value|0x02
end_define

begin_define
define|#
directive|define
name|CMD_INVALID
value|0x01
end_define

begin_comment
comment|/* Invalid Command detected */
end_comment

begin_comment
comment|/*  * Command/Parameter Register pp. 1-10, 1-11 (Write Only)  */
end_comment

begin_define
define|#
directive|define
name|COMMAND_REG
value|0x01
end_define

begin_comment
comment|/*  * Data in Register p. 1-11 (Read Only)  */
end_comment

begin_define
define|#
directive|define
name|DATAIN_REG
value|0x01
end_define

begin_comment
comment|/*  * Interrupt Status Register pp. 1-12 -> 1-14 (Read Only)  */
end_comment

begin_define
define|#
directive|define
name|INTSTAT_REG
value|0x02
end_define

begin_define
define|#
directive|define
name|INTR_PENDING
value|0x80
end_define

begin_comment
comment|/* There is a pending INTR */
end_comment

begin_define
define|#
directive|define
name|INTSTAT_REG_RSVD
value|0x70
end_define

begin_define
define|#
directive|define
name|SCSI_BUS_RESET
value|0x08
end_define

begin_comment
comment|/* Bus Reset detected */
end_comment

begin_define
define|#
directive|define
name|CMD_COMPLETE
value|0x04
end_define

begin_define
define|#
directive|define
name|OMB_READY
value|0x02
end_define

begin_comment
comment|/* Outgoin Mailbox Ready */
end_comment

begin_define
define|#
directive|define
name|IMB_LOADED
value|0x01
end_define

begin_comment
comment|/* Incoming Mailbox loaded */
end_comment

begin_comment
comment|/*  * Definitions for the "undocumented" geometry register  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|GEOM_NODISK
block|,
name|GEOM_64x32
block|,
name|GEOM_128x32
block|,
name|GEOM_255x32
block|}
name|disk_geom_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|GEOMETRY_REG
value|0x03
end_define

begin_define
define|#
directive|define
name|DISK0_GEOMETRY
value|0x03
end_define

begin_define
define|#
directive|define
name|DISK1_GEOMETRY
value|0x0c
end_define

begin_define
define|#
directive|define
name|EXTENDED_TRANSLATION
value|0x10
end_define

begin_define
define|#
directive|define
name|GEOMETRY_DISK0
parameter_list|(
name|g_reg
parameter_list|)
value|(greg& DISK0_GEOMETRY)
end_define

begin_define
define|#
directive|define
name|GEOMETRY_DISK1
parameter_list|(
name|g_reg
parameter_list|)
value|((greg& DISK1_GEOMETRY)>> 2)
end_define

begin_define
define|#
directive|define
name|BT_NREGS
value|(4)
end_define

begin_comment
comment|/*  * Opcodes for Adapter commands.  * pp 1-18 -> 1-20  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|BOP_TEST_CMDC_INTR
init|=
literal|0x00
block|,
name|BOP_INITIALIZE_24BMBOX
init|=
literal|0x01
block|,
name|BOP_START_MBOX
init|=
literal|0x02
block|,
name|BOP_EXECUTE_BIOS_CMD
init|=
literal|0x03
block|,
name|BOP_INQUIRE_BOARD_ID
init|=
literal|0x04
block|,
name|BOP_ENABLE_OMBR_INT
init|=
literal|0x05
block|,
name|BOP_SET_SEL_TIMOUT
init|=
literal|0x06
block|,
name|BOP_SET_TIME_ON_BUS
init|=
literal|0x07
block|,
name|BOP_SET_TIME_OFF_BUS
init|=
literal|0x08
block|,
name|BOP_SET_BUS_TRANS_RATE
init|=
literal|0x09
block|,
name|BOP_INQUIRE_INST_LDEVS
init|=
literal|0x0A
block|,
name|BOP_INQUIRE_CONFIG
init|=
literal|0x0B
block|,
name|BOP_ENABLE_TARGET_MODE
init|=
literal|0x0C
block|,
name|BOP_INQUIRE_SETUP_INFO
init|=
literal|0x0D
block|,
name|BOP_WRITE_LRAM
init|=
literal|0x1A
block|,
name|BOP_READ_LRAM
init|=
literal|0x1B
block|,
name|BOP_WRITE_CHIP_FIFO
init|=
literal|0x1C
block|,
name|BOP_READ_CHIP_FIFO
init|=
literal|0x1C
block|,
name|BOP_ECHO_DATA_BYTE
init|=
literal|0x1F
block|,
name|BOP_ADAPTER_DIAGNOSTICS
init|=
literal|0x20
block|,
name|BOP_SET_ADAPTER_OPTIONS
init|=
literal|0x21
block|,
name|BOP_INQUIRE_INST_HDEVS
init|=
literal|0x23
block|,
name|BOP_INQUIRE_TARG_DEVS
init|=
literal|0x24
block|,
name|BOP_DISABLE_HAC_INTR
init|=
literal|0x25
block|,
name|BOP_INITIALIZE_32BMBOX
init|=
literal|0x81
block|,
name|BOP_EXECUTE_SCSI_CMD
init|=
literal|0x83
block|,
name|BOP_INQUIRE_FW_VER_3DIG
init|=
literal|0x84
block|,
name|BOP_INQUIRE_FW_VER_4DIG
init|=
literal|0x85
block|,
name|BOP_INQUIRE_PCI_INFO
init|=
literal|0x86
block|,
name|BOP_INQUIRE_MODEL
init|=
literal|0x8B
block|,
name|BOP_TARG_SYNC_INFO
init|=
literal|0x8C
block|,
name|BOP_INQUIRE_ESETUP_INFO
init|=
literal|0x8D
block|,
name|BOP_ENABLE_STRICT_RR
init|=
literal|0x8F
block|,
name|BOP_STORE_LRAM
init|=
literal|0x90
block|,
name|BOP_FETCH_LRAM
init|=
literal|0x91
block|,
name|BOP_SAVE_TO_EEPROM
init|=
literal|0x92
block|,
name|BOP_UPLOAD_AUTO_SCSI
init|=
literal|0x94
block|,
name|BOP_MODIFY_IO_ADDR
init|=
literal|0x95
block|,
name|BOP_SET_CCB_FORMAT
init|=
literal|0x96
block|,
name|BOP_FLASH_ROM_DOWNLOAD
init|=
literal|0x97
block|,
name|BOP_FLASH_WRITE_ENABLE
init|=
literal|0x98
block|,
name|BOP_WRITE_INQ_BUFFER
init|=
literal|0x9A
block|,
name|BOP_READ_INQ_BUFFER
init|=
literal|0x9B
block|,
name|BOP_FLASH_UP_DOWNLOAD
init|=
literal|0xA7
block|,
name|BOP_READ_SCAM_DATA
init|=
literal|0xA8
block|,
name|BOP_WRITE_SCAM_DATA
init|=
literal|0xA9
block|}
name|bt_op_t
typedef|;
end_typedef

begin_comment
comment|/************** Definitions of Multi-byte commands and responses ************/
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|num_mboxes
decl_stmt|;
name|u_int8_t
name|base_addr
index|[
literal|3
index|]
decl_stmt|;
block|}
name|init_24b_mbox_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|board_type
decl_stmt|;
define|#
directive|define
name|BOARD_TYPE_NON_MCA
value|0x41
define|#
directive|define
name|BOARD_TYPE_MCA
value|0x42
name|u_int8_t
name|cust_features
decl_stmt|;
define|#
directive|define
name|FEATURES_STANDARD
value|0x41
name|u_int8_t
name|firmware_rev_major
decl_stmt|;
name|u_int8_t
name|firmware_rev_minor
decl_stmt|;
block|}
name|board_id_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|enable
decl_stmt|;
block|}
name|enable_ombr_intr_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|enable
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|timeout
index|[
literal|2
index|]
decl_stmt|;
comment|/* timeout in milliseconds */
block|}
name|set_selto_parmas_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|time
decl_stmt|;
comment|/* time in milliseconds (2-15) */
block|}
name|set_timeon_bus_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|time
decl_stmt|;
comment|/* time in milliseconds (2-15) */
block|}
name|set_timeoff_bus_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|rate
decl_stmt|;
block|}
name|set_bus_trasfer_rate_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|targets
index|[
literal|8
index|]
decl_stmt|;
block|}
name|installed_ldevs_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|dma_chan
decl_stmt|;
define|#
directive|define
name|DMA_CHAN_5
value|0x20
define|#
directive|define
name|DMA_CHAN_6
value|0x40
define|#
directive|define
name|DMA_CHAN_7
value|0x80
name|u_int8_t
name|irq
decl_stmt|;
define|#
directive|define
name|IRQ_9
value|0x01
define|#
directive|define
name|IRQ_10
value|0x02
define|#
directive|define
name|IRQ_11
value|0x04
define|#
directive|define
name|IRQ_12
value|0x08
define|#
directive|define
name|IRQ_14
value|0x20
define|#
directive|define
name|IRQ_15
value|0x40
name|u_int8_t
name|scsi_id
decl_stmt|;
block|}
name|config_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|enable
decl_stmt|;
block|}
name|target_mode_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|offset
range|:
literal|4
decl_stmt|,
name|period
range|:
literal|3
decl_stmt|,
name|sync
range|:
literal|1
decl_stmt|;
block|}
name|targ_syncinfo_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAB_ISA
init|=
literal|'A'
block|,
name|HAB_MCA
init|=
literal|'B'
block|,
name|HAB_EISA
init|=
literal|'C'
block|,
name|HAB_NUBUS
init|=
literal|'D'
block|,
name|HAB_VESA
init|=
literal|'E'
block|,
name|HAB_PCI
init|=
literal|'F'
block|}
name|ha_type_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|initiate_sync
range|:
literal|1
decl_stmt|,
name|parity_enable
range|:
literal|1
decl_stmt|,
range|:
literal|6
decl_stmt|;
name|u_int8_t
name|bus_transfer_rate
decl_stmt|;
name|u_int8_t
name|time_on_bus
decl_stmt|;
name|u_int8_t
name|time_off_bus
decl_stmt|;
name|u_int8_t
name|num_mboxes
decl_stmt|;
name|u_int8_t
name|mbox_base_addr
index|[
literal|3
index|]
decl_stmt|;
name|targ_syncinfo_t
name|low_syncinfo
index|[
literal|8
index|]
decl_stmt|;
comment|/* For fast and ultra, use 8C */
name|u_int8_t
name|low_discinfo
decl_stmt|;
name|u_int8_t
name|customer_sig
decl_stmt|;
name|u_int8_t
name|letter_d
decl_stmt|;
name|u_int8_t
name|ha_type
decl_stmt|;
name|u_int8_t
name|low_wide_allowed
decl_stmt|;
name|u_int8_t
name|low_wide_active
decl_stmt|;
name|targ_syncinfo_t
name|high_syncinfo
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|high_discinfo
decl_stmt|;
name|u_int8_t
name|high_wide_allowed
decl_stmt|;
name|u_int8_t
name|high_wide_active
decl_stmt|;
block|}
name|setup_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|phys_addr
index|[
literal|3
index|]
decl_stmt|;
block|}
name|write_adapter_lram_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|phys_addr
index|[
literal|3
index|]
decl_stmt|;
block|}
name|read_adapter_lram_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|phys_addr
index|[
literal|3
index|]
decl_stmt|;
block|}
name|write_chip_fifo_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|phys_addr
index|[
literal|3
index|]
decl_stmt|;
block|}
name|read_chip_fifo_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|length
decl_stmt|;
comment|/* Excludes this member */
name|u_int8_t
name|low_disc_disable
decl_stmt|;
name|u_int8_t
name|low_busy_retry_disable
decl_stmt|;
name|u_int8_t
name|high_disc_disable
decl_stmt|;
name|u_int8_t
name|high_busy_retry_disable
decl_stmt|;
block|}
name|set_adapter_options_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|targets
index|[
literal|8
index|]
decl_stmt|;
block|}
name|installed_hdevs_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|low_devs
decl_stmt|;
name|u_int8_t
name|high_devs
decl_stmt|;
block|}
name|target_devs_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|enable
decl_stmt|;
block|}
name|enable_hac_interrupt_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|num_boxes
decl_stmt|;
name|u_int8_t
name|base_addr
index|[
literal|4
index|]
decl_stmt|;
block|}
name|init_32b_mbox_params_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int8_t
name|fw_ver_3dig_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int8_t
name|fw_ver_4dig_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|offset
decl_stmt|;
name|u_int8_t
name|response_len
decl_stmt|;
block|}
name|fetch_lram_params_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|AUTO_SCSI_BYTE_OFFSET
value|64
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|factory_sig
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|auto_scsi_data_size
decl_stmt|;
comment|/* 2 -> 64 bytes */
name|u_int8_t
name|model_num
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|adapter_ioport
decl_stmt|;
name|u_int8_t
name|floppy_enabled
range|:
literal|1
decl_stmt|,
name|floppy_secondary
range|:
literal|1
decl_stmt|,
name|level_trigger
range|:
literal|1
decl_stmt|,
range|:
literal|2
decl_stmt|,
name|system_ram_area
range|:
literal|3
decl_stmt|;
name|u_int8_t
name|dma_channel
range|:
literal|7
decl_stmt|,
name|dma_autoconf
range|:
literal|1
decl_stmt|;
name|u_int8_t
name|irq_channel
range|:
literal|7
decl_stmt|,
name|irq_autoconf
range|:
literal|1
decl_stmt|;
name|u_int8_t
name|dma_trans_rate
decl_stmt|;
name|u_int8_t
name|scsi_id
decl_stmt|;
name|u_int8_t
name|low_termination
range|:
literal|1
decl_stmt|,
name|scsi_parity
range|:
literal|1
decl_stmt|,
name|high_termination
range|:
literal|1
decl_stmt|,
name|req_ack_filter
range|:
literal|1
decl_stmt|,
name|fast_sync
range|:
literal|1
decl_stmt|,
name|bus_reset
range|:
literal|1
decl_stmt|,
range|:
literal|1
decl_stmt|,
name|active_negation
range|:
literal|1
decl_stmt|;
name|u_int8_t
name|bus_on_delay
decl_stmt|;
name|u_int8_t
name|bus_off_delay
decl_stmt|;
name|u_int8_t
name|bios_enabled
range|:
literal|1
decl_stmt|,
name|int19h_redirect
range|:
literal|1
decl_stmt|,
name|extended_trans
range|:
literal|1
decl_stmt|,
name|removable_drives
range|:
literal|1
decl_stmt|,
range|:
literal|1
decl_stmt|,
name|morethan2disks
range|:
literal|1
decl_stmt|,
name|interrupt_mode
range|:
literal|1
decl_stmt|,
name|floptical_support
range|:
literal|1
decl_stmt|;
name|u_int8_t
name|low_device_enabled
decl_stmt|;
name|u_int8_t
name|high_device_enabled
decl_stmt|;
name|u_int8_t
name|low_wide_permitted
decl_stmt|;
name|u_int8_t
name|high_wide_permitted
decl_stmt|;
name|u_int8_t
name|low_fast_permitted
decl_stmt|;
name|u_int8_t
name|high_fast_permitted
decl_stmt|;
name|u_int8_t
name|low_sync_permitted
decl_stmt|;
name|u_int8_t
name|high_sync_permitted
decl_stmt|;
name|u_int8_t
name|low_disc_permitted
decl_stmt|;
name|u_int8_t
name|high_disc_permitted
decl_stmt|;
name|u_int8_t
name|low_send_start_unit
decl_stmt|;
name|u_int8_t
name|high_send_start_unit
decl_stmt|;
name|u_int8_t
name|low_ignore_in_bios_scan
decl_stmt|;
name|u_int8_t
name|high_ignore_in_bios_scan
decl_stmt|;
name|u_int8_t
name|pci_int_pin
range|:
literal|2
decl_stmt|,
name|host_ioport
range|:
literal|2
decl_stmt|,
name|round_robin
range|:
literal|1
decl_stmt|,
name|vesa_bus_over_33
range|:
literal|1
decl_stmt|,
name|vesa_burst_write
range|:
literal|1
decl_stmt|,
name|vesa_burst_read
range|:
literal|1
decl_stmt|;
name|u_int8_t
name|low_ultra_permitted
decl_stmt|;
name|u_int8_t
name|high_ultra_permitted
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|5
index|]
decl_stmt|;
name|u_int8_t
name|auto_scsi_max_lun
decl_stmt|;
name|u_int8_t
label|:
literal|1
operator|,
name|scam_dominant
operator|:
literal|1
operator|,
name|scam_enabled
operator|:
literal|1
operator|,
name|scam_level2
operator|:
literal|1
operator|,
operator|:
literal|4
expr_stmt|;
name|u_int8_t
name|int13_extensions
range|:
literal|1
decl_stmt|,
range|:
literal|1
decl_stmt|,
name|cdrom_boot
range|:
literal|1
decl_stmt|,
range|:
literal|2
decl_stmt|,
name|multi_boot
range|:
literal|1
decl_stmt|,
range|:
literal|2
decl_stmt|;
name|u_int8_t
name|boot_target_id
range|:
literal|4
decl_stmt|,
name|boot_channel
range|:
literal|4
decl_stmt|;
name|u_int8_t
name|force_dev_scan
range|:
literal|1
decl_stmt|,
range|:
literal|7
decl_stmt|;
name|u_int8_t
name|low_tagged_lun_independance
decl_stmt|;
name|u_int8_t
name|high_tagged_lun_independance
decl_stmt|;
name|u_int8_t
name|low_renegotiate_after_cc
decl_stmt|;
name|u_int8_t
name|high_renegotiate_after_cc
decl_stmt|;
name|u_int8_t
name|reserverd2
index|[
literal|10
index|]
decl_stmt|;
name|u_int8_t
name|manufacturing_diagnotic
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|checksum
index|[
literal|2
index|]
decl_stmt|;
block|}
name|auto_scsi_data_t
typedef|;
end_typedef

begin_struct
struct|struct
name|bt_isa_port
block|{
name|u_int16_t
name|addr
decl_stmt|;
name|u_int8_t
name|probed
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|bt_isa_port
name|bt_isa_ports
index|[]
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|BT_NUM_ISAPORTS
value|6
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|BIO_330
init|=
literal|0
block|,
name|BIO_334
init|=
literal|1
block|,
name|BIO_230
init|=
literal|2
block|,
name|BIO_234
init|=
literal|3
block|,
name|BIO_130
init|=
literal|4
block|,
name|BIO_134
init|=
literal|5
block|,
name|BIO_DISABLED
init|=
literal|6
block|,
name|BIO_DISABLED2
init|=
literal|7
block|}
name|isa_compat_io_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|io_port
decl_stmt|;
name|u_int8_t
name|irq_num
decl_stmt|;
name|u_int8_t
name|low_byte_term
range|:
literal|1
decl_stmt|,
name|high_byte_term
range|:
literal|1
decl_stmt|,
range|:
literal|2
decl_stmt|,
name|jp1_status
range|:
literal|1
decl_stmt|,
name|jp2_status
range|:
literal|1
decl_stmt|,
name|jp3_status
range|:
literal|1
decl_stmt|,
range|:
literal|1
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
block|}
name|pci_info_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|ascii_model
index|[
literal|5
index|]
decl_stmt|;
comment|/* Fifth byte is always 0 */
block|}
name|ha_model_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|sync_rate
index|[
literal|16
index|]
decl_stmt|;
comment|/* Sync in 10ns units */
block|}
name|target_sync_info_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|bus_type
decl_stmt|;
name|u_int8_t
name|bios_addr
decl_stmt|;
name|u_int16_t
name|max_sg
decl_stmt|;
name|u_int8_t
name|num_mboxes
decl_stmt|;
name|u_int8_t
name|mbox_base
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
label|:
literal|2
operator|,
name|sync_neg10MB
operator|:
literal|1
operator|,
name|floppy_disable
operator|:
literal|1
operator|,
name|floppy_secondary_port
operator|:
literal|1
operator|,
name|burst_mode_enabled
operator|:
literal|1
operator|,
name|level_trigger_ints
operator|:
literal|1
operator|,
operator|:
literal|1
expr_stmt|;
name|u_int8_t
name|fw_ver_bytes_2_to_4
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|wide_bus
range|:
literal|1
decl_stmt|,
name|diff_bus
range|:
literal|1
decl_stmt|,
name|scam_capable
range|:
literal|1
decl_stmt|,
name|ultra_scsi
range|:
literal|1
decl_stmt|,
name|auto_term
range|:
literal|1
decl_stmt|,
range|:
literal|3
decl_stmt|;
block|}
name|esetup_info_data_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int32_t
name|len
decl_stmt|;
name|u_int32_t
name|addr
decl_stmt|;
block|}
name|bt_sg_t
typedef|;
end_typedef

begin_comment
comment|/********************** Mail Box definitions *******************************/
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|BMBO_FREE
init|=
literal|0x0
block|,
comment|/* MBO intry is free */
name|BMBO_START
init|=
literal|0x1
block|,
comment|/* MBO activate entry */
name|BMBO_ABORT
init|=
literal|0x2
comment|/* MBO abort entry */
block|}
name|bt_mbo_action_code_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|bt_mbox_out
block|{
name|u_int32_t
name|ccb_addr
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|action_code
decl_stmt|;
block|}
name|bt_mbox_out_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|BMBI_FREE
init|=
literal|0x0
block|,
comment|/* MBI entry is free */
name|BMBI_OK
init|=
literal|0x1
block|,
comment|/* completed without error */
name|BMBI_ABORT
init|=
literal|0x2
block|,
comment|/* aborted ccb */
name|BMBI_NOT_FOUND
init|=
literal|0x3
block|,
comment|/* Tried to abort invalid CCB */
name|BMBI_ERROR
init|=
literal|0x4
comment|/* Completed with error */
block|}
name|bt_mbi_comp_code_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|bt_mbox_in
block|{
name|u_int32_t
name|ccb_addr
decl_stmt|;
name|u_int8_t
name|btstat
decl_stmt|;
name|u_int8_t
name|sdstat
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|comp_code
decl_stmt|;
block|}
name|bt_mbox_in_t
typedef|;
end_typedef

begin_comment
comment|/****************** Hardware CCB definition *********************************/
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|INITIATOR_CCB
init|=
literal|0x00
block|,
name|INITIATOR_SG_CCB
init|=
literal|0x02
block|,
name|INITIATOR_CCB_WRESID
init|=
literal|0x03
block|,
name|INITIATOR_SG_CCB_WRESID
init|=
literal|0x04
block|,
name|INITIATOR_BUS_DEV_RESET
init|=
literal|0x81
block|}
name|bt_ccb_opcode_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|BTSTAT_NOERROR
init|=
literal|0x00
block|,
name|BTSTAT_LINKED_CMD_COMPLETE
init|=
literal|0x0A
block|,
name|BTSTAT_LINKED_CMD_FLAG_COMPLETE
init|=
literal|0x0B
block|,
name|BTSTAT_DATAUNDERUN_ERROR
init|=
literal|0x0C
block|,
name|BTSTAT_SELTIMEOUT
init|=
literal|0x11
block|,
name|BTSTAT_DATARUN_ERROR
init|=
literal|0x12
block|,
name|BTSTAT_UNEXPECTED_BUSFREE
init|=
literal|0x13
block|,
name|BTSTAT_INVALID_PHASE
init|=
literal|0x14
block|,
name|BTSTAT_INVALID_ACTION_CODE
init|=
literal|0x15
block|,
name|BTSTAT_INVALID_OPCODE
init|=
literal|0x16
block|,
name|BTSTAT_LINKED_CCB_LUN_MISMATCH
init|=
literal|0x17
block|,
name|BTSTAT_INVALID_CCB_OR_SG_PARAM
init|=
literal|0x1A
block|,
name|BTSTAT_AUTOSENSE_FAILED
init|=
literal|0x1B
block|,
name|BTSTAT_TAGGED_MSG_REJECTED
init|=
literal|0x1C
block|,
name|BTSTAT_UNSUPPORTED_MSG_RECEIVED
init|=
literal|0x1D
block|,
name|BTSTAT_HARDWARE_FAILURE
init|=
literal|0x20
block|,
name|BTSTAT_TARGET_IGNORED_ATN
init|=
literal|0x21
block|,
name|BTSTAT_HA_SCSI_BUS_RESET
init|=
literal|0x22
block|,
name|BTSTAT_OTHER_SCSI_BUS_RESET
init|=
literal|0x23
block|,
name|BTSTAT_INVALID_RECONNECT
init|=
literal|0x24
block|,
name|BTSTAT_HA_BDR
init|=
literal|0x25
block|,
name|BTSTAT_ABORT_QUEUE_GENERATED
init|=
literal|0x26
block|,
name|BTSTAT_HA_SOFTWARE_ERROR
init|=
literal|0x27
block|,
name|BTSTAT_HA_WATCHDOG_ERROR
init|=
literal|0x28
block|,
name|BTSTAT_SCSI_PERROR_DETECTED
init|=
literal|0x30
block|}
name|btstat_t
typedef|;
end_typedef

begin_struct
struct|struct
name|bt_hccb
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
label|:
literal|3
operator|,
name|datain
operator|:
literal|1
operator|,
name|dataout
operator|:
literal|1
operator|,
name|wide_tag_enable
operator|:
literal|1
operator|,
comment|/* Wide Lun CCB format */
name|wide_tag_type
operator|:
literal|2
expr_stmt|;
comment|/* Wide Lun CCB format */
name|u_int8_t
name|cmd_len
decl_stmt|;
name|u_int8_t
name|sense_len
decl_stmt|;
name|u_int32_t
name|data_len
decl_stmt|;
name|u_int32_t
name|data_addr
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|btstat
decl_stmt|;
name|u_int8_t
name|sdstat
decl_stmt|;
name|u_int8_t
name|target_id
decl_stmt|;
name|u_int8_t
name|target_lun
range|:
literal|5
decl_stmt|,
name|tag_enable
range|:
literal|1
decl_stmt|,
name|tag_type
range|:
literal|2
decl_stmt|;
name|u_int8_t
name|scsi_cdb
index|[
literal|12
index|]
decl_stmt|;
name|u_int8_t
name|reserved2
index|[
literal|6
index|]
decl_stmt|;
name|u_int32_t
name|sense_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|BCCB_FREE
init|=
literal|0x0
block|,
name|BCCB_ACTIVE
init|=
literal|0x1
block|,
name|BCCB_DEVICE_RESET
init|=
literal|0x2
block|,
name|BCCB_RELEASE_SIMQ
init|=
literal|0x4
block|}
name|bccb_flags_t
typedef|;
end_typedef

begin_struct
struct|struct
name|bt_ccb
block|{
name|struct
name|bt_hccb
name|hccb
decl_stmt|;
name|SLIST_ENTRY
argument_list|(
argument|bt_ccb
argument_list|)
name|links
expr_stmt|;
name|u_int32_t
name|flags
decl_stmt|;
name|union
name|ccb
modifier|*
name|ccb
decl_stmt|;
name|bus_dmamap_t
name|dmamap
decl_stmt|;
name|bt_sg_t
modifier|*
name|sg_list
decl_stmt|;
name|u_int32_t
name|sg_list_phys
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sg_map_node
block|{
name|bus_dmamap_t
name|sg_dmamap
decl_stmt|;
name|bus_addr_t
name|sg_physaddr
decl_stmt|;
name|bt_sg_t
modifier|*
name|sg_vaddr
decl_stmt|;
name|SLIST_ENTRY
argument_list|(
argument|sg_map_node
argument_list|)
name|links
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bt_softc
block|{
name|bus_space_tag_t
name|tag
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|struct
name|cam_sim
modifier|*
name|sim
decl_stmt|;
name|struct
name|cam_path
modifier|*
name|path
decl_stmt|;
name|bt_mbox_out_t
modifier|*
name|cur_outbox
decl_stmt|;
name|bt_mbox_in_t
modifier|*
name|cur_inbox
decl_stmt|;
name|bt_mbox_out_t
modifier|*
name|last_outbox
decl_stmt|;
name|bt_mbox_in_t
modifier|*
name|last_inbox
decl_stmt|;
name|struct
name|bt_ccb
modifier|*
name|bt_ccb_array
decl_stmt|;
name|SLIST_HEAD
argument_list|(
argument_list|,
argument|bt_ccb
argument_list|)
name|free_bt_ccbs
expr_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|ccb_hdr
argument_list|)
name|pending_ccbs
expr_stmt|;
name|u_int32_t
name|bt_ccb_physbase
decl_stmt|;
name|bt_mbox_in_t
modifier|*
name|in_boxes
decl_stmt|;
name|bt_mbox_out_t
modifier|*
name|out_boxes
decl_stmt|;
name|struct
name|scsi_sense_data
modifier|*
name|sense_buffers
decl_stmt|;
name|u_int32_t
name|sense_buffers_physbase
decl_stmt|;
name|struct
name|bt_ccb
modifier|*
name|recovery_bccb
decl_stmt|;
name|u_int
name|num_boxes
decl_stmt|;
name|bus_dma_tag_t
name|parent_dmat
decl_stmt|;
comment|/* 						 * All dmat's derive from 						 * the dmat defined by our 						 * bus. 						 */
name|bus_dma_tag_t
name|buffer_dmat
decl_stmt|;
comment|/* dmat for buffer I/O */
name|bus_dma_tag_t
name|mailbox_dmat
decl_stmt|;
comment|/* dmat for our mailboxes */
name|bus_dmamap_t
name|mailbox_dmamap
decl_stmt|;
name|bus_dma_tag_t
name|ccb_dmat
decl_stmt|;
comment|/* dmat for our ccb array */
name|bus_dmamap_t
name|ccb_dmamap
decl_stmt|;
name|bus_dma_tag_t
name|sg_dmat
decl_stmt|;
comment|/* dmat for our sg maps */
name|bus_dma_tag_t
name|sense_dmat
decl_stmt|;
comment|/* dmat for our sg maps */
name|bus_dmamap_t
name|sense_dmamap
decl_stmt|;
name|SLIST_HEAD
argument_list|(
argument_list|,
argument|sg_map_node
argument_list|)
name|sg_maps
expr_stmt|;
name|bus_addr_t
name|mailbox_physbase
decl_stmt|;
name|u_int
name|num_ccbs
decl_stmt|;
comment|/* Number of CCBs malloc'd */
name|u_int
name|max_ccbs
decl_stmt|;
comment|/* Maximum allocatable CCBs */
name|u_int
name|max_sg
decl_stmt|;
name|u_int
name|unit
decl_stmt|;
name|u_int
name|scsi_id
decl_stmt|;
name|u_int32_t
name|extended_trans
range|:
literal|1
decl_stmt|,
name|wide_bus
range|:
literal|1
decl_stmt|,
name|diff_bus
range|:
literal|1
decl_stmt|,
name|ultra_scsi
range|:
literal|1
decl_stmt|,
name|extended_lun
range|:
literal|1
decl_stmt|,
name|strict_rr
range|:
literal|1
decl_stmt|,
name|tag_capable
range|:
literal|1
decl_stmt|,
name|wide_lun_ccb
range|:
literal|1
decl_stmt|,
name|resource_shortage
range|:
literal|1
decl_stmt|,
range|:
literal|23
decl_stmt|;
name|u_int16_t
name|tags_permitted
decl_stmt|;
name|u_int16_t
name|disc_permitted
decl_stmt|;
name|u_int16_t
name|sync_permitted
decl_stmt|;
name|u_int16_t
name|fast_permitted
decl_stmt|;
name|u_int16_t
name|ultra_permitted
decl_stmt|;
name|u_int16_t
name|wide_permitted
decl_stmt|;
name|u_int8_t
name|init_level
decl_stmt|;
specifier|volatile
name|u_int8_t
name|command_cmp
decl_stmt|;
specifier|volatile
name|u_int8_t
name|latched_status
decl_stmt|;
name|u_int32_t
name|bios_addr
decl_stmt|;
name|char
name|firmware_ver
index|[
literal|6
index|]
decl_stmt|;
name|char
name|model
index|[
literal|5
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|bt_softc
modifier|*
name|bt_softcs
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* XXX Config should handle this */
end_comment

begin_decl_stmt
specifier|extern
name|u_long
name|bt_unit
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|BT_TEMP_UNIT
value|0xFF
end_define

begin_comment
comment|/* Unit for probes */
end_comment

begin_function_decl
name|struct
name|bt_softc
modifier|*
name|bt_alloc
parameter_list|(
name|int
name|unit
parameter_list|,
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_free
parameter_list|(
name|struct
name|bt_softc
modifier|*
name|bt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_probe
parameter_list|(
name|struct
name|bt_softc
modifier|*
name|bt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_fetch_adapter_info
parameter_list|(
name|struct
name|bt_softc
modifier|*
name|bt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_init
parameter_list|(
name|struct
name|bt_softc
modifier|*
name|bt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_attach
parameter_list|(
name|struct
name|bt_softc
modifier|*
name|bt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_intr
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|bt_name
parameter_list|(
name|struct
name|bt_softc
modifier|*
name|bt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_check_probed_iop
parameter_list|(
name|u_int
name|ioport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int
name|bt_fetch_isa_iop
parameter_list|(
name|isa_compat_io_t
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_mark_probed_bio
parameter_list|(
name|isa_compat_io_t
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_mark_probed_iop
parameter_list|(
name|u_int
name|ioport
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|DEFAULT_CMD_TIMEOUT
value|10000
end_define

begin_comment
comment|/* 1 sec */
end_comment

begin_function_decl
name|int
name|bt_cmd
parameter_list|(
name|struct
name|bt_softc
modifier|*
name|bt
parameter_list|,
name|bt_op_t
name|opcode
parameter_list|,
name|u_int8_t
modifier|*
name|params
parameter_list|,
name|u_int
name|param_len
parameter_list|,
name|u_int8_t
modifier|*
name|reply_data
parameter_list|,
name|u_int
name|reply_len
parameter_list|,
name|u_int
name|cmd_timeout
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|bt_inb
parameter_list|(
name|bt
parameter_list|,
name|port
parameter_list|)
define|\
value|bus_space_read_1((bt)->tag, (bt)->bsh, port)
end_define

begin_define
define|#
directive|define
name|bt_outb
parameter_list|(
name|bt
parameter_list|,
name|port
parameter_list|,
name|value
parameter_list|)
define|\
value|bus_space_write_1((bt)->tag, (bt)->bsh, port, value)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _BT_H_ */
end_comment

end_unit

