begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************    Copyright (c) 2001-2007, Intel Corporation    All rights reserved.      Redistribution and use in source and binary forms, with or without    modification, are permitted provided that the following conditions are met:       1. Redistributions of source code must retain the above copyright notice,        this list of conditions and the following disclaimer.       2. Redistributions in binary form must reproduce the above copyright        notice, this list of conditions and the following disclaimer in the        documentation and/or other materials provided with the distribution.       3. Neither the name of the Intel Corporation nor the names of its        contributors may be used to endorse or promote products derived from        this software without specific prior written permission.      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   POSSIBILITY OF SUCH DAMAGE.  *******************************************************************************/
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_E1000_HW_H_
end_ifndef

begin_define
define|#
directive|define
name|_E1000_HW_H_
end_define

begin_include
include|#
directive|include
file|"e1000_osdep.h"
end_include

begin_include
include|#
directive|include
file|"e1000_regs.h"
end_include

begin_include
include|#
directive|include
file|"e1000_defines.h"
end_include

begin_struct_decl
struct_decl|struct
name|e1000_hw
struct_decl|;
end_struct_decl

begin_ifndef
ifndef|#
directive|ifndef
name|NO_82542_SUPPORT
end_ifndef

begin_define
define|#
directive|define
name|E1000_DEV_ID_82542
value|0x1000
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|E1000_DEV_ID_82543GC_FIBER
value|0x1001
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82543GC_COPPER
value|0x1004
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82544EI_COPPER
value|0x1008
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82544EI_FIBER
value|0x1009
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82544GC_COPPER
value|0x100C
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82544GC_LOM
value|0x100D
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82540EM
value|0x100E
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82540EM_LOM
value|0x1015
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82540EP_LOM
value|0x1016
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82540EP
value|0x1017
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82540EP_LP
value|0x101E
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82545EM_COPPER
value|0x100F
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82545EM_FIBER
value|0x1011
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82545GM_COPPER
value|0x1026
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82545GM_FIBER
value|0x1027
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82545GM_SERDES
value|0x1028
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82546EB_COPPER
value|0x1010
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82546EB_FIBER
value|0x1012
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82546EB_QUAD_COPPER
value|0x101D
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82546GB_COPPER
value|0x1079
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82546GB_FIBER
value|0x107A
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82546GB_SERDES
value|0x107B
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82546GB_PCIE
value|0x108A
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82546GB_QUAD_COPPER
value|0x1099
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82546GB_QUAD_COPPER_KSP3
value|0x10B5
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82541EI
value|0x1013
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82541EI_MOBILE
value|0x1018
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82541ER_LOM
value|0x1014
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82541ER
value|0x1078
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82541GI
value|0x1076
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82541GI_LF
value|0x107C
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82541GI_MOBILE
value|0x1077
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82547EI
value|0x1019
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82547EI_MOBILE
value|0x101A
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82547GI
value|0x1075
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82571EB_COPPER
value|0x105E
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82571EB_FIBER
value|0x105F
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82571EB_SERDES
value|0x1060
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82571EB_SERDES_DUAL
value|0x10D9
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82571EB_SERDES_QUAD
value|0x10DA
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82571EB_QUAD_COPPER
value|0x10A4
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82571PT_QUAD_COPPER
value|0x10D5
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82571EB_QUAD_FIBER
value|0x10A5
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82571EB_QUAD_COPPER_LP
value|0x10BC
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82572EI_COPPER
value|0x107D
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82572EI_FIBER
value|0x107E
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82572EI_SERDES
value|0x107F
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82572EI
value|0x10B9
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82573E
value|0x108B
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82573E_IAMT
value|0x108C
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82573L
value|0x109A
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_80003ES2LAN_COPPER_DPT
value|0x1096
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_80003ES2LAN_SERDES_DPT
value|0x1098
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_80003ES2LAN_COPPER_SPT
value|0x10BA
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_80003ES2LAN_SERDES_SPT
value|0x10BB
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH8_IGP_M_AMT
value|0x1049
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH8_IGP_AMT
value|0x104A
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH8_IGP_C
value|0x104B
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH8_IFE
value|0x104C
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH8_IFE_GT
value|0x10C4
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH8_IFE_G
value|0x10C5
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH8_IGP_M
value|0x104D
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH9_IGP_AMT
value|0x10BD
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH9_IGP_C
value|0x294C
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH9_IFE
value|0x10C0
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH9_IFE_GT
value|0x10C3
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_ICH9_IFE_G
value|0x10C2
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82575EB_COPPER
value|0x10A7
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82575EB_FIBER_SERDES
value|0x10A9
end_define

begin_define
define|#
directive|define
name|E1000_DEV_ID_82575GB_QUAD_COPPER
value|0x10D6
end_define

begin_define
define|#
directive|define
name|E1000_REVISION_0
value|0
end_define

begin_define
define|#
directive|define
name|E1000_REVISION_1
value|1
end_define

begin_define
define|#
directive|define
name|E1000_REVISION_2
value|2
end_define

begin_define
define|#
directive|define
name|E1000_REVISION_3
value|3
end_define

begin_define
define|#
directive|define
name|E1000_REVISION_4
value|4
end_define

begin_define
define|#
directive|define
name|E1000_FUNC_0
value|0
end_define

begin_define
define|#
directive|define
name|E1000_FUNC_1
value|1
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_undefined
init|=
literal|0
block|,
ifndef|#
directive|ifndef
name|NO_82542_SUPPORT
name|e1000_82542
block|,
endif|#
directive|endif
name|e1000_82543
block|,
name|e1000_82544
block|,
name|e1000_82540
block|,
name|e1000_82545
block|,
name|e1000_82545_rev_3
block|,
name|e1000_82546
block|,
name|e1000_82546_rev_3
block|,
name|e1000_82541
block|,
name|e1000_82541_rev_2
block|,
name|e1000_82547
block|,
name|e1000_82547_rev_2
block|,
name|e1000_82571
block|,
name|e1000_82572
block|,
name|e1000_82573
block|,
name|e1000_80003es2lan
block|,
name|e1000_ich8lan
block|,
name|e1000_ich9lan
block|,
name|e1000_82575
block|,
name|e1000_num_macs
comment|/* List is 1-based, so subtract 1 for true count. */
block|}
name|e1000_mac_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_media_type_unknown
init|=
literal|0
block|,
name|e1000_media_type_copper
init|=
literal|1
block|,
name|e1000_media_type_fiber
init|=
literal|2
block|,
name|e1000_media_type_internal_serdes
init|=
literal|3
block|,
name|e1000_num_media_types
block|}
name|e1000_media_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_nvm_unknown
init|=
literal|0
block|,
name|e1000_nvm_none
block|,
name|e1000_nvm_eeprom_spi
block|,
name|e1000_nvm_eeprom_microwire
block|,
name|e1000_nvm_flash_hw
block|,
name|e1000_nvm_flash_sw
block|}
name|e1000_nvm_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_nvm_override_none
init|=
literal|0
block|,
name|e1000_nvm_override_spi_small
block|,
name|e1000_nvm_override_spi_large
block|,
name|e1000_nvm_override_microwire_small
block|,
name|e1000_nvm_override_microwire_large
block|}
name|e1000_nvm_override
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_phy_unknown
init|=
literal|0
block|,
name|e1000_phy_none
block|,
name|e1000_phy_m88
block|,
name|e1000_phy_igp
block|,
name|e1000_phy_igp_2
block|,
name|e1000_phy_gg82563
block|,
name|e1000_phy_igp_3
block|,
name|e1000_phy_ife
block|, }
name|e1000_phy_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_bus_type_unknown
init|=
literal|0
block|,
name|e1000_bus_type_pci
block|,
name|e1000_bus_type_pcix
block|,
name|e1000_bus_type_pci_express
block|,
name|e1000_bus_type_reserved
block|}
name|e1000_bus_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_bus_speed_unknown
init|=
literal|0
block|,
name|e1000_bus_speed_33
block|,
name|e1000_bus_speed_66
block|,
name|e1000_bus_speed_100
block|,
name|e1000_bus_speed_120
block|,
name|e1000_bus_speed_133
block|,
name|e1000_bus_speed_2500
block|,
name|e1000_bus_speed_5000
block|,
name|e1000_bus_speed_reserved
block|}
name|e1000_bus_speed
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_bus_width_unknown
init|=
literal|0
block|,
name|e1000_bus_width_pcie_x1
block|,
name|e1000_bus_width_pcie_x2
block|,
name|e1000_bus_width_pcie_x4
init|=
literal|4
block|,
name|e1000_bus_width_pcie_x8
init|=
literal|8
block|,
name|e1000_bus_width_32
block|,
name|e1000_bus_width_64
block|,
name|e1000_bus_width_reserved
block|}
name|e1000_bus_width
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_1000t_rx_status_not_ok
init|=
literal|0
block|,
name|e1000_1000t_rx_status_ok
block|,
name|e1000_1000t_rx_status_undefined
init|=
literal|0xFF
block|}
name|e1000_1000t_rx_status
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_rev_polarity_normal
init|=
literal|0
block|,
name|e1000_rev_polarity_reversed
block|,
name|e1000_rev_polarity_undefined
init|=
literal|0xFF
block|}
name|e1000_rev_polarity
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_fc_none
init|=
literal|0
block|,
name|e1000_fc_rx_pause
block|,
name|e1000_fc_tx_pause
block|,
name|e1000_fc_full
block|,
name|e1000_fc_default
init|=
literal|0xFF
block|}
name|e1000_fc_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_ffe_config_enabled
init|=
literal|0
block|,
name|e1000_ffe_config_active
block|,
name|e1000_ffe_config_blocked
block|}
name|e1000_ffe_config
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|e1000_dsp_config_disabled
init|=
literal|0
block|,
name|e1000_dsp_config_enabled
block|,
name|e1000_dsp_config_activated
block|,
name|e1000_dsp_config_undefined
init|=
literal|0xFF
block|}
name|e1000_dsp_config
typedef|;
end_typedef

begin_comment
comment|/* Receive Descriptor */
end_comment

begin_struct
struct|struct
name|e1000_rx_desc
block|{
name|u64
name|buffer_addr
decl_stmt|;
comment|/* Address of the descriptor's data buffer */
name|u16
name|length
decl_stmt|;
comment|/* Length of data DMAed into data buffer */
name|u16
name|csum
decl_stmt|;
comment|/* Packet checksum */
name|u8
name|status
decl_stmt|;
comment|/* Descriptor status */
name|u8
name|errors
decl_stmt|;
comment|/* Descriptor Errors */
name|u16
name|special
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Receive Descriptor - Extended */
end_comment

begin_union
union|union
name|e1000_rx_desc_extended
block|{
struct|struct
block|{
name|u64
name|buffer_addr
decl_stmt|;
name|u64
name|reserved
decl_stmt|;
block|}
name|read
struct|;
struct|struct
block|{
struct|struct
block|{
name|u32
name|mrq
decl_stmt|;
comment|/* Multiple Rx Queues */
union|union
block|{
name|u32
name|rss
decl_stmt|;
comment|/* RSS Hash */
struct|struct
block|{
name|u16
name|ip_id
decl_stmt|;
comment|/* IP id */
name|u16
name|csum
decl_stmt|;
comment|/* Packet Checksum */
block|}
name|csum_ip
struct|;
block|}
name|hi_dword
union|;
block|}
name|lower
struct|;
struct|struct
block|{
name|u32
name|status_error
decl_stmt|;
comment|/* ext status/error */
name|u16
name|length
decl_stmt|;
name|u16
name|vlan
decl_stmt|;
comment|/* VLAN tag */
block|}
name|upper
struct|;
block|}
name|wb
struct|;
comment|/* writeback */
block|}
union|;
end_union

begin_define
define|#
directive|define
name|MAX_PS_BUFFERS
value|4
end_define

begin_comment
comment|/* Receive Descriptor - Packet Split */
end_comment

begin_union
union|union
name|e1000_rx_desc_packet_split
block|{
struct|struct
block|{
comment|/* one buffer for protocol header(s), three data buffers */
name|u64
name|buffer_addr
index|[
name|MAX_PS_BUFFERS
index|]
decl_stmt|;
block|}
name|read
struct|;
struct|struct
block|{
struct|struct
block|{
name|u32
name|mrq
decl_stmt|;
comment|/* Multiple Rx Queues */
union|union
block|{
name|u32
name|rss
decl_stmt|;
comment|/* RSS Hash */
struct|struct
block|{
name|u16
name|ip_id
decl_stmt|;
comment|/* IP id */
name|u16
name|csum
decl_stmt|;
comment|/* Packet Checksum */
block|}
name|csum_ip
struct|;
block|}
name|hi_dword
union|;
block|}
name|lower
struct|;
struct|struct
block|{
name|u32
name|status_error
decl_stmt|;
comment|/* ext status/error */
name|u16
name|length0
decl_stmt|;
comment|/* length of buffer 0 */
name|u16
name|vlan
decl_stmt|;
comment|/* VLAN tag */
block|}
name|middle
struct|;
struct|struct
block|{
name|u16
name|header_status
decl_stmt|;
name|u16
name|length
index|[
literal|3
index|]
decl_stmt|;
comment|/* length of buffers 1-3 */
block|}
name|upper
struct|;
name|u64
name|reserved
decl_stmt|;
block|}
name|wb
struct|;
comment|/* writeback */
block|}
union|;
end_union

begin_comment
comment|/* Transmit Descriptor */
end_comment

begin_struct
struct|struct
name|e1000_tx_desc
block|{
name|u64
name|buffer_addr
decl_stmt|;
comment|/* Address of the descriptor's data buffer */
union|union
block|{
name|u32
name|data
decl_stmt|;
struct|struct
block|{
name|u16
name|length
decl_stmt|;
comment|/* Data buffer length */
name|u8
name|cso
decl_stmt|;
comment|/* Checksum offset */
name|u8
name|cmd
decl_stmt|;
comment|/* Descriptor control */
block|}
name|flags
struct|;
block|}
name|lower
union|;
union|union
block|{
name|u32
name|data
decl_stmt|;
struct|struct
block|{
name|u8
name|status
decl_stmt|;
comment|/* Descriptor status */
name|u8
name|css
decl_stmt|;
comment|/* Checksum start */
name|u16
name|special
decl_stmt|;
block|}
name|fields
struct|;
block|}
name|upper
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* Offload Context Descriptor */
end_comment

begin_struct
struct|struct
name|e1000_context_desc
block|{
union|union
block|{
name|u32
name|ip_config
decl_stmt|;
struct|struct
block|{
name|u8
name|ipcss
decl_stmt|;
comment|/* IP checksum start */
name|u8
name|ipcso
decl_stmt|;
comment|/* IP checksum offset */
name|u16
name|ipcse
decl_stmt|;
comment|/* IP checksum end */
block|}
name|ip_fields
struct|;
block|}
name|lower_setup
union|;
union|union
block|{
name|u32
name|tcp_config
decl_stmt|;
struct|struct
block|{
name|u8
name|tucss
decl_stmt|;
comment|/* TCP checksum start */
name|u8
name|tucso
decl_stmt|;
comment|/* TCP checksum offset */
name|u16
name|tucse
decl_stmt|;
comment|/* TCP checksum end */
block|}
name|tcp_fields
struct|;
block|}
name|upper_setup
union|;
name|u32
name|cmd_and_length
decl_stmt|;
union|union
block|{
name|u32
name|data
decl_stmt|;
struct|struct
block|{
name|u8
name|status
decl_stmt|;
comment|/* Descriptor status */
name|u8
name|hdr_len
decl_stmt|;
comment|/* Header length */
name|u16
name|mss
decl_stmt|;
comment|/* Maximum segment size */
block|}
name|fields
struct|;
block|}
name|tcp_seg_setup
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* Offload data descriptor */
end_comment

begin_struct
struct|struct
name|e1000_data_desc
block|{
name|u64
name|buffer_addr
decl_stmt|;
comment|/* Address of the descriptor's buffer address */
union|union
block|{
name|u32
name|data
decl_stmt|;
struct|struct
block|{
name|u16
name|length
decl_stmt|;
comment|/* Data buffer length */
name|u8
name|typ_len_ext
decl_stmt|;
name|u8
name|cmd
decl_stmt|;
block|}
name|flags
struct|;
block|}
name|lower
union|;
union|union
block|{
name|u32
name|data
decl_stmt|;
struct|struct
block|{
name|u8
name|status
decl_stmt|;
comment|/* Descriptor status */
name|u8
name|popts
decl_stmt|;
comment|/* Packet Options */
name|u16
name|special
decl_stmt|;
block|}
name|fields
struct|;
block|}
name|upper
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* Statistics counters collected by the MAC */
end_comment

begin_struct
struct|struct
name|e1000_hw_stats
block|{
name|u64
name|crcerrs
decl_stmt|;
name|u64
name|algnerrc
decl_stmt|;
name|u64
name|symerrs
decl_stmt|;
name|u64
name|rxerrc
decl_stmt|;
name|u64
name|mpc
decl_stmt|;
name|u64
name|scc
decl_stmt|;
name|u64
name|ecol
decl_stmt|;
name|u64
name|mcc
decl_stmt|;
name|u64
name|latecol
decl_stmt|;
name|u64
name|colc
decl_stmt|;
name|u64
name|dc
decl_stmt|;
name|u64
name|tncrs
decl_stmt|;
name|u64
name|sec
decl_stmt|;
name|u64
name|cexterr
decl_stmt|;
name|u64
name|rlec
decl_stmt|;
name|u64
name|xonrxc
decl_stmt|;
name|u64
name|xontxc
decl_stmt|;
name|u64
name|xoffrxc
decl_stmt|;
name|u64
name|xofftxc
decl_stmt|;
name|u64
name|fcruc
decl_stmt|;
name|u64
name|prc64
decl_stmt|;
name|u64
name|prc127
decl_stmt|;
name|u64
name|prc255
decl_stmt|;
name|u64
name|prc511
decl_stmt|;
name|u64
name|prc1023
decl_stmt|;
name|u64
name|prc1522
decl_stmt|;
name|u64
name|gprc
decl_stmt|;
name|u64
name|bprc
decl_stmt|;
name|u64
name|mprc
decl_stmt|;
name|u64
name|gptc
decl_stmt|;
name|u64
name|gorc
decl_stmt|;
name|u64
name|gotc
decl_stmt|;
name|u64
name|rnbc
decl_stmt|;
name|u64
name|ruc
decl_stmt|;
name|u64
name|rfc
decl_stmt|;
name|u64
name|roc
decl_stmt|;
name|u64
name|rjc
decl_stmt|;
name|u64
name|mgprc
decl_stmt|;
name|u64
name|mgpdc
decl_stmt|;
name|u64
name|mgptc
decl_stmt|;
name|u64
name|tor
decl_stmt|;
name|u64
name|tot
decl_stmt|;
name|u64
name|tpr
decl_stmt|;
name|u64
name|tpt
decl_stmt|;
name|u64
name|ptc64
decl_stmt|;
name|u64
name|ptc127
decl_stmt|;
name|u64
name|ptc255
decl_stmt|;
name|u64
name|ptc511
decl_stmt|;
name|u64
name|ptc1023
decl_stmt|;
name|u64
name|ptc1522
decl_stmt|;
name|u64
name|mptc
decl_stmt|;
name|u64
name|bptc
decl_stmt|;
name|u64
name|tsctc
decl_stmt|;
name|u64
name|tsctfc
decl_stmt|;
name|u64
name|iac
decl_stmt|;
name|u64
name|icrxptc
decl_stmt|;
name|u64
name|icrxatc
decl_stmt|;
name|u64
name|ictxptc
decl_stmt|;
name|u64
name|ictxatc
decl_stmt|;
name|u64
name|ictxqec
decl_stmt|;
name|u64
name|ictxqmtc
decl_stmt|;
name|u64
name|icrxdmtc
decl_stmt|;
name|u64
name|icrxoc
decl_stmt|;
name|u64
name|cbtmpc
decl_stmt|;
name|u64
name|htdpmc
decl_stmt|;
name|u64
name|cbrdpc
decl_stmt|;
name|u64
name|cbrmpc
decl_stmt|;
name|u64
name|rpthc
decl_stmt|;
name|u64
name|hgptc
decl_stmt|;
name|u64
name|htcbdpc
decl_stmt|;
name|u64
name|hgorc
decl_stmt|;
name|u64
name|hgotc
decl_stmt|;
name|u64
name|lenerrs
decl_stmt|;
name|u64
name|scvpc
decl_stmt|;
name|u64
name|hrmpc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|e1000_phy_stats
block|{
name|u32
name|idle_errors
decl_stmt|;
name|u32
name|receive_errors
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|e1000_host_mng_dhcp_cookie
block|{
name|u32
name|signature
decl_stmt|;
name|u8
name|status
decl_stmt|;
name|u8
name|reserved0
decl_stmt|;
name|u16
name|vlan_id
decl_stmt|;
name|u32
name|reserved1
decl_stmt|;
name|u16
name|reserved2
decl_stmt|;
name|u8
name|reserved3
decl_stmt|;
name|u8
name|checksum
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Host Interface "Rev 1" */
end_comment

begin_struct
struct|struct
name|e1000_host_command_header
block|{
name|u8
name|command_id
decl_stmt|;
name|u8
name|command_length
decl_stmt|;
name|u8
name|command_options
decl_stmt|;
name|u8
name|checksum
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|E1000_HI_MAX_DATA_LENGTH
value|252
end_define

begin_struct
struct|struct
name|e1000_host_command_info
block|{
name|struct
name|e1000_host_command_header
name|command_header
decl_stmt|;
name|u8
name|command_data
index|[
name|E1000_HI_MAX_DATA_LENGTH
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Host Interface "Rev 2" */
end_comment

begin_struct
struct|struct
name|e1000_host_mng_command_header
block|{
name|u8
name|command_id
decl_stmt|;
name|u8
name|checksum
decl_stmt|;
name|u16
name|reserved1
decl_stmt|;
name|u16
name|reserved2
decl_stmt|;
name|u16
name|command_length
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|E1000_HI_MAX_MNG_DATA_LENGTH
value|0x6F8
end_define

begin_struct
struct|struct
name|e1000_host_mng_command_info
block|{
name|struct
name|e1000_host_mng_command_header
name|command_header
decl_stmt|;
name|u8
name|command_data
index|[
name|E1000_HI_MAX_MNG_DATA_LENGTH
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_include
include|#
directive|include
file|"e1000_mac.h"
end_include

begin_include
include|#
directive|include
file|"e1000_phy.h"
end_include

begin_include
include|#
directive|include
file|"e1000_nvm.h"
end_include

begin_include
include|#
directive|include
file|"e1000_manage.h"
end_include

begin_struct
struct|struct
name|e1000_functions
block|{
comment|/* Function pointers for the MAC. */
name|s32
function_decl|(
modifier|*
name|init_mac_params
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|blink_led
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|check_for_link
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|bool
function_decl|(
modifier|*
name|check_mng_mode
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|cleanup_led
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|clear_hw_cntrs
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|clear_vfta
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|get_bus_info
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|get_link_up_info
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u16
modifier|*
parameter_list|,
name|u16
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|led_on
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|led_off
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|update_mc_addr_list
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u8
modifier|*
parameter_list|,
name|u32
parameter_list|,
name|u32
parameter_list|,
name|u32
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|remove_device
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|reset_hw
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|init_hw
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|setup_link
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|setup_physical_interface
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|setup_led
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|write_vfta
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u32
parameter_list|,
name|u32
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|mta_set
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u32
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|config_collision_dist
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|rar_set
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u8
modifier|*
parameter_list|,
name|u32
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|read_mac_addr
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|validate_mdi_setting
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|mng_host_if_write
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u8
modifier|*
parameter_list|,
name|u16
parameter_list|,
name|u16
parameter_list|,
name|u8
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|mng_write_cmd_header
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|,
name|struct
name|e1000_host_mng_command_header
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|mng_enable_host_if
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|wait_autoneg
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
comment|/* Function pointers for the PHY. */
name|s32
function_decl|(
modifier|*
name|init_phy_params
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|acquire_phy
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|check_polarity
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|check_reset_block
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|commit_phy
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|force_speed_duplex
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|get_cfg_done
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|get_cable_length
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|get_phy_info
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|read_phy_reg
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u32
parameter_list|,
name|u16
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|release_phy
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|reset_phy
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|set_d0_lplu_state
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|bool
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|set_d3_lplu_state
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|bool
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|write_phy_reg
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u32
parameter_list|,
name|u16
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|power_up_phy
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|power_down_phy
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
comment|/* Function pointers for the NVM. */
name|s32
function_decl|(
modifier|*
name|init_nvm_params
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|acquire_nvm
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|read_nvm
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u16
parameter_list|,
name|u16
parameter_list|,
name|u16
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|release_nvm
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|reload_nvm
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|update_nvm
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|valid_led_default
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u16
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|validate_nvm
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|)
function_decl|;
name|s32
function_decl|(
modifier|*
name|write_nvm
function_decl|)
parameter_list|(
name|struct
name|e1000_hw
modifier|*
parameter_list|,
name|u16
parameter_list|,
name|u16
parameter_list|,
name|u16
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|e1000_mac_info
block|{
name|u8
name|addr
index|[
literal|6
index|]
decl_stmt|;
name|u8
name|perm_addr
index|[
literal|6
index|]
decl_stmt|;
name|e1000_mac_type
name|type
decl_stmt|;
name|u32
name|collision_delta
decl_stmt|;
name|u32
name|ledctl_default
decl_stmt|;
name|u32
name|ledctl_mode1
decl_stmt|;
name|u32
name|ledctl_mode2
decl_stmt|;
name|u32
name|mc_filter_type
decl_stmt|;
name|u32
name|tx_packet_delta
decl_stmt|;
name|u32
name|txcw
decl_stmt|;
name|u16
name|current_ifs_val
decl_stmt|;
name|u16
name|ifs_max_val
decl_stmt|;
name|u16
name|ifs_min_val
decl_stmt|;
name|u16
name|ifs_ratio
decl_stmt|;
name|u16
name|ifs_step_size
decl_stmt|;
name|u16
name|mta_reg_count
decl_stmt|;
name|u16
name|rar_entry_count
decl_stmt|;
name|u8
name|forced_speed_duplex
decl_stmt|;
name|bool
name|adaptive_ifs
decl_stmt|;
name|bool
name|arc_subsystem_valid
decl_stmt|;
name|bool
name|asf_firmware_present
decl_stmt|;
name|bool
name|autoneg
decl_stmt|;
name|bool
name|autoneg_failed
decl_stmt|;
name|bool
name|disable_av
decl_stmt|;
name|bool
name|disable_hw_init_bits
decl_stmt|;
name|bool
name|get_link_status
decl_stmt|;
name|bool
name|ifs_params_forced
decl_stmt|;
name|bool
name|in_ifs_mode
decl_stmt|;
name|bool
name|report_tx_early
decl_stmt|;
name|bool
name|serdes_has_link
decl_stmt|;
name|bool
name|tx_pkt_filtering
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|e1000_phy_info
block|{
name|e1000_phy_type
name|type
decl_stmt|;
name|e1000_1000t_rx_status
name|local_rx
decl_stmt|;
name|e1000_1000t_rx_status
name|remote_rx
decl_stmt|;
name|e1000_ms_type
name|ms_type
decl_stmt|;
name|e1000_ms_type
name|original_ms_type
decl_stmt|;
name|e1000_rev_polarity
name|cable_polarity
decl_stmt|;
name|e1000_smart_speed
name|smart_speed
decl_stmt|;
name|u32
name|addr
decl_stmt|;
name|u32
name|id
decl_stmt|;
name|u32
name|reset_delay_us
decl_stmt|;
comment|/* in usec */
name|u32
name|revision
decl_stmt|;
name|e1000_media_type
name|media_type
decl_stmt|;
name|u16
name|autoneg_advertised
decl_stmt|;
name|u16
name|autoneg_mask
decl_stmt|;
name|u16
name|cable_length
decl_stmt|;
name|u16
name|max_cable_length
decl_stmt|;
name|u16
name|min_cable_length
decl_stmt|;
name|u8
name|mdix
decl_stmt|;
name|bool
name|disable_polarity_correction
decl_stmt|;
name|bool
name|is_mdix
decl_stmt|;
name|bool
name|polarity_correction
decl_stmt|;
name|bool
name|reset_disable
decl_stmt|;
name|bool
name|speed_downgraded
decl_stmt|;
name|bool
name|autoneg_wait_to_complete
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|e1000_nvm_info
block|{
name|e1000_nvm_type
name|type
decl_stmt|;
name|e1000_nvm_override
name|override
decl_stmt|;
name|u32
name|flash_bank_size
decl_stmt|;
name|u32
name|flash_base_addr
decl_stmt|;
name|u16
name|word_size
decl_stmt|;
name|u16
name|delay_usec
decl_stmt|;
name|u16
name|address_bits
decl_stmt|;
name|u16
name|opcode_bits
decl_stmt|;
name|u16
name|page_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|e1000_bus_info
block|{
name|e1000_bus_type
name|type
decl_stmt|;
name|e1000_bus_speed
name|speed
decl_stmt|;
name|e1000_bus_width
name|width
decl_stmt|;
name|u32
name|snoop
decl_stmt|;
name|u16
name|func
decl_stmt|;
name|u16
name|pci_cmd_word
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|e1000_fc_info
block|{
name|u32
name|high_water
decl_stmt|;
comment|/* Flow control high-water mark */
name|u32
name|low_water
decl_stmt|;
comment|/* Flow control low-water mark */
name|u16
name|pause_time
decl_stmt|;
comment|/* Flow control pause timer */
name|bool
name|send_xon
decl_stmt|;
comment|/* Flow control send XON */
name|bool
name|strict_ieee
decl_stmt|;
comment|/* Strict IEEE mode */
name|e1000_fc_type
name|type
decl_stmt|;
comment|/* Type of flow control */
name|e1000_fc_type
name|original_type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|e1000_hw
block|{
name|void
modifier|*
name|back
decl_stmt|;
name|void
modifier|*
name|dev_spec
decl_stmt|;
name|u8
modifier|*
name|hw_addr
decl_stmt|;
name|u8
modifier|*
name|flash_address
decl_stmt|;
name|unsigned
name|long
name|io_base
decl_stmt|;
name|struct
name|e1000_functions
name|func
decl_stmt|;
name|struct
name|e1000_mac_info
name|mac
decl_stmt|;
name|struct
name|e1000_fc_info
name|fc
decl_stmt|;
name|struct
name|e1000_phy_info
name|phy
decl_stmt|;
name|struct
name|e1000_nvm_info
name|nvm
decl_stmt|;
name|struct
name|e1000_bus_info
name|bus
decl_stmt|;
name|struct
name|e1000_host_mng_dhcp_cookie
name|mng_cookie
decl_stmt|;
name|u32
name|dev_spec_size
decl_stmt|;
name|u16
name|device_id
decl_stmt|;
name|u16
name|subsystem_vendor_id
decl_stmt|;
name|u16
name|subsystem_device_id
decl_stmt|;
name|u16
name|vendor_id
decl_stmt|;
name|u8
name|revision_id
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* These functions must be implemented by drivers */
end_comment

begin_function_decl
name|void
name|e1000_pci_clear_mwi
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|e1000_pci_set_mwi
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|s32
name|e1000_alloc_zeroed_dev_spec_struct
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|,
name|u32
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|s32
name|e1000_read_pcie_cap_reg
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|,
name|u32
name|reg
parameter_list|,
name|u16
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|e1000_free_dev_spec_struct
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|e1000_read_pci_cfg
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|,
name|u32
name|reg
parameter_list|,
name|u16
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|e1000_write_pci_cfg
parameter_list|(
name|struct
name|e1000_hw
modifier|*
name|hw
parameter_list|,
name|u32
name|reg
parameter_list|,
name|u16
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

