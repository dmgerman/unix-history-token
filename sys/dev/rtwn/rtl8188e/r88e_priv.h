begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Damien Bergamini<damien.bergamini@free.fr>  * Copyright (c) 2016 Andriy Voskoboinyk<avos@FreeBSD.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  * $OpenBSD: if_urtwnreg.h,v 1.3 2010/11/16 18:02:59 damien Exp $  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|R88E_PRIV_H
end_ifndef

begin_define
define|#
directive|define
name|R88E_PRIV_H
end_define

begin_include
include|#
directive|include
file|<dev/rtwn/rtl8188e/r88e_rom_defs.h>
end_include

begin_comment
comment|/*  * Parsed Tx power (diff) values.  */
end_comment

begin_struct
struct|struct
name|rtwn_r88e_txpwr
block|{
name|uint8_t
name|cck_tx_pwr
index|[
name|R88E_GROUP_2G
index|]
decl_stmt|;
name|uint8_t
name|ht40_tx_pwr
index|[
name|R88E_GROUP_2G
operator|-
literal|1
index|]
decl_stmt|;
name|int8_t
name|ofdm_tx_pwr_diff
decl_stmt|;
name|int8_t
name|bw20_tx_pwr_diff
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * MAC initialization values.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|rtwn_mac_prog
name|rtl8188eu_mac
index|[]
init|=
block|{
block|{
literal|0x026
block|,
literal|0x41
block|}
block|,
block|{
literal|0x027
block|,
literal|0x35
block|}
block|,
block|{
literal|0x040
block|,
literal|0x00
block|}
block|,
block|{
literal|0x428
block|,
literal|0x0a
block|}
block|,
block|{
literal|0x429
block|,
literal|0x10
block|}
block|,
block|{
literal|0x430
block|,
literal|0x00
block|}
block|,
block|{
literal|0x431
block|,
literal|0x01
block|}
block|,
block|{
literal|0x432
block|,
literal|0x02
block|}
block|,
block|{
literal|0x433
block|,
literal|0x04
block|}
block|,
block|{
literal|0x434
block|,
literal|0x05
block|}
block|,
block|{
literal|0x435
block|,
literal|0x06
block|}
block|,
block|{
literal|0x436
block|,
literal|0x07
block|}
block|,
block|{
literal|0x437
block|,
literal|0x08
block|}
block|,
block|{
literal|0x438
block|,
literal|0x00
block|}
block|,
block|{
literal|0x439
block|,
literal|0x00
block|}
block|,
block|{
literal|0x43a
block|,
literal|0x01
block|}
block|,
block|{
literal|0x43b
block|,
literal|0x02
block|}
block|,
block|{
literal|0x43c
block|,
literal|0x04
block|}
block|,
block|{
literal|0x43d
block|,
literal|0x05
block|}
block|,
block|{
literal|0x43e
block|,
literal|0x06
block|}
block|,
block|{
literal|0x43f
block|,
literal|0x07
block|}
block|,
block|{
literal|0x440
block|,
literal|0x5d
block|}
block|,
block|{
literal|0x441
block|,
literal|0x01
block|}
block|,
block|{
literal|0x442
block|,
literal|0x00
block|}
block|,
block|{
literal|0x444
block|,
literal|0x15
block|}
block|,
block|{
literal|0x445
block|,
literal|0xf0
block|}
block|,
block|{
literal|0x446
block|,
literal|0x0f
block|}
block|,
block|{
literal|0x447
block|,
literal|0x00
block|}
block|,
block|{
literal|0x458
block|,
literal|0x41
block|}
block|,
block|{
literal|0x459
block|,
literal|0xa8
block|}
block|,
block|{
literal|0x45a
block|,
literal|0x72
block|}
block|,
block|{
literal|0x45b
block|,
literal|0xb9
block|}
block|,
block|{
literal|0x460
block|,
literal|0x66
block|}
block|,
block|{
literal|0x461
block|,
literal|0x66
block|}
block|,
block|{
literal|0x480
block|,
literal|0x08
block|}
block|,
block|{
literal|0x4c8
block|,
literal|0xff
block|}
block|,
block|{
literal|0x4c9
block|,
literal|0x08
block|}
block|,
block|{
literal|0x4cc
block|,
literal|0xff
block|}
block|,
block|{
literal|0x4cd
block|,
literal|0xff
block|}
block|,
block|{
literal|0x4ce
block|,
literal|0x01
block|}
block|,
block|{
literal|0x4d3
block|,
literal|0x01
block|}
block|,
block|{
literal|0x500
block|,
literal|0x26
block|}
block|,
block|{
literal|0x501
block|,
literal|0xa2
block|}
block|,
block|{
literal|0x502
block|,
literal|0x2f
block|}
block|,
block|{
literal|0x503
block|,
literal|0x00
block|}
block|,
block|{
literal|0x504
block|,
literal|0x28
block|}
block|,
block|{
literal|0x505
block|,
literal|0xa3
block|}
block|,
block|{
literal|0x506
block|,
literal|0x5e
block|}
block|,
block|{
literal|0x507
block|,
literal|0x00
block|}
block|,
block|{
literal|0x508
block|,
literal|0x2b
block|}
block|,
block|{
literal|0x509
block|,
literal|0xa4
block|}
block|,
block|{
literal|0x50a
block|,
literal|0x5e
block|}
block|,
block|{
literal|0x50b
block|,
literal|0x00
block|}
block|,
block|{
literal|0x50c
block|,
literal|0x4f
block|}
block|,
block|{
literal|0x50d
block|,
literal|0xa4
block|}
block|,
block|{
literal|0x50e
block|,
literal|0x00
block|}
block|,
block|{
literal|0x50f
block|,
literal|0x00
block|}
block|,
block|{
literal|0x512
block|,
literal|0x1c
block|}
block|,
block|{
literal|0x514
block|,
literal|0x0a
block|}
block|,
block|{
literal|0x516
block|,
literal|0x0a
block|}
block|,
block|{
literal|0x525
block|,
literal|0x4f
block|}
block|,
block|{
literal|0x550
block|,
literal|0x10
block|}
block|,
block|{
literal|0x551
block|,
literal|0x10
block|}
block|,
block|{
literal|0x559
block|,
literal|0x02
block|}
block|,
block|{
literal|0x55d
block|,
literal|0xff
block|}
block|,
block|{
literal|0x605
block|,
literal|0x30
block|}
block|,
block|{
literal|0x608
block|,
literal|0x0e
block|}
block|,
block|{
literal|0x609
block|,
literal|0x2a
block|}
block|,
block|{
literal|0x620
block|,
literal|0xff
block|}
block|,
block|{
literal|0x621
block|,
literal|0xff
block|}
block|,
block|{
literal|0x622
block|,
literal|0xff
block|}
block|,
block|{
literal|0x623
block|,
literal|0xff
block|}
block|,
block|{
literal|0x624
block|,
literal|0xff
block|}
block|,
block|{
literal|0x625
block|,
literal|0xff
block|}
block|,
block|{
literal|0x626
block|,
literal|0xff
block|}
block|,
block|{
literal|0x627
block|,
literal|0xff
block|}
block|,
block|{
literal|0x652
block|,
literal|0x20
block|}
block|,
block|{
literal|0x63c
block|,
literal|0x0a
block|}
block|,
block|{
literal|0x63d
block|,
literal|0x0a
block|}
block|,
block|{
literal|0x63e
block|,
literal|0x0e
block|}
block|,
block|{
literal|0x63f
block|,
literal|0x0e
block|}
block|,
block|{
literal|0x640
block|,
literal|0x40
block|}
block|,
block|{
literal|0x66e
block|,
literal|0x05
block|}
block|,
block|{
literal|0x700
block|,
literal|0x21
block|}
block|,
block|{
literal|0x701
block|,
literal|0x43
block|}
block|,
block|{
literal|0x702
block|,
literal|0x65
block|}
block|,
block|{
literal|0x703
block|,
literal|0x87
block|}
block|,
block|{
literal|0x708
block|,
literal|0x21
block|}
block|,
block|{
literal|0x709
block|,
literal|0x43
block|}
block|,
block|{
literal|0x70a
block|,
literal|0x65
block|}
block|,
block|{
literal|0x70b
block|,
literal|0x87
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Baseband initialization values.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|uint16_t
name|rtl8188eu_bb_regs
index|[]
init|=
block|{
literal|0x800
block|,
literal|0x804
block|,
literal|0x808
block|,
literal|0x80c
block|,
literal|0x810
block|,
literal|0x814
block|,
literal|0x818
block|,
literal|0x81c
block|,
literal|0x820
block|,
literal|0x824
block|,
literal|0x828
block|,
literal|0x82c
block|,
literal|0x830
block|,
literal|0x834
block|,
literal|0x838
block|,
literal|0x83c
block|,
literal|0x840
block|,
literal|0x844
block|,
literal|0x848
block|,
literal|0x84c
block|,
literal|0x850
block|,
literal|0x854
block|,
literal|0x858
block|,
literal|0x85c
block|,
literal|0x860
block|,
literal|0x864
block|,
literal|0x868
block|,
literal|0x86c
block|,
literal|0x870
block|,
literal|0x874
block|,
literal|0x878
block|,
literal|0x87c
block|,
literal|0x880
block|,
literal|0x884
block|,
literal|0x888
block|,
literal|0x88c
block|,
literal|0x890
block|,
literal|0x894
block|,
literal|0x898
block|,
literal|0x89c
block|,
literal|0x900
block|,
literal|0x904
block|,
literal|0x908
block|,
literal|0x90c
block|,
literal|0x910
block|,
literal|0x914
block|,
literal|0xa00
block|,
literal|0xa04
block|,
literal|0xa08
block|,
literal|0xa0c
block|,
literal|0xa10
block|,
literal|0xa14
block|,
literal|0xa18
block|,
literal|0xa1c
block|,
literal|0xa20
block|,
literal|0xa24
block|,
literal|0xa28
block|,
literal|0xa2c
block|,
literal|0xa70
block|,
literal|0xa74
block|,
literal|0xa78
block|,
literal|0xa7c
block|,
literal|0xa80
block|,
literal|0xb2c
block|,
literal|0xc00
block|,
literal|0xc04
block|,
literal|0xc08
block|,
literal|0xc0c
block|,
literal|0xc10
block|,
literal|0xc14
block|,
literal|0xc18
block|,
literal|0xc1c
block|,
literal|0xc20
block|,
literal|0xc24
block|,
literal|0xc28
block|,
literal|0xc2c
block|,
literal|0xc30
block|,
literal|0xc34
block|,
literal|0xc38
block|,
literal|0xc3c
block|,
literal|0xc40
block|,
literal|0xc44
block|,
literal|0xc48
block|,
literal|0xc4c
block|,
literal|0xc50
block|,
literal|0xc54
block|,
literal|0xc58
block|,
literal|0xc5c
block|,
literal|0xc60
block|,
literal|0xc64
block|,
literal|0xc68
block|,
literal|0xc6c
block|,
literal|0xc70
block|,
literal|0xc74
block|,
literal|0xc78
block|,
literal|0xc7c
block|,
literal|0xc80
block|,
literal|0xc84
block|,
literal|0xc88
block|,
literal|0xc8c
block|,
literal|0xc90
block|,
literal|0xc94
block|,
literal|0xc98
block|,
literal|0xc9c
block|,
literal|0xca0
block|,
literal|0xca4
block|,
literal|0xca8
block|,
literal|0xcac
block|,
literal|0xcb0
block|,
literal|0xcb4
block|,
literal|0xcb8
block|,
literal|0xcbc
block|,
literal|0xcc0
block|,
literal|0xcc4
block|,
literal|0xcc8
block|,
literal|0xccc
block|,
literal|0xcd0
block|,
literal|0xcd4
block|,
literal|0xcd8
block|,
literal|0xcdc
block|,
literal|0xce0
block|,
literal|0xce4
block|,
literal|0xce8
block|,
literal|0xcec
block|,
literal|0xd00
block|,
literal|0xd04
block|,
literal|0xd08
block|,
literal|0xd0c
block|,
literal|0xd10
block|,
literal|0xd14
block|,
literal|0xd18
block|,
literal|0xd2c
block|,
literal|0xd30
block|,
literal|0xd34
block|,
literal|0xd38
block|,
literal|0xd3c
block|,
literal|0xd40
block|,
literal|0xd44
block|,
literal|0xd48
block|,
literal|0xd4c
block|,
literal|0xd50
block|,
literal|0xd54
block|,
literal|0xd58
block|,
literal|0xd5c
block|,
literal|0xd60
block|,
literal|0xd64
block|,
literal|0xd68
block|,
literal|0xd6c
block|,
literal|0xd70
block|,
literal|0xd74
block|,
literal|0xd78
block|,
literal|0xe00
block|,
literal|0xe04
block|,
literal|0xe08
block|,
literal|0xe10
block|,
literal|0xe14
block|,
literal|0xe18
block|,
literal|0xe1c
block|,
literal|0xe28
block|,
literal|0xe30
block|,
literal|0xe34
block|,
literal|0xe38
block|,
literal|0xe3c
block|,
literal|0xe40
block|,
literal|0xe44
block|,
literal|0xe48
block|,
literal|0xe4c
block|,
literal|0xe50
block|,
literal|0xe54
block|,
literal|0xe58
block|,
literal|0xe5c
block|,
literal|0xe60
block|,
literal|0xe68
block|,
literal|0xe6c
block|,
literal|0xe70
block|,
literal|0xe74
block|,
literal|0xe78
block|,
literal|0xe7c
block|,
literal|0xe80
block|,
literal|0xe84
block|,
literal|0xe88
block|,
literal|0xe8c
block|,
literal|0xed0
block|,
literal|0xed4
block|,
literal|0xed8
block|,
literal|0xedc
block|,
literal|0xee0
block|,
literal|0xee8
block|,
literal|0xeec
block|,
literal|0xf14
block|,
literal|0xf4c
block|,
literal|0xf00
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|rtl8188eu_bb_vals
index|[]
init|=
block|{
literal|0x80040000
block|,
literal|0x00000003
block|,
literal|0x0000fc00
block|,
literal|0x0000000a
block|,
literal|0x10001331
block|,
literal|0x020c3d10
block|,
literal|0x02200385
block|,
literal|0x00000000
block|,
literal|0x01000100
block|,
literal|0x00390204
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00010000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x569a11a9
block|,
literal|0x01000014
block|,
literal|0x66f60110
block|,
literal|0x061f0649
block|,
literal|0x00000000
block|,
literal|0x27272700
block|,
literal|0x07000760
block|,
literal|0x25004000
block|,
literal|0x00000808
block|,
literal|0x00000000
block|,
literal|0xb0000c1c
block|,
literal|0x00000001
block|,
literal|0x00000000
block|,
literal|0xccc000c0
block|,
literal|0x00000800
block|,
literal|0xfffffffe
block|,
literal|0x40302010
block|,
literal|0x00706050
block|,
literal|0x00000000
block|,
literal|0x00000023
block|,
literal|0x00000000
block|,
literal|0x81121111
block|,
literal|0x00000002
block|,
literal|0x00000201
block|,
literal|0x00d047c8
block|,
literal|0x80ff000c
block|,
literal|0x8c838300
block|,
literal|0x2e7f120f
block|,
literal|0x9500bb78
block|,
literal|0x1114d028
block|,
literal|0x00881117
block|,
literal|0x89140f00
block|,
literal|0x1a1b0000
block|,
literal|0x090e1317
block|,
literal|0x00000204
block|,
literal|0x00d30000
block|,
literal|0x101fbf00
block|,
literal|0x00000007
block|,
literal|0x00000900
block|,
literal|0x225b0606
block|,
literal|0x218075b1
block|,
literal|0x80000000
block|,
literal|0x48071d40
block|,
literal|0x03a05611
block|,
literal|0x000000e4
block|,
literal|0x6c6c6c6c
block|,
literal|0x08800000
block|,
literal|0x40000100
block|,
literal|0x08800000
block|,
literal|0x40000100
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x69e9ac47
block|,
literal|0x469652af
block|,
literal|0x49795994
block|,
literal|0x0a97971c
block|,
literal|0x1f7c403f
block|,
literal|0x000100b7
block|,
literal|0xec020107
block|,
literal|0x007f037f
block|,
literal|0x69553420
block|,
literal|0x43bc0094
block|,
literal|0x00013169
block|,
literal|0x00250492
block|,
literal|0x00000000
block|,
literal|0x7112848b
block|,
literal|0x47c00bff
block|,
literal|0x00000036
block|,
literal|0x2c7f000d
block|,
literal|0x020610db
block|,
literal|0x0000001f
block|,
literal|0x00b91612
block|,
literal|0x390000e4
block|,
literal|0x20f60000
block|,
literal|0x40000100
block|,
literal|0x20200000
block|,
literal|0x00091521
block|,
literal|0x00000000
block|,
literal|0x00121820
block|,
literal|0x00007f7f
block|,
literal|0x00000000
block|,
literal|0x000300a0
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x28000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x64b22427
block|,
literal|0x00766932
block|,
literal|0x00222222
block|,
literal|0x00000000
block|,
literal|0x37644302
block|,
literal|0x2f97d40c
block|,
literal|0x00000740
block|,
literal|0x00020401
block|,
literal|0x0000907f
block|,
literal|0x20010201
block|,
literal|0xa0633333
block|,
literal|0x3333bc43
block|,
literal|0x7a8f5b6f
block|,
literal|0xcc979975
block|,
literal|0x00000000
block|,
literal|0x80608000
block|,
literal|0x00000000
block|,
literal|0x00127353
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x00000000
block|,
literal|0x6437140a
block|,
literal|0x00000000
block|,
literal|0x00000282
block|,
literal|0x30032064
block|,
literal|0x4653de68
block|,
literal|0x04518a3c
block|,
literal|0x00002101
block|,
literal|0x2a201c16
block|,
literal|0x1812362e
block|,
literal|0x322c2220
block|,
literal|0x000e3c24
block|,
literal|0x2d2d2d2d
block|,
literal|0x2d2d2d2d
block|,
literal|0x0390272d
block|,
literal|0x2d2d2d2d
block|,
literal|0x2d2d2d2d
block|,
literal|0x2d2d2d2d
block|,
literal|0x2d2d2d2d
block|,
literal|0x00000000
block|,
literal|0x1000dc1f
block|,
literal|0x10008c1f
block|,
literal|0x02140102
block|,
literal|0x681604c2
block|,
literal|0x01007c00
block|,
literal|0x01004800
block|,
literal|0xfb000000
block|,
literal|0x000028d1
block|,
literal|0x1000dc1f
block|,
literal|0x10008c1f
block|,
literal|0x02140102
block|,
literal|0x28160d05
block|,
literal|0x00000008
block|,
literal|0x001b25a4
block|,
literal|0x00c00014
block|,
literal|0x00c00014
block|,
literal|0x01000014
block|,
literal|0x01000014
block|,
literal|0x01000014
block|,
literal|0x01000014
block|,
literal|0x00c00014
block|,
literal|0x01000014
block|,
literal|0x00c00014
block|,
literal|0x00c00014
block|,
literal|0x00c00014
block|,
literal|0x00c00014
block|,
literal|0x00000014
block|,
literal|0x00000014
block|,
literal|0x21555448
block|,
literal|0x01c00014
block|,
literal|0x00000003
block|,
literal|0x00000000
block|,
literal|0x00000300
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|rtwn_bb_prog
name|rtl8188eu_bb
index|[]
init|=
block|{
block|{
name|nitems
argument_list|(
name|rtl8188eu_bb_regs
argument_list|)
block|,
name|rtl8188eu_bb_regs
block|,
name|rtl8188eu_bb_vals
block|,
block|{
literal|0
block|}
block|,
name|NULL
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|rtl8188eu_agc_vals
index|[]
init|=
block|{
literal|0xfb000001
block|,
literal|0xfb010001
block|,
literal|0xfb020001
block|,
literal|0xfb030001
block|,
literal|0xfb040001
block|,
literal|0xfb050001
block|,
literal|0xfa060001
block|,
literal|0xf9070001
block|,
literal|0xf8080001
block|,
literal|0xf7090001
block|,
literal|0xf60a0001
block|,
literal|0xf50b0001
block|,
literal|0xf40c0001
block|,
literal|0xf30d0001
block|,
literal|0xf20e0001
block|,
literal|0xf10f0001
block|,
literal|0xf0100001
block|,
literal|0xef110001
block|,
literal|0xee120001
block|,
literal|0xed130001
block|,
literal|0xec140001
block|,
literal|0xeb150001
block|,
literal|0xea160001
block|,
literal|0xe9170001
block|,
literal|0xe8180001
block|,
literal|0xe7190001
block|,
literal|0xe61a0001
block|,
literal|0xe51b0001
block|,
literal|0xe41c0001
block|,
literal|0xe31d0001
block|,
literal|0xe21e0001
block|,
literal|0xe11f0001
block|,
literal|0x8a200001
block|,
literal|0x89210001
block|,
literal|0x88220001
block|,
literal|0x87230001
block|,
literal|0x86240001
block|,
literal|0x85250001
block|,
literal|0x84260001
block|,
literal|0x83270001
block|,
literal|0x82280001
block|,
literal|0x6b290001
block|,
literal|0x6a2a0001
block|,
literal|0x692b0001
block|,
literal|0x682c0001
block|,
literal|0x672d0001
block|,
literal|0x662e0001
block|,
literal|0x652f0001
block|,
literal|0x64300001
block|,
literal|0x63310001
block|,
literal|0x62320001
block|,
literal|0x61330001
block|,
literal|0x46340001
block|,
literal|0x45350001
block|,
literal|0x44360001
block|,
literal|0x43370001
block|,
literal|0x42380001
block|,
literal|0x41390001
block|,
literal|0x403a0001
block|,
literal|0x403b0001
block|,
literal|0x403c0001
block|,
literal|0x403d0001
block|,
literal|0x403e0001
block|,
literal|0x403f0001
block|,
literal|0xfb400001
block|,
literal|0xfb410001
block|,
literal|0xfb420001
block|,
literal|0xfb430001
block|,
literal|0xfb440001
block|,
literal|0xfb450001
block|,
literal|0xfb460001
block|,
literal|0xfb470001
block|,
literal|0xfb480001
block|,
literal|0xfa490001
block|,
literal|0xf94a0001
block|,
literal|0xf84B0001
block|,
literal|0xf74c0001
block|,
literal|0xf64d0001
block|,
literal|0xf54e0001
block|,
literal|0xf44f0001
block|,
literal|0xf3500001
block|,
literal|0xf2510001
block|,
literal|0xf1520001
block|,
literal|0xf0530001
block|,
literal|0xef540001
block|,
literal|0xee550001
block|,
literal|0xed560001
block|,
literal|0xec570001
block|,
literal|0xeb580001
block|,
literal|0xea590001
block|,
literal|0xe95a0001
block|,
literal|0xe85b0001
block|,
literal|0xe75c0001
block|,
literal|0xe65d0001
block|,
literal|0xe55e0001
block|,
literal|0xe45f0001
block|,
literal|0xe3600001
block|,
literal|0xe2610001
block|,
literal|0xc3620001
block|,
literal|0xc2630001
block|,
literal|0xc1640001
block|,
literal|0x8b650001
block|,
literal|0x8a660001
block|,
literal|0x89670001
block|,
literal|0x88680001
block|,
literal|0x87690001
block|,
literal|0x866a0001
block|,
literal|0x856b0001
block|,
literal|0x846c0001
block|,
literal|0x676d0001
block|,
literal|0x666e0001
block|,
literal|0x656f0001
block|,
literal|0x64700001
block|,
literal|0x63710001
block|,
literal|0x62720001
block|,
literal|0x61730001
block|,
literal|0x60740001
block|,
literal|0x46750001
block|,
literal|0x45760001
block|,
literal|0x44770001
block|,
literal|0x43780001
block|,
literal|0x42790001
block|,
literal|0x417a0001
block|,
literal|0x407b0001
block|,
literal|0x407c0001
block|,
literal|0x407d0001
block|,
literal|0x407e0001
block|,
literal|0x407f0001
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|rtwn_agc_prog
name|rtl8188eu_agc
index|[]
init|=
block|{
block|{
name|nitems
argument_list|(
name|rtl8188eu_agc_vals
argument_list|)
block|,
name|rtl8188eu_agc_vals
block|,
block|{
literal|0
block|}
block|,
name|NULL
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * RF initialization values.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|uint8_t
name|rtl8188eu_rf_regs
index|[]
init|=
block|{
literal|0x00
block|,
literal|0x08
block|,
literal|0x18
block|,
literal|0x19
block|,
literal|0x1e
block|,
literal|0x1f
block|,
literal|0x2f
block|,
literal|0x3f
block|,
literal|0x42
block|,
literal|0x57
block|,
literal|0x58
block|,
literal|0x67
block|,
literal|0x83
block|,
literal|0xb0
block|,
literal|0xb1
block|,
literal|0xb2
block|,
literal|0xb4
block|,
literal|0xb6
block|,
literal|0xb7
block|,
literal|0xb8
block|,
literal|0xb9
block|,
literal|0xba
block|,
literal|0xbb
block|,
literal|0xbf
block|,
literal|0xc2
block|,
literal|0xc3
block|,
literal|0xc4
block|,
literal|0xc5
block|,
literal|0xc6
block|,
literal|0xc7
block|,
literal|0xc8
block|,
literal|0xc9
block|,
literal|0xca
block|,
literal|0xdf
block|,
literal|0xef
block|,
literal|0x51
block|,
literal|0x52
block|,
literal|0x53
block|,
literal|0x56
block|,
literal|0x35
block|,
literal|0x35
block|,
literal|0x35
block|,
literal|0x36
block|,
literal|0x36
block|,
literal|0x36
block|,
literal|0x36
block|,
literal|0xb6
block|,
literal|0x18
block|,
literal|0x5a
block|,
literal|0x19
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x34
block|,
literal|0x00
block|,
literal|0x84
block|,
literal|0x86
block|,
literal|0x87
block|,
literal|0x8e
block|,
literal|0x8f
block|,
literal|0xef
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0x3b
block|,
literal|0xef
block|,
literal|0x00
block|,
literal|0x18
block|,
literal|0xfe
block|,
literal|0xfe
block|,
literal|0x1f
block|,
literal|0xfe
block|,
literal|0xfe
block|,
literal|0x1e
block|,
literal|0x1f
block|,
literal|0x00
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|uint32_t
name|rtl8188eu_rf_vals
index|[]
init|=
block|{
literal|0x30000
block|,
literal|0x84000
block|,
literal|0x00407
block|,
literal|0x00012
block|,
literal|0x80009
block|,
literal|0x00880
block|,
literal|0x1a060
block|,
literal|0x00000
block|,
literal|0x060c0
block|,
literal|0xd0000
block|,
literal|0xbe180
block|,
literal|0x01552
block|,
literal|0x00000
block|,
literal|0xff8fc
block|,
literal|0x54400
block|,
literal|0xccc19
block|,
literal|0x43003
block|,
literal|0x4953e
block|,
literal|0x1c718
block|,
literal|0x060ff
block|,
literal|0x80001
block|,
literal|0x40000
block|,
literal|0x00400
block|,
literal|0xc0000
block|,
literal|0x02400
block|,
literal|0x00009
block|,
literal|0x40c91
block|,
literal|0x99999
block|,
literal|0x000a3
block|,
literal|0x88820
block|,
literal|0x76c06
block|,
literal|0x00000
block|,
literal|0x80000
block|,
literal|0x00180
block|,
literal|0x001a0
block|,
literal|0x6b27d
block|,
literal|0x7e49d
block|,
literal|0x00073
block|,
literal|0x51ff3
block|,
literal|0x00086
block|,
literal|0x00186
block|,
literal|0x00286
block|,
literal|0x01c25
block|,
literal|0x09c25
block|,
literal|0x11c25
block|,
literal|0x19c25
block|,
literal|0x48538
block|,
literal|0x00c07
block|,
literal|0x4bd00
block|,
literal|0x739d0
block|,
literal|0x0adf3
block|,
literal|0x09df0
block|,
literal|0x08ded
block|,
literal|0x07dea
block|,
literal|0x06de7
block|,
literal|0x054ee
block|,
literal|0x044eb
block|,
literal|0x034e8
block|,
literal|0x0246b
block|,
literal|0x01468
block|,
literal|0x0006d
block|,
literal|0x30159
block|,
literal|0x68200
block|,
literal|0x000ce
block|,
literal|0x48a00
block|,
literal|0x65540
block|,
literal|0x88000
block|,
literal|0x020a0
block|,
literal|0xf02b0
block|,
literal|0xef7b0
block|,
literal|0xd4fb0
block|,
literal|0xcf060
block|,
literal|0xb0090
block|,
literal|0xa0080
block|,
literal|0x90080
block|,
literal|0x8f780
block|,
literal|0x722b0
block|,
literal|0x6f7b0
block|,
literal|0x54fb0
block|,
literal|0x4f060
block|,
literal|0x30090
block|,
literal|0x20080
block|,
literal|0x10080
block|,
literal|0x0f780
block|,
literal|0x000a0
block|,
literal|0x10159
block|,
literal|0x0f407
block|,
literal|0x0c350
block|,
literal|0x0c350
block|,
literal|0x80003
block|,
literal|0x0c350
block|,
literal|0x0c350
block|,
literal|0x00001
block|,
literal|0x80000
block|,
literal|0x33e60
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|rtwn_rf_prog
name|rtl8188eu_rf
index|[]
init|=
block|{
block|{
name|nitems
argument_list|(
name|rtl8188eu_rf_regs
argument_list|)
block|,
name|rtl8188eu_rf_regs
block|,
name|rtl8188eu_rf_vals
block|,
block|{
literal|0
block|}
block|,
name|NULL
block|}
block|,
block|{
literal|0
block|,
name|NULL
block|,
name|NULL
block|,
block|{
literal|0
block|}
block|,
name|NULL
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* R88E_PRIV_H */
end_comment

end_unit

