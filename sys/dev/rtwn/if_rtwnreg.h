begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Damien Bergamini<damien.bergamini@free.fr>  * Copyright (c) 2016 Andriy Voskoboinyk<avos@FreeBSD.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  * $OpenBSD: if_urtwnreg.h,v 1.3 2010/11/16 18:02:59 damien Exp $  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|IF_RTWNREG_H
end_ifndef

begin_define
define|#
directive|define
name|IF_RTWNREG_H
end_define

begin_define
define|#
directive|define
name|R92C_MIN_TX_PWR
value|0x00
end_define

begin_define
define|#
directive|define
name|R92C_MAX_TX_PWR
value|0x3f
end_define

begin_define
define|#
directive|define
name|R92C_H2C_NBOX
value|4
end_define

begin_comment
comment|/* Common part of Tx descriptor (named only!). */
end_comment

begin_struct
struct|struct
name|rtwn_tx_desc_common
block|{
name|uint16_t
name|pktlen
decl_stmt|;
name|uint8_t
name|offset
decl_stmt|;
name|uint8_t
name|flags0
decl_stmt|;
define|#
directive|define
name|RTWN_FLAGS0_OWN
value|0x80
name|uint32_t
name|txdw1
decl_stmt|;
comment|/* NB: qsel is shared too; however, it looks better at the lower level */
define|#
directive|define
name|RTWN_TXDW1_CIPHER_M
value|0x00c00000
define|#
directive|define
name|RTWN_TXDW1_CIPHER_S
value|22
define|#
directive|define
name|RTWN_TXDW1_CIPHER_NONE
value|0
define|#
directive|define
name|RTWN_TXDW1_CIPHER_RC4
value|1
define|#
directive|define
name|RTWN_TXDW1_CIPHER_SM4
value|2
define|#
directive|define
name|RTWN_TXDW1_CIPHER_AES
value|3
name|uint32_t
name|reserved
index|[
literal|5
index|]
decl_stmt|;
union|union
name|txdw7_shared
block|{
name|uint16_t
name|usb_checksum
decl_stmt|;
name|uint16_t
name|pci_txbufsize
decl_stmt|;
block|}
name|txdw7
union|;
block|}
name|__packed
name|__attribute__
argument_list|(
operator|(
name|aligned
argument_list|(
literal|4
argument_list|)
operator|)
argument_list|)
struct|;
end_struct

begin_comment
comment|/* Common part of Rx descriptor. */
end_comment

begin_struct
struct|struct
name|rtwn_rx_stat_common
block|{
name|uint32_t
name|rxdw0
decl_stmt|;
define|#
directive|define
name|RTWN_RXDW0_PKTLEN_M
value|0x00003fff
define|#
directive|define
name|RTWN_RXDW0_PKTLEN_S
value|0
define|#
directive|define
name|RTWN_RXDW0_CRCERR
value|0x00004000
define|#
directive|define
name|RTWN_RXDW0_ICVERR
value|0x00008000
define|#
directive|define
name|RTWN_RXDW0_INFOSZ_M
value|0x000f0000
define|#
directive|define
name|RTWN_RXDW0_INFOSZ_S
value|16
define|#
directive|define
name|RTWN_RXDW0_CIPHER_M
value|0x00700000
define|#
directive|define
name|RTWN_RXDW0_CIPHER_S
value|20
define|#
directive|define
name|RTWN_RXDW0_QOS
value|0x00800000
define|#
directive|define
name|RTWN_RXDW0_SHIFT_M
value|0x03000000
define|#
directive|define
name|RTWN_RXDW0_SHIFT_S
value|24
define|#
directive|define
name|RTWN_RXDW0_PHYST
value|0x04000000
define|#
directive|define
name|RTWN_RXDW0_SWDEC
value|0x08000000
define|#
directive|define
name|RTWN_RXDW0_LS
value|0x10000000
define|#
directive|define
name|RTWN_RXDW0_FS
value|0x20000000
define|#
directive|define
name|RTWN_RXDW0_EOR
value|0x40000000
define|#
directive|define
name|RTWN_RXDW0_OWN
value|0x80000000
name|uint32_t
name|rxdw1
decl_stmt|;
define|#
directive|define
name|RTWN_RXDW1_AMSDU
value|0x00002000
define|#
directive|define
name|RTWN_RXDW1_MC
value|0x40000000
define|#
directive|define
name|RTWN_RXDW1_BC
value|0x80000000
name|uint32_t
name|rxdw2
decl_stmt|;
name|uint32_t
name|rxdw3
decl_stmt|;
define|#
directive|define
name|RTWN_RXDW3_HTC
value|0x00000400
define|#
directive|define
name|RTWN_RXDW3_BSSID01_FIT_M
value|0x00003000
define|#
directive|define
name|RTWN_RXDW3_BSSID01_FIT_S
value|12
name|uint32_t
name|rxdw4
decl_stmt|;
name|uint32_t
name|tsf_low
decl_stmt|;
block|}
name|__packed
name|__attribute__
argument_list|(
operator|(
name|aligned
argument_list|(
literal|4
argument_list|)
operator|)
argument_list|)
struct|;
end_struct

begin_comment
comment|/* Rx descriptor for PCIe devices. */
end_comment

begin_struct
struct|struct
name|rtwn_rx_stat_pci
block|{
name|uint32_t
name|rxdw0
decl_stmt|;
name|uint32_t
name|rxdw1
decl_stmt|;
name|uint32_t
name|rxdw2
decl_stmt|;
name|uint32_t
name|rxdw3
decl_stmt|;
name|uint32_t
name|rxdw4
decl_stmt|;
name|uint32_t
name|tsf_low
decl_stmt|;
name|uint32_t
name|rxbufaddr
decl_stmt|;
name|uint32_t
name|rxbufaddr64
decl_stmt|;
block|}
name|__packed
name|__attribute__
argument_list|(
operator|(
name|aligned
argument_list|(
literal|4
argument_list|)
operator|)
argument_list|)
struct|;
end_struct

begin_comment
comment|/*  * Macros to access subfields in registers.  */
end_comment

begin_comment
comment|/* Mask and Shift (getter). */
end_comment

begin_define
define|#
directive|define
name|MS
parameter_list|(
name|val
parameter_list|,
name|field
parameter_list|)
define|\
value|(((val)& field##_M)>> field##_S)
end_define

begin_comment
comment|/* Shift and Mask (setter). */
end_comment

begin_define
define|#
directive|define
name|SM
parameter_list|(
name|field
parameter_list|,
name|val
parameter_list|)
define|\
value|(((val)<< field##_S)& field##_M)
end_define

begin_comment
comment|/* Rewrite. */
end_comment

begin_define
define|#
directive|define
name|RW
parameter_list|(
name|var
parameter_list|,
name|field
parameter_list|,
name|val
parameter_list|)
define|\
value|(((var)& ~field##_M) | SM(field, val))
end_define

begin_define
define|#
directive|define
name|RTWN_MAX_CONDITIONS
value|3
end_define

begin_comment
comment|/*  * Structure for MAC initialization values.  */
end_comment

begin_struct
struct|struct
name|rtwn_mac_prog
block|{
name|uint16_t
name|reg
decl_stmt|;
name|uint8_t
name|val
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Structure for baseband initialization values.  */
end_comment

begin_struct
struct|struct
name|rtwn_bb_prog
block|{
name|int
name|count
decl_stmt|;
specifier|const
name|uint16_t
modifier|*
name|reg
decl_stmt|;
specifier|const
name|uint32_t
modifier|*
name|val
decl_stmt|;
specifier|const
name|uint8_t
name|cond
index|[
name|RTWN_MAX_CONDITIONS
index|]
decl_stmt|;
specifier|const
name|struct
name|rtwn_bb_prog
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|rtwn_agc_prog
block|{
name|int
name|count
decl_stmt|;
specifier|const
name|uint32_t
modifier|*
name|val
decl_stmt|;
specifier|const
name|uint8_t
name|cond
index|[
name|RTWN_MAX_CONDITIONS
index|]
decl_stmt|;
specifier|const
name|struct
name|rtwn_agc_prog
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Structure for RF initialization values.  */
end_comment

begin_struct
struct|struct
name|rtwn_rf_prog
block|{
name|int
name|count
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|reg
decl_stmt|;
specifier|const
name|uint32_t
modifier|*
name|val
decl_stmt|;
specifier|const
name|uint8_t
name|cond
index|[
name|RTWN_MAX_CONDITIONS
index|]
decl_stmt|;
specifier|const
name|struct
name|rtwn_rf_prog
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* XXX move to net80211. */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|rtwn_chan2centieee
parameter_list|(
specifier|const
name|struct
name|ieee80211_channel
modifier|*
name|c
parameter_list|)
block|{
name|int
name|chan
decl_stmt|;
name|chan
operator|=
name|c
operator|->
name|ic_ieee
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|ic_extieee
operator|!=
literal|0
condition|)
name|chan
operator|=
operator|(
name|chan
operator|+
name|c
operator|->
name|ic_extieee
operator|)
operator|/
literal|2
expr_stmt|;
return|return
operator|(
name|chan
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* IF_RTWNREG_H */
end_comment

end_unit

