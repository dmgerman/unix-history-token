begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-3-Clause  *  * Copyright(c) 2002-2011 Exar Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification are permitted provided the following conditions are met:  *  *    1. Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *  *    2. Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *  *    3. Neither the name of the Exar Corporation nor the names of its  *       contributors may be used to endorse or promote products derived from  *       this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_comment
comment|/* LINTLIBRARY */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_VXGE_OSDEP_H_
end_ifndef

begin_define
define|#
directive|define
name|_VXGE_OSDEP_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|800000
end_if

begin_include
include|#
directive|include
file|<sys/buf_ring.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<sys/mbuf.h>
end_include

begin_include
include|#
directive|include
file|<sys/protosw.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/module.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus.h>
end_include

begin_include
include|#
directive|include
file|<sys/sockio.h>
end_include

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/rman.h>
end_include

begin_include
include|#
directive|include
file|<sys/stddef.h>
end_include

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_include
include|#
directive|include
file|<sys/sysctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/pcpu.h>
end_include

begin_include
include|#
directive|include
file|<sys/smp.h>
end_include

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_include
include|#
directive|include
file|<net/if_arp.h>
end_include

begin_include
include|#
directive|include
file|<net/bpf.h>
end_include

begin_include
include|#
directive|include
file|<net/ethernet.h>
end_include

begin_include
include|#
directive|include
file|<net/if_dl.h>
end_include

begin_include
include|#
directive|include
file|<net/if_media.h>
end_include

begin_include
include|#
directive|include
file|<net/if_types.h>
end_include

begin_include
include|#
directive|include
file|<net/if_var.h>
end_include

begin_include
include|#
directive|include
file|<net/if_vlan_var.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in_systm.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in.h>
end_include

begin_include
include|#
directive|include
file|<netinet/if_ether.h>
end_include

begin_include
include|#
directive|include
file|<netinet/ip.h>
end_include

begin_include
include|#
directive|include
file|<netinet/ip6.h>
end_include

begin_include
include|#
directive|include
file|<netinet/tcp.h>
end_include

begin_include
include|#
directive|include
file|<netinet/tcp_lro.h>
end_include

begin_include
include|#
directive|include
file|<netinet/udp.h>
end_include

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/resource.h>
end_include

begin_include
include|#
directive|include
file|<machine/clock.h>
end_include

begin_include
include|#
directive|include
file|<machine/stdarg.h>
end_include

begin_include
include|#
directive|include
file|<machine/in_cksum.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_include
include|#
directive|include
file|<dev/pci/pcivar.h>
end_include

begin_include
include|#
directive|include
file|<dev/pci/pcireg.h>
end_include

begin_include
include|#
directive|include
file|<dev/pci/pci_private.h>
end_include

begin_include
include|#
directive|include
file|<dev/vxge/include/vxge-defs.h>
end_include

begin_comment
comment|/*  * ------------------------- includes and defines -------------------------  */
end_comment

begin_if
if|#
directive|if
name|BYTE_ORDER
operator|==
name|BIG_ENDIAN
end_if

begin_define
define|#
directive|define
name|VXGE_OS_HOST_BIG_ENDIAN
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|VXGE_OS_HOST_LITTLE_ENDIAN
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__LONG_BIT
operator|==
literal|64
end_if

begin_define
define|#
directive|define
name|VXGE_OS_PLATFORM_64BIT
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|VXGE_OS_PLATFORM_32BIT
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|VXGE_OS_PCI_CONFIG_SIZE
value|256
end_define

begin_define
define|#
directive|define
name|VXGE_OS_HOST_PAGE_SIZE
value|4096
end_define

begin_define
define|#
directive|define
name|VXGE_LL_IP_FAST_CSUM
parameter_list|(
name|hdr
parameter_list|,
name|len
parameter_list|)
value|0
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__DECONST
end_ifndef

begin_define
define|#
directive|define
name|__DECONST
parameter_list|(
name|type
parameter_list|,
name|var
parameter_list|)
value|((type)(uintrptr_t)(const void *)(var))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|struct
name|ifnet
modifier|*
name|ifnet_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|mbuf
modifier|*
name|mbuf_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|mbuf
modifier|*
name|OS_NETSTACK_BUF
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_bus_res_t
block|{
name|u_long
name|bus_res_len
decl_stmt|;
name|bus_space_tag_t
name|bus_space_tag
decl_stmt|;
comment|/* DMA Tag */
name|bus_space_handle_t
name|bus_space_handle
decl_stmt|;
comment|/* Bus handle */
name|struct
name|resource
modifier|*
name|bar_start_addr
decl_stmt|;
comment|/* BAR address */
block|}
name|vxge_bus_res_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_dma_alloc_t
block|{
name|bus_addr_t
name|dma_paddr
decl_stmt|;
comment|/* Physical Address */
name|caddr_t
name|dma_vaddr
decl_stmt|;
comment|/* Virtual Address */
name|bus_dma_tag_t
name|dma_tag
decl_stmt|;
comment|/* DMA Tag */
name|bus_dmamap_t
name|dma_map
decl_stmt|;
comment|/* DMA Map */
name|bus_dma_segment_t
name|dma_segment
decl_stmt|;
comment|/* DMA Segment */
name|bus_size_t
name|dma_size
decl_stmt|;
comment|/* Size */
name|int
name|dma_nseg
decl_stmt|;
comment|/* scatter-gather */
block|}
name|vxge_dma_alloc_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_pci_info
block|{
name|device_t
name|ndev
decl_stmt|;
comment|/* Device */
name|void
modifier|*
name|reg_map
index|[
literal|3
index|]
decl_stmt|;
comment|/* BAR Resource */
name|struct
name|resource
modifier|*
name|bar_info
index|[
literal|3
index|]
decl_stmt|;
comment|/* BAR tag and handle */
block|}
name|vxge_pci_info_t
typedef|;
end_typedef

begin_comment
comment|/*  * ---------------------- fixed size primitive types -----------------------  */
end_comment

begin_typedef
typedef|typedef
name|size_t
name|ptr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int8_t
name|s8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint8_t
name|u8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|u16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int32_t
name|s32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|u32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|long
name|int
name|u64
typedef|;
end_typedef

begin_ifndef
ifndef|#
directive|ifndef
name|__bool_true_false_are_defined
end_ifndef

begin_typedef
typedef|typedef
name|boolean_t
name|bool
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|bus_addr_t
name|dma_addr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|mtx
name|spinlock_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|resource
modifier|*
name|pci_irq_h
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|vxge_pci_info_t
modifier|*
name|pci_dev_h
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|vxge_pci_info_t
modifier|*
name|pci_cfg_h
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|vxge_bus_res_t
modifier|*
name|pci_reg_h
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|vxge_dma_alloc_t
name|pci_dma_h
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|vxge_dma_alloc_t
name|pci_dma_acc_h
typedef|;
end_typedef

begin_comment
comment|/*  * -------------------------- "libc" functionality -------------------------  */
end_comment

begin_define
define|#
directive|define
name|vxge_os_curr_time
value|systime
end_define

begin_define
define|#
directive|define
name|vxge_os_strcpy
value|strcpy
end_define

begin_define
define|#
directive|define
name|vxge_os_strlcpy
value|strlcpy
end_define

begin_define
define|#
directive|define
name|vxge_os_strlen
value|strlen
end_define

begin_define
define|#
directive|define
name|vxge_os_sprintf
value|sprintf
end_define

begin_define
define|#
directive|define
name|vxge_os_snprintf
value|snprintf
end_define

begin_define
define|#
directive|define
name|vxge_os_println
parameter_list|(
name|buf
parameter_list|)
value|printf("%s\n", buf)
end_define

begin_define
define|#
directive|define
name|vxge_os_memzero
value|bzero
end_define

begin_define
define|#
directive|define
name|vxge_os_memcmp
value|memcmp
end_define

begin_define
define|#
directive|define
name|vxge_os_memcpy
parameter_list|(
name|dst
parameter_list|,
name|src
parameter_list|,
name|size
parameter_list|)
value|bcopy(src, dst, size)
end_define

begin_define
define|#
directive|define
name|vxge_os_timestamp
parameter_list|(
name|buff
parameter_list|)
value|{			\ 	struct timeval cur_time;			\ 	gettimeofday(&cur_time, 0);			\ 	snprintf(buff, sizeof(buff), "%08li.%08li: ",	\ 		cur_time.tv_sec, cur_time.tv_usec);	\ }
end_define

begin_define
define|#
directive|define
name|vxge_os_printf
parameter_list|(
name|fmt
modifier|...
parameter_list|)
value|{			\ 	printf(fmt);					\ 	printf("\n");					\ }
end_define

begin_define
define|#
directive|define
name|vxge_os_vaprintf
parameter_list|(
name|fmt
modifier|...
parameter_list|)
define|\
value|vxge_os_printf(fmt);
end_define

begin_define
define|#
directive|define
name|vxge_os_vasprintf
parameter_list|(
name|fmt
modifier|...
parameter_list|)
value|{			\ 	vxge_os_printf(fmt);				\ }
end_define

begin_define
define|#
directive|define
name|vxge_trace
parameter_list|(
name|trace
parameter_list|,
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
define|\
value|vxge_debug_uld(VXGE_COMPONENT_ULD,		\ 		trace, hldev, vpid, fmt, ## args)
end_define

begin_comment
comment|/*  * -------------------- synchronization primitives -------------------------  */
end_comment

begin_comment
comment|/* Initialize the spin lock */
end_comment

begin_define
define|#
directive|define
name|vxge_os_spin_lock_init
parameter_list|(
name|lockp
parameter_list|,
name|ctxh
parameter_list|)
value|{			\ 	if (mtx_initialized(lockp) == 0)			\ 		mtx_init((lockp), "vxge", NULL, MTX_DEF);	\ }
end_define

begin_comment
comment|/* Initialize the spin lock (IRQ version) */
end_comment

begin_define
define|#
directive|define
name|vxge_os_spin_lock_init_irq
parameter_list|(
name|lockp
parameter_list|,
name|ctxh
parameter_list|)
value|{		\ 	if (mtx_initialized(lockp) == 0)			\ 		mtx_init((lockp), "vxge", NULL, MTX_DEF);	\ }
end_define

begin_comment
comment|/* Destroy the lock */
end_comment

begin_define
define|#
directive|define
name|vxge_os_spin_lock_destroy
parameter_list|(
name|lockp
parameter_list|,
name|ctxh
parameter_list|)
value|{		\ 	if (mtx_initialized(lockp) != 0)			\ 		mtx_destroy(lockp);				\ }
end_define

begin_comment
comment|/* Destroy the lock (IRQ version) */
end_comment

begin_define
define|#
directive|define
name|vxge_os_spin_lock_destroy_irq
parameter_list|(
name|lockp
parameter_list|,
name|ctxh
parameter_list|)
value|{		\ 	if (mtx_initialized(lockp) != 0)			\ 		mtx_destroy(lockp);				\ }
end_define

begin_comment
comment|/* Acquire the lock */
end_comment

begin_define
define|#
directive|define
name|vxge_os_spin_lock
parameter_list|(
name|lockp
parameter_list|)
value|{				\ 	if (mtx_owned(lockp) == 0)				\ 		mtx_lock(lockp);				\ }
end_define

begin_comment
comment|/* Release the lock */
end_comment

begin_define
define|#
directive|define
name|vxge_os_spin_unlock
parameter_list|(
name|lockp
parameter_list|)
value|mtx_unlock(lockp)
end_define

begin_comment
comment|/* Acquire the lock (IRQ version) */
end_comment

begin_define
define|#
directive|define
name|vxge_os_spin_lock_irq
parameter_list|(
name|lockp
parameter_list|,
name|flags
parameter_list|)
value|{			\ 	flags = MTX_QUIET;					\ 	if (mtx_owned(lockp) == 0)				\ 		mtx_lock_flags(lockp, flags);			\ }
end_define

begin_comment
comment|/* Release the lock (IRQ version) */
end_comment

begin_define
define|#
directive|define
name|vxge_os_spin_unlock_irq
parameter_list|(
name|lockp
parameter_list|,
name|flags
parameter_list|)
value|{			\ 	flags = MTX_QUIET;					\ 	mtx_unlock_flags(lockp, flags);				\ }
end_define

begin_comment
comment|/* Write memory	barrier	*/
end_comment

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|<
literal|800000
end_if

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64__
argument_list|)
end_if

begin_define
define|#
directive|define
name|mb
parameter_list|()
value|__asm volatile("mfence" ::: "memory")
end_define

begin_define
define|#
directive|define
name|wmb
parameter_list|()
value|__asm volatile("sfence" ::: "memory")
end_define

begin_define
define|#
directive|define
name|rmb
parameter_list|()
value|__asm volatile("lfence" ::: "memory")
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|mb
parameter_list|()
end_define

begin_define
define|#
directive|define
name|rmb
parameter_list|()
end_define

begin_define
define|#
directive|define
name|wmb
parameter_list|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|vxge_os_wmb
parameter_list|()
value|wmb()
end_define

begin_define
define|#
directive|define
name|vxge_os_udelay
parameter_list|(
name|x
parameter_list|)
value|DELAY(x)
end_define

begin_define
define|#
directive|define
name|vxge_os_stall
parameter_list|(
name|x
parameter_list|)
value|DELAY(x)
end_define

begin_define
define|#
directive|define
name|vxge_os_mdelay
parameter_list|(
name|x
parameter_list|)
value|DELAY(x * 1000)
end_define

begin_define
define|#
directive|define
name|vxge_os_xchg
value|(targetp, newval)
end_define

begin_comment
comment|/*  * ------------------------- misc primitives -------------------------------  */
end_comment

begin_define
define|#
directive|define
name|vxge_os_be32
value|u32
end_define

begin_define
define|#
directive|define
name|vxge_os_unlikely
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|vxge_os_prefetch
parameter_list|(
name|x
parameter_list|)
value|(x = x)
end_define

begin_define
define|#
directive|define
name|vxge_os_prefetchw
parameter_list|(
name|x
parameter_list|)
value|(x = x)
end_define

begin_define
define|#
directive|define
name|vxge_os_bug
value|vxge_os_printf
end_define

begin_define
define|#
directive|define
name|vxge_os_ntohs
value|ntohs
end_define

begin_define
define|#
directive|define
name|vxge_os_ntohl
value|ntohl
end_define

begin_define
define|#
directive|define
name|vxge_os_ntohll
value|be64toh
end_define

begin_define
define|#
directive|define
name|vxge_os_htons
value|htons
end_define

begin_define
define|#
directive|define
name|vxge_os_htonl
value|htonl
end_define

begin_define
define|#
directive|define
name|vxge_os_htonll
value|htobe64
end_define

begin_define
define|#
directive|define
name|vxge_os_in_multicast
value|IN_MULTICAST
end_define

begin_define
define|#
directive|define
name|VXGE_OS_INADDR_BROADCAST
value|INADDR_BROADCAST
end_define

begin_comment
comment|/*  * -------------------------- compiler stuff ------------------------------  */
end_comment

begin_define
define|#
directive|define
name|__vxge_os_cacheline_size
value|CACHE_LINE_SIZE
end_define

begin_define
define|#
directive|define
name|__vxge_os_attr_cacheline_aligned
value|__aligned(__vxge_os_cacheline_size)
end_define

begin_comment
comment|/*  * ---------------------- memory primitives --------------------------------  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|VXGE_OS_MEMORY_CHECK
argument_list|)
end_if

begin_typedef
typedef|typedef
struct|struct
name|_vxge_os_malloc_t
block|{
name|u_long
name|line
decl_stmt|;
name|u_long
name|size
decl_stmt|;
name|void
modifier|*
name|ptr
decl_stmt|;
specifier|const
name|char
modifier|*
name|file
decl_stmt|;
block|}
name|vxge_os_malloc_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|VXGE_OS_MALLOC_CNT_MAX
value|64*1024
end_define

begin_decl_stmt
specifier|extern
name|u32
name|g_malloc_cnt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|vxge_os_malloc_t
name|g_malloc_arr
index|[
name|VXGE_OS_MALLOC_CNT_MAX
index|]
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|VXGE_OS_MEMORY_CHECK_MALLOC
parameter_list|(
name|_vaddr
parameter_list|,
name|_size
parameter_list|,
name|_file
parameter_list|,
name|_line
parameter_list|)
value|{	\ 	if (_vaddr) {							\ 		u32 i;							\ 		for (i = 0; i< g_malloc_cnt; i++) {			\ 			if (g_malloc_arr[i].ptr == NULL)		\ 				break;					\ 		}							\ 		if (i == g_malloc_cnt) {				\ 			g_malloc_cnt++;					\ 			if (g_malloc_cnt>= VXGE_OS_MALLOC_CNT_MAX) {	\ 				vxge_os_bug("g_malloc_cnt exceed %d\n",	\ 				    VXGE_OS_MALLOC_CNT_MAX);		\ 			} else {					\ 				g_malloc_arr[i].ptr = _vaddr;		\ 				g_malloc_arr[i].size = _size;		\ 				g_malloc_arr[i].file = _file;		\ 				g_malloc_arr[i].line = _line;		\ 			}						\ 		}							\ 	}								\ }
end_define

begin_define
define|#
directive|define
name|VXGE_OS_MEMORY_CHECK_FREE
parameter_list|(
name|_vaddr
parameter_list|,
name|_size
parameter_list|,
name|_file
parameter_list|,
name|_line
parameter_list|)
value|{	\ 	u32 i;								\ 	for (i = 0; i< VXGE_OS_MALLOC_CNT_MAX; i++) {			\ 		if (g_malloc_arr[i].ptr == _vaddr) {			\ 			g_malloc_arr[i].ptr = NULL;			\ 			if (_size&& g_malloc_arr[i].size !=  _size) {	\ 				vxge_os_printf("freeing wrong size "	\ 				    "%lu allocated %s:%lu:"		\ 				    VXGE_OS_LLXFMT":%lu\n",		\ 				    _size,				\ 				    g_malloc_arr[i].file,		\ 				    g_malloc_arr[i].line,		\ 				    (u64)(u_long) g_malloc_arr[i].ptr,	\ 				    g_malloc_arr[i].size);		\ 			}						\ 			break;						\ 		}							\ 	}								\ }
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|VXGE_OS_MEMORY_CHECK_MALLOC
parameter_list|(
name|prt
parameter_list|,
name|size
parameter_list|,
name|file
parameter_list|,
name|line
parameter_list|)
end_define

begin_define
define|#
directive|define
name|VXGE_OS_MEMORY_CHECK_FREE
parameter_list|(
name|vaddr
parameter_list|,
name|size
parameter_list|,
name|file
parameter_list|,
name|line
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|vxge_mem_alloc_ex
parameter_list|(
name|u_long
name|size
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|void
modifier|*
name|vaddr
init|=
name|NULL
decl_stmt|;
name|vaddr
operator|=
name|malloc
argument_list|(
name|size
argument_list|,
name|M_DEVBUF
argument_list|,
name|M_ZERO
operator||
name|M_NOWAIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|NULL
operator|!=
name|vaddr
condition|)
block|{
name|VXGE_OS_MEMORY_CHECK_MALLOC
argument_list|(
argument|(void *)vaddr
argument_list|,
argument|size
argument_list|,
argument|file
argument_list|,
argument|line
argument_list|)
name|vxge_os_memzero
argument_list|(
name|vaddr
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|vaddr
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|vxge_mem_free_ex
parameter_list|(
specifier|const
name|void
modifier|*
name|vaddr
parameter_list|,
name|u_long
name|size
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
if|if
condition|(
name|NULL
operator|!=
name|vaddr
condition|)
block|{
name|VXGE_OS_MEMORY_CHECK_FREE
argument_list|(
argument|vaddr
argument_list|,
argument|size
argument_list|,
argument|file
argument_list|,
argument|line
argument_list|)
name|free
argument_list|(
name|__DECONST
argument_list|(
name|void
operator|*
argument_list|,
name|vaddr
argument_list|)
argument_list|,
name|M_DEVBUF
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_define
define|#
directive|define
name|vxge_os_malloc
parameter_list|(
name|pdev
parameter_list|,
name|size
parameter_list|)
define|\
value|vxge_mem_alloc_ex(size, __FILE__, __LINE__)
end_define

begin_define
define|#
directive|define
name|vxge_os_free
parameter_list|(
name|pdev
parameter_list|,
name|vaddr
parameter_list|,
name|size
parameter_list|)
define|\
value|vxge_mem_free_ex(vaddr, size, __FILE__, __LINE__)
end_define

begin_define
define|#
directive|define
name|vxge_mem_alloc
parameter_list|(
name|size
parameter_list|)
define|\
value|vxge_mem_alloc_ex(size, __FILE__, __LINE__)
end_define

begin_define
define|#
directive|define
name|vxge_mem_free
parameter_list|(
name|vaddr
parameter_list|,
name|size
parameter_list|)
define|\
value|vxge_mem_free_ex(vaddr, size, __FILE__, __LINE__)
end_define

begin_define
define|#
directive|define
name|vxge_free_packet
parameter_list|(
name|x
parameter_list|)
define|\
value|if (NULL != x) { m_freem(x); x = NULL; }
end_define

begin_comment
comment|/*  * --------------------------- pci primitives ------------------------------  */
end_comment

begin_define
define|#
directive|define
name|vxge_os_pci_read8
parameter_list|(
name|pdev
parameter_list|,
name|cfgh
parameter_list|,
name|where
parameter_list|,
name|val
parameter_list|)
define|\
value|(*(val) = pci_read_config(pdev->ndev, where, 1))
end_define

begin_define
define|#
directive|define
name|vxge_os_pci_write8
parameter_list|(
name|pdev
parameter_list|,
name|cfgh
parameter_list|,
name|where
parameter_list|,
name|val
parameter_list|)
define|\
value|pci_write_config(pdev->ndev, where, val, 1)
end_define

begin_define
define|#
directive|define
name|vxge_os_pci_read16
parameter_list|(
name|pdev
parameter_list|,
name|cfgh
parameter_list|,
name|where
parameter_list|,
name|val
parameter_list|)
define|\
value|(*(val) = pci_read_config(pdev->ndev, where, 2))
end_define

begin_define
define|#
directive|define
name|vxge_os_pci_write16
parameter_list|(
name|pdev
parameter_list|,
name|cfgh
parameter_list|,
name|where
parameter_list|,
name|val
parameter_list|)
define|\
value|pci_write_config(pdev->ndev, where, val, 2)
end_define

begin_define
define|#
directive|define
name|vxge_os_pci_read32
parameter_list|(
name|pdev
parameter_list|,
name|cfgh
parameter_list|,
name|where
parameter_list|,
name|val
parameter_list|)
define|\
value|(*(val) = pci_read_config(pdev->ndev, where, 4))
end_define

begin_define
define|#
directive|define
name|vxge_os_pci_write32
parameter_list|(
name|pdev
parameter_list|,
name|cfgh
parameter_list|,
name|where
parameter_list|,
name|val
parameter_list|)
define|\
value|pci_write_config(pdev->ndev, where, val, 4)
end_define

begin_function
specifier|static
specifier|inline
name|u32
name|vxge_os_pci_res_len
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_res_len
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|vxge_os_pio_mem_read8
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|caddr_t
name|vaddr
init|=
call|(
name|caddr_t
call|)
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
operator|(
name|regh
operator|)
operator|)
operator|->
name|bar_start_addr
argument_list|)
decl_stmt|;
return|return
name|bus_space_read_1
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_tag
argument_list|,
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_handle
argument_list|,
call|(
name|bus_size_t
call|)
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|addr
argument_list|)
operator|-
name|vaddr
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|vxge_os_pio_mem_read16
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|caddr_t
name|vaddr
init|=
call|(
name|caddr_t
call|)
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
operator|(
name|regh
operator|)
operator|)
operator|->
name|bar_start_addr
argument_list|)
decl_stmt|;
return|return
name|bus_space_read_2
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_tag
argument_list|,
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_handle
argument_list|,
call|(
name|bus_size_t
call|)
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|addr
argument_list|)
operator|-
name|vaddr
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|vxge_os_pio_mem_read32
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|caddr_t
name|vaddr
init|=
call|(
name|caddr_t
call|)
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
operator|(
name|regh
operator|)
operator|)
operator|->
name|bar_start_addr
argument_list|)
decl_stmt|;
return|return
name|bus_space_read_4
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_tag
argument_list|,
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_handle
argument_list|,
call|(
name|bus_size_t
call|)
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|addr
argument_list|)
operator|-
name|vaddr
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u64
name|vxge_os_pio_mem_read64
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|u64
name|val
decl_stmt|,
name|val_l
decl_stmt|,
name|val_u
decl_stmt|;
name|caddr_t
name|vaddr
init|=
call|(
name|caddr_t
call|)
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
operator|(
name|regh
operator|)
operator|)
operator|->
name|bar_start_addr
argument_list|)
decl_stmt|;
name|val_l
operator|=
name|bus_space_read_4
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_tag
argument_list|,
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_handle
argument_list|,
call|(
name|bus_size_t
call|)
argument_list|(
operator|(
operator|(
name|caddr_t
operator|)
name|addr
operator|)
operator|+
literal|4
operator|-
name|vaddr
argument_list|)
argument_list|)
expr_stmt|;
name|val_u
operator|=
name|bus_space_read_4
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_tag
argument_list|,
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_handle
argument_list|,
call|(
name|bus_size_t
call|)
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|addr
argument_list|)
operator|-
name|vaddr
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
operator|(
operator|(
name|val_l
operator|<<
literal|32
operator|)
operator||
name|val_u
operator|)
expr_stmt|;
return|return
operator|(
name|val
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|vxge_os_pio_mem_write8
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u8
name|val
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|caddr_t
name|vaddr
init|=
call|(
name|caddr_t
call|)
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bar_start_addr
argument_list|)
decl_stmt|;
name|bus_space_write_1
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_tag
argument_list|,
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_handle
argument_list|,
call|(
name|bus_size_t
call|)
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|addr
argument_list|)
operator|-
name|vaddr
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|vxge_os_pio_mem_write16
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u16
name|val
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|caddr_t
name|vaddr
init|=
call|(
name|caddr_t
call|)
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
operator|(
name|regh
operator|)
operator|)
operator|->
name|bar_start_addr
argument_list|)
decl_stmt|;
name|bus_space_write_2
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_tag
argument_list|,
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_handle
argument_list|,
call|(
name|bus_size_t
call|)
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|addr
argument_list|)
operator|-
name|vaddr
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|vxge_os_pio_mem_write32
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u32
name|val
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|caddr_t
name|vaddr
init|=
call|(
name|caddr_t
call|)
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
operator|(
name|regh
operator|)
operator|)
operator|->
name|bar_start_addr
argument_list|)
decl_stmt|;
name|bus_space_write_4
argument_list|(
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_tag
argument_list|,
operator|(
operator|(
name|vxge_bus_res_t
operator|*
operator|)
name|regh
operator|)
operator|->
name|bus_space_handle
argument_list|,
call|(
name|bus_size_t
call|)
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|addr
argument_list|)
operator|-
name|vaddr
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|vxge_os_pio_mem_write64
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u64
name|val
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|u32
name|val_l
init|=
call|(
name|u32
call|)
argument_list|(
name|val
operator|&
literal|0xffffffff
argument_list|)
decl_stmt|;
name|u32
name|val_u
init|=
call|(
name|u32
call|)
argument_list|(
name|val
operator|>>
literal|32
argument_list|)
decl_stmt|;
name|vxge_os_pio_mem_write32
argument_list|(
name|pdev
argument_list|,
name|regh
argument_list|,
name|val_l
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|vxge_os_pio_mem_write32
argument_list|(
name|pdev
argument_list|,
name|regh
argument_list|,
name|val_u
argument_list|,
operator|(
name|caddr_t
operator|)
name|addr
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|vxge_os_flush_bridge
value|vxge_os_pio_mem_read64
end_define

begin_comment
comment|/*  * --------------------------- dma primitives -----------------------------  */
end_comment

begin_define
define|#
directive|define
name|VXGE_OS_DMA_DIR_TODEVICE
value|0
end_define

begin_define
define|#
directive|define
name|VXGE_OS_DMA_DIR_FROMDEVICE
value|1
end_define

begin_define
define|#
directive|define
name|VXGE_OS_DMA_DIR_BIDIRECTIONAL
value|2
end_define

begin_define
define|#
directive|define
name|VXGE_OS_INVALID_DMA_ADDR
value|((bus_addr_t)0)
end_define

begin_function
specifier|static
name|void
name|vxge_dmamap_cb
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|segs
parameter_list|,
name|int
name|nseg
parameter_list|,
name|int
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
condition|)
return|return;
operator|*
operator|(
name|bus_addr_t
operator|*
operator|)
name|arg
operator|=
name|segs
operator|->
name|ds_addr
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|vxge_os_dma_malloc
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|u_long
name|bytes
parameter_list|,
name|int
name|dma_flags
parameter_list|,
name|pci_dma_h
modifier|*
name|p_dmah
parameter_list|,
name|pci_dma_acc_h
modifier|*
name|p_dma_acch
parameter_list|)
block|{
name|int
name|error
init|=
literal|0
decl_stmt|;
name|bus_addr_t
name|bus_addr
init|=
name|BUS_SPACE_MAXADDR
decl_stmt|;
name|bus_size_t
name|boundary
decl_stmt|,
name|max_size
decl_stmt|,
name|alignment
init|=
name|PAGE_SIZE
decl_stmt|;
if|if
condition|(
name|bytes
operator|>
name|PAGE_SIZE
condition|)
block|{
name|boundary
operator|=
literal|0
expr_stmt|;
name|max_size
operator|=
name|bytes
expr_stmt|;
block|}
else|else
block|{
name|boundary
operator|=
name|PAGE_SIZE
expr_stmt|;
name|max_size
operator|=
name|PAGE_SIZE
expr_stmt|;
block|}
name|error
operator|=
name|bus_dma_tag_create
argument_list|(
name|bus_get_dma_tag
argument_list|(
name|pdev
operator|->
name|ndev
argument_list|)
argument_list|,
comment|/* Parent */
name|alignment
argument_list|,
comment|/* Alignment */
name|boundary
argument_list|,
comment|/* Bounds */
name|bus_addr
argument_list|,
comment|/* Low Address */
name|bus_addr
argument_list|,
comment|/* High Address */
name|NULL
argument_list|,
comment|/* Filter Func */
name|NULL
argument_list|,
comment|/* Filter Func Argument */
name|bytes
argument_list|,
comment|/* Maximum Size */
literal|1
argument_list|,
comment|/* Number of Segments */
name|max_size
argument_list|,
comment|/* Maximum Segment Size */
name|BUS_DMA_ALLOCNOW
argument_list|,
comment|/* Flags */
name|NULL
argument_list|,
comment|/* Lock Func */
name|NULL
argument_list|,
comment|/* Lock Func Arguments */
operator|&
operator|(
name|p_dmah
operator|->
name|dma_tag
operator|)
argument_list|)
expr_stmt|;
comment|/* DMA Tag */
if|if
condition|(
name|error
operator|!=
literal|0
condition|)
block|{
name|device_printf
argument_list|(
name|pdev
operator|->
name|ndev
argument_list|,
literal|"bus_dma_tag_create failed\n"
argument_list|)
expr_stmt|;
goto|goto
name|_exit0
goto|;
block|}
name|p_dmah
operator|->
name|dma_size
operator|=
name|bytes
expr_stmt|;
name|error
operator|=
name|bus_dmamem_alloc
argument_list|(
name|p_dmah
operator|->
name|dma_tag
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|p_dmah
operator|->
name|dma_vaddr
argument_list|,
operator|(
name|BUS_DMA_NOWAIT
operator||
name|BUS_DMA_ZERO
operator||
name|BUS_DMA_COHERENT
operator|)
argument_list|,
operator|&
name|p_dmah
operator|->
name|dma_map
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|0
condition|)
block|{
name|device_printf
argument_list|(
name|pdev
operator|->
name|ndev
argument_list|,
literal|"bus_dmamem_alloc failed\n"
argument_list|)
expr_stmt|;
goto|goto
name|_exit1
goto|;
block|}
name|VXGE_OS_MEMORY_CHECK_MALLOC
argument_list|(
name|p_dmah
operator|->
name|dma_vaddr
argument_list|,
name|p_dmah
operator|->
name|dma_size
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|)
expr_stmt|;
return|return
operator|(
name|p_dmah
operator|->
name|dma_vaddr
operator|)
return|;
name|_exit1
label|:
name|bus_dma_tag_destroy
argument_list|(
name|p_dmah
operator|->
name|dma_tag
argument_list|)
expr_stmt|;
name|_exit0
label|:
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|vxge_dma_free
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
specifier|const
name|void
modifier|*
name|vaddr
parameter_list|,
name|u_long
name|size
parameter_list|,
name|pci_dma_h
modifier|*
name|p_dmah
parameter_list|,
name|pci_dma_acc_h
modifier|*
name|p_dma_acch
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|VXGE_OS_MEMORY_CHECK_FREE
argument_list|(
argument|p_dmah->dma_vaddr
argument_list|,
argument|size
argument_list|,
argument|file
argument_list|,
argument|line
argument_list|)
name|bus_dmamem_free
argument_list|(
name|p_dmah
operator|->
name|dma_tag
argument_list|,
name|p_dmah
operator|->
name|dma_vaddr
argument_list|,
name|p_dmah
operator|->
name|dma_map
argument_list|)
expr_stmt|;
name|bus_dma_tag_destroy
argument_list|(
name|p_dmah
operator|->
name|dma_tag
argument_list|)
expr_stmt|;
name|p_dmah
operator|->
name|dma_tag
operator|=
name|NULL
expr_stmt|;
name|p_dmah
operator|->
name|dma_vaddr
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_function_decl
specifier|extern
name|void
name|vxge_hal_blockpool_block_add
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|u32
parameter_list|,
name|pci_dma_h
modifier|*
parameter_list|,
name|pci_dma_acc_h
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|vxge_os_dma_malloc_async
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|void
modifier|*
name|devh
parameter_list|,
name|u_long
name|size
parameter_list|,
name|int
name|dma_flags
parameter_list|)
block|{
name|pci_dma_h
name|dma_h
decl_stmt|;
name|pci_dma_acc_h
name|acc_handle
decl_stmt|;
name|void
modifier|*
name|block_addr
init|=
name|NULL
decl_stmt|;
name|block_addr
operator|=
name|vxge_os_dma_malloc
argument_list|(
name|pdev
argument_list|,
name|size
argument_list|,
name|dma_flags
argument_list|,
operator|&
name|dma_h
argument_list|,
operator|&
name|acc_handle
argument_list|)
expr_stmt|;
name|vxge_hal_blockpool_block_add
argument_list|(
name|devh
argument_list|,
name|block_addr
argument_list|,
name|size
argument_list|,
operator|&
name|dma_h
argument_list|,
operator|&
name|acc_handle
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|vxge_os_dma_sync
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_dma_h
name|dmah
parameter_list|,
name|dma_addr_t
name|dma_paddr
parameter_list|,
name|u64
name|dma_offset
parameter_list|,
name|size_t
name|length
parameter_list|,
name|int
name|dir
parameter_list|)
block|{
name|bus_dmasync_op_t
name|dmasync_op
decl_stmt|;
switch|switch
condition|(
name|dir
condition|)
block|{
case|case
name|VXGE_OS_DMA_DIR_TODEVICE
case|:
name|dmasync_op
operator|=
name|BUS_DMASYNC_PREWRITE
operator||
name|BUS_DMASYNC_POSTWRITE
expr_stmt|;
break|break;
case|case
name|VXGE_OS_DMA_DIR_FROMDEVICE
case|:
name|dmasync_op
operator|=
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_POSTREAD
expr_stmt|;
break|break;
default|default:
case|case
name|VXGE_OS_DMA_DIR_BIDIRECTIONAL
case|:
name|dmasync_op
operator|=
name|BUS_DMASYNC_POSTREAD
operator||
name|BUS_DMASYNC_POSTWRITE
expr_stmt|;
break|break;
block|}
name|bus_dmamap_sync
argument_list|(
name|dmah
operator|.
name|dma_tag
argument_list|,
name|dmah
operator|.
name|dma_map
argument_list|,
name|dmasync_op
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|dma_addr_t
name|vxge_os_dma_map
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_dma_h
name|dmah
parameter_list|,
name|void
modifier|*
name|vaddr
parameter_list|,
name|u_long
name|size
parameter_list|,
name|int
name|dir
parameter_list|,
name|int
name|dma_flags
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|bus_dmamap_load
argument_list|(
name|dmah
operator|.
name|dma_tag
argument_list|,
name|dmah
operator|.
name|dma_map
argument_list|,
name|dmah
operator|.
name|dma_vaddr
argument_list|,
name|dmah
operator|.
name|dma_size
argument_list|,
name|vxge_dmamap_cb
argument_list|,
operator|&
operator|(
name|dmah
operator|.
name|dma_paddr
operator|)
argument_list|,
name|BUS_DMA_NOWAIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|0
condition|)
return|return
operator|(
name|VXGE_OS_INVALID_DMA_ADDR
operator|)
return|;
name|dmah
operator|.
name|dma_size
operator|=
name|size
expr_stmt|;
return|return
operator|(
name|dmah
operator|.
name|dma_paddr
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|vxge_os_dma_unmap
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_dma_h
name|dmah
parameter_list|,
name|dma_addr_t
name|dma_paddr
parameter_list|,
name|u32
name|size
parameter_list|,
name|int
name|dir
parameter_list|)
block|{
name|bus_dmamap_unload
argument_list|(
name|dmah
operator|.
name|dma_tag
argument_list|,
name|dmah
operator|.
name|dma_map
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|vxge_os_dma_free
parameter_list|(
name|pdev
parameter_list|,
name|vaddr
parameter_list|,
name|size
parameter_list|,
name|dma_flags
parameter_list|,
name|p_dma_acch
parameter_list|,
name|p_dmah
parameter_list|)
define|\
value|vxge_dma_free(pdev, vaddr, size, p_dma_acch, p_dmah,		    \ 		__FILE__, __LINE__)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|vxge_os_is_my_packet
parameter_list|(
name|void
modifier|*
name|pdev
parameter_list|,
name|unsigned
name|long
name|addr
parameter_list|)
block|{
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _VXGE_OSDEP_H_ */
end_comment

end_unit

