begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright(c) 2002-2011 Exar Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification are permitted provided the following conditions are met:  *  *    1. Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *  *    2. Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *  *    3. Neither the name of the Exar Corporation nor the names of its  *       contributors may be used to endorse or promote products derived from  *       this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|VXGE_OS_DEBUG_H
end_ifndef

begin_define
define|#
directive|define
name|VXGE_OS_DEBUG_H
end_define

begin_function
name|__EXTERN_BEGIN_DECLS
ifndef|#
directive|ifndef
name|VXGE_DEBUG_INLINE_FUNCTIONS
if|#
directive|if
name|defined
argument_list|(
name|VXGE_TRACE_INTO_CIRCULAR_ARR
argument_list|)
define|#
directive|define
name|vxge_trace_aux
parameter_list|(
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|vxge_os_vasprintf(hldev, vpid, fmt, __VA_ARGS__)
else|#
directive|else
define|#
directive|define
name|vxge_trace_aux
parameter_list|(
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|vxge_os_vaprintf(hldev, vpid, fmt, __VA_ARGS__)
endif|#
directive|endif
define|#
directive|define
name|vxge_debug
parameter_list|(
name|module
parameter_list|,
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|{									\ 	if (((u32)level<=						\ 		((vxge_hal_device_t *)hldev)->debug_level)&&		\ 	    ((u32)module&						\ 		((vxge_hal_device_t *)hldev)->debug_module_mask))	\ 			vxge_trace_aux((vxge_hal_device_h)hldev,	\ 					vpid, fmt, __VA_ARGS__);	\ }
comment|/*  * vxge_debug_driver  * @level: level of debug verbosity.  * @hldev: HAL Device  * @vpid: Vpath id  * @fmt: printf like format string  *  * Provides logging facilities for OS Dependent functions. Can be customized  * with debug levels. Input parameters, except level, are the same  * as posix printf. This function may be compiled out if DEBUG macro  * was never defined.  * See also: vxge_debug_level_e{}.  */
if|#
directive|if
operator|(
name|VXGE_COMPONENT_HAL_DRIVER
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
define|#
directive|define
name|vxge_debug_driver
parameter_list|(
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|if ((u32)level<= g_debug_level)			    \ 		vxge_os_vaprintf((vxge_hal_device_h)hldev,	    \ 				vpid, fmt, __VA_ARGS__);
else|#
directive|else
define|#
directive|define
name|vxge_debug_driver
parameter_list|(
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
endif|#
directive|endif
comment|/*  * vxge_debug_osdep  * @level: level of debug verbosity.  * @hldev: HAL Device  * @vpid: Vpath id  * @fmt: printf like format string  *  * Provides logging facilities for OS Dependent functions. Can be customized  * with debug levels. Input parameters, except level, are the same  * as posix printf. This function may be compiled out if DEBUG macro  * was never defined.  * See also: vxge_debug_level_e{}.  */
if|#
directive|if
operator|(
name|VXGE_COMPONENT_OSDEP
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
define|#
directive|define
name|vxge_debug_osdep
parameter_list|(
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|vxge_debug(VXGE_COMPONENT_OSDEP, level, hldev, vpid, fmt, __VA_ARGS__)
else|#
directive|else
define|#
directive|define
name|vxge_debug_osdep
parameter_list|(
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
endif|#
directive|endif
comment|/*  * vxge_debug_ll  * @level: level of debug verbosity.  * @hldev: HAL Device  * @vpid: Vpath id  * @fmt: printf like format string  *  * Provides logging facilities for LL driver. Can be customized  * with debug levels. Input parameters, except level, are the same  * as posix printf. This function may be compiled out if DEBUG macro  * was never defined.  * See also: vxge_debug_level_e{}.  */
if|#
directive|if
operator|(
name|VXGE_COMPONENT_LL
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
define|#
directive|define
name|vxge_debug_ll
parameter_list|(
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|vxge_debug(VXGE_COMPONENT_LL, level, hldev, vpid, fmt, __VA_ARGS__)
else|#
directive|else
define|#
directive|define
name|vxge_debug_ll
parameter_list|(
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
endif|#
directive|endif
comment|/*  * vxge_debug_uld  * @component: The Component mask  * @level: level of debug verbosity.  * @hldev: HAL Device  * @vpid: Vpath id  * @fmt: printf like format string  *  * Provides logging facilities for LL driver. Can be customized  * with debug levels. Input parameters, except level, are the same  * as posix printf. This function may be compiled out if DEBUG macro  * was never defined.  * See also: vxge_debug_level_e{}.  */
if|#
directive|if
operator|(
name|VXGE_COMPONENT_ULD
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
define|#
directive|define
name|vxge_debug_uld
parameter_list|(
name|component
parameter_list|,
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|vxge_debug(component, level, hldev, vpid, fmt, __VA_ARGS__)
else|#
directive|else
define|#
directive|define
name|vxge_debug_uld
parameter_list|(
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
endif|#
directive|endif
else|#
directive|else
comment|/* VXGE_DEBUG_INLINE_FUNCTIONS */
if|#
directive|if
name|defined
argument_list|(
name|VXGE_TRACE_INTO_CIRCULAR_ARR
argument_list|)
define|#
directive|define
name|vxge_trace_aux
parameter_list|(
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|)
define|\
value|vxge_os_vasprintf(hldev, vpid, fmt)
else|#
directive|else
define|#
directive|define
name|vxge_trace_aux
parameter_list|(
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|)
define|\
value|vxge_os_vaprintf(hldev, vpid, fmt)
endif|#
directive|endif
define|#
directive|define
name|vxge_debug
parameter_list|(
name|module
parameter_list|,
name|level
parameter_list|,
name|hldev
parameter_list|,
name|vpid
parameter_list|,
name|fmt
parameter_list|)
define|\
value|{									    \ 	if (((u32)level<= ((vxge_hal_device_t *)hldev)->debug_level)&&    \ 	    ((u32)module& ((vxge_hal_device_t *)hldev)->debug_module_mask))\ 		vxge_trace_aux((vxge_hal_device_h)hldev, vpid, fmt);	    \ }
comment|/*  * vxge_debug_driver  * @level: level of debug verbosity.  * @hldev: HAL Device  * @vpid: Vpath id  * @fmt: printf like format string  *  * Provides logging facilities for OS Dependent functions. Can be customized  * with debug levels. Input parameters, except level, are the same  * as posix printf. This function may be compiled out if DEBUG macro  * was never defined.  * See also: vxge_debug_level_e{}.  */
specifier|static
specifier|inline
name|void
name|vxge_debug_driver
parameter_list|(
name|vxge_debug_level_e
name|level
parameter_list|,
name|vxge_hal_device_h
name|hldev
parameter_list|,
name|u32
name|vpid
parameter_list|,
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
block|{
if|#
directive|if
operator|(
name|VXGE_COMPONENT_HAL_DRIVER
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
if|if
condition|(
operator|(
name|u32
operator|)
name|level
operator|<=
name|g_debug_level
condition|)
name|vxge_os_vaprintf
argument_list|(
operator|(
name|vxge_hal_device_h
operator|)
name|hldev
argument_list|,
name|vpid
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/*  * vxge_debug_osdep  * @level: level of debug verbosity.  * @hldev: HAL Device  * @vpid: Vpath id  * @fmt: printf like format string  *  * Provides logging facilities for OS Dependent functions. Can be customized  * with debug levels. Input parameters, except level, are the same  * as posix printf. This function may be compiled out if DEBUG macro  * was never defined.  * See also: vxge_debug_level_e{}.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|vxge_debug_osdep
parameter_list|(
name|vxge_debug_level_e
name|level
parameter_list|,
name|vxge_hal_device_h
name|hldev
parameter_list|,
name|u32
name|vpid
parameter_list|,
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
block|{
if|#
directive|if
operator|(
name|VXGE_COMPONENT_OSDEP
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
name|vxge_debug
argument_list|(
argument|VXGE_COMPONENT_OSDEP
argument_list|,
argument|level
argument_list|,
argument|hldev
argument_list|,
argument|vpid
argument_list|,
argument|fmt
argument_list|)
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/*  * vxge_debug_ll  * @level: level of debug verbosity.  * @hldev: HAL Device  * @vpid: Vpath id  * @fmt: printf like format string  *  * Provides logging facilities for LL driver. Can be customized  * with debug levels. Input parameters, except level, are the same  * as posix printf. This function may be compiled out if DEBUG macro  * was never defined.  * See also: vxge_debug_level_e{}.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|vxge_debug_ll
parameter_list|(
name|vxge_debug_level_e
name|level
parameter_list|,
name|vxge_hal_device_h
name|hldev
parameter_list|,
name|u32
name|vpid
parameter_list|,
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
block|{
if|#
directive|if
operator|(
name|VXGE_COMPONENT_LL
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
name|vxge_debug
argument_list|(
argument|VXGE_COMPONENT_LL
argument_list|,
argument|level
argument_list|,
argument|hldev
argument_list|,
argument|vpid
argument_list|,
argument|fmt
argument_list|)
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/*  * vxge_debug_uld  * @component: The Component mask  * @level: level of debug verbosity.  * @hldev: HAL Device  * @vpid: Vpath id  * @fmt: printf like format string  *  * Provides logging facilities for LL driver. Can be customized  * with debug levels. Input parameters, except level, are the same  * as posix printf. This function may be compiled out if DEBUG macro  * was never defined.  * See also: vxge_debug_level_e{}.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|vxge_debug_uld
parameter_list|(
name|u32
name|component
parameter_list|,
name|vxge_debug_level_e
name|level
parameter_list|,
name|vxge_hal_device_h
name|hldev
parameter_list|,
name|u32
name|vpid
parameter_list|,
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
block|{
if|#
directive|if
operator|(
name|VXGE_COMPONENT_ULD
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
name|vxge_debug
argument_list|(
argument|component
argument_list|,
argument|level
argument_list|,
argument|hldev
argument_list|,
argument|vpid
argument_list|,
argument|fmt
argument_list|)
endif|#
directive|endif
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* end of VXGE_DEBUG_INLINE_FUNCTIONS */
end_comment

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* VXGE_OS_DEBUG_H */
end_comment

end_unit

