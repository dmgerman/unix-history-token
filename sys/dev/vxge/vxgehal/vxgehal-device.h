begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright(c) 2002-2011 Exar Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification are permitted provided the following conditions are met:  *  *    1. Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *  *    2. Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *  *    3. Neither the name of the Exar Corporation nor the names of its  *       contributors may be used to endorse or promote products derived from  *       this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|VXGE_HAL_DEVICE_H
end_ifndef

begin_define
define|#
directive|define
name|VXGE_HAL_DEVICE_H
end_define

begin_macro
name|__EXTERN_BEGIN_DECLS
end_macro

begin_struct_decl
struct_decl|struct
name|__hal_mrpcim_t
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|__hal_srpcim_t
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * vxge_hal_vpd_data_t  *  * Represents vpd capabilty structure  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|vxge_hal_vpd_data_t
block|{
name|u8
name|product_name
index|[
name|VXGE_HAL_VPD_LEN
index|]
decl_stmt|;
name|u8
name|serial_num
index|[
name|VXGE_HAL_VPD_LEN
index|]
decl_stmt|;
block|}
name|vxge_hal_vpd_data_t
typedef|;
end_typedef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|VXGE_TRACE_INTO_CIRCULAR_ARR
argument_list|)
end_if

begin_comment
comment|/*  * __hal_tracebuf_t  *  * HAL trace buffer object.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|__hal_tracebuf_t
block|{
name|u8
modifier|*
name|data
decl_stmt|;
name|u64
name|wrapped_count
decl_stmt|;
specifier|volatile
name|u32
name|offset
decl_stmt|;
name|u32
name|size
decl_stmt|;
block|}
name|__hal_tracebuf_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * __hal_msix_map_t  *  * HAL msix to vpath map.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|__hal_msix_map_t
block|{
name|u32
name|vp_id
decl_stmt|;
name|u32
name|int_num
decl_stmt|;
block|}
name|__hal_msix_map_t
typedef|;
end_typedef

begin_comment
comment|/*  * __hal_device_t  *  * HAL device object. Represents X3100.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|__hal_device_t
block|{
name|vxge_hal_device_t
name|header
decl_stmt|;
name|u32
name|host_type
decl_stmt|;
name|u32
name|vh_id
decl_stmt|;
name|u32
name|func_id
decl_stmt|;
name|u32
name|srpcim_id
decl_stmt|;
name|u32
name|access_rights
decl_stmt|;
define|#
directive|define
name|VXGE_HAL_DEVICE_ACCESS_RIGHT_VPATH
value|0x1
define|#
directive|define
name|VXGE_HAL_DEVICE_ACCESS_RIGHT_SRPCIM
value|0x2
define|#
directive|define
name|VXGE_HAL_DEVICE_ACCESS_RIGHT_MRPCIM
value|0x4
name|u32
name|ifmsg_seqno
decl_stmt|;
name|u32
name|manager_up
decl_stmt|;
name|vxge_hal_pci_config_t
name|pci_config_space
decl_stmt|;
name|vxge_hal_pci_config_t
name|pci_config_space_bios
decl_stmt|;
name|vxge_hal_pci_caps_offset_t
name|pci_caps
decl_stmt|;
name|vxge_hal_pci_e_caps_offset_t
name|pci_e_caps
decl_stmt|;
name|vxge_hal_pci_e_ext_caps_offset_t
name|pci_e_ext_caps
decl_stmt|;
name|vxge_hal_legacy_reg_t
modifier|*
name|legacy_reg
decl_stmt|;
name|vxge_hal_toc_reg_t
modifier|*
name|toc_reg
decl_stmt|;
name|vxge_hal_common_reg_t
modifier|*
name|common_reg
decl_stmt|;
name|vxge_hal_memrepair_reg_t
modifier|*
name|memrepair_reg
decl_stmt|;
name|vxge_hal_pcicfgmgmt_reg_t
modifier|*
name|pcicfgmgmt_reg
index|[
name|VXGE_HAL_TITAN_PCICFGMGMT_REG_SPACES
index|]
decl_stmt|;
name|vxge_hal_mrpcim_reg_t
modifier|*
name|mrpcim_reg
decl_stmt|;
name|vxge_hal_srpcim_reg_t
modifier|*
name|srpcim_reg
index|[
name|VXGE_HAL_TITAN_SRPCIM_REG_SPACES
index|]
decl_stmt|;
name|vxge_hal_vpmgmt_reg_t
modifier|*
name|vpmgmt_reg
index|[
name|VXGE_HAL_TITAN_VPMGMT_REG_SPACES
index|]
decl_stmt|;
name|vxge_hal_vpath_reg_t
modifier|*
name|vpath_reg
index|[
name|VXGE_HAL_TITAN_VPATH_REG_SPACES
index|]
decl_stmt|;
name|u8
modifier|*
name|kdfc
decl_stmt|;
name|u8
modifier|*
name|usdc
decl_stmt|;
name|__hal_virtualpath_t
name|virtual_paths
index|[
name|VXGE_HAL_MAX_VIRTUAL_PATHS
index|]
decl_stmt|;
name|u64
name|vpath_assignments
decl_stmt|;
name|u64
name|vpaths_deployed
decl_stmt|;
name|u32
name|first_vp_id
decl_stmt|;
name|u64
name|tim_int_mask0
index|[
literal|4
index|]
decl_stmt|;
name|u32
name|tim_int_mask1
index|[
literal|4
index|]
decl_stmt|;
name|__hal_msix_map_t
name|msix_map
index|[
name|VXGE_HAL_MAX_VIRTUAL_PATHS
operator|*
name|VXGE_HAL_VPATH_MSIX_MAX
index|]
decl_stmt|;
name|struct
name|__hal_srpcim_t
modifier|*
name|srpcim
decl_stmt|;
name|struct
name|__hal_mrpcim_t
modifier|*
name|mrpcim
decl_stmt|;
name|__hal_blockpool_t
name|block_pool
decl_stmt|;
name|vxge_list_t
name|pending_channel_list
decl_stmt|;
name|spinlock_t
name|pending_channel_lock
decl_stmt|;
name|vxge_hal_device_stats_t
name|stats
decl_stmt|;
specifier|volatile
name|u32
name|msix_enabled
decl_stmt|;
specifier|volatile
name|u32
name|hw_is_initialized
decl_stmt|;
specifier|volatile
name|int
name|device_resetting
decl_stmt|;
specifier|volatile
name|int
name|is_promisc
decl_stmt|;
name|int
name|tti_enabled
decl_stmt|;
name|spinlock_t
name|titan_post_lock
decl_stmt|;
name|u32
name|mtu_first_time_set
decl_stmt|;
name|char
modifier|*
name|dump_buf
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|VXGE_TRACE_INTO_CIRCULAR_ARR
argument_list|)
name|__hal_tracebuf_t
name|trace_buf
decl_stmt|;
endif|#
directive|endif
specifier|volatile
name|u32
name|in_poll
decl_stmt|;
name|u32
name|d_err_mask
decl_stmt|;
name|u32
name|d_info_mask
decl_stmt|;
name|u32
name|d_trace_mask
decl_stmt|;
block|}
name|__hal_device_t
typedef|;
end_typedef

begin_comment
comment|/*  * I2C device id. Used in I2C control register for accessing EEPROM device  * memory.  */
end_comment

begin_define
define|#
directive|define
name|VXGE_DEV_ID
value|5
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_DEVICE_MANAGER_STATE_SET
parameter_list|(
name|hldev
parameter_list|,
name|wmsg
parameter_list|)
value|{	\ 	((__hal_device_t *)hldev)->manager_up =			\ 		__hal_ifmsg_is_manager_up(wmsg);		\ }
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_DEVICE_LINK_STATE_SET
parameter_list|(
name|hldev
parameter_list|,
name|ls
parameter_list|)
value|{	\ 	((vxge_hal_device_t *)hldev)->link_state = ls;	\ }
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_DEVICE_DATA_RATE_SET
parameter_list|(
name|hldev
parameter_list|,
name|dr
parameter_list|)
value|{	\ 	((vxge_hal_device_t *)hldev)->data_rate = dr;	\ }
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_DEVICE_TIM_INT_MASK_SET
parameter_list|(
name|hldev
parameter_list|,
name|i
parameter_list|)
value|{			\ 	if (i< 16) {							\ 	    ((__hal_device_t *)hldev)->tim_int_mask0[0] |=		\ 						vBIT(0x8, (i*4), 4);	\ 	    ((__hal_device_t *)hldev)->tim_int_mask0[1] |=		\ 						vBIT(0x4, (i*4), 4);	\ 	    ((__hal_device_t *)hldev)->tim_int_mask0[3] |=		\ 						vBIT(0x1, (i*4), 4);	\ 	} else {							\ 	    ((__hal_device_t *)hldev)->tim_int_mask1[0] = 0x80000000;	\ 	    ((__hal_device_t *)hldev)->tim_int_mask1[1] = 0x40000000;	\ 	    ((__hal_device_t *)hldev)->tim_int_mask1[3] = 0x10000000;	\ 	}								\ }
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_DEVICE_TIM_INT_MASK_RESET
parameter_list|(
name|hldev
parameter_list|,
name|i
parameter_list|)
value|{			\ 	if (i< 16) {							\ 	    ((__hal_device_t *)hldev)->tim_int_mask0[0]&=		\ 						~vBIT(0x8, (i*4), 4);	\ 	    ((__hal_device_t *)hldev)->tim_int_mask0[1]&=		\ 						~vBIT(0x4, (i*4), 4);	\ 	    ((__hal_device_t *)hldev)->tim_int_mask0[3]&=		\ 						~vBIT(0x1, (i*4), 4);	\ 	} else {							\ 	    ((__hal_device_t *)hldev)->tim_int_mask1[0] = 0;		\ 	    ((__hal_device_t *)hldev)->tim_int_mask1[1] = 0;		\ 	    ((__hal_device_t *)hldev)->tim_int_mask1[3] = 0;		\ 	}								\ }
end_define

begin_comment
comment|/* ========================== PRIVATE API ================================= */
end_comment

begin_function_decl
name|void
name|vxge_hal_pio_mem_write32_upper
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u32
name|val
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vxge_hal_pio_mem_write32_lower
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u32
name|val
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_device_event_queued
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|u32
name|event_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_device_pci_caps_list_process
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_device_pci_e_init
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|vxge_hal_device_register_poll
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u64
modifier|*
name|reg
parameter_list|,
name|u32
name|op
parameter_list|,
name|u64
name|mask
parameter_list|,
name|u32
name|max_millis
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|__hal_device_register_stall
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u64
modifier|*
name|reg
parameter_list|,
name|u32
name|op
parameter_list|,
name|u64
name|mask
parameter_list|,
name|u32
name|max_millis
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|__hal_device_reg_addr_get
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_device_id_get
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u32
name|__hal_device_access_rights_get
parameter_list|(
name|u32
name|host_type
parameter_list|,
name|u32
name|func_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_device_host_info_get
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|__hal_device_hw_initialize
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|__hal_device_reset
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|__hal_device_handle_link_up_ind
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|__hal_device_handle_link_down_ind
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_device_handle_error
parameter_list|(
name|__hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u32
name|vp_id
parameter_list|,
name|vxge_hal_event_e
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* VXGE_HAL_DEVICE_H */
end_comment

end_unit

