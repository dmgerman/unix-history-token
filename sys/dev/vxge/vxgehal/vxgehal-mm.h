begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright(c) 2002-2011 Exar Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification are permitted provided the following conditions are met:  *  *    1. Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *  *    2. Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *  *    3. Neither the name of the Exar Corporation nor the names of its  *       contributors may be used to endorse or promote products derived from  *       this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|VXGE_HAL_MM_H
end_ifndef

begin_define
define|#
directive|define
name|VXGE_HAL_MM_H
end_define

begin_macro
name|__EXTERN_BEGIN_DECLS
end_macro

begin_typedef
typedef|typedef
name|void
modifier|*
name|vxge_hal_mempool_h
typedef|;
end_typedef

begin_comment
comment|/*  * struct vxge_hal_mempool_dma_t - Represents DMA objects passed to the  * caller.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|vxge_hal_mempool_dma_t
block|{
name|dma_addr_t
name|addr
decl_stmt|;
name|pci_dma_h
name|handle
decl_stmt|;
name|pci_dma_acc_h
name|acc_handle
decl_stmt|;
block|}
name|vxge_hal_mempool_dma_t
typedef|;
end_typedef

begin_comment
comment|/*  * vxge_hal_mempool_item_f  - Mempool item alloc/free callback  * @mempoolh: Memory pool handle.  * @memblock: Address of memory block  * @memblock_index: Index of memory block  * @item: Item that gets allocated or freed.  * @index: Item's index in the memory pool.  * @is_last: True, if this item is the last one in the pool; false - otherwise.  * userdata: Per-pool user context.  *  * Memory pool allocation/deallocation callback.  */
end_comment

begin_typedef
typedef|typedef
name|vxge_hal_status_e
function_decl|(
modifier|*
name|vxge_hal_mempool_item_f
function_decl|)
parameter_list|(
name|vxge_hal_mempool_h
name|mempoolh
parameter_list|,
name|void
modifier|*
name|memblock
parameter_list|,
name|u32
name|memblock_index
parameter_list|,
name|vxge_hal_mempool_dma_t
modifier|*
name|dma_object
parameter_list|,
name|void
modifier|*
name|item
parameter_list|,
name|u32
name|index
parameter_list|,
name|u32
name|is_last
parameter_list|,
name|void
modifier|*
name|userdata
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * struct vxge_hal_mempool_t - Memory pool.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|vxge_hal_mempool_t
block|{
name|vxge_hal_mempool_item_f
name|item_func_alloc
decl_stmt|;
name|vxge_hal_mempool_item_f
name|item_func_free
decl_stmt|;
name|void
modifier|*
name|userdata
decl_stmt|;
name|void
modifier|*
modifier|*
name|memblocks_arr
decl_stmt|;
name|void
modifier|*
modifier|*
name|memblocks_priv_arr
decl_stmt|;
name|vxge_hal_mempool_dma_t
modifier|*
name|memblocks_dma_arr
decl_stmt|;
name|vxge_hal_device_h
name|devh
decl_stmt|;
name|u32
name|memblock_size
decl_stmt|;
name|u32
name|memblocks_max
decl_stmt|;
name|u32
name|memblocks_allocated
decl_stmt|;
name|u32
name|item_size
decl_stmt|;
name|u32
name|items_max
decl_stmt|;
name|u32
name|items_initial
decl_stmt|;
name|u32
name|items_current
decl_stmt|;
name|u32
name|items_per_memblock
decl_stmt|;
name|u32
name|dma_flags
decl_stmt|;
name|void
modifier|*
modifier|*
name|items_arr
decl_stmt|;
name|void
modifier|*
modifier|*
name|shadow_items_arr
decl_stmt|;
name|u32
name|items_priv_size
decl_stmt|;
block|}
name|vxge_hal_mempool_t
typedef|;
end_typedef

begin_comment
comment|/*  * __hal_mempool_item_count - Returns number of items in the mempool  */
end_comment

begin_function
specifier|static
specifier|inline
name|u32
comment|/* LINTED */
name|__hal_mempool_item_count
parameter_list|(
name|vxge_hal_mempool_t
modifier|*
name|mempool
parameter_list|)
block|{
return|return
operator|(
name|mempool
operator|->
name|items_current
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * __hal_mempool_item - Returns pointer to the item in the mempool  * items array.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
comment|/* LINTED */
name|__hal_mempool_item
parameter_list|(
name|vxge_hal_mempool_t
modifier|*
name|mempool
parameter_list|,
name|u32
name|items_index
parameter_list|)
block|{
return|return
operator|(
name|mempool
operator|->
name|items_arr
index|[
name|items_index
index|]
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * __hal_mempool_item_priv - will return pointer on per item private space  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
comment|/* LINTED */
name|__hal_mempool_item_priv
parameter_list|(
name|vxge_hal_mempool_t
modifier|*
name|mempool
parameter_list|,
name|u32
name|memblock_idx
parameter_list|,
name|void
modifier|*
name|item
parameter_list|,
name|u32
modifier|*
name|memblock_item_idx
parameter_list|)
block|{
name|ptrdiff_t
name|offset
decl_stmt|;
name|void
modifier|*
name|memblock
init|=
name|mempool
operator|->
name|memblocks_arr
index|[
name|memblock_idx
index|]
decl_stmt|;
name|vxge_assert
argument_list|(
name|memblock
argument_list|)
expr_stmt|;
comment|/* LINTED */
name|offset
operator|=
call|(
name|u32
call|)
argument_list|(
operator|(
name|u8
operator|*
operator|)
name|item
operator|-
operator|(
name|u8
operator|*
operator|)
name|memblock
argument_list|)
expr_stmt|;
name|vxge_assert
argument_list|(
name|offset
operator|>=
literal|0
operator|&&
operator|(
name|u32
operator|)
name|offset
operator|<
name|mempool
operator|->
name|memblock_size
argument_list|)
expr_stmt|;
operator|(
operator|*
name|memblock_item_idx
operator|)
operator|=
operator|(
name|u32
operator|)
name|offset
operator|/
name|mempool
operator|->
name|item_size
expr_stmt|;
name|vxge_assert
argument_list|(
operator|(
operator|*
name|memblock_item_idx
operator|)
operator|<
name|mempool
operator|->
name|items_per_memblock
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|u8
operator|*
operator|)
name|mempool
operator|->
name|memblocks_priv_arr
index|[
name|memblock_idx
index|]
operator|+
operator|(
operator|*
name|memblock_item_idx
operator|)
operator|*
name|mempool
operator|->
name|items_priv_size
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * __hal_mempool_items_arr - will return pointer to the items array in the  * mempool.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
comment|/* LINTED */
name|__hal_mempool_items_arr
parameter_list|(
name|vxge_hal_mempool_t
modifier|*
name|mempool
parameter_list|)
block|{
return|return
operator|(
name|mempool
operator|->
name|items_arr
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * __hal_mempool_memblock - will return pointer to the memblock in the  * mempool memblocks array.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
comment|/* LINTED */
name|__hal_mempool_memblock
parameter_list|(
name|vxge_hal_mempool_t
modifier|*
name|mempool
parameter_list|,
name|u32
name|memblock_idx
parameter_list|)
block|{
name|vxge_assert
argument_list|(
name|mempool
operator|->
name|memblocks_arr
index|[
name|memblock_idx
index|]
argument_list|)
expr_stmt|;
return|return
operator|(
name|mempool
operator|->
name|memblocks_arr
index|[
name|memblock_idx
index|]
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * __hal_mempool_memblock_dma - will return pointer to the dma block  * corresponds to the memblock(identified by memblock_idx) in the mempool.  */
end_comment

begin_function
specifier|static
specifier|inline
name|vxge_hal_mempool_dma_t
modifier|*
comment|/* LINTED */
name|__hal_mempool_memblock_dma
parameter_list|(
name|vxge_hal_mempool_t
modifier|*
name|mempool
parameter_list|,
name|u32
name|memblock_idx
parameter_list|)
block|{
return|return
operator|(
name|mempool
operator|->
name|memblocks_dma_arr
operator|+
name|memblock_idx
operator|)
return|;
block|}
end_function

begin_function_decl
name|vxge_hal_mempool_t
modifier|*
name|vxge_hal_mempool_create
parameter_list|(
name|vxge_hal_device_h
name|devh
parameter_list|,
name|u32
name|memblock_size
parameter_list|,
name|u32
name|item_size
parameter_list|,
name|u32
name|private_size
parameter_list|,
name|u32
name|items_initial
parameter_list|,
name|u32
name|items_max
parameter_list|,
name|vxge_hal_mempool_item_f
name|item_func_alloc
parameter_list|,
name|vxge_hal_mempool_item_f
name|item_func_free
parameter_list|,
name|void
modifier|*
name|userdata
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vxge_hal_mempool_destroy
parameter_list|(
name|vxge_hal_mempool_t
modifier|*
name|mempool
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* VXGE_HAL_MM_H */
end_comment

end_unit

