begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-3-Clause  *  * Copyright(c) 2002-2011 Exar Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification are permitted provided the following conditions are met:  *  *    1. Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *  *    2. Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *  *    3. Neither the name of the Exar Corporation nor the names of its  *       contributors may be used to endorse or promote products derived from  *       this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|VXGE_HAL_CHANNEL_H
end_ifndef

begin_define
define|#
directive|define
name|VXGE_HAL_CHANNEL_H
end_define

begin_macro
name|__EXTERN_BEGIN_DECLS
end_macro

begin_comment
comment|/*  * __hal_dtr_h - Handle to the desriptor object used for nonoffload  *		send or receive. Generic handle which can be with txd or rxd  */
end_comment

begin_typedef
typedef|typedef
name|void
modifier|*
name|__hal_dtr_h
typedef|;
end_typedef

begin_comment
comment|/*  * enum __hal_channel_type_e - Enumerated channel types.  * @VXGE_HAL_CHANNEL_TYPE_UNKNOWN: Unknown channel.  * @VXGE_HAL_CHANNEL_TYPE_FIFO: fifo.  * @VXGE_HAL_CHANNEL_TYPE_RING: ring.  * @VXGE_HAL_CHANNEL_TYPE_SQ: Send Queue  * @VXGE_HAL_CHANNEL_TYPE_SRQ: Receive Queue  * @VXGE_HAL_CHANNEL_TYPE_CQRQ: Receive queue completion queue  * @VXGE_HAL_CHANNEL_TYPE_UMQ: Up message queue  * @VXGE_HAL_CHANNEL_TYPE_DMQ: Down message queue  * @VXGE_HAL_CHANNEL_TYPE_MAX: Maximum number of HAL-supported  * (and recognized) channel types. Currently: 7.  *  * Enumerated channel types. Currently there are only two link-layer  * channels - X3100 fifo and X3100 ring. In the future the list will grow.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|__hal_channel_type_e
block|{
name|VXGE_HAL_CHANNEL_TYPE_UNKNOWN
init|=
literal|0
block|,
name|VXGE_HAL_CHANNEL_TYPE_FIFO
init|=
literal|1
block|,
name|VXGE_HAL_CHANNEL_TYPE_RING
init|=
literal|2
block|,
name|VXGE_HAL_CHANNEL_TYPE_SEND_QUEUE
init|=
literal|3
block|,
name|VXGE_HAL_CHANNEL_TYPE_RECEIVE_QUEUE
init|=
literal|4
block|,
name|VXGE_HAL_CHANNEL_TYPE_COMPLETION_QUEUE
init|=
literal|5
block|,
name|VXGE_HAL_CHANNEL_TYPE_UP_MESSAGE_QUEUE
init|=
literal|6
block|,
name|VXGE_HAL_CHANNEL_TYPE_DOWN_MESSAGE_QUEUE
init|=
literal|7
block|,
name|VXGE_HAL_CHANNEL_TYPE_MAX
init|=
literal|8
block|}
name|__hal_channel_type_e
typedef|;
end_typedef

begin_comment
comment|/*  * __hal_dtr_item_t  * @dtr: Pointer to the descriptors that contains the dma data  *		to/from the device.  * @hal_priv: HAL Private data related to the dtr.  * @uld_priv: ULD Private data related to the dtr.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|__hal_dtr_item_t
block|{
name|void
modifier|*
name|dtr
decl_stmt|;
name|void
modifier|*
name|hal_priv
decl_stmt|;
name|void
modifier|*
name|uld_priv
decl_stmt|;
name|u32
name|state
decl_stmt|;
define|#
directive|define
name|VXGE_HAL_CHANNEL_DTR_FREE
value|0
define|#
directive|define
name|VXGE_HAL_CHANNEL_DTR_RESERVED
value|1
define|#
directive|define
name|VXGE_HAL_CHANNEL_DTR_POSTED
value|2
define|#
directive|define
name|VXGE_HAL_CHANNEL_DTR_COMPLETED
value|3
block|}
name|__hal_dtr_item_t
typedef|;
end_typedef

begin_comment
comment|/*  * __hal_channel_t  * @item: List item; used to maintain a list of open channels.  * @type: Channel type. See vxge_hal_channel_type_e {}.  * @devh: Device handle. HAL device object that contains _this_ channel.  * @pdev: PCI Device object  * @vph: Virtual path handle. Virtual Path Object that contains _this_ channel.  * @length: Channel length. Currently allocated number of descriptors.  *	The channel length "grows" when more descriptors get allocated.  *	See _hal_mempool_grow.  * @dtr_arr: Dtr array. Contains descriptors posted to the channel and their  *	private data.  *	Note that at any point in time @dtr_arr contains 3 types of  *	descriptors:  *	1) posted but not yet consumed by X3100 device;  *	2) consumed but not yet completed;  *	3) completed.  * @post_index: Post index. At any point in time points on the  *	position in the channel, which'll contain next to-be-posted  *	descriptor.  * @compl_index: Completion index. At any point in time points on the  *	position in the channel, which will contain next  *	to-be-completed descriptor.  * @reserve_index: Reserve index. At any point in time points on the  *	position in the channel, which will contain next  *	to-be-reserved descriptor.  * @free_dtr_count: Number of dtrs free.  * @posted_dtr_count: Number of dtrs posted  * @post_lock: Lock to serialize multiple concurrent "posters" of descriptors  *		on the given channel.  * @poll_bytes: Poll bytes.  * @per_dtr_space: Per-descriptor space (in bytes) that channel user can utilize  *		to store per-operation control information.  * @stats: Pointer to common statistics  * @userdata: Per-channel opaque (void *) user-defined context, which may be  *	upper-layer driver object, ULP connection, etc.  *	Once channel is open, @userdata is passed back to user via  *	vxge_hal_channel_callback_f.  *  * HAL channel object.  *  * See also: vxge_hal_channel_type_e {}, vxge_hal_channel_flag_e  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|__hal_channel_t
block|{
name|vxge_list_t
name|item
decl_stmt|;
name|__hal_channel_type_e
name|type
decl_stmt|;
name|vxge_hal_device_h
name|devh
decl_stmt|;
name|pci_dev_h
name|pdev
decl_stmt|;
name|vxge_hal_vpath_h
name|vph
decl_stmt|;
name|u32
name|length
decl_stmt|;
name|u32
name|is_initd
decl_stmt|;
name|__hal_dtr_item_t
modifier|*
name|dtr_arr
decl_stmt|;
name|u32
name|compl_index
name|__vxge_os_attr_cacheline_aligned
decl_stmt|;
name|u32
name|reserve_index
name|__vxge_os_attr_cacheline_aligned
decl_stmt|;
name|spinlock_t
name|post_lock
decl_stmt|;
name|u32
name|poll_bytes
decl_stmt|;
name|u32
name|per_dtr_space
decl_stmt|;
name|vxge_hal_vpath_stats_sw_common_info_t
modifier|*
name|stats
decl_stmt|;
name|void
modifier|*
name|userdata
decl_stmt|;
block|}
name|__hal_channel_t
name|__vxge_os_attr_cacheline_aligned
typedef|;
end_typedef

begin_define
define|#
directive|define
name|__hal_channel_is_posted_dtr
parameter_list|(
name|channel
parameter_list|,
name|index
parameter_list|)
define|\
value|((channel)->dtr_arr[index].state == VXGE_HAL_CHANNEL_DTR_POSTED)
end_define

begin_define
define|#
directive|define
name|__hal_channel_for_each_posted_dtr
parameter_list|(
name|channel
parameter_list|,
name|dtrh
parameter_list|,
name|index
parameter_list|)
define|\
value|for (index = (channel)->compl_index,\ 	    dtrh = (channel)->dtr_arr[index].dtr; \ 	    (index< (channel)->reserve_index)&& \ 	    ((channel)->dtr_arr[index].state == VXGE_HAL_CHANNEL_DTR_POSTED); \ 	    index = (++index == (channel)->length)? 0 : index, \ 	    dtrh = (channel)->dtr_arr[index].dtr)
end_define

begin_define
define|#
directive|define
name|__hal_channel_for_each_dtr
parameter_list|(
name|channel
parameter_list|,
name|dtrh
parameter_list|,
name|index
parameter_list|)
define|\
value|for (index = 0, dtrh = (channel)->dtr_arr[index].dtr; \ 	    index< (channel)->length; \ 	    dtrh = ((++index == (channel)->length)? 0 : \ 	    (channel)->dtr_arr[index].dtr))
end_define

begin_define
define|#
directive|define
name|__hal_channel_free_dtr_count
parameter_list|(
name|channel
parameter_list|)
define|\
value|(((channel)->reserve_index< (channel)->compl_index) ?	\ 	((channel)->compl_index - (channel)->reserve_index) :	\ 	(((channel)->length - (channel)->reserve_index) + \ 	(channel)->reserve_index))
end_define

begin_comment
comment|/* ========================== CHANNEL PRIVATE API ========================= */
end_comment

begin_function_decl
name|__hal_channel_t
modifier|*
name|vxge_hal_channel_allocate
parameter_list|(
name|vxge_hal_device_h
name|devh
parameter_list|,
name|vxge_hal_vpath_h
name|vph
parameter_list|,
name|__hal_channel_type_e
name|type
parameter_list|,
name|u32
name|length
parameter_list|,
name|u32
name|per_dtr_space
parameter_list|,
name|void
modifier|*
name|userdata
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vxge_hal_channel_free
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|vxge_hal_channel_initialize
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|__hal_channel_reset
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vxge_hal_channel_terminate
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_channel_init_pending_list
parameter_list|(
name|vxge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_channel_insert_pending_list
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_channel_process_pending_list
parameter_list|(
name|vxge_hal_device_h
name|devhv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_channel_destroy_pending_list
parameter_list|(
name|vxge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|VXGE_DEBUG_FP
argument_list|)
operator|&&
operator|(
name|VXGE_DEBUG_FP
operator|&
name|VXGE_DEBUG_FP_CHANNEL
operator|)
end_if

begin_define
define|#
directive|define
name|__HAL_STATIC_CHANNEL
end_define

begin_define
define|#
directive|define
name|__HAL_INLINE_CHANNEL
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* VXGE_FASTPATH_EXTERN */
end_comment

begin_define
define|#
directive|define
name|__HAL_STATIC_CHANNEL
value|static
end_define

begin_define
define|#
directive|define
name|__HAL_INLINE_CHANNEL
value|inline
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* VXGE_FASTPATH_INLINE */
end_comment

begin_comment
comment|/* ========================== CHANNEL Fast Path API ========================= */
end_comment

begin_comment
comment|/*  * __hal_channel_dtr_reserve- Reserve a dtr from the channel  * @channelh: Channel  * @dtrh: Buffer to return the DTR pointer  *  * Reserve a dtr from the reserve array.  *  */
end_comment

begin_function
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|vxge_hal_status_e
comment|/* LINTED */
name|__hal_channel_dtr_reserve
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|,
name|__hal_dtr_h
modifier|*
name|dtrh
parameter_list|)
block|{
name|vxge_hal_status_e
name|status
init|=
name|VXGE_HAL_INF_OUT_OF_DESCRIPTORS
decl_stmt|;
operator|*
name|dtrh
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|channel
operator|->
name|dtr_arr
index|[
name|channel
operator|->
name|reserve_index
index|]
operator|.
name|state
operator|==
name|VXGE_HAL_CHANNEL_DTR_FREE
condition|)
block|{
operator|*
name|dtrh
operator|=
name|channel
operator|->
name|dtr_arr
index|[
name|channel
operator|->
name|reserve_index
index|]
operator|.
name|dtr
expr_stmt|;
name|channel
operator|->
name|dtr_arr
index|[
name|channel
operator|->
name|reserve_index
index|]
operator|.
name|state
operator|=
name|VXGE_HAL_CHANNEL_DTR_RESERVED
expr_stmt|;
if|if
condition|(
operator|++
name|channel
operator|->
name|reserve_index
operator|==
name|channel
operator|->
name|length
condition|)
name|channel
operator|->
name|reserve_index
operator|=
literal|0
expr_stmt|;
name|status
operator|=
name|VXGE_HAL_OK
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
operator|(
name|VXGE_COMPONENT_HAL_CHANNEL
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
name|__hal_device_t
modifier|*
name|hldev
init|=
operator|(
name|__hal_device_t
operator|*
operator|)
name|channel
operator|->
name|devh
decl_stmt|;
name|vxge_hal_info_log_channel
argument_list|(
literal|"channel %d is full!"
argument_list|,
name|channel
operator|->
name|type
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|channel
operator|->
name|stats
operator|->
name|full_cnt
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|status
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * __hal_channel_dtr_restore - Restores a dtr to the channel  * @channelh: Channel  * @dtr: DTR pointer  *  * Returns a dtr back to reserve array.  *  */
end_comment

begin_function
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
comment|/* LINTED */
name|__hal_channel_dtr_restore
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|,
name|__hal_dtr_h
name|dtrh
parameter_list|)
block|{
name|u32
name|dtr_index
decl_stmt|;
comment|/* 	 * restore a previously allocated dtrh at current offset and update 	 * the available reserve length accordingly. If dtrh is null just 	 * update the reserve length, only 	 */
if|if
condition|(
name|channel
operator|->
name|reserve_index
operator|==
literal|0
condition|)
name|dtr_index
operator|=
name|channel
operator|->
name|length
expr_stmt|;
else|else
name|dtr_index
operator|=
name|channel
operator|->
name|reserve_index
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|(
name|channel
operator|->
name|dtr_arr
index|[
name|dtr_index
index|]
operator|.
name|dtr
operator|=
name|dtrh
operator|)
operator|!=
name|NULL
condition|)
block|{
name|channel
operator|->
name|reserve_index
operator|=
name|dtr_index
expr_stmt|;
name|channel
operator|->
name|dtr_arr
index|[
name|dtr_index
index|]
operator|.
name|state
operator|=
name|VXGE_HAL_CHANNEL_DTR_FREE
expr_stmt|;
if|#
directive|if
operator|(
name|VXGE_COMPONENT_HAL_CHANNEL
operator|&
name|VXGE_DEBUG_MODULE_MASK
operator|)
name|__hal_device_t
modifier|*
name|hldev
init|=
operator|(
name|__hal_device_t
operator|*
operator|)
name|channel
operator|->
name|devh
decl_stmt|;
name|vxge_hal_info_log_channel
argument_list|(
literal|"dtrh 0x"
name|VXGE_OS_STXFMT
literal|" \ 		    restored for "
literal|"channel %d at reserve index %d, "
argument_list|,
operator|(
name|ptr_t
operator|)
name|dtrh
argument_list|,
name|channel
operator|->
name|type
argument_list|,
name|channel
operator|->
name|reserve_index
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function

begin_comment
comment|/*  * __hal_channel_dtr_post - Post a dtr to the channel  * @channelh: Channel  * @dtr: DTR pointer  *  * Posts a dtr to work array.  *  */
end_comment

begin_function
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
comment|/* LINTED */
name|__hal_channel_dtr_post
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|,
name|u32
name|dtr_index
parameter_list|)
block|{
name|channel
operator|->
name|dtr_arr
index|[
name|dtr_index
index|]
operator|.
name|state
operator|=
name|VXGE_HAL_CHANNEL_DTR_POSTED
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * __hal_channel_dtr_try_complete - Returns next completed dtr  * @channelh: Channel  * @dtr: Buffer to return the next completed DTR pointer  *  * Returns the next completed dtr with out removing it from work array  *  */
end_comment

begin_function
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
comment|/* LINTED */
name|__hal_channel_dtr_try_complete
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|,
name|__hal_dtr_h
modifier|*
name|dtrh
parameter_list|)
block|{
name|vxge_assert
argument_list|(
name|channel
operator|->
name|dtr_arr
argument_list|)
expr_stmt|;
name|vxge_assert
argument_list|(
name|channel
operator|->
name|compl_index
operator|<
name|channel
operator|->
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|channel
operator|->
name|dtr_arr
index|[
name|channel
operator|->
name|compl_index
index|]
operator|.
name|state
operator|==
name|VXGE_HAL_CHANNEL_DTR_POSTED
condition|)
operator|*
name|dtrh
operator|=
name|channel
operator|->
name|dtr_arr
index|[
name|channel
operator|->
name|compl_index
index|]
operator|.
name|dtr
expr_stmt|;
else|else
operator|*
name|dtrh
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * __hal_channel_dtr_complete - Removes next completed dtr from the work array  * @channelh: Channel  *  * Removes the next completed dtr from work array  *  */
end_comment

begin_function
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
comment|/* LINTED */
name|__hal_channel_dtr_complete
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|)
block|{
name|channel
operator|->
name|dtr_arr
index|[
name|channel
operator|->
name|compl_index
index|]
operator|.
name|state
operator|=
name|VXGE_HAL_CHANNEL_DTR_COMPLETED
expr_stmt|;
if|if
condition|(
operator|++
name|channel
operator|->
name|compl_index
operator|==
name|channel
operator|->
name|length
condition|)
name|channel
operator|->
name|compl_index
operator|=
literal|0
expr_stmt|;
name|channel
operator|->
name|stats
operator|->
name|total_compl_cnt
operator|++
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * __hal_channel_dtr_free - Frees a dtr  * @channelh: Channel  * @index:  Index of DTR  *  * Returns the dtr to free array  *  */
end_comment

begin_function
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
comment|/* LINTED */
name|__hal_channel_dtr_free
parameter_list|(
name|__hal_channel_t
modifier|*
name|channel
parameter_list|,
name|u32
name|dtr_index
parameter_list|)
block|{
name|channel
operator|->
name|dtr_arr
index|[
name|dtr_index
index|]
operator|.
name|state
operator|=
name|VXGE_HAL_CHANNEL_DTR_FREE
expr_stmt|;
block|}
end_function

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* VXGE_HAL_CHANNEL_H */
end_comment

end_unit

