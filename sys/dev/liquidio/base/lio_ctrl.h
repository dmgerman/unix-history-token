begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *   BSD LICENSE  *  *   Copyright(c) 2017 Cavium, Inc.. All rights reserved.  *   All rights reserved.  *  *   Redistribution and use in source and binary forms, with or without  *   modification, are permitted provided that the following conditions  *   are met:  *  *     * Redistributions of source code must retain the above copyright  *       notice, this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in  *       the documentation and/or other materials provided with the  *       distribution.  *     * Neither the name of Cavium, Inc. nor the names of its  *       contributors may be used to endorse or promote products derived  *       from this software without specific prior written permission.  *  *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  *   OWNER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_comment
comment|/*   \file lio_ctrl.h  *   \brief Host NIC Driver: Routine to send network data&  *   control packet to Octeon.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIO_CTRL_H__
end_ifndef

begin_define
define|#
directive|define
name|__LIO_CTRL_H__
end_define

begin_comment
comment|/* Maximum number of 8-byte words can be sent in a NIC control message. */
end_comment

begin_define
define|#
directive|define
name|LIO_MAX_NCTRL_UDD
value|32
end_define

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|lio_ctrl_pkt_cb_fn_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * Structure of control information passed by the NIC module to the OSI  * layer when sending control commands to Octeon device software.  */
end_comment

begin_struct
struct|struct
name|lio_ctrl_pkt
block|{
comment|/* Command to be passed to the Octeon device software. */
name|union
name|octeon_cmd
name|ncmd
decl_stmt|;
comment|/* Send buffer  */
name|void
modifier|*
name|data
decl_stmt|;
name|uint64_t
name|dmadata
decl_stmt|;
comment|/* Response buffer */
name|void
modifier|*
name|rdata
decl_stmt|;
name|uint64_t
name|dmardata
decl_stmt|;
comment|/* Additional data that may be needed by some commands. */
name|uint64_t
name|udd
index|[
name|LIO_MAX_NCTRL_UDD
index|]
decl_stmt|;
comment|/* Input queue to use to send this command. */
name|uint64_t
name|iq_no
decl_stmt|;
comment|/* 	 *  Time to wait for Octeon software to respond to this control command. 	 *  If wait_time is 0, OSI assumes no response is expected. 	 */
name|size_t
name|wait_time
decl_stmt|;
comment|/* The network device that issued the control command. */
name|struct
name|lio
modifier|*
name|lio
decl_stmt|;
comment|/* Callback function called when the command has been fetched */
name|lio_ctrl_pkt_cb_fn_t
name|cb_fn
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Structure of data information passed by the NIC module to the OSI  * layer when forwarding data to Octeon device software.  */
end_comment

begin_struct
struct|struct
name|lio_data_pkt
block|{
comment|/* 	 *  Pointer to information maintained by NIC module for this packet. The 	 *  OSI layer passes this as-is to the driver. 	 */
name|void
modifier|*
name|buf
decl_stmt|;
comment|/* Type of buffer passed in "buf" above. */
name|uint32_t
name|reqtype
decl_stmt|;
comment|/* Total data bytes to be transferred in this command. */
name|uint32_t
name|datasize
decl_stmt|;
comment|/* Command to be passed to the Octeon device software. */
name|union
name|lio_instr_64B
name|cmd
decl_stmt|;
comment|/* Input queue to use to send this command. */
name|uint32_t
name|q_no
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Structure passed by NIC module to OSI layer to prepare a command to send  * network data to Octeon.  */
end_comment

begin_union
union|union
name|lio_cmd_setup
block|{
struct|struct
block|{
name|uint32_t
name|iq_no
range|:
literal|8
decl_stmt|;
name|uint32_t
name|gather
range|:
literal|1
decl_stmt|;
name|uint32_t
name|timestamp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ip_csum
range|:
literal|1
decl_stmt|;
name|uint32_t
name|transport_csum
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tnl_csum
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rsvd
range|:
literal|19
decl_stmt|;
union|union
block|{
name|uint32_t
name|datasize
decl_stmt|;
name|uint32_t
name|gatherptrs
decl_stmt|;
block|}
name|u
union|;
block|}
name|s
struct|;
name|uint64_t
name|cmd_setup64
decl_stmt|;
block|}
union|;
end_union

begin_function
specifier|static
specifier|inline
name|int
name|lio_iq_is_full
parameter_list|(
name|struct
name|octeon_device
modifier|*
name|oct
parameter_list|,
name|uint32_t
name|q_no
parameter_list|)
block|{
return|return
operator|(
name|atomic_load_acq_int
argument_list|(
operator|&
name|oct
operator|->
name|instr_queue
index|[
name|q_no
index|]
operator|->
name|instr_pending
argument_list|)
operator|>=
operator|(
name|oct
operator|->
name|instr_queue
index|[
name|q_no
index|]
operator|->
name|max_count
operator|-
literal|2
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lio_prepare_pci_cmd_o3
parameter_list|(
name|struct
name|octeon_device
modifier|*
name|oct
parameter_list|,
name|union
name|lio_instr_64B
modifier|*
name|cmd
parameter_list|,
name|union
name|lio_cmd_setup
modifier|*
name|setup
parameter_list|,
name|uint32_t
name|tag
parameter_list|)
block|{
name|union
name|octeon_packet_params
name|packet_params
decl_stmt|;
name|struct
name|octeon_instr_irh
modifier|*
name|irh
decl_stmt|;
name|struct
name|octeon_instr_ih3
modifier|*
name|ih3
decl_stmt|;
name|struct
name|octeon_instr_pki_ih3
modifier|*
name|pki_ih3
decl_stmt|;
name|int
name|port
decl_stmt|;
name|bzero
argument_list|(
name|cmd
argument_list|,
sizeof|sizeof
argument_list|(
expr|union
name|lio_instr_64B
argument_list|)
argument_list|)
expr_stmt|;
name|ih3
operator|=
operator|(
expr|struct
name|octeon_instr_ih3
operator|*
operator|)
operator|&
name|cmd
operator|->
name|cmd3
operator|.
name|ih3
expr_stmt|;
name|pki_ih3
operator|=
operator|(
expr|struct
name|octeon_instr_pki_ih3
operator|*
operator|)
operator|&
name|cmd
operator|->
name|cmd3
operator|.
name|pki_ih3
expr_stmt|;
comment|/* 	 * assume that rflag is cleared so therefore front data will only have 	 * irh and ossp[1] and ossp[2] for a total of 24 bytes 	 */
name|ih3
operator|->
name|pkind
operator|=
name|oct
operator|->
name|instr_queue
index|[
name|setup
operator|->
name|s
operator|.
name|iq_no
index|]
operator|->
name|txpciq
operator|.
name|s
operator|.
name|pkind
expr_stmt|;
comment|/* PKI IH */
name|ih3
operator|->
name|fsz
operator|=
name|LIO_PCICMD_O3
expr_stmt|;
if|if
condition|(
operator|!
name|setup
operator|->
name|s
operator|.
name|gather
condition|)
block|{
name|ih3
operator|->
name|dlengsz
operator|=
name|setup
operator|->
name|s
operator|.
name|u
operator|.
name|datasize
expr_stmt|;
block|}
else|else
block|{
name|ih3
operator|->
name|gather
operator|=
literal|1
expr_stmt|;
name|ih3
operator|->
name|dlengsz
operator|=
name|setup
operator|->
name|s
operator|.
name|u
operator|.
name|gatherptrs
expr_stmt|;
block|}
name|pki_ih3
operator|->
name|w
operator|=
literal|1
expr_stmt|;
name|pki_ih3
operator|->
name|raw
operator|=
literal|0
expr_stmt|;
name|pki_ih3
operator|->
name|utag
operator|=
literal|0
expr_stmt|;
name|pki_ih3
operator|->
name|utt
operator|=
literal|1
expr_stmt|;
name|pki_ih3
operator|->
name|uqpg
operator|=
name|oct
operator|->
name|instr_queue
index|[
name|setup
operator|->
name|s
operator|.
name|iq_no
index|]
operator|->
name|txpciq
operator|.
name|s
operator|.
name|use_qpg
expr_stmt|;
name|port
operator|=
operator|(
name|int
operator|)
name|oct
operator|->
name|instr_queue
index|[
name|setup
operator|->
name|s
operator|.
name|iq_no
index|]
operator|->
name|txpciq
operator|.
name|s
operator|.
name|port
expr_stmt|;
if|if
condition|(
name|tag
condition|)
name|pki_ih3
operator|->
name|tag
operator|=
name|tag
expr_stmt|;
else|else
name|pki_ih3
operator|->
name|tag
operator|=
name|LIO_DATA
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|pki_ih3
operator|->
name|tagtype
operator|=
name|LIO_ORDERED_TAG
expr_stmt|;
name|pki_ih3
operator|->
name|qpg
operator|=
name|oct
operator|->
name|instr_queue
index|[
name|setup
operator|->
name|s
operator|.
name|iq_no
index|]
operator|->
name|txpciq
operator|.
name|s
operator|.
name|qpg
expr_stmt|;
name|pki_ih3
operator|->
name|pm
operator|=
literal|0x0
expr_stmt|;
comment|/* parse from L2 */
comment|/* sl will be sizeof(pki_ih3) + irh + ossp0 + ossp1 */
name|pki_ih3
operator|->
name|sl
operator|=
literal|32
expr_stmt|;
name|irh
operator|=
operator|(
expr|struct
name|octeon_instr_irh
operator|*
operator|)
operator|&
name|cmd
operator|->
name|cmd3
operator|.
name|irh
expr_stmt|;
name|irh
operator|->
name|opcode
operator|=
name|LIO_OPCODE_NIC
expr_stmt|;
name|irh
operator|->
name|subcode
operator|=
name|LIO_OPCODE_NIC_NW_DATA
expr_stmt|;
name|packet_params
operator|.
name|pkt_params32
operator|=
literal|0
expr_stmt|;
name|packet_params
operator|.
name|s
operator|.
name|ip_csum
operator|=
name|setup
operator|->
name|s
operator|.
name|ip_csum
expr_stmt|;
name|packet_params
operator|.
name|s
operator|.
name|transport_csum
operator|=
name|setup
operator|->
name|s
operator|.
name|transport_csum
expr_stmt|;
name|packet_params
operator|.
name|s
operator|.
name|tnl_csum
operator|=
name|setup
operator|->
name|s
operator|.
name|tnl_csum
expr_stmt|;
name|packet_params
operator|.
name|s
operator|.
name|tsflag
operator|=
name|setup
operator|->
name|s
operator|.
name|timestamp
expr_stmt|;
name|irh
operator|->
name|ossp
operator|=
name|packet_params
operator|.
name|pkt_params32
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Utility function to prepare a 64B NIC instruction based on a setup command  * @param oct - Pointer to current octeon device  * @param cmd - pointer to instruction to be filled in.  * @param setup - pointer to the setup structure  * @param q_no - which queue for back pressure  *  * Assumes the cmd instruction is pre-allocated, but no fields are filled in.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|lio_prepare_pci_cmd
parameter_list|(
name|struct
name|octeon_device
modifier|*
name|oct
parameter_list|,
name|union
name|lio_instr_64B
modifier|*
name|cmd
parameter_list|,
name|union
name|lio_cmd_setup
modifier|*
name|setup
parameter_list|,
name|uint32_t
name|tag
parameter_list|)
block|{
name|lio_prepare_pci_cmd_o3
argument_list|(
name|oct
argument_list|,
name|cmd
argument_list|,
name|setup
argument_list|,
name|tag
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Send a NIC data packet to the device  * @param oct - octeon device pointer  * @param ndata - control structure with queueing, and buffer information  *  * @returns LIO_IQ_FAILED if it failed to add to the input queue.  * LIO_IQ_STOP if it the queue should be stopped,  * and LIO_IQ_SEND_OK if it sent okay.  */
end_comment

begin_function_decl
name|int
name|lio_send_data_pkt
parameter_list|(
name|struct
name|octeon_device
modifier|*
name|oct
parameter_list|,
name|struct
name|lio_data_pkt
modifier|*
name|ndata
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Send a NIC control packet to the device  * @param oct - octeon device pointer  * @param nctrl - control structure with command, timeout, and callback info  * @returns IQ_FAILED if it failed to add to the input queue. IQ_STOP if it the  * queue should be stopped, and LIO_IQ_SEND_OK if it sent okay.  */
end_comment

begin_function_decl
name|int
name|lio_send_ctrl_pkt
parameter_list|(
name|struct
name|octeon_device
modifier|*
name|oct
parameter_list|,
name|struct
name|lio_ctrl_pkt
modifier|*
name|nctrl
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __LIO_CTRL_H__ */
end_comment

end_unit

