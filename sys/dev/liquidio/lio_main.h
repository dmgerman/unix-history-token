begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *   BSD LICENSE  *  *   Copyright(c) 2017 Cavium, Inc.. All rights reserved.  *   All rights reserved.  *  *   Redistribution and use in source and binary forms, with or without  *   modification, are permitted provided that the following conditions  *   are met:  *  *     * Redistributions of source code must retain the above copyright  *       notice, this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in  *       the documentation and/or other materials provided with the  *       distribution.  *     * Neither the name of Cavium, Inc. nor the names of its  *       contributors may be used to endorse or promote products derived  *       from this software without specific prior written permission.  *  *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  *   OWNER(S) OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_comment
comment|/*  *  \file lio_main.h  *  \brief Host Driver: This file is included by all host driver source files  *  to include common definitions.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIO_MAIN_H_
end_ifndef

begin_define
define|#
directive|define
name|_LIO_MAIN_H_
end_define

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|lio_hwlro
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__LP64__
end_ifdef

begin_define
define|#
directive|define
name|LIO_CAST64
parameter_list|(
name|v
parameter_list|)
value|((long long)(long)(v))
end_define

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
literal|"Unknown system architecture"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|LIO_DRV_NAME
value|"lio"
end_define

begin_comment
comment|/** Swap 8B blocks */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|lio_swap_8B_data
parameter_list|(
name|uint64_t
modifier|*
name|data
parameter_list|,
name|uint32_t
name|blocks
parameter_list|)
block|{
while|while
condition|(
name|blocks
condition|)
block|{
operator|*
name|data
operator|=
name|htobe64
argument_list|(
operator|*
name|data
argument_list|)
expr_stmt|;
name|blocks
operator|--
expr_stmt|;
name|data
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * \brief unmaps a PCI BAR  * @param oct Pointer to Octeon device  * @param baridx bar index  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|lio_unmap_pci_barx
parameter_list|(
name|struct
name|octeon_device
modifier|*
name|oct
parameter_list|,
name|int
name|baridx
parameter_list|)
block|{
name|lio_dev_dbg
argument_list|(
name|oct
argument_list|,
literal|"Freeing PCI mapped regions for Bar%d\n"
argument_list|,
name|baridx
argument_list|)
expr_stmt|;
if|if
condition|(
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|pci_mem
operator|!=
name|NULL
condition|)
block|{
name|bus_release_resource
argument_list|(
name|oct
operator|->
name|device
argument_list|,
name|SYS_RES_MEMORY
argument_list|,
name|PCIR_BAR
argument_list|(
name|baridx
operator|*
literal|2
argument_list|)
argument_list|,
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|pci_mem
argument_list|)
expr_stmt|;
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|pci_mem
operator|=
name|NULL
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * \brief maps a PCI BAR  * @param oct Pointer to Octeon device  * @param baridx bar index  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|lio_map_pci_barx
parameter_list|(
name|struct
name|octeon_device
modifier|*
name|oct
parameter_list|,
name|int
name|baridx
parameter_list|)
block|{
name|int
name|rid
init|=
name|PCIR_BAR
argument_list|(
name|baridx
operator|*
literal|2
argument_list|)
decl_stmt|;
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|pci_mem
operator|=
name|bus_alloc_resource_any
argument_list|(
name|oct
operator|->
name|device
argument_list|,
name|SYS_RES_MEMORY
argument_list|,
operator|&
name|rid
argument_list|,
name|RF_ACTIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|pci_mem
operator|==
name|NULL
condition|)
block|{
name|lio_dev_err
argument_list|(
name|oct
argument_list|,
literal|"Unable to allocate bus resource: memory\n"
argument_list|)
expr_stmt|;
return|return
operator|(
name|ENXIO
operator|)
return|;
block|}
comment|/* Save bus_space values for READ/WRITE_REG macros */
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|tag
operator|=
name|rman_get_bustag
argument_list|(
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|pci_mem
argument_list|)
expr_stmt|;
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|handle
operator|=
name|rman_get_bushandle
argument_list|(
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|pci_mem
argument_list|)
expr_stmt|;
name|lio_dev_dbg
argument_list|(
name|oct
argument_list|,
literal|"BAR%d Tag 0x%lx Handle 0x%lx\n"
argument_list|,
name|baridx
argument_list|,
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|tag
argument_list|,
name|oct
operator|->
name|mem_bus_space
index|[
name|baridx
index|]
operator|.
name|handle
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lio_sleep_cond
parameter_list|(
name|struct
name|octeon_device
modifier|*
name|oct
parameter_list|,
specifier|volatile
name|int
modifier|*
name|condition
parameter_list|)
block|{
while|while
condition|(
operator|!
operator|(
operator|*
name|condition
operator|)
condition|)
block|{
name|lio_mdelay
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lio_flush_iq
argument_list|(
name|oct
argument_list|,
name|oct
operator|->
name|instr_queue
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lio_process_ordered_list
argument_list|(
name|oct
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function_decl
name|int
name|lio_console_debug_enabled
parameter_list|(
name|uint32_t
name|console
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|ROUNDUP4
end_ifndef

begin_define
define|#
directive|define
name|ROUNDUP4
parameter_list|(
name|val
parameter_list|)
value|(((val) + 3)& 0xfffffffc)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|ROUNDUP8
end_ifndef

begin_define
define|#
directive|define
name|ROUNDUP8
parameter_list|(
name|val
parameter_list|)
value|(((val) + 7)& 0xfffffff8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|BIT_ULL
parameter_list|(
name|nr
parameter_list|)
value|(1ULL<< (nr))
end_define

begin_function_decl
name|void
name|lio_free_mbuf
parameter_list|(
name|struct
name|lio_instr_queue
modifier|*
name|iq
parameter_list|,
name|struct
name|lio_mbuf_free_info
modifier|*
name|finfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lio_free_sgmbuf
parameter_list|(
name|struct
name|lio_instr_queue
modifier|*
name|iq
parameter_list|,
name|struct
name|lio_mbuf_free_info
modifier|*
name|finfo
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIO_MAIN_H_ */
end_comment

end_unit

