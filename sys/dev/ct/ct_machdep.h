begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*	$NecBSD: ct_machdep.h,v 1.4 1999/07/23 20:54:00 honda Exp $	*/
end_comment

begin_comment
comment|/*	$NetBSD$	*/
end_comment

begin_comment
comment|/*  * [NetBSD for NEC PC-98 series]  *  Copyright (c) 1995, 1996, 1997, 1998  *	NetBSD/pc98 porting staff. All rights reserved.  *  Copyright (c) 1995, 1996, 1997, 1998  *	Naofumi HONDA. All rights reserved.  *   *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  3. The name of the author may not be used to endorse or promote products  *     derived from this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CT_MACHDEP_H_
end_ifndef

begin_define
define|#
directive|define
name|_CT_MACHDEP_H_
end_define

begin_comment
comment|/*  * Principal rules:   * 1) do not use bus_space_write/read_X directly in ct.c.  * 2) do not use port offset defs directly in ct.c.  */
end_comment

begin_comment
comment|/* special weight if requried */
end_comment

begin_define
define|#
directive|define
name|CT_BUS_WEIGHT
end_define

begin_comment
comment|/* port offset */
end_comment

begin_define
define|#
directive|define
name|addr_port
value|0
end_define

begin_define
define|#
directive|define
name|stat_port
value|0
end_define

begin_define
define|#
directive|define
name|ctrl_port
value|2
end_define

begin_define
define|#
directive|define
name|cmd_port
value|4
end_define

begin_comment
comment|/*  * All port accesses primitive methods  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|u_int8_t
name|ct_cr_read_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_addr_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|ct_cr_write_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_addr_t
operator|,
name|u_int8_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|ct_write_cmds
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|u_int8_t
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|u_int
name|cthw_get_count
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|cthw_set_count
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|ct_stat_read_1
parameter_list|(
name|bst
parameter_list|,
name|bsh
parameter_list|)
value|bus_space_read_1((bst), (bsh), stat_port)
end_define

begin_function
specifier|static
name|__inline
name|void
name|cthw_set_count
parameter_list|(
name|bst
parameter_list|,
name|bsh
parameter_list|,
name|count
parameter_list|)
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|u_int
name|count
decl_stmt|;
block|{
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|addr_port
argument_list|,
name|wd3s_cnt
argument_list|)
expr_stmt|;
name|CT_BUS_WEIGHT
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|ctrl_port
argument_list|,
name|count
operator|>>
literal|16
argument_list|)
decl_stmt|;
name|CT_BUS_WEIGHT
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|ctrl_port
argument_list|,
name|count
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|CT_BUS_WEIGHT
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|ctrl_port
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|CT_BUS_WEIGHT
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int
name|cthw_get_count
parameter_list|(
name|bst
parameter_list|,
name|bsh
parameter_list|)
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
block|{
name|u_int
name|count
decl_stmt|;
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|addr_port
argument_list|,
name|wd3s_cnt
argument_list|)
expr_stmt|;
name|CT_BUS_WEIGHT
name|count
init|=
operator|(
operator|(
operator|(
name|u_int
operator|)
name|bus_space_read_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|ctrl_port
argument_list|)
operator|)
operator|<<
literal|16
operator|)
decl_stmt|;
name|CT_BUS_WEIGHT
name|count
operator|+=
operator|(
operator|(
operator|(
name|u_int
operator|)
name|bus_space_read_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|ctrl_port
argument_list|)
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
name|CT_BUS_WEIGHT
name|count
operator|+=
operator|(
operator|(
name|u_int
operator|)
name|bus_space_read_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|ctrl_port
argument_list|)
operator|)
expr_stmt|;
name|CT_BUS_WEIGHT
return|return
name|count
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ct_write_cmds
parameter_list|(
name|bst
parameter_list|,
name|bsh
parameter_list|,
name|cmd
parameter_list|,
name|len
parameter_list|)
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|u_int8_t
modifier|*
name|cmd
decl_stmt|;
name|int
name|len
decl_stmt|;
block|{
name|int
name|i
decl_stmt|;
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|addr_port
argument_list|,
name|wd3s_cdb
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|ctrl_port
argument_list|,
name|cmd
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int8_t
name|ct_cr_read_1
parameter_list|(
name|bst
parameter_list|,
name|bsh
parameter_list|,
name|offs
parameter_list|)
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|bus_addr_t
name|offs
decl_stmt|;
block|{
name|u_int8_t
name|regv
decl_stmt|;
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|addr_port
argument_list|,
name|offs
argument_list|)
expr_stmt|;
name|CT_BUS_WEIGHT
name|regv
init|=
name|bus_space_read_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|ctrl_port
argument_list|)
decl_stmt|;
name|CT_BUS_WEIGHT
return|return
name|regv
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ct_cr_write_1
parameter_list|(
name|bst
parameter_list|,
name|bsh
parameter_list|,
name|offs
parameter_list|,
name|val
parameter_list|)
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|bus_addr_t
name|offs
decl_stmt|;
name|u_int8_t
name|val
decl_stmt|;
block|{
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|addr_port
argument_list|,
name|offs
argument_list|)
expr_stmt|;
name|CT_BUS_WEIGHT
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
name|ctrl_port
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|CT_BUS_WEIGHT
block|}
end_function

begin_if
if|#
directive|if
name|defined
argument_list|(
name|i386
argument_list|)
end_if

begin_define
define|#
directive|define
name|SOFT_INTR_REQUIRED
parameter_list|(
name|slp
parameter_list|)
value|(softintr((slp)->sl_irq))
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !i386 */
end_comment

begin_define
define|#
directive|define
name|SOFT_INTR_REQUIRED
parameter_list|(
name|slp
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !i386 */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|vaddr_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|delay
parameter_list|(
name|t
parameter_list|)
value|DELAY(t)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_CT_MACHDEP_H_ */
end_comment

end_unit

