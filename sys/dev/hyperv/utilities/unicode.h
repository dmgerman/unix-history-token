begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $NetBSD: unicode.h,v 1.1.1.1 2007/03/06 00:10:39 dillo Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2007 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Dieter Baron.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_define
define|#
directive|define
name|UNICODE_DECOMPOSE
value|0x01
end_define

begin_define
define|#
directive|define
name|UNICODE_PRECOMPOSE
value|0x02
end_define

begin_define
define|#
directive|define
name|UNICODE_UTF8_LATIN1_FALLBACK
value|0x03
end_define

begin_function_decl
name|size_t
name|utf8_to_utf16
parameter_list|(
name|uint16_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|utf16_to_utf8
parameter_list|(
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|uint16_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|size_t
name|utf8_to_utf16
parameter_list|(
name|uint16_t
modifier|*
name|dst
parameter_list|,
name|size_t
name|dst_len
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|size_t
name|src_len
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
modifier|*
name|errp
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|s
decl_stmt|;
name|size_t
name|spos
decl_stmt|,
name|dpos
decl_stmt|;
name|int
name|error
decl_stmt|;
name|uint16_t
name|c
decl_stmt|;
define|#
directive|define
name|IS_CONT
parameter_list|(
name|c
parameter_list|)
value|(((c)&0xc0) == 0x80)
name|error
operator|=
literal|0
expr_stmt|;
name|s
operator|=
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|src
expr_stmt|;
name|spos
operator|=
name|dpos
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|spos
operator|<
name|src_len
condition|)
block|{
if|if
condition|(
name|s
index|[
name|spos
index|]
operator|<
literal|0x80
condition|)
name|c
operator|=
name|s
index|[
name|spos
operator|++
index|]
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|UNICODE_UTF8_LATIN1_FALLBACK
operator|)
operator|&&
operator|(
name|spos
operator|>=
name|src_len
operator|||
operator|!
name|IS_CONT
argument_list|(
name|s
index|[
name|spos
operator|+
literal|1
index|]
argument_list|)
operator|)
operator|&&
name|s
index|[
name|spos
index|]
operator|>=
literal|0xa0
condition|)
block|{
comment|/* not valid UTF-8, assume ISO 8859-1 */
name|c
operator|=
name|s
index|[
name|spos
operator|++
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
index|[
name|spos
index|]
operator|<
literal|0xc0
operator|||
name|s
index|[
name|spos
index|]
operator|>=
literal|0xf5
condition|)
block|{
comment|/* continuation byte without lead byte 	       or lead byte for codepoint above 0x10ffff */
name|error
operator|++
expr_stmt|;
name|spos
operator|++
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|s
index|[
name|spos
index|]
operator|<
literal|0xe0
condition|)
block|{
if|if
condition|(
name|spos
operator|>=
name|src_len
operator|||
operator|!
name|IS_CONT
argument_list|(
name|s
index|[
name|spos
operator|+
literal|1
index|]
argument_list|)
condition|)
block|{
name|spos
operator|++
expr_stmt|;
name|error
operator|++
expr_stmt|;
continue|continue;
block|}
name|c
operator|=
operator|(
operator|(
name|s
index|[
name|spos
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|s
index|[
name|spos
operator|+
literal|1
index|]
operator|&
literal|0x3f
operator|)
expr_stmt|;
name|spos
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|c
operator|<
literal|0x80
condition|)
block|{
comment|/* overlong encoding */
name|error
operator|++
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|s
index|[
name|spos
index|]
operator|<
literal|0xf0
condition|)
block|{
if|if
condition|(
name|spos
operator|>=
name|src_len
operator|-
literal|2
operator|||
operator|!
name|IS_CONT
argument_list|(
name|s
index|[
name|spos
operator|+
literal|1
index|]
argument_list|)
operator|||
operator|!
name|IS_CONT
argument_list|(
name|s
index|[
name|spos
operator|+
literal|2
index|]
argument_list|)
condition|)
block|{
name|spos
operator|++
expr_stmt|;
name|error
operator|++
expr_stmt|;
continue|continue;
block|}
name|c
operator|=
operator|(
operator|(
name|s
index|[
name|spos
index|]
operator|&
literal|0x0f
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|s
index|[
name|spos
operator|+
literal|1
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|s
index|[
name|spos
operator|+
literal|2
index|]
operator|&
literal|0x3f
operator|)
expr_stmt|;
name|spos
operator|+=
literal|3
expr_stmt|;
if|if
condition|(
name|c
operator|<
literal|0x800
operator|||
operator|(
name|c
operator|&
literal|0xdf00
operator|)
operator|==
literal|0xd800
condition|)
block|{
comment|/* overlong encoding or encoded surrogate */
name|error
operator|++
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
name|uint32_t
name|cc
decl_stmt|;
comment|/* UTF-16 surrogate pair */
if|if
condition|(
name|spos
operator|>=
name|src_len
operator|-
literal|3
operator|||
operator|!
name|IS_CONT
argument_list|(
name|s
index|[
name|spos
operator|+
literal|1
index|]
argument_list|)
operator|||
operator|!
name|IS_CONT
argument_list|(
name|s
index|[
name|spos
operator|+
literal|2
index|]
argument_list|)
operator|||
operator|!
name|IS_CONT
argument_list|(
name|s
index|[
name|spos
operator|+
literal|3
index|]
argument_list|)
condition|)
block|{
name|spos
operator|++
expr_stmt|;
name|error
operator|++
expr_stmt|;
continue|continue;
block|}
name|cc
operator|=
operator|(
operator|(
name|s
index|[
name|spos
index|]
operator|&
literal|0x03
operator|)
operator|<<
literal|18
operator|)
operator||
operator|(
operator|(
name|s
index|[
name|spos
operator|+
literal|1
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|s
index|[
name|spos
operator|+
literal|2
index|]
operator|&
literal|0x3f
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|s
index|[
name|spos
operator|+
literal|3
index|]
operator|&
literal|0x3f
operator|)
expr_stmt|;
name|spos
operator|+=
literal|4
expr_stmt|;
if|if
condition|(
name|cc
operator|<
literal|0x10000
condition|)
block|{
comment|/* overlong encoding */
name|error
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|dst
operator|&&
name|dpos
operator|<
name|dst_len
condition|)
name|dst
index|[
name|dpos
index|]
operator|=
operator|(
literal|0xd800
operator||
operator|(
operator|(
name|cc
operator|-
literal|0x10000
operator|)
operator|>>
literal|10
operator|)
operator|)
expr_stmt|;
name|dpos
operator|++
expr_stmt|;
name|c
operator|=
literal|0xdc00
operator||
operator|(
operator|(
name|cc
operator|-
literal|0x10000
operator|)
operator|&
literal|0x3ffff
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|dst
operator|&&
name|dpos
operator|<
name|dst_len
condition|)
name|dst
index|[
name|dpos
index|]
operator|=
name|c
expr_stmt|;
name|dpos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|errp
condition|)
operator|*
name|errp
operator|=
name|error
expr_stmt|;
return|return
name|dpos
return|;
undef|#
directive|undef
name|IS_CONT
block|}
end_function

begin_function
name|size_t
name|utf16_to_utf8
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
name|size_t
name|dst_len
parameter_list|,
specifier|const
name|uint16_t
modifier|*
name|src
parameter_list|,
name|size_t
name|src_len
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
modifier|*
name|errp
parameter_list|)
block|{
name|uint16_t
name|spos
decl_stmt|,
name|dpos
decl_stmt|;
name|int
name|error
decl_stmt|;
define|#
directive|define
name|CHECK_LENGTH
parameter_list|(
name|l
parameter_list|)
value|(dpos> dst_len-(l) ? dst=NULL : NULL)
define|#
directive|define
name|ADD_BYTE
parameter_list|(
name|b
parameter_list|)
value|(dst ? dst[dpos] = (b) : 0, dpos++)
name|error
operator|=
literal|0
expr_stmt|;
name|dpos
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|spos
operator|=
literal|0
init|;
name|spos
operator|<
name|src_len
condition|;
name|spos
operator|++
control|)
block|{
if|if
condition|(
name|src
index|[
name|spos
index|]
operator|<
literal|0x80
condition|)
block|{
name|CHECK_LENGTH
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ADD_BYTE
argument_list|(
name|src
index|[
name|spos
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|src
index|[
name|spos
index|]
operator|<
literal|0x800
condition|)
block|{
name|CHECK_LENGTH
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ADD_BYTE
argument_list|(
literal|0xc0
operator||
operator|(
name|src
index|[
name|spos
index|]
operator|>>
literal|6
operator|)
argument_list|)
expr_stmt|;
name|ADD_BYTE
argument_list|(
literal|0x80
operator||
operator|(
name|src
index|[
name|spos
index|]
operator|&
literal|0x3f
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|src
index|[
name|spos
index|]
operator|&
literal|0xdc00
operator|)
operator|==
literal|0xd800
condition|)
block|{
name|uint32_t
name|c
decl_stmt|;
comment|/* first surrogate */
if|if
condition|(
name|spos
operator|==
name|src_len
operator|-
literal|1
operator|||
operator|(
name|src
index|[
name|spos
index|]
operator|&
literal|0xdc00
operator|)
operator|!=
literal|0xdc00
condition|)
block|{
comment|/* no second surrogate present */
name|error
operator|++
expr_stmt|;
continue|continue;
block|}
name|spos
operator|++
expr_stmt|;
name|CHECK_LENGTH
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|c
operator|=
operator|(
operator|(
operator|(
name|src
index|[
name|spos
index|]
operator|&
literal|0x3ff
operator|)
operator|<<
literal|10
operator|)
operator||
operator|(
name|src
index|[
name|spos
operator|+
literal|1
index|]
operator|&
literal|0x3ff
operator|)
operator|)
operator|+
literal|0x10000
expr_stmt|;
name|ADD_BYTE
argument_list|(
literal|0xf0
operator||
operator|(
name|c
operator|>>
literal|18
operator|)
argument_list|)
expr_stmt|;
name|ADD_BYTE
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|c
operator|>>
literal|12
operator|)
operator|&
literal|0x3f
operator|)
argument_list|)
expr_stmt|;
name|ADD_BYTE
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|c
operator|>>
literal|6
operator|)
operator|&
literal|0x3f
operator|)
argument_list|)
expr_stmt|;
name|ADD_BYTE
argument_list|(
literal|0x80
operator||
operator|(
name|c
operator|&
literal|0x3f
operator|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|src
index|[
name|spos
index|]
operator|&
literal|0xdc00
operator|)
operator|==
literal|0xdc00
condition|)
block|{
comment|/* second surrogate without preceding first surrogate */
name|error
operator|++
expr_stmt|;
block|}
else|else
block|{
name|CHECK_LENGTH
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ADD_BYTE
argument_list|(
literal|0xe0
operator||
name|src
index|[
name|spos
index|]
operator|>>
literal|12
argument_list|)
expr_stmt|;
name|ADD_BYTE
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|src
index|[
name|spos
index|]
operator|>>
literal|6
operator|)
operator|&
literal|0x3f
operator|)
argument_list|)
expr_stmt|;
name|ADD_BYTE
argument_list|(
literal|0x80
operator||
operator|(
name|src
index|[
name|spos
index|]
operator|&
literal|0x3f
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|errp
condition|)
operator|*
name|errp
operator|=
name|error
expr_stmt|;
return|return
name|dpos
return|;
undef|#
directive|undef
name|ADD_BYTE
undef|#
directive|undef
name|CHECK_LENGTH
block|}
end_function

end_unit

