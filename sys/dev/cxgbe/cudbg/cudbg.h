begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2017 Chelsio Communications, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_comment
comment|/*  * Chelsio Unified Debug Interface header file.  * Version 1.1  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CUDBG_IF_H_
end_ifndef

begin_define
define|#
directive|define
name|_CUDBG_IF_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_define
define|#
directive|define
name|ATTRIBUTE_UNUSED
value|__attribute__ ((unused))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ATTRIBUTE_UNUSED
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_CUDBG_DEBUG
argument_list|)
end_if

begin_define
define|#
directive|define
name|cudbg_debug
parameter_list|(
name|pdbg_init
parameter_list|,
name|format
parameter_list|,
modifier|...
parameter_list|)
value|do {\ 	pdbg_init->print(format, ##__VA_ARGS__); \ } while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|cudbg_debug
parameter_list|(
name|pdbg_init
parameter_list|,
name|format
parameter_list|,
modifier|...
parameter_list|)
value|do { } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|OUT
end_define

begin_define
define|#
directive|define
name|IN
end_define

begin_define
define|#
directive|define
name|INOUT
end_define

begin_comment
comment|/* Error codes */
end_comment

begin_define
define|#
directive|define
name|CUDBG_STATUS_SUCCESS
value|0
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_NOSPACE
value|-2
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_FLASH_WRITE_FAIL
value|-3
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_FLASH_READ_FAIL
value|-4
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_UNDEFINED_OUT_BUF
value|-5
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_UNDEFINED_CBFN
value|-6
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_UNDEFINED_PRINTF_CBFN
value|-7
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_ADAP_INVALID
value|-8
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_FLASH_EMPTY
value|-9
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_NO_ADAPTER
value|-10
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_NO_SIGNATURE
value|-11
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_MULTIPLE_REG
value|-12
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_UNREGISTERED
value|-13
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_UNDEFINED_ENTITY
value|-14
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_REG_FAIlED
value|-15
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_DEVLOG_FAILED
value|-16
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_SMALL_BUFF
value|-17
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_CHKSUM_MISSMATCH
value|-18
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_NO_SCRATCH_MEM
value|-19
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_OUTBUFF_OVERFLOW
value|-20
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_INVALID_BUFF
value|-21
end_define

begin_comment
comment|/* Invalid magic */
end_comment

begin_define
define|#
directive|define
name|CUDBG_STATUS_FILE_OPEN_FAIL
value|-22
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_DEVLOG_INT_FAIL
value|-23
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_ENTITY_NOT_FOUND
value|-24
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_DECOMPRESS_FAIL
value|-25
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_BUFFER_SHORT
value|-26
end_define

begin_define
define|#
directive|define
name|CUDBG_METADATA_VERSION_MISMATCH
value|-27
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_NOT_IMPLEMENTED
value|-28
end_define

begin_define
define|#
directive|define
name|CUDBG_SYSTEM_ERROR
value|-29
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_MMAP_FAILED
value|-30
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_FILE_WRITE_FAILED
value|-31
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_CCLK_NOT_DEFINED
value|-32
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_FLASH_FULL
value|-33
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_SECTOR_EMPTY
value|-34
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_ENTITY_NOT_REQUESTED
value|-35
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_NOT_SUPPORTED
value|-36
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_FILE_READ_FAILED
value|-37
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_CORRUPTED
value|-38
end_define

begin_define
define|#
directive|define
name|CUDBG_STATUS_INVALID_INDEX
value|-39
end_define

begin_define
define|#
directive|define
name|CUDBG_MAJOR_VERSION
value|1
end_define

begin_define
define|#
directive|define
name|CUDBG_MINOR_VERSION
value|14
end_define

begin_define
define|#
directive|define
name|CUDBG_BUILD_VERSION
value|0
end_define

begin_define
define|#
directive|define
name|CUDBG_FILE_NAME_LEN
value|256
end_define

begin_define
define|#
directive|define
name|CUDBG_DIR_NAME_LEN
value|256
end_define

begin_define
define|#
directive|define
name|CUDBG_MAX_BITMAP_LEN
value|16
end_define

begin_decl_stmt
specifier|static
name|char
name|ATTRIBUTE_UNUSED
modifier|*
name|err_msg
index|[]
init|=
block|{
literal|"Success"
block|,
literal|"Unknown"
block|,
literal|"No space"
block|,
literal|"Flash write fail"
block|,
literal|"Flash read fail"
block|,
literal|"Undefined out buf"
block|,
literal|"Callback function undefined"
block|,
literal|"Print callback function undefined"
block|,
literal|"ADAP invalid"
block|,
literal|"Flash empty"
block|,
literal|"No adapter"
block|,
literal|"No signature"
block|,
literal|"Multiple registration"
block|,
literal|"Unregistered"
block|,
literal|"Undefined entity"
block|,
literal|"Reg failed"
block|,
literal|"Devlog failed"
block|,
literal|"Small buff"
block|,
literal|"Checksum mismatch"
block|,
literal|"No scratch memory"
block|,
literal|"Outbuff overflow"
block|,
literal|"Invalid buffer"
block|,
literal|"File open fail"
block|,
literal|"Devlog int fail"
block|,
literal|"Entity not found"
block|,
literal|"Decompress fail"
block|,
literal|"Buffer short"
block|,
literal|"Version mismatch"
block|,
literal|"Not implemented"
block|,
literal|"System error"
block|,
literal|"Mmap failed"
block|,
literal|"File write failed"
block|,
literal|"cclk not defined"
block|,
literal|"Flash full"
block|,
literal|"Sector empty"
block|,
literal|"Entity not requested"
block|,
literal|"Not supported"
block|,
literal|"File read fail"
block|,
literal|"Corrupted"
block|,
literal|"Invalid Index"
block|}
decl_stmt|;
end_decl_stmt

begin_enum
enum|enum
name|CUDBG_DBG_ENTITY_TYPE
block|{
name|CUDBG_ALL
init|=
literal|0
block|,
name|CUDBG_REG_DUMP
init|=
literal|1
block|,
name|CUDBG_DEV_LOG
init|=
literal|2
block|,
name|CUDBG_CIM_LA
init|=
literal|3
block|,
name|CUDBG_CIM_MA_LA
init|=
literal|4
block|,
name|CUDBG_CIM_QCFG
init|=
literal|5
block|,
name|CUDBG_CIM_IBQ_TP0
init|=
literal|6
block|,
name|CUDBG_CIM_IBQ_TP1
init|=
literal|7
block|,
name|CUDBG_CIM_IBQ_ULP
init|=
literal|8
block|,
name|CUDBG_CIM_IBQ_SGE0
init|=
literal|9
block|,
name|CUDBG_CIM_IBQ_SGE1
init|=
literal|10
block|,
name|CUDBG_CIM_IBQ_NCSI
init|=
literal|11
block|,
name|CUDBG_CIM_OBQ_ULP0
init|=
literal|12
block|,
name|CUDBG_CIM_OBQ_ULP1
init|=
literal|13
block|,
name|CUDBG_CIM_OBQ_ULP2
init|=
literal|14
block|,
name|CUDBG_CIM_OBQ_ULP3
init|=
literal|15
block|,
name|CUDBG_CIM_OBQ_SGE
init|=
literal|16
block|,
name|CUDBG_CIM_OBQ_NCSI
init|=
literal|17
block|,
name|CUDBG_EDC0
init|=
literal|18
block|,
name|CUDBG_EDC1
init|=
literal|19
block|,
name|CUDBG_MC0
init|=
literal|20
block|,
name|CUDBG_MC1
init|=
literal|21
block|,
name|CUDBG_RSS
init|=
literal|22
block|,
name|CUDBG_RSS_PF_CONF
init|=
literal|23
block|,
name|CUDBG_RSS_KEY
init|=
literal|24
block|,
name|CUDBG_RSS_VF_CONF
init|=
literal|25
block|,
name|CUDBG_RSS_CONF
init|=
literal|26
block|,
name|CUDBG_PATH_MTU
init|=
literal|27
block|,
name|CUDBG_SW_STATE
init|=
literal|28
block|,
name|CUDBG_WTP
init|=
literal|29
block|,
name|CUDBG_PM_STATS
init|=
literal|30
block|,
name|CUDBG_HW_SCHED
init|=
literal|31
block|,
name|CUDBG_TCP_STATS
init|=
literal|32
block|,
name|CUDBG_TP_ERR_STATS
init|=
literal|33
block|,
name|CUDBG_FCOE_STATS
init|=
literal|34
block|,
name|CUDBG_RDMA_STATS
init|=
literal|35
block|,
name|CUDBG_TP_INDIRECT
init|=
literal|36
block|,
name|CUDBG_SGE_INDIRECT
init|=
literal|37
block|,
name|CUDBG_CPL_STATS
init|=
literal|38
block|,
name|CUDBG_DDP_STATS
init|=
literal|39
block|,
name|CUDBG_WC_STATS
init|=
literal|40
block|,
name|CUDBG_ULPRX_LA
init|=
literal|41
block|,
name|CUDBG_LB_STATS
init|=
literal|42
block|,
name|CUDBG_TP_LA
init|=
literal|43
block|,
name|CUDBG_MEMINFO
init|=
literal|44
block|,
name|CUDBG_CIM_PIF_LA
init|=
literal|45
block|,
name|CUDBG_CLK
init|=
literal|46
block|,
name|CUDBG_CIM_OBQ_RXQ0
init|=
literal|47
block|,
name|CUDBG_CIM_OBQ_RXQ1
init|=
literal|48
block|,
name|CUDBG_MAC_STATS
init|=
literal|49
block|,
name|CUDBG_PCIE_INDIRECT
init|=
literal|50
block|,
name|CUDBG_PM_INDIRECT
init|=
literal|51
block|,
name|CUDBG_FULL
init|=
literal|52
block|,
name|CUDBG_TX_RATE
init|=
literal|53
block|,
name|CUDBG_TID_INFO
init|=
literal|54
block|,
name|CUDBG_PCIE_CONFIG
init|=
literal|55
block|,
name|CUDBG_DUMP_CONTEXT
init|=
literal|56
block|,
name|CUDBG_MPS_TCAM
init|=
literal|57
block|,
name|CUDBG_VPD_DATA
init|=
literal|58
block|,
name|CUDBG_LE_TCAM
init|=
literal|59
block|,
name|CUDBG_CCTRL
init|=
literal|60
block|,
name|CUDBG_MA_INDIRECT
init|=
literal|61
block|,
name|CUDBG_ULPTX_LA
init|=
literal|62
block|,
name|CUDBG_EXT_ENTITY
init|=
literal|63
block|,
name|CUDBG_UP_CIM_INDIRECT
init|=
literal|64
block|,
name|CUDBG_PBT_TABLE
init|=
literal|65
block|,
name|CUDBG_MBOX_LOG
init|=
literal|66
block|,
name|CUDBG_HMA_INDIRECT
init|=
literal|67
block|,
name|CUDBG_MAX_ENTITY
init|=
literal|68
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|ENTITY_FLAG_NULL
value|0
end_define

begin_define
define|#
directive|define
name|ENTITY_FLAG_REGISTER
value|1
end_define

begin_define
define|#
directive|define
name|ENTITY_FLAG_BINARY
value|2
end_define

begin_define
define|#
directive|define
name|ENTITY_FLAG_FW_NO_ATTACH
value|3
end_define

begin_comment
comment|/* file_name matches Linux cxgb4 debugfs entry names. */
end_comment

begin_struct
struct|struct
name|el
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|file_name
decl_stmt|;
name|int
name|bit
decl_stmt|;
name|u32
name|flag
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|static
name|struct
name|el
name|ATTRIBUTE_UNUSED
name|entity_list
index|[]
init|=
block|{
block|{
literal|"all"
block|,
literal|"all"
block|,
name|CUDBG_ALL
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"regdump"
block|,
literal|"regdump"
block|,
name|CUDBG_REG_DUMP
block|,
literal|1
operator|<<
name|ENTITY_FLAG_REGISTER
block|}
block|,
comment|/* {"reg", CUDBG_REG_DUMP},*/
block|{
literal|"devlog"
block|,
literal|"devlog"
block|,
name|CUDBG_DEV_LOG
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"cimla"
block|,
literal|"cim_la"
block|,
name|CUDBG_CIM_LA
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"cimmala"
block|,
literal|"cim_ma_la"
block|,
name|CUDBG_CIM_MA_LA
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"cimqcfg"
block|,
literal|"cim_qcfg"
block|,
name|CUDBG_CIM_QCFG
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"ibqtp0"
block|,
literal|"ibq_tp0"
block|,
name|CUDBG_CIM_IBQ_TP0
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"ibqtp1"
block|,
literal|"ibq_tp1"
block|,
name|CUDBG_CIM_IBQ_TP1
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"ibqulp"
block|,
literal|"ibq_ulp"
block|,
name|CUDBG_CIM_IBQ_ULP
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"ibqsge0"
block|,
literal|"ibq_sge0"
block|,
name|CUDBG_CIM_IBQ_SGE0
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"ibqsge1"
block|,
literal|"ibq_sge1"
block|,
name|CUDBG_CIM_IBQ_SGE1
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"ibqncsi"
block|,
literal|"ibq_ncsi"
block|,
name|CUDBG_CIM_IBQ_NCSI
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"obqulp0"
block|,
literal|"obq_ulp0"
block|,
name|CUDBG_CIM_OBQ_ULP0
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
comment|/* {"cimobqulp1", CUDBG_CIM_OBQ_ULP1},*/
block|{
literal|"obqulp1"
block|,
literal|"obq_ulp1"
block|,
name|CUDBG_CIM_OBQ_ULP1
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"obqulp2"
block|,
literal|"obq_ulp2"
block|,
name|CUDBG_CIM_OBQ_ULP2
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"obqulp3"
block|,
literal|"obq_ulp3"
block|,
name|CUDBG_CIM_OBQ_ULP3
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"obqsge"
block|,
literal|"obq_sge"
block|,
name|CUDBG_CIM_OBQ_SGE
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"obqncsi"
block|,
literal|"obq_ncsi"
block|,
name|CUDBG_CIM_OBQ_NCSI
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"edc0"
block|,
literal|"edc0"
block|,
name|CUDBG_EDC0
block|,
operator|(
literal|1
operator|<<
name|ENTITY_FLAG_BINARY
operator|)
block|}
block|,
block|{
literal|"edc1"
block|,
literal|"edc1"
block|,
name|CUDBG_EDC1
block|,
operator|(
literal|1
operator|<<
name|ENTITY_FLAG_BINARY
operator|)
block|}
block|,
block|{
literal|"mc0"
block|,
literal|"mc0"
block|,
name|CUDBG_MC0
block|,
operator|(
literal|1
operator|<<
name|ENTITY_FLAG_BINARY
operator|)
block|}
block|,
block|{
literal|"mc1"
block|,
literal|"mc1"
block|,
name|CUDBG_MC1
block|,
operator|(
literal|1
operator|<<
name|ENTITY_FLAG_BINARY
operator|)
block|}
block|,
block|{
literal|"rss"
block|,
literal|"rss"
block|,
name|CUDBG_RSS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"rss_pf_config"
block|,
literal|"rss_pf_config"
block|,
name|CUDBG_RSS_PF_CONF
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"rss_key"
block|,
literal|"rss_key"
block|,
name|CUDBG_RSS_KEY
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"rss_vf_config"
block|,
literal|"rss_vf_config"
block|,
name|CUDBG_RSS_VF_CONF
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"rss_config"
block|,
literal|"rss_config"
block|,
name|CUDBG_RSS_CONF
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"pathmtu"
block|,
literal|"path_mtus"
block|,
name|CUDBG_PATH_MTU
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"swstate"
block|,
literal|"sw_state"
block|,
name|CUDBG_SW_STATE
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"wtp"
block|,
literal|"wtp"
block|,
name|CUDBG_WTP
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"pmstats"
block|,
literal|"pm_stats"
block|,
name|CUDBG_PM_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"hwsched"
block|,
literal|"hw_sched"
block|,
name|CUDBG_HW_SCHED
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"tcpstats"
block|,
literal|"tcp_stats"
block|,
name|CUDBG_TCP_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"tperrstats"
block|,
literal|"tp_err_stats"
block|,
name|CUDBG_TP_ERR_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"fcoestats"
block|,
literal|"fcoe_stats"
block|,
name|CUDBG_FCOE_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"rdmastats"
block|,
literal|"rdma_stats"
block|,
name|CUDBG_RDMA_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"tpindirect"
block|,
literal|"tp_indirect"
block|,
name|CUDBG_TP_INDIRECT
block|,
literal|1
operator|<<
name|ENTITY_FLAG_REGISTER
block|}
block|,
block|{
literal|"sgeindirect"
block|,
literal|"sge_indirect"
block|,
name|CUDBG_SGE_INDIRECT
block|,
literal|1
operator|<<
name|ENTITY_FLAG_REGISTER
block|}
block|,
block|{
literal|"cplstats"
block|,
literal|"cpl_stats"
block|,
name|CUDBG_CPL_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"ddpstats"
block|,
literal|"ddp_stats"
block|,
name|CUDBG_DDP_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"wcstats"
block|,
literal|"wc_stats"
block|,
name|CUDBG_WC_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"ulprxla"
block|,
literal|"ulprx_la"
block|,
name|CUDBG_ULPRX_LA
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"lbstats"
block|,
literal|"lb_stats"
block|,
name|CUDBG_LB_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"tpla"
block|,
literal|"tp_la"
block|,
name|CUDBG_TP_LA
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"meminfo"
block|,
literal|"meminfo"
block|,
name|CUDBG_MEMINFO
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"cimpifla"
block|,
literal|"cim_pif_la"
block|,
name|CUDBG_CIM_PIF_LA
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"clk"
block|,
literal|"clk"
block|,
name|CUDBG_CLK
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"obq_sge_rx_q0"
block|,
literal|"obq_sge_rx_q0"
block|,
name|CUDBG_CIM_OBQ_RXQ0
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"obq_sge_rx_q1"
block|,
literal|"obq_sge_rx_q1"
block|,
name|CUDBG_CIM_OBQ_RXQ1
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"macstats"
block|,
literal|"mac_stats"
block|,
name|CUDBG_MAC_STATS
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"pcieindirect"
block|,
literal|"pcie_indirect"
block|,
name|CUDBG_PCIE_INDIRECT
block|,
literal|1
operator|<<
name|ENTITY_FLAG_REGISTER
block|}
block|,
block|{
literal|"pmindirect"
block|,
literal|"pm_indirect"
block|,
name|CUDBG_PM_INDIRECT
block|,
literal|1
operator|<<
name|ENTITY_FLAG_REGISTER
block|}
block|,
block|{
literal|"full"
block|,
literal|"full"
block|,
name|CUDBG_FULL
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"txrate"
block|,
literal|"tx_rate"
block|,
name|CUDBG_TX_RATE
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"tidinfo"
block|,
literal|"tids"
block|,
name|CUDBG_TID_INFO
block|,
name|ENTITY_FLAG_NULL
operator||
operator|(
literal|1
operator|<<
name|ENTITY_FLAG_FW_NO_ATTACH
operator|)
block|}
block|,
block|{
literal|"pcieconfig"
block|,
literal|"pcie_config"
block|,
name|CUDBG_PCIE_CONFIG
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"dumpcontext"
block|,
literal|"dump_context"
block|,
name|CUDBG_DUMP_CONTEXT
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"mpstcam"
block|,
literal|"mps_tcam"
block|,
name|CUDBG_MPS_TCAM
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"vpddata"
block|,
literal|"vpd_data"
block|,
name|CUDBG_VPD_DATA
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"letcam"
block|,
literal|"le_tcam"
block|,
name|CUDBG_LE_TCAM
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"cctrl"
block|,
literal|"cctrl"
block|,
name|CUDBG_CCTRL
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"maindirect"
block|,
literal|"ma_indirect"
block|,
name|CUDBG_MA_INDIRECT
block|,
literal|1
operator|<<
name|ENTITY_FLAG_REGISTER
block|}
block|,
block|{
literal|"ulptxla"
block|,
literal|"ulptx_la"
block|,
name|CUDBG_ULPTX_LA
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"extentity"
block|,
literal|"ext_entity"
block|,
name|CUDBG_EXT_ENTITY
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"upcimindirect"
block|,
literal|"up_cim_indirect"
block|,
name|CUDBG_UP_CIM_INDIRECT
block|,
literal|1
operator|<<
name|ENTITY_FLAG_REGISTER
block|}
block|,
block|{
literal|"pbttables"
block|,
literal|"pbt_tables"
block|,
name|CUDBG_PBT_TABLE
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"mboxlog"
block|,
literal|"mboxlog"
block|,
name|CUDBG_MBOX_LOG
block|,
name|ENTITY_FLAG_NULL
block|}
block|,
block|{
literal|"hmaindirect"
block|,
literal|"hma_indirect"
block|,
name|CUDBG_HMA_INDIRECT
block|,
literal|1
operator|<<
name|ENTITY_FLAG_REGISTER
block|}
block|, }
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|cudbg_print_cb
function_decl|)
parameter_list|(
name|char
modifier|*
name|str
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|cudbg_init_hdr
block|{
name|u8
name|major_ver
decl_stmt|;
name|u8
name|minor_ver
decl_stmt|;
name|u8
name|build_ver
decl_stmt|;
name|u8
name|res
decl_stmt|;
name|u16
name|init_struct_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cudbg_flash_hdr
block|{
name|u32
name|signature
decl_stmt|;
name|u8
name|major_ver
decl_stmt|;
name|u8
name|minor_ver
decl_stmt|;
name|u8
name|build_ver
decl_stmt|;
name|u8
name|res
decl_stmt|;
name|u64
name|timestamp
decl_stmt|;
name|u64
name|time_res
decl_stmt|;
name|u32
name|hdr_len
decl_stmt|;
name|u32
name|data_len
decl_stmt|;
name|u32
name|hdr_flags
decl_stmt|;
name|u32
name|sec_seq_no
decl_stmt|;
name|u32
name|reserved
index|[
literal|22
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cudbg_param
block|{
name|u16
name|param_type
decl_stmt|;
name|u16
name|reserved
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|u32
name|memtype
decl_stmt|;
comment|/* which memory (EDC0, EDC1, MC) */
name|u32
name|start
decl_stmt|;
comment|/* start of log in firmware memory */
name|u32
name|size
decl_stmt|;
comment|/* size of log */
block|}
name|devlog_param
struct|;
struct|struct
block|{
name|struct
name|mbox_cmd_log
modifier|*
name|log
decl_stmt|;
name|u16
name|mbox_cmds
decl_stmt|;
block|}
name|mboxlog_param
struct|;
struct|struct
block|{
name|u8
name|caller_string
index|[
literal|100
index|]
decl_stmt|;
name|u8
name|os_type
decl_stmt|;
block|}
name|sw_state_param
struct|;
name|u64
name|time
decl_stmt|;
name|u8
name|tcb_bit_param
decl_stmt|;
name|void
modifier|*
name|adap
decl_stmt|;
name|void
modifier|*
name|access_lock
decl_stmt|;
block|}
name|u
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* params for tcb_bit_param */
end_comment

begin_define
define|#
directive|define
name|CUDBG_TCB_BRIEF_PARAM
value|0x1
end_define

begin_define
define|#
directive|define
name|CUDBG_TCB_FROM_CARD_PARAM
value|0x2
end_define

begin_define
define|#
directive|define
name|CUDBG_TCB_AS_SCB_PARAM
value|0x4
end_define

begin_comment
comment|/*  * * What is OFFLINE_VIEW_ONLY mode?  *  * cudbg frame work will be used only to interpret previously collected  * data store in a file (i.e NOT hw flash)  */
end_comment

begin_struct
struct|struct
name|cudbg_init
block|{
name|struct
name|cudbg_init_hdr
name|header
decl_stmt|;
name|struct
name|adapter
modifier|*
name|adap
decl_stmt|;
comment|/* Pointer to adapter structure 						    with filled fields */
name|cudbg_print_cb
name|print
decl_stmt|;
comment|/* Platform dependent print 						    function */
name|u32
name|verbose
range|:
literal|1
decl_stmt|;
comment|/* Turn on verbose print */
name|u32
name|use_flash
range|:
literal|1
decl_stmt|;
comment|/* Use flash to collect or view 						    debug */
name|u32
name|full_mode
range|:
literal|1
decl_stmt|;
comment|/* If set, cudbg will pull in 						    common code */
name|u32
name|no_compress
range|:
literal|1
decl_stmt|;
comment|/* Dont compress will storing 						    the collected debug */
name|u32
name|info
range|:
literal|1
decl_stmt|;
comment|/* Show just the info, Dont 						    interpret */
name|u32
name|reserved
range|:
literal|27
decl_stmt|;
name|u8
name|dbg_bitmap
index|[
name|CUDBG_MAX_BITMAP_LEN
index|]
decl_stmt|;
comment|/* Bit map to select the dbg 						    data type to be collected 						    or viewed */
block|}
struct|;
end_struct

begin_comment
comment|/********************************* Helper functions *************************/
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|set_dbg_bitmap
parameter_list|(
name|u8
modifier|*
name|bitmap
parameter_list|,
name|enum
name|CUDBG_DBG_ENTITY_TYPE
name|type
parameter_list|)
block|{
name|int
name|index
init|=
name|type
operator|/
literal|8
decl_stmt|;
name|int
name|bit
init|=
name|type
operator|%
literal|8
decl_stmt|;
name|bitmap
index|[
name|index
index|]
operator||=
operator|(
literal|1
operator|<<
name|bit
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|reset_dbg_bitmap
parameter_list|(
name|u8
modifier|*
name|bitmap
parameter_list|,
name|enum
name|CUDBG_DBG_ENTITY_TYPE
name|type
parameter_list|)
block|{
name|int
name|index
init|=
name|type
operator|/
literal|8
decl_stmt|;
name|int
name|bit
init|=
name|type
operator|%
literal|8
decl_stmt|;
name|bitmap
index|[
name|index
index|]
operator|&=
operator|~
operator|(
literal|1
operator|<<
name|bit
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/********************************* End of Helper functions  * *************************/
end_comment

begin_comment
comment|/* API Prototypes */
end_comment

begin_comment
comment|/**  *  cudbg_alloc_handle - Allocates and initializes a handle that represents  *  cudbg state.  Needs to called first before calling any other function.  *  *  returns a pointer to memory that has a cudbg_init structure at the begining  *  and enough space after that for internal book keeping.  */
end_comment

begin_function_decl
name|void
modifier|*
name|cudbg_alloc_handle
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|struct
name|cudbg_init
modifier|*
name|cudbg_get_init
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|)
block|{
return|return
operator|(
name|handle
operator|)
return|;
block|}
end_function

begin_comment
comment|/**  *  cudbg_collect - Collect and store debug information.  *  ## Parameters ##  *  @handle : A pointer returned by cudbg_alloc_handle.  *  @outbuf : pointer to output buffer, to store the collected information  *	      or to use it as a scratch buffer in case HW flash is used to  *	      store the debug information.  *  @outbuf_size : Size of output buffer.  *  ##	Return ##  *  If the function succeeds, the return value will be size of debug information  *  collected and stored.  *  -ve value represent error.  */
end_comment

begin_function_decl
name|int
name|cudbg_collect
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|void
modifier|*
name|outbuf
parameter_list|,
name|u32
modifier|*
name|outbuf_size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  *  cudbg_free_handle - Release cudbg resources.  *  ## Parameters ##  *  @handle : A pointer returned by cudbg_alloc_handle.  */
end_comment

begin_function_decl
name|void
name|cudbg_free_handle
parameter_list|(
name|IN
name|void
modifier|*
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  *  cudbg_read_flash_data - Read cudbg âflashâ header from adapter flash.  *  			    This will be used by the consumer mainly to  *  			    know the size of the data in flash.  *  ## Parameters ##  *  @handle : A pointer returned by cudbg_hello.  *  @data : A pointer to data/header buffer  */
end_comment

begin_function_decl
name|int
name|cudbg_read_flash_details
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|struct
name|cudbg_flash_hdr
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  *  cudbg_read_flash_data - Read cudbg dump contents stored in flash.  *  ## Parameters ##  *  @handle : A pointer returned by cudbg_hello.  *  @data_buf : A pointer to data buffer.  *  @data_buf_size : Data buffer size.  */
end_comment

begin_function_decl
name|int
name|cudbg_read_flash_data
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|void
modifier|*
name|data_buf
parameter_list|,
name|u32
name|data_buf_size
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CUDBG_IF_H_ */
end_comment

end_unit

