begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2009-2013 Chelsio, Inc. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__T4_H__
end_ifndef

begin_define
define|#
directive|define
name|__T4_H__
end_define

begin_include
include|#
directive|include
file|"common/t4_regs_values.h"
end_include

begin_include
include|#
directive|include
file|"common/t4_regs.h"
end_include

begin_comment
comment|/*  * Fixme: Adding missing defines  */
end_comment

begin_define
define|#
directive|define
name|SGE_PF_KDOORBELL
value|0x0
end_define

begin_define
define|#
directive|define
name|QID_MASK
value|0xffff8000U
end_define

begin_define
define|#
directive|define
name|QID_SHIFT
value|15
end_define

begin_define
define|#
directive|define
name|QID
parameter_list|(
name|x
parameter_list|)
value|((x)<< QID_SHIFT)
end_define

begin_define
define|#
directive|define
name|DBPRIO
value|0x00004000U
end_define

begin_define
define|#
directive|define
name|PIDX_MASK
value|0x00003fffU
end_define

begin_define
define|#
directive|define
name|PIDX_SHIFT
value|0
end_define

begin_define
define|#
directive|define
name|PIDX
parameter_list|(
name|x
parameter_list|)
value|((x)<< PIDX_SHIFT)
end_define

begin_define
define|#
directive|define
name|SGE_PF_GTS
value|0x4
end_define

begin_define
define|#
directive|define
name|INGRESSQID_MASK
value|0xffff0000U
end_define

begin_define
define|#
directive|define
name|INGRESSQID_SHIFT
value|16
end_define

begin_define
define|#
directive|define
name|INGRESSQID
parameter_list|(
name|x
parameter_list|)
value|((x)<< INGRESSQID_SHIFT)
end_define

begin_define
define|#
directive|define
name|TIMERREG_MASK
value|0x0000e000U
end_define

begin_define
define|#
directive|define
name|TIMERREG_SHIFT
value|13
end_define

begin_define
define|#
directive|define
name|TIMERREG
parameter_list|(
name|x
parameter_list|)
value|((x)<< TIMERREG_SHIFT)
end_define

begin_define
define|#
directive|define
name|SEINTARM_MASK
value|0x00001000U
end_define

begin_define
define|#
directive|define
name|SEINTARM_SHIFT
value|12
end_define

begin_define
define|#
directive|define
name|SEINTARM
parameter_list|(
name|x
parameter_list|)
value|((x)<< SEINTARM_SHIFT)
end_define

begin_define
define|#
directive|define
name|CIDXINC_MASK
value|0x00000fffU
end_define

begin_define
define|#
directive|define
name|CIDXINC_SHIFT
value|0
end_define

begin_define
define|#
directive|define
name|CIDXINC
parameter_list|(
name|x
parameter_list|)
value|((x)<< CIDXINC_SHIFT)
end_define

begin_define
define|#
directive|define
name|T4_MAX_NUM_PD
value|65536
end_define

begin_define
define|#
directive|define
name|T4_MAX_MR_SIZE
value|(~0ULL)
end_define

begin_define
define|#
directive|define
name|T4_PAGESIZE_MASK
value|0xffffffff000
end_define

begin_comment
comment|/* 4KB-8TB */
end_comment

begin_define
define|#
directive|define
name|T4_STAG_UNSET
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|T4_FW_MAJ
value|0
end_define

begin_define
define|#
directive|define
name|A_PCIE_MA_SYNC
value|0x30b4
end_define

begin_struct
struct|struct
name|t4_status_page
block|{
name|__be32
name|rsvd1
decl_stmt|;
comment|/* flit 0 - hw owns */
name|__be16
name|rsvd2
decl_stmt|;
name|__be16
name|qid
decl_stmt|;
name|__be16
name|cidx
decl_stmt|;
name|__be16
name|pidx
decl_stmt|;
name|u8
name|qp_err
decl_stmt|;
comment|/* flit 1 - sw owns */
name|u8
name|db_off
decl_stmt|;
name|u8
name|pad
decl_stmt|;
name|u16
name|host_wq_pidx
decl_stmt|;
name|u16
name|host_cidx
decl_stmt|;
name|u16
name|host_pidx
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|T4_EQ_ENTRY_SIZE
value|64
end_define

begin_define
define|#
directive|define
name|T4_SQ_NUM_SLOTS
value|5
end_define

begin_define
define|#
directive|define
name|T4_SQ_NUM_BYTES
value|(T4_EQ_ENTRY_SIZE * T4_SQ_NUM_SLOTS)
end_define

begin_define
define|#
directive|define
name|T4_MAX_SEND_SGE
value|((T4_SQ_NUM_BYTES - sizeof(struct fw_ri_send_wr) - \ 			sizeof(struct fw_ri_isgl)) / sizeof(struct fw_ri_sge))
end_define

begin_define
define|#
directive|define
name|T4_MAX_SEND_INLINE
value|((T4_SQ_NUM_BYTES - sizeof(struct fw_ri_send_wr) - \ 			sizeof(struct fw_ri_immd)))
end_define

begin_define
define|#
directive|define
name|T4_MAX_WRITE_INLINE
value|((T4_SQ_NUM_BYTES - \ 			sizeof(struct fw_ri_rdma_write_wr) - \ 			sizeof(struct fw_ri_immd)))
end_define

begin_define
define|#
directive|define
name|T4_MAX_WRITE_SGE
value|((T4_SQ_NUM_BYTES - \ 			sizeof(struct fw_ri_rdma_write_wr) - \ 			sizeof(struct fw_ri_isgl)) / sizeof(struct fw_ri_sge))
end_define

begin_define
define|#
directive|define
name|T4_MAX_FR_IMMD
value|((T4_SQ_NUM_BYTES - sizeof(struct fw_ri_fr_nsmr_wr) - \ 			sizeof(struct fw_ri_immd))& ~31UL)
end_define

begin_define
define|#
directive|define
name|T4_MAX_FR_IMMD_DEPTH
value|(T4_MAX_FR_IMMD / sizeof(u64))
end_define

begin_define
define|#
directive|define
name|T4_MAX_FR_DSGL
value|1024
end_define

begin_define
define|#
directive|define
name|T4_MAX_FR_DSGL_DEPTH
value|(T4_MAX_FR_DSGL / sizeof(u64))
end_define

begin_function
specifier|static
specifier|inline
name|int
name|t4_max_fr_depth
parameter_list|(
name|int
name|use_dsgl
parameter_list|)
block|{
return|return
name|use_dsgl
condition|?
name|T4_MAX_FR_DSGL_DEPTH
else|:
name|T4_MAX_FR_IMMD_DEPTH
return|;
block|}
end_function

begin_define
define|#
directive|define
name|T4_RQ_NUM_SLOTS
value|2
end_define

begin_define
define|#
directive|define
name|T4_RQ_NUM_BYTES
value|(T4_EQ_ENTRY_SIZE * T4_RQ_NUM_SLOTS)
end_define

begin_define
define|#
directive|define
name|T4_MAX_RECV_SGE
value|4
end_define

begin_union
union|union
name|t4_wr
block|{
name|struct
name|fw_ri_res_wr
name|res
decl_stmt|;
name|struct
name|fw_ri_wr
name|ri
decl_stmt|;
name|struct
name|fw_ri_rdma_write_wr
name|write
decl_stmt|;
name|struct
name|fw_ri_send_wr
name|send
decl_stmt|;
name|struct
name|fw_ri_rdma_read_wr
name|read
decl_stmt|;
name|struct
name|fw_ri_bind_mw_wr
name|bind
decl_stmt|;
name|struct
name|fw_ri_fr_nsmr_wr
name|fr
decl_stmt|;
name|struct
name|fw_ri_fr_nsmr_tpte_wr
name|fr_tpte
decl_stmt|;
name|struct
name|fw_ri_inv_lstag_wr
name|inv
decl_stmt|;
name|struct
name|t4_status_page
name|status
decl_stmt|;
name|__be64
name|flits
index|[
name|T4_EQ_ENTRY_SIZE
operator|/
sizeof|sizeof
argument_list|(
name|__be64
argument_list|)
operator|*
name|T4_SQ_NUM_SLOTS
index|]
decl_stmt|;
block|}
union|;
end_union

begin_union
union|union
name|t4_recv_wr
block|{
name|struct
name|fw_ri_recv_wr
name|recv
decl_stmt|;
name|struct
name|t4_status_page
name|status
decl_stmt|;
name|__be64
name|flits
index|[
name|T4_EQ_ENTRY_SIZE
operator|/
sizeof|sizeof
argument_list|(
name|__be64
argument_list|)
operator|*
name|T4_RQ_NUM_SLOTS
index|]
decl_stmt|;
block|}
union|;
end_union

begin_function
specifier|static
specifier|inline
name|void
name|init_wr_hdr
parameter_list|(
name|union
name|t4_wr
modifier|*
name|wqe
parameter_list|,
name|u16
name|wrid
parameter_list|,
name|enum
name|fw_wr_opcodes
name|opcode
parameter_list|,
name|u8
name|flags
parameter_list|,
name|u8
name|len16
parameter_list|)
block|{
name|wqe
operator|->
name|send
operator|.
name|opcode
operator|=
operator|(
name|u8
operator|)
name|opcode
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|wrid
operator|=
name|wrid
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|r1
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|r1
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|r1
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
name|wqe
operator|->
name|send
operator|.
name|len16
operator|=
name|len16
expr_stmt|;
block|}
end_function

begin_comment
comment|/* CQE/AE status codes */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_SUCCESS
value|0x0
end_define

begin_define
define|#
directive|define
name|T4_ERR_STAG
value|0x1
end_define

begin_comment
comment|/* STAG invalid: either the */
end_comment

begin_comment
comment|/* STAG is offlimt, being 0, */
end_comment

begin_comment
comment|/* or STAG_key mismatch */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_PDID
value|0x2
end_define

begin_comment
comment|/* PDID mismatch */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_QPID
value|0x3
end_define

begin_comment
comment|/* QPID mismatch */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_ACCESS
value|0x4
end_define

begin_comment
comment|/* Invalid access right */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_WRAP
value|0x5
end_define

begin_comment
comment|/* Wrap error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_BOUND
value|0x6
end_define

begin_comment
comment|/* base and bounds voilation */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_INVALIDATE_SHARED_MR
value|0x7
end_define

begin_comment
comment|/* attempt to invalidate a  */
end_comment

begin_comment
comment|/* shared memory region */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_INVALIDATE_MR_WITH_MW_BOUND
value|0x8
end_define

begin_comment
comment|/* attempt to invalidate a  */
end_comment

begin_comment
comment|/* shared memory region */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_ECC
value|0x9
end_define

begin_comment
comment|/* ECC error detected */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_ECC_PSTAG
value|0xA
end_define

begin_comment
comment|/* ECC error detected when  */
end_comment

begin_comment
comment|/* reading PSTAG for a MW  */
end_comment

begin_comment
comment|/* Invalidate */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_PBL_ADDR_BOUND
value|0xB
end_define

begin_comment
comment|/* pbl addr out of bounds:  */
end_comment

begin_comment
comment|/* software error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_SWFLUSH
value|0xC
end_define

begin_comment
comment|/* SW FLUSHED */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_CRC
value|0x10
end_define

begin_comment
comment|/* CRC error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_MARKER
value|0x11
end_define

begin_comment
comment|/* Marker error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_PDU_LEN_ERR
value|0x12
end_define

begin_comment
comment|/* invalid PDU length */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_OUT_OF_RQE
value|0x13
end_define

begin_comment
comment|/* out of RQE */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_DDP_VERSION
value|0x14
end_define

begin_comment
comment|/* wrong DDP version */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_RDMA_VERSION
value|0x15
end_define

begin_comment
comment|/* wrong RDMA version */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_OPCODE
value|0x16
end_define

begin_comment
comment|/* invalid rdma opcode */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_DDP_QUEUE_NUM
value|0x17
end_define

begin_comment
comment|/* invalid ddp queue number */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_MSN
value|0x18
end_define

begin_comment
comment|/* MSN error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_TBIT
value|0x19
end_define

begin_comment
comment|/* tag bit not set correctly */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_MO
value|0x1A
end_define

begin_comment
comment|/* MO not 0 for TERMINATE  */
end_comment

begin_comment
comment|/* or READ_REQ */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_MSN_GAP
value|0x1B
end_define

begin_define
define|#
directive|define
name|T4_ERR_MSN_RANGE
value|0x1C
end_define

begin_define
define|#
directive|define
name|T4_ERR_IRD_OVERFLOW
value|0x1D
end_define

begin_define
define|#
directive|define
name|T4_ERR_RQE_ADDR_BOUND
value|0x1E
end_define

begin_comment
comment|/* RQE addr out of bounds:  */
end_comment

begin_comment
comment|/* software error */
end_comment

begin_define
define|#
directive|define
name|T4_ERR_INTERNAL_ERR
value|0x1F
end_define

begin_comment
comment|/* internal error (opcode  */
end_comment

begin_comment
comment|/* mismatch) */
end_comment

begin_comment
comment|/*  * CQE defs  */
end_comment

begin_struct
struct|struct
name|t4_cqe
block|{
name|__be32
name|header
decl_stmt|;
name|__be32
name|len
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|__be32
name|stag
decl_stmt|;
name|__be32
name|msn
decl_stmt|;
block|}
name|rcqe
struct|;
struct|struct
block|{
name|u32
name|stag
decl_stmt|;
name|u16
name|nada2
decl_stmt|;
name|u16
name|cidx
decl_stmt|;
block|}
name|scqe
struct|;
struct|struct
block|{
name|__be32
name|wrid_hi
decl_stmt|;
name|__be32
name|wrid_low
decl_stmt|;
block|}
name|gen
struct|;
name|u64
name|drain_cookie
decl_stmt|;
block|}
name|u
union|;
name|__be64
name|reserved
decl_stmt|;
name|__be64
name|bits_type_ts
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* macros for flit 0 of the cqe */
end_comment

begin_define
define|#
directive|define
name|S_CQE_QPID
value|12
end_define

begin_define
define|#
directive|define
name|M_CQE_QPID
value|0xFFFFF
end_define

begin_define
define|#
directive|define
name|G_CQE_QPID
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_QPID))& M_CQE_QPID)
end_define

begin_define
define|#
directive|define
name|V_CQE_QPID
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_QPID)
end_define

begin_define
define|#
directive|define
name|S_CQE_SWCQE
value|11
end_define

begin_define
define|#
directive|define
name|M_CQE_SWCQE
value|0x1
end_define

begin_define
define|#
directive|define
name|G_CQE_SWCQE
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_SWCQE))& M_CQE_SWCQE)
end_define

begin_define
define|#
directive|define
name|V_CQE_SWCQE
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_SWCQE)
end_define

begin_define
define|#
directive|define
name|S_CQE_STATUS
value|5
end_define

begin_define
define|#
directive|define
name|M_CQE_STATUS
value|0x1F
end_define

begin_define
define|#
directive|define
name|G_CQE_STATUS
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_STATUS))& M_CQE_STATUS)
end_define

begin_define
define|#
directive|define
name|V_CQE_STATUS
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_STATUS)
end_define

begin_define
define|#
directive|define
name|S_CQE_TYPE
value|4
end_define

begin_define
define|#
directive|define
name|M_CQE_TYPE
value|0x1
end_define

begin_define
define|#
directive|define
name|G_CQE_TYPE
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_TYPE))& M_CQE_TYPE)
end_define

begin_define
define|#
directive|define
name|V_CQE_TYPE
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_TYPE)
end_define

begin_define
define|#
directive|define
name|S_CQE_OPCODE
value|0
end_define

begin_define
define|#
directive|define
name|M_CQE_OPCODE
value|0xF
end_define

begin_define
define|#
directive|define
name|G_CQE_OPCODE
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_OPCODE))& M_CQE_OPCODE)
end_define

begin_define
define|#
directive|define
name|V_CQE_OPCODE
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_OPCODE)
end_define

begin_define
define|#
directive|define
name|SW_CQE
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_SWCQE(be32_to_cpu((x)->header)))
end_define

begin_define
define|#
directive|define
name|CQE_QPID
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_QPID(be32_to_cpu((x)->header)))
end_define

begin_define
define|#
directive|define
name|CQE_TYPE
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_TYPE(be32_to_cpu((x)->header)))
end_define

begin_define
define|#
directive|define
name|SQ_TYPE
parameter_list|(
name|x
parameter_list|)
value|(CQE_TYPE((x)))
end_define

begin_define
define|#
directive|define
name|RQ_TYPE
parameter_list|(
name|x
parameter_list|)
value|(!CQE_TYPE((x)))
end_define

begin_define
define|#
directive|define
name|CQE_STATUS
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_STATUS(be32_to_cpu((x)->header)))
end_define

begin_define
define|#
directive|define
name|CQE_OPCODE
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_OPCODE(be32_to_cpu((x)->header)))
end_define

begin_define
define|#
directive|define
name|CQE_SEND_OPCODE
parameter_list|(
name|x
parameter_list|)
value|(\ 	(G_CQE_OPCODE(be32_to_cpu((x)->header)) == FW_RI_SEND) || \ 	(G_CQE_OPCODE(be32_to_cpu((x)->header)) == FW_RI_SEND_WITH_SE) || \ 	(G_CQE_OPCODE(be32_to_cpu((x)->header)) == FW_RI_SEND_WITH_INV) || \ 	(G_CQE_OPCODE(be32_to_cpu((x)->header)) == FW_RI_SEND_WITH_SE_INV))
end_define

begin_define
define|#
directive|define
name|CQE_LEN
parameter_list|(
name|x
parameter_list|)
value|(be32_to_cpu((x)->len))
end_define

begin_comment
comment|/* used for RQ completion processing */
end_comment

begin_define
define|#
directive|define
name|CQE_WRID_STAG
parameter_list|(
name|x
parameter_list|)
value|(be32_to_cpu((x)->u.rcqe.stag))
end_define

begin_define
define|#
directive|define
name|CQE_WRID_MSN
parameter_list|(
name|x
parameter_list|)
value|(be32_to_cpu((x)->u.rcqe.msn))
end_define

begin_comment
comment|/* used for SQ completion processing */
end_comment

begin_define
define|#
directive|define
name|CQE_WRID_SQ_IDX
parameter_list|(
name|x
parameter_list|)
value|((x)->u.scqe.cidx)
end_define

begin_define
define|#
directive|define
name|CQE_WRID_FR_STAG
parameter_list|(
name|x
parameter_list|)
value|(be32_to_cpu((x)->u.scqe.stag))
end_define

begin_comment
comment|/* generic accessor macros */
end_comment

begin_define
define|#
directive|define
name|CQE_WRID_HI
parameter_list|(
name|x
parameter_list|)
value|((x)->u.gen.wrid_hi)
end_define

begin_define
define|#
directive|define
name|CQE_WRID_LOW
parameter_list|(
name|x
parameter_list|)
value|((x)->u.gen.wrid_low)
end_define

begin_define
define|#
directive|define
name|CQE_DRAIN_COOKIE
parameter_list|(
name|x
parameter_list|)
value|(x)->u.drain_cookie;
end_define

begin_comment
comment|/* macros for flit 3 of the cqe */
end_comment

begin_define
define|#
directive|define
name|S_CQE_GENBIT
value|63
end_define

begin_define
define|#
directive|define
name|M_CQE_GENBIT
value|0x1
end_define

begin_define
define|#
directive|define
name|G_CQE_GENBIT
parameter_list|(
name|x
parameter_list|)
value|(((x)>> S_CQE_GENBIT)& M_CQE_GENBIT)
end_define

begin_define
define|#
directive|define
name|V_CQE_GENBIT
parameter_list|(
name|x
parameter_list|)
value|((x)<<S_CQE_GENBIT)
end_define

begin_define
define|#
directive|define
name|S_CQE_OVFBIT
value|62
end_define

begin_define
define|#
directive|define
name|M_CQE_OVFBIT
value|0x1
end_define

begin_define
define|#
directive|define
name|G_CQE_OVFBIT
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_OVFBIT))& M_CQE_OVFBIT)
end_define

begin_define
define|#
directive|define
name|S_CQE_IQTYPE
value|60
end_define

begin_define
define|#
directive|define
name|M_CQE_IQTYPE
value|0x3
end_define

begin_define
define|#
directive|define
name|G_CQE_IQTYPE
parameter_list|(
name|x
parameter_list|)
value|((((x)>> S_CQE_IQTYPE))& M_CQE_IQTYPE)
end_define

begin_define
define|#
directive|define
name|M_CQE_TS
value|0x0fffffffffffffffULL
end_define

begin_define
define|#
directive|define
name|G_CQE_TS
parameter_list|(
name|x
parameter_list|)
value|((x)& M_CQE_TS)
end_define

begin_define
define|#
directive|define
name|CQE_OVFBIT
parameter_list|(
name|x
parameter_list|)
value|((unsigned)G_CQE_OVFBIT(be64_to_cpu((x)->bits_type_ts)))
end_define

begin_define
define|#
directive|define
name|CQE_GENBIT
parameter_list|(
name|x
parameter_list|)
value|((unsigned)G_CQE_GENBIT(be64_to_cpu((x)->bits_type_ts)))
end_define

begin_define
define|#
directive|define
name|CQE_TS
parameter_list|(
name|x
parameter_list|)
value|(G_CQE_TS(be64_to_cpu((x)->bits_type_ts)))
end_define

begin_struct
struct|struct
name|t4_swsqe
block|{
name|u64
name|wr_id
decl_stmt|;
name|struct
name|t4_cqe
name|cqe
decl_stmt|;
name|int
name|read_len
decl_stmt|;
name|int
name|opcode
decl_stmt|;
name|int
name|complete
decl_stmt|;
name|int
name|signaled
decl_stmt|;
name|u16
name|idx
decl_stmt|;
name|int
name|flushed
decl_stmt|;
name|struct
name|timespec
name|host_ts
decl_stmt|;
name|u64
name|sge_ts
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|pgprot_t
name|t4_pgprot_wc
parameter_list|(
name|pgprot_t
name|prot
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|||
name|defined
argument_list|(
name|CONFIG_PPC64
argument_list|)
return|return
name|pgprot_writecombine
argument_list|(
name|prot
argument_list|)
return|;
else|#
directive|else
return|return
name|pgprot_noncached
argument_list|(
name|prot
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_enum
enum|enum
block|{
name|T4_SQ_ONCHIP
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|t4_sq
block|{
name|union
name|t4_wr
modifier|*
name|queue
decl_stmt|;
name|bus_addr_t
name|dma_addr
decl_stmt|;
name|DEFINE_DMA_UNMAP_ADDR
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|unsigned
name|long
name|phys_addr
decl_stmt|;
name|struct
name|t4_swsqe
modifier|*
name|sw_sq
decl_stmt|;
name|struct
name|t4_swsqe
modifier|*
name|oldest_read
decl_stmt|;
name|void
name|__iomem
modifier|*
name|bar2_va
decl_stmt|;
name|u64
name|bar2_pa
decl_stmt|;
name|size_t
name|memsize
decl_stmt|;
name|u32
name|bar2_qid
decl_stmt|;
name|u32
name|qid
decl_stmt|;
name|u16
name|in_use
decl_stmt|;
name|u16
name|size
decl_stmt|;
name|u16
name|cidx
decl_stmt|;
name|u16
name|pidx
decl_stmt|;
name|u16
name|wq_pidx
decl_stmt|;
name|u16
name|wq_pidx_inc
decl_stmt|;
name|u16
name|flags
decl_stmt|;
name|short
name|flush_cidx
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|t4_swrqe
block|{
name|u64
name|wr_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|t4_rq
block|{
name|union
name|t4_recv_wr
modifier|*
name|queue
decl_stmt|;
name|bus_addr_t
name|dma_addr
decl_stmt|;
name|DEFINE_DMA_UNMAP_ADDR
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|unsigned
name|long
name|phys_addr
decl_stmt|;
name|struct
name|t4_swrqe
modifier|*
name|sw_rq
decl_stmt|;
name|void
name|__iomem
modifier|*
name|bar2_va
decl_stmt|;
name|u64
name|bar2_pa
decl_stmt|;
name|size_t
name|memsize
decl_stmt|;
name|u32
name|bar2_qid
decl_stmt|;
name|u32
name|qid
decl_stmt|;
name|u32
name|msn
decl_stmt|;
name|u32
name|rqt_hwaddr
decl_stmt|;
name|u16
name|rqt_size
decl_stmt|;
name|u16
name|in_use
decl_stmt|;
name|u16
name|size
decl_stmt|;
name|u16
name|cidx
decl_stmt|;
name|u16
name|pidx
decl_stmt|;
name|u16
name|wq_pidx
decl_stmt|;
name|u16
name|wq_pidx_inc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|t4_wq
block|{
name|struct
name|t4_sq
name|sq
decl_stmt|;
name|struct
name|t4_rq
name|rq
decl_stmt|;
name|struct
name|c4iw_rdev
modifier|*
name|rdev
decl_stmt|;
name|int
name|flushed
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|t4_rqes_posted
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|in_use
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_rq_empty
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|in_use
operator|==
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_rq_full
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|in_use
operator|==
operator|(
name|wq
operator|->
name|rq
operator|.
name|size
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|t4_rq_avail
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|size
operator|-
literal|1
operator|-
name|wq
operator|->
name|rq
operator|.
name|in_use
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_rq_produce
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|,
name|u8
name|len16
parameter_list|)
block|{
name|wq
operator|->
name|rq
operator|.
name|in_use
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|wq
operator|->
name|rq
operator|.
name|pidx
operator|==
name|wq
operator|->
name|rq
operator|.
name|size
condition|)
name|wq
operator|->
name|rq
operator|.
name|pidx
operator|=
literal|0
expr_stmt|;
name|wq
operator|->
name|rq
operator|.
name|wq_pidx
operator|+=
name|DIV_ROUND_UP
argument_list|(
name|len16
operator|*
literal|16
argument_list|,
name|T4_EQ_ENTRY_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|wq
operator|->
name|rq
operator|.
name|wq_pidx
operator|>=
name|wq
operator|->
name|rq
operator|.
name|size
operator|*
name|T4_RQ_NUM_SLOTS
condition|)
name|wq
operator|->
name|rq
operator|.
name|wq_pidx
operator|%=
name|wq
operator|->
name|rq
operator|.
name|size
operator|*
name|T4_RQ_NUM_SLOTS
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_rq_consume
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
name|wq
operator|->
name|rq
operator|.
name|in_use
operator|--
expr_stmt|;
name|wq
operator|->
name|rq
operator|.
name|msn
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|wq
operator|->
name|rq
operator|.
name|cidx
operator|==
name|wq
operator|->
name|rq
operator|.
name|size
condition|)
name|wq
operator|->
name|rq
operator|.
name|cidx
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|t4_rq_host_wq_pidx
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|queue
index|[
name|wq
operator|->
name|rq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|host_wq_pidx
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|t4_rq_wq_size
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|size
operator|*
name|T4_RQ_NUM_SLOTS
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_sq_onchip
parameter_list|(
name|struct
name|t4_sq
modifier|*
name|sq
parameter_list|)
block|{
return|return
name|sq
operator|->
name|flags
operator|&
name|T4_SQ_ONCHIP
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_sq_empty
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|==
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_sq_full
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|==
operator|(
name|wq
operator|->
name|sq
operator|.
name|size
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|t4_sq_avail
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|sq
operator|.
name|size
operator|-
literal|1
operator|-
name|wq
operator|->
name|sq
operator|.
name|in_use
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_sq_produce
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|,
name|u8
name|len16
parameter_list|)
block|{
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|wq
operator|->
name|sq
operator|.
name|pidx
operator|==
name|wq
operator|->
name|sq
operator|.
name|size
condition|)
name|wq
operator|->
name|sq
operator|.
name|pidx
operator|=
literal|0
expr_stmt|;
name|wq
operator|->
name|sq
operator|.
name|wq_pidx
operator|+=
name|DIV_ROUND_UP
argument_list|(
name|len16
operator|*
literal|16
argument_list|,
name|T4_EQ_ENTRY_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|wq
operator|->
name|sq
operator|.
name|wq_pidx
operator|>=
name|wq
operator|->
name|sq
operator|.
name|size
operator|*
name|T4_SQ_NUM_SLOTS
condition|)
name|wq
operator|->
name|sq
operator|.
name|wq_pidx
operator|%=
name|wq
operator|->
name|sq
operator|.
name|size
operator|*
name|T4_SQ_NUM_SLOTS
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_sq_consume
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
name|BUG_ON
argument_list|(
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|<
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|wq
operator|->
name|sq
operator|.
name|cidx
operator|==
name|wq
operator|->
name|sq
operator|.
name|flush_cidx
condition|)
name|wq
operator|->
name|sq
operator|.
name|flush_cidx
operator|=
operator|-
literal|1
expr_stmt|;
name|wq
operator|->
name|sq
operator|.
name|in_use
operator|--
expr_stmt|;
if|if
condition|(
operator|++
name|wq
operator|->
name|sq
operator|.
name|cidx
operator|==
name|wq
operator|->
name|sq
operator|.
name|size
condition|)
name|wq
operator|->
name|sq
operator|.
name|cidx
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|t4_sq_host_wq_pidx
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|sq
operator|.
name|queue
index|[
name|wq
operator|->
name|sq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|host_wq_pidx
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|t4_sq_wq_size
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|sq
operator|.
name|size
operator|*
name|T4_SQ_NUM_SLOTS
return|;
block|}
end_function

begin_comment
comment|/* This function copies 64 byte coalesced work request to memory  * mapped BAR2 space. For coalesced WRs, the SGE fetches data  * from the FIFO instead of from Host.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|pio_copy
parameter_list|(
name|u64
name|__iomem
modifier|*
name|dst
parameter_list|,
name|u64
modifier|*
name|src
parameter_list|)
block|{
name|int
name|count
init|=
literal|8
decl_stmt|;
while|while
condition|(
name|count
condition|)
block|{
name|writeq
argument_list|(
operator|*
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
name|src
operator|++
expr_stmt|;
name|dst
operator|++
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_ring_sq_db
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|,
name|u16
name|inc
parameter_list|,
name|union
name|t4_wr
modifier|*
name|wqe
parameter_list|,
name|u8
name|wc
parameter_list|)
block|{
comment|/* Flush host queue memory writes. */
name|wmb
argument_list|()
expr_stmt|;
if|if
condition|(
name|wc
operator|&&
name|inc
operator|==
literal|1
operator|&&
name|wq
operator|->
name|sq
operator|.
name|bar2_qid
operator|==
literal|0
operator|&&
name|wqe
condition|)
block|{
name|CTR2
argument_list|(
name|KTR_IW_CXGBE
argument_list|,
literal|"%s: WC wq->sq.pidx = %d\n"
argument_list|,
name|__func__
argument_list|,
name|wq
operator|->
name|sq
operator|.
name|pidx
argument_list|)
expr_stmt|;
name|pio_copy
argument_list|(
operator|(
name|u64
name|__iomem
operator|*
operator|)
operator|(
operator|(
name|u64
operator|)
name|wq
operator|->
name|sq
operator|.
name|bar2_va
operator|+
name|SGE_UDB_WCDOORBELL
operator|)
argument_list|,
operator|(
name|u64
operator|*
operator|)
name|wqe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CTR2
argument_list|(
name|KTR_IW_CXGBE
argument_list|,
literal|"%s: DB wq->sq.pidx = %d\n"
argument_list|,
name|__func__
argument_list|,
name|wq
operator|->
name|sq
operator|.
name|pidx
argument_list|)
expr_stmt|;
name|writel
argument_list|(
name|V_PIDX_T5
argument_list|(
name|inc
argument_list|)
operator||
name|V_QID
argument_list|(
name|wq
operator|->
name|sq
operator|.
name|bar2_qid
argument_list|)
argument_list|,
operator|(
name|void
name|__iomem
operator|*
operator|)
operator|(
operator|(
name|u64
operator|)
name|wq
operator|->
name|sq
operator|.
name|bar2_va
operator|+
name|SGE_UDB_KDOORBELL
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/* Flush user doorbell area writes. */
name|wmb
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_ring_rq_db
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|,
name|u16
name|inc
parameter_list|,
name|union
name|t4_recv_wr
modifier|*
name|wqe
parameter_list|,
name|u8
name|wc
parameter_list|)
block|{
comment|/* Flush host queue memory writes. */
name|wmb
argument_list|()
expr_stmt|;
if|if
condition|(
name|wc
operator|&&
name|inc
operator|==
literal|1
operator|&&
name|wq
operator|->
name|rq
operator|.
name|bar2_qid
operator|==
literal|0
operator|&&
name|wqe
condition|)
block|{
name|CTR2
argument_list|(
name|KTR_IW_CXGBE
argument_list|,
literal|"%s: WC wq->rq.pidx = %d\n"
argument_list|,
name|__func__
argument_list|,
name|wq
operator|->
name|rq
operator|.
name|pidx
argument_list|)
expr_stmt|;
name|pio_copy
argument_list|(
operator|(
name|u64
name|__iomem
operator|*
operator|)
operator|(
operator|(
name|u64
operator|)
name|wq
operator|->
name|rq
operator|.
name|bar2_va
operator|+
name|SGE_UDB_WCDOORBELL
operator|)
argument_list|,
operator|(
name|u64
operator|*
operator|)
name|wqe
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CTR2
argument_list|(
name|KTR_IW_CXGBE
argument_list|,
literal|"%s: DB wq->rq.pidx = %d\n"
argument_list|,
name|__func__
argument_list|,
name|wq
operator|->
name|rq
operator|.
name|pidx
argument_list|)
expr_stmt|;
name|writel
argument_list|(
name|V_PIDX_T5
argument_list|(
name|inc
argument_list|)
operator||
name|V_QID
argument_list|(
name|wq
operator|->
name|rq
operator|.
name|bar2_qid
argument_list|)
argument_list|,
operator|(
name|void
name|__iomem
operator|*
operator|)
operator|(
operator|(
name|u64
operator|)
name|wq
operator|->
name|rq
operator|.
name|bar2_va
operator|+
name|SGE_UDB_KDOORBELL
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/* Flush user doorbell area writes. */
name|wmb
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_wq_in_error
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
return|return
name|wq
operator|->
name|rq
operator|.
name|queue
index|[
name|wq
operator|->
name|rq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|qp_err
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_set_wq_in_error
parameter_list|(
name|struct
name|t4_wq
modifier|*
name|wq
parameter_list|)
block|{
name|wq
operator|->
name|rq
operator|.
name|queue
index|[
name|wq
operator|->
name|rq
operator|.
name|size
index|]
operator|.
name|status
operator|.
name|qp_err
operator|=
literal|1
expr_stmt|;
block|}
end_function

begin_enum
enum|enum
name|t4_cq_flags
block|{
name|CQ_ARMED
init|=
literal|1
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|t4_cq
block|{
name|struct
name|t4_cqe
modifier|*
name|queue
decl_stmt|;
name|bus_addr_t
name|dma_addr
decl_stmt|;
name|DEFINE_DMA_UNMAP_ADDR
argument_list|(
name|mapping
argument_list|)
expr_stmt|;
name|struct
name|t4_cqe
modifier|*
name|sw_queue
decl_stmt|;
name|void
name|__iomem
modifier|*
name|bar2_va
decl_stmt|;
name|u64
name|bar2_pa
decl_stmt|;
name|u32
name|bar2_qid
decl_stmt|;
name|struct
name|c4iw_rdev
modifier|*
name|rdev
decl_stmt|;
name|size_t
name|memsize
decl_stmt|;
name|__be64
name|bits_type_ts
decl_stmt|;
name|u32
name|cqid
decl_stmt|;
name|u32
name|qid_mask
decl_stmt|;
name|int
name|vector
decl_stmt|;
name|u16
name|size
decl_stmt|;
comment|/* including status page */
name|u16
name|cidx
decl_stmt|;
name|u16
name|sw_pidx
decl_stmt|;
name|u16
name|sw_cidx
decl_stmt|;
name|u16
name|sw_in_use
decl_stmt|;
name|u16
name|cidx_inc
decl_stmt|;
name|u8
name|gen
decl_stmt|;
name|u8
name|error
decl_stmt|;
name|unsigned
name|long
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|void
name|write_gts
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|,
name|u32
name|val
parameter_list|)
block|{
name|writel
argument_list|(
name|val
operator||
name|V_INGRESSQID
argument_list|(
name|cq
operator|->
name|bar2_qid
argument_list|)
argument_list|,
operator|(
name|void
name|__iomem
operator|*
operator|)
operator|(
operator|(
name|u64
operator|)
name|cq
operator|->
name|bar2_va
operator|+
name|SGE_UDB_GTS
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_clear_cq_armed
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|test_and_clear_bit
argument_list|(
name|CQ_ARMED
argument_list|,
operator|&
name|cq
operator|->
name|flags
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_arm_cq
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|,
name|int
name|se
parameter_list|)
block|{
name|u32
name|val
decl_stmt|;
name|set_bit
argument_list|(
name|CQ_ARMED
argument_list|,
operator|&
name|cq
operator|->
name|flags
argument_list|)
expr_stmt|;
while|while
condition|(
name|cq
operator|->
name|cidx_inc
operator|>
name|CIDXINC_MASK
condition|)
block|{
name|val
operator|=
name|SEINTARM
argument_list|(
literal|0
argument_list|)
operator||
name|CIDXINC
argument_list|(
name|CIDXINC_MASK
argument_list|)
operator||
name|TIMERREG
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|writel
argument_list|(
name|val
operator||
name|V_INGRESSQID
argument_list|(
name|cq
operator|->
name|bar2_qid
argument_list|)
argument_list|,
operator|(
name|void
name|__iomem
operator|*
operator|)
operator|(
operator|(
name|u64
operator|)
name|cq
operator|->
name|bar2_va
operator|+
name|SGE_UDB_GTS
operator|)
argument_list|)
expr_stmt|;
name|cq
operator|->
name|cidx_inc
operator|-=
name|CIDXINC_MASK
expr_stmt|;
block|}
name|val
operator|=
name|SEINTARM
argument_list|(
name|se
argument_list|)
operator||
name|CIDXINC
argument_list|(
name|cq
operator|->
name|cidx_inc
argument_list|)
operator||
name|TIMERREG
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|writel
argument_list|(
name|val
operator||
name|V_INGRESSQID
argument_list|(
name|cq
operator|->
name|bar2_qid
argument_list|)
argument_list|,
operator|(
name|void
name|__iomem
operator|*
operator|)
operator|(
operator|(
name|u64
operator|)
name|cq
operator|->
name|bar2_va
operator|+
name|SGE_UDB_GTS
operator|)
argument_list|)
expr_stmt|;
name|cq
operator|->
name|cidx_inc
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_swcq_produce
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
name|cq
operator|->
name|sw_in_use
operator|++
expr_stmt|;
if|if
condition|(
name|cq
operator|->
name|sw_in_use
operator|==
name|cq
operator|->
name|size
condition|)
block|{
name|CTR2
argument_list|(
name|KTR_IW_CXGBE
argument_list|,
literal|"%s cxgb4 sw cq overflow cqid %u\n"
argument_list|,
name|__func__
argument_list|,
name|cq
operator|->
name|cqid
argument_list|)
expr_stmt|;
name|cq
operator|->
name|error
operator|=
literal|1
expr_stmt|;
name|BUG_ON
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|cq
operator|->
name|sw_pidx
operator|==
name|cq
operator|->
name|size
condition|)
name|cq
operator|->
name|sw_pidx
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_swcq_consume
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
name|BUG_ON
argument_list|(
name|cq
operator|->
name|sw_in_use
operator|<
literal|1
argument_list|)
expr_stmt|;
name|cq
operator|->
name|sw_in_use
operator|--
expr_stmt|;
if|if
condition|(
operator|++
name|cq
operator|->
name|sw_cidx
operator|==
name|cq
operator|->
name|size
condition|)
name|cq
operator|->
name|sw_cidx
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_hwcq_consume
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
name|cq
operator|->
name|bits_type_ts
operator|=
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|cidx
index|]
operator|.
name|bits_type_ts
expr_stmt|;
if|if
condition|(
operator|++
name|cq
operator|->
name|cidx_inc
operator|==
operator|(
name|cq
operator|->
name|size
operator|>>
literal|4
operator|)
operator|||
name|cq
operator|->
name|cidx_inc
operator|==
name|M_CIDXINC
condition|)
block|{
name|u32
name|val
decl_stmt|;
name|val
operator|=
name|SEINTARM
argument_list|(
literal|0
argument_list|)
operator||
name|CIDXINC
argument_list|(
name|cq
operator|->
name|cidx_inc
argument_list|)
operator||
name|TIMERREG
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|write_gts
argument_list|(
name|cq
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|cq
operator|->
name|cidx_inc
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|++
name|cq
operator|->
name|cidx
operator|==
name|cq
operator|->
name|size
condition|)
block|{
name|cq
operator|->
name|cidx
operator|=
literal|0
expr_stmt|;
name|cq
operator|->
name|gen
operator|^=
literal|1
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_valid_cqe
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|t4_cqe
modifier|*
name|cqe
parameter_list|)
block|{
return|return
operator|(
name|CQE_GENBIT
argument_list|(
name|cqe
argument_list|)
operator|==
name|cq
operator|->
name|gen
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_cq_notempty
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
name|cq
operator|->
name|sw_in_use
operator|||
name|t4_valid_cqe
argument_list|(
name|cq
argument_list|,
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|cidx
index|]
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_next_hw_cqe
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|t4_cqe
modifier|*
modifier|*
name|cqe
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|u16
name|prev_cidx
decl_stmt|;
if|if
condition|(
name|cq
operator|->
name|cidx
operator|==
literal|0
condition|)
name|prev_cidx
operator|=
name|cq
operator|->
name|size
operator|-
literal|1
expr_stmt|;
else|else
name|prev_cidx
operator|=
name|cq
operator|->
name|cidx
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|cq
operator|->
name|queue
index|[
name|prev_cidx
index|]
operator|.
name|bits_type_ts
operator|!=
name|cq
operator|->
name|bits_type_ts
condition|)
block|{
name|ret
operator|=
operator|-
name|EOVERFLOW
expr_stmt|;
name|cq
operator|->
name|error
operator|=
literal|1
expr_stmt|;
name|printk
argument_list|(
argument|KERN_ERR MOD
literal|"cq overflow cqid %u\n"
argument_list|,
argument|cq->cqid
argument_list|)
empty_stmt|;
name|BUG_ON
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t4_valid_cqe
argument_list|(
name|cq
argument_list|,
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|cidx
index|]
argument_list|)
condition|)
block|{
comment|/* Ensure CQE is flushed to memory */
name|rmb
argument_list|()
expr_stmt|;
operator|*
name|cqe
operator|=
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|cidx
index|]
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
else|else
name|ret
operator|=
operator|-
name|ENODATA
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|t4_cqe
modifier|*
name|t4_next_sw_cqe
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
if|if
condition|(
name|cq
operator|->
name|sw_in_use
operator|==
name|cq
operator|->
name|size
condition|)
block|{
name|CTR2
argument_list|(
name|KTR_IW_CXGBE
argument_list|,
literal|"%s cxgb4 sw cq overflow cqid %u\n"
argument_list|,
name|__func__
argument_list|,
name|cq
operator|->
name|cqid
argument_list|)
expr_stmt|;
name|cq
operator|->
name|error
operator|=
literal|1
expr_stmt|;
name|BUG_ON
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|cq
operator|->
name|sw_in_use
condition|)
return|return
operator|&
name|cq
operator|->
name|sw_queue
index|[
name|cq
operator|->
name|sw_cidx
index|]
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_next_cqe
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|,
name|struct
name|t4_cqe
modifier|*
modifier|*
name|cqe
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cq
operator|->
name|error
condition|)
name|ret
operator|=
operator|-
name|ENODATA
expr_stmt|;
elseif|else
if|if
condition|(
name|cq
operator|->
name|sw_in_use
condition|)
operator|*
name|cqe
operator|=
operator|&
name|cq
operator|->
name|sw_queue
index|[
name|cq
operator|->
name|sw_cidx
index|]
expr_stmt|;
else|else
name|ret
operator|=
name|t4_next_hw_cqe
argument_list|(
name|cq
argument_list|,
name|cqe
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|t4_cq_in_error
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
return|return
operator|(
operator|(
expr|struct
name|t4_status_page
operator|*
operator|)
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|size
index|]
operator|)
operator|->
name|qp_err
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|t4_set_cq_in_error
parameter_list|(
name|struct
name|t4_cq
modifier|*
name|cq
parameter_list|)
block|{
operator|(
operator|(
expr|struct
name|t4_status_page
operator|*
operator|)
operator|&
name|cq
operator|->
name|queue
index|[
name|cq
operator|->
name|size
index|]
operator|)
operator|->
name|qp_err
operator|=
literal|1
expr_stmt|;
block|}
end_function

begin_struct
struct|struct
name|t4_dev_status_page
block|{
name|u8
name|db_off
decl_stmt|;
name|u8
name|wc_supported
decl_stmt|;
name|u16
name|pad2
decl_stmt|;
name|u32
name|pad3
decl_stmt|;
name|u64
name|qp_start
decl_stmt|;
name|u64
name|qp_size
decl_stmt|;
name|u64
name|cq_start
decl_stmt|;
name|u64
name|cq_size
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

end_unit

