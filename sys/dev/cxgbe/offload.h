begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Chelsio Communications, Inc.  * All rights reserved.  * Written by: Navdeep Parhar<np@FreeBSD.org>  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__T4_OFFLOAD_H__
end_ifndef

begin_define
define|#
directive|define
name|__T4_OFFLOAD_H__
end_define

begin_comment
comment|/* XXX: flagrant misuse of mbuf fields (during tx by TOM) */
end_comment

begin_define
define|#
directive|define
name|MBUF_EQ
parameter_list|(
name|m
parameter_list|)
value|(*((void **)(&(m)->m_pkthdr.rcvif)))
end_define

begin_comment
comment|/* These have to work for !M_PKTHDR so we use a field from m_hdr. */
end_comment

begin_define
define|#
directive|define
name|MBUF_TX_CREDITS
parameter_list|(
name|m
parameter_list|)
value|((m)->m_hdr.pad[0])
end_define

begin_define
define|#
directive|define
name|MBUF_DMA_MAPPED
parameter_list|(
name|m
parameter_list|)
value|((m)->m_hdr.pad[1])
end_define

begin_define
define|#
directive|define
name|INIT_ULPTX_WR
parameter_list|(
name|w
parameter_list|,
name|wrlen
parameter_list|,
name|atomic
parameter_list|,
name|tid
parameter_list|)
value|do { \ 	(w)->wr.wr_hi = htonl(V_FW_WR_OP(FW_ULPTX_WR) | V_FW_WR_ATOMIC(atomic)); \ 	(w)->wr.wr_mid = htonl(V_FW_WR_LEN16(DIV_ROUND_UP(wrlen, 16)) | \ 			       V_FW_WR_FLOWID(tid)); \ 	(w)->wr.wr_lo = cpu_to_be64(0); \ } while (0)
end_define

begin_define
define|#
directive|define
name|INIT_TP_WR
parameter_list|(
name|w
parameter_list|,
name|tid
parameter_list|)
value|do { \ 	(w)->wr.wr_hi = htonl(V_FW_WR_OP(FW_TP_WR) | \                               V_FW_WR_IMMDLEN(sizeof(*w) - sizeof(w->wr))); \ 	(w)->wr.wr_mid = htonl(V_FW_WR_LEN16(DIV_ROUND_UP(sizeof(*w), 16)) | \                                V_FW_WR_FLOWID(tid)); \ 	(w)->wr.wr_lo = cpu_to_be64(0); \ } while (0)
end_define

begin_define
define|#
directive|define
name|INIT_TP_WR_MIT_CPL
parameter_list|(
name|w
parameter_list|,
name|cpl
parameter_list|,
name|tid
parameter_list|)
value|do { \ 	INIT_TP_WR(w, tid); \ 	OPCODE_TID(w) = htonl(MK_OPCODE_TID(cpl, tid)); \ } while (0)
end_define

begin_comment
comment|/*  * Max # of ATIDs.  The absolute HW max is 16K but we keep it lower.  */
end_comment

begin_define
define|#
directive|define
name|MAX_ATIDS
value|8192U
end_define

begin_union
union|union
name|serv_entry
block|{
name|void
modifier|*
name|data
decl_stmt|;
name|union
name|serv_entry
modifier|*
name|next
decl_stmt|;
block|}
union|;
end_union

begin_union
union|union
name|aopen_entry
block|{
name|void
modifier|*
name|data
decl_stmt|;
name|union
name|aopen_entry
modifier|*
name|next
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  * Holds the size, base address, free list start, etc of the TID, server TID,  * and active-open TID tables.  The tables themselves are allocated dynamically.  */
end_comment

begin_struct
struct|struct
name|tid_info
block|{
name|void
modifier|*
modifier|*
name|tid_tab
decl_stmt|;
name|unsigned
name|int
name|ntids
decl_stmt|;
name|union
name|serv_entry
modifier|*
name|stid_tab
decl_stmt|;
name|unsigned
name|int
name|nstids
decl_stmt|;
name|unsigned
name|int
name|stid_base
decl_stmt|;
name|union
name|aopen_entry
modifier|*
name|atid_tab
decl_stmt|;
name|unsigned
name|int
name|natids
decl_stmt|;
name|struct
name|filter_entry
modifier|*
name|ftid_tab
decl_stmt|;
name|unsigned
name|int
name|nftids
decl_stmt|;
name|unsigned
name|int
name|ftid_base
decl_stmt|;
name|unsigned
name|int
name|ftids_in_use
decl_stmt|;
name|struct
name|mtx
name|atid_lock
decl_stmt|;
name|union
name|aopen_entry
modifier|*
name|afree
decl_stmt|;
name|unsigned
name|int
name|atids_in_use
decl_stmt|;
name|struct
name|mtx
name|stid_lock
decl_stmt|;
name|union
name|serv_entry
modifier|*
name|sfree
decl_stmt|;
name|unsigned
name|int
name|stids_in_use
decl_stmt|;
name|unsigned
name|int
name|tids_in_use
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|t4_range
block|{
name|unsigned
name|int
name|start
decl_stmt|;
name|unsigned
name|int
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|t4_virt_res
block|{
comment|/* virtualized HW resources */
name|struct
name|t4_range
name|ddp
decl_stmt|;
name|struct
name|t4_range
name|iscsi
decl_stmt|;
name|struct
name|t4_range
name|stag
decl_stmt|;
name|struct
name|t4_range
name|rq
decl_stmt|;
name|struct
name|t4_range
name|pbl
decl_stmt|;
name|struct
name|t4_range
name|qp
decl_stmt|;
name|struct
name|t4_range
name|cq
decl_stmt|;
name|struct
name|t4_range
name|ocq
decl_stmt|;
block|}
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|TCP_OFFLOAD_DISABLE
end_ifndef

begin_enum
enum|enum
block|{
name|ULD_TOM
init|=
literal|1
block|, }
enum|;
end_enum

begin_struct_decl
struct_decl|struct
name|adapter
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|port_info
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|uld_info
block|{
name|SLIST_ENTRY
argument_list|(
argument|uld_info
argument_list|)
name|link
expr_stmt|;
name|int
name|refcount
decl_stmt|;
name|int
name|uld_id
decl_stmt|;
name|int
function_decl|(
modifier|*
name|attach
function_decl|)
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|detach
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|uld_softc
block|{
name|struct
name|uld_info
modifier|*
name|uld
decl_stmt|;
name|void
modifier|*
name|softc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tom_tunables
block|{
name|int
name|sndbuf
decl_stmt|;
name|int
name|ddp
decl_stmt|;
name|int
name|indsz
decl_stmt|;
name|int
name|ddp_thres
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|t4_register_uld
parameter_list|(
name|struct
name|uld_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|t4_unregister_uld
parameter_list|(
name|struct
name|uld_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

