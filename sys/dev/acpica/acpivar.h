begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2000 Mitsuru IWASAKI<iwasaki@jp.freebsd.org>  * Copyright (c) 2000 Michael Smith<msmith@freebsd.org>  * Copyright (c) 2000 BSDi  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	$FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|"bus_if.h"
end_include

begin_include
include|#
directive|include
file|<sys/eventhandler.h>
end_include

begin_include
include|#
directive|include
file|<sys/sysctl.h>
end_include

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/resource.h>
end_include

begin_struct
struct|struct
name|acpi_softc
block|{
name|device_t
name|acpi_dev
decl_stmt|;
name|dev_t
name|acpi_dev_t
decl_stmt|;
name|struct
name|resource
modifier|*
name|acpi_irq
decl_stmt|;
name|int
name|acpi_irq_rid
decl_stmt|;
name|void
modifier|*
name|acpi_irq_handle
decl_stmt|;
name|int
name|acpi_enabled
decl_stmt|;
name|int
name|acpi_sstate
decl_stmt|;
name|int
name|acpi_sleep_disabled
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|acpi_sysctl_ctx
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|acpi_sysctl_tree
decl_stmt|;
define|#
directive|define
name|ACPI_POWER_BUTTON_DEFAULT_SX
value|ACPI_STATE_S5;
define|#
directive|define
name|ACPI_SLEEP_BUTTON_DEFAULT_SX
value|ACPI_STATE_S1;
define|#
directive|define
name|ACPI_LID_SWITCH_DEFAULT_SX
value|ACPI_STATE_S1;
name|int
name|acpi_power_button_sx
decl_stmt|;
name|int
name|acpi_sleep_button_sx
decl_stmt|;
name|int
name|acpi_lid_switch_sx
decl_stmt|;
name|int
name|acpi_standby_sx
decl_stmt|;
name|int
name|acpi_suspend_sx
decl_stmt|;
name|int
name|acpi_s4bios
decl_stmt|;
name|int
name|acpi_verbose
decl_stmt|;
name|bus_dma_tag_t
name|acpi_waketag
decl_stmt|;
name|bus_dmamap_t
name|acpi_wakemap
decl_stmt|;
name|vm_offset_t
name|acpi_wakeaddr
decl_stmt|;
name|vm_offset_t
name|acpi_wakephys
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|acpi_battery_sysctl_ctx
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|acpi_battery_sysctl_tree
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|acpi_device
block|{
comment|/* ACPI ivars */
name|ACPI_HANDLE
name|ad_handle
decl_stmt|;
name|int
name|ad_magic
decl_stmt|;
name|void
modifier|*
name|ad_private
decl_stmt|;
comment|/* resources */
name|struct
name|resource_list
name|ad_rl
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The ACPI subsystem lives under a single mutex.  You *must*  * acquire this mutex before calling any of the acpi_ or Acpi* functions.  *  * XXX the ACPI_MSLEEP macro should go away once locking is resolved  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|mtx
name|acpi_mutex
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
literal|0
end_if

begin_define
define|#
directive|define
name|ACPI_LOCK
value|mtx_lock(&acpi_mutex)
end_define

begin_define
define|#
directive|define
name|ACPI_UNLOCK
value|mtx_unlock(&acpi_mutex)
end_define

begin_define
define|#
directive|define
name|ACPI_ASSERTLOCK
value|mtx_assert(&acpi_mutex, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|ACPI_MSLEEP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|)
value|msleep(a, b, c, d, e)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ACPI_LOCK
end_define

begin_define
define|#
directive|define
name|ACPI_UNLOCK
end_define

begin_define
define|#
directive|define
name|ACPI_ASSERTLOCK
end_define

begin_define
define|#
directive|define
name|ACPI_MSLEEP
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|)
value|tsleep(a, c, d, e)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * ACPI CA does not define layers for non-ACPI CA drivers.  * We define some here within the range provided.  */
end_comment

begin_define
define|#
directive|define
name|ACPI_BUS
value|0x00010000
end_define

begin_define
define|#
directive|define
name|ACPI_SYSTEM
value|0x00020000
end_define

begin_define
define|#
directive|define
name|ACPI_POWER
value|0x00040000
end_define

begin_define
define|#
directive|define
name|ACPI_EC
value|0x00080000
end_define

begin_define
define|#
directive|define
name|ACPI_AC_ADAPTER
value|0x00100000
end_define

begin_define
define|#
directive|define
name|ACPI_BATTERY
value|0x00110000
end_define

begin_define
define|#
directive|define
name|ACPI_BUTTON
value|0x00120000
end_define

begin_define
define|#
directive|define
name|ACPI_PROCESSOR
value|0x00140000
end_define

begin_define
define|#
directive|define
name|ACPI_THERMAL
value|0x00180000
end_define

begin_define
define|#
directive|define
name|ACPI_FAN
value|0x00200000
end_define

begin_comment
comment|/*  * This is a cheap and nasty way to get around the horrid counted list  * argument format that AcpiEvalateObject uses.  */
end_comment

begin_define
define|#
directive|define
name|ACPI_OBJECTLIST_MAX
value|16
end_define

begin_struct
struct|struct
name|acpi_object_list
block|{
name|UINT32
name|count
decl_stmt|;
name|ACPI_OBJECT
modifier|*
name|pointer
index|[
name|ACPI_OBJECTLIST_MAX
index|]
decl_stmt|;
name|ACPI_OBJECT
name|object
index|[
name|ACPI_OBJECTLIST_MAX
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|acpi_object_list
operator|*
name|acpi_AllocObjectList
argument_list|(
argument|int nobj
argument_list|)
block|{     struct
name|acpi_object_list
operator|*
name|l
block|;
name|int
name|i
block|;
if|if
condition|(
name|nobj
operator|>
name|ACPI_OBJECTLIST_MAX
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
operator|(
name|l
operator|=
name|AcpiOsAllocate
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|l
argument_list|)
argument_list|)
operator|)
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
end_if

begin_expr_stmt
name|bzero
argument_list|(
name|l
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|l
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ACPI_OBJECTLIST_MAX
condition|;
name|i
operator|++
control|)
name|l
operator|->
name|pointer
index|[
name|i
index|]
operator|=
operator|&
name|l
operator|->
name|object
index|[
name|i
index|]
expr_stmt|;
end_for

begin_expr_stmt
name|l
operator|->
name|count
operator|=
name|nobj
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|l
operator|)
return|;
end_return

begin_comment
unit|}
comment|/*  * Note that the low ivar values are reserved to provide  * interface compatibility with ISA drivers which can also  * attach to ACPI.  */
end_comment

begin_define
define|#
directive|define
name|ACPI_IVAR_HANDLE
value|0x100
end_define

begin_define
define|#
directive|define
name|ACPI_IVAR_MAGIC
value|0x101
end_define

begin_define
define|#
directive|define
name|ACPI_IVAR_PRIVATE
value|0x102
end_define

begin_function
unit|static
name|__inline
name|ACPI_HANDLE
name|acpi_get_handle
parameter_list|(
name|device_t
name|dev
parameter_list|)
block|{
name|uintptr_t
name|up
decl_stmt|;
name|ACPI_HANDLE
name|h
decl_stmt|;
if|if
condition|(
name|BUS_READ_IVAR
argument_list|(
name|device_get_parent
argument_list|(
name|dev
argument_list|)
argument_list|,
name|dev
argument_list|,
name|ACPI_IVAR_HANDLE
argument_list|,
operator|&
name|up
argument_list|)
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|h
operator|=
operator|(
name|ACPI_HANDLE
operator|)
name|up
expr_stmt|;
return|return
operator|(
name|h
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|acpi_set_handle
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|ACPI_HANDLE
name|h
parameter_list|)
block|{
name|uintptr_t
name|up
decl_stmt|;
name|up
operator|=
operator|(
name|uintptr_t
operator|)
name|h
expr_stmt|;
return|return
operator|(
name|BUS_WRITE_IVAR
argument_list|(
name|device_get_parent
argument_list|(
name|dev
argument_list|)
argument_list|,
name|dev
argument_list|,
name|ACPI_IVAR_HANDLE
argument_list|,
name|up
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|acpi_get_magic
parameter_list|(
name|device_t
name|dev
parameter_list|)
block|{
name|uintptr_t
name|up
decl_stmt|;
name|int
name|m
decl_stmt|;
if|if
condition|(
name|BUS_READ_IVAR
argument_list|(
name|device_get_parent
argument_list|(
name|dev
argument_list|)
argument_list|,
name|dev
argument_list|,
name|ACPI_IVAR_MAGIC
argument_list|,
operator|&
name|up
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|m
operator|=
operator|(
name|int
operator|)
name|up
expr_stmt|;
return|return
operator|(
name|m
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|acpi_set_magic
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|m
parameter_list|)
block|{
name|uintptr_t
name|up
decl_stmt|;
name|up
operator|=
operator|(
name|uintptr_t
operator|)
name|m
expr_stmt|;
return|return
operator|(
name|BUS_WRITE_IVAR
argument_list|(
name|device_get_parent
argument_list|(
name|dev
argument_list|)
argument_list|,
name|dev
argument_list|,
name|ACPI_IVAR_MAGIC
argument_list|,
name|up
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|acpi_get_private
parameter_list|(
name|device_t
name|dev
parameter_list|)
block|{
name|uintptr_t
name|up
decl_stmt|;
name|void
modifier|*
name|p
decl_stmt|;
if|if
condition|(
name|BUS_READ_IVAR
argument_list|(
name|device_get_parent
argument_list|(
name|dev
argument_list|)
argument_list|,
name|dev
argument_list|,
name|ACPI_IVAR_PRIVATE
argument_list|,
operator|&
name|up
argument_list|)
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|p
operator|=
operator|(
name|void
operator|*
operator|)
name|up
expr_stmt|;
return|return
operator|(
name|p
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|acpi_set_private
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|p
parameter_list|)
block|{
name|uintptr_t
name|up
decl_stmt|;
name|up
operator|=
operator|(
name|uintptr_t
operator|)
name|p
expr_stmt|;
return|return
operator|(
name|BUS_WRITE_IVAR
argument_list|(
name|device_get_parent
argument_list|(
name|dev
argument_list|)
argument_list|,
name|dev
argument_list|,
name|ACPI_IVAR_PRIVATE
argument_list|,
name|up
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|ACPI_OBJECT_TYPE
name|acpi_get_type
parameter_list|(
name|device_t
name|dev
parameter_list|)
block|{
name|ACPI_HANDLE
name|h
decl_stmt|;
name|ACPI_OBJECT_TYPE
name|t
decl_stmt|;
if|if
condition|(
operator|(
name|h
operator|=
name|acpi_get_handle
argument_list|(
name|dev
argument_list|)
operator|)
operator|==
name|NULL
condition|)
return|return
operator|(
name|ACPI_TYPE_NOT_FOUND
operator|)
return|;
if|if
condition|(
name|AcpiGetType
argument_list|(
name|h
argument_list|,
operator|&
name|t
argument_list|)
operator|!=
name|AE_OK
condition|)
return|return
operator|(
name|ACPI_TYPE_NOT_FOUND
operator|)
return|;
return|return
operator|(
name|t
operator|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|ENABLE_DEBUGGER
end_ifdef

begin_function_decl
specifier|extern
name|void
name|acpi_EnterDebugger
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|ACPI_DEBUG
end_ifdef

begin_include
include|#
directive|include
file|<sys/cons.h>
end_include

begin_define
define|#
directive|define
name|STEP
parameter_list|(
name|x
parameter_list|)
value|do {printf x, printf("\n"); cngetc();} while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|STEP
parameter_list|(
name|x
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ACPI_VPRINT
parameter_list|(
name|dev
parameter_list|,
name|acpi_sc
parameter_list|,
name|x
modifier|...
parameter_list|)
value|do {				\ 	if (acpi_get_verbose(acpi_sc))					\ 		device_printf(dev, x);					\ } while (0)
end_define

begin_define
define|#
directive|define
name|ACPI_DEVINFO_PRESENT
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0x9) == 9)
end_define

begin_function_decl
specifier|extern
name|BOOLEAN
name|acpi_DeviceIsPresent
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BOOLEAN
name|acpi_BatteryIsPresent
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BOOLEAN
name|acpi_MatchHid
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|char
modifier|*
name|hid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_GetHandleInScope
parameter_list|(
name|ACPI_HANDLE
name|parent
parameter_list|,
name|char
modifier|*
name|path
parameter_list|,
name|ACPI_HANDLE
modifier|*
name|result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_BUFFER
modifier|*
name|acpi_AllocBuffer
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_EvaluateInteger
parameter_list|(
name|ACPI_HANDLE
name|handle
parameter_list|,
name|char
modifier|*
name|path
parameter_list|,
name|int
modifier|*
name|number
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_ConvertBufferToInteger
parameter_list|(
name|ACPI_BUFFER
modifier|*
name|bufp
parameter_list|,
name|int
modifier|*
name|number
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_ForeachPackageObject
parameter_list|(
name|ACPI_OBJECT
modifier|*
name|obj
parameter_list|,
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|ACPI_OBJECT
modifier|*
name|comp
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_FindIndexedResource
parameter_list|(
name|ACPI_BUFFER
modifier|*
name|buf
parameter_list|,
name|int
name|index
parameter_list|,
name|ACPI_RESOURCE
modifier|*
modifier|*
name|resp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_AppendBufferResource
parameter_list|(
name|ACPI_BUFFER
modifier|*
name|buf
parameter_list|,
name|ACPI_RESOURCE
modifier|*
name|res
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_SetSleepState
parameter_list|(
name|struct
name|acpi_softc
modifier|*
name|sc
parameter_list|,
name|int
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_Enable
parameter_list|(
name|struct
name|acpi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_Disable
parameter_list|(
name|struct
name|acpi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|acpi_parse_resource_set
block|{
name|void
function_decl|(
modifier|*
name|set_init
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
modifier|*
name|context
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_done
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_ioport
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|u_int32_t
name|base
parameter_list|,
name|u_int32_t
name|length
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_iorange
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|u_int32_t
name|low
parameter_list|,
name|u_int32_t
name|high
parameter_list|,
name|u_int32_t
name|length
parameter_list|,
name|u_int32_t
name|align
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_memory
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|u_int32_t
name|base
parameter_list|,
name|u_int32_t
name|length
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_memoryrange
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|u_int32_t
name|low
parameter_list|,
name|u_int32_t
name|high
parameter_list|,
name|u_int32_t
name|length
parameter_list|,
name|u_int32_t
name|align
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_irq
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|u_int32_t
modifier|*
name|irq
parameter_list|,
name|int
name|cout
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_drq
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|u_int32_t
modifier|*
name|drq
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_start_dependant
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|int
name|preference
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_end_dependant
function_decl|)
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|acpi_parse_resource_set
name|acpi_res_parse_set
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_parse_resources
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|ACPI_HANDLE
name|handle
parameter_list|,
name|struct
name|acpi_parse_resource_set
modifier|*
name|set
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* XXX until Intel fix this in their headers, based on NEXT_RESOURCE */
end_comment

begin_define
define|#
directive|define
name|ACPI_RESOURCE_NEXT
parameter_list|(
name|Res
parameter_list|)
value|(ACPI_RESOURCE *)((UINT8 *) Res + Res->Length)
end_define

begin_comment
comment|/*   * ACPI event handling  */
end_comment

begin_function_decl
specifier|extern
name|UINT32
name|acpi_eventhandler_power_button_for_sleep
parameter_list|(
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|UINT32
name|acpi_eventhandler_power_button_for_wakeup
parameter_list|(
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|UINT32
name|acpi_eventhandler_sleep_button_for_sleep
parameter_list|(
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|UINT32
name|acpi_eventhandler_sleep_button_for_wakeup
parameter_list|(
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|ACPI_EVENT_PRI_FIRST
value|0
end_define

begin_define
define|#
directive|define
name|ACPI_EVENT_PRI_DEFAULT
value|10000
end_define

begin_define
define|#
directive|define
name|ACPI_EVENT_PRI_LAST
value|20000
end_define

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|acpi_event_handler_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
name|EVENTHANDLER_DECLARE
argument_list|(
name|acpi_sleep_event
argument_list|,
name|acpi_event_handler_t
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|EVENTHANDLER_DECLARE
argument_list|(
name|acpi_wakeup_event
argument_list|,
name|acpi_event_handler_t
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * Device power control.  */
end_comment

begin_function_decl
specifier|extern
name|ACPI_STATUS
name|acpi_pwr_switch_consumer
parameter_list|(
name|ACPI_HANDLE
name|consumer
parameter_list|,
name|int
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*   * Misc.   */
end_comment

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|acpi_softc
operator|*
name|acpi_device_get_parent_softc
argument_list|(
argument|device_t child
argument_list|)
block|{
name|device_t
name|parent
block|;
name|parent
operator|=
name|device_get_parent
argument_list|(
name|child
argument_list|)
block|;
if|if
condition|(
name|parent
operator|==
name|NULL
condition|)
block|{
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_expr_stmt

begin_return
return|return
operator|(
name|device_get_softc
argument_list|(
name|parent
argument_list|)
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|int
name|acpi_get_verbose
parameter_list|(
name|struct
name|acpi_softc
modifier|*
name|sc
parameter_list|)
block|{
if|if
condition|(
name|sc
condition|)
return|return
operator|(
name|sc
operator|->
name|acpi_verbose
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function_decl
specifier|extern
name|char
modifier|*
name|acpi_name
parameter_list|(
name|ACPI_HANDLE
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|acpi_avoid
parameter_list|(
name|ACPI_HANDLE
name|handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|acpi_disabled
parameter_list|(
name|char
modifier|*
name|subsys
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|acpi_device_enable_wake_capability
parameter_list|(
name|ACPI_HANDLE
name|h
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|acpi_device_enable_wake_event
parameter_list|(
name|ACPI_HANDLE
name|h
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|acpi_machdep_init
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|acpi_install_wakeup_handler
parameter_list|(
name|struct
name|acpi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|acpi_sleep_machdep
parameter_list|(
name|struct
name|acpi_softc
modifier|*
name|sc
parameter_list|,
name|int
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Battery Abstraction.  */
end_comment

begin_struct_decl
struct_decl|struct
name|acpi_battinfo
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|acpi_battdesc
struct_decl|;
end_struct_decl

begin_function_decl
specifier|extern
name|int
name|acpi_battery_register
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|acpi_battery_get_battinfo
parameter_list|(
name|int
parameter_list|,
name|struct
name|acpi_battinfo
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|acpi_battery_get_units
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|acpi_battery_get_info_expire
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|acpi_battery_get_battdesc
parameter_list|(
name|int
parameter_list|,
name|struct
name|acpi_battdesc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|acpi_cmbat_get_battinfo
parameter_list|(
name|int
parameter_list|,
name|struct
name|acpi_battinfo
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * AC adapter interface.  */
end_comment

begin_function_decl
specifier|extern
name|int
name|acpi_acad_get_acline
parameter_list|(
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|ACPI_MAX_THREADS
argument_list|)
operator|&&
name|ACPI_MAX_THREADS
operator|>
literal|0
end_if

begin_comment
comment|/*  * ACPI task kernel thread initialization.  */
end_comment

begin_function_decl
specifier|extern
name|int
name|acpi_task_thread_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

