begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007 Bruce M. Simpson.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SIBA_SIBAVAR_H_
end_ifndef

begin_define
define|#
directive|define
name|_SIBA_SIBAVAR_H_
end_define

begin_include
include|#
directive|include
file|<sys/rman.h>
end_include

begin_struct_decl
struct_decl|struct
name|siba_softc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|siba_dev_softc
struct_decl|;
end_struct_decl

begin_enum
enum|enum
name|siba_device_ivars
block|{
name|SIBA_IVAR_VENDOR
block|,
name|SIBA_IVAR_DEVICE
block|,
name|SIBA_IVAR_REVID
block|,
name|SIBA_IVAR_CORE_INDEX
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|SIBA_ACCESSOR
parameter_list|(
name|var
parameter_list|,
name|ivar
parameter_list|,
name|type
parameter_list|)
define|\
value|__BUS_ACCESSOR(siba, var, SIBA, ivar, type)
end_define

begin_macro
name|SIBA_ACCESSOR
argument_list|(
argument|vendor
argument_list|,
argument|VENDOR
argument_list|,
argument|uint16_t
argument_list|)
end_macro

begin_macro
name|SIBA_ACCESSOR
argument_list|(
argument|device
argument_list|,
argument|DEVICE
argument_list|,
argument|uint16_t
argument_list|)
end_macro

begin_macro
name|SIBA_ACCESSOR
argument_list|(
argument|revid
argument_list|,
argument|REVID
argument_list|,
argument|uint8_t
argument_list|)
end_macro

begin_expr_stmt
name|SIBA_ACCESSOR
argument_list|(
name|core_index
argument_list|,
name|CORE_INDEX
argument_list|,
name|uint8_t
argument_list|)
undef|#
directive|undef
name|SIBA_ACCESSOR
comment|/* XXX just for SPROM1? */
expr|enum
block|{
name|SIBA_CCODE_WORLD
block|,
name|SIBA_CCODE_THAILAND
block|,
name|SIBA_CCODE_ISRAEL
block|,
name|SIBA_CCODE_JORDAN
block|,
name|SIBA_CCODE_CHINA
block|,
name|SIBA_CCODE_JAPAN
block|,
name|SIBA_CCODE_USA_CANADA_ANZ
block|,
name|SIBA_CCODE_EUROPE
block|,
name|SIBA_CCODE_USA_LOW
block|,
name|SIBA_CCODE_JAPAN_HIGH
block|,
name|SIBA_CCODE_ALL
block|,
name|SIBA_CCODE_NONE
block|, }
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|siba_mips_read_2
parameter_list|(
name|sc
parameter_list|,
name|core
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_space_read_2((sc)->siba_mem_bt, (sc)->siba_mem_bh,	\ 			 (core * SIBA_CORE_LEN) + (reg))
end_define

begin_define
define|#
directive|define
name|siba_mips_read_4
parameter_list|(
name|sc
parameter_list|,
name|core
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_space_read_4((sc)->siba_mem_bt, (sc)->siba_mem_bh,	\ 			 (core * SIBA_CORE_LEN) + (reg))
end_define

begin_define
define|#
directive|define
name|siba_mips_write_2
parameter_list|(
name|sc
parameter_list|,
name|core
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_space_write_2((sc)->siba_mem_bt, (sc)->siba_mem_bh,	\ 			 (core * SIBA_CORE_LEN) + (reg), (val))
end_define

begin_define
define|#
directive|define
name|siba_mips_write_4
parameter_list|(
name|sc
parameter_list|,
name|core
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_space_write_4((sc)->siba_mem_bt, (sc)->siba_mem_bh,	\ 			 (core * SIBA_CORE_LEN) + (reg), (val))
end_define

begin_define
define|#
directive|define
name|SIBA_READ_4
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_space_read_4((siba)->siba_mem_bt, (siba)->siba_mem_bh, (reg))
end_define

begin_define
define|#
directive|define
name|SIBA_READ_2
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_space_read_2((siba)->siba_mem_bt, (siba)->siba_mem_bh, (reg))
end_define

begin_define
define|#
directive|define
name|SIBA_READ_MULTI_1
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|addr
parameter_list|,
name|count
parameter_list|)
define|\
value|bus_space_read_multi_1((siba)->siba_mem_bt, (siba)->siba_mem_bh,\ 	    (reg), (addr), (count))
end_define

begin_define
define|#
directive|define
name|SIBA_READ_MULTI_2
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|addr
parameter_list|,
name|count
parameter_list|)
define|\
value|bus_space_read_multi_2((siba)->siba_mem_bt, (siba)->siba_mem_bh,\ 	    (reg), (addr), (count))
end_define

begin_define
define|#
directive|define
name|SIBA_READ_MULTI_4
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|addr
parameter_list|,
name|count
parameter_list|)
define|\
value|bus_space_read_multi_4((siba)->siba_mem_bt, (siba)->siba_mem_bh,\ 	    (reg), (addr), (count))
end_define

begin_define
define|#
directive|define
name|SIBA_WRITE_4
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_space_write_4((siba)->siba_mem_bt, (siba)->siba_mem_bh,	\ 	    (reg), (val))
end_define

begin_define
define|#
directive|define
name|SIBA_WRITE_2
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_space_write_2((siba)->siba_mem_bt, (siba)->siba_mem_bh,	\ 	    (reg), (val))
end_define

begin_define
define|#
directive|define
name|SIBA_WRITE_MULTI_1
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|addr
parameter_list|,
name|count
parameter_list|)
define|\
value|bus_space_write_multi_1((siba)->siba_mem_bt, (siba)->siba_mem_bh,\ 	    (reg), (addr), (count))
end_define

begin_define
define|#
directive|define
name|SIBA_WRITE_MULTI_2
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|addr
parameter_list|,
name|count
parameter_list|)
define|\
value|bus_space_write_multi_2((siba)->siba_mem_bt, (siba)->siba_mem_bh,\ 	    (reg), (addr), (count))
end_define

begin_define
define|#
directive|define
name|SIBA_WRITE_MULTI_4
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|addr
parameter_list|,
name|count
parameter_list|)
define|\
value|bus_space_write_multi_4((siba)->siba_mem_bt, (siba)->siba_mem_bh,\ 	    (reg), (addr), (count))
end_define

begin_define
define|#
directive|define
name|SIBA_BARRIER
parameter_list|(
name|siba
parameter_list|,
name|flags
parameter_list|)
define|\
value|bus_space_barrier((siba)->siba_mem_bt, (siba)->siba_mem_bh, (0),\ 	    (0), (flags))
end_define

begin_define
define|#
directive|define
name|SIBA_SETBITS_4
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|bits
parameter_list|)
define|\
value|SIBA_WRITE_4((siba), (reg), SIBA_READ_4((siba), (reg)) | (bits))
end_define

begin_define
define|#
directive|define
name|SIBA_SETBITS_2
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|bits
parameter_list|)
define|\
value|SIBA_WRITE_2((siba), (reg), SIBA_READ_2((siba), (reg)) | (bits))
end_define

begin_define
define|#
directive|define
name|SIBA_FILT_SETBITS_4
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|filt
parameter_list|,
name|bits
parameter_list|)
define|\
value|SIBA_WRITE_4((siba), (reg), (SIBA_READ_4((siba),	\ 	    (reg))& (filt)) | (bits))
end_define

begin_define
define|#
directive|define
name|SIBA_FILT_SETBITS_2
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|filt
parameter_list|,
name|bits
parameter_list|)
define|\
value|SIBA_WRITE_2((siba), (reg), (SIBA_READ_2((siba),	\ 	    (reg))& (filt)) | (bits))
end_define

begin_define
define|#
directive|define
name|SIBA_CLRBITS_4
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|bits
parameter_list|)
define|\
value|SIBA_WRITE_4((siba), (reg), SIBA_READ_4((siba), (reg))& ~(bits))
end_define

begin_define
define|#
directive|define
name|SIBA_CLRBITS_2
parameter_list|(
name|siba
parameter_list|,
name|reg
parameter_list|,
name|bits
parameter_list|)
define|\
value|SIBA_WRITE_2((siba), (reg), SIBA_READ_2((siba), (reg))& ~(bits))
end_define

begin_define
define|#
directive|define
name|SIBA_CC_READ32
parameter_list|(
name|scc
parameter_list|,
name|offset
parameter_list|)
define|\
value|siba_read_4((scc)->scc_dev, offset)
end_define

begin_define
define|#
directive|define
name|SIBA_CC_WRITE32
parameter_list|(
name|scc
parameter_list|,
name|offset
parameter_list|,
name|val
parameter_list|)
define|\
value|siba_write_4((scc)->scc_dev, offset, val)
end_define

begin_define
define|#
directive|define
name|SIBA_CC_MASK32
parameter_list|(
name|scc
parameter_list|,
name|offset
parameter_list|,
name|mask
parameter_list|)
define|\
value|SIBA_CC_WRITE32(scc, offset, SIBA_CC_READ32(scc, offset)& (mask))
end_define

begin_define
define|#
directive|define
name|SIBA_CC_SET32
parameter_list|(
name|scc
parameter_list|,
name|offset
parameter_list|,
name|set
parameter_list|)
define|\
value|SIBA_CC_WRITE32(scc, offset, SIBA_CC_READ32(scc, offset) | (set))
end_define

begin_define
define|#
directive|define
name|SIBA_CC_MASKSET32
parameter_list|(
name|scc
parameter_list|,
name|offset
parameter_list|,
name|mask
parameter_list|,
name|set
parameter_list|)
define|\
value|SIBA_CC_WRITE32(scc, offset,			\ 	    (SIBA_CC_READ32(scc, offset)& (mask)) | (set))
end_define

begin_enum
enum|enum
name|siba_type
block|{
name|SIBA_TYPE_SSB
block|,
name|SIBA_TYPE_PCI
block|,
name|SIBA_TYPE_PCMCIA
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|siba_clock
block|{
name|SIBA_CLOCK_DYNAMIC
block|,
name|SIBA_CLOCK_SLOW
block|,
name|SIBA_CLOCK_FAST
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|siba_clksrc
block|{
name|SIBA_CC_CLKSRC_PCI
block|,
name|SIBA_CC_CLKSRC_CRYSTAL
block|,
name|SIBA_CC_CLKSRC_LOWPW
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|siba_cc_pmu0_plltab
block|{
name|uint16_t
name|freq
decl_stmt|;
comment|/* in kHz.*/
name|uint8_t
name|xf
decl_stmt|;
comment|/* crystal frequency */
name|uint8_t
name|wb_int
decl_stmt|;
name|uint32_t
name|wb_frac
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|siba_cc_pmu1_plltab
block|{
name|uint16_t
name|freq
decl_stmt|;
name|uint8_t
name|xf
decl_stmt|;
name|uint8_t
name|p1div
decl_stmt|;
name|uint8_t
name|p2div
decl_stmt|;
name|uint8_t
name|ndiv_int
decl_stmt|;
name|uint32_t
name|ndiv_frac
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|siba_cc_pmu_res_updown
block|{
name|uint8_t
name|res
decl_stmt|;
name|uint16_t
name|updown
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SIBA_CC_PMU_DEP_SET
value|1
end_define

begin_define
define|#
directive|define
name|SIBA_CC_PMU_DEP_ADD
value|2
end_define

begin_define
define|#
directive|define
name|SIBA_CC_PMU_DEP_REMOVE
value|3
end_define

begin_struct
struct|struct
name|siba_cc_pmu_res_depend
block|{
name|uint8_t
name|res
decl_stmt|;
name|uint8_t
name|task
decl_stmt|;
name|uint32_t
name|depend
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|siba_sprom
block|{
name|uint8_t
name|rev
decl_stmt|;
comment|/* revision */
name|uint8_t
name|mac_80211bg
index|[
literal|6
index|]
decl_stmt|;
comment|/* address for 802.11b/g */
name|uint8_t
name|mac_eth
index|[
literal|6
index|]
decl_stmt|;
comment|/* address for Ethernet */
name|uint8_t
name|mac_80211a
index|[
literal|6
index|]
decl_stmt|;
comment|/* address for 802.11a */
name|uint8_t
name|mii_eth0
decl_stmt|;
comment|/* MII address for eth0 */
name|uint8_t
name|mii_eth1
decl_stmt|;
comment|/* MII address for eth1 */
name|uint8_t
name|mdio_eth0
decl_stmt|;
comment|/* MDIO for eth0 */
name|uint8_t
name|mdio_eth1
decl_stmt|;
comment|/* MDIO for eth1 */
name|uint8_t
name|brev
decl_stmt|;
comment|/* board revision */
name|uint8_t
name|ccode
decl_stmt|;
comment|/* Country Code */
name|uint8_t
name|ant_a
decl_stmt|;
comment|/* A-PHY antenna */
name|uint8_t
name|ant_bg
decl_stmt|;
comment|/* B/G-PHY antenna */
name|uint16_t
name|pa0b0
decl_stmt|;
name|uint16_t
name|pa0b1
decl_stmt|;
name|uint16_t
name|pa0b2
decl_stmt|;
name|uint16_t
name|pa1b0
decl_stmt|;
name|uint16_t
name|pa1b1
decl_stmt|;
name|uint16_t
name|pa1b2
decl_stmt|;
name|uint16_t
name|pa1lob0
decl_stmt|;
name|uint16_t
name|pa1lob1
decl_stmt|;
name|uint16_t
name|pa1lob2
decl_stmt|;
name|uint16_t
name|pa1hib0
decl_stmt|;
name|uint16_t
name|pa1hib1
decl_stmt|;
name|uint16_t
name|pa1hib2
decl_stmt|;
name|uint8_t
name|gpio0
decl_stmt|;
name|uint8_t
name|gpio1
decl_stmt|;
name|uint8_t
name|gpio2
decl_stmt|;
name|uint8_t
name|gpio3
decl_stmt|;
name|uint16_t
name|maxpwr_al
decl_stmt|;
name|uint16_t
name|maxpwr_a
decl_stmt|;
comment|/* A-PHY Max Power */
name|uint16_t
name|maxpwr_ah
decl_stmt|;
name|uint16_t
name|maxpwr_bg
decl_stmt|;
comment|/* BG-PHY Max Power */
name|uint8_t
name|rxpo2g
decl_stmt|;
name|uint8_t
name|rxpo5g
decl_stmt|;
name|uint8_t
name|tssi_a
decl_stmt|;
comment|/* Idle TSSI */
name|uint8_t
name|tssi_bg
decl_stmt|;
comment|/* Idle TSSI */
name|uint8_t
name|tri2g
decl_stmt|;
name|uint8_t
name|tri5gl
decl_stmt|;
name|uint8_t
name|tri5g
decl_stmt|;
name|uint8_t
name|tri5gh
decl_stmt|;
name|uint8_t
name|rssisav2g
decl_stmt|;
name|uint8_t
name|rssismc2g
decl_stmt|;
name|uint8_t
name|rssismf2g
decl_stmt|;
name|uint8_t
name|bxa2g
decl_stmt|;
name|uint8_t
name|rssisav5g
decl_stmt|;
name|uint8_t
name|rssismc5g
decl_stmt|;
name|uint8_t
name|rssismf5g
decl_stmt|;
name|uint8_t
name|bxa5g
decl_stmt|;
name|uint16_t
name|cck2gpo
decl_stmt|;
name|uint32_t
name|ofdm2gpo
decl_stmt|;
name|uint32_t
name|ofdm5glpo
decl_stmt|;
name|uint32_t
name|ofdm5gpo
decl_stmt|;
name|uint32_t
name|ofdm5ghpo
decl_stmt|;
name|uint16_t
name|bf_lo
decl_stmt|;
comment|/* boardflags */
name|uint16_t
name|bf_hi
decl_stmt|;
comment|/* boardflags */
name|uint16_t
name|bf2_lo
decl_stmt|;
name|uint16_t
name|bf2_hi
decl_stmt|;
struct|struct
block|{
struct|struct
block|{
name|int8_t
name|a0
decl_stmt|,
name|a1
decl_stmt|,
name|a2
decl_stmt|,
name|a3
decl_stmt|;
block|}
name|ghz24
struct|;
struct|struct
block|{
name|int8_t
name|a0
decl_stmt|,
name|a1
decl_stmt|,
name|a2
decl_stmt|,
name|a3
decl_stmt|;
block|}
name|ghz5
struct|;
block|}
name|again
struct|;
comment|/* antenna gain */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SIBA_LDO_PAREF
value|0
end_define

begin_define
define|#
directive|define
name|SIBA_LDO_VOLT1
value|1
end_define

begin_define
define|#
directive|define
name|SIBA_LDO_VOLT2
value|2
end_define

begin_define
define|#
directive|define
name|SIBA_LDO_VOLT3
value|3
end_define

begin_struct
struct|struct
name|siba_cc_pmu
block|{
name|uint8_t
name|rev
decl_stmt|;
comment|/* PMU rev */
name|uint32_t
name|freq
decl_stmt|;
comment|/* crystal freq in kHz */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|siba_cc
block|{
name|struct
name|siba_dev_softc
modifier|*
name|scc_dev
decl_stmt|;
name|uint32_t
name|scc_caps
decl_stmt|;
name|struct
name|siba_cc_pmu
name|scc_pmu
decl_stmt|;
name|uint16_t
name|scc_powerup_delay
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|siba_pci
block|{
name|struct
name|siba_dev_softc
modifier|*
name|spc_dev
decl_stmt|;
name|uint8_t
name|spc_inited
decl_stmt|;
name|uint8_t
name|spc_hostmode
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|siba_bus_ops
block|{
name|uint16_t
function_decl|(
modifier|*
name|read_2
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|read_4
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|write_2
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|write_4
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|read_multi_1
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|read_multi_2
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|read_multi_4
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|write_multi_1
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|write_multi_2
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|write_multi_4
function_decl|)
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|siba_dev_softc
block|{
name|struct
name|siba_softc
modifier|*
name|sd_bus
decl_stmt|;
name|struct
name|siba_devid
name|sd_id
decl_stmt|;
specifier|const
name|struct
name|siba_bus_ops
modifier|*
name|sd_ops
decl_stmt|;
name|uint8_t
name|sd_coreidx
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|siba_devinfo
block|{
name|struct
name|resource_list
name|sdi_rl
decl_stmt|;
comment|/*devhandle_t			 sdi_devhandle; XXX*/
comment|/*struct rman sdi_intr_rman;*/
comment|/* Accessors are needed for ivars below. */
name|uint16_t
name|sdi_vid
decl_stmt|;
name|uint16_t
name|sdi_devid
decl_stmt|;
name|uint8_t
name|sdi_rev
decl_stmt|;
name|uint8_t
name|sdi_idx
decl_stmt|;
comment|/* core index on bus */
name|uint8_t
name|sdi_irq
decl_stmt|;
comment|/* TODO */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|siba_softc
block|{
comment|/* 	 * common variables which used for siba(4) bus and siba_bwn bridge. 	 */
name|device_t
name|siba_dev
decl_stmt|;
comment|/* Device ID */
name|struct
name|resource
modifier|*
name|siba_mem_res
decl_stmt|;
name|bus_space_tag_t
name|siba_mem_bt
decl_stmt|;
name|bus_space_handle_t
name|siba_mem_bh
decl_stmt|;
name|bus_addr_t
name|siba_maddr
decl_stmt|;
name|bus_size_t
name|siba_msize
decl_stmt|;
name|uint8_t
name|siba_ncores
decl_stmt|;
comment|/* 	 * the following variables are only used for siba_bwn bridge. 	 */
name|enum
name|siba_type
name|siba_type
decl_stmt|;
name|int
name|siba_invalid
decl_stmt|;
name|struct
name|siba_dev_softc
modifier|*
name|siba_curdev
decl_stmt|;
comment|/* only for PCI */
name|struct
name|siba_dev_softc
name|siba_devs
index|[
name|SIBA_MAX_CORES
index|]
decl_stmt|;
name|int
name|siba_ndevs
decl_stmt|;
name|uint16_t
name|siba_pci_vid
decl_stmt|;
name|uint16_t
name|siba_pci_did
decl_stmt|;
name|uint16_t
name|siba_pci_subvid
decl_stmt|;
name|uint16_t
name|siba_pci_subdid
decl_stmt|;
name|int
name|siba_mem_rid
decl_stmt|;
name|uint16_t
name|siba_chipid
decl_stmt|;
comment|/* for CORE 0 */
name|uint16_t
name|siba_chiprev
decl_stmt|;
name|uint8_t
name|siba_chippkg
decl_stmt|;
name|struct
name|siba_cc
name|siba_cc
decl_stmt|;
comment|/* ChipCommon */
name|struct
name|siba_pci
name|siba_pci
decl_stmt|;
comment|/* PCI-core */
specifier|const
name|struct
name|siba_bus_ops
modifier|*
name|siba_ops
decl_stmt|;
comment|/* board informations */
name|uint16_t
name|siba_board_vendor
decl_stmt|;
name|uint16_t
name|siba_board_type
decl_stmt|;
name|uint16_t
name|siba_board_rev
decl_stmt|;
name|struct
name|siba_sprom
name|siba_sprom
decl_stmt|;
comment|/* SPROM */
name|uint16_t
name|siba_spromsize
decl_stmt|;
comment|/* in word size */
block|}
struct|;
end_struct

begin_function_decl
name|void
name|siba_powerup
parameter_list|(
name|struct
name|siba_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint16_t
name|siba_read_2
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_write_2
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|siba_read_4
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_write_4
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_dev_up
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_dev_down
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|siba_powerdown
parameter_list|(
name|struct
name|siba_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|siba_dev_isup
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_pcicore_intr
parameter_list|(
name|struct
name|siba_pci
modifier|*
parameter_list|,
name|struct
name|siba_dev_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|siba_dma_translation
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|siba_dma_alloc_consistent
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|bus_addr_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_read_multi_1
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_read_multi_2
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_read_multi_4
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_write_multi_1
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_write_multi_2
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_write_multi_4
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_barrier
parameter_list|(
name|struct
name|siba_dev_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_cc_pmu_set_ldovolt
parameter_list|(
name|struct
name|siba_cc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|siba_cc_pmu_set_ldoparef
parameter_list|(
name|struct
name|siba_cc
modifier|*
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SIBA_SIBAVAR_H_ */
end_comment

end_unit

