begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (C) 2009-2011 Semihalf.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEV_CESA_H_
end_ifndef

begin_define
define|#
directive|define
name|_DEV_CESA_H_
end_define

begin_comment
comment|/* Maximum number of allocated sessions */
end_comment

begin_define
define|#
directive|define
name|CESA_SESSIONS
value|64
end_define

begin_comment
comment|/* Maximum number of queued requests */
end_comment

begin_define
define|#
directive|define
name|CESA_REQUESTS
value|256
end_define

begin_comment
comment|/*  * CESA is able to process data only in CESA SRAM, which is quite small (2 kB).  * We have to fit a packet there, which contains SA descriptor, keys, IV  * and data to be processed. Every request must be converted into chain of  * packets and each packet can hold about 1.75 kB of data.  *  * To process each packet we need at least 1 SA descriptor and at least 4 TDMA  * descriptors. However there are cases when we use 2 SA and 8 TDMA descriptors  * per packet. Number of used TDMA descriptors can increase beyond given values  * if data in the request is fragmented in physical memory.  *  * The driver uses preallocated SA and TDMA descriptors pools to get best  * performace. Size of these pools should match expected request size. Example:  *  * Expected average request size:			1.5 kB (Ethernet MTU)  * Packets per average request:				(1.5 kB / 1.75 kB) = 1  * SA decriptors per average request (worst case):	1 * 2 = 2  * TDMA desctiptors per average request (worst case):	1 * 8 = 8  *  * More TDMA descriptors should be allocated, if data fragmentation is expected  * (for example while processing mbufs larger than MCLBYTES). The driver may use  * 2 additional TDMA descriptors per each discontinuity in the physical data  * layout.  */
end_comment

begin_comment
comment|/* Values below are optimized for requests containing about 1.5 kB of data */
end_comment

begin_define
define|#
directive|define
name|CESA_SA_DESC_PER_REQ
value|2
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_DESC_PER_REQ
value|8
end_define

begin_define
define|#
directive|define
name|CESA_SA_DESCRIPTORS
value|(CESA_SA_DESC_PER_REQ * CESA_REQUESTS)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_DESCRIPTORS
value|(CESA_TDMA_DESC_PER_REQ * CESA_REQUESTS)
end_define

begin_comment
comment|/* Useful constants */
end_comment

begin_define
define|#
directive|define
name|CESA_HMAC_HASH_LENGTH
value|12
end_define

begin_define
define|#
directive|define
name|CESA_MAX_FRAGMENTS
value|64
end_define

begin_define
define|#
directive|define
name|CESA_SRAM_SIZE
value|2048
end_define

begin_comment
comment|/*  * CESA_MAX_HASH_LEN is maximum length of hash generated by CESA.  * As CESA suports only MD5 and SHA1 this equals to 20 bytes.  * However we increase the value to 24 bytes to meet alignment  * requirements in cesa_sa_data structure.  */
end_comment

begin_define
define|#
directive|define
name|CESA_MAX_HASH_LEN
value|24
end_define

begin_define
define|#
directive|define
name|CESA_MAX_KEY_LEN
value|32
end_define

begin_define
define|#
directive|define
name|CESA_MAX_IV_LEN
value|16
end_define

begin_define
define|#
directive|define
name|CESA_MAX_HMAC_BLOCK_LEN
value|64
end_define

begin_define
define|#
directive|define
name|CESA_MAX_MKEY_LEN
value|CESA_MAX_HMAC_BLOCK_LEN
end_define

begin_define
define|#
directive|define
name|CESA_MAX_PACKET_SIZE
value|(CESA_SRAM_SIZE - CESA_DATA(0))
end_define

begin_define
define|#
directive|define
name|CESA_MAX_REQUEST_SIZE
value|65535
end_define

begin_comment
comment|/* Locking macros */
end_comment

begin_define
define|#
directive|define
name|CESA_LOCK
parameter_list|(
name|sc
parameter_list|,
name|what
parameter_list|)
value|mtx_lock(&(sc)->sc_ ## what ## _lock)
end_define

begin_define
define|#
directive|define
name|CESA_UNLOCK
parameter_list|(
name|sc
parameter_list|,
name|what
parameter_list|)
value|mtx_unlock(&(sc)->sc_ ## what ## _lock)
end_define

begin_define
define|#
directive|define
name|CESA_LOCK_ASSERT
parameter_list|(
name|sc
parameter_list|,
name|what
parameter_list|)
define|\
value|mtx_assert(&(sc)->sc_ ## what ## _lock, MA_OWNED)
end_define

begin_comment
comment|/* Registers read/write macros */
end_comment

begin_define
define|#
directive|define
name|CESA_READ
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_space_read_4((sc)->sc_bst, (sc)->sc_bsh, (reg))
end_define

begin_define
define|#
directive|define
name|CESA_WRITE
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_space_write_4((sc)->sc_bst, (sc)->sc_bsh, (reg), (val))
end_define

begin_comment
comment|/* Generic allocator for objects */
end_comment

begin_define
define|#
directive|define
name|CESA_GENERIC_ALLOC_LOCKED
parameter_list|(
name|sc
parameter_list|,
name|obj
parameter_list|,
name|pool
parameter_list|)
value|do {		\ 	CESA_LOCK(sc, pool);					\ 								\ 	if (STAILQ_EMPTY(&(sc)->sc_free_ ## pool))		\ 		obj = NULL;					\ 	else {							\ 		obj = STAILQ_FIRST(&(sc)->sc_free_ ## pool);	\ 		STAILQ_REMOVE_HEAD(&(sc)->sc_free_ ## pool,	\ 		    obj ## _stq);				\ 	}							\ 								\ 	CESA_UNLOCK(sc, pool);					\ } while (0)
end_define

begin_define
define|#
directive|define
name|CESA_GENERIC_FREE_LOCKED
parameter_list|(
name|sc
parameter_list|,
name|obj
parameter_list|,
name|pool
parameter_list|)
value|do {		\ 	CESA_LOCK(sc, pool);					\ 	STAILQ_INSERT_TAIL(&(sc)->sc_free_ ## pool, obj,	\ 	    obj ## _stq);					\ 	CESA_UNLOCK(sc, pool);					\ } while (0)
end_define

begin_comment
comment|/* CESA SRAM offset calculation macros */
end_comment

begin_define
define|#
directive|define
name|CESA_SA_DATA
parameter_list|(
name|member
parameter_list|)
define|\
value|(sizeof(struct cesa_sa_hdesc) + offsetof(struct cesa_sa_data, member))
end_define

begin_define
define|#
directive|define
name|CESA_DATA
parameter_list|(
name|offset
parameter_list|)
define|\
value|(sizeof(struct cesa_sa_hdesc) + sizeof(struct cesa_sa_data) + offset)
end_define

begin_struct
struct|struct
name|cesa_tdma_hdesc
block|{
name|uint16_t
name|cthd_byte_count
decl_stmt|;
name|uint16_t
name|cthd_flags
decl_stmt|;
name|uint32_t
name|cthd_src
decl_stmt|;
name|uint32_t
name|cthd_dst
decl_stmt|;
name|uint32_t
name|cthd_next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_sa_hdesc
block|{
name|uint32_t
name|cshd_config
decl_stmt|;
name|uint16_t
name|cshd_enc_src
decl_stmt|;
name|uint16_t
name|cshd_enc_dst
decl_stmt|;
name|uint32_t
name|cshd_enc_dlen
decl_stmt|;
name|uint32_t
name|cshd_enc_key
decl_stmt|;
name|uint16_t
name|cshd_enc_iv
decl_stmt|;
name|uint16_t
name|cshd_enc_iv_buf
decl_stmt|;
name|uint16_t
name|cshd_mac_src
decl_stmt|;
name|uint16_t
name|cshd_mac_total_dlen
decl_stmt|;
name|uint16_t
name|cshd_mac_dst
decl_stmt|;
name|uint16_t
name|cshd_mac_dlen
decl_stmt|;
name|uint16_t
name|cshd_mac_iv_in
decl_stmt|;
name|uint16_t
name|cshd_mac_iv_out
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_sa_data
block|{
name|uint8_t
name|csd_key
index|[
name|CESA_MAX_KEY_LEN
index|]
decl_stmt|;
name|uint8_t
name|csd_iv
index|[
name|CESA_MAX_IV_LEN
index|]
decl_stmt|;
name|uint8_t
name|csd_hiv_in
index|[
name|CESA_MAX_HASH_LEN
index|]
decl_stmt|;
name|uint8_t
name|csd_hiv_out
index|[
name|CESA_MAX_HASH_LEN
index|]
decl_stmt|;
name|uint8_t
name|csd_hash
index|[
name|CESA_MAX_HASH_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_dma_mem
block|{
name|void
modifier|*
name|cdm_vaddr
decl_stmt|;
name|bus_addr_t
name|cdm_paddr
decl_stmt|;
name|bus_dma_tag_t
name|cdm_tag
decl_stmt|;
name|bus_dmamap_t
name|cdm_map
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_tdma_desc
block|{
name|struct
name|cesa_tdma_hdesc
modifier|*
name|ctd_cthd
decl_stmt|;
name|bus_addr_t
name|ctd_cthd_paddr
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|cesa_tdma_desc
argument_list|)
name|ctd_stq
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_sa_desc
block|{
name|struct
name|cesa_sa_hdesc
modifier|*
name|csd_cshd
decl_stmt|;
name|bus_addr_t
name|csd_cshd_paddr
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|cesa_sa_desc
argument_list|)
name|csd_stq
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_session
block|{
name|uint32_t
name|cs_sid
decl_stmt|;
name|uint32_t
name|cs_config
decl_stmt|;
name|unsigned
name|int
name|cs_klen
decl_stmt|;
name|unsigned
name|int
name|cs_ivlen
decl_stmt|;
name|unsigned
name|int
name|cs_hlen
decl_stmt|;
name|unsigned
name|int
name|cs_mblen
decl_stmt|;
name|uint8_t
name|cs_key
index|[
name|CESA_MAX_KEY_LEN
index|]
decl_stmt|;
name|uint8_t
name|cs_aes_dkey
index|[
name|CESA_MAX_KEY_LEN
index|]
decl_stmt|;
name|uint8_t
name|cs_hiv_in
index|[
name|CESA_MAX_HASH_LEN
index|]
decl_stmt|;
name|uint8_t
name|cs_hiv_out
index|[
name|CESA_MAX_HASH_LEN
index|]
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|cesa_session
argument_list|)
name|cs_stq
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_request
block|{
name|struct
name|cesa_sa_data
modifier|*
name|cr_csd
decl_stmt|;
name|bus_addr_t
name|cr_csd_paddr
decl_stmt|;
name|struct
name|cryptop
modifier|*
name|cr_crp
decl_stmt|;
name|struct
name|cryptodesc
modifier|*
name|cr_enc
decl_stmt|;
name|struct
name|cryptodesc
modifier|*
name|cr_mac
decl_stmt|;
name|struct
name|cesa_session
modifier|*
name|cr_cs
decl_stmt|;
name|bus_dmamap_t
name|cr_dmap
decl_stmt|;
name|int
name|cr_dmap_loaded
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_tdma_desc
argument_list|)
name|cr_tdesc
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_sa_desc
argument_list|)
name|cr_sdesc
expr_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|cesa_request
argument_list|)
name|cr_stq
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_packet
block|{
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_tdma_desc
argument_list|)
name|cp_copyin
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_tdma_desc
argument_list|)
name|cp_copyout
expr_stmt|;
name|unsigned
name|int
name|cp_size
decl_stmt|;
name|unsigned
name|int
name|cp_offset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_softc
block|{
name|device_t
name|sc_dev
decl_stmt|;
name|int32_t
name|sc_cid
decl_stmt|;
name|struct
name|resource
modifier|*
name|sc_res
index|[
literal|2
index|]
decl_stmt|;
name|void
modifier|*
name|sc_icookie
decl_stmt|;
name|bus_dma_tag_t
name|sc_data_dtag
decl_stmt|;
name|bus_space_tag_t
name|sc_bst
decl_stmt|;
name|bus_space_handle_t
name|sc_bsh
decl_stmt|;
name|int
name|sc_error
decl_stmt|;
name|int
name|sc_tperr
decl_stmt|;
name|struct
name|mtx
name|sc_sc_lock
decl_stmt|;
name|int
name|sc_blocked
decl_stmt|;
comment|/* TDMA descriptors pool */
name|struct
name|mtx
name|sc_tdesc_lock
decl_stmt|;
name|struct
name|cesa_tdma_desc
name|sc_tdesc
index|[
name|CESA_TDMA_DESCRIPTORS
index|]
decl_stmt|;
name|struct
name|cesa_dma_mem
name|sc_tdesc_cdm
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_tdma_desc
argument_list|)
name|sc_free_tdesc
expr_stmt|;
comment|/* SA descriptors pool */
name|struct
name|mtx
name|sc_sdesc_lock
decl_stmt|;
name|struct
name|cesa_sa_desc
name|sc_sdesc
index|[
name|CESA_SA_DESCRIPTORS
index|]
decl_stmt|;
name|struct
name|cesa_dma_mem
name|sc_sdesc_cdm
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_sa_desc
argument_list|)
name|sc_free_sdesc
expr_stmt|;
comment|/* Requests pool */
name|struct
name|mtx
name|sc_requests_lock
decl_stmt|;
name|struct
name|cesa_request
name|sc_requests
index|[
name|CESA_REQUESTS
index|]
decl_stmt|;
name|struct
name|cesa_dma_mem
name|sc_requests_cdm
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_request
argument_list|)
name|sc_free_requests
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_request
argument_list|)
name|sc_ready_requests
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_request
argument_list|)
name|sc_queued_requests
expr_stmt|;
comment|/* Sessions pool */
name|struct
name|mtx
name|sc_sessions_lock
decl_stmt|;
name|struct
name|cesa_session
name|sc_sessions
index|[
name|CESA_SESSIONS
index|]
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|cesa_session
argument_list|)
name|sc_free_sessions
expr_stmt|;
comment|/* CESA SRAM Address */
name|bus_addr_t
name|sc_sram_base
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cesa_chain_info
block|{
name|struct
name|cesa_softc
modifier|*
name|cci_sc
decl_stmt|;
name|struct
name|cesa_request
modifier|*
name|cci_cr
decl_stmt|;
name|struct
name|cryptodesc
modifier|*
name|cci_enc
decl_stmt|;
name|struct
name|cryptodesc
modifier|*
name|cci_mac
decl_stmt|;
name|uint32_t
name|cci_config
decl_stmt|;
name|int
name|cci_error
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* CESA descriptors flags definitions */
end_comment

begin_define
define|#
directive|define
name|CESA_CTHD_OWNED
value|(1<< 15)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_MAC
value|(0<< 0)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_ENC
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_MAC_AND_ENC
value|(2<< 0)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_ENC_AND_MAC
value|(3<< 0)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_OP_MASK
value|(3<< 0)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_MD5
value|(4<< 4)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_SHA1
value|(5<< 4)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_MD5_HMAC
value|((6<< 4) | (1<< 7))
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_SHA1_HMAC
value|((7<< 4) | (1<< 7))
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_DES
value|(1<< 8)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_3DES
value|(2<< 8)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_AES
value|(3<< 8)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_DECRYPT
value|(1<< 12)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_CBC
value|(1<< 16)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_3DES_EDE
value|(1<< 20)
end_define

begin_define
define|#
directive|define
name|CESA_CSH_AES_KLEN_128
value|(0<< 24)
end_define

begin_define
define|#
directive|define
name|CESA_CSH_AES_KLEN_192
value|(1<< 24)
end_define

begin_define
define|#
directive|define
name|CESA_CSH_AES_KLEN_256
value|(2<< 24)
end_define

begin_define
define|#
directive|define
name|CESA_CSH_AES_KLEN_MASK
value|(3<< 24)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_FRAG_FIRST
value|(1<< 30)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_FRAG_LAST
value|(2U<< 30)
end_define

begin_define
define|#
directive|define
name|CESA_CSHD_FRAG_MIDDLE
value|(3U<< 30)
end_define

begin_comment
comment|/* CESA registers definitions */
end_comment

begin_define
define|#
directive|define
name|CESA_ICR
value|0xDE20
end_define

begin_define
define|#
directive|define
name|CESA_ICR_ACCTDMA
value|(1<< 7)
end_define

begin_define
define|#
directive|define
name|CESA_ICR_TPERR
value|(1<< 12)
end_define

begin_define
define|#
directive|define
name|CESA_ICM
value|0xDE24
end_define

begin_define
define|#
directive|define
name|CESA_ICM_ACCTDMA
value|CESA_ICR_ACCTDMA
end_define

begin_define
define|#
directive|define
name|CESA_ICM_TPERR
value|CESA_ICR_TPERR
end_define

begin_comment
comment|/* CESA TDMA registers definitions */
end_comment

begin_define
define|#
directive|define
name|CESA_TDMA_ND
value|0x0830
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_CR
value|0x0840
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_CR_DBL128
value|(4<< 0)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_CR_ORDEN
value|(1<< 4)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_CR_SBL128
value|(4<< 6)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_CR_NBS
value|(1<< 11)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_CR_ENABLE
value|(1<< 12)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_CR_FETCHND
value|(1<< 13)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_CR_ACTIVE
value|(1<< 14)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_ECR
value|0x08C8
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_ECR_MISS
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_ECR_DOUBLE_HIT
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_ECR_BOTH_HIT
value|(1<< 2)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_ECR_DATA_ERROR
value|(1<< 3)
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_EMR
value|0x08CC
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_EMR_MISS
value|CESA_TDMA_ECR_MISS
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_EMR_DOUBLE_HIT
value|CESA_TDMA_ECR_DOUBLE_HIT
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_EMR_BOTH_HIT
value|CESA_TDMA_ECR_BOTH_HIT
end_define

begin_define
define|#
directive|define
name|CESA_TDMA_EMR_DATA_ERROR
value|CESA_TDMA_ECR_DATA_ERROR
end_define

begin_comment
comment|/*  CESA TDMA address decoding registers */
end_comment

begin_define
define|#
directive|define
name|MV_WIN_CESA_CTRL
parameter_list|(
name|n
parameter_list|)
value|(0x8 * (n) + 0xA04)
end_define

begin_define
define|#
directive|define
name|MV_WIN_CESA_BASE
parameter_list|(
name|n
parameter_list|)
value|(0x8 * (n) + 0xA00)
end_define

begin_define
define|#
directive|define
name|MV_WIN_CESA_MAX
value|4
end_define

begin_comment
comment|/* CESA SA registers definitions */
end_comment

begin_define
define|#
directive|define
name|CESA_SA_CMD
value|0xDE00
end_define

begin_define
define|#
directive|define
name|CESA_SA_CMD_ACTVATE
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|CESA_SA_DPR
value|0xDE04
end_define

begin_define
define|#
directive|define
name|CESA_SA_CR
value|0xDE08
end_define

begin_define
define|#
directive|define
name|CESA_SA_CR_WAIT_FOR_TDMA
value|(1<< 7)
end_define

begin_define
define|#
directive|define
name|CESA_SA_CR_ACTIVATE_TDMA
value|(1<< 9)
end_define

begin_define
define|#
directive|define
name|CESA_SA_CR_MULTI_MODE
value|(1<< 11)
end_define

begin_define
define|#
directive|define
name|CESA_SA_SR
value|0xDE0C
end_define

begin_define
define|#
directive|define
name|CESA_SA_SR_ACTIVE
value|(1<< 0)
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

