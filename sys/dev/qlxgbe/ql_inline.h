begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2013-2014 Qlogic Corporation  * All rights reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  *  POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * File: ql_inline.h  * Author : David C Somayajulu, Qlogic Corporation, Aliso Viejo, CA 92656.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_QL_INLINE_H_
end_ifndef

begin_define
define|#
directive|define
name|_QL_INLINE_H_
end_define

begin_define
define|#
directive|define
name|QL8_SEMLOCK_TIMEOUT
value|1000
end_define

begin_comment
comment|/* QLA8020 Semaphore Lock Timeout 10ms */
end_comment

begin_comment
comment|/*  * Inline functions for hardware semaphores  */
end_comment

begin_comment
comment|/*  * Name:	qla_sem_lock  * Function:	Locks one of the semaphore registers (semaphore 2,3,5& 7)  *		If the id_reg is valid, then id_val is written into it.  *		This is for debugging purpose  * Returns:	0 on success; otherwise its failed.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|qla_sem_lock
parameter_list|(
name|qla_host_t
modifier|*
name|ha
parameter_list|,
name|uint32_t
name|sem_reg
parameter_list|,
name|uint32_t
name|id_reg
parameter_list|,
name|uint32_t
name|id_val
parameter_list|)
block|{
name|int
name|count
init|=
name|QL8_SEMLOCK_TIMEOUT
decl_stmt|;
while|while
condition|(
name|count
condition|)
block|{
if|if
condition|(
operator|(
name|READ_REG32
argument_list|(
name|ha
argument_list|,
name|sem_reg
argument_list|)
operator|&
name|BIT_0
operator|)
condition|)
break|break;
name|count
operator|--
expr_stmt|;
if|if
condition|(
operator|!
name|count
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|qla_mdelay
argument_list|(
name|__func__
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id_reg
condition|)
name|WRITE_REG32
argument_list|(
name|ha
argument_list|,
name|id_reg
argument_list|,
name|id_val
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Name:	qla_sem_unlock  * Function:	Unlocks the semaphore registers (semaphore 2,3,5& 7)  *		previously locked by qla_sem_lock()  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|qla_sem_unlock
parameter_list|(
name|qla_host_t
modifier|*
name|ha
parameter_list|,
name|uint32_t
name|sem_reg
parameter_list|)
block|{
name|READ_REG32
argument_list|(
name|ha
argument_list|,
name|sem_reg
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|qla_get_ifq_snd_maxlen
parameter_list|(
name|qla_host_t
modifier|*
name|ha
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|NUM_TX_DESCRIPTORS
operator|*
literal|4
operator|)
operator|-
literal|1
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|qla_get_optics
parameter_list|(
name|qla_host_t
modifier|*
name|ha
parameter_list|)
block|{
name|uint32_t
name|link_speed
decl_stmt|;
name|link_speed
operator|=
name|READ_REG32
argument_list|(
name|ha
argument_list|,
name|Q8_LINK_SPEED_0
argument_list|)
expr_stmt|;
if|if
condition|(
name|ha
operator|->
name|pci_func
operator|==
literal|0
condition|)
name|link_speed
operator|=
name|link_speed
operator|&
literal|0xFF
expr_stmt|;
else|else
name|link_speed
operator|=
operator|(
name|link_speed
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
expr_stmt|;
switch|switch
condition|(
name|link_speed
condition|)
block|{
case|case
literal|0x1
case|:
name|link_speed
operator|=
name|IFM_100_FX
expr_stmt|;
break|break;
case|case
literal|0x10
case|:
name|link_speed
operator|=
name|IFM_1000_SX
expr_stmt|;
break|break;
default|default:
if|if
condition|(
operator|(
name|ha
operator|->
name|hw
operator|.
name|module_type
operator|==
literal|0x4
operator|)
operator|||
operator|(
name|ha
operator|->
name|hw
operator|.
name|module_type
operator|==
literal|0x5
operator|)
operator|||
operator|(
name|ha
operator|->
name|hw
operator|.
name|module_type
operator|==
literal|0x6
operator|)
condition|)
name|link_speed
operator|=
operator|(
name|IFM_10G_TWINAX
operator|)
expr_stmt|;
else|else
name|link_speed
operator|=
operator|(
name|IFM_10G_LR
operator||
name|IFM_10G_SR
operator|)
expr_stmt|;
break|break;
block|}
return|return
operator|(
name|link_speed
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint8_t
modifier|*
name|qla_get_mac_addr
parameter_list|(
name|qla_host_t
modifier|*
name|ha
parameter_list|)
block|{
return|return
operator|(
name|ha
operator|->
name|hw
operator|.
name|mac_addr
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|qla_set_hw_rcv_desc
parameter_list|(
name|qla_host_t
modifier|*
name|ha
parameter_list|,
name|uint32_t
name|r_idx
parameter_list|,
name|uint32_t
name|index
parameter_list|,
name|uint32_t
name|handle
parameter_list|,
name|bus_addr_t
name|paddr
parameter_list|,
name|uint32_t
name|buf_size
parameter_list|)
block|{
specifier|volatile
name|q80_recv_desc_t
modifier|*
name|rcv_desc
decl_stmt|;
name|rcv_desc
operator|=
operator|(
name|q80_recv_desc_t
operator|*
operator|)
name|ha
operator|->
name|hw
operator|.
name|dma_buf
operator|.
name|rds_ring
index|[
name|r_idx
index|]
operator|.
name|dma_b
expr_stmt|;
name|rcv_desc
operator|+=
name|index
expr_stmt|;
name|rcv_desc
operator|->
name|handle
operator|=
operator|(
name|uint16_t
operator|)
name|handle
expr_stmt|;
name|rcv_desc
operator|->
name|buf_size
operator|=
name|buf_size
expr_stmt|;
name|rcv_desc
operator|->
name|buf_addr
operator|=
name|paddr
expr_stmt|;
return|return;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|qla_init_hw_rcv_descriptors
parameter_list|(
name|qla_host_t
modifier|*
name|ha
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ha
operator|->
name|hw
operator|.
name|num_rds_rings
condition|;
name|i
operator|++
control|)
name|bzero
argument_list|(
operator|(
name|void
operator|*
operator|)
name|ha
operator|->
name|hw
operator|.
name|dma_buf
operator|.
name|rds_ring
index|[
name|i
index|]
operator|.
name|dma_b
argument_list|,
operator|(
sizeof|sizeof
argument_list|(
name|q80_recv_desc_t
argument_list|)
operator|*
name|NUM_RX_DESCRIPTORS
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|qla_lock
parameter_list|(
name|qla_host_t
modifier|*
name|ha
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|uint32_t
name|no_delay
parameter_list|)
block|{
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|ha
operator|->
name|hw_lock
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ha
operator|->
name|hw_lock_held
condition|)
block|{
name|ha
operator|->
name|hw_lock_held
operator|=
literal|1
expr_stmt|;
name|ha
operator|->
name|qla_lock
operator|=
name|str
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|ha
operator|->
name|hw_lock
argument_list|)
expr_stmt|;
break|break;
block|}
name|mtx_unlock
argument_list|(
operator|&
name|ha
operator|->
name|hw_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|no_delay
condition|)
break|break;
else|else
name|qla_mdelay
argument_list|(
name|__func__
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|qla_unlock
parameter_list|(
name|qla_host_t
modifier|*
name|ha
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|ha
operator|->
name|hw_lock
argument_list|)
expr_stmt|;
name|ha
operator|->
name|hw_lock_held
operator|=
literal|0
expr_stmt|;
name|ha
operator|->
name|qla_unlock
operator|=
name|str
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|ha
operator|->
name|hw_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* #ifndef _QL_INLINE_H_ */
end_comment

end_unit

