begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_fops.h -- File operations for DRM -*- linux-c -*-  * Created: Mon Jan  4 08:58:31 1999 by faith@valinux.com  *  * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Daryll Strauss<daryll@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_function
name|drm_file_t
modifier|*
name|DRM
function|(
name|find_file_by_proc
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|DRM_STRUCTPROC
modifier|*
name|p
parameter_list|)
block|{
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500021
name|uid_t
name|uid
init|=
name|p
operator|->
name|td_proc
operator|->
name|p_ucred
operator|->
name|cr_svuid
decl_stmt|;
name|pid_t
name|pid
init|=
name|p
operator|->
name|td_proc
operator|->
name|p_pid
decl_stmt|;
else|#
directive|else
name|uid_t
name|uid
init|=
name|p
operator|->
name|p_cred
operator|->
name|p_svuid
decl_stmt|;
name|pid_t
name|pid
init|=
name|p
operator|->
name|p_pid
decl_stmt|;
endif|#
directive|endif
name|drm_file_t
modifier|*
name|priv
decl_stmt|;
name|TAILQ_FOREACH
argument_list|(
argument|priv
argument_list|,
argument|&dev->files
argument_list|,
argument|link
argument_list|)
if|if
condition|(
name|priv
operator|->
name|pid
operator|==
name|pid
operator|&&
name|priv
operator|->
name|uid
operator|==
name|uid
condition|)
return|return
name|priv
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_comment
comment|/* DRM(open) is called whenever a process opens /dev/drm. */
end_comment

begin_function
name|int
name|DRM
function|(
name|open_helper
function|)
parameter_list|(
name|dev_t
name|kdev
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|fmt
parameter_list|,
name|DRM_STRUCTPROC
modifier|*
name|p
parameter_list|,
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|int
name|m
init|=
name|minor
argument_list|(
name|kdev
argument_list|)
decl_stmt|;
name|drm_file_t
modifier|*
name|priv
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|O_EXCL
condition|)
return|return
name|EBUSY
return|;
comment|/* No exclusive opens */
name|dev
operator|->
name|flags
operator|=
name|flags
expr_stmt|;
if|if
condition|(
operator|!
name|DRM
argument_list|(
name|cpu_valid
argument_list|)
argument_list|()
condition|)
return|return
name|DRM_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
name|DRM_DEBUG
argument_list|(
literal|"pid = %d, minor = %d\n"
argument_list|,
name|DRM_CURRENTPID
argument_list|,
name|m
argument_list|)
expr_stmt|;
comment|/* FIXME: linux mallocs and bzeros here */
name|priv
operator|=
operator|(
name|drm_file_t
operator|*
operator|)
name|DRM
argument_list|(
name|find_file_by_proc
argument_list|)
argument_list|(
name|dev
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|priv
condition|)
block|{
name|priv
operator|->
name|refs
operator|++
expr_stmt|;
block|}
else|else
block|{
name|priv
operator|=
operator|(
name|drm_file_t
operator|*
operator|)
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|priv
argument_list|)
argument_list|,
name|DRM_MEM_FILES
argument_list|)
expr_stmt|;
name|bzero
argument_list|(
name|priv
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|priv
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
name|priv
operator|->
name|uid
operator|=
name|p
operator|->
name|td_proc
operator|->
name|p_ucred
operator|->
name|cr_svuid
expr_stmt|;
name|priv
operator|->
name|pid
operator|=
name|p
operator|->
name|td_proc
operator|->
name|p_pid
expr_stmt|;
else|#
directive|else
name|priv
operator|->
name|uid
operator|=
name|p
operator|->
name|p_cred
operator|->
name|p_svuid
expr_stmt|;
name|priv
operator|->
name|pid
operator|=
name|p
operator|->
name|p_pid
expr_stmt|;
endif|#
directive|endif
name|priv
operator|->
name|refs
operator|=
literal|1
expr_stmt|;
name|priv
operator|->
name|minor
operator|=
name|m
expr_stmt|;
name|priv
operator|->
name|devXX
operator|=
name|dev
expr_stmt|;
name|priv
operator|->
name|ioctl_count
operator|=
literal|0
expr_stmt|;
name|priv
operator|->
name|authenticated
operator|=
operator|!
name|DRM_SUSER
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|DRM_LOCK
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|dev
operator|->
name|files
argument_list|,
name|priv
argument_list|,
name|link
argument_list|)
expr_stmt|;
name|DRM_UNLOCK
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__FreeBSD__
name|kdev
operator|->
name|si_drv1
operator|=
name|dev
expr_stmt|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* The drm_read and drm_write_string code (especially that which manages    the circular buffer), is based on Alessandro Rubini's LINUX DEVICE    DRIVERS (Cambridge: O'Reilly, 1998), pages 111-113. */
end_comment

begin_function
name|int
name|DRM
function|(
name|read
function|)
parameter_list|(
name|dev_t
name|kdev
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|,
name|int
name|ioflag
parameter_list|)
block|{
name|DRM_DEVICE
expr_stmt|;
name|int
name|left
decl_stmt|;
name|int
name|avail
decl_stmt|;
name|int
name|send
decl_stmt|;
name|int
name|cur
decl_stmt|;
name|int
name|error
init|=
literal|0
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%p, %p\n"
argument_list|,
name|dev
operator|->
name|buf_rp
argument_list|,
name|dev
operator|->
name|buf_wp
argument_list|)
expr_stmt|;
while|while
condition|(
name|dev
operator|->
name|buf_rp
operator|==
name|dev
operator|->
name|buf_wp
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"  sleeping\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|flags
operator|&
name|FASYNC
condition|)
return|return
name|EWOULDBLOCK
return|;
name|error
operator|=
name|tsleep
argument_list|(
operator|&
name|dev
operator|->
name|buf_rp
argument_list|,
name|PZERO
operator||
name|PCATCH
argument_list|,
literal|"drmrd"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"  interrupted\n"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|DRM_DEBUG
argument_list|(
literal|"  awake\n"
argument_list|)
expr_stmt|;
block|}
name|left
operator|=
operator|(
name|dev
operator|->
name|buf_rp
operator|+
name|DRM_BSZ
operator|-
name|dev
operator|->
name|buf_wp
operator|)
operator|%
name|DRM_BSZ
expr_stmt|;
name|avail
operator|=
name|DRM_BSZ
operator|-
name|left
expr_stmt|;
name|send
operator|=
name|DRM_MIN
argument_list|(
name|avail
argument_list|,
name|uio
operator|->
name|uio_resid
argument_list|)
expr_stmt|;
while|while
condition|(
name|send
condition|)
block|{
if|if
condition|(
name|dev
operator|->
name|buf_wp
operator|>
name|dev
operator|->
name|buf_rp
condition|)
block|{
name|cur
operator|=
name|DRM_MIN
argument_list|(
name|send
argument_list|,
name|dev
operator|->
name|buf_wp
operator|-
name|dev
operator|->
name|buf_rp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cur
operator|=
name|DRM_MIN
argument_list|(
name|send
argument_list|,
name|dev
operator|->
name|buf_end
operator|-
name|dev
operator|->
name|buf_rp
argument_list|)
expr_stmt|;
block|}
name|error
operator|=
name|uiomove
argument_list|(
name|dev
operator|->
name|buf_rp
argument_list|,
name|cur
argument_list|,
name|uio
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
break|break;
name|dev
operator|->
name|buf_rp
operator|+=
name|cur
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|buf_rp
operator|==
name|dev
operator|->
name|buf_end
condition|)
name|dev
operator|->
name|buf_rp
operator|=
name|dev
operator|->
name|buf
expr_stmt|;
name|send
operator|-=
name|cur
expr_stmt|;
block|}
name|wakeup
argument_list|(
operator|&
name|dev
operator|->
name|buf_wp
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|write_string
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
block|{
name|int
name|left
init|=
operator|(
name|dev
operator|->
name|buf_rp
operator|+
name|DRM_BSZ
operator|-
name|dev
operator|->
name|buf_wp
operator|)
operator|%
name|DRM_BSZ
decl_stmt|;
name|int
name|send
init|=
name|strlen
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|count
decl_stmt|;
ifdef|#
directive|ifdef
name|__NetBSD__
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
endif|#
directive|endif
comment|/* __NetBSD__ */
name|DRM_DEBUG
argument_list|(
literal|"%d left, %d to send (%p, %p)\n"
argument_list|,
name|left
argument_list|,
name|send
argument_list|,
name|dev
operator|->
name|buf_rp
argument_list|,
name|dev
operator|->
name|buf_wp
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|==
literal|1
operator|||
name|dev
operator|->
name|buf_wp
operator|!=
name|dev
operator|->
name|buf_rp
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Buffer not empty (%d left, wp = %p, rp = %p)\n"
argument_list|,
name|left
argument_list|,
name|dev
operator|->
name|buf_wp
argument_list|,
name|dev
operator|->
name|buf_rp
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|send
condition|)
block|{
if|if
condition|(
name|dev
operator|->
name|buf_wp
operator|>=
name|dev
operator|->
name|buf_rp
condition|)
block|{
name|count
operator|=
name|DRM_MIN
argument_list|(
name|send
argument_list|,
name|dev
operator|->
name|buf_end
operator|-
name|dev
operator|->
name|buf_wp
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|left
condition|)
operator|--
name|count
expr_stmt|;
comment|/* Leave a hole */
block|}
else|else
block|{
name|count
operator|=
name|DRM_MIN
argument_list|(
name|send
argument_list|,
name|dev
operator|->
name|buf_rp
operator|-
name|dev
operator|->
name|buf_wp
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|strncpy
argument_list|(
name|dev
operator|->
name|buf_wp
argument_list|,
name|s
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|dev
operator|->
name|buf_wp
operator|+=
name|count
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|buf_wp
operator|==
name|dev
operator|->
name|buf_end
condition|)
name|dev
operator|->
name|buf_wp
operator|=
name|dev
operator|->
name|buf
expr_stmt|;
name|send
operator|-=
name|count
expr_stmt|;
block|}
if|if
condition|(
name|dev
operator|->
name|buf_selecting
condition|)
block|{
name|dev
operator|->
name|buf_selecting
operator|=
literal|0
expr_stmt|;
name|selwakeup
argument_list|(
operator|&
name|dev
operator|->
name|buf_sel
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM_DEBUG
argument_list|(
literal|"dev->buf_sigio=%p\n"
argument_list|,
name|dev
operator|->
name|buf_sigio
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|buf_sigio
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"dev->buf_sigio->sio_pgid=%d\n"
argument_list|,
name|dev
operator|->
name|buf_sigio
operator|->
name|sio_pgid
argument_list|)
expr_stmt|;
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
name|pgsigio
argument_list|(
operator|&
name|dev
operator|->
name|buf_sigio
argument_list|,
name|SIGIO
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|pgsigio
argument_list|(
name|dev
operator|->
name|buf_sigio
argument_list|,
name|SIGIO
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD_version */
block|}
endif|#
directive|endif
comment|/* __FreeBSD__ */
ifdef|#
directive|ifdef
name|__NetBSD__
if|if
condition|(
name|dev
operator|->
name|buf_pgid
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"dev->buf_pgid=%d\n"
argument_list|,
name|dev
operator|->
name|buf_pgid
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|buf_pgid
operator|>
literal|0
condition|)
name|gsignal
argument_list|(
name|dev
operator|->
name|buf_pgid
argument_list|,
name|SIGIO
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|dev
operator|->
name|buf_pgid
operator|&&
operator|(
name|p
operator|=
name|pfind
argument_list|(
operator|-
name|dev
operator|->
name|buf_pgid
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
name|psignal
argument_list|(
name|p
argument_list|,
name|SIGIO
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __NetBSD__ */
name|DRM_DEBUG
argument_list|(
literal|"waking\n"
argument_list|)
expr_stmt|;
name|wakeup
argument_list|(
operator|&
name|dev
operator|->
name|buf_rp
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|poll
function|)
parameter_list|(
name|dev_t
name|kdev
parameter_list|,
name|int
name|events
parameter_list|,
name|DRM_STRUCTPROC
modifier|*
name|p
parameter_list|)
block|{
name|DRM_DEVICE
expr_stmt|;
name|int
name|s
decl_stmt|;
name|int
name|revents
init|=
literal|0
decl_stmt|;
name|s
operator|=
name|spldrm
argument_list|()
expr_stmt|;
if|if
condition|(
name|events
operator|&
operator|(
name|POLLIN
operator||
name|POLLRDNORM
operator|)
condition|)
block|{
name|int
name|left
init|=
operator|(
name|dev
operator|->
name|buf_rp
operator|+
name|DRM_BSZ
operator|-
name|dev
operator|->
name|buf_wp
operator|)
operator|%
name|DRM_BSZ
decl_stmt|;
if|if
condition|(
name|left
operator|>
literal|0
condition|)
name|revents
operator||=
name|events
operator|&
operator|(
name|POLLIN
operator||
name|POLLRDNORM
operator|)
expr_stmt|;
else|else
name|selrecord
argument_list|(
name|p
argument_list|,
operator|&
name|dev
operator|->
name|buf_sel
argument_list|)
expr_stmt|;
block|}
name|splx
argument_list|(
name|s
argument_list|)
expr_stmt|;
return|return
name|revents
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|write
function|)
parameter_list|(
name|dev_t
name|kdev
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|,
name|int
name|ioflag
parameter_list|)
block|{
if|#
directive|if
name|DRM_DEBUG_CODE
name|DRM_DEVICE
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM_DEBUG
argument_list|(
literal|"pid = %d, device = %p, open_count = %d\n"
argument_list|,
name|curproc
operator|->
name|p_pid
argument_list|,
name|dev
operator|->
name|device
argument_list|,
name|dev
operator|->
name|open_count
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
name|DRM_DEBUG
argument_list|(
literal|"pid = %d, device = %p, open_count = %d\n"
argument_list|,
name|curproc
operator|->
name|p_pid
argument_list|,
operator|&
name|dev
operator|->
name|device
argument_list|,
name|dev
operator|->
name|open_count
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function

end_unit

