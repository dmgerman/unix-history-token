begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_scatter.h -- IOCTLs to manage scatter/gather memory -*- linux-c -*-  * Created: Mon Dec 18 23:20:54 2000 by gareth@valinux.com  *  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  * DEALINGS IN THE SOFTWARE.  *  * Authors:  *   Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|__NO_VERSION__
end_define

begin_include
include|#
directive|include
file|<linux/config.h>
end_include

begin_include
include|#
directive|include
file|<linux/vmalloc.h>
end_include

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_define
define|#
directive|define
name|DEBUG_SCATTER
value|0
end_define

begin_function
name|void
name|DRM
function|(
name|sg_cleanup
function|)
parameter_list|(
name|drm_sg_mem_t
modifier|*
name|entry
parameter_list|)
block|{
name|struct
name|page
modifier|*
name|page
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|entry
operator|->
name|pages
condition|;
name|i
operator|++
control|)
block|{
name|page
operator|=
name|entry
operator|->
name|pagelist
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|page
condition|)
name|ClearPageReserved
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
name|vfree
argument_list|(
name|entry
operator|->
name|virtual
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
operator|->
name|busaddr
argument_list|,
name|entry
operator|->
name|pages
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|entry
operator|->
name|busaddr
argument_list|)
argument_list|,
name|DRM_MEM_PAGES
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
operator|->
name|pagelist
argument_list|,
name|entry
operator|->
name|pages
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|entry
operator|->
name|pagelist
argument_list|)
argument_list|,
name|DRM_MEM_PAGES
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|entry
argument_list|)
argument_list|,
name|DRM_MEM_SGLISTS
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|sg_alloc
function|)
parameter_list|(
name|struct
name|inode
modifier|*
name|inode
parameter_list|,
name|struct
name|file
modifier|*
name|filp
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|unsigned
name|long
name|arg
parameter_list|)
block|{
name|drm_file_t
modifier|*
name|priv
init|=
name|filp
operator|->
name|private_data
decl_stmt|;
name|drm_device_t
modifier|*
name|dev
init|=
name|priv
operator|->
name|dev
decl_stmt|;
name|drm_scatter_gather_t
name|request
decl_stmt|;
name|drm_sg_mem_t
modifier|*
name|entry
decl_stmt|;
name|unsigned
name|long
name|pages
decl_stmt|,
name|i
decl_stmt|,
name|j
decl_stmt|;
name|pgd_t
modifier|*
name|pgd
decl_stmt|;
name|pmd_t
modifier|*
name|pmd
decl_stmt|;
name|pte_t
modifier|*
name|pte
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%s\n"
argument_list|,
name|__FUNCTION__
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|sg
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
if|if
condition|(
name|copy_from_user
argument_list|(
operator|&
name|request
argument_list|,
operator|(
name|drm_scatter_gather_t
operator|*
operator|)
name|arg
argument_list|,
sizeof|sizeof
argument_list|(
name|request
argument_list|)
argument_list|)
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EFAULT
argument_list|)
return|;
name|entry
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|entry
argument_list|)
argument_list|,
name|DRM_MEM_SGLISTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entry
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
name|memset
argument_list|(
name|entry
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|pages
operator|=
operator|(
name|request
operator|.
name|size
operator|+
name|PAGE_SIZE
operator|-
literal|1
operator|)
operator|/
name|PAGE_SIZE
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"sg size=%ld pages=%ld\n"
argument_list|,
name|request
operator|.
name|size
argument_list|,
name|pages
argument_list|)
expr_stmt|;
name|entry
operator|->
name|pages
operator|=
name|pages
expr_stmt|;
name|entry
operator|->
name|pagelist
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
name|pages
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|entry
operator|->
name|pagelist
argument_list|)
argument_list|,
name|DRM_MEM_PAGES
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|->
name|pagelist
condition|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|entry
argument_list|)
argument_list|,
name|DRM_MEM_SGLISTS
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
block|}
name|entry
operator|->
name|busaddr
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
name|pages
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|entry
operator|->
name|busaddr
argument_list|)
argument_list|,
name|DRM_MEM_PAGES
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|->
name|busaddr
condition|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
operator|->
name|pagelist
argument_list|,
name|entry
operator|->
name|pages
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|entry
operator|->
name|pagelist
argument_list|)
argument_list|,
name|DRM_MEM_PAGES
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|entry
argument_list|)
argument_list|,
name|DRM_MEM_SGLISTS
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
block|}
name|memset
argument_list|(
operator|(
name|void
operator|*
operator|)
name|entry
operator|->
name|busaddr
argument_list|,
literal|0
argument_list|,
name|pages
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|entry
operator|->
name|busaddr
argument_list|)
argument_list|)
expr_stmt|;
name|entry
operator|->
name|virtual
operator|=
name|vmalloc_32
argument_list|(
name|pages
operator|<<
name|PAGE_SHIFT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|->
name|virtual
condition|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
operator|->
name|busaddr
argument_list|,
name|entry
operator|->
name|pages
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|entry
operator|->
name|busaddr
argument_list|)
argument_list|,
name|DRM_MEM_PAGES
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
operator|->
name|pagelist
argument_list|,
name|entry
operator|->
name|pages
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|entry
operator|->
name|pagelist
argument_list|)
argument_list|,
name|DRM_MEM_PAGES
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|entry
argument_list|)
argument_list|,
name|DRM_MEM_SGLISTS
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
block|}
comment|/* This also forces the mapping of COW pages, so our page list 	 * will be valid.  Please don't remove it... 	 */
name|memset
argument_list|(
name|entry
operator|->
name|virtual
argument_list|,
literal|0
argument_list|,
name|pages
operator|<<
name|PAGE_SHIFT
argument_list|)
expr_stmt|;
name|entry
operator|->
name|handle
operator|=
operator|(
name|unsigned
name|long
operator|)
name|entry
operator|->
name|virtual
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"sg alloc handle  = %08lx\n"
argument_list|,
name|entry
operator|->
name|handle
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"sg alloc virtual = %p\n"
argument_list|,
name|entry
operator|->
name|virtual
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|entry
operator|->
name|handle
operator|,
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|pages
condition|;
name|i
operator|+=
name|PAGE_SIZE
operator|,
name|j
operator|++
control|)
block|{
name|pgd
operator|=
name|pgd_offset_k
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pgd_present
argument_list|(
operator|*
name|pgd
argument_list|)
condition|)
goto|goto
name|failed
goto|;
name|pmd
operator|=
name|pmd_offset
argument_list|(
name|pgd
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pmd_present
argument_list|(
operator|*
name|pmd
argument_list|)
condition|)
goto|goto
name|failed
goto|;
name|pte
operator|=
name|pte_offset
argument_list|(
name|pmd
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pte_present
argument_list|(
operator|*
name|pte
argument_list|)
condition|)
goto|goto
name|failed
goto|;
name|entry
operator|->
name|pagelist
index|[
name|j
index|]
operator|=
name|pte_page
argument_list|(
operator|*
name|pte
argument_list|)
expr_stmt|;
name|SetPageReserved
argument_list|(
name|entry
operator|->
name|pagelist
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|handle
operator|=
name|entry
operator|->
name|handle
expr_stmt|;
if|if
condition|(
name|copy_to_user
argument_list|(
operator|(
name|drm_scatter_gather_t
operator|*
operator|)
name|arg
argument_list|,
operator|&
name|request
argument_list|,
sizeof|sizeof
argument_list|(
name|request
argument_list|)
argument_list|)
condition|)
block|{
name|DRM
function_decl|(
name|sg_cleanup
function_decl|)
parameter_list|(
name|entry
parameter_list|)
function_decl|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EFAULT
argument_list|)
return|;
block|}
name|dev
operator|->
name|sg
operator|=
name|entry
expr_stmt|;
if|#
directive|if
name|DEBUG_SCATTER
comment|/* Verify that each page points to its virtual address, and vice 	 * versa. 	 */
block|{
name|int
name|error
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|pages
condition|;
name|i
operator|++
control|)
block|{
name|unsigned
name|long
modifier|*
name|tmp
decl_stmt|;
name|tmp
operator|=
name|page_address
argument_list|(
name|entry
operator|->
name|pagelist
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|PAGE_SIZE
operator|/
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
condition|;
name|j
operator|++
operator|,
name|tmp
operator|++
control|)
block|{
operator|*
name|tmp
operator|=
literal|0xcafebabe
expr_stmt|;
block|}
name|tmp
operator|=
operator|(
name|unsigned
name|long
operator|*
operator|)
operator|(
operator|(
name|u8
operator|*
operator|)
name|entry
operator|->
name|virtual
operator|+
operator|(
name|PAGE_SIZE
operator|*
name|i
operator|)
operator|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|PAGE_SIZE
operator|/
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
condition|;
name|j
operator|++
operator|,
name|tmp
operator|++
control|)
block|{
if|if
condition|(
operator|*
name|tmp
operator|!=
literal|0xcafebabe
operator|&&
name|error
operator|==
literal|0
condition|)
block|{
name|error
operator|=
literal|1
expr_stmt|;
name|DRM_ERROR
argument_list|(
literal|"Scatter allocation error, "
literal|"pagelist does not match "
literal|"virtual mapping\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|tmp
operator|=
name|page_address
argument_list|(
name|entry
operator|->
name|pagelist
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|PAGE_SIZE
operator|/
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
condition|;
name|j
operator|++
operator|,
name|tmp
operator|++
control|)
block|{
operator|*
name|tmp
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|error
operator|==
literal|0
condition|)
name|DRM_ERROR
argument_list|(
literal|"Scatter allocation matches pagelist\n"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
literal|0
return|;
name|failed
label|:
name|DRM
function_decl|(
name|sg_cleanup
function_decl|)
parameter_list|(
name|entry
parameter_list|)
function_decl|;
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|sg_free
function|)
parameter_list|(
name|struct
name|inode
modifier|*
name|inode
parameter_list|,
name|struct
name|file
modifier|*
name|filp
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|unsigned
name|long
name|arg
parameter_list|)
block|{
name|drm_file_t
modifier|*
name|priv
init|=
name|filp
operator|->
name|private_data
decl_stmt|;
name|drm_device_t
modifier|*
name|dev
init|=
name|priv
operator|->
name|dev
decl_stmt|;
name|drm_scatter_gather_t
name|request
decl_stmt|;
name|drm_sg_mem_t
modifier|*
name|entry
decl_stmt|;
if|if
condition|(
name|copy_from_user
argument_list|(
operator|&
name|request
argument_list|,
operator|(
name|drm_scatter_gather_t
operator|*
operator|)
name|arg
argument_list|,
sizeof|sizeof
argument_list|(
name|request
argument_list|)
argument_list|)
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EFAULT
argument_list|)
return|;
name|entry
operator|=
name|dev
operator|->
name|sg
expr_stmt|;
name|dev
operator|->
name|sg
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
operator|!
name|entry
operator|||
name|entry
operator|->
name|handle
operator|!=
name|request
operator|.
name|handle
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
name|DRM_DEBUG
argument_list|(
literal|"sg free virtual  = %p\n"
argument_list|,
name|entry
operator|->
name|virtual
argument_list|)
expr_stmt|;
name|DRM
function_decl|(
name|sg_cleanup
function_decl|)
parameter_list|(
name|entry
parameter_list|)
function_decl|;
return|return
literal|0
return|;
block|}
end_function

end_unit

