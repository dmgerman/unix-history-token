begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_drv.h -- Generic driver template -*- linux-c -*-  * Created: Thu Nov 23 03:10:50 2000 by gareth@valinux.com  *  * Copyright 1999, 2000 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * To use this template, you must at least define the following (samples  * given for the MGA driver):  *  * #define DRIVER_AUTHOR	"VA Linux Systems, Inc."  *  * #define DRIVER_NAME		"mga"  * #define DRIVER_DESC		"Matrox G200/G400"  * #define DRIVER_DATE		"20001127"  *  * #define DRIVER_MAJOR		2  * #define DRIVER_MINOR		0  * #define DRIVER_PATCHLEVEL	2  *  * #define DRIVER_IOCTL_COUNT	DRM_ARRAY_SIZE( mga_ioctls )  *  * #define DRM(x)		mga_##x  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MUST_HAVE_AGP
end_ifndef

begin_define
define|#
directive|define
name|__MUST_HAVE_AGP
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_CTX_BITMAP
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_CTX_BITMAP
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_IRQ
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_IRQ
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_QUEUE
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_QUEUE
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_MULTIPLE_DMA_QUEUES
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_MULTIPLE_DMA_QUEUES
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_SCHEDULE
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_SCHEDULE
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_FLUSH
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_FLUSH
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_READY
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_READY
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_QUIESCENT
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_QUIESCENT
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_RELEASE
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_RELEASE
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_COUNTERS
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_COUNTERS
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_SG
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_SG
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_KERNEL_CTX_SWITCH
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_KERNEL_CTX_SWITCH
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PCI_ANY_ID
end_ifndef

begin_define
define|#
directive|define
name|PCI_ANY_ID
value|~0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_PREINIT
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_PREINIT
parameter_list|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_POSTINIT
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_POSTINIT
parameter_list|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_PRERELEASE
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_PRERELEASE
parameter_list|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_PRETAKEDOWN
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_PRETAKEDOWN
parameter_list|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_POSTCLEANUP
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_POSTCLEANUP
parameter_list|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_PRESETUP
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_PRESETUP
parameter_list|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_POSTSETUP
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_POSTSETUP
parameter_list|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_IOCTLS
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_IOCTLS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_FOPS
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_define
define|#
directive|define
name|DRIVER_FOPS
define|\
value|static struct file_operations	DRM(fops) = {	\ 	owner:   THIS_MODULE,			\ 	open:	 DRM(open),			\ 	flush:	 DRM(flush),			\ 	release: DRM(release),			\ 	ioctl:	 DRM(ioctl),			\ 	mmap:	 DRM(mmap),			\ 	read:	 DRM(read),			\ 	fasync:	 DRM(fasync),			\ 	poll:	 DRM(poll),			\ }
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __linux__ */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_if
if|#
directive|if
name|DRM_LINUX
end_if

begin_include
include|#
directive|include
file|<sys/file.h>
end_include

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_include
include|#
directive|include
file|<machine/../linux/linux.h>
end_include

begin_include
include|#
directive|include
file|<machine/../linux/linux_proto.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FreeBSD__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * The default number of instances (minor numbers) to initialize.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_NUM_CARDS
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_NUM_CARDS
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_function_decl
specifier|static
name|int
name|DRM
function_decl|(
name|init
function_decl|)
parameter_list|(
name|device_t
name|nbdev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|DRM
function_decl|(
name|cleanup
function_decl|)
parameter_list|(
name|device_t
name|nbdev
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|CDEV_MAJOR
value|145
end_define

begin_define
define|#
directive|define
name|DRIVER_SOFTC
parameter_list|(
name|unit
parameter_list|)
define|\
value|((drm_device_t *) devclass_get_softc(DRM(devclass), unit))
end_define

begin_if
if|#
directive|if
name|__REALLY_HAVE_AGP
end_if

begin_expr_stmt
name|MODULE_DEPEND
argument_list|(
name|DRIVER_NAME
argument_list|,
name|agp
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|DRM_LINUX
end_if

begin_expr_stmt
name|MODULE_DEPEND
argument_list|(
name|DRIVER_NAME
argument_list|,
name|linux
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FreeBSD__ */
end_comment

begin_function_decl
specifier|static
name|drm_device_t
modifier|*
name|DRM
parameter_list|(
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|int
modifier|*
name|DRM
parameter_list|(
name|minor
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|int
name|DRM
parameter_list|(
name|numdevs
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_expr_stmt
name|DRIVER_FOPS
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __linux__ */
end_comment

begin_decl_stmt
specifier|static
name|drm_ioctl_desc_t
name|DRM
argument_list|(
name|ioctls
argument_list|)
decl|[]
init|=
block|{
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_VERSION
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|version
argument_list|)
block|,
literal|0
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_GET_UNIQUE
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|getunique
argument_list|)
block|,
literal|0
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_GET_MAGIC
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|getmagic
argument_list|)
block|,
literal|0
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_IRQ_BUSID
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|irq_busid
argument_list|)
block|,
literal|0
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_GET_MAP
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|getmap
argument_list|)
block|,
literal|0
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_GET_CLIENT
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|getclient
argument_list|)
block|,
literal|0
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_GET_STATS
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|getstats
argument_list|)
block|,
literal|0
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_SET_UNIQUE
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|setunique
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_BLOCK
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|block
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_UNBLOCK
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|unblock
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_AUTH_MAGIC
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|authmagic
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_ADD_MAP
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|addmap
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_RM_MAP
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|rmmap
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
if|#
directive|if
name|__HAVE_CTX_BITMAP
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_SET_SAREA_CTX
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|setsareactx
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_GET_SAREA_CTX
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|getsareactx
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
endif|#
directive|endif
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_ADD_CTX
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|addctx
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_RM_CTX
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|rmctx
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_MOD_CTX
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|modctx
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_GET_CTX
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|getctx
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_SWITCH_CTX
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|switchctx
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_NEW_CTX
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|newctx
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_RES_CTX
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|resctx
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_ADD_DRAW
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|adddraw
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_RM_DRAW
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|rmdraw
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_LOCK
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|lock
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_UNLOCK
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|unlock
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_FINISH
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|finish
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
if|#
directive|if
name|__HAVE_DMA
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_ADD_BUFS
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|addbufs
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_MARK_BUFS
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|markbufs
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_INFO_BUFS
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|infobufs
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_MAP_BUFS
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|mapbufs
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_FREE_BUFS
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|freebufs
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|/* The DRM_IOCTL_DMA ioctl should be defined by the driver. 	 */
if|#
directive|if
name|__HAVE_DMA_IRQ
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_CONTROL
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|control
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|__REALLY_HAVE_AGP
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_AGP_ACQUIRE
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|agp_acquire
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_AGP_RELEASE
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|agp_release
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_AGP_ENABLE
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|agp_enable
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_AGP_INFO
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|agp_info
argument_list|)
block|,
literal|1
block|,
literal|0
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_AGP_ALLOC
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|agp_alloc
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_AGP_FREE
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|agp_free
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_AGP_BIND
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|agp_bind
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_AGP_UNBIND
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|agp_unbind
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|__REALLY_HAVE_SG
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_SG_ALLOC
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|sg_alloc
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
index|[
name|DRM_IOCTL_NR
argument_list|(
name|DRM_IOCTL_SG_FREE
argument_list|)
index|]
operator|=
block|{
name|DRM
argument_list|(
name|sg_free
argument_list|)
block|,
literal|1
block|,
literal|1
block|}
block|,
endif|#
directive|endif
name|DRIVER_IOCTLS
block|}
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|DRIVER_IOCTL_COUNT
value|DRM_ARRAY_SIZE( DRM(ioctls) )
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_ifdef
ifdef|#
directive|ifdef
name|MODULE
end_ifdef

begin_decl_stmt
specifier|static
name|char
modifier|*
name|drm_opts
init|=
name|NULL
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|MODULE_AUTHOR
argument_list|(
name|DRIVER_AUTHOR
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|MODULE_DESCRIPTION
argument_list|(
name|DRIVER_DESC
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|MODULE_PARM
argument_list|(
name|drm_opts
argument_list|,
literal|"s"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|MODULE_LICENSE
argument_list|(
literal|"GPL and additional rights"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __linux__ */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_function
specifier|static
name|int
name|DRM
function|(
name|probe
function|)
parameter_list|(
name|device_t
name|dev
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|s
init|=
literal|0
decl_stmt|;
name|int
name|pciid
init|=
name|pci_get_devid
argument_list|(
name|dev
argument_list|)
decl_stmt|;
name|int
name|vendor
init|=
operator|(
name|pciid
operator|&
literal|0x0000ffff
operator|)
decl_stmt|;
name|int
name|device
init|=
operator|(
name|pciid
operator|&
literal|0xffff0000
operator|)
operator|>>
literal|16
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|done
init|=
literal|0
decl_stmt|;
comment|/*DRM_INFO("Checking PCI vendor=%d, device=%d\n", vendor, device);*/
while|while
condition|(
operator|!
name|done
operator|&&
operator|(
name|DRM
argument_list|(
name|devicelist
argument_list|)
index|[
name|i
index|]
operator|.
name|vendor
operator|!=
literal|0
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|DRM
argument_list|(
name|devicelist
argument_list|)
index|[
name|i
index|]
operator|.
name|vendor
operator|==
name|vendor
operator|)
operator|&&
operator|(
name|DRM
argument_list|(
name|devicelist
argument_list|)
index|[
name|i
index|]
operator|.
name|device
operator|==
name|device
operator|)
condition|)
block|{
name|done
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|DRM
argument_list|(
name|devicelist
argument_list|)
index|[
name|i
index|]
operator|.
name|supported
condition|)
name|s
operator|=
name|DRM
argument_list|(
name|devicelist
argument_list|)
index|[
name|i
index|]
operator|.
name|name
expr_stmt|;
else|else
name|DRM_INFO
argument_list|(
literal|"%s not supported\n"
argument_list|,
name|DRM
argument_list|(
name|devicelist
argument_list|)
index|[
name|i
index|]
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|s
condition|)
block|{
name|device_set_desc
argument_list|(
name|dev
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
name|ENXIO
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|DRM
function|(
name|attach
function|)
parameter_list|(
name|device_t
name|dev
parameter_list|)
block|{
return|return
name|DRM
argument_list|(
name|init
argument_list|)
argument_list|(
name|dev
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|DRM
function|(
name|detach
function|)
parameter_list|(
name|device_t
name|dev
parameter_list|)
block|{
name|DRM
function_decl|(
name|cleanup
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
return|return
literal|0
return|;
block|}
end_function

begin_decl_stmt
specifier|static
name|device_method_t
name|DRM
argument_list|(
name|methods
argument_list|)
decl|[]
init|=
block|{
comment|/* Device interface */
name|DEVMETHOD
argument_list|(
name|device_probe
argument_list|,
name|DRM
argument_list|(
name|probe
argument_list|)
argument_list|)
block|,
name|DEVMETHOD
argument_list|(
name|device_attach
argument_list|,
name|DRM
argument_list|(
name|attach
argument_list|)
argument_list|)
block|,
name|DEVMETHOD
argument_list|(
name|device_detach
argument_list|,
name|DRM
argument_list|(
name|detach
argument_list|)
argument_list|)
block|,
block|{
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|static
name|driver_t
name|DRM
parameter_list|(
name|driver
parameter_list|)
init|=
block|{
literal|"drm"
operator|,
function_decl|DRM
parameter_list|(
name|methods
parameter_list|)
operator|,
function_decl|sizeof
parameter_list|(
name|drm_device_t
parameter_list|)
operator|,
end_function_decl

begin_function_decl
unit|};
specifier|static
name|devclass_t
name|DRM
parameter_list|(
name|devclass
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|struct
name|cdevsw
name|DRM
parameter_list|(
name|cdevsw
parameter_list|)
init|=
block|{
comment|/* open */
name|DRM
argument_list|(
name|open
argument_list|)
operator|,
comment|/* close */
function_decl|DRM
parameter_list|(
name|close
parameter_list|)
operator|,
comment|/* read */
function_decl|DRM
parameter_list|(
name|read
parameter_list|)
operator|,
comment|/* write */
function_decl|DRM
parameter_list|(
name|write
parameter_list|)
operator|,
comment|/* ioctl */
function_decl|DRM
parameter_list|(
name|ioctl
parameter_list|)
operator|,
comment|/* poll */
function_decl|DRM
parameter_list|(
name|poll
parameter_list|)
operator|,
comment|/* mmap */
function_decl|DRM
parameter_list|(
name|mmap
parameter_list|)
operator|,
comment|/* strategy */
function_decl|nostrategy
operator|,
comment|/* name */
function_decl|DRIVER_NAME
operator|,
comment|/* maj */
function_decl|CDEV_MAJOR
operator|,
comment|/* dump */
function_decl|nodump
operator|,
comment|/* psize */
function_decl|nopsize
operator|,
comment|/* flags */
function_decl|D_TTY | D_TRACKCLOSE
operator|,
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
comment|/* kqfilter */
function_decl|0
else|#
directive|else
comment|/* bmaj */
function_decl|-1
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FreeBSD__ */
end_comment

begin_function
specifier|static
name|int
name|DRM
function|(
name|setup
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|DRIVER_PRESETUP
argument_list|()
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|dev
operator|->
name|ioctl_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|dev
operator|->
name|vma_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dev
operator|->
name|buf_use
operator|=
literal|0
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|dev
operator|->
name|buf_alloc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|#
directive|if
name|__HAVE_DMA
name|i
operator|=
name|DRM
argument_list|(
name|dma_setup
argument_list|)
argument_list|(
name|dev
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
return|return
name|i
return|;
endif|#
directive|endif
name|dev
operator|->
name|counters
operator|=
literal|6
operator|+
name|__HAVE_COUNTERS
expr_stmt|;
name|dev
operator|->
name|types
index|[
literal|0
index|]
operator|=
name|_DRM_STAT_LOCK
expr_stmt|;
name|dev
operator|->
name|types
index|[
literal|1
index|]
operator|=
name|_DRM_STAT_OPENS
expr_stmt|;
name|dev
operator|->
name|types
index|[
literal|2
index|]
operator|=
name|_DRM_STAT_CLOSES
expr_stmt|;
name|dev
operator|->
name|types
index|[
literal|3
index|]
operator|=
name|_DRM_STAT_IOCTLS
expr_stmt|;
name|dev
operator|->
name|types
index|[
literal|4
index|]
operator|=
name|_DRM_STAT_LOCKS
expr_stmt|;
name|dev
operator|->
name|types
index|[
literal|5
index|]
operator|=
name|_DRM_STAT_UNLOCKS
expr_stmt|;
ifdef|#
directive|ifdef
name|__HAVE_COUNTER6
name|dev
operator|->
name|types
index|[
literal|6
index|]
operator|=
name|__HAVE_COUNTER6
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__HAVE_COUNTER7
name|dev
operator|->
name|types
index|[
literal|7
index|]
operator|=
name|__HAVE_COUNTER7
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__HAVE_COUNTER8
name|dev
operator|->
name|types
index|[
literal|8
index|]
operator|=
name|__HAVE_COUNTER8
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__HAVE_COUNTER9
name|dev
operator|->
name|types
index|[
literal|9
index|]
operator|=
name|__HAVE_COUNTER9
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__HAVE_COUNTER10
name|dev
operator|->
name|types
index|[
literal|10
index|]
operator|=
name|__HAVE_COUNTER10
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__HAVE_COUNTER11
name|dev
operator|->
name|types
index|[
literal|11
index|]
operator|=
name|__HAVE_COUNTER11
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__HAVE_COUNTER12
name|dev
operator|->
name|types
index|[
literal|12
index|]
operator|=
name|__HAVE_COUNTER12
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__HAVE_COUNTER13
name|dev
operator|->
name|types
index|[
literal|13
index|]
operator|=
name|__HAVE_COUNTER13
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__HAVE_COUNTER14
name|dev
operator|->
name|types
index|[
literal|14
index|]
operator|=
name|__HAVE_COUNTER14
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__HAVE_COUNTER15
name|dev
operator|->
name|types
index|[
literal|14
index|]
operator|=
name|__HAVE_COUNTER14
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|DRM_ARRAY_SIZE
argument_list|(
name|dev
operator|->
name|counts
argument_list|)
condition|;
name|i
operator|++
control|)
name|atomic_set
argument_list|(
operator|&
name|dev
operator|->
name|counts
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|DRM_HASH_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|dev
operator|->
name|magiclist
index|[
name|i
index|]
operator|.
name|head
operator|=
name|NULL
expr_stmt|;
name|dev
operator|->
name|magiclist
index|[
name|i
index|]
operator|.
name|tail
operator|=
name|NULL
expr_stmt|;
block|}
name|dev
operator|->
name|maplist
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|maplist
argument_list|)
argument_list|,
name|DRM_MEM_MAPS
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|maplist
operator|==
name|NULL
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
name|memset
argument_list|(
name|dev
operator|->
name|maplist
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|maplist
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|INIT_LIST_HEAD
argument_list|(
operator|&
name|dev
operator|->
name|maplist
operator|->
name|head
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|TAILQ_INIT
argument_list|(
name|dev
operator|->
name|maplist
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|dev
operator|->
name|map_count
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|vmalist
operator|=
name|NULL
expr_stmt|;
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|=
name|NULL
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|init_waitqueue_head
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|dev
operator|->
name|lock
operator|.
name|lock_queue
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|dev
operator|->
name|queue_count
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|queue_reserved
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|queue_slots
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|queuelist
operator|=
name|NULL
expr_stmt|;
name|dev
operator|->
name|irq
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|context_flag
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|interrupt_flag
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|dma_flag
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|last_context
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|last_switch
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|last_checked
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|init_timer
argument_list|(
operator|&
name|dev
operator|->
name|timer
argument_list|)
expr_stmt|;
name|init_waitqueue_head
argument_list|(
operator|&
name|dev
operator|->
name|context_wait
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
name|callout_init
argument_list|(
operator|&
name|dev
operator|->
name|timer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|#
directive|else
name|callout_init
argument_list|(
operator|&
name|dev
operator|->
name|timer
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|dev
operator|->
name|context_wait
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|dev
operator|->
name|ctx_start
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|lck_start
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|buf_rp
operator|=
name|dev
operator|->
name|buf
expr_stmt|;
name|dev
operator|->
name|buf_wp
operator|=
name|dev
operator|->
name|buf
expr_stmt|;
name|dev
operator|->
name|buf_end
operator|=
name|dev
operator|->
name|buf
operator|+
name|DRM_BSZ
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|dev
operator|->
name|buf_async
operator|=
name|NULL
expr_stmt|;
name|init_waitqueue_head
argument_list|(
operator|&
name|dev
operator|->
name|buf_readers
argument_list|)
expr_stmt|;
name|init_waitqueue_head
argument_list|(
operator|&
name|dev
operator|->
name|buf_writers
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|dev
operator|->
name|buf_sigio
operator|=
name|NULL
expr_stmt|;
name|dev
operator|->
name|buf_readers
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|buf_writers
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|buf_selecting
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
comment|/* The kernel's context could be created here, but is now created 	 * in drm_dma_enqueue.	This is more resource-efficient for 	 * hardware that does not do DMA, but may mean that 	 * drm_select_queue fails between the time the interrupt is 	 * initialized and the time the queues are initialized. 	 */
name|DRIVER_POSTSETUP
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|DRM
function|(
name|takedown
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|drm_magic_entry_t
modifier|*
name|pt
decl_stmt|,
modifier|*
name|next
decl_stmt|;
name|drm_map_t
modifier|*
name|map
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|drm_map_list_t
modifier|*
name|r_list
decl_stmt|;
name|struct
name|list_head
modifier|*
name|list
decl_stmt|,
modifier|*
name|list_next
decl_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|drm_map_list_entry_t
modifier|*
name|list
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|drm_vma_entry_t
modifier|*
name|vma
decl_stmt|,
modifier|*
name|vma_next
decl_stmt|;
name|int
name|i
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|DRIVER_PRETAKEDOWN
argument_list|()
expr_stmt|;
if|#
directive|if
name|__HAVE_DMA_IRQ
if|if
condition|(
name|dev
operator|->
name|irq
condition|)
name|DRM
function_decl|(
name|irq_uninstall
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
endif|#
directive|endif
name|DRM_OS_LOCK
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|del_timer
argument_list|(
operator|&
name|dev
operator|->
name|timer
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|callout_stop
argument_list|(
operator|&
name|dev
operator|->
name|timer
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|if
condition|(
name|dev
operator|->
name|devname
condition|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dev
operator|->
name|devname
argument_list|,
name|strlen
argument_list|(
name|dev
operator|->
name|devname
argument_list|)
operator|+
literal|1
argument_list|,
name|DRM_MEM_DRIVER
argument_list|)
expr_stmt|;
name|dev
operator|->
name|devname
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|dev
operator|->
name|unique
condition|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dev
operator|->
name|unique
argument_list|,
name|strlen
argument_list|(
name|dev
operator|->
name|unique
argument_list|)
operator|+
literal|1
argument_list|,
name|DRM_MEM_DRIVER
argument_list|)
expr_stmt|;
name|dev
operator|->
name|unique
operator|=
name|NULL
expr_stmt|;
name|dev
operator|->
name|unique_len
operator|=
literal|0
expr_stmt|;
block|}
comment|/* Clear pid list */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|DRM_HASH_SIZE
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|pt
operator|=
name|dev
operator|->
name|magiclist
index|[
name|i
index|]
operator|.
name|head
init|;
name|pt
condition|;
name|pt
operator|=
name|next
control|)
block|{
name|next
operator|=
name|pt
operator|->
name|next
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|pt
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|pt
argument_list|)
argument_list|,
name|DRM_MEM_MAGIC
argument_list|)
expr_stmt|;
block|}
name|dev
operator|->
name|magiclist
index|[
name|i
index|]
operator|.
name|head
operator|=
name|dev
operator|->
name|magiclist
index|[
name|i
index|]
operator|.
name|tail
operator|=
name|NULL
expr_stmt|;
block|}
if|#
directive|if
name|__REALLY_HAVE_AGP
comment|/* Clear AGP information */
if|if
condition|(
name|dev
operator|->
name|agp
condition|)
block|{
name|drm_agp_mem_t
modifier|*
name|entry
decl_stmt|;
name|drm_agp_mem_t
modifier|*
name|nexte
decl_stmt|;
comment|/* Remove AGP resources, but leave dev->agp                                    intact until drv_cleanup is called. */
for|for
control|(
name|entry
operator|=
name|dev
operator|->
name|agp
operator|->
name|memory
init|;
name|entry
condition|;
name|entry
operator|=
name|nexte
control|)
block|{
name|nexte
operator|=
name|entry
operator|->
name|next
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
if|if
condition|(
name|entry
operator|->
name|bound
condition|)
name|DRM
function_decl|(
name|unbind_agp
function_decl|)
parameter_list|(
name|entry
operator|->
name|memory
parameter_list|)
function_decl|;
name|DRM
function_decl|(
name|free_agp
function_decl|)
parameter_list|(
name|entry
operator|->
name|memory
parameter_list|,
name|entry
operator|->
name|pages
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
if|if
condition|(
name|entry
operator|->
name|bound
condition|)
name|DRM
function_decl|(
name|unbind_agp
function_decl|)
parameter_list|(
name|entry
operator|->
name|handle
parameter_list|)
function_decl|;
name|DRM
function_decl|(
name|free_agp
function_decl|)
parameter_list|(
name|entry
operator|->
name|handle
parameter_list|,
name|entry
operator|->
name|pages
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|entry
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|entry
argument_list|)
argument_list|,
name|DRM_MEM_AGPLISTS
argument_list|)
expr_stmt|;
block|}
name|dev
operator|->
name|agp
operator|->
name|memory
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|agp
operator|->
name|acquired
condition|)
name|DRM
function_decl|(
name|agp_do_release
function_decl|)
parameter_list|()
function_decl|;
name|dev
operator|->
name|agp
operator|->
name|acquired
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|agp
operator|->
name|enabled
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* Clear vma list (only built for debugging) */
if|if
condition|(
name|dev
operator|->
name|vmalist
condition|)
block|{
for|for
control|(
name|vma
operator|=
name|dev
operator|->
name|vmalist
init|;
name|vma
condition|;
name|vma
operator|=
name|vma_next
control|)
block|{
name|vma_next
operator|=
name|vma
operator|->
name|next
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|vma
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|vma
argument_list|)
argument_list|,
name|DRM_MEM_VMAS
argument_list|)
expr_stmt|;
block|}
name|dev
operator|->
name|vmalist
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|dev
operator|->
name|maplist
condition|)
block|{
ifdef|#
directive|ifdef
name|__linux__
for|for
control|(
name|list
operator|=
name|dev
operator|->
name|maplist
operator|->
name|head
operator|.
name|next
init|;
name|list
operator|!=
operator|&
name|dev
operator|->
name|maplist
operator|->
name|head
condition|;
name|list
operator|=
name|list_next
control|)
block|{
name|list_next
operator|=
name|list
operator|->
name|next
expr_stmt|;
name|r_list
operator|=
operator|(
name|drm_map_list_t
operator|*
operator|)
name|list
expr_stmt|;
name|map
operator|=
name|r_list
operator|->
name|map
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|r_list
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|r_list
argument_list|)
argument_list|,
name|DRM_MEM_MAPS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|map
condition|)
continue|continue;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
while|while
condition|(
operator|(
name|list
operator|=
name|TAILQ_FIRST
argument_list|(
name|dev
operator|->
name|maplist
argument_list|)
operator|)
condition|)
block|{
name|map
operator|=
name|list
operator|->
name|map
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
switch|switch
condition|(
name|map
operator|->
name|type
condition|)
block|{
case|case
name|_DRM_REGISTERS
case|:
case|case
name|_DRM_FRAME_BUFFER
case|:
if|#
directive|if
name|__REALLY_HAVE_MTRR
if|if
condition|(
name|map
operator|->
name|mtrr
operator|>=
literal|0
condition|)
block|{
name|int
name|retcode
decl_stmt|;
name|retcode
operator|=
name|mtrr_del
argument_list|(
name|map
operator|->
name|mtrr
argument_list|,
name|map
operator|->
name|offset
argument_list|,
name|map
operator|->
name|size
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"mtrr_del=%d\n"
argument_list|,
name|retcode
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|DRM
function_decl|(
name|ioremapfree
function_decl|)
parameter_list|(
name|map
operator|->
name|handle
parameter_list|,
name|map
operator|->
name|size
parameter_list|)
function_decl|;
break|break;
case|case
name|_DRM_SHM
case|:
ifdef|#
directive|ifdef
name|__linux__
name|vfree
argument_list|(
name|map
operator|->
name|handle
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM
argument_list|(
name|free_pages
argument_list|)
argument_list|(
operator|(
name|unsigned
name|long
operator|)
name|map
operator|->
name|handle
argument_list|,
name|DRM
argument_list|(
name|order
argument_list|)
argument_list|(
name|map
operator|->
name|size
argument_list|)
operator|-
name|PAGE_SHIFT
argument_list|,
name|DRM_MEM_SAREA
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
break|break;
case|case
name|_DRM_AGP
case|:
comment|/* Do nothing here, because this is all 				 * handled in the AGP/GART driver. 				 */
break|break;
case|case
name|_DRM_SCATTER_GATHER
case|:
comment|/* Handle it, but do nothing, if REALLY_HAVE_SG 				 * isn't defined. 				 */
if|#
directive|if
name|__REALLY_HAVE_SG
if|if
condition|(
name|dev
operator|->
name|sg
condition|)
block|{
name|DRM
function_decl|(
name|sg_cleanup
function_decl|)
parameter_list|(
name|dev
operator|->
name|sg
parameter_list|)
function_decl|;
name|dev
operator|->
name|sg
operator|=
name|NULL
expr_stmt|;
block|}
endif|#
directive|endif
break|break;
block|}
ifdef|#
directive|ifdef
name|__FreeBSD__
name|TAILQ_REMOVE
argument_list|(
name|dev
operator|->
name|maplist
argument_list|,
name|list
argument_list|,
name|link
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|list
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|list
argument_list|)
argument_list|,
name|DRM_MEM_MAPS
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|map
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|map
argument_list|)
argument_list|,
name|DRM_MEM_MAPS
argument_list|)
expr_stmt|;
block|}
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dev
operator|->
name|maplist
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|maplist
argument_list|)
argument_list|,
name|DRM_MEM_MAPS
argument_list|)
expr_stmt|;
name|dev
operator|->
name|maplist
operator|=
name|NULL
expr_stmt|;
block|}
if|#
directive|if
name|__HAVE_DMA_QUEUE
operator|||
name|__HAVE_MULTIPLE_DMA_QUEUES
if|if
condition|(
name|dev
operator|->
name|queuelist
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|dev
operator|->
name|queue_count
condition|;
name|i
operator|++
control|)
block|{
name|DRM
argument_list|(
name|waitlist_destroy
argument_list|)
argument_list|(
operator|&
name|dev
operator|->
name|queuelist
index|[
name|i
index|]
operator|->
name|waitlist
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|queuelist
index|[
name|i
index|]
condition|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dev
operator|->
name|queuelist
index|[
name|i
index|]
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|queuelist
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|DRM_MEM_QUEUES
argument_list|)
expr_stmt|;
name|dev
operator|->
name|queuelist
index|[
name|i
index|]
operator|=
name|NULL
expr_stmt|;
block|}
block|}
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dev
operator|->
name|queuelist
argument_list|,
name|dev
operator|->
name|queue_slots
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|queuelist
argument_list|)
argument_list|,
name|DRM_MEM_QUEUES
argument_list|)
expr_stmt|;
name|dev
operator|->
name|queuelist
operator|=
name|NULL
expr_stmt|;
block|}
name|dev
operator|->
name|queue_count
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|__HAVE_DMA
name|DRM
function_decl|(
name|dma_takedown
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
endif|#
directive|endif
if|if
condition|(
name|dev
operator|->
name|lock
operator|.
name|hw_lock
condition|)
block|{
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|=
name|NULL
expr_stmt|;
comment|/* SHM removed */
name|dev
operator|->
name|lock
operator|.
name|pid
operator|=
literal|0
expr_stmt|;
name|DRM_OS_WAKEUP_INT
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|)
expr_stmt|;
block|}
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/*  * Figure out how many instances to initialize.  */
specifier|static
name|int
name|drm_count_cards
parameter_list|(
name|void
parameter_list|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DRIVER_CARD_LIST
argument_list|)
name|int
name|i
decl_stmt|;
name|drm_pci_list_t
modifier|*
name|l
decl_stmt|;
name|u16
name|device
decl_stmt|,
name|vendor
decl_stmt|;
name|struct
name|pci_dev
modifier|*
name|pdev
init|=
name|NULL
decl_stmt|;
endif|#
directive|endif
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DRIVER_COUNT_CARDS
argument_list|)
name|num
operator|=
name|DRIVER_COUNT_CARDS
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|DRIVER_CARD_LIST
argument_list|)
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|l
operator|=
name|DRIVER_CARD_LIST
init|;
name|l
index|[
name|i
index|]
operator|.
name|vendor
operator|!=
literal|0
condition|;
name|i
operator|++
control|)
block|{
name|pdev
operator|=
name|NULL
expr_stmt|;
name|vendor
operator|=
name|l
index|[
name|i
index|]
operator|.
name|vendor
expr_stmt|;
name|device
operator|=
name|l
index|[
name|i
index|]
operator|.
name|device
expr_stmt|;
if|if
condition|(
name|device
operator|==
literal|0xffff
condition|)
name|device
operator|=
name|PCI_ANY_ID
expr_stmt|;
if|if
condition|(
name|vendor
operator|==
literal|0xffff
condition|)
name|vendor
operator|=
name|PCI_ANY_ID
expr_stmt|;
while|while
condition|(
operator|(
name|pdev
operator|=
name|pci_find_device
argument_list|(
name|vendor
argument_list|,
name|device
argument_list|,
name|pdev
argument_list|)
operator|)
condition|)
block|{
name|num
operator|++
expr_stmt|;
comment|/* FIXME: What about two cards of the same device id? */
block|}
block|}
else|#
directive|else
name|num
operator|=
name|DRIVER_NUM_CARDS
expr_stmt|;
endif|#
directive|endif
name|DRM_DEBUG
argument_list|(
literal|"numdevs = %d\n"
argument_list|,
name|num
argument_list|)
expr_stmt|;
return|return
name|num
return|;
block|}
comment|/* drm_init is called via init_module at module load time, or via  * linux/init/main.c (this is not currently supported).  */
ifdef|#
directive|ifdef
name|__linux__
specifier|static
name|int
name|__init
name|drm_init
argument_list|(
name|void
argument_list|)
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
decl|static
name|int
name|DRM
argument_list|(
name|init
argument_list|)
argument_list|(
name|device_t
name|nbdev
argument_list|)
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|{
name|drm_device_t
modifier|*
name|dev
decl_stmt|;
name|int
name|i
decl_stmt|;
if|#
directive|if
name|__HAVE_CTX_BITMAP
name|int
name|retcode
decl_stmt|;
endif|#
directive|endif
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|MODULE
name|DRM
function_decl|(
name|parse_options
function_decl|)
parameter_list|(
name|drm_opts
parameter_list|)
function_decl|;
endif|#
directive|endif
name|DRM
argument_list|(
name|numdevs
argument_list|)
operator|=
name|drm_count_cards
argument_list|()
expr_stmt|;
comment|/* Force at least one instance. */
if|if
condition|(
name|DRM
argument_list|(
name|numdevs
argument_list|)
operator|<=
literal|0
condition|)
name|DRM
argument_list|(
name|numdevs
argument_list|)
operator|=
literal|1
expr_stmt|;
name|DRM
argument_list|(
name|device
argument_list|)
operator|=
name|DRM_OS_MALLOC
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|DRM
argument_list|(
name|device
argument_list|)
argument_list|)
operator|*
name|DRM
argument_list|(
name|numdevs
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|DRM
argument_list|(
name|device
argument_list|)
condition|)
block|{
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
block|}
name|DRM
argument_list|(
name|minor
argument_list|)
operator|=
name|DRM_OS_MALLOC
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
operator|(
name|DRM
argument_list|(
name|minor
argument_list|)
operator|)
argument_list|)
operator|*
name|DRM
argument_list|(
name|numdevs
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|DRM
argument_list|(
name|minor
argument_list|)
condition|)
block|{
name|DRM_OS_FREE
argument_list|(
name|DRM
argument_list|(
name|device
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
block|}
name|DRIVER_PREINIT
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|DRM
function_decl|(
name|mem_init
function_decl|)
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* __linux__ */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|DRM
argument_list|(
name|numdevs
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|dev
operator|=
operator|&
operator|(
name|DRM
argument_list|(
name|device
argument_list|)
index|[
name|i
index|]
operator|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|int
name|unit
init|=
name|device_get_unit
argument_list|(
name|nbdev
argument_list|)
decl_stmt|;
comment|/* FIXME??? - multihead !!! */
name|dev
operator|=
name|device_get_softc
argument_list|(
name|nbdev
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|memset
argument_list|(
operator|(
name|void
operator|*
operator|)
name|dev
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|dev
operator|->
name|count_lock
operator|=
name|SPIN_LOCK_UNLOCKED
expr_stmt|;
name|sema_init
argument_list|(
operator|&
name|dev
operator|->
name|struct_sem
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|DRM
argument_list|(
name|minor
argument_list|)
index|[
name|i
index|]
operator|=
name|DRM
argument_list|(
name|stub_register
argument_list|)
argument_list|(
name|DRIVER_NAME
argument_list|,
operator|&
name|DRM
argument_list|(
name|fops
argument_list|)
argument_list|,
name|dev
argument_list|)
operator|)
operator|<
literal|0
condition|)
return|return
operator|-
name|EPERM
return|;
name|dev
operator|->
name|device
operator|=
name|MKDEV
argument_list|(
name|DRM_MAJOR
argument_list|,
name|DRM
argument_list|(
name|minor
argument_list|)
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|dev
operator|->
name|name
operator|=
name|DRIVER_NAME
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM
argument_list|(
name|minor
argument_list|)
index|[
name|i
index|]
operator|=
name|unit
expr_stmt|;
name|DRM_OS_SPININIT
argument_list|(
name|dev
operator|->
name|count_lock
argument_list|,
literal|"drm device"
argument_list|)
expr_stmt|;
name|lockinit
argument_list|(
operator|&
name|dev
operator|->
name|dev_lock
argument_list|,
name|PZERO
argument_list|,
literal|"drmlk"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dev
operator|->
name|device
operator|=
name|nbdev
expr_stmt|;
name|dev
operator|->
name|devnode
operator|=
name|make_dev
argument_list|(
operator|&
name|DRM
argument_list|(
name|cdevsw
argument_list|)
argument_list|,
name|unit
argument_list|,
name|DRM_DEV_UID
argument_list|,
name|DRM_DEV_GID
argument_list|,
name|DRM_DEV_MODE
argument_list|,
literal|"dri/card%d"
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|dev
operator|->
name|name
operator|=
name|DRIVER_NAME
expr_stmt|;
name|DRM
function_decl|(
name|mem_init
function_decl|)
parameter_list|()
function_decl|;
name|DRM
function_decl|(
name|sysctl_init
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
name|TAILQ_INIT
argument_list|(
operator|&
name|dev
operator|->
name|files
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|#
directive|if
name|__REALLY_HAVE_AGP
name|dev
operator|->
name|agp
operator|=
name|DRM
argument_list|(
name|agp_init
argument_list|)
argument_list|()
expr_stmt|;
if|#
directive|if
name|__MUST_HAVE_AGP
if|if
condition|(
name|dev
operator|->
name|agp
operator|==
name|NULL
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Cannot initialize the agpgart module.\n"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|DRM
argument_list|(
name|stub_unregister
argument_list|)
argument_list|(
name|DRM
argument_list|(
name|minor
argument_list|)
index|[
name|i
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM
function_decl|(
name|sysctl_cleanup
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
name|destroy_dev
argument_list|(
name|dev
operator|->
name|devnode
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM
function_decl|(
name|takedown
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|__REALLY_HAVE_MTRR
if|if
condition|(
name|dev
operator|->
name|agp
condition|)
name|dev
operator|->
name|agp
operator|->
name|agp_mtrr
operator|=
name|mtrr_add
argument_list|(
name|dev
operator|->
name|agp
operator|->
name|agp_info
operator|.
name|aper_base
argument_list|,
name|dev
operator|->
name|agp
operator|->
name|agp_info
operator|.
name|aper_size
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
name|MTRR_TYPE_WRCOMB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|__HAVE_CTX_BITMAP
name|retcode
operator|=
name|DRM
argument_list|(
name|ctxbitmap_init
argument_list|)
argument_list|(
name|dev
argument_list|)
expr_stmt|;
if|if
condition|(
name|retcode
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Cannot allocate memory for context bitmap.\n"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|DRM
argument_list|(
name|stub_unregister
argument_list|)
argument_list|(
name|DRM
argument_list|(
name|minor
argument_list|)
index|[
name|i
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM
function_decl|(
name|sysctl_cleanup
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
name|destroy_dev
argument_list|(
name|dev
operator|->
name|devnode
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM
function_decl|(
name|takedown
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
return|return
name|retcode
return|;
block|}
endif|#
directive|endif
name|DRM_INFO
argument_list|(
literal|"Initialized %s %d.%d.%d %s on minor %d\n"
argument_list|,
name|DRIVER_NAME
argument_list|,
name|DRIVER_MAJOR
argument_list|,
name|DRIVER_MINOR
argument_list|,
name|DRIVER_PATCHLEVEL
argument_list|,
name|DRIVER_DATE
argument_list|,
name|DRM
argument_list|(
name|minor
argument_list|)
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|DRIVER_POSTINIT
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/* drm_cleanup is called via cleanup_module at module unload time.  */
ifdef|#
directive|ifdef
name|__linux__
specifier|static
name|void
name|__exit
name|drm_cleanup
argument_list|(
name|void
argument_list|)
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
decl|static
name|void
name|DRM
argument_list|(
name|cleanup
argument_list|)
argument_list|(
name|device_t
name|nbdev
argument_list|)
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|{
name|drm_device_t
modifier|*
name|dev
decl_stmt|;
name|int
name|i
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|DRM
argument_list|(
name|numdevs
argument_list|)
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|dev
operator|=
operator|&
operator|(
name|DRM
argument_list|(
name|device
argument_list|)
index|[
name|i
index|]
operator|)
expr_stmt|;
if|if
condition|(
name|DRM
argument_list|(
name|stub_unregister
argument_list|)
argument_list|(
name|DRM
argument_list|(
name|minor
argument_list|)
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Cannot unload module\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DRM_DEBUG
argument_list|(
literal|"minor %d unregistered\n"
argument_list|,
name|DRM
argument_list|(
name|minor
argument_list|)
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|DRM_INFO
argument_list|(
literal|"Module unloaded\n"
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
comment|/* FIXME??? - multihead */
name|dev
operator|=
name|device_get_softc
argument_list|(
name|nbdev
argument_list|)
expr_stmt|;
name|DRM
function_decl|(
name|sysctl_cleanup
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
name|destroy_dev
argument_list|(
name|dev
operator|->
name|devnode
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|#
directive|if
name|__HAVE_CTX_BITMAP
name|DRM
function_decl|(
name|ctxbitmap_cleanup
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|__REALLY_HAVE_AGP
operator|&&
name|__REALLY_HAVE_MTRR
if|if
condition|(
name|dev
operator|->
name|agp
operator|&&
name|dev
operator|->
name|agp
operator|->
name|agp_mtrr
operator|>=
literal|0
condition|)
block|{
name|int
name|retval
decl_stmt|;
name|retval
operator|=
name|mtrr_del
argument_list|(
name|dev
operator|->
name|agp
operator|->
name|agp_mtrr
argument_list|,
name|dev
operator|->
name|agp
operator|->
name|agp_info
operator|.
name|aper_base
argument_list|,
name|dev
operator|->
name|agp
operator|->
name|agp_info
operator|.
name|aper_size
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"mtrr_del=%d\n"
argument_list|,
name|retval
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|DRM
function_decl|(
name|takedown
function_decl|)
parameter_list|(
name|dev
parameter_list|)
function_decl|;
if|#
directive|if
name|__REALLY_HAVE_AGP
if|if
condition|(
name|dev
operator|->
name|agp
condition|)
block|{
name|DRM
function_decl|(
name|agp_uninit
function_decl|)
parameter_list|()
function_decl|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dev
operator|->
name|agp
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|agp
argument_list|)
argument_list|,
name|DRM_MEM_AGPLISTS
argument_list|)
expr_stmt|;
name|dev
operator|->
name|agp
operator|=
name|NULL
expr_stmt|;
block|}
endif|#
directive|endif
block|}
name|DRIVER_POSTCLEANUP
argument_list|()
expr_stmt|;
name|DRM_OS_FREE
argument_list|(
name|DRM
argument_list|(
name|minor
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_OS_FREE
argument_list|(
name|DRM
argument_list|(
name|device
argument_list|)
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|numdevs
argument_list|)
operator|=
literal|0
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__linux__
name|module_init
argument_list|(
name|drm_init
argument_list|)
expr_stmt|;
name|module_exit
argument_list|(
name|drm_cleanup
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
name|int
name|DRM
function|(
name|version
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|drm_version_t
name|version
decl_stmt|;
name|int
name|len
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|version
argument_list|,
operator|(
name|drm_version_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
define|#
directive|define
name|DRM_COPY
parameter_list|(
name|name
parameter_list|,
name|value
parameter_list|)
define|\
value|len = strlen( value );						\ 	if ( len> name##_len ) len = name##_len;			\ 	name##_len = strlen( value );					\ 	if ( len&& name ) {						\ 		if ( DRM_OS_COPYTOUSR( name, value, len ) )		\ 			return DRM_OS_ERR(EFAULT);				\ 	}
name|version
operator|.
name|version_major
operator|=
name|DRIVER_MAJOR
expr_stmt|;
name|version
operator|.
name|version_minor
operator|=
name|DRIVER_MINOR
expr_stmt|;
name|version
operator|.
name|version_patchlevel
operator|=
name|DRIVER_PATCHLEVEL
expr_stmt|;
name|DRM_COPY
argument_list|(
name|version
operator|.
name|name
argument_list|,
name|DRIVER_NAME
argument_list|)
expr_stmt|;
name|DRM_COPY
argument_list|(
name|version
operator|.
name|date
argument_list|,
name|DRIVER_DATE
argument_list|)
expr_stmt|;
name|DRM_COPY
argument_list|(
name|version
operator|.
name|desc
argument_list|,
name|DRIVER_DESC
argument_list|)
expr_stmt|;
name|DRM_OS_KRNTOUSR
argument_list|(
operator|(
name|drm_version_t
operator|*
operator|)
name|data
argument_list|,
name|version
argument_list|,
sizeof|sizeof
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
ifdef|#
directive|ifdef
name|__linux__
name|int
name|DRM
argument_list|(
name|open
argument_list|)
argument_list|(
expr|struct
name|inode
operator|*
name|inode
argument_list|,
expr|struct
name|file
operator|*
name|filp
argument_list|)
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|int
name|DRM
argument_list|(
name|open
argument_list|)
argument_list|(
name|dev_t
name|kdev
argument_list|,
name|int
name|flags
argument_list|,
name|int
name|fmt
argument_list|,
name|DRM_OS_STRUCTPROC
operator|*
name|p
argument_list|)
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|{
name|drm_device_t
modifier|*
name|dev
init|=
name|NULL
decl_stmt|;
name|int
name|retcode
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|DRM
argument_list|(
name|numdevs
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
ifdef|#
directive|ifdef
name|__linux__
if|if
condition|(
name|MINOR
argument_list|(
name|inode
operator|->
name|i_rdev
argument_list|)
operator|==
name|DRM
argument_list|(
name|minor
argument_list|)
index|[
name|i
index|]
condition|)
block|{
name|dev
operator|=
operator|&
operator|(
name|DRM
argument_list|(
name|device
argument_list|)
index|[
name|i
index|]
operator|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
comment|/* FIXME ??? - multihead */
name|dev
operator|=
name|DRIVER_SOFTC
argument_list|(
name|minor
argument_list|(
name|kdev
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|}
if|if
condition|(
operator|!
name|dev
condition|)
block|{
return|return
name|DRM_OS_ERR
argument_list|(
name|ENODEV
argument_list|)
return|;
block|}
name|DRM_DEBUG
argument_list|(
literal|"open_count = %d\n"
argument_list|,
name|dev
operator|->
name|open_count
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|retcode
operator|=
name|DRM
argument_list|(
name|open_helper
argument_list|)
argument_list|(
name|inode
argument_list|,
name|filp
argument_list|,
name|dev
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|device_busy
argument_list|(
name|dev
operator|->
name|device
argument_list|)
expr_stmt|;
name|retcode
operator|=
name|DRM
argument_list|(
name|open_helper
argument_list|)
argument_list|(
name|kdev
argument_list|,
name|flags
argument_list|,
name|fmt
argument_list|,
name|p
argument_list|,
name|dev
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|if
condition|(
operator|!
name|retcode
condition|)
block|{
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|counts
index|[
name|_DRM_STAT_OPENS
index|]
argument_list|)
expr_stmt|;
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|dev
operator|->
name|count_lock
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
operator|->
name|open_count
operator|++
condition|)
block|{
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|dev
operator|->
name|count_lock
argument_list|)
expr_stmt|;
return|return
name|DRM
argument_list|(
name|setup
argument_list|)
argument_list|(
name|dev
argument_list|)
return|;
block|}
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|dev
operator|->
name|count_lock
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__FreeBSD__
name|device_unbusy
argument_list|(
name|dev
operator|->
name|device
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
return|return
name|retcode
return|;
block|}
ifdef|#
directive|ifdef
name|__linux__
name|int
name|DRM
function|(
name|release
function|)
parameter_list|(
name|struct
name|inode
modifier|*
name|inode
parameter_list|,
name|struct
name|file
modifier|*
name|filp
parameter_list|)
block|{
name|drm_file_t
modifier|*
name|priv
init|=
name|filp
operator|->
name|private_data
decl_stmt|;
name|drm_device_t
modifier|*
name|dev
decl_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|int
name|DRM
function|(
name|close
function|)
parameter_list|(
name|dev_t
name|kdev
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|fmt
parameter_list|,
name|DRM_OS_STRUCTPROC
modifier|*
name|p
parameter_list|)
block|{
name|drm_file_t
modifier|*
name|priv
decl_stmt|;
name|drm_device_t
modifier|*
name|dev
init|=
name|kdev
operator|->
name|si_drv1
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|int
name|retcode
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|lock_kernel
argument_list|()
expr_stmt|;
name|dev
operator|=
name|priv
operator|->
name|dev
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
name|DRM_DEBUG
argument_list|(
literal|"open_count = %d\n"
argument_list|,
name|dev
operator|->
name|open_count
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__FreeBSD__
name|priv
operator|=
name|DRM
argument_list|(
name|find_file_by_proc
argument_list|)
argument_list|(
name|dev
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|priv
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"can't find authenticator\n"
argument_list|)
expr_stmt|;
return|return
name|EINVAL
return|;
block|}
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRIVER_PRERELEASE
argument_list|()
expr_stmt|;
comment|/* ======================================================== 	 * Begin inline drm_release 	 */
name|DRM_DEBUG
argument_list|(
literal|"pid = %d, device = 0x%lx, open_count = %d\n"
argument_list|,
name|DRM_OS_CURRENTPID
argument_list|,
operator|(
name|long
operator|)
name|dev
operator|->
name|device
argument_list|,
name|dev
operator|->
name|open_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|&&
name|_DRM_LOCK_IS_HELD
argument_list|(
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|)
operator|&&
name|dev
operator|->
name|lock
operator|.
name|pid
operator|==
name|DRM_OS_CURRENTPID
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"Process %d dead, freeing lock for context %d\n"
argument_list|,
name|DRM_OS_CURRENTPID
argument_list|,
name|_DRM_LOCKING_CONTEXT
argument_list|(
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|HAVE_DRIVER_RELEASE
name|DRIVER_RELEASE
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|DRM
argument_list|(
name|lock_free
argument_list|)
argument_list|(
name|dev
argument_list|,
operator|&
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|,
name|_DRM_LOCKING_CONTEXT
argument_list|(
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|)
argument_list|)
expr_stmt|;
comment|/* FIXME: may require heavy-handed reset of                                    hardware at this point, possibly                                    processed via a callback to the X                                    server. */
block|}
if|#
directive|if
name|__HAVE_RELEASE
elseif|else
if|if
condition|(
name|dev
operator|->
name|lock
operator|.
name|hw_lock
condition|)
block|{
comment|/* The lock is required to reclaim buffers */
ifdef|#
directive|ifdef
name|__linux__
name|DECLARE_WAITQUEUE
argument_list|(
name|entry
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|add_wait_queue
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|,
operator|&
name|entry
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
for|for
control|(
init|;
condition|;
control|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|current
operator|->
name|state
operator|=
name|TASK_INTERRUPTIBLE
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
if|if
condition|(
operator|!
name|dev
operator|->
name|lock
operator|.
name|hw_lock
condition|)
block|{
comment|/* Device has been unregistered */
name|retcode
operator|=
name|DRM_OS_ERR
argument_list|(
name|EINTR
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|DRM
argument_list|(
name|lock_take
argument_list|)
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|,
name|DRM_KERNEL_CONTEXT
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|dev
operator|->
name|lock
operator|.
name|pid
operator|=
name|priv
operator|->
name|pid
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|dev
operator|->
name|lock
operator|.
name|pid
operator|=
name|p
operator|->
name|p_pid
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|dev
operator|->
name|lock
operator|.
name|lock_time
operator|=
name|jiffies
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|counts
index|[
name|_DRM_STAT_LOCKS
index|]
argument_list|)
expr_stmt|;
break|break;
comment|/* Got lock */
block|}
comment|/* Contention */
if|#
directive|if
literal|0
block|atomic_inc(&dev->total_sleeps );
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__linux__
name|schedule
argument_list|()
expr_stmt|;
if|if
condition|(
name|signal_pending
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|retcode
operator|=
name|DRM_OS_ERR
argument_list|(
name|ERESTARTSYS
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|retcode
operator|=
name|tsleep
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|,
name|PZERO
operator||
name|PCATCH
argument_list|,
literal|"drmlk2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|retcode
condition|)
break|break;
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|}
ifdef|#
directive|ifdef
name|__linux__
name|current
operator|->
name|state
operator|=
name|TASK_RUNNING
expr_stmt|;
name|remove_wait_queue
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|,
operator|&
name|entry
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
if|if
condition|(
operator|!
name|retcode
condition|)
block|{
name|DRIVER_RELEASE
argument_list|()
expr_stmt|;
name|DRM
argument_list|(
name|lock_free
argument_list|)
argument_list|(
name|dev
argument_list|,
operator|&
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|,
name|DRM_KERNEL_CONTEXT
argument_list|)
expr_stmt|;
block|}
block|}
elif|#
directive|elif
name|__HAVE_DMA
name|DRM
function_decl|(
name|reclaim_buffers
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|priv
operator|->
name|pid
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__linux__
name|DRM
argument_list|(
name|fasync
argument_list|)
argument_list|(
operator|-
literal|1
argument_list|,
name|filp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|funsetown
argument_list|(
operator|&
name|dev
operator|->
name|buf_sigio
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_LOCK
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
if|if
condition|(
name|priv
operator|->
name|remove_auth_on_close
operator|==
literal|1
condition|)
block|{
name|drm_file_t
modifier|*
name|temp
init|=
name|dev
operator|->
name|file_first
decl_stmt|;
while|while
condition|(
name|temp
condition|)
block|{
name|temp
operator|->
name|authenticated
operator|=
literal|0
expr_stmt|;
name|temp
operator|=
name|temp
operator|->
name|next
expr_stmt|;
block|}
block|}
if|if
condition|(
name|priv
operator|->
name|prev
condition|)
block|{
name|priv
operator|->
name|prev
operator|->
name|next
operator|=
name|priv
operator|->
name|next
expr_stmt|;
block|}
else|else
block|{
name|dev
operator|->
name|file_first
operator|=
name|priv
operator|->
name|next
expr_stmt|;
block|}
if|if
condition|(
name|priv
operator|->
name|next
condition|)
block|{
name|priv
operator|->
name|next
operator|->
name|prev
operator|=
name|priv
operator|->
name|prev
expr_stmt|;
block|}
else|else
block|{
name|dev
operator|->
name|file_last
operator|=
name|priv
operator|->
name|prev
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|priv
operator|=
name|DRM
argument_list|(
name|find_file_by_proc
argument_list|)
argument_list|(
name|dev
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|priv
condition|)
block|{
name|priv
operator|->
name|refs
operator|--
expr_stmt|;
if|if
condition|(
operator|!
name|priv
operator|->
name|refs
condition|)
block|{
name|TAILQ_REMOVE
argument_list|(
operator|&
name|dev
operator|->
name|files
argument_list|,
name|priv
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_UNLOCK
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|priv
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|priv
argument_list|)
argument_list|,
name|DRM_MEM_FILES
argument_list|)
expr_stmt|;
comment|/* ======================================================== 	 * End inline drm_release 	 */
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|counts
index|[
name|_DRM_STAT_CLOSES
index|]
argument_list|)
expr_stmt|;
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|dev
operator|->
name|count_lock
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|--
name|dev
operator|->
name|open_count
condition|)
block|{
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|dev
operator|->
name|ioctl_count
argument_list|)
operator|||
name|dev
operator|->
name|blocked
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Device busy: %ld %d\n"
argument_list|,
operator|(
name|unsigned
name|long
operator|)
name|atomic_read
argument_list|(
operator|&
name|dev
operator|->
name|ioctl_count
argument_list|)
argument_list|,
name|dev
operator|->
name|blocked
argument_list|)
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|dev
operator|->
name|count_lock
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|unlock_kernel
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
return|return
name|DRM_OS_ERR
argument_list|(
name|EBUSY
argument_list|)
return|;
block|}
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|dev
operator|->
name|count_lock
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|unlock_kernel
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|device_unbusy
argument_list|(
name|dev
operator|->
name|device
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
return|return
name|DRM
argument_list|(
name|takedown
argument_list|)
argument_list|(
name|dev
argument_list|)
return|;
block|}
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|dev
operator|->
name|count_lock
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|unlock_kernel
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
return|return
name|retcode
return|;
block|}
comment|/* DRM(ioctl) is called whenever a process performs an ioctl on /dev/drm.  */
name|int
name|DRM
function|(
name|ioctl
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|int
name|retcode
init|=
literal|0
decl_stmt|;
name|drm_ioctl_desc_t
modifier|*
name|ioctl
decl_stmt|;
name|drm_ioctl_t
modifier|*
name|func
decl_stmt|;
name|int
name|nr
init|=
name|DRM_IOCTL_NR
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|DRM_OS_PRIV
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|ioctl_count
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|counts
index|[
name|_DRM_STAT_IOCTLS
index|]
argument_list|)
expr_stmt|;
operator|++
name|priv
operator|->
name|ioctl_count
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"pid=%d, cmd=0x%02lx, nr=0x%02x, dev 0x%lx, auth=%d\n"
argument_list|,
name|DRM_OS_CURRENTPID
argument_list|,
name|cmd
argument_list|,
name|nr
argument_list|,
operator|(
name|long
operator|)
name|dev
operator|->
name|device
argument_list|,
name|priv
operator|->
name|authenticated
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__FreeBSD__
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
name|FIONBIO
case|:
name|atomic_dec
argument_list|(
operator|&
name|dev
operator|->
name|ioctl_count
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
case|case
name|FIOASYNC
case|:
name|atomic_dec
argument_list|(
operator|&
name|dev
operator|->
name|ioctl_count
argument_list|)
expr_stmt|;
name|dev
operator|->
name|flags
operator||=
name|FASYNC
expr_stmt|;
return|return
literal|0
return|;
case|case
name|FIOSETOWN
case|:
name|atomic_dec
argument_list|(
operator|&
name|dev
operator|->
name|ioctl_count
argument_list|)
expr_stmt|;
return|return
name|fsetown
argument_list|(
operator|*
operator|(
name|int
operator|*
operator|)
name|data
argument_list|,
operator|&
name|dev
operator|->
name|buf_sigio
argument_list|)
return|;
case|case
name|FIOGETOWN
case|:
name|atomic_dec
argument_list|(
operator|&
name|dev
operator|->
name|ioctl_count
argument_list|)
expr_stmt|;
operator|*
operator|(
name|int
operator|*
operator|)
name|data
operator|=
name|fgetown
argument_list|(
operator|&
name|dev
operator|->
name|buf_sigio
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|if
condition|(
name|nr
operator|>=
name|DRIVER_IOCTL_COUNT
condition|)
block|{
name|retcode
operator|=
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ioctl
operator|=
operator|&
name|DRM
argument_list|(
name|ioctls
argument_list|)
index|[
name|nr
index|]
expr_stmt|;
name|func
operator|=
name|ioctl
operator|->
name|func
expr_stmt|;
if|if
condition|(
operator|!
name|func
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"no function\n"
argument_list|)
expr_stmt|;
name|retcode
operator|=
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ioctl
operator|->
name|root_only
operator|&&
name|DRM_OS_CHECKSUSER
operator|)
operator|||
operator|(
name|ioctl
operator|->
name|auth_needed
operator|&&
operator|!
name|priv
operator|->
name|authenticated
operator|)
condition|)
block|{
name|retcode
operator|=
name|DRM_OS_ERR
argument_list|(
name|EACCES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retcode
operator|=
name|func
argument_list|(
name|IOCTL_ARGS_PASS
argument_list|)
expr_stmt|;
block|}
block|}
name|atomic_dec
argument_list|(
operator|&
name|dev
operator|->
name|ioctl_count
argument_list|)
expr_stmt|;
return|return
name|retcode
return|;
block|}
name|int
name|DRM
function|(
name|lock
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|DECLARE_WAITQUEUE
argument_list|(
name|entry
argument_list|,
name|current
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
name|drm_lock_t
name|lock
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|__HAVE_MULTIPLE_DMA_QUEUES
name|drm_queue_t
modifier|*
name|q
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
name|cycles_t
name|start
decl_stmt|;
name|dev
operator|->
name|lck_start
operator|=
name|start
operator|=
name|get_cycles
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|DRM_OS_KRNFROMUSR
argument_list|(
name|lock
argument_list|,
operator|(
name|drm_lock_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|lock
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|.
name|context
operator|==
name|DRM_KERNEL_CONTEXT
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Process %d using kernel context %d\n"
argument_list|,
name|DRM_OS_CURRENTPID
argument_list|,
name|lock
operator|.
name|context
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
name|DRM_DEBUG
argument_list|(
literal|"%d (pid %d) requests lock (0x%08x), flags = 0x%08x\n"
argument_list|,
name|lock
operator|.
name|context
argument_list|,
name|DRM_OS_CURRENTPID
argument_list|,
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|,
name|lock
operator|.
name|flags
argument_list|)
expr_stmt|;
if|#
directive|if
name|__HAVE_DMA_QUEUE
if|if
condition|(
name|lock
operator|.
name|context
operator|<
literal|0
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
elif|#
directive|elif
name|__HAVE_MULTIPLE_DMA_QUEUES
if|if
condition|(
name|lock
operator|.
name|context
operator|<
literal|0
operator|||
name|lock
operator|.
name|context
operator|>=
name|dev
operator|->
name|queue_count
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
name|q
operator|=
name|dev
operator|->
name|queuelist
index|[
name|lock
operator|.
name|context
index|]
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|__HAVE_DMA_FLUSH
name|ret
operator|=
name|DRM
argument_list|(
name|flush_block_and_flush
argument_list|)
argument_list|(
name|dev
argument_list|,
name|lock
operator|.
name|context
argument_list|,
name|lock
operator|.
name|flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|ret
condition|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|add_wait_queue
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|,
operator|&
name|entry
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
for|for
control|(
init|;
condition|;
control|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|current
operator|->
name|state
operator|=
name|TASK_INTERRUPTIBLE
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
if|if
condition|(
operator|!
name|dev
operator|->
name|lock
operator|.
name|hw_lock
condition|)
block|{
comment|/* Device has been unregistered */
name|ret
operator|=
name|DRM_OS_ERR
argument_list|(
name|EINTR
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|DRM
argument_list|(
name|lock_take
argument_list|)
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|,
name|lock
operator|.
name|context
argument_list|)
condition|)
block|{
name|dev
operator|->
name|lock
operator|.
name|pid
operator|=
name|DRM_OS_CURRENTPID
expr_stmt|;
name|dev
operator|->
name|lock
operator|.
name|lock_time
operator|=
name|jiffies
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|counts
index|[
name|_DRM_STAT_LOCKS
index|]
argument_list|)
expr_stmt|;
break|break;
comment|/* Got lock */
block|}
comment|/* Contention */
ifdef|#
directive|ifdef
name|__linux__
name|schedule
argument_list|()
expr_stmt|;
if|if
condition|(
name|signal_pending
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|ret
operator|=
name|DRM_OS_ERR
argument_list|(
name|ERESTARTSYS
argument_list|)
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|ret
operator|=
name|tsleep
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|,
name|PZERO
operator||
name|PCATCH
argument_list|,
literal|"drmlk2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
break|break;
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|}
ifdef|#
directive|ifdef
name|__linux__
name|current
operator|->
name|state
operator|=
name|TASK_RUNNING
expr_stmt|;
name|remove_wait_queue
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|,
operator|&
name|entry
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
block|}
if|#
directive|if
name|__HAVE_DMA_FLUSH
name|DRM
function_decl|(
name|flush_unblock
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|lock
operator|.
name|context
parameter_list|,
name|lock
operator|.
name|flags
parameter_list|)
function_decl|;
comment|/* cleanup phase */
endif|#
directive|endif
if|if
condition|(
operator|!
name|ret
condition|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|sigemptyset
argument_list|(
operator|&
name|dev
operator|->
name|sigmask
argument_list|)
expr_stmt|;
name|sigaddset
argument_list|(
operator|&
name|dev
operator|->
name|sigmask
argument_list|,
name|SIGSTOP
argument_list|)
expr_stmt|;
name|sigaddset
argument_list|(
operator|&
name|dev
operator|->
name|sigmask
argument_list|,
name|SIGTSTP
argument_list|)
expr_stmt|;
name|sigaddset
argument_list|(
operator|&
name|dev
operator|->
name|sigmask
argument_list|,
name|SIGTTIN
argument_list|)
expr_stmt|;
name|sigaddset
argument_list|(
operator|&
name|dev
operator|->
name|sigmask
argument_list|,
name|SIGTTOU
argument_list|)
expr_stmt|;
name|dev
operator|->
name|sigdata
operator|.
name|context
operator|=
name|lock
operator|.
name|context
expr_stmt|;
name|dev
operator|->
name|sigdata
operator|.
name|lock
operator|=
name|dev
operator|->
name|lock
operator|.
name|hw_lock
expr_stmt|;
name|block_all_signals
argument_list|(
name|DRM
argument_list|(
name|notifier
argument_list|)
argument_list|,
operator|&
name|dev
operator|->
name|sigdata
argument_list|,
operator|&
name|dev
operator|->
name|sigmask
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
if|#
directive|if
name|__HAVE_DMA_READY
if|if
condition|(
name|lock
operator|.
name|flags
operator|&
name|_DRM_LOCK_READY
condition|)
block|{
name|DRIVER_DMA_READY
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|__HAVE_DMA_QUIESCENT
if|if
condition|(
name|lock
operator|.
name|flags
operator|&
name|_DRM_LOCK_QUIESCENT
condition|)
block|{
name|DRIVER_DMA_QUIESCENT
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|__HAVE_KERNEL_CTX_SWITCH
if|if
condition|(
name|dev
operator|->
name|last_context
operator|!=
name|lock
operator|.
name|context
condition|)
block|{
name|DRM
function_decl|(
name|context_switch
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|dev
operator|->
name|last_context
parameter_list|,
name|lock
operator|.
name|context
parameter_list|)
function_decl|;
block|}
endif|#
directive|endif
block|}
name|DRM_DEBUG
argument_list|(
literal|"%d %s\n"
argument_list|,
name|lock
operator|.
name|context
argument_list|,
name|ret
condition|?
literal|"interrupted"
else|:
literal|"has lock"
argument_list|)
expr_stmt|;
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|histo
operator|.
name|lacq
index|[
name|DRM
argument_list|(
name|histogram_slot
argument_list|)
operator|(
name|get_cycles
argument_list|()
operator|-
name|start
operator|)
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
name|int
name|DRM
function|(
name|unlock
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_lock_t
name|lock
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|lock
argument_list|,
operator|(
name|drm_lock_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|lock
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lock
operator|.
name|context
operator|==
name|DRM_KERNEL_CONTEXT
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Process %d using kernel context %d\n"
argument_list|,
name|DRM_OS_CURRENTPID
argument_list|,
name|lock
operator|.
name|context
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|counts
index|[
name|_DRM_STAT_UNLOCKS
index|]
argument_list|)
expr_stmt|;
if|#
directive|if
name|__HAVE_KERNEL_CTX_SWITCH
comment|/* We no longer really hold it, but if we are the next 	 * agent to request it then we should just be able to 	 * take it immediately and not eat the ioctl. 	 */
name|dev
operator|->
name|lock
operator|.
name|pid
operator|=
literal|0
expr_stmt|;
block|{
specifier|__volatile__
name|unsigned
name|int
modifier|*
name|plock
init|=
operator|&
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
decl_stmt|;
name|unsigned
name|int
name|old
decl_stmt|,
name|new
decl_stmt|,
name|prev
decl_stmt|,
name|ctx
decl_stmt|;
name|ctx
operator|=
name|lock
operator|.
name|context
expr_stmt|;
do|do
block|{
name|old
operator|=
operator|*
name|plock
expr_stmt|;
name|new
operator|=
name|ctx
expr_stmt|;
name|prev
operator|=
name|cmpxchg
argument_list|(
name|plock
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|prev
operator|!=
name|old
condition|)
do|;
block|}
name|wake_up_interruptible
argument_list|(
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|)
expr_stmt|;
else|#
directive|else
name|DRM
argument_list|(
name|lock_transfer
argument_list|)
argument_list|(
name|dev
argument_list|,
operator|&
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|,
name|DRM_KERNEL_CONTEXT
argument_list|)
expr_stmt|;
if|#
directive|if
name|__HAVE_DMA_SCHEDULE
name|DRM
argument_list|(
name|dma_schedule
argument_list|)
argument_list|(
name|dev
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* FIXME: Do we ever really need to check this??? 	 */
if|if
condition|(
literal|1
comment|/* !dev->context_flag */
condition|)
block|{
if|if
condition|(
name|DRM
argument_list|(
name|lock_free
argument_list|)
argument_list|(
name|dev
argument_list|,
operator|&
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|,
name|DRM_KERNEL_CONTEXT
argument_list|)
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|/* !__HAVE_KERNEL_CTX_SWITCH */
ifdef|#
directive|ifdef
name|__linux__
name|unblock_all_signals
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
return|return
literal|0
return|;
block|}
if|#
directive|if
name|DRM_LINUX
define|#
directive|define
name|LINUX_IOCTL_DRM_MIN
value|0x6400
define|#
directive|define
name|LINUX_IOCTL_DRM_MAX
value|0x64ff
specifier|static
name|linux_ioctl_function_t
name|DRM
argument_list|(
name|linux_ioctl
argument_list|)
decl_stmt|;
specifier|static
name|struct
name|linux_ioctl_handler
name|DRM
parameter_list|(
name|handler
parameter_list|)
init|=
block|{
name|DRM
argument_list|(
name|linux_ioctl
argument_list|)
operator|,
function_decl|LINUX_IOCTL_DRM_MIN
operator|,
function_decl|LINUX_IOCTL_DRM_MAX
block|}
empty_stmt|;
name|SYSINIT
argument_list|(
name|DRM
argument_list|(
specifier|register
argument_list|)
argument_list|,
name|SI_SUB_KLD
argument_list|,
name|SI_ORDER_MIDDLE
argument_list|,
name|linux_ioctl_register_handler
argument_list|,
operator|&
name|DRM
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
name|SYSUNINIT
argument_list|(
name|DRM
argument_list|(
name|unregister
argument_list|)
argument_list|,
name|SI_SUB_KLD
argument_list|,
name|SI_ORDER_MIDDLE
argument_list|,
name|linux_ioctl_unregister_handler
argument_list|,
operator|&
name|DRM
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
define|#
directive|define
name|LINUX_IOC_VOID
value|IOC_VOID
define|#
directive|define
name|LINUX_IOC_IN
value|IOC_OUT
comment|/* Linux has the values the other way around */
define|#
directive|define
name|LINUX_IOC_OUT
value|IOC_IN
comment|/*  * Linux emulation IOCTL  */
specifier|static
name|int
name|DRM
function|(
name|linux_ioctl
function|)
parameter_list|(
name|DRM_OS_STRUCTPROC
modifier|*
name|p
parameter_list|,
name|struct
name|linux_ioctl_args
modifier|*
name|args
parameter_list|)
block|{
name|u_long
name|cmd
init|=
name|args
operator|->
name|cmd
decl_stmt|;
define|#
directive|define
name|STK_PARAMS
value|128
union|union
block|{
name|char
name|stkbuf
index|[
name|STK_PARAMS
index|]
decl_stmt|;
name|long
name|align
decl_stmt|;
block|}
name|ubuf
union|;
name|caddr_t
name|data
init|=
name|NULL
decl_stmt|,
name|memp
init|=
name|NULL
decl_stmt|;
name|u_int
name|size
init|=
name|IOCPARM_LEN
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|int
name|error
decl_stmt|;
if|#
directive|if
operator|(
name|__FreeBSD_version
operator|>=
literal|500000
operator|)
name|struct
name|file
modifier|*
name|fp
decl_stmt|;
else|#
directive|else
name|struct
name|file
modifier|*
name|fp
init|=
name|p
operator|->
name|p_fd
operator|->
name|fd_ofiles
index|[
name|args
operator|->
name|fd
index|]
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|size
operator|>
name|STK_PARAMS
condition|)
block|{
if|if
condition|(
name|size
operator|>
name|IOCPARM_MAX
condition|)
return|return
name|EINVAL
return|;
name|memp
operator|=
name|malloc
argument_list|(
operator|(
name|u_long
operator|)
name|size
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|,
name|M_WAITOK
argument_list|)
expr_stmt|;
name|data
operator|=
name|memp
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|ubuf
operator|.
name|stkbuf
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|&
name|LINUX_IOC_IN
condition|)
block|{
if|if
condition|(
name|size
condition|)
block|{
name|error
operator|=
name|copyin
argument_list|(
operator|(
name|caddr_t
operator|)
name|args
operator|->
name|arg
argument_list|,
name|data
argument_list|,
operator|(
name|u_int
operator|)
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
block|{
if|if
condition|(
name|memp
condition|)
name|free
argument_list|(
name|data
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
else|else
block|{
name|data
operator|=
operator|(
name|caddr_t
operator|)
name|args
operator|->
name|arg
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|cmd
operator|&
name|LINUX_IOC_OUT
operator|)
operator|&&
name|size
condition|)
block|{
comment|/* 		 * Zero the buffer so the user always 		 * gets back something deterministic. 		 */
name|bzero
argument_list|(
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|&
name|LINUX_IOC_VOID
condition|)
block|{
operator|*
operator|(
name|caddr_t
operator|*
operator|)
name|data
operator|=
operator|(
name|caddr_t
operator|)
name|args
operator|->
name|arg
expr_stmt|;
block|}
if|#
directive|if
operator|(
name|__FreeBSD_version
operator|>=
literal|500000
operator|)
if|if
condition|(
operator|(
name|error
operator|=
name|fget
argument_list|(
name|p
argument_list|,
name|args
operator|->
name|fd
argument_list|,
operator|&
name|fp
argument_list|)
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|memp
condition|)
name|free
argument_list|(
name|memp
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
name|error
operator|=
name|fo_ioctl
argument_list|(
name|fp
argument_list|,
name|cmd
argument_list|,
name|data
argument_list|,
name|p
operator|->
name|td_ucred
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|fdrop
argument_list|(
name|fp
argument_list|,
name|p
argument_list|)
expr_stmt|;
else|#
directive|else
name|error
operator|=
name|fo_ioctl
argument_list|(
name|fp
argument_list|,
name|cmd
argument_list|,
name|data
argument_list|,
name|p
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|error
operator|==
literal|0
operator|&&
operator|(
name|cmd
operator|&
name|LINUX_IOC_OUT
operator|)
operator|&&
name|size
condition|)
name|error
operator|=
name|copyout
argument_list|(
name|data
argument_list|,
operator|(
name|caddr_t
operator|)
name|args
operator|->
name|arg
argument_list|,
operator|(
name|u_int
operator|)
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|memp
condition|)
name|free
argument_list|(
name|memp
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DRM_LINUX */
end_comment

end_unit

