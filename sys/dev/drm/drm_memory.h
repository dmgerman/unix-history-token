begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_memory.h -- Memory management wrappers for DRM -*- linux-c -*-  * Created: Thu Feb  4 14:00:34 1999 by faith@valinux.com  *  * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|__NO_VERSION__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_include
include|#
directive|include
file|<linux/config.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __linux__ */
end_comment

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_include
include|#
directive|include
file|<linux/wrapper.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __linux__ */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_if
if|#
directive|if
name|__REALLY_HAVE_AGP
end_if

begin_include
include|#
directive|include
file|<sys/agpio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|malloctype
value|DRM(M_DRM)
end_define

begin_comment
comment|/* The macros confliced in the MALLOC_DEFINE */
end_comment

begin_expr_stmt
name|MALLOC_DEFINE
argument_list|(
name|malloctype
argument_list|,
literal|"drm"
argument_list|,
literal|"DRM Data Structures"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_undef
undef|#
directive|undef
name|malloctype
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FreeBSD__ */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|drm_mem_stats
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|succeed_count
decl_stmt|;
name|int
name|free_count
decl_stmt|;
name|int
name|fail_count
decl_stmt|;
name|unsigned
name|long
name|bytes_allocated
decl_stmt|;
name|unsigned
name|long
name|bytes_freed
decl_stmt|;
block|}
name|drm_mem_stats_t
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_function_decl
specifier|static
name|spinlock_t
name|DRM
parameter_list|(
name|mem_lock
parameter_list|)
init|=
name|SPIN_LOCK_UNLOCKED
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __linux__ */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_function_decl
specifier|static
name|DRM_OS_SPINTYPE
name|DRM
parameter_list|(
name|mem_lock
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FreeBSD__ */
end_comment

begin_function_decl
specifier|static
name|unsigned
name|long
name|DRM
parameter_list|(
name|ram_available
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl

begin_comment
comment|/* In pages */
end_comment

begin_function_decl
specifier|static
name|unsigned
name|long
name|DRM
parameter_list|(
name|ram_used
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl

begin_decl_stmt
specifier|static
name|drm_mem_stats_t
name|DRM
argument_list|(
name|mem_stats
argument_list|)
decl|[]
init|=
block|{
index|[
name|DRM_MEM_DMA
index|]
operator|=
block|{
literal|"dmabufs"
block|}
block|,
index|[
name|DRM_MEM_SAREA
index|]
operator|=
block|{
literal|"sareas"
block|}
block|,
index|[
name|DRM_MEM_DRIVER
index|]
operator|=
block|{
literal|"driver"
block|}
block|,
index|[
name|DRM_MEM_MAGIC
index|]
operator|=
block|{
literal|"magic"
block|}
block|,
index|[
name|DRM_MEM_IOCTLS
index|]
operator|=
block|{
literal|"ioctltab"
block|}
block|,
index|[
name|DRM_MEM_MAPS
index|]
operator|=
block|{
literal|"maplist"
block|}
block|,
index|[
name|DRM_MEM_VMAS
index|]
operator|=
block|{
literal|"vmalist"
block|}
block|,
index|[
name|DRM_MEM_BUFS
index|]
operator|=
block|{
literal|"buflist"
block|}
block|,
index|[
name|DRM_MEM_SEGS
index|]
operator|=
block|{
literal|"seglist"
block|}
block|,
index|[
name|DRM_MEM_PAGES
index|]
operator|=
block|{
literal|"pagelist"
block|}
block|,
index|[
name|DRM_MEM_FILES
index|]
operator|=
block|{
literal|"files"
block|}
block|,
index|[
name|DRM_MEM_QUEUES
index|]
operator|=
block|{
literal|"queues"
block|}
block|,
index|[
name|DRM_MEM_CMDS
index|]
operator|=
block|{
literal|"commands"
block|}
block|,
index|[
name|DRM_MEM_MAPPINGS
index|]
operator|=
block|{
literal|"mappings"
block|}
block|,
index|[
name|DRM_MEM_BUFLISTS
index|]
operator|=
block|{
literal|"buflists"
block|}
block|,
index|[
name|DRM_MEM_AGPLISTS
index|]
operator|=
block|{
literal|"agplist"
block|}
block|,
index|[
name|DRM_MEM_SGLISTS
index|]
operator|=
block|{
literal|"sglist"
block|}
block|,
index|[
name|DRM_MEM_TOTALAGP
index|]
operator|=
block|{
literal|"totalagp"
block|}
block|,
index|[
name|DRM_MEM_BOUNDAGP
index|]
operator|=
block|{
literal|"boundagp"
block|}
block|,
index|[
name|DRM_MEM_CTXBITMAP
index|]
operator|=
block|{
literal|"ctxbitmap"
block|}
block|,
index|[
name|DRM_MEM_STUB
index|]
operator|=
block|{
literal|"stub"
block|}
block|,
block|{
name|NULL
block|,
literal|0
block|, }
comment|/* Last entry must be null */
block|}
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|DRM
function|(
name|mem_init
function|)
parameter_list|(
name|void
parameter_list|)
block|{
name|drm_mem_stats_t
modifier|*
name|mem
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|struct
name|sysinfo
name|si
decl_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM_OS_SPININIT
argument_list|(
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|,
literal|"drm memory"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
for|for
control|(
name|mem
operator|=
name|DRM
argument_list|(
name|mem_stats
argument_list|)
init|;
name|mem
operator|->
name|name
condition|;
operator|++
name|mem
control|)
block|{
name|mem
operator|->
name|succeed_count
operator|=
literal|0
expr_stmt|;
name|mem
operator|->
name|free_count
operator|=
literal|0
expr_stmt|;
name|mem
operator|->
name|fail_count
operator|=
literal|0
expr_stmt|;
name|mem
operator|->
name|bytes_allocated
operator|=
literal|0
expr_stmt|;
name|mem
operator|->
name|bytes_freed
operator|=
literal|0
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__linux__
name|si_meminfo
argument_list|(
operator|&
name|si
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|ram_available
argument_list|)
operator|=
name|si
operator|.
name|totalram
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM
argument_list|(
name|ram_available
argument_list|)
operator|=
literal|0
expr_stmt|;
comment|/* si.totalram */
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM
argument_list|(
name|ram_used
argument_list|)
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_function
specifier|static
name|int
name|DRM
function|(
name|_mem_info
function|)
parameter_list|(
name|drm_mem_stats_t
modifier|*
name|stats
parameter_list|,
name|struct
name|sysctl_oid
modifier|*
name|oidp
parameter_list|,
name|void
modifier|*
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|,
name|struct
name|sysctl_req
modifier|*
name|req
parameter_list|)
block|{
name|drm_mem_stats_t
modifier|*
name|pt
decl_stmt|;
name|char
name|buf
index|[
literal|128
index|]
decl_stmt|;
name|int
name|error
decl_stmt|;
name|DRM_SYSCTL_PRINT
argument_list|(
literal|"		  total counts			"
literal|" |    outstanding  \n"
argument_list|)
expr_stmt|;
name|DRM_SYSCTL_PRINT
argument_list|(
literal|"type	   alloc freed fail	bytes	   freed"
literal|" | allocs      bytes\n\n"
argument_list|)
expr_stmt|;
name|DRM_SYSCTL_PRINT
argument_list|(
literal|"%-9.9s %5d %5d %4d %10lu	    |\n"
argument_list|,
literal|"system"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DRM
argument_list|(
name|ram_available
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_SYSCTL_PRINT
argument_list|(
literal|"%-9.9s %5d %5d %4d %10lu	    |\n"
argument_list|,
literal|"locked"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|DRM
argument_list|(
name|ram_used
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_SYSCTL_PRINT
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|pt
operator|=
name|stats
init|;
name|pt
operator|->
name|name
condition|;
name|pt
operator|++
control|)
block|{
name|DRM_SYSCTL_PRINT
argument_list|(
literal|"%-9.9s %5d %5d %4d %10lu %10lu | %6d %10ld\n"
argument_list|,
name|pt
operator|->
name|name
argument_list|,
name|pt
operator|->
name|succeed_count
argument_list|,
name|pt
operator|->
name|free_count
argument_list|,
name|pt
operator|->
name|fail_count
argument_list|,
name|pt
operator|->
name|bytes_allocated
argument_list|,
name|pt
operator|->
name|bytes_freed
argument_list|,
name|pt
operator|->
name|succeed_count
operator|-
name|pt
operator|->
name|free_count
argument_list|,
operator|(
name|long
operator|)
name|pt
operator|->
name|bytes_allocated
operator|-
operator|(
name|long
operator|)
name|pt
operator|->
name|bytes_freed
argument_list|)
expr_stmt|;
block|}
name|SYSCTL_OUT
argument_list|(
name|req
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
parameter_list|(
name|mem_info
parameter_list|)
function|DRM_SYSCTL_HANDLER_ARGS
block|{
name|int
name|ret
decl_stmt|;
name|drm_mem_stats_t
modifier|*
name|stats
decl_stmt|;
name|stats
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|DRM
argument_list|(
name|mem_stats
argument_list|)
argument_list|)
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|,
name|M_NOWAIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|stats
operator|==
name|NULL
condition|)
return|return
name|ENOMEM
return|;
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|DRM
argument_list|(
name|mem_stats
argument_list|)
argument_list|,
name|stats
argument_list|,
sizeof|sizeof
argument_list|(
name|DRM
argument_list|(
name|mem_stats
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|DRM
argument_list|(
name|_mem_info
argument_list|)
argument_list|(
name|stats
argument_list|,
name|oidp
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|stats
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FreeBSD__ */
end_comment

begin_function
name|void
modifier|*
name|DRM
function|(
name|alloc
function|)
parameter_list|(
name|size_t
name|size
parameter_list|,
name|int
name|area
parameter_list|)
block|{
name|void
modifier|*
name|pt
decl_stmt|;
if|if
condition|(
operator|!
name|size
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|area
argument_list|,
literal|"Allocating 0 bytes\n"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
ifdef|#
directive|ifdef
name|__linux__
if|if
condition|(
operator|!
operator|(
name|pt
operator|=
name|kmalloc
argument_list|(
name|size
argument_list|,
name|GFP_KERNEL
argument_list|)
operator|)
condition|)
block|{
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
if|if
condition|(
operator|!
operator|(
name|pt
operator|=
name|malloc
argument_list|(
name|size
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|,
name|M_NOWAIT
argument_list|)
operator|)
condition|)
block|{
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|fail_count
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|succeed_count
expr_stmt|;
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|bytes_allocated
operator|+=
name|size
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pt
return|;
block|}
name|void
modifier|*
name|DRM
function|(
name|realloc
function|)
parameter_list|(
name|void
modifier|*
name|oldpt
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|area
parameter_list|)
block|{
name|void
modifier|*
name|pt
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|pt
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
name|size
argument_list|,
name|area
argument_list|)
operator|)
condition|)
return|return
name|NULL
return|;
if|if
condition|(
name|oldpt
operator|&&
name|oldsize
condition|)
block|{
name|memcpy
argument_list|(
name|pt
argument_list|,
name|oldpt
argument_list|,
name|oldsize
argument_list|)
expr_stmt|;
name|DRM
function_decl|(
name|free
function_decl|)
parameter_list|(
name|oldpt
parameter_list|,
name|oldsize
parameter_list|,
name|area
parameter_list|)
function_decl|;
block|}
return|return
name|pt
return|;
block|}
name|char
modifier|*
name|DRM
function|(
name|strdup
function|)
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|area
parameter_list|)
block|{
name|char
modifier|*
name|pt
decl_stmt|;
name|int
name|length
init|=
name|s
condition|?
name|strlen
argument_list|(
name|s
argument_list|)
else|:
literal|0
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|pt
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
name|length
operator|+
literal|1
argument_list|,
name|area
argument_list|)
operator|)
condition|)
return|return
name|NULL
return|;
name|strcpy
argument_list|(
name|pt
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return
name|pt
return|;
block|}
name|void
name|DRM
function|(
name|strfree
function|)
parameter_list|(
name|char
modifier|*
name|s
parameter_list|,
name|int
name|area
parameter_list|)
block|{
name|unsigned
name|int
name|size
decl_stmt|;
if|if
condition|(
operator|!
name|s
condition|)
return|return;
name|size
operator|=
literal|1
operator|+
name|strlen
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
operator|(
name|void
operator|*
operator|)
name|s
argument_list|,
name|size
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
name|void
name|DRM
function|(
name|free
function|)
parameter_list|(
name|void
modifier|*
name|pt
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|area
parameter_list|)
block|{
name|int
name|alloc_count
decl_stmt|;
name|int
name|free_count
decl_stmt|;
if|if
condition|(
operator|!
name|pt
condition|)
name|DRM_MEM_ERROR
argument_list|(
name|area
argument_list|,
literal|"Attempt to free NULL pointer\n"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
else|else
name|kfree
argument_list|(
name|pt
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
else|else
name|free
argument_list|(
name|pt
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|bytes_freed
operator|+=
name|size
expr_stmt|;
name|free_count
operator|=
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|free_count
expr_stmt|;
name|alloc_count
operator|=
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|succeed_count
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|free_count
operator|>
name|alloc_count
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|area
argument_list|,
literal|"Excess frees: %d frees, %d allocs\n"
argument_list|,
name|free_count
argument_list|,
name|alloc_count
argument_list|)
expr_stmt|;
block|}
block|}
name|unsigned
name|long
name|DRM
function|(
name|alloc_pages
function|)
parameter_list|(
name|int
name|order
parameter_list|,
name|int
name|area
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|unsigned
name|long
name|address
decl_stmt|;
name|unsigned
name|long
name|addr
decl_stmt|;
name|unsigned
name|int
name|sz
decl_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|vm_offset_t
name|address
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|unsigned
name|long
name|bytes
init|=
name|PAGE_SIZE
operator|<<
name|order
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|DRM
argument_list|(
name|ram_used
argument_list|)
operator|>>
name|PAGE_SHIFT
operator|)
operator|>
operator|(
name|DRM_RAM_PERCENT
operator|*
name|DRM
argument_list|(
name|ram_available
argument_list|)
operator|)
operator|/
literal|100
condition|)
block|{
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__linux__
name|address
operator|=
name|__get_free_pages
argument_list|(
name|GFP_KERNEL
argument_list|,
name|order
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|address
operator|=
operator|(
name|vm_offset_t
operator|)
name|contigmalloc
argument_list|(
name|bytes
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|~
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|if
condition|(
operator|!
name|address
condition|)
block|{
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|fail_count
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|succeed_count
expr_stmt|;
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|bytes_allocated
operator|+=
name|bytes
expr_stmt|;
name|DRM
argument_list|(
name|ram_used
argument_list|)
operator|+=
name|bytes
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Zero outside the lock */
name|memset
argument_list|(
operator|(
name|void
operator|*
operator|)
name|address
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
comment|/* Reserve */
for|for
control|(
name|addr
operator|=
name|address
operator|,
name|sz
operator|=
name|bytes
init|;
name|sz
operator|>
literal|0
condition|;
name|addr
operator|+=
name|PAGE_SIZE
operator|,
name|sz
operator|-=
name|PAGE_SIZE
control|)
block|{
name|mem_map_reserve
argument_list|(
name|virt_to_page
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __linux__ */
return|return
name|address
return|;
block|}
name|void
name|DRM
function|(
name|free_pages
function|)
parameter_list|(
name|unsigned
name|long
name|address
parameter_list|,
name|int
name|order
parameter_list|,
name|int
name|area
parameter_list|)
block|{
name|unsigned
name|long
name|bytes
init|=
name|PAGE_SIZE
operator|<<
name|order
decl_stmt|;
name|int
name|alloc_count
decl_stmt|;
name|int
name|free_count
decl_stmt|;
if|if
condition|(
operator|!
name|address
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|area
argument_list|,
literal|"Attempt to free address 0\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|__linux__
name|unsigned
name|long
name|addr
decl_stmt|;
name|unsigned
name|int
name|sz
decl_stmt|;
comment|/* Unreserve */
for|for
control|(
name|addr
operator|=
name|address
operator|,
name|sz
operator|=
name|bytes
init|;
name|sz
operator|>
literal|0
condition|;
name|addr
operator|+=
name|PAGE_SIZE
operator|,
name|sz
operator|-=
name|PAGE_SIZE
control|)
block|{
name|mem_map_unreserve
argument_list|(
name|virt_to_page
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|free_pages
argument_list|(
name|address
argument_list|,
name|order
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|contigfree
argument_list|(
operator|(
name|void
operator|*
operator|)
name|address
argument_list|,
name|bytes
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|}
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
name|free_count
operator|=
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|free_count
expr_stmt|;
name|alloc_count
operator|=
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|succeed_count
expr_stmt|;
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|area
index|]
operator|.
name|bytes_freed
operator|+=
name|bytes
expr_stmt|;
name|DRM
argument_list|(
name|ram_used
argument_list|)
operator|-=
name|bytes
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|free_count
operator|>
name|alloc_count
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|area
argument_list|,
literal|"Excess frees: %d frees, %d allocs\n"
argument_list|,
name|free_count
argument_list|,
name|alloc_count
argument_list|)
expr_stmt|;
block|}
block|}
name|void
modifier|*
name|DRM
function|(
name|ioremap
function|)
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
block|{
name|void
modifier|*
name|pt
decl_stmt|;
if|if
condition|(
operator|!
name|size
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|DRM_MEM_MAPPINGS
argument_list|,
literal|"Mapping 0 bytes at 0x%08lx\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
ifdef|#
directive|ifdef
name|__linux__
if|if
condition|(
operator|!
operator|(
name|pt
operator|=
name|ioremap
argument_list|(
name|offset
argument_list|,
name|size
argument_list|)
operator|)
condition|)
block|{
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
if|if
condition|(
operator|!
operator|(
name|pt
operator|=
name|pmap_mapdev
argument_list|(
name|offset
argument_list|,
name|size
argument_list|)
operator|)
condition|)
block|{
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_MAPPINGS
index|]
operator|.
name|fail_count
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_MAPPINGS
index|]
operator|.
name|succeed_count
expr_stmt|;
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_MAPPINGS
index|]
operator|.
name|bytes_allocated
operator|+=
name|size
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pt
return|;
block|}
name|void
name|DRM
function|(
name|ioremapfree
function|)
parameter_list|(
name|void
modifier|*
name|pt
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
block|{
name|int
name|alloc_count
decl_stmt|;
name|int
name|free_count
decl_stmt|;
if|if
condition|(
operator|!
name|pt
condition|)
name|DRM_MEM_ERROR
argument_list|(
name|DRM_MEM_MAPPINGS
argument_list|,
literal|"Attempt to free NULL pointer\n"
argument_list|)
expr_stmt|;
else|else
ifdef|#
directive|ifdef
name|__linux__
name|iounmap
argument_list|(
name|pt
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|pmap_unmapdev
argument_list|(
operator|(
name|vm_offset_t
operator|)
name|pt
argument_list|,
name|size
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_MAPPINGS
index|]
operator|.
name|bytes_freed
operator|+=
name|size
expr_stmt|;
name|free_count
operator|=
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_MAPPINGS
index|]
operator|.
name|free_count
expr_stmt|;
name|alloc_count
operator|=
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_MAPPINGS
index|]
operator|.
name|succeed_count
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|free_count
operator|>
name|alloc_count
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|DRM_MEM_MAPPINGS
argument_list|,
literal|"Excess frees: %d frees, %d allocs\n"
argument_list|,
name|free_count
argument_list|,
name|alloc_count
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
name|__REALLY_HAVE_AGP
name|agp_memory
modifier|*
name|DRM
function|(
name|alloc_agp
function|)
parameter_list|(
name|int
name|pages
parameter_list|,
name|u32
name|type
parameter_list|)
block|{
name|agp_memory
modifier|*
name|handle
decl_stmt|;
if|if
condition|(
operator|!
name|pages
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|DRM_MEM_TOTALAGP
argument_list|,
literal|"Allocating 0 pages\n"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
operator|(
name|handle
operator|=
name|DRM
argument_list|(
name|agp_allocate_memory
argument_list|)
argument_list|(
name|pages
argument_list|,
name|type
argument_list|)
operator|)
condition|)
block|{
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_TOTALAGP
index|]
operator|.
name|succeed_count
expr_stmt|;
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_TOTALAGP
index|]
operator|.
name|bytes_allocated
operator|+=
name|pages
operator|<<
name|PAGE_SHIFT
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|handle
return|;
block|}
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_TOTALAGP
index|]
operator|.
name|fail_count
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|int
name|DRM
function|(
name|free_agp
function|)
parameter_list|(
name|agp_memory
modifier|*
name|handle
parameter_list|,
name|int
name|pages
parameter_list|)
block|{
name|int
name|alloc_count
decl_stmt|;
name|int
name|free_count
decl_stmt|;
if|if
condition|(
operator|!
name|handle
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|DRM_MEM_TOTALAGP
argument_list|,
literal|"Attempt to free NULL AGP handle\n"
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
if|if
condition|(
name|DRM
argument_list|(
name|agp_free_memory
argument_list|)
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
name|free_count
operator|=
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_TOTALAGP
index|]
operator|.
name|free_count
expr_stmt|;
name|alloc_count
operator|=
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_TOTALAGP
index|]
operator|.
name|succeed_count
expr_stmt|;
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_TOTALAGP
index|]
operator|.
name|bytes_freed
operator|+=
name|pages
operator|<<
name|PAGE_SHIFT
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|free_count
operator|>
name|alloc_count
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|DRM_MEM_TOTALAGP
argument_list|,
literal|"Excess frees: %d frees, %d allocs\n"
argument_list|,
name|free_count
argument_list|,
name|alloc_count
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
name|int
name|DRM
function|(
name|bind_agp
function|)
parameter_list|(
name|agp_memory
modifier|*
name|handle
parameter_list|,
name|unsigned
name|int
name|start
parameter_list|)
block|{
name|int
name|retcode
decl_stmt|;
ifdef|#
directive|ifdef
name|__FreeBSD__
name|device_t
name|dev
init|=
name|agp_find_device
argument_list|()
decl_stmt|;
name|struct
name|agp_memory_info
name|info
decl_stmt|;
if|if
condition|(
operator|!
name|dev
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|if
condition|(
operator|!
name|handle
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|DRM_MEM_BOUNDAGP
argument_list|,
literal|"Attempt to bind NULL AGP handle\n"
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|retcode
operator|=
name|DRM
argument_list|(
name|agp_bind_memory
argument_list|)
argument_list|(
name|handle
argument_list|,
name|start
argument_list|)
operator|)
condition|)
block|{
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_BOUNDAGP
index|]
operator|.
name|succeed_count
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_BOUNDAGP
index|]
operator|.
name|bytes_allocated
operator|+=
name|handle
operator|->
name|page_count
operator|<<
name|PAGE_SHIFT
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|agp_memory_info
argument_list|(
name|dev
argument_list|,
name|handle
argument_list|,
operator|&
name|info
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_BOUNDAGP
index|]
operator|.
name|bytes_allocated
operator|+=
name|info
operator|.
name|ami_size
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_BOUNDAGP
index|]
operator|.
name|fail_count
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retcode
return|;
block|}
name|int
name|DRM
function|(
name|unbind_agp
function|)
parameter_list|(
name|agp_memory
modifier|*
name|handle
parameter_list|)
block|{
name|int
name|alloc_count
decl_stmt|;
name|int
name|free_count
decl_stmt|;
name|int
name|retcode
init|=
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|__FreeBSD__
name|device_t
name|dev
init|=
name|agp_find_device
argument_list|()
decl_stmt|;
name|struct
name|agp_memory_info
name|info
decl_stmt|;
if|if
condition|(
operator|!
name|dev
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|if
condition|(
operator|!
name|handle
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|DRM_MEM_BOUNDAGP
argument_list|,
literal|"Attempt to unbind NULL AGP handle\n"
argument_list|)
expr_stmt|;
return|return
name|retcode
return|;
block|}
ifdef|#
directive|ifdef
name|__FreeBSD__
name|agp_memory_info
argument_list|(
name|dev
argument_list|,
name|handle
argument_list|,
operator|&
name|info
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|if
condition|(
operator|(
name|retcode
operator|=
name|DRM
argument_list|(
name|agp_unbind_memory
argument_list|)
argument_list|(
name|handle
argument_list|)
operator|)
condition|)
return|return
name|retcode
return|;
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
name|free_count
operator|=
operator|++
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_BOUNDAGP
index|]
operator|.
name|free_count
expr_stmt|;
name|alloc_count
operator|=
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_BOUNDAGP
index|]
operator|.
name|succeed_count
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_BOUNDAGP
index|]
operator|.
name|bytes_freed
operator|+=
name|handle
operator|->
name|page_count
operator|<<
name|PAGE_SHIFT
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM
argument_list|(
name|mem_stats
argument_list|)
index|[
name|DRM_MEM_BOUNDAGP
index|]
operator|.
name|bytes_freed
operator|+=
name|info
operator|.
name|ami_size
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|DRM
argument_list|(
name|mem_lock
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|free_count
operator|>
name|alloc_count
condition|)
block|{
name|DRM_MEM_ERROR
argument_list|(
name|DRM_MEM_BOUNDAGP
argument_list|,
literal|"Excess frees: %d frees, %d allocs\n"
argument_list|,
name|free_count
argument_list|,
name|alloc_count
argument_list|)
expr_stmt|;
block|}
return|return
name|retcode
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

