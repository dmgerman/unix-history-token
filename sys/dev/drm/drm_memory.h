begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_memory.h -- Memory management wrappers for DRM -*- linux-c -*-  * Created: Thu Feb  4 14:00:34 1999 by faith@valinux.com */
end_comment

begin_comment
comment|/*-  * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|||
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
end_if

begin_define
define|#
directive|define
name|malloctype
value|DRM(M_DRM)
end_define

begin_comment
comment|/* The macros conflicted in the MALLOC_DEFINE */
end_comment

begin_expr_stmt
name|MALLOC_DEFINE
argument_list|(
name|malloctype
argument_list|,
literal|"drm"
argument_list|,
literal|"DRM Data Structures"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_undef
undef|#
directive|undef
name|malloctype
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG_MEMORY
end_ifdef

begin_include
include|#
directive|include
file|"drm_memory_debug.h"
end_include

begin_else
else|#
directive|else
end_else

begin_function
name|void
name|DRM
function|(
name|mem_init
function|)
parameter_list|(
name|void
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__NetBSD__
name|malloc_type_attach
argument_list|(
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
name|void
name|DRM
function|(
name|mem_uninit
function|)
parameter_list|(
name|void
parameter_list|)
block|{ }
end_function

begin_function
name|void
modifier|*
name|DRM
function|(
name|alloc
function|)
parameter_list|(
name|size_t
name|size
parameter_list|,
name|int
name|area
parameter_list|)
block|{
return|return
name|malloc
argument_list|(
name|size
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|,
name|M_NOWAIT
argument_list|)
return|;
block|}
end_function

begin_function
name|void
modifier|*
name|DRM
function|(
name|calloc
function|)
parameter_list|(
name|size_t
name|nmemb
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|area
parameter_list|)
block|{
return|return
name|malloc
argument_list|(
name|size
operator|*
name|nmemb
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|,
name|M_NOWAIT
operator||
name|M_ZERO
argument_list|)
return|;
block|}
end_function

begin_function
name|void
modifier|*
name|DRM
function|(
name|realloc
function|)
parameter_list|(
name|void
modifier|*
name|oldpt
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|area
parameter_list|)
block|{
name|void
modifier|*
name|pt
decl_stmt|;
name|pt
operator|=
name|malloc
argument_list|(
name|size
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|,
name|M_NOWAIT
argument_list|)
expr_stmt|;
if|if
condition|(
name|pt
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
if|if
condition|(
name|oldpt
operator|&&
name|oldsize
condition|)
block|{
name|memcpy
argument_list|(
name|pt
argument_list|,
name|oldpt
argument_list|,
name|oldsize
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|oldpt
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pt
return|;
block|}
end_function

begin_function
name|void
name|DRM
function|(
name|free
function|)
parameter_list|(
name|void
modifier|*
name|pt
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|area
parameter_list|)
block|{
name|free
argument_list|(
name|pt
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
modifier|*
name|DRM
function|(
name|ioremap
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_local_map_t
modifier|*
name|map
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__FreeBSD__
return|return
name|pmap_mapdev
argument_list|(
name|map
operator|->
name|offset
argument_list|,
name|map
operator|->
name|size
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
name|map
operator|->
name|iot
operator|=
name|dev
operator|->
name|pa
operator|.
name|pa_memt
expr_stmt|;
if|if
condition|(
name|bus_space_map
argument_list|(
name|map
operator|->
name|iot
argument_list|,
name|map
operator|->
name|offset
argument_list|,
name|map
operator|->
name|size
argument_list|,
name|BUS_SPACE_MAP_LINEAR
argument_list|,
operator|&
name|map
operator|->
name|ioh
argument_list|)
condition|)
return|return
name|NULL
return|;
return|return
name|bus_space_vaddr
argument_list|(
name|map
operator|->
name|iot
argument_list|,
name|map
operator|->
name|ioh
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function
name|void
name|DRM
function|(
name|ioremapfree
function|)
parameter_list|(
name|drm_local_map_t
modifier|*
name|map
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__FreeBSD__
name|pmap_unmapdev
argument_list|(
operator|(
name|vm_offset_t
operator|)
name|map
operator|->
name|handle
argument_list|,
name|map
operator|->
name|size
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
name|bus_space_unmap
argument_list|(
name|map
operator|->
name|iot
argument_list|,
name|map
operator|->
name|ioh
argument_list|,
name|map
operator|->
name|size
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_if
if|#
directive|if
name|__REALLY_HAVE_AGP
end_if

begin_function
name|agp_memory
modifier|*
name|DRM
function|(
name|alloc_agp
function|)
parameter_list|(
name|int
name|pages
parameter_list|,
name|u32
name|type
parameter_list|)
block|{
return|return
name|DRM
argument_list|(
name|agp_allocate_memory
argument_list|)
argument_list|(
name|pages
argument_list|,
name|type
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|free_agp
function|)
parameter_list|(
name|agp_memory
modifier|*
name|handle
parameter_list|,
name|int
name|pages
parameter_list|)
block|{
return|return
name|DRM
argument_list|(
name|agp_free_memory
argument_list|)
argument_list|(
name|handle
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|bind_agp
function|)
parameter_list|(
name|agp_memory
modifier|*
name|handle
parameter_list|,
name|unsigned
name|int
name|start
parameter_list|)
block|{
return|return
name|DRM
argument_list|(
name|agp_bind_memory
argument_list|)
argument_list|(
name|handle
argument_list|,
name|start
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|unbind_agp
function|)
parameter_list|(
name|agp_memory
modifier|*
name|handle
parameter_list|)
block|{
return|return
name|DRM
argument_list|(
name|agp_unbind_memory
argument_list|)
argument_list|(
name|handle
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __REALLY_HAVE_AGP */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_function
name|int
name|DRM
function|(
name|mtrr_add
function|)
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|int
name|act
decl_stmt|;
name|struct
name|mem_range_desc
name|mrdesc
decl_stmt|;
name|mrdesc
operator|.
name|mr_base
operator|=
name|offset
expr_stmt|;
name|mrdesc
operator|.
name|mr_len
operator|=
name|size
expr_stmt|;
name|mrdesc
operator|.
name|mr_flags
operator|=
name|flags
expr_stmt|;
name|act
operator|=
name|MEMRANGE_SET_UPDATE
expr_stmt|;
name|bcopy
argument_list|(
name|DRIVER_NAME
argument_list|,
operator|&
name|mrdesc
operator|.
name|mr_owner
argument_list|,
name|strlen
argument_list|(
name|DRIVER_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mem_range_attr_set
argument_list|(
operator|&
name|mrdesc
argument_list|,
operator|&
name|act
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|mtrr_del
function|)
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|int
name|act
decl_stmt|;
name|struct
name|mem_range_desc
name|mrdesc
decl_stmt|;
name|mrdesc
operator|.
name|mr_base
operator|=
name|offset
expr_stmt|;
name|mrdesc
operator|.
name|mr_len
operator|=
name|size
expr_stmt|;
name|mrdesc
operator|.
name|mr_flags
operator|=
name|flags
expr_stmt|;
name|act
operator|=
name|MEMRANGE_SET_REMOVE
expr_stmt|;
name|bcopy
argument_list|(
name|DRIVER_NAME
argument_list|,
operator|&
name|mrdesc
operator|.
name|mr_owner
argument_list|,
name|strlen
argument_list|(
name|DRIVER_NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mem_range_attr_set
argument_list|(
operator|&
name|mrdesc
argument_list|,
operator|&
name|act
argument_list|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__NetBSD__
argument_list|)
end_elif

begin_function
name|int
name|DRM
function|(
name|mtrr_add
function|)
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|mtrr
name|mtrrmap
decl_stmt|;
name|int
name|one
init|=
literal|1
decl_stmt|;
name|mtrrmap
operator|.
name|base
operator|=
name|offset
expr_stmt|;
name|mtrrmap
operator|.
name|len
operator|=
name|size
expr_stmt|;
name|mtrrmap
operator|.
name|type
operator|=
name|flags
expr_stmt|;
name|mtrrmap
operator|.
name|flags
operator|=
name|MTRR_VALID
expr_stmt|;
return|return
name|mtrr_set
argument_list|(
operator|&
name|mtrrmap
argument_list|,
operator|&
name|one
argument_list|,
name|NULL
argument_list|,
name|MTRR_GETSET_KERNEL
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|mtrr_del
function|)
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|mtrr
name|mtrrmap
decl_stmt|;
name|int
name|one
init|=
literal|1
decl_stmt|;
name|mtrrmap
operator|.
name|base
operator|=
name|offset
expr_stmt|;
name|mtrrmap
operator|.
name|len
operator|=
name|size
expr_stmt|;
name|mtrrmap
operator|.
name|type
operator|=
name|flags
expr_stmt|;
name|mtrrmap
operator|.
name|flags
operator|=
literal|0
expr_stmt|;
return|return
name|mtrr_set
argument_list|(
operator|&
name|mtrrmap
argument_list|,
operator|&
name|one
argument_list|,
name|NULL
argument_list|,
name|MTRR_GETSET_KERNEL
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DEBUG_MEMORY */
end_comment

end_unit

