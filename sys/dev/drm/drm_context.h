begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_context.h -- IOCTLs for generic contexts -*- linux-c -*-  * Created: Fri Nov 24 18:31:37 2000 by gareth@valinux.com  *  * Copyright 1999, 2000 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|__NO_VERSION__
end_define

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_if
if|#
directive|if
name|__HAVE_CTX_BITMAP
end_if

begin_comment
comment|/* ================================================================  * Context bitmap support  */
end_comment

begin_function
name|void
name|DRM
function|(
name|ctxbitmap_free
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|ctx_handle
parameter_list|)
block|{
if|if
condition|(
name|ctx_handle
operator|<
literal|0
condition|)
goto|goto
name|failed
goto|;
if|if
condition|(
operator|!
name|dev
operator|->
name|ctx_bitmap
condition|)
goto|goto
name|failed
goto|;
if|if
condition|(
name|ctx_handle
operator|<
name|DRM_MAX_CTXBITMAP
condition|)
block|{
name|DRM_OS_LOCK
expr_stmt|;
name|clear_bit
argument_list|(
name|ctx_handle
argument_list|,
name|dev
operator|->
name|ctx_bitmap
argument_list|)
expr_stmt|;
name|dev
operator|->
name|context_sareas
index|[
name|ctx_handle
index|]
operator|=
name|NULL
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
return|return;
block|}
name|failed
label|:
name|DRM_ERROR
argument_list|(
literal|"Attempt to free invalid context handle: %d\n"
argument_list|,
name|ctx_handle
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|ctxbitmap_next
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|int
name|bit
decl_stmt|;
if|if
condition|(
operator|!
name|dev
operator|->
name|ctx_bitmap
condition|)
return|return
operator|-
literal|1
return|;
name|DRM_OS_LOCK
expr_stmt|;
name|bit
operator|=
name|find_first_zero_bit
argument_list|(
name|dev
operator|->
name|ctx_bitmap
argument_list|,
name|DRM_MAX_CTXBITMAP
argument_list|)
expr_stmt|;
if|if
condition|(
name|bit
operator|<
name|DRM_MAX_CTXBITMAP
condition|)
block|{
name|set_bit
argument_list|(
name|bit
argument_list|,
name|dev
operator|->
name|ctx_bitmap
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"drm_ctxbitmap_next bit : %d\n"
argument_list|,
name|bit
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|bit
operator|+
literal|1
operator|)
operator|>
name|dev
operator|->
name|max_context
condition|)
block|{
name|dev
operator|->
name|max_context
operator|=
operator|(
name|bit
operator|+
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|context_sareas
condition|)
block|{
name|drm_map_t
modifier|*
modifier|*
name|ctx_sareas
decl_stmt|;
name|ctx_sareas
operator|=
name|DRM
argument_list|(
name|realloc
argument_list|)
argument_list|(
name|dev
operator|->
name|context_sareas
argument_list|,
operator|(
name|dev
operator|->
name|max_context
operator|-
literal|1
operator|)
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|context_sareas
argument_list|)
argument_list|,
name|dev
operator|->
name|max_context
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|context_sareas
argument_list|)
argument_list|,
name|DRM_MEM_MAPS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ctx_sareas
condition|)
block|{
name|clear_bit
argument_list|(
name|bit
argument_list|,
name|dev
operator|->
name|ctx_bitmap
argument_list|)
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|dev
operator|->
name|context_sareas
operator|=
name|ctx_sareas
expr_stmt|;
name|dev
operator|->
name|context_sareas
index|[
name|bit
index|]
operator|=
name|NULL
expr_stmt|;
block|}
else|else
block|{
comment|/* max_context == 1 at this point */
name|dev
operator|->
name|context_sareas
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
name|dev
operator|->
name|max_context
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|context_sareas
argument_list|)
argument_list|,
name|DRM_MEM_MAPS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
operator|->
name|context_sareas
condition|)
block|{
name|clear_bit
argument_list|(
name|bit
argument_list|,
name|dev
operator|->
name|ctx_bitmap
argument_list|)
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|dev
operator|->
name|context_sareas
index|[
name|bit
index|]
operator|=
name|NULL
expr_stmt|;
block|}
block|}
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
name|bit
return|;
block|}
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|ctxbitmap_init
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|int
name|temp
decl_stmt|;
name|DRM_OS_LOCK
expr_stmt|;
name|dev
operator|->
name|ctx_bitmap
operator|=
operator|(
name|unsigned
name|long
operator|*
operator|)
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
name|PAGE_SIZE
argument_list|,
name|DRM_MEM_CTXBITMAP
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|ctx_bitmap
operator|==
name|NULL
condition|)
block|{
name|DRM_OS_UNLOCK
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|ENOMEM
argument_list|)
expr_stmt|;
block|}
name|memset
argument_list|(
operator|(
name|void
operator|*
operator|)
name|dev
operator|->
name|ctx_bitmap
argument_list|,
literal|0
argument_list|,
name|PAGE_SIZE
argument_list|)
expr_stmt|;
name|dev
operator|->
name|context_sareas
operator|=
name|NULL
expr_stmt|;
name|dev
operator|->
name|max_context
operator|=
operator|-
literal|1
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|DRM_RESERVED_CONTEXTS
condition|;
name|i
operator|++
control|)
block|{
name|temp
operator|=
name|DRM
argument_list|(
name|ctxbitmap_next
argument_list|)
argument_list|(
name|dev
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"drm_ctxbitmap_init : %d\n"
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
name|void
name|DRM
function|(
name|ctxbitmap_cleanup
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|DRM_OS_LOCK
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|context_sareas
condition|)
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dev
operator|->
name|context_sareas
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|context_sareas
argument_list|)
operator|*
name|dev
operator|->
name|max_context
argument_list|,
name|DRM_MEM_MAPS
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
operator|(
name|void
operator|*
operator|)
name|dev
operator|->
name|ctx_bitmap
argument_list|,
name|PAGE_SIZE
argument_list|,
name|DRM_MEM_CTXBITMAP
argument_list|)
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
block|}
end_function

begin_comment
comment|/* ================================================================  * Per Context SAREA Support  */
end_comment

begin_function
name|int
name|DRM
function|(
name|getsareactx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_priv_map_t
name|request
decl_stmt|;
name|drm_map_t
modifier|*
name|map
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|request
argument_list|,
operator|(
name|drm_ctx_priv_map_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_OS_LOCK
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|max_context
operator|<
literal|0
operator|||
name|request
operator|.
name|ctx_id
operator|>=
operator|(
name|unsigned
operator|)
name|dev
operator|->
name|max_context
condition|)
block|{
name|DRM_OS_UNLOCK
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
block|}
name|map
operator|=
name|dev
operator|->
name|context_sareas
index|[
name|request
operator|.
name|ctx_id
index|]
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
name|request
operator|.
name|handle
operator|=
name|map
operator|->
name|handle
expr_stmt|;
name|DRM_OS_KRNTOUSR
argument_list|(
operator|(
name|drm_ctx_priv_map_t
operator|*
operator|)
name|data
argument_list|,
name|request
argument_list|,
sizeof|sizeof
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|setsareactx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_priv_map_t
name|request
decl_stmt|;
name|drm_map_t
modifier|*
name|map
init|=
name|NULL
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|drm_map_list_t
modifier|*
name|r_list
init|=
name|NULL
decl_stmt|;
name|struct
name|list_head
modifier|*
name|list
decl_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|drm_map_list_entry_t
modifier|*
name|list
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_KRNFROMUSR
argument_list|(
name|request
argument_list|,
operator|(
name|drm_ctx_priv_map_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_OS_LOCK
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|list_for_each
argument_list|(
argument|list
argument_list|,
argument|&dev->maplist->head
argument_list|)
block|{
name|r_list
operator|=
operator|(
name|drm_map_list_t
operator|*
operator|)
name|list
expr_stmt|;
if|if
condition|(
name|r_list
operator|->
name|map
operator|&&
name|r_list
operator|->
name|map
operator|->
name|handle
operator|==
name|request
operator|.
name|handle
condition|)
goto|goto
name|found
goto|;
block|}
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|TAILQ_FOREACH
argument_list|(
argument|list
argument_list|,
argument|dev->maplist
argument_list|,
argument|link
argument_list|)
block|{
name|map
operator|=
name|list
operator|->
name|map
expr_stmt|;
if|if
condition|(
name|map
operator|->
name|handle
operator|==
name|request
operator|.
name|handle
condition|)
goto|goto
name|found
goto|;
block|}
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|bad
label|:
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
operator|-
name|EINVAL
return|;
name|found
label|:
ifdef|#
directive|ifdef
name|__linux__
name|map
operator|=
name|r_list
operator|->
name|map
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|map
operator|=
name|list
operator|->
name|map
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|if
condition|(
operator|!
name|map
condition|)
goto|goto
name|bad
goto|;
if|if
condition|(
name|dev
operator|->
name|max_context
operator|<
literal|0
condition|)
goto|goto
name|bad
goto|;
if|if
condition|(
name|request
operator|.
name|ctx_id
operator|>=
operator|(
name|unsigned
operator|)
name|dev
operator|->
name|max_context
condition|)
goto|goto
name|bad
goto|;
name|dev
operator|->
name|context_sareas
index|[
name|request
operator|.
name|ctx_id
index|]
operator|=
name|map
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* ================================================================  * The actual DRM context handling routines  */
end_comment

begin_function
name|int
name|DRM
function|(
name|context_switch
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|old
parameter_list|,
name|int
name|new
parameter_list|)
block|{
name|char
name|buf
index|[
literal|64
index|]
decl_stmt|;
if|if
condition|(
name|test_and_set_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|context_flag
argument_list|)
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Reentering -- FIXME\n"
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EBUSY
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
name|dev
operator|->
name|ctx_start
operator|=
name|get_cycles
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|DRM_DEBUG
argument_list|(
literal|"Context switch from %d to %d\n"
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
expr_stmt|;
if|if
condition|(
name|new
operator|==
name|dev
operator|->
name|last_context
condition|)
block|{
name|clear_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|context_flag
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|DRM
argument_list|(
name|flags
argument_list|)
operator|&
name|DRM_FLAG_NOCTX
condition|)
block|{
name|DRM
function_decl|(
name|context_switch_complete
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|new
parameter_list|)
function_decl|;
block|}
else|else
block|{
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"C %d %d\n"
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
expr_stmt|;
name|DRM
function_decl|(
name|write_string
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|buf
parameter_list|)
function_decl|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|context_switch_complete
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|new
parameter_list|)
block|{
name|dev
operator|->
name|last_context
operator|=
name|new
expr_stmt|;
comment|/* PRE/POST: This is the _only_ writer. */
name|dev
operator|->
name|last_switch
operator|=
name|jiffies
expr_stmt|;
if|if
condition|(
operator|!
name|_DRM_LOCK_IS_HELD
argument_list|(
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|)
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Lock isn't held after context switch\n"
argument_list|)
expr_stmt|;
block|}
comment|/* If a context switch is ever initiated                                    when the kernel holds the lock, release                                    that lock here. */
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|histo
operator|.
name|ctx
index|[
name|DRM
argument_list|(
name|histogram_slot
argument_list|)
operator|(
name|get_cycles
argument_list|()
operator|-
name|dev
operator|->
name|ctx_start
operator|)
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|clear_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|context_flag
argument_list|)
expr_stmt|;
name|DRM_OS_WAKEUP
argument_list|(
operator|&
name|dev
operator|->
name|context_wait
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|resctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|drm_ctx_res_t
name|res
decl_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|int
name|i
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|res
argument_list|,
operator|(
name|drm_ctx_res_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|count
operator|>=
name|DRM_RESERVED_CONTEXTS
condition|)
block|{
name|memset
argument_list|(
operator|&
name|ctx
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|DRM_RESERVED_CONTEXTS
condition|;
name|i
operator|++
control|)
block|{
name|ctx
operator|.
name|handle
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|DRM_OS_COPYTOUSR
argument_list|(
operator|&
name|res
operator|.
name|contexts
index|[
name|i
index|]
argument_list|,
operator|&
name|i
argument_list|,
sizeof|sizeof
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|DRM_OS_RETURN
argument_list|(
name|EFAULT
argument_list|)
expr_stmt|;
block|}
block|}
name|res
operator|.
name|count
operator|=
name|DRM_RESERVED_CONTEXTS
expr_stmt|;
name|DRM_OS_KRNTOUSR
argument_list|(
operator|(
name|drm_ctx_res_t
operator|*
operator|)
name|data
argument_list|,
name|res
argument_list|,
sizeof|sizeof
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|addctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|handle
operator|=
name|DRM
argument_list|(
name|ctxbitmap_next
argument_list|)
argument_list|(
name|dev
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|handle
operator|==
name|DRM_KERNEL_CONTEXT
condition|)
block|{
comment|/* Skip kernel's context and get a new one. */
name|ctx
operator|.
name|handle
operator|=
name|DRM
argument_list|(
name|ctxbitmap_next
argument_list|)
argument_list|(
name|dev
argument_list|)
expr_stmt|;
block|}
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|handle
operator|==
operator|-
literal|1
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"Not enough free contexts.\n"
argument_list|)
expr_stmt|;
comment|/* Should this return -EBUSY instead? */
name|DRM_OS_RETURN
argument_list|(
name|ENOMEM
argument_list|)
expr_stmt|;
block|}
name|DRM_OS_KRNTOUSR
argument_list|(
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
name|ctx
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|modctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
comment|/* This does nothing */
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|getctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|drm_ctx_t
name|ctx
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
comment|/* This is 0, because we don't handle any context flags */
name|ctx
operator|.
name|flags
operator|=
literal|0
expr_stmt|;
name|DRM_OS_KRNTOUSR
argument_list|(
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
name|ctx
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|switchctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
return|return
name|DRM
argument_list|(
name|context_switch
argument_list|)
argument_list|(
name|dev
argument_list|,
name|dev
operator|->
name|last_context
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|newctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
name|DRM
function_decl|(
name|context_switch_complete
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|ctx
operator|.
name|handle
parameter_list|)
function_decl|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|rmctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
if|if
condition|(
name|ctx
operator|.
name|handle
operator|==
name|DRM_KERNEL_CONTEXT
operator|+
literal|1
condition|)
block|{
name|priv
operator|->
name|remove_auth_on_close
operator|=
literal|1
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __linux__ */
if|if
condition|(
name|ctx
operator|.
name|handle
operator|!=
name|DRM_KERNEL_CONTEXT
condition|)
block|{
name|DRM
function_decl|(
name|ctxbitmap_free
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|ctx
operator|.
name|handle
parameter_list|)
function_decl|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __HAVE_CTX_BITMAP */
end_comment

begin_comment
comment|/* ================================================================  * Old-style context support  */
end_comment

begin_function
name|int
name|DRM
function|(
name|context_switch
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|old
parameter_list|,
name|int
name|new
parameter_list|)
block|{
name|char
name|buf
index|[
literal|64
index|]
decl_stmt|;
name|drm_queue_t
modifier|*
name|q
decl_stmt|;
if|#
directive|if
literal|0
block|atomic_inc(&dev->total_ctx);
endif|#
directive|endif
if|if
condition|(
name|test_and_set_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|context_flag
argument_list|)
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Reentering -- FIXME\n"
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EBUSY
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
name|dev
operator|->
name|ctx_start
operator|=
name|get_cycles
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|DRM_DEBUG
argument_list|(
literal|"Context switch from %d to %d\n"
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
expr_stmt|;
if|if
condition|(
name|new
operator|>=
name|dev
operator|->
name|queue_count
condition|)
block|{
name|clear_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|context_flag
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|new
operator|==
name|dev
operator|->
name|last_context
condition|)
block|{
name|clear_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|context_flag
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|q
operator|=
name|dev
operator|->
name|queuelist
index|[
name|new
index|]
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
operator|==
literal|1
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|clear_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|context_flag
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DRM
argument_list|(
name|flags
argument_list|)
operator|&
name|DRM_FLAG_NOCTX
condition|)
block|{
name|DRM
function_decl|(
name|context_switch_complete
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|new
parameter_list|)
function_decl|;
block|}
else|else
block|{
name|sprintf
argument_list|(
name|buf
argument_list|,
literal|"C %d %d\n"
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
expr_stmt|;
name|DRM
function_decl|(
name|write_string
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|buf
parameter_list|)
function_decl|;
block|}
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|context_switch_complete
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|new
parameter_list|)
block|{
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
name|dev
operator|->
name|last_context
operator|=
name|new
expr_stmt|;
comment|/* PRE/POST: This is the _only_ writer. */
name|dev
operator|->
name|last_switch
operator|=
name|jiffies
expr_stmt|;
if|if
condition|(
operator|!
name|_DRM_LOCK_IS_HELD
argument_list|(
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|)
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Lock isn't held after context switch\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dma
operator|||
operator|!
operator|(
name|dma
operator|->
name|next_buffer
operator|&&
name|dma
operator|->
name|next_buffer
operator|->
name|while_locked
operator|)
condition|)
block|{
if|if
condition|(
name|DRM
argument_list|(
name|lock_free
argument_list|)
argument_list|(
name|dev
argument_list|,
operator|&
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
argument_list|,
name|DRM_KERNEL_CONTEXT
argument_list|)
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Cannot free lock\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|histo
operator|.
name|ctx
index|[
name|DRM
argument_list|(
name|histogram_slot
argument_list|)
operator|(
name|get_cycles
argument_list|()
operator|-
name|dev
operator|->
name|ctx_start
operator|)
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|clear_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|context_flag
argument_list|)
expr_stmt|;
name|DRM_OS_WAKEUP_INT
argument_list|(
operator|&
name|dev
operator|->
name|context_wait
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|DRM
function|(
name|init_queue
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_queue_t
modifier|*
name|q
parameter_list|,
name|drm_ctx_t
modifier|*
name|ctx
parameter_list|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
operator|!=
literal|1
operator|||
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|finalization
argument_list|)
operator|||
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|block_count
argument_list|)
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"New queue is already in use: u%ld f%ld b%ld\n"
argument_list|,
operator|(
name|unsigned
name|long
operator|)
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
argument_list|,
operator|(
name|unsigned
name|long
operator|)
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|finalization
argument_list|)
argument_list|,
operator|(
name|unsigned
name|long
operator|)
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|block_count
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|atomic_set
argument_list|(
operator|&
name|q
operator|->
name|finalization
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|q
operator|->
name|block_count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|q
operator|->
name|block_read
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|q
operator|->
name|block_write
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|q
operator|->
name|total_queued
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|q
operator|->
name|total_flushed
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|q
operator|->
name|total_locks
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|init_waitqueue_head
argument_list|(
operator|&
name|q
operator|->
name|write_queue
argument_list|)
expr_stmt|;
name|init_waitqueue_head
argument_list|(
operator|&
name|q
operator|->
name|read_queue
argument_list|)
expr_stmt|;
name|init_waitqueue_head
argument_list|(
operator|&
name|q
operator|->
name|flush_queue
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|q
operator|->
name|write_queue
operator|=
literal|0
expr_stmt|;
name|q
operator|->
name|read_queue
operator|=
literal|0
expr_stmt|;
name|q
operator|->
name|flush_queue
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|q
operator|->
name|flags
operator|=
name|ctx
operator|->
name|flags
expr_stmt|;
name|DRM
argument_list|(
name|waitlist_create
argument_list|)
argument_list|(
operator|&
name|q
operator|->
name|waitlist
argument_list|,
name|dev
operator|->
name|dma
operator|->
name|buf_count
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* drm_alloc_queue: PRE: 1) dev->queuelist[0..dev->queue_count] is allocated and will not 	disappear (so all deallocation must be done after IOCTLs are off)      2) dev->queue_count< dev->queue_slots      3) dev->queuelist[i].use_count == 0 and 	dev->queuelist[i].finalization == 0 if i not in use POST: 1) dev->queuelist[i].use_count == 1       2) dev->queue_count< dev->queue_slots */
end_comment

begin_function
specifier|static
name|int
name|DRM
function|(
name|alloc_queue
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|drm_queue_t
modifier|*
name|queue
decl_stmt|;
name|int
name|oldslots
decl_stmt|;
name|int
name|newslots
decl_stmt|;
comment|/* Check for a free queue */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|dev
operator|->
name|queue_count
condition|;
name|i
operator|++
control|)
block|{
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|queuelist
index|[
name|i
index|]
operator|->
name|use_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|dev
operator|->
name|queuelist
index|[
name|i
index|]
operator|->
name|use_count
argument_list|)
operator|==
literal|1
operator|&&
operator|!
name|atomic_read
argument_list|(
operator|&
name|dev
operator|->
name|queuelist
index|[
name|i
index|]
operator|->
name|finalization
argument_list|)
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"%d (free)\n"
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
name|atomic_dec
argument_list|(
operator|&
name|dev
operator|->
name|queuelist
index|[
name|i
index|]
operator|->
name|use_count
argument_list|)
expr_stmt|;
block|}
comment|/* Allocate a new queue */
name|DRM_OS_LOCK
expr_stmt|;
name|queue
operator|=
name|gamma_alloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|queue
argument_list|)
argument_list|,
name|DRM_MEM_QUEUES
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|queue
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|queue
argument_list|)
argument_list|)
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|queue
operator|->
name|use_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|++
name|dev
operator|->
name|queue_count
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|queue_count
operator|>=
name|dev
operator|->
name|queue_slots
condition|)
block|{
name|oldslots
operator|=
name|dev
operator|->
name|queue_slots
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|queuelist
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
operator|->
name|queue_slots
condition|)
name|dev
operator|->
name|queue_slots
operator|=
literal|1
expr_stmt|;
name|dev
operator|->
name|queue_slots
operator|*=
literal|2
expr_stmt|;
name|newslots
operator|=
name|dev
operator|->
name|queue_slots
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|queuelist
argument_list|)
expr_stmt|;
name|dev
operator|->
name|queuelist
operator|=
name|DRM
argument_list|(
name|realloc
argument_list|)
argument_list|(
name|dev
operator|->
name|queuelist
argument_list|,
name|oldslots
argument_list|,
name|newslots
argument_list|,
name|DRM_MEM_QUEUES
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
operator|->
name|queuelist
condition|)
block|{
name|DRM_OS_UNLOCK
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"out of memory\n"
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|ENOMEM
argument_list|)
expr_stmt|;
block|}
block|}
name|dev
operator|->
name|queuelist
index|[
name|dev
operator|->
name|queue_count
operator|-
literal|1
index|]
operator|=
name|queue
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d (new)\n"
argument_list|,
name|dev
operator|->
name|queue_count
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|dev
operator|->
name|queue_count
operator|-
literal|1
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|resctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|drm_ctx_res_t
name|res
decl_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|int
name|i
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|DRM_RESERVED_CONTEXTS
argument_list|)
expr_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|res
argument_list|,
operator|(
name|drm_ctx_res_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|count
operator|>=
name|DRM_RESERVED_CONTEXTS
condition|)
block|{
name|memset
argument_list|(
operator|&
name|ctx
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|DRM_RESERVED_CONTEXTS
condition|;
name|i
operator|++
control|)
block|{
name|ctx
operator|.
name|handle
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|DRM_OS_COPYTOUSR
argument_list|(
operator|&
name|res
operator|.
name|contexts
index|[
name|i
index|]
argument_list|,
operator|&
name|i
argument_list|,
sizeof|sizeof
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|DRM_OS_RETURN
argument_list|(
name|EFAULT
argument_list|)
expr_stmt|;
block|}
block|}
name|res
operator|.
name|count
operator|=
name|DRM_RESERVED_CONTEXTS
expr_stmt|;
name|DRM_OS_KRNTOUSR
argument_list|(
operator|(
name|drm_ctx_res_t
operator|*
operator|)
name|data
argument_list|,
name|res
argument_list|,
sizeof|sizeof
argument_list|(
name|res
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|addctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ctx
operator|.
name|handle
operator|=
name|DRM
argument_list|(
name|alloc_queue
argument_list|)
argument_list|(
name|dev
argument_list|)
operator|)
operator|==
name|DRM_KERNEL_CONTEXT
condition|)
block|{
comment|/* Init kernel's context and get a new one. */
name|DRM
argument_list|(
name|init_queue
argument_list|)
argument_list|(
name|dev
argument_list|,
name|dev
operator|->
name|queuelist
index|[
name|ctx
operator|.
name|handle
index|]
argument_list|,
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|handle
operator|=
name|DRM
argument_list|(
name|alloc_queue
argument_list|)
argument_list|(
name|dev
argument_list|)
expr_stmt|;
block|}
name|DRM
argument_list|(
name|init_queue
argument_list|)
argument_list|(
name|dev
argument_list|,
name|dev
operator|->
name|queuelist
index|[
name|ctx
operator|.
name|handle
index|]
argument_list|,
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
name|DRM_OS_KRNTOUSR
argument_list|(
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
name|ctx
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|modctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|drm_queue_t
modifier|*
name|q
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|handle
operator|<
literal|0
operator|||
name|ctx
operator|.
name|handle
operator|>=
name|dev
operator|->
name|queue_count
condition|)
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
name|q
operator|=
name|dev
operator|->
name|queuelist
index|[
name|ctx
operator|.
name|handle
index|]
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|/* No longer in use */
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DRM_BUFCOUNT
argument_list|(
operator|&
name|q
operator|->
name|waitlist
argument_list|)
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EBUSY
argument_list|)
expr_stmt|;
block|}
name|q
operator|->
name|flags
operator|=
name|ctx
operator|.
name|flags
expr_stmt|;
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|getctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|drm_queue_t
modifier|*
name|q
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|handle
operator|>=
name|dev
operator|->
name|queue_count
condition|)
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
name|q
operator|=
name|dev
operator|->
name|queuelist
index|[
name|ctx
operator|.
name|handle
index|]
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|/* No longer in use */
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|flags
operator|=
name|q
operator|->
name|flags
expr_stmt|;
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_OS_KRNTOUSR
argument_list|(
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
name|ctx
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|switchctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
return|return
name|DRM
argument_list|(
name|context_switch
argument_list|)
argument_list|(
name|dev
argument_list|,
name|dev
operator|->
name|last_context
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|newctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
name|DRM
function_decl|(
name|context_switch_complete
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|ctx
operator|.
name|handle
parameter_list|)
function_decl|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|rmctx
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_ctx_t
name|ctx
decl_stmt|;
name|drm_queue_t
modifier|*
name|q
decl_stmt|;
name|drm_buf_t
modifier|*
name|buf
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctx
argument_list|,
operator|(
name|drm_ctx_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|ctx
operator|.
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|.
name|handle
operator|>=
name|dev
operator|->
name|queue_count
condition|)
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
name|q
operator|=
name|dev
operator|->
name|queuelist
index|[
name|ctx
operator|.
name|handle
index|]
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
operator|==
literal|1
condition|)
block|{
comment|/* No longer in use */
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
block|}
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|finalization
argument_list|)
expr_stmt|;
comment|/* Mark queue in finalization state */
name|atomic_sub
argument_list|(
literal|2
argument_list|,
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
comment|/* Mark queue as unused (pending 					 finalization) */
while|while
condition|(
name|test_and_set_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|interrupt_flag
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|schedule
argument_list|()
expr_stmt|;
if|if
condition|(
name|signal_pending
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|clear_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|interrupt_flag
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EINTR
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
specifier|static
name|int
name|never
decl_stmt|;
name|int
name|retcode
decl_stmt|;
name|retcode
operator|=
name|tsleep
argument_list|(
operator|&
name|never
argument_list|,
name|PZERO
operator||
name|PCATCH
argument_list|,
literal|"never"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|retcode
condition|)
return|return
name|retcode
return|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|}
comment|/* Remove queued buffers */
while|while
condition|(
operator|(
name|buf
operator|=
name|DRM
argument_list|(
name|waitlist_get
argument_list|)
argument_list|(
operator|&
name|q
operator|->
name|waitlist
argument_list|)
operator|)
condition|)
block|{
name|DRM
function_decl|(
name|free_buffer
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|buf
parameter_list|)
function_decl|;
block|}
name|clear_bit
argument_list|(
literal|0
argument_list|,
operator|&
name|dev
operator|->
name|interrupt_flag
argument_list|)
expr_stmt|;
comment|/* Wakeup blocked processes */
ifdef|#
directive|ifdef
name|__linux__
name|wake_up_interruptible
argument_list|(
operator|&
name|q
operator|->
name|read_queue
argument_list|)
expr_stmt|;
name|wake_up_interruptible
argument_list|(
operator|&
name|q
operator|->
name|write_queue
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|wakeup
argument_list|(
operator|&
name|q
operator|->
name|block_read
argument_list|)
expr_stmt|;
name|wakeup
argument_list|(
operator|&
name|q
operator|->
name|block_write
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_WAKEUP_INT
argument_list|(
operator|&
name|q
operator|->
name|flush_queue
argument_list|)
expr_stmt|;
comment|/* Finalization over.  Queue is made 				   available when both use_count and 				   finalization become 0, which won't 				   happen until all the waiting processes 				   stop waiting. */
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|finalization
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HAVE_CTX_BITMAP */
end_comment

end_unit

