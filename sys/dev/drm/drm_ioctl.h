begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_ioctl.h -- IOCTL processing for DRM -*- linux-c -*-  * Created: Fri Jan  8 09:01:26 1999 by faith@valinux.com  *  * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_function
name|int
name|DRM
function|(
name|irq_busid
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__FreeBSD__
name|drm_irq_busid_t
name|id
decl_stmt|;
name|devclass_t
name|pci
decl_stmt|;
name|device_t
name|bus
decl_stmt|,
name|dev
decl_stmt|;
name|device_t
modifier|*
name|kids
decl_stmt|;
name|int
name|error
decl_stmt|,
name|i
decl_stmt|,
name|num_kids
decl_stmt|;
name|DRM_COPY_FROM_USER_IOCTL
argument_list|(
name|id
argument_list|,
operator|(
name|drm_irq_busid_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|pci
operator|=
name|devclass_find
argument_list|(
literal|"pci"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pci
condition|)
return|return
name|ENOENT
return|;
name|bus
operator|=
name|devclass_get_device
argument_list|(
name|pci
argument_list|,
name|id
operator|.
name|busnum
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bus
condition|)
return|return
name|ENOENT
return|;
name|error
operator|=
name|device_get_children
argument_list|(
name|bus
argument_list|,
operator|&
name|kids
argument_list|,
operator|&
name|num_kids
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
return|return
name|error
return|;
name|dev
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|num_kids
condition|;
name|i
operator|++
control|)
block|{
name|dev
operator|=
name|kids
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|pci_get_slot
argument_list|(
name|dev
argument_list|)
operator|==
name|id
operator|.
name|devnum
operator|&&
name|pci_get_function
argument_list|(
name|dev
argument_list|)
operator|==
name|id
operator|.
name|funcnum
condition|)
break|break;
block|}
name|free
argument_list|(
name|kids
argument_list|,
name|M_TEMP
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|num_kids
condition|)
name|id
operator|.
name|irq
operator|=
name|pci_get_irq
argument_list|(
name|dev
argument_list|)
expr_stmt|;
else|else
name|id
operator|.
name|irq
operator|=
literal|0
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d:%d:%d => IRQ %d\n"
argument_list|,
name|id
operator|.
name|busnum
argument_list|,
name|id
operator|.
name|devnum
argument_list|,
name|id
operator|.
name|funcnum
argument_list|,
name|id
operator|.
name|irq
argument_list|)
expr_stmt|;
name|DRM_COPY_TO_USER_IOCTL
argument_list|(
operator|(
name|drm_irq_busid_t
operator|*
operator|)
name|data
argument_list|,
name|id
argument_list|,
sizeof|sizeof
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
else|#
directive|else
comment|/* don't support interrupt-driven drivers on Net yet */
return|return
name|ENOENT
return|;
endif|#
directive|endif
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|getunique
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|DRM_DEVICE
expr_stmt|;
name|drm_unique_t
name|u
decl_stmt|;
name|DRM_COPY_FROM_USER_IOCTL
argument_list|(
name|u
argument_list|,
operator|(
name|drm_unique_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|u
operator|.
name|unique_len
operator|>=
name|dev
operator|->
name|unique_len
condition|)
block|{
if|if
condition|(
name|DRM_COPY_TO_USER
argument_list|(
name|u
operator|.
name|unique
argument_list|,
name|dev
operator|->
name|unique
argument_list|,
name|dev
operator|->
name|unique_len
argument_list|)
condition|)
return|return
name|DRM_ERR
argument_list|(
name|EFAULT
argument_list|)
return|;
block|}
name|u
operator|.
name|unique_len
operator|=
name|dev
operator|->
name|unique_len
expr_stmt|;
name|DRM_COPY_TO_USER_IOCTL
argument_list|(
operator|(
name|drm_unique_t
operator|*
operator|)
name|data
argument_list|,
name|u
argument_list|,
sizeof|sizeof
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|setunique
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|DRM_DEVICE
expr_stmt|;
name|drm_unique_t
name|u
decl_stmt|;
if|if
condition|(
name|dev
operator|->
name|unique_len
operator|||
name|dev
operator|->
name|unique
condition|)
return|return
name|DRM_ERR
argument_list|(
name|EBUSY
argument_list|)
return|;
name|DRM_COPY_FROM_USER_IOCTL
argument_list|(
name|u
argument_list|,
operator|(
name|drm_unique_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|u
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|u
operator|.
name|unique_len
operator|||
name|u
operator|.
name|unique_len
operator|>
literal|1024
condition|)
return|return
name|DRM_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
name|dev
operator|->
name|unique_len
operator|=
name|u
operator|.
name|unique_len
expr_stmt|;
name|dev
operator|->
name|unique
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
name|u
operator|.
name|unique_len
operator|+
literal|1
argument_list|,
name|DRM_MEM_DRIVER
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
operator|->
name|unique
condition|)
return|return
name|DRM_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
if|if
condition|(
name|DRM_COPY_FROM_USER
argument_list|(
name|dev
operator|->
name|unique
argument_list|,
name|u
operator|.
name|unique
argument_list|,
name|dev
operator|->
name|unique_len
argument_list|)
condition|)
return|return
name|DRM_ERR
argument_list|(
name|EFAULT
argument_list|)
return|;
name|dev
operator|->
name|unique
index|[
name|dev
operator|->
name|unique_len
index|]
operator|=
literal|'\0'
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|getmap
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|DRM_DEVICE
expr_stmt|;
name|drm_map_t
name|map
decl_stmt|;
name|drm_local_map_t
modifier|*
name|mapinlist
decl_stmt|;
name|drm_map_list_entry_t
modifier|*
name|list
decl_stmt|;
name|int
name|idx
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|DRM_COPY_FROM_USER_IOCTL
argument_list|(
name|map
argument_list|,
operator|(
name|drm_map_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|=
name|map
operator|.
name|offset
expr_stmt|;
name|DRM_LOCK
expr_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|DRM_UNLOCK
expr_stmt|;
return|return
name|DRM_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
name|TAILQ_FOREACH
argument_list|(
argument|list
argument_list|,
argument|dev->maplist
argument_list|,
argument|link
argument_list|)
block|{
name|mapinlist
operator|=
name|list
operator|->
name|map
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|idx
condition|)
block|{
name|map
operator|.
name|offset
operator|=
name|mapinlist
operator|->
name|offset
expr_stmt|;
name|map
operator|.
name|size
operator|=
name|mapinlist
operator|->
name|size
expr_stmt|;
name|map
operator|.
name|type
operator|=
name|mapinlist
operator|->
name|type
expr_stmt|;
name|map
operator|.
name|flags
operator|=
name|mapinlist
operator|->
name|flags
expr_stmt|;
name|map
operator|.
name|handle
operator|=
name|mapinlist
operator|->
name|handle
expr_stmt|;
name|map
operator|.
name|mtrr
operator|=
name|mapinlist
operator|->
name|mtrr
expr_stmt|;
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|DRM_UNLOCK
expr_stmt|;
if|if
condition|(
operator|!
name|list
condition|)
return|return
name|EINVAL
return|;
name|DRM_COPY_TO_USER_IOCTL
argument_list|(
operator|(
name|drm_map_t
operator|*
operator|)
name|data
argument_list|,
name|map
argument_list|,
sizeof|sizeof
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|getclient
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|DRM_DEVICE
expr_stmt|;
name|drm_client_t
name|client
decl_stmt|;
name|drm_file_t
modifier|*
name|pt
decl_stmt|;
name|int
name|idx
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|DRM_COPY_FROM_USER_IOCTL
argument_list|(
name|client
argument_list|,
operator|(
name|drm_client_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|client
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|=
name|client
operator|.
name|idx
expr_stmt|;
name|DRM_LOCK
expr_stmt|;
name|TAILQ_FOREACH
argument_list|(
argument|pt
argument_list|,
argument|&dev->files
argument_list|,
argument|link
argument_list|)
block|{
if|if
condition|(
name|i
operator|==
name|idx
condition|)
block|{
name|client
operator|.
name|auth
operator|=
name|pt
operator|->
name|authenticated
expr_stmt|;
name|client
operator|.
name|pid
operator|=
name|pt
operator|->
name|pid
expr_stmt|;
name|client
operator|.
name|uid
operator|=
name|pt
operator|->
name|uid
expr_stmt|;
name|client
operator|.
name|magic
operator|=
name|pt
operator|->
name|magic
expr_stmt|;
name|client
operator|.
name|iocs
operator|=
name|pt
operator|->
name|ioctl_count
expr_stmt|;
name|DRM_UNLOCK
expr_stmt|;
operator|*
operator|(
name|drm_client_t
operator|*
operator|)
name|data
operator|=
name|client
expr_stmt|;
return|return
literal|0
return|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|DRM_UNLOCK
expr_stmt|;
name|DRM_COPY_TO_USER_IOCTL
argument_list|(
operator|(
name|drm_client_t
operator|*
operator|)
name|data
argument_list|,
name|client
argument_list|,
sizeof|sizeof
argument_list|(
name|client
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|getstats
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|DRM_DEVICE
expr_stmt|;
name|drm_stats_t
name|stats
decl_stmt|;
name|int
name|i
decl_stmt|;
name|memset
argument_list|(
operator|&
name|stats
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_LOCK
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|dev
operator|->
name|counters
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dev
operator|->
name|types
index|[
name|i
index|]
operator|==
name|_DRM_STAT_LOCK
condition|)
name|stats
operator|.
name|data
index|[
name|i
index|]
operator|.
name|value
operator|=
operator|(
name|dev
operator|->
name|lock
operator|.
name|hw_lock
condition|?
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
else|:
literal|0
operator|)
expr_stmt|;
else|else
name|stats
operator|.
name|data
index|[
name|i
index|]
operator|.
name|value
operator|=
name|atomic_read
argument_list|(
operator|&
name|dev
operator|->
name|counts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|stats
operator|.
name|data
index|[
name|i
index|]
operator|.
name|type
operator|=
name|dev
operator|->
name|types
index|[
name|i
index|]
expr_stmt|;
block|}
name|stats
operator|.
name|count
operator|=
name|dev
operator|->
name|counters
expr_stmt|;
name|DRM_UNLOCK
expr_stmt|;
name|DRM_COPY_TO_USER_IOCTL
argument_list|(
operator|(
name|drm_stats_t
operator|*
operator|)
name|data
argument_list|,
name|stats
argument_list|,
sizeof|sizeof
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|noop
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

end_unit

