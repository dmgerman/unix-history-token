begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_lists.h -- Buffer list handling routines -*- linux-c -*-  * Created: Mon Apr 19 20:54:22 1999 by faith@valinux.com  *  * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|__NO_VERSION__
end_define

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_if
if|#
directive|if
name|__HAVE_DMA_WAITLIST
end_if

begin_function
name|int
name|DRM
function|(
name|waitlist_create
function|)
parameter_list|(
name|drm_waitlist_t
modifier|*
name|bl
parameter_list|,
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|bl
operator|->
name|count
condition|)
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
name|bl
operator|->
name|bufs
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
operator|(
name|bl
operator|->
name|count
operator|+
literal|2
operator|)
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|bl
operator|->
name|bufs
argument_list|)
argument_list|,
name|DRM_MEM_BUFLISTS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bl
operator|->
name|bufs
condition|)
name|DRM_OS_RETURN
argument_list|(
name|ENOMEM
argument_list|)
expr_stmt|;
name|bl
operator|->
name|count
operator|=
name|count
expr_stmt|;
name|bl
operator|->
name|rp
operator|=
name|bl
operator|->
name|bufs
expr_stmt|;
name|bl
operator|->
name|wp
operator|=
name|bl
operator|->
name|bufs
expr_stmt|;
name|bl
operator|->
name|end
operator|=
operator|&
name|bl
operator|->
name|bufs
index|[
name|bl
operator|->
name|count
operator|+
literal|1
index|]
expr_stmt|;
name|DRM_OS_SPININIT
argument_list|(
name|bl
operator|->
name|write_lock
argument_list|,
literal|"writelock"
argument_list|)
expr_stmt|;
name|DRM_OS_SPININIT
argument_list|(
name|bl
operator|->
name|read_lock
argument_list|,
literal|"readlock"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|waitlist_destroy
function|)
parameter_list|(
name|drm_waitlist_t
modifier|*
name|bl
parameter_list|)
block|{
if|if
condition|(
name|bl
operator|->
name|rp
operator|!=
name|bl
operator|->
name|wp
condition|)
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|bl
operator|->
name|bufs
condition|)
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|bl
operator|->
name|bufs
argument_list|,
operator|(
name|bl
operator|->
name|count
operator|+
literal|2
operator|)
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|bl
operator|->
name|bufs
argument_list|)
argument_list|,
name|DRM_MEM_BUFLISTS
argument_list|)
expr_stmt|;
name|bl
operator|->
name|count
operator|=
literal|0
expr_stmt|;
name|bl
operator|->
name|bufs
operator|=
name|NULL
expr_stmt|;
name|bl
operator|->
name|rp
operator|=
name|NULL
expr_stmt|;
name|bl
operator|->
name|wp
operator|=
name|NULL
expr_stmt|;
name|bl
operator|->
name|end
operator|=
name|NULL
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|waitlist_put
function|)
parameter_list|(
name|drm_waitlist_t
modifier|*
name|bl
parameter_list|,
name|drm_buf_t
modifier|*
name|buf
parameter_list|)
block|{
name|int
name|left
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|unsigned
name|long
name|flags
decl_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|int
name|s
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|left
operator|=
name|DRM_LEFTCOUNT
argument_list|(
name|bl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|left
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Overflow while adding buffer %d from pid %d\n"
argument_list|,
name|buf
operator|->
name|idx
argument_list|,
name|buf
operator|->
name|pid
argument_list|)
expr_stmt|;
name|DRM_OS_RETURN
argument_list|(
name|EINVAL
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
ifdef|#
directive|ifdef
name|__linux__
name|buf
operator|->
name|time_queued
operator|=
name|get_cycles
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|getnanotime
argument_list|(
operator|&
name|buf
operator|->
name|time_queued
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
endif|#
directive|endif
name|buf
operator|->
name|list
operator|=
name|DRM_LIST_WAIT
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|spin_lock_irqsave
argument_list|(
operator|&
name|bl
operator|->
name|write_lock
argument_list|,
name|flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|bl
operator|->
name|write_lock
argument_list|)
expr_stmt|;
name|s
operator|=
name|spldrm
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
operator|*
name|bl
operator|->
name|wp
operator|=
name|buf
expr_stmt|;
if|if
condition|(
operator|++
name|bl
operator|->
name|wp
operator|>=
name|bl
operator|->
name|end
condition|)
name|bl
operator|->
name|wp
operator|=
name|bl
operator|->
name|bufs
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|spin_unlock_irqrestore
argument_list|(
operator|&
name|bl
operator|->
name|write_lock
argument_list|,
name|flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|splx
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|bl
operator|->
name|write_lock
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
return|return
literal|0
return|;
block|}
end_function

begin_function
name|drm_buf_t
modifier|*
name|DRM
function|(
name|waitlist_get
function|)
parameter_list|(
name|drm_waitlist_t
modifier|*
name|bl
parameter_list|)
block|{
name|drm_buf_t
modifier|*
name|buf
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|unsigned
name|long
name|flags
decl_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|int
name|s
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
ifdef|#
directive|ifdef
name|__linux__
name|spin_lock_irqsave
argument_list|(
operator|&
name|bl
operator|->
name|read_lock
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|*
name|bl
operator|->
name|rp
expr_stmt|;
if|if
condition|(
name|bl
operator|->
name|rp
operator|==
name|bl
operator|->
name|wp
condition|)
block|{
name|spin_unlock_irqrestore
argument_list|(
operator|&
name|bl
operator|->
name|read_lock
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
operator|++
name|bl
operator|->
name|rp
operator|>=
name|bl
operator|->
name|end
condition|)
name|bl
operator|->
name|rp
operator|=
name|bl
operator|->
name|bufs
expr_stmt|;
name|spin_unlock_irqrestore
argument_list|(
operator|&
name|bl
operator|->
name|read_lock
argument_list|,
name|flags
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|bl
operator|->
name|read_lock
argument_list|)
expr_stmt|;
name|s
operator|=
name|spldrm
argument_list|()
expr_stmt|;
name|buf
operator|=
operator|*
name|bl
operator|->
name|rp
expr_stmt|;
if|if
condition|(
name|bl
operator|->
name|rp
operator|==
name|bl
operator|->
name|wp
condition|)
block|{
name|splx
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|bl
operator|->
name|read_lock
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
if|if
condition|(
operator|++
name|bl
operator|->
name|rp
operator|>=
name|bl
operator|->
name|end
condition|)
name|bl
operator|->
name|rp
operator|=
name|bl
operator|->
name|bufs
expr_stmt|;
name|splx
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|bl
operator|->
name|read_lock
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
return|return
name|buf
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HAVE_DMA_WAITLIST */
end_comment

begin_if
if|#
directive|if
name|__HAVE_DMA_FREELIST
end_if

begin_function
name|int
name|DRM
function|(
name|freelist_create
function|)
parameter_list|(
name|drm_freelist_t
modifier|*
name|bl
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|atomic_set
argument_list|(
operator|&
name|bl
operator|->
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bl
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|init_waitqueue_head
argument_list|(
operator|&
name|bl
operator|->
name|waiting
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|bl
operator|->
name|waiting
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|bl
operator|->
name|low_mark
operator|=
literal|0
expr_stmt|;
name|bl
operator|->
name|high_mark
operator|=
literal|0
expr_stmt|;
name|atomic_set
argument_list|(
operator|&
name|bl
operator|->
name|wfh
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DRM_OS_SPININIT
argument_list|(
name|bl
operator|->
name|lock
argument_list|,
literal|"freelistlock"
argument_list|)
expr_stmt|;
operator|++
name|bl
operator|->
name|initialized
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|freelist_destroy
function|)
parameter_list|(
name|drm_freelist_t
modifier|*
name|bl
parameter_list|)
block|{
name|atomic_set
argument_list|(
operator|&
name|bl
operator|->
name|count
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bl
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|freelist_put
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_freelist_t
modifier|*
name|bl
parameter_list|,
name|drm_buf_t
modifier|*
name|buf
parameter_list|)
block|{
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
if|if
condition|(
operator|!
name|dma
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"No DMA support\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|buf
operator|->
name|waiting
operator|||
name|buf
operator|->
name|pending
operator|||
name|buf
operator|->
name|list
operator|==
name|DRM_LIST_FREE
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Freed buffer %d: w%d, p%d, l%d\n"
argument_list|,
name|buf
operator|->
name|idx
argument_list|,
name|buf
operator|->
name|waiting
argument_list|,
name|buf
operator|->
name|pending
argument_list|,
name|buf
operator|->
name|list
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bl
condition|)
return|return
literal|1
return|;
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
ifdef|#
directive|ifdef
name|__linux__
name|buf
operator|->
name|time_freed
operator|=
name|get_cycles
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|getnanotime
argument_list|(
operator|&
name|buf
operator|->
name|time_queued
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM
function_decl|(
name|histogram_compute
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|buf
parameter_list|)
function_decl|;
endif|#
directive|endif
name|buf
operator|->
name|list
operator|=
name|DRM_LIST_FREE
expr_stmt|;
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|bl
operator|->
name|lock
argument_list|)
expr_stmt|;
name|buf
operator|->
name|next
operator|=
name|bl
operator|->
name|next
expr_stmt|;
name|bl
operator|->
name|next
operator|=
name|buf
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|bl
operator|->
name|lock
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|bl
operator|->
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|bl
operator|->
name|count
argument_list|)
operator|>
name|dma
operator|->
name|buf_count
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"%ld of %d buffers free after addition of %d\n"
argument_list|,
operator|(
name|unsigned
name|long
operator|)
name|atomic_read
argument_list|(
operator|&
name|bl
operator|->
name|count
argument_list|)
argument_list|,
name|dma
operator|->
name|buf_count
argument_list|,
name|buf
operator|->
name|idx
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
comment|/* Check for high water mark */
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|bl
operator|->
name|wfh
argument_list|)
operator|&&
name|atomic_read
argument_list|(
operator|&
name|bl
operator|->
name|count
argument_list|)
operator|>=
name|bl
operator|->
name|high_mark
condition|)
block|{
name|atomic_set
argument_list|(
operator|&
name|bl
operator|->
name|wfh
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DRM_OS_WAKEUP_INT
argument_list|(
operator|&
name|bl
operator|->
name|waiting
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|drm_buf_t
modifier|*
name|DRM
function|(
name|freelist_try
function|)
parameter_list|(
name|drm_freelist_t
modifier|*
name|bl
parameter_list|)
block|{
name|drm_buf_t
modifier|*
name|buf
decl_stmt|;
if|if
condition|(
operator|!
name|bl
condition|)
return|return
name|NULL
return|;
comment|/* Get buffer */
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|bl
operator|->
name|lock
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bl
operator|->
name|next
condition|)
block|{
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|bl
operator|->
name|lock
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|buf
operator|=
name|bl
operator|->
name|next
expr_stmt|;
name|bl
operator|->
name|next
operator|=
name|bl
operator|->
name|next
operator|->
name|next
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|bl
operator|->
name|lock
argument_list|)
expr_stmt|;
name|atomic_dec
argument_list|(
operator|&
name|bl
operator|->
name|count
argument_list|)
expr_stmt|;
name|buf
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
name|buf
operator|->
name|list
operator|=
name|DRM_LIST_NONE
expr_stmt|;
if|if
condition|(
name|buf
operator|->
name|waiting
operator|||
name|buf
operator|->
name|pending
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Free buffer %d: w%d, p%d, l%d\n"
argument_list|,
name|buf
operator|->
name|idx
argument_list|,
name|buf
operator|->
name|waiting
argument_list|,
name|buf
operator|->
name|pending
argument_list|,
name|buf
operator|->
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
end_function

begin_function
name|drm_buf_t
modifier|*
name|DRM
function|(
name|freelist_get
function|)
parameter_list|(
name|drm_freelist_t
modifier|*
name|bl
parameter_list|,
name|int
name|block
parameter_list|)
block|{
name|drm_buf_t
modifier|*
name|buf
init|=
name|NULL
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|DECLARE_WAITQUEUE
argument_list|(
name|entry
argument_list|,
name|current
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|int
name|error
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|if
condition|(
operator|!
name|bl
operator|||
operator|!
name|bl
operator|->
name|initialized
condition|)
return|return
name|NULL
return|;
comment|/* Check for low water mark */
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|bl
operator|->
name|count
argument_list|)
operator|<=
name|bl
operator|->
name|low_mark
condition|)
comment|/* Became low */
name|atomic_set
argument_list|(
operator|&
name|bl
operator|->
name|wfh
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|bl
operator|->
name|wfh
argument_list|)
condition|)
block|{
if|if
condition|(
name|block
condition|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|add_wait_queue
argument_list|(
operator|&
name|bl
operator|->
name|waiting
argument_list|,
operator|&
name|entry
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|current
operator|->
name|state
operator|=
name|TASK_INTERRUPTIBLE
expr_stmt|;
if|if
condition|(
operator|!
name|atomic_read
argument_list|(
operator|&
name|bl
operator|->
name|wfh
argument_list|)
operator|&&
operator|(
name|buf
operator|=
name|DRM
argument_list|(
name|freelist_try
argument_list|)
argument_list|(
name|bl
argument_list|)
operator|)
condition|)
break|break;
name|schedule
argument_list|()
expr_stmt|;
if|if
condition|(
name|signal_pending
argument_list|(
name|current
argument_list|)
condition|)
break|break;
block|}
name|current
operator|->
name|state
operator|=
name|TASK_RUNNING
expr_stmt|;
name|remove_wait_queue
argument_list|(
operator|&
name|bl
operator|->
name|waiting
argument_list|,
operator|&
name|entry
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|atomic_read
argument_list|(
operator|&
name|bl
operator|->
name|wfh
argument_list|)
operator|&&
operator|(
name|buf
operator|=
name|DRM
argument_list|(
name|freelist_try
argument_list|(
name|bl
argument_list|)
argument_list|)
operator|)
condition|)
break|break;
name|error
operator|=
name|tsleep
argument_list|(
operator|&
name|bl
operator|->
name|waiting
argument_list|,
name|PZERO
operator||
name|PCATCH
argument_list|,
literal|"drmfg"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
break|break;
block|}
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|}
return|return
name|buf
return|;
block|}
return|return
name|DRM
argument_list|(
name|freelist_try
argument_list|)
argument_list|(
name|bl
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HAVE_DMA_FREELIST */
end_comment

end_unit

