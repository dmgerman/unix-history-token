begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_dma.c -- DMA IOCTL and function support -*- linux-c -*-  * Created: Fri Mar 19 14:30:16 1999 by faith@valinux.com  *  * Copyright 1999, 2000 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_WAITQUEUE
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_WAITQUEUE
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_RECLAIM
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_RECLAIM
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_SHARED_IRQ
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_SHARED_IRQ
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__HAVE_DMA
end_if

begin_function
name|int
name|DRM
function|(
name|dma_setup
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|dev
operator|->
name|dma
operator|=
name|DRM
argument_list|(
name|calloc
argument_list|)
argument_list|(
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|dma
argument_list|)
argument_list|,
name|DRM_MEM_DRIVER
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|dma
operator|==
name|NULL
condition|)
return|return
name|DRM_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
name|DRM_SPININIT
argument_list|(
name|dev
operator|->
name|dma_lock
argument_list|,
literal|"drmdma"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|void
name|DRM
function|(
name|dma_takedown
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
if|if
condition|(
name|dma
operator|==
name|NULL
condition|)
return|return;
comment|/* Clear dma buffers */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|DRM_MAX_ORDER
condition|;
name|i
operator|++
control|)
block|{
if|#
directive|if
name|__HAVE_PCI_DMA
if|if
condition|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seg_count
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"order %d: buf_count = %d,"
literal|" seg_count = %d\n"
argument_list|,
name|i
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buf_count
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seg_count
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seg_count
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seglist
index|[
name|j
index|]
operator|!=
literal|0
condition|)
name|DRM
argument_list|(
name|pci_free
argument_list|)
argument_list|(
name|dev
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buf_size
argument_list|,
operator|(
name|void
operator|*
operator|)
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seglist
index|[
name|j
index|]
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seglist_bus
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seglist
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seg_count
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dma
operator|->
name|bufs
index|[
literal|0
index|]
operator|.
name|seglist
argument_list|)
argument_list|,
name|DRM_MEM_SEGS
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seglist_bus
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seg_count
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dma
operator|->
name|bufs
index|[
literal|0
index|]
operator|.
name|seglist_bus
argument_list|)
argument_list|,
name|DRM_MEM_SEGS
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __HAVE_PCI_DMA */
if|if
condition|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buf_count
condition|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buf_count
condition|;
name|j
operator|++
control|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buflist
index|[
name|j
index|]
operator|.
name|dev_private
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buflist
index|[
name|j
index|]
operator|.
name|dev_priv_size
argument_list|,
name|DRM_MEM_BUFS
argument_list|)
expr_stmt|;
block|}
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buflist
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buf_count
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dma
operator|->
name|bufs
index|[
literal|0
index|]
operator|.
name|buflist
argument_list|)
argument_list|,
name|DRM_MEM_BUFS
argument_list|)
expr_stmt|;
block|}
block|}
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|buflist
argument_list|,
name|dma
operator|->
name|buf_count
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dma
operator|->
name|buflist
argument_list|)
argument_list|,
name|DRM_MEM_BUFS
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|pagelist
argument_list|,
name|dma
operator|->
name|page_count
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dma
operator|->
name|pagelist
argument_list|)
argument_list|,
name|DRM_MEM_PAGES
argument_list|)
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dev
operator|->
name|dma
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|dma
argument_list|)
argument_list|,
name|DRM_MEM_DRIVER
argument_list|)
expr_stmt|;
name|dev
operator|->
name|dma
operator|=
name|NULL
expr_stmt|;
name|DRM_SPINUNINIT
argument_list|(
name|dev
operator|->
name|dma_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|DRM
function|(
name|free_buffer
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_buf_t
modifier|*
name|buf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|buf
condition|)
return|return;
name|buf
operator|->
name|pending
operator|=
literal|0
expr_stmt|;
name|buf
operator|->
name|filp
operator|=
name|NULL
expr_stmt|;
name|buf
operator|->
name|used
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
operator|!
name|__HAVE_DMA_RECLAIM
end_if

begin_function
name|void
name|DRM
function|(
name|reclaim_buffers
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|DRMFILE
name|filp
parameter_list|)
block|{
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
name|int
name|i
decl_stmt|;
if|if
condition|(
operator|!
name|dma
condition|)
return|return;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|dma
operator|->
name|buf_count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dma
operator|->
name|buflist
index|[
name|i
index|]
operator|->
name|filp
operator|==
name|filp
condition|)
block|{
switch|switch
condition|(
name|dma
operator|->
name|buflist
index|[
name|i
index|]
operator|->
name|list
condition|)
block|{
case|case
name|DRM_LIST_NONE
case|:
name|DRM
function_decl|(
name|free_buffer
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|dma
operator|->
name|buflist
index|[
name|i
index|]
parameter_list|)
function_decl|;
break|break;
case|case
name|DRM_LIST_WAIT
case|:
name|dma
operator|->
name|buflist
index|[
name|i
index|]
operator|->
name|list
operator|=
name|DRM_LIST_RECLAIM
expr_stmt|;
break|break;
default|default:
comment|/* Buffer already on hardware. */
break|break;
block|}
block|}
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|!
name|__HAVE_IRQ
end_if

begin_comment
comment|/* This stub DRM_IOCTL_CONTROL handler is for the drivers that used to require  * IRQs for DMA but no longer do.  It maintains compatibility with the X Servers  * that try to use the control ioctl by simply returning success.  */
end_comment

begin_function
name|int
name|DRM
function|(
name|control
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|drm_control_t
name|ctl
decl_stmt|;
name|DRM_COPY_FROM_USER_IOCTL
argument_list|(
name|ctl
argument_list|,
operator|(
name|drm_control_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctl
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ctl
operator|.
name|func
condition|)
block|{
case|case
name|DRM_INST_HANDLER
case|:
case|case
name|DRM_UNINST_HANDLER
case|:
return|return
literal|0
return|;
default|default:
return|return
name|DRM_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HAVE_DMA */
end_comment

end_unit

