begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_dma.c -- DMA IOCTL and function support -*- linux-c -*-  * Created: Fri Mar 19 14:30:16 1999 by faith@valinux.com  *  * Copyright 1999, 2000 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/resource.h>
end_include

begin_include
include|#
directive|include
file|<sys/rman.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FreeBSD__ */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_define
define|#
directive|define
name|__NO_VERSION__
end_define

begin_include
include|#
directive|include
file|<linux/interrupt.h>
end_include

begin_comment
comment|/* For task queue support */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __linux__ */
end_comment

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_WAITQUEUE
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_WAITQUEUE
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_DMA_RECLAIM
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_DMA_RECLAIM
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__HAVE_SHARED_IRQ
end_ifndef

begin_define
define|#
directive|define
name|__HAVE_SHARED_IRQ
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__HAVE_SHARED_IRQ
end_if

begin_define
define|#
directive|define
name|DRM_IRQ_TYPE
value|SA_SHIRQ
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DRM_IRQ_TYPE
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__HAVE_DMA
end_if

begin_function
name|int
name|DRM
function|(
name|dma_setup
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|dev
operator|->
name|dma
operator|=
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|dma
argument_list|)
argument_list|,
name|DRM_MEM_DRIVER
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
operator|->
name|dma
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
name|memset
argument_list|(
name|dev
operator|->
name|dma
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|dma
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|DRM_MAX_ORDER
condition|;
name|i
operator|++
control|)
name|memset
argument_list|(
operator|&
name|dev
operator|->
name|dma
operator|->
name|bufs
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|dev
operator|->
name|dma
operator|->
name|bufs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|void
name|DRM
function|(
name|dma_takedown
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
if|if
condition|(
operator|!
name|dma
condition|)
return|return;
comment|/* Clear dma buffers */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|DRM_MAX_ORDER
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seg_count
condition|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"order %d: buf_count = %d,"
literal|" seg_count = %d\n"
argument_list|,
name|i
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buf_count
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seg_count
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seg_count
condition|;
name|j
operator|++
control|)
block|{
name|DRM
argument_list|(
name|free_pages
argument_list|)
argument_list|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seglist
index|[
name|j
index|]
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|page_order
argument_list|,
name|DRM_MEM_DMA
argument_list|)
expr_stmt|;
block|}
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seglist
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|seg_count
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dma
operator|->
name|bufs
index|[
literal|0
index|]
operator|.
name|seglist
argument_list|)
argument_list|,
name|DRM_MEM_SEGS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buf_count
condition|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buf_count
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buflist
index|[
name|j
index|]
operator|.
name|dev_private
condition|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buflist
index|[
name|j
index|]
operator|.
name|dev_private
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buflist
index|[
name|j
index|]
operator|.
name|dev_priv_size
argument_list|,
name|DRM_MEM_BUFS
argument_list|)
expr_stmt|;
block|}
block|}
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buflist
argument_list|,
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|buf_count
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dma
operator|->
name|bufs
index|[
literal|0
index|]
operator|.
name|buflist
argument_list|)
argument_list|,
name|DRM_MEM_BUFS
argument_list|)
expr_stmt|;
if|#
directive|if
name|__HAVE_DMA_FREELIST
name|DRM
argument_list|(
name|freelist_destroy
argument_list|)
argument_list|(
operator|&
name|dma
operator|->
name|bufs
index|[
name|i
index|]
operator|.
name|freelist
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
if|if
condition|(
name|dma
operator|->
name|buflist
condition|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|buflist
argument_list|,
name|dma
operator|->
name|buf_count
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dma
operator|->
name|buflist
argument_list|)
argument_list|,
name|DRM_MEM_BUFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dma
operator|->
name|pagelist
condition|)
block|{
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dma
operator|->
name|pagelist
argument_list|,
name|dma
operator|->
name|page_count
operator|*
sizeof|sizeof
argument_list|(
operator|*
name|dma
operator|->
name|pagelist
argument_list|)
argument_list|,
name|DRM_MEM_PAGES
argument_list|)
expr_stmt|;
block|}
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|dev
operator|->
name|dma
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|dev
operator|->
name|dma
argument_list|)
argument_list|,
name|DRM_MEM_DRIVER
argument_list|)
expr_stmt|;
name|dev
operator|->
name|dma
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
end_if

begin_comment
comment|/* This is slow, but is useful for debugging. */
end_comment

begin_function
name|int
name|DRM
function|(
name|histogram_slot
function|)
parameter_list|(
name|unsigned
name|long
name|count
parameter_list|)
block|{
name|int
name|value
init|=
name|DRM_DMA_HISTOGRAM_INITIAL
decl_stmt|;
name|int
name|slot
decl_stmt|;
for|for
control|(
name|slot
operator|=
literal|0
init|;
name|slot
operator|<
name|DRM_DMA_HISTOGRAM_SLOTS
condition|;
operator|++
name|slot
operator|,
name|value
operator|=
name|DRM_DMA_HISTOGRAM_NEXT
argument_list|(
name|value
argument_list|)
control|)
block|{
if|if
condition|(
name|count
operator|<
name|value
condition|)
return|return
name|slot
return|;
block|}
return|return
name|DRM_DMA_HISTOGRAM_SLOTS
operator|-
literal|1
return|;
block|}
end_function

begin_function
name|void
name|DRM
function|(
name|histogram_compute
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_buf_t
modifier|*
name|buf
parameter_list|)
block|{
name|cycles_t
name|queued_to_dispatched
decl_stmt|;
name|cycles_t
name|dispatched_to_completed
decl_stmt|;
name|cycles_t
name|completed_to_freed
decl_stmt|;
name|int
name|q2d
decl_stmt|,
name|d2c
decl_stmt|,
name|c2f
decl_stmt|,
name|q2c
decl_stmt|,
name|q2f
decl_stmt|;
if|if
condition|(
name|buf
operator|->
name|time_queued
condition|)
block|{
name|queued_to_dispatched
operator|=
operator|(
name|buf
operator|->
name|time_dispatched
operator|-
name|buf
operator|->
name|time_queued
operator|)
expr_stmt|;
name|dispatched_to_completed
operator|=
operator|(
name|buf
operator|->
name|time_completed
operator|-
name|buf
operator|->
name|time_dispatched
operator|)
expr_stmt|;
name|completed_to_freed
operator|=
operator|(
name|buf
operator|->
name|time_freed
operator|-
name|buf
operator|->
name|time_completed
operator|)
expr_stmt|;
name|q2d
operator|=
name|DRM
argument_list|(
name|histogram_slot
argument_list|)
argument_list|(
name|queued_to_dispatched
argument_list|)
expr_stmt|;
name|d2c
operator|=
name|DRM
argument_list|(
name|histogram_slot
argument_list|)
argument_list|(
name|dispatched_to_completed
argument_list|)
expr_stmt|;
name|c2f
operator|=
name|DRM
argument_list|(
name|histogram_slot
argument_list|)
argument_list|(
name|completed_to_freed
argument_list|)
expr_stmt|;
name|q2c
operator|=
name|DRM
argument_list|(
name|histogram_slot
argument_list|)
argument_list|(
name|queued_to_dispatched
operator|+
name|dispatched_to_completed
argument_list|)
expr_stmt|;
name|q2f
operator|=
name|DRM
argument_list|(
name|histogram_slot
argument_list|)
argument_list|(
name|queued_to_dispatched
operator|+
name|dispatched_to_completed
operator|+
name|completed_to_freed
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|histo
operator|.
name|total
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|histo
operator|.
name|queued_to_dispatched
index|[
name|q2d
index|]
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|histo
operator|.
name|dispatched_to_completed
index|[
name|d2c
index|]
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|histo
operator|.
name|completed_to_freed
index|[
name|c2f
index|]
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|histo
operator|.
name|queued_to_completed
index|[
name|q2c
index|]
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|dev
operator|->
name|histo
operator|.
name|queued_to_freed
index|[
name|q2f
index|]
argument_list|)
expr_stmt|;
block|}
name|buf
operator|->
name|time_queued
operator|=
literal|0
expr_stmt|;
name|buf
operator|->
name|time_dispatched
operator|=
literal|0
expr_stmt|;
name|buf
operator|->
name|time_completed
operator|=
literal|0
expr_stmt|;
name|buf
operator|->
name|time_freed
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|void
name|DRM
function|(
name|free_buffer
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_buf_t
modifier|*
name|buf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|buf
condition|)
return|return;
name|buf
operator|->
name|waiting
operator|=
literal|0
expr_stmt|;
name|buf
operator|->
name|pending
operator|=
literal|0
expr_stmt|;
name|buf
operator|->
name|pid
operator|=
literal|0
expr_stmt|;
name|buf
operator|->
name|used
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|__HAVE_DMA_HISTOGRAM
name|buf
operator|->
name|time_completed
operator|=
name|get_cycles
argument_list|()
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__linux__
if|if
condition|(
name|__HAVE_DMA_WAITQUEUE
operator|&&
name|waitqueue_active
argument_list|(
operator|&
name|buf
operator|->
name|dma_wait
argument_list|)
condition|)
block|{
name|wake_up_interruptible
argument_list|(
operator|&
name|buf
operator|->
name|dma_wait
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
if|if
condition|(
name|buf
operator|->
name|dma_wait
condition|)
block|{
name|wakeup
argument_list|(
operator|&
name|buf
operator|->
name|dma_wait
argument_list|)
expr_stmt|;
name|buf
operator|->
name|dma_wait
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __FreeBSD__ */
if|#
directive|if
name|__HAVE_DMA_FREELIST
else|else
block|{
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
comment|/* If processes are waiting, the last one 				   to wake will put the buffer on the free 				   list.  If no processes are waiting, we 				   put the buffer on the freelist here. */
name|DRM
argument_list|(
name|freelist_put
argument_list|)
argument_list|(
name|dev
argument_list|,
operator|&
name|dma
operator|->
name|bufs
index|[
name|buf
operator|->
name|order
index|]
operator|.
name|freelist
argument_list|,
name|buf
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function

begin_if
if|#
directive|if
operator|!
name|__HAVE_DMA_RECLAIM
end_if

begin_function
name|void
name|DRM
function|(
name|reclaim_buffers
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|pid_t
name|pid
parameter_list|)
block|{
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
name|int
name|i
decl_stmt|;
if|if
condition|(
operator|!
name|dma
condition|)
return|return;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|dma
operator|->
name|buf_count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dma
operator|->
name|buflist
index|[
name|i
index|]
operator|->
name|pid
operator|==
name|pid
condition|)
block|{
switch|switch
condition|(
name|dma
operator|->
name|buflist
index|[
name|i
index|]
operator|->
name|list
condition|)
block|{
case|case
name|DRM_LIST_NONE
case|:
name|DRM
function_decl|(
name|free_buffer
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|dma
operator|->
name|buflist
index|[
name|i
index|]
parameter_list|)
function_decl|;
break|break;
case|case
name|DRM_LIST_WAIT
case|:
name|dma
operator|->
name|buflist
index|[
name|i
index|]
operator|->
name|list
operator|=
name|DRM_LIST_RECLAIM
expr_stmt|;
break|break;
default|default:
comment|/* Buffer already on hardware. */
break|break;
block|}
block|}
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* GH: This is a big hack for now...  */
end_comment

begin_if
if|#
directive|if
name|__HAVE_OLD_DMA
end_if

begin_function
name|void
name|DRM
function|(
name|clear_next_buffer
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
name|dma
operator|->
name|next_buffer
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|dma
operator|->
name|next_queue
operator|&&
operator|!
name|DRM_BUFCOUNT
argument_list|(
operator|&
name|dma
operator|->
name|next_queue
operator|->
name|waitlist
argument_list|)
condition|)
block|{
name|DRM_OS_WAKEUP_INT
argument_list|(
operator|&
name|dma
operator|->
name|next_queue
operator|->
name|flush_queue
argument_list|)
expr_stmt|;
block|}
name|dma
operator|->
name|next_queue
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|select_queue
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|void
function_decl|(
modifier|*
name|wrapper
function_decl|)
parameter_list|(
name|unsigned
name|long
parameter_list|)
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|int
name|candidate
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|j
init|=
name|jiffies
decl_stmt|;
if|if
condition|(
operator|!
name|dev
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"No device\n"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|dev
operator|->
name|queuelist
operator|||
operator|!
name|dev
operator|->
name|queuelist
index|[
name|DRM_KERNEL_CONTEXT
index|]
condition|)
block|{
comment|/* This only happens between the time the 				   interrupt is initialized and the time 				   the queues are initialized. */
return|return
operator|-
literal|1
return|;
block|}
comment|/* Doing "while locked" DMA? */
if|if
condition|(
name|DRM_WAITCOUNT
argument_list|(
name|dev
argument_list|,
name|DRM_KERNEL_CONTEXT
argument_list|)
condition|)
block|{
return|return
name|DRM_KERNEL_CONTEXT
return|;
block|}
comment|/* If there are buffers on the last_context 				   queue, and we have not been executing 				   this context very long, continue to 				   execute this context. */
if|if
condition|(
name|dev
operator|->
name|last_switch
operator|<=
name|j
operator|&&
name|dev
operator|->
name|last_switch
operator|+
name|DRM_TIME_SLICE
operator|>
name|j
operator|&&
name|DRM_WAITCOUNT
argument_list|(
name|dev
argument_list|,
name|dev
operator|->
name|last_context
argument_list|)
condition|)
block|{
return|return
name|dev
operator|->
name|last_context
return|;
block|}
comment|/* Otherwise, find a candidate */
for|for
control|(
name|i
operator|=
name|dev
operator|->
name|last_checked
operator|+
literal|1
init|;
name|i
operator|<
name|dev
operator|->
name|queue_count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|DRM_WAITCOUNT
argument_list|(
name|dev
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|candidate
operator|=
name|dev
operator|->
name|last_checked
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|candidate
operator|<
literal|0
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|dev
operator|->
name|queue_count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|DRM_WAITCOUNT
argument_list|(
name|dev
argument_list|,
name|i
argument_list|)
condition|)
block|{
name|candidate
operator|=
name|dev
operator|->
name|last_checked
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|wrapper
operator|&&
name|candidate
operator|>=
literal|0
operator|&&
name|candidate
operator|!=
name|dev
operator|->
name|last_context
operator|&&
name|dev
operator|->
name|last_switch
operator|<=
name|j
operator|&&
name|dev
operator|->
name|last_switch
operator|+
name|DRM_TIME_SLICE
operator|>
name|j
condition|)
block|{
ifdef|#
directive|ifdef
name|__linux__
if|if
condition|(
name|dev
operator|->
name|timer
operator|.
name|expires
operator|!=
name|dev
operator|->
name|last_switch
operator|+
name|DRM_TIME_SLICE
condition|)
block|{
name|del_timer
argument_list|(
operator|&
name|dev
operator|->
name|timer
argument_list|)
expr_stmt|;
name|dev
operator|->
name|timer
operator|.
name|function
operator|=
name|wrapper
expr_stmt|;
name|dev
operator|->
name|timer
operator|.
name|data
operator|=
operator|(
name|unsigned
name|long
operator|)
name|dev
expr_stmt|;
name|dev
operator|->
name|timer
operator|.
name|expires
operator|=
name|dev
operator|->
name|last_switch
operator|+
name|DRM_TIME_SLICE
expr_stmt|;
name|add_timer
argument_list|(
operator|&
name|dev
operator|->
name|timer
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|int
name|s
init|=
name|splclock
argument_list|()
decl_stmt|;
if|if
condition|(
name|dev
operator|->
name|timer
operator|.
name|c_time
operator|!=
name|dev
operator|->
name|last_switch
operator|+
name|DRM_TIME_SLICE
condition|)
block|{
name|callout_reset
argument_list|(
operator|&
name|dev
operator|->
name|timer
argument_list|,
name|dev
operator|->
name|last_switch
operator|+
name|DRM_TIME_SLICE
operator|-
name|j
argument_list|,
operator|(
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
operator|)
name|wrapper
argument_list|,
name|dev
argument_list|)
expr_stmt|;
block|}
name|splx
argument_list|(
name|s
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
return|return
operator|-
literal|1
return|;
block|}
return|return
name|candidate
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|dma_enqueue
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_dma_t
modifier|*
name|d
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|drm_queue_t
modifier|*
name|q
decl_stmt|;
name|drm_buf_t
modifier|*
name|buf
decl_stmt|;
name|int
name|idx
decl_stmt|;
name|int
name|while_locked
init|=
literal|0
decl_stmt|;
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|DECLARE_WAITQUEUE
argument_list|(
name|entry
argument_list|,
name|current
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|int
name|error
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|d
operator|->
name|send_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|flags
operator|&
name|_DRM_DMA_WHILE_LOCKED
condition|)
block|{
name|int
name|context
init|=
name|dev
operator|->
name|lock
operator|.
name|hw_lock
operator|->
name|lock
decl_stmt|;
if|if
condition|(
operator|!
name|_DRM_LOCK_IS_HELD
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"No lock held during \"while locked\""
literal|" request\n"
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
if|if
condition|(
name|d
operator|->
name|context
operator|!=
name|_DRM_LOCKING_CONTEXT
argument_list|(
name|context
argument_list|)
operator|&&
name|_DRM_LOCKING_CONTEXT
argument_list|(
name|context
argument_list|)
operator|!=
name|DRM_KERNEL_CONTEXT
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Lock held by %d while %d makes"
literal|" \"while locked\" request\n"
argument_list|,
name|_DRM_LOCKING_CONTEXT
argument_list|(
name|context
argument_list|)
argument_list|,
name|d
operator|->
name|context
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
name|q
operator|=
name|dev
operator|->
name|queuelist
index|[
name|DRM_KERNEL_CONTEXT
index|]
expr_stmt|;
name|while_locked
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|q
operator|=
name|dev
operator|->
name|queuelist
index|[
name|d
operator|->
name|context
index|]
expr_stmt|;
block|}
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|block_write
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|__linux__
name|add_wait_queue
argument_list|(
operator|&
name|q
operator|->
name|write_queue
argument_list|,
operator|&
name|entry
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|block_count
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|current
operator|->
name|state
operator|=
name|TASK_INTERRUPTIBLE
expr_stmt|;
if|if
condition|(
operator|!
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|block_write
argument_list|)
condition|)
break|break;
name|schedule
argument_list|()
expr_stmt|;
if|if
condition|(
name|signal_pending
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|remove_wait_queue
argument_list|(
operator|&
name|q
operator|->
name|write_queue
argument_list|,
operator|&
name|entry
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINTR
argument_list|)
return|;
block|}
block|}
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|block_count
argument_list|)
expr_stmt|;
name|current
operator|->
name|state
operator|=
name|TASK_RUNNING
expr_stmt|;
name|remove_wait_queue
argument_list|(
operator|&
name|q
operator|->
name|write_queue
argument_list|,
operator|&
name|entry
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|block_count
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|block_write
argument_list|)
condition|)
break|break;
name|error
operator|=
name|tsleep
argument_list|(
operator|&
name|q
operator|->
name|block_write
argument_list|,
name|PZERO
operator||
name|PCATCH
argument_list|,
literal|"dmawr"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
block|}
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|block_count
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|d
operator|->
name|send_count
condition|;
name|i
operator|++
control|)
block|{
name|idx
operator|=
name|d
operator|->
name|send_indices
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|idx
operator|>=
name|dma
operator|->
name|buf_count
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_ERROR
argument_list|(
literal|"Index %d (of %d max)\n"
argument_list|,
name|d
operator|->
name|send_indices
index|[
name|i
index|]
argument_list|,
name|dma
operator|->
name|buf_count
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
name|buf
operator|=
name|dma
operator|->
name|buflist
index|[
name|idx
index|]
expr_stmt|;
if|if
condition|(
name|buf
operator|->
name|pid
operator|!=
name|DRM_OS_CURRENTPID
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_ERROR
argument_list|(
literal|"Process %d using buffer owned by %d\n"
argument_list|,
name|DRM_OS_CURRENTPID
argument_list|,
name|buf
operator|->
name|pid
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
if|if
condition|(
name|buf
operator|->
name|list
operator|!=
name|DRM_LIST_NONE
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_ERROR
argument_list|(
literal|"Process %d using buffer %d on list %d\n"
argument_list|,
name|DRM_OS_CURRENTPID
argument_list|,
name|buf
operator|->
name|idx
argument_list|,
name|buf
operator|->
name|list
argument_list|)
expr_stmt|;
block|}
name|buf
operator|->
name|used
operator|=
name|d
operator|->
name|send_sizes
index|[
name|i
index|]
expr_stmt|;
name|buf
operator|->
name|while_locked
operator|=
name|while_locked
expr_stmt|;
name|buf
operator|->
name|context
operator|=
name|d
operator|->
name|context
expr_stmt|;
if|if
condition|(
operator|!
name|buf
operator|->
name|used
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Queueing 0 length buffer\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buf
operator|->
name|pending
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_ERROR
argument_list|(
literal|"Queueing pending buffer:"
literal|" buffer %d, offset %d\n"
argument_list|,
name|d
operator|->
name|send_indices
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
if|if
condition|(
name|buf
operator|->
name|waiting
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
name|DRM_ERROR
argument_list|(
literal|"Queueing waiting buffer:"
literal|" buffer %d, offset %d\n"
argument_list|,
name|d
operator|->
name|send_indices
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
name|buf
operator|->
name|waiting
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
operator|==
literal|1
operator|||
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|finalization
argument_list|)
condition|)
block|{
name|DRM
function_decl|(
name|free_buffer
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|buf
parameter_list|)
function_decl|;
block|}
else|else
block|{
name|DRM
argument_list|(
name|waitlist_put
argument_list|)
argument_list|(
operator|&
name|q
operator|->
name|waitlist
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|total_queued
argument_list|)
expr_stmt|;
block|}
block|}
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|DRM
function|(
name|dma_get_buffers_of_order
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_dma_t
modifier|*
name|d
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|drm_buf_t
modifier|*
name|buf
decl_stmt|;
name|drm_device_dma_t
modifier|*
name|dma
init|=
name|dev
operator|->
name|dma
decl_stmt|;
for|for
control|(
name|i
operator|=
name|d
operator|->
name|granted_count
init|;
name|i
operator|<
name|d
operator|->
name|request_count
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|=
name|DRM
argument_list|(
name|freelist_get
argument_list|)
argument_list|(
operator|&
name|dma
operator|->
name|bufs
index|[
name|order
index|]
operator|.
name|freelist
argument_list|,
name|d
operator|->
name|flags
operator|&
name|_DRM_DMA_WAIT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|buf
condition|)
break|break;
if|if
condition|(
name|buf
operator|->
name|pending
operator|||
name|buf
operator|->
name|waiting
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"Free buffer %d in use by %d (w%d, p%d)\n"
argument_list|,
name|buf
operator|->
name|idx
argument_list|,
name|buf
operator|->
name|pid
argument_list|,
name|buf
operator|->
name|waiting
argument_list|,
name|buf
operator|->
name|pending
argument_list|)
expr_stmt|;
block|}
name|buf
operator|->
name|pid
operator|=
name|DRM_OS_CURRENTPID
expr_stmt|;
if|if
condition|(
name|DRM_OS_COPYTOUSR
argument_list|(
operator|&
name|d
operator|->
name|request_indices
index|[
name|i
index|]
argument_list|,
operator|&
name|buf
operator|->
name|idx
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
operator|->
name|idx
argument_list|)
argument_list|)
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EFAULT
argument_list|)
return|;
if|if
condition|(
name|DRM_OS_COPYTOUSR
argument_list|(
operator|&
name|d
operator|->
name|request_sizes
index|[
name|i
index|]
argument_list|,
operator|&
name|buf
operator|->
name|total
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
operator|->
name|total
argument_list|)
argument_list|)
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EFAULT
argument_list|)
return|;
operator|++
name|d
operator|->
name|granted_count
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|dma_get_buffers
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_dma_t
modifier|*
name|dma
parameter_list|)
block|{
name|int
name|order
decl_stmt|;
name|int
name|retcode
init|=
literal|0
decl_stmt|;
name|int
name|tmp_order
decl_stmt|;
name|order
operator|=
name|DRM
argument_list|(
name|order
argument_list|)
argument_list|(
name|dma
operator|->
name|request_size
argument_list|)
expr_stmt|;
name|dma
operator|->
name|granted_count
operator|=
literal|0
expr_stmt|;
name|retcode
operator|=
name|DRM
argument_list|(
name|dma_get_buffers_of_order
argument_list|)
argument_list|(
name|dev
argument_list|,
name|dma
argument_list|,
name|order
argument_list|)
expr_stmt|;
if|if
condition|(
name|dma
operator|->
name|granted_count
operator|<
name|dma
operator|->
name|request_count
operator|&&
operator|(
name|dma
operator|->
name|flags
operator|&
name|_DRM_DMA_SMALLER_OK
operator|)
condition|)
block|{
for|for
control|(
name|tmp_order
operator|=
name|order
operator|-
literal|1
init|;
operator|!
name|retcode
operator|&&
name|dma
operator|->
name|granted_count
operator|<
name|dma
operator|->
name|request_count
operator|&&
name|tmp_order
operator|>=
name|DRM_MIN_ORDER
condition|;
operator|--
name|tmp_order
control|)
block|{
name|retcode
operator|=
name|DRM
argument_list|(
name|dma_get_buffers_of_order
argument_list|)
argument_list|(
name|dev
argument_list|,
name|dma
argument_list|,
name|tmp_order
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dma
operator|->
name|granted_count
operator|<
name|dma
operator|->
name|request_count
operator|&&
operator|(
name|dma
operator|->
name|flags
operator|&
name|_DRM_DMA_LARGER_OK
operator|)
condition|)
block|{
for|for
control|(
name|tmp_order
operator|=
name|order
operator|+
literal|1
init|;
operator|!
name|retcode
operator|&&
name|dma
operator|->
name|granted_count
operator|<
name|dma
operator|->
name|request_count
operator|&&
name|tmp_order
operator|<=
name|DRM_MAX_ORDER
condition|;
operator|++
name|tmp_order
control|)
block|{
name|retcode
operator|=
name|DRM
argument_list|(
name|dma_get_buffers_of_order
argument_list|)
argument_list|(
name|dev
argument_list|,
name|dma
argument_list|,
name|tmp_order
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HAVE_OLD_DMA */
end_comment

begin_if
if|#
directive|if
name|__HAVE_DMA_IRQ
end_if

begin_function
name|int
name|DRM
function|(
name|irq_install
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|irq
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__FreeBSD__
name|int
name|rid
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|int
name|retcode
decl_stmt|;
if|if
condition|(
operator|!
name|irq
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
name|DRM_OS_LOCK
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|irq
condition|)
block|{
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EBUSY
argument_list|)
return|;
block|}
name|dev
operator|->
name|irq
operator|=
name|irq
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%s: irq=%d\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|irq
argument_list|)
expr_stmt|;
name|dev
operator|->
name|context_flag
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|interrupt_flag
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|dma_flag
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|dma
operator|->
name|next_buffer
operator|=
name|NULL
expr_stmt|;
name|dev
operator|->
name|dma
operator|->
name|next_queue
operator|=
name|NULL
expr_stmt|;
name|dev
operator|->
name|dma
operator|->
name|this_buffer
operator|=
name|NULL
expr_stmt|;
if|#
directive|if
name|__HAVE_DMA_IRQ_BH
ifdef|#
directive|ifdef
name|__linux__
name|INIT_LIST_HEAD
argument_list|(
operator|&
name|dev
operator|->
name|tq
operator|.
name|list
argument_list|)
expr_stmt|;
name|dev
operator|->
name|tq
operator|.
name|sync
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|tq
operator|.
name|routine
operator|=
name|DRM
argument_list|(
name|dma_immediate_bh
argument_list|)
expr_stmt|;
name|dev
operator|->
name|tq
operator|.
name|data
operator|=
name|dev
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|TASK_INIT
argument_list|(
operator|&
name|dev
operator|->
name|task
argument_list|,
literal|0
argument_list|,
name|DRM
argument_list|(
name|dma_immediate_bh
argument_list|)
argument_list|,
name|dev
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
endif|#
directive|endif
comment|/* Before installing handler */
name|DRIVER_PREINSTALL
argument_list|()
expr_stmt|;
comment|/* Install handler */
ifdef|#
directive|ifdef
name|__linux__
name|retcode
operator|=
name|request_irq
argument_list|(
name|dev
operator|->
name|irq
argument_list|,
name|DRM
argument_list|(
name|dma_service
argument_list|)
argument_list|,
name|DRM_IRQ_TYPE
argument_list|,
name|dev
operator|->
name|devname
argument_list|,
name|dev
argument_list|)
expr_stmt|;
if|if
condition|(
name|retcode
operator|<
literal|0
condition|)
block|{
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|rid
operator|=
literal|0
expr_stmt|;
name|dev
operator|->
name|irqr
operator|=
name|bus_alloc_resource
argument_list|(
name|dev
operator|->
name|device
argument_list|,
name|SYS_RES_IRQ
argument_list|,
operator|&
name|rid
argument_list|,
literal|0
argument_list|,
operator|~
literal|0
argument_list|,
literal|1
argument_list|,
name|RF_SHAREABLE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
operator|->
name|irqr
condition|)
return|return
name|ENOENT
return|;
name|retcode
operator|=
name|bus_setup_intr
argument_list|(
name|dev
operator|->
name|device
argument_list|,
name|dev
operator|->
name|irqr
argument_list|,
name|INTR_TYPE_TTY
argument_list|,
name|DRM
argument_list|(
name|dma_service
argument_list|)
argument_list|,
name|dev
argument_list|,
operator|&
name|dev
operator|->
name|irqh
argument_list|)
expr_stmt|;
if|if
condition|(
name|retcode
condition|)
block|{
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_LOCK
expr_stmt|;
ifdef|#
directive|ifdef
name|__FreeBSD__
name|bus_release_resource
argument_list|(
name|dev
operator|->
name|device
argument_list|,
name|SYS_RES_IRQ
argument_list|,
literal|0
argument_list|,
name|dev
operator|->
name|irqr
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|dev
operator|->
name|irq
operator|=
literal|0
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
name|retcode
return|;
block|}
comment|/* After installing handler */
name|DRIVER_POSTINSTALL
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|int
name|DRM
function|(
name|irq_uninstall
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|)
block|{
name|int
name|irq
decl_stmt|;
name|DRM_OS_LOCK
expr_stmt|;
name|irq
operator|=
name|dev
operator|->
name|irq
expr_stmt|;
name|dev
operator|->
name|irq
operator|=
literal|0
expr_stmt|;
name|DRM_OS_UNLOCK
expr_stmt|;
if|if
condition|(
operator|!
name|irq
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
name|DRM_DEBUG
argument_list|(
literal|"%s: irq=%d\n"
argument_list|,
name|__FUNCTION__
argument_list|,
name|irq
argument_list|)
expr_stmt|;
name|DRIVER_UNINSTALL
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|__linux__
name|free_irq
argument_list|(
name|irq
argument_list|,
name|dev
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
name|bus_teardown_intr
argument_list|(
name|dev
operator|->
name|device
argument_list|,
name|dev
operator|->
name|irqr
argument_list|,
name|dev
operator|->
name|irqh
argument_list|)
expr_stmt|;
name|bus_release_resource
argument_list|(
name|dev
operator|->
name|device
argument_list|,
name|SYS_RES_IRQ
argument_list|,
literal|0
argument_list|,
name|dev
operator|->
name|irqr
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
return|return
literal|0
return|;
block|}
name|int
name|DRM
function|(
name|control
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|DRM_OS_DEVICE
expr_stmt|;
name|drm_control_t
name|ctl
decl_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|ctl
argument_list|,
operator|(
name|drm_control_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|ctl
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ctl
operator|.
name|func
condition|)
block|{
case|case
name|DRM_INST_HANDLER
case|:
return|return
name|DRM
argument_list|(
name|irq_install
argument_list|)
argument_list|(
name|dev
argument_list|,
name|ctl
operator|.
name|irq
argument_list|)
return|;
case|case
name|DRM_UNINST_HANDLER
case|:
return|return
name|DRM
argument_list|(
name|irq_uninstall
argument_list|)
argument_list|(
name|dev
argument_list|)
return|;
default|default:
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HAVE_DMA_IRQ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HAVE_DMA */
end_comment

end_unit

