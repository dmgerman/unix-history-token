begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* lock.c -- IOCTLs for locking -*- linux-c -*-  * Created: Tue Feb  2 08:37:54 1999 by faith@valinux.com  *  * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_function
name|int
name|DRM
function|(
name|block
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|unblock
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|lock_take
function|)
parameter_list|(
specifier|__volatile__
name|unsigned
name|int
modifier|*
name|lock
parameter_list|,
name|unsigned
name|int
name|context
parameter_list|)
block|{
name|unsigned
name|int
name|old
decl_stmt|,
name|new
decl_stmt|;
do|do
block|{
name|old
operator|=
operator|*
name|lock
expr_stmt|;
if|if
condition|(
name|old
operator|&
name|_DRM_LOCK_HELD
condition|)
name|new
operator|=
name|old
operator||
name|_DRM_LOCK_CONT
expr_stmt|;
else|else
name|new
operator|=
name|context
operator||
name|_DRM_LOCK_HELD
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|atomic_cmpset_int
argument_list|(
name|lock
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
condition|)
do|;
if|if
condition|(
name|_DRM_LOCKING_CONTEXT
argument_list|(
name|old
argument_list|)
operator|==
name|context
condition|)
block|{
if|if
condition|(
name|old
operator|&
name|_DRM_LOCK_HELD
condition|)
block|{
if|if
condition|(
name|context
operator|!=
name|DRM_KERNEL_CONTEXT
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"%d holds heavyweight lock\n"
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
if|if
condition|(
name|new
operator|==
operator|(
name|context
operator||
name|_DRM_LOCK_HELD
operator|)
condition|)
block|{
comment|/* Have lock */
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* This takes a lock forcibly and hands it to context.	Should ONLY be used    inside *_unlock to give lock to kernel before calling *_dma_schedule. */
end_comment

begin_function
name|int
name|DRM
function|(
name|lock_transfer
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
specifier|__volatile__
name|unsigned
name|int
modifier|*
name|lock
parameter_list|,
name|unsigned
name|int
name|context
parameter_list|)
block|{
name|unsigned
name|int
name|old
decl_stmt|,
name|new
decl_stmt|;
name|dev
operator|->
name|lock
operator|.
name|pid
operator|=
literal|0
expr_stmt|;
do|do
block|{
name|old
operator|=
operator|*
name|lock
expr_stmt|;
name|new
operator|=
name|context
operator||
name|_DRM_LOCK_HELD
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|atomic_cmpset_int
argument_list|(
name|lock
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
condition|)
do|;
return|return
literal|1
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|lock_free
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
specifier|__volatile__
name|unsigned
name|int
modifier|*
name|lock
parameter_list|,
name|unsigned
name|int
name|context
parameter_list|)
block|{
name|unsigned
name|int
name|old
decl_stmt|,
name|new
decl_stmt|;
name|pid_t
name|pid
init|=
name|dev
operator|->
name|lock
operator|.
name|pid
decl_stmt|;
name|dev
operator|->
name|lock
operator|.
name|pid
operator|=
literal|0
expr_stmt|;
do|do
block|{
name|old
operator|=
operator|*
name|lock
expr_stmt|;
name|new
operator|=
literal|0
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|atomic_cmpset_int
argument_list|(
name|lock
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
condition|)
do|;
if|if
condition|(
name|_DRM_LOCK_IS_HELD
argument_list|(
name|old
argument_list|)
operator|&&
name|_DRM_LOCKING_CONTEXT
argument_list|(
name|old
argument_list|)
operator|!=
name|context
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"%d freed heavyweight lock held by %d (pid %d)\n"
argument_list|,
name|context
argument_list|,
name|_DRM_LOCKING_CONTEXT
argument_list|(
name|old
argument_list|)
argument_list|,
name|pid
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|DRM_WAKEUP_INT
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|&
name|dev
operator|->
name|lock
operator|.
name|lock_queue
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|DRM
function|(
name|flush_queue
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|context
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|drm_queue_t
modifier|*
name|q
init|=
name|dev
operator|->
name|queuelist
index|[
name|context
index|]
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
operator|>
literal|1
condition|)
block|{
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|block_write
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|block_count
argument_list|)
expr_stmt|;
name|error
operator|=
name|tsleep
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|&
name|q
operator|->
name|flush_queue
argument_list|,
name|PZERO
operator||
name|PCATCH
argument_list|,
literal|"drmfq"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
return|return
name|error
return|;
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|block_count
argument_list|)
expr_stmt|;
block|}
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
comment|/* NOTE: block_write is still incremented! 				   Use drm_flush_unlock_queue to decrement. */
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|DRM
function|(
name|flush_unblock_queue
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|context
parameter_list|)
block|{
name|drm_queue_t
modifier|*
name|q
init|=
name|dev
operator|->
name|queuelist
index|[
name|context
index|]
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|atomic_inc
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|atomic_read
argument_list|(
operator|&
name|q
operator|->
name|block_write
argument_list|)
condition|)
block|{
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|block_write
argument_list|)
expr_stmt|;
name|DRM_WAKEUP_INT
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|&
name|q
operator|->
name|write_queue
argument_list|)
expr_stmt|;
block|}
block|}
name|atomic_dec
argument_list|(
operator|&
name|q
operator|->
name|use_count
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|flush_block_and_flush
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|context
parameter_list|,
name|drm_lock_flags_t
name|flags
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|_DRM_LOCK_FLUSH
condition|)
block|{
name|ret
operator|=
name|DRM
argument_list|(
name|flush_queue
argument_list|)
argument_list|(
name|dev
argument_list|,
name|DRM_KERNEL_CONTEXT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
name|ret
operator|=
name|DRM
argument_list|(
name|flush_queue
argument_list|)
argument_list|(
name|dev
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|_DRM_LOCK_FLUSH_ALL
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
operator|!
name|ret
operator|&&
name|i
operator|<
name|dev
operator|->
name|queue_count
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|=
name|DRM
argument_list|(
name|flush_queue
argument_list|)
argument_list|(
name|dev
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|flush_unblock
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|int
name|context
parameter_list|,
name|drm_lock_flags_t
name|flags
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|_DRM_LOCK_FLUSH
condition|)
block|{
name|ret
operator|=
name|DRM
argument_list|(
name|flush_unblock_queue
argument_list|)
argument_list|(
name|dev
argument_list|,
name|DRM_KERNEL_CONTEXT
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
name|ret
operator|=
name|DRM
argument_list|(
name|flush_unblock_queue
argument_list|)
argument_list|(
name|dev
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|_DRM_LOCK_FLUSH_ALL
condition|)
block|{
for|for
control|(
name|i
operator|=
literal|0
init|;
operator|!
name|ret
operator|&&
name|i
operator|<
name|dev
operator|->
name|queue_count
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|=
name|DRM
argument_list|(
name|flush_unblock_queue
argument_list|)
argument_list|(
name|dev
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|finish
function|)
parameter_list|(
name|DRM_IOCTL_ARGS
parameter_list|)
block|{
name|DRM_DEVICE
expr_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|drm_lock_t
name|lock
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|DRM_COPY_FROM_USER_IOCTL
argument_list|(
name|lock
argument_list|,
operator|(
name|drm_lock_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|lock
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|DRM
argument_list|(
name|flush_block_and_flush
argument_list|)
argument_list|(
name|dev
argument_list|,
name|lock
operator|.
name|context
argument_list|,
name|lock
operator|.
name|flags
argument_list|)
expr_stmt|;
name|DRM
function_decl|(
name|flush_unblock
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|lock
operator|.
name|context
parameter_list|,
name|lock
operator|.
name|flags
parameter_list|)
function_decl|;
return|return
name|ret
return|;
block|}
end_function

begin_comment
comment|/* If we get here, it means that the process has called DRM_IOCTL_LOCK    without calling DRM_IOCTL_UNLOCK.     If the lock is not held, then let the signal proceed as usual.     If the lock is held, then set the contended flag and keep the signal    blocked.      Return 1 if the signal should be delivered normally.    Return 0 if the signal should be blocked.  */
end_comment

begin_function
name|int
name|DRM
function|(
name|notifier
function|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
block|{
name|drm_sigdata_t
modifier|*
name|s
init|=
operator|(
name|drm_sigdata_t
operator|*
operator|)
name|priv
decl_stmt|;
name|unsigned
name|int
name|old
decl_stmt|,
name|new
decl_stmt|;
comment|/* Allow signal delivery if lock isn't held */
if|if
condition|(
operator|!
name|_DRM_LOCK_IS_HELD
argument_list|(
name|s
operator|->
name|lock
operator|->
name|lock
argument_list|)
operator|||
name|_DRM_LOCKING_CONTEXT
argument_list|(
name|s
operator|->
name|lock
operator|->
name|lock
argument_list|)
operator|!=
name|s
operator|->
name|context
condition|)
return|return
literal|1
return|;
comment|/* Otherwise, set flag to force call to                                    drmUnlock */
do|do
block|{
name|old
operator|=
name|s
operator|->
name|lock
operator|->
name|lock
expr_stmt|;
name|new
operator|=
name|old
operator||
name|_DRM_LOCK_CONT
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|atomic_cmpset_int
argument_list|(
operator|&
name|s
operator|->
name|lock
operator|->
name|lock
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
condition|)
do|;
return|return
literal|0
return|;
block|}
end_function

end_unit

