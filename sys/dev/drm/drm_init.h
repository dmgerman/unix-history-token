begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_init.h -- Setup/Cleanup for DRM -*- linux-c -*-  * Created: Mon Jan  4 08:58:31 1999 by faith@valinux.com  *  * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|__NO_VERSION__
end_define

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_if
if|#
directive|if
literal|1
operator|&&
name|DRM_DEBUG_CODE
end_if

begin_function_decl
name|int
name|DRM
parameter_list|(
name|flags
parameter_list|)
init|=
name|DRM_FLAG_DEBUG
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_function_decl
name|int
name|DRM
parameter_list|(
name|flags
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* drm_parse_option parses a single option.  See description for  * drm_parse_options for details.  */
end_comment

begin_function
specifier|static
name|void
name|DRM
function|(
name|parse_option
function|)
parameter_list|(
name|char
modifier|*
name|s
parameter_list|)
block|{
name|char
modifier|*
name|c
decl_stmt|,
modifier|*
name|r
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"\"%s\"\n"
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|||
operator|!
operator|*
name|s
condition|)
return|return;
for|for
control|(
name|c
operator|=
name|s
init|;
operator|*
name|c
operator|&&
operator|*
name|c
operator|!=
literal|':'
condition|;
name|c
operator|++
control|)
empty_stmt|;
comment|/* find : or \0 */
if|if
condition|(
operator|*
name|c
condition|)
name|r
operator|=
name|c
operator|+
literal|1
expr_stmt|;
else|else
name|r
operator|=
name|NULL
expr_stmt|;
comment|/* remember remainder */
operator|*
name|c
operator|=
literal|'\0'
expr_stmt|;
comment|/* terminate */
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|s
argument_list|,
literal|"noctx"
argument_list|)
condition|)
block|{
name|DRM
argument_list|(
name|flags
argument_list|)
operator||=
name|DRM_FLAG_NOCTX
expr_stmt|;
name|DRM_INFO
argument_list|(
literal|"Server-mediated context switching OFF\n"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|s
argument_list|,
literal|"debug"
argument_list|)
condition|)
block|{
name|DRM
argument_list|(
name|flags
argument_list|)
operator||=
name|DRM_FLAG_DEBUG
expr_stmt|;
name|DRM_INFO
argument_list|(
literal|"Debug messages ON\n"
argument_list|)
expr_stmt|;
return|return;
block|}
name|DRM_ERROR
argument_list|(
literal|"\"%s\" is not a valid option\n"
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_comment
comment|/* drm_parse_options parse the insmod "drm_opts=" options, or the command-line  * options passed to the kernel via LILO.  The grammar of the format is as  * follows:  *  * drm		::= 'drm_opts=' option_list  * option_list	::= option [ ';' option_list ]  * option	::= 'device:' major  *		|   'debug'  *		|   'noctx'  * major	::= INTEGER  *  * Note that 's' contains option_list without the 'drm_opts=' part.  *  * device=major,minor specifies the device number used for /dev/drm  *	  if major == 0 then the misc device is used  *	  if major == 0 and minor == 0 then dynamic misc allocation is used  * debug=on specifies that debugging messages will be printk'd  * debug=trace specifies that each function call will be logged via printk  * debug=off turns off all debugging options  *  */
end_comment

begin_function
name|void
name|DRM
function|(
name|parse_options
function|)
parameter_list|(
name|char
modifier|*
name|s
parameter_list|)
block|{
name|char
modifier|*
name|h
decl_stmt|,
modifier|*
name|t
decl_stmt|,
modifier|*
name|n
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"\"%s\"\n"
argument_list|,
name|s
condition|?
else|:
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|s
operator|||
operator|!
operator|*
name|s
condition|)
return|return;
for|for
control|(
name|h
operator|=
name|t
operator|=
name|n
operator|=
name|s
init|;
name|h
operator|&&
operator|*
name|h
condition|;
name|h
operator|=
name|n
control|)
block|{
for|for
control|(
init|;
operator|*
name|t
operator|&&
operator|*
name|t
operator|!=
literal|';'
condition|;
name|t
operator|++
control|)
empty_stmt|;
comment|/* find ; or \0 */
if|if
condition|(
operator|*
name|t
condition|)
name|n
operator|=
name|t
operator|+
literal|1
expr_stmt|;
else|else
name|n
operator|=
name|NULL
expr_stmt|;
comment|/* remember next */
operator|*
name|t
operator|=
literal|'\0'
expr_stmt|;
comment|/* terminate */
name|DRM
function_decl|(
name|parse_option
function_decl|)
parameter_list|(
name|h
parameter_list|)
function_decl|;
comment|/* parse */
block|}
block|}
end_function

begin_comment
comment|/* drm_cpu_valid returns non-zero if the DRI will run on this CPU, and 0  * otherwise.  */
end_comment

begin_function
name|int
name|DRM
function|(
name|cpu_valid
function|)
parameter_list|(
name|void
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__linux__
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
if|if
condition|(
name|boot_cpu_data
operator|.
name|x86
operator|==
literal|3
condition|)
return|return
literal|0
return|;
comment|/* No cmpxchg on a 386 */
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__sparc__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__sparc_v9__
argument_list|)
return|return
literal|0
return|;
comment|/* No cmpxchg before v9 sparc. */
endif|#
directive|endif
endif|#
directive|endif
comment|/* __linux__ */
return|return
literal|1
return|;
block|}
end_function

end_unit

