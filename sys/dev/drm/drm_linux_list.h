begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_linux_list.h -- linux list functions for the BSDs.  * Created: Mon Apr 7 14:30:16 1999 by anholt@FreeBSD.org */
end_comment

begin_comment
comment|/*-  * Copyright 2003 Eric Anholt  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Eric Anholt<anholt@FreeBSD.org>  *  * $FreeBSD$  */
end_comment

begin_struct
struct|struct
name|list_head
block|{
name|struct
name|list_head
modifier|*
name|next
decl_stmt|,
modifier|*
name|prev
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Cheat, assume the list_head is at the start of the struct */
end_comment

begin_define
define|#
directive|define
name|list_entry
parameter_list|(
name|entry
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
value|(type *)(entry)
end_define

begin_function
specifier|static
name|__inline__
name|void
name|INIT_LIST_HEAD
parameter_list|(
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
operator|(
name|head
operator|)
operator|->
name|next
operator|=
name|head
expr_stmt|;
operator|(
name|head
operator|)
operator|->
name|prev
operator|=
name|head
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|int
name|list_empty
parameter_list|(
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
return|return
operator|(
name|head
operator|)
operator|->
name|next
operator|==
name|head
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|list_add_tail
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
operator|(
name|entry
operator|)
operator|->
name|prev
operator|=
operator|(
name|head
operator|)
operator|->
name|prev
expr_stmt|;
operator|(
name|entry
operator|)
operator|->
name|next
operator|=
name|head
expr_stmt|;
operator|(
name|head
operator|)
operator|->
name|prev
operator|->
name|next
operator|=
name|entry
expr_stmt|;
operator|(
name|head
operator|)
operator|->
name|prev
operator|=
name|entry
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|list_del
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|)
block|{
operator|(
name|entry
operator|)
operator|->
name|next
operator|->
name|prev
operator|=
operator|(
name|entry
operator|)
operator|->
name|prev
expr_stmt|;
operator|(
name|entry
operator|)
operator|->
name|prev
operator|->
name|next
operator|=
operator|(
name|entry
operator|)
operator|->
name|next
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|list_for_each
parameter_list|(
name|entry
parameter_list|,
name|head
parameter_list|)
define|\
value|for (entry = (head)->next; entry != head; entry = (entry)->next)
end_define

begin_define
define|#
directive|define
name|list_for_each_safe
parameter_list|(
name|entry
parameter_list|,
name|temp
parameter_list|,
name|head
parameter_list|)
define|\
value|for (entry = (head)->next, temp = (entry)->next;		\ 	temp != head; 						\ 	entry = temp, temp = temp->next)
end_define

end_unit

