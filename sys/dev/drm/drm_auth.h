begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* drm_auth.h -- IOCTLs for authentication -*- linux-c -*-  * Created: Tue Feb  2 08:37:54 1999 by faith@valinux.com  *  * Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * VA LINUX SYSTEMS AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  * OTHER DEALINGS IN THE SOFTWARE.  *  * Authors:  *    Rickard E. (Rik) Faith<faith@valinux.com>  *    Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|__NO_VERSION__
end_define

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_function
specifier|static
name|int
name|DRM
function|(
name|hash_magic
function|)
parameter_list|(
name|drm_magic_t
name|magic
parameter_list|)
block|{
return|return
name|magic
operator|&
operator|(
name|DRM_HASH_SIZE
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|drm_file_t
modifier|*
name|DRM
function|(
name|find_file
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_magic_t
name|magic
parameter_list|)
block|{
name|drm_file_t
modifier|*
name|retval
init|=
name|NULL
decl_stmt|;
name|drm_magic_entry_t
modifier|*
name|pt
decl_stmt|;
name|int
name|hash
init|=
name|DRM
argument_list|(
name|hash_magic
argument_list|)
argument_list|(
name|magic
argument_list|)
decl_stmt|;
name|DRM_OS_LOCK
expr_stmt|;
for|for
control|(
name|pt
operator|=
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|head
init|;
name|pt
condition|;
name|pt
operator|=
name|pt
operator|->
name|next
control|)
block|{
if|if
condition|(
name|pt
operator|->
name|magic
operator|==
name|magic
condition|)
block|{
name|retval
operator|=
name|pt
operator|->
name|priv
expr_stmt|;
break|break;
block|}
block|}
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
name|retval
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|add_magic
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_file_t
modifier|*
name|priv
parameter_list|,
name|drm_magic_t
name|magic
parameter_list|)
block|{
name|int
name|hash
decl_stmt|;
name|drm_magic_entry_t
modifier|*
name|entry
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|magic
argument_list|)
expr_stmt|;
name|hash
operator|=
name|DRM
argument_list|(
name|hash_magic
argument_list|)
argument_list|(
name|magic
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|(
name|drm_magic_entry_t
operator|*
operator|)
name|DRM
argument_list|(
name|alloc
argument_list|)
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|entry
argument_list|)
argument_list|,
name|DRM_MEM_MAGIC
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entry
condition|)
return|return
name|DRM_OS_ERR
argument_list|(
name|ENOMEM
argument_list|)
return|;
name|entry
operator|->
name|magic
operator|=
name|magic
expr_stmt|;
name|entry
operator|->
name|priv
operator|=
name|priv
expr_stmt|;
name|entry
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
name|DRM_OS_LOCK
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|tail
condition|)
block|{
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|tail
operator|->
name|next
operator|=
name|entry
expr_stmt|;
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|tail
operator|=
name|entry
expr_stmt|;
block|}
else|else
block|{
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|head
operator|=
name|entry
expr_stmt|;
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|tail
operator|=
name|entry
expr_stmt|;
block|}
name|DRM_OS_UNLOCK
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|remove_magic
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|drm_magic_t
name|magic
parameter_list|)
block|{
name|drm_magic_entry_t
modifier|*
name|prev
init|=
name|NULL
decl_stmt|;
name|drm_magic_entry_t
modifier|*
name|pt
decl_stmt|;
name|int
name|hash
decl_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%d\n"
argument_list|,
name|magic
argument_list|)
expr_stmt|;
name|hash
operator|=
name|DRM
argument_list|(
name|hash_magic
argument_list|)
argument_list|(
name|magic
argument_list|)
expr_stmt|;
name|DRM_OS_LOCK
expr_stmt|;
for|for
control|(
name|pt
operator|=
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|head
init|;
name|pt
condition|;
name|prev
operator|=
name|pt
operator|,
name|pt
operator|=
name|pt
operator|->
name|next
control|)
block|{
if|if
condition|(
name|pt
operator|->
name|magic
operator|==
name|magic
condition|)
block|{
if|if
condition|(
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|head
operator|==
name|pt
condition|)
block|{
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|head
operator|=
name|pt
operator|->
name|next
expr_stmt|;
block|}
if|if
condition|(
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|tail
operator|==
name|pt
condition|)
block|{
name|dev
operator|->
name|magiclist
index|[
name|hash
index|]
operator|.
name|tail
operator|=
name|prev
expr_stmt|;
block|}
if|if
condition|(
name|prev
condition|)
block|{
name|prev
operator|->
name|next
operator|=
name|pt
operator|->
name|next
expr_stmt|;
block|}
name|DRM_OS_UNLOCK
expr_stmt|;
ifdef|#
directive|ifdef
name|__FreeBSD__
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|pt
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|pt
argument_list|)
argument_list|,
name|DRM_MEM_MAGIC
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
return|return
literal|0
return|;
block|}
block|}
name|DRM_OS_UNLOCK
expr_stmt|;
name|DRM
argument_list|(
name|free
argument_list|)
argument_list|(
name|pt
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|pt
argument_list|)
argument_list|,
name|DRM_MEM_MAGIC
argument_list|)
expr_stmt|;
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|getmagic
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
specifier|static
name|drm_magic_t
name|sequence
init|=
literal|0
decl_stmt|;
name|drm_auth_t
name|auth
decl_stmt|;
ifdef|#
directive|ifdef
name|__linux__
specifier|static
name|spinlock_t
name|lock
init|=
name|SPIN_LOCK_UNLOCKED
decl_stmt|;
endif|#
directive|endif
comment|/* __linux__ */
ifdef|#
directive|ifdef
name|__FreeBSD__
specifier|static
name|DRM_OS_SPINTYPE
name|lock
decl_stmt|;
specifier|static
name|int
name|first
init|=
literal|1
decl_stmt|;
endif|#
directive|endif
comment|/* __FreeBSD__ */
name|DRM_OS_DEVICE
expr_stmt|;
name|DRM_OS_PRIV
expr_stmt|;
ifdef|#
directive|ifdef
name|__FreeBSD__
if|if
condition|(
name|first
condition|)
block|{
name|DRM_OS_SPININIT
argument_list|(
name|lock
argument_list|,
literal|"drm getmagic"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __FreeBSD__ */
comment|/* Find unique magic */
if|if
condition|(
name|priv
operator|->
name|magic
condition|)
block|{
name|auth
operator|.
name|magic
operator|=
name|priv
operator|->
name|magic
expr_stmt|;
block|}
else|else
block|{
do|do
block|{
name|DRM_OS_SPINLOCK
argument_list|(
operator|&
name|lock
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sequence
condition|)
operator|++
name|sequence
expr_stmt|;
comment|/* reserve 0 */
name|auth
operator|.
name|magic
operator|=
name|sequence
operator|++
expr_stmt|;
name|DRM_OS_SPINUNLOCK
argument_list|(
operator|&
name|lock
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|DRM
argument_list|(
name|find_file
argument_list|)
argument_list|(
name|dev
argument_list|,
name|auth
operator|.
name|magic
argument_list|)
condition|)
do|;
name|priv
operator|->
name|magic
operator|=
name|auth
operator|.
name|magic
expr_stmt|;
name|DRM
function_decl|(
name|add_magic
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|priv
parameter_list|,
name|auth
operator|.
name|magic
parameter_list|)
function_decl|;
block|}
name|DRM_DEBUG
argument_list|(
literal|"%u\n"
argument_list|,
name|auth
operator|.
name|magic
argument_list|)
expr_stmt|;
name|DRM_OS_KRNTOUSR
argument_list|(
operator|(
name|drm_auth_t
operator|*
operator|)
name|data
argument_list|,
name|auth
argument_list|,
sizeof|sizeof
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|authmagic
function|)
parameter_list|(
name|DRM_OS_IOCTL
parameter_list|)
block|{
name|drm_auth_t
name|auth
decl_stmt|;
name|drm_file_t
modifier|*
name|file
decl_stmt|;
name|DRM_OS_DEVICE
expr_stmt|;
name|DRM_OS_KRNFROMUSR
argument_list|(
name|auth
argument_list|,
operator|(
name|drm_auth_t
operator|*
operator|)
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|auth
argument_list|)
argument_list|)
expr_stmt|;
name|DRM_DEBUG
argument_list|(
literal|"%u\n"
argument_list|,
name|auth
operator|.
name|magic
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|file
operator|=
name|DRM
argument_list|(
name|find_file
argument_list|)
argument_list|(
name|dev
argument_list|,
name|auth
operator|.
name|magic
argument_list|)
operator|)
condition|)
block|{
name|file
operator|->
name|authenticated
operator|=
literal|1
expr_stmt|;
name|DRM
function_decl|(
name|remove_magic
function_decl|)
parameter_list|(
name|dev
parameter_list|,
name|auth
operator|.
name|magic
parameter_list|)
function_decl|;
return|return
literal|0
return|;
block|}
return|return
name|DRM_OS_ERR
argument_list|(
name|EINVAL
argument_list|)
return|;
block|}
end_function

end_unit

