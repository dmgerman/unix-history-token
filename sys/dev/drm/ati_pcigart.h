begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ati_pcigart.h -- ATI PCI GART support -*- linux-c -*-  * Created: Wed Dec 13 21:52:19 2000 by gareth@valinux.com  *  * Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.  * All Rights Reserved.  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sublicense,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the next  * paragraph) shall be included in all copies or substantial portions of the  * Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL  * PRECISION INSIGHT AND/OR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR  * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  * DEALINGS IN THE SOFTWARE.  *  * Authors:  *   Gareth Hughes<gareth@valinux.com>  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|"dev/drm/drmP.h"
end_include

begin_if
if|#
directive|if
name|PAGE_SIZE
operator|==
literal|8192
end_if

begin_define
define|#
directive|define
name|ATI_PCIGART_TABLE_ORDER
value|2
end_define

begin_define
define|#
directive|define
name|ATI_PCIGART_TABLE_PAGES
value|(1<< 2)
end_define

begin_elif
elif|#
directive|elif
name|PAGE_SIZE
operator|==
literal|4096
end_elif

begin_define
define|#
directive|define
name|ATI_PCIGART_TABLE_ORDER
value|3
end_define

begin_define
define|#
directive|define
name|ATI_PCIGART_TABLE_PAGES
value|(1<< 3)
end_define

begin_elif
elif|#
directive|elif
end_elif

begin_error
error|#
directive|error
error|- PAGE_SIZE not 8K or 4K
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ATI_MAX_PCIGART_PAGES
value|8192
end_define

begin_comment
comment|/* 32 MB aperture, 4K pages */
end_comment

begin_define
define|#
directive|define
name|ATI_PCIGART_PAGE_SIZE
value|4096
end_define

begin_comment
comment|/* PCI GART page size */
end_comment

begin_function
name|int
name|DRM
function|(
name|ati_pcigart_init
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|dma_addr_t
modifier|*
name|bus_addr
parameter_list|)
block|{
name|drm_sg_mem_t
modifier|*
name|entry
init|=
name|dev
operator|->
name|sg
decl_stmt|;
name|unsigned
name|long
name|address
init|=
literal|0
decl_stmt|;
name|unsigned
name|long
name|pages
decl_stmt|;
name|u32
modifier|*
name|pci_gart
init|=
literal|0
decl_stmt|,
name|page_base
decl_stmt|,
name|bus_address
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|,
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|entry
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"no scatter/gather memory!\n"
argument_list|)
expr_stmt|;
goto|goto
name|done
goto|;
block|}
name|address
operator|=
operator|(
name|long
operator|)
name|contigmalloc
argument_list|(
operator|(
literal|1
operator|<<
name|ATI_PCIGART_TABLE_ORDER
operator|)
operator|*
name|PAGE_SIZE
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|,
name|M_WAITOK
argument_list|,
literal|0ul
argument_list|,
literal|0xfffffffful
argument_list|,
name|PAGE_SIZE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|address
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"cannot allocate PCI GART page!\n"
argument_list|)
expr_stmt|;
goto|goto
name|done
goto|;
block|}
comment|/* XXX: we need to busdma this */
name|bus_address
operator|=
name|vtophys
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|pci_gart
operator|=
operator|(
name|u32
operator|*
operator|)
name|address
expr_stmt|;
name|pages
operator|=
operator|(
name|entry
operator|->
name|pages
operator|<=
name|ATI_MAX_PCIGART_PAGES
operator|)
condition|?
name|entry
operator|->
name|pages
else|:
name|ATI_MAX_PCIGART_PAGES
expr_stmt|;
name|bzero
argument_list|(
name|pci_gart
argument_list|,
name|ATI_MAX_PCIGART_PAGES
operator|*
sizeof|sizeof
argument_list|(
name|u32
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|pages
condition|;
name|i
operator|++
control|)
block|{
name|entry
operator|->
name|busaddr
index|[
name|i
index|]
operator|=
name|vtophys
argument_list|(
name|entry
operator|->
name|handle
operator|+
operator|(
name|i
operator|*
name|PAGE_SIZE
operator|)
argument_list|)
expr_stmt|;
name|page_base
operator|=
operator|(
name|u32
operator|)
name|entry
operator|->
name|busaddr
index|[
name|i
index|]
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
operator|(
name|PAGE_SIZE
operator|/
name|ATI_PCIGART_PAGE_SIZE
operator|)
condition|;
name|j
operator|++
control|)
block|{
operator|*
name|pci_gart
operator|++
operator|=
name|cpu_to_le32
argument_list|(
name|page_base
argument_list|)
expr_stmt|;
name|page_base
operator|+=
name|ATI_PCIGART_PAGE_SIZE
expr_stmt|;
block|}
block|}
name|ret
operator|=
literal|1
expr_stmt|;
name|done
label|:
operator|*
name|addr
operator|=
name|address
expr_stmt|;
operator|*
name|bus_addr
operator|=
name|bus_address
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
name|int
name|DRM
function|(
name|ati_pcigart_cleanup
function|)
parameter_list|(
name|drm_device_t
modifier|*
name|dev
parameter_list|,
name|unsigned
name|long
name|addr
parameter_list|,
name|dma_addr_t
name|bus_addr
parameter_list|)
block|{
name|drm_sg_mem_t
modifier|*
name|entry
init|=
name|dev
operator|->
name|sg
decl_stmt|;
comment|/* we need to support large memory configurations */
if|if
condition|(
operator|!
name|entry
condition|)
block|{
name|DRM_ERROR
argument_list|(
literal|"no scatter/gather memory!\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|#
directive|if
name|__FreeBSD_version
operator|>
literal|500000
name|contigfree
argument_list|(
operator|(
name|void
operator|*
operator|)
name|addr
argument_list|,
operator|(
literal|1
operator|<<
name|ATI_PCIGART_TABLE_ORDER
operator|)
operator|*
name|PAGE_SIZE
argument_list|,
name|DRM
argument_list|(
name|M_DRM
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Not available on 4.x */
endif|#
directive|endif
return|return
literal|1
return|;
block|}
end_function

end_unit

