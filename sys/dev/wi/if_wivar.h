begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2002  *	M Warner Losh<imp@freebsd.org>.  All rights reserved.  * Copyright (c) 1997, 1998, 1999  *	Bill Paul<wpaul@ctr.columbia.edu>.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by Bill Paul.  * 4. Neither the name of the author nor the names of any co-contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY Bill Paul AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL Bill Paul OR THE VOICES IN HIS HEAD  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  * THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|WICACHE
end_define

begin_comment
comment|/* turn on signal strength cache code */
end_comment

begin_define
define|#
directive|define
name|MAXWICACHE
value|10
end_define

begin_struct
struct|struct
name|wi_counters
block|{
name|u_int32_t
name|wi_tx_unicast_frames
decl_stmt|;
name|u_int32_t
name|wi_tx_multicast_frames
decl_stmt|;
name|u_int32_t
name|wi_tx_fragments
decl_stmt|;
name|u_int32_t
name|wi_tx_unicast_octets
decl_stmt|;
name|u_int32_t
name|wi_tx_multicast_octets
decl_stmt|;
name|u_int32_t
name|wi_tx_deferred_xmits
decl_stmt|;
name|u_int32_t
name|wi_tx_single_retries
decl_stmt|;
name|u_int32_t
name|wi_tx_multi_retries
decl_stmt|;
name|u_int32_t
name|wi_tx_retry_limit
decl_stmt|;
name|u_int32_t
name|wi_tx_discards
decl_stmt|;
name|u_int32_t
name|wi_rx_unicast_frames
decl_stmt|;
name|u_int32_t
name|wi_rx_multicast_frames
decl_stmt|;
name|u_int32_t
name|wi_rx_fragments
decl_stmt|;
name|u_int32_t
name|wi_rx_unicast_octets
decl_stmt|;
name|u_int32_t
name|wi_rx_multicast_octets
decl_stmt|;
name|u_int32_t
name|wi_rx_fcs_errors
decl_stmt|;
name|u_int32_t
name|wi_rx_discards_nobuf
decl_stmt|;
name|u_int32_t
name|wi_tx_discards_wrong_sa
decl_stmt|;
name|u_int32_t
name|wi_rx_WEP_cant_decrypt
decl_stmt|;
name|u_int32_t
name|wi_rx_msg_in_msg_frags
decl_stmt|;
name|u_int32_t
name|wi_rx_msg_in_bad_msg_frags
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Encryption controls. We can enable or disable encryption as  * well as specify up to 4 encryption keys. We can also specify  * which of the four keys will be used for transmit encryption.  */
end_comment

begin_define
define|#
directive|define
name|WI_RID_ENCRYPTION
value|0xFC20
end_define

begin_define
define|#
directive|define
name|WI_RID_AUTHTYPE
value|0xFC21
end_define

begin_define
define|#
directive|define
name|WI_RID_DEFLT_CRYPT_KEYS
value|0xFCB0
end_define

begin_define
define|#
directive|define
name|WI_RID_TX_CRYPT_KEY
value|0xFCB1
end_define

begin_define
define|#
directive|define
name|WI_RID_WEP_AVAIL
value|0xFD4F
end_define

begin_define
define|#
directive|define
name|WI_RID_P2_TX_CRYPT_KEY
value|0xFC23
end_define

begin_define
define|#
directive|define
name|WI_RID_P2_CRYPT_KEY0
value|0xFC24
end_define

begin_define
define|#
directive|define
name|WI_RID_P2_CRYPT_KEY1
value|0xFC25
end_define

begin_define
define|#
directive|define
name|WI_RID_MICROWAVE_OVEN
value|0xFC25
end_define

begin_define
define|#
directive|define
name|WI_RID_P2_CRYPT_KEY2
value|0xFC26
end_define

begin_define
define|#
directive|define
name|WI_RID_P2_CRYPT_KEY3
value|0xFC27
end_define

begin_define
define|#
directive|define
name|WI_RID_P2_ENCRYPTION
value|0xFC28
end_define

begin_define
define|#
directive|define
name|WI_RID_ROAMING_MODE
value|0xFC2D
end_define

begin_define
define|#
directive|define
name|WI_RID_CUR_TX_RATE
value|0xFD44
end_define

begin_comment
comment|/* current TX rate */
end_comment

begin_struct
struct|struct
name|wi_key
block|{
name|u_int16_t
name|wi_keylen
decl_stmt|;
name|u_int8_t
name|wi_keydat
index|[
literal|14
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WI_NLTV_KEYS
value|4
end_define

begin_struct
struct|struct
name|wi_ltv_keys
block|{
name|u_int16_t
name|wi_len
decl_stmt|;
name|u_int16_t
name|wi_type
decl_stmt|;
name|struct
name|wi_key
name|wi_keys
index|[
name|WI_NLTV_KEYS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wi_softc
block|{
name|struct
name|arpcom
name|arpcom
decl_stmt|;
name|struct
name|ifmedia
name|ifmedia
decl_stmt|;
name|device_t
name|dev
decl_stmt|;
name|int
name|wi_unit
decl_stmt|;
name|struct
name|resource
modifier|*
name|local
decl_stmt|;
name|int
name|local_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|iobase
decl_stmt|;
name|int
name|iobase_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq
decl_stmt|;
name|int
name|irq_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|mem
decl_stmt|;
name|int
name|mem_rid
decl_stmt|;
name|bus_space_handle_t
name|wi_localhandle
decl_stmt|;
name|bus_space_tag_t
name|wi_localtag
decl_stmt|;
name|bus_space_handle_t
name|wi_bhandle
decl_stmt|;
name|bus_space_tag_t
name|wi_btag
decl_stmt|;
name|bus_space_handle_t
name|wi_bmemhandle
decl_stmt|;
name|bus_space_tag_t
name|wi_bmemtag
decl_stmt|;
name|void
modifier|*
name|wi_intrhand
decl_stmt|;
name|int
name|sc_firmware_type
decl_stmt|;
define|#
directive|define
name|WI_NOTYPE
value|0
define|#
directive|define
name|WI_LUCENT
value|1
define|#
directive|define
name|WI_INTERSIL
value|2
define|#
directive|define
name|WI_SYMBOL
value|3
name|int
name|sc_pri_firmware_ver
decl_stmt|;
comment|/* Primary firmware */
name|int
name|sc_sta_firmware_ver
decl_stmt|;
comment|/* Station firmware */
name|int
name|sc_enabled
decl_stmt|;
name|int
name|wi_io_addr
decl_stmt|;
name|int
name|wi_tx_data_id
decl_stmt|;
name|int
name|wi_tx_mgmt_id
decl_stmt|;
name|int
name|wi_gone
decl_stmt|;
name|int
name|wi_flags
decl_stmt|;
define|#
directive|define
name|WI_FLAGS_ATTACHED
value|0x01
define|#
directive|define
name|WI_FLAGS_INITIALIZED
value|0x02
define|#
directive|define
name|WI_FLAGS_HAS_WEP
value|0x04
define|#
directive|define
name|WI_FLAGS_HAS_IBSS
value|0x08
define|#
directive|define
name|WI_FLAGS_HAS_CREATE_IBSS
value|0x10
define|#
directive|define
name|WI_FLAGS_HAS_MOR
value|0x20
define|#
directive|define
name|WI_FLAGS_HAS_ROAMING
value|0x30
define|#
directive|define
name|WI_FLAGS_HAS_DIVERSITY
value|0x40
define|#
directive|define
name|WI_FLAGS_HAS_HOSTAP
value|0x80
name|int
name|wi_if_flags
decl_stmt|;
name|u_int16_t
name|wi_procframe
decl_stmt|;
name|u_int16_t
name|wi_ptype
decl_stmt|;
name|u_int16_t
name|wi_portnum
decl_stmt|;
name|u_int16_t
name|wi_max_data_len
decl_stmt|;
name|u_int16_t
name|wi_rts_thresh
decl_stmt|;
name|u_int16_t
name|wi_ap_density
decl_stmt|;
name|u_int16_t
name|wi_tx_rate
decl_stmt|;
name|u_int16_t
name|wi_create_ibss
decl_stmt|;
name|u_int16_t
name|wi_channel
decl_stmt|;
name|u_int16_t
name|wi_pm_enabled
decl_stmt|;
name|u_int16_t
name|wi_mor_enabled
decl_stmt|;
name|u_int16_t
name|wi_max_sleep
decl_stmt|;
name|u_int16_t
name|wi_supprates
decl_stmt|;
name|u_int16_t
name|wi_authtype
decl_stmt|;
name|u_int16_t
name|wi_roaming
decl_stmt|;
name|char
name|wi_node_name
index|[
literal|32
index|]
decl_stmt|;
name|char
name|wi_net_name
index|[
literal|32
index|]
decl_stmt|;
name|char
name|wi_ibss_name
index|[
literal|32
index|]
decl_stmt|;
name|u_int8_t
name|wi_txbuf
index|[
literal|1596
index|]
decl_stmt|;
name|u_int8_t
name|wi_scanbuf
index|[
literal|1596
index|]
decl_stmt|;
name|int
name|wi_scanbuf_len
decl_stmt|;
name|struct
name|wi_counters
name|wi_stats
decl_stmt|;
name|int
name|wi_has_wep
decl_stmt|;
name|int
name|wi_use_wep
decl_stmt|;
name|int
name|wi_authmode
decl_stmt|;
name|int
name|wi_tx_key
decl_stmt|;
name|struct
name|wi_ltv_keys
name|wi_keys
decl_stmt|;
ifdef|#
directive|ifdef
name|WICACHE
name|int
name|wi_sigitems
decl_stmt|;
name|struct
name|wi_sigcache
name|wi_sigcache
index|[
name|MAXWICACHE
index|]
decl_stmt|;
name|int
name|wi_nextitem
decl_stmt|;
endif|#
directive|endif
name|struct
name|wihap_info
name|wi_hostap_info
decl_stmt|;
name|u_int32_t
name|wi_icv
decl_stmt|;
name|int
name|wi_icv_flag
decl_stmt|;
name|int
name|wi_ibss_port
decl_stmt|;
name|struct
name|callout_handle
name|wi_stat_ch
decl_stmt|;
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
name|struct
name|mtx
name|wi_mtx
decl_stmt|;
endif|#
directive|endif
name|int
name|wi_nic_type
decl_stmt|;
name|int
name|wi_bus_type
decl_stmt|;
comment|/* Bus attachment type */
struct|struct
block|{
name|u_int16_t
name|wi_sleep
decl_stmt|;
name|u_int16_t
name|wi_delaysupp
decl_stmt|;
name|u_int16_t
name|wi_txsupp
decl_stmt|;
name|u_int16_t
name|wi_monitor
decl_stmt|;
name|u_int16_t
name|wi_ledtest
decl_stmt|;
name|u_int16_t
name|wi_ledtest_param0
decl_stmt|;
name|u_int16_t
name|wi_ledtest_param1
decl_stmt|;
name|u_int16_t
name|wi_conttx
decl_stmt|;
name|u_int16_t
name|wi_conttx_param0
decl_stmt|;
name|u_int16_t
name|wi_contrx
decl_stmt|;
name|u_int16_t
name|wi_sigstate
decl_stmt|;
name|u_int16_t
name|wi_sigstate_param0
decl_stmt|;
name|u_int16_t
name|wi_confbits
decl_stmt|;
name|u_int16_t
name|wi_confbits_param0
decl_stmt|;
block|}
name|wi_debug
struct|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wi_card_ident
block|{
name|u_int16_t
name|card_id
decl_stmt|;
name|char
modifier|*
name|card_name
decl_stmt|;
name|u_int8_t
name|firm_type
decl_stmt|;
block|}
struct|;
end_struct

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|<
literal|500000
end_if

begin_comment
comment|/*  * Various compat hacks/kludges  */
end_comment

begin_define
define|#
directive|define
name|le16toh
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|htole16
parameter_list|(
name|x
parameter_list|)
value|(x)
end_define

begin_define
define|#
directive|define
name|ifaddr_byindex
parameter_list|(
name|idx
parameter_list|)
value|ifnet_addrs[(idx) - 1];
end_define

begin_define
define|#
directive|define
name|WI_LOCK
parameter_list|(
name|_sc
parameter_list|,
name|_s
parameter_list|)
value|s = splimp()
end_define

begin_define
define|#
directive|define
name|WI_UNLOCK
parameter_list|(
name|_sc
parameter_list|,
name|_s
parameter_list|)
value|splx(s)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|WI_LOCK
parameter_list|(
name|_sc
parameter_list|,
name|_s
parameter_list|)
value|_s = 1
end_define

begin_define
define|#
directive|define
name|WI_UNLOCK
parameter_list|(
name|_sc
parameter_list|,
name|_s
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|wi_generic_attach
parameter_list|(
name|device_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wi_generic_detach
parameter_list|(
name|device_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wi_shutdown
parameter_list|(
name|device_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wi_alloc
parameter_list|(
name|device_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wi_free
parameter_list|(
name|device_t
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|devclass_t
name|wi_devclass
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|wi_mgmt_xmit
parameter_list|(
name|struct
name|wi_softc
modifier|*
parameter_list|,
name|caddr_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wi_symbol_load_firm
parameter_list|(
name|struct
name|wi_softc
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

end_unit

