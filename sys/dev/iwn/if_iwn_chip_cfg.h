begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013 Cedric GROSS<cg@cgross.info>  * Copyright (c) 2011 Intel Corporation  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IF_IWN_CHIP_CFG_H__
end_ifndef

begin_define
define|#
directive|define
name|__IF_IWN_CHIP_CFG_H__
end_define

begin_comment
comment|/* ==========================================================================  *                                  NIC PARAMETERS  *  * ==========================================================================  */
end_comment

begin_comment
comment|/*  * Flags for managing calibration result. See calib_need  * in iwn_base_params struct  *  * These are bitmasks that determine which indexes in the calibcmd  * array are pushed up.  */
end_comment

begin_define
define|#
directive|define
name|IWN_FLG_NEED_PHY_CALIB_DC
value|(1<<0)
end_define

begin_define
define|#
directive|define
name|IWN_FLG_NEED_PHY_CALIB_LO
value|(1<<1)
end_define

begin_define
define|#
directive|define
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
value|(1<<2)
end_define

begin_define
define|#
directive|define
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ_PERIODIC
value|(1<<3)
end_define

begin_define
define|#
directive|define
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
value|(1<<4)
end_define

begin_comment
comment|/*  * These aren't (yet) included in the calibcmd array, but  * are used as flags for which calibrations to use.  *  * XXX I think they should be named differently and  * stuffed in a different member in the config struct!  */
end_comment

begin_define
define|#
directive|define
name|IWN_FLG_NEED_PHY_CALIB_TEMP_OFFSET
value|(1<<5)
end_define

begin_define
define|#
directive|define
name|IWN_FLG_NEED_PHY_CALIB_CRYSTAL
value|(1<<6)
end_define

begin_define
define|#
directive|define
name|IWN_FLG_NEED_PHY_CALIB_TEMP_OFFSETv2
value|(1<<7)
end_define

begin_comment
comment|/*  * Each chip has a different threshold for PLCP errors that should trigger a  * retune.  */
end_comment

begin_define
define|#
directive|define
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
value|50
end_define

begin_define
define|#
directive|define
name|IWN_PLCP_ERR_LONG_THRESHOLD
value|100
end_define

begin_define
define|#
directive|define
name|IWN_PLCP_ERR_EXT_LONG_THRESHOLD
value|200
end_define

begin_comment
comment|/*  * Define some parameters for managing different NIC.  * Refer to linux specific file like iwl-xxxx.c to determine correct value  * for NIC.  *  * @max_ll_items: max number of OTP blocks  * @shadow_ram_support: shadow support for OTP memory  * @shadow_reg_enable: HW shadhow register bit  * @no_idle_support: do not support idle mode  * @advanced_bt_coexist : Advanced BT management  * @bt_session_2 : NIC need a new struct for configure BT coexistence. Needed  *   only if advanced_bt_coexist is true  * @bt_sco_disable :  * @additional_nic_config: For 6005 series  * @iq_invert : ? But need it for N 2000 series  * @regulatory_bands : XXX  * @enhanced_TX_power : EEPROM Has advanced TX power options. Set 'True'  *    if update_enhanced_txpower = iwl_eeprom_enhanced_txpower.  *    See iwl-agn-devices.c file to determine that(enhanced_txpower)  * @need_temp_offset_calib : Need to compute some temp offset for calibration.  * @calib_need : Use IWN_FLG_NEED_PHY_CALIB_* flags to specify which  *    calibration data ucode need. See calib_init_cfg in iwl-xxxx.c  *    linux kernel file  * @support_hostap: Define IEEE80211_C_HOSTAP for ic_caps  * @no_multi_vaps: See iwn_vap_create  * @additional_gp_drv_bit : Specific bit to defined during nic_config  * @bt_mode: BT configuration mode  */
end_comment

begin_enum
enum|enum
name|bt_mode_enum
block|{
name|IWN_BT_NONE
block|,
name|IWN_BT_SIMPLE
block|,
name|IWN_BT_ADVANCED
block|}
enum|;
end_enum

begin_struct
struct|struct
name|iwn_base_params
block|{
name|uint32_t
name|pll_cfg_val
decl_stmt|;
specifier|const
name|uint16_t
name|max_ll_items
decl_stmt|;
define|#
directive|define
name|IWN_OTP_MAX_LL_ITEMS_1000
value|(3)
comment|/* OTP blocks for 1000 */
define|#
directive|define
name|IWN_OTP_MAX_LL_ITEMS_6x00
value|(4)
comment|/* OTP blocks for 6x00 */
define|#
directive|define
name|IWN_OTP_MAX_LL_ITEMS_6x50
value|(7)
comment|/* OTP blocks for 6x50 */
define|#
directive|define
name|IWN_OTP_MAX_LL_ITEMS_2x00
value|(4)
comment|/* OTP blocks for 2x00 */
specifier|const
name|bool
name|shadow_ram_support
decl_stmt|;
specifier|const
name|bool
name|shadow_reg_enable
decl_stmt|;
specifier|const
name|bool
name|bt_session_2
decl_stmt|;
specifier|const
name|bool
name|bt_sco_disable
decl_stmt|;
specifier|const
name|bool
name|additional_nic_config
decl_stmt|;
specifier|const
name|uint32_t
modifier|*
name|regulatory_bands
decl_stmt|;
specifier|const
name|bool
name|enhanced_TX_power
decl_stmt|;
specifier|const
name|uint16_t
name|calib_need
decl_stmt|;
specifier|const
name|bool
name|support_hostap
decl_stmt|;
specifier|const
name|bool
name|no_multi_vaps
decl_stmt|;
name|uint8_t
name|additional_gp_drv_bit
decl_stmt|;
name|enum
name|bt_mode_enum
name|bt_mode
decl_stmt|;
name|uint32_t
name|plcp_err_threshold
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn5000_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
name|IWN_ANA_PLL_INIT
block|,
comment|/* pll_cfg_val; */
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x00
block|,
comment|/* max_ll_items */
operator|.
name|shadow_ram_support
operator|=
name|false
block|,
comment|/* shadow_ram_support */
operator|.
name|shadow_reg_enable
operator|=
name|false
block|,
comment|/* shadow_reg_enable */
operator|.
name|bt_session_2
operator|=
name|false
block|,
comment|/* bt_session_2 */
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
comment|/* bt_sco_disable */
operator|.
name|additional_nic_config
operator|=
name|false
block|,
comment|/* additional_nic_config */
operator|.
name|regulatory_bands
operator|=
name|iwn5000_regulatory_bands
block|,
comment|/* regulatory_bands */
operator|.
name|enhanced_TX_power
operator|=
name|false
block|,
comment|/* enhanced_TX_power */
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ_PERIODIC
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
comment|/* support_hostap */
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
comment|/* no_multi_vaps */
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_NONE
block|,
comment|/* additional_gp_drv_bit */
operator|.
name|bt_mode
operator|=
name|IWN_BT_NONE
block|,
comment|/* bt_mode */
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_LONG_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * 4965 support  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn4965_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
comment|/* pll_cfg_val; */
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x00
block|,
comment|/* max_ll_items - ignored for 4965 */
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
comment|/* shadow_ram_support */
operator|.
name|shadow_reg_enable
operator|=
name|false
block|,
comment|/* shadow_reg_enable */
operator|.
name|bt_session_2
operator|=
name|false
block|,
comment|/* bt_session_2 XXX unknown? */
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
comment|/* bt_sco_disable XXX unknown? */
operator|.
name|additional_nic_config
operator|=
name|false
block|,
comment|/* additional_nic_config - not for 4965 */
operator|.
name|regulatory_bands
operator|=
name|iwn5000_regulatory_bands
block|,
comment|/* regulatory_bands */
operator|.
name|enhanced_TX_power
operator|=
name|false
block|,
comment|/* enhanced_TX_power - not for 4965 */
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_DC
operator||
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ_PERIODIC
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
comment|/* support_hostap - XXX should work on fixing! */
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
comment|/* no_multi_vaps - XXX should work on fixing!  */
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_NONE
block|,
comment|/* additional_gp_drv_bit */
operator|.
name|bt_mode
operator|=
name|IWN_BT_SIMPLE
block|,
comment|/* bt_mode */
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn2000_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_2x00
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|false
block|,
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
operator|.
name|additional_nic_config
operator|=
name|false
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn2030_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|true
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_DC
operator||
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator||
name|IWN_FLG_NEED_PHY_CALIB_TEMP_OFFSETv2
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|true
block|,
operator|.
name|no_multi_vaps
operator|=
name|false
block|,
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_REG_BIT_RADIO_IQ_INVERT
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_NONE
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn2030_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_2x00
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|false
block|,
comment|/* XXX check? */
operator|.
name|bt_session_2
operator|=
name|true
block|,
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
operator|.
name|additional_nic_config
operator|=
name|false
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn2030_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|true
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_DC
operator||
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator||
name|IWN_FLG_NEED_PHY_CALIB_TEMP_OFFSETv2
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|true
block|,
operator|.
name|no_multi_vaps
operator|=
name|false
block|,
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_REG_BIT_RADIO_IQ_INVERT
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_ADVANCED
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn1000_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
name|IWN_ANA_PLL_INIT
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_1000
block|,
operator|.
name|shadow_ram_support
operator|=
name|false
block|,
operator|.
name|shadow_reg_enable
operator|=
name|false
block|,
comment|/* XXX check? */
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|false
block|,
operator|.
name|additional_nic_config
operator|=
name|false
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn5000_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|false
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ_PERIODIC
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_NONE
block|,
comment|/* XXX 1000 - no BT */
operator|.
name|bt_mode
operator|=
name|IWN_BT_SIMPLE
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_EXT_LONG_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn_6000_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x00
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|true
block|,
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|false
block|,
operator|.
name|additional_nic_config
operator|=
name|false
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn6000_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|true
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_DC
operator||
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_NONE
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_SIMPLE
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn_6000i_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x00
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|true
block|,
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
operator|.
name|additional_nic_config
operator|=
name|false
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn6000_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|true
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_DC
operator||
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_NONE
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_SIMPLE
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn_6000g2_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x00
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|true
block|,
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
operator|.
name|additional_nic_config
operator|=
name|false
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn6000_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|true
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_DC
operator||
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator||
name|IWN_FLG_NEED_PHY_CALIB_TEMP_OFFSET
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
operator|.
name|additional_gp_drv_bit
operator|=
literal|0
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_SIMPLE
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn_6050_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x50
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|true
block|,
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
operator|.
name|additional_nic_config
operator|=
name|true
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn6000_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|true
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_NONE
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_SIMPLE
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn_6150_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x50
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|true
block|,
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
operator|.
name|additional_nic_config
operator|=
name|true
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn6000_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|true
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_6050_1X2
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_SIMPLE
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* IWL_DEVICE_6035& IWL_DEVICE_6030 */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn_6000g2b_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x00
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|true
block|,
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
operator|.
name|additional_nic_config
operator|=
name|false
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn6000_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|true
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_DC
operator||
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator||
name|IWN_FLG_NEED_PHY_CALIB_TEMP_OFFSET
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_NONE
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_ADVANCED
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * 6235 series NICs.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn_6235_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
literal|0
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x00
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|true
block|,
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
operator|.
name|additional_nic_config
operator|=
name|true
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn6000_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|true
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_DC
operator||
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator||
name|IWN_FLG_NEED_PHY_CALIB_TEMP_OFFSET
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
comment|/* XXX 1x2? This NIC is 2x2, right? */
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_6050_1X2
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_ADVANCED
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_DEFAULT_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|iwn_base_params
name|iwn_5x50_base_params
init|=
block|{
operator|.
name|pll_cfg_val
operator|=
name|IWN_ANA_PLL_INIT
block|,
operator|.
name|max_ll_items
operator|=
name|IWN_OTP_MAX_LL_ITEMS_6x00
block|,
operator|.
name|shadow_ram_support
operator|=
name|true
block|,
operator|.
name|shadow_reg_enable
operator|=
name|false
block|,
operator|.
name|bt_session_2
operator|=
name|false
block|,
operator|.
name|bt_sco_disable
operator|=
name|true
block|,
operator|.
name|additional_nic_config
operator|=
name|false
block|,
operator|.
name|regulatory_bands
operator|=
name|iwn5000_regulatory_bands
block|,
operator|.
name|enhanced_TX_power
operator|=
name|false
block|,
operator|.
name|calib_need
operator|=
operator|(
name|IWN_FLG_NEED_PHY_CALIB_DC
operator||
name|IWN_FLG_NEED_PHY_CALIB_LO
operator||
name|IWN_FLG_NEED_PHY_CALIB_TX_IQ
operator||
name|IWN_FLG_NEED_PHY_CALIB_BASE_BAND
operator|)
block|,
operator|.
name|support_hostap
operator|=
name|false
block|,
operator|.
name|no_multi_vaps
operator|=
name|true
block|,
operator|.
name|additional_gp_drv_bit
operator|=
name|IWN_GP_DRIVER_NONE
block|,
operator|.
name|bt_mode
operator|=
name|IWN_BT_SIMPLE
block|,
operator|.
name|plcp_err_threshold
operator|=
name|IWN_PLCP_ERR_LONG_THRESHOLD
block|, }
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __IF_IWN_CHIP_CFG_H__ */
end_comment

end_unit

