begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013 Cedric GROSS<c.gross@kreiz-it.fr>  * Copyright (c) 2011 Intel Corporation  * Copyright (c) 2007-2009  *      Damien Bergamini<damien.bergamini@free.fr>  * Copyright (c) 2008  *      Benjamin Close<benjsc@FreeBSD.org>  * Copyright (c) 2008 Sam Leffler, Errno Consulting  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IF_IWN_DEBUG_H__
end_ifndef

begin_define
define|#
directive|define
name|__IF_IWN_DEBUG_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|IWN_DEBUG
end_ifdef

begin_enum
enum|enum
block|{
name|IWN_DEBUG_XMIT
init|=
literal|0x00000001
block|,
comment|/* basic xmit operation */
name|IWN_DEBUG_RECV
init|=
literal|0x00000002
block|,
comment|/* basic recv operation */
name|IWN_DEBUG_STATE
init|=
literal|0x00000004
block|,
comment|/* 802.11 state transitions */
name|IWN_DEBUG_TXPOW
init|=
literal|0x00000008
block|,
comment|/* tx power processing */
name|IWN_DEBUG_RESET
init|=
literal|0x00000010
block|,
comment|/* reset processing */
name|IWN_DEBUG_OPS
init|=
literal|0x00000020
block|,
comment|/* iwn_ops processing */
name|IWN_DEBUG_BEACON
init|=
literal|0x00000040
block|,
comment|/* beacon handling */
name|IWN_DEBUG_WATCHDOG
init|=
literal|0x00000080
block|,
comment|/* watchdog timeout */
name|IWN_DEBUG_INTR
init|=
literal|0x00000100
block|,
comment|/* ISR */
name|IWN_DEBUG_CALIBRATE
init|=
literal|0x00000200
block|,
comment|/* periodic calibration */
name|IWN_DEBUG_NODE
init|=
literal|0x00000400
block|,
comment|/* node management */
name|IWN_DEBUG_LED
init|=
literal|0x00000800
block|,
comment|/* led management */
name|IWN_DEBUG_CMD
init|=
literal|0x00001000
block|,
comment|/* cmd submission */
name|IWN_DEBUG_TXRATE
init|=
literal|0x00002000
block|,
comment|/* TX rate debugging */
name|IWN_DEBUG_PWRSAVE
init|=
literal|0x00004000
block|,
comment|/* Power save operations */
name|IWN_DEBUG_REGISTER
init|=
literal|0x20000000
block|,
comment|/* print chipset register */
name|IWN_DEBUG_TRACE
init|=
literal|0x40000000
block|,
comment|/* Print begin and start driver function */
name|IWN_DEBUG_FATAL
init|=
literal|0x80000000
block|,
comment|/* fatal errors */
name|IWN_DEBUG_ANY
init|=
literal|0xffffffff
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DPRINTF
parameter_list|(
name|sc
parameter_list|,
name|m
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|do {			\ 	if (sc->sc_debug& (m))				\ 		printf(fmt, __VA_ARGS__);		\ } while (0)
end_define

begin_function
specifier|static
specifier|const
name|char
modifier|*
name|iwn_intr_str
parameter_list|(
name|uint8_t
name|cmd
parameter_list|)
block|{
switch|switch
condition|(
name|cmd
condition|)
block|{
comment|/* Notifications */
case|case
name|IWN_UC_READY
case|:
return|return
literal|"UC_READY"
return|;
case|case
name|IWN_ADD_NODE_DONE
case|:
return|return
literal|"ADD_NODE_DONE"
return|;
case|case
name|IWN_TX_DONE
case|:
return|return
literal|"TX_DONE"
return|;
case|case
name|IWN_START_SCAN
case|:
return|return
literal|"START_SCAN"
return|;
case|case
name|IWN_STOP_SCAN
case|:
return|return
literal|"STOP_SCAN"
return|;
case|case
name|IWN_RX_STATISTICS
case|:
return|return
literal|"RX_STATS"
return|;
case|case
name|IWN_BEACON_STATISTICS
case|:
return|return
literal|"BEACON_STATS"
return|;
case|case
name|IWN_STATE_CHANGED
case|:
return|return
literal|"STATE_CHANGED"
return|;
case|case
name|IWN_BEACON_MISSED
case|:
return|return
literal|"BEACON_MISSED"
return|;
case|case
name|IWN_RX_PHY
case|:
return|return
literal|"RX_PHY"
return|;
case|case
name|IWN_MPDU_RX_DONE
case|:
return|return
literal|"MPDU_RX_DONE"
return|;
case|case
name|IWN_RX_DONE
case|:
return|return
literal|"RX_DONE"
return|;
comment|/* Command Notifications */
case|case
name|IWN_CMD_RXON
case|:
return|return
literal|"IWN_CMD_RXON"
return|;
case|case
name|IWN_CMD_RXON_ASSOC
case|:
return|return
literal|"IWN_CMD_RXON_ASSOC"
return|;
case|case
name|IWN_CMD_EDCA_PARAMS
case|:
return|return
literal|"IWN_CMD_EDCA_PARAMS"
return|;
case|case
name|IWN_CMD_TIMING
case|:
return|return
literal|"IWN_CMD_TIMING"
return|;
case|case
name|IWN_CMD_LINK_QUALITY
case|:
return|return
literal|"IWN_CMD_LINK_QUALITY"
return|;
case|case
name|IWN_CMD_SET_LED
case|:
return|return
literal|"IWN_CMD_SET_LED"
return|;
case|case
name|IWN5000_CMD_WIMAX_COEX
case|:
return|return
literal|"IWN5000_CMD_WIMAX_COEX"
return|;
case|case
name|IWN5000_CMD_CALIB_CONFIG
case|:
return|return
literal|"IWN5000_CMD_CALIB_CONFIG"
return|;
case|case
name|IWN5000_CMD_CALIB_RESULT
case|:
return|return
literal|"IWN5000_CMD_CALIB_RESULT"
return|;
case|case
name|IWN5000_CMD_CALIB_COMPLETE
case|:
return|return
literal|"IWN5000_CMD_CALIB_COMPLETE"
return|;
case|case
name|IWN_CMD_SET_POWER_MODE
case|:
return|return
literal|"IWN_CMD_SET_POWER_MODE"
return|;
case|case
name|IWN_CMD_SCAN
case|:
return|return
literal|"IWN_CMD_SCAN"
return|;
case|case
name|IWN_CMD_SCAN_RESULTS
case|:
return|return
literal|"IWN_CMD_SCAN_RESULTS"
return|;
case|case
name|IWN_CMD_TXPOWER
case|:
return|return
literal|"IWN_CMD_TXPOWER"
return|;
case|case
name|IWN_CMD_TXPOWER_DBM
case|:
return|return
literal|"IWN_CMD_TXPOWER_DBM"
return|;
case|case
name|IWN5000_CMD_TX_ANT_CONFIG
case|:
return|return
literal|"IWN5000_CMD_TX_ANT_CONFIG"
return|;
case|case
name|IWN_CMD_BT_COEX
case|:
return|return
literal|"IWN_CMD_BT_COEX"
return|;
case|case
name|IWN_CMD_SET_CRITICAL_TEMP
case|:
return|return
literal|"IWN_CMD_SET_CRITICAL_TEMP"
return|;
case|case
name|IWN_CMD_SET_SENSITIVITY
case|:
return|return
literal|"IWN_CMD_SET_SENSITIVITY"
return|;
case|case
name|IWN_CMD_PHY_CALIB
case|:
return|return
literal|"IWN_CMD_PHY_CALIB"
return|;
comment|/* Bluetooth commands */
case|case
name|IWN_CMD_BT_COEX_PRIOTABLE
case|:
return|return
literal|"IWN_CMD_BT_COEX_PRIOTABLE"
return|;
case|case
name|IWN_CMD_BT_COEX_PROT
case|:
return|return
literal|"IWN_CMD_BT_COEX_PROT"
return|;
case|case
name|IWN_CMD_BT_COEX_NOTIF
case|:
return|return
literal|"IWN_CMD_BT_COEX_NOTIF"
return|;
comment|/* PAN commands */
case|case
name|IWN_CMD_WIPAN_PARAMS
case|:
return|return
literal|"IWN_CMD_WIPAN_PARAMS"
return|;
case|case
name|IWN_CMD_WIPAN_RXON
case|:
return|return
literal|"IWN_CMD_WIPAN_RXON"
return|;
case|case
name|IWN_CMD_WIPAN_RXON_TIMING
case|:
return|return
literal|"IWN_CMD_WIPAN_RXON_TIMING"
return|;
case|case
name|IWN_CMD_WIPAN_RXON_ASSOC
case|:
return|return
literal|"IWN_CMD_WIPAN_RXON_ASSOC"
return|;
case|case
name|IWN_CMD_WIPAN_QOS_PARAM
case|:
return|return
literal|"IWN_CMD_WIPAN_QOS_PARAM"
return|;
case|case
name|IWN_CMD_WIPAN_WEPKEY
case|:
return|return
literal|"IWN_CMD_WIPAN_WEPKEY"
return|;
case|case
name|IWN_CMD_WIPAN_P2P_CHANNEL_SWITCH
case|:
return|return
literal|"IWN_CMD_WIPAN_P2P_CHANNEL_SWITCH"
return|;
case|case
name|IWN_CMD_WIPAN_NOA_NOTIFICATION
case|:
return|return
literal|"IWN_CMD_WIPAN_NOA_NOTIFICATION"
return|;
case|case
name|IWN_CMD_WIPAN_DEACTIVATION_COMPLETE
case|:
return|return
literal|"IWN_CMD_WIPAN_DEACTIVATION_COMPLETE"
return|;
block|}
return|return
literal|"UNKNOWN INTR NOTIF/CMD"
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DPRINTF
parameter_list|(
name|sc
parameter_list|,
name|m
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|do { (void) sc; } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __IF_IWN_DEBUG_H__ */
end_comment

end_unit

