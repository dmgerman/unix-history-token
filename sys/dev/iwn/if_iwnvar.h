begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*	$OpenBSD: if_iwnvar.h,v 1.18 2010/04/30 16:06:46 damien Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2013 Cedric GROSS<cg@cgross.info>  * Copyright (c) 2011 Intel Corporation  * Copyright (c) 2007, 2008  *	Damien Bergamini<damien.bergamini@free.fr>  * Copyright (c) 2008 Sam Leffler, Errno Consulting  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_enum
enum|enum
name|iwn_rxon_ctx_id
block|{
name|IWN_RXON_BSS_CTX
block|,
name|IWN_RXON_PAN_CTX
block|,
name|IWN_NUM_RXON_CTX
block|}
enum|;
end_enum

begin_struct
struct|struct
name|iwn_pan_slot
block|{
name|uint16_t
name|time
decl_stmt|;
name|uint8_t
name|type
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|iwn_pan_params_cmd
block|{
name|uint16_t
name|flags
decl_stmt|;
define|#
directive|define
name|IWN_PAN_PARAMS_FLG_SLOTTED_MODE
value|(1<< 3)
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|num_slots
decl_stmt|;
name|struct
name|iwn_pan_slot
name|slots
index|[
literal|10
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|iwn_led_mode
block|{
name|uint8_t
name|led_cur_mode
decl_stmt|;
name|uint64_t
name|led_cur_bt
decl_stmt|;
name|uint64_t
name|led_last_bt
decl_stmt|;
name|uint64_t
name|led_cur_tpt
decl_stmt|;
name|uint64_t
name|led_last_tpt
decl_stmt|;
name|uint64_t
name|led_bt_diff
decl_stmt|;
name|int
name|led_cur_time
decl_stmt|;
name|int
name|led_last_time
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint64_t
name|wr_tsft
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|int8_t
name|wr_dbm_antsignal
decl_stmt|;
name|int8_t
name|wr_dbm_antnoise
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|IWN_RX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_TSFT) |				\ 	 (1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTSIGNAL) |			\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTNOISE))
end_define

begin_struct
struct|struct
name|iwn_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint8_t
name|wt_rate
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|IWN_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL))
end_define

begin_struct
struct|struct
name|iwn_dma_info
block|{
name|bus_dma_tag_t
name|tag
decl_stmt|;
name|bus_dmamap_t
name|map
decl_stmt|;
name|bus_dma_segment_t
name|seg
decl_stmt|;
name|bus_addr_t
name|paddr
decl_stmt|;
name|caddr_t
name|vaddr
decl_stmt|;
name|bus_size_t
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_tx_data
block|{
name|bus_dmamap_t
name|map
decl_stmt|;
name|bus_addr_t
name|cmd_paddr
decl_stmt|;
name|bus_addr_t
name|scratch_paddr
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_tx_ring
block|{
name|struct
name|iwn_dma_info
name|desc_dma
decl_stmt|;
name|struct
name|iwn_dma_info
name|cmd_dma
decl_stmt|;
name|struct
name|iwn_tx_desc
modifier|*
name|desc
decl_stmt|;
name|struct
name|iwn_tx_cmd
modifier|*
name|cmd
decl_stmt|;
name|struct
name|iwn_tx_data
name|data
index|[
name|IWN_TX_RING_COUNT
index|]
decl_stmt|;
name|bus_dma_tag_t
name|data_dmat
decl_stmt|;
name|int
name|qid
decl_stmt|;
name|int
name|queued
decl_stmt|;
name|int
name|cur
decl_stmt|;
name|int
name|read
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|iwn_softc
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|iwn_rx_data
block|{
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|bus_dmamap_t
name|map
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_rx_ring
block|{
name|struct
name|iwn_dma_info
name|desc_dma
decl_stmt|;
name|struct
name|iwn_dma_info
name|stat_dma
decl_stmt|;
name|uint32_t
modifier|*
name|desc
decl_stmt|;
name|struct
name|iwn_rx_status
modifier|*
name|stat
decl_stmt|;
name|struct
name|iwn_rx_data
name|data
index|[
name|IWN_RX_RING_COUNT
index|]
decl_stmt|;
name|bus_dma_tag_t
name|data_dmat
decl_stmt|;
name|int
name|cur
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_node
block|{
name|struct
name|ieee80211_node
name|ni
decl_stmt|;
comment|/* must be the first */
name|uint16_t
name|disable_tid
decl_stmt|;
name|uint8_t
name|id
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|bitmap
decl_stmt|;
name|int
name|startidx
decl_stmt|;
name|int
name|nframes
decl_stmt|;
block|}
name|agg
index|[
name|IEEE80211_TID_SIZE
index|]
struct|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_calib_state
block|{
name|uint8_t
name|state
decl_stmt|;
define|#
directive|define
name|IWN_CALIB_STATE_INIT
value|0
define|#
directive|define
name|IWN_CALIB_STATE_ASSOC
value|1
define|#
directive|define
name|IWN_CALIB_STATE_RUN
value|2
name|u_int
name|nbeacons
decl_stmt|;
name|uint32_t
name|noise
index|[
literal|3
index|]
decl_stmt|;
name|uint32_t
name|rssi
index|[
literal|3
index|]
decl_stmt|;
name|uint32_t
name|ofdm_x1
decl_stmt|;
name|uint32_t
name|ofdm_mrc_x1
decl_stmt|;
name|uint32_t
name|ofdm_x4
decl_stmt|;
name|uint32_t
name|ofdm_mrc_x4
decl_stmt|;
name|uint32_t
name|cck_x4
decl_stmt|;
name|uint32_t
name|cck_mrc_x4
decl_stmt|;
name|uint32_t
name|bad_plcp_ofdm
decl_stmt|;
name|uint32_t
name|fa_ofdm
decl_stmt|;
name|uint32_t
name|bad_plcp_cck
decl_stmt|;
name|uint32_t
name|fa_cck
decl_stmt|;
name|uint32_t
name|low_fa
decl_stmt|;
name|uint32_t
name|bad_plcp_ht
decl_stmt|;
name|uint8_t
name|cck_state
decl_stmt|;
define|#
directive|define
name|IWN_CCK_STATE_INIT
value|0
define|#
directive|define
name|IWN_CCK_STATE_LOFA
value|1
define|#
directive|define
name|IWN_CCK_STATE_HIFA
value|2
name|uint8_t
name|noise_samples
index|[
literal|20
index|]
decl_stmt|;
name|u_int
name|cur_noise_sample
decl_stmt|;
name|uint8_t
name|noise_ref
decl_stmt|;
name|uint32_t
name|energy_samples
index|[
literal|10
index|]
decl_stmt|;
name|u_int
name|cur_energy_sample
decl_stmt|;
name|uint32_t
name|energy_cck
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_calib_info
block|{
name|uint8_t
modifier|*
name|buf
decl_stmt|;
name|u_int
name|len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_fw_part
block|{
specifier|const
name|uint8_t
modifier|*
name|text
decl_stmt|;
name|uint32_t
name|textsz
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|data
decl_stmt|;
name|uint32_t
name|datasz
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_fw_info
block|{
specifier|const
name|uint8_t
modifier|*
name|data
decl_stmt|;
name|size_t
name|size
decl_stmt|;
name|struct
name|iwn_fw_part
name|init
decl_stmt|;
name|struct
name|iwn_fw_part
decl|main
decl_stmt|;
name|struct
name|iwn_fw_part
name|boot
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_ops
block|{
name|int
function_decl|(
modifier|*
name|load_firmware
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|read_eeprom
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|post_alive
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|nic_config
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|update_sched
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|uint8_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_temperature
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_rssi
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|,
name|struct
name|iwn_rx_stat
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_txpower
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|,
name|struct
name|ieee80211_channel
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|init_gains
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_gains
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|add_node
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|,
name|struct
name|iwn_node_info
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|tx_done
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|,
name|struct
name|iwn_rx_desc
modifier|*
parameter_list|,
name|struct
name|iwn_rx_data
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ampdu_tx_start
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|,
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint8_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ampdu_tx_stop
function_decl|)
parameter_list|(
name|struct
name|iwn_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint8_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_vap
block|{
name|struct
name|ieee80211vap
name|iv_vap
decl_stmt|;
name|uint8_t
name|iv_ridx
decl_stmt|;
name|int
function_decl|(
modifier|*
name|iv_newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|ctx
decl_stmt|;
name|int
name|beacon_int
decl_stmt|;
name|uint8_t
name|macaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IWN_VAP
parameter_list|(
name|_vap
parameter_list|)
value|((struct iwn_vap *)(_vap))
end_define

begin_struct
struct|struct
name|iwn_softc
block|{
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|int
name|sc_debug
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|u_int
name|sc_flags
decl_stmt|;
define|#
directive|define
name|IWN_FLAG_HAS_OTPROM
value|(1<< 1)
define|#
directive|define
name|IWN_FLAG_CALIB_DONE
value|(1<< 2)
define|#
directive|define
name|IWN_FLAG_USE_ICT
value|(1<< 3)
define|#
directive|define
name|IWN_FLAG_INTERNAL_PA
value|(1<< 4)
define|#
directive|define
name|IWN_FLAG_HAS_11N
value|(1<< 6)
define|#
directive|define
name|IWN_FLAG_ENH_SENS
value|(1<< 7)
define|#
directive|define
name|IWN_FLAG_ADV_BTCOEX
value|(1<< 8)
define|#
directive|define
name|IWN_FLAG_PAN_SUPPORT
value|(1<< 9)
define|#
directive|define
name|IWN_FLAG_BTCOEX
value|(1<< 10)
name|uint8_t
name|hw_type
decl_stmt|;
comment|/* subdevice_id used to adjust configuration */
name|uint16_t
name|subdevice_id
decl_stmt|;
name|struct
name|iwn_ops
name|ops
decl_stmt|;
specifier|const
name|char
modifier|*
name|fwname
decl_stmt|;
specifier|const
name|struct
name|iwn_sensitivity_limits
modifier|*
name|limits
decl_stmt|;
name|int
name|ntxqs
decl_stmt|;
name|int
name|firstaggqueue
decl_stmt|;
name|int
name|ndmachnls
decl_stmt|;
name|uint8_t
name|broadcast_id
decl_stmt|;
name|int
name|rxonsz
decl_stmt|;
name|int
name|schedsz
decl_stmt|;
name|uint32_t
name|fw_text_maxsz
decl_stmt|;
name|uint32_t
name|fw_data_maxsz
decl_stmt|;
name|uint32_t
name|fwsz
decl_stmt|;
name|bus_size_t
name|sched_txfact_addr
decl_stmt|;
name|uint32_t
name|reset_noise_gain
decl_stmt|;
name|uint32_t
name|noise_gain
decl_stmt|;
comment|/* TX scheduler rings. */
name|struct
name|iwn_dma_info
name|sched_dma
decl_stmt|;
name|uint16_t
modifier|*
name|sched
decl_stmt|;
name|uint32_t
name|sched_base
decl_stmt|;
comment|/* "Keep Warm" page. */
name|struct
name|iwn_dma_info
name|kw_dma
decl_stmt|;
comment|/* Firmware image. */
specifier|const
name|struct
name|firmware
modifier|*
name|fw_fp
decl_stmt|;
comment|/* Firmware DMA transfer. */
name|struct
name|iwn_dma_info
name|fw_dma
decl_stmt|;
comment|/* ICT table. */
name|struct
name|iwn_dma_info
name|ict_dma
decl_stmt|;
name|uint32_t
modifier|*
name|ict
decl_stmt|;
name|int
name|ict_cur
decl_stmt|;
comment|/* TX/RX rings. */
name|struct
name|iwn_tx_ring
name|txq
index|[
name|IWN5000_NTXQUEUES
index|]
decl_stmt|;
name|struct
name|iwn_rx_ring
name|rxq
decl_stmt|;
name|struct
name|resource
modifier|*
name|mem
decl_stmt|;
name|bus_space_tag_t
name|sc_st
decl_stmt|;
name|bus_space_handle_t
name|sc_sh
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq
decl_stmt|;
name|void
modifier|*
name|sc_ih
decl_stmt|;
name|bus_size_t
name|sc_sz
decl_stmt|;
name|int
name|sc_cap_off
decl_stmt|;
comment|/* PCIe Capabilities. */
comment|/* Tasks used by the driver */
name|struct
name|task
name|sc_reinit_task
decl_stmt|;
name|struct
name|task
name|sc_radioon_task
decl_stmt|;
name|struct
name|task
name|sc_radiooff_task
decl_stmt|;
name|struct
name|task
name|sc_panic_task
decl_stmt|;
comment|/* Taskqueue */
name|struct
name|taskqueue
modifier|*
name|sc_tq
decl_stmt|;
comment|/* Calibration information */
name|struct
name|callout
name|calib_to
decl_stmt|;
name|int
name|calib_cnt
decl_stmt|;
name|struct
name|iwn_calib_state
name|calib
decl_stmt|;
name|int
name|last_calib_ticks
decl_stmt|;
name|struct
name|callout
name|watchdog_to
decl_stmt|;
name|struct
name|callout
name|ct_kill_exit_to
decl_stmt|;
name|struct
name|iwn_fw_info
name|fw
decl_stmt|;
name|struct
name|iwn_calib_info
name|calibcmd
index|[
name|IWN5000_PHY_CALIB_MAX_RESULT
index|]
decl_stmt|;
name|uint32_t
name|errptr
decl_stmt|;
name|struct
name|iwn_rx_stat
name|last_rx_stat
decl_stmt|;
name|int
name|last_rx_valid
decl_stmt|;
name|struct
name|iwn_ucode_info
name|ucode_info
decl_stmt|;
name|struct
name|iwn_rxon
name|rx_on
index|[
name|IWN_NUM_RXON_CTX
index|]
decl_stmt|;
name|struct
name|iwn_rxon
modifier|*
name|rxon
decl_stmt|;
name|int
name|ctx
decl_stmt|;
name|struct
name|ieee80211vap
modifier|*
name|ivap
index|[
name|IWN_NUM_RXON_CTX
index|]
decl_stmt|;
comment|/* General statistics */
comment|/* 	 * The statistics are reset after each channel 	 * change.  So it may be zeroed after things like 	 * a background scan. 	 * 	 * So for now, this is just a cheap hack to 	 * expose the last received statistics dump 	 * via an ioctl().  Later versions of this 	 * could expose the last 'n' messages, or just 	 * provide a pipeline for the firmware responses 	 * via something like BPF. 	 */
name|struct
name|iwn_stats
name|last_stat
decl_stmt|;
name|int
name|last_stat_valid
decl_stmt|;
name|uint8_t
name|uc_scan_progress
decl_stmt|;
name|uint32_t
name|rawtemp
decl_stmt|;
name|int
name|temp
decl_stmt|;
name|int
name|noise
decl_stmt|;
name|uint32_t
name|qfullmsk
decl_stmt|;
name|uint32_t
name|prom_base
decl_stmt|;
name|struct
name|iwn4965_eeprom_band
name|bands
index|[
name|IWN_NBANDS
index|]
decl_stmt|;
name|struct
name|iwn_eeprom_chan
name|eeprom_channels
index|[
name|IWN_NBANDS
index|]
index|[
name|IWN_MAX_CHAN_PER_BAND
index|]
decl_stmt|;
name|uint16_t
name|rfcfg
decl_stmt|;
name|uint8_t
name|calib_ver
decl_stmt|;
name|char
name|eeprom_domain
index|[
literal|4
index|]
decl_stmt|;
name|uint32_t
name|eeprom_crystal
decl_stmt|;
name|int16_t
name|eeprom_temp
decl_stmt|;
name|int16_t
name|eeprom_temp_high
decl_stmt|;
name|int16_t
name|eeprom_voltage
decl_stmt|;
name|int8_t
name|maxpwr2GHz
decl_stmt|;
name|int8_t
name|maxpwr5GHz
decl_stmt|;
name|int8_t
name|maxpwr
index|[
name|IEEE80211_CHAN_MAX
index|]
decl_stmt|;
name|uint32_t
name|tlv_feature_flags
decl_stmt|;
name|int32_t
name|temp_off
decl_stmt|;
name|uint32_t
name|int_mask
decl_stmt|;
name|uint8_t
name|ntxchains
decl_stmt|;
name|uint8_t
name|nrxchains
decl_stmt|;
name|uint8_t
name|txchainmask
decl_stmt|;
name|uint8_t
name|rxchainmask
decl_stmt|;
name|uint8_t
name|chainmask
decl_stmt|;
name|int
name|sc_tx_timer
decl_stmt|;
name|int
name|sc_scan_timer
decl_stmt|;
comment|/* Are we doing a scan? */
name|int
name|sc_is_scanning
decl_stmt|;
name|struct
name|ieee80211_tx_ampdu
modifier|*
name|qid2tap
index|[
name|IWN5000_NTXQUEUES
index|]
decl_stmt|;
name|int
function_decl|(
modifier|*
name|sc_ampdu_rx_start
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|ieee80211_rx_ampdu
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_ampdu_rx_stop
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|ieee80211_rx_ampdu
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sc_addba_request
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|ieee80211_tx_ampdu
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sc_addba_response
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|ieee80211_tx_ampdu
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_addba_stop
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|ieee80211_tx_ampdu
modifier|*
parameter_list|)
function_decl|;
name|struct
name|iwn_led_mode
name|sc_led
decl_stmt|;
name|struct
name|iwn_rx_radiotap_header
name|sc_rxtap
decl_stmt|;
name|struct
name|iwn_tx_radiotap_header
name|sc_txtap
decl_stmt|;
comment|/* The power save level originally configured by user */
name|int
name|desired_pwrsave_level
decl_stmt|;
comment|/* 	 * The current power save level, this may differ from the 	 * configured value due to thermal throttling etc. 	 */
name|int
name|current_pwrsave_level
decl_stmt|;
comment|/* For specific params */
specifier|const
name|struct
name|iwn_base_params
modifier|*
name|base_params
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IWN_LOCK_INIT
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_init(&(_sc)->sc_mtx, device_get_nameunit((_sc)->sc_dev), \ 	    MTX_NETWORK_LOCK, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|IWN_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|IWN_LOCK_ASSERT
parameter_list|(
name|_sc
parameter_list|)
value|mtx_assert(&(_sc)->sc_mtx, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|IWN_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|IWN_LOCK_DESTROY
parameter_list|(
name|_sc
parameter_list|)
value|mtx_destroy(&(_sc)->sc_mtx)
end_define

end_unit

