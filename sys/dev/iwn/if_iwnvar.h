begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 2007  *	Damien Bergamini<damien.bergamini@free.fr>  * Copyright (c) 2008 Sam Leffler, Errno Consulting  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_struct
struct|struct
name|iwn_rx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wr_ihdr
decl_stmt|;
name|uint64_t
name|wr_tsft
decl_stmt|;
name|uint8_t
name|wr_flags
decl_stmt|;
name|uint8_t
name|wr_rate
decl_stmt|;
name|uint16_t
name|wr_chan_freq
decl_stmt|;
name|uint16_t
name|wr_chan_flags
decl_stmt|;
name|int8_t
name|wr_dbm_antsignal
decl_stmt|;
name|int8_t
name|wr_dbm_antnoise
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|IWN_RX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_TSFT) |				\ 	 (1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL) |				\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTSIGNAL) |			\ 	 (1<< IEEE80211_RADIOTAP_DBM_ANTNOISE))
end_define

begin_struct
struct|struct
name|iwn_tx_radiotap_header
block|{
name|struct
name|ieee80211_radiotap_header
name|wt_ihdr
decl_stmt|;
name|uint8_t
name|wt_flags
decl_stmt|;
name|uint8_t
name|wt_rate
decl_stmt|;
name|uint16_t
name|wt_chan_freq
decl_stmt|;
name|uint16_t
name|wt_chan_flags
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|IWN_TX_RADIOTAP_PRESENT
define|\
value|((1<< IEEE80211_RADIOTAP_FLAGS) |				\ 	 (1<< IEEE80211_RADIOTAP_RATE) |				\ 	 (1<< IEEE80211_RADIOTAP_CHANNEL))
end_define

begin_struct
struct|struct
name|iwn_dma_info
block|{
name|bus_dma_tag_t
name|tag
decl_stmt|;
name|bus_dmamap_t
name|map
decl_stmt|;
name|bus_dma_segment_t
name|seg
decl_stmt|;
name|bus_addr_t
name|paddr
decl_stmt|;
name|caddr_t
name|vaddr
decl_stmt|;
name|bus_size_t
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_tx_data
block|{
name|bus_dmamap_t
name|map
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_tx_ring
block|{
name|struct
name|iwn_dma_info
name|desc_dma
decl_stmt|;
name|struct
name|iwn_dma_info
name|cmd_dma
decl_stmt|;
name|struct
name|iwn_tx_desc
modifier|*
name|desc
decl_stmt|;
name|struct
name|iwn_tx_cmd
modifier|*
name|cmd
decl_stmt|;
name|struct
name|iwn_tx_data
name|data
index|[
name|IWN_TX_RING_COUNT
index|]
decl_stmt|;
name|bus_dma_tag_t
name|data_dmat
decl_stmt|;
name|int
name|qid
decl_stmt|;
name|int
name|queued
decl_stmt|;
name|int
name|cur
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_rx_data
block|{
name|bus_dmamap_t
name|map
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_rx_ring
block|{
name|struct
name|iwn_dma_info
name|desc_dma
decl_stmt|;
name|uint32_t
modifier|*
name|desc
decl_stmt|;
name|struct
name|iwn_rx_data
name|data
index|[
name|IWN_RX_RING_COUNT
index|]
decl_stmt|;
name|bus_dma_tag_t
name|data_dmat
decl_stmt|;
name|int
name|cur
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_node
block|{
name|struct
name|ieee80211_node
name|ni
decl_stmt|;
comment|/* must be the first */
name|struct
name|ieee80211_amrr_node
name|amn
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IWN_NODE
parameter_list|(
name|_ni
parameter_list|)
value|((struct iwn_node *)(_ni))
end_define

begin_struct
struct|struct
name|iwn_calib_state
block|{
name|uint8_t
name|state
decl_stmt|;
define|#
directive|define
name|IWN_CALIB_STATE_INIT
value|0
define|#
directive|define
name|IWN_CALIB_STATE_ASSOC
value|1
define|#
directive|define
name|IWN_CALIB_STATE_RUN
value|2
name|u_int
name|nbeacons
decl_stmt|;
name|uint32_t
name|noise
index|[
literal|3
index|]
decl_stmt|;
name|uint32_t
name|rssi
index|[
literal|3
index|]
decl_stmt|;
name|uint32_t
name|corr_ofdm_x1
decl_stmt|;
name|uint32_t
name|corr_ofdm_mrc_x1
decl_stmt|;
name|uint32_t
name|corr_ofdm_x4
decl_stmt|;
name|uint32_t
name|corr_ofdm_mrc_x4
decl_stmt|;
name|uint32_t
name|corr_cck_x4
decl_stmt|;
name|uint32_t
name|corr_cck_mrc_x4
decl_stmt|;
name|uint32_t
name|bad_plcp_ofdm
decl_stmt|;
name|uint32_t
name|fa_ofdm
decl_stmt|;
name|uint32_t
name|bad_plcp_cck
decl_stmt|;
name|uint32_t
name|fa_cck
decl_stmt|;
name|uint32_t
name|low_fa
decl_stmt|;
name|uint8_t
name|cck_state
decl_stmt|;
define|#
directive|define
name|IWN_CCK_STATE_INIT
value|0
define|#
directive|define
name|IWN_CCK_STATE_LOFA
value|1
define|#
directive|define
name|IWN_CCK_STATE_HIFA
value|2
name|uint8_t
name|noise_samples
index|[
literal|20
index|]
decl_stmt|;
name|u_int
name|cur_noise_sample
decl_stmt|;
name|uint8_t
name|noise_ref
decl_stmt|;
name|uint32_t
name|energy_samples
index|[
literal|10
index|]
decl_stmt|;
name|u_int
name|cur_energy_sample
decl_stmt|;
name|uint32_t
name|energy_cck
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|iwn_vap
block|{
name|struct
name|ieee80211vap
name|iv_vap
decl_stmt|;
name|struct
name|ieee80211_amrr
name|iv_amrr
decl_stmt|;
name|struct
name|callout
name|iv_amrr_to
decl_stmt|;
name|int
function_decl|(
modifier|*
name|iv_newstate
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|enum
name|ieee80211_state
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IWN_VAP
parameter_list|(
name|_vap
parameter_list|)
value|((struct iwn_vap *)(_vap))
end_define

begin_struct
struct|struct
name|iwn_softc
block|{
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|int
name|sc_debug
decl_stmt|;
name|struct
name|callout
name|sc_timer_to
decl_stmt|;
comment|/* calib+watchdog timer */
name|int
name|sc_tx_timer
decl_stmt|;
comment|/* tx watchdog timer/counter */
specifier|const
name|struct
name|ieee80211_channel
modifier|*
name|sc_curchan
decl_stmt|;
name|struct
name|iwn_rx_radiotap_header
name|sc_rxtap
decl_stmt|;
name|int
name|sc_rxtap_len
decl_stmt|;
name|struct
name|iwn_tx_radiotap_header
name|sc_txtap
decl_stmt|;
name|int
name|sc_txtap_len
decl_stmt|;
comment|/* locks */
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
comment|/* bus */
name|device_t
name|sc_dev
decl_stmt|;
name|int
name|mem_rid
decl_stmt|;
name|int
name|irq_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|mem
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq
decl_stmt|;
comment|/* shared area */
name|struct
name|iwn_dma_info
name|shared_dma
decl_stmt|;
name|struct
name|iwn_shared
modifier|*
name|shared
decl_stmt|;
comment|/* "keep warm" page */
name|struct
name|iwn_dma_info
name|kw_dma
decl_stmt|;
comment|/* firmware image */
specifier|const
name|struct
name|firmware
modifier|*
name|fw_fp
decl_stmt|;
comment|/* firmware DMA transfer */
name|struct
name|iwn_dma_info
name|fw_dma
decl_stmt|;
comment|/* rings */
name|struct
name|iwn_tx_ring
name|txq
index|[
name|IWN_NTXQUEUES
index|]
decl_stmt|;
name|struct
name|iwn_rx_ring
name|rxq
decl_stmt|;
name|bus_space_tag_t
name|sc_st
decl_stmt|;
name|bus_space_handle_t
name|sc_sh
decl_stmt|;
name|void
modifier|*
name|sc_ih
decl_stmt|;
name|bus_size_t
name|sc_sz
decl_stmt|;
comment|/* Tasks used by the driver */
name|struct
name|task
name|sc_reinit_task
decl_stmt|;
name|struct
name|task
name|sc_radioon_task
decl_stmt|;
name|struct
name|task
name|sc_radiooff_task
decl_stmt|;
comment|/* Thermal calibration */
name|int
name|calib_cnt
decl_stmt|;
name|struct
name|iwn_calib_state
name|calib
decl_stmt|;
name|struct
name|iwn_rx_stat
name|last_rx_stat
decl_stmt|;
name|int
name|last_rx_valid
decl_stmt|;
name|struct
name|iwn_ucode_info
name|ucode_info
decl_stmt|;
name|struct
name|iwn_config
name|config
decl_stmt|;
name|uint32_t
name|rawtemp
decl_stmt|;
name|int
name|temp
decl_stmt|;
name|int
name|noise
decl_stmt|;
name|uint8_t
name|antmsk
decl_stmt|;
name|struct
name|iwn_eeprom_band
name|bands
index|[
name|IWN_NBANDS
index|]
decl_stmt|;
name|int16_t
name|eeprom_voltage
decl_stmt|;
name|int8_t
name|maxpwr2GHz
decl_stmt|;
name|int8_t
name|maxpwr5GHz
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IWN_LOCK_INIT
parameter_list|(
name|_sc
parameter_list|)
define|\
value|mtx_init(&(_sc)->sc_mtx, device_get_nameunit((_sc)->sc_dev), \ 	     MTX_NETWORK_LOCK, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|IWN_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|IWN_LOCK_ASSERT
parameter_list|(
name|_sc
parameter_list|)
value|mtx_assert(&(_sc)->sc_mtx, MA_OWNED)
end_define

begin_define
define|#
directive|define
name|IWN_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|IWN_LOCK_DESTROY
parameter_list|(
name|_sc
parameter_list|)
value|mtx_destroy(&(_sc)->sc_mtx)
end_define

end_unit

