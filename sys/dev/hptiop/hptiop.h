begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * HighPoint RR3xxx/4xxx RAID Driver for FreeBSD  * Copyright (C) 2007-2008 HighPoint Technologies, Inc. All Rights Reserved.  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_HPTIOP_H
end_ifndef

begin_define
define|#
directive|define
name|_HPTIOP_H
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|DBG
value|0
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|DBG
end_ifdef

begin_decl_stmt
name|int
name|hpt_iop_dbg_level
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|KdPrint
parameter_list|(
name|x
parameter_list|)
value|do { if (hpt_iop_dbg_level) printf x; } while (0)
end_define

begin_define
define|#
directive|define
name|HPT_ASSERT
parameter_list|(
name|x
parameter_list|)
value|assert(x)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|KdPrint
parameter_list|(
name|x
parameter_list|)
end_define

begin_define
define|#
directive|define
name|HPT_ASSERT
parameter_list|(
name|x
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|HPT_SRB_MAX_REQ_SIZE
value|600
end_define

begin_define
define|#
directive|define
name|HPT_SRB_MAX_QUEUE_SIZE
value|0x100
end_define

begin_comment
comment|/* beyond 64G mem */
end_comment

begin_define
define|#
directive|define
name|HPT_SRB_FLAG_HIGH_MEM_ACESS
value|0x1
end_define

begin_define
define|#
directive|define
name|HPT_SRB_MAX_SIZE
value|((sizeof(struct hpt_iop_srb) + 0x1f)& ~0x1f)
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|offsetof
end_ifndef

begin_define
define|#
directive|define
name|offsetof
parameter_list|(
name|TYPE
parameter_list|,
name|MEM
parameter_list|)
value|((size_t)&((TYPE*)0)->MEM)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|MIN
end_ifndef

begin_define
define|#
directive|define
name|MIN
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((a)< (b) ? (a) : (b))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|HPT_IOCTL_MAGIC
value|0xA1B2C3D4
end_define

begin_define
define|#
directive|define
name|HPT_IOCTL_MAGIC32
value|0x1A2B3C4D
end_define

begin_struct
struct|struct
name|hpt_iopmu_itl
block|{
name|u_int32_t
name|resrved0
index|[
literal|4
index|]
decl_stmt|;
name|u_int32_t
name|inbound_msgaddr0
decl_stmt|;
name|u_int32_t
name|inbound_msgaddr1
decl_stmt|;
name|u_int32_t
name|outbound_msgaddr0
decl_stmt|;
name|u_int32_t
name|outbound_msgaddr1
decl_stmt|;
name|u_int32_t
name|inbound_doorbell
decl_stmt|;
name|u_int32_t
name|inbound_intstatus
decl_stmt|;
name|u_int32_t
name|inbound_intmask
decl_stmt|;
name|u_int32_t
name|outbound_doorbell
decl_stmt|;
name|u_int32_t
name|outbound_intstatus
decl_stmt|;
name|u_int32_t
name|outbound_intmask
decl_stmt|;
name|u_int32_t
name|reserved1
index|[
literal|2
index|]
decl_stmt|;
name|u_int32_t
name|inbound_queue
decl_stmt|;
name|u_int32_t
name|outbound_queue
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IOPMU_QUEUE_EMPTY
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|IOPMU_QUEUE_MASK_HOST_BITS
value|0xf0000000
end_define

begin_define
define|#
directive|define
name|IOPMU_QUEUE_ADDR_HOST_BIT
value|0x80000000
end_define

begin_define
define|#
directive|define
name|IOPMU_QUEUE_REQUEST_SIZE_BIT
value|0x40000000
end_define

begin_define
define|#
directive|define
name|IOPMU_QUEUE_REQUEST_RESULT_BIT
value|0x40000000
end_define

begin_define
define|#
directive|define
name|IOPMU_MAX_MEM_SUPPORT_MASK_64G
value|0xfffffff000000000ull
end_define

begin_define
define|#
directive|define
name|IOPMU_MAX_MEM_SUPPORT_MASK_32G
value|0xfffffff800000000ull
end_define

begin_define
define|#
directive|define
name|IOPMU_OUTBOUND_INT_MSG0
value|1
end_define

begin_define
define|#
directive|define
name|IOPMU_OUTBOUND_INT_MSG1
value|2
end_define

begin_define
define|#
directive|define
name|IOPMU_OUTBOUND_INT_DOORBELL
value|4
end_define

begin_define
define|#
directive|define
name|IOPMU_OUTBOUND_INT_POSTQUEUE
value|8
end_define

begin_define
define|#
directive|define
name|IOPMU_OUTBOUND_INT_PCI
value|0x10
end_define

begin_define
define|#
directive|define
name|IOPMU_INBOUND_INT_MSG0
value|1
end_define

begin_define
define|#
directive|define
name|IOPMU_INBOUND_INT_MSG1
value|2
end_define

begin_define
define|#
directive|define
name|IOPMU_INBOUND_INT_DOORBELL
value|4
end_define

begin_define
define|#
directive|define
name|IOPMU_INBOUND_INT_ERROR
value|8
end_define

begin_define
define|#
directive|define
name|IOPMU_INBOUND_INT_POSTQUEUE
value|0x10
end_define

begin_define
define|#
directive|define
name|MVIOP_QUEUE_LEN
value|512
end_define

begin_struct
struct|struct
name|hpt_iopmu_mv
block|{
name|u_int32_t
name|inbound_head
decl_stmt|;
name|u_int32_t
name|inbound_tail
decl_stmt|;
name|u_int32_t
name|outbound_head
decl_stmt|;
name|u_int32_t
name|outbound_tail
decl_stmt|;
name|u_int32_t
name|inbound_msg
decl_stmt|;
name|u_int32_t
name|outbound_msg
decl_stmt|;
name|u_int32_t
name|reserve
index|[
literal|10
index|]
decl_stmt|;
name|u_int64_t
name|inbound_q
index|[
name|MVIOP_QUEUE_LEN
index|]
decl_stmt|;
name|u_int64_t
name|outbound_q
index|[
name|MVIOP_QUEUE_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hpt_iopmv_regs
block|{
name|u_int32_t
name|reserved
index|[
literal|0x20400
operator|/
literal|4
index|]
decl_stmt|;
name|u_int32_t
name|inbound_doorbell
decl_stmt|;
name|u_int32_t
name|inbound_intmask
decl_stmt|;
name|u_int32_t
name|outbound_doorbell
decl_stmt|;
name|u_int32_t
name|outbound_intmask
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MVIOP_IOCTLCFG_SIZE
value|0x800
end_define

begin_define
define|#
directive|define
name|MVIOP_MU_QUEUE_ADDR_HOST_MASK
value|(~(0x1full))
end_define

begin_define
define|#
directive|define
name|MVIOP_MU_QUEUE_ADDR_HOST_BIT
value|4
end_define

begin_define
define|#
directive|define
name|MVIOP_MU_QUEUE_ADDR_IOP_HIGH32
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|MVIOP_MU_QUEUE_REQUEST_RESULT_BIT
value|1
end_define

begin_define
define|#
directive|define
name|MVIOP_MU_QUEUE_REQUEST_RETURN_CONTEXT
value|2
end_define

begin_define
define|#
directive|define
name|MVIOP_MU_INBOUND_INT_MSG
value|1
end_define

begin_define
define|#
directive|define
name|MVIOP_MU_INBOUND_INT_POSTQUEUE
value|2
end_define

begin_define
define|#
directive|define
name|MVIOP_MU_OUTBOUND_INT_MSG
value|1
end_define

begin_define
define|#
directive|define
name|MVIOP_MU_OUTBOUND_INT_POSTQUEUE
value|2
end_define

begin_define
define|#
directive|define
name|MVIOP_CMD_TYPE_GET_CONFIG
value|(1<< 5)
end_define

begin_define
define|#
directive|define
name|MVIOP_CMD_TYPE_SET_CONFIG
value|(1<< 6)
end_define

begin_define
define|#
directive|define
name|MVIOP_CMD_TYPE_SCSI
value|(1<< 7)
end_define

begin_define
define|#
directive|define
name|MVIOP_CMD_TYPE_IOCTL
value|(1<< 8)
end_define

begin_define
define|#
directive|define
name|MVIOP_CMD_TYPE_BLOCK
value|(1<< 9)
end_define

begin_define
define|#
directive|define
name|MVIOP_REQUEST_NUMBER_START_BIT
value|16
end_define

begin_enum
enum|enum
name|hpt_iopmu_message
block|{
comment|/* host-to-iop messages */
name|IOPMU_INBOUND_MSG0_NOP
init|=
literal|0
block|,
name|IOPMU_INBOUND_MSG0_RESET
block|,
name|IOPMU_INBOUND_MSG0_FLUSH
block|,
name|IOPMU_INBOUND_MSG0_SHUTDOWN
block|,
name|IOPMU_INBOUND_MSG0_STOP_BACKGROUND_TASK
block|,
name|IOPMU_INBOUND_MSG0_START_BACKGROUND_TASK
block|,
name|IOPMU_INBOUND_MSG0_MAX
init|=
literal|0xff
block|,
comment|/* iop-to-host messages */
name|IOPMU_OUTBOUND_MSG0_REGISTER_DEVICE_0
init|=
literal|0x100
block|,
name|IOPMU_OUTBOUND_MSG0_REGISTER_DEVICE_MAX
init|=
literal|0x1ff
block|,
name|IOPMU_OUTBOUND_MSG0_UNREGISTER_DEVICE_0
init|=
literal|0x200
block|,
name|IOPMU_OUTBOUND_MSG0_UNREGISTER_DEVICE_MAX
init|=
literal|0x2ff
block|,
name|IOPMU_OUTBOUND_MSG0_REVALIDATE_DEVICE_0
init|=
literal|0x300
block|,
name|IOPMU_OUTBOUND_MSG0_REVALIDATE_DEVICE_MAX
init|=
literal|0x3ff
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|IOP_REQUEST_FLAG_SYNC_REQUEST
value|1
end_define

begin_define
define|#
directive|define
name|IOP_REQUEST_FLAG_BIST_REQUEST
value|2
end_define

begin_define
define|#
directive|define
name|IOP_REQUEST_FLAG_REMAPPED
value|4
end_define

begin_define
define|#
directive|define
name|IOP_REQUEST_FLAG_OUTPUT_CONTEXT
value|8
end_define

begin_enum
enum|enum
name|hpt_iop_request_type
block|{
name|IOP_REQUEST_TYPE_GET_CONFIG
init|=
literal|0
block|,
name|IOP_REQUEST_TYPE_SET_CONFIG
block|,
name|IOP_REQUEST_TYPE_BLOCK_COMMAND
block|,
name|IOP_REQUEST_TYPE_SCSI_COMMAND
block|,
name|IOP_REQUEST_TYPE_IOCTL_COMMAND
block|,
name|IOP_REQUEST_TYPE_MAX
block|}
enum|;
end_enum

begin_enum
enum|enum
name|hpt_iop_result_type
block|{
name|IOP_RESULT_PENDING
init|=
literal|0
block|,
name|IOP_RESULT_SUCCESS
block|,
name|IOP_RESULT_FAIL
block|,
name|IOP_RESULT_BUSY
block|,
name|IOP_RESULT_RESET
block|,
name|IOP_RESULT_INVALID_REQUEST
block|,
name|IOP_RESULT_BAD_TARGET
block|,
name|IOP_RESULT_CHECK_CONDITION
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|hpt_iop_request_header
block|{
name|u_int32_t
name|size
decl_stmt|;
name|u_int32_t
name|type
decl_stmt|;
name|u_int32_t
name|flags
decl_stmt|;
name|u_int32_t
name|result
decl_stmt|;
name|u_int64_t
name|context
decl_stmt|;
comment|/* host context */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hpt_iop_request_get_config
block|{
name|struct
name|hpt_iop_request_header
name|header
decl_stmt|;
name|u_int32_t
name|interface_version
decl_stmt|;
name|u_int32_t
name|firmware_version
decl_stmt|;
name|u_int32_t
name|max_requests
decl_stmt|;
name|u_int32_t
name|request_size
decl_stmt|;
name|u_int32_t
name|max_sg_count
decl_stmt|;
name|u_int32_t
name|data_transfer_length
decl_stmt|;
name|u_int32_t
name|alignment_mask
decl_stmt|;
name|u_int32_t
name|max_devices
decl_stmt|;
name|u_int32_t
name|sdram_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hpt_iop_request_set_config
block|{
name|struct
name|hpt_iop_request_header
name|header
decl_stmt|;
name|u_int32_t
name|iop_id
decl_stmt|;
name|u_int16_t
name|vbus_id
decl_stmt|;
name|u_int16_t
name|max_host_request_size
decl_stmt|;
name|u_int32_t
name|reserve
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hpt_iopsg
block|{
name|u_int32_t
name|size
decl_stmt|;
name|u_int32_t
name|eot
decl_stmt|;
comment|/* non-zero: end of table */
name|u_int64_t
name|pci_address
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IOP_BLOCK_COMMAND_READ
value|1
end_define

begin_define
define|#
directive|define
name|IOP_BLOCK_COMMAND_WRITE
value|2
end_define

begin_define
define|#
directive|define
name|IOP_BLOCK_COMMAND_VERIFY
value|3
end_define

begin_define
define|#
directive|define
name|IOP_BLOCK_COMMAND_FLUSH
value|4
end_define

begin_define
define|#
directive|define
name|IOP_BLOCK_COMMAND_SHUTDOWN
value|5
end_define

begin_struct
struct|struct
name|hpt_iop_request_block_command
block|{
name|struct
name|hpt_iop_request_header
name|header
decl_stmt|;
name|u_int8_t
name|channel
decl_stmt|;
name|u_int8_t
name|target
decl_stmt|;
name|u_int8_t
name|lun
decl_stmt|;
name|u_int8_t
name|pad1
decl_stmt|;
name|u_int16_t
name|command
decl_stmt|;
comment|/* IOP_BLOCK_COMMAND_{READ,WRITE} */
name|u_int16_t
name|sectors
decl_stmt|;
name|u_int64_t
name|lba
decl_stmt|;
name|struct
name|hpt_iopsg
name|sg_list
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hpt_iop_request_scsi_command
block|{
name|struct
name|hpt_iop_request_header
name|header
decl_stmt|;
name|u_int8_t
name|channel
decl_stmt|;
name|u_int8_t
name|target
decl_stmt|;
name|u_int8_t
name|lun
decl_stmt|;
name|u_int8_t
name|pad1
decl_stmt|;
name|u_int8_t
name|cdb
index|[
literal|16
index|]
decl_stmt|;
name|u_int32_t
name|dataxfer_length
decl_stmt|;
name|struct
name|hpt_iopsg
name|sg_list
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hpt_iop_request_ioctl_command
block|{
name|struct
name|hpt_iop_request_header
name|header
decl_stmt|;
name|u_int32_t
name|ioctl_code
decl_stmt|;
name|u_int32_t
name|inbuf_size
decl_stmt|;
name|u_int32_t
name|outbuf_size
decl_stmt|;
name|u_int32_t
name|bytes_returned
decl_stmt|;
name|u_int8_t
name|buf
index|[
literal|1
index|]
decl_stmt|;
comment|/* out data should be put at buf[(inbuf_size+3)&~3] */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hpt_iop_ioctl_param
block|{
name|u_int32_t
name|Magic
decl_stmt|;
comment|/* used to check if it's a valid ioctl packet */
name|u_int32_t
name|dwIoControlCode
decl_stmt|;
comment|/* operation control code */
name|unsigned
name|long
name|lpInBuffer
decl_stmt|;
comment|/* input data buffer */
name|u_int32_t
name|nInBufferSize
decl_stmt|;
comment|/* size of input data buffer */
name|unsigned
name|long
name|lpOutBuffer
decl_stmt|;
comment|/* output data buffer */
name|u_int32_t
name|nOutBufferSize
decl_stmt|;
comment|/* size of output data buffer */
name|unsigned
name|long
name|lpBytesReturned
decl_stmt|;
comment|/* count of HPT_U8s returned */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|HPT_IOCTL_FLAG_OPEN
value|1
end_define

begin_define
define|#
directive|define
name|HPT_CTL_CODE_BSD_TO_IOP
parameter_list|(
name|x
parameter_list|)
value|((x)-0xff00)
end_define

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>
literal|503000
end_if

begin_typedef
typedef|typedef
name|struct
name|cdev
modifier|*
name|ioctl_dev_t
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|dev_t
name|ioctl_dev_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
end_if

begin_typedef
typedef|typedef
name|struct
name|thread
modifier|*
name|ioctl_thread_t
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|struct
name|proc
modifier|*
name|ioctl_thread_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|hpt_iop_hba
block|{
name|struct
name|hptiop_adapter_ops
modifier|*
name|ops
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|struct
name|hpt_iopmu_itl
modifier|*
name|mu
decl_stmt|;
block|}
name|itl
struct|;
struct|struct
block|{
name|struct
name|hpt_iopmv_regs
modifier|*
name|regs
decl_stmt|;
name|struct
name|hpt_iopmu_mv
modifier|*
name|mu
decl_stmt|;
block|}
name|mv
struct|;
block|}
name|u
union|;
name|struct
name|hpt_iop_hba
modifier|*
name|next
decl_stmt|;
name|u_int32_t
name|firmware_version
decl_stmt|;
name|u_int32_t
name|interface_version
decl_stmt|;
name|u_int32_t
name|max_devices
decl_stmt|;
name|u_int32_t
name|max_requests
decl_stmt|;
name|u_int32_t
name|max_request_size
decl_stmt|;
name|u_int32_t
name|max_sg_count
decl_stmt|;
name|u_int32_t
name|msg_done
decl_stmt|;
name|device_t
name|pcidev
decl_stmt|;
name|u_int32_t
name|pciunit
decl_stmt|;
name|ioctl_dev_t
name|ioctl_dev
decl_stmt|;
name|bus_dma_tag_t
name|parent_dmat
decl_stmt|;
name|bus_dma_tag_t
name|io_dmat
decl_stmt|;
name|bus_dma_tag_t
name|srb_dmat
decl_stmt|;
name|bus_dma_tag_t
name|ctlcfg_dmat
decl_stmt|;
name|bus_dmamap_t
name|srb_dmamap
decl_stmt|;
name|bus_dmamap_t
name|ctlcfg_dmamap
decl_stmt|;
name|struct
name|resource
modifier|*
name|bar0_res
decl_stmt|;
name|bus_space_tag_t
name|bar0t
decl_stmt|;
name|bus_space_handle_t
name|bar0h
decl_stmt|;
name|int
name|bar0_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|bar2_res
decl_stmt|;
name|bus_space_tag_t
name|bar2t
decl_stmt|;
name|bus_space_handle_t
name|bar2h
decl_stmt|;
name|int
name|bar2_rid
decl_stmt|;
comment|/* to release */
name|u_int8_t
modifier|*
name|uncached_ptr
decl_stmt|;
name|void
modifier|*
name|ctlcfg_ptr
decl_stmt|;
comment|/* for scsi request block */
name|struct
name|hpt_iop_srb
modifier|*
name|srb_list
decl_stmt|;
comment|/* for interrupt */
name|struct
name|resource
modifier|*
name|irq_res
decl_stmt|;
name|void
modifier|*
name|irq_handle
decl_stmt|;
comment|/* for ioctl and set/get config */
name|struct
name|resource
modifier|*
name|ctlcfg_res
decl_stmt|;
name|void
modifier|*
name|ctlcfg_handle
decl_stmt|;
name|u_int64_t
name|ctlcfgcmd_phy
decl_stmt|;
name|u_int32_t
name|config_done
decl_stmt|;
comment|/* other resources */
name|struct
name|cam_sim
modifier|*
name|sim
decl_stmt|;
name|struct
name|cam_path
modifier|*
name|path
decl_stmt|;
name|void
modifier|*
name|req
decl_stmt|;
if|#
directive|if
operator|(
name|__FreeBSD_version
operator|>=
literal|500000
operator|)
name|struct
name|mtx
name|lock
decl_stmt|;
else|#
directive|else
name|int
name|hpt_splx
decl_stmt|;
endif|#
directive|endif
define|#
directive|define
name|HPT_IOCTL_FLAG_OPEN
value|1
name|u_int32_t
name|flag
decl_stmt|;
name|struct
name|hpt_iop_srb
modifier|*
name|srb
index|[
name|HPT_SRB_MAX_QUEUE_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hptiop_adapter_ops
block|{
name|int
function_decl|(
modifier|*
name|iop_wait_ready
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|,
name|u_int32_t
name|millisec
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|internal_memalloc
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|internal_memfree
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|alloc_pci_res
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|release_pci_res
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|enable_intr
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|disable_intr
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_config
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|,
name|struct
name|hpt_iop_request_get_config
modifier|*
name|config
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_config
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|,
name|struct
name|hpt_iop_request_set_config
modifier|*
name|config
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|iop_intr
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|post_msg
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|,
name|u_int32_t
name|msg
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|post_req
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|,
name|struct
name|hpt_iop_srb
modifier|*
name|srb
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|segs
parameter_list|,
name|int
name|nsegs
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|do_ioctl
function_decl|)
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|,
name|struct
name|hpt_iop_ioctl_param
modifier|*
name|pParams
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hpt_iop_srb
block|{
name|u_int8_t
name|req
index|[
name|HPT_SRB_MAX_REQ_SIZE
index|]
decl_stmt|;
name|struct
name|hpt_iop_hba
modifier|*
name|hba
decl_stmt|;
name|union
name|ccb
modifier|*
name|ccb
decl_stmt|;
name|struct
name|hpt_iop_srb
modifier|*
name|next
decl_stmt|;
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|u_int64_t
name|phy_addr
decl_stmt|;
name|u_int32_t
name|srb_flag
decl_stmt|;
name|int
name|index
decl_stmt|;
block|}
struct|;
end_struct

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
end_if

begin_define
define|#
directive|define
name|hptiop_lock_adapter
parameter_list|(
name|hba
parameter_list|)
value|mtx_lock(&(hba)->lock)
end_define

begin_define
define|#
directive|define
name|hptiop_unlock_adapter
parameter_list|(
name|hba
parameter_list|)
value|mtx_unlock(&(hba)->lock)
end_define

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
name|__inline
name|void
name|hptiop_lock_adapter
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|)
block|{
name|hba
operator|->
name|hpt_splx
operator|=
name|splcam
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|hptiop_unlock_adapter
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|)
block|{
name|splx
argument_list|(
name|hba
operator|->
name|hpt_splx
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|HPT_OSM_TIMEOUT
value|(20*hz)
end_define

begin_comment
comment|/* timeout value for OS commands */
end_comment

begin_define
define|#
directive|define
name|HPT_DO_IOCONTROL
value|_IOW('H', 0, struct hpt_iop_ioctl_param)
end_define

begin_define
define|#
directive|define
name|HPT_SCAN_BUS
value|_IO('H', 1)
end_define

begin_function
specifier|static
name|__inline
name|int
name|hptiop_sleep
parameter_list|(
name|struct
name|hpt_iop_hba
modifier|*
name|hba
parameter_list|,
name|void
modifier|*
name|ident
parameter_list|,
name|int
name|priority
parameter_list|,
specifier|const
name|char
modifier|*
name|wmesg
parameter_list|,
name|int
name|timo
parameter_list|)
block|{
name|int
name|retval
decl_stmt|;
if|#
directive|if
name|__FreeBSD_version
operator|>=
literal|500000
name|retval
operator|=
name|msleep
argument_list|(
name|ident
argument_list|,
operator|&
name|hba
operator|->
name|lock
argument_list|,
name|priority
argument_list|,
name|wmesg
argument_list|,
name|timo
argument_list|)
expr_stmt|;
else|#
directive|else
name|asleep
argument_list|(
name|ident
argument_list|,
name|priority
argument_list|,
name|wmesg
argument_list|,
name|timo
argument_list|)
expr_stmt|;
name|hptiop_unlock_adapter
argument_list|(
name|hba
argument_list|)
expr_stmt|;
name|retval
operator|=
name|await
argument_list|(
name|priority
argument_list|,
name|timo
argument_list|)
expr_stmt|;
name|hptiop_lock_adapter
argument_list|(
name|hba
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|retval
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|<
literal|501000
end_if

begin_define
define|#
directive|define
name|READ_16
value|0x88
end_define

begin_define
define|#
directive|define
name|WRITE_16
value|0x8a
end_define

begin_define
define|#
directive|define
name|SERVICE_ACTION_IN
value|0x9e
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|HPT_DEV_MAJOR
value|200
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

