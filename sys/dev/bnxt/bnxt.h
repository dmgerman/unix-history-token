begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Broadcom NetXtreme-C/E network driver.  *  * Copyright (c) 2016 Broadcom, All Rights Reserved.  * The term Broadcom refers to Broadcom Limited and/or its subsidiaries  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS'  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  * THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|_BNXT_H
end_ifndef

begin_define
define|#
directive|define
name|_BNXT_H
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus_dma.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/sysctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/taskqueue.h>
end_include

begin_include
include|#
directive|include
file|<net/ethernet.h>
end_include

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_include
include|#
directive|include
file|<net/if_var.h>
end_include

begin_include
include|#
directive|include
file|<net/iflib.h>
end_include

begin_include
include|#
directive|include
file|"hsi_struct_def.h"
end_include

begin_comment
comment|/* PCI IDs */
end_comment

begin_define
define|#
directive|define
name|BROADCOM_VENDOR_ID
value|0x14E4
end_define

begin_define
define|#
directive|define
name|BCM57301
value|0x16c8
end_define

begin_define
define|#
directive|define
name|BCM57302
value|0x16c9
end_define

begin_define
define|#
directive|define
name|BCM57304
value|0x16ca
end_define

begin_define
define|#
directive|define
name|BCM57311
value|0x16ce
end_define

begin_define
define|#
directive|define
name|BCM57312
value|0x16cf
end_define

begin_define
define|#
directive|define
name|BCM57314
value|0x16df
end_define

begin_define
define|#
directive|define
name|BCM57402
value|0x16d0
end_define

begin_define
define|#
directive|define
name|BCM57402_NPAR
value|0x16d4
end_define

begin_define
define|#
directive|define
name|BCM57404
value|0x16d1
end_define

begin_define
define|#
directive|define
name|BCM57404_NPAR
value|0x16e7
end_define

begin_define
define|#
directive|define
name|BCM57406
value|0x16d2
end_define

begin_define
define|#
directive|define
name|BCM57406_NPAR
value|0x16e8
end_define

begin_define
define|#
directive|define
name|BCM57407
value|0x16d5
end_define

begin_define
define|#
directive|define
name|BCM57407_NPAR
value|0x16ea
end_define

begin_define
define|#
directive|define
name|BCM57407_SFP
value|0x16e9
end_define

begin_define
define|#
directive|define
name|BCM57412
value|0x16d6
end_define

begin_define
define|#
directive|define
name|BCM57412_NPAR1
value|0x16de
end_define

begin_define
define|#
directive|define
name|BCM57412_NPAR2
value|0x16eb
end_define

begin_define
define|#
directive|define
name|BCM57414
value|0x16d7
end_define

begin_define
define|#
directive|define
name|BCM57414_NPAR1
value|0x16ec
end_define

begin_define
define|#
directive|define
name|BCM57414_NPAR2
value|0x16ed
end_define

begin_define
define|#
directive|define
name|BCM57416
value|0x16d8
end_define

begin_define
define|#
directive|define
name|BCM57416_NPAR1
value|0x16ee
end_define

begin_define
define|#
directive|define
name|BCM57416_NPAR2
value|0x16ef
end_define

begin_define
define|#
directive|define
name|BCM57416_SFP
value|0x16e3
end_define

begin_define
define|#
directive|define
name|BCM57417
value|0x16d9
end_define

begin_define
define|#
directive|define
name|BCM57417_NPAR1
value|0x16c0
end_define

begin_define
define|#
directive|define
name|BCM57417_NPAR2
value|0x16cc
end_define

begin_define
define|#
directive|define
name|BCM57417_SFP
value|0x16e2
end_define

begin_define
define|#
directive|define
name|BCM58700
value|0x16cd
end_define

begin_define
define|#
directive|define
name|NETXTREME_C_VF1
value|0x16cb
end_define

begin_define
define|#
directive|define
name|NETXTREME_C_VF2
value|0x16e1
end_define

begin_define
define|#
directive|define
name|NETXTREME_C_VF3
value|0x16e5
end_define

begin_define
define|#
directive|define
name|NETXTREME_E_VF1
value|0x16c1
end_define

begin_define
define|#
directive|define
name|NETXTREME_E_VF2
value|0x16d3
end_define

begin_define
define|#
directive|define
name|NETXTREME_E_VF3
value|0x16dc
end_define

begin_define
define|#
directive|define
name|CSUM_OFFLOAD
value|(CSUM_IP_TSO|CSUM_IP6_TSO|CSUM_IP| \ 				 CSUM_IP_UDP|CSUM_IP_TCP|CSUM_IP_SCTP| \ 				 CSUM_IP6_UDP|CSUM_IP6_TCP|CSUM_IP6_SCTP)
end_define

begin_define
define|#
directive|define
name|BNXT_MAX_MTU
value|9000
end_define

begin_define
define|#
directive|define
name|BNXT_RSS_HASH_TYPE_TCPV4
value|0
end_define

begin_define
define|#
directive|define
name|BNXT_RSS_HASH_TYPE_UDPV4
value|1
end_define

begin_define
define|#
directive|define
name|BNXT_RSS_HASH_TYPE_IPV4
value|2
end_define

begin_define
define|#
directive|define
name|BNXT_RSS_HASH_TYPE_TCPV6
value|3
end_define

begin_define
define|#
directive|define
name|BNXT_RSS_HASH_TYPE_UDPV6
value|4
end_define

begin_define
define|#
directive|define
name|BNXT_RSS_HASH_TYPE_IPV6
value|5
end_define

begin_define
define|#
directive|define
name|BNXT_GET_RSS_PROFILE_ID
parameter_list|(
name|rss_hash_type
parameter_list|)
value|((rss_hash_type>> 1)& 0x1F)
end_define

begin_comment
comment|/* Completion related defines */
end_comment

begin_define
define|#
directive|define
name|CMP_VALID
parameter_list|(
name|cmp
parameter_list|,
name|v_bit
parameter_list|)
define|\
value|((!!(((struct cmpl_base *)(cmp))->info3_v& htole32(CMPL_BASE_V))) == !!(v_bit) )
end_define

begin_define
define|#
directive|define
name|NEXT_CP_CONS_V
parameter_list|(
name|ring
parameter_list|,
name|cons
parameter_list|,
name|v_bit
parameter_list|)
value|do {				    \ 	if (__predict_false(++(cons) == (ring)->ring_size))		    \ 		((cons) = 0, (v_bit) = !v_bit);				    \ } while (0)
end_define

begin_define
define|#
directive|define
name|RING_NEXT
parameter_list|(
name|ring
parameter_list|,
name|idx
parameter_list|)
value|(__predict_false(idx + 1 == (ring)->ring_size) ? \ 								0 : idx + 1)
end_define

begin_define
define|#
directive|define
name|CMPL_PREFETCH_NEXT
parameter_list|(
name|cpr
parameter_list|,
name|idx
parameter_list|)
define|\
value|__builtin_prefetch(&((struct cmpl_base *)(cpr)->ring.vaddr)[((idx) +\ 	    (CACHE_LINE_SIZE / sizeof(struct cmpl_base)))&		    \ 	    ((cpr)->ring.ring_size - 1)])
end_define

begin_comment
comment|/*  * If we update the index, a write barrier is needed after the write to ensure  * the completion ring has space before the RX/TX ring does.  Since we can't  * make the RX and AG doorbells covered by the same barrier without remapping  * MSI-X vectors, we create the barrier over the enture doorbell bar.  * TODO: Remap the MSI-X vectors to allow a barrier to only cover the doorbells  *       for a single ring group.  *  * A barrier of just the size of the write is used to ensure the ordering  * remains correct and no writes are lost.  */
end_comment

begin_define
define|#
directive|define
name|BNXT_CP_DISABLE_DB
parameter_list|(
name|ring
parameter_list|)
value|do {					    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell, 4,	    \ 	    BUS_SPACE_BARRIER_WRITE);					    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, 0,			    \ 	    (ring)->softc->doorbell_bar.size, BUS_SPACE_BARRIER_WRITE);	    \ 	bus_space_write_4((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell,	    \ 	    htole32(CMPL_DOORBELL_KEY_CMPL | CMPL_DOORBELL_MASK));	    \ } while (0)
end_define

begin_define
define|#
directive|define
name|BNXT_CP_ENABLE_DB
parameter_list|(
name|ring
parameter_list|)
value|do {					    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell, 4,	    \ 	    BUS_SPACE_BARRIER_WRITE);					    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, 0,			    \ 	    (ring)->softc->doorbell_bar.size, BUS_SPACE_BARRIER_WRITE);	    \ 	bus_space_write_4((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell,	    \ 	    htole32(CMPL_DOORBELL_KEY_CMPL));				    \ } while (0)
end_define

begin_define
define|#
directive|define
name|BNXT_CP_IDX_ENABLE_DB
parameter_list|(
name|ring
parameter_list|,
name|cons
parameter_list|)
value|do {				    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell, 4,	    \ 	    BUS_SPACE_BARRIER_WRITE);					    \ 	bus_space_write_4((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell,	    \ 	    htole32(CMPL_DOORBELL_KEY_CMPL | CMPL_DOORBELL_IDX_VALID |	    \ 	    (cons)));							    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, 0,			    \ 	    (ring)->softc->doorbell_bar.size, BUS_SPACE_BARRIER_WRITE);	    \ } while (0)
end_define

begin_define
define|#
directive|define
name|BNXT_CP_IDX_DISABLE_DB
parameter_list|(
name|ring
parameter_list|,
name|cons
parameter_list|)
value|do {				    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell, 4,	    \ 	    BUS_SPACE_BARRIER_WRITE);					    \ 	bus_space_write_4((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell,	    \ 	    htole32(CMPL_DOORBELL_KEY_CMPL | CMPL_DOORBELL_IDX_VALID |	    \ 	    CMPL_DOORBELL_MASK | (cons)));				    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, 0,			    \ 	    (ring)->softc->doorbell_bar.size, BUS_SPACE_BARRIER_WRITE);	    \ } while (0)
end_define

begin_define
define|#
directive|define
name|BNXT_TX_DB
parameter_list|(
name|ring
parameter_list|,
name|idx
parameter_list|)
value|do {					    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell, 4,	    \ 	    BUS_SPACE_BARRIER_WRITE);					    \ 	bus_space_write_4(						    \ 	    (ring)->softc->doorbell_bar.tag,				    \ 	    (ring)->softc->doorbell_bar.handle,				    \ 	    (ring)->doorbell, htole32(TX_DOORBELL_KEY_TX | (idx)));	    \ } while (0)
end_define

begin_define
define|#
directive|define
name|BNXT_RX_DB
parameter_list|(
name|ring
parameter_list|,
name|idx
parameter_list|)
value|do {					    \ 	bus_space_barrier((ring)->softc->doorbell_bar.tag,		    \ 	    (ring)->softc->doorbell_bar.handle, (ring)->doorbell, 4,	    \ 	    BUS_SPACE_BARRIER_WRITE);					    \ 	bus_space_write_4(						    \ 	    (ring)->softc->doorbell_bar.tag,				    \ 	    (ring)->softc->doorbell_bar.handle,				    \ 	    (ring)->doorbell, htole32(RX_DOORBELL_KEY_RX | (idx)));	    \ } while (0)
end_define

begin_comment
comment|/* Lock macros */
end_comment

begin_define
define|#
directive|define
name|BNXT_HWRM_LOCK_INIT
parameter_list|(
name|_softc
parameter_list|,
name|_name
parameter_list|)
define|\
value|mtx_init(&(_softc)->hwrm_lock, _name, "BNXT HWRM Lock", MTX_DEF)
end_define

begin_define
define|#
directive|define
name|BNXT_HWRM_LOCK
parameter_list|(
name|_softc
parameter_list|)
value|mtx_lock(&(_softc)->hwrm_lock)
end_define

begin_define
define|#
directive|define
name|BNXT_HWRM_UNLOCK
parameter_list|(
name|_softc
parameter_list|)
value|mtx_unlock(&(_softc)->hwrm_lock)
end_define

begin_define
define|#
directive|define
name|BNXT_HWRM_LOCK_DESTROY
parameter_list|(
name|_softc
parameter_list|)
value|mtx_destroy(&(_softc)->hwrm_lock)
end_define

begin_define
define|#
directive|define
name|BNXT_HWRM_LOCK_ASSERT
parameter_list|(
name|_softc
parameter_list|)
value|mtx_assert(&(_softc)->hwrm_lock,    \     MA_OWNED)
end_define

begin_comment
comment|/* Chip info */
end_comment

begin_define
define|#
directive|define
name|BNXT_TSO_SIZE
value|UINT16_MAX
end_define

begin_comment
comment|/* NVRAM access */
end_comment

begin_enum
enum|enum
name|bnxt_nvm_directory_type
block|{
name|BNX_DIR_TYPE_UNUSED
init|=
literal|0
block|,
name|BNX_DIR_TYPE_PKG_LOG
init|=
literal|1
block|,
name|BNX_DIR_TYPE_UPDATE
init|=
literal|2
block|,
name|BNX_DIR_TYPE_CHIMP_PATCH
init|=
literal|3
block|,
name|BNX_DIR_TYPE_BOOTCODE
init|=
literal|4
block|,
name|BNX_DIR_TYPE_VPD
init|=
literal|5
block|,
name|BNX_DIR_TYPE_EXP_ROM_MBA
init|=
literal|6
block|,
name|BNX_DIR_TYPE_AVS
init|=
literal|7
block|,
name|BNX_DIR_TYPE_PCIE
init|=
literal|8
block|,
name|BNX_DIR_TYPE_PORT_MACRO
init|=
literal|9
block|,
name|BNX_DIR_TYPE_APE_FW
init|=
literal|10
block|,
name|BNX_DIR_TYPE_APE_PATCH
init|=
literal|11
block|,
name|BNX_DIR_TYPE_KONG_FW
init|=
literal|12
block|,
name|BNX_DIR_TYPE_KONG_PATCH
init|=
literal|13
block|,
name|BNX_DIR_TYPE_BONO_FW
init|=
literal|14
block|,
name|BNX_DIR_TYPE_BONO_PATCH
init|=
literal|15
block|,
name|BNX_DIR_TYPE_TANG_FW
init|=
literal|16
block|,
name|BNX_DIR_TYPE_TANG_PATCH
init|=
literal|17
block|,
name|BNX_DIR_TYPE_BOOTCODE_2
init|=
literal|18
block|,
name|BNX_DIR_TYPE_CCM
init|=
literal|19
block|,
name|BNX_DIR_TYPE_PCI_CFG
init|=
literal|20
block|,
name|BNX_DIR_TYPE_TSCF_UCODE
init|=
literal|21
block|,
name|BNX_DIR_TYPE_ISCSI_BOOT
init|=
literal|22
block|,
name|BNX_DIR_TYPE_ISCSI_BOOT_IPV6
init|=
literal|24
block|,
name|BNX_DIR_TYPE_ISCSI_BOOT_IPV4N6
init|=
literal|25
block|,
name|BNX_DIR_TYPE_ISCSI_BOOT_CFG6
init|=
literal|26
block|,
name|BNX_DIR_TYPE_EXT_PHY
init|=
literal|27
block|,
name|BNX_DIR_TYPE_SHARED_CFG
init|=
literal|40
block|,
name|BNX_DIR_TYPE_PORT_CFG
init|=
literal|41
block|,
name|BNX_DIR_TYPE_FUNC_CFG
init|=
literal|42
block|,
name|BNX_DIR_TYPE_MGMT_CFG
init|=
literal|48
block|,
name|BNX_DIR_TYPE_MGMT_DATA
init|=
literal|49
block|,
name|BNX_DIR_TYPE_MGMT_WEB_DATA
init|=
literal|50
block|,
name|BNX_DIR_TYPE_MGMT_WEB_META
init|=
literal|51
block|,
name|BNX_DIR_TYPE_MGMT_EVENT_LOG
init|=
literal|52
block|,
name|BNX_DIR_TYPE_MGMT_AUDIT_LOG
init|=
literal|53
block|}
enum|;
end_enum

begin_enum
enum|enum
name|bnxnvm_pkglog_field_index
block|{
name|BNX_PKG_LOG_FIELD_IDX_INSTALLED_TIMESTAMP
init|=
literal|0
block|,
name|BNX_PKG_LOG_FIELD_IDX_PKG_DESCRIPTION
init|=
literal|1
block|,
name|BNX_PKG_LOG_FIELD_IDX_PKG_VERSION
init|=
literal|2
block|,
name|BNX_PKG_LOG_FIELD_IDX_PKG_TIMESTAMP
init|=
literal|3
block|,
name|BNX_PKG_LOG_FIELD_IDX_PKG_CHECKSUM
init|=
literal|4
block|,
name|BNX_PKG_LOG_FIELD_IDX_INSTALLED_ITEMS
init|=
literal|5
block|,
name|BNX_PKG_LOG_FIELD_IDX_INSTALLED_MASK
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|BNX_DIR_ORDINAL_FIRST
value|0
end_define

begin_define
define|#
directive|define
name|BNX_DIR_EXT_NONE
value|0
end_define

begin_struct
struct|struct
name|bnxt_bar_info
block|{
name|struct
name|resource
modifier|*
name|res
decl_stmt|;
name|bus_space_tag_t
name|tag
decl_stmt|;
name|bus_space_handle_t
name|handle
decl_stmt|;
name|bus_size_t
name|size
decl_stmt|;
name|int
name|rid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_link_info
block|{
name|uint8_t
name|media_type
decl_stmt|;
name|uint8_t
name|transceiver
decl_stmt|;
name|uint8_t
name|phy_addr
decl_stmt|;
name|uint8_t
name|phy_link_status
decl_stmt|;
name|uint8_t
name|wire_speed
decl_stmt|;
name|uint8_t
name|loop_back
decl_stmt|;
name|uint8_t
name|link_up
decl_stmt|;
name|uint8_t
name|last_link_up
decl_stmt|;
name|uint8_t
name|duplex
decl_stmt|;
name|uint8_t
name|last_duplex
decl_stmt|;
name|uint8_t
name|pause
decl_stmt|;
name|uint8_t
name|last_pause
decl_stmt|;
name|uint8_t
name|auto_pause
decl_stmt|;
name|uint8_t
name|force_pause
decl_stmt|;
name|uint8_t
name|duplex_setting
decl_stmt|;
name|uint8_t
name|auto_mode
decl_stmt|;
define|#
directive|define
name|PHY_VER_LEN
value|3
name|uint8_t
name|phy_ver
index|[
name|PHY_VER_LEN
index|]
decl_stmt|;
name|uint8_t
name|phy_type
decl_stmt|;
name|uint16_t
name|link_speed
decl_stmt|;
name|uint16_t
name|support_speeds
decl_stmt|;
name|uint16_t
name|auto_link_speeds
decl_stmt|;
name|uint16_t
name|auto_link_speed
decl_stmt|;
name|uint16_t
name|force_link_speed
decl_stmt|;
name|uint32_t
name|preemphasis
decl_stmt|;
comment|/* copy of requested setting */
name|uint8_t
name|autoneg
decl_stmt|;
define|#
directive|define
name|BNXT_AUTONEG_SPEED
value|1
define|#
directive|define
name|BNXT_AUTONEG_FLOW_CTRL
value|2
name|uint8_t
name|req_duplex
decl_stmt|;
name|uint8_t
name|req_flow_ctrl
decl_stmt|;
name|uint16_t
name|req_link_speed
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|bnxt_cp_type
block|{
name|BNXT_DEFAULT
block|,
name|BNXT_TX
block|,
name|BNXT_RX
block|,
name|BNXT_SHARED
block|}
enum|;
end_enum

begin_struct
struct|struct
name|bnxt_cos_queue
block|{
name|uint8_t
name|id
decl_stmt|;
name|uint8_t
name|profile
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_func_info
block|{
name|uint32_t
name|fw_fid
decl_stmt|;
name|uint8_t
name|mac_addr
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|uint16_t
name|max_rsscos_ctxs
decl_stmt|;
name|uint16_t
name|max_cp_rings
decl_stmt|;
name|uint16_t
name|max_tx_rings
decl_stmt|;
name|uint16_t
name|max_rx_rings
decl_stmt|;
name|uint16_t
name|max_hw_ring_grps
decl_stmt|;
name|uint16_t
name|max_irqs
decl_stmt|;
name|uint16_t
name|max_l2_ctxs
decl_stmt|;
name|uint16_t
name|max_vnics
decl_stmt|;
name|uint16_t
name|max_stat_ctxs
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_pf_info
block|{
define|#
directive|define
name|BNXT_FIRST_PF_FID
value|1
define|#
directive|define
name|BNXT_FIRST_VF_FID
value|128
name|uint8_t
name|port_id
decl_stmt|;
name|uint32_t
name|first_vf_id
decl_stmt|;
name|uint16_t
name|active_vfs
decl_stmt|;
name|uint16_t
name|max_vfs
decl_stmt|;
name|uint32_t
name|max_encap_records
decl_stmt|;
name|uint32_t
name|max_decap_records
decl_stmt|;
name|uint32_t
name|max_tx_em_flows
decl_stmt|;
name|uint32_t
name|max_tx_wm_flows
decl_stmt|;
name|uint32_t
name|max_rx_em_flows
decl_stmt|;
name|uint32_t
name|max_rx_wm_flows
decl_stmt|;
name|unsigned
name|long
modifier|*
name|vf_event_bmap
decl_stmt|;
name|uint16_t
name|hwrm_cmd_req_pages
decl_stmt|;
name|void
modifier|*
name|hwrm_cmd_req_addr
index|[
literal|4
index|]
decl_stmt|;
name|bus_addr_t
name|hwrm_cmd_req_dma_addr
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_vf_info
block|{
name|uint16_t
name|fw_fid
decl_stmt|;
name|uint8_t
name|mac_addr
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|uint16_t
name|max_rsscos_ctxs
decl_stmt|;
name|uint16_t
name|max_cp_rings
decl_stmt|;
name|uint16_t
name|max_tx_rings
decl_stmt|;
name|uint16_t
name|max_rx_rings
decl_stmt|;
name|uint16_t
name|max_hw_ring_grps
decl_stmt|;
name|uint16_t
name|max_l2_ctxs
decl_stmt|;
name|uint16_t
name|max_irqs
decl_stmt|;
name|uint16_t
name|max_vnics
decl_stmt|;
name|uint16_t
name|max_stat_ctxs
decl_stmt|;
name|uint32_t
name|vlan
decl_stmt|;
define|#
directive|define
name|BNXT_VF_QOS
value|0x1
define|#
directive|define
name|BNXT_VF_SPOOFCHK
value|0x2
define|#
directive|define
name|BNXT_VF_LINK_FORCED
value|0x4
define|#
directive|define
name|BNXT_VF_LINK_UP
value|0x8
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|func_flags
decl_stmt|;
comment|/* func cfg flags */
name|uint32_t
name|min_tx_rate
decl_stmt|;
name|uint32_t
name|max_tx_rate
decl_stmt|;
name|void
modifier|*
name|hwrm_cmd_req_addr
decl_stmt|;
name|bus_addr_t
name|hwrm_cmd_req_dma_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BNXT_FLAG_VF
value|(1<<1)
end_define

begin_define
define|#
directive|define
name|BNXT_PF
parameter_list|(
name|softc
parameter_list|)
value|(!((softc)->flags& BNXT_FLAG_VF))
end_define

begin_define
define|#
directive|define
name|BNXT_VF
parameter_list|(
name|softc
parameter_list|)
value|((softc)->flags& BNXT_FLAG_VF)
end_define

begin_struct
struct|struct
name|bnxt_vlan_tag
block|{
name|SLIST_ENTRY
argument_list|(
argument|bnxt_vlan_tag
argument_list|)
name|next
expr_stmt|;
name|uint16_t
name|tpid
decl_stmt|;
name|uint16_t
name|tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_vnic_info
block|{
name|uint16_t
name|id
decl_stmt|;
name|uint16_t
name|def_ring_grp
decl_stmt|;
name|uint16_t
name|cos_rule
decl_stmt|;
name|uint16_t
name|lb_rule
decl_stmt|;
name|uint16_t
name|mru
decl_stmt|;
name|uint32_t
name|rx_mask
decl_stmt|;
name|bool
name|vlan_only
decl_stmt|;
name|struct
name|iflib_dma_info
name|mc_list
decl_stmt|;
name|int
name|mc_list_count
decl_stmt|;
define|#
directive|define
name|BNXT_MAX_MC_ADDRS
value|16
name|uint32_t
name|flags
decl_stmt|;
define|#
directive|define
name|BNXT_VNIC_FLAG_DEFAULT
value|0x01
define|#
directive|define
name|BNXT_VNIC_FLAG_BD_STALL
value|0x02
define|#
directive|define
name|BNXT_VNIC_FLAG_VLAN_STRIP
value|0x04
name|uint64_t
name|filter_id
decl_stmt|;
name|uint32_t
name|flow_id
decl_stmt|;
name|uint16_t
name|rss_id
decl_stmt|;
name|uint32_t
name|rss_hash_type
decl_stmt|;
name|uint8_t
name|rss_hash_key
index|[
name|HW_HASH_KEY_SIZE
index|]
decl_stmt|;
name|struct
name|iflib_dma_info
name|rss_hash_key_tbl
decl_stmt|;
name|struct
name|iflib_dma_info
name|rss_grp_tbl
decl_stmt|;
name|SLIST_HEAD
argument_list|(
argument|vlan_head
argument_list|,
argument|bnxt_vlan_tag
argument_list|)
name|vlan_tags
expr_stmt|;
name|struct
name|iflib_dma_info
name|vlan_tag_list
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_grp_info
block|{
name|uint16_t
name|stats_ctx
decl_stmt|;
name|uint16_t
name|grp_id
decl_stmt|;
name|uint16_t
name|rx_ring_id
decl_stmt|;
name|uint16_t
name|cp_ring_id
decl_stmt|;
name|uint16_t
name|ag_ring_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_ring
block|{
name|uint64_t
name|paddr
decl_stmt|;
name|vm_offset_t
name|doorbell
decl_stmt|;
name|caddr_t
name|vaddr
decl_stmt|;
name|struct
name|bnxt_softc
modifier|*
name|softc
decl_stmt|;
name|uint32_t
name|ring_size
decl_stmt|;
comment|/* Must be a power of two */
name|uint16_t
name|id
decl_stmt|;
comment|/* Logical ID */
name|uint16_t
name|phys_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_cp_ring
block|{
name|struct
name|bnxt_ring
name|ring
decl_stmt|;
name|struct
name|if_irq
name|irq
decl_stmt|;
name|uint32_t
name|cons
decl_stmt|;
name|bool
name|v_bit
decl_stmt|;
comment|/* Value of valid bit */
name|struct
name|ctx_hw_stats
modifier|*
name|stats
decl_stmt|;
name|uint32_t
name|stats_ctx_id
decl_stmt|;
name|uint32_t
name|last_idx
decl_stmt|;
comment|/* Used by RX rings only 						 * set to the last read pidx 						 */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_full_tpa_start
block|{
name|struct
name|rx_tpa_start_cmpl
name|low
decl_stmt|;
name|struct
name|rx_tpa_start_cmpl_hi
name|high
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* All the version information for the part */
end_comment

begin_define
define|#
directive|define
name|BNXT_VERSTR_SIZE
value|(3*3+2+1)
end_define

begin_comment
comment|/* ie: "255.255.255\0" */
end_comment

begin_define
define|#
directive|define
name|BNXT_NAME_SIZE
value|17
end_define

begin_struct
struct|struct
name|bnxt_ver_info
block|{
name|uint8_t
name|hwrm_if_major
decl_stmt|;
name|uint8_t
name|hwrm_if_minor
decl_stmt|;
name|uint8_t
name|hwrm_if_update
decl_stmt|;
name|char
name|hwrm_if_ver
index|[
name|BNXT_VERSTR_SIZE
index|]
decl_stmt|;
name|char
name|driver_hwrm_if_ver
index|[
name|BNXT_VERSTR_SIZE
index|]
decl_stmt|;
name|char
name|hwrm_fw_ver
index|[
name|BNXT_VERSTR_SIZE
index|]
decl_stmt|;
name|char
name|mgmt_fw_ver
index|[
name|BNXT_VERSTR_SIZE
index|]
decl_stmt|;
name|char
name|netctrl_fw_ver
index|[
name|BNXT_VERSTR_SIZE
index|]
decl_stmt|;
name|char
name|roce_fw_ver
index|[
name|BNXT_VERSTR_SIZE
index|]
decl_stmt|;
name|char
name|phy_ver
index|[
name|BNXT_VERSTR_SIZE
index|]
decl_stmt|;
name|char
name|pkg_ver
index|[
literal|64
index|]
decl_stmt|;
name|char
name|hwrm_fw_name
index|[
name|BNXT_NAME_SIZE
index|]
decl_stmt|;
name|char
name|mgmt_fw_name
index|[
name|BNXT_NAME_SIZE
index|]
decl_stmt|;
name|char
name|netctrl_fw_name
index|[
name|BNXT_NAME_SIZE
index|]
decl_stmt|;
name|char
name|roce_fw_name
index|[
name|BNXT_NAME_SIZE
index|]
decl_stmt|;
name|char
name|phy_vendor
index|[
name|BNXT_NAME_SIZE
index|]
decl_stmt|;
name|char
name|phy_partnumber
index|[
name|BNXT_NAME_SIZE
index|]
decl_stmt|;
name|uint16_t
name|chip_num
decl_stmt|;
name|uint8_t
name|chip_rev
decl_stmt|;
name|uint8_t
name|chip_metal
decl_stmt|;
name|uint8_t
name|chip_bond_id
decl_stmt|;
name|uint8_t
name|chip_type
decl_stmt|;
name|uint8_t
name|hwrm_min_major
decl_stmt|;
name|uint8_t
name|hwrm_min_minor
decl_stmt|;
name|uint8_t
name|hwrm_min_update
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|ver_ctx
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|ver_oid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_nvram_info
block|{
name|uint16_t
name|mfg_id
decl_stmt|;
name|uint16_t
name|device_id
decl_stmt|;
name|uint32_t
name|sector_size
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|uint32_t
name|reserved_size
decl_stmt|;
name|uint32_t
name|available_size
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|nvm_ctx
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|nvm_oid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_softc
block|{
name|device_t
name|dev
decl_stmt|;
name|if_ctx_t
name|ctx
decl_stmt|;
name|if_softc_ctx_t
name|scctx
decl_stmt|;
name|if_shared_ctx_t
name|sctx
decl_stmt|;
name|struct
name|ifmedia
modifier|*
name|media
decl_stmt|;
name|struct
name|bnxt_bar_info
name|hwrm_bar
decl_stmt|;
name|struct
name|bnxt_bar_info
name|doorbell_bar
decl_stmt|;
name|struct
name|bnxt_link_info
name|link_info
decl_stmt|;
define|#
directive|define
name|BNXT_FLAG_NPAR
value|1
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|total_msix
decl_stmt|;
name|struct
name|bnxt_func_info
name|func
decl_stmt|;
name|struct
name|bnxt_pf_info
name|pf
decl_stmt|;
name|struct
name|bnxt_vf_info
name|vf
decl_stmt|;
name|uint16_t
name|hwrm_cmd_seq
decl_stmt|;
name|uint32_t
name|hwrm_cmd_timeo
decl_stmt|;
comment|/* milliseconds */
name|struct
name|iflib_dma_info
name|hwrm_cmd_resp
decl_stmt|;
comment|/* Interrupt info for HWRM */
name|struct
name|if_irq
name|irq
decl_stmt|;
name|struct
name|mtx
name|hwrm_lock
decl_stmt|;
name|uint16_t
name|hwrm_max_req_len
decl_stmt|;
define|#
directive|define
name|BNXT_MAX_QUEUE
value|8
name|uint8_t
name|max_tc
decl_stmt|;
name|struct
name|bnxt_cos_queue
name|q_info
index|[
name|BNXT_MAX_QUEUE
index|]
decl_stmt|;
name|struct
name|iflib_dma_info
name|hw_rx_port_stats
decl_stmt|;
name|struct
name|iflib_dma_info
name|hw_tx_port_stats
decl_stmt|;
name|struct
name|rx_port_stats
modifier|*
name|rx_port_stats
decl_stmt|;
name|struct
name|tx_port_stats
modifier|*
name|tx_port_stats
decl_stmt|;
name|int
name|num_cp_rings
decl_stmt|;
name|struct
name|bnxt_ring
modifier|*
name|tx_rings
decl_stmt|;
name|struct
name|bnxt_cp_ring
modifier|*
name|tx_cp_rings
decl_stmt|;
name|struct
name|iflib_dma_info
name|tx_stats
decl_stmt|;
name|int
name|ntxqsets
decl_stmt|;
name|struct
name|bnxt_vnic_info
name|vnic_info
decl_stmt|;
name|struct
name|bnxt_ring
modifier|*
name|ag_rings
decl_stmt|;
name|struct
name|bnxt_ring
modifier|*
name|rx_rings
decl_stmt|;
name|struct
name|bnxt_cp_ring
modifier|*
name|rx_cp_rings
decl_stmt|;
name|struct
name|bnxt_grp_info
modifier|*
name|grp_info
decl_stmt|;
name|struct
name|iflib_dma_info
name|rx_stats
decl_stmt|;
name|int
name|nrxqsets
decl_stmt|;
name|struct
name|bnxt_cp_ring
name|def_cp_ring
decl_stmt|;
name|struct
name|iflib_dma_info
name|def_cp_ring_mem
decl_stmt|;
name|struct
name|grouptask
name|def_cp_task
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|hw_stats
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|hw_stats_oid
decl_stmt|;
name|struct
name|bnxt_full_tpa_start
modifier|*
name|tpa_start
decl_stmt|;
name|struct
name|bnxt_ver_info
modifier|*
name|ver_info
decl_stmt|;
name|struct
name|bnxt_nvram_info
modifier|*
name|nvm_info
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bnxt_filter_info
block|{
name|STAILQ_ENTRY
argument_list|(
argument|bnxt_filter_info
argument_list|)
name|next
expr_stmt|;
name|uint64_t
name|fw_l2_filter_id
decl_stmt|;
define|#
directive|define
name|INVALID_MAC_INDEX
value|((uint16_t)-1)
name|uint16_t
name|mac_index
decl_stmt|;
comment|/* Filter Characteristics */
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|enables
decl_stmt|;
name|uint8_t
name|l2_addr
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|l2_addr_mask
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|uint16_t
name|l2_ovlan
decl_stmt|;
name|uint16_t
name|l2_ovlan_mask
decl_stmt|;
name|uint16_t
name|l2_ivlan
decl_stmt|;
name|uint16_t
name|l2_ivlan_mask
decl_stmt|;
name|uint8_t
name|t_l2_addr
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|t_l2_addr_mask
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|uint16_t
name|t_l2_ovlan
decl_stmt|;
name|uint16_t
name|t_l2_ovlan_mask
decl_stmt|;
name|uint16_t
name|t_l2_ivlan
decl_stmt|;
name|uint16_t
name|t_l2_ivlan_mask
decl_stmt|;
name|uint8_t
name|tunnel_type
decl_stmt|;
name|uint16_t
name|mirror_vnic_id
decl_stmt|;
name|uint32_t
name|vni
decl_stmt|;
name|uint8_t
name|pri_hint
decl_stmt|;
name|uint64_t
name|l2_filter_id_hint
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Function declarations */
end_comment

begin_function_decl
name|void
name|bnxt_report_link
parameter_list|(
name|struct
name|bnxt_softc
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|bnxt_check_hwrm_version
parameter_list|(
name|struct
name|bnxt_softc
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _BNXT_H */
end_comment

end_unit

