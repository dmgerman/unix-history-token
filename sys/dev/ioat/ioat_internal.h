begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (C) 2012 Intel Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__IOAT_INTERNAL_H__
end_ifndef

begin_define
define|#
directive|define
name|__IOAT_INTERNAL_H__
end_define

begin_include
include|#
directive|include
file|<sys/_task.h>
end_include

begin_define
define|#
directive|define
name|DEVICE2SOFTC
parameter_list|(
name|dev
parameter_list|)
value|((struct ioat_softc *) device_get_softc(dev))
end_define

begin_define
define|#
directive|define
name|KTR_IOAT
value|KTR_SPARE3
end_define

begin_define
define|#
directive|define
name|ioat_read_chancnt
parameter_list|(
name|ioat
parameter_list|)
define|\
value|ioat_read_1((ioat), IOAT_CHANCNT_OFFSET)
end_define

begin_define
define|#
directive|define
name|ioat_read_xfercap
parameter_list|(
name|ioat
parameter_list|)
define|\
value|(ioat_read_1((ioat), IOAT_XFERCAP_OFFSET)& IOAT_XFERCAP_VALID_MASK)
end_define

begin_define
define|#
directive|define
name|ioat_write_intrctrl
parameter_list|(
name|ioat
parameter_list|,
name|value
parameter_list|)
define|\
value|ioat_write_1((ioat), IOAT_INTRCTRL_OFFSET, (value))
end_define

begin_define
define|#
directive|define
name|ioat_read_cbver
parameter_list|(
name|ioat
parameter_list|)
define|\
value|(ioat_read_1((ioat), IOAT_CBVER_OFFSET)& 0xFF)
end_define

begin_define
define|#
directive|define
name|ioat_read_dmacapability
parameter_list|(
name|ioat
parameter_list|)
define|\
value|ioat_read_4((ioat), IOAT_DMACAPABILITY_OFFSET)
end_define

begin_define
define|#
directive|define
name|ioat_write_chanctrl
parameter_list|(
name|ioat
parameter_list|,
name|value
parameter_list|)
define|\
value|ioat_write_2((ioat), IOAT_CHANCTRL_OFFSET, (value))
end_define

begin_function
specifier|static
name|__inline
name|uint64_t
name|ioat_bus_space_read_8_lower_first
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|handle
parameter_list|,
name|bus_size_t
name|offset
parameter_list|)
block|{
return|return
operator|(
name|bus_space_read_4
argument_list|(
name|tag
argument_list|,
name|handle
argument_list|,
name|offset
argument_list|)
operator||
operator|(
operator|(
name|uint64_t
operator|)
name|bus_space_read_4
argument_list|(
name|tag
argument_list|,
name|handle
argument_list|,
name|offset
operator|+
literal|4
argument_list|)
operator|)
operator|<<
literal|32
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ioat_bus_space_write_8_lower_first
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|handle
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|uint64_t
name|val
parameter_list|)
block|{
name|bus_space_write_4
argument_list|(
name|tag
argument_list|,
name|handle
argument_list|,
name|offset
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|bus_space_write_4
argument_list|(
name|tag
argument_list|,
name|handle
argument_list|,
name|offset
operator|+
literal|4
argument_list|,
name|val
operator|>>
literal|32
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__i386__
end_ifdef

begin_define
define|#
directive|define
name|ioat_bus_space_read_8
value|ioat_bus_space_read_8_lower_first
end_define

begin_define
define|#
directive|define
name|ioat_bus_space_write_8
value|ioat_bus_space_write_8_lower_first
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ioat_bus_space_read_8
parameter_list|(
name|tag
parameter_list|,
name|handle
parameter_list|,
name|offset
parameter_list|)
define|\
value|bus_space_read_8((tag), (handle), (offset))
end_define

begin_define
define|#
directive|define
name|ioat_bus_space_write_8
parameter_list|(
name|tag
parameter_list|,
name|handle
parameter_list|,
name|offset
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_space_write_8((tag), (handle), (offset), (val))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ioat_read_1
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|)
define|\
value|bus_space_read_1((ioat)->pci_bus_tag, (ioat)->pci_bus_handle, \ 	    (offset))
end_define

begin_define
define|#
directive|define
name|ioat_read_2
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|)
define|\
value|bus_space_read_2((ioat)->pci_bus_tag, (ioat)->pci_bus_handle, \ 	    (offset))
end_define

begin_define
define|#
directive|define
name|ioat_read_4
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|)
define|\
value|bus_space_read_4((ioat)->pci_bus_tag, (ioat)->pci_bus_handle, \ 	    (offset))
end_define

begin_define
define|#
directive|define
name|ioat_read_8
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|)
define|\
value|ioat_bus_space_read_8((ioat)->pci_bus_tag, (ioat)->pci_bus_handle, \ 	    (offset))
end_define

begin_define
define|#
directive|define
name|ioat_read_double_4
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|)
define|\
value|ioat_bus_space_read_8_lower_first((ioat)->pci_bus_tag, \ 	    (ioat)->pci_bus_handle, (offset))
end_define

begin_define
define|#
directive|define
name|ioat_write_1
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|,
name|value
parameter_list|)
define|\
value|bus_space_write_1((ioat)->pci_bus_tag, (ioat)->pci_bus_handle, \ 	    (offset), (value))
end_define

begin_define
define|#
directive|define
name|ioat_write_2
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|,
name|value
parameter_list|)
define|\
value|bus_space_write_2((ioat)->pci_bus_tag, (ioat)->pci_bus_handle, \ 	    (offset), (value))
end_define

begin_define
define|#
directive|define
name|ioat_write_4
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|,
name|value
parameter_list|)
define|\
value|bus_space_write_4((ioat)->pci_bus_tag, (ioat)->pci_bus_handle, \ 	    (offset), (value))
end_define

begin_define
define|#
directive|define
name|ioat_write_8
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|,
name|value
parameter_list|)
define|\
value|ioat_bus_space_write_8((ioat)->pci_bus_tag, (ioat)->pci_bus_handle, \ 	    (offset), (value))
end_define

begin_define
define|#
directive|define
name|ioat_write_double_4
parameter_list|(
name|ioat
parameter_list|,
name|offset
parameter_list|,
name|value
parameter_list|)
define|\
value|ioat_bus_space_write_8_lower_first((ioat)->pci_bus_tag, \ 	    (ioat)->pci_bus_handle, (offset), (value))
end_define

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_IOAT
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SYSCTL_DECL
argument_list|(
name|_hw_ioat
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|extern
name|int
name|g_ioat_debug_level
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|generic_dma_control
block|{
name|uint32_t
name|int_enable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|completion_update
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fence
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_page_break
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_page_break
range|:
literal|1
decl_stmt|;
name|uint32_t
name|bundle
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_dca
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hint
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved2
range|:
literal|13
decl_stmt|;
name|uint32_t
name|op
range|:
literal|8
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_generic_hw_descriptor
block|{
name|uint32_t
name|size
decl_stmt|;
union|union
block|{
name|uint32_t
name|control_raw
decl_stmt|;
name|struct
name|generic_dma_control
name|control_generic
decl_stmt|;
block|}
name|u
union|;
name|uint64_t
name|src_addr
decl_stmt|;
name|uint64_t
name|dest_addr
decl_stmt|;
name|uint64_t
name|next
decl_stmt|;
name|uint64_t
name|reserved
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_dma_hw_descriptor
block|{
name|uint32_t
name|size
decl_stmt|;
union|union
block|{
name|uint32_t
name|control_raw
decl_stmt|;
name|struct
name|generic_dma_control
name|control_generic
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|int_enable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|completion_update
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fence
range|:
literal|1
decl_stmt|;
name|uint32_t
name|null
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_page_break
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_page_break
range|:
literal|1
decl_stmt|;
name|uint32_t
name|bundle
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_dca
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hint
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved
range|:
literal|13
decl_stmt|;
define|#
directive|define
name|IOAT_OP_COPY
value|0x00
name|uint32_t
name|op
range|:
literal|8
decl_stmt|;
block|}
name|control
struct|;
block|}
name|u
union|;
name|uint64_t
name|src_addr
decl_stmt|;
name|uint64_t
name|dest_addr
decl_stmt|;
name|uint64_t
name|next
decl_stmt|;
name|uint64_t
name|next_src_addr
decl_stmt|;
name|uint64_t
name|next_dest_addr
decl_stmt|;
name|uint64_t
name|user1
decl_stmt|;
name|uint64_t
name|user2
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_fill_hw_descriptor
block|{
name|uint32_t
name|size
decl_stmt|;
union|union
block|{
name|uint32_t
name|control_raw
decl_stmt|;
name|struct
name|generic_dma_control
name|control_generic
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|int_enable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|completion_update
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fence
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved2
range|:
literal|2
decl_stmt|;
name|uint32_t
name|dest_page_break
range|:
literal|1
decl_stmt|;
name|uint32_t
name|bundle
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved3
range|:
literal|15
decl_stmt|;
define|#
directive|define
name|IOAT_OP_FILL
value|0x01
name|uint32_t
name|op
range|:
literal|8
decl_stmt|;
block|}
name|control
struct|;
block|}
name|u
union|;
name|uint64_t
name|src_data
decl_stmt|;
name|uint64_t
name|dest_addr
decl_stmt|;
name|uint64_t
name|next
decl_stmt|;
name|uint64_t
name|reserved
decl_stmt|;
name|uint64_t
name|next_dest_addr
decl_stmt|;
name|uint64_t
name|user1
decl_stmt|;
name|uint64_t
name|user2
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_xor_hw_descriptor
block|{
name|uint32_t
name|size
decl_stmt|;
union|union
block|{
name|uint32_t
name|control_raw
decl_stmt|;
name|struct
name|generic_dma_control
name|control_generic
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|int_enable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|completion_update
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fence
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_count
range|:
literal|3
decl_stmt|;
name|uint32_t
name|bundle
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_dca
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hint
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved
range|:
literal|13
decl_stmt|;
define|#
directive|define
name|IOAT_OP_XOR
value|0x87
define|#
directive|define
name|IOAT_OP_XOR_VAL
value|0x88
name|uint32_t
name|op
range|:
literal|8
decl_stmt|;
block|}
name|control
struct|;
block|}
name|u
union|;
name|uint64_t
name|src_addr
decl_stmt|;
name|uint64_t
name|dest_addr
decl_stmt|;
name|uint64_t
name|next
decl_stmt|;
name|uint64_t
name|src_addr2
decl_stmt|;
name|uint64_t
name|src_addr3
decl_stmt|;
name|uint64_t
name|src_addr4
decl_stmt|;
name|uint64_t
name|src_addr5
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_xor_ext_hw_descriptor
block|{
name|uint64_t
name|src_addr6
decl_stmt|;
name|uint64_t
name|src_addr7
decl_stmt|;
name|uint64_t
name|src_addr8
decl_stmt|;
name|uint64_t
name|next
decl_stmt|;
name|uint64_t
name|reserved
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_pq_hw_descriptor
block|{
name|uint32_t
name|size
decl_stmt|;
union|union
block|{
name|uint32_t
name|control_raw
decl_stmt|;
name|struct
name|generic_dma_control
name|control_generic
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|int_enable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|completion_update
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fence
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_count
range|:
literal|3
decl_stmt|;
name|uint32_t
name|bundle
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_dca
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hint
range|:
literal|1
decl_stmt|;
name|uint32_t
name|p_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|q_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved
range|:
literal|11
decl_stmt|;
define|#
directive|define
name|IOAT_OP_PQ
value|0x89
define|#
directive|define
name|IOAT_OP_PQ_VAL
value|0x8a
name|uint32_t
name|op
range|:
literal|8
decl_stmt|;
block|}
name|control
struct|;
block|}
name|u
union|;
name|uint64_t
name|src_addr
decl_stmt|;
name|uint64_t
name|p_addr
decl_stmt|;
name|uint64_t
name|next
decl_stmt|;
name|uint64_t
name|src_addr2
decl_stmt|;
name|uint64_t
name|src_addr3
decl_stmt|;
name|uint8_t
name|coef
index|[
literal|8
index|]
decl_stmt|;
name|uint64_t
name|q_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_pq_ext_hw_descriptor
block|{
name|uint64_t
name|src_addr4
decl_stmt|;
name|uint64_t
name|src_addr5
decl_stmt|;
name|uint64_t
name|src_addr6
decl_stmt|;
name|uint64_t
name|next
decl_stmt|;
name|uint64_t
name|src_addr7
decl_stmt|;
name|uint64_t
name|src_addr8
decl_stmt|;
name|uint64_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_pq_update_hw_descriptor
block|{
name|uint32_t
name|size
decl_stmt|;
union|union
block|{
name|uint32_t
name|control_raw
decl_stmt|;
name|struct
name|generic_dma_control
name|control_generic
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|int_enable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_snoop_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|completion_update
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fence
range|:
literal|1
decl_stmt|;
name|uint32_t
name|src_cnt
range|:
literal|3
decl_stmt|;
name|uint32_t
name|bundle
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dest_dca
range|:
literal|1
decl_stmt|;
name|uint32_t
name|hint
range|:
literal|1
decl_stmt|;
name|uint32_t
name|p_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|q_disable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved
range|:
literal|3
decl_stmt|;
name|uint32_t
name|coef
range|:
literal|8
decl_stmt|;
define|#
directive|define
name|IOAT_OP_PQ_UP
value|0x8b
name|uint32_t
name|op
range|:
literal|8
decl_stmt|;
block|}
name|control
struct|;
block|}
name|u
union|;
name|uint64_t
name|src_addr
decl_stmt|;
name|uint64_t
name|p_addr
decl_stmt|;
name|uint64_t
name|next
decl_stmt|;
name|uint64_t
name|src_addr2
decl_stmt|;
name|uint64_t
name|p_src
decl_stmt|;
name|uint64_t
name|q_src
decl_stmt|;
name|uint64_t
name|q_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_raw_hw_descriptor
block|{
name|uint64_t
name|field
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bus_dmadesc
block|{
name|bus_dmaengine_callback_t
name|callback_fn
decl_stmt|;
name|void
modifier|*
name|callback_arg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ioat_descriptor
block|{
name|struct
name|bus_dmadesc
name|bus_dmadesc
decl_stmt|;
union|union
block|{
name|struct
name|ioat_generic_hw_descriptor
modifier|*
name|generic
decl_stmt|;
name|struct
name|ioat_dma_hw_descriptor
modifier|*
name|dma
decl_stmt|;
name|struct
name|ioat_fill_hw_descriptor
modifier|*
name|fill
decl_stmt|;
name|struct
name|ioat_xor_hw_descriptor
modifier|*
name|xor
decl_stmt|;
name|struct
name|ioat_xor_ext_hw_descriptor
modifier|*
name|xor_ext
decl_stmt|;
name|struct
name|ioat_pq_hw_descriptor
modifier|*
name|pq
decl_stmt|;
name|struct
name|ioat_pq_ext_hw_descriptor
modifier|*
name|pq_ext
decl_stmt|;
name|struct
name|ioat_raw_hw_descriptor
modifier|*
name|raw
decl_stmt|;
block|}
name|u
union|;
name|uint32_t
name|id
decl_stmt|;
name|bus_addr_t
name|hw_desc_bus_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Unsupported by this driver at this time. */
end_comment

begin_define
define|#
directive|define
name|IOAT_OP_MOVECRC
value|0x41
end_define

begin_define
define|#
directive|define
name|IOAT_OP_MOVECRC_TEST
value|0x42
end_define

begin_define
define|#
directive|define
name|IOAT_OP_MOVECRC_STORE
value|0x43
end_define

begin_define
define|#
directive|define
name|IOAT_OP_CRC
value|0x81
end_define

begin_define
define|#
directive|define
name|IOAT_OP_CRC_TEST
value|0x82
end_define

begin_define
define|#
directive|define
name|IOAT_OP_CRC_STORE
value|0x83
end_define

begin_define
define|#
directive|define
name|IOAT_OP_MARKER
value|0x84
end_define

begin_comment
comment|/*  * Deprecated OPs -- v3 DMA generates an abort if given these.  And this driver  * doesn't support anything older than v3.  */
end_comment

begin_define
define|#
directive|define
name|IOAT_OP_OLD_XOR
value|0x85
end_define

begin_define
define|#
directive|define
name|IOAT_OP_OLD_XOR_VAL
value|0x86
end_define

begin_enum
enum|enum
name|ioat_ref_kind
block|{
name|IOAT_DMAENGINE_REF
init|=
literal|0
block|,
name|IOAT_ACTIVE_DESCR_REF
block|,
name|IOAT_NUM_REF_KINDS
block|}
enum|;
end_enum

begin_comment
comment|/* One of these per allocated PCI device. */
end_comment

begin_struct
struct|struct
name|ioat_softc
block|{
name|bus_dmaengine_t
name|dmaengine
decl_stmt|;
define|#
directive|define
name|to_ioat_softc
parameter_list|(
name|_dmaeng
parameter_list|)
define|\
value|({									\ 	bus_dmaengine_t *_p = (_dmaeng);				\ 	(struct ioat_softc *)((char *)_p -				\ 	    offsetof(struct ioat_softc, dmaengine));			\ })
name|int
name|version
decl_stmt|;
name|int
name|chan_idx
decl_stmt|;
name|struct
name|mtx
name|submit_lock
decl_stmt|;
name|device_t
name|device
decl_stmt|;
name|bus_space_tag_t
name|pci_bus_tag
decl_stmt|;
name|bus_space_handle_t
name|pci_bus_handle
decl_stmt|;
name|int
name|pci_resource_id
decl_stmt|;
name|struct
name|resource
modifier|*
name|pci_resource
decl_stmt|;
name|uint32_t
name|max_xfer_size
decl_stmt|;
name|uint32_t
name|capabilities
decl_stmt|;
name|uint16_t
name|intrdelay_max
decl_stmt|;
name|uint16_t
name|cached_intrdelay
decl_stmt|;
name|struct
name|resource
modifier|*
name|res
decl_stmt|;
name|int
name|rid
decl_stmt|;
name|void
modifier|*
name|tag
decl_stmt|;
name|bus_dma_tag_t
name|hw_desc_tag
decl_stmt|;
name|bus_dmamap_t
name|hw_desc_map
decl_stmt|;
name|bus_dma_tag_t
name|comp_update_tag
decl_stmt|;
name|bus_dmamap_t
name|comp_update_map
decl_stmt|;
name|uint64_t
modifier|*
name|comp_update
decl_stmt|;
name|bus_addr_t
name|comp_update_bus_addr
decl_stmt|;
name|struct
name|callout
name|timer
decl_stmt|;
name|struct
name|task
name|reset_task
decl_stmt|;
name|boolean_t
name|quiescing
decl_stmt|;
name|boolean_t
name|destroying
decl_stmt|;
name|boolean_t
name|is_resize_pending
decl_stmt|;
name|boolean_t
name|is_completion_pending
decl_stmt|;
name|boolean_t
name|is_reset_pending
decl_stmt|;
name|boolean_t
name|is_channel_running
decl_stmt|;
name|boolean_t
name|intrdelay_supported
decl_stmt|;
name|uint32_t
name|head
decl_stmt|;
name|uint32_t
name|tail
decl_stmt|;
name|uint32_t
name|hw_head
decl_stmt|;
name|uint32_t
name|ring_size_order
decl_stmt|;
name|bus_addr_t
name|last_seen
decl_stmt|;
name|struct
name|ioat_descriptor
modifier|*
modifier|*
name|ring
decl_stmt|;
name|struct
name|mtx
name|cleanup_lock
decl_stmt|;
specifier|volatile
name|uint32_t
name|refcnt
decl_stmt|;
ifdef|#
directive|ifdef
name|INVARIANTS
specifier|volatile
name|uint32_t
name|refkinds
index|[
name|IOAT_NUM_REF_KINDS
index|]
decl_stmt|;
endif|#
directive|endif
struct|struct
block|{
name|uint64_t
name|interrupts
decl_stmt|;
name|uint64_t
name|descriptors_processed
decl_stmt|;
name|uint64_t
name|descriptors_error
decl_stmt|;
name|uint64_t
name|descriptors_submitted
decl_stmt|;
name|uint32_t
name|channel_halts
decl_stmt|;
name|uint32_t
name|last_halt_chanerr
decl_stmt|;
block|}
name|stats
struct|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|ioat_test_attach
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ioat_test_detach
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|uint64_t
name|ioat_get_chansts
parameter_list|(
name|struct
name|ioat_softc
modifier|*
name|ioat
parameter_list|)
block|{
name|uint64_t
name|status
decl_stmt|;
if|if
condition|(
name|ioat
operator|->
name|version
operator|>=
name|IOAT_VER_3_3
condition|)
name|status
operator|=
name|ioat_read_8
argument_list|(
name|ioat
argument_list|,
name|IOAT_CHANSTS_OFFSET
argument_list|)
expr_stmt|;
else|else
comment|/* Must read lower 4 bytes before upper 4 bytes. */
name|status
operator|=
name|ioat_read_double_4
argument_list|(
name|ioat
argument_list|,
name|IOAT_CHANSTS_OFFSET
argument_list|)
expr_stmt|;
return|return
operator|(
name|status
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ioat_write_chancmp
parameter_list|(
name|struct
name|ioat_softc
modifier|*
name|ioat
parameter_list|,
name|uint64_t
name|addr
parameter_list|)
block|{
if|if
condition|(
name|ioat
operator|->
name|version
operator|>=
name|IOAT_VER_3_3
condition|)
name|ioat_write_8
argument_list|(
name|ioat
argument_list|,
name|IOAT_CHANCMP_OFFSET_LOW
argument_list|,
name|addr
argument_list|)
expr_stmt|;
else|else
name|ioat_write_double_4
argument_list|(
name|ioat
argument_list|,
name|IOAT_CHANCMP_OFFSET_LOW
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ioat_write_chainaddr
parameter_list|(
name|struct
name|ioat_softc
modifier|*
name|ioat
parameter_list|,
name|uint64_t
name|addr
parameter_list|)
block|{
if|if
condition|(
name|ioat
operator|->
name|version
operator|>=
name|IOAT_VER_3_3
condition|)
name|ioat_write_8
argument_list|(
name|ioat
argument_list|,
name|IOAT_CHAINADDR_OFFSET_LOW
argument_list|,
name|addr
argument_list|)
expr_stmt|;
else|else
name|ioat_write_double_4
argument_list|(
name|ioat
argument_list|,
name|IOAT_CHAINADDR_OFFSET_LOW
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|boolean_t
name|is_ioat_active
parameter_list|(
name|uint64_t
name|status
parameter_list|)
block|{
return|return
operator|(
operator|(
name|status
operator|&
name|IOAT_CHANSTS_STATUS
operator|)
operator|==
name|IOAT_CHANSTS_ACTIVE
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|boolean_t
name|is_ioat_idle
parameter_list|(
name|uint64_t
name|status
parameter_list|)
block|{
return|return
operator|(
operator|(
name|status
operator|&
name|IOAT_CHANSTS_STATUS
operator|)
operator|==
name|IOAT_CHANSTS_IDLE
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|boolean_t
name|is_ioat_halted
parameter_list|(
name|uint64_t
name|status
parameter_list|)
block|{
return|return
operator|(
operator|(
name|status
operator|&
name|IOAT_CHANSTS_STATUS
operator|)
operator|==
name|IOAT_CHANSTS_HALTED
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|boolean_t
name|is_ioat_suspended
parameter_list|(
name|uint64_t
name|status
parameter_list|)
block|{
return|return
operator|(
operator|(
name|status
operator|&
name|IOAT_CHANSTS_STATUS
operator|)
operator|==
name|IOAT_CHANSTS_SUSPENDED
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ioat_suspend
parameter_list|(
name|struct
name|ioat_softc
modifier|*
name|ioat
parameter_list|)
block|{
name|ioat_write_1
argument_list|(
name|ioat
argument_list|,
name|IOAT_CHANCMD_OFFSET
argument_list|,
name|IOAT_CHANCMD_SUSPEND
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ioat_reset
parameter_list|(
name|struct
name|ioat_softc
modifier|*
name|ioat
parameter_list|)
block|{
name|ioat_write_1
argument_list|(
name|ioat
argument_list|,
name|IOAT_CHANCMD_OFFSET
argument_list|,
name|IOAT_CHANCMD_RESET
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|boolean_t
name|ioat_reset_pending
parameter_list|(
name|struct
name|ioat_softc
modifier|*
name|ioat
parameter_list|)
block|{
name|uint8_t
name|cmd
decl_stmt|;
name|cmd
operator|=
name|ioat_read_1
argument_list|(
name|ioat
argument_list|,
name|IOAT_CHANCMD_OFFSET
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|cmd
operator|&
name|IOAT_CHANCMD_RESET
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __IOAT_INTERNAL_H__ */
end_comment

end_unit

