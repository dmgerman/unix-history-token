begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011-2014 LSI Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * LSI MPT-Fusion Host Adapter FreeBSD  *  * $FreeBSD$  */
end_comment

begin_struct_decl
struct_decl|struct
name|mpr_fw_event_work
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|mprsas_lun
block|{
name|SLIST_ENTRY
argument_list|(
argument|mprsas_lun
argument_list|)
name|lun_link
expr_stmt|;
name|lun_id_t
name|lun_id
decl_stmt|;
name|uint8_t
name|eedp_formatted
decl_stmt|;
name|uint32_t
name|eedp_block_size
decl_stmt|;
name|uint8_t
name|stop_at_shutdown
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mprsas_target
block|{
name|uint16_t
name|handle
decl_stmt|;
name|uint8_t
name|linkrate
decl_stmt|;
name|uint8_t
name|encl_level_valid
decl_stmt|;
name|uint8_t
name|encl_level
decl_stmt|;
name|char
name|connector_name
index|[
literal|4
index|]
decl_stmt|;
name|uint64_t
name|devname
decl_stmt|;
name|uint32_t
name|devinfo
decl_stmt|;
name|uint16_t
name|encl_handle
decl_stmt|;
name|uint16_t
name|encl_slot
decl_stmt|;
name|uint8_t
name|flags
decl_stmt|;
define|#
directive|define
name|MPRSAS_TARGET_INABORT
value|(1<< 0)
define|#
directive|define
name|MPRSAS_TARGET_INRESET
value|(1<< 1)
define|#
directive|define
name|MPRSAS_TARGET_INDIAGRESET
value|(1<< 2)
define|#
directive|define
name|MPRSAS_TARGET_INREMOVAL
value|(1<< 3)
define|#
directive|define
name|MPR_TARGET_FLAGS_RAID_COMPONENT
value|(1<< 4)
define|#
directive|define
name|MPR_TARGET_FLAGS_VOLUME
value|(1<< 5)
define|#
directive|define
name|MPRSAS_TARGET_INRECOVERY
value|(MPRSAS_TARGET_INABORT | \     MPRSAS_TARGET_INRESET | MPRSAS_TARGET_INCHIPRESET)
define|#
directive|define
name|MPRSAS_TARGET_ADD
value|(1<< 29)
define|#
directive|define
name|MPRSAS_TARGET_REMOVE
value|(1<< 30)
name|uint16_t
name|tid
decl_stmt|;
name|SLIST_HEAD
argument_list|(
argument_list|,
argument|mprsas_lun
argument_list|)
name|luns
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mpr_command
argument_list|)
name|commands
expr_stmt|;
name|struct
name|mpr_command
modifier|*
name|tm
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mpr_command
argument_list|)
name|timedout_commands
expr_stmt|;
name|uint16_t
name|exp_dev_handle
decl_stmt|;
name|uint16_t
name|phy_num
decl_stmt|;
name|uint64_t
name|sasaddr
decl_stmt|;
name|uint16_t
name|parent_handle
decl_stmt|;
name|uint64_t
name|parent_sasaddr
decl_stmt|;
name|uint32_t
name|parent_devinfo
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|sysctl_ctx
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|sysctl_tree
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|mprsas_target
argument_list|)
name|sysctl_link
expr_stmt|;
name|uint64_t
name|issued
decl_stmt|;
name|uint64_t
name|completed
decl_stmt|;
name|unsigned
name|int
name|outstanding
decl_stmt|;
name|unsigned
name|int
name|timeouts
decl_stmt|;
name|unsigned
name|int
name|aborts
decl_stmt|;
name|unsigned
name|int
name|logical_unit_resets
decl_stmt|;
name|unsigned
name|int
name|target_resets
decl_stmt|;
name|uint8_t
name|scsi_req_desc_type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mprsas_softc
block|{
name|struct
name|mpr_softc
modifier|*
name|sc
decl_stmt|;
name|u_int
name|flags
decl_stmt|;
define|#
directive|define
name|MPRSAS_IN_DISCOVERY
value|(1<< 0)
define|#
directive|define
name|MPRSAS_IN_STARTUP
value|(1<< 1)
define|#
directive|define
name|MPRSAS_DISCOVERY_TIMEOUT_PENDING
value|(1<< 2)
define|#
directive|define
name|MPRSAS_QUEUE_FROZEN
value|(1<< 3)
define|#
directive|define
name|MPRSAS_SHUTDOWN
value|(1<< 4)
define|#
directive|define
name|MPRSAS_SCANTHREAD
value|(1<< 5)
name|u_int
name|maxtargets
decl_stmt|;
name|struct
name|mprsas_target
modifier|*
name|targets
decl_stmt|;
name|struct
name|cam_devq
modifier|*
name|devq
decl_stmt|;
name|struct
name|cam_sim
modifier|*
name|sim
decl_stmt|;
name|struct
name|cam_path
modifier|*
name|path
decl_stmt|;
name|struct
name|intr_config_hook
name|sas_ich
decl_stmt|;
name|struct
name|callout
name|discovery_callout
decl_stmt|;
name|struct
name|mpr_event_handle
modifier|*
name|mprsas_eh
decl_stmt|;
name|u_int
name|startup_refcount
decl_stmt|;
name|u_int
name|tm_count
decl_stmt|;
name|struct
name|proc
modifier|*
name|sysctl_proc
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|ev_tq
decl_stmt|;
name|struct
name|task
name|ev_task
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mpr_fw_event_work
argument_list|)
name|ev_queue
expr_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_MPRSAS
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * Abstracted so that the driver can be backwards and forwards compatible  * with future versions of CAM that will provide this functionality.  */
end_comment

begin_define
define|#
directive|define
name|MPR_SET_LUN
parameter_list|(
name|lun
parameter_list|,
name|ccblun
parameter_list|)
define|\
value|mprsas_set_lun(lun, ccblun)
end_define

begin_function
specifier|static
name|__inline
name|int
name|mprsas_set_lun
parameter_list|(
name|uint8_t
modifier|*
name|lun
parameter_list|,
name|u_int
name|ccblun
parameter_list|)
block|{
name|uint64_t
modifier|*
name|newlun
decl_stmt|;
name|newlun
operator|=
operator|(
name|uint64_t
operator|*
operator|)
name|lun
expr_stmt|;
operator|*
name|newlun
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|ccblun
operator|<=
literal|0xff
condition|)
block|{
comment|/* Peripheral device address method, LUN is 0 to 255 */
name|lun
index|[
literal|1
index|]
operator|=
name|ccblun
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ccblun
operator|<=
literal|0x3fff
condition|)
block|{
comment|/* Flat space address method, LUN is<= 16383 */
name|scsi_ulto2b
argument_list|(
name|ccblun
argument_list|,
name|lun
argument_list|)
expr_stmt|;
name|lun
index|[
literal|0
index|]
operator||=
literal|0x40
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ccblun
operator|<=
literal|0xffffff
condition|)
block|{
comment|/* Extended flat space address method, LUN is<= 16777215 */
name|scsi_ulto3b
argument_list|(
name|ccblun
argument_list|,
operator|&
name|lun
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|/* Extended Flat space address method */
name|lun
index|[
literal|0
index|]
operator|=
literal|0xc0
expr_stmt|;
comment|/* Length = 1, i.e. LUN is 3 bytes long */
name|lun
index|[
literal|0
index|]
operator||=
literal|0x10
expr_stmt|;
comment|/* Extended Address Method */
name|lun
index|[
literal|0
index|]
operator||=
literal|0x02
expr_stmt|;
block|}
else|else
block|{
return|return
operator|(
name|EINVAL
operator|)
return|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|MPR_SET_SINGLE_LUN
parameter_list|(
name|req
parameter_list|,
name|lun
parameter_list|)
define|\
value|do {					\ 	bzero((req)->LUN, 8);		\ 	(req)->LUN[1] = lun;		\ } while(0)
end_define

begin_function_decl
name|void
name|mprsas_rescan_target
parameter_list|(
name|struct
name|mpr_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mprsas_target
modifier|*
name|targ
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mprsas_discovery_end
parameter_list|(
name|struct
name|mprsas_softc
modifier|*
name|sassc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mprsas_startup_increment
parameter_list|(
name|struct
name|mprsas_softc
modifier|*
name|sassc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mprsas_startup_decrement
parameter_list|(
name|struct
name|mprsas_softc
modifier|*
name|sassc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mprsas_release_simq_reinit
parameter_list|(
name|struct
name|mprsas_softc
modifier|*
name|sassc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mpr_command
modifier|*
name|mprsas_alloc_tm
parameter_list|(
name|struct
name|mpr_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mprsas_free_tm
parameter_list|(
name|struct
name|mpr_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mpr_command
modifier|*
name|tm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mprsas_firmware_event_work
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|pending
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mprsas_check_id
parameter_list|(
name|struct
name|mprsas_softc
modifier|*
name|sassc
parameter_list|,
name|int
name|id
parameter_list|)
function_decl|;
end_function_decl

end_unit

