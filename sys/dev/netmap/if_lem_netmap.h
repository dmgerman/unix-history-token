begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011-2014 Matteo Landi, Luigi Rizzo. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  *  * netmap support for: lem  *  * For details on netmap support please see ixgbe_netmap.h  */
end_comment

begin_include
include|#
directive|include
file|<net/netmap.h>
end_include

begin_include
include|#
directive|include
file|<sys/selinfo.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_comment
comment|/* vtophys ? */
end_comment

begin_include
include|#
directive|include
file|<dev/netmap/netmap_kern.h>
end_include

begin_comment
comment|/*  * Register/unregister. We are already under netmap lock.  */
end_comment

begin_function
specifier|static
name|int
name|lem_netmap_reg
parameter_list|(
name|struct
name|netmap_adapter
modifier|*
name|na
parameter_list|,
name|int
name|onoff
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|EM_CORE_LOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|lem_disable_intr
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|/* Tell the stack that the interface is no longer active */
name|ifp
operator|->
name|if_drv_flags
operator|&=
operator|~
operator|(
name|IFF_DRV_RUNNING
operator||
name|IFF_DRV_OACTIVE
operator|)
expr_stmt|;
ifndef|#
directive|ifndef
name|EM_LEGACY_IRQ
comment|// XXX do we need this ?
name|taskqueue_block
argument_list|(
name|adapter
operator|->
name|tq
argument_list|)
expr_stmt|;
name|taskqueue_drain
argument_list|(
name|adapter
operator|->
name|tq
argument_list|,
operator|&
name|adapter
operator|->
name|rxtx_task
argument_list|)
expr_stmt|;
name|taskqueue_drain
argument_list|(
name|adapter
operator|->
name|tq
argument_list|,
operator|&
name|adapter
operator|->
name|link_task
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* !EM_LEGCY_IRQ */
comment|/* enable or disable flags and callbacks in na and ifp */
if|if
condition|(
name|onoff
condition|)
block|{
name|nm_set_native_flags
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nm_clear_native_flags
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
name|lem_init_locked
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|/* also enable intr */
ifndef|#
directive|ifndef
name|EM_LEGACY_IRQ
name|taskqueue_unblock
argument_list|(
name|adapter
operator|->
name|tq
argument_list|)
expr_stmt|;
comment|// XXX do we need this ?
endif|#
directive|endif
comment|/* !EM_LEGCY_IRQ */
name|EM_CORE_UNLOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
return|return
operator|(
name|ifp
operator|->
name|if_drv_flags
operator|&
name|IFF_DRV_RUNNING
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the transmit ring.  */
end_comment

begin_function
specifier|static
name|int
name|lem_netmap_txsync
parameter_list|(
name|struct
name|netmap_adapter
modifier|*
name|na
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|tx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|nm_i
decl_stmt|;
comment|/* index into the netmap ring */
name|u_int
name|nic_i
decl_stmt|;
comment|/* index into the NIC ring */
name|u_int
specifier|const
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|u_int
specifier|const
name|head
init|=
name|kring
operator|->
name|rhead
decl_stmt|;
comment|/* generate an interrupt approximately every half ring */
name|u_int
name|report_frequency
init|=
name|kring
operator|->
name|nkr_num_slots
operator|>>
literal|1
decl_stmt|;
comment|/* device-specific */
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|bus_dmamap_sync
argument_list|(
name|adapter
operator|->
name|txdma
operator|.
name|dma_tag
argument_list|,
name|adapter
operator|->
name|txdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
comment|/* 	 * First part: process new packets to send. 	 */
name|nm_i
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|nm_i
operator|!=
name|head
condition|)
block|{
comment|/* we have new packets to send */
name|nic_i
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|nm_i
argument_list|)
expr_stmt|;
while|while
condition|(
name|nm_i
operator|!=
name|head
condition|)
block|{
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
decl_stmt|;
name|u_int
name|len
init|=
name|slot
operator|->
name|len
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
comment|/* device-specific */
name|struct
name|e1000_tx_desc
modifier|*
name|curr
init|=
operator|&
name|adapter
operator|->
name|tx_desc_base
index|[
name|nic_i
index|]
decl_stmt|;
name|struct
name|em_buffer
modifier|*
name|txbuf
init|=
operator|&
name|adapter
operator|->
name|tx_buffer_area
index|[
name|nic_i
index|]
decl_stmt|;
name|int
name|flags
init|=
operator|(
name|slot
operator|->
name|flags
operator|&
name|NS_REPORT
operator|||
name|nic_i
operator|==
literal|0
operator|||
name|nic_i
operator|==
name|report_frequency
operator|)
condition|?
name|E1000_TXD_CMD_RS
else|:
literal|0
decl_stmt|;
name|NM_CHECK_ADDR_LEN
argument_list|(
name|addr
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
comment|/* buffer has changed, reload map */
name|curr
operator|->
name|buffer_addr
operator|=
name|htole64
argument_list|(
name|paddr
argument_list|)
expr_stmt|;
name|netmap_reload_map
argument_list|(
name|adapter
operator|->
name|txtag
argument_list|,
name|txbuf
operator|->
name|map
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
name|slot
operator|->
name|flags
operator|&=
operator|~
operator|(
name|NS_REPORT
operator||
name|NS_BUF_CHANGED
operator|)
expr_stmt|;
comment|/* Fill the slot in the NIC ring. */
name|curr
operator|->
name|upper
operator|.
name|data
operator|=
literal|0
expr_stmt|;
name|curr
operator|->
name|lower
operator|.
name|data
operator|=
name|htole32
argument_list|(
name|adapter
operator|->
name|txd_cmd
operator||
name|len
operator||
operator|(
name|E1000_TXD_CMD_EOP
operator||
name|flags
operator|)
argument_list|)
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|adapter
operator|->
name|txtag
argument_list|,
name|txbuf
operator|->
name|map
argument_list|,
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwcur
operator|=
name|head
expr_stmt|;
comment|/* synchronize the NIC ring */
name|bus_dmamap_sync
argument_list|(
name|adapter
operator|->
name|txdma
operator|.
name|dma_tag
argument_list|,
name|adapter
operator|->
name|txdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
comment|/* (re)start the tx unit up to slot nic_i (excluded) */
name|E1000_WRITE_REG
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|E1000_TDT
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nic_i
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Second part: reclaim buffers for completed transmissions. 	 */
if|if
condition|(
name|ticks
operator|!=
name|kring
operator|->
name|last_reclaim
operator|||
name|flags
operator|&
name|NAF_FORCE_RECLAIM
operator|||
name|nm_kr_txempty
argument_list|(
name|kring
argument_list|)
condition|)
block|{
name|kring
operator|->
name|last_reclaim
operator|=
name|ticks
expr_stmt|;
comment|/* record completed transmissions using TDH */
name|nic_i
operator|=
name|E1000_READ_REG
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|E1000_TDH
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nic_i
operator|>=
name|kring
operator|->
name|nkr_num_slots
condition|)
block|{
comment|/* XXX can it happen ? */
name|D
argument_list|(
literal|"TDH wrap %d"
argument_list|,
name|nic_i
argument_list|)
expr_stmt|;
name|nic_i
operator|-=
name|kring
operator|->
name|nkr_num_slots
expr_stmt|;
block|}
name|adapter
operator|->
name|next_tx_to_clean
operator|=
name|nic_i
expr_stmt|;
name|kring
operator|->
name|nr_hwtail
operator|=
name|nm_prev
argument_list|(
name|netmap_idx_n2k
argument_list|(
name|kring
argument_list|,
name|nic_i
argument_list|)
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
name|nm_txsync_finalize
argument_list|(
name|kring
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the receive ring.  */
end_comment

begin_function
specifier|static
name|int
name|lem_netmap_rxsync
parameter_list|(
name|struct
name|netmap_adapter
modifier|*
name|na
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|rx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|nm_i
decl_stmt|;
comment|/* index into the netmap ring */
name|u_int
name|nic_i
decl_stmt|;
comment|/* index into the NIC ring */
name|u_int
name|n
decl_stmt|;
name|u_int
specifier|const
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|u_int
specifier|const
name|head
init|=
name|nm_rxsync_prologue
argument_list|(
name|kring
argument_list|)
decl_stmt|;
name|int
name|force_update
init|=
operator|(
name|flags
operator|&
name|NAF_FORCE_READ
operator|)
operator|||
name|kring
operator|->
name|nr_kflags
operator|&
name|NKR_PENDINTR
decl_stmt|;
comment|/* device-specific */
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
if|if
condition|(
name|head
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
comment|/* XXX check sync modes */
name|bus_dmamap_sync
argument_list|(
name|adapter
operator|->
name|rxdma
operator|.
name|dma_tag
argument_list|,
name|adapter
operator|->
name|rxdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
operator||
name|BUS_DMASYNC_POSTWRITE
argument_list|)
expr_stmt|;
comment|/* 	 * First part: import newly received packets. 	 */
if|if
condition|(
name|netmap_no_pendintr
operator|||
name|force_update
condition|)
block|{
name|uint16_t
name|slot_flags
init|=
name|kring
operator|->
name|nkr_slot_flags
decl_stmt|;
name|nic_i
operator|=
name|adapter
operator|->
name|next_rx_desc_to_check
expr_stmt|;
name|nm_i
operator|=
name|netmap_idx_n2k
argument_list|(
name|kring
argument_list|,
name|nic_i
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|e1000_rx_desc
modifier|*
name|curr
init|=
operator|&
name|adapter
operator|->
name|rx_desc_base
index|[
name|nic_i
index|]
decl_stmt|;
name|uint32_t
name|staterr
init|=
name|le32toh
argument_list|(
name|curr
operator|->
name|status
argument_list|)
decl_stmt|;
name|int
name|len
decl_stmt|;
if|if
condition|(
operator|(
name|staterr
operator|&
name|E1000_RXD_STAT_DD
operator|)
operator|==
literal|0
condition|)
break|break;
name|len
operator|=
name|le16toh
argument_list|(
name|curr
operator|->
name|length
argument_list|)
operator|-
literal|4
expr_stmt|;
comment|// CRC
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
name|D
argument_list|(
literal|"bogus pkt size %d nic idx %d"
argument_list|,
name|len
argument_list|,
name|nic_i
argument_list|)
expr_stmt|;
name|len
operator|=
literal|0
expr_stmt|;
block|}
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
operator|.
name|len
operator|=
name|len
expr_stmt|;
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
operator|.
name|flags
operator|=
name|slot_flags
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|adapter
operator|->
name|rxtag
argument_list|,
name|adapter
operator|->
name|rx_buffer_area
index|[
name|nic_i
index|]
operator|.
name|map
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
condition|)
block|{
comment|/* update the state variables */
name|ND
argument_list|(
literal|"%d new packets at nic %d nm %d tail %d"
argument_list|,
name|n
argument_list|,
name|adapter
operator|->
name|next_rx_desc_to_check
argument_list|,
name|netmap_idx_n2k
argument_list|(
name|kring
argument_list|,
name|adapter
operator|->
name|next_rx_desc_to_check
argument_list|)
argument_list|,
name|kring
operator|->
name|nr_hwtail
argument_list|)
expr_stmt|;
name|adapter
operator|->
name|next_rx_desc_to_check
operator|=
name|nic_i
expr_stmt|;
comment|// ifp->if_ipackets += n;
name|kring
operator|->
name|nr_hwtail
operator|=
name|nm_i
expr_stmt|;
block|}
name|kring
operator|->
name|nr_kflags
operator|&=
operator|~
name|NKR_PENDINTR
expr_stmt|;
block|}
comment|/* 	 * Second part: skip past packets that userspace has released. 	 */
name|nm_i
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|nm_i
operator|!=
name|head
condition|)
block|{
name|nic_i
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|nm_i
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|nm_i
operator|!=
name|head
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
name|struct
name|e1000_rx_desc
modifier|*
name|curr
init|=
operator|&
name|adapter
operator|->
name|rx_desc_base
index|[
name|nic_i
index|]
decl_stmt|;
name|struct
name|em_buffer
modifier|*
name|rxbuf
init|=
operator|&
name|adapter
operator|->
name|rx_buffer_area
index|[
name|nic_i
index|]
decl_stmt|;
if|if
condition|(
name|addr
operator|==
name|netmap_buffer_base
condition|)
comment|/* bad buf */
goto|goto
name|ring_reset
goto|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
comment|/* buffer has changed, reload map */
name|curr
operator|->
name|buffer_addr
operator|=
name|htole64
argument_list|(
name|paddr
argument_list|)
expr_stmt|;
name|netmap_reload_map
argument_list|(
name|adapter
operator|->
name|rxtag
argument_list|,
name|rxbuf
operator|->
name|map
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
block|}
name|curr
operator|->
name|status
operator|=
literal|0
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|adapter
operator|->
name|rxtag
argument_list|,
name|rxbuf
operator|->
name|map
argument_list|,
name|BUS_DMASYNC_PREREAD
argument_list|)
expr_stmt|;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwcur
operator|=
name|head
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|adapter
operator|->
name|rxdma
operator|.
name|dma_tag
argument_list|,
name|adapter
operator|->
name|rxdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
comment|/* 		 * IMPORTANT: we must leave one free slot in the ring, 		 * so move nic_i back by one unit 		 */
name|nic_i
operator|=
name|nm_prev
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|E1000_WRITE_REG
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|E1000_RDT
argument_list|(
literal|0
argument_list|)
argument_list|,
name|nic_i
argument_list|)
expr_stmt|;
block|}
comment|/* tell userspace that there might be new packets */
name|nm_rxsync_finalize
argument_list|(
name|kring
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
name|ring_reset
label|:
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|lem_netmap_attach
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
block|{
name|struct
name|netmap_adapter
name|na
decl_stmt|;
name|bzero
argument_list|(
operator|&
name|na
argument_list|,
sizeof|sizeof
argument_list|(
name|na
argument_list|)
argument_list|)
expr_stmt|;
name|na
operator|.
name|ifp
operator|=
name|adapter
operator|->
name|ifp
expr_stmt|;
name|na
operator|.
name|na_flags
operator|=
name|NAF_BDG_MAYSLEEP
expr_stmt|;
name|na
operator|.
name|num_tx_desc
operator|=
name|adapter
operator|->
name|num_tx_desc
expr_stmt|;
name|na
operator|.
name|num_rx_desc
operator|=
name|adapter
operator|->
name|num_rx_desc
expr_stmt|;
name|na
operator|.
name|nm_txsync
operator|=
name|lem_netmap_txsync
expr_stmt|;
name|na
operator|.
name|nm_rxsync
operator|=
name|lem_netmap_rxsync
expr_stmt|;
name|na
operator|.
name|nm_register
operator|=
name|lem_netmap_reg
expr_stmt|;
name|na
operator|.
name|num_tx_rings
operator|=
name|na
operator|.
name|num_rx_rings
operator|=
literal|1
expr_stmt|;
name|netmap_attach
argument_list|(
operator|&
name|na
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* end of file */
end_comment

end_unit

