begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2015, Luigi Rizzo. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  *  * netmap support for: ixl  *  * derived from ixgbe  * netmap support for a network driver.  * This file contains code but only static or inline functions used  * by a single driver. To avoid replication of code we just #include  * it near the beginning of the standard driver.  * For ixl the file is imported in two places, hence the conditional at the  * beginning.  */
end_comment

begin_include
include|#
directive|include
file|<net/netmap.h>
end_include

begin_include
include|#
directive|include
file|<sys/selinfo.h>
end_include

begin_comment
comment|/*  * Some drivers may need the following headers. Others  * already include them by default  #include<vm/vm.h> #include<vm/pmap.h>   */
end_comment

begin_include
include|#
directive|include
file|<dev/netmap/netmap_kern.h>
end_include

begin_function_decl
name|int
name|ixl_netmap_txsync
parameter_list|(
name|struct
name|netmap_kring
modifier|*
name|kring
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ixl_netmap_rxsync
parameter_list|(
name|struct
name|netmap_kring
modifier|*
name|kring
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|int
name|ixl_rx_miss
decl_stmt|,
name|ixl_rx_miss_bufs
decl_stmt|,
name|ixl_crcstrip
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|NETMAP_IXL_MAIN
end_ifdef

begin_comment
comment|/*  * device-specific sysctl variables:  *  * ixl_crcstrip: 0: NIC keeps CRC in rx frames, 1: NIC strips it (default).  *	During regular operations the CRC is stripped, but on some  *	hardware reception of frames not multiple of 64 is slower,  *	so using crcstrip=0 helps in benchmarks.  *  * ixl_rx_miss, ixl_rx_miss_bufs:  *	count packets that might be missed due to lost interrupts.  */
end_comment

begin_expr_stmt
name|SYSCTL_DECL
argument_list|(
name|_dev_netmap
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * The xl driver by default strips CRCs and we do not override it.  */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|SYSCTL_INT(_dev_netmap, OID_AUTO, ixl_crcstrip,     CTLFLAG_RW,&ixl_crcstrip, 1, "NIC strips CRC on rx frames");
endif|#
directive|endif
end_endif

begin_expr_stmt
name|SYSCTL_INT
argument_list|(
name|_dev_netmap
argument_list|,
name|OID_AUTO
argument_list|,
name|ixl_rx_miss
argument_list|,
name|CTLFLAG_RW
argument_list|,
operator|&
name|ixl_rx_miss
argument_list|,
literal|0
argument_list|,
literal|"potentially missed rx intr"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SYSCTL_INT
argument_list|(
name|_dev_netmap
argument_list|,
name|OID_AUTO
argument_list|,
name|ixl_rx_miss_bufs
argument_list|,
name|CTLFLAG_RW
argument_list|,
operator|&
name|ixl_rx_miss_bufs
argument_list|,
literal|0
argument_list|,
literal|"potentially missed rx intr bufs"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * Register/unregister. We are already under netmap lock.  * Only called on the first register or the last unregister.  */
end_comment

begin_function
specifier|static
name|int
name|ixl_netmap_reg
parameter_list|(
name|struct
name|netmap_adapter
modifier|*
name|na
parameter_list|,
name|int
name|onoff
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|ixl_vsi
modifier|*
name|vsi
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|ixl_pf
modifier|*
name|pf
init|=
operator|(
expr|struct
name|ixl_pf
operator|*
operator|)
name|vsi
operator|->
name|back
decl_stmt|;
name|IXL_PF_LOCK
argument_list|(
name|pf
argument_list|)
expr_stmt|;
name|ixl_disable_intr
argument_list|(
name|vsi
argument_list|)
expr_stmt|;
comment|/* Tell the stack that the interface is no longer active */
name|ifp
operator|->
name|if_drv_flags
operator|&=
operator|~
operator|(
name|IFF_DRV_RUNNING
operator||
name|IFF_DRV_OACTIVE
operator|)
expr_stmt|;
comment|//set_crcstrip(&adapter->hw, onoff);
comment|/* enable or disable flags and callbacks in na and ifp */
if|if
condition|(
name|onoff
condition|)
block|{
name|nm_set_native_flags
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nm_clear_native_flags
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
name|ixl_init_locked
argument_list|(
name|pf
argument_list|)
expr_stmt|;
comment|/* also enables intr */
comment|//set_crcstrip(&adapter->hw, onoff); // XXX why twice ?
name|IXL_PF_UNLOCK
argument_list|(
name|pf
argument_list|)
expr_stmt|;
return|return
operator|(
name|ifp
operator|->
name|if_drv_flags
operator|&
name|IFF_DRV_RUNNING
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * The attach routine, called near the end of ixl_attach(),  * fills the parameters for netmap_attach() and calls it.  * It cannot fail, in the worst case (such as no memory)  * netmap mode will be disabled and the driver will only  * operate in standard mode.  */
end_comment

begin_function
specifier|static
name|void
name|ixl_netmap_attach
parameter_list|(
name|struct
name|ixl_vsi
modifier|*
name|vsi
parameter_list|)
block|{
name|struct
name|netmap_adapter
name|na
decl_stmt|;
name|bzero
argument_list|(
operator|&
name|na
argument_list|,
sizeof|sizeof
argument_list|(
name|na
argument_list|)
argument_list|)
expr_stmt|;
name|na
operator|.
name|ifp
operator|=
name|vsi
operator|->
name|ifp
expr_stmt|;
name|na
operator|.
name|na_flags
operator|=
name|NAF_BDG_MAYSLEEP
expr_stmt|;
comment|// XXX check that queues is set.
name|printf
argument_list|(
literal|"queues is %p\n"
argument_list|,
name|vsi
operator|->
name|queues
argument_list|)
expr_stmt|;
if|if
condition|(
name|vsi
operator|->
name|queues
condition|)
block|{
name|na
operator|.
name|num_tx_desc
operator|=
name|vsi
operator|->
name|queues
index|[
literal|0
index|]
operator|.
name|num_desc
expr_stmt|;
name|na
operator|.
name|num_rx_desc
operator|=
name|vsi
operator|->
name|queues
index|[
literal|0
index|]
operator|.
name|num_desc
expr_stmt|;
block|}
name|na
operator|.
name|nm_txsync
operator|=
name|ixl_netmap_txsync
expr_stmt|;
name|na
operator|.
name|nm_rxsync
operator|=
name|ixl_netmap_rxsync
expr_stmt|;
name|na
operator|.
name|nm_register
operator|=
name|ixl_netmap_reg
expr_stmt|;
name|na
operator|.
name|num_tx_rings
operator|=
name|na
operator|.
name|num_rx_rings
operator|=
name|vsi
operator|->
name|num_queues
expr_stmt|;
name|netmap_attach
argument_list|(
operator|&
name|na
argument_list|)
expr_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !NETMAP_IXL_MAIN, code for ixl_txrx.c */
end_comment

begin_comment
comment|/*  * Reconcile kernel and user view of the transmit ring.  *  * All information is in the kring.  * Userspace wants to send packets up to the one before kring->rhead,  * kernel knows kring->nr_hwcur is the first unsent packet.  *  * Here we push packets out (as many as possible), and possibly  * reclaim buffers from previously completed transmission.  *  * The caller (netmap) guarantees that there is only one instance  * running at any time. Any interference with other driver  * methods should be handled by the individual drivers.  */
end_comment

begin_function
name|int
name|ixl_netmap_txsync
parameter_list|(
name|struct
name|netmap_kring
modifier|*
name|kring
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|kring
operator|->
name|na
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|nm_i
decl_stmt|;
comment|/* index into the netmap ring */
name|u_int
name|nic_i
decl_stmt|;
comment|/* index into the NIC ring */
name|u_int
name|n
decl_stmt|;
name|u_int
specifier|const
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|u_int
specifier|const
name|head
init|=
name|kring
operator|->
name|rhead
decl_stmt|;
comment|/* 	 * interrupts on every tx packet are expensive so request 	 * them every half ring, or where NS_REPORT is set 	 */
name|u_int
name|report_frequency
init|=
name|kring
operator|->
name|nkr_num_slots
operator|>>
literal|1
decl_stmt|;
comment|/* device-specific */
name|struct
name|ixl_vsi
modifier|*
name|vsi
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|ixl_queue
modifier|*
name|que
init|=
operator|&
name|vsi
operator|->
name|queues
index|[
name|kring
operator|->
name|ring_id
index|]
decl_stmt|;
name|struct
name|tx_ring
modifier|*
name|txr
init|=
operator|&
name|que
operator|->
name|txr
decl_stmt|;
name|bus_dmamap_sync
argument_list|(
name|txr
operator|->
name|dma
operator|.
name|tag
argument_list|,
name|txr
operator|->
name|dma
operator|.
name|map
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
comment|/* 	 * First part: process new packets to send. 	 * nm_i is the current index in the netmap ring, 	 * nic_i is the corresponding index in the NIC ring. 	 * 	 * If we have packets to send (nm_i != head) 	 * iterate over the netmap ring, fetch length and update 	 * the corresponding slot in the NIC ring. Some drivers also 	 * need to update the buffer's physical address in the NIC slot 	 * even NS_BUF_CHANGED is not set (PNMB computes the addresses). 	 * 	 * The netmap_reload_map() calls is especially expensive, 	 * even when (as in this case) the tag is 0, so do only 	 * when the buffer has actually changed. 	 * 	 * If possible do not set the report/intr bit on all slots, 	 * but only a few times per ring or when NS_REPORT is set. 	 * 	 * Finally, on 10G and faster drivers, it might be useful 	 * to prefetch the next slot and txr entry. 	 */
name|nm_i
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|nm_i
operator|!=
name|head
condition|)
block|{
comment|/* we have new packets to send */
name|nic_i
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|nm_i
argument_list|)
expr_stmt|;
name|__builtin_prefetch
argument_list|(
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
argument_list|)
expr_stmt|;
name|__builtin_prefetch
argument_list|(
operator|&
name|txr
operator|->
name|buffers
index|[
name|nic_i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|nm_i
operator|!=
name|head
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
decl_stmt|;
name|u_int
name|len
init|=
name|slot
operator|->
name|len
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|na
argument_list|,
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
comment|/* device-specific */
name|struct
name|i40e_tx_desc
modifier|*
name|curr
init|=
operator|&
name|txr
operator|->
name|base
index|[
name|nic_i
index|]
decl_stmt|;
name|struct
name|ixl_tx_buf
modifier|*
name|txbuf
init|=
operator|&
name|txr
operator|->
name|buffers
index|[
name|nic_i
index|]
decl_stmt|;
name|u64
name|flags
init|=
operator|(
name|slot
operator|->
name|flags
operator|&
name|NS_REPORT
operator|||
name|nic_i
operator|==
literal|0
operator|||
name|nic_i
operator|==
name|report_frequency
operator|)
condition|?
operator|(
operator|(
name|u64
operator|)
name|I40E_TX_DESC_CMD_RS
operator|<<
name|I40E_TXD_QW1_CMD_SHIFT
operator|)
else|:
literal|0
decl_stmt|;
comment|/* prefetch for next round */
name|__builtin_prefetch
argument_list|(
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|__builtin_prefetch
argument_list|(
operator|&
name|txr
operator|->
name|buffers
index|[
name|nic_i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|NM_CHECK_ADDR_LEN
argument_list|(
name|na
argument_list|,
name|addr
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
comment|/* buffer has changed, reload map */
name|netmap_reload_map
argument_list|(
name|na
argument_list|,
name|txr
operator|->
name|dma
operator|.
name|tag
argument_list|,
name|txbuf
operator|->
name|map
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
name|slot
operator|->
name|flags
operator|&=
operator|~
operator|(
name|NS_REPORT
operator||
name|NS_BUF_CHANGED
operator|)
expr_stmt|;
comment|/* Fill the slot in the NIC ring. */
name|curr
operator|->
name|buffer_addr
operator|=
name|htole64
argument_list|(
name|paddr
argument_list|)
expr_stmt|;
name|curr
operator|->
name|cmd_type_offset_bsz
operator|=
name|htole64
argument_list|(
operator|(
operator|(
name|u64
operator|)
name|len
operator|<<
name|I40E_TXD_QW1_TX_BUF_SZ_SHIFT
operator|)
operator||
name|flags
operator||
operator|(
operator|(
name|u64
operator|)
name|I40E_TX_DESC_CMD_EOP
operator|<<
name|I40E_TXD_QW1_CMD_SHIFT
operator|)
argument_list|)
expr_stmt|;
comment|// XXX more ?
comment|/* make sure changes to the buffer are synced */
name|bus_dmamap_sync
argument_list|(
name|txr
operator|->
name|dma
operator|.
name|tag
argument_list|,
name|txbuf
operator|->
name|map
argument_list|,
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwcur
operator|=
name|head
expr_stmt|;
comment|/* synchronize the NIC ring */
name|bus_dmamap_sync
argument_list|(
name|txr
operator|->
name|dma
operator|.
name|tag
argument_list|,
name|txr
operator|->
name|dma
operator|.
name|map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
comment|/* (re)start the tx unit up to slot nic_i (excluded) */
name|wr32
argument_list|(
name|vsi
operator|->
name|hw
argument_list|,
name|txr
operator|->
name|tail
argument_list|,
name|nic_i
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Second part: reclaim buffers for completed transmissions. 	 */
name|nic_i
operator|=
name|LE32_TO_CPU
argument_list|(
operator|*
operator|(
specifier|volatile
name|__le32
operator|*
operator|)
operator|&
name|txr
operator|->
name|base
index|[
name|que
operator|->
name|num_desc
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|nic_i
operator|!=
name|txr
operator|->
name|next_to_clean
condition|)
block|{
comment|/* some tx completed, increment avail */
name|txr
operator|->
name|next_to_clean
operator|=
name|nic_i
expr_stmt|;
name|kring
operator|->
name|nr_hwtail
operator|=
name|nm_prev
argument_list|(
name|netmap_idx_n2k
argument_list|(
name|kring
argument_list|,
name|nic_i
argument_list|)
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the receive ring.  * Same as for the txsync, this routine must be efficient.  * The caller guarantees a single invocations, but races against  * the rest of the driver should be handled here.  *  * On call, kring->rhead is the first packet that userspace wants  * to keep, and kring->rcur is the wakeup point.  * The kernel has previously reported packets up to kring->rtail.  *  * If (flags& NAF_FORCE_READ) also check for incoming packets irrespective  * of whether or not we received an interrupt.  */
end_comment

begin_function
name|int
name|ixl_netmap_rxsync
parameter_list|(
name|struct
name|netmap_kring
modifier|*
name|kring
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|kring
operator|->
name|na
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|nm_i
decl_stmt|;
comment|/* index into the netmap ring */
name|u_int
name|nic_i
decl_stmt|;
comment|/* index into the NIC ring */
name|u_int
name|n
decl_stmt|;
name|u_int
specifier|const
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|u_int
specifier|const
name|head
init|=
name|kring
operator|->
name|rhead
decl_stmt|;
name|int
name|force_update
init|=
operator|(
name|flags
operator|&
name|NAF_FORCE_READ
operator|)
operator|||
name|kring
operator|->
name|nr_kflags
operator|&
name|NKR_PENDINTR
decl_stmt|;
comment|/* device-specific */
name|struct
name|ixl_vsi
modifier|*
name|vsi
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|ixl_queue
modifier|*
name|que
init|=
operator|&
name|vsi
operator|->
name|queues
index|[
name|kring
operator|->
name|ring_id
index|]
decl_stmt|;
name|struct
name|rx_ring
modifier|*
name|rxr
init|=
operator|&
name|que
operator|->
name|rxr
decl_stmt|;
if|if
condition|(
name|head
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
comment|/* XXX check sync modes */
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|dma
operator|.
name|tag
argument_list|,
name|rxr
operator|->
name|dma
operator|.
name|map
argument_list|,
name|BUS_DMASYNC_POSTREAD
operator||
name|BUS_DMASYNC_POSTWRITE
argument_list|)
expr_stmt|;
comment|/* 	 * First part: import newly received packets. 	 * 	 * nm_i is the index of the next free slot in the netmap ring, 	 * nic_i is the index of the next received packet in the NIC ring, 	 * and they may differ in case if_init() has been called while 	 * in netmap mode. For the receive ring we have 	 * 	 *	nic_i = rxr->next_check; 	 *	nm_i = kring->nr_hwtail (previous) 	 * and 	 *	nm_i == (nic_i + kring->nkr_hwofs) % ring_size 	 * 	 * rxr->next_check is set to 0 on a ring reinit 	 */
if|if
condition|(
name|netmap_no_pendintr
operator|||
name|force_update
condition|)
block|{
name|int
name|crclen
init|=
name|ixl_crcstrip
condition|?
literal|0
else|:
literal|4
decl_stmt|;
name|uint16_t
name|slot_flags
init|=
name|kring
operator|->
name|nkr_slot_flags
decl_stmt|;
name|nic_i
operator|=
name|rxr
operator|->
name|next_check
expr_stmt|;
comment|// or also k2n(kring->nr_hwtail)
name|nm_i
operator|=
name|netmap_idx_n2k
argument_list|(
name|kring
argument_list|,
name|nic_i
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
condition|;
name|n
operator|++
control|)
block|{
name|union
name|i40e_32byte_rx_desc
modifier|*
name|curr
init|=
operator|&
name|rxr
operator|->
name|base
index|[
name|nic_i
index|]
decl_stmt|;
name|uint64_t
name|qword
init|=
name|le64toh
argument_list|(
name|curr
operator|->
name|wb
operator|.
name|qword1
operator|.
name|status_error_len
argument_list|)
decl_stmt|;
name|uint32_t
name|staterr
init|=
operator|(
name|qword
operator|&
name|I40E_RXD_QW1_STATUS_MASK
operator|)
operator|>>
name|I40E_RXD_QW1_STATUS_SHIFT
decl_stmt|;
if|if
condition|(
operator|(
name|staterr
operator|&
operator|(
literal|1
operator|<<
name|I40E_RX_DESC_STATUS_DD_SHIFT
operator|)
operator|)
operator|==
literal|0
condition|)
break|break;
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
operator|.
name|len
operator|=
operator|(
operator|(
name|qword
operator|&
name|I40E_RXD_QW1_LENGTH_PBUF_MASK
operator|)
operator|>>
name|I40E_RXD_QW1_LENGTH_PBUF_SHIFT
operator|)
operator|-
name|crclen
expr_stmt|;
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
operator|.
name|flags
operator|=
name|slot_flags
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|ptag
argument_list|,
name|rxr
operator|->
name|buffers
index|[
name|nic_i
index|]
operator|.
name|pmap
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
condition|)
block|{
comment|/* update the state variables */
if|if
condition|(
name|netmap_no_pendintr
operator|&&
operator|!
name|force_update
condition|)
block|{
comment|/* diagnostics */
name|ixl_rx_miss
operator|++
expr_stmt|;
name|ixl_rx_miss_bufs
operator|+=
name|n
expr_stmt|;
block|}
name|rxr
operator|->
name|next_check
operator|=
name|nic_i
expr_stmt|;
name|kring
operator|->
name|nr_hwtail
operator|=
name|nm_i
expr_stmt|;
block|}
name|kring
operator|->
name|nr_kflags
operator|&=
operator|~
name|NKR_PENDINTR
expr_stmt|;
block|}
comment|/* 	 * Second part: skip past packets that userspace has released. 	 * (kring->nr_hwcur to head excluded), 	 * and make the buffers available for reception. 	 * As usual nm_i is the index in the netmap ring, 	 * nic_i is the index in the NIC ring, and 	 * nm_i == (nic_i + kring->nkr_hwofs) % ring_size 	 */
name|nm_i
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|nm_i
operator|!=
name|head
condition|)
block|{
name|nic_i
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|nm_i
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|nm_i
operator|!=
name|head
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|na
argument_list|,
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
name|union
name|i40e_32byte_rx_desc
modifier|*
name|curr
init|=
operator|&
name|rxr
operator|->
name|base
index|[
name|nic_i
index|]
decl_stmt|;
name|struct
name|ixl_rx_buf
modifier|*
name|rxbuf
init|=
operator|&
name|rxr
operator|->
name|buffers
index|[
name|nic_i
index|]
decl_stmt|;
if|if
condition|(
name|addr
operator|==
name|NETMAP_BUF_BASE
argument_list|(
name|na
argument_list|)
condition|)
comment|/* bad buf */
goto|goto
name|ring_reset
goto|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
comment|/* buffer has changed, reload map */
name|netmap_reload_map
argument_list|(
name|na
argument_list|,
name|rxr
operator|->
name|ptag
argument_list|,
name|rxbuf
operator|->
name|pmap
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
block|}
name|curr
operator|->
name|read
operator|.
name|pkt_addr
operator|=
name|htole64
argument_list|(
name|paddr
argument_list|)
expr_stmt|;
name|curr
operator|->
name|read
operator|.
name|hdr_addr
operator|=
literal|0
expr_stmt|;
comment|// XXX needed
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|ptag
argument_list|,
name|rxbuf
operator|->
name|pmap
argument_list|,
name|BUS_DMASYNC_PREREAD
argument_list|)
expr_stmt|;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwcur
operator|=
name|head
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|dma
operator|.
name|tag
argument_list|,
name|rxr
operator|->
name|dma
operator|.
name|map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
comment|/* 		 * IMPORTANT: we must leave one free slot in the ring, 		 * so move nic_i back by one unit 		 */
name|nic_i
operator|=
name|nm_prev
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|wr32
argument_list|(
name|vsi
operator|->
name|hw
argument_list|,
name|rxr
operator|->
name|tail
argument_list|,
name|nic_i
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
name|ring_reset
label|:
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !NETMAP_IXL_MAIN */
end_comment

begin_comment
comment|/* end of file */
end_comment

end_unit

