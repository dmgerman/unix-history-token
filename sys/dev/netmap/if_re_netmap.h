begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011-2014 Luigi Rizzo. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  *  * netmap support for: re  *  * For more details on netmap support please see ixgbe_netmap.h  */
end_comment

begin_include
include|#
directive|include
file|<net/netmap.h>
end_include

begin_include
include|#
directive|include
file|<sys/selinfo.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_comment
comment|/* vtophys ? */
end_comment

begin_include
include|#
directive|include
file|<dev/netmap/netmap_kern.h>
end_include

begin_comment
comment|/*  * Register/unregister. We are already under netmap lock.  */
end_comment

begin_function
specifier|static
name|int
name|re_netmap_reg
parameter_list|(
name|struct
name|netmap_adapter
modifier|*
name|na
parameter_list|,
name|int
name|onoff
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|rl_softc
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|RL_LOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|re_stop
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|/* also clears IFF_DRV_RUNNING */
if|if
condition|(
name|onoff
condition|)
block|{
name|nm_set_native_flags
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nm_clear_native_flags
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
name|re_init_locked
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|/* also enables intr */
name|RL_UNLOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
return|return
operator|(
name|ifp
operator|->
name|if_drv_flags
operator|&
name|IFF_DRV_RUNNING
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the transmit ring.  */
end_comment

begin_function
specifier|static
name|int
name|re_netmap_txsync
parameter_list|(
name|struct
name|netmap_adapter
modifier|*
name|na
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|tx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|nm_i
decl_stmt|;
comment|/* index into the netmap ring */
name|u_int
name|nic_i
decl_stmt|;
comment|/* index into the NIC ring */
name|u_int
name|n
decl_stmt|;
name|u_int
specifier|const
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|u_int
specifier|const
name|head
init|=
name|kring
operator|->
name|rhead
decl_stmt|;
comment|/* device-specific */
name|struct
name|rl_softc
modifier|*
name|sc
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|rl_txdesc
modifier|*
name|txd
init|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_desc
decl_stmt|;
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list_tag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
operator||
name|BUS_DMASYNC_POSTWRITE
argument_list|)
expr_stmt|;
comment|// XXX extra postwrite ?
comment|/* 	 * First part: process new packets to send. 	 */
name|nm_i
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|nm_i
operator|!=
name|head
condition|)
block|{
comment|/* we have new packets to send */
name|nic_i
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_prodidx
expr_stmt|;
comment|// XXX or netmap_idx_k2n(kring, nm_i);
for|for
control|(
name|n
operator|=
literal|0
init|;
name|nm_i
operator|!=
name|head
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
decl_stmt|;
name|u_int
name|len
init|=
name|slot
operator|->
name|len
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
comment|/* device-specific */
name|struct
name|rl_desc
modifier|*
name|desc
init|=
operator|&
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list
index|[
name|nic_i
index|]
decl_stmt|;
name|int
name|cmd
init|=
name|slot
operator|->
name|len
operator||
name|RL_TDESC_CMD_EOF
operator||
name|RL_TDESC_CMD_OWN
operator||
name|RL_TDESC_CMD_SOF
decl_stmt|;
name|NM_CHECK_ADDR_LEN
argument_list|(
name|addr
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|nic_i
operator|==
name|lim
condition|)
comment|/* mark end of ring */
name|cmd
operator||=
name|RL_TDESC_CMD_EOR
expr_stmt|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
comment|/* buffer has changed, reload map */
name|desc
operator|->
name|rl_bufaddr_lo
operator|=
name|htole32
argument_list|(
name|RL_ADDR_LO
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|->
name|rl_bufaddr_hi
operator|=
name|htole32
argument_list|(
name|RL_ADDR_HI
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|netmap_reload_map
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_mtag
argument_list|,
name|txd
index|[
name|nic_i
index|]
operator|.
name|tx_dmamap
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
name|slot
operator|->
name|flags
operator|&=
operator|~
operator|(
name|NS_REPORT
operator||
name|NS_BUF_CHANGED
operator|)
expr_stmt|;
comment|/* Fill the slot in the NIC ring. */
name|desc
operator|->
name|rl_cmdstat
operator|=
name|htole32
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
comment|/* make sure changes to the buffer are synced */
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_mtag
argument_list|,
name|txd
index|[
name|nic_i
index|]
operator|.
name|tx_dmamap
argument_list|,
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_prodidx
operator|=
name|nic_i
expr_stmt|;
name|kring
operator|->
name|nr_hwcur
operator|=
name|head
expr_stmt|;
comment|/* synchronize the NIC ring */
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list_tag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list_map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
comment|/* start ? */
name|CSR_WRITE_1
argument_list|(
name|sc
argument_list|,
name|sc
operator|->
name|rl_txstart
argument_list|,
name|RL_TXSTART_START
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Second part: reclaim buffers for completed transmissions. 	 */
if|if
condition|(
name|flags
operator|&
name|NAF_FORCE_RECLAIM
operator|||
name|nm_kr_txempty
argument_list|(
name|kring
argument_list|)
condition|)
block|{
name|nic_i
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_considx
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|nic_i
operator|!=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_prodidx
condition|;
name|n
operator|++
operator|,
name|nic_i
operator|=
name|RL_TX_DESC_NXT
argument_list|(
name|sc
argument_list|,
name|nic_i
argument_list|)
control|)
block|{
name|uint32_t
name|cmdstat
init|=
name|le32toh
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list
index|[
name|nic_i
index|]
operator|.
name|rl_cmdstat
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmdstat
operator|&
name|RL_TDESC_STAT_OWN
condition|)
break|break;
block|}
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_considx
operator|=
name|nic_i
expr_stmt|;
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_free
operator|+=
name|n
expr_stmt|;
name|kring
operator|->
name|nr_hwtail
operator|=
name|nm_prev
argument_list|(
name|netmap_idx_n2k
argument_list|(
name|kring
argument_list|,
name|nic_i
argument_list|)
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
block|}
name|nm_txsync_finalize
argument_list|(
name|kring
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the receive ring.  */
end_comment

begin_function
specifier|static
name|int
name|re_netmap_rxsync
parameter_list|(
name|struct
name|netmap_adapter
modifier|*
name|na
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|rx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|nm_i
decl_stmt|;
comment|/* index into the netmap ring */
name|u_int
name|nic_i
decl_stmt|;
comment|/* index into the NIC ring */
name|u_int
name|n
decl_stmt|;
name|u_int
specifier|const
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|u_int
specifier|const
name|head
init|=
name|nm_rxsync_prologue
argument_list|(
name|kring
argument_list|)
decl_stmt|;
name|int
name|force_update
init|=
operator|(
name|flags
operator|&
name|NAF_FORCE_READ
operator|)
operator|||
name|kring
operator|->
name|nr_kflags
operator|&
name|NKR_PENDINTR
decl_stmt|;
comment|/* device-specific */
name|struct
name|rl_softc
modifier|*
name|sc
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|rl_rxdesc
modifier|*
name|rxd
init|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_desc
decl_stmt|;
if|if
condition|(
name|head
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list_tag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
operator||
name|BUS_DMASYNC_POSTWRITE
argument_list|)
expr_stmt|;
comment|/* 	 * First part: import newly received packets. 	 * 	 * This device uses all the buffers in the ring, so we need 	 * another termination condition in addition to RL_RDESC_STAT_OWN 	 * cleared (all buffers could have it cleared). The easiest one 	 * is to stop right before nm_hwcur. 	 */
if|if
condition|(
name|netmap_no_pendintr
operator|||
name|force_update
condition|)
block|{
name|uint16_t
name|slot_flags
init|=
name|kring
operator|->
name|nkr_slot_flags
decl_stmt|;
name|uint32_t
name|stop_i
init|=
name|nm_prev
argument_list|(
name|kring
operator|->
name|nr_hwcur
argument_list|,
name|lim
argument_list|)
decl_stmt|;
name|nic_i
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_prodidx
expr_stmt|;
comment|/* next pkt to check */
name|nm_i
operator|=
name|netmap_idx_n2k
argument_list|(
name|kring
argument_list|,
name|nic_i
argument_list|)
expr_stmt|;
while|while
condition|(
name|nm_i
operator|!=
name|stop_i
condition|)
block|{
name|struct
name|rl_desc
modifier|*
name|cur_rx
init|=
operator|&
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list
index|[
name|nic_i
index|]
decl_stmt|;
name|uint32_t
name|rxstat
init|=
name|le32toh
argument_list|(
name|cur_rx
operator|->
name|rl_cmdstat
argument_list|)
decl_stmt|;
name|uint32_t
name|total_len
decl_stmt|;
if|if
condition|(
operator|(
name|rxstat
operator|&
name|RL_RDESC_STAT_OWN
operator|)
operator|!=
literal|0
condition|)
break|break;
name|total_len
operator|=
name|rxstat
operator|&
name|sc
operator|->
name|rl_rxlenmask
expr_stmt|;
comment|/* XXX subtract crc */
name|total_len
operator|=
operator|(
name|total_len
operator|<
literal|4
operator|)
condition|?
literal|0
else|:
name|total_len
operator|-
literal|4
expr_stmt|;
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
operator|.
name|len
operator|=
name|total_len
expr_stmt|;
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
operator|.
name|flags
operator|=
name|slot_flags
expr_stmt|;
comment|/*  sync was in re_newbuf() */
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_mtag
argument_list|,
name|rxd
index|[
name|nic_i
index|]
operator|.
name|rx_dmamap
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
comment|// sc->rl_ifp->if_ipackets++;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_prodidx
operator|=
name|nic_i
expr_stmt|;
name|kring
operator|->
name|nr_hwtail
operator|=
name|nm_i
expr_stmt|;
name|kring
operator|->
name|nr_kflags
operator|&=
operator|~
name|NKR_PENDINTR
expr_stmt|;
block|}
comment|/* 	 * Second part: skip past packets that userspace has released. 	 */
name|nm_i
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|nm_i
operator|!=
name|head
condition|)
block|{
name|nic_i
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|nm_i
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|nm_i
operator|!=
name|head
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
name|struct
name|rl_desc
modifier|*
name|desc
init|=
operator|&
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list
index|[
name|nic_i
index|]
decl_stmt|;
name|int
name|cmd
init|=
name|NETMAP_BUF_SIZE
operator||
name|RL_RDESC_CMD_OWN
decl_stmt|;
if|if
condition|(
name|addr
operator|==
name|netmap_buffer_base
condition|)
comment|/* bad buf */
goto|goto
name|ring_reset
goto|;
if|if
condition|(
name|nic_i
operator|==
name|lim
condition|)
comment|/* mark end of ring */
name|cmd
operator||=
name|RL_RDESC_CMD_EOR
expr_stmt|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
comment|/* buffer has changed, reload map */
name|desc
operator|->
name|rl_bufaddr_lo
operator|=
name|htole32
argument_list|(
name|RL_ADDR_LO
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|->
name|rl_bufaddr_hi
operator|=
name|htole32
argument_list|(
name|RL_ADDR_HI
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|netmap_reload_map
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_mtag
argument_list|,
name|rxd
index|[
name|nic_i
index|]
operator|.
name|rx_dmamap
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
block|}
name|desc
operator|->
name|rl_cmdstat
operator|=
name|htole32
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_mtag
argument_list|,
name|rxd
index|[
name|nic_i
index|]
operator|.
name|rx_dmamap
argument_list|,
name|BUS_DMASYNC_PREREAD
argument_list|)
expr_stmt|;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwcur
operator|=
name|head
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list_tag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list_map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
block|}
comment|/* tell userspace that there might be new packets */
name|nm_rxsync_finalize
argument_list|(
name|kring
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
name|ring_reset
label|:
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * Additional routines to init the tx and rx rings.  * In other drivers we do that inline in the main code.  */
end_comment

begin_function
specifier|static
name|void
name|re_netmap_tx_init
parameter_list|(
name|struct
name|rl_softc
modifier|*
name|sc
parameter_list|)
block|{
name|struct
name|rl_txdesc
modifier|*
name|txd
decl_stmt|;
name|struct
name|rl_desc
modifier|*
name|desc
decl_stmt|;
name|int
name|i
decl_stmt|,
name|n
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|sc
operator|->
name|rl_ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_slot
modifier|*
name|slot
decl_stmt|;
if|if
condition|(
operator|!
name|na
operator|||
operator|!
operator|(
name|na
operator|->
name|na_flags
operator|&
name|NAF_NATIVE_ON
operator|)
condition|)
block|{
return|return;
block|}
name|slot
operator|=
name|netmap_reset
argument_list|(
name|na
argument_list|,
name|NR_TX
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/* slot is NULL if we are not in netmap mode */
if|if
condition|(
operator|!
name|slot
condition|)
return|return;
comment|// XXX cannot happen
comment|/* in netmap mode, overwrite addresses and maps */
name|txd
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_desc
expr_stmt|;
name|desc
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list
expr_stmt|;
name|n
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_desc_cnt
expr_stmt|;
comment|/* l points in the netmap ring, i points in the NIC ring */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|uint64_t
name|paddr
decl_stmt|;
name|int
name|l
init|=
name|netmap_idx_n2k
argument_list|(
operator|&
name|na
operator|->
name|tx_rings
index|[
literal|0
index|]
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|slot
operator|+
name|l
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
name|desc
index|[
name|i
index|]
operator|.
name|rl_bufaddr_lo
operator|=
name|htole32
argument_list|(
name|RL_ADDR_LO
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|desc
index|[
name|i
index|]
operator|.
name|rl_bufaddr_hi
operator|=
name|htole32
argument_list|(
name|RL_ADDR_HI
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|netmap_load_map
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_mtag
argument_list|,
name|txd
index|[
name|i
index|]
operator|.
name|tx_dmamap
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|re_netmap_rx_init
parameter_list|(
name|struct
name|rl_softc
modifier|*
name|sc
parameter_list|)
block|{
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|sc
operator|->
name|rl_ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
name|netmap_reset
argument_list|(
name|na
argument_list|,
name|NR_RX
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|struct
name|rl_desc
modifier|*
name|desc
init|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list
decl_stmt|;
name|uint32_t
name|cmdstat
decl_stmt|;
name|uint32_t
name|nic_i
decl_stmt|,
name|max_avail
decl_stmt|;
name|uint32_t
specifier|const
name|n
init|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_desc_cnt
decl_stmt|;
if|if
condition|(
operator|!
name|slot
condition|)
return|return;
comment|/* 	 * Do not release the slots owned by userspace, 	 * and also keep one empty. 	 */
name|max_avail
operator|=
name|n
operator|-
literal|1
operator|-
name|nm_kr_rxspace
argument_list|(
operator|&
name|na
operator|->
name|rx_rings
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|nic_i
operator|=
literal|0
init|;
name|nic_i
operator|<
name|n
condition|;
name|nic_i
operator|++
control|)
block|{
name|void
modifier|*
name|addr
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|uint32_t
name|nm_i
init|=
name|netmap_idx_n2k
argument_list|(
operator|&
name|na
operator|->
name|rx_rings
index|[
literal|0
index|]
argument_list|,
name|nic_i
argument_list|)
decl_stmt|;
name|addr
operator|=
name|PNMB
argument_list|(
name|slot
operator|+
name|nm_i
argument_list|,
operator|&
name|paddr
argument_list|)
expr_stmt|;
name|netmap_reload_map
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_mtag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_desc
index|[
name|nic_i
index|]
operator|.
name|rx_dmamap
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_mtag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_desc
index|[
name|nic_i
index|]
operator|.
name|rx_dmamap
argument_list|,
name|BUS_DMASYNC_PREREAD
argument_list|)
expr_stmt|;
name|desc
index|[
name|nic_i
index|]
operator|.
name|rl_bufaddr_lo
operator|=
name|htole32
argument_list|(
name|RL_ADDR_LO
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|desc
index|[
name|nic_i
index|]
operator|.
name|rl_bufaddr_hi
operator|=
name|htole32
argument_list|(
name|RL_ADDR_HI
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|cmdstat
operator|=
name|NETMAP_BUF_SIZE
expr_stmt|;
if|if
condition|(
name|nic_i
operator|==
name|n
operator|-
literal|1
condition|)
comment|/* mark the end of ring */
name|cmdstat
operator||=
name|RL_RDESC_CMD_EOR
expr_stmt|;
if|if
condition|(
name|nic_i
operator|<
name|max_avail
condition|)
name|cmdstat
operator||=
name|RL_RDESC_CMD_OWN
expr_stmt|;
name|desc
index|[
name|nic_i
index|]
operator|.
name|rl_cmdstat
operator|=
name|htole32
argument_list|(
name|cmdstat
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|re_netmap_attach
parameter_list|(
name|struct
name|rl_softc
modifier|*
name|sc
parameter_list|)
block|{
name|struct
name|netmap_adapter
name|na
decl_stmt|;
name|bzero
argument_list|(
operator|&
name|na
argument_list|,
sizeof|sizeof
argument_list|(
name|na
argument_list|)
argument_list|)
expr_stmt|;
name|na
operator|.
name|ifp
operator|=
name|sc
operator|->
name|rl_ifp
expr_stmt|;
name|na
operator|.
name|na_flags
operator|=
name|NAF_BDG_MAYSLEEP
expr_stmt|;
name|na
operator|.
name|num_tx_desc
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_desc_cnt
expr_stmt|;
name|na
operator|.
name|num_rx_desc
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_desc_cnt
expr_stmt|;
name|na
operator|.
name|nm_txsync
operator|=
name|re_netmap_txsync
expr_stmt|;
name|na
operator|.
name|nm_rxsync
operator|=
name|re_netmap_rxsync
expr_stmt|;
name|na
operator|.
name|nm_register
operator|=
name|re_netmap_reg
expr_stmt|;
name|na
operator|.
name|num_tx_rings
operator|=
name|na
operator|.
name|num_rx_rings
operator|=
literal|1
expr_stmt|;
name|netmap_attach
argument_list|(
operator|&
name|na
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* end of file */
end_comment

end_unit

