begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 Luigi Rizzo. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  * $Id: if_re_netmap.h 9802 2011-12-02 18:42:37Z luigi $  *  * netmap support for if_re  */
end_comment

begin_include
include|#
directive|include
file|<net/netmap.h>
end_include

begin_include
include|#
directive|include
file|<sys/selinfo.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_comment
comment|/* vtophys ? */
end_comment

begin_include
include|#
directive|include
file|<dev/netmap/netmap_kern.h>
end_include

begin_function_decl
specifier|static
name|int
name|re_netmap_reg
parameter_list|(
name|struct
name|ifnet
modifier|*
parameter_list|,
name|int
name|onoff
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|int
name|re_netmap_txsync
parameter_list|(
name|void
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|int
name|re_netmap_rxsync
parameter_list|(
name|void
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|re_netmap_lock_wrapper
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|void
name|re_netmap_attach
parameter_list|(
name|struct
name|rl_softc
modifier|*
name|sc
parameter_list|)
block|{
name|struct
name|netmap_adapter
name|na
decl_stmt|;
name|bzero
argument_list|(
operator|&
name|na
argument_list|,
sizeof|sizeof
argument_list|(
name|na
argument_list|)
argument_list|)
expr_stmt|;
name|na
operator|.
name|ifp
operator|=
name|sc
operator|->
name|rl_ifp
expr_stmt|;
name|na
operator|.
name|separate_locks
operator|=
literal|0
expr_stmt|;
name|na
operator|.
name|num_tx_desc
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_desc_cnt
expr_stmt|;
name|na
operator|.
name|num_rx_desc
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_desc_cnt
expr_stmt|;
name|na
operator|.
name|nm_txsync
operator|=
name|re_netmap_txsync
expr_stmt|;
name|na
operator|.
name|nm_rxsync
operator|=
name|re_netmap_rxsync
expr_stmt|;
name|na
operator|.
name|nm_lock
operator|=
name|re_netmap_lock_wrapper
expr_stmt|;
name|na
operator|.
name|nm_register
operator|=
name|re_netmap_reg
expr_stmt|;
name|na
operator|.
name|buff_size
operator|=
name|NETMAP_BUF_SIZE
expr_stmt|;
name|netmap_attach
argument_list|(
operator|&
name|na
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * wrapper to export locks to the generic code  * We should not use the tx/rx locks  */
end_comment

begin_function
specifier|static
name|void
name|re_netmap_lock_wrapper
parameter_list|(
name|void
modifier|*
name|_a
parameter_list|,
name|int
name|what
parameter_list|,
name|u_int
name|queueid
parameter_list|)
block|{
name|struct
name|rl_softc
modifier|*
name|adapter
init|=
name|_a
decl_stmt|;
switch|switch
condition|(
name|what
condition|)
block|{
case|case
name|NETMAP_CORE_LOCK
case|:
name|RL_LOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_CORE_UNLOCK
case|:
name|RL_UNLOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_TX_LOCK
case|:
case|case
name|NETMAP_RX_LOCK
case|:
case|case
name|NETMAP_TX_UNLOCK
case|:
case|case
name|NETMAP_RX_UNLOCK
case|:
name|D
argument_list|(
literal|"invalid lock call %d, no tx/rx locks here"
argument_list|,
name|what
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_comment
comment|/*  * support for netmap register/unregisted. We are already under core lock.  * only called on the first register or the last unregister.  */
end_comment

begin_function
specifier|static
name|int
name|re_netmap_reg
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|int
name|onoff
parameter_list|)
block|{
name|struct
name|rl_softc
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|ifp
argument_list|)
decl_stmt|;
name|int
name|error
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|na
operator|==
name|NULL
condition|)
return|return
name|EINVAL
return|;
comment|/* Tell the stack that the interface is no longer active */
name|ifp
operator|->
name|if_drv_flags
operator|&=
operator|~
operator|(
name|IFF_DRV_RUNNING
operator||
name|IFF_DRV_OACTIVE
operator|)
expr_stmt|;
name|re_stop
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
name|onoff
condition|)
block|{
name|ifp
operator|->
name|if_capenable
operator||=
name|IFCAP_NETMAP
expr_stmt|;
comment|/* save if_transmit to restore it later */
name|na
operator|->
name|if_transmit
operator|=
name|ifp
operator|->
name|if_transmit
expr_stmt|;
name|ifp
operator|->
name|if_transmit
operator|=
name|netmap_start
expr_stmt|;
name|re_init_locked
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ifp
operator|->
name|if_drv_flags
operator|&
operator|(
name|IFF_DRV_RUNNING
operator||
name|IFF_DRV_OACTIVE
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
name|error
operator|=
name|ENOMEM
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
block|}
else|else
block|{
name|fail
label|:
comment|/* restore if_transmit */
name|ifp
operator|->
name|if_transmit
operator|=
name|na
operator|->
name|if_transmit
expr_stmt|;
name|ifp
operator|->
name|if_capenable
operator|&=
operator|~
name|IFCAP_NETMAP
expr_stmt|;
name|re_init_locked
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|/* also enables intr */
block|}
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the transmit ring.  */
end_comment

begin_function
specifier|static
name|int
name|re_netmap_txsync
parameter_list|(
name|void
modifier|*
name|a
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|do_lock
parameter_list|)
block|{
name|struct
name|rl_softc
modifier|*
name|sc
init|=
name|a
decl_stmt|;
name|struct
name|rl_txdesc
modifier|*
name|txd
init|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_desc
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|sc
operator|->
name|rl_ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|tx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|int
name|j
decl_stmt|,
name|k
decl_stmt|,
name|l
decl_stmt|,
name|n
decl_stmt|,
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|k
operator|=
name|ring
operator|->
name|cur
expr_stmt|;
if|if
condition|(
name|k
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
if|if
condition|(
name|do_lock
condition|)
name|RL_LOCK
argument_list|(
name|sc
argument_list|)
expr_stmt|;
comment|/* Sync the TX descriptor list */
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list_tag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
operator||
name|BUS_DMASYNC_POSTWRITE
argument_list|)
expr_stmt|;
comment|/* XXX move after the transmissions */
comment|/* record completed transmissions */
for|for
control|(
name|n
operator|=
literal|0
operator|,
name|l
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_considx
init|;
name|l
operator|!=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_prodidx
condition|;
name|n
operator|++
operator|,
name|l
operator|=
name|RL_TX_DESC_NXT
argument_list|(
name|sc
argument_list|,
name|l
argument_list|)
control|)
block|{
name|uint32_t
name|cmdstat
init|=
name|le32toh
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list
index|[
name|l
index|]
operator|.
name|rl_cmdstat
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmdstat
operator|&
name|RL_TDESC_STAT_OWN
condition|)
break|break;
block|}
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_considx
operator|=
name|l
expr_stmt|;
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_free
operator|+=
name|n
expr_stmt|;
name|kring
operator|->
name|nr_hwavail
operator|+=
name|n
expr_stmt|;
block|}
comment|/* update avail to what the hardware knows */
name|ring
operator|->
name|avail
operator|=
name|kring
operator|->
name|nr_hwavail
expr_stmt|;
name|j
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|j
operator|!=
name|k
condition|)
block|{
comment|/* we have new packets to send */
name|n
operator|=
literal|0
expr_stmt|;
name|l
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_prodidx
expr_stmt|;
while|while
condition|(
name|j
operator|!=
name|k
condition|)
block|{
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|j
index|]
decl_stmt|;
name|struct
name|rl_desc
modifier|*
name|desc
init|=
operator|&
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list
index|[
name|l
index|]
decl_stmt|;
name|int
name|cmd
init|=
name|slot
operator|->
name|len
operator||
name|RL_TDESC_CMD_EOF
operator||
name|RL_TDESC_CMD_OWN
operator||
name|RL_TDESC_CMD_SOF
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|NMB
argument_list|(
name|slot
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|slot
operator|->
name|len
decl_stmt|;
if|if
condition|(
name|addr
operator|==
name|netmap_buffer_base
operator|||
name|len
operator|>
name|NETMAP_BUF_SIZE
condition|)
block|{
if|if
condition|(
name|do_lock
condition|)
name|RL_UNLOCK
argument_list|(
name|sc
argument_list|)
expr_stmt|;
comment|// XXX what about prodidx ?
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
block|}
if|if
condition|(
name|l
operator|==
name|lim
condition|)
comment|/* mark end of ring */
name|cmd
operator||=
name|RL_TDESC_CMD_EOR
expr_stmt|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
name|uint64_t
name|paddr
init|=
name|vtophys
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|desc
operator|->
name|rl_bufaddr_lo
operator|=
name|htole32
argument_list|(
name|RL_ADDR_LO
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|->
name|rl_bufaddr_hi
operator|=
name|htole32
argument_list|(
name|RL_ADDR_HI
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
comment|/* buffer has changed, unload and reload map */
name|netmap_reload_map
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_mtag
argument_list|,
name|txd
index|[
name|l
index|]
operator|.
name|tx_dmamap
argument_list|,
name|addr
argument_list|,
name|na
operator|->
name|buff_size
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
block|}
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_REPORT
expr_stmt|;
name|desc
operator|->
name|rl_cmdstat
operator|=
name|htole32
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_mtag
argument_list|,
name|txd
index|[
name|l
index|]
operator|.
name|tx_dmamap
argument_list|,
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
name|j
operator|=
operator|(
name|j
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|j
operator|+
literal|1
expr_stmt|;
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
name|n
operator|++
expr_stmt|;
block|}
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_prodidx
operator|=
name|l
expr_stmt|;
name|kring
operator|->
name|nr_hwcur
operator|=
name|k
expr_stmt|;
comment|/* decrease avail by number of sent packets */
name|ring
operator|->
name|avail
operator|-=
name|n
expr_stmt|;
name|kring
operator|->
name|nr_hwavail
operator|=
name|ring
operator|->
name|avail
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list_tag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list_map
argument_list|,
name|BUS_DMASYNC_PREWRITE
operator||
name|BUS_DMASYNC_PREREAD
argument_list|)
expr_stmt|;
comment|/* start ? */
name|CSR_WRITE_1
argument_list|(
name|sc
argument_list|,
name|sc
operator|->
name|rl_txstart
argument_list|,
name|RL_TXSTART_START
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|do_lock
condition|)
name|RL_UNLOCK
argument_list|(
name|sc
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the receive ring.  */
end_comment

begin_function
specifier|static
name|int
name|re_netmap_rxsync
parameter_list|(
name|void
modifier|*
name|a
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|do_lock
parameter_list|)
block|{
name|struct
name|rl_softc
modifier|*
name|sc
init|=
name|a
decl_stmt|;
name|struct
name|rl_rxdesc
modifier|*
name|rxd
init|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_desc
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|sc
operator|->
name|rl_ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|rx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|int
name|j
decl_stmt|,
name|k
decl_stmt|,
name|l
decl_stmt|,
name|n
decl_stmt|,
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|k
operator|=
name|ring
operator|->
name|cur
expr_stmt|;
if|if
condition|(
name|k
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
if|if
condition|(
name|do_lock
condition|)
name|RL_LOCK
argument_list|(
name|sc
argument_list|)
expr_stmt|;
comment|/* XXX check sync modes */
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list_tag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
operator||
name|BUS_DMASYNC_POSTWRITE
argument_list|)
expr_stmt|;
comment|/* 	 * The device uses all the buffers in the ring, so we need 	 * another termination condition in addition to RL_RDESC_STAT_OWN 	 * cleared (all buffers could have it cleared. The easiest one 	 * is to limit the amount of data reported up to 'lim' 	 */
name|l
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_prodidx
expr_stmt|;
comment|/* next pkt to check */
name|j
operator|=
name|l
operator|+
name|kring
operator|->
name|nkr_hwofs
expr_stmt|;
for|for
control|(
name|n
operator|=
name|kring
operator|->
name|nr_hwavail
init|;
name|n
operator|<
name|lim
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|rl_desc
modifier|*
name|cur_rx
init|=
operator|&
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list
index|[
name|l
index|]
decl_stmt|;
name|uint32_t
name|rxstat
init|=
name|le32toh
argument_list|(
name|cur_rx
operator|->
name|rl_cmdstat
argument_list|)
decl_stmt|;
name|uint32_t
name|total_len
decl_stmt|;
if|if
condition|(
operator|(
name|rxstat
operator|&
name|RL_RDESC_STAT_OWN
operator|)
operator|!=
literal|0
condition|)
break|break;
name|total_len
operator|=
name|rxstat
operator|&
name|sc
operator|->
name|rl_rxlenmask
expr_stmt|;
comment|/* XXX subtract crc */
name|total_len
operator|=
operator|(
name|total_len
operator|<
literal|4
operator|)
condition|?
literal|0
else|:
name|total_len
operator|-
literal|4
expr_stmt|;
name|kring
operator|->
name|ring
operator|->
name|slot
index|[
name|j
index|]
operator|.
name|len
operator|=
name|total_len
expr_stmt|;
comment|/*  sync was in re_newbuf() */
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_mtag
argument_list|,
name|rxd
index|[
name|l
index|]
operator|.
name|rx_dmamap
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
name|j
operator|=
operator|(
name|j
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|j
operator|+
literal|1
expr_stmt|;
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|!=
name|kring
operator|->
name|nr_hwavail
condition|)
block|{
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_prodidx
operator|=
name|l
expr_stmt|;
name|sc
operator|->
name|rl_ifp
operator|->
name|if_ipackets
operator|+=
name|n
operator|-
name|kring
operator|->
name|nr_hwavail
expr_stmt|;
name|kring
operator|->
name|nr_hwavail
operator|=
name|n
expr_stmt|;
block|}
comment|/* skip past packets that userspace has already processed, 	 * making them available for reception. 	 * advance nr_hwcur and issue a bus_dmamap_sync on the 	 * buffers so it is safe to write to them. 	 * Also increase nr_hwavail 	 */
name|j
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|j
operator|!=
name|k
condition|)
block|{
comment|/* userspace has read some packets. */
name|n
operator|=
literal|0
expr_stmt|;
name|l
operator|=
name|kring
operator|->
name|nr_hwcur
operator|-
name|kring
operator|->
name|nkr_hwofs
expr_stmt|;
if|if
condition|(
name|l
operator|<
literal|0
condition|)
name|l
operator|+=
name|lim
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|j
operator|!=
name|k
condition|)
block|{
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
name|ring
operator|->
name|slot
operator|+
name|j
decl_stmt|;
name|struct
name|rl_desc
modifier|*
name|desc
init|=
operator|&
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list
index|[
name|l
index|]
decl_stmt|;
name|int
name|cmd
init|=
name|na
operator|->
name|buff_size
operator||
name|RL_RDESC_CMD_OWN
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|NMB
argument_list|(
name|slot
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
name|netmap_buffer_base
condition|)
block|{
comment|/* bad buf */
if|if
condition|(
name|do_lock
condition|)
name|RL_UNLOCK
argument_list|(
name|sc
argument_list|)
expr_stmt|;
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
block|}
if|if
condition|(
name|l
operator|==
name|lim
condition|)
comment|/* mark end of ring */
name|cmd
operator||=
name|RL_RDESC_CMD_EOR
expr_stmt|;
name|desc
operator|->
name|rl_cmdstat
operator|=
name|htole32
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_REPORT
expr_stmt|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
name|uint64_t
name|paddr
init|=
name|vtophys
argument_list|(
name|addr
argument_list|)
decl_stmt|;
name|desc
operator|->
name|rl_bufaddr_lo
operator|=
name|htole32
argument_list|(
name|RL_ADDR_LO
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|->
name|rl_bufaddr_hi
operator|=
name|htole32
argument_list|(
name|RL_ADDR_HI
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|netmap_reload_map
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_mtag
argument_list|,
name|rxd
index|[
name|l
index|]
operator|.
name|rx_dmamap
argument_list|,
name|addr
argument_list|,
name|na
operator|->
name|buff_size
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
block|}
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_mtag
argument_list|,
name|rxd
index|[
name|l
index|]
operator|.
name|rx_dmamap
argument_list|,
name|BUS_DMASYNC_PREREAD
argument_list|)
expr_stmt|;
name|j
operator|=
operator|(
name|j
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|j
operator|+
literal|1
expr_stmt|;
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
name|n
operator|++
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwavail
operator|-=
name|n
expr_stmt|;
name|kring
operator|->
name|nr_hwcur
operator|=
name|k
expr_stmt|;
comment|/* Flush the RX DMA ring */
name|bus_dmamap_sync
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list_tag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list_map
argument_list|,
name|BUS_DMASYNC_PREWRITE
operator||
name|BUS_DMASYNC_PREREAD
argument_list|)
expr_stmt|;
block|}
comment|/* tell userspace that there are new packets */
name|ring
operator|->
name|avail
operator|=
name|kring
operator|->
name|nr_hwavail
expr_stmt|;
if|if
condition|(
name|do_lock
condition|)
name|RL_UNLOCK
argument_list|(
name|sc
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * Additional routines to init the tx and rx rings.  * In other drivers we do that inline in the main code.  */
end_comment

begin_function
specifier|static
name|void
name|re_netmap_tx_init
parameter_list|(
name|struct
name|rl_softc
modifier|*
name|sc
parameter_list|)
block|{
name|struct
name|rl_txdesc
modifier|*
name|txd
decl_stmt|;
name|struct
name|rl_desc
modifier|*
name|desc
decl_stmt|;
name|int
name|i
decl_stmt|,
name|n
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|sc
operator|->
name|rl_ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
name|netmap_reset
argument_list|(
name|na
argument_list|,
name|NR_TX
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|/* slot is NULL if we are not in netmap mode */
if|if
condition|(
operator|!
name|slot
condition|)
return|return;
comment|/* in netmap mode, overwrite addresses and maps */
name|txd
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_desc
expr_stmt|;
name|desc
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_list
expr_stmt|;
name|n
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_desc_cnt
expr_stmt|;
comment|/* l points in the netmap ring, i points in the NIC ring */
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|void
modifier|*
name|addr
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|tx_rings
index|[
literal|0
index|]
decl_stmt|;
name|int
name|l
init|=
name|i
operator|+
name|kring
operator|->
name|nkr_hwofs
decl_stmt|;
if|if
condition|(
name|l
operator|>=
name|n
condition|)
name|l
operator|-=
name|n
expr_stmt|;
name|addr
operator|=
name|NMB
argument_list|(
name|slot
operator|+
name|l
argument_list|)
expr_stmt|;
name|paddr
operator|=
name|vtophys
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|desc
index|[
name|i
index|]
operator|.
name|rl_bufaddr_lo
operator|=
name|htole32
argument_list|(
name|RL_ADDR_LO
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|desc
index|[
name|i
index|]
operator|.
name|rl_bufaddr_hi
operator|=
name|htole32
argument_list|(
name|RL_ADDR_HI
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|netmap_load_map
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_tx_mtag
argument_list|,
name|txd
index|[
name|i
index|]
operator|.
name|tx_dmamap
argument_list|,
name|addr
argument_list|,
name|na
operator|->
name|buff_size
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|re_netmap_rx_init
parameter_list|(
name|struct
name|rl_softc
modifier|*
name|sc
parameter_list|)
block|{
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|sc
operator|->
name|rl_ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
name|netmap_reset
argument_list|(
name|na
argument_list|,
name|NR_RX
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|struct
name|rl_desc
modifier|*
name|desc
init|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_list
decl_stmt|;
name|uint32_t
name|cmdstat
decl_stmt|;
name|int
name|i
decl_stmt|,
name|n
decl_stmt|;
if|if
condition|(
operator|!
name|slot
condition|)
return|return;
name|n
operator|=
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_desc_cnt
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|void
modifier|*
name|addr
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|rx_rings
index|[
literal|0
index|]
decl_stmt|;
name|int
name|l
init|=
name|i
operator|+
name|kring
operator|->
name|nkr_hwofs
decl_stmt|;
if|if
condition|(
name|l
operator|>=
name|n
condition|)
name|l
operator|-=
name|n
expr_stmt|;
name|addr
operator|=
name|NMB
argument_list|(
name|slot
operator|+
name|l
argument_list|)
expr_stmt|;
name|paddr
operator|=
name|vtophys
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|desc
index|[
name|i
index|]
operator|.
name|rl_bufaddr_lo
operator|=
name|htole32
argument_list|(
name|RL_ADDR_LO
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|desc
index|[
name|i
index|]
operator|.
name|rl_bufaddr_hi
operator|=
name|htole32
argument_list|(
name|RL_ADDR_HI
argument_list|(
name|paddr
argument_list|)
argument_list|)
expr_stmt|;
name|cmdstat
operator|=
name|na
operator|->
name|buff_size
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|n
operator|-
literal|1
condition|)
name|cmdstat
operator||=
name|RL_RDESC_CMD_EOR
expr_stmt|;
comment|/* 		 * userspace knows that hwavail packets were ready before the 		 * reset, so we need to tell the NIC that last hwavail 		 * descriptors of the ring are still owned by the driver. 		 */
if|if
condition|(
name|i
operator|<
name|n
operator|-
literal|1
operator|-
name|kring
operator|->
name|nr_hwavail
condition|)
comment|// XXX + 1 ?
name|cmdstat
operator||=
name|RL_RDESC_CMD_OWN
expr_stmt|;
name|desc
index|[
name|i
index|]
operator|.
name|rl_cmdstat
operator|=
name|htole32
argument_list|(
name|cmdstat
argument_list|)
expr_stmt|;
name|netmap_reload_map
argument_list|(
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_mtag
argument_list|,
name|sc
operator|->
name|rl_ldata
operator|.
name|rl_rx_desc
index|[
name|i
index|]
operator|.
name|rx_dmamap
argument_list|,
name|addr
argument_list|,
name|na
operator|->
name|buff_size
argument_list|)
expr_stmt|;
block|}
block|}
end_function

end_unit

