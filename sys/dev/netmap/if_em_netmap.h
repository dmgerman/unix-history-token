begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 Matteo Landi, Luigi Rizzo. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  * $Id: if_em_netmap.h 10627 2012-02-23 19:37:15Z luigi $  *  * netmap support for em.  *  * For more details on netmap support please see ixgbe_netmap.h  */
end_comment

begin_include
include|#
directive|include
file|<net/netmap.h>
end_include

begin_include
include|#
directive|include
file|<sys/selinfo.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_comment
comment|/* vtophys ? */
end_comment

begin_include
include|#
directive|include
file|<dev/netmap/netmap_kern.h>
end_include

begin_function_decl
specifier|static
name|void
name|em_netmap_block_tasks
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|em_netmap_unblock_tasks
parameter_list|(
name|struct
name|adapter
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|void
name|em_netmap_lock_wrapper
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|int
name|what
parameter_list|,
name|u_int
name|queueid
parameter_list|)
block|{
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|ASSERT
argument_list|(
name|queueid
operator|<
name|adapter
operator|->
name|num_queues
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|what
condition|)
block|{
case|case
name|NETMAP_CORE_LOCK
case|:
name|EM_CORE_LOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_CORE_UNLOCK
case|:
name|EM_CORE_UNLOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_TX_LOCK
case|:
name|EM_TX_LOCK
argument_list|(
operator|&
name|adapter
operator|->
name|tx_rings
index|[
name|queueid
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_TX_UNLOCK
case|:
name|EM_TX_UNLOCK
argument_list|(
operator|&
name|adapter
operator|->
name|tx_rings
index|[
name|queueid
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_RX_LOCK
case|:
name|EM_RX_LOCK
argument_list|(
operator|&
name|adapter
operator|->
name|rx_rings
index|[
name|queueid
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_RX_UNLOCK
case|:
name|EM_RX_UNLOCK
argument_list|(
operator|&
name|adapter
operator|->
name|rx_rings
index|[
name|queueid
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_comment
comment|// XXX do we need to block/unblock the tasks ?
end_comment

begin_function
specifier|static
name|void
name|em_netmap_block_tasks
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
block|{
if|if
condition|(
name|adapter
operator|->
name|msix
operator|>
literal|1
condition|)
block|{
comment|/* MSIX */
name|int
name|i
decl_stmt|;
name|struct
name|tx_ring
modifier|*
name|txr
init|=
name|adapter
operator|->
name|tx_rings
decl_stmt|;
name|struct
name|rx_ring
modifier|*
name|rxr
init|=
name|adapter
operator|->
name|rx_rings
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|adapter
operator|->
name|num_queues
condition|;
name|i
operator|++
operator|,
name|txr
operator|++
operator|,
name|rxr
operator|++
control|)
block|{
name|taskqueue_block
argument_list|(
name|txr
operator|->
name|tq
argument_list|)
expr_stmt|;
name|taskqueue_drain
argument_list|(
name|txr
operator|->
name|tq
argument_list|,
operator|&
name|txr
operator|->
name|tx_task
argument_list|)
expr_stmt|;
name|taskqueue_block
argument_list|(
name|rxr
operator|->
name|tq
argument_list|)
expr_stmt|;
name|taskqueue_drain
argument_list|(
name|rxr
operator|->
name|tq
argument_list|,
operator|&
name|rxr
operator|->
name|rx_task
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* legacy */
name|taskqueue_block
argument_list|(
name|adapter
operator|->
name|tq
argument_list|)
expr_stmt|;
name|taskqueue_drain
argument_list|(
name|adapter
operator|->
name|tq
argument_list|,
operator|&
name|adapter
operator|->
name|link_task
argument_list|)
expr_stmt|;
name|taskqueue_drain
argument_list|(
name|adapter
operator|->
name|tq
argument_list|,
operator|&
name|adapter
operator|->
name|que_task
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|em_netmap_unblock_tasks
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
block|{
if|if
condition|(
name|adapter
operator|->
name|msix
operator|>
literal|1
condition|)
block|{
name|struct
name|tx_ring
modifier|*
name|txr
init|=
name|adapter
operator|->
name|tx_rings
decl_stmt|;
name|struct
name|rx_ring
modifier|*
name|rxr
init|=
name|adapter
operator|->
name|rx_rings
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|adapter
operator|->
name|num_queues
condition|;
name|i
operator|++
control|)
block|{
name|taskqueue_unblock
argument_list|(
name|txr
operator|->
name|tq
argument_list|)
expr_stmt|;
name|taskqueue_unblock
argument_list|(
name|rxr
operator|->
name|tq
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/* legacy */
name|taskqueue_unblock
argument_list|(
name|adapter
operator|->
name|tq
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * Register/unregister routine  */
end_comment

begin_function
specifier|static
name|int
name|em_netmap_reg
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|int
name|onoff
parameter_list|)
block|{
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|ifp
argument_list|)
decl_stmt|;
name|int
name|error
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|na
operator|==
name|NULL
condition|)
return|return
name|EINVAL
return|;
comment|/* no netmap support here */
name|em_disable_intr
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|/* Tell the stack that the interface is no longer active */
name|ifp
operator|->
name|if_drv_flags
operator|&=
operator|~
operator|(
name|IFF_DRV_RUNNING
operator||
name|IFF_DRV_OACTIVE
operator|)
expr_stmt|;
name|em_netmap_block_tasks
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
name|onoff
condition|)
block|{
name|ifp
operator|->
name|if_capenable
operator||=
name|IFCAP_NETMAP
expr_stmt|;
name|na
operator|->
name|if_transmit
operator|=
name|ifp
operator|->
name|if_transmit
expr_stmt|;
name|ifp
operator|->
name|if_transmit
operator|=
name|netmap_start
expr_stmt|;
name|em_init_locked
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ifp
operator|->
name|if_drv_flags
operator|&
operator|(
name|IFF_DRV_RUNNING
operator||
name|IFF_DRV_OACTIVE
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
name|error
operator|=
name|ENOMEM
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
block|}
else|else
block|{
name|fail
label|:
comment|/* return to non-netmap mode */
name|ifp
operator|->
name|if_transmit
operator|=
name|na
operator|->
name|if_transmit
expr_stmt|;
name|ifp
operator|->
name|if_capenable
operator|&=
operator|~
name|IFCAP_NETMAP
expr_stmt|;
name|em_init_locked
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|/* also enable intr */
block|}
name|em_netmap_unblock_tasks
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the transmit ring.  */
end_comment

begin_function
specifier|static
name|int
name|em_netmap_txsync
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|do_lock
parameter_list|)
block|{
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|tx_ring
modifier|*
name|txr
init|=
operator|&
name|adapter
operator|->
name|tx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|tx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|j
decl_stmt|,
name|k
decl_stmt|,
name|l
decl_stmt|,
name|n
init|=
literal|0
decl_stmt|,
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
comment|/* generate an interrupt approximately every half ring */
name|u_int
name|report_frequency
init|=
name|kring
operator|->
name|nkr_num_slots
operator|>>
literal|1
decl_stmt|;
name|k
operator|=
name|ring
operator|->
name|cur
expr_stmt|;
if|if
condition|(
name|k
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
if|if
condition|(
name|do_lock
condition|)
name|EM_TX_LOCK
argument_list|(
name|txr
argument_list|)
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|txr
operator|->
name|txdma
operator|.
name|dma_tag
argument_list|,
name|txr
operator|->
name|txdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
comment|/* 	 * Process new packets to send. j is the current index in the 	 * netmap ring, l is the corresponding index in the NIC ring. 	 */
name|j
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|j
operator|!=
name|k
condition|)
block|{
comment|/* we have new packets to send */
name|l
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|j
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|j
operator|!=
name|k
condition|;
name|n
operator|++
control|)
block|{
comment|/* slot is the current slot in the netmap ring */
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|j
index|]
decl_stmt|;
comment|/* curr is the current slot in the nic ring */
name|struct
name|e1000_tx_desc
modifier|*
name|curr
init|=
operator|&
name|txr
operator|->
name|tx_base
index|[
name|l
index|]
decl_stmt|;
name|struct
name|em_buffer
modifier|*
name|txbuf
init|=
operator|&
name|txr
operator|->
name|tx_buffers
index|[
name|l
index|]
decl_stmt|;
name|int
name|flags
init|=
operator|(
operator|(
name|slot
operator|->
name|flags
operator|&
name|NS_REPORT
operator|)
operator|||
name|j
operator|==
literal|0
operator|||
name|j
operator|==
name|report_frequency
operator|)
condition|?
name|E1000_TXD_CMD_RS
else|:
literal|0
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
name|u_int
name|len
init|=
name|slot
operator|->
name|len
decl_stmt|;
if|if
condition|(
name|addr
operator|==
name|netmap_buffer_base
operator|||
name|len
operator|>
name|NETMAP_BUF_SIZE
condition|)
block|{
if|if
condition|(
name|do_lock
condition|)
name|EM_TX_UNLOCK
argument_list|(
name|txr
argument_list|)
expr_stmt|;
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
block|}
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_REPORT
expr_stmt|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
name|curr
operator|->
name|buffer_addr
operator|=
name|htole64
argument_list|(
name|paddr
argument_list|)
expr_stmt|;
comment|/* buffer has changed, reload map */
name|netmap_reload_map
argument_list|(
name|txr
operator|->
name|txtag
argument_list|,
name|txbuf
operator|->
name|map
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
block|}
name|curr
operator|->
name|upper
operator|.
name|data
operator|=
literal|0
expr_stmt|;
name|curr
operator|->
name|lower
operator|.
name|data
operator|=
name|htole32
argument_list|(
name|adapter
operator|->
name|txd_cmd
operator||
name|len
operator||
operator|(
name|E1000_TXD_CMD_EOP
operator||
name|flags
operator|)
argument_list|)
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|txr
operator|->
name|txtag
argument_list|,
name|txbuf
operator|->
name|map
argument_list|,
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
name|j
operator|=
operator|(
name|j
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|j
operator|+
literal|1
expr_stmt|;
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwcur
operator|=
name|k
expr_stmt|;
comment|/* the saved ring->cur */
name|kring
operator|->
name|nr_hwavail
operator|-=
name|n
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|txr
operator|->
name|txdma
operator|.
name|dma_tag
argument_list|,
name|txr
operator|->
name|txdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
name|E1000_WRITE_REG
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|E1000_TDT
argument_list|(
name|txr
operator|->
name|me
argument_list|)
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|0
operator|||
name|kring
operator|->
name|nr_hwavail
operator|<
literal|1
condition|)
block|{
name|int
name|delta
decl_stmt|;
comment|/* record completed transmissions using TDH */
name|l
operator|=
name|E1000_READ_REG
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|E1000_TDH
argument_list|(
name|ring_nr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|>=
name|kring
operator|->
name|nkr_num_slots
condition|)
block|{
comment|/* XXX can it happen ? */
name|D
argument_list|(
literal|"TDH wrap %d"
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|l
operator|-=
name|kring
operator|->
name|nkr_num_slots
expr_stmt|;
block|}
name|delta
operator|=
name|l
operator|-
name|txr
operator|->
name|next_to_clean
expr_stmt|;
if|if
condition|(
name|delta
condition|)
block|{
comment|/* some completed, increment hwavail. */
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
name|delta
operator|+=
name|kring
operator|->
name|nkr_num_slots
expr_stmt|;
name|txr
operator|->
name|next_to_clean
operator|=
name|l
expr_stmt|;
name|kring
operator|->
name|nr_hwavail
operator|+=
name|delta
expr_stmt|;
block|}
block|}
comment|/* update avail to what the kernel knows */
name|ring
operator|->
name|avail
operator|=
name|kring
operator|->
name|nr_hwavail
expr_stmt|;
if|if
condition|(
name|do_lock
condition|)
name|EM_TX_UNLOCK
argument_list|(
name|txr
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the receive ring.  */
end_comment

begin_function
specifier|static
name|int
name|em_netmap_rxsync
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|do_lock
parameter_list|)
block|{
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|rx_ring
modifier|*
name|rxr
init|=
operator|&
name|adapter
operator|->
name|rx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|rx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|j
decl_stmt|,
name|l
decl_stmt|,
name|n
decl_stmt|,
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|int
name|force_update
init|=
name|do_lock
operator|||
name|kring
operator|->
name|nr_kflags
operator|&
name|NKR_PENDINTR
decl_stmt|;
name|u_int
name|k
init|=
name|ring
operator|->
name|cur
decl_stmt|,
name|resvd
init|=
name|ring
operator|->
name|reserved
decl_stmt|;
name|k
operator|=
name|ring
operator|->
name|cur
expr_stmt|;
if|if
condition|(
name|k
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
if|if
condition|(
name|do_lock
condition|)
name|EM_RX_LOCK
argument_list|(
name|rxr
argument_list|)
expr_stmt|;
comment|/* XXX check sync modes */
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|rxdma
operator|.
name|dma_tag
argument_list|,
name|rxr
operator|->
name|rxdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
operator||
name|BUS_DMASYNC_POSTWRITE
argument_list|)
expr_stmt|;
comment|/* 	 * Import newly received packets into the netmap ring. 	 * j is an index in the netmap ring, l in the NIC ring. 	 */
name|l
operator|=
name|rxr
operator|->
name|next_to_check
expr_stmt|;
name|j
operator|=
name|netmap_idx_n2k
argument_list|(
name|kring
argument_list|,
name|l
argument_list|)
expr_stmt|;
if|if
condition|(
name|netmap_no_pendintr
operator|||
name|force_update
condition|)
block|{
name|uint16_t
name|slot_flags
init|=
name|kring
operator|->
name|nkr_slot_flags
decl_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|e1000_rx_desc
modifier|*
name|curr
init|=
operator|&
name|rxr
operator|->
name|rx_base
index|[
name|l
index|]
decl_stmt|;
name|uint32_t
name|staterr
init|=
name|le32toh
argument_list|(
name|curr
operator|->
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|staterr
operator|&
name|E1000_RXD_STAT_DD
operator|)
operator|==
literal|0
condition|)
break|break;
name|ring
operator|->
name|slot
index|[
name|j
index|]
operator|.
name|len
operator|=
name|le16toh
argument_list|(
name|curr
operator|->
name|length
argument_list|)
expr_stmt|;
name|ring
operator|->
name|slot
index|[
name|j
index|]
operator|.
name|flags
operator|=
name|slot_flags
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|rxtag
argument_list|,
name|rxr
operator|->
name|rx_buffers
index|[
name|l
index|]
operator|.
name|map
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
name|j
operator|=
operator|(
name|j
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|j
operator|+
literal|1
expr_stmt|;
comment|/* make sure next_to_refresh follows next_to_check */
name|rxr
operator|->
name|next_to_refresh
operator|=
name|l
expr_stmt|;
comment|// XXX
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|n
condition|)
block|{
comment|/* update the state variables */
name|rxr
operator|->
name|next_to_check
operator|=
name|l
expr_stmt|;
name|kring
operator|->
name|nr_hwavail
operator|+=
name|n
expr_stmt|;
block|}
name|kring
operator|->
name|nr_kflags
operator|&=
operator|~
name|NKR_PENDINTR
expr_stmt|;
block|}
comment|/* skip past packets that userspace has released */
name|j
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
comment|/* netmap ring index */
if|if
condition|(
name|resvd
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|resvd
operator|+
name|ring
operator|->
name|avail
operator|>=
name|lim
operator|+
literal|1
condition|)
block|{
name|D
argument_list|(
literal|"XXX invalid reserve/avail %d %d"
argument_list|,
name|resvd
argument_list|,
name|ring
operator|->
name|avail
argument_list|)
expr_stmt|;
name|ring
operator|->
name|reserved
operator|=
name|resvd
operator|=
literal|0
expr_stmt|;
comment|// XXX panic...
block|}
name|k
operator|=
operator|(
name|k
operator|>=
name|resvd
operator|)
condition|?
name|k
operator|-
name|resvd
else|:
name|k
operator|+
name|lim
operator|+
literal|1
operator|-
name|resvd
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|!=
name|k
condition|)
block|{
comment|/* userspace has released some packets. */
name|l
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|j
argument_list|)
expr_stmt|;
comment|/* NIC ring index */
for|for
control|(
name|n
operator|=
literal|0
init|;
name|j
operator|!=
name|k
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|j
index|]
decl_stmt|;
name|struct
name|e1000_rx_desc
modifier|*
name|curr
init|=
operator|&
name|rxr
operator|->
name|rx_base
index|[
name|l
index|]
decl_stmt|;
name|struct
name|em_buffer
modifier|*
name|rxbuf
init|=
operator|&
name|rxr
operator|->
name|rx_buffers
index|[
name|l
index|]
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
name|netmap_buffer_base
condition|)
block|{
comment|/* bad buf */
if|if
condition|(
name|do_lock
condition|)
name|EM_RX_UNLOCK
argument_list|(
name|rxr
argument_list|)
expr_stmt|;
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
block|}
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
name|curr
operator|->
name|buffer_addr
operator|=
name|htole64
argument_list|(
name|paddr
argument_list|)
expr_stmt|;
comment|/* buffer has changed, reload map */
name|netmap_reload_map
argument_list|(
name|rxr
operator|->
name|rxtag
argument_list|,
name|rxbuf
operator|->
name|map
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
block|}
name|curr
operator|->
name|status
operator|=
literal|0
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|rxtag
argument_list|,
name|rxbuf
operator|->
name|map
argument_list|,
name|BUS_DMASYNC_PREREAD
argument_list|)
expr_stmt|;
name|j
operator|=
operator|(
name|j
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|j
operator|+
literal|1
expr_stmt|;
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwavail
operator|-=
name|n
expr_stmt|;
name|kring
operator|->
name|nr_hwcur
operator|=
name|k
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|rxdma
operator|.
name|dma_tag
argument_list|,
name|rxr
operator|->
name|rxdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
comment|/* 		 * IMPORTANT: we must leave one free slot in the ring, 		 * so move l back by one unit 		 */
name|l
operator|=
operator|(
name|l
operator|==
literal|0
operator|)
condition|?
name|lim
else|:
name|l
operator|-
literal|1
expr_stmt|;
name|E1000_WRITE_REG
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|E1000_RDT
argument_list|(
name|rxr
operator|->
name|me
argument_list|)
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
comment|/* tell userspace that there are new packets */
name|ring
operator|->
name|avail
operator|=
name|kring
operator|->
name|nr_hwavail
operator|-
name|resvd
expr_stmt|;
if|if
condition|(
name|do_lock
condition|)
name|EM_RX_UNLOCK
argument_list|(
name|rxr
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|em_netmap_attach
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
block|{
name|struct
name|netmap_adapter
name|na
decl_stmt|;
name|bzero
argument_list|(
operator|&
name|na
argument_list|,
sizeof|sizeof
argument_list|(
name|na
argument_list|)
argument_list|)
expr_stmt|;
name|na
operator|.
name|ifp
operator|=
name|adapter
operator|->
name|ifp
expr_stmt|;
name|na
operator|.
name|separate_locks
operator|=
literal|1
expr_stmt|;
name|na
operator|.
name|num_tx_desc
operator|=
name|adapter
operator|->
name|num_tx_desc
expr_stmt|;
name|na
operator|.
name|num_rx_desc
operator|=
name|adapter
operator|->
name|num_rx_desc
expr_stmt|;
name|na
operator|.
name|nm_txsync
operator|=
name|em_netmap_txsync
expr_stmt|;
name|na
operator|.
name|nm_rxsync
operator|=
name|em_netmap_rxsync
expr_stmt|;
name|na
operator|.
name|nm_lock
operator|=
name|em_netmap_lock_wrapper
expr_stmt|;
name|na
operator|.
name|nm_register
operator|=
name|em_netmap_reg
expr_stmt|;
name|netmap_attach
argument_list|(
operator|&
name|na
argument_list|,
name|adapter
operator|->
name|num_queues
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* end of file */
end_comment

end_unit

