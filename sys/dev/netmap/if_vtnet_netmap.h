begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2014 Vincenzo Maffione, Luigi Rizzo. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<net/netmap.h>
end_include

begin_include
include|#
directive|include
file|<sys/selinfo.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_comment
comment|/* vtophys ? */
end_comment

begin_include
include|#
directive|include
file|<dev/netmap/netmap_kern.h>
end_include

begin_define
define|#
directive|define
name|SOFTC_T
value|vtnet_softc
end_define

begin_comment
comment|/* Free all the unused buffer in all the RX virtqueues.  * This function is called when entering and exiting netmap mode.  * - buffers queued by the virtio driver return skbuf/mbuf pointer  *   and need to be freed;  * - buffers queued by netmap return the txq/rxq, and do not need work  */
end_comment

begin_function
specifier|static
name|void
name|vtnet_netmap_free_bufs
parameter_list|(
name|struct
name|SOFTC_T
modifier|*
name|sc
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
name|nmb
init|=
literal|0
decl_stmt|,
name|n
init|=
literal|0
decl_stmt|,
name|last
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|sc
operator|->
name|vtnet_max_vq_pairs
condition|;
name|i
operator|++
control|)
block|{
name|struct
name|vtnet_rxq
modifier|*
name|rxq
init|=
operator|&
name|sc
operator|->
name|vtnet_rxqs
index|[
name|i
index|]
decl_stmt|;
name|struct
name|virtqueue
modifier|*
name|vq
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|struct
name|vtnet_txq
modifier|*
name|txq
init|=
operator|&
name|sc
operator|->
name|vtnet_txqs
index|[
name|i
index|]
decl_stmt|;
name|struct
name|vtnet_tx_header
modifier|*
name|txhdr
decl_stmt|;
name|last
operator|=
literal|0
expr_stmt|;
name|vq
operator|=
name|rxq
operator|->
name|vtnrx_vq
expr_stmt|;
while|while
condition|(
operator|(
name|m
operator|=
name|virtqueue_drain
argument_list|(
name|vq
argument_list|,
operator|&
name|last
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|n
operator|++
expr_stmt|;
if|if
condition|(
name|m
operator|!=
operator|(
name|void
operator|*
operator|)
name|rxq
condition|)
name|m_freem
argument_list|(
name|m
argument_list|)
expr_stmt|;
else|else
name|nmb
operator|++
expr_stmt|;
block|}
name|last
operator|=
literal|0
expr_stmt|;
name|vq
operator|=
name|txq
operator|->
name|vtntx_vq
expr_stmt|;
while|while
condition|(
operator|(
name|txhdr
operator|=
name|virtqueue_drain
argument_list|(
name|vq
argument_list|,
operator|&
name|last
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|n
operator|++
expr_stmt|;
if|if
condition|(
name|txhdr
operator|!=
operator|(
name|void
operator|*
operator|)
name|txq
condition|)
block|{
name|m_freem
argument_list|(
name|txhdr
operator|->
name|vth_mbuf
argument_list|)
expr_stmt|;
name|uma_zfree
argument_list|(
name|vtnet_tx_header_zone
argument_list|,
name|txhdr
argument_list|)
expr_stmt|;
block|}
else|else
name|nmb
operator|++
expr_stmt|;
block|}
block|}
name|D
argument_list|(
literal|"freed %d mbufs, %d netmap bufs on %d queues"
argument_list|,
name|n
operator|-
name|nmb
argument_list|,
name|nmb
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Register and unregister. */
end_comment

begin_function
specifier|static
name|int
name|vtnet_netmap_reg
parameter_list|(
name|struct
name|netmap_adapter
modifier|*
name|na
parameter_list|,
name|int
name|onoff
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|SOFTC_T
modifier|*
name|sc
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|VTNET_CORE_LOCK
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|ifp
operator|->
name|if_drv_flags
operator|&=
operator|~
operator|(
name|IFF_DRV_RUNNING
operator||
name|IFF_DRV_OACTIVE
operator|)
expr_stmt|;
comment|/* enable or disable flags and callbacks in na and ifp */
if|if
condition|(
name|onoff
condition|)
block|{
name|nm_set_native_flags
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nm_clear_native_flags
argument_list|(
name|na
argument_list|)
expr_stmt|;
block|}
comment|/* drain queues so netmap and native drivers 	 * do not interfere with each other 	 */
name|vtnet_netmap_free_bufs
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|vtnet_init_locked
argument_list|(
name|sc
argument_list|)
expr_stmt|;
comment|/* also enable intr */
name|VTNET_CORE_UNLOCK
argument_list|(
name|sc
argument_list|)
expr_stmt|;
return|return
operator|(
name|ifp
operator|->
name|if_drv_flags
operator|&
name|IFF_DRV_RUNNING
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
end_function

begin_comment
comment|/* Reconcile kernel and user view of the transmit ring. */
end_comment

begin_function
specifier|static
name|int
name|vtnet_netmap_txsync
parameter_list|(
name|struct
name|netmap_kring
modifier|*
name|kring
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|kring
operator|->
name|na
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|ring_nr
init|=
name|kring
operator|->
name|ring_id
decl_stmt|;
name|u_int
name|nm_i
decl_stmt|;
comment|/* index into the netmap ring */
name|u_int
name|nic_i
decl_stmt|;
comment|/* index into the NIC ring */
name|u_int
name|n
decl_stmt|;
name|u_int
specifier|const
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|u_int
specifier|const
name|head
init|=
name|kring
operator|->
name|rhead
decl_stmt|;
comment|/* device-specific */
name|struct
name|SOFTC_T
modifier|*
name|sc
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|vtnet_txq
modifier|*
name|txq
init|=
operator|&
name|sc
operator|->
name|vtnet_txqs
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|virtqueue
modifier|*
name|vq
init|=
name|txq
operator|->
name|vtntx_vq
decl_stmt|;
comment|/* 	 * First part: process new packets to send. 	 */
name|rmb
argument_list|()
expr_stmt|;
name|nm_i
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|nm_i
operator|!=
name|head
condition|)
block|{
comment|/* we have new packets to send */
name|struct
name|sglist
modifier|*
name|sg
init|=
name|txq
operator|->
name|vtntx_sg
decl_stmt|;
name|nic_i
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|nm_i
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|nm_i
operator|!=
name|head
condition|;
name|n
operator|++
control|)
block|{
comment|/* we use an empty header here */
specifier|static
name|struct
name|virtio_net_hdr_mrg_rxbuf
name|hdr
decl_stmt|;
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
decl_stmt|;
name|u_int
name|len
init|=
name|slot
operator|->
name|len
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|na
argument_list|,
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
name|int
name|err
decl_stmt|;
name|NM_CHECK_ADDR_LEN
argument_list|(
name|na
argument_list|,
name|addr
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
operator|(
name|NS_REPORT
operator||
name|NS_BUF_CHANGED
operator|)
expr_stmt|;
comment|/* Initialize the scatterlist, expose it to the hypervisor, 			 * and kick the hypervisor (if necessary). 			 */
name|sglist_reset
argument_list|(
name|sg
argument_list|)
expr_stmt|;
comment|// cheap
comment|// if vtnet_hdr_size> 0 ...
name|err
operator|=
name|sglist_append
argument_list|(
name|sg
argument_list|,
operator|&
name|hdr
argument_list|,
name|sc
operator|->
name|vtnet_hdr_size
argument_list|)
expr_stmt|;
comment|// XXX later, support multi segment
name|err
operator|=
name|sglist_append_phys
argument_list|(
name|sg
argument_list|,
name|paddr
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|/* use na as the cookie */
name|err
operator|=
name|virtqueue_enqueue
argument_list|(
name|vq
argument_list|,
name|txq
argument_list|,
name|sg
argument_list|,
name|sg
operator|->
name|sg_nseg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|err
operator|<
literal|0
argument_list|)
condition|)
block|{
name|D
argument_list|(
literal|"virtqueue_enqueue failed"
argument_list|)
expr_stmt|;
break|break;
block|}
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|nic_i
operator|=
name|nm_next
argument_list|(
name|nic_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
comment|/* Update hwcur depending on where we stopped. */
name|kring
operator|->
name|nr_hwcur
operator|=
name|nm_i
expr_stmt|;
comment|/* note we migth break early */
comment|/* No more free TX slots? Ask the hypervisor for notifications, 		 * possibly only when a considerable amount of work has been 		 * done. 		 */
name|ND
argument_list|(
literal|3
argument_list|,
literal|"sent %d packets, hwcur %d"
argument_list|,
name|n
argument_list|,
name|nm_i
argument_list|)
expr_stmt|;
name|virtqueue_disable_intr
argument_list|(
name|vq
argument_list|)
expr_stmt|;
name|virtqueue_notify
argument_list|(
name|vq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ring
operator|->
name|head
operator|!=
name|ring
operator|->
name|tail
condition|)
name|ND
argument_list|(
literal|5
argument_list|,
literal|"pure notify ? head %d tail %d nused %d %d"
argument_list|,
name|ring
operator|->
name|head
argument_list|,
name|ring
operator|->
name|tail
argument_list|,
name|virtqueue_nused
argument_list|(
name|vq
argument_list|)
argument_list|,
operator|(
name|virtqueue_dump
argument_list|(
name|vq
argument_list|)
operator|,
literal|1
operator|)
argument_list|)
expr_stmt|;
name|virtqueue_notify
argument_list|(
name|vq
argument_list|)
expr_stmt|;
name|virtqueue_enable_intr
argument_list|(
name|vq
argument_list|)
expr_stmt|;
comment|// like postpone with 0
block|}
comment|/* Free used slots. We only consider our own used buffers, recognized 	 * by the token we passed to virtqueue_add_outbuf. 	 */
name|n
operator|=
literal|0
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|struct
name|vtnet_tx_header
modifier|*
name|txhdr
init|=
name|virtqueue_dequeue
argument_list|(
name|vq
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|txhdr
operator|==
name|NULL
condition|)
break|break;
if|if
condition|(
name|likely
argument_list|(
name|txhdr
operator|==
operator|(
name|void
operator|*
operator|)
name|txq
argument_list|)
condition|)
block|{
name|n
operator|++
expr_stmt|;
if|if
condition|(
name|virtqueue_nused
argument_list|(
name|vq
argument_list|)
operator|<
literal|32
condition|)
block|{
comment|// XXX slow release
break|break;
block|}
block|}
else|else
block|{
comment|/* leftover from previous transmission */
name|m_freem
argument_list|(
name|txhdr
operator|->
name|vth_mbuf
argument_list|)
expr_stmt|;
name|uma_zfree
argument_list|(
name|vtnet_tx_header_zone
argument_list|,
name|txhdr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|n
condition|)
block|{
name|kring
operator|->
name|nr_hwtail
operator|+=
name|n
expr_stmt|;
if|if
condition|(
name|kring
operator|->
name|nr_hwtail
operator|>
name|lim
condition|)
name|kring
operator|->
name|nr_hwtail
operator|-=
name|lim
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|nm_i
operator|!=
name|kring
operator|->
name|nr_hwtail
comment|/*&& vtnet_txq_below_threshold(txq) == 0*/
condition|)
block|{
name|ND
argument_list|(
literal|3
argument_list|,
literal|"disable intr, hwcur %d"
argument_list|,
name|nm_i
argument_list|)
expr_stmt|;
name|virtqueue_disable_intr
argument_list|(
name|vq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ND
argument_list|(
literal|3
argument_list|,
literal|"enable intr, hwcur %d"
argument_list|,
name|nm_i
argument_list|)
expr_stmt|;
name|virtqueue_postpone_intr
argument_list|(
name|vq
argument_list|,
name|VQ_POSTPONE_SHORT
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|vtnet_refill_rxq
parameter_list|(
name|struct
name|netmap_kring
modifier|*
name|kring
parameter_list|,
name|u_int
name|nm_i
parameter_list|,
name|u_int
name|head
parameter_list|)
block|{
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|kring
operator|->
name|na
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|ring_nr
init|=
name|kring
operator|->
name|ring_id
decl_stmt|;
name|u_int
specifier|const
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|u_int
name|n
decl_stmt|;
comment|/* device-specific */
name|struct
name|SOFTC_T
modifier|*
name|sc
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|vtnet_rxq
modifier|*
name|rxq
init|=
operator|&
name|sc
operator|->
name|vtnet_rxqs
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|virtqueue
modifier|*
name|vq
init|=
name|rxq
operator|->
name|vtnrx_vq
decl_stmt|;
comment|/* use a local sglist, default might be short */
name|struct
name|sglist_seg
name|ss
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|sglist
name|sg
init|=
block|{
name|ss
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|}
decl_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|nm_i
operator|!=
name|head
condition|;
name|n
operator|++
control|)
block|{
specifier|static
name|struct
name|virtio_net_hdr_mrg_rxbuf
name|hdr
decl_stmt|;
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|na
argument_list|,
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
name|int
name|err
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|addr
operator|==
name|NETMAP_BUF_BASE
argument_list|(
name|na
argument_list|)
condition|)
block|{
comment|/* bad buf */
if|if
condition|(
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
block|}
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
name|sglist_reset
argument_list|(
operator|&
name|sg
argument_list|)
expr_stmt|;
comment|// cheap
name|err
operator|=
name|sglist_append
argument_list|(
operator|&
name|sg
argument_list|,
operator|&
name|hdr
argument_list|,
name|sc
operator|->
name|vtnet_hdr_size
argument_list|)
expr_stmt|;
name|err
operator|=
name|sglist_append_phys
argument_list|(
operator|&
name|sg
argument_list|,
name|paddr
argument_list|,
name|NETMAP_BUF_SIZE
argument_list|(
name|na
argument_list|)
argument_list|)
expr_stmt|;
comment|/* writable for the host */
name|err
operator|=
name|virtqueue_enqueue
argument_list|(
name|vq
argument_list|,
name|rxq
argument_list|,
operator|&
name|sg
argument_list|,
literal|0
argument_list|,
name|sg
operator|.
name|sg_nseg
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|<
literal|0
condition|)
block|{
name|D
argument_list|(
literal|"virtqueue_enqueue failed"
argument_list|)
expr_stmt|;
break|break;
block|}
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
block|}
return|return
name|nm_i
return|;
block|}
end_function

begin_comment
comment|/* Reconcile kernel and user view of the receive ring. */
end_comment

begin_function
specifier|static
name|int
name|vtnet_netmap_rxsync
parameter_list|(
name|struct
name|netmap_kring
modifier|*
name|kring
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|kring
operator|->
name|na
decl_stmt|;
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|ring_nr
init|=
name|kring
operator|->
name|ring_id
decl_stmt|;
name|u_int
name|nm_i
decl_stmt|;
comment|/* index into the netmap ring */
comment|// u_int nic_i;	/* index into the NIC ring */
name|u_int
name|n
decl_stmt|;
name|u_int
specifier|const
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|u_int
specifier|const
name|head
init|=
name|kring
operator|->
name|rhead
decl_stmt|;
name|int
name|force_update
init|=
operator|(
name|flags
operator|&
name|NAF_FORCE_READ
operator|)
operator|||
name|kring
operator|->
name|nr_kflags
operator|&
name|NKR_PENDINTR
decl_stmt|;
comment|/* device-specific */
name|struct
name|SOFTC_T
modifier|*
name|sc
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|vtnet_rxq
modifier|*
name|rxq
init|=
operator|&
name|sc
operator|->
name|vtnet_rxqs
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|virtqueue
modifier|*
name|vq
init|=
name|rxq
operator|->
name|vtnrx_vq
decl_stmt|;
comment|/* XXX netif_carrier_ok ? */
if|if
condition|(
name|head
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
name|rmb
argument_list|()
expr_stmt|;
comment|/* 	 * First part: import newly received packets. 	 * Only accept our 	 * own buffers (matching the token). We should only get 	 * matching buffers, because of vtnet_netmap_free_rx_unused_bufs() 	 * and vtnet_netmap_init_buffers(). 	 */
if|if
condition|(
name|netmap_no_pendintr
operator|||
name|force_update
condition|)
block|{
name|uint16_t
name|slot_flags
init|=
name|kring
operator|->
name|nkr_slot_flags
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|token
decl_stmt|;
name|nm_i
operator|=
name|kring
operator|->
name|nr_hwtail
expr_stmt|;
name|n
operator|=
literal|0
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|len
decl_stmt|;
name|token
operator|=
name|virtqueue_dequeue
argument_list|(
name|vq
argument_list|,
operator|&
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|==
name|NULL
condition|)
break|break;
if|if
condition|(
name|likely
argument_list|(
name|token
operator|==
operator|(
name|void
operator|*
operator|)
name|rxq
argument_list|)
condition|)
block|{
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
operator|.
name|len
operator|=
name|len
expr_stmt|;
name|ring
operator|->
name|slot
index|[
name|nm_i
index|]
operator|.
name|flags
operator|=
name|slot_flags
expr_stmt|;
name|nm_i
operator|=
name|nm_next
argument_list|(
name|nm_i
argument_list|,
name|lim
argument_list|)
expr_stmt|;
name|n
operator|++
expr_stmt|;
block|}
else|else
block|{
name|D
argument_list|(
literal|"This should not happen"
argument_list|)
expr_stmt|;
block|}
block|}
name|kring
operator|->
name|nr_hwtail
operator|=
name|nm_i
expr_stmt|;
name|kring
operator|->
name|nr_kflags
operator|&=
operator|~
name|NKR_PENDINTR
expr_stmt|;
block|}
name|ND
argument_list|(
literal|"[B] h %d c %d hwcur %d hwtail %d"
argument_list|,
name|ring
operator|->
name|head
argument_list|,
name|ring
operator|->
name|cur
argument_list|,
name|kring
operator|->
name|nr_hwcur
argument_list|,
name|kring
operator|->
name|nr_hwtail
argument_list|)
expr_stmt|;
comment|/* 	 * Second part: skip past packets that userspace has released. 	 */
name|nm_i
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
comment|/* netmap ring index */
if|if
condition|(
name|nm_i
operator|!=
name|head
condition|)
block|{
name|int
name|err
init|=
name|vtnet_refill_rxq
argument_list|(
name|kring
argument_list|,
name|nm_i
argument_list|,
name|head
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|<
literal|0
condition|)
return|return
literal|1
return|;
name|kring
operator|->
name|nr_hwcur
operator|=
name|err
expr_stmt|;
name|virtqueue_notify
argument_list|(
name|vq
argument_list|)
expr_stmt|;
comment|/* After draining the queue may need an intr from the hypervisor */
name|vtnet_rxq_enable_intr
argument_list|(
name|rxq
argument_list|)
expr_stmt|;
block|}
name|ND
argument_list|(
literal|"[C] h %d c %d t %d hwcur %d hwtail %d"
argument_list|,
name|ring
operator|->
name|head
argument_list|,
name|ring
operator|->
name|cur
argument_list|,
name|ring
operator|->
name|tail
argument_list|,
name|kring
operator|->
name|nr_hwcur
argument_list|,
name|kring
operator|->
name|nr_hwtail
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* Make RX virtqueues buffers pointing to netmap buffers. */
end_comment

begin_function
specifier|static
name|int
name|vtnet_netmap_init_rx_buffers
parameter_list|(
name|struct
name|SOFTC_T
modifier|*
name|sc
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|sc
operator|->
name|vtnet_ifp
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|ifp
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|nm_native_on
argument_list|(
name|na
argument_list|)
condition|)
return|return
literal|0
return|;
for|for
control|(
name|r
operator|=
literal|0
init|;
name|r
operator|<
name|na
operator|->
name|num_rx_rings
condition|;
name|r
operator|++
control|)
block|{
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|rx_rings
index|[
name|r
index|]
decl_stmt|;
name|struct
name|vtnet_rxq
modifier|*
name|rxq
init|=
operator|&
name|sc
operator|->
name|vtnet_rxqs
index|[
name|r
index|]
decl_stmt|;
name|struct
name|virtqueue
modifier|*
name|vq
init|=
name|rxq
operator|->
name|vtnrx_vq
decl_stmt|;
name|struct
name|netmap_slot
modifier|*
name|slot
decl_stmt|;
name|int
name|err
init|=
literal|0
decl_stmt|;
name|slot
operator|=
name|netmap_reset
argument_list|(
name|na
argument_list|,
name|NR_RX
argument_list|,
name|r
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|slot
condition|)
block|{
name|D
argument_list|(
literal|"strange, null netmap ring %d"
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/* Add up to na>-num_rx_desc-1 buffers to this RX virtqueue. 		 * It's important to leave one virtqueue slot free, otherwise 		 * we can run into ring->cur/ring->tail wraparounds. 		 */
name|err
operator|=
name|vtnet_refill_rxq
argument_list|(
name|kring
argument_list|,
literal|0
argument_list|,
name|na
operator|->
name|num_rx_desc
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|err
operator|<
literal|0
condition|)
return|return
literal|0
return|;
name|virtqueue_notify
argument_list|(
name|vq
argument_list|)
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
end_function

begin_comment
comment|/* Update the virtio-net device configurations. Number of queues can  * change dinamically, by 'ethtool --set-channels $IFNAME combined $N'.  * This is actually the only way virtio-net can currently enable  * the multiqueue mode.  * XXX note that we seem to lose packets if the netmap ring has more  * slots than the queue  */
end_comment

begin_function
specifier|static
name|int
name|vtnet_netmap_config
parameter_list|(
name|struct
name|netmap_adapter
modifier|*
name|na
parameter_list|,
name|u_int
modifier|*
name|txr
parameter_list|,
name|u_int
modifier|*
name|txd
parameter_list|,
name|u_int
modifier|*
name|rxr
parameter_list|,
name|u_int
modifier|*
name|rxd
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|ifp
init|=
name|na
operator|->
name|ifp
decl_stmt|;
name|struct
name|SOFTC_T
modifier|*
name|sc
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
operator|*
name|txr
operator|=
operator|*
name|rxr
operator|=
name|sc
operator|->
name|vtnet_max_vq_pairs
expr_stmt|;
operator|*
name|rxd
operator|=
literal|512
expr_stmt|;
comment|// sc->vtnet_rx_nmbufs;
operator|*
name|txd
operator|=
operator|*
name|rxd
expr_stmt|;
comment|// XXX
name|D
argument_list|(
literal|"vtnet config txq=%d, txd=%d rxq=%d, rxd=%d"
argument_list|,
operator|*
name|txr
argument_list|,
operator|*
name|txd
argument_list|,
operator|*
name|rxr
argument_list|,
operator|*
name|rxd
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|vtnet_netmap_attach
parameter_list|(
name|struct
name|SOFTC_T
modifier|*
name|sc
parameter_list|)
block|{
name|struct
name|netmap_adapter
name|na
decl_stmt|;
name|bzero
argument_list|(
operator|&
name|na
argument_list|,
sizeof|sizeof
argument_list|(
name|na
argument_list|)
argument_list|)
expr_stmt|;
name|na
operator|.
name|ifp
operator|=
name|sc
operator|->
name|vtnet_ifp
expr_stmt|;
name|na
operator|.
name|num_tx_desc
operator|=
literal|1024
expr_stmt|;
comment|// sc->vtnet_rx_nmbufs;
name|na
operator|.
name|num_rx_desc
operator|=
literal|1024
expr_stmt|;
comment|// sc->vtnet_rx_nmbufs;
name|na
operator|.
name|nm_register
operator|=
name|vtnet_netmap_reg
expr_stmt|;
name|na
operator|.
name|nm_txsync
operator|=
name|vtnet_netmap_txsync
expr_stmt|;
name|na
operator|.
name|nm_rxsync
operator|=
name|vtnet_netmap_rxsync
expr_stmt|;
name|na
operator|.
name|nm_config
operator|=
name|vtnet_netmap_config
expr_stmt|;
name|na
operator|.
name|num_tx_rings
operator|=
name|na
operator|.
name|num_rx_rings
operator|=
name|sc
operator|->
name|vtnet_max_vq_pairs
expr_stmt|;
name|D
argument_list|(
literal|"max rings %d"
argument_list|,
name|sc
operator|->
name|vtnet_max_vq_pairs
argument_list|)
expr_stmt|;
name|netmap_attach
argument_list|(
operator|&
name|na
argument_list|)
expr_stmt|;
name|D
argument_list|(
literal|"virtio attached txq=%d, txd=%d rxq=%d, rxd=%d"
argument_list|,
name|na
operator|.
name|num_tx_rings
argument_list|,
name|na
operator|.
name|num_tx_desc
argument_list|,
name|na
operator|.
name|num_tx_rings
argument_list|,
name|na
operator|.
name|num_rx_desc
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* end of file */
end_comment

end_unit

