begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 Matteo Landi, Luigi Rizzo. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  * $Id: ixgbe_netmap.h 10627 2012-02-23 19:37:15Z luigi $  *  * netmap modifications for ixgbe  *  * This file is meant to be a reference on how to implement  * netmap support for a network driver.  * This file contains code but only static or inline functions  * that are used by a single driver. To avoid replication of  * code we just #include it near the beginning of the  * standard driver.  */
end_comment

begin_include
include|#
directive|include
file|<net/netmap.h>
end_include

begin_include
include|#
directive|include
file|<sys/selinfo.h>
end_include

begin_comment
comment|/*  * Some drivers may need the following headers. Others  * already include them by default  #include<vm/vm.h> #include<vm/pmap.h>   */
end_comment

begin_include
include|#
directive|include
file|<dev/netmap/netmap_kern.h>
end_include

begin_comment
comment|/*  * ix_crcstrip: 0: keep CRC in rx frames (default), 1: strip it.  *	During regular operations the CRC is stripped, but on some  *	hardware reception of frames not multiple of 64 is slower,  *	so using crcstrip=0 helps in benchmarks.  *  * ix_rx_miss, ix_rx_miss_bufs:  *	count packets that might be missed due to lost interrupts.  *  * ix_use_dd  *	use the dd bit for completed tx transmissions.  *	This is tricky, much better to use TDH for now.  */
end_comment

begin_expr_stmt
name|SYSCTL_DECL
argument_list|(
name|_dev_netmap
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|int
name|ix_write_len
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|SYSCTL_INT
argument_list|(
name|_dev_netmap
argument_list|,
name|OID_AUTO
argument_list|,
name|ix_write_len
argument_list|,
name|CTLFLAG_RW
argument_list|,
operator|&
name|ix_write_len
argument_list|,
literal|0
argument_list|,
literal|"write rx len"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|int
name|ix_rx_miss
decl_stmt|,
name|ix_rx_miss_bufs
decl_stmt|,
name|ix_use_dd
decl_stmt|,
name|ix_crcstrip
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|SYSCTL_INT
argument_list|(
name|_dev_netmap
argument_list|,
name|OID_AUTO
argument_list|,
name|ix_crcstrip
argument_list|,
name|CTLFLAG_RW
argument_list|,
operator|&
name|ix_crcstrip
argument_list|,
literal|0
argument_list|,
literal|"strip CRC on rx frames"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SYSCTL_INT
argument_list|(
name|_dev_netmap
argument_list|,
name|OID_AUTO
argument_list|,
name|ix_use_dd
argument_list|,
name|CTLFLAG_RW
argument_list|,
operator|&
name|ix_use_dd
argument_list|,
literal|0
argument_list|,
literal|"use dd instead of tdh to detect tx frames"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SYSCTL_INT
argument_list|(
name|_dev_netmap
argument_list|,
name|OID_AUTO
argument_list|,
name|ix_rx_miss
argument_list|,
name|CTLFLAG_RW
argument_list|,
operator|&
name|ix_rx_miss
argument_list|,
literal|0
argument_list|,
literal|"potentially missed rx intr"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SYSCTL_INT
argument_list|(
name|_dev_netmap
argument_list|,
name|OID_AUTO
argument_list|,
name|ix_rx_miss_bufs
argument_list|,
name|CTLFLAG_RW
argument_list|,
operator|&
name|ix_rx_miss_bufs
argument_list|,
literal|0
argument_list|,
literal|"potentially missed rx intr bufs"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * wrapper to export locks to the generic netmap code.  */
end_comment

begin_function
specifier|static
name|void
name|ixgbe_netmap_lock_wrapper
parameter_list|(
name|struct
name|ifnet
modifier|*
name|_a
parameter_list|,
name|int
name|what
parameter_list|,
name|u_int
name|queueid
parameter_list|)
block|{
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|_a
operator|->
name|if_softc
decl_stmt|;
name|ASSERT
argument_list|(
name|queueid
operator|<
name|adapter
operator|->
name|num_queues
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|what
condition|)
block|{
case|case
name|NETMAP_CORE_LOCK
case|:
name|IXGBE_CORE_LOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_CORE_UNLOCK
case|:
name|IXGBE_CORE_UNLOCK
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_TX_LOCK
case|:
name|IXGBE_TX_LOCK
argument_list|(
operator|&
name|adapter
operator|->
name|tx_rings
index|[
name|queueid
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_TX_UNLOCK
case|:
name|IXGBE_TX_UNLOCK
argument_list|(
operator|&
name|adapter
operator|->
name|tx_rings
index|[
name|queueid
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_RX_LOCK
case|:
name|IXGBE_RX_LOCK
argument_list|(
operator|&
name|adapter
operator|->
name|rx_rings
index|[
name|queueid
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
name|NETMAP_RX_UNLOCK
case|:
name|IXGBE_RX_UNLOCK
argument_list|(
operator|&
name|adapter
operator|->
name|rx_rings
index|[
name|queueid
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|set_crcstrip
parameter_list|(
name|struct
name|ixgbe_hw
modifier|*
name|hw
parameter_list|,
name|int
name|onoff
parameter_list|)
block|{
comment|/* crc stripping is set in two places: 	 * IXGBE_HLREG0 (modified on init_locked and hw reset) 	 * IXGBE_RDRXCTL (set by the original driver in 	 *	ixgbe_setup_hw_rsc() called in init_locked. 	 *	We disable the setting when netmap is compiled in). 	 * We update the values here, but also in ixgbe.c because 	 * init_locked sometimes is called outside our control. 	 */
name|uint32_t
name|hl
decl_stmt|,
name|rxc
decl_stmt|;
name|hl
operator|=
name|IXGBE_READ_REG
argument_list|(
name|hw
argument_list|,
name|IXGBE_HLREG0
argument_list|)
expr_stmt|;
name|rxc
operator|=
name|IXGBE_READ_REG
argument_list|(
name|hw
argument_list|,
name|IXGBE_RDRXCTL
argument_list|)
expr_stmt|;
if|if
condition|(
name|netmap_verbose
condition|)
name|D
argument_list|(
literal|"%s read  HLREG 0x%x rxc 0x%x"
argument_list|,
name|onoff
condition|?
literal|"enter"
else|:
literal|"exit"
argument_list|,
name|hl
argument_list|,
name|rxc
argument_list|)
expr_stmt|;
comment|/* hw requirements ... */
name|rxc
operator|&=
operator|~
name|IXGBE_RDRXCTL_RSCFRSTSIZE
expr_stmt|;
name|rxc
operator||=
name|IXGBE_RDRXCTL_RSCACKC
expr_stmt|;
if|if
condition|(
name|onoff
operator|&&
operator|!
name|ix_crcstrip
condition|)
block|{
comment|/* keep the crc. Fast rx */
name|hl
operator|&=
operator|~
name|IXGBE_HLREG0_RXCRCSTRP
expr_stmt|;
name|rxc
operator|&=
operator|~
name|IXGBE_RDRXCTL_CRCSTRIP
expr_stmt|;
block|}
else|else
block|{
comment|/* reset default mode */
name|hl
operator||=
name|IXGBE_HLREG0_RXCRCSTRP
expr_stmt|;
name|rxc
operator||=
name|IXGBE_RDRXCTL_CRCSTRIP
expr_stmt|;
block|}
if|if
condition|(
name|netmap_verbose
condition|)
name|D
argument_list|(
literal|"%s write HLREG 0x%x rxc 0x%x"
argument_list|,
name|onoff
condition|?
literal|"enter"
else|:
literal|"exit"
argument_list|,
name|hl
argument_list|,
name|rxc
argument_list|)
expr_stmt|;
name|IXGBE_WRITE_REG
argument_list|(
name|hw
argument_list|,
name|IXGBE_HLREG0
argument_list|,
name|hl
argument_list|)
expr_stmt|;
name|IXGBE_WRITE_REG
argument_list|(
name|hw
argument_list|,
name|IXGBE_RDRXCTL
argument_list|,
name|rxc
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Register/unregister. We are already under core lock.  * Only called on the first register or the last unregister.  */
end_comment

begin_function
specifier|static
name|int
name|ixgbe_netmap_reg
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|int
name|onoff
parameter_list|)
block|{
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|ifp
argument_list|)
decl_stmt|;
name|int
name|error
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|na
operator|==
name|NULL
condition|)
return|return
name|EINVAL
return|;
comment|/* no netmap support here */
name|ixgbe_disable_intr
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|/* Tell the stack that the interface is no longer active */
name|ifp
operator|->
name|if_drv_flags
operator|&=
operator|~
operator|(
name|IFF_DRV_RUNNING
operator||
name|IFF_DRV_OACTIVE
operator|)
expr_stmt|;
name|set_crcstrip
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|onoff
argument_list|)
expr_stmt|;
if|if
condition|(
name|onoff
condition|)
block|{
comment|/* enable netmap mode */
name|ifp
operator|->
name|if_capenable
operator||=
name|IFCAP_NETMAP
expr_stmt|;
comment|/* save if_transmit and replace with our routine */
name|na
operator|->
name|if_transmit
operator|=
name|ifp
operator|->
name|if_transmit
expr_stmt|;
name|ifp
operator|->
name|if_transmit
operator|=
name|netmap_start
expr_stmt|;
comment|/* 		 * reinitialize the adapter, now with netmap flag set, 		 * so the rings will be set accordingly. 		 */
name|ixgbe_init_locked
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ifp
operator|->
name|if_drv_flags
operator|&
operator|(
name|IFF_DRV_RUNNING
operator||
name|IFF_DRV_OACTIVE
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
name|error
operator|=
name|ENOMEM
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
block|}
else|else
block|{
comment|/* reset normal mode (explicit request or netmap failed) */
name|fail
label|:
comment|/* restore if_transmit */
name|ifp
operator|->
name|if_transmit
operator|=
name|na
operator|->
name|if_transmit
expr_stmt|;
name|ifp
operator|->
name|if_capenable
operator|&=
operator|~
name|IFCAP_NETMAP
expr_stmt|;
comment|/* initialize the card, this time in standard mode */
name|ixgbe_init_locked
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
comment|/* also enables intr */
block|}
name|set_crcstrip
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|onoff
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the transmit ring.  * This routine might be called frequently so it must be efficient.  *  * Userspace has filled tx slots up to ring->cur (excluded).  * The last unused slot previously known to the kernel was kring->nkr_hwcur,  * and the last interrupt reported kring->nr_hwavail slots available.  *  * This function runs under lock (acquired from the caller or internally).  * It must first update ring->avail to what the kernel knows,  * subtract the newly used slots (ring->cur - kring->nkr_hwcur)  * from both avail and nr_hwavail, and set ring->nkr_hwcur = ring->cur  * issuing a dmamap_sync on all slots.  *  * Since ring comes from userspace, its content must be read only once,  * and validated before being used to update the kernel's structures.  * (this is also true for every use of ring in the kernel).  *  * ring->avail is never used, only checked for bogus values.  *  * do_lock is set iff the function is called from the ioctl handler.  * In this case, grab a lock around the body, and also reclaim transmitted  * buffers irrespective of interrupt mitigation.  */
end_comment

begin_function
specifier|static
name|int
name|ixgbe_netmap_txsync
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|do_lock
parameter_list|)
block|{
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|tx_ring
modifier|*
name|txr
init|=
operator|&
name|adapter
operator|->
name|tx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|adapter
operator|->
name|ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|tx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|j
decl_stmt|,
name|k
init|=
name|ring
operator|->
name|cur
decl_stmt|,
name|l
decl_stmt|,
name|n
init|=
literal|0
decl_stmt|,
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
comment|/* 	 * ixgbe can generate an interrupt on every tx packet, but it 	 * seems very expensive, so we interrupt once every half ring, 	 * or when requested with NS_REPORT 	 */
name|u_int
name|report_frequency
init|=
name|kring
operator|->
name|nkr_num_slots
operator|>>
literal|1
decl_stmt|;
if|if
condition|(
name|k
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
if|if
condition|(
name|do_lock
condition|)
name|IXGBE_TX_LOCK
argument_list|(
name|txr
argument_list|)
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|txr
operator|->
name|txdma
operator|.
name|dma_tag
argument_list|,
name|txr
operator|->
name|txdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
comment|/* 	 * Process new packets to send. j is the current index in the 	 * netmap ring, l is the corresponding index in the NIC ring. 	 * The two numbers differ because upon a *_init() we reset 	 * the NIC ring but leave the netmap ring unchanged. 	 * For the transmit ring, we have 	 * 	 *		j = kring->nr_hwcur 	 *		l = IXGBE_TDT (not tracked in the driver) 	 * and 	 * 		j == (l + kring->nkr_hwofs) % ring_size 	 * 	 * In this driver kring->nkr_hwofs>= 0, but for other 	 * drivers it might be negative as well. 	 */
name|j
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|j
operator|!=
name|k
condition|)
block|{
comment|/* we have new packets to send */
name|prefetch
argument_list|(
operator|&
name|ring
operator|->
name|slot
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|l
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|j
argument_list|)
expr_stmt|;
comment|/* NIC index */
name|prefetch
argument_list|(
operator|&
name|txr
operator|->
name|tx_buffers
index|[
name|l
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|j
operator|!=
name|k
condition|;
name|n
operator|++
control|)
block|{
comment|/* 			 * Collect per-slot info. 			 * Note that txbuf and curr are indexed by l. 			 * 			 * In this driver we collect the buffer address 			 * (using the PNMB() macro) because we always 			 * need to rewrite it into the NIC ring. 			 * Many other drivers preserve the address, so 			 * we only need to access it if NS_BUF_CHANGED 			 * is set. 			 * XXX note, on this device the dmamap* calls are 			 * not necessary because tag is 0, however just accessing 			 * the per-packet tag kills 1Mpps at 900 MHz. 			 */
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|j
index|]
decl_stmt|;
name|union
name|ixgbe_adv_tx_desc
modifier|*
name|curr
init|=
operator|&
name|txr
operator|->
name|tx_base
index|[
name|l
index|]
decl_stmt|;
name|struct
name|ixgbe_tx_buf
modifier|*
name|txbuf
init|=
operator|&
name|txr
operator|->
name|tx_buffers
index|[
name|l
index|]
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
comment|// XXX type for flags and len ?
name|int
name|flags
init|=
operator|(
operator|(
name|slot
operator|->
name|flags
operator|&
name|NS_REPORT
operator|)
operator|||
name|j
operator|==
literal|0
operator|||
name|j
operator|==
name|report_frequency
operator|)
condition|?
name|IXGBE_TXD_CMD_RS
else|:
literal|0
decl_stmt|;
name|u_int
name|len
init|=
name|slot
operator|->
name|len
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
name|j
operator|=
operator|(
name|j
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|j
operator|+
literal|1
expr_stmt|;
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
name|prefetch
argument_list|(
operator|&
name|ring
operator|->
name|slot
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|prefetch
argument_list|(
operator|&
name|txr
operator|->
name|tx_buffers
index|[
name|l
index|]
argument_list|)
expr_stmt|;
comment|/* 			 * Quick check for valid addr and len. 			 * NMB() returns netmap_buffer_base for invalid 			 * buffer indexes (but the address is still a 			 * valid one to be used in a ring). slot->len is 			 * unsigned so no need to check for negative values. 			 */
if|if
condition|(
name|addr
operator|==
name|netmap_buffer_base
operator|||
name|len
operator|>
name|NETMAP_BUF_SIZE
condition|)
block|{
name|ring_reset
label|:
if|if
condition|(
name|do_lock
condition|)
name|IXGBE_TX_UNLOCK
argument_list|(
name|txr
argument_list|)
expr_stmt|;
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
block|}
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
comment|/* buffer has changed, unload and reload map */
name|netmap_reload_map
argument_list|(
name|txr
operator|->
name|txtag
argument_list|,
name|txbuf
operator|->
name|map
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
block|}
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_REPORT
expr_stmt|;
comment|/* 			 * Fill the slot in the NIC ring. 			 * In this driver we need to rewrite the buffer 			 * address in the NIC ring. Other drivers do not 			 * need this. 			 * Use legacy descriptor, it is faster. 			 */
name|curr
operator|->
name|read
operator|.
name|buffer_addr
operator|=
name|htole64
argument_list|(
name|paddr
argument_list|)
expr_stmt|;
name|curr
operator|->
name|read
operator|.
name|olinfo_status
operator|=
literal|0
expr_stmt|;
name|curr
operator|->
name|read
operator|.
name|cmd_type_len
operator|=
name|htole32
argument_list|(
name|len
operator||
name|flags
operator||
name|IXGBE_ADVTXD_DCMD_IFCS
operator||
name|IXGBE_TXD_CMD_EOP
argument_list|)
expr_stmt|;
comment|/* make sure changes to the buffer are synced */
name|bus_dmamap_sync
argument_list|(
name|txr
operator|->
name|txtag
argument_list|,
name|txbuf
operator|->
name|map
argument_list|,
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwcur
operator|=
name|k
expr_stmt|;
comment|/* the saved ring->cur */
comment|/* decrease avail by number of packets  sent */
name|kring
operator|->
name|nr_hwavail
operator|-=
name|n
expr_stmt|;
comment|/* synchronize the NIC ring */
name|bus_dmamap_sync
argument_list|(
name|txr
operator|->
name|txdma
operator|.
name|dma_tag
argument_list|,
name|txr
operator|->
name|txdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
comment|/* (re)start the transmitter up to slot l (excluded) */
name|IXGBE_WRITE_REG
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|IXGBE_TDT
argument_list|(
name|txr
operator|->
name|me
argument_list|)
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * Reclaim buffers for completed transmissions. 	 * Because this is expensive (we read a NIC register etc.) 	 * we only do it in specific cases (see below). 	 * In all cases kring->nr_kflags indicates which slot will be 	 * checked upon a tx interrupt (nkr_num_slots means none). 	 */
if|if
condition|(
name|do_lock
condition|)
block|{
name|j
operator|=
literal|1
expr_stmt|;
comment|/* forced reclaim, ignore interrupts */
name|kring
operator|->
name|nr_kflags
operator|=
name|kring
operator|->
name|nkr_num_slots
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|kring
operator|->
name|nr_hwavail
operator|>
literal|0
condition|)
block|{
name|j
operator|=
literal|0
expr_stmt|;
comment|/* buffers still available: no reclaim, ignore intr. */
name|kring
operator|->
name|nr_kflags
operator|=
name|kring
operator|->
name|nkr_num_slots
expr_stmt|;
block|}
else|else
block|{
comment|/* 		 * no buffers available, locate a slot for which we request 		 * ReportStatus (approximately half ring after next_to_clean) 		 * and record it in kring->nr_kflags. 		 * If the slot has DD set, do the reclaim looking at TDH, 		 * otherwise we go to sleep (in netmap_poll()) and will be 		 * woken up when slot nr_kflags will be ready. 		 */
name|struct
name|ixgbe_legacy_tx_desc
modifier|*
name|txd
init|=
operator|(
expr|struct
name|ixgbe_legacy_tx_desc
operator|*
operator|)
name|txr
operator|->
name|tx_base
decl_stmt|;
name|j
operator|=
name|txr
operator|->
name|next_to_clean
operator|+
name|kring
operator|->
name|nkr_num_slots
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|j
operator|>=
name|kring
operator|->
name|nkr_num_slots
condition|)
name|j
operator|-=
name|kring
operator|->
name|nkr_num_slots
expr_stmt|;
comment|// round to the closest with dd set
name|j
operator|=
operator|(
name|j
operator|<
name|kring
operator|->
name|nkr_num_slots
operator|/
literal|4
operator|||
name|j
operator|>=
name|kring
operator|->
name|nkr_num_slots
operator|*
literal|3
operator|/
literal|4
operator|)
condition|?
literal|0
else|:
name|report_frequency
expr_stmt|;
name|kring
operator|->
name|nr_kflags
operator|=
name|j
expr_stmt|;
comment|/* the slot to check */
name|j
operator|=
name|txd
index|[
name|j
index|]
operator|.
name|upper
operator|.
name|fields
operator|.
name|status
operator|&
name|IXGBE_TXD_STAT_DD
expr_stmt|;
comment|// XXX cpu_to_le32 ?
block|}
if|if
condition|(
name|j
condition|)
block|{
name|int
name|delta
decl_stmt|;
comment|/* 		 * Record completed transmissions. 		 * We (re)use the driver's txr->next_to_clean to keep 		 * track of the most recently completed transmission. 		 * 		 * The datasheet discourages the use of TDH to find out the 		 * number of sent packets. We should rather check the DD 		 * status bit in a packet descriptor. However, we only set 		 * the "report status" bit for some descriptors (a kind of 		 * interrupt mitigation), so we can only check on those. 		 * For the time being we use TDH, as we do it infrequently 		 * enough not to pose performance problems. 		 */
if|if
condition|(
name|ix_use_dd
condition|)
block|{
name|struct
name|ixgbe_legacy_tx_desc
modifier|*
name|txd
init|=
operator|(
expr|struct
name|ixgbe_legacy_tx_desc
operator|*
operator|)
name|txr
operator|->
name|tx_base
decl_stmt|;
name|l
operator|=
name|txr
operator|->
name|next_to_clean
expr_stmt|;
name|k
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|kring
operator|->
name|nr_hwcur
argument_list|)
expr_stmt|;
name|delta
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|l
operator|!=
name|k
operator|&&
name|txd
index|[
name|l
index|]
operator|.
name|upper
operator|.
name|fields
operator|.
name|status
operator|&
name|IXGBE_TXD_STAT_DD
condition|)
block|{
name|delta
operator|++
expr_stmt|;
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
name|l
operator|=
name|IXGBE_READ_REG
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|IXGBE_TDH
argument_list|(
name|ring_nr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|>=
name|kring
operator|->
name|nkr_num_slots
condition|)
block|{
comment|/* XXX can happen */
name|D
argument_list|(
literal|"TDH wrap %d"
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|l
operator|-=
name|kring
operator|->
name|nkr_num_slots
expr_stmt|;
block|}
name|delta
operator|=
name|l
operator|-
name|txr
operator|->
name|next_to_clean
expr_stmt|;
block|}
if|if
condition|(
name|delta
condition|)
block|{
comment|/* some tx completed, increment avail */
if|if
condition|(
name|delta
operator|<
literal|0
condition|)
name|delta
operator|+=
name|kring
operator|->
name|nkr_num_slots
expr_stmt|;
name|txr
operator|->
name|next_to_clean
operator|=
name|l
expr_stmt|;
name|kring
operator|->
name|nr_hwavail
operator|+=
name|delta
expr_stmt|;
if|if
condition|(
name|kring
operator|->
name|nr_hwavail
operator|>
name|lim
condition|)
goto|goto
name|ring_reset
goto|;
block|}
block|}
comment|/* update avail to what the kernel knows */
name|ring
operator|->
name|avail
operator|=
name|kring
operator|->
name|nr_hwavail
expr_stmt|;
if|if
condition|(
name|do_lock
condition|)
name|IXGBE_TX_UNLOCK
argument_list|(
name|txr
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * Reconcile kernel and user view of the receive ring.  * Same as for the txsync, this routine must be efficient and  * avoid races in accessing the shared regions.  *  * When called, userspace has read data from slots kring->nr_hwcur  * up to ring->cur (excluded).  *  * The last interrupt reported kring->nr_hwavail slots available  * after kring->nr_hwcur.  * We must subtract the newly consumed slots (cur - nr_hwcur)  * from nr_hwavail, make the descriptors available for the next reads,  * and set kring->nr_hwcur = ring->cur and ring->avail = kring->nr_hwavail.  *  * do_lock has a special meaning: please refer to txsync.  */
end_comment

begin_function
specifier|static
name|int
name|ixgbe_netmap_rxsync
parameter_list|(
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|u_int
name|ring_nr
parameter_list|,
name|int
name|do_lock
parameter_list|)
block|{
name|struct
name|adapter
modifier|*
name|adapter
init|=
name|ifp
operator|->
name|if_softc
decl_stmt|;
name|struct
name|rx_ring
modifier|*
name|rxr
init|=
operator|&
name|adapter
operator|->
name|rx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_adapter
modifier|*
name|na
init|=
name|NA
argument_list|(
name|adapter
operator|->
name|ifp
argument_list|)
decl_stmt|;
name|struct
name|netmap_kring
modifier|*
name|kring
init|=
operator|&
name|na
operator|->
name|rx_rings
index|[
name|ring_nr
index|]
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|kring
operator|->
name|ring
decl_stmt|;
name|u_int
name|j
decl_stmt|,
name|l
decl_stmt|,
name|n
decl_stmt|,
name|lim
init|=
name|kring
operator|->
name|nkr_num_slots
operator|-
literal|1
decl_stmt|;
name|int
name|force_update
init|=
name|do_lock
operator|||
name|kring
operator|->
name|nr_kflags
operator|&
name|NKR_PENDINTR
decl_stmt|;
name|u_int
name|k
init|=
name|ring
operator|->
name|cur
decl_stmt|,
name|resvd
init|=
name|ring
operator|->
name|reserved
decl_stmt|;
if|if
condition|(
name|k
operator|>
name|lim
condition|)
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
if|if
condition|(
name|do_lock
condition|)
name|IXGBE_RX_LOCK
argument_list|(
name|rxr
argument_list|)
expr_stmt|;
comment|/* XXX check sync modes */
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|rxdma
operator|.
name|dma_tag
argument_list|,
name|rxr
operator|->
name|rxdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_POSTREAD
operator||
name|BUS_DMASYNC_POSTWRITE
argument_list|)
expr_stmt|;
comment|/* 	 * First part, import newly received packets into the netmap ring. 	 * 	 * j is the index of the next free slot in the netmap ring, 	 * and l is the index of the next received packet in the NIC ring, 	 * and they may differ in case if_init() has been called while 	 * in netmap mode. For the receive ring we have 	 * 	 *	j = (kring->nr_hwcur + kring->nr_hwavail) % ring_size 	 *	l = rxr->next_to_check; 	 * and 	 *	j == (l + kring->nkr_hwofs) % ring_size 	 * 	 * rxr->next_to_check is set to 0 on a ring reinit 	 */
if|if
condition|(
name|netmap_no_pendintr
operator|||
name|force_update
condition|)
block|{
comment|/* XXX apparently the length field in advanced descriptors 		 * does not include the CRC irrespective of the setting 		 * of CRCSTRIP. The data sheets say differently. 		 * Very strange. 		 */
name|int
name|crclen
init|=
name|ix_crcstrip
condition|?
literal|0
else|:
literal|4
decl_stmt|;
name|l
operator|=
name|rxr
operator|->
name|next_to_check
expr_stmt|;
name|j
operator|=
name|netmap_idx_n2k
argument_list|(
name|kring
argument_list|,
name|l
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
condition|;
name|n
operator|++
control|)
block|{
name|union
name|ixgbe_adv_rx_desc
modifier|*
name|curr
init|=
operator|&
name|rxr
operator|->
name|rx_base
index|[
name|l
index|]
decl_stmt|;
name|uint32_t
name|staterr
init|=
name|le32toh
argument_list|(
name|curr
operator|->
name|wb
operator|.
name|upper
operator|.
name|status_error
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|staterr
operator|&
name|IXGBE_RXD_STAT_DD
operator|)
operator|==
literal|0
condition|)
break|break;
name|ring
operator|->
name|slot
index|[
name|j
index|]
operator|.
name|len
operator|=
name|le16toh
argument_list|(
name|curr
operator|->
name|wb
operator|.
name|upper
operator|.
name|length
argument_list|)
operator|-
name|crclen
expr_stmt|;
if|if
condition|(
name|ix_write_len
condition|)
name|D
argument_list|(
literal|"rx[%d] len %d"
argument_list|,
name|j
argument_list|,
name|ring
operator|->
name|slot
index|[
name|j
index|]
operator|.
name|len
argument_list|)
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|ptag
argument_list|,
name|rxr
operator|->
name|rx_buffers
index|[
name|l
index|]
operator|.
name|pmap
argument_list|,
name|BUS_DMASYNC_POSTREAD
argument_list|)
expr_stmt|;
name|j
operator|=
operator|(
name|j
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|j
operator|+
literal|1
expr_stmt|;
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|n
condition|)
block|{
comment|/* update the state variables */
if|if
condition|(
name|netmap_no_pendintr
operator|&&
operator|!
name|force_update
condition|)
block|{
comment|/* diagnostics */
name|ix_rx_miss
operator|++
expr_stmt|;
name|ix_rx_miss_bufs
operator|+=
name|n
expr_stmt|;
block|}
name|rxr
operator|->
name|next_to_check
operator|=
name|l
expr_stmt|;
name|kring
operator|->
name|nr_hwavail
operator|+=
name|n
expr_stmt|;
block|}
name|kring
operator|->
name|nr_kflags
operator|&=
operator|~
name|NKR_PENDINTR
expr_stmt|;
block|}
comment|/* 	 * Skip past packets that userspace has released 	 * (from kring->nr_hwcur to ring->cur - ring->reserved excluded), 	 * and make the buffers available for reception. 	 * As usual j is the index in the netmap ring, l is the index 	 * in the NIC ring, and j == (l + kring->nkr_hwofs) % ring_size 	 */
name|j
operator|=
name|kring
operator|->
name|nr_hwcur
expr_stmt|;
if|if
condition|(
name|resvd
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|resvd
operator|+
name|ring
operator|->
name|avail
operator|>=
name|lim
operator|+
literal|1
condition|)
block|{
name|D
argument_list|(
literal|"XXX invalid reserve/avail %d %d"
argument_list|,
name|resvd
argument_list|,
name|ring
operator|->
name|avail
argument_list|)
expr_stmt|;
name|ring
operator|->
name|reserved
operator|=
name|resvd
operator|=
literal|0
expr_stmt|;
comment|// XXX panic...
block|}
name|k
operator|=
operator|(
name|k
operator|>=
name|resvd
operator|)
condition|?
name|k
operator|-
name|resvd
else|:
name|k
operator|+
name|lim
operator|+
literal|1
operator|-
name|resvd
expr_stmt|;
block|}
if|if
condition|(
name|j
operator|!=
name|k
condition|)
block|{
comment|/* userspace has released some packets. */
name|l
operator|=
name|netmap_idx_k2n
argument_list|(
name|kring
argument_list|,
name|j
argument_list|)
expr_stmt|;
for|for
control|(
name|n
operator|=
literal|0
init|;
name|j
operator|!=
name|k
condition|;
name|n
operator|++
control|)
block|{
comment|/* collect per-slot info, with similar validations 			 * and flag handling as in the txsync code. 			 * 			 * NOTE curr and rxbuf are indexed by l. 			 * Also, this driver needs to update the physical 			 * address in the NIC ring, but other drivers 			 * may not have this requirement. 			 */
name|struct
name|netmap_slot
modifier|*
name|slot
init|=
operator|&
name|ring
operator|->
name|slot
index|[
name|j
index|]
decl_stmt|;
name|union
name|ixgbe_adv_rx_desc
modifier|*
name|curr
init|=
operator|&
name|rxr
operator|->
name|rx_base
index|[
name|l
index|]
decl_stmt|;
name|struct
name|ixgbe_rx_buf
modifier|*
name|rxbuf
init|=
operator|&
name|rxr
operator|->
name|rx_buffers
index|[
name|l
index|]
decl_stmt|;
name|uint64_t
name|paddr
decl_stmt|;
name|void
modifier|*
name|addr
init|=
name|PNMB
argument_list|(
name|slot
argument_list|,
operator|&
name|paddr
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
name|netmap_buffer_base
condition|)
comment|/* bad buf */
goto|goto
name|ring_reset
goto|;
if|if
condition|(
name|slot
operator|->
name|flags
operator|&
name|NS_BUF_CHANGED
condition|)
block|{
name|netmap_reload_map
argument_list|(
name|rxr
operator|->
name|ptag
argument_list|,
name|rxbuf
operator|->
name|pmap
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|slot
operator|->
name|flags
operator|&=
operator|~
name|NS_BUF_CHANGED
expr_stmt|;
block|}
name|curr
operator|->
name|wb
operator|.
name|upper
operator|.
name|status_error
operator|=
literal|0
expr_stmt|;
name|curr
operator|->
name|read
operator|.
name|pkt_addr
operator|=
name|htole64
argument_list|(
name|paddr
argument_list|)
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|ptag
argument_list|,
name|rxbuf
operator|->
name|pmap
argument_list|,
name|BUS_DMASYNC_PREREAD
argument_list|)
expr_stmt|;
name|j
operator|=
operator|(
name|j
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|j
operator|+
literal|1
expr_stmt|;
name|l
operator|=
operator|(
name|l
operator|==
name|lim
operator|)
condition|?
literal|0
else|:
name|l
operator|+
literal|1
expr_stmt|;
block|}
name|kring
operator|->
name|nr_hwavail
operator|-=
name|n
expr_stmt|;
name|kring
operator|->
name|nr_hwcur
operator|=
name|k
expr_stmt|;
name|bus_dmamap_sync
argument_list|(
name|rxr
operator|->
name|rxdma
operator|.
name|dma_tag
argument_list|,
name|rxr
operator|->
name|rxdma
operator|.
name|dma_map
argument_list|,
name|BUS_DMASYNC_PREREAD
operator||
name|BUS_DMASYNC_PREWRITE
argument_list|)
expr_stmt|;
comment|/* IMPORTANT: we must leave one free slot in the ring, 		 * so move l back by one unit 		 */
name|l
operator|=
operator|(
name|l
operator|==
literal|0
operator|)
condition|?
name|lim
else|:
name|l
operator|-
literal|1
expr_stmt|;
name|IXGBE_WRITE_REG
argument_list|(
operator|&
name|adapter
operator|->
name|hw
argument_list|,
name|IXGBE_RDT
argument_list|(
name|rxr
operator|->
name|me
argument_list|)
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
comment|/* tell userspace that there are new packets */
name|ring
operator|->
name|avail
operator|=
name|kring
operator|->
name|nr_hwavail
operator|-
name|resvd
expr_stmt|;
if|if
condition|(
name|do_lock
condition|)
name|IXGBE_RX_UNLOCK
argument_list|(
name|rxr
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
name|ring_reset
label|:
if|if
condition|(
name|do_lock
condition|)
name|IXGBE_RX_UNLOCK
argument_list|(
name|rxr
argument_list|)
expr_stmt|;
return|return
name|netmap_ring_reinit
argument_list|(
name|kring
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * The attach routine, called near the end of ixgbe_attach(),  * fills the parameters for netmap_attach() and calls it.  * It cannot fail, in the worst case (such as no memory)  * netmap mode will be disabled and the driver will only  * operate in standard mode.  */
end_comment

begin_function
specifier|static
name|void
name|ixgbe_netmap_attach
parameter_list|(
name|struct
name|adapter
modifier|*
name|adapter
parameter_list|)
block|{
name|struct
name|netmap_adapter
name|na
decl_stmt|;
name|bzero
argument_list|(
operator|&
name|na
argument_list|,
sizeof|sizeof
argument_list|(
name|na
argument_list|)
argument_list|)
expr_stmt|;
name|na
operator|.
name|ifp
operator|=
name|adapter
operator|->
name|ifp
expr_stmt|;
name|na
operator|.
name|separate_locks
operator|=
literal|1
expr_stmt|;
comment|/* this card has separate rx/tx locks */
name|na
operator|.
name|num_tx_desc
operator|=
name|adapter
operator|->
name|num_tx_desc
expr_stmt|;
name|na
operator|.
name|num_rx_desc
operator|=
name|adapter
operator|->
name|num_rx_desc
expr_stmt|;
name|na
operator|.
name|nm_txsync
operator|=
name|ixgbe_netmap_txsync
expr_stmt|;
name|na
operator|.
name|nm_rxsync
operator|=
name|ixgbe_netmap_rxsync
expr_stmt|;
name|na
operator|.
name|nm_lock
operator|=
name|ixgbe_netmap_lock_wrapper
expr_stmt|;
name|na
operator|.
name|nm_register
operator|=
name|ixgbe_netmap_reg
expr_stmt|;
name|netmap_attach
argument_list|(
operator|&
name|na
argument_list|,
name|adapter
operator|->
name|num_queues
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* end of file */
end_comment

end_unit

