begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2012 Adrian Chadd  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    similar to the "NO WARRANTY" disclaimer below ("Disclaimer") and any  *    redistribution must be conditioned upon including a substantially  *    similar Disclaimer requirement for further binary redistribution.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTIBILITY  * AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL  * THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY,  * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER  * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  * THE POSSIBILITY OF SUCH DAMAGES.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IF_ATH_ALQ_H__
end_ifndef

begin_define
define|#
directive|define
name|__IF_ATH_ALQ_H__
end_define

begin_define
define|#
directive|define
name|ATH_ALQ_INIT_STATE
value|1
end_define

begin_struct
struct|struct
name|if_ath_alq_init_state
block|{
name|uint32_t
name|sc_mac_version
decl_stmt|;
name|uint32_t
name|sc_mac_revision
decl_stmt|;
name|uint32_t
name|sc_phy_rev
decl_stmt|;
name|uint32_t
name|sc_hal_magic
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_ALQ_EDMA_TXSTATUS
value|2
end_define

begin_define
define|#
directive|define
name|ATH_ALQ_EDMA_RXSTATUS
value|3
end_define

begin_define
define|#
directive|define
name|ATH_ALQ_EDMA_TXDESC
value|4
end_define

begin_define
define|#
directive|define
name|ATH_ALQ_TDMA_BEACON_STATE
value|5
end_define

begin_struct
struct|struct
name|if_ath_alq_tdma_beacon_state
block|{
name|uint64_t
name|rx_tsf
decl_stmt|;
comment|/* RX TSF of beacon frame */
name|uint64_t
name|beacon_tsf
decl_stmt|;
comment|/* TSF inside beacon frame */
name|uint64_t
name|tsf64
decl_stmt|;
name|uint64_t
name|nextslot_tsf
decl_stmt|;
name|uint32_t
name|nextslot_tu
decl_stmt|;
name|uint32_t
name|txtime
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_ALQ_TDMA_TIMER_CONFIG
value|6
end_define

begin_struct
struct|struct
name|if_ath_alq_tdma_timer_config
block|{
name|uint32_t
name|tdma_slot
decl_stmt|;
name|uint32_t
name|tdma_slotlen
decl_stmt|;
name|uint32_t
name|tdma_slotcnt
decl_stmt|;
name|uint32_t
name|tdma_bintval
decl_stmt|;
name|uint32_t
name|tdma_guard
decl_stmt|;
name|uint32_t
name|tdma_scbintval
decl_stmt|;
name|uint32_t
name|tdma_dbaprep
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_ALQ_TDMA_SLOT_CALC
value|7
end_define

begin_struct
struct|struct
name|if_ath_alq_tdma_slot_calc
block|{
name|uint64_t
name|nexttbtt
decl_stmt|;
name|uint64_t
name|next_slot
decl_stmt|;
name|int32_t
name|tsfdelta
decl_stmt|;
name|int32_t
name|avg_plus
decl_stmt|;
name|int32_t
name|avg_minus
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_ALQ_TDMA_TSF_ADJUST
value|8
end_define

begin_struct
struct|struct
name|if_ath_alq_tdma_tsf_adjust
block|{
name|uint64_t
name|tsf64_old
decl_stmt|;
name|uint64_t
name|tsf64_new
decl_stmt|;
name|int32_t
name|tsfdelta
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_ALQ_TDMA_TIMER_SET
value|9
end_define

begin_struct
struct|struct
name|if_ath_alq_tdma_timer_set
block|{
name|uint32_t
name|bt_intval
decl_stmt|;
name|uint32_t
name|bt_nexttbtt
decl_stmt|;
name|uint32_t
name|bt_nextdba
decl_stmt|;
name|uint32_t
name|bt_nextswba
decl_stmt|;
name|uint32_t
name|bt_nextatim
decl_stmt|;
name|uint32_t
name|bt_flags
decl_stmt|;
name|uint32_t
name|sc_tdmadbaprep
decl_stmt|;
name|uint32_t
name|sc_tdmaswbaprep
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_ALQ_INTR_STATUS
value|10
end_define

begin_struct
struct|struct
name|if_ath_alq_interrupt
block|{
name|uint32_t
name|intr_status
decl_stmt|;
name|uint32_t
name|intr_state
index|[
literal|8
index|]
decl_stmt|;
name|uint32_t
name|intr_syncstate
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_ALQ_MIB_COUNTERS
value|11
end_define

begin_struct
struct|struct
name|if_ath_alq_mib_counters
block|{
name|uint32_t
name|valid
decl_stmt|;
name|uint32_t
name|tx_busy
decl_stmt|;
name|uint32_t
name|rx_busy
decl_stmt|;
name|uint32_t
name|chan_busy
decl_stmt|;
name|uint32_t
name|ext_chan_busy
decl_stmt|;
name|uint32_t
name|cycle_count
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_ALQ_MISSED_BEACON
value|12
end_define

begin_define
define|#
directive|define
name|ATH_ALQ_STUCK_BEACON
value|13
end_define

begin_define
define|#
directive|define
name|ATH_ALQ_RESUME_BEACON
value|14
end_define

begin_define
define|#
directive|define
name|ATH_ALQ_TX_FIFO_PUSH
value|15
end_define

begin_struct
struct|struct
name|if_ath_alq_tx_fifo_push
block|{
name|uint32_t
name|txq
decl_stmt|;
name|uint32_t
name|nframes
decl_stmt|;
name|uint32_t
name|fifo_depth
decl_stmt|;
name|uint32_t
name|frame_cnt
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * These will always be logged, regardless.  */
end_comment

begin_define
define|#
directive|define
name|ATH_ALQ_LOG_ALWAYS_MASK
value|0x00000001
end_define

begin_define
define|#
directive|define
name|ATH_ALQ_FILENAME_LEN
value|128
end_define

begin_define
define|#
directive|define
name|ATH_ALQ_DEVNAME_LEN
value|32
end_define

begin_struct
struct|struct
name|if_ath_alq
block|{
name|uint32_t
name|sc_alq_debug
decl_stmt|;
comment|/* Debug flags to report */
name|struct
name|alq
modifier|*
name|sc_alq_alq
decl_stmt|;
comment|/* alq state */
name|unsigned
name|int
name|sc_alq_qsize
decl_stmt|;
comment|/* queue size */
name|unsigned
name|int
name|sc_alq_numlost
decl_stmt|;
comment|/* number of "lost" entries */
name|int
name|sc_alq_isactive
decl_stmt|;
name|char
name|sc_alq_devname
index|[
name|ATH_ALQ_DEVNAME_LEN
index|]
decl_stmt|;
name|char
name|sc_alq_filename
index|[
name|ATH_ALQ_FILENAME_LEN
index|]
decl_stmt|;
name|struct
name|if_ath_alq_init_state
name|sc_alq_cfg
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* 128 bytes in total */
end_comment

begin_define
define|#
directive|define
name|ATH_ALQ_PAYLOAD_LEN
value|112
end_define

begin_struct
struct|struct
name|if_ath_alq_hdr
block|{
name|uint64_t
name|threadid
decl_stmt|;
name|uint32_t
name|tstamp_sec
decl_stmt|;
name|uint32_t
name|tstamp_usec
decl_stmt|;
name|uint16_t
name|op
decl_stmt|;
name|uint16_t
name|len
decl_stmt|;
comment|/* Length of (optional) payload */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|if_ath_alq_payload
block|{
name|struct
name|if_ath_alq_hdr
name|hdr
decl_stmt|;
name|char
name|payload
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function
specifier|static
specifier|inline
name|int
name|if_ath_alq_checkdebug
parameter_list|(
name|struct
name|if_ath_alq
modifier|*
name|alq
parameter_list|,
name|uint16_t
name|op
parameter_list|)
block|{
return|return
operator|(
operator|(
name|alq
operator|->
name|sc_alq_debug
operator||
name|ATH_ALQ_LOG_ALWAYS_MASK
operator|)
operator|&
operator|(
literal|1
operator|<<
operator|(
name|op
operator|-
literal|1
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_function_decl
specifier|extern
name|void
name|if_ath_alq_init
parameter_list|(
name|struct
name|if_ath_alq
modifier|*
name|alq
parameter_list|,
specifier|const
name|char
modifier|*
name|devname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|if_ath_alq_setcfg
parameter_list|(
name|struct
name|if_ath_alq
modifier|*
name|alq
parameter_list|,
name|uint32_t
name|macVer
parameter_list|,
name|uint32_t
name|macRev
parameter_list|,
name|uint32_t
name|phyRev
parameter_list|,
name|uint32_t
name|halMagic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|if_ath_alq_tidyup
parameter_list|(
name|struct
name|if_ath_alq
modifier|*
name|alq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|if_ath_alq_start
parameter_list|(
name|struct
name|if_ath_alq
modifier|*
name|alq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|if_ath_alq_stop
parameter_list|(
name|struct
name|if_ath_alq
modifier|*
name|alq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|if_ath_alq_post
parameter_list|(
name|struct
name|if_ath_alq
modifier|*
name|alq
parameter_list|,
name|uint16_t
name|op
parameter_list|,
name|uint16_t
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* XXX maybe doesn't belong here? */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|if_ath_alq_post_intr
parameter_list|(
name|struct
name|if_ath_alq
modifier|*
name|alq
parameter_list|,
name|uint32_t
name|status
parameter_list|,
name|uint32_t
modifier|*
name|state
parameter_list|,
name|uint32_t
name|sync_state
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|struct
name|if_ath_alq_interrupt
name|intr
decl_stmt|;
if|if
condition|(
operator|!
name|if_ath_alq_checkdebug
argument_list|(
name|alq
argument_list|,
name|ATH_ALQ_INTR_STATUS
argument_list|)
condition|)
return|return;
name|intr
operator|.
name|intr_status
operator|=
name|htobe32
argument_list|(
name|status
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
name|intr
operator|.
name|intr_state
index|[
name|i
index|]
operator|=
name|htobe32
argument_list|(
name|state
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|intr
operator|.
name|intr_syncstate
operator|=
name|htobe32
argument_list|(
name|sync_state
argument_list|)
expr_stmt|;
name|if_ath_alq_post
argument_list|(
name|alq
argument_list|,
name|ATH_ALQ_INTR_STATUS
argument_list|,
sizeof|sizeof
argument_list|(
name|intr
argument_list|)
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|&
name|intr
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

