begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2002-2009 Sam Leffler, Errno Consulting  * Copyright (c) 2002-2008 Atheros Communications, Inc.  *  * Permission to use, copy, modify, and/or distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ATH_AR5212_H_
end_ifndef

begin_define
define|#
directive|define
name|_ATH_AR5212_H_
end_define

begin_include
include|#
directive|include
file|"ah_eeprom.h"
end_include

begin_define
define|#
directive|define
name|AR5212_MAGIC
value|0x19541014
end_define

begin_comment
comment|/* DCU Transmit Filter macros */
end_comment

begin_define
define|#
directive|define
name|CALC_MMR
parameter_list|(
name|dcu
parameter_list|,
name|idx
parameter_list|)
define|\
value|( (4 * dcu) + (idx< 32 ? 0 : (idx< 64 ? 1 : (idx< 96 ? 2 : 3))) )
end_define

begin_define
define|#
directive|define
name|TXBLK_FROM_MMR
parameter_list|(
name|mmr
parameter_list|)
define|\
value|(AR_D_TXBLK_BASE + ((mmr& 0x1f)<< 6) + ((mmr& 0x20)>> 3))
end_define

begin_define
define|#
directive|define
name|CALC_TXBLK_ADDR
parameter_list|(
name|dcu
parameter_list|,
name|idx
parameter_list|)
value|(TXBLK_FROM_MMR(CALC_MMR(dcu, idx)))
end_define

begin_define
define|#
directive|define
name|CALC_TXBLK_VALUE
parameter_list|(
name|idx
parameter_list|)
value|(1<< (idx& 0x1f))
end_define

begin_comment
comment|/* MAC register values */
end_comment

begin_define
define|#
directive|define
name|INIT_INTERRUPT_MASK
define|\
value|( AR_IMR_TXERR  | AR_IMR_TXOK | AR_IMR_RXORN | \ 	  AR_IMR_RXERR  | AR_IMR_RXOK | AR_IMR_TXURN | \ 	  AR_IMR_HIUERR )
end_define

begin_define
define|#
directive|define
name|INIT_BEACON_CONTROL
define|\
value|((INIT_RESET_TSF<< 24)  | (INIT_BEACON_EN<< 23) | \ 	  (INIT_TIM_OFFSET<< 16) | INIT_BEACON_PERIOD)
end_define

begin_define
define|#
directive|define
name|INIT_CONFIG_STATUS
value|0x00000000
end_define

begin_define
define|#
directive|define
name|INIT_RSSI_THR
value|0x00000781
end_define

begin_comment
comment|/* Missed beacon counter initialized to 0x7 (max is 0xff) */
end_comment

begin_define
define|#
directive|define
name|INIT_IQCAL_LOG_COUNT_MAX
value|0xF
end_define

begin_define
define|#
directive|define
name|INIT_BCON_CNTRL_REG
value|0x00000000
end_define

begin_define
define|#
directive|define
name|INIT_USEC
value|40
end_define

begin_define
define|#
directive|define
name|HALF_RATE_USEC
value|19
end_define

begin_comment
comment|/* ((40 / 2) - 1 ) */
end_comment

begin_define
define|#
directive|define
name|QUARTER_RATE_USEC
value|9
end_define

begin_comment
comment|/* ((40 / 4) - 1 ) */
end_comment

begin_define
define|#
directive|define
name|RX_NON_FULL_RATE_LATENCY
value|63
end_define

begin_define
define|#
directive|define
name|TX_HALF_RATE_LATENCY
value|108
end_define

begin_define
define|#
directive|define
name|TX_QUARTER_RATE_LATENCY
value|216
end_define

begin_define
define|#
directive|define
name|IFS_SLOT_FULL_RATE
value|0x168
end_define

begin_comment
comment|/* 9 us half, 40 MHz core clock (9*40) */
end_comment

begin_define
define|#
directive|define
name|IFS_SLOT_HALF_RATE
value|0x104
end_define

begin_comment
comment|/* 13 us half, 20 MHz core clock (13*20) */
end_comment

begin_define
define|#
directive|define
name|IFS_SLOT_QUARTER_RATE
value|0xD2
end_define

begin_comment
comment|/* 21 us quarter, 10 MHz core clock (21*10) */
end_comment

begin_define
define|#
directive|define
name|IFS_EIFS_FULL_RATE
value|0xE60
end_define

begin_comment
comment|/* (74 + (2 * 9)) * 40MHz core clock */
end_comment

begin_define
define|#
directive|define
name|IFS_EIFS_HALF_RATE
value|0xDAC
end_define

begin_comment
comment|/* (149 + (2 * 13)) * 20MHz core clock */
end_comment

begin_define
define|#
directive|define
name|IFS_EIFS_QUARTER_RATE
value|0xD48
end_define

begin_comment
comment|/* (298 + (2 * 21)) * 10MHz core clock */
end_comment

begin_define
define|#
directive|define
name|ACK_CTS_TIMEOUT_11A
value|0x3E8
end_define

begin_comment
comment|/* ACK timeout in 11a core clocks */
end_comment

begin_comment
comment|/* Tx frame start to tx data start delay */
end_comment

begin_define
define|#
directive|define
name|TX_FRAME_D_START_HALF_RATE
value|0xc
end_define

begin_define
define|#
directive|define
name|TX_FRAME_D_START_QUARTER_RATE
value|0xd
end_define

begin_comment
comment|/*  * Various fifo fill before Tx start, in 64-byte units  * i.e. put the frame in the air while still DMAing  */
end_comment

begin_define
define|#
directive|define
name|MIN_TX_FIFO_THRESHOLD
value|0x1
end_define

begin_define
define|#
directive|define
name|MAX_TX_FIFO_THRESHOLD
value|((IEEE80211_MAX_LEN / 64) + 1)
end_define

begin_define
define|#
directive|define
name|INIT_TX_FIFO_THRESHOLD
value|MIN_TX_FIFO_THRESHOLD
end_define

begin_define
define|#
directive|define
name|HAL_DECOMP_MASK_SIZE
value|128
end_define

begin_comment
comment|/* 1 byte per key */
end_comment

begin_comment
comment|/*  * Gain support.  */
end_comment

begin_define
define|#
directive|define
name|NUM_CORNER_FIX_BITS
value|4
end_define

begin_define
define|#
directive|define
name|NUM_CORNER_FIX_BITS_5112
value|7
end_define

begin_define
define|#
directive|define
name|DYN_ADJ_UP_MARGIN
value|15
end_define

begin_define
define|#
directive|define
name|DYN_ADJ_LO_MARGIN
value|20
end_define

begin_define
define|#
directive|define
name|PHY_PROBE_CCK_CORRECTION
value|5
end_define

begin_define
define|#
directive|define
name|CCK_OFDM_GAIN_DELTA
value|15
end_define

begin_enum
enum|enum
name|GAIN_PARAMS
block|{
name|GP_TXCLIP
block|,
name|GP_PD90
block|,
name|GP_PD84
block|,
name|GP_GSEL
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|GAIN_PARAMS_5112
block|{
name|GP_MIXGAIN_OVR
block|,
name|GP_PWD_138
block|,
name|GP_PWD_137
block|,
name|GP_PWD_136
block|,
name|GP_PWD_132
block|,
name|GP_PWD_131
block|,
name|GP_PWD_130
block|, }
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
name|_gainOptStep
block|{
name|int16_t
name|paramVal
index|[
name|NUM_CORNER_FIX_BITS_5112
index|]
decl_stmt|;
name|int32_t
name|stepGain
decl_stmt|;
name|int8_t
name|stepName
index|[
literal|16
index|]
decl_stmt|;
block|}
name|GAIN_OPTIMIZATION_STEP
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint32_t
name|numStepsInLadder
decl_stmt|;
name|uint32_t
name|defaultStepNum
decl_stmt|;
name|GAIN_OPTIMIZATION_STEP
name|optStep
index|[
literal|10
index|]
decl_stmt|;
block|}
name|GAIN_OPTIMIZATION_LADDER
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint32_t
name|currStepNum
decl_stmt|;
name|uint32_t
name|currGain
decl_stmt|;
name|uint32_t
name|targetGain
decl_stmt|;
name|uint32_t
name|loTrig
decl_stmt|;
name|uint32_t
name|hiTrig
decl_stmt|;
name|uint32_t
name|active
decl_stmt|;
specifier|const
name|GAIN_OPTIMIZATION_STEP
modifier|*
name|currStep
decl_stmt|;
block|}
name|GAIN_VALUES
typedef|;
end_typedef

begin_comment
comment|/* RF HAL structures */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|RfHalFuncs
block|{
name|void
modifier|*
name|priv
decl_stmt|;
comment|/* private state */
name|void
function_decl|(
modifier|*
name|rfDetach
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|writeRegs
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|modeIndex
parameter_list|,
name|u_int
name|freqIndex
parameter_list|,
name|int
name|regWrites
parameter_list|)
function_decl|;
name|uint32_t
modifier|*
function_decl|(
modifier|*
name|getRfBank
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|bank
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|setChannel
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|setRfRegs
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|,
name|uint16_t
name|modesIndex
parameter_list|,
name|uint16_t
modifier|*
name|rfXpdGain
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|setPowerTable
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int16_t
modifier|*
name|minPower
parameter_list|,
name|int16_t
modifier|*
name|maxPower
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|,
name|uint16_t
modifier|*
name|rfXpdGain
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|getChannelMaxMinPower
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|,
name|int16_t
modifier|*
name|maxPow
parameter_list|,
name|int16_t
modifier|*
name|minPow
parameter_list|)
function_decl|;
name|int16_t
function_decl|(
modifier|*
name|getNfAdjust
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|HAL_CHANNEL_INTERNAL
modifier|*
parameter_list|)
function_decl|;
block|}
name|RF_HAL_FUNCS
typedef|;
end_typedef

begin_struct
struct|struct
name|ar5212AniParams
block|{
name|int
name|maxNoiseImmunityLevel
decl_stmt|;
comment|/* [0..4] */
name|int
name|totalSizeDesired
index|[
literal|5
index|]
decl_stmt|;
name|int
name|coarseHigh
index|[
literal|5
index|]
decl_stmt|;
name|int
name|coarseLow
index|[
literal|5
index|]
decl_stmt|;
name|int
name|firpwr
index|[
literal|5
index|]
decl_stmt|;
name|int
name|maxSpurImmunityLevel
decl_stmt|;
comment|/* [0..7] */
name|int
name|cycPwrThr1
index|[
literal|8
index|]
decl_stmt|;
name|int
name|maxFirstepLevel
decl_stmt|;
comment|/* [0..2] */
name|int
name|firstep
index|[
literal|3
index|]
decl_stmt|;
name|uint32_t
name|ofdmTrigHigh
decl_stmt|;
name|uint32_t
name|ofdmTrigLow
decl_stmt|;
name|uint32_t
name|cckTrigHigh
decl_stmt|;
name|uint32_t
name|cckTrigLow
decl_stmt|;
name|int32_t
name|rssiThrLow
decl_stmt|;
name|uint32_t
name|rssiThrHigh
decl_stmt|;
name|int
name|period
decl_stmt|;
comment|/* update listen period */
comment|/* NB: intentionally ordered so data exported to user space is first */
name|uint32_t
name|ofdmPhyErrBase
decl_stmt|;
comment|/* Base value for ofdm err counter */
name|uint32_t
name|cckPhyErrBase
decl_stmt|;
comment|/* Base value for cck err counters */
block|}
struct|;
end_struct

begin_comment
comment|/*  * Per-channel ANI state private to the driver.  */
end_comment

begin_struct
struct|struct
name|ar5212AniState
block|{
name|uint8_t
name|noiseImmunityLevel
decl_stmt|;
name|uint8_t
name|spurImmunityLevel
decl_stmt|;
name|uint8_t
name|firstepLevel
decl_stmt|;
name|uint8_t
name|ofdmWeakSigDetectOff
decl_stmt|;
name|uint8_t
name|cckWeakSigThreshold
decl_stmt|;
name|uint32_t
name|listenTime
decl_stmt|;
comment|/* NB: intentionally ordered so data exported to user space is first */
name|uint32_t
name|txFrameCount
decl_stmt|;
comment|/* Last txFrameCount */
name|uint32_t
name|rxFrameCount
decl_stmt|;
comment|/* Last rx Frame count */
name|uint32_t
name|cycleCount
decl_stmt|;
comment|/* Last cycleCount 					   (to detect wrap-around) */
name|uint32_t
name|ofdmPhyErrCount
decl_stmt|;
comment|/* OFDM err count since last reset */
name|uint32_t
name|cckPhyErrCount
decl_stmt|;
comment|/* CCK err count since last reset */
specifier|const
name|struct
name|ar5212AniParams
modifier|*
name|params
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|HAL_ANI_ENA
value|0x00000001
end_define

begin_comment
comment|/* ANI operation enabled */
end_comment

begin_define
define|#
directive|define
name|HAL_RSSI_ANI_ENA
value|0x00000002
end_define

begin_comment
comment|/* rssi-based processing ena'd*/
end_comment

begin_struct
struct|struct
name|ar5212Stats
block|{
name|uint32_t
name|ast_ani_niup
decl_stmt|;
comment|/* ANI increased noise immunity */
name|uint32_t
name|ast_ani_nidown
decl_stmt|;
comment|/* ANI decreased noise immunity */
name|uint32_t
name|ast_ani_spurup
decl_stmt|;
comment|/* ANI increased spur immunity */
name|uint32_t
name|ast_ani_spurdown
decl_stmt|;
comment|/* ANI descreased spur immunity */
name|uint32_t
name|ast_ani_ofdmon
decl_stmt|;
comment|/* ANI OFDM weak signal detect on */
name|uint32_t
name|ast_ani_ofdmoff
decl_stmt|;
comment|/* ANI OFDM weak signal detect off */
name|uint32_t
name|ast_ani_cckhigh
decl_stmt|;
comment|/* ANI CCK weak signal threshold high */
name|uint32_t
name|ast_ani_ccklow
decl_stmt|;
comment|/* ANI CCK weak signal threshold low */
name|uint32_t
name|ast_ani_stepup
decl_stmt|;
comment|/* ANI increased first step level */
name|uint32_t
name|ast_ani_stepdown
decl_stmt|;
comment|/* ANI decreased first step level */
name|uint32_t
name|ast_ani_ofdmerrs
decl_stmt|;
comment|/* ANI cumulative ofdm phy err count */
name|uint32_t
name|ast_ani_cckerrs
decl_stmt|;
comment|/* ANI cumulative cck phy err count */
name|uint32_t
name|ast_ani_reset
decl_stmt|;
comment|/* ANI parameters zero'd for non-STA */
name|uint32_t
name|ast_ani_lzero
decl_stmt|;
comment|/* ANI listen time forced to zero */
name|uint32_t
name|ast_ani_lneg
decl_stmt|;
comment|/* ANI listen time calculated< 0 */
name|HAL_MIB_STATS
name|ast_mibstats
decl_stmt|;
comment|/* MIB counter stats */
name|HAL_NODE_STATS
name|ast_nodestats
decl_stmt|;
comment|/* Latest rssi stats from driver */
block|}
struct|;
end_struct

begin_comment
comment|/*  * NF Cal history buffer  */
end_comment

begin_define
define|#
directive|define
name|AR5212_CCA_MAX_GOOD_VALUE
value|-95
end_define

begin_define
define|#
directive|define
name|AR5212_CCA_MAX_HIGH_VALUE
value|-62
end_define

begin_define
define|#
directive|define
name|AR5212_CCA_MIN_BAD_VALUE
value|-125
end_define

begin_define
define|#
directive|define
name|AR512_NF_CAL_HIST_MAX
value|5
end_define

begin_struct
struct|struct
name|ar5212NfCalHist
block|{
name|int16_t
name|nfCalBuffer
index|[
name|AR512_NF_CAL_HIST_MAX
index|]
decl_stmt|;
name|int16_t
name|privNF
decl_stmt|;
name|uint8_t
name|currIndex
decl_stmt|;
name|uint8_t
name|first_run
decl_stmt|;
name|uint8_t
name|invalidNFcount
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ath_hal_5212
block|{
name|struct
name|ath_hal_private
name|ah_priv
decl_stmt|;
comment|/* base class */
comment|/* 	 * Per-chip common Initialization data. 	 * NB: RF backends have their own ini data. 	 */
name|HAL_INI_ARRAY
name|ah_ini_modes
decl_stmt|;
name|HAL_INI_ARRAY
name|ah_ini_common
decl_stmt|;
name|GAIN_VALUES
name|ah_gainValues
decl_stmt|;
name|uint8_t
name|ah_macaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|ah_bssid
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|ah_bssidmask
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
comment|/* 	 * Runtime state. 	 */
name|uint32_t
name|ah_maskReg
decl_stmt|;
comment|/* copy of AR_IMR */
name|struct
name|ar5212Stats
name|ah_stats
decl_stmt|;
comment|/* various statistics */
name|RF_HAL_FUNCS
modifier|*
name|ah_rfHal
decl_stmt|;
name|uint32_t
name|ah_txDescMask
decl_stmt|;
comment|/* mask for TXDESC */
name|uint32_t
name|ah_txOkInterruptMask
decl_stmt|;
name|uint32_t
name|ah_txErrInterruptMask
decl_stmt|;
name|uint32_t
name|ah_txDescInterruptMask
decl_stmt|;
name|uint32_t
name|ah_txEolInterruptMask
decl_stmt|;
name|uint32_t
name|ah_txUrnInterruptMask
decl_stmt|;
name|HAL_TX_QUEUE_INFO
name|ah_txq
index|[
name|HAL_NUM_TX_QUEUES
index|]
decl_stmt|;
name|uint32_t
name|ah_intrTxqs
decl_stmt|;
comment|/* tx q interrupt state */
comment|/* decomp mask array */
name|uint8_t
name|ah_decompMask
index|[
name|HAL_DECOMP_MASK_SIZE
index|]
decl_stmt|;
name|HAL_POWER_MODE
name|ah_powerMode
decl_stmt|;
name|HAL_ANT_SETTING
name|ah_antControl
decl_stmt|;
comment|/* antenna setting */
name|HAL_BOOL
name|ah_diversity
decl_stmt|;
comment|/* fast diversity setting */
enum|enum
block|{
name|IQ_CAL_INACTIVE
block|,
name|IQ_CAL_RUNNING
block|,
name|IQ_CAL_DONE
block|}
name|ah_bIQCalibration
enum|;
comment|/* IQ calibrate state */
name|HAL_RFGAIN
name|ah_rfgainState
decl_stmt|;
comment|/* RF gain calibrartion state */
name|uint32_t
name|ah_tx6PowerInHalfDbm
decl_stmt|;
comment|/* power output for 6Mb tx */
name|uint32_t
name|ah_staId1Defaults
decl_stmt|;
comment|/* STA_ID1 default settings */
name|uint32_t
name|ah_miscMode
decl_stmt|;
comment|/* MISC_MODE settings */
name|uint32_t
name|ah_rssiThr
decl_stmt|;
comment|/* RSSI_THR settings */
name|HAL_BOOL
name|ah_cwCalRequire
decl_stmt|;
comment|/* for ap51 */
name|HAL_BOOL
name|ah_tpcEnabled
decl_stmt|;
comment|/* per-packet tpc enabled */
name|HAL_BOOL
name|ah_phyPowerOn
decl_stmt|;
comment|/* PHY power state */
name|HAL_BOOL
name|ah_isHb63
decl_stmt|;
comment|/* cached HB63 check */
name|uint32_t
name|ah_macTPC
decl_stmt|;
comment|/* tpc register */
name|uint32_t
name|ah_beaconInterval
decl_stmt|;
comment|/* XXX */
enum|enum
block|{
name|AUTO_32KHZ
block|,
comment|/* use it if 32kHz crystal present */
name|USE_32KHZ
block|,
comment|/* do it regardless */
name|DONT_USE_32KHZ
block|,
comment|/* don't use it regardless */
block|}
name|ah_enable32kHzClock
enum|;
comment|/* whether to sleep at 32kHz */
name|uint32_t
name|ah_ofdmTxPower
decl_stmt|;
name|int16_t
name|ah_txPowerIndexOffset
decl_stmt|;
comment|/* 	 * Noise floor cal histogram support. 	 */
name|struct
name|ar5212NfCalHist
name|ah_nfCalHist
decl_stmt|;
name|u_int
name|ah_slottime
decl_stmt|;
comment|/* user-specified slot time */
name|u_int
name|ah_acktimeout
decl_stmt|;
comment|/* user-specified ack timeout */
name|u_int
name|ah_ctstimeout
decl_stmt|;
comment|/* user-specified cts timeout */
name|u_int
name|ah_sifstime
decl_stmt|;
comment|/* user-specified sifs time */
comment|/* 	 * RF Silent handling; setup according to the EEPROM. 	 */
name|uint32_t
name|ah_gpioSelect
decl_stmt|;
comment|/* GPIO pin to use */
name|uint32_t
name|ah_polarity
decl_stmt|;
comment|/* polarity to disable RF */
name|uint32_t
name|ah_gpioBit
decl_stmt|;
comment|/* after init, prev value */
comment|/* 	 * ANI support. 	 */
name|uint32_t
name|ah_procPhyErr
decl_stmt|;
comment|/* Process Phy errs */
name|HAL_BOOL
name|ah_hasHwPhyCounters
decl_stmt|;
comment|/* Hardware has phy counters */
name|struct
name|ar5212AniParams
name|ah_aniParams24
decl_stmt|;
comment|/* 2.4GHz parameters */
name|struct
name|ar5212AniParams
name|ah_aniParams5
decl_stmt|;
comment|/* 5GHz parameters */
name|struct
name|ar5212AniState
modifier|*
name|ah_curani
decl_stmt|;
comment|/* cached last reference */
name|struct
name|ar5212AniState
name|ah_ani
index|[
name|AH_MAXCHAN
index|]
decl_stmt|;
comment|/* per-channel state */
comment|/* AR5416 uses some of the AR5212 ANI code; these are the ANI methods */
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_aniControl
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_ANI_CMD
name|cmd
parameter_list|,
name|int
name|param
parameter_list|)
function_decl|;
comment|/* 	 * Transmit power state.  Note these are maintained 	 * here so they can be retrieved by diagnostic tools. 	 */
name|uint16_t
modifier|*
name|ah_pcdacTable
decl_stmt|;
name|u_int
name|ah_pcdacTableSize
decl_stmt|;
name|uint16_t
name|ah_ratesArray
index|[
literal|37
index|]
decl_stmt|;
name|uint8_t
name|ah_txTrigLev
decl_stmt|;
comment|/* current Tx trigger level */
name|uint8_t
name|ah_maxTxTrigLev
decl_stmt|;
comment|/* max tx trigger level */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|AH5212
parameter_list|(
name|_ah
parameter_list|)
value|((struct ath_hal_5212 *)(_ah))
end_define

begin_comment
comment|/*  * IS_XXXX macros test the MAC version  * IS_RADXXX macros test the radio/RF version (matching both 2G-only and 2/5G)  *  * Some single chip radios have equivalent radio/RF (e.g. 5112)  * for those use IS_RADXXX_ANY macros.  */
end_comment

begin_define
define|#
directive|define
name|IS_2317
parameter_list|(
name|ah
parameter_list|)
define|\
value|((AH_PRIVATE(ah)->ah_devid == AR5212_AR2317_REV1) || \ 	 (AH_PRIVATE(ah)->ah_devid == AR5212_AR2317_REV2))
end_define

begin_define
define|#
directive|define
name|IS_2316
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_PRIVATE(ah)->ah_macVersion == AR_SREV_2415)
end_define

begin_define
define|#
directive|define
name|IS_2413
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_PRIVATE(ah)->ah_macVersion == AR_SREV_2413 || IS_2316(ah))
end_define

begin_define
define|#
directive|define
name|IS_5424
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_PRIVATE(ah)->ah_macVersion == AR_SREV_5424 || \ 	(AH_PRIVATE(ah)->ah_macVersion == AR_SREV_5413&& \ 	  AH_PRIVATE(ah)->ah_macRev<= AR_SREV_D2PLUS_MS))
end_define

begin_define
define|#
directive|define
name|IS_5413
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_PRIVATE(ah)->ah_macVersion == AR_SREV_5413 || IS_5424(ah))
end_define

begin_define
define|#
directive|define
name|IS_2425
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_PRIVATE(ah)->ah_macVersion == AR_SREV_2425)
end_define

begin_define
define|#
directive|define
name|IS_2417
parameter_list|(
name|ah
parameter_list|)
define|\
value|((AH_PRIVATE(ah)->ah_macVersion) == AR_SREV_2417)
end_define

begin_define
define|#
directive|define
name|IS_HB63
parameter_list|(
name|ah
parameter_list|)
value|(AH5212(ah)->ah_isHb63 == AH_TRUE)
end_define

begin_define
define|#
directive|define
name|AH_RADIO_MAJOR
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_PRIVATE(ah)->ah_analog5GhzRev& AR_RADIO_SREV_MAJOR)
end_define

begin_define
define|#
directive|define
name|AH_RADIO_MINOR
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_PRIVATE(ah)->ah_analog5GhzRev& AR_RADIO_SREV_MINOR)
end_define

begin_define
define|#
directive|define
name|IS_RAD5111
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_RADIO_MAJOR(ah) == AR_RAD5111_SREV_MAJOR || \ 	 AH_RADIO_MAJOR(ah) == AR_RAD2111_SREV_MAJOR)
end_define

begin_define
define|#
directive|define
name|IS_RAD5112
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_RADIO_MAJOR(ah) == AR_RAD5112_SREV_MAJOR || \ 	 AH_RADIO_MAJOR(ah) == AR_RAD2112_SREV_MAJOR)
end_define

begin_comment
comment|/* NB: does not include 5413 as Atheros' IS_5112 macro does */
end_comment

begin_define
define|#
directive|define
name|IS_RAD5112_ANY
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AR_RAD5112_SREV_MAJOR<= AH_RADIO_MAJOR(ah)&& \ 	 AH_RADIO_MAJOR(ah)<= AR_RAD2413_SREV_MAJOR)
end_define

begin_define
define|#
directive|define
name|IS_RAD5112_REV1
parameter_list|(
name|ah
parameter_list|)
define|\
value|(IS_RAD5112(ah)&& \ 	 AH_RADIO_MINOR(ah)< (AR_RAD5112_SREV_2_0& AR_RADIO_SREV_MINOR))
end_define

begin_define
define|#
directive|define
name|IS_RADX112_REV2
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_PRIVATE(ah)->ah_analog5GhzRev == AR_RAD5112_SREV_2_0 || \ 	 AH_PRIVATE(ah)->ah_analog5GhzRev == AR_RAD2112_SREV_2_0 || \ 	 AH_PRIVATE(ah)->ah_analog5GhzRev == AR_RAD2112_SREV_2_1 || \ 	 AH_PRIVATE(ah)->ah_analog5GhzRev == AR_RAD5112_SREV_2_1)
end_define

begin_define
define|#
directive|define
name|ar5212RfDetach
parameter_list|(
name|ah
parameter_list|)
value|do {				\ 	if (AH5212(ah)->ah_rfHal != AH_NULL)		\ 		AH5212(ah)->ah_rfHal->rfDetach(ah);	\ } while (0)
end_define

begin_define
define|#
directive|define
name|ar5212GetRfBank
parameter_list|(
name|ah
parameter_list|,
name|b
parameter_list|)
define|\
value|AH5212(ah)->ah_rfHal->getRfBank(ah, b)
end_define

begin_comment
comment|/*  * Hack macros for Nala/San: 11b is handled  * using 11g; flip the channel flags to accomplish this.  */
end_comment

begin_define
define|#
directive|define
name|SAVE_CCK
parameter_list|(
name|_ah
parameter_list|,
name|_chan
parameter_list|,
name|_flag
parameter_list|)
value|do {			\ 	if ((IS_2425(_ah) || IS_2417(_ah))&&			\ 	    (((_chan)->ic_flags)& IEEE80211_CHAN_CCK)) {	\ 		(_chan)->ic_flags&= ~IEEE80211_CHAN_CCK;	\ 		(_chan)->ic_flags |= IEEE80211_CHAN_DYN;	\ 		(_flag) = AH_TRUE;				\ 	} else							\ 		(_flag) = AH_FALSE;				\ } while (0)
end_define

begin_define
define|#
directive|define
name|RESTORE_CCK
parameter_list|(
name|_ah
parameter_list|,
name|_chan
parameter_list|,
name|_flag
parameter_list|)
value|do {                     \ 	if ((_flag)&& (IS_2425(_ah) || IS_2417(_ah))) {	\ 		(_chan)->ic_flags&= ~IEEE80211_CHAN_DYN;	\ 		(_chan)->ic_flags |= IEEE80211_CHAN_CCK;	\ 	}							\ } while (0)
end_define

begin_struct_decl
struct_decl|struct
name|ath_hal
struct_decl|;
end_struct_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212GetRadioRev
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212InitState
parameter_list|(
name|struct
name|ath_hal_5212
modifier|*
parameter_list|,
name|uint16_t
name|devid
parameter_list|,
name|HAL_SOFTC
parameter_list|,
name|HAL_BUS_TAG
name|st
parameter_list|,
name|HAL_BUS_HANDLE
name|sh
parameter_list|,
name|HAL_STATUS
modifier|*
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212Detach
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212ChipTest
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GetChannelEdges
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint16_t
name|flags
parameter_list|,
name|uint16_t
modifier|*
name|low
parameter_list|,
name|uint16_t
modifier|*
name|high
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212FillCapabilityInfo
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetBeaconTimers
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|HAL_BEACON_TIMERS
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212BeaconInit
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint32_t
name|next_beacon
parameter_list|,
name|uint32_t
name|beacon_period
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212ResetStaBeaconTimers
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetStaBeaconTimers
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|HAL_BEACON_STATE
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint64_t
name|ar5212GetNextTBTT
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212IsInterruptPending
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GetPendingInterrupts
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_INT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_INT
name|ar5212GetInterrupts
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_INT
name|ar5212SetInterrupts
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_INT
name|ints
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212GetKeyCacheSize
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212IsKeyCacheEntryValid
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|uint16_t
name|entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212ResetKeyCacheEntry
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint16_t
name|entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetKeyCacheEntryMac
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|uint16_t
name|entry
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetKeyCacheEntry
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint16_t
name|entry
parameter_list|,
specifier|const
name|HAL_KEYVAL
modifier|*
name|k
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|mac
parameter_list|,
name|int
name|xorKey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212GetMacAddress
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint8_t
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetMacAddress
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212GetBssIdMask
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint8_t
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetBssIdMask
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212EepromRead
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|off
parameter_list|,
name|uint16_t
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212EepromWrite
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|off
parameter_list|,
name|uint16_t
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetRegulatoryDomain
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint16_t
name|regDomain
parameter_list|,
name|HAL_STATUS
modifier|*
name|stats
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar5212GetWirelessModes
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212EnableRfKill
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GpioCfgOutput
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|uint32_t
name|gpio
parameter_list|,
name|HAL_GPIO_MUX_TYPE
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GpioCfgInput
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|uint32_t
name|gpio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GpioSet
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|uint32_t
name|gpio
parameter_list|,
name|uint32_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212GpioGet
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint32_t
name|gpio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212GpioSetIntr
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
parameter_list|,
name|uint32_t
name|ilevel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetLedState
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_LED_STATE
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212WriteAssocid
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|bssid
parameter_list|,
name|uint16_t
name|assocId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212GetTsf32
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint64_t
name|ar5212GetTsf64
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetTsf64
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint64_t
name|tsf64
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212ResetTsf
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetBasicRate
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_RATE_SET
modifier|*
name|pSet
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212GetRandomSeed
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212DetectCardPresent
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212EnableMibCounters
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212DisableMibCounters
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212UpdateMibCounters
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_MIB_STATS
modifier|*
name|stats
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212IsJapanChannelSpreadSupported
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212GetCurRssi
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar5212GetDefAntenna
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetDefAntenna
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|antenna
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_ANT_SETTING
name|ar5212GetAntennaSwitch
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetAntennaSwitch
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_ANT_SETTING
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212IsSleepAfterBeaconBroken
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetSifsTime
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar5212GetSifsTime
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetSlotTime
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar5212GetSlotTime
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetAckTimeout
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar5212GetAckTimeout
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetAckCTSRate
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar5212GetAckCTSRate
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetCTSTimeout
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar5212GetCTSTimeout
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetDecompMask
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ar5212SetCoverageClass
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|uint8_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetPCUConfig
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212Use32KHzclock
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_OPMODE
name|opmode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetupClock
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_OPMODE
name|opmode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212RestoreClock
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_OPMODE
name|opmode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int16_t
name|ar5212GetNfAdjust
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|HAL_CHANNEL_INTERNAL
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetCompRegs
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar5212GetCapability
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CAPABILITY_TYPE
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetCapability
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CAPABILITY_TYPE
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|HAL_STATUS
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GetDiagState
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|request
parameter_list|,
specifier|const
name|void
modifier|*
name|args
parameter_list|,
name|uint32_t
name|argsize
parameter_list|,
name|void
modifier|*
modifier|*
name|result
parameter_list|,
name|uint32_t
modifier|*
name|resultsize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar5212SetQuiet
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint32_t
name|period
parameter_list|,
name|uint32_t
name|duration
parameter_list|,
name|uint32_t
name|nextStart
parameter_list|,
name|HAL_QUIET_FLAG
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetPowerMode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_POWER_MODE
name|mode
parameter_list|,
name|int
name|setChip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_POWER_MODE
name|ar5212GetPowerMode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GetPowerStatus
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212GetRxDP
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ath
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetRxDP
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint32_t
name|rxdp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212EnableReceive
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212StopDmaReceive
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212StartPcuReceive
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212StopPcuReceive
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetMulticastFilter
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint32_t
name|filter0
parameter_list|,
name|uint32_t
name|filter1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212ClrMulticastFilterIndex
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|uint32_t
name|ix
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetMulticastFilterIndex
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|uint32_t
name|ix
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212GetRxFilter
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetRxFilter
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint32_t
name|bits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetupRxDesc
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|,
name|uint32_t
name|size
parameter_list|,
name|u_int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar5212ProcRxDesc
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|struct
name|ath_rx_status
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212Reset
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_OPMODE
name|opmode
parameter_list|,
name|struct
name|ieee80211_channel
modifier|*
name|chan
parameter_list|,
name|HAL_BOOL
name|bChannelChange
parameter_list|,
name|HAL_STATUS
modifier|*
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetChannel
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetOperatingMode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|opmode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212PhyDisable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212Disable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212ChipReset
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212PerCalibration
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ieee80211_channel
modifier|*
name|chan
parameter_list|,
name|HAL_BOOL
modifier|*
name|isIQdone
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212PerCalibrationN
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ieee80211_channel
modifier|*
name|chan
parameter_list|,
name|u_int
name|chainMask
parameter_list|,
name|HAL_BOOL
name|longCal
parameter_list|,
name|HAL_BOOL
modifier|*
name|isCalDone
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212ResetCalValid
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int16_t
name|ar5212GetNoiseFloor
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212InitNfCalHistBuffer
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int16_t
name|ar5212GetNfHistMid
parameter_list|(
specifier|const
name|int16_t
name|calData
index|[]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212SetSpurMitigation
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetAntennaSwitchInternal
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_ANT_SETTING
name|settings
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetTxPowerLimit
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint32_t
name|limit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GetChipPowerLimits
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ieee80211_channel
modifier|*
name|chan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212InitializeGainValues
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_RFGAIN
name|ar5212GetRfgain
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212RequestRfgain
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212UpdateTxTrigLevel
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_BOOL
name|IncTrigLevel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetTxQueueProps
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|q
parameter_list|,
specifier|const
name|HAL_TXQ_INFO
modifier|*
name|qInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GetTxQueueProps
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|q
parameter_list|,
name|HAL_TXQ_INFO
modifier|*
name|qInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ar5212SetupTxQueue
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_TX_QUEUE
name|type
parameter_list|,
specifier|const
name|HAL_TXQ_INFO
modifier|*
name|qInfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212ReleaseTxQueue
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212ResetTxQueue
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212GetTxDP
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetTxDP
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|q
parameter_list|,
name|uint32_t
name|txdp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212StartTxDma
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|ar5212NumTxPending
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212StopTxDma
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|q
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetupTxDesc
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ath_desc
modifier|*
name|ds
parameter_list|,
name|u_int
name|pktLen
parameter_list|,
name|u_int
name|hdrLen
parameter_list|,
name|HAL_PKT_TYPE
name|type
parameter_list|,
name|u_int
name|txPower
parameter_list|,
name|u_int
name|txRate0
parameter_list|,
name|u_int
name|txTries0
parameter_list|,
name|u_int
name|keyIx
parameter_list|,
name|u_int
name|antMode
parameter_list|,
name|u_int
name|flags
parameter_list|,
name|u_int
name|rtsctsRate
parameter_list|,
name|u_int
name|rtsctsDuration
parameter_list|,
name|u_int
name|compicvLen
parameter_list|,
name|u_int
name|compivLen
parameter_list|,
name|u_int
name|comp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212SetupXTxDesc
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|,
name|u_int
name|txRate1
parameter_list|,
name|u_int
name|txRetries1
parameter_list|,
name|u_int
name|txRate2
parameter_list|,
name|u_int
name|txRetries2
parameter_list|,
name|u_int
name|txRate3
parameter_list|,
name|u_int
name|txRetries3
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212FillTxDesc
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ath_desc
modifier|*
name|ds
parameter_list|,
name|u_int
name|segLen
parameter_list|,
name|HAL_BOOL
name|firstSeg
parameter_list|,
name|HAL_BOOL
name|lastSeg
parameter_list|,
specifier|const
name|struct
name|ath_desc
modifier|*
name|ds0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar5212ProcTxDesc
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|,
name|struct
name|ath_tx_status
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212GetTxIntrQueue
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|uint32_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212IntrReqTxDesc
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212GetTxCompletionRates
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|struct
name|ath_desc
modifier|*
name|ds0
parameter_list|,
name|int
modifier|*
name|rates
parameter_list|,
name|int
modifier|*
name|tries
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|HAL_RATE_TABLE
modifier|*
name|ar5212GetRateTable
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212AniAttach
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|struct
name|ar5212AniParams
modifier|*
parameter_list|,
specifier|const
name|struct
name|ar5212AniParams
modifier|*
parameter_list|,
name|HAL_BOOL
name|ena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212AniDetach
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|ar5212AniState
modifier|*
name|ar5212AniGetCurrentState
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|ar5212Stats
modifier|*
name|ar5212AniGetCurrentStats
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212AniControl
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_ANI_CMD
name|cmd
parameter_list|,
name|int
name|param
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212AniSetParams
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|struct
name|ar5212AniParams
modifier|*
parameter_list|,
specifier|const
name|struct
name|ar5212AniParams
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_struct_decl
struct_decl|struct
name|ath_rx_status
struct_decl|;
end_struct_decl

begin_function_decl
specifier|extern
name|void
name|ar5212AniPhyErrReport
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|struct
name|ath_rx_status
modifier|*
name|rs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212ProcessMibIntr
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|HAL_NODE_STATS
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212RxMonitor
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|HAL_NODE_STATS
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212AniPoll
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212AniReset
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_channel
modifier|*
parameter_list|,
name|HAL_OPMODE
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212IsNFCalInProgress
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212WaitNFCalComplete
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212EnableDfs
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_PHYERR_PARAM
modifier|*
name|pe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar5212GetDfsThresh
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_PHYERR_PARAM
modifier|*
name|pe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212ProcessRadarEvent
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ath_rx_status
modifier|*
name|rxs
parameter_list|,
name|uint64_t
name|fulltsf
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|HAL_DFS_EVENT
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar5212IsFastClockEnabled
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ATH_AR5212_H_ */
end_comment

end_unit

