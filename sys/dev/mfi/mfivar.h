begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2006 IronPort Systems  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2007 LSI Corp.  * Copyright (c) 2007 Rajesh Prabhakaran.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MFIVAR_H
end_ifndef

begin_define
define|#
directive|define
name|_MFIVAR_H
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/sx.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/taskqueue.h>
end_include

begin_comment
comment|/*  * SCSI structures and definitions are used from here, but no linking  * requirements are made to CAM.  */
end_comment

begin_include
include|#
directive|include
file|<cam/scsi/scsi_all.h>
end_include

begin_struct
struct|struct
name|mfi_hwcomms
block|{
name|uint32_t
name|hw_pi
decl_stmt|;
name|uint32_t
name|hw_ci
decl_stmt|;
name|uint32_t
name|hw_reply_q
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MEGASAS_MAX_NAME
value|32
end_define

begin_define
define|#
directive|define
name|MEGASAS_VERSION
value|"4.23"
end_define

begin_struct_decl
struct_decl|struct
name|mfi_softc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|disk
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ccb_hdr
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|mfi_command
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mfi_command
argument_list|)
name|cm_link
expr_stmt|;
name|time_t
name|cm_timestamp
decl_stmt|;
name|struct
name|mfi_softc
modifier|*
name|cm_sc
decl_stmt|;
name|union
name|mfi_frame
modifier|*
name|cm_frame
decl_stmt|;
name|bus_addr_t
name|cm_frame_busaddr
decl_stmt|;
name|struct
name|mfi_sense
modifier|*
name|cm_sense
decl_stmt|;
name|bus_addr_t
name|cm_sense_busaddr
decl_stmt|;
name|bus_dmamap_t
name|cm_dmamap
decl_stmt|;
name|union
name|mfi_sgl
modifier|*
name|cm_sg
decl_stmt|;
name|void
modifier|*
name|cm_data
decl_stmt|;
name|int
name|cm_len
decl_stmt|;
name|int
name|cm_stp_len
decl_stmt|;
name|int
name|cm_total_frame_size
decl_stmt|;
name|int
name|cm_extra_frames
decl_stmt|;
name|int
name|cm_flags
decl_stmt|;
define|#
directive|define
name|MFI_CMD_MAPPED
value|(1<<0)
define|#
directive|define
name|MFI_CMD_DATAIN
value|(1<<1)
define|#
directive|define
name|MFI_CMD_DATAOUT
value|(1<<2)
define|#
directive|define
name|MFI_CMD_COMPLETED
value|(1<<3)
define|#
directive|define
name|MFI_CMD_POLLED
value|(1<<4)
define|#
directive|define
name|MFI_ON_MFIQ_FREE
value|(1<<5)
define|#
directive|define
name|MFI_ON_MFIQ_READY
value|(1<<6)
define|#
directive|define
name|MFI_ON_MFIQ_BUSY
value|(1<<7)
define|#
directive|define
name|MFI_ON_MFIQ_MASK
value|((1<<5)|(1<<6)|(1<<7))
name|int
name|cm_aen_abort
decl_stmt|;
name|uint8_t
name|retry_for_fw_reset
decl_stmt|;
name|void
function_decl|(
modifier|*
name|cm_complete
function_decl|)
parameter_list|(
name|struct
name|mfi_command
modifier|*
name|cm
parameter_list|)
function_decl|;
name|void
modifier|*
name|cm_private
decl_stmt|;
name|int
name|cm_index
decl_stmt|;
name|int
name|cm_error
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mfi_disk
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mfi_disk
argument_list|)
name|ld_link
expr_stmt|;
name|device_t
name|ld_dev
decl_stmt|;
name|int
name|ld_id
decl_stmt|;
name|int
name|ld_unit
decl_stmt|;
name|struct
name|mfi_softc
modifier|*
name|ld_controller
decl_stmt|;
name|struct
name|mfi_ld_info
modifier|*
name|ld_info
decl_stmt|;
name|struct
name|disk
modifier|*
name|ld_disk
decl_stmt|;
name|int
name|ld_flags
decl_stmt|;
define|#
directive|define
name|MFI_DISK_FLAGS_OPEN
value|0x01
define|#
directive|define
name|MFI_DISK_FLAGS_DISABLED
value|0x02
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mfi_system_pd
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mfi_system_pd
argument_list|)
name|pd_link
expr_stmt|;
name|device_t
name|pd_dev
decl_stmt|;
name|int
name|pd_id
decl_stmt|;
name|int
name|pd_unit
decl_stmt|;
name|struct
name|mfi_softc
modifier|*
name|pd_controller
decl_stmt|;
name|struct
name|mfi_pd_info
modifier|*
name|pd_info
decl_stmt|;
name|struct
name|disk
modifier|*
name|pd_disk
decl_stmt|;
name|int
name|pd_flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mfi_evt_queue_elm
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mfi_evt_queue_elm
argument_list|)
name|link
expr_stmt|;
name|struct
name|mfi_evt_detail
name|detail
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mfi_aen
block|{
name|TAILQ_ENTRY
argument_list|(
argument|mfi_aen
argument_list|)
name|aen_link
expr_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mfi_skinny_dma_info
block|{
name|bus_dma_tag_t
name|dmat
index|[
literal|514
index|]
decl_stmt|;
name|bus_dmamap_t
name|dmamap
index|[
literal|514
index|]
decl_stmt|;
name|uint32_t
name|mem
index|[
literal|514
index|]
decl_stmt|;
name|int
name|noofmaps
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|megasas_sge
block|{
name|bus_addr_t
name|phys_addr
decl_stmt|;
name|uint32_t
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|mfi_cmd_tbolt
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|mfi_softc
block|{
name|device_t
name|mfi_dev
decl_stmt|;
name|int
name|mfi_flags
decl_stmt|;
define|#
directive|define
name|MFI_FLAGS_SG64
value|(1<<0)
define|#
directive|define
name|MFI_FLAGS_QFRZN
value|(1<<1)
define|#
directive|define
name|MFI_FLAGS_OPEN
value|(1<<2)
define|#
directive|define
name|MFI_FLAGS_STOP
value|(1<<3)
define|#
directive|define
name|MFI_FLAGS_1064R
value|(1<<4)
define|#
directive|define
name|MFI_FLAGS_1078
value|(1<<5)
define|#
directive|define
name|MFI_FLAGS_GEN2
value|(1<<6)
define|#
directive|define
name|MFI_FLAGS_SKINNY
value|(1<<7)
define|#
directive|define
name|MFI_FLAGS_TBOLT
value|(1<<8)
comment|// Start: LSIP200113393
name|bus_dma_tag_t
name|verbuf_h_dmat
decl_stmt|;
name|bus_dmamap_t
name|verbuf_h_dmamap
decl_stmt|;
name|uint32_t
name|verbuf_h_busaddr
decl_stmt|;
name|uint32_t
modifier|*
name|verbuf
decl_stmt|;
name|void
modifier|*
name|kbuff_arr
index|[
name|MAX_IOCTL_SGE
index|]
decl_stmt|;
name|bus_dma_tag_t
name|mfi_kbuff_arr_dmat
index|[
literal|2
index|]
decl_stmt|;
name|bus_dmamap_t
name|mfi_kbuff_arr_dmamap
index|[
literal|2
index|]
decl_stmt|;
name|bus_addr_t
name|mfi_kbuff_arr_busaddr
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|mfi_hwcomms
modifier|*
name|mfi_comms
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mfi_command
argument_list|)
name|mfi_free
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mfi_command
argument_list|)
name|mfi_ready
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument|BUSYQ
argument_list|,
argument|mfi_command
argument_list|)
name|mfi_busy
expr_stmt|;
name|struct
name|bio_queue_head
name|mfi_bioq
decl_stmt|;
name|struct
name|mfi_qstat
name|mfi_qstat
index|[
name|MFIQ_COUNT
index|]
decl_stmt|;
name|struct
name|resource
modifier|*
name|mfi_regs_resource
decl_stmt|;
name|bus_space_handle_t
name|mfi_bhandle
decl_stmt|;
name|bus_space_tag_t
name|mfi_btag
decl_stmt|;
name|int
name|mfi_regs_rid
decl_stmt|;
name|bus_dma_tag_t
name|mfi_parent_dmat
decl_stmt|;
name|bus_dma_tag_t
name|mfi_buffer_dmat
decl_stmt|;
name|bus_dma_tag_t
name|mfi_comms_dmat
decl_stmt|;
name|bus_dmamap_t
name|mfi_comms_dmamap
decl_stmt|;
name|bus_addr_t
name|mfi_comms_busaddr
decl_stmt|;
name|bus_dma_tag_t
name|mfi_frames_dmat
decl_stmt|;
name|bus_dmamap_t
name|mfi_frames_dmamap
decl_stmt|;
name|bus_addr_t
name|mfi_frames_busaddr
decl_stmt|;
name|union
name|mfi_frame
modifier|*
name|mfi_frames
decl_stmt|;
name|bus_dma_tag_t
name|mfi_tb_init_dmat
decl_stmt|;
name|bus_dmamap_t
name|mfi_tb_init_dmamap
decl_stmt|;
name|bus_addr_t
name|mfi_tb_init_busaddr
decl_stmt|;
name|bus_addr_t
name|mfi_tb_ioc_init_busaddr
decl_stmt|;
name|union
name|mfi_frame
modifier|*
name|mfi_tb_init
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mfi_evt_queue_elm
argument_list|)
name|mfi_evt_queue
expr_stmt|;
name|struct
name|task
name|mfi_evt_task
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mfi_aen
argument_list|)
name|mfi_aen_pids
expr_stmt|;
name|struct
name|mfi_command
modifier|*
name|mfi_aen_cm
decl_stmt|;
name|struct
name|mfi_command
modifier|*
name|mfi_skinny_cm
decl_stmt|;
name|uint32_t
name|mfi_aen_triggered
decl_stmt|;
name|uint32_t
name|mfi_poll_waiting
decl_stmt|;
name|uint32_t
name|mfi_boot_seq_num
decl_stmt|;
name|struct
name|selinfo
name|mfi_select
decl_stmt|;
name|int
name|mfi_delete_busy_volumes
decl_stmt|;
name|int
name|mfi_keep_deleted_volumes
decl_stmt|;
name|int
name|mfi_detaching
decl_stmt|;
name|bus_dma_tag_t
name|mfi_sense_dmat
decl_stmt|;
name|bus_dmamap_t
name|mfi_sense_dmamap
decl_stmt|;
name|uint32_t
name|mfi_sense_busaddr
decl_stmt|;
name|struct
name|mfi_sense
modifier|*
name|mfi_sense
decl_stmt|;
name|struct
name|resource
modifier|*
name|mfi_irq
decl_stmt|;
name|void
modifier|*
name|mfi_intr
decl_stmt|;
name|int
name|mfi_irq_rid
decl_stmt|;
name|struct
name|intr_config_hook
name|mfi_ich
decl_stmt|;
name|eventhandler_tag
name|eh
decl_stmt|;
comment|/* OCR flags */
name|uint8_t
name|adpreset
decl_stmt|;
name|uint8_t
name|issuepend_done
decl_stmt|;
name|uint8_t
name|disableOnlineCtrlReset
decl_stmt|;
name|uint32_t
name|mfiStatus
decl_stmt|;
name|uint32_t
name|last_seq_num
decl_stmt|;
name|uint32_t
specifier|volatile
name|hw_crit_error
decl_stmt|;
comment|/* 	 * Allocation for the command array.  Used as an indexable array to 	 * recover completed commands. 	 */
name|struct
name|mfi_command
modifier|*
name|mfi_commands
decl_stmt|;
comment|/* 	 * How many commands were actually allocated 	 */
name|int
name|mfi_total_cmds
decl_stmt|;
comment|/* 	 * How many commands the firmware can handle.  Also how big the reply 	 * queue is, minus 1. 	 */
name|int
name|mfi_max_fw_cmds
decl_stmt|;
comment|/* 	 * How many S/G elements we'll ever actually use 	 */
name|int
name|mfi_max_sge
decl_stmt|;
comment|/* 	 * How many bytes a compound frame is, including all of the extra frames 	 * that are used for S/G elements. 	 */
name|int
name|mfi_cmd_size
decl_stmt|;
comment|/* 	 * How large an S/G element is.  Used to calculate the number of single 	 * frames in a command. 	 */
name|int
name|mfi_sge_size
decl_stmt|;
comment|/* 	 * Max number of sectors that the firmware allows 	 */
name|uint32_t
name|mfi_max_io
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mfi_disk
argument_list|)
name|mfi_ld_tqh
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|mfi_system_pd
argument_list|)
name|mfi_syspd_tqh
expr_stmt|;
name|eventhandler_tag
name|mfi_eh
decl_stmt|;
name|struct
name|cdev
modifier|*
name|mfi_cdev
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|ccb_hdr
argument_list|)
name|mfi_cam_ccbq
expr_stmt|;
name|struct
name|mfi_command
modifier|*
function_decl|(
modifier|*
name|mfi_cam_start
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|struct
name|callout
name|mfi_watchdog_callout
decl_stmt|;
name|struct
name|mtx
name|mfi_io_lock
decl_stmt|;
name|struct
name|sx
name|mfi_config_lock
decl_stmt|;
comment|/* Controller type specific interfaces */
name|void
function_decl|(
modifier|*
name|mfi_enable_intr
function_decl|)
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|mfi_disable_intr
function_decl|)
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
name|int32_t
function_decl|(
modifier|*
name|mfi_read_fw_status
function_decl|)
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mfi_check_clear_intr
function_decl|)
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|mfi_issue_cmd
function_decl|)
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|,
name|bus_addr_t
name|bus_add
parameter_list|,
name|uint32_t
name|frame_cnt
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mfi_adp_reset
function_decl|)
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mfi_adp_check_reset
function_decl|)
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
comment|/* ThunderBolt */
name|uint32_t
name|mfi_tbolt
decl_stmt|;
name|uint32_t
name|MFA_enabled
decl_stmt|;
name|uint64_t
name|map_id
decl_stmt|;
name|struct
name|mfi_command
modifier|*
name|map_update_cmd
decl_stmt|;
comment|/* Single Reply structure size */
name|uint16_t
name|reply_size
decl_stmt|;
comment|/* Singler message size. */
name|uint16_t
name|raid_io_msg_size
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument|TB
argument_list|,
argument|mfi_cmd_tbolt
argument_list|)
name|mfi_cmd_tbolt_tqh
expr_stmt|;
comment|/* ThunderBolt base contiguous memory mapping. */
name|bus_dma_tag_t
name|mfi_tb_dmat
decl_stmt|;
name|bus_dmamap_t
name|mfi_tb_dmamap
decl_stmt|;
name|bus_addr_t
name|mfi_tb_busaddr
decl_stmt|;
comment|/* ThunderBolt Contiguous DMA memory Mapping */
name|uint8_t
modifier|*
name|request_message_pool
decl_stmt|;
name|uint8_t
modifier|*
name|request_message_pool_align
decl_stmt|;
name|uint8_t
modifier|*
name|request_desc_pool
decl_stmt|;
comment|//uint32_t			request_desc_busaddr;
name|bus_addr_t
name|request_msg_busaddr
decl_stmt|;
name|bus_addr_t
name|reply_frame_busaddr
decl_stmt|;
name|bus_addr_t
name|sg_frame_busaddr
decl_stmt|;
comment|/* ThunderBolt IOC Init Descriptor */
name|bus_dma_tag_t
name|mfi_tb_ioc_init_dmat
decl_stmt|;
name|bus_dmamap_t
name|mfi_tb_ioc_init_dmamap
decl_stmt|;
name|uint8_t
modifier|*
name|mfi_tb_ioc_init_desc
decl_stmt|;
name|struct
name|mfi_cmd_tbolt
modifier|*
modifier|*
name|mfi_cmd_pool_tbolt
decl_stmt|;
comment|/* Virtual address of reply Frame Pool */
name|struct
name|mfi_mpi2_reply_header
modifier|*
name|reply_frame_pool
decl_stmt|;
name|struct
name|mfi_mpi2_reply_header
modifier|*
name|reply_frame_pool_align
decl_stmt|;
comment|/* Last reply frame address */
name|uint8_t
modifier|*
name|reply_pool_limit
decl_stmt|;
name|uint16_t
name|last_reply_idx
decl_stmt|;
name|uint8_t
name|max_SGEs_in_chain_message
decl_stmt|;
name|uint8_t
name|max_SGEs_in_main_message
decl_stmt|;
name|uint8_t
name|chain_offset_value_for_main_message
decl_stmt|;
name|uint8_t
name|chain_offset_value_for_mpt_ptmsg
decl_stmt|;
block|}
struct|;
end_struct

begin_union
union|union
name|desc_value
block|{
name|uint64_t
name|word
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|low
decl_stmt|;
name|uint32_t
name|high
decl_stmt|;
block|}
name|u
struct|;
block|}
union|;
end_union

begin_comment
comment|// TODO find the right definition
end_comment

begin_define
define|#
directive|define
name|XXX_MFI_CMD_OP_INIT2
value|0x9
end_define

begin_comment
comment|/*  * Request descriptor types  */
end_comment

begin_define
define|#
directive|define
name|MFI_REQ_DESCRIPT_FLAGS_LD_IO
value|0x7
end_define

begin_define
define|#
directive|define
name|MFI_REQ_DESCRIPT_FLAGS_MFA
value|0x1
end_define

begin_define
define|#
directive|define
name|MFI_REQ_DESCRIPT_FLAGS_TYPE_SHIFT
value|0x1
end_define

begin_define
define|#
directive|define
name|MFI_FUSION_FP_DEFAULT_TIMEOUT
value|0x14
end_define

begin_define
define|#
directive|define
name|MFI_LOAD_BALANCE_FLAG
value|0x1
end_define

begin_define
define|#
directive|define
name|MFI_DCMD_MBOX_PEND_FLAG
value|0x1
end_define

begin_comment
comment|//#define MR_PROT_INFO_TYPE_CONTROLLER	0x08
end_comment

begin_define
define|#
directive|define
name|MEGASAS_SCSI_VARIABLE_LENGTH_CMD
value|0x7f
end_define

begin_define
define|#
directive|define
name|MEGASAS_SCSI_SERVICE_ACTION_READ32
value|0x9
end_define

begin_define
define|#
directive|define
name|MEGASAS_SCSI_SERVICE_ACTION_WRITE32
value|0xB
end_define

begin_define
define|#
directive|define
name|MEGASAS_SCSI_ADDL_CDB_LEN
value|0x18
end_define

begin_define
define|#
directive|define
name|MEGASAS_RD_WR_PROTECT_CHECK_ALL
value|0x20
end_define

begin_define
define|#
directive|define
name|MEGASAS_RD_WR_PROTECT_CHECK_NONE
value|0x60
end_define

begin_define
define|#
directive|define
name|MEGASAS_EEDPBLOCKSIZE
value|512
end_define

begin_struct
struct|struct
name|mfi_cmd_tbolt
block|{
name|union
name|mfi_mpi2_request_descriptor
modifier|*
name|request_desc
decl_stmt|;
name|struct
name|mfi_mpi2_request_raid_scsi_io
modifier|*
name|io_request
decl_stmt|;
name|bus_addr_t
name|io_request_phys_addr
decl_stmt|;
name|bus_addr_t
name|sg_frame_phys_addr
decl_stmt|;
name|bus_addr_t
name|sense_phys_addr
decl_stmt|;
name|MPI2_SGE_IO_UNION
modifier|*
name|sg_frame
decl_stmt|;
name|uint8_t
modifier|*
name|sense
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|mfi_cmd_tbolt
argument_list|)
name|next
expr_stmt|;
comment|/* 	 * Context for a MFI frame. 	 * Used to get the mfi cmd from list when a MFI cmd is completed 	 */
name|uint32_t
name|sync_cmd_idx
decl_stmt|;
name|uint16_t
name|index
decl_stmt|;
name|uint8_t
name|status
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|int
name|mfi_attach
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_free
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_shutdown
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_startio
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_disk_complete
parameter_list|(
name|struct
name|bio
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_disk_disable
parameter_list|(
name|struct
name|mfi_disk
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_disk_enable
parameter_list|(
name|struct
name|mfi_disk
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_dump_blocks
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|,
name|int
name|id
parameter_list|,
name|uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_syspd_disable
parameter_list|(
name|struct
name|mfi_system_pd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_syspd_enable
parameter_list|(
name|struct
name|mfi_system_pd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_dump_syspd_blocks
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|,
name|int
name|id
parameter_list|,
name|uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_transition_firmware
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_aen_setup
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|,
name|uint32_t
name|seq_start
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_complete
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mfi_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_mapcmd
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mfi_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_wait_command
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mfi_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_tbolt_enable_intr_ppc
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_tbolt_disable_intr_ppc
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int32_t
name|mfi_tbolt_read_fw_status_ppc
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int32_t
name|mfi_tbolt_check_clear_intr_ppc
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_tbolt_issue_cmd_ppc
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|,
name|bus_addr_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_tbolt_init_globals
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint32_t
name|mfi_tbolt_get_memory_requirement
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_tbolt_init_desc_pool
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_tbolt_init_MFI_queue
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_intr_tbolt
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_tbolt_alloc_cmd
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_tbolt_send_frame
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|mfi_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_tbolt_adp_reset
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_tbolt_reset
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|mfi_tbolt_sync_map_info
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|MFIQ_ADD
parameter_list|(
name|sc
parameter_list|,
name|qname
parameter_list|)
define|\
value|do {							\ 		struct mfi_qstat *qs;				\ 								\ 		qs =&(sc)->mfi_qstat[qname];			\ 		qs->q_length++;					\ 		if (qs->q_length> qs->q_max)			\ 			qs->q_max = qs->q_length;		\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|MFIQ_REMOVE
parameter_list|(
name|sc
parameter_list|,
name|qname
parameter_list|)
value|(sc)->mfi_qstat[qname].q_length--
end_define

begin_define
define|#
directive|define
name|MFIQ_INIT
parameter_list|(
name|sc
parameter_list|,
name|qname
parameter_list|)
define|\
value|do {							\ 		sc->mfi_qstat[qname].q_length = 0;		\ 		sc->mfi_qstat[qname].q_max = 0;			\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|MFIQ_COMMAND_QUEUE
parameter_list|(
name|name
parameter_list|,
name|index
parameter_list|)
define|\
value|static __inline void						\ 	mfi_initq_ ## name (struct mfi_softc *sc)			\ 	{								\ 		TAILQ_INIT(&sc->mfi_ ## name);				\ 		MFIQ_INIT(sc, index);					\ 	}								\ 	static __inline void						\ 	mfi_enqueue_ ## name (struct mfi_command *cm)			\ 	{								\ 		if ((cm->cm_flags& MFI_ON_MFIQ_MASK) != 0) {		\ 			printf("command %p is on another queue, "	\ 			    "flags = %#x\n", cm, cm->cm_flags);		\ 			panic("command is on another queue");		\ 		}							\ 		TAILQ_INSERT_TAIL(&cm->cm_sc->mfi_ ## name, cm, cm_link); \ 		cm->cm_flags |= MFI_ON_ ## index;			\ 		MFIQ_ADD(cm->cm_sc, index);				\ 	}								\ 	static __inline void						\ 	mfi_requeue_ ## name (struct mfi_command *cm)			\ 	{								\ 		if ((cm->cm_flags& MFI_ON_MFIQ_MASK) != 0) {		\ 			printf("command %p is on another queue, "	\ 			    "flags = %#x\n", cm, cm->cm_flags);		\ 			panic("command is on another queue");		\ 		}							\ 		TAILQ_INSERT_HEAD(&cm->cm_sc->mfi_ ## name, cm, cm_link); \ 		cm->cm_flags |= MFI_ON_ ## index;			\ 		MFIQ_ADD(cm->cm_sc, index);				\ 	}								\ 	static __inline struct mfi_command *				\ 	mfi_dequeue_ ## name (struct mfi_softc *sc)			\ 	{								\ 		struct mfi_command *cm;					\ 									\ 		if ((cm = TAILQ_FIRST(&sc->mfi_ ## name)) != NULL) {	\ 			if ((cm->cm_flags& MFI_ON_ ## index) == 0) {	\ 				printf("command %p not in queue, "	\ 				    "flags = %#x, bit = %#x\n", cm,	\ 				    cm->cm_flags, MFI_ON_ ## index);	\ 				panic("command not in queue");		\ 			}						\ 			TAILQ_REMOVE(&sc->mfi_ ## name, cm, cm_link);	\ 			cm->cm_flags&= ~MFI_ON_ ## index;		\ 			MFIQ_REMOVE(sc, index);				\ 		}							\ 		return (cm);						\ 	}								\ 	static __inline void						\ 	mfi_remove_ ## name (struct mfi_command *cm)			\ 	{								\ 		if ((cm->cm_flags& MFI_ON_ ## index) == 0) {		\ 			printf("command %p not in queue, flags = %#x, " \ 			    "bit = %#x\n", cm, cm->cm_flags,		\ 			    MFI_ON_ ## index);				\ 			panic("command not in queue");			\ 		}							\ 		TAILQ_REMOVE(&cm->cm_sc->mfi_ ## name, cm, cm_link);	\ 		cm->cm_flags&= ~MFI_ON_ ## index;			\ 		MFIQ_REMOVE(cm->cm_sc, index);				\ 	}								\ struct hack
end_define

begin_expr_stmt
name|MFIQ_COMMAND_QUEUE
argument_list|(
name|free
argument_list|,
name|MFIQ_FREE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|MFIQ_COMMAND_QUEUE
argument_list|(
name|ready
argument_list|,
name|MFIQ_READY
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|MFIQ_COMMAND_QUEUE
argument_list|(
name|busy
argument_list|,
name|MFIQ_BUSY
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
specifier|static
name|__inline
name|void
name|mfi_initq_bio
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
block|{
name|bioq_init
argument_list|(
operator|&
name|sc
operator|->
name|mfi_bioq
argument_list|)
expr_stmt|;
name|MFIQ_INIT
argument_list|(
name|sc
argument_list|,
name|MFIQ_BIO
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mfi_enqueue_bio
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|bio
modifier|*
name|bp
parameter_list|)
block|{
name|bioq_insert_tail
argument_list|(
operator|&
name|sc
operator|->
name|mfi_bioq
argument_list|,
name|bp
argument_list|)
expr_stmt|;
name|MFIQ_ADD
argument_list|(
name|sc
argument_list|,
name|MFIQ_BIO
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|bio
operator|*
name|mfi_dequeue_bio
argument_list|(
argument|struct mfi_softc *sc
argument_list|)
block|{ 	struct
name|bio
operator|*
name|bp
block|;
if|if
condition|(
operator|(
name|bp
operator|=
name|bioq_first
argument_list|(
operator|&
name|sc
operator|->
name|mfi_bioq
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|bioq_remove
argument_list|(
operator|&
name|sc
operator|->
name|mfi_bioq
argument_list|,
name|bp
argument_list|)
expr_stmt|;
name|MFIQ_REMOVE
argument_list|(
name|sc
argument_list|,
name|MFIQ_BIO
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|(
name|bp
operator|)
return|;
end_return

begin_comment
unit|}
comment|/*  * This is from the original scsi_extract_sense() in CAM.  It's copied  * here because CAM now uses a non-inline version that follows more complex  * additions to the SPC spec, and we don't want to force a dependency on  * the CAM module for such a trivial action.  */
end_comment

begin_function
unit|static
name|__inline
name|void
name|mfi_extract_sense
parameter_list|(
name|struct
name|scsi_sense_data_fixed
modifier|*
name|sense
parameter_list|,
name|int
modifier|*
name|error_code
parameter_list|,
name|int
modifier|*
name|sense_key
parameter_list|,
name|int
modifier|*
name|asc
parameter_list|,
name|int
modifier|*
name|ascq
parameter_list|)
block|{
operator|*
name|error_code
operator|=
name|sense
operator|->
name|error_code
operator|&
name|SSD_ERRCODE
expr_stmt|;
operator|*
name|sense_key
operator|=
name|sense
operator|->
name|flags
operator|&
name|SSD_KEY
expr_stmt|;
operator|*
name|asc
operator|=
operator|(
name|sense
operator|->
name|extra_len
operator|>=
literal|5
operator|)
condition|?
name|sense
operator|->
name|add_sense_code
else|:
literal|0
expr_stmt|;
operator|*
name|ascq
operator|=
operator|(
name|sense
operator|->
name|extra_len
operator|>=
literal|6
operator|)
condition|?
name|sense
operator|->
name|add_sense_code_qual
else|:
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mfi_print_sense
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|,
name|void
modifier|*
name|sense
parameter_list|)
block|{
name|int
name|error
decl_stmt|,
name|key
decl_stmt|,
name|asc
decl_stmt|,
name|ascq
decl_stmt|;
name|mfi_extract_sense
argument_list|(
operator|(
expr|struct
name|scsi_sense_data_fixed
operator|*
operator|)
name|sense
argument_list|,
operator|&
name|error
argument_list|,
operator|&
name|key
argument_list|,
operator|&
name|asc
argument_list|,
operator|&
name|ascq
argument_list|)
expr_stmt|;
name|device_printf
argument_list|(
name|sc
operator|->
name|mfi_dev
argument_list|,
literal|"sense error %d, sense_key %d, "
literal|"asc %d, ascq %d\n"
argument_list|,
name|error
argument_list|,
name|key
argument_list|,
name|asc
argument_list|,
name|ascq
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|MFI_WRITE4
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_4((sc)->mfi_btag, \ 	sc->mfi_bhandle, (reg), (val))
end_define

begin_define
define|#
directive|define
name|MFI_READ4
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|)
value|bus_space_read_4((sc)->mfi_btag, \ 	(sc)->mfi_bhandle, (reg))
end_define

begin_define
define|#
directive|define
name|MFI_WRITE2
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_2((sc)->mfi_btag, \ 	sc->mfi_bhandle, (reg), (val))
end_define

begin_define
define|#
directive|define
name|MFI_READ2
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|)
value|bus_space_read_2((sc)->mfi_btag, \ 	(sc)->mfi_bhandle, (reg))
end_define

begin_define
define|#
directive|define
name|MFI_WRITE1
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
value|bus_space_write_1((sc)->mfi_btag, \ 	sc->mfi_bhandle, (reg), (val))
end_define

begin_define
define|#
directive|define
name|MFI_READ1
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|)
value|bus_space_read_1((sc)->mfi_btag, \ 	(sc)->mfi_bhandle, (reg))
end_define

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_MFIBUF
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SYSCTL_DECL
argument_list|(
name|_hw_mfi
argument_list|)
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|MFI_RESET_WAIT_TIME
value|180
end_define

begin_define
define|#
directive|define
name|MFI_CMD_TIMEOUT
value|30
end_define

begin_define
define|#
directive|define
name|MFI_SYS_PD_IO
value|0
end_define

begin_define
define|#
directive|define
name|MFI_LD_IO
value|1
end_define

begin_define
define|#
directive|define
name|MFI_SKINNY_MEMORY
value|0x02000000
end_define

begin_define
define|#
directive|define
name|MFI_MAXPHYS
value|(128 * 1024)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|MFI_DEBUG
end_ifdef

begin_function_decl
specifier|extern
name|void
name|mfi_print_cmd
parameter_list|(
name|struct
name|mfi_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_dump_cmds
parameter_list|(
name|struct
name|mfi_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|mfi_validate_sg
parameter_list|(
name|struct
name|mfi_softc
modifier|*
parameter_list|,
name|struct
name|mfi_command
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|MFI_PRINT_CMD
parameter_list|(
name|cm
parameter_list|)
value|mfi_print_cmd(cm)
end_define

begin_define
define|#
directive|define
name|MFI_DUMP_CMDS
parameter_list|(
name|sc
parameter_list|)
value|mfi_dump_cmds(sc)
end_define

begin_define
define|#
directive|define
name|MFI_VALIDATE_CMD
parameter_list|(
name|sc
parameter_list|,
name|cm
parameter_list|)
value|mfi_validate_sg(sc, cm, __FUNCTION__, __LINE__)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|MFI_PRINT_CMD
parameter_list|(
name|cm
parameter_list|)
end_define

begin_define
define|#
directive|define
name|MFI_DUMP_CMDS
parameter_list|(
name|sc
parameter_list|)
end_define

begin_define
define|#
directive|define
name|MFI_VALIDATE_CMD
parameter_list|(
name|sc
parameter_list|,
name|cm
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|void
name|mfi_release_command
parameter_list|(
name|struct
name|mfi_command
modifier|*
name|cm
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MFIVAR_H */
end_comment

end_unit

