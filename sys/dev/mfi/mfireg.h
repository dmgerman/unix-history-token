begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2006 IronPort Systems  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MFIREG_H
end_ifndef

begin_define
define|#
directive|define
name|_MFIREG_H
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * MegaRAID SAS MFI firmware definitions  *  * Calling this driver 'MegaRAID SAS' is a bit misleading.  It's a completely  * new firmware interface from the old AMI MegaRAID one, and there is no  * reason why this interface should be limited to just SAS.  In any case, LSI  * seems to also call this interface 'MFI', so that will be used here.  */
end_comment

begin_comment
comment|/*  * Start with the register set.  All registers are 32 bits wide.  * The usual Intel IOP style setup.  */
end_comment

begin_define
define|#
directive|define
name|MFI_IMSG0
value|0x10
end_define

begin_comment
comment|/* Inbound message 0 */
end_comment

begin_define
define|#
directive|define
name|MFI_IMSG1
value|0x14
end_define

begin_comment
comment|/* Inbound message 1 */
end_comment

begin_define
define|#
directive|define
name|MFI_OMSG0
value|0x18
end_define

begin_comment
comment|/* Outbound message 0 */
end_comment

begin_define
define|#
directive|define
name|MFI_OMSG1
value|0x1c
end_define

begin_comment
comment|/* Outbound message 1 */
end_comment

begin_define
define|#
directive|define
name|MFI_IDB
value|0x20
end_define

begin_comment
comment|/* Inbound doorbell */
end_comment

begin_define
define|#
directive|define
name|MFI_ISTS
value|0x24
end_define

begin_comment
comment|/* Inbound interrupt status */
end_comment

begin_define
define|#
directive|define
name|MFI_IMSK
value|0x28
end_define

begin_comment
comment|/* Inbound interrupt mask */
end_comment

begin_define
define|#
directive|define
name|MFI_ODB
value|0x2c
end_define

begin_comment
comment|/* Outbound doorbell */
end_comment

begin_define
define|#
directive|define
name|MFI_OSTS
value|0x30
end_define

begin_comment
comment|/* Outbound interrupt status */
end_comment

begin_define
define|#
directive|define
name|MFI_OMSK
value|0x34
end_define

begin_comment
comment|/* Outbound interrupt mask */
end_comment

begin_define
define|#
directive|define
name|MFI_IQP
value|0x40
end_define

begin_comment
comment|/* Inbound queue port */
end_comment

begin_define
define|#
directive|define
name|MFI_OQP
value|0x44
end_define

begin_comment
comment|/* Outbound queue port */
end_comment

begin_comment
comment|/* Bits for MFI_OSTS */
end_comment

begin_define
define|#
directive|define
name|MFI_OSTS_INTR_VALID
value|0x00000002
end_define

begin_comment
comment|/*  * Firmware state values.  Found in OMSG0 during initialization.  */
end_comment

begin_define
define|#
directive|define
name|MFI_FWSTATE_MASK
value|0xf0000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_UNDEFINED
value|0x00000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_BB_INIT
value|0x10000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_FW_INIT
value|0x40000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_WAIT_HANDSHAKE
value|0x60000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_FW_INIT_2
value|0x70000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_DEVICE_SCAN
value|0x80000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_FLUSH_CACHE
value|0xa0000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_READY
value|0xb0000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_OPERATIONAL
value|0xc0000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_FAULT
value|0xf0000000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_MAXSGL_MASK
value|0x00ff0000
end_define

begin_define
define|#
directive|define
name|MFI_FWSTATE_MAXCMD_MASK
value|0x0000ffff
end_define

begin_comment
comment|/*  * Control bits to drive the card to ready state.  These go into the IDB  * register.  */
end_comment

begin_define
define|#
directive|define
name|MFI_FWINIT_ABORT
value|0x00000000
end_define

begin_comment
comment|/* Abort all pending commands */
end_comment

begin_define
define|#
directive|define
name|MFI_FWINIT_READY
value|0x00000002
end_define

begin_comment
comment|/* Move from operational to ready */
end_comment

begin_define
define|#
directive|define
name|MFI_FWINIT_MFIMODE
value|0x00000004
end_define

begin_comment
comment|/* unknown */
end_comment

begin_define
define|#
directive|define
name|MFI_FWINIT_CLEAR_HANDSHAKE
value|0x00000008
end_define

begin_comment
comment|/* Respond to WAIT_HANDSHAKE */
end_comment

begin_comment
comment|/* MFI Commands */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|MFI_CMD_INIT
init|=
literal|0x00
block|,
name|MFI_CMD_LD_READ
block|,
name|MFI_CMD_LD_WRITE
block|,
name|MFI_CMD_LD_SCSI_IO
block|,
name|MFI_CMD_PD_SCSI_IO
block|,
name|MFI_CMD_DCMD
block|,
name|MFI_CMD_ABORT
block|,
name|MFI_CMD_SMP
block|,
name|MFI_CMD_STP
block|}
name|mfi_cmd_t
typedef|;
end_typedef

begin_comment
comment|/* Direct commands */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|MFI_DCMD_CTRL_GETINFO
init|=
literal|0x01010000
block|,
name|MFI_DCMD_CTRL_FLUSHCACHE
init|=
literal|0x01101000
block|,
name|MFI_DCMD_CTRL_SHUTDOWN
init|=
literal|0x01050000
block|,
name|MFI_DCMD_CTRL_EVENT_GETINFO
init|=
literal|0x01040100
block|,
name|MFI_DCMD_CTRL_EVENT_GET
init|=
literal|0x01040300
block|,
name|MFI_DCMD_CTRL_EVENT_WAIT
init|=
literal|0x01040500
block|,
name|MFI_DCMD_LD_GET_LIST
init|=
literal|0x03010000
block|,
name|MFI_DCMD_LD_GET_INFO
init|=
literal|0x03020000
block|,
name|MFI_DCMD_LD_GET_PROP
init|=
literal|0x03030000
block|,
name|MFI_DCMD_LD_SET_PROP
init|=
literal|0x03040000
block|,
name|MFI_DCMD_CLUSTER
init|=
literal|0x08000000
block|,
name|MFI_DCMD_CLUSTER_RESET_ALL
init|=
literal|0x08010100
block|,
name|MFI_DCMD_CLUSTER_RESET_LD
init|=
literal|0x08010200
block|}
name|mfi_dcmd_t
typedef|;
end_typedef

begin_comment
comment|/* Modifiers for MFI_DCMD_CTRL_FLUSHCACHE */
end_comment

begin_define
define|#
directive|define
name|MFI_FLUSHCACHE_CTRL
value|0x01
end_define

begin_define
define|#
directive|define
name|MFI_FLUSHCACHE_DISK
value|0x02
end_define

begin_comment
comment|/* Modifiers for MFI_DCMD_CTRL_SHUTDOWN */
end_comment

begin_define
define|#
directive|define
name|MFI_SHUTDOWN_SPINDOWN
value|0x01
end_define

begin_comment
comment|/*  * MFI Frame flags  */
end_comment

begin_define
define|#
directive|define
name|MFI_FRAME_POST_IN_REPLY_QUEUE
value|0x0000
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_DONT_POST_IN_REPLY_QUEUE
value|0x0001
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_SGL32
value|0x0000
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_SGL64
value|0x0002
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_SENSE32
value|0x0000
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_SENSE64
value|0x0004
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_DIR_NONE
value|0x0000
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_DIR_WRITE
value|0x0008
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_DIR_READ
value|0x0010
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_DIR_BOTH
value|0x0018
end_define

begin_comment
comment|/* MFI Status codes */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|MFI_STAT_OK
init|=
literal|0x00
block|,
name|MFI_STAT_INVALID_CMD
block|,
name|MFI_STAT_INVALID_DCMD
block|,
name|MFI_STAT_INVALID_PARAMETER
block|,
name|MFI_STAT_INVALID_SEQUENCE_NUMBER
block|,
name|MFI_STAT_ABORT_NOT_POSSIBLE
block|,
name|MFI_STAT_APP_HOST_CODE_NOT_FOUND
block|,
name|MFI_STAT_APP_IN_USE
block|,
name|MFI_STAT_APP_NOT_INITIALIZED
block|,
name|MFI_STAT_ARRAY_INDEX_INVALID
block|,
name|MFI_STAT_ARRAY_ROW_NOT_EMPTY
block|,
name|MFI_STAT_CONFIG_RESOURCE_CONFLICT
block|,
name|MFI_STAT_DEVICE_NOT_FOUND
block|,
name|MFI_STAT_DRIVE_TOO_SMALL
block|,
name|MFI_STAT_FLASH_ALLOC_FAIL
block|,
name|MFI_STAT_FLASH_BUSY
block|,
name|MFI_STAT_FLASH_ERROR
init|=
literal|0x10
block|,
name|MFI_STAT_FLASH_IMAGE_BAD
block|,
name|MFI_STAT_FLASH_IMAGE_INCOMPLETE
block|,
name|MFI_STAT_FLASH_NOT_OPEN
block|,
name|MFI_STAT_FLASH_NOT_STARTED
block|,
name|MFI_STAT_FLUSH_FAILED
block|,
name|MFI_STAT_HOST_CODE_NOT_FOUNT
block|,
name|MFI_STAT_LD_CC_IN_PROGRESS
block|,
name|MFI_STAT_LD_INIT_IN_PROGRESS
block|,
name|MFI_STAT_LD_LBA_OUT_OF_RANGE
block|,
name|MFI_STAT_LD_MAX_CONFIGURED
block|,
name|MFI_STAT_LD_NOT_OPTIMAL
block|,
name|MFI_STAT_LD_RBLD_IN_PROGRESS
block|,
name|MFI_STAT_LD_RECON_IN_PROGRESS
block|,
name|MFI_STAT_LD_WRONG_RAID_LEVEL
block|,
name|MFI_STAT_MAX_SPARES_EXCEEDED
block|,
name|MFI_STAT_MEMORY_NOT_AVAILABLE
init|=
literal|0x20
block|,
name|MFI_STAT_MFC_HW_ERROR
block|,
name|MFI_STAT_NO_HW_PRESENT
block|,
name|MFI_STAT_NOT_FOUND
block|,
name|MFI_STAT_NOT_IN_ENCL
block|,
name|MFI_STAT_PD_CLEAR_IN_PROGRESS
block|,
name|MFI_STAT_PD_TYPE_WRONG
block|,
name|MFI_STAT_PR_DISABLED
block|,
name|MFI_STAT_ROW_INDEX_INVALID
block|,
name|MFI_STAT_SAS_CONFIG_INVALID_ACTION
block|,
name|MFI_STAT_SAS_CONFIG_INVALID_DATA
block|,
name|MFI_STAT_SAS_CONFIG_INVALID_PAGE
block|,
name|MFI_STAT_SAS_CONFIG_INVALID_TYPE
block|,
name|MFI_STAT_SCSI_DONE_WITH_ERROR
block|,
name|MFI_STAT_SCSI_IO_FAILED
block|,
name|MFI_STAT_SCSI_RESERVATION_CONFLICT
block|,
name|MFI_STAT_SHUTDOWN_FAILED
init|=
literal|0x30
block|,
name|MFI_STAT_TIME_NOT_SET
block|,
name|MFI_STAT_WRONG_STATE
block|,
name|MFI_STAT_LD_OFFLINE
block|,
name|MFI_STAT_PEER_NOTIFICATION_REJECTED
block|,
name|MFI_STAT_PEER_NOTIFICATION_FAILED
block|,
name|MFI_STAT_RESERVATION_IN_PROGRESS
block|,
name|MFI_STAT_I2C_ERRORS_DETECTED
block|,
name|MFI_STAT_PCI_ERRORS_DETECTED
block|,
name|MFI_STAT_INVALID_STATUS
init|=
literal|0xFF
block|}
name|mfi_status_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|MFI_EVT_CLASS_DEBUG
init|=
operator|-
literal|2
block|,
name|MFI_EVT_CLASS_PROGRESS
init|=
operator|-
literal|1
block|,
name|MFI_EVT_CLASS_INFO
init|=
literal|0
block|,
name|MFI_EVT_CLASS_WARNING
init|=
literal|1
block|,
name|MFI_EVT_CLASS_CRITICAL
init|=
literal|2
block|,
name|MFI_EVT_CLASS_FATAL
init|=
literal|3
block|,
name|MFI_EVT_CLASS_DEAD
init|=
literal|4
block|}
name|mfi_evt_class_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|MFI_EVT_LOCALE_LD
init|=
literal|0x0001
block|,
name|MFI_EVT_LOCALE_PD
init|=
literal|0x0002
block|,
name|MFI_EVT_LOCALE_ENCL
init|=
literal|0x0004
block|,
name|MFI_EVT_LOCALE_BBU
init|=
literal|0x0008
block|,
name|MFI_EVT_LOCALE_SAS
init|=
literal|0x0010
block|,
name|MFI_EVT_LOCALE_CTRL
init|=
literal|0x0020
block|,
name|MFI_EVT_LOCALE_CONFIG
init|=
literal|0x0040
block|,
name|MFI_EVT_LOCALE_CLUSTER
init|=
literal|0x0080
block|,
name|MFI_EVT_LOCALE_ALL
init|=
literal|0xffff
block|}
name|mfi_evt_locale_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|MR_EVT_ARGS_NONE
init|=
literal|0x00
block|,
name|MR_EVT_ARGS_CDB_SENSE
block|,
name|MR_EVT_ARGS_LD
block|,
name|MR_EVT_ARGS_LD_COUNT
block|,
name|MR_EVT_ARGS_LD_LBA
block|,
name|MR_EVT_ARGS_LD_OWNER
block|,
name|MR_EVT_ARGS_LD_LBA_PD_LBA
block|,
name|MR_EVT_ARGS_LD_PROG
block|,
name|MR_EVT_ARGS_LD_STATE
block|,
name|MR_EVT_ARGS_LD_STRIP
block|,
name|MR_EVT_ARGS_PD
block|,
name|MR_EVT_ARGS_PD_ERR
block|,
name|MR_EVT_ARGS_PD_LBA
block|,
name|MR_EVT_ARGS_PD_LBA_LD
block|,
name|MR_EVT_ARGS_PD_PROG
block|,
name|MR_EVT_ARGS_PD_STATE
block|,
name|MR_EVT_ARGS_PCI
block|,
name|MR_EVT_ARGS_RATE
block|,
name|MR_EVT_ARGS_STR
block|,
name|MR_EVT_ARGS_TIME
block|,
name|MR_EVT_ARGS_ECC
block|}
name|mfi_evt_args
typedef|;
end_typedef

begin_comment
comment|/*  * Other propertities and definitions  */
end_comment

begin_define
define|#
directive|define
name|MFI_MAX_PD_CHANNELS
value|2
end_define

begin_define
define|#
directive|define
name|MFI_MAX_LD_CHANNELS
value|2
end_define

begin_define
define|#
directive|define
name|MFI_MAX_CHANNELS
value|(MFI_MAX_PD_CHANNELS + MFI_MAX_LD_CHANNELS)
end_define

begin_define
define|#
directive|define
name|MFI_MAX_CHANNEL_DEVS
value|128
end_define

begin_define
define|#
directive|define
name|MFI_DEFAULT_ID
value|-1
end_define

begin_define
define|#
directive|define
name|MFI_MAX_LUN
value|8
end_define

begin_define
define|#
directive|define
name|MFI_MAX_LD
value|64
end_define

begin_define
define|#
directive|define
name|MFI_FRAME_SIZE
value|64
end_define

begin_define
define|#
directive|define
name|MFI_MBOX_SIZE
value|12
end_define

begin_define
define|#
directive|define
name|MFI_POLL_TIMEOUT_SECS
value|10
end_define

begin_comment
comment|/* Allow for speedier math calculations */
end_comment

begin_define
define|#
directive|define
name|MFI_SECTOR_LEN
value|512
end_define

begin_comment
comment|/* Scatter Gather elements */
end_comment

begin_struct
struct|struct
name|mfi_sg32
block|{
name|uint32_t
name|addr
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_sg64
block|{
name|uint64_t
name|addr
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_union
union|union
name|mfi_sgl
block|{
name|struct
name|mfi_sg32
name|sg32
index|[
literal|1
index|]
decl_stmt|;
name|struct
name|mfi_sg64
name|sg64
index|[
literal|1
index|]
decl_stmt|;
block|}
name|__packed
union|;
end_union

begin_comment
comment|/* Message frames.  All messages have a common header */
end_comment

begin_struct
struct|struct
name|mfi_frame_header
block|{
name|uint8_t
name|cmd
decl_stmt|;
name|uint8_t
name|sense_len
decl_stmt|;
name|uint8_t
name|cmd_status
decl_stmt|;
name|uint8_t
name|scsi_status
decl_stmt|;
name|uint8_t
name|target_id
decl_stmt|;
name|uint8_t
name|lun_id
decl_stmt|;
name|uint8_t
name|cdb_len
decl_stmt|;
name|uint8_t
name|sg_count
decl_stmt|;
name|uint32_t
name|context
decl_stmt|;
name|uint32_t
name|pad0
decl_stmt|;
name|uint16_t
name|flags
decl_stmt|;
name|uint16_t
name|timeout
decl_stmt|;
name|uint32_t
name|data_len
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_init_frame
block|{
name|struct
name|mfi_frame_header
name|header
decl_stmt|;
name|uint32_t
name|qinfo_new_addr_lo
decl_stmt|;
name|uint32_t
name|qinfo_new_addr_hi
decl_stmt|;
name|uint32_t
name|qinfo_old_addr_lo
decl_stmt|;
name|uint32_t
name|qinfo_old_addr_hi
decl_stmt|;
name|uint32_t
name|reserved
index|[
literal|6
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|MFI_IO_FRAME_SIZE
value|40
end_define

begin_struct
struct|struct
name|mfi_io_frame
block|{
name|struct
name|mfi_frame_header
name|header
decl_stmt|;
name|uint32_t
name|sense_addr_lo
decl_stmt|;
name|uint32_t
name|sense_addr_hi
decl_stmt|;
name|uint32_t
name|lba_lo
decl_stmt|;
name|uint32_t
name|lba_hi
decl_stmt|;
name|union
name|mfi_sgl
name|sgl
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|MFI_PASS_FRAME_SIZE
value|48
end_define

begin_struct
struct|struct
name|mfi_pass_frame
block|{
name|struct
name|mfi_frame_header
name|header
decl_stmt|;
name|uint32_t
name|sense_addr_lo
decl_stmt|;
name|uint32_t
name|sense_addr_hi
decl_stmt|;
name|uint8_t
name|cdb
index|[
literal|16
index|]
decl_stmt|;
name|union
name|mfi_sgl
name|sgl
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|MFI_DCMD_FRAME_SIZE
value|40
end_define

begin_struct
struct|struct
name|mfi_dcmd_frame
block|{
name|struct
name|mfi_frame_header
name|header
decl_stmt|;
name|uint32_t
name|opcode
decl_stmt|;
name|uint8_t
name|mbox
index|[
name|MFI_MBOX_SIZE
index|]
decl_stmt|;
name|union
name|mfi_sgl
name|sgl
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_abort_frame
block|{
name|struct
name|mfi_frame_header
name|header
decl_stmt|;
name|uint32_t
name|abort_context
decl_stmt|;
name|uint32_t
name|pad
decl_stmt|;
name|uint32_t
name|abort_mfi_addr_lo
decl_stmt|;
name|uint32_t
name|abort_mfi_addr_hi
decl_stmt|;
name|uint32_t
name|reserved
index|[
literal|6
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_smp_frame
block|{
name|struct
name|mfi_frame_header
name|header
decl_stmt|;
name|uint64_t
name|sas_addr
decl_stmt|;
union|union
block|{
name|struct
name|mfi_sg32
name|sg32
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|mfi_sg64
name|sg64
index|[
literal|2
index|]
decl_stmt|;
block|}
name|sgl
union|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_stp_frame
block|{
name|struct
name|mfi_frame_header
name|header
decl_stmt|;
name|uint16_t
name|fis
index|[
literal|10
index|]
decl_stmt|;
name|uint32_t
name|stp_flags
decl_stmt|;
union|union
block|{
name|struct
name|mfi_sg32
name|sg32
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|mfi_sg64
name|sg64
index|[
literal|2
index|]
decl_stmt|;
block|}
name|sgl
union|;
block|}
name|__packed
struct|;
end_struct

begin_union
union|union
name|mfi_frame
block|{
name|struct
name|mfi_frame_header
name|header
decl_stmt|;
name|struct
name|mfi_init_frame
name|init
decl_stmt|;
name|struct
name|mfi_io_frame
name|io
decl_stmt|;
name|struct
name|mfi_pass_frame
name|pass
decl_stmt|;
name|struct
name|mfi_dcmd_frame
name|dcmd
decl_stmt|;
name|struct
name|mfi_abort_frame
name|abort
decl_stmt|;
name|struct
name|mfi_smp_frame
name|smp
decl_stmt|;
name|struct
name|mfi_stp_frame
name|stp
decl_stmt|;
name|uint8_t
name|bytes
index|[
name|MFI_FRAME_SIZE
index|]
decl_stmt|;
block|}
union|;
end_union

begin_define
define|#
directive|define
name|MFI_SENSE_LEN
value|128
end_define

begin_struct
struct|struct
name|mfi_sense
block|{
name|uint8_t
name|data
index|[
name|MFI_SENSE_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* The queue init structure that is passed with the init message */
end_comment

begin_struct
struct|struct
name|mfi_init_qinfo
block|{
name|uint32_t
name|flags
decl_stmt|;
name|uint32_t
name|rq_entries
decl_stmt|;
name|uint32_t
name|rq_addr_lo
decl_stmt|;
name|uint32_t
name|rq_addr_hi
decl_stmt|;
name|uint32_t
name|pi_addr_lo
decl_stmt|;
name|uint32_t
name|pi_addr_hi
decl_stmt|;
name|uint32_t
name|ci_addr_lo
decl_stmt|;
name|uint32_t
name|ci_addr_hi
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* SAS (?) controller properties, part of mfi_ctrl_info */
end_comment

begin_struct
struct|struct
name|mfi_ctrl_props
block|{
name|uint16_t
name|seq_num
decl_stmt|;
name|uint16_t
name|pred_fail_poll_interval
decl_stmt|;
name|uint16_t
name|intr_throttle_cnt
decl_stmt|;
name|uint16_t
name|intr_throttle_timeout
decl_stmt|;
name|uint8_t
name|rebuild_rate
decl_stmt|;
name|uint8_t
name|patrol_read_rate
decl_stmt|;
name|uint8_t
name|bgi_rate
decl_stmt|;
name|uint8_t
name|cc_rate
decl_stmt|;
name|uint8_t
name|recon_rate
decl_stmt|;
name|uint8_t
name|cache_flush_interval
decl_stmt|;
name|uint8_t
name|spinup_drv_cnt
decl_stmt|;
name|uint8_t
name|spinup_delay
decl_stmt|;
name|uint8_t
name|cluster_enable
decl_stmt|;
name|uint8_t
name|coercion_mode
decl_stmt|;
name|uint8_t
name|alarm_enable
decl_stmt|;
name|uint8_t
name|disable_auto_rebuild
decl_stmt|;
name|uint8_t
name|disable_battery_warn
decl_stmt|;
name|uint8_t
name|ecc_bucket_size
decl_stmt|;
name|uint16_t
name|ecc_bucket_leak_rate
decl_stmt|;
name|uint8_t
name|restore_hotspare_on_insertion
decl_stmt|;
name|uint8_t
name|expose_encl_devices
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|38
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* PCI information about the card. */
end_comment

begin_struct
struct|struct
name|mfi_info_pci
block|{
name|uint16_t
name|vendor
decl_stmt|;
name|uint16_t
name|device
decl_stmt|;
name|uint16_t
name|subvendor
decl_stmt|;
name|uint16_t
name|subdevice
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|24
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* Host (front end) interface information */
end_comment

begin_struct
struct|struct
name|mfi_info_host
block|{
name|uint8_t
name|type
decl_stmt|;
define|#
directive|define
name|MFI_INFO_HOST_PCIX
value|0x01
define|#
directive|define
name|MFI_INFO_HOST_PCIE
value|0x02
define|#
directive|define
name|MFI_INFO_HOST_ISCSI
value|0x04
define|#
directive|define
name|MFI_INFO_HOST_SAS3G
value|0x08
name|uint8_t
name|reserved
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|port_count
decl_stmt|;
name|uint64_t
name|port_addr
index|[
literal|8
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* Device (back end) interface information */
end_comment

begin_struct
struct|struct
name|mfi_info_device
block|{
name|uint8_t
name|type
decl_stmt|;
define|#
directive|define
name|MFI_INFO_DEV_SPI
value|0x01
define|#
directive|define
name|MFI_INFO_DEV_SAS3G
value|0x02
define|#
directive|define
name|MFI_INFO_DEV_SATA1
value|0x04
define|#
directive|define
name|MFI_INFO_DEV_SATA3G
value|0x08
name|uint8_t
name|reserved
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|port_count
decl_stmt|;
name|uint64_t
name|port_addr
index|[
literal|8
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* Firmware component information */
end_comment

begin_struct
struct|struct
name|mfi_info_component
block|{
name|char
name|name
index|[
literal|8
index|]
decl_stmt|;
name|char
name|version
index|[
literal|32
index|]
decl_stmt|;
name|char
name|build_date
index|[
literal|16
index|]
decl_stmt|;
name|char
name|build_time
index|[
literal|16
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* SAS (?) controller info, returned from MFI_DCMD_CTRL_GETINFO. */
end_comment

begin_struct
struct|struct
name|mfi_ctrl_info
block|{
name|struct
name|mfi_info_pci
name|pci
decl_stmt|;
name|struct
name|mfi_info_host
name|host
decl_stmt|;
name|struct
name|mfi_info_device
name|device
decl_stmt|;
comment|/* Firmware components that are present and active. */
name|uint32_t
name|image_check_word
decl_stmt|;
name|uint32_t
name|image_component_count
decl_stmt|;
name|struct
name|mfi_info_component
name|image_component
index|[
literal|8
index|]
decl_stmt|;
comment|/* Firmware components that have been flashed but are inactive */
name|uint32_t
name|pending_image_component_count
decl_stmt|;
name|struct
name|mfi_info_component
name|pending_image_component
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|max_arms
decl_stmt|;
name|uint8_t
name|max_spans
decl_stmt|;
name|uint8_t
name|max_arrays
decl_stmt|;
name|uint8_t
name|max_lds
decl_stmt|;
name|char
name|product_name
index|[
literal|80
index|]
decl_stmt|;
name|char
name|serial_number
index|[
literal|32
index|]
decl_stmt|;
name|uint32_t
name|hw_present
decl_stmt|;
define|#
directive|define
name|MFI_INFO_HW_BBU
value|0x01
define|#
directive|define
name|MFI_INFO_HW_ALARM
value|0x02
define|#
directive|define
name|MFI_INFO_HW_NVRAM
value|0x04
define|#
directive|define
name|MFI_INFO_HW_UART
value|0x08
name|uint32_t
name|current_fw_time
decl_stmt|;
name|uint16_t
name|max_cmds
decl_stmt|;
name|uint16_t
name|max_sg_elements
decl_stmt|;
name|uint32_t
name|max_request_size
decl_stmt|;
name|uint16_t
name|lds_present
decl_stmt|;
name|uint16_t
name|lds_degraded
decl_stmt|;
name|uint16_t
name|lds_offline
decl_stmt|;
name|uint16_t
name|pd_present
decl_stmt|;
name|uint16_t
name|pd_disks_present
decl_stmt|;
name|uint16_t
name|pd_disks_pred_failure
decl_stmt|;
name|uint16_t
name|pd_disks_failed
decl_stmt|;
name|uint16_t
name|nvram_size
decl_stmt|;
name|uint16_t
name|memory_size
decl_stmt|;
name|uint16_t
name|flash_size
decl_stmt|;
name|uint16_t
name|ram_correctable_errors
decl_stmt|;
name|uint16_t
name|ram_uncorrectable_errors
decl_stmt|;
name|uint8_t
name|cluster_allowed
decl_stmt|;
name|uint8_t
name|cluster_active
decl_stmt|;
name|uint16_t
name|max_strips_per_io
decl_stmt|;
name|uint32_t
name|raid_levels
decl_stmt|;
define|#
directive|define
name|MFI_INFO_RAID_0
value|0x01
define|#
directive|define
name|MFI_INFO_RAID_1
value|0x02
define|#
directive|define
name|MFI_INFO_RAID_5
value|0x04
define|#
directive|define
name|MFI_INFO_RAID_1E
value|0x08
define|#
directive|define
name|MFI_INFO_RAID_6
value|0x10
name|uint32_t
name|adapter_ops
decl_stmt|;
define|#
directive|define
name|MFI_INFO_AOPS_RBLD_RATE
value|0x0001
define|#
directive|define
name|MFI_INFO_AOPS_CC_RATE
value|0x0002
define|#
directive|define
name|MFI_INFO_AOPS_BGI_RATE
value|0x0004
define|#
directive|define
name|MFI_INFO_AOPS_RECON_RATE
value|0x0008
define|#
directive|define
name|MFI_INFO_AOPS_PATROL_RATE
value|0x0010
define|#
directive|define
name|MFI_INFO_AOPS_ALARM_CONTROL
value|0x0020
define|#
directive|define
name|MFI_INFO_AOPS_CLUSTER_SUPPORTED
value|0x0040
define|#
directive|define
name|MFI_INFO_AOPS_BBU
value|0x0080
define|#
directive|define
name|MFI_INFO_AOPS_SPANNING_ALLOWED
value|0x0100
define|#
directive|define
name|MFI_INFO_AOPS_DEDICATED_SPARES
value|0x0200
define|#
directive|define
name|MFI_INFO_AOPS_REVERTIBLE_SPARES
value|0x0400
define|#
directive|define
name|MFI_INFO_AOPS_FOREIGN_IMPORT
value|0x0800
define|#
directive|define
name|MFI_INFO_AOPS_SELF_DIAGNOSTIC
value|0x1000
define|#
directive|define
name|MFI_INFO_AOPS_MIXED_ARRAY
value|0x2000
define|#
directive|define
name|MFI_INFO_AOPS_GLOBAL_SPARES
value|0x4000
name|uint32_t
name|ld_ops
decl_stmt|;
define|#
directive|define
name|MFI_INFO_LDOPS_READ_POLICY
value|0x01
define|#
directive|define
name|MFI_INFO_LDOPS_WRITE_POLICY
value|0x02
define|#
directive|define
name|MFI_INFO_LDOPS_IO_POLICY
value|0x04
define|#
directive|define
name|MFI_INFO_LDOPS_ACCESS_POLICY
value|0x08
define|#
directive|define
name|MFI_INFO_LDOPS_DISK_CACHE_POLICY
value|0x10
struct|struct
block|{
name|uint8_t
name|min
decl_stmt|;
name|uint8_t
name|max
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
name|__packed
name|stripe_sz_ops
struct|;
name|uint32_t
name|pd_ops
decl_stmt|;
define|#
directive|define
name|MFI_INFO_PDOPS_FORCE_ONLINE
value|0x01
define|#
directive|define
name|MFI_INFO_PDOPS_FORCE_OFFLINE
value|0x02
define|#
directive|define
name|MFI_INFO_PDOPS_FORCE_REBUILD
value|0x04
name|uint32_t
name|pd_mix_support
decl_stmt|;
define|#
directive|define
name|MFI_INFO_PDMIX_SAS
value|0x01
define|#
directive|define
name|MFI_INFO_PDMIX_SATA
value|0x02
define|#
directive|define
name|MFI_INFO_PDMIX_ENCL
value|0x04
define|#
directive|define
name|MFI_INFO_PDMIX_LD
value|0x08
define|#
directive|define
name|MFI_INFO_PDMIX_SATA_CLUSTER
value|0x10
name|uint8_t
name|ecc_bucket_count
decl_stmt|;
name|uint8_t
name|reserved2
index|[
literal|11
index|]
decl_stmt|;
name|struct
name|mfi_ctrl_props
name|properties
decl_stmt|;
name|char
name|package_version
index|[
literal|0x60
index|]
decl_stmt|;
name|uint8_t
name|pad
index|[
literal|0x800
operator|-
literal|0x6a0
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* keep track of an event. */
end_comment

begin_union
union|union
name|mfi_evt
block|{
struct|struct
block|{
name|uint16_t
name|locale
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|int8_t
name|class
decl_stmt|;
block|}
name|members
struct|;
name|uint32_t
name|word
decl_stmt|;
block|}
name|__packed
union|;
end_union

begin_comment
comment|/* event log state. */
end_comment

begin_struct
struct|struct
name|mfi_evt_log_state
block|{
name|uint32_t
name|newest_seq_num
decl_stmt|;
name|uint32_t
name|oldest_seq_num
decl_stmt|;
name|uint32_t
name|clear_seq_num
decl_stmt|;
name|uint32_t
name|shutdown_seq_num
decl_stmt|;
name|uint32_t
name|boot_seq_num
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_progress
block|{
name|uint16_t
name|progress
decl_stmt|;
name|uint16_t
name|elapsed_seconds
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_evt_ld
block|{
name|uint16_t
name|target_id
decl_stmt|;
name|uint8_t
name|ld_index
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_evt_pd
block|{
name|uint16_t
name|device_id
decl_stmt|;
name|uint8_t
name|enclosure_index
decl_stmt|;
name|uint8_t
name|slot_number
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* SAS (?) event detail, returned from MFI_DCMD_CTRL_EVENT_WAIT. */
end_comment

begin_struct
struct|struct
name|mfi_evt_detail
block|{
name|uint32_t
name|seq
decl_stmt|;
name|uint32_t
name|time
decl_stmt|;
name|uint32_t
name|code
decl_stmt|;
name|union
name|mfi_evt
name|class
decl_stmt|;
name|uint8_t
name|arg_type
decl_stmt|;
name|uint8_t
name|reserved1
index|[
literal|15
index|]
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|struct
name|mfi_evt_pd
name|pd
decl_stmt|;
name|uint8_t
name|cdb_len
decl_stmt|;
name|uint8_t
name|sense_len
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|cdb
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|sense
index|[
literal|64
index|]
decl_stmt|;
block|}
name|cdb_sense
struct|;
name|struct
name|mfi_evt_ld
name|ld
decl_stmt|;
struct|struct
block|{
name|struct
name|mfi_evt_ld
name|ld
decl_stmt|;
name|uint64_t
name|count
decl_stmt|;
block|}
name|ld_count
struct|;
struct|struct
block|{
name|uint64_t
name|lba
decl_stmt|;
name|struct
name|mfi_evt_ld
name|ld
decl_stmt|;
block|}
name|ld_lba
struct|;
struct|struct
block|{
name|struct
name|mfi_evt_ld
name|ld
decl_stmt|;
name|uint32_t
name|pre_owner
decl_stmt|;
name|uint32_t
name|new_owner
decl_stmt|;
block|}
name|ld_owner
struct|;
struct|struct
block|{
name|uint64_t
name|ld_lba
decl_stmt|;
name|uint64_t
name|pd_lba
decl_stmt|;
name|struct
name|mfi_evt_ld
name|ld
decl_stmt|;
name|struct
name|mfi_evt_pd
name|pd
decl_stmt|;
block|}
name|ld_lba_pd_lba
struct|;
struct|struct
block|{
name|struct
name|mfi_evt_ld
name|ld
decl_stmt|;
name|struct
name|mfi_progress
name|prog
decl_stmt|;
block|}
name|ld_prog
struct|;
struct|struct
block|{
name|struct
name|mfi_evt_ld
name|ld
decl_stmt|;
name|uint32_t
name|prev_state
decl_stmt|;
name|uint32_t
name|new_state
decl_stmt|;
block|}
name|ld_state
struct|;
struct|struct
block|{
name|uint64_t
name|strip
decl_stmt|;
name|struct
name|mfi_evt_ld
name|ld
decl_stmt|;
block|}
name|ld_strip
struct|;
name|struct
name|mfi_evt_pd
name|pd
decl_stmt|;
struct|struct
block|{
name|struct
name|mfi_evt_pd
name|pd
decl_stmt|;
name|uint32_t
name|err
decl_stmt|;
block|}
name|pd_err
struct|;
struct|struct
block|{
name|uint64_t
name|lba
decl_stmt|;
name|struct
name|mfi_evt_pd
name|pd
decl_stmt|;
block|}
name|pd_lba
struct|;
struct|struct
block|{
name|uint64_t
name|lba
decl_stmt|;
name|struct
name|mfi_evt_pd
name|pd
decl_stmt|;
name|struct
name|mfi_evt_ld
name|ld
decl_stmt|;
block|}
name|pd_lba_ld
struct|;
struct|struct
block|{
name|struct
name|mfi_evt_pd
name|pd
decl_stmt|;
name|struct
name|mfi_progress
name|prog
decl_stmt|;
block|}
name|pd_prog
struct|;
struct|struct
block|{
name|struct
name|mfi_evt_pd
name|ld
decl_stmt|;
name|uint32_t
name|prev_state
decl_stmt|;
name|uint32_t
name|new_state
decl_stmt|;
block|}
name|pd_state
struct|;
struct|struct
block|{
name|uint16_t
name|venderId
decl_stmt|;
name|uint16_t
name|deviceId
decl_stmt|;
name|uint16_t
name|subVenderId
decl_stmt|;
name|uint16_t
name|subDeviceId
decl_stmt|;
block|}
name|pci
struct|;
name|uint32_t
name|rate
decl_stmt|;
name|char
name|str
index|[
literal|96
index|]
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|rtc
decl_stmt|;
name|uint16_t
name|elapsedSeconds
decl_stmt|;
block|}
name|time
struct|;
struct|struct
block|{
name|uint32_t
name|ecar
decl_stmt|;
name|uint32_t
name|elog
decl_stmt|;
name|char
name|str
index|[
literal|64
index|]
decl_stmt|;
block|}
name|ecc
struct|;
name|uint8_t
name|b
index|[
literal|96
index|]
decl_stmt|;
name|uint16_t
name|s
index|[
literal|48
index|]
decl_stmt|;
name|uint32_t
name|w
index|[
literal|24
index|]
decl_stmt|;
name|uint64_t
name|d
index|[
literal|12
index|]
decl_stmt|;
block|}
name|args
union|;
name|char
name|description
index|[
literal|128
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_evt_list
block|{
name|uint32_t
name|count
decl_stmt|;
name|uint32_t
name|reserved
decl_stmt|;
name|struct
name|mfi_evt_detail
name|event
index|[
literal|1
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_ldref
block|{
name|uint8_t
name|target_id
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint16_t
name|seq
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_ld_list
block|{
name|uint32_t
name|ld_count
decl_stmt|;
name|uint32_t
name|reserved1
decl_stmt|;
struct|struct
block|{
name|struct
name|mfi_ldref
name|ld
decl_stmt|;
name|uint8_t
name|state
decl_stmt|;
name|uint8_t
name|reserved2
index|[
literal|3
index|]
decl_stmt|;
name|uint64_t
name|size
decl_stmt|;
block|}
name|ld_list
index|[
name|MFI_MAX_LD
index|]
struct|;
block|}
name|__packed
struct|;
end_struct

begin_enum
enum|enum
name|mfi_ld_access
block|{
name|MFI_LD_ACCESS_RW
init|=
literal|0
block|,
name|MFI_LD_ACCSSS_RO
init|=
literal|2
block|,
name|MFI_LD_ACCESS_BLOCKED
init|=
literal|3
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|MFI_LD_ACCESS_MASK
value|3
end_define

begin_enum
enum|enum
name|mfi_ld_state
block|{
name|MFI_LD_STATE_OFFLINE
init|=
literal|0
block|,
name|MFI_LD_STATE_PARTIALLY_DEGRADED
init|=
literal|1
block|,
name|MFI_LD_STATE_DEGRADED
init|=
literal|2
block|,
name|MFI_LD_STATE_OPTIMAL
init|=
literal|3
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mfi_ld_props
block|{
name|struct
name|mfi_ldref
name|ld
decl_stmt|;
name|char
name|name
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|default_cache_policy
decl_stmt|;
name|uint8_t
name|access_policy
decl_stmt|;
name|uint8_t
name|disk_cache_policy
decl_stmt|;
name|uint8_t
name|current_cache_policy
decl_stmt|;
name|uint8_t
name|no_bgi
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|7
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_ld_params
block|{
name|uint8_t
name|primary_raid_level
decl_stmt|;
name|uint8_t
name|raid_level_qualifier
decl_stmt|;
name|uint8_t
name|secondary_raid_level
decl_stmt|;
name|uint8_t
name|stripe_size
decl_stmt|;
name|uint8_t
name|num_drives
decl_stmt|;
name|uint8_t
name|span_depth
decl_stmt|;
name|uint8_t
name|state
decl_stmt|;
name|uint8_t
name|init_state
decl_stmt|;
name|uint8_t
name|is_consistent
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|23
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_ld_progress
block|{
name|uint32_t
name|active
decl_stmt|;
define|#
directive|define
name|MFI_LD_PROGRESS_CC
value|(1<<0)
define|#
directive|define
name|MFI_LD_PROGRESS_BGI
value|(1<<1)
define|#
directive|define
name|MFI_LD_PROGRESS_FGI
value|(1<<2)
define|#
directive|define
name|MFI_LD_PORGRESS_RECON
value|(1<<3)
name|struct
name|mfi_progress
name|cc
decl_stmt|;
name|struct
name|mfi_progress
name|bgi
decl_stmt|;
name|struct
name|mfi_progress
name|fgi
decl_stmt|;
name|struct
name|mfi_progress
name|recon
decl_stmt|;
name|struct
name|mfi_progress
name|reserved
index|[
literal|4
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_span
block|{
name|uint64_t
name|start_block
decl_stmt|;
name|uint64_t
name|num_blocks
decl_stmt|;
name|uint16_t
name|array_ref
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|6
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|MFI_MAX_SPAN_DEPTH
value|8
end_define

begin_struct
struct|struct
name|mfi_ld_config
block|{
name|struct
name|mfi_ld_props
name|properties
decl_stmt|;
name|struct
name|mfi_ld_params
name|params
decl_stmt|;
name|struct
name|mfi_span
name|span
index|[
name|MFI_MAX_SPAN_DEPTH
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|mfi_ld_info
block|{
name|struct
name|mfi_ld_config
name|ld_config
decl_stmt|;
name|uint64_t
name|size
decl_stmt|;
name|struct
name|mfi_ld_progress
name|progress
decl_stmt|;
name|uint16_t
name|cluster_owner
decl_stmt|;
name|uint8_t
name|reconstruct_active
decl_stmt|;
name|uint8_t
name|reserved1
index|[
literal|1
index|]
decl_stmt|;
name|uint8_t
name|vpd_page83
index|[
literal|64
index|]
decl_stmt|;
name|uint8_t
name|reserved2
index|[
literal|16
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MFIREG_H */
end_comment

end_unit

