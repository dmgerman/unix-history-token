begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1999-2001, Ivan Sharov, Vitaly Belekhov.  * Copyright (c) 2004 Stanislav Svirid.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $RISS: if_arl/dev/arl/if_arlreg.h,v 1.4 2004/03/16 04:43:27 count Exp $  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IF_ARLREG_H
end_ifndef

begin_define
define|#
directive|define
name|_IF_ARLREG_H
end_define

begin_define
define|#
directive|define
name|ARL_BASE_START
value|0xC0000
end_define

begin_define
define|#
directive|define
name|ARL_BASE_END
value|0xDE000
end_define

begin_define
define|#
directive|define
name|ARL_BASE_STEP
value|0x2000
end_define

begin_define
define|#
directive|define
name|ARLAN_NAME_SIZE
value|16
end_define

begin_define
define|#
directive|define
name|ARLAN_NAME
value|"ArLan655-SCT"
end_define

begin_comment
comment|/*  * Statistics  */
end_comment

begin_struct
struct|struct
name|arl_stats
block|{
name|u_int32_t
name|numDatagramsTransmitted
decl_stmt|;
name|u_int32_t
name|numReTransmissions
decl_stmt|;
name|u_int32_t
name|numFramesDiscarded
decl_stmt|;
name|u_int32_t
name|numDatagramsReceived
decl_stmt|;
name|u_int32_t
name|numDuplicateReceivedFrames
decl_stmt|;
name|u_int32_t
name|numDatagramsDiscarded
decl_stmt|;
name|u_int16_t
name|maxNumReTransmitDatagram
decl_stmt|;
name|u_int16_t
name|maxNumReTransmitFrames
decl_stmt|;
name|u_int16_t
name|maxNumConsecutiveDuplicateFrames
decl_stmt|;
name|u_int32_t
name|numBytesTransmitted
decl_stmt|;
name|u_int32_t
name|numBytesReceived
decl_stmt|;
name|u_int32_t
name|numCRCErrors
decl_stmt|;
name|u_int32_t
name|numLengthErrors
decl_stmt|;
name|u_int32_t
name|numAbortErrors
decl_stmt|;
name|u_int32_t
name|numTXUnderruns
decl_stmt|;
name|u_int32_t
name|numRXOverruns
decl_stmt|;
name|u_int32_t
name|numHoldOffs
decl_stmt|;
name|u_int32_t
name|numFramesTransmitted
decl_stmt|;
name|u_int32_t
name|numFramesReceived
decl_stmt|;
name|u_int32_t
name|numReceiveFramesLost
decl_stmt|;
name|u_int32_t
name|numRXBufferOverflows
decl_stmt|;
name|u_int32_t
name|numFramesDiscardedAddrMismatch
decl_stmt|;
name|u_int32_t
name|numFramesDiscardedSIDMismatch
decl_stmt|;
name|u_int32_t
name|numPollsTransmistted
decl_stmt|;
name|u_int32_t
name|numPollAcknowledges
decl_stmt|;
name|u_int32_t
name|numStatusVectorTimeouts
decl_stmt|;
name|u_int32_t
name|numNACKReceived
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_comment
comment|/*  * Arlan private structure in memomory  */
end_comment

begin_struct
struct|struct
name|arl_private
block|{
comment|/* Header Signature */
name|char
name|textRegion
index|[
literal|48
index|]
decl_stmt|;
name|u_int8_t
name|resetFlag
decl_stmt|;
name|u_int8_t
name|diagnosticInfo
decl_stmt|;
name|u_int16_t
name|diagnosticOffset
decl_stmt|;
name|u_int8_t
name|_1
index|[
literal|12
index|]
decl_stmt|;
name|u_int8_t
name|lanCardNodeId
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|broadcastAddress
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|hardwareType
decl_stmt|;
name|u_int8_t
name|majorHardwareVersion
decl_stmt|;
name|u_int8_t
name|minorHardwareVersion
decl_stmt|;
name|u_int8_t
name|radioModule
decl_stmt|;
name|u_int8_t
name|defaultChannelSet
decl_stmt|;
name|u_int8_t
name|_2
index|[
literal|47
index|]
decl_stmt|;
comment|/* Control/Status Block - 0x0080 */
name|u_int8_t
name|interruptInProgress
decl_stmt|;
name|u_int8_t
name|cntrlRegImage
decl_stmt|;
name|u_int8_t
name|_3
index|[
literal|14
index|]
decl_stmt|;
name|u_int8_t
name|commandByte
decl_stmt|;
name|u_int8_t
name|commandParameter
index|[
literal|15
index|]
decl_stmt|;
comment|/* Receive Status - 0x00a0 */
name|u_int8_t
name|rxStatusVector
decl_stmt|;
name|u_int8_t
name|rxFrmType
decl_stmt|;
name|u_int16_t
name|rxOffset
decl_stmt|;
name|u_int16_t
name|rxLength
decl_stmt|;
name|u_int8_t
name|rxSrc
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|rxBroadcastFlag
decl_stmt|;
name|u_int8_t
name|rxQuality
decl_stmt|;
name|u_int8_t
name|scrambled
decl_stmt|;
name|u_int8_t
name|_4
index|[
literal|1
index|]
decl_stmt|;
comment|/* Transmit Status - 0x00b0 */
name|u_int8_t
name|txStatusVector
decl_stmt|;
name|u_int8_t
name|txAckQuality
decl_stmt|;
name|u_int8_t
name|numRetries
decl_stmt|;
name|u_int8_t
name|_5
index|[
literal|14
index|]
decl_stmt|;
name|u_int8_t
name|registeredRouter
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|backboneRouter
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|registrationStatus
decl_stmt|;
name|u_int8_t
name|configuredStatusFlag
decl_stmt|;
name|u_int8_t
name|_6
index|[
literal|1
index|]
decl_stmt|;
name|u_int8_t
name|ultimateDestAddress
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|immedDestAddress
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|immedSrcAddress
index|[
literal|6
index|]
decl_stmt|;
name|u_int16_t
name|rxSequenceNumber
decl_stmt|;
name|u_int8_t
name|assignedLocaltalkAddress
decl_stmt|;
name|u_int8_t
name|_7
index|[
literal|27
index|]
decl_stmt|;
comment|/* System Parameter Block */
comment|/* - Driver Parameters (Novell Specific) */
name|u_int16_t
name|txTimeout
decl_stmt|;
name|u_int16_t
name|transportTime
decl_stmt|;
name|u_int8_t
name|_8
index|[
literal|4
index|]
decl_stmt|;
comment|/* - Configuration Parameters */
name|u_int8_t
name|irqLevel
decl_stmt|;
name|u_int8_t
name|spreadingCode
decl_stmt|;
name|u_int8_t
name|channelSet
decl_stmt|;
name|u_int8_t
name|channelNumber
decl_stmt|;
name|u_int16_t
name|radioNodeId
decl_stmt|;
name|u_int8_t
name|_9
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|scramblingDisable
decl_stmt|;
name|u_int8_t
name|radioType
decl_stmt|;
name|u_int16_t
name|routerId
decl_stmt|;
name|u_int8_t
name|_10
index|[
literal|9
index|]
decl_stmt|;
name|u_int8_t
name|txAttenuation
decl_stmt|;
name|u_int8_t
name|systemId
index|[
literal|4
index|]
decl_stmt|;
comment|/* on an odd address for a long !!! */
name|u_int16_t
name|globalChecksum
decl_stmt|;
name|u_int8_t
name|_11
index|[
literal|4
index|]
decl_stmt|;
name|u_int16_t
name|maxDatagramSize
decl_stmt|;
name|u_int16_t
name|maxFrameSize
decl_stmt|;
name|u_int8_t
name|maxRetries
decl_stmt|;
name|u_int8_t
name|receiveMode
decl_stmt|;
name|u_int8_t
name|priority
decl_stmt|;
name|u_int8_t
name|rootOrRepeater
decl_stmt|;
name|u_int8_t
name|specifiedRouter
index|[
literal|6
index|]
decl_stmt|;
name|u_int16_t
name|fastPollPeriod
decl_stmt|;
name|u_int8_t
name|pollDecay
decl_stmt|;
name|u_int8_t
name|fastPollDelay
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|arlThreshold
decl_stmt|;
name|u_int8_t
name|arlDecay
decl_stmt|;
name|u_int8_t
name|_12
index|[
literal|1
index|]
decl_stmt|;
name|u_int16_t
name|specRouterTimeout
decl_stmt|;
name|u_int8_t
name|_13
index|[
literal|5
index|]
decl_stmt|;
comment|/* Scrambled Area */
name|u_int8_t
name|SID
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|encryptionKey
index|[
literal|12
index|]
decl_stmt|;
name|u_int8_t
name|_14
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|waitTime
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|lParameter
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|_15
index|[
literal|3
index|]
decl_stmt|;
name|u_int16_t
name|headerSize
decl_stmt|;
name|u_int16_t
name|sectionChecksum
decl_stmt|;
name|u_int8_t
name|registrationMode
decl_stmt|;
name|u_int8_t
name|registrationFill
decl_stmt|;
name|u_int16_t
name|pollPeriod
decl_stmt|;
name|u_int16_t
name|refreshPeriod
decl_stmt|;
name|u_int8_t
name|name
index|[
name|ARLAN_NAME_SIZE
index|]
decl_stmt|;
name|u_int8_t
name|NID
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|localTalkAddress
decl_stmt|;
name|u_int8_t
name|codeFormat
decl_stmt|;
name|u_int8_t
name|SSCode
index|[
literal|64
index|]
decl_stmt|;
name|u_int8_t
name|_16
index|[
literal|0x140
index|]
decl_stmt|;
comment|/* Statistics Block - 0x0300 */
name|u_int8_t
name|hostcpuLock
decl_stmt|;
name|u_int8_t
name|lancpuLock
decl_stmt|;
name|u_int8_t
name|resetTime
index|[
literal|18
index|]
decl_stmt|;
name|struct
name|arl_stats
name|stat
decl_stmt|;
name|u_int8_t
name|_17
index|[
literal|0x86
index|]
decl_stmt|;
name|u_int8_t
name|txBuffer
index|[
literal|0x800
index|]
decl_stmt|;
name|u_int8_t
name|rxBuffer
index|[
literal|0x800
index|]
decl_stmt|;
name|u_int8_t
name|_18
index|[
literal|0x0bfd
index|]
decl_stmt|;
name|u_int8_t
name|resetFlag1
decl_stmt|;
name|u_int8_t
name|_19
decl_stmt|;
name|u_int8_t
name|controlRegister
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Transmit parametrs  */
end_comment

begin_struct
struct|struct
name|arl_tx_param
block|{
name|u_int16_t
name|offset
decl_stmt|;
name|u_int16_t
name|length
decl_stmt|;
name|u_int8_t
name|dest
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|clear
decl_stmt|;
name|u_int8_t
name|retries
decl_stmt|;
name|u_int8_t
name|routing
decl_stmt|;
name|u_int8_t
name|scrambled
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ARL_HARDWARE_RESET
value|0x01
end_define

begin_define
define|#
directive|define
name|ARL_CHANNEL_ATTENTION
value|0x02
end_define

begin_define
define|#
directive|define
name|ARL_INTERRUPT_ENABLE
value|0x04
end_define

begin_define
define|#
directive|define
name|ARL_CLEAR_INTERRUPT
value|0x08
end_define

begin_comment
comment|/* additions for sys/sockio.h ( socket ioctl parameters for arlan card ) */
end_comment

begin_define
define|#
directive|define
name|SIOCGARLQLT
value|_IOWR('i', 70, struct ifreq)
end_define

begin_comment
comment|/* get QUALITY */
end_comment

begin_define
define|#
directive|define
name|SIOCGARLALL
value|_IOWR('i', 71, struct ifreq)
end_define

begin_comment
comment|/* get ALL */
end_comment

begin_define
define|#
directive|define
name|SIOCSARLALL
value|_IOWR('i', 72, struct ifreq)
end_define

begin_comment
comment|/* set paramter (who_set) */
end_comment

begin_define
define|#
directive|define
name|SIOCGARLSTB
value|_IOWR('i', 73, struct ifreq)
end_define

begin_comment
comment|/* get statistic block */
end_comment

begin_comment
comment|/*  * Arlan request struct via ioctl  */
end_comment

begin_struct
struct|struct
name|arl_cfg_param
block|{
name|u_char
name|name
index|[
name|ARLAN_NAME_SIZE
index|]
decl_stmt|;
name|u_int8_t
name|sid
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|channelSet
decl_stmt|;
name|u_int8_t
name|channelNumber
decl_stmt|;
name|u_int8_t
name|spreadingCode
decl_stmt|;
name|u_int8_t
name|registrationMode
decl_stmt|;
name|u_int8_t
name|lanCardNodeId
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|specifiedRouter
index|[
literal|6
index|]
decl_stmt|;
name|u_int8_t
name|hardwareType
decl_stmt|;
name|u_int8_t
name|majorHardwareVersion
decl_stmt|;
name|u_int8_t
name|minorHardwareVersion
decl_stmt|;
name|u_int8_t
name|radioModule
decl_stmt|;
name|u_int8_t
name|priority
decl_stmt|;
name|u_int8_t
name|receiveMode
decl_stmt|;
name|u_int8_t
name|txRetry
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|arl_req
block|{
name|u_int32_t
name|what_set
decl_stmt|;
name|struct
name|arl_cfg_param
name|cfg
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|ARLCACHE
end_ifdef

begin_define
define|#
directive|define
name|MAXARLCACHE
value|16
end_define

begin_define
define|#
directive|define
name|ARLCACHE_RX
value|0
end_define

begin_define
define|#
directive|define
name|ARLCACHE_TX
value|1
end_define

begin_struct
struct|struct
name|arl_sigcache
block|{
name|u_int8_t
name|macsrc
index|[
literal|6
index|]
decl_stmt|;
comment|/* unique MAC address for entry */
name|u_int8_t
name|level
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|quality
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ARLAN_SET_name
value|0x0001
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_sid
value|0x0002
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_channelSet
value|0x0004
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_channelNumber
value|0x0008
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_spreadingCode
value|0x0010
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_registrationMode
value|0x0020
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_lanCardNodeId
value|0x0040
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_specifiedRouter
value|0x0080
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_priority
value|0x0100
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_receiveMode
value|0x0200
end_define

begin_define
define|#
directive|define
name|ARLAN_SET_txRetry
value|0x0400
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_struct
struct|struct
name|arl_softc
block|{
name|struct
name|ifnet
modifier|*
name|arl_ifp
decl_stmt|;
name|device_t
name|arl_dev
decl_stmt|;
name|struct
name|arl_private
modifier|*
name|arl_mem
decl_stmt|;
comment|/* arlan data */
name|struct
name|arl_cfg_param
name|arl_cfg
decl_stmt|;
comment|/* arlan vars in our mem */
name|u_char
name|arl_control
decl_stmt|;
name|int
name|mem_rid
decl_stmt|;
comment|/* resource id for mem */
name|struct
name|resource
modifier|*
name|mem_res
decl_stmt|;
comment|/* resource for mem */
name|int
name|irq_rid
decl_stmt|;
comment|/* resource id for irq */
name|struct
name|resource
modifier|*
name|irq_res
decl_stmt|;
comment|/* resource for irq */
name|void
modifier|*
name|irq_handle
decl_stmt|;
comment|/* handle for irq handler */
name|u_char
name|arl_tx
index|[
literal|2048
index|]
decl_stmt|;
name|int
name|tx_len
decl_stmt|;
name|u_char
name|arl_rx
index|[
literal|2048
index|]
decl_stmt|;
name|int
name|rx_len
decl_stmt|;
ifdef|#
directive|ifdef
name|ARLCACHE
name|struct
name|arl_sigcache
name|arl_sigcache
index|[
name|MAXARLCACHE
index|]
decl_stmt|;
endif|#
directive|endif
name|struct
name|ifmedia
name|arl_ifmedia
decl_stmt|;
name|struct
name|callout
name|arl_timer
decl_stmt|;
name|struct
name|mtx
name|arl_lock
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ARL_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->arl_lock)
end_define

begin_define
define|#
directive|define
name|ARL_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->arl_lock)
end_define

begin_define
define|#
directive|define
name|ARL_LOCK_ASSERT
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->arl_lock, MA_OWNED)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ARLAN_SIGN
value|"TELESYSTEM"
end_define

begin_define
define|#
directive|define
name|ARLAN_HEADER_SIZE
value|0x0C
end_define

begin_define
define|#
directive|define
name|ar
value|sc->arl_mem
end_define

begin_define
define|#
directive|define
name|arcfg
value|sc->arl_cfg
end_define

begin_define
define|#
directive|define
name|ARDELAY
value|10000
end_define

begin_define
define|#
directive|define
name|ARDELAY1
value|50000
end_define

begin_define
define|#
directive|define
name|WAIT_RESET
parameter_list|(
name|cnt
parameter_list|,
name|delay
parameter_list|)
define|\
value|do { \ 		int i; \ 		for (i = cnt; i&& ar->resetFlag; i--) { \ 			DELAY(delay); \ 		} \ 	} while (0)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function_decl
name|void
name|arl_release_resources
parameter_list|(
name|device_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|arl_alloc_memory
parameter_list|(
name|device_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|arl_alloc_irq
parameter_list|(
name|device_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|arl_attach
parameter_list|(
name|device_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|arl_wait_reset
parameter_list|(
name|struct
name|arl_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arl_stop
parameter_list|(
name|struct
name|arl_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|driver_intr_t
name|arl_intr
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _IF_ARLREG_H */
end_comment

end_unit

