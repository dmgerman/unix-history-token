begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004-2006 Marcel Moolenaar  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEV_SCC_BFE_H_
end_ifndef

begin_define
define|#
directive|define
name|_DEV_SCC_BFE_H_
end_define

begin_include
include|#
directive|include
file|<sys/serial.h>
end_include

begin_comment
comment|/*  * Bus access structure. This structure holds the minimum information needed  * to access the SCC. The rclk field, although not important to actually  * access the SCC, is important for baudrate programming, delay loops and  * other timing related computations.  */
end_comment

begin_struct
struct|struct
name|scc_bas
block|{
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|u_int
name|range
decl_stmt|;
name|u_int
name|rclk
decl_stmt|;
name|u_int
name|regshft
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|scc_regofs
parameter_list|(
name|bas
parameter_list|,
name|reg
parameter_list|)
value|((reg)<< (bas)->regshft)
end_define

begin_define
define|#
directive|define
name|scc_getreg
parameter_list|(
name|bas
parameter_list|,
name|reg
parameter_list|)
define|\
value|bus_space_read_1((bas)->bst, (bas)->bsh, scc_regofs(bas, reg))
end_define

begin_define
define|#
directive|define
name|scc_setreg
parameter_list|(
name|bas
parameter_list|,
name|reg
parameter_list|,
name|value
parameter_list|)
define|\
value|bus_space_write_1((bas)->bst, (bas)->bsh, scc_regofs(bas, reg), value)
end_define

begin_define
define|#
directive|define
name|scc_barrier
parameter_list|(
name|bas
parameter_list|)
define|\
value|bus_space_barrier((bas)->bst, (bas)->bsh, 0, (bas)->range,	\ 	    BUS_SPACE_BARRIER_READ|BUS_SPACE_BARRIER_WRITE)
end_define

begin_comment
comment|/*  * SCC mode (child) and channel control structures.  */
end_comment

begin_define
define|#
directive|define
name|SCC_NMODES
value|3
end_define

begin_define
define|#
directive|define
name|SCC_ISRCCNT
value|5
end_define

begin_struct_decl
struct_decl|struct
name|scc_chan
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|scc_mode
block|{
name|struct
name|scc_chan
modifier|*
name|m_chan
decl_stmt|;
name|device_t
name|m_dev
decl_stmt|;
name|u_int
name|m_mode
decl_stmt|;
name|int
name|m_attached
range|:
literal|1
decl_stmt|;
name|int
name|m_fastintr
range|:
literal|1
decl_stmt|;
name|int
name|m_hasintr
range|:
literal|1
decl_stmt|;
name|int
name|m_probed
range|:
literal|1
decl_stmt|;
name|int
name|m_sysdev
range|:
literal|1
decl_stmt|;
name|driver_intr_t
modifier|*
name|ih
decl_stmt|;
name|serdev_intr_t
modifier|*
name|ih_src
index|[
name|SCC_ISRCCNT
index|]
decl_stmt|;
name|void
modifier|*
name|ih_arg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scc_chan
block|{
name|struct
name|resource
name|ch_rres
decl_stmt|;
name|struct
name|resource_list
name|ch_rlist
decl_stmt|;
name|struct
name|scc_mode
name|ch_mode
index|[
name|SCC_NMODES
index|]
decl_stmt|;
name|u_int
name|ch_nr
decl_stmt|;
name|int
name|ch_sysdev
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ch_ipend
decl_stmt|;
name|uint32_t
name|ch_hwsig
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * SCC class& instance (=softc)  */
end_comment

begin_struct
struct|struct
name|scc_class
block|{
name|KOBJ_CLASS_FIELDS
expr_stmt|;
name|u_int
name|cl_channels
decl_stmt|;
comment|/* Number of independent channels. */
name|u_int
name|cl_class
decl_stmt|;
comment|/* SCC bus class ID. */
name|u_int
name|cl_modes
decl_stmt|;
comment|/* Supported modes (bitset). */
name|int
name|cl_range
decl_stmt|;
name|u_int
name|cl_rclk
decl_stmt|;
name|u_int
name|cl_regshft
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|scc_class
name|scc_sab82532_class
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|scc_class
name|scc_z8530_class
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|scc_softc
block|{
name|KOBJ_FIELDS
expr_stmt|;
name|struct
name|scc_class
modifier|*
name|sc_class
decl_stmt|;
name|struct
name|scc_bas
name|sc_bas
decl_stmt|;
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|mtx
name|sc_hwmtx
decl_stmt|;
comment|/* Spinlock protecting hardware. */
name|struct
name|resource
modifier|*
name|sc_rres
decl_stmt|;
comment|/* Register resource. */
name|int
name|sc_rrid
decl_stmt|;
name|int
name|sc_rtype
decl_stmt|;
comment|/* SYS_RES_{IOPORT|MEMORY}. */
name|struct
name|resource
modifier|*
name|sc_ires
decl_stmt|;
comment|/* Interrupt resource. */
name|void
modifier|*
name|sc_icookie
decl_stmt|;
name|int
name|sc_irid
decl_stmt|;
name|struct
name|scc_chan
modifier|*
name|sc_chan
decl_stmt|;
name|int
name|sc_fastintr
range|:
literal|1
decl_stmt|;
name|int
name|sc_leaving
range|:
literal|1
decl_stmt|;
name|int
name|sc_polled
range|:
literal|1
decl_stmt|;
name|uint32_t
name|sc_hwsig
decl_stmt|;
comment|/* Signal state. Used by HW driver. */
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|devclass_t
name|scc_devclass
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
name|scc_driver_name
index|[]
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|scc_bfe_attach
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scc_bfe_detach
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scc_bfe_probe
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|resource
modifier|*
name|scc_bus_alloc_resource
parameter_list|(
name|device_t
parameter_list|,
name|device_t
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|u_long
parameter_list|,
name|u_long
parameter_list|,
name|u_long
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scc_bus_get_resource
parameter_list|(
name|device_t
parameter_list|,
name|device_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|u_long
modifier|*
parameter_list|,
name|u_long
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scc_bus_read_ivar
parameter_list|(
name|device_t
parameter_list|,
name|device_t
parameter_list|,
name|int
parameter_list|,
name|uintptr_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scc_bus_release_resource
parameter_list|(
name|device_t
parameter_list|,
name|device_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|struct
name|resource
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scc_bus_setup_intr
parameter_list|(
name|device_t
parameter_list|,
name|device_t
parameter_list|,
name|struct
name|resource
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scc_bus_teardown_intr
parameter_list|(
name|device_t
parameter_list|,
name|device_t
parameter_list|,
name|struct
name|resource
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEV_SCC_BFE_H_ */
end_comment

end_unit

