begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005-2012 University of Zagreb  * Copyright (c) 2005 International Computer Science Institute  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NETINET_IP_FIB_H_
end_ifndef

begin_define
define|#
directive|define
name|_NETINET_IP_FIB_H_
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|DXR_DIRECT_BITS
end_ifndef

begin_define
define|#
directive|define
name|DXR_DIRECT_BITS
value|16
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|DXR_RANGE_MASK
value|(0xffffffff>> DXR_DIRECT_BITS)
end_define

begin_define
define|#
directive|define
name|DXR_RANGE_SHIFT
value|(32 - DXR_DIRECT_BITS)
end_define

begin_define
define|#
directive|define
name|DIRECT_TBL_SIZE
value|(1<< DXR_DIRECT_BITS)
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DXR_VPORTS_MAX
argument_list|)
operator|||
operator|(
name|DXR_VPORTS_MAX
operator|>
name|DIRECT_TBL_SIZE
operator|)
end_if

begin_undef
undef|#
directive|undef
name|DXR_VPORTS_MAX
end_undef

begin_define
define|#
directive|define
name|DXR_VPORTS_MAX
value|DIRECT_TBL_SIZE
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|dxr_nexthop
block|{
name|struct
name|ifnet
modifier|*
name|ifp
decl_stmt|;
name|struct
name|in_addr
name|gw
decl_stmt|;
name|int32_t
name|refcount
decl_stmt|;
name|int16_t
name|ll_next
decl_stmt|;
name|int16_t
name|ll_prev
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|range_entry_long
block|{
if|#
directive|if
operator|(
name|DXR_DIRECT_BITS
operator|<
literal|16
operator|)
name|uint32_t
name|nexthop
range|:
name|DXR_DIRECT_BITS
decl_stmt|,
name|start
range|:
name|DXR_RANGE_SHIFT
decl_stmt|;
else|#
directive|else
name|uint16_t
name|nexthop
decl_stmt|;
name|uint16_t
name|start
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|range_entry_short
block|{
name|uint8_t
name|nexthop
decl_stmt|;
name|uint8_t
name|start
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DESC_BASE_BITS
value|19
end_define

begin_define
define|#
directive|define
name|BASE_MAX
value|((1<< DESC_BASE_BITS) - 1)
end_define

begin_struct
struct|struct
name|direct_entry
block|{
name|uint32_t
name|fragments
range|:
operator|(
literal|31
operator|-
name|DESC_BASE_BITS
operator|)
decl_stmt|,
name|long_format
range|:
literal|1
decl_stmt|,
name|base
range|:
name|DESC_BASE_BITS
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dxr_heap_entry
block|{
name|uint32_t
name|start
decl_stmt|;
name|uint32_t
name|end
decl_stmt|;
name|int
name|preflen
decl_stmt|;
name|int
name|nexthop
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|chunk_desc
block|{
name|LIST_ENTRY
argument_list|(
argument|chunk_desc
argument_list|)
name|cd_all_le
expr_stmt|;
name|LIST_ENTRY
argument_list|(
argument|chunk_desc
argument_list|)
name|cd_hash_le
expr_stmt|;
name|uint32_t
name|cd_hash
decl_stmt|;
name|uint32_t
name|cd_refcount
decl_stmt|;
name|uint32_t
name|cd_base
decl_stmt|;
name|int32_t
name|cd_cur_size
decl_stmt|;
name|int32_t
name|cd_max_size
decl_stmt|;
name|int32_t
name|cd_chunk_first
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|chunk_ptr
block|{
name|struct
name|chunk_desc
modifier|*
name|cp_cdp
decl_stmt|;
name|int32_t
name|cp_chunk_next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dxr_stats
block|{
name|uint64_t
name|local
decl_stmt|;
name|uint64_t
name|slowpath
decl_stmt|;
name|uint64_t
name|fastpath
decl_stmt|;
name|uint64_t
name|no_route
decl_stmt|;
name|uint64_t
name|input_errs
decl_stmt|;
name|uint64_t
name|output_errs
decl_stmt|;
block|}
struct|;
end_struct

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|struct mbuf * dxr_input(struct mbuf *); void dxr_request(struct rtentry *, int);
endif|#
directive|endif
end_endif

begin_comment
comment|/* Exported */
end_comment

begin_struct_decl
struct_decl|struct
name|dxr_instance
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|int
name|tree_walkf_cb_t
parameter_list|(
name|struct
name|dxr_instance
modifier|*
name|di
parameter_list|,
name|in_addr_t
name|dst
parameter_list|,
name|in_addr_t
name|mask
parameter_list|,
name|int
name|nh
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|tree_walkf_t
parameter_list|(
name|void
modifier|*
name|tree_ptr
parameter_list|,
name|struct
name|dxr_instance
modifier|*
name|di
parameter_list|,
name|in_addr_t
name|dst
parameter_list|,
name|in_addr_t
name|mask
parameter_list|,
name|tree_walkf_cb_t
modifier|*
name|f
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|tree_lookup_f
parameter_list|(
name|void
modifier|*
name|tree_ptr
parameter_list|,
name|in_addr_t
modifier|*
name|pdst
parameter_list|,
name|in_addr_t
modifier|*
name|pmask
parameter_list|,
name|int
modifier|*
name|pnh
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
modifier|*
name|slab_init_f
parameter_list|(
name|size_t
name|obj_size
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
modifier|*
name|slab_alloc_f
parameter_list|(
name|void
modifier|*
name|slab_ptr
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|slab_free_f
parameter_list|(
name|void
modifier|*
name|slab_ptr
parameter_list|,
name|void
modifier|*
name|obj_ptr
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|dxr_funcs
block|{
name|slab_init_f
modifier|*
name|slab_init
decl_stmt|;
name|slab_alloc_f
modifier|*
name|slab_alloc
decl_stmt|;
name|slab_free_f
modifier|*
name|slab_free
decl_stmt|;
name|void
modifier|*
name|slab_ptr
decl_stmt|;
name|tree_walkf_t
modifier|*
name|tree_walk
decl_stmt|;
name|tree_lookup_f
modifier|*
name|tree_lookup
decl_stmt|;
name|void
modifier|*
name|tree_ptr
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|dxr_instance
modifier|*
name|dxr_init
parameter_list|(
name|struct
name|malloc_type
modifier|*
name|mtype
parameter_list|,
name|int
name|mflag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dxr_destroy
parameter_list|(
name|struct
name|dxr_instance
modifier|*
name|di
parameter_list|,
name|struct
name|malloc_type
modifier|*
name|mtype
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dxr_setfuncs
parameter_list|(
name|struct
name|dxr_instance
modifier|*
name|di
parameter_list|,
name|struct
name|dxr_funcs
modifier|*
name|f
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dxr_request
parameter_list|(
name|struct
name|dxr_instance
modifier|*
name|di
parameter_list|,
name|int
name|req
parameter_list|,
name|struct
name|in_addr
name|dst
parameter_list|,
name|int
name|mlen
parameter_list|,
name|int
name|nh_refs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dxr_lookup
parameter_list|(
name|struct
name|dxr_instance
modifier|*
name|di
parameter_list|,
name|uint32_t
name|dst
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dxr_process_one
parameter_list|(
name|struct
name|dxr_instance
modifier|*
name|di
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NETINET_IP_FIB_H_ */
end_comment

end_unit

