begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2015-2016 Yandex LLC  * Copyright (c) 2015-2016 Andrey V. Elsukov<ae@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IP_FW_NAT64_TRANSLATE_H_
end_ifndef

begin_define
define|#
directive|define
name|_IP_FW_NAT64_TRANSLATE_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|RTALLOC_NOLOCK
end_ifdef

begin_define
define|#
directive|define
name|IN_LOOKUP_ROUTE
parameter_list|(
name|ro
parameter_list|,
name|fib
parameter_list|)
value|rtalloc_fib_nolock((ro), 0, (fib))
end_define

begin_define
define|#
directive|define
name|IN6_LOOKUP_ROUTE
parameter_list|(
name|ro
parameter_list|,
name|fib
parameter_list|)
value|in6_rtalloc_nolock((ro), (fib))
end_define

begin_define
define|#
directive|define
name|FREE_ROUTE
parameter_list|(
name|ro
parameter_list|)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|IN_LOOKUP_ROUTE
parameter_list|(
name|ro
parameter_list|,
name|fib
parameter_list|)
value|rtalloc_ign_fib((ro), 0, (fib))
end_define

begin_define
define|#
directive|define
name|IN6_LOOKUP_ROUTE
parameter_list|(
name|ro
parameter_list|,
name|fib
parameter_list|)
value|in6_rtalloc((ro), (fib))
end_define

begin_define
define|#
directive|define
name|FREE_ROUTE
parameter_list|(
name|ro
parameter_list|)
value|RO_RTFREE((ro))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|int
name|nat64_check_ip6
parameter_list|(
name|struct
name|in6_addr
modifier|*
name|addr
parameter_list|)
block|{
comment|/* XXX: We should really check /8 */
if|if
condition|(
name|addr
operator|->
name|s6_addr16
index|[
literal|0
index|]
operator|==
literal|0
operator|||
comment|/* 0000::/8 Reserved by IETF */
name|IN6_IS_ADDR_MULTICAST
argument_list|(
name|addr
argument_list|)
operator|||
name|IN6_IS_ADDR_LINKLOCAL
argument_list|(
name|addr
argument_list|)
condition|)
return|return
operator|(
literal|1
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_decl_stmt
specifier|extern
name|int
name|nat64_allow_private
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|nat64_check_private_ip4
parameter_list|(
name|in_addr_t
name|ia
parameter_list|)
block|{
if|if
condition|(
name|nat64_allow_private
condition|)
return|return
operator|(
literal|0
operator|)
return|;
comment|/* WKPFX must not be used to represent non-global IPv4 addresses */
comment|//	if (cfg->flags& NAT64_WKPFX) {
comment|/* IN_PRIVATE */
if|if
condition|(
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xff000000
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0x0a000000
argument_list|)
operator|||
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xfff00000
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xac100000
argument_list|)
operator|||
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xffff0000
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xc0a80000
argument_list|)
condition|)
return|return
operator|(
literal|1
operator|)
return|;
comment|/* 		 * RFC 5735: 		 *  192.0.0.0/24 - reserved for IETF protocol assignments 		 *  192.88.99.0/24 - for use as 6to4 relay anycast addresses 		 *  198.18.0.0/15 - for use in benchmark tests 		 *  192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24 - for use 		 *   in documentation and example code 		 */
if|if
condition|(
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xffffff00
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xc0000000
argument_list|)
operator|||
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xffffff00
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xc0586300
argument_list|)
operator|||
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xfffffe00
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xc6120000
argument_list|)
operator|||
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xffffff00
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xc0000200
argument_list|)
operator|||
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xfffffe00
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xc6336400
argument_list|)
operator|||
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xffffff00
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xcb007100
argument_list|)
condition|)
return|return
operator|(
literal|1
operator|)
return|;
comment|//	}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|nat64_check_ip4
parameter_list|(
name|in_addr_t
name|ia
parameter_list|)
block|{
comment|/* IN_LOOPBACK */
if|if
condition|(
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xff000000
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0x7f000000
argument_list|)
condition|)
return|return
operator|(
literal|1
operator|)
return|;
comment|/* IN_LINKLOCAL */
if|if
condition|(
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xffff0000
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xa9fe0000
argument_list|)
condition|)
return|return
operator|(
literal|1
operator|)
return|;
comment|/* IN_MULTICAST& IN_EXPERIMENTAL */
if|if
condition|(
operator|(
name|ia
operator|&
name|htonl
argument_list|(
literal|0xe0000000
argument_list|)
operator|)
operator|==
name|htonl
argument_list|(
literal|0xe0000000
argument_list|)
condition|)
return|return
operator|(
literal|1
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|nat64_get_ip4
parameter_list|(
name|_ip6
parameter_list|)
value|((_ip6)->s6_addr32[3])
end_define

begin_define
define|#
directive|define
name|nat64_set_ip4
parameter_list|(
name|_ip6
parameter_list|,
name|_ip4
parameter_list|)
value|(_ip6)->s6_addr32[3] = (_ip4)
end_define

begin_function_decl
name|int
name|nat64_getlasthdr
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|int
modifier|*
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nat64_do_handle_ip4
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|struct
name|in6_addr
modifier|*
name|saddr
parameter_list|,
name|struct
name|in6_addr
modifier|*
name|daddr
parameter_list|,
name|uint16_t
name|lport
parameter_list|,
name|nat64_stats_block
modifier|*
name|stats
parameter_list|,
name|void
modifier|*
name|logdata
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nat64_do_handle_ip6
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|uint32_t
name|aaddr
parameter_list|,
name|uint16_t
name|aport
parameter_list|,
name|nat64_stats_block
modifier|*
name|stats
parameter_list|,
name|void
modifier|*
name|logdata
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nat64_handle_icmp6
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|int
name|hlen
parameter_list|,
name|uint32_t
name|aaddr
parameter_list|,
name|uint16_t
name|aport
parameter_list|,
name|nat64_stats_block
modifier|*
name|stats
parameter_list|,
name|void
modifier|*
name|logdata
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

