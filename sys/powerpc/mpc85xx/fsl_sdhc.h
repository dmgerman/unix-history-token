begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011-2012 Semihalf  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|FSL_SDHC_H_
end_ifndef

begin_define
define|#
directive|define
name|FSL_SDHC_H_
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/module.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/rman.h>
end_include

begin_include
include|#
directive|include
file|<sys/sysctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/taskqueue.h>
end_include

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_include
include|#
directive|include
file|<dev/mmc/bridge.h>
end_include

begin_include
include|#
directive|include
file|<dev/mmc/mmcreg.h>
end_include

begin_include
include|#
directive|include
file|<dev/mmc/mmcbrvar.h>
end_include

begin_comment
comment|/*****************************************************************************  * Private defines  *****************************************************************************/
end_comment

begin_struct
struct|struct
name|slot
block|{
name|uint32_t
name|clock
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fsl_sdhc_softc
block|{
name|device_t
name|self
decl_stmt|;
name|device_t
name|child
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|bus_space_tag_t
name|bst
decl_stmt|;
name|struct
name|resource
modifier|*
name|mem_resource
decl_stmt|;
name|int
name|mem_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq_resource
decl_stmt|;
name|int
name|irq_rid
decl_stmt|;
name|void
modifier|*
name|ihl
decl_stmt|;
name|bus_dma_tag_t
name|dma_tag
decl_stmt|;
name|bus_dmamap_t
name|dma_map
decl_stmt|;
name|uint32_t
modifier|*
name|dma_mem
decl_stmt|;
name|bus_addr_t
name|dma_phys
decl_stmt|;
name|struct
name|mtx
name|mtx
decl_stmt|;
name|struct
name|task
name|card_detect_task
decl_stmt|;
name|struct
name|callout
name|card_detect_callout
decl_stmt|;
name|struct
name|mmc_host
name|mmc_host
decl_stmt|;
name|struct
name|slot
name|slot
decl_stmt|;
name|uint32_t
name|bus_busy
decl_stmt|;
name|uint32_t
name|platform_clock
decl_stmt|;
name|struct
name|mmc_request
modifier|*
name|request
decl_stmt|;
name|int
name|data_done
decl_stmt|;
name|int
name|command_done
decl_stmt|;
name|int
name|use_dma
decl_stmt|;
name|uint32_t
modifier|*
name|data_ptr
decl_stmt|;
name|uint32_t
name|data_offset
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|FSL_SDHC_RESET_DELAY
value|50
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_BASE_CLOCK_DIV
value|(2)
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_MAX_DIV
value|(FSL_SDHC_BASE_CLOCK_DIV * 256 * 16)
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_MIN_DIV
value|(FSL_SDHC_BASE_CLOCK_DIV * 2)
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_MAX_CLOCK
value|(50000000)
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_MAX_BLOCK_COUNT
value|(65535)
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_MAX_BLOCK_SIZE
value|(4096)
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_FIFO_BUF_SIZE
value|(64)
end_define

begin_comment
comment|/* Water-mark level. */
end_comment

begin_define
define|#
directive|define
name|FSL_SDHC_FIFO_BUF_WORDS
value|(FSL_SDHC_FIFO_BUF_SIZE / 4)
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_DMA_SEGMENT_SIZE
value|(1024)
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_DMA_ALIGNMENT
value|(4)
end_define

begin_define
define|#
directive|define
name|FSL_SDHC_DMA_BLOCK_SIZE
value|FSL_SDHC_MAX_BLOCK_SIZE
end_define

begin_comment
comment|/*  * Offsets of SD HC registers  */
end_comment

begin_enum
enum|enum
name|sdhc_reg_off
block|{
name|SDHC_DSADDR
init|=
literal|0x000
block|,
name|SDHC_BLKATTR
init|=
literal|0x004
block|,
name|SDHC_CMDARG
init|=
literal|0x008
block|,
name|SDHC_XFERTYP
init|=
literal|0x00c
block|,
name|SDHC_CMDRSP0
init|=
literal|0x010
block|,
name|SDHC_CMDRSP1
init|=
literal|0x014
block|,
name|SDHC_CMDRSP2
init|=
literal|0x018
block|,
name|SDHC_CMDRSP3
init|=
literal|0x01c
block|,
name|SDHC_DATPORT
init|=
literal|0x020
block|,
name|SDHC_PRSSTAT
init|=
literal|0x024
block|,
name|SDHC_PROCTL
init|=
literal|0x028
block|,
name|SDHC_SYSCTL
init|=
literal|0x02c
block|,
name|SDHC_IRQSTAT
init|=
literal|0x030
block|,
name|SDHC_IRQSTATEN
init|=
literal|0x034
block|,
name|SDHC_IRQSIGEN
init|=
literal|0x038
block|,
name|SDHC_AUTOC12ERR
init|=
literal|0x03c
block|,
name|SDHC_HOSTCAPBLT
init|=
literal|0x040
block|,
name|SDHC_WML
init|=
literal|0x044
block|,
name|SDHC_FEVT
init|=
literal|0x050
block|,
name|SDHC_HOSTVER
init|=
literal|0x0fc
block|,
name|SDHC_DCR
init|=
literal|0x40c
block|}
enum|;
end_enum

begin_enum
enum|enum
name|sysctl_bit
block|{
name|SYSCTL_INITA
init|=
literal|0x08000000
block|,
name|SYSCTL_RSTD
init|=
literal|0x04000000
block|,
name|SYSCTL_RSTC
init|=
literal|0x02000000
block|,
name|SYSCTL_RSTA
init|=
literal|0x01000000
block|,
name|SYSCTL_DTOCV
init|=
literal|0x000f0000
block|,
name|SYSCTL_SDCLKFS
init|=
literal|0x0000ff00
block|,
name|SYSCTL_DVS
init|=
literal|0x000000f0
block|,
name|SYSCTL_PEREN
init|=
literal|0x00000004
block|,
name|SYSCTL_HCKEN
init|=
literal|0x00000002
block|,
name|SYSCTL_IPGEN
init|=
literal|0x00000001
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|HEX_LEFT_SHIFT
parameter_list|(
name|x
parameter_list|)
value|(4 * x)
end_define

begin_enum
enum|enum
name|sysctl_shift
block|{
name|SHIFT_DTOCV
init|=
name|HEX_LEFT_SHIFT
argument_list|(
literal|4
argument_list|)
block|,
name|SHIFT_SDCLKFS
init|=
name|HEX_LEFT_SHIFT
argument_list|(
literal|2
argument_list|)
block|,
name|SHIFT_DVS
init|=
name|HEX_LEFT_SHIFT
argument_list|(
literal|1
argument_list|)
block|}
enum|;
end_enum

begin_enum
enum|enum
name|proctl_bit
block|{
name|PROCTL_WECRM
init|=
literal|0x04000000
block|,
name|PROCTL_WECINS
init|=
literal|0x02000000
block|,
name|PROCTL_WECINT
init|=
literal|0x01000000
block|,
name|PROCTL_RWCTL
init|=
literal|0x00040000
block|,
name|PROCTL_CREQ
init|=
literal|0x00020000
block|,
name|PROCTL_SABGREQ
init|=
literal|0x00010000
block|,
name|PROCTL_CDSS
init|=
literal|0x00000080
block|,
name|PROCTL_CDTL
init|=
literal|0x00000040
block|,
name|PROCTL_EMODE
init|=
literal|0x00000030
block|,
name|PROCTL_D3CD
init|=
literal|0x00000008
block|,
name|PROCTL_DTW
init|=
literal|0x00000006
block|}
enum|;
end_enum

begin_enum
enum|enum
name|dtw
block|{
name|DTW_1
init|=
literal|0x00000000
block|,
name|DTW_4
init|=
literal|0x00000002
block|,
name|DTW_8
init|=
literal|0x00000004
block|}
enum|;
end_enum

begin_enum
enum|enum
name|prsstat_bit
block|{
name|PRSSTAT_DLSL
init|=
literal|0xff000000
block|,
name|PRSSTAT_CLSL
init|=
literal|0x00800000
block|,
name|PRSSTAT_WPSPL
init|=
literal|0x00080000
block|,
name|PRSSTAT_CDPL
init|=
literal|0x00040000
block|,
name|PRSSTAT_CINS
init|=
literal|0x00010000
block|,
name|PRSSTAT_BREN
init|=
literal|0x00000800
block|,
name|PRSSTAT_BWEN
init|=
literal|0x00000400
block|,
name|PRSSTAT_RTA
init|=
literal|0x00000200
block|,
name|PRSSTAT_WTA
init|=
literal|0x00000100
block|,
name|PRSSTAT_SDOFF
init|=
literal|0x00000080
block|,
name|PRSSTAT_PEROFF
init|=
literal|0x00000040
block|,
name|PRSSTAT_HCKOFF
init|=
literal|0x00000020
block|,
name|PRSSTAT_IPGOFF
init|=
literal|0x00000010
block|,
name|PRSSTAT_DLA
init|=
literal|0x00000004
block|,
name|PRSSTAT_CDIHB
init|=
literal|0x00000002
block|,
name|PRSSTAT_CIHB
init|=
literal|0x00000001
block|}
enum|;
end_enum

begin_enum
enum|enum
name|irq_bits
block|{
name|IRQ_DMAE
init|=
literal|0x10000000
block|,
name|IRQ_AC12E
init|=
literal|0x01000000
block|,
name|IRQ_DEBE
init|=
literal|0x00400000
block|,
name|IRQ_DCE
init|=
literal|0x00200000
block|,
name|IRQ_DTOE
init|=
literal|0x00100000
block|,
name|IRQ_CIE
init|=
literal|0x00080000
block|,
name|IRQ_CEBE
init|=
literal|0x00040000
block|,
name|IRQ_CCE
init|=
literal|0x00020000
block|,
name|IRQ_CTOE
init|=
literal|0x00010000
block|,
name|IRQ_CINT
init|=
literal|0x00000100
block|,
name|IRQ_CRM
init|=
literal|0x00000080
block|,
name|IRQ_CINS
init|=
literal|0x00000040
block|,
name|IRQ_BRR
init|=
literal|0x00000020
block|,
name|IRQ_BWR
init|=
literal|0x00000010
block|,
name|IRQ_DINT
init|=
literal|0x00000008
block|,
name|IRQ_BGE
init|=
literal|0x00000004
block|,
name|IRQ_TC
init|=
literal|0x00000002
block|,
name|IRQ_CC
init|=
literal|0x00000001
block|}
enum|;
end_enum

begin_enum
enum|enum
name|irq_masks
block|{
name|IRQ_ERROR_DATA_MASK
init|=
name|IRQ_DMAE
operator||
name|IRQ_DEBE
operator||
name|IRQ_DCE
operator||
name|IRQ_DTOE
block|,
name|IRQ_ERROR_CMD_MASK
init|=
name|IRQ_AC12E
operator||
name|IRQ_CIE
operator||
name|IRQ_CTOE
operator||
name|IRQ_CCE
operator||
name|IRQ_CEBE
block|}
enum|;
end_enum

begin_enum
enum|enum
name|dcr_bits
block|{
name|DCR_PRI
init|=
literal|0x0000c000
block|,
name|DCR_SNOOP
init|=
literal|0x00000040
block|,
name|DCR_AHB2MAG_BYPASS
init|=
literal|0x00000020
block|,
name|DCR_RD_SAFE
init|=
literal|0x00000004
block|,
name|DCR_RD_PFE
init|=
literal|0x00000002
block|,
name|DCR_RD_PF_SIZE
init|=
literal|0x00000001
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DCR_PRI_SHIFT
value|(14)
end_define

begin_enum
enum|enum
name|xfertyp_bits
block|{
name|XFERTYP_CMDINX
init|=
literal|0x3f000000
block|,
name|XFERTYP_CMDTYP
init|=
literal|0x00c00000
block|,
name|XFERTYP_DPSEL
init|=
literal|0x00200000
block|,
name|XFERTYP_CICEN
init|=
literal|0x00100000
block|,
name|XFERTYP_CCCEN
init|=
literal|0x00080000
block|,
name|XFERTYP_RSPTYP
init|=
literal|0x00030000
block|,
name|XFERTYP_MSBSEL
init|=
literal|0x00000020
block|,
name|XFERTYP_DTDSEL
init|=
literal|0x00000010
block|,
name|XFERTYP_AC12EN
init|=
literal|0x00000004
block|,
name|XFERTYP_BCEN
init|=
literal|0x00000002
block|,
name|XFERTYP_DMAEN
init|=
literal|0x00000001
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|CMDINX_SHIFT
value|(24)
end_define

begin_enum
enum|enum
name|xfertyp_cmdtyp
block|{
name|CMDTYP_NORMAL
init|=
literal|0x00000000
block|,
name|CMDYTP_SUSPEND
init|=
literal|0x00400000
block|,
name|CMDTYP_RESUME
init|=
literal|0x00800000
block|,
name|CMDTYP_ABORT
init|=
literal|0x00c00000
block|}
enum|;
end_enum

begin_enum
enum|enum
name|xfertyp_rsptyp
block|{
name|RSPTYP_NONE
init|=
literal|0x00000000
block|,
name|RSPTYP_136
init|=
literal|0x00010000
block|,
name|RSPTYP_48
init|=
literal|0x00020000
block|,
name|RSPTYP_48_BUSY
init|=
literal|0x00030000
block|}
enum|;
end_enum

begin_enum
enum|enum
name|blkattr_bits
block|{
name|BLKATTR_BLKSZE
init|=
literal|0x00001fff
block|,
name|BLKATTR_BLKCNT
init|=
literal|0xffff0000
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|BLKATTR_BLOCK_COUNT
parameter_list|(
name|x
parameter_list|)
value|(x<< 16)
end_define

begin_enum
enum|enum
name|wml_bits
block|{
name|WR_WML
init|=
literal|0x00ff0000
block|,
name|RD_WML
init|=
literal|0x000000ff
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|sdhc_bit_mask
block|{
name|MASK_CLOCK_CONTROL
init|=
literal|0x0000ffff
block|,
name|MASK_IRQ_ALL
init|=
name|IRQ_DMAE
operator||
name|IRQ_AC12E
operator||
name|IRQ_DEBE
operator||
name|IRQ_DCE
operator||
name|IRQ_DTOE
operator||
name|IRQ_CIE
operator||
name|IRQ_CEBE
operator||
name|IRQ_CCE
operator||
name|IRQ_CTOE
operator||
name|IRQ_CINT
operator||
name|IRQ_CRM
operator||
name|IRQ_CINS
operator||
name|IRQ_BRR
operator||
name|IRQ_BWR
operator||
name|IRQ_DINT
operator||
name|IRQ_BGE
operator||
name|IRQ_TC
operator||
name|IRQ_CC
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|sdhc_line
block|{
name|SDHC_DAT_LINE
init|=
literal|0x2
block|,
name|SDHC_CMD_LINE
init|=
literal|0x1
block|}
enum|;
end_enum

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* FSL_SDHC_H_ */
end_comment

end_unit

