begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2001 M. Warner Losh.  All Rights Reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  *	Per-slot data table.  */
end_comment

begin_struct
struct|struct
name|pcic_slot
block|{
name|int
name|offset
decl_stmt|;
comment|/* Offset value for index */
name|char
name|controller
decl_stmt|;
comment|/* Device type */
name|char
name|revision
decl_stmt|;
comment|/* Device Revision */
name|struct
name|slot
modifier|*
name|slt
decl_stmt|;
comment|/* Back ptr to slot */
name|struct
name|pcic_softc
modifier|*
name|sc
decl_stmt|;
comment|/* Back pointer to softc */
name|u_char
function_decl|(
modifier|*
name|getb
function_decl|)
parameter_list|(
name|struct
name|pcic_slot
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|putb
function_decl|)
parameter_list|(
name|struct
name|pcic_slot
modifier|*
parameter_list|,
name|int
parameter_list|,
name|u_char
parameter_list|)
function_decl|;
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|driver_intr_t
modifier|*
name|intr
decl_stmt|;
name|void
modifier|*
name|argp
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|pcic_irq_type
block|{
name|isa_parallel
init|=
literal|1
block|,
name|isa_serial
block|,
name|pci_parallel
block|,
name|pci_serial
block|}
enum|;
end_enum

begin_struct
struct|struct
name|pcic_softc
block|{
name|u_int32_t
name|slotmask
decl_stmt|;
comment|/* Mask of valid slots */
name|u_int32_t
name|flags
decl_stmt|;
comment|/* Interesting flags */
define|#
directive|define
name|PCIC_AB_POWER
value|0x00000001
comment|/* Use old A/B step power */
define|#
directive|define
name|PCIC_DF_POWER
value|0x00000002
comment|/* Uses DF step regs  */
define|#
directive|define
name|PCIC_PD_POWER
value|0x00000004
comment|/* Uses CL-PD regs  */
define|#
directive|define
name|PCIC_VG_POWER
value|0x00000008
comment|/* Uses VG power regs */
define|#
directive|define
name|PCIC_KING_POWER
value|0x00000010
comment|/* Uses IBM KING regs  */
define|#
directive|define
name|PCIC_RICOH_POWER
value|0x0000020
comment|/* Uses the ricoh power regs */
name|enum
name|pcic_irq_type
name|csc_route
decl_stmt|;
comment|/* How to route csc interrupts */
name|enum
name|pcic_irq_type
name|func_route
decl_stmt|;
comment|/* How to route function ints */
name|int
name|iorid
decl_stmt|;
comment|/* Rid of I/O region */
name|struct
name|resource
modifier|*
name|iores
decl_stmt|;
comment|/* resource for I/O region */
name|int
name|memrid
decl_stmt|;
comment|/* Memory rid */
name|struct
name|resource
modifier|*
name|memres
decl_stmt|;
comment|/* Resource for memory mapped regs */
name|int
name|irqrid
decl_stmt|;
comment|/* Irq rid */
name|struct
name|resource
modifier|*
name|irqres
decl_stmt|;
comment|/* Irq resource */
name|void
modifier|*
name|ih
decl_stmt|;
comment|/* Our interrupt handler. */
name|int
name|irq
decl_stmt|;
name|device_t
name|dev
decl_stmt|;
comment|/* Our device */
name|void
function_decl|(
modifier|*
name|slot_poll
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|struct
name|callout_handle
name|timeout_ch
decl_stmt|;
name|struct
name|pcic_slot
name|slots
index|[
name|PCIC_MAX_SLOTS
index|]
decl_stmt|;
name|int
name|cd_pending
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|devclass_t
name|pcic_devclass
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|pcic_override_irq
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|pcic_activate_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|resource
modifier|*
name|pcic_alloc_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|type
parameter_list|,
name|int
modifier|*
name|rid
parameter_list|,
name|u_long
name|start
parameter_list|,
name|u_long
name|end
parameter_list|,
name|u_long
name|count
parameter_list|,
name|u_int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pcic_attach
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pcic_clrb
parameter_list|(
name|struct
name|pcic_slot
modifier|*
name|sp
parameter_list|,
name|int
name|reg
parameter_list|,
name|unsigned
name|char
name|mask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pcic_deactivate_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pcic_dealloc
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pcic_do_stat_delta
parameter_list|(
name|struct
name|pcic_slot
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pcic_get_memory_offset
parameter_list|(
name|device_t
name|bus
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|rid
parameter_list|,
name|u_int32_t
modifier|*
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pcic_get_res_flags
parameter_list|(
name|device_t
name|bus
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|restype
parameter_list|,
name|int
name|rid
parameter_list|,
name|u_long
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|char
name|pcic_getb_io
parameter_list|(
name|struct
name|pcic_slot
modifier|*
name|sp
parameter_list|,
name|int
name|reg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pcic_putb_io
parameter_list|(
name|struct
name|pcic_slot
modifier|*
name|sp
parameter_list|,
name|int
name|reg
parameter_list|,
name|unsigned
name|char
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pcic_set_memory_offset
parameter_list|(
name|device_t
name|bus
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|rid
parameter_list|,
name|u_int32_t
name|offset
parameter_list|,
name|u_int32_t
modifier|*
name|deltap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pcic_set_res_flags
parameter_list|(
name|device_t
name|bus
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|restype
parameter_list|,
name|int
name|rid
parameter_list|,
name|u_long
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pcic_setb
parameter_list|(
name|struct
name|pcic_slot
modifier|*
name|sp
parameter_list|,
name|int
name|reg
parameter_list|,
name|unsigned
name|char
name|mask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pcic_setup_intr
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|struct
name|resource
modifier|*
name|irq
parameter_list|,
name|int
name|flags
parameter_list|,
name|driver_intr_t
modifier|*
name|intr
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pcic_teardown_intr
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|struct
name|resource
modifier|*
name|irq
parameter_list|,
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_function_decl

end_unit

