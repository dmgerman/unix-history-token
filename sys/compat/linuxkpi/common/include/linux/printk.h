begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2017 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_PRINTK_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_PRINTK_H_
end_define

begin_include
include|#
directive|include
file|<linux/kernel.h>
end_include

begin_comment
comment|/* GID printing macros */
end_comment

begin_define
define|#
directive|define
name|GID_PRINT_FMT
value|"%.4x:%.4x:%.4x:%.4x:%.4x:%.4x:%.4x:%.4x"
end_define

begin_define
define|#
directive|define
name|GID_PRINT_ARGS
parameter_list|(
name|gid_raw
parameter_list|)
value|htons(((u16 *)gid_raw)[0]), htons(((u16 *)gid_raw)[1]),\ 					htons(((u16 *)gid_raw)[2]), htons(((u16 *)gid_raw)[3]),\ 					htons(((u16 *)gid_raw)[4]), htons(((u16 *)gid_raw)[5]),\ 					htons(((u16 *)gid_raw)[6]), htons(((u16 *)gid_raw)[7])
end_define

begin_enum
enum|enum
block|{
name|DUMP_PREFIX_NONE
block|,
name|DUMP_PREFIX_ADDRESS
block|,
name|DUMP_PREFIX_OFFSET
block|}
enum|;
end_enum

begin_function
specifier|static
specifier|inline
name|void
name|print_hex_dump
parameter_list|(
specifier|const
name|char
modifier|*
name|level
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix_str
parameter_list|,
specifier|const
name|int
name|prefix_type
parameter_list|,
specifier|const
name|int
name|rowsize
parameter_list|,
specifier|const
name|int
name|groupsize
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|bool
name|ascii
parameter_list|)
block|{
typedef|typedef
specifier|const
struct|struct
block|{
name|long
name|long
name|value
decl_stmt|;
block|}
name|__packed
modifier|*
name|print_64p_t
typedef|;
typedef|typedef
specifier|const
struct|struct
block|{
name|uint32_t
name|value
decl_stmt|;
block|}
name|__packed
modifier|*
name|print_32p_t
typedef|;
typedef|typedef
specifier|const
struct|struct
block|{
name|uint16_t
name|value
decl_stmt|;
block|}
name|__packed
modifier|*
name|print_16p_t
typedef|;
specifier|const
name|void
modifier|*
name|buf_old
init|=
name|buf
decl_stmt|;
name|int
name|row
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|level
operator|!=
name|NULL
condition|)
name|printf
argument_list|(
literal|"%s"
argument_list|,
name|level
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix_str
operator|!=
name|NULL
condition|)
name|printf
argument_list|(
literal|"%s "
argument_list|,
name|prefix_str
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|prefix_type
condition|)
block|{
case|case
name|DUMP_PREFIX_ADDRESS
case|:
name|printf
argument_list|(
literal|"[%p] "
argument_list|,
name|buf
argument_list|)
expr_stmt|;
break|break;
case|case
name|DUMP_PREFIX_OFFSET
case|:
name|printf
argument_list|(
literal|"[%p] "
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
operator|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|buf
operator|-
operator|(
specifier|const
name|char
operator|*
operator|)
name|buf_old
operator|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
for|for
control|(
name|row
operator|=
literal|0
init|;
name|row
operator|!=
name|rowsize
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|groupsize
operator|==
literal|8
operator|&&
name|len
operator|>
literal|7
condition|)
block|{
name|printf
argument_list|(
literal|"%016llx "
argument_list|,
operator|(
operator|(
name|print_64p_t
operator|)
name|buf
operator|)
operator|->
name|value
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|buf
operator|+
literal|8
expr_stmt|;
name|len
operator|-=
literal|8
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupsize
operator|==
literal|4
operator|&&
name|len
operator|>
literal|3
condition|)
block|{
name|printf
argument_list|(
literal|"%08x "
argument_list|,
operator|(
operator|(
name|print_32p_t
operator|)
name|buf
operator|)
operator|->
name|value
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|buf
operator|+
literal|4
expr_stmt|;
name|len
operator|-=
literal|4
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|groupsize
operator|==
literal|2
operator|&&
name|len
operator|>
literal|1
condition|)
block|{
name|printf
argument_list|(
literal|"%04x "
argument_list|,
operator|(
operator|(
name|print_16p_t
operator|)
name|buf
operator|)
operator|->
name|value
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|buf
operator|+
literal|2
expr_stmt|;
name|len
operator|-=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|printf
argument_list|(
literal|"%02x "
argument_list|,
operator|*
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|buf
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|buf
operator|+
literal|1
expr_stmt|;
name|len
operator|--
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|print_hex_dump_bytes
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix_str
parameter_list|,
specifier|const
name|int
name|prefix_type
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|print_hex_dump
argument_list|(
name|NULL
argument_list|,
name|prefix_str
argument_list|,
name|prefix_type
argument_list|,
literal|16
argument_list|,
literal|1
argument_list|,
name|buf
argument_list|,
name|len
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|printk_ratelimited
parameter_list|(
modifier|...
parameter_list|)
value|do {		\ 	static linux_ratelimit_t __ratelimited;	\ 	if (linux_ratelimited(&__ratelimited))	\ 		printk(__VA_ARGS__);		\ } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_PRINTK_H_ */
end_comment

end_unit

