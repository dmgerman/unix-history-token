begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2016 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_CDEV_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_CDEV_H_
end_define

begin_include
include|#
directive|include
file|<linux/kobject.h>
end_include

begin_include
include|#
directive|include
file|<linux/sysfs.h>
end_include

begin_include
include|#
directive|include
file|<linux/kdev_t.h>
end_include

begin_include
include|#
directive|include
file|<linux/list.h>
end_include

begin_struct_decl
struct_decl|struct
name|file_operations
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|inode
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|module
struct_decl|;
end_struct_decl

begin_decl_stmt
specifier|extern
name|struct
name|cdevsw
name|linuxcdevsw
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|kobj_type
name|linux_cdev_ktype
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|kobj_type
name|linux_cdev_static_ktype
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|linux_cdev
block|{
name|struct
name|kobject
name|kobj
decl_stmt|;
name|struct
name|module
modifier|*
name|owner
decl_stmt|;
name|struct
name|cdev
modifier|*
name|cdev
decl_stmt|;
name|dev_t
name|dev
decl_stmt|;
specifier|const
name|struct
name|file_operations
modifier|*
name|ops
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|void
name|cdev_init
parameter_list|(
name|struct
name|linux_cdev
modifier|*
name|cdev
parameter_list|,
specifier|const
name|struct
name|file_operations
modifier|*
name|ops
parameter_list|)
block|{
name|kobject_init
argument_list|(
operator|&
name|cdev
operator|->
name|kobj
argument_list|,
operator|&
name|linux_cdev_static_ktype
argument_list|)
expr_stmt|;
name|cdev
operator|->
name|ops
operator|=
name|ops
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|linux_cdev
modifier|*
name|cdev_alloc
parameter_list|(
name|void
parameter_list|)
block|{
name|struct
name|linux_cdev
modifier|*
name|cdev
decl_stmt|;
name|cdev
operator|=
name|kzalloc
argument_list|(
sizeof|sizeof
argument_list|(
expr|struct
name|linux_cdev
argument_list|)
argument_list|,
name|M_WAITOK
argument_list|)
expr_stmt|;
if|if
condition|(
name|cdev
condition|)
name|kobject_init
argument_list|(
operator|&
name|cdev
operator|->
name|kobj
argument_list|,
operator|&
name|linux_cdev_ktype
argument_list|)
expr_stmt|;
return|return
operator|(
name|cdev
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cdev_put
parameter_list|(
name|struct
name|linux_cdev
modifier|*
name|p
parameter_list|)
block|{
name|kobject_put
argument_list|(
operator|&
name|p
operator|->
name|kobj
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|cdev_add
parameter_list|(
name|struct
name|linux_cdev
modifier|*
name|cdev
parameter_list|,
name|dev_t
name|dev
parameter_list|,
name|unsigned
name|count
parameter_list|)
block|{
name|struct
name|make_dev_args
name|args
decl_stmt|;
name|int
name|error
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|1
condition|)
return|return
operator|(
operator|-
name|EINVAL
operator|)
return|;
name|cdev
operator|->
name|dev
operator|=
name|dev
expr_stmt|;
comment|/* Setup arguments for make_dev_s() */
name|make_dev_args_init
argument_list|(
operator|&
name|args
argument_list|)
expr_stmt|;
name|args
operator|.
name|mda_devsw
operator|=
operator|&
name|linuxcdevsw
expr_stmt|;
name|args
operator|.
name|mda_uid
operator|=
literal|0
expr_stmt|;
name|args
operator|.
name|mda_gid
operator|=
literal|0
expr_stmt|;
name|args
operator|.
name|mda_mode
operator|=
literal|0700
expr_stmt|;
name|args
operator|.
name|mda_si_drv1
operator|=
name|cdev
expr_stmt|;
name|error
operator|=
name|make_dev_s
argument_list|(
operator|&
name|args
argument_list|,
operator|&
name|cdev
operator|->
name|cdev
argument_list|,
literal|"%s"
argument_list|,
name|kobject_name
argument_list|(
operator|&
name|cdev
operator|->
name|kobj
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
return|return
operator|(
operator|-
name|error
operator|)
return|;
name|kobject_get
argument_list|(
name|cdev
operator|->
name|kobj
operator|.
name|parent
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|cdev_add_ext
parameter_list|(
name|struct
name|linux_cdev
modifier|*
name|cdev
parameter_list|,
name|dev_t
name|dev
parameter_list|,
name|uid_t
name|uid
parameter_list|,
name|gid_t
name|gid
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|struct
name|make_dev_args
name|args
decl_stmt|;
name|int
name|error
decl_stmt|;
name|cdev
operator|->
name|dev
operator|=
name|dev
expr_stmt|;
comment|/* Setup arguments for make_dev_s() */
name|make_dev_args_init
argument_list|(
operator|&
name|args
argument_list|)
expr_stmt|;
name|args
operator|.
name|mda_devsw
operator|=
operator|&
name|linuxcdevsw
expr_stmt|;
name|args
operator|.
name|mda_uid
operator|=
name|uid
expr_stmt|;
name|args
operator|.
name|mda_gid
operator|=
name|gid
expr_stmt|;
name|args
operator|.
name|mda_mode
operator|=
name|mode
expr_stmt|;
name|args
operator|.
name|mda_si_drv1
operator|=
name|cdev
expr_stmt|;
name|error
operator|=
name|make_dev_s
argument_list|(
operator|&
name|args
argument_list|,
operator|&
name|cdev
operator|->
name|cdev
argument_list|,
literal|"%s/%d"
argument_list|,
name|kobject_name
argument_list|(
operator|&
name|cdev
operator|->
name|kobj
argument_list|)
argument_list|,
name|MINOR
argument_list|(
name|dev
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
return|return
operator|(
operator|-
name|error
operator|)
return|;
name|kobject_get
argument_list|(
name|cdev
operator|->
name|kobj
operator|.
name|parent
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cdev_del
parameter_list|(
name|struct
name|linux_cdev
modifier|*
name|cdev
parameter_list|)
block|{
if|if
condition|(
name|cdev
operator|->
name|cdev
condition|)
block|{
name|destroy_dev
argument_list|(
name|cdev
operator|->
name|cdev
argument_list|)
expr_stmt|;
name|cdev
operator|->
name|cdev
operator|=
name|NULL
expr_stmt|;
block|}
name|kobject_put
argument_list|(
operator|&
name|cdev
operator|->
name|kobj
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|struct
name|linux_cdev
modifier|*
name|linux_find_cdev
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|unsigned
name|major
parameter_list|,
name|unsigned
name|minor
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|cdev
value|linux_cdev
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_CDEV_H_ */
end_comment

end_unit

