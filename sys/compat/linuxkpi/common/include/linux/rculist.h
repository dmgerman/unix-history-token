begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2015 FranÃ§ois Tigeot  * Copyright (c) 2016-2017 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_RCULIST_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_RCULIST_H_
end_define

begin_include
include|#
directive|include
file|<linux/list.h>
end_include

begin_include
include|#
directive|include
file|<linux/rcupdate.h>
end_include

begin_define
define|#
directive|define
name|hlist_first_rcu
parameter_list|(
name|head
parameter_list|)
value|(*((struct hlist_node **)(&(head)->first)))
end_define

begin_define
define|#
directive|define
name|hlist_next_rcu
parameter_list|(
name|node
parameter_list|)
value|(*((struct hlist_node **)(&(node)->next)))
end_define

begin_define
define|#
directive|define
name|hlist_pprev_rcu
parameter_list|(
name|node
parameter_list|)
value|(*((struct hlist_node **)((node)->pprev)))
end_define

begin_function
specifier|static
specifier|inline
name|void
name|hlist_add_behind_rcu
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|,
name|struct
name|hlist_node
modifier|*
name|prev
parameter_list|)
block|{
name|n
operator|->
name|next
operator|=
name|prev
operator|->
name|next
expr_stmt|;
name|n
operator|->
name|pprev
operator|=
operator|&
name|prev
operator|->
name|next
expr_stmt|;
name|rcu_assign_pointer
argument_list|(
name|hlist_next_rcu
argument_list|(
name|prev
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|->
name|next
condition|)
name|n
operator|->
name|next
operator|->
name|pprev
operator|=
operator|&
name|n
operator|->
name|next
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|hlist_for_each_entry_rcu
parameter_list|(
name|pos
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|hlist_for_each_entry(pos, head, member)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|hlist_del_rcu
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|)
block|{
name|struct
name|hlist_node
modifier|*
name|next
init|=
name|n
operator|->
name|next
decl_stmt|;
name|struct
name|hlist_node
modifier|*
modifier|*
name|pprev
init|=
name|n
operator|->
name|pprev
decl_stmt|;
name|WRITE_ONCE
argument_list|(
operator|*
name|pprev
argument_list|,
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
condition|)
name|next
operator|->
name|pprev
operator|=
name|pprev
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_add_head_rcu
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|,
name|struct
name|hlist_head
modifier|*
name|h
parameter_list|)
block|{
name|struct
name|hlist_node
modifier|*
name|first
init|=
name|h
operator|->
name|first
decl_stmt|;
name|n
operator|->
name|next
operator|=
name|first
expr_stmt|;
name|n
operator|->
name|pprev
operator|=
operator|&
name|h
operator|->
name|first
expr_stmt|;
name|rcu_assign_pointer
argument_list|(
name|hlist_first_rcu
argument_list|(
name|h
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
name|first
operator|->
name|pprev
operator|=
operator|&
name|n
operator|->
name|next
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_del_init_rcu
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hlist_unhashed
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|hlist_del_rcu
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|n
operator|->
name|pprev
operator|=
name|NULL
expr_stmt|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_RCULIST_H_ */
end_comment

end_unit

