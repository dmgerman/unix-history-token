begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2017 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_SLAB_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_SLAB_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<vm/uma.h>
end_include

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/gfp.h>
end_include

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_KMALLOC
argument_list|)
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|kvmalloc
parameter_list|(
name|size
parameter_list|)
value|kmalloc(size, 0)
end_define

begin_define
define|#
directive|define
name|kzalloc
parameter_list|(
name|size
parameter_list|,
name|flags
parameter_list|)
value|kmalloc(size, (flags) | __GFP_ZERO)
end_define

begin_define
define|#
directive|define
name|kzalloc_node
parameter_list|(
name|size
parameter_list|,
name|flags
parameter_list|,
name|node
parameter_list|)
value|kmalloc(size, (flags) | __GFP_ZERO)
end_define

begin_define
define|#
directive|define
name|kfree_const
parameter_list|(
name|ptr
parameter_list|)
value|kfree(ptr)
end_define

begin_define
define|#
directive|define
name|kcalloc
parameter_list|(
name|n
parameter_list|,
name|size
parameter_list|,
name|flags
parameter_list|)
value|kmalloc((n) * (size), (flags) | __GFP_ZERO)
end_define

begin_define
define|#
directive|define
name|vzalloc
parameter_list|(
name|size
parameter_list|)
value|__vmalloc(size, GFP_KERNEL | __GFP_NOWARN | __GFP_ZERO, 0)
end_define

begin_define
define|#
directive|define
name|vfree
parameter_list|(
name|arg
parameter_list|)
value|kfree(arg)
end_define

begin_define
define|#
directive|define
name|kvfree
parameter_list|(
name|arg
parameter_list|)
value|kfree(arg)
end_define

begin_define
define|#
directive|define
name|vmalloc_node
parameter_list|(
name|size
parameter_list|,
name|node
parameter_list|)
value|__vmalloc(size, GFP_KERNEL, 0)
end_define

begin_define
define|#
directive|define
name|vmalloc_user
parameter_list|(
name|size
parameter_list|)
value|__vmalloc(size, GFP_KERNEL | __GFP_ZERO, 0)
end_define

begin_define
define|#
directive|define
name|vmalloc
parameter_list|(
name|size
parameter_list|)
value|__vmalloc(size, GFP_KERNEL, 0)
end_define

begin_define
define|#
directive|define
name|__kmalloc
parameter_list|(
modifier|...
parameter_list|)
value|kmalloc(__VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|kmalloc_node
parameter_list|(
name|chunk
parameter_list|,
name|flags
parameter_list|,
name|n
parameter_list|)
value|kmalloc(chunk, flags)
end_define

begin_comment
comment|/*  * Prefix some functions with linux_ to avoid namespace conflict  * with the OpenSolaris code in the kernel.  */
end_comment

begin_define
define|#
directive|define
name|kmem_cache
value|linux_kmem_cache
end_define

begin_define
define|#
directive|define
name|kmem_cache_create
parameter_list|(
modifier|...
parameter_list|)
value|linux_kmem_cache_create(__VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|kmem_cache_alloc
parameter_list|(
modifier|...
parameter_list|)
value|linux_kmem_cache_alloc(__VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|kmem_cache_free
parameter_list|(
modifier|...
parameter_list|)
value|linux_kmem_cache_free(__VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|kmem_cache_destroy
parameter_list|(
modifier|...
parameter_list|)
value|linux_kmem_cache_destroy(__VA_ARGS__)
end_define

begin_typedef
typedef|typedef
name|void
name|linux_kmem_ctor_t
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|linux_kmem_cache
block|{
name|uma_zone_t
name|cache_zone
decl_stmt|;
name|linux_kmem_ctor_t
modifier|*
name|cache_ctor
decl_stmt|;
name|unsigned
name|cache_flags
decl_stmt|;
name|unsigned
name|cache_size
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SLAB_HWCACHE_ALIGN
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|SLAB_DESTROY_BY_RCU
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|SLAB_RECLAIM_ACCOUNT
value|(1<< 2)
end_define

begin_function
specifier|static
specifier|inline
name|gfp_t
name|linux_check_m_flags
parameter_list|(
name|gfp_t
name|flags
parameter_list|)
block|{
specifier|const
name|gfp_t
name|m
init|=
name|M_NOWAIT
operator||
name|M_WAITOK
decl_stmt|;
comment|/* make sure either M_NOWAIT or M_WAITOK is set */
if|if
condition|(
operator|(
name|flags
operator|&
name|m
operator|)
operator|==
literal|0
condition|)
name|flags
operator||=
name|M_NOWAIT
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|flags
operator|&
name|m
operator|)
operator|==
name|m
condition|)
name|flags
operator|&=
operator|~
name|M_WAITOK
expr_stmt|;
comment|/* mask away LinuxKPI specific flags */
return|return
operator|(
name|flags
operator|&
name|GFP_NATIVE_MASK
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|kmalloc
parameter_list|(
name|size_t
name|size
parameter_list|,
name|gfp_t
name|flags
parameter_list|)
block|{
return|return
operator|(
name|malloc
argument_list|(
name|size
argument_list|,
name|M_KMALLOC
argument_list|,
name|linux_check_m_flags
argument_list|(
name|flags
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|__vmalloc
parameter_list|(
name|size_t
name|size
parameter_list|,
name|gfp_t
name|flags
parameter_list|,
name|int
name|other
parameter_list|)
block|{
return|return
operator|(
name|malloc
argument_list|(
name|size
argument_list|,
name|M_KMALLOC
argument_list|,
name|linux_check_m_flags
argument_list|(
name|flags
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|kmalloc_array
parameter_list|(
name|size_t
name|n
parameter_list|,
name|size_t
name|size
parameter_list|,
name|gfp_t
name|flags
parameter_list|)
block|{
if|if
condition|(
name|size
operator|!=
literal|0
operator|&&
name|n
operator|>
operator|(
name|SIZE_MAX
operator|/
name|size
operator|)
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
return|return
operator|(
name|malloc
argument_list|(
name|n
operator|*
name|size
argument_list|,
name|M_KMALLOC
argument_list|,
name|linux_check_m_flags
argument_list|(
name|flags
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|krealloc
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|gfp_t
name|flags
parameter_list|)
block|{
return|return
operator|(
name|realloc
argument_list|(
name|ptr
argument_list|,
name|size
argument_list|,
name|M_KMALLOC
argument_list|,
name|linux_check_m_flags
argument_list|(
name|flags
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|kfree
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|free
argument_list|(
name|__DECONST
argument_list|(
name|void
operator|*
argument_list|,
name|ptr
argument_list|)
argument_list|,
name|M_KMALLOC
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
specifier|extern
name|struct
name|linux_kmem_cache
modifier|*
name|linux_kmem_cache_create
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|align
parameter_list|,
name|unsigned
name|flags
parameter_list|,
name|linux_kmem_ctor_t
modifier|*
name|ctor
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|linux_kmem_cache_alloc
parameter_list|(
name|struct
name|linux_kmem_cache
modifier|*
name|c
parameter_list|,
name|gfp_t
name|flags
parameter_list|)
block|{
return|return
operator|(
name|uma_zalloc_arg
argument_list|(
name|c
operator|->
name|cache_zone
argument_list|,
name|c
argument_list|,
name|linux_check_m_flags
argument_list|(
name|flags
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|kmem_cache_zalloc
parameter_list|(
name|struct
name|linux_kmem_cache
modifier|*
name|c
parameter_list|,
name|gfp_t
name|flags
parameter_list|)
block|{
return|return
operator|(
name|uma_zalloc_arg
argument_list|(
name|c
operator|->
name|cache_zone
argument_list|,
name|c
argument_list|,
name|linux_check_m_flags
argument_list|(
name|flags
operator||
name|M_ZERO
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function_decl
specifier|extern
name|void
name|linux_kmem_cache_free_rcu
parameter_list|(
name|struct
name|linux_kmem_cache
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|linux_kmem_cache_free
parameter_list|(
name|struct
name|linux_kmem_cache
modifier|*
name|c
parameter_list|,
name|void
modifier|*
name|m
parameter_list|)
block|{
if|if
condition|(
name|unlikely
argument_list|(
name|c
operator|->
name|cache_flags
operator|&
name|SLAB_DESTROY_BY_RCU
argument_list|)
condition|)
name|linux_kmem_cache_free_rcu
argument_list|(
name|c
argument_list|,
name|m
argument_list|)
expr_stmt|;
else|else
name|uma_zfree
argument_list|(
name|c
operator|->
name|cache_zone
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
specifier|extern
name|void
name|linux_kmem_cache_destroy
parameter_list|(
name|struct
name|linux_kmem_cache
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_SLAB_H_ */
end_comment

end_unit

