begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2014-2015 Mellanox Technologies, Ltd.  * Copyright (c) 2015 FranÃ§ois Tigeot  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_KTIME_H
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_KTIME_H
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/time.h>
end_include

begin_include
include|#
directive|include
file|<linux/jiffies.h>
end_include

begin_define
define|#
directive|define
name|ktime_get_ts
parameter_list|(
name|x
parameter_list|)
value|getnanouptime(x)
end_define

begin_comment
comment|/* time values in nanoseconds */
end_comment

begin_union
union|union
name|ktime
block|{
name|int64_t
name|tv64
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|ktime
name|ktime_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|KTIME_MAX
value|((s64)~((u64)1<< 63))
end_define

begin_define
define|#
directive|define
name|KTIME_SEC_MAX
value|(KTIME_MAX / NSEC_PER_SEC)
end_define

begin_function
specifier|static
specifier|inline
name|int64_t
name|ktime_to_ns
parameter_list|(
name|ktime_t
name|kt
parameter_list|)
block|{
return|return
name|kt
operator|.
name|tv64
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|ns_to_ktime
parameter_list|(
name|uint64_t
name|nsec
parameter_list|)
block|{
name|ktime_t
name|kt
decl_stmt|;
name|kt
operator|.
name|tv64
operator|=
name|nsec
expr_stmt|;
return|return
operator|(
name|kt
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|ktime_divns
parameter_list|(
specifier|const
name|ktime_t
name|kt
parameter_list|,
name|int64_t
name|div
parameter_list|)
block|{
return|return
name|kt
operator|.
name|tv64
operator|/
name|div
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|ktime_to_us
parameter_list|(
name|ktime_t
name|kt
parameter_list|)
block|{
return|return
name|ktime_divns
argument_list|(
name|kt
argument_list|,
name|NSEC_PER_USEC
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|ktime_to_ms
parameter_list|(
name|ktime_t
name|kt
parameter_list|)
block|{
return|return
name|ktime_divns
argument_list|(
name|kt
argument_list|,
name|NSEC_PER_MSEC
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|timeval
name|ktime_to_timeval
parameter_list|(
name|ktime_t
name|kt
parameter_list|)
block|{
return|return
name|ns_to_timeval
argument_list|(
name|kt
operator|.
name|tv64
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|ktime_add_ns
parameter_list|(
name|ktime_t
name|kt
parameter_list|,
name|int64_t
name|ns
parameter_list|)
block|{
name|ktime_t
name|res
decl_stmt|;
name|res
operator|.
name|tv64
operator|=
name|kt
operator|.
name|tv64
operator|+
name|ns
expr_stmt|;
return|return
name|kt
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|ktime_sub_ns
parameter_list|(
name|ktime_t
name|kt
parameter_list|,
name|int64_t
name|ns
parameter_list|)
block|{
name|ktime_t
name|res
decl_stmt|;
name|res
operator|.
name|tv64
operator|=
name|kt
operator|.
name|tv64
operator|-
name|ns
expr_stmt|;
return|return
name|kt
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|ktime_set
parameter_list|(
specifier|const
name|long
name|secs
parameter_list|,
specifier|const
name|unsigned
name|long
name|nsecs
parameter_list|)
block|{
name|ktime_t
name|retval
init|=
block|{
operator|(
name|s64
operator|)
name|secs
operator|*
name|NSEC_PER_SEC
operator|+
operator|(
name|s64
operator|)
name|nsecs
block|}
decl_stmt|;
return|return
operator|(
name|retval
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|ktime_sub
parameter_list|(
name|ktime_t
name|lhs
parameter_list|,
name|ktime_t
name|rhs
parameter_list|)
block|{
name|lhs
operator|.
name|tv64
operator|-=
name|rhs
operator|.
name|tv64
expr_stmt|;
return|return
operator|(
name|lhs
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|ktime_us_delta
parameter_list|(
name|ktime_t
name|later
parameter_list|,
name|ktime_t
name|earlier
parameter_list|)
block|{
name|ktime_t
name|diff
init|=
name|ktime_sub
argument_list|(
name|later
argument_list|,
name|earlier
argument_list|)
decl_stmt|;
return|return
name|ktime_to_us
argument_list|(
name|diff
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|ktime_ms_delta
parameter_list|(
name|ktime_t
name|later
parameter_list|,
name|ktime_t
name|earlier
parameter_list|)
block|{
name|ktime_t
name|diff
init|=
name|ktime_sub
argument_list|(
name|later
argument_list|,
name|earlier
argument_list|)
decl_stmt|;
return|return
name|ktime_to_ms
argument_list|(
name|diff
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|ktime_add
parameter_list|(
name|ktime_t
name|lhs
parameter_list|,
name|ktime_t
name|rhs
parameter_list|)
block|{
name|lhs
operator|.
name|tv64
operator|+=
name|rhs
operator|.
name|tv64
expr_stmt|;
return|return
operator|(
name|lhs
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|timespec_to_ktime
parameter_list|(
name|struct
name|timespec
name|ts
parameter_list|)
block|{
return|return
operator|(
name|ktime_set
argument_list|(
name|ts
operator|.
name|tv_sec
argument_list|,
name|ts
operator|.
name|tv_nsec
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|timeval_to_ktime
parameter_list|(
name|struct
name|timeval
name|tv
parameter_list|)
block|{
return|return
operator|(
name|ktime_set
argument_list|(
name|tv
operator|.
name|tv_sec
argument_list|,
name|tv
operator|.
name|tv_usec
operator|*
name|NSEC_PER_USEC
argument_list|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|ktime_to_timespec
parameter_list|(
name|kt
parameter_list|)
value|ns_to_timespec((kt).tv64)
end_define

begin_define
define|#
directive|define
name|ktime_to_timeval
parameter_list|(
name|kt
parameter_list|)
value|ns_to_timeval((kt).tv64)
end_define

begin_define
define|#
directive|define
name|ktime_to_ns
parameter_list|(
name|kt
parameter_list|)
value|((kt).tv64)
end_define

begin_function
specifier|static
specifier|inline
name|int64_t
name|ktime_get_ns
parameter_list|(
name|void
parameter_list|)
block|{
name|struct
name|timespec
name|ts
decl_stmt|;
name|ktime_t
name|kt
decl_stmt|;
name|ktime_get_ts
argument_list|(
operator|&
name|ts
argument_list|)
expr_stmt|;
name|kt
operator|=
name|timespec_to_ktime
argument_list|(
name|ts
argument_list|)
expr_stmt|;
return|return
operator|(
name|ktime_to_ns
argument_list|(
name|kt
argument_list|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|ktime_get_raw_ns
parameter_list|()
value|ktime_get_ns()
end_define

begin_function
specifier|static
specifier|inline
name|ktime_t
name|ktime_get
parameter_list|(
name|void
parameter_list|)
block|{
name|struct
name|timespec
name|ts
decl_stmt|;
name|ktime_get_ts
argument_list|(
operator|&
name|ts
argument_list|)
expr_stmt|;
return|return
operator|(
name|timespec_to_ktime
argument_list|(
name|ts
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|ktime_get_boottime
parameter_list|(
name|void
parameter_list|)
block|{
name|struct
name|timespec
name|ts
decl_stmt|;
name|nanouptime
argument_list|(
operator|&
name|ts
argument_list|)
expr_stmt|;
return|return
operator|(
name|timespec_to_ktime
argument_list|(
name|ts
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ktime_t
name|ktime_get_real
parameter_list|(
name|void
parameter_list|)
block|{
name|struct
name|timespec
name|ts
decl_stmt|;
name|nanotime
argument_list|(
operator|&
name|ts
argument_list|)
expr_stmt|;
return|return
operator|(
name|timespec_to_ktime
argument_list|(
name|ts
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_KTIME_H */
end_comment

end_unit

