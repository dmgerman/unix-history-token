begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2017 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_WW_MUTEX_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_WW_MUTEX_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_include
include|#
directive|include
file|<sys/condvar.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<linux/mutex.h>
end_include

begin_struct
struct|struct
name|ww_class
block|{
specifier|const
name|char
modifier|*
name|mutex_name
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ww_acquire_ctx
block|{ }
struct|;
end_struct

begin_struct
struct|struct
name|ww_mutex
block|{
name|struct
name|mutex
name|base
decl_stmt|;
name|struct
name|cv
name|condvar
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DEFINE_WW_CLASS
parameter_list|(
name|name
parameter_list|)
define|\
value|struct ww_class name = {				\ 		.mutex_name = mutex_name(#name "_mutex")	\ 	}
end_define

begin_define
define|#
directive|define
name|DEFINE_WW_MUTEX
parameter_list|(
name|name
parameter_list|,
name|ww_class
parameter_list|)
define|\
value|struct ww_mutex name;						\ 	static void name##_init(void *arg)				\ 	{								\ 		ww_mutex_init(&name,&ww_class);			\ 	}								\ 	SYSINIT(name, SI_SUB_LOCK, SI_ORDER_SECOND, name##_init, NULL)
end_define

begin_define
define|#
directive|define
name|ww_mutex_is_locked
parameter_list|(
name|_m
parameter_list|)
define|\
value|sx_xlocked(&(_m)->base.sx)
end_define

begin_define
define|#
directive|define
name|ww_mutex_lock_slow
parameter_list|(
name|_m
parameter_list|,
name|_x
parameter_list|)
define|\
value|ww_mutex_lock(_m, _x)
end_define

begin_define
define|#
directive|define
name|ww_mutex_lock_slow_interruptible
parameter_list|(
name|_m
parameter_list|,
name|_x
parameter_list|)
define|\
value|ww_mutex_lock_interruptible(_m, _x)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|__must_check
name|ww_mutex_trylock
parameter_list|(
name|struct
name|ww_mutex
modifier|*
name|lock
parameter_list|)
block|{
return|return
operator|(
name|mutex_trylock
argument_list|(
operator|&
name|lock
operator|->
name|base
argument_list|)
operator|)
return|;
block|}
end_function

begin_function_decl
specifier|extern
name|int
name|linux_ww_mutex_lock_sub
parameter_list|(
name|struct
name|ww_mutex
modifier|*
parameter_list|,
name|int
name|catch_signal
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|ww_mutex_lock
parameter_list|(
name|struct
name|ww_mutex
modifier|*
name|lock
parameter_list|,
name|struct
name|ww_acquire_ctx
modifier|*
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|MUTEX_SKIP
argument_list|()
condition|)
return|return
operator|(
literal|0
operator|)
return|;
elseif|else
if|if
condition|(
operator|(
expr|struct
name|thread
operator|*
operator|)
name|SX_OWNER
argument_list|(
name|lock
operator|->
name|base
operator|.
name|sx
operator|.
name|sx_lock
argument_list|)
operator|==
name|curthread
condition|)
return|return
operator|(
operator|-
name|EALREADY
operator|)
return|;
else|else
return|return
operator|(
name|linux_ww_mutex_lock_sub
argument_list|(
name|lock
argument_list|,
literal|0
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|ww_mutex_lock_interruptible
parameter_list|(
name|struct
name|ww_mutex
modifier|*
name|lock
parameter_list|,
name|struct
name|ww_acquire_ctx
modifier|*
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|MUTEX_SKIP
argument_list|()
condition|)
return|return
operator|(
literal|0
operator|)
return|;
elseif|else
if|if
condition|(
operator|(
expr|struct
name|thread
operator|*
operator|)
name|SX_OWNER
argument_list|(
name|lock
operator|->
name|base
operator|.
name|sx
operator|.
name|sx_lock
argument_list|)
operator|==
name|curthread
condition|)
return|return
operator|(
operator|-
name|EALREADY
operator|)
return|;
else|else
return|return
operator|(
name|linux_ww_mutex_lock_sub
argument_list|(
name|lock
argument_list|,
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_function_decl
specifier|extern
name|void
name|linux_ww_mutex_unlock_sub
parameter_list|(
name|struct
name|ww_mutex
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|ww_mutex_unlock
parameter_list|(
name|struct
name|ww_mutex
modifier|*
name|lock
parameter_list|)
block|{
if|if
condition|(
name|MUTEX_SKIP
argument_list|()
condition|)
return|return;
else|else
name|linux_ww_mutex_unlock_sub
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ww_mutex_destroy
parameter_list|(
name|struct
name|ww_mutex
modifier|*
name|lock
parameter_list|)
block|{
name|cv_destroy
argument_list|(
operator|&
name|lock
operator|->
name|condvar
argument_list|)
expr_stmt|;
name|mutex_destroy
argument_list|(
operator|&
name|lock
operator|->
name|base
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ww_acquire_init
parameter_list|(
name|struct
name|ww_acquire_ctx
modifier|*
name|ctx
parameter_list|,
name|struct
name|ww_class
modifier|*
name|ww_class
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ww_mutex_init
parameter_list|(
name|struct
name|ww_mutex
modifier|*
name|lock
parameter_list|,
name|struct
name|ww_class
modifier|*
name|ww_class
parameter_list|)
block|{
name|linux_mutex_init
argument_list|(
operator|&
name|lock
operator|->
name|base
argument_list|,
name|ww_class
operator|->
name|mutex_name
argument_list|,
name|SX_NOWITNESS
argument_list|)
expr_stmt|;
name|cv_init
argument_list|(
operator|&
name|lock
operator|->
name|condvar
argument_list|,
literal|"lkpi-ww"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ww_acquire_fini
parameter_list|(
name|struct
name|ww_acquire_ctx
modifier|*
name|ctx
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ww_acquire_done
parameter_list|(
name|struct
name|ww_acquire_ctx
modifier|*
name|ctx
parameter_list|)
block|{ }
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_WW_MUTEX_H_ */
end_comment

end_unit

