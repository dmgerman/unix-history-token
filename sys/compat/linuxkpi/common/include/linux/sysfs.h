begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_SYSFS_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_SYSFS_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/sysctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/errno.h>
end_include

begin_include
include|#
directive|include
file|<linux/kobject.h>
end_include

begin_struct
struct|struct
name|sysfs_ops
block|{
name|ssize_t
function_decl|(
modifier|*
name|show
function_decl|)
parameter_list|(
name|struct
name|kobject
modifier|*
parameter_list|,
name|struct
name|attribute
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|ssize_t
function_decl|(
modifier|*
name|store
function_decl|)
parameter_list|(
name|struct
name|kobject
modifier|*
parameter_list|,
name|struct
name|attribute
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|attribute_group
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|mode_t
function_decl|(
modifier|*
name|is_visible
function_decl|)
parameter_list|(
name|struct
name|kobject
modifier|*
parameter_list|,
name|struct
name|attribute
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|struct
name|attribute
modifier|*
modifier|*
name|attrs
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|__ATTR
parameter_list|(
name|_name
parameter_list|,
name|_mode
parameter_list|,
name|_show
parameter_list|,
name|_store
parameter_list|)
value|{				\ 	.attr = { .name = __stringify(_name), .mode = _mode },		\         .show = _show, .store  = _store,				\ }
end_define

begin_define
define|#
directive|define
name|__ATTR_RO
parameter_list|(
name|_name
parameter_list|)
value|__ATTR(_name, 0444, _name##_show, NULL)
end_define

begin_define
define|#
directive|define
name|__ATTR_WO
parameter_list|(
name|_name
parameter_list|)
value|__ATTR(_name, 0200, NULL, _name##_store)
end_define

begin_define
define|#
directive|define
name|__ATTR_RW
parameter_list|(
name|_name
parameter_list|)
value|__ATTR(_name, 0644, _name##_show, _name##_store)
end_define

begin_define
define|#
directive|define
name|__ATTR_NULL
value|{ .attr = { .name = NULL } }
end_define

begin_define
define|#
directive|define
name|ATTRIBUTE_GROUPS
parameter_list|(
name|_name
parameter_list|)
define|\
value|static struct attribute_group _name##_group = {			\ 		.attrs = _name##_attrs,					\ 	};								\ 	static struct attribute_group *_name##_groups[] = {		\&_name##_group,						\ 		NULL,							\ 	};
end_define

begin_comment
comment|/*  * Handle our generic '\0' terminated 'C' string.  * Two cases:  *      a variable string:  point arg1 at it, arg2 is max length.  *      a constant string:  point arg1 at it, arg2 is zero.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|sysctl_handle_attr
parameter_list|(
name|SYSCTL_HANDLER_ARGS
parameter_list|)
block|{
name|struct
name|kobject
modifier|*
name|kobj
decl_stmt|;
name|struct
name|attribute
modifier|*
name|attr
decl_stmt|;
specifier|const
name|struct
name|sysfs_ops
modifier|*
name|ops
decl_stmt|;
name|char
modifier|*
name|buf
decl_stmt|;
name|int
name|error
decl_stmt|;
name|ssize_t
name|len
decl_stmt|;
name|kobj
operator|=
name|arg1
expr_stmt|;
name|attr
operator|=
operator|(
expr|struct
name|attribute
operator|*
operator|)
operator|(
name|intptr_t
operator|)
name|arg2
expr_stmt|;
if|if
condition|(
name|kobj
operator|->
name|ktype
operator|==
name|NULL
operator|||
name|kobj
operator|->
name|ktype
operator|->
name|sysfs_ops
operator|==
name|NULL
condition|)
return|return
operator|(
name|ENODEV
operator|)
return|;
name|buf
operator|=
operator|(
name|char
operator|*
operator|)
name|get_zeroed_page
argument_list|(
name|GFP_KERNEL
argument_list|)
expr_stmt|;
if|if
condition|(
name|buf
operator|==
name|NULL
condition|)
return|return
operator|(
name|ENOMEM
operator|)
return|;
name|ops
operator|=
name|kobj
operator|->
name|ktype
operator|->
name|sysfs_ops
expr_stmt|;
if|if
condition|(
name|ops
operator|->
name|show
condition|)
block|{
name|len
operator|=
name|ops
operator|->
name|show
argument_list|(
name|kobj
argument_list|,
name|attr
argument_list|,
name|buf
argument_list|)
expr_stmt|;
comment|/* 		 * It's valid to not have a 'show' so just return an 		 * empty string. 	 	 */
if|if
condition|(
name|len
operator|<
literal|0
condition|)
block|{
name|error
operator|=
operator|-
name|len
expr_stmt|;
if|if
condition|(
name|error
operator|!=
name|EIO
condition|)
goto|goto
name|out
goto|;
name|buf
index|[
literal|0
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
condition|)
block|{
name|len
operator|--
expr_stmt|;
if|if
condition|(
name|len
operator|>=
name|PAGE_SIZE
condition|)
name|len
operator|=
name|PAGE_SIZE
operator|-
literal|1
expr_stmt|;
comment|/* Trim trailing newline. */
name|buf
index|[
name|len
index|]
operator|=
literal|'\0'
expr_stmt|;
block|}
block|}
comment|/* Leave one trailing byte to append a newline. */
name|error
operator|=
name|sysctl_handle_string
argument_list|(
name|oidp
argument_list|,
name|buf
argument_list|,
name|PAGE_SIZE
operator|-
literal|1
argument_list|,
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|0
operator|||
name|req
operator|->
name|newptr
operator|==
name|NULL
operator|||
name|ops
operator|->
name|store
operator|==
name|NULL
condition|)
goto|goto
name|out
goto|;
name|len
operator|=
name|strlcat
argument_list|(
name|buf
argument_list|,
literal|"\n"
argument_list|,
name|PAGE_SIZE
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|len
operator|<
name|PAGE_SIZE
argument_list|,
operator|(
literal|"new attribute truncated"
operator|)
argument_list|)
expr_stmt|;
name|len
operator|=
name|ops
operator|->
name|store
argument_list|(
name|kobj
argument_list|,
name|attr
argument_list|,
name|buf
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
name|error
operator|=
operator|-
name|len
expr_stmt|;
name|out
label|:
name|free_page
argument_list|(
operator|(
name|unsigned
name|long
operator|)
name|buf
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|sysfs_create_file
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
specifier|const
name|struct
name|attribute
modifier|*
name|attr
parameter_list|)
block|{
name|SYSCTL_ADD_OID
argument_list|(
name|NULL
argument_list|,
name|SYSCTL_CHILDREN
argument_list|(
name|kobj
operator|->
name|oidp
argument_list|)
argument_list|,
name|OID_AUTO
argument_list|,
name|attr
operator|->
name|name
argument_list|,
name|CTLTYPE_STRING
operator||
name|CTLFLAG_RW
operator||
name|CTLFLAG_MPSAFE
argument_list|,
name|kobj
argument_list|,
operator|(
name|uintptr_t
operator|)
name|attr
argument_list|,
name|sysctl_handle_attr
argument_list|,
literal|"A"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sysfs_remove_file
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
specifier|const
name|struct
name|attribute
modifier|*
name|attr
parameter_list|)
block|{
if|if
condition|(
name|kobj
operator|->
name|oidp
condition|)
name|sysctl_remove_name
argument_list|(
name|kobj
operator|->
name|oidp
argument_list|,
name|attr
operator|->
name|name
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sysfs_remove_group
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
specifier|const
name|struct
name|attribute_group
modifier|*
name|grp
parameter_list|)
block|{
if|if
condition|(
name|kobj
operator|->
name|oidp
condition|)
name|sysctl_remove_name
argument_list|(
name|kobj
operator|->
name|oidp
argument_list|,
name|grp
operator|->
name|name
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|sysfs_create_group
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
specifier|const
name|struct
name|attribute_group
modifier|*
name|grp
parameter_list|)
block|{
name|struct
name|attribute
modifier|*
modifier|*
name|attr
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|oidp
decl_stmt|;
name|oidp
operator|=
name|SYSCTL_ADD_NODE
argument_list|(
name|NULL
argument_list|,
name|SYSCTL_CHILDREN
argument_list|(
name|kobj
operator|->
name|oidp
argument_list|)
argument_list|,
name|OID_AUTO
argument_list|,
name|grp
operator|->
name|name
argument_list|,
name|CTLFLAG_RD
operator||
name|CTLFLAG_MPSAFE
argument_list|,
name|NULL
argument_list|,
name|grp
operator|->
name|name
argument_list|)
expr_stmt|;
for|for
control|(
name|attr
operator|=
name|grp
operator|->
name|attrs
init|;
operator|*
name|attr
operator|!=
name|NULL
condition|;
name|attr
operator|++
control|)
block|{
name|SYSCTL_ADD_OID
argument_list|(
name|NULL
argument_list|,
name|SYSCTL_CHILDREN
argument_list|(
name|oidp
argument_list|)
argument_list|,
name|OID_AUTO
argument_list|,
operator|(
operator|*
name|attr
operator|)
operator|->
name|name
argument_list|,
name|CTLTYPE_STRING
operator||
name|CTLFLAG_RW
operator||
name|CTLFLAG_MPSAFE
argument_list|,
name|kobj
argument_list|,
operator|(
name|uintptr_t
operator|)
operator|*
name|attr
argument_list|,
name|sysctl_handle_attr
argument_list|,
literal|"A"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|sysfs_create_dir
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|)
block|{
name|kobj
operator|->
name|oidp
operator|=
name|SYSCTL_ADD_NODE
argument_list|(
name|NULL
argument_list|,
name|SYSCTL_CHILDREN
argument_list|(
name|kobj
operator|->
name|parent
operator|->
name|oidp
argument_list|)
argument_list|,
name|OID_AUTO
argument_list|,
name|kobj
operator|->
name|name
argument_list|,
name|CTLFLAG_RD
operator||
name|CTLFLAG_MPSAFE
argument_list|,
name|NULL
argument_list|,
name|kobj
operator|->
name|name
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sysfs_remove_dir
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|)
block|{
if|if
condition|(
name|kobj
operator|->
name|oidp
operator|==
name|NULL
condition|)
return|return;
name|sysctl_remove_oid
argument_list|(
name|kobj
operator|->
name|oidp
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|sysfs_attr_init
parameter_list|(
name|attr
parameter_list|)
value|do {} while(0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_SYSFS_H_ */
end_comment

end_unit

