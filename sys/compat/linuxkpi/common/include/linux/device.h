begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2016 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_DEVICE_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_DEVICE_H_
end_define

begin_include
include|#
directive|include
file|<linux/err.h>
end_include

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/kobject.h>
end_include

begin_include
include|#
directive|include
file|<linux/sysfs.h>
end_include

begin_include
include|#
directive|include
file|<linux/list.h>
end_include

begin_include
include|#
directive|include
file|<linux/compiler.h>
end_include

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/module.h>
end_include

begin_include
include|#
directive|include
file|<linux/workqueue.h>
end_include

begin_include
include|#
directive|include
file|<linux/sysfs.h>
end_include

begin_include
include|#
directive|include
file|<linux/kdev_t.h>
end_include

begin_include
include|#
directive|include
file|<asm/atomic.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus.h>
end_include

begin_enum
enum|enum
name|irqreturn
block|{
name|IRQ_NONE
init|=
literal|0
block|,
name|IRQ_HANDLED
block|,
name|IRQ_WAKE_THREAD
block|, }
enum|;
end_enum

begin_typedef
typedef|typedef
name|enum
name|irqreturn
name|irqreturn_t
typedef|;
end_typedef

begin_struct
struct|struct
name|class
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|module
modifier|*
name|owner
decl_stmt|;
name|struct
name|kobject
name|kobj
decl_stmt|;
name|devclass_t
name|bsdclass
decl_stmt|;
name|void
function_decl|(
modifier|*
name|class_release
function_decl|)
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|dev_release
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|char
modifier|*
function_decl|(
modifier|*
name|devnode
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|umode_t
modifier|*
name|mode
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|device
block|{
name|struct
name|device
modifier|*
name|parent
decl_stmt|;
name|struct
name|list_head
name|irqents
decl_stmt|;
name|device_t
name|bsddev
decl_stmt|;
name|dev_t
name|devt
decl_stmt|;
name|struct
name|class
modifier|*
name|class
decl_stmt|;
name|void
function_decl|(
modifier|*
name|release
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|struct
name|kobject
name|kobj
decl_stmt|;
name|uint64_t
modifier|*
name|dma_mask
decl_stmt|;
name|void
modifier|*
name|driver_data
decl_stmt|;
name|unsigned
name|int
name|irq
decl_stmt|;
define|#
directive|define
name|LINUX_IRQ_INVALID
value|65535
name|unsigned
name|int
name|msix
decl_stmt|;
name|unsigned
name|int
name|msix_max
decl_stmt|;
specifier|const
name|struct
name|attribute_group
modifier|*
modifier|*
name|groups
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|device
name|linux_root_device
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|kobject
name|linux_class_root
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|kobj_type
name|linux_dev_ktype
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|kobj_type
name|linux_class_ktype
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|class_attribute
block|{
name|struct
name|attribute
name|attr
decl_stmt|;
name|ssize_t
function_decl|(
modifier|*
name|show
function_decl|)
parameter_list|(
name|struct
name|class
modifier|*
parameter_list|,
name|struct
name|class_attribute
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|ssize_t
function_decl|(
modifier|*
name|store
function_decl|)
parameter_list|(
name|struct
name|class
modifier|*
parameter_list|,
name|struct
name|class_attribute
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|const
name|void
modifier|*
function_decl|(
modifier|*
name|namespace
function_decl|)
parameter_list|(
name|struct
name|class
modifier|*
parameter_list|,
specifier|const
name|struct
name|class_attribute
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|CLASS_ATTR
parameter_list|(
name|_name
parameter_list|,
name|_mode
parameter_list|,
name|_show
parameter_list|,
name|_store
parameter_list|)
define|\
value|struct class_attribute class_attr_##_name =			\ 	    { { #_name, NULL, _mode }, _show, _store }
end_define

begin_struct
struct|struct
name|device_attribute
block|{
name|struct
name|attribute
name|attr
decl_stmt|;
name|ssize_t
function_decl|(
modifier|*
name|show
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
parameter_list|,
name|struct
name|device_attribute
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|ssize_t
function_decl|(
modifier|*
name|store
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
parameter_list|,
name|struct
name|device_attribute
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DEVICE_ATTR
parameter_list|(
name|_name
parameter_list|,
name|_mode
parameter_list|,
name|_show
parameter_list|,
name|_store
parameter_list|)
define|\
value|struct device_attribute dev_attr_##_name =			\ 	    { { #_name, NULL, _mode }, _show, _store }
end_define

begin_comment
comment|/* Simple class attribute that is just a static string */
end_comment

begin_struct
struct|struct
name|class_attribute_string
block|{
name|struct
name|class_attribute
name|attr
decl_stmt|;
name|char
modifier|*
name|str
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|ssize_t
name|show_class_attr_string
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|,
name|struct
name|class_attribute
modifier|*
name|attr
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
block|{
name|struct
name|class_attribute_string
modifier|*
name|cs
decl_stmt|;
name|cs
operator|=
name|container_of
argument_list|(
name|attr
argument_list|,
expr|struct
name|class_attribute_string
argument_list|,
name|attr
argument_list|)
expr_stmt|;
return|return
name|snprintf
argument_list|(
name|buf
argument_list|,
name|PAGE_SIZE
argument_list|,
literal|"%s\n"
argument_list|,
name|cs
operator|->
name|str
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Currently read-only only */
end_comment

begin_define
define|#
directive|define
name|_CLASS_ATTR_STRING
parameter_list|(
name|_name
parameter_list|,
name|_mode
parameter_list|,
name|_str
parameter_list|)
define|\
value|{ __ATTR(_name, _mode, show_class_attr_string, NULL), _str }
end_define

begin_define
define|#
directive|define
name|CLASS_ATTR_STRING
parameter_list|(
name|_name
parameter_list|,
name|_mode
parameter_list|,
name|_str
parameter_list|)
define|\
value|struct class_attribute_string class_attr_##_name = \ 		_CLASS_ATTR_STRING(_name, _mode, _str)
end_define

begin_define
define|#
directive|define
name|dev_err
parameter_list|(
name|dev
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|device_printf((dev)->bsddev, fmt, ##__VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|dev_warn
parameter_list|(
name|dev
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|device_printf((dev)->bsddev, fmt, ##__VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|dev_info
parameter_list|(
name|dev
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|device_printf((dev)->bsddev, fmt, ##__VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|dev_notice
parameter_list|(
name|dev
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|device_printf((dev)->bsddev, fmt, ##__VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|dev_printk
parameter_list|(
name|lvl
parameter_list|,
name|dev
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|device_printf((dev)->bsddev, fmt, ##__VA_ARGS__)
end_define

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|dev_get_drvdata
parameter_list|(
specifier|const
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
return|return
name|dev
operator|->
name|driver_data
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dev_set_drvdata
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|dev
operator|->
name|driver_data
operator|=
name|data
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|device
modifier|*
name|get_device
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
if|if
condition|(
name|dev
condition|)
name|kobject_get
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|)
expr_stmt|;
return|return
operator|(
name|dev
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|dev_name
parameter_list|(
specifier|const
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
return|return
name|kobject_name
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|dev_set_name
parameter_list|(
name|_dev
parameter_list|,
name|_fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|kobject_set_name(&(_dev)->kobj, (_fmt), ##__VA_ARGS__)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|put_device
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
if|if
condition|(
name|dev
condition|)
name|kobject_put
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|class_register
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|)
block|{
name|class
operator|->
name|bsdclass
operator|=
name|devclass_create
argument_list|(
name|class
operator|->
name|name
argument_list|)
expr_stmt|;
name|kobject_init
argument_list|(
operator|&
name|class
operator|->
name|kobj
argument_list|,
operator|&
name|linux_class_ktype
argument_list|)
expr_stmt|;
name|kobject_set_name
argument_list|(
operator|&
name|class
operator|->
name|kobj
argument_list|,
name|class
operator|->
name|name
argument_list|)
expr_stmt|;
name|kobject_add
argument_list|(
operator|&
name|class
operator|->
name|kobj
argument_list|,
operator|&
name|linux_class_root
argument_list|,
name|class
operator|->
name|name
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|class_unregister
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|)
block|{
name|kobject_put
argument_list|(
operator|&
name|class
operator|->
name|kobj
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|device
modifier|*
name|kobj_to_dev
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|kobj
argument_list|,
expr|struct
name|device
argument_list|,
name|kobj
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * Devices are registered and created for exporting to sysfs. Create  * implies register and register assumes the device fields have been  * setup appropriately before being called.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|device_initialize
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
name|device_t
name|bsddev
decl_stmt|;
name|bsddev
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|devt
condition|)
block|{
name|int
name|unit
init|=
name|MINOR
argument_list|(
name|dev
operator|->
name|devt
argument_list|)
decl_stmt|;
name|bsddev
operator|=
name|devclass_get_device
argument_list|(
name|dev
operator|->
name|class
operator|->
name|bsdclass
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bsddev
operator|!=
name|NULL
condition|)
name|device_set_softc
argument_list|(
name|bsddev
argument_list|,
name|dev
argument_list|)
expr_stmt|;
name|dev
operator|->
name|bsddev
operator|=
name|bsddev
expr_stmt|;
name|kobject_init
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|,
operator|&
name|linux_dev_ktype
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|device_add
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
if|if
condition|(
name|dev
operator|->
name|bsddev
operator|!=
name|NULL
condition|)
block|{
if|if
condition|(
name|dev
operator|->
name|devt
operator|==
literal|0
condition|)
name|dev
operator|->
name|devt
operator|=
name|makedev
argument_list|(
literal|0
argument_list|,
name|device_get_unit
argument_list|(
name|dev
operator|->
name|bsddev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|kobject_add
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|,
operator|&
name|dev
operator|->
name|class
operator|->
name|kobj
argument_list|,
name|dev_name
argument_list|(
name|dev
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|device_create_release
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
name|kfree
argument_list|(
name|dev
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|device
modifier|*
name|device_create_groups_vargs
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|,
name|struct
name|device
modifier|*
name|parent
parameter_list|,
name|dev_t
name|devt
parameter_list|,
name|void
modifier|*
name|drvdata
parameter_list|,
specifier|const
name|struct
name|attribute_group
modifier|*
modifier|*
name|groups
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|va_list
name|args
parameter_list|)
block|{
name|struct
name|device
modifier|*
name|dev
init|=
name|NULL
decl_stmt|;
name|int
name|retval
init|=
operator|-
name|ENODEV
decl_stmt|;
if|if
condition|(
name|class
operator|==
name|NULL
operator|||
name|IS_ERR
argument_list|(
name|class
argument_list|)
condition|)
goto|goto
name|error
goto|;
name|dev
operator|=
name|kzalloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|dev
argument_list|)
argument_list|,
name|GFP_KERNEL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dev
condition|)
block|{
name|retval
operator|=
operator|-
name|ENOMEM
expr_stmt|;
goto|goto
name|error
goto|;
block|}
name|device_initialize
argument_list|(
name|dev
argument_list|)
expr_stmt|;
name|dev
operator|->
name|devt
operator|=
name|devt
expr_stmt|;
name|dev
operator|->
name|class
operator|=
name|class
expr_stmt|;
name|dev
operator|->
name|parent
operator|=
name|parent
expr_stmt|;
name|dev
operator|->
name|groups
operator|=
name|groups
expr_stmt|;
name|dev
operator|->
name|release
operator|=
name|device_create_release
expr_stmt|;
name|dev
operator|->
name|bsddev
operator|=
name|devclass_get_device
argument_list|(
name|dev
operator|->
name|class
operator|->
name|bsdclass
argument_list|,
name|MINOR
argument_list|(
name|devt
argument_list|)
argument_list|)
expr_stmt|;
name|dev_set_drvdata
argument_list|(
name|dev
argument_list|,
name|drvdata
argument_list|)
expr_stmt|;
name|retval
operator|=
name|kobject_set_name_vargs
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|,
name|fmt
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|retval
condition|)
goto|goto
name|error
goto|;
name|retval
operator|=
name|device_add
argument_list|(
name|dev
argument_list|)
expr_stmt|;
if|if
condition|(
name|retval
condition|)
goto|goto
name|error
goto|;
return|return
name|dev
return|;
name|error
label|:
name|put_device
argument_list|(
name|dev
argument_list|)
expr_stmt|;
return|return
name|ERR_PTR
argument_list|(
name|retval
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|device
modifier|*
name|device_create_with_groups
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|,
name|struct
name|device
modifier|*
name|parent
parameter_list|,
name|dev_t
name|devt
parameter_list|,
name|void
modifier|*
name|drvdata
parameter_list|,
specifier|const
name|struct
name|attribute_group
modifier|*
modifier|*
name|groups
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|vargs
decl_stmt|;
name|struct
name|device
modifier|*
name|dev
decl_stmt|;
name|va_start
argument_list|(
name|vargs
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|dev
operator|=
name|device_create_groups_vargs
argument_list|(
name|class
argument_list|,
name|parent
argument_list|,
name|devt
argument_list|,
name|drvdata
argument_list|,
name|groups
argument_list|,
name|fmt
argument_list|,
name|vargs
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|vargs
argument_list|)
expr_stmt|;
return|return
name|dev
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|device_register
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
name|device_t
name|bsddev
decl_stmt|;
name|int
name|unit
decl_stmt|;
name|bsddev
operator|=
name|NULL
expr_stmt|;
name|unit
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|dev
operator|->
name|devt
condition|)
block|{
name|unit
operator|=
name|MINOR
argument_list|(
name|dev
operator|->
name|devt
argument_list|)
expr_stmt|;
name|bsddev
operator|=
name|devclass_get_device
argument_list|(
name|dev
operator|->
name|class
operator|->
name|bsdclass
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dev
operator|->
name|parent
operator|==
name|NULL
condition|)
block|{
name|bsddev
operator|=
name|devclass_get_device
argument_list|(
name|dev
operator|->
name|class
operator|->
name|bsdclass
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bsddev
operator|==
name|NULL
operator|&&
name|dev
operator|->
name|parent
operator|!=
name|NULL
condition|)
block|{
name|bsddev
operator|=
name|device_add_child
argument_list|(
name|dev
operator|->
name|parent
operator|->
name|bsddev
argument_list|,
name|dev
operator|->
name|class
operator|->
name|kobj
operator|.
name|name
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bsddev
operator|!=
name|NULL
condition|)
block|{
if|if
condition|(
name|dev
operator|->
name|devt
operator|==
literal|0
condition|)
name|dev
operator|->
name|devt
operator|=
name|makedev
argument_list|(
literal|0
argument_list|,
name|device_get_unit
argument_list|(
name|bsddev
argument_list|)
argument_list|)
expr_stmt|;
name|device_set_softc
argument_list|(
name|bsddev
argument_list|,
name|dev
argument_list|)
expr_stmt|;
block|}
name|dev
operator|->
name|bsddev
operator|=
name|bsddev
expr_stmt|;
name|kobject_init
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|,
operator|&
name|linux_dev_ktype
argument_list|)
expr_stmt|;
name|kobject_add
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|,
operator|&
name|dev
operator|->
name|class
operator|->
name|kobj
argument_list|,
name|dev_name
argument_list|(
name|dev
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|device_unregister
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
name|device_t
name|bsddev
decl_stmt|;
name|bsddev
operator|=
name|dev
operator|->
name|bsddev
expr_stmt|;
name|dev
operator|->
name|bsddev
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|bsddev
operator|!=
name|NULL
condition|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|Giant
argument_list|)
expr_stmt|;
name|device_delete_child
argument_list|(
name|device_get_parent
argument_list|(
name|bsddev
argument_list|)
argument_list|,
name|bsddev
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|Giant
argument_list|)
expr_stmt|;
block|}
name|put_device
argument_list|(
name|dev
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|device_del
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
name|device_t
name|bsddev
decl_stmt|;
name|bsddev
operator|=
name|dev
operator|->
name|bsddev
expr_stmt|;
name|dev
operator|->
name|bsddev
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|bsddev
operator|!=
name|NULL
condition|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|Giant
argument_list|)
expr_stmt|;
name|device_delete_child
argument_list|(
name|device_get_parent
argument_list|(
name|bsddev
argument_list|)
argument_list|,
name|bsddev
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|Giant
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function_decl
name|struct
name|device
modifier|*
name|device_create
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|,
name|struct
name|device
modifier|*
name|parent
parameter_list|,
name|dev_t
name|devt
parameter_list|,
name|void
modifier|*
name|drvdata
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|device_destroy
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|,
name|dev_t
name|devt
parameter_list|)
block|{
name|device_t
name|bsddev
decl_stmt|;
name|int
name|unit
decl_stmt|;
name|unit
operator|=
name|MINOR
argument_list|(
name|devt
argument_list|)
expr_stmt|;
name|bsddev
operator|=
name|devclass_get_device
argument_list|(
name|class
operator|->
name|bsdclass
argument_list|,
name|unit
argument_list|)
expr_stmt|;
if|if
condition|(
name|bsddev
operator|!=
name|NULL
condition|)
name|device_unregister
argument_list|(
name|device_get_softc
argument_list|(
name|bsddev
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|linux_class_kfree
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|)
block|{
name|kfree
argument_list|(
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|class
modifier|*
name|class_create
parameter_list|(
name|struct
name|module
modifier|*
name|owner
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|struct
name|class
modifier|*
name|class
decl_stmt|;
name|int
name|error
decl_stmt|;
name|class
operator|=
name|kzalloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|class
argument_list|)
argument_list|,
name|M_WAITOK
argument_list|)
expr_stmt|;
name|class
operator|->
name|owner
operator|=
name|owner
expr_stmt|;
name|class
operator|->
name|name
operator|=
name|name
expr_stmt|;
name|class
operator|->
name|class_release
operator|=
name|linux_class_kfree
expr_stmt|;
name|error
operator|=
name|class_register
argument_list|(
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|kfree
argument_list|(
name|class
argument_list|)
expr_stmt|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
return|return
operator|(
name|class
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|class_destroy
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|)
block|{
if|if
condition|(
name|class
operator|==
name|NULL
condition|)
return|return;
name|class_unregister
argument_list|(
name|class
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|device_create_file
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
specifier|const
name|struct
name|device_attribute
modifier|*
name|attr
parameter_list|)
block|{
if|if
condition|(
name|dev
condition|)
return|return
name|sysfs_create_file
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|,
operator|&
name|attr
operator|->
name|attr
argument_list|)
return|;
return|return
operator|-
name|EINVAL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|device_remove_file
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
specifier|const
name|struct
name|device_attribute
modifier|*
name|attr
parameter_list|)
block|{
if|if
condition|(
name|dev
condition|)
name|sysfs_remove_file
argument_list|(
operator|&
name|dev
operator|->
name|kobj
argument_list|,
operator|&
name|attr
operator|->
name|attr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|class_create_file
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|,
specifier|const
name|struct
name|class_attribute
modifier|*
name|attr
parameter_list|)
block|{
if|if
condition|(
name|class
condition|)
return|return
name|sysfs_create_file
argument_list|(
operator|&
name|class
operator|->
name|kobj
argument_list|,
operator|&
name|attr
operator|->
name|attr
argument_list|)
return|;
return|return
operator|-
name|EINVAL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|class_remove_file
parameter_list|(
name|struct
name|class
modifier|*
name|class
parameter_list|,
specifier|const
name|struct
name|class_attribute
modifier|*
name|attr
parameter_list|)
block|{
if|if
condition|(
name|class
condition|)
name|sysfs_remove_file
argument_list|(
operator|&
name|class
operator|->
name|kobj
argument_list|,
operator|&
name|attr
operator|->
name|attr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|dev_to_node
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function_decl
name|char
modifier|*
name|kvasprintf
parameter_list|(
name|gfp_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|kasprintf
parameter_list|(
name|gfp_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_DEVICE_H_ */
end_comment

end_unit

