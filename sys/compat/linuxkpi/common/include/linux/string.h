begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2017 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_STRING_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_STRING_H_
end_define

begin_include
include|#
directive|include
file|<sys/ctype.h>
end_include

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/gfp.h>
end_include

begin_include
include|#
directive|include
file|<linux/slab.h>
end_include

begin_include
include|#
directive|include
file|<linux/uaccess.h>
end_include

begin_include
include|#
directive|include
file|<linux/err.h>
end_include

begin_include
include|#
directive|include
file|<sys/libkern.h>
end_include

begin_define
define|#
directive|define
name|strnicmp
parameter_list|(
modifier|...
parameter_list|)
value|strncasecmp(__VA_ARGS__)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|match_string
parameter_list|(
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|table
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|!=
name|n
operator|&&
name|table
index|[
name|i
index|]
operator|!=
name|NULL
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|table
index|[
name|i
index|]
argument_list|,
name|key
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|i
operator|)
return|;
block|}
return|return
operator|(
operator|-
name|EINVAL
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|memdup_user
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|void
modifier|*
name|retval
decl_stmt|;
name|int
name|error
decl_stmt|;
name|retval
operator|=
name|malloc
argument_list|(
name|len
argument_list|,
name|M_KMALLOC
argument_list|,
name|M_WAITOK
argument_list|)
expr_stmt|;
name|error
operator|=
name|linux_copyin
argument_list|(
name|ptr
argument_list|,
name|retval
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|!=
literal|0
condition|)
block|{
name|free
argument_list|(
name|retval
argument_list|,
name|M_KMALLOC
argument_list|)
expr_stmt|;
return|return
operator|(
name|ERR_PTR
argument_list|(
name|error
argument_list|)
operator|)
return|;
block|}
return|return
operator|(
name|retval
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|kmemdup
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|len
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
block|{
name|void
modifier|*
name|dst
decl_stmt|;
name|dst
operator|=
name|kmalloc
argument_list|(
name|len
argument_list|,
name|gfp
argument_list|)
expr_stmt|;
if|if
condition|(
name|dst
operator|!=
name|NULL
condition|)
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
operator|(
name|dst
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|kstrdup
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
block|{
name|char
modifier|*
name|retval
decl_stmt|;
name|size_t
name|len
decl_stmt|;
name|len
operator|=
name|strlen
argument_list|(
name|string
argument_list|)
operator|+
literal|1
expr_stmt|;
name|retval
operator|=
name|kmalloc
argument_list|(
name|len
argument_list|,
name|gfp
argument_list|)
expr_stmt|;
if|if
condition|(
name|retval
operator|!=
name|NULL
condition|)
name|memcpy
argument_list|(
name|retval
argument_list|,
name|string
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
operator|(
name|retval
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|kstrndup
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|,
name|size_t
name|len
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
block|{
name|char
modifier|*
name|retval
decl_stmt|;
name|retval
operator|=
name|kmalloc
argument_list|(
name|len
operator|+
literal|1
argument_list|,
name|gfp
argument_list|)
expr_stmt|;
if|if
condition|(
name|retval
operator|!=
name|NULL
condition|)
name|strncpy
argument_list|(
name|retval
argument_list|,
name|string
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
operator|(
name|retval
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|kstrdup_const
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
block|{
return|return
operator|(
name|kmemdup
argument_list|(
name|src
argument_list|,
name|strlen
argument_list|(
name|src
argument_list|)
operator|+
literal|1
argument_list|,
name|gfp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|skip_spaces
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
while|while
condition|(
name|isspace
argument_list|(
operator|*
name|str
argument_list|)
condition|)
operator|++
name|str
expr_stmt|;
return|return
operator|(
name|__DECONST
argument_list|(
name|char
operator|*
argument_list|,
name|str
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|memchr_inv
parameter_list|(
specifier|const
name|void
modifier|*
name|start
parameter_list|,
name|int
name|c
parameter_list|,
name|size_t
name|length
parameter_list|)
block|{
specifier|const
name|u8
modifier|*
name|ptr
decl_stmt|;
specifier|const
name|u8
modifier|*
name|end
decl_stmt|;
name|u8
name|ch
decl_stmt|;
name|ch
operator|=
name|c
expr_stmt|;
name|ptr
operator|=
name|start
expr_stmt|;
name|end
operator|=
name|ptr
operator|+
name|length
expr_stmt|;
while|while
condition|(
name|ptr
operator|!=
name|end
condition|)
block|{
if|if
condition|(
operator|*
name|ptr
operator|!=
name|ch
condition|)
return|return
operator|(
name|__DECONST
argument_list|(
name|void
operator|*
argument_list|,
name|ptr
argument_list|)
operator|)
return|;
name|ptr
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_STRING_H_ */
end_comment

end_unit

