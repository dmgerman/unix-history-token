begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2016 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_LIST_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_LIST_H_
end_define

begin_comment
comment|/*  * Since LIST_HEAD conflicts with the linux definition we must include any  * FreeBSD header which requires it here so it is resolved with the correct  * definition prior to the undef.  */
end_comment

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<sys/cpuset.h>
end_include

begin_include
include|#
directive|include
file|<sys/jail.h>
end_include

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_include
include|#
directive|include
file|<sys/vnode.h>
end_include

begin_include
include|#
directive|include
file|<sys/conf.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/mbuf.h>
end_include

begin_include
include|#
directive|include
file|<net/bpf.h>
end_include

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_include
include|#
directive|include
file|<net/if_var.h>
end_include

begin_include
include|#
directive|include
file|<net/if_types.h>
end_include

begin_include
include|#
directive|include
file|<net/if_media.h>
end_include

begin_include
include|#
directive|include
file|<net/vnet.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in_pcb.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in_var.h>
end_include

begin_include
include|#
directive|include
file|<netinet/tcp_lro.h>
end_include

begin_include
include|#
directive|include
file|<netinet6/in6_var.h>
end_include

begin_include
include|#
directive|include
file|<netinet6/nd6.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm_object.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|prefetch
end_ifndef

begin_define
define|#
directive|define
name|prefetch
parameter_list|(
name|x
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|LINUX_LIST_HEAD_INIT
parameter_list|(
name|name
parameter_list|)
value|{&(name),&(name) }
end_define

begin_define
define|#
directive|define
name|LINUX_LIST_HEAD
parameter_list|(
name|name
parameter_list|)
define|\
value|struct list_head name = LINUX_LIST_HEAD_INIT(name)
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|LIST_HEAD_DEF
end_ifndef

begin_define
define|#
directive|define
name|LIST_HEAD_DEF
end_define

begin_struct
struct|struct
name|list_head
block|{
name|struct
name|list_head
modifier|*
name|next
decl_stmt|;
name|struct
name|list_head
modifier|*
name|prev
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|void
name|INIT_LIST_HEAD
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|)
block|{
name|list
operator|->
name|next
operator|=
name|list
operator|->
name|prev
operator|=
name|list
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|list_empty
parameter_list|(
specifier|const
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
return|return
operator|(
name|head
operator|->
name|next
operator|==
name|head
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|list_empty_careful
parameter_list|(
specifier|const
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|struct
name|list_head
modifier|*
name|next
init|=
name|head
operator|->
name|next
decl_stmt|;
return|return
operator|(
operator|(
name|next
operator|==
name|head
operator|)
operator|&&
operator|(
name|next
operator|==
name|head
operator|->
name|prev
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|__list_del
parameter_list|(
name|struct
name|list_head
modifier|*
name|prev
parameter_list|,
name|struct
name|list_head
modifier|*
name|next
parameter_list|)
block|{
name|next
operator|->
name|prev
operator|=
name|prev
expr_stmt|;
name|WRITE_ONCE
argument_list|(
name|prev
operator|->
name|next
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_del
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|)
block|{
name|__list_del
argument_list|(
name|entry
operator|->
name|prev
argument_list|,
name|entry
operator|->
name|next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_replace
parameter_list|(
name|struct
name|list_head
modifier|*
name|old
parameter_list|,
name|struct
name|list_head
modifier|*
name|new
parameter_list|)
block|{
name|new
operator|->
name|next
operator|=
name|old
operator|->
name|next
expr_stmt|;
name|new
operator|->
name|next
operator|->
name|prev
operator|=
name|new
expr_stmt|;
name|new
operator|->
name|prev
operator|=
name|old
operator|->
name|prev
expr_stmt|;
name|new
operator|->
name|prev
operator|->
name|next
operator|=
name|new
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_replace_init
parameter_list|(
name|struct
name|list_head
modifier|*
name|old
parameter_list|,
name|struct
name|list_head
modifier|*
name|new
parameter_list|)
block|{
name|list_replace
argument_list|(
name|old
argument_list|,
name|new
argument_list|)
expr_stmt|;
name|INIT_LIST_HEAD
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|linux_list_add
parameter_list|(
name|struct
name|list_head
modifier|*
name|new
parameter_list|,
name|struct
name|list_head
modifier|*
name|prev
parameter_list|,
name|struct
name|list_head
modifier|*
name|next
parameter_list|)
block|{
name|next
operator|->
name|prev
operator|=
name|new
expr_stmt|;
name|new
operator|->
name|next
operator|=
name|next
expr_stmt|;
name|new
operator|->
name|prev
operator|=
name|prev
expr_stmt|;
name|prev
operator|->
name|next
operator|=
name|new
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_del_init
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|)
block|{
name|list_del
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|INIT_LIST_HEAD
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|list_entry
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|field
parameter_list|)
value|container_of(ptr, type, field)
end_define

begin_define
define|#
directive|define
name|list_first_entry
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|list_entry((ptr)->next, type, member)
end_define

begin_define
define|#
directive|define
name|list_last_entry
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|list_entry((ptr)->prev, type, member)
end_define

begin_define
define|#
directive|define
name|list_first_entry_or_null
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|(!list_empty(ptr) ? list_first_entry(ptr, type, member) : NULL)
end_define

begin_define
define|#
directive|define
name|list_next_entry
parameter_list|(
name|ptr
parameter_list|,
name|member
parameter_list|)
define|\
value|list_entry(((ptr)->member.next), typeof(*(ptr)), member)
end_define

begin_define
define|#
directive|define
name|list_prev_entry
parameter_list|(
name|ptr
parameter_list|,
name|member
parameter_list|)
define|\
value|list_entry(((ptr)->member.prev), typeof(*(ptr)), member)
end_define

begin_define
define|#
directive|define
name|list_for_each
parameter_list|(
name|p
parameter_list|,
name|head
parameter_list|)
define|\
value|for (p = (head)->next; p != (head); p = (p)->next)
end_define

begin_define
define|#
directive|define
name|list_for_each_safe
parameter_list|(
name|p
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|)
define|\
value|for (p = (head)->next, n = (p)->next; p != (head); p = n, n = (p)->next)
end_define

begin_define
define|#
directive|define
name|list_for_each_entry
parameter_list|(
name|p
parameter_list|,
name|h
parameter_list|,
name|field
parameter_list|)
define|\
value|for (p = list_entry((h)->next, typeof(*p), field);&(p)->field != (h); \ 	    p = list_entry((p)->field.next, typeof(*p), field))
end_define

begin_define
define|#
directive|define
name|list_for_each_entry_safe
parameter_list|(
name|p
parameter_list|,
name|n
parameter_list|,
name|h
parameter_list|,
name|field
parameter_list|)
define|\
value|for (p = list_entry((h)->next, typeof(*p), field), 		\ 	    n = list_entry((p)->field.next, typeof(*p), field);&(p)->field != (h);\ 	    p = n, n = list_entry(n->field.next, typeof(*n), field))
end_define

begin_define
define|#
directive|define
name|list_for_each_entry_from
parameter_list|(
name|p
parameter_list|,
name|h
parameter_list|,
name|field
parameter_list|)
define|\
value|for ( ;&(p)->field != (h); \ 	    p = list_entry((p)->field.next, typeof(*p), field))
end_define

begin_define
define|#
directive|define
name|list_for_each_entry_continue
parameter_list|(
name|p
parameter_list|,
name|h
parameter_list|,
name|field
parameter_list|)
define|\
value|for (p = list_next_entry((p), field);&(p)->field != (h);	\ 	    p = list_next_entry((p), field))
end_define

begin_define
define|#
directive|define
name|list_for_each_entry_safe_from
parameter_list|(
name|pos
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (n = list_entry((pos)->member.next, typeof(*pos), member);		\&(pos)->member != (head);						\ 	     pos = n, n = list_entry(n->member.next, typeof(*n), member))
end_define

begin_define
define|#
directive|define
name|list_for_each_entry_reverse
parameter_list|(
name|p
parameter_list|,
name|h
parameter_list|,
name|field
parameter_list|)
define|\
value|for (p = list_entry((h)->prev, typeof(*p), field);&(p)->field != (h); \ 	    p = list_entry((p)->field.prev, typeof(*p), field))
end_define

begin_define
define|#
directive|define
name|list_for_each_entry_safe_reverse
parameter_list|(
name|p
parameter_list|,
name|n
parameter_list|,
name|h
parameter_list|,
name|field
parameter_list|)
define|\
value|for (p = list_entry((h)->prev, typeof(*p), field), 		\ 	    n = list_entry((p)->field.prev, typeof(*p), field);&(p)->field != (h); \ 	    p = n, n = list_entry(n->field.prev, typeof(*n), field))
end_define

begin_define
define|#
directive|define
name|list_for_each_entry_continue_reverse
parameter_list|(
name|p
parameter_list|,
name|h
parameter_list|,
name|field
parameter_list|)
define|\
value|for (p = list_entry((p)->field.prev, typeof(*p), field);&(p)->field != (h); \ 	    p = list_entry((p)->field.prev, typeof(*p), field))
end_define

begin_define
define|#
directive|define
name|list_for_each_prev
parameter_list|(
name|p
parameter_list|,
name|h
parameter_list|)
value|for (p = (h)->prev; p != (h); p = (p)->prev)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|list_add
parameter_list|(
name|struct
name|list_head
modifier|*
name|new
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|linux_list_add
argument_list|(
name|new
argument_list|,
name|head
argument_list|,
name|head
operator|->
name|next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_add_tail
parameter_list|(
name|struct
name|list_head
modifier|*
name|new
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|linux_list_add
argument_list|(
name|new
argument_list|,
name|head
operator|->
name|prev
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_move
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|list_del
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|list_add
argument_list|(
name|list
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_move_tail
parameter_list|(
name|struct
name|list_head
modifier|*
name|entry
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|list_del
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|list_add_tail
argument_list|(
name|entry
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|linux_list_splice
parameter_list|(
specifier|const
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|prev
parameter_list|,
name|struct
name|list_head
modifier|*
name|next
parameter_list|)
block|{
name|struct
name|list_head
modifier|*
name|first
decl_stmt|;
name|struct
name|list_head
modifier|*
name|last
decl_stmt|;
if|if
condition|(
name|list_empty
argument_list|(
name|list
argument_list|)
condition|)
return|return;
name|first
operator|=
name|list
operator|->
name|next
expr_stmt|;
name|last
operator|=
name|list
operator|->
name|prev
expr_stmt|;
name|first
operator|->
name|prev
operator|=
name|prev
expr_stmt|;
name|prev
operator|->
name|next
operator|=
name|first
expr_stmt|;
name|last
operator|->
name|next
operator|=
name|next
expr_stmt|;
name|next
operator|->
name|prev
operator|=
name|last
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_splice
parameter_list|(
specifier|const
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|linux_list_splice
argument_list|(
name|list
argument_list|,
name|head
argument_list|,
name|head
operator|->
name|next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_splice_tail
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|linux_list_splice
argument_list|(
name|list
argument_list|,
name|head
operator|->
name|prev
argument_list|,
name|head
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_splice_init
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|linux_list_splice
argument_list|(
name|list
argument_list|,
name|head
argument_list|,
name|head
operator|->
name|next
argument_list|)
expr_stmt|;
name|INIT_LIST_HEAD
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|list_splice_tail_init
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
name|linux_list_splice
argument_list|(
name|list
argument_list|,
name|head
operator|->
name|prev
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|INIT_LIST_HEAD
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
end_function

begin_undef
undef|#
directive|undef
name|LIST_HEAD
end_undef

begin_define
define|#
directive|define
name|LIST_HEAD
parameter_list|(
name|name
parameter_list|)
value|struct list_head name = {&(name),&(name) }
end_define

begin_struct
struct|struct
name|hlist_head
block|{
name|struct
name|hlist_node
modifier|*
name|first
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hlist_node
block|{
name|struct
name|hlist_node
modifier|*
name|next
decl_stmt|,
modifier|*
modifier|*
name|pprev
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|HLIST_HEAD_INIT
value|{ }
end_define

begin_define
define|#
directive|define
name|HLIST_HEAD
parameter_list|(
name|name
parameter_list|)
value|struct hlist_head name = HLIST_HEAD_INIT
end_define

begin_define
define|#
directive|define
name|INIT_HLIST_HEAD
parameter_list|(
name|head
parameter_list|)
value|(head)->first = NULL
end_define

begin_define
define|#
directive|define
name|INIT_HLIST_NODE
parameter_list|(
name|node
parameter_list|)
define|\
value|do {									\ 	(node)->next = NULL;						\ 	(node)->pprev = NULL;						\ } while (0)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|hlist_unhashed
parameter_list|(
specifier|const
name|struct
name|hlist_node
modifier|*
name|h
parameter_list|)
block|{
return|return
operator|!
name|h
operator|->
name|pprev
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hlist_empty
parameter_list|(
specifier|const
name|struct
name|hlist_head
modifier|*
name|h
parameter_list|)
block|{
return|return
operator|!
name|h
operator|->
name|first
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_del
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|->
name|next
condition|)
name|n
operator|->
name|next
operator|->
name|pprev
operator|=
name|n
operator|->
name|pprev
expr_stmt|;
operator|*
name|n
operator|->
name|pprev
operator|=
name|n
operator|->
name|next
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_del_init
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|)
block|{
if|if
condition|(
name|hlist_unhashed
argument_list|(
name|n
argument_list|)
condition|)
return|return;
name|hlist_del
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|INIT_HLIST_NODE
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_add_head
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|,
name|struct
name|hlist_head
modifier|*
name|h
parameter_list|)
block|{
name|n
operator|->
name|next
operator|=
name|h
operator|->
name|first
expr_stmt|;
if|if
condition|(
name|h
operator|->
name|first
condition|)
name|h
operator|->
name|first
operator|->
name|pprev
operator|=
operator|&
name|n
operator|->
name|next
expr_stmt|;
name|h
operator|->
name|first
operator|=
name|n
expr_stmt|;
name|n
operator|->
name|pprev
operator|=
operator|&
name|h
operator|->
name|first
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_add_before
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|,
name|struct
name|hlist_node
modifier|*
name|next
parameter_list|)
block|{
name|n
operator|->
name|pprev
operator|=
name|next
operator|->
name|pprev
expr_stmt|;
name|n
operator|->
name|next
operator|=
name|next
expr_stmt|;
name|next
operator|->
name|pprev
operator|=
operator|&
name|n
operator|->
name|next
expr_stmt|;
operator|*
operator|(
name|n
operator|->
name|pprev
operator|)
operator|=
name|n
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_add_after
parameter_list|(
name|struct
name|hlist_node
modifier|*
name|n
parameter_list|,
name|struct
name|hlist_node
modifier|*
name|next
parameter_list|)
block|{
name|next
operator|->
name|next
operator|=
name|n
operator|->
name|next
expr_stmt|;
name|n
operator|->
name|next
operator|=
name|next
expr_stmt|;
name|next
operator|->
name|pprev
operator|=
operator|&
name|n
operator|->
name|next
expr_stmt|;
if|if
condition|(
name|next
operator|->
name|next
condition|)
name|next
operator|->
name|next
operator|->
name|pprev
operator|=
operator|&
name|next
operator|->
name|next
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hlist_move_list
parameter_list|(
name|struct
name|hlist_head
modifier|*
name|old
parameter_list|,
name|struct
name|hlist_head
modifier|*
name|new
parameter_list|)
block|{
name|new
operator|->
name|first
operator|=
name|old
operator|->
name|first
expr_stmt|;
if|if
condition|(
name|new
operator|->
name|first
condition|)
name|new
operator|->
name|first
operator|->
name|pprev
operator|=
operator|&
name|new
operator|->
name|first
expr_stmt|;
name|old
operator|->
name|first
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_comment
comment|/**  * list_is_singular - tests whether a list has just one entry.  * @head: the list to test.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|list_is_singular
parameter_list|(
specifier|const
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
return|return
operator|!
name|list_empty
argument_list|(
name|head
argument_list|)
operator|&&
operator|(
name|head
operator|->
name|next
operator|==
name|head
operator|->
name|prev
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|__list_cut_position
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|,
name|struct
name|list_head
modifier|*
name|entry
parameter_list|)
block|{
name|struct
name|list_head
modifier|*
name|new_first
init|=
name|entry
operator|->
name|next
decl_stmt|;
name|list
operator|->
name|next
operator|=
name|head
operator|->
name|next
expr_stmt|;
name|list
operator|->
name|next
operator|->
name|prev
operator|=
name|list
expr_stmt|;
name|list
operator|->
name|prev
operator|=
name|entry
expr_stmt|;
name|entry
operator|->
name|next
operator|=
name|list
expr_stmt|;
name|head
operator|->
name|next
operator|=
name|new_first
expr_stmt|;
name|new_first
operator|->
name|prev
operator|=
name|head
expr_stmt|;
block|}
end_function

begin_comment
comment|/**  * list_cut_position - cut a list into two  * @list: a new list to add all removed entries  * @head: a list with entries  * @entry: an entry within head, could be the head itself  *	and if so we won't cut the list  *  * This helper moves the initial part of @head, up to and  * including @entry, from @head to @list. You should  * pass on @entry an element you know is on @head. @list  * should be an empty list or a list you do not care about  * losing its data.  *  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|list_cut_position
parameter_list|(
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|,
name|struct
name|list_head
modifier|*
name|entry
parameter_list|)
block|{
if|if
condition|(
name|list_empty
argument_list|(
name|head
argument_list|)
condition|)
return|return;
if|if
condition|(
name|list_is_singular
argument_list|(
name|head
argument_list|)
operator|&&
operator|(
name|head
operator|->
name|next
operator|!=
name|entry
operator|&&
name|head
operator|!=
name|entry
operator|)
condition|)
return|return;
if|if
condition|(
name|entry
operator|==
name|head
condition|)
name|INIT_LIST_HEAD
argument_list|(
name|list
argument_list|)
expr_stmt|;
else|else
name|__list_cut_position
argument_list|(
name|list
argument_list|,
name|head
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**  *  list_is_last - tests whether @list is the last entry in list @head  *   @list: the entry to test  *    @head: the head of the list  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|list_is_last
parameter_list|(
specifier|const
name|struct
name|list_head
modifier|*
name|list
parameter_list|,
specifier|const
name|struct
name|list_head
modifier|*
name|head
parameter_list|)
block|{
return|return
name|list
operator|->
name|next
operator|==
name|head
return|;
block|}
end_function

begin_define
define|#
directive|define
name|hlist_entry
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|field
parameter_list|)
value|container_of(ptr, type, field)
end_define

begin_define
define|#
directive|define
name|hlist_for_each
parameter_list|(
name|p
parameter_list|,
name|head
parameter_list|)
define|\
value|for (p = (head)->first; p; p = (p)->next)
end_define

begin_define
define|#
directive|define
name|hlist_for_each_safe
parameter_list|(
name|p
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|)
define|\
value|for (p = (head)->first; p&& ({ n = (p)->next; 1; }); p = n)
end_define

begin_define
define|#
directive|define
name|hlist_entry_safe
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|((ptr) ? hlist_entry(ptr, type, member) : NULL)
end_define

begin_define
define|#
directive|define
name|hlist_for_each_entry
parameter_list|(
name|pos
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (pos = hlist_entry_safe((head)->first, typeof(*(pos)), member);\ 	     pos;							\ 	     pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))
end_define

begin_define
define|#
directive|define
name|hlist_for_each_entry_continue
parameter_list|(
name|pos
parameter_list|,
name|member
parameter_list|)
define|\
value|for (pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member); \ 	     (pos);							\ 	     pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))
end_define

begin_define
define|#
directive|define
name|hlist_for_each_entry_from
parameter_list|(
name|pos
parameter_list|,
name|member
parameter_list|)
define|\
value|for (; (pos);								\ 	     pos = hlist_entry_safe((pos)->member.next, typeof(*(pos)), member))
end_define

begin_define
define|#
directive|define
name|hlist_for_each_entry_safe
parameter_list|(
name|pos
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (pos = hlist_entry_safe((head)->first, typeof(*(pos)), member); \ 	     (pos)&& ({ n = (pos)->member.next; 1; });			\ 	     pos = hlist_entry_safe(n, typeof(*(pos)), member))
end_define

begin_function_decl
specifier|extern
name|void
name|list_sort
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|list_head
modifier|*
name|head
parameter_list|,
name|int
function_decl|(
modifier|*
name|cmp
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|list_head
modifier|*
name|a
parameter_list|,
name|struct
name|list_head
modifier|*
name|b
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_LIST_H_ */
end_comment

end_unit

