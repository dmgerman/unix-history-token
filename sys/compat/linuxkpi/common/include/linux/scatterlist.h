begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2015 Mellanox Technologies, Ltd.  * Copyright (c) 2015 Matthew Dillon<dillon@backplane.com>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_SCATTERLIST_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_SCATTERLIST_H_
end_define

begin_include
include|#
directive|include
file|<linux/page.h>
end_include

begin_include
include|#
directive|include
file|<linux/slab.h>
end_include

begin_struct
struct|struct
name|scatterlist
block|{
union|union
block|{
name|struct
name|page
modifier|*
name|page
decl_stmt|;
name|struct
name|scatterlist
modifier|*
name|sg
decl_stmt|;
block|}
name|sl_un
union|;
name|dma_addr_t
name|address
decl_stmt|;
name|unsigned
name|long
name|offset
decl_stmt|;
name|uint32_t
name|length
decl_stmt|;
name|uint32_t
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sg_table
block|{
name|struct
name|scatterlist
modifier|*
name|sgl
decl_stmt|;
name|unsigned
name|int
name|nents
decl_stmt|;
name|unsigned
name|int
name|orig_nents
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sg_page_iter
block|{
name|struct
name|scatterlist
modifier|*
name|sg
decl_stmt|;
name|unsigned
name|int
name|sg_pgoffset
decl_stmt|;
name|unsigned
name|int
name|maxents
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SG_MAX_SINGLE_ALLOC
value|(PAGE_SIZE / sizeof(struct scatterlist))
end_define

begin_define
define|#
directive|define
name|sg_dma_address
parameter_list|(
name|sg
parameter_list|)
value|(sg)->address
end_define

begin_define
define|#
directive|define
name|sg_dma_len
parameter_list|(
name|sg
parameter_list|)
value|(sg)->length
end_define

begin_define
define|#
directive|define
name|sg_page
parameter_list|(
name|sg
parameter_list|)
value|(sg)->sl_un.page
end_define

begin_define
define|#
directive|define
name|sg_scatternext
parameter_list|(
name|sg
parameter_list|)
value|(sg)->sl_un.sg
end_define

begin_define
define|#
directive|define
name|SG_END
value|0x01
end_define

begin_define
define|#
directive|define
name|SG_CHAIN
value|0x02
end_define

begin_function
specifier|static
specifier|inline
name|void
name|sg_set_page
parameter_list|(
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
name|struct
name|page
modifier|*
name|page
parameter_list|,
name|unsigned
name|int
name|len
parameter_list|,
name|unsigned
name|int
name|offset
parameter_list|)
block|{
name|sg_page
argument_list|(
name|sg
argument_list|)
operator|=
name|page
expr_stmt|;
name|sg_dma_len
argument_list|(
name|sg
argument_list|)
operator|=
name|len
expr_stmt|;
name|sg
operator|->
name|offset
operator|=
name|offset
expr_stmt|;
if|if
condition|(
name|offset
operator|>
name|PAGE_SIZE
condition|)
name|panic
argument_list|(
literal|"sg_set_page: Invalid offset %d\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sg_set_buf
parameter_list|(
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|unsigned
name|int
name|buflen
parameter_list|)
block|{
name|sg_set_page
argument_list|(
name|sg
argument_list|,
name|virt_to_page
argument_list|(
name|buf
argument_list|)
argument_list|,
name|buflen
argument_list|,
operator|(
operator|(
name|uintptr_t
operator|)
name|buf
operator|)
operator|&
operator|(
name|PAGE_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sg_init_table
parameter_list|(
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
name|unsigned
name|int
name|nents
parameter_list|)
block|{
name|bzero
argument_list|(
name|sg
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|sg
argument_list|)
operator|*
name|nents
argument_list|)
expr_stmt|;
name|sg
index|[
name|nents
operator|-
literal|1
index|]
operator|.
name|flags
operator|=
name|SG_END
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|scatterlist
modifier|*
name|sg_next
parameter_list|(
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|)
block|{
if|if
condition|(
name|sg
operator|->
name|flags
operator|&
name|SG_END
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|sg
operator|++
expr_stmt|;
if|if
condition|(
name|sg
operator|->
name|flags
operator|&
name|SG_CHAIN
condition|)
name|sg
operator|=
name|sg_scatternext
argument_list|(
name|sg
argument_list|)
expr_stmt|;
return|return
operator|(
name|sg
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|vm_paddr_t
name|sg_phys
parameter_list|(
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|)
block|{
return|return
name|sg_page
argument_list|(
name|sg
argument_list|)
operator|->
name|phys_addr
operator|+
name|sg
operator|->
name|offset
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sg_chain
parameter_list|(
name|struct
name|scatterlist
modifier|*
name|prv
parameter_list|,
name|unsigned
name|int
name|prv_nents
parameter_list|,
name|struct
name|scatterlist
modifier|*
name|sgl
parameter_list|)
block|{
name|struct
name|scatterlist
modifier|*
name|sg
init|=
operator|&
name|prv
index|[
name|prv_nents
operator|-
literal|1
index|]
decl_stmt|;
name|sg
operator|->
name|offset
operator|=
literal|0
expr_stmt|;
name|sg
operator|->
name|length
operator|=
literal|0
expr_stmt|;
name|sg
operator|->
name|flags
operator|=
name|SG_CHAIN
expr_stmt|;
name|sg
operator|->
name|sl_un
operator|.
name|sg
operator|=
name|sgl
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sg_mark_end
parameter_list|(
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|)
block|{
name|sg
operator|->
name|flags
operator|=
name|SG_END
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|__sg_free_table
parameter_list|(
name|struct
name|sg_table
modifier|*
name|table
parameter_list|,
name|unsigned
name|int
name|max_ents
parameter_list|)
block|{
name|struct
name|scatterlist
modifier|*
name|sgl
decl_stmt|,
modifier|*
name|next
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
operator|!
name|table
operator|->
name|sgl
argument_list|)
condition|)
return|return;
name|sgl
operator|=
name|table
operator|->
name|sgl
expr_stmt|;
while|while
condition|(
name|table
operator|->
name|orig_nents
condition|)
block|{
name|unsigned
name|int
name|alloc_size
init|=
name|table
operator|->
name|orig_nents
decl_stmt|;
name|unsigned
name|int
name|sg_size
decl_stmt|;
if|if
condition|(
name|alloc_size
operator|>
name|max_ents
condition|)
block|{
name|next
operator|=
name|sgl
index|[
name|max_ents
operator|-
literal|1
index|]
operator|.
name|sl_un
operator|.
name|sg
expr_stmt|;
name|alloc_size
operator|=
name|max_ents
expr_stmt|;
name|sg_size
operator|=
name|alloc_size
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|sg_size
operator|=
name|alloc_size
expr_stmt|;
name|next
operator|=
name|NULL
expr_stmt|;
block|}
name|table
operator|->
name|orig_nents
operator|-=
name|sg_size
expr_stmt|;
name|kfree
argument_list|(
name|sgl
argument_list|)
expr_stmt|;
name|sgl
operator|=
name|next
expr_stmt|;
block|}
name|table
operator|->
name|sgl
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sg_free_table
parameter_list|(
name|struct
name|sg_table
modifier|*
name|table
parameter_list|)
block|{
name|__sg_free_table
argument_list|(
name|table
argument_list|,
name|SG_MAX_SINGLE_ALLOC
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__sg_alloc_table
parameter_list|(
name|struct
name|sg_table
modifier|*
name|table
parameter_list|,
name|unsigned
name|int
name|nents
parameter_list|,
name|unsigned
name|int
name|max_ents
parameter_list|,
name|gfp_t
name|gfp_mask
parameter_list|)
block|{
name|struct
name|scatterlist
modifier|*
name|sg
decl_stmt|,
modifier|*
name|prv
decl_stmt|;
name|unsigned
name|int
name|left
decl_stmt|;
name|memset
argument_list|(
name|table
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|table
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|nents
operator|==
literal|0
condition|)
return|return
operator|-
name|EINVAL
return|;
name|left
operator|=
name|nents
expr_stmt|;
name|prv
operator|=
name|NULL
expr_stmt|;
do|do
block|{
name|unsigned
name|int
name|sg_size
decl_stmt|;
name|unsigned
name|int
name|alloc_size
init|=
name|left
decl_stmt|;
if|if
condition|(
name|alloc_size
operator|>
name|max_ents
condition|)
block|{
name|alloc_size
operator|=
name|max_ents
expr_stmt|;
name|sg_size
operator|=
name|alloc_size
operator|-
literal|1
expr_stmt|;
block|}
else|else
name|sg_size
operator|=
name|alloc_size
expr_stmt|;
name|left
operator|-=
name|sg_size
expr_stmt|;
name|sg
operator|=
name|kmalloc
argument_list|(
name|alloc_size
operator|*
sizeof|sizeof
argument_list|(
expr|struct
name|scatterlist
argument_list|)
argument_list|,
name|gfp_mask
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
operator|!
name|sg
argument_list|)
condition|)
block|{
if|if
condition|(
name|prv
condition|)
name|table
operator|->
name|nents
operator|=
operator|++
name|table
operator|->
name|orig_nents
expr_stmt|;
return|return
operator|-
name|ENOMEM
return|;
block|}
name|sg_init_table
argument_list|(
name|sg
argument_list|,
name|alloc_size
argument_list|)
expr_stmt|;
name|table
operator|->
name|nents
operator|=
name|table
operator|->
name|orig_nents
operator|+=
name|sg_size
expr_stmt|;
if|if
condition|(
name|prv
condition|)
name|sg_chain
argument_list|(
name|prv
argument_list|,
name|max_ents
argument_list|,
name|sg
argument_list|)
expr_stmt|;
else|else
name|table
operator|->
name|sgl
operator|=
name|sg
expr_stmt|;
if|if
condition|(
operator|!
name|left
condition|)
name|sg_mark_end
argument_list|(
operator|&
name|sg
index|[
name|sg_size
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|prv
operator|=
name|sg
expr_stmt|;
block|}
do|while
condition|(
name|left
condition|)
do|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|sg_alloc_table
parameter_list|(
name|struct
name|sg_table
modifier|*
name|table
parameter_list|,
name|unsigned
name|int
name|nents
parameter_list|,
name|gfp_t
name|gfp_mask
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|ret
operator|=
name|__sg_alloc_table
argument_list|(
name|table
argument_list|,
name|nents
argument_list|,
name|SG_MAX_SINGLE_ALLOC
argument_list|,
name|gfp_mask
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|ret
argument_list|)
condition|)
name|__sg_free_table
argument_list|(
name|table
argument_list|,
name|SG_MAX_SINGLE_ALLOC
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|_sg_iter_next
parameter_list|(
name|struct
name|sg_page_iter
modifier|*
name|iter
parameter_list|)
block|{
name|struct
name|scatterlist
modifier|*
name|sg
decl_stmt|;
name|unsigned
name|int
name|pgcount
decl_stmt|;
name|sg
operator|=
name|iter
operator|->
name|sg
expr_stmt|;
name|pgcount
operator|=
operator|(
name|sg
operator|->
name|offset
operator|+
name|sg
operator|->
name|length
operator|+
name|PAGE_SIZE
operator|-
literal|1
operator|)
operator|>>
name|PAGE_SHIFT
expr_stmt|;
operator|++
name|iter
operator|->
name|sg_pgoffset
expr_stmt|;
while|while
condition|(
name|iter
operator|->
name|sg_pgoffset
operator|>=
name|pgcount
condition|)
block|{
name|iter
operator|->
name|sg_pgoffset
operator|-=
name|pgcount
expr_stmt|;
name|sg
operator|=
name|sg_next
argument_list|(
name|sg
argument_list|)
expr_stmt|;
operator|--
name|iter
operator|->
name|maxents
expr_stmt|;
if|if
condition|(
name|sg
operator|==
name|NULL
operator|||
name|iter
operator|->
name|maxents
operator|==
literal|0
condition|)
break|break;
name|pgcount
operator|=
operator|(
name|sg
operator|->
name|offset
operator|+
name|sg
operator|->
name|length
operator|+
name|PAGE_SIZE
operator|-
literal|1
operator|)
operator|>>
name|PAGE_SHIFT
expr_stmt|;
block|}
name|iter
operator|->
name|sg
operator|=
name|sg
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|_sg_iter_init
parameter_list|(
name|struct
name|scatterlist
modifier|*
name|sgl
parameter_list|,
name|struct
name|sg_page_iter
modifier|*
name|iter
parameter_list|,
name|unsigned
name|int
name|nents
parameter_list|,
name|unsigned
name|long
name|pgoffset
parameter_list|)
block|{
if|if
condition|(
name|nents
condition|)
block|{
name|iter
operator|->
name|sg
operator|=
name|sgl
expr_stmt|;
name|iter
operator|->
name|sg_pgoffset
operator|=
name|pgoffset
operator|-
literal|1
expr_stmt|;
name|iter
operator|->
name|maxents
operator|=
name|nents
expr_stmt|;
name|_sg_iter_next
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iter
operator|->
name|sg
operator|=
name|NULL
expr_stmt|;
name|iter
operator|->
name|sg_pgoffset
operator|=
literal|0
expr_stmt|;
name|iter
operator|->
name|maxents
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|dma_addr_t
name|sg_page_iter_dma_address
parameter_list|(
name|struct
name|sg_page_iter
modifier|*
name|spi
parameter_list|)
block|{
return|return
name|spi
operator|->
name|sg
operator|->
name|address
operator|+
operator|(
name|spi
operator|->
name|sg_pgoffset
operator|<<
name|PAGE_SHIFT
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|for_each_sg_page
parameter_list|(
name|sgl
parameter_list|,
name|iter
parameter_list|,
name|nents
parameter_list|,
name|pgoffset
parameter_list|)
define|\
value|for (_sg_iter_init(sgl, iter, nents, pgoffset);			\ 	     (iter)->sg; _sg_iter_next(iter))
end_define

begin_define
define|#
directive|define
name|for_each_sg
parameter_list|(
name|sglist
parameter_list|,
name|sg
parameter_list|,
name|sgmax
parameter_list|,
name|_itr
parameter_list|)
define|\
value|for (_itr = 0, sg = (sglist); _itr< (sgmax); _itr++, sg = sg_next(sg))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_SCATTERLIST_H_ */
end_comment

end_unit

