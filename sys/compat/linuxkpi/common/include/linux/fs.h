begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2016 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_FS_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_FS_H_
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/conf.h>
end_include

begin_include
include|#
directive|include
file|<sys/vnode.h>
end_include

begin_include
include|#
directive|include
file|<sys/file.h>
end_include

begin_include
include|#
directive|include
file|<sys/filedesc.h>
end_include

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/wait.h>
end_include

begin_include
include|#
directive|include
file|<linux/semaphore.h>
end_include

begin_include
include|#
directive|include
file|<linux/spinlock.h>
end_include

begin_struct_decl
struct_decl|struct
name|module
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|kiocb
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|iovec
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|dentry
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|page
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|file_lock
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|pipe_inode_info
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vm_area_struct
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|poll_table_struct
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|files_struct
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|pfs_node
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|inode
value|vnode
end_define

begin_define
define|#
directive|define
name|i_cdev
value|v_rdev
end_define

begin_define
define|#
directive|define
name|i_private
value|v_data
end_define

begin_define
define|#
directive|define
name|S_IRUGO
value|(S_IRUSR | S_IRGRP | S_IROTH)
end_define

begin_define
define|#
directive|define
name|S_IWUGO
value|(S_IWUSR | S_IWGRP | S_IWOTH)
end_define

begin_typedef
typedef|typedef
name|struct
name|files_struct
modifier|*
name|fl_owner_t
typedef|;
end_typedef

begin_struct
struct|struct
name|dentry
block|{
name|struct
name|inode
modifier|*
name|d_inode
decl_stmt|;
name|struct
name|pfs_node
modifier|*
name|d_pfs_node
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|file_operations
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|linux_file
block|{
name|struct
name|file
modifier|*
name|_file
decl_stmt|;
specifier|const
name|struct
name|file_operations
modifier|*
name|f_op
decl_stmt|;
name|void
modifier|*
name|private_data
decl_stmt|;
name|int
name|f_flags
decl_stmt|;
name|int
name|f_mode
decl_stmt|;
comment|/* Just starting mode. */
name|struct
name|dentry
modifier|*
name|f_dentry
decl_stmt|;
name|struct
name|dentry
name|f_dentry_store
decl_stmt|;
name|struct
name|selinfo
name|f_selinfo
decl_stmt|;
name|struct
name|sigio
modifier|*
name|f_sigio
decl_stmt|;
name|struct
name|vnode
modifier|*
name|f_vnode
decl_stmt|;
define|#
directive|define
name|f_inode
value|f_vnode
specifier|volatile
name|u_int
name|f_count
decl_stmt|;
comment|/* anonymous shmem object */
name|vm_object_t
name|f_shmem
decl_stmt|;
comment|/* kqfilter support */
name|int
name|f_kqflags
decl_stmt|;
define|#
directive|define
name|LINUX_KQ_FLAG_HAS_READ
value|(1<< 0)
define|#
directive|define
name|LINUX_KQ_FLAG_HAS_WRITE
value|(1<< 1)
define|#
directive|define
name|LINUX_KQ_FLAG_NEED_READ
value|(1<< 2)
define|#
directive|define
name|LINUX_KQ_FLAG_NEED_WRITE
value|(1<< 3)
comment|/* protects f_selinfo.si_note */
name|spinlock_t
name|f_kqlock
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|file
value|linux_file
end_define

begin_define
define|#
directive|define
name|fasync_struct
value|sigio *
end_define

begin_define
define|#
directive|define
name|fasync_helper
parameter_list|(
name|fd
parameter_list|,
name|filp
parameter_list|,
name|on
parameter_list|,
name|queue
parameter_list|)
define|\
value|({									\ 	if ((on))							\ 		*(queue) =&(filp)->f_sigio;				\ 	else								\ 		*(queue) = NULL;					\ 	0;								\ })
end_define

begin_define
define|#
directive|define
name|kill_fasync
parameter_list|(
name|queue
parameter_list|,
name|sig
parameter_list|,
name|pollstat
parameter_list|)
define|\
value|do {									\ 	if (*(queue) != NULL)						\ 		pgsigio(*(queue), (sig), 0);				\ } while (0)
end_define

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|filldir_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|loff_t
parameter_list|,
name|u64
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|file_operations
block|{
name|struct
name|module
modifier|*
name|owner
decl_stmt|;
name|ssize_t
function_decl|(
modifier|*
name|read
function_decl|)
parameter_list|(
name|struct
name|file
modifier|*
parameter_list|,
name|char
name|__user
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|loff_t
modifier|*
parameter_list|)
function_decl|;
name|ssize_t
function_decl|(
modifier|*
name|write
function_decl|)
parameter_list|(
name|struct
name|file
modifier|*
parameter_list|,
specifier|const
name|char
name|__user
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|loff_t
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|int
function_decl|(
modifier|*
name|poll
function_decl|)
parameter_list|(
name|struct
name|file
modifier|*
parameter_list|,
name|struct
name|poll_table_struct
modifier|*
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|unlocked_ioctl
function_decl|)
parameter_list|(
name|struct
name|file
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mmap
function_decl|)
parameter_list|(
name|struct
name|file
modifier|*
parameter_list|,
name|struct
name|vm_area_struct
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|struct
name|inode
modifier|*
parameter_list|,
name|struct
name|file
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|release
function_decl|)
parameter_list|(
name|struct
name|inode
modifier|*
parameter_list|,
name|struct
name|file
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|fasync
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|struct
name|file
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* Although not supported in FreeBSD, to align with Linux code  * we are adding llseek() only when it is mapped to no_llseek which returns   * an illegal seek error  */
name|loff_t
function_decl|(
modifier|*
name|llseek
function_decl|)
parameter_list|(
name|struct
name|file
modifier|*
parameter_list|,
name|loff_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
comment|/* We do not support these methods.  Don't permit them to compile. */
block|loff_t (*llseek)(struct file *, loff_t, int); 	ssize_t (*aio_read)(struct kiocb *, const struct iovec *, 	    unsigned long, loff_t); 	ssize_t (*aio_write)(struct kiocb *, const struct iovec *, 	    unsigned long, loff_t); 	int (*readdir)(struct file *, void *, filldir_t); 	int (*ioctl)(struct inode *, struct file *, unsigned int, 	    unsigned long); 	long (*compat_ioctl)(struct file *, unsigned int, unsigned long); 	int (*flush)(struct file *, fl_owner_t id); 	int (*fsync)(struct file *, struct dentry *, int datasync); 	int (*aio_fsync)(struct kiocb *, int datasync); 	int (*lock)(struct file *, int, struct file_lock *); 	ssize_t (*sendpage)(struct file *, struct page *, int, size_t, 	    loff_t *, int); 	unsigned long (*get_unmapped_area)(struct file *, unsigned long, 	    unsigned long, unsigned long, unsigned long); 	int (*check_flags)(int); 	int (*flock)(struct file *, int, struct file_lock *); 	ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, 	    loff_t *, size_t, unsigned int); 	ssize_t (*splice_read)(struct file *, loff_t *, 	    struct pipe_inode_info *, size_t, unsigned int); 	int (*setlease)(struct file *, long, struct file_lock **);
endif|#
directive|endif
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|fops_get
parameter_list|(
name|fops
parameter_list|)
value|(fops)
end_define

begin_define
define|#
directive|define
name|replace_fops
parameter_list|(
name|f
parameter_list|,
name|fops
parameter_list|)
value|((f)->f_op = (fops))
end_define

begin_define
define|#
directive|define
name|FMODE_READ
value|FREAD
end_define

begin_define
define|#
directive|define
name|FMODE_WRITE
value|FWRITE
end_define

begin_define
define|#
directive|define
name|FMODE_EXEC
value|FEXEC
end_define

begin_function_decl
name|int
name|__register_chrdev
parameter_list|(
name|unsigned
name|int
name|major
parameter_list|,
name|unsigned
name|int
name|baseminor
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|struct
name|file_operations
modifier|*
name|fops
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__register_chrdev_p
parameter_list|(
name|unsigned
name|int
name|major
parameter_list|,
name|unsigned
name|int
name|baseminor
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|struct
name|file_operations
modifier|*
name|fops
parameter_list|,
name|uid_t
name|uid
parameter_list|,
name|gid_t
name|gid
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__unregister_chrdev
parameter_list|(
name|unsigned
name|int
name|major
parameter_list|,
name|unsigned
name|int
name|baseminor
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|unregister_chrdev
parameter_list|(
name|unsigned
name|int
name|major
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|__unregister_chrdev
argument_list|(
name|major
argument_list|,
literal|0
argument_list|,
literal|256
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|register_chrdev
parameter_list|(
name|unsigned
name|int
name|major
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|struct
name|file_operations
modifier|*
name|fops
parameter_list|)
block|{
return|return
operator|(
name|__register_chrdev
argument_list|(
name|major
argument_list|,
literal|0
argument_list|,
literal|256
argument_list|,
name|name
argument_list|,
name|fops
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|register_chrdev_p
parameter_list|(
name|unsigned
name|int
name|major
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|struct
name|file_operations
modifier|*
name|fops
parameter_list|,
name|uid_t
name|uid
parameter_list|,
name|gid_t
name|gid
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
return|return
operator|(
name|__register_chrdev_p
argument_list|(
name|major
argument_list|,
literal|0
argument_list|,
literal|256
argument_list|,
name|name
argument_list|,
name|fops
argument_list|,
name|uid
argument_list|,
name|gid
argument_list|,
name|mode
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|register_chrdev_region
parameter_list|(
name|dev_t
name|dev
parameter_list|,
name|unsigned
name|range
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|unregister_chrdev_region
parameter_list|(
name|dev_t
name|dev
parameter_list|,
name|unsigned
name|range
parameter_list|)
block|{
return|return;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|alloc_chrdev_region
parameter_list|(
name|dev_t
modifier|*
name|dev
parameter_list|,
name|unsigned
name|baseminor
parameter_list|,
name|unsigned
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* No current support for seek op in FreeBSD */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|nonseekable_open
parameter_list|(
name|struct
name|inode
modifier|*
name|inode
parameter_list|,
name|struct
name|file
modifier|*
name|filp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function_decl
specifier|extern
name|unsigned
name|int
name|linux_iminor
parameter_list|(
name|struct
name|inode
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|iminor
parameter_list|(
modifier|...
parameter_list|)
value|linux_iminor(__VA_ARGS__)
end_define

begin_function
specifier|static
specifier|inline
name|struct
name|linux_file
modifier|*
name|get_file
parameter_list|(
name|struct
name|linux_file
modifier|*
name|f
parameter_list|)
block|{
name|refcount_acquire
argument_list|(
name|f
operator|->
name|_file
operator|==
name|NULL
condition|?
operator|&
name|f
operator|->
name|f_count
else|:
operator|&
name|f
operator|->
name|_file
operator|->
name|f_count
argument_list|)
expr_stmt|;
return|return
operator|(
name|f
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|inode
modifier|*
name|igrab
parameter_list|(
name|struct
name|inode
modifier|*
name|inode
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|vget
argument_list|(
name|inode
argument_list|,
literal|0
argument_list|,
name|curthread
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
return|return
operator|(
name|inode
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|iput
parameter_list|(
name|struct
name|inode
modifier|*
name|inode
parameter_list|)
block|{
name|vrele
argument_list|(
name|inode
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|loff_t
name|no_llseek
parameter_list|(
name|struct
name|file
modifier|*
name|file
parameter_list|,
name|loff_t
name|offset
parameter_list|,
name|int
name|whence
parameter_list|)
block|{
return|return
operator|(
operator|-
name|ESPIPE
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|loff_t
name|noop_llseek
parameter_list|(
name|struct
name|linux_file
modifier|*
name|file
parameter_list|,
name|loff_t
name|offset
parameter_list|,
name|int
name|whence
parameter_list|)
block|{
return|return
operator|(
name|file
operator|->
name|_file
operator|->
name|f_offset
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_FS_H_ */
end_comment

end_unit

