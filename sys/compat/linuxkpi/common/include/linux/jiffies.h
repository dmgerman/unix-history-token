begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2016 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_JIFFIES_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_JIFFIES_H_
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/kernel.h>
end_include

begin_include
include|#
directive|include
file|<linux/time.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/limits.h>
end_include

begin_define
define|#
directive|define
name|jiffies
value|ticks
end_define

begin_define
define|#
directive|define
name|jiffies_64
value|ticks
end_define

begin_define
define|#
directive|define
name|jiffies_to_msecs
parameter_list|(
name|x
parameter_list|)
value|(((int64_t)(x)) * 1000 / hz)
end_define

begin_define
define|#
directive|define
name|MAX_JIFFY_OFFSET
value|((INT_MAX>> 1) - 1)
end_define

begin_define
define|#
directive|define
name|time_after
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((int)((b) - (a))< 0)
end_define

begin_define
define|#
directive|define
name|time_before
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|time_after(b,a)
end_define

begin_define
define|#
directive|define
name|time_after_eq
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((int)((a) - (b))>= 0)
end_define

begin_define
define|#
directive|define
name|time_before_eq
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|time_after_eq(b, a)
end_define

begin_define
define|#
directive|define
name|time_in_range
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|(time_after_eq(a,b)&& time_before_eq(a,c))
end_define

begin_define
define|#
directive|define
name|HZ
value|hz
end_define

begin_function
specifier|static
specifier|inline
name|int
name|timespec_to_jiffies
parameter_list|(
specifier|const
name|struct
name|timespec
modifier|*
name|ts
parameter_list|)
block|{
name|u64
name|result
decl_stmt|;
name|result
operator|=
operator|(
operator|(
name|u64
operator|)
name|hz
operator|*
name|ts
operator|->
name|tv_sec
operator|)
operator|+
operator|(
operator|(
operator|(
name|u64
operator|)
name|hz
operator|*
name|ts
operator|->
name|tv_nsec
operator|+
name|NSEC_PER_SEC
operator|-
literal|1
operator|)
operator|/
name|NSEC_PER_SEC
operator|)
expr_stmt|;
if|if
condition|(
name|result
operator|>
name|MAX_JIFFY_OFFSET
condition|)
name|result
operator|=
name|MAX_JIFFY_OFFSET
expr_stmt|;
return|return
operator|(
operator|(
name|int
operator|)
name|result
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|msecs_to_jiffies
parameter_list|(
specifier|const
name|u64
name|msec
parameter_list|)
block|{
name|u64
name|result
decl_stmt|;
name|result
operator|=
name|howmany
argument_list|(
name|msec
operator|*
operator|(
name|u64
operator|)
name|hz
argument_list|,
literal|1000ULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|>
name|MAX_JIFFY_OFFSET
condition|)
name|result
operator|=
name|MAX_JIFFY_OFFSET
expr_stmt|;
return|return
operator|(
operator|(
name|int
operator|)
name|result
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|usecs_to_jiffies
parameter_list|(
specifier|const
name|u64
name|u
parameter_list|)
block|{
name|u64
name|result
decl_stmt|;
name|result
operator|=
name|howmany
argument_list|(
name|u
operator|*
operator|(
name|u64
operator|)
name|hz
argument_list|,
literal|1000000ULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|>
name|MAX_JIFFY_OFFSET
condition|)
name|result
operator|=
name|MAX_JIFFY_OFFSET
expr_stmt|;
return|return
operator|(
operator|(
name|int
operator|)
name|result
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u64
name|nsecs_to_jiffies
parameter_list|(
specifier|const
name|u64
name|n
parameter_list|)
block|{
return|return
operator|(
name|usecs_to_jiffies
argument_list|(
name|howmany
argument_list|(
name|n
argument_list|,
literal|1000ULL
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u64
name|get_jiffies_64
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
operator|(
name|u64
operator|)
operator|(
name|unsigned
operator|)
name|ticks
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|linux_timer_jiffies_until
parameter_list|(
name|unsigned
name|long
name|expires
parameter_list|)
block|{
name|int
name|delta
init|=
name|expires
operator|-
name|jiffies
decl_stmt|;
comment|/* guard against already expired values */
if|if
condition|(
name|delta
operator|<
literal|1
condition|)
name|delta
operator|=
literal|1
expr_stmt|;
return|return
operator|(
name|delta
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_JIFFIES_H_ */
end_comment

end_unit

