begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_KTHREAD_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_KTHREAD_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/kthread.h>
end_include

begin_include
include|#
directive|include
file|<sys/sleepqueue.h>
end_include

begin_include
include|#
directive|include
file|<linux/slab.h>
end_include

begin_include
include|#
directive|include
file|<linux/sched.h>
end_include

begin_function
specifier|static
specifier|inline
name|void
name|_kthread_fn
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|struct
name|task_struct
modifier|*
name|task
decl_stmt|;
name|task
operator|=
name|arg
expr_stmt|;
name|task_struct_set
argument_list|(
name|curthread
argument_list|,
name|task
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|->
name|should_stop
operator|==
literal|0
condition|)
name|task
operator|->
name|task_ret
operator|=
name|task
operator|->
name|task_fn
argument_list|(
name|task
operator|->
name|task_data
argument_list|)
expr_stmt|;
name|PROC_LOCK
argument_list|(
name|task
operator|->
name|task_thread
operator|->
name|td_proc
argument_list|)
expr_stmt|;
name|task
operator|->
name|should_stop
operator|=
name|TASK_STOPPED
expr_stmt|;
name|wakeup
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|PROC_UNLOCK
argument_list|(
name|task
operator|->
name|task_thread
operator|->
name|td_proc
argument_list|)
expr_stmt|;
name|kthread_exit
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|task_struct
modifier|*
name|_kthread_create
parameter_list|(
name|int
function_decl|(
modifier|*
name|threadfn
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
name|struct
name|task_struct
modifier|*
name|task
decl_stmt|;
name|task
operator|=
name|kzalloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|task
argument_list|)
argument_list|,
name|GFP_KERNEL
argument_list|)
expr_stmt|;
name|task
operator|->
name|task_fn
operator|=
name|threadfn
expr_stmt|;
name|task
operator|->
name|task_data
operator|=
name|data
expr_stmt|;
return|return
operator|(
name|task
operator|)
return|;
block|}
end_function

begin_function_decl
name|struct
name|task_struct
modifier|*
name|kthread_create
parameter_list|(
name|int
function_decl|(
modifier|*
name|threadfn
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
specifier|const
name|char
name|namefmt
index|[]
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_define
define|#
directive|define
name|kthread_run
parameter_list|(
name|fn
parameter_list|,
name|data
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|({									\ 	struct task_struct *_task;					\ 									\ 	_task = _kthread_create((fn), (data));				\ 	if (kthread_add(_kthread_fn, _task, NULL,&_task->task_thread,	\ 	    0, 0, fmt, ## __VA_ARGS__)) {				\ 		kfree(_task);						\ 		_task = NULL;						\ 	} else								\ 		task_struct_set(_task->task_thread, _task);		\ 	_task;								\ })
end_define

begin_define
define|#
directive|define
name|kthread_should_stop
parameter_list|()
value|current->should_stop
end_define

begin_function
specifier|static
specifier|inline
name|int
name|kthread_stop
parameter_list|(
name|struct
name|task_struct
modifier|*
name|task
parameter_list|)
block|{
name|PROC_LOCK
argument_list|(
name|task
operator|->
name|task_thread
operator|->
name|td_proc
argument_list|)
expr_stmt|;
name|task
operator|->
name|should_stop
operator|=
name|TASK_SHOULD_STOP
expr_stmt|;
name|wake_up_process
argument_list|(
name|task
argument_list|)
expr_stmt|;
while|while
condition|(
name|task
operator|->
name|should_stop
operator|!=
name|TASK_STOPPED
condition|)
name|msleep
argument_list|(
name|task
argument_list|,
operator|&
name|task
operator|->
name|task_thread
operator|->
name|td_proc
operator|->
name|p_mtx
argument_list|,
name|PWAIT
argument_list|,
literal|"kstop"
argument_list|,
name|hz
argument_list|)
expr_stmt|;
name|PROC_UNLOCK
argument_list|(
name|task
operator|->
name|task_thread
operator|->
name|td_proc
argument_list|)
expr_stmt|;
return|return
name|task
operator|->
name|task_ret
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_KTHREAD_H_ */
end_comment

end_unit

