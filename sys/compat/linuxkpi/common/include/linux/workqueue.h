begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2015 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_WORKQUEUE_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_WORKQUEUE_H_
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/kernel.h>
end_include

begin_include
include|#
directive|include
file|<linux/timer.h>
end_include

begin_include
include|#
directive|include
file|<linux/slab.h>
end_include

begin_include
include|#
directive|include
file|<sys/taskqueue.h>
end_include

begin_struct
struct|struct
name|workqueue_struct
block|{
name|struct
name|taskqueue
modifier|*
name|taskqueue
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|work_struct
block|{
name|struct
name|task
name|work_task
decl_stmt|;
name|struct
name|taskqueue
modifier|*
name|taskqueue
decl_stmt|;
name|void
function_decl|(
modifier|*
name|fn
function_decl|)
parameter_list|(
name|struct
name|work_struct
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|__typeof
argument_list|(
argument|((struct work_struct *)
literal|0
argument|)->fn
argument_list|)
name|work_func_t
expr_stmt|;
end_typedef

begin_struct
struct|struct
name|delayed_work
block|{
name|struct
name|work_struct
name|work
decl_stmt|;
name|struct
name|callout
name|timer
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|void
name|linux_work_fn
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|linux_flush_fn
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|linux_delayed_work_fn
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|workqueue_struct
modifier|*
name|linux_create_workqueue_common
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|destroy_workqueue
parameter_list|(
name|struct
name|workqueue_struct
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|struct
name|delayed_work
modifier|*
name|to_delayed_work
parameter_list|(
name|struct
name|work_struct
modifier|*
name|work
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|work
argument_list|,
expr|struct
name|delayed_work
argument_list|,
name|work
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|INIT_WORK
parameter_list|(
name|work
parameter_list|,
name|func
parameter_list|)
define|\
value|do {									\ 	(work)->fn = (func);						\ 	(work)->taskqueue = NULL;					\ 	TASK_INIT(&(work)->work_task, 0, linux_work_fn, (work));		\ } while (0)
end_define

begin_define
define|#
directive|define
name|INIT_DELAYED_WORK
parameter_list|(
name|_work
parameter_list|,
name|func
parameter_list|)
define|\
value|do {									\ 	INIT_WORK(&(_work)->work, func);				\ 	callout_init(&(_work)->timer, 1);				\ } while (0)
end_define

begin_define
define|#
directive|define
name|INIT_DEFERRABLE_WORK
parameter_list|(
modifier|...
parameter_list|)
value|INIT_DELAYED_WORK(__VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|schedule_work
parameter_list|(
name|work
parameter_list|)
define|\
value|do {									\ 	(work)->taskqueue = taskqueue_thread;				\ 	taskqueue_enqueue(taskqueue_thread,&(work)->work_task);	\ } while (0)
end_define

begin_define
define|#
directive|define
name|flush_scheduled_work
parameter_list|()
value|flush_taskqueue(taskqueue_thread)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|queue_work
parameter_list|(
name|struct
name|workqueue_struct
modifier|*
name|wq
parameter_list|,
name|struct
name|work_struct
modifier|*
name|work
parameter_list|)
block|{
name|work
operator|->
name|taskqueue
operator|=
name|wq
operator|->
name|taskqueue
expr_stmt|;
comment|/* Return opposite value to align with Linux logic */
return|return
operator|(
operator|!
name|taskqueue_enqueue
argument_list|(
name|wq
operator|->
name|taskqueue
argument_list|,
operator|&
name|work
operator|->
name|work_task
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|queue_delayed_work
parameter_list|(
name|struct
name|workqueue_struct
modifier|*
name|wq
parameter_list|,
name|struct
name|delayed_work
modifier|*
name|work
parameter_list|,
name|unsigned
name|long
name|delay
parameter_list|)
block|{
name|int
name|pending
decl_stmt|;
name|work
operator|->
name|work
operator|.
name|taskqueue
operator|=
name|wq
operator|->
name|taskqueue
expr_stmt|;
if|if
condition|(
name|delay
operator|!=
literal|0
condition|)
block|{
name|pending
operator|=
name|work
operator|->
name|work
operator|.
name|work_task
operator|.
name|ta_pending
expr_stmt|;
name|callout_reset
argument_list|(
operator|&
name|work
operator|->
name|timer
argument_list|,
name|delay
argument_list|,
name|linux_delayed_work_fn
argument_list|,
name|work
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callout_stop
argument_list|(
operator|&
name|work
operator|->
name|timer
argument_list|)
expr_stmt|;
name|pending
operator|=
name|taskqueue_enqueue
argument_list|(
name|work
operator|->
name|work
operator|.
name|taskqueue
argument_list|,
operator|&
name|work
operator|->
name|work
operator|.
name|work_task
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|!
name|pending
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|schedule_delayed_work
parameter_list|(
name|struct
name|delayed_work
modifier|*
name|dwork
parameter_list|,
name|unsigned
name|long
name|delay
parameter_list|)
block|{
name|struct
name|workqueue_struct
name|wq
decl_stmt|;
name|wq
operator|.
name|taskqueue
operator|=
name|taskqueue_thread
expr_stmt|;
return|return
operator|(
name|queue_delayed_work
argument_list|(
operator|&
name|wq
argument_list|,
name|dwork
argument_list|,
name|delay
argument_list|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|create_singlethread_workqueue
parameter_list|(
name|name
parameter_list|)
define|\
value|linux_create_workqueue_common(name, 1)
end_define

begin_define
define|#
directive|define
name|create_workqueue
parameter_list|(
name|name
parameter_list|)
define|\
value|linux_create_workqueue_common(name, MAXCPU)
end_define

begin_define
define|#
directive|define
name|alloc_ordered_workqueue
parameter_list|(
name|name
parameter_list|,
name|flags
parameter_list|)
define|\
value|linux_create_workqueue_common(name, 1)
end_define

begin_define
define|#
directive|define
name|alloc_workqueue
parameter_list|(
name|name
parameter_list|,
name|flags
parameter_list|,
name|max_active
parameter_list|)
define|\
value|linux_create_workqueue_common(name, max_active)
end_define

begin_define
define|#
directive|define
name|flush_workqueue
parameter_list|(
name|wq
parameter_list|)
value|flush_taskqueue((wq)->taskqueue)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|flush_taskqueue
parameter_list|(
name|struct
name|taskqueue
modifier|*
name|tq
parameter_list|)
block|{
name|struct
name|task
name|flushtask
decl_stmt|;
name|PHOLD
argument_list|(
name|curproc
argument_list|)
expr_stmt|;
name|TASK_INIT
argument_list|(
operator|&
name|flushtask
argument_list|,
literal|0
argument_list|,
name|linux_flush_fn
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|taskqueue_enqueue
argument_list|(
name|tq
argument_list|,
operator|&
name|flushtask
argument_list|)
expr_stmt|;
name|taskqueue_drain
argument_list|(
name|tq
argument_list|,
operator|&
name|flushtask
argument_list|)
expr_stmt|;
name|PRELE
argument_list|(
name|curproc
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|cancel_work_sync
parameter_list|(
name|struct
name|work_struct
modifier|*
name|work
parameter_list|)
block|{
if|if
condition|(
name|work
operator|->
name|taskqueue
operator|&&
name|taskqueue_cancel
argument_list|(
name|work
operator|->
name|taskqueue
argument_list|,
operator|&
name|work
operator|->
name|work_task
argument_list|,
name|NULL
argument_list|)
condition|)
name|taskqueue_drain
argument_list|(
name|work
operator|->
name|taskqueue
argument_list|,
operator|&
name|work
operator|->
name|work_task
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * This may leave work running on another CPU as it does on Linux.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|cancel_delayed_work
parameter_list|(
name|struct
name|delayed_work
modifier|*
name|work
parameter_list|)
block|{
name|callout_stop
argument_list|(
operator|&
name|work
operator|->
name|timer
argument_list|)
expr_stmt|;
if|if
condition|(
name|work
operator|->
name|work
operator|.
name|taskqueue
condition|)
return|return
operator|(
name|taskqueue_cancel
argument_list|(
name|work
operator|->
name|work
operator|.
name|taskqueue
argument_list|,
operator|&
name|work
operator|->
name|work
operator|.
name|work_task
argument_list|,
name|NULL
argument_list|)
operator|==
literal|0
operator|)
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|cancel_delayed_work_sync
parameter_list|(
name|struct
name|delayed_work
modifier|*
name|work
parameter_list|)
block|{
name|callout_drain
argument_list|(
operator|&
name|work
operator|->
name|timer
argument_list|)
expr_stmt|;
if|if
condition|(
name|work
operator|->
name|work
operator|.
name|taskqueue
operator|&&
name|taskqueue_cancel
argument_list|(
name|work
operator|->
name|work
operator|.
name|taskqueue
argument_list|,
operator|&
name|work
operator|->
name|work
operator|.
name|work_task
argument_list|,
name|NULL
argument_list|)
condition|)
name|taskqueue_drain
argument_list|(
name|work
operator|->
name|work
operator|.
name|taskqueue
argument_list|,
operator|&
name|work
operator|->
name|work
operator|.
name|work_task
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|mod_delayed_work
parameter_list|(
name|struct
name|workqueue_struct
modifier|*
name|wq
parameter_list|,
name|struct
name|delayed_work
modifier|*
name|dwork
parameter_list|,
name|unsigned
name|long
name|delay
parameter_list|)
block|{
name|cancel_delayed_work
argument_list|(
name|dwork
argument_list|)
expr_stmt|;
name|queue_delayed_work
argument_list|(
name|wq
argument_list|,
name|dwork
argument_list|,
name|delay
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_WORKQUEUE_H_ */
end_comment

end_unit

