begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2014-2015 FranÃ§ois Tigeot  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_TIME_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_TIME_H_
end_define

begin_define
define|#
directive|define
name|NSEC_PER_USEC
value|1000L
end_define

begin_define
define|#
directive|define
name|NSEC_PER_SEC
value|1000000000L
end_define

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<sys/stdint.h>
end_include

begin_function
specifier|static
specifier|inline
name|struct
name|timeval
name|ns_to_timeval
parameter_list|(
specifier|const
name|int64_t
name|nsec
parameter_list|)
block|{
name|struct
name|timeval
name|tv
decl_stmt|;
name|long
name|rem
decl_stmt|;
if|if
condition|(
name|nsec
operator|==
literal|0
condition|)
block|{
name|tv
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
literal|0
expr_stmt|;
return|return
operator|(
name|tv
operator|)
return|;
block|}
name|tv
operator|.
name|tv_sec
operator|=
name|nsec
operator|/
name|NSEC_PER_SEC
expr_stmt|;
name|rem
operator|=
name|nsec
operator|%
name|NSEC_PER_SEC
expr_stmt|;
if|if
condition|(
name|rem
operator|<
literal|0
condition|)
block|{
name|tv
operator|.
name|tv_sec
operator|--
expr_stmt|;
name|rem
operator|+=
name|NSEC_PER_SEC
expr_stmt|;
block|}
name|tv
operator|.
name|tv_usec
operator|=
name|rem
operator|/
literal|1000
expr_stmt|;
return|return
operator|(
name|tv
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|timeval_to_ns
parameter_list|(
specifier|const
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
block|{
return|return
operator|(
operator|(
name|int64_t
operator|)
name|tv
operator|->
name|tv_sec
operator|*
name|NSEC_PER_SEC
operator|)
operator|+
name|tv
operator|->
name|tv_usec
operator|*
name|NSEC_PER_USEC
return|;
block|}
end_function

begin_define
define|#
directive|define
name|getrawmonotonic
parameter_list|(
name|ts
parameter_list|)
value|nanouptime(ts)
end_define

begin_function
specifier|static
specifier|inline
name|struct
name|timespec
name|timespec_sub
parameter_list|(
name|struct
name|timespec
name|lhs
parameter_list|,
name|struct
name|timespec
name|rhs
parameter_list|)
block|{
name|struct
name|timespec
name|ts
decl_stmt|;
name|ts
operator|.
name|tv_sec
operator|=
name|lhs
operator|.
name|tv_sec
expr_stmt|;
name|ts
operator|.
name|tv_nsec
operator|=
name|lhs
operator|.
name|tv_nsec
expr_stmt|;
name|timespecsub
argument_list|(
operator|&
name|ts
argument_list|,
operator|&
name|rhs
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_normalized_timespec
parameter_list|(
name|struct
name|timespec
modifier|*
name|ts
parameter_list|,
name|time_t
name|sec
parameter_list|,
name|int64_t
name|nsec
parameter_list|)
block|{
comment|/* XXX: this doesn't actually normalize anything */
name|ts
operator|->
name|tv_sec
operator|=
name|sec
expr_stmt|;
name|ts
operator|->
name|tv_nsec
operator|=
name|nsec
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|timespec_to_ns
parameter_list|(
specifier|const
name|struct
name|timespec
modifier|*
name|ts
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ts
operator|->
name|tv_sec
operator|*
name|NSEC_PER_SEC
operator|)
operator|+
name|ts
operator|->
name|tv_nsec
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|timespec
name|ns_to_timespec
parameter_list|(
specifier|const
name|int64_t
name|nsec
parameter_list|)
block|{
name|struct
name|timespec
name|ts
decl_stmt|;
name|int32_t
name|rem
decl_stmt|;
if|if
condition|(
name|nsec
operator|==
literal|0
condition|)
block|{
name|ts
operator|.
name|tv_sec
operator|=
literal|0
expr_stmt|;
name|ts
operator|.
name|tv_nsec
operator|=
literal|0
expr_stmt|;
return|return
operator|(
name|ts
operator|)
return|;
block|}
name|ts
operator|.
name|tv_sec
operator|=
name|nsec
operator|/
name|NSEC_PER_SEC
expr_stmt|;
name|rem
operator|=
name|nsec
operator|%
name|NSEC_PER_SEC
expr_stmt|;
if|if
condition|(
name|rem
operator|<
literal|0
condition|)
block|{
name|ts
operator|.
name|tv_sec
operator|--
expr_stmt|;
name|rem
operator|+=
name|NSEC_PER_SEC
expr_stmt|;
block|}
name|ts
operator|.
name|tv_nsec
operator|=
name|rem
expr_stmt|;
return|return
operator|(
name|ts
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|timespec_valid
parameter_list|(
specifier|const
name|struct
name|timespec
modifier|*
name|ts
parameter_list|)
block|{
if|if
condition|(
name|ts
operator|->
name|tv_sec
operator|<
literal|0
operator|||
name|ts
operator|->
name|tv_sec
operator|>
literal|100000000
operator|||
name|ts
operator|->
name|tv_nsec
operator|<
literal|0
operator|||
name|ts
operator|->
name|tv_nsec
operator|>=
literal|1000000000
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|get_seconds
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|time_uptime
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_TIME_H_ */
end_comment

end_unit

