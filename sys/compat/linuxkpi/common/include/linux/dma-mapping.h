begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_DMA_MAPPING_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_DMA_MAPPING_H_
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/device.h>
end_include

begin_include
include|#
directive|include
file|<linux/err.h>
end_include

begin_include
include|#
directive|include
file|<linux/dma-attrs.h>
end_include

begin_include
include|#
directive|include
file|<linux/scatterlist.h>
end_include

begin_include
include|#
directive|include
file|<linux/mm.h>
end_include

begin_include
include|#
directive|include
file|<linux/page.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm_page.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_enum
enum|enum
name|dma_data_direction
block|{
name|DMA_BIDIRECTIONAL
init|=
literal|0
block|,
name|DMA_TO_DEVICE
init|=
literal|1
block|,
name|DMA_FROM_DEVICE
init|=
literal|2
block|,
name|DMA_NONE
init|=
literal|3
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|dma_map_ops
block|{
name|void
modifier|*
function_decl|(
modifier|*
name|alloc_coherent
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|size_t
name|size
parameter_list|,
name|dma_addr_t
modifier|*
name|dma_handle
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|free_coherent
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|size_t
name|size
parameter_list|,
name|void
modifier|*
name|vaddr
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|)
function_decl|;
name|dma_addr_t
function_decl|(
modifier|*
name|map_page
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|page
modifier|*
name|page
parameter_list|,
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|,
name|struct
name|dma_attrs
modifier|*
name|attrs
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|unmap_page
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|,
name|struct
name|dma_attrs
modifier|*
name|attrs
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|map_sg
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
name|int
name|nents
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|,
name|struct
name|dma_attrs
modifier|*
name|attrs
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|unmap_sg
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
name|int
name|nents
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|,
name|struct
name|dma_attrs
modifier|*
name|attrs
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sync_single_for_cpu
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sync_single_for_device
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sync_single_range_for_cpu
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|,
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sync_single_range_for_device
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|,
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sync_sg_for_cpu
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
name|int
name|nents
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sync_sg_for_device
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
name|int
name|nents
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mapping_error
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dma_supported
function_decl|)
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|u64
name|mask
parameter_list|)
function_decl|;
name|int
name|is_phys
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DMA_BIT_MASK
parameter_list|(
name|n
parameter_list|)
value|((2ULL<< ((n) - 1)) - 1ULL)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|dma_supported
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|u64
name|mask
parameter_list|)
block|{
comment|/* XXX busdma takes care of this elsewhere. */
return|return
operator|(
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|dma_set_mask
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|u64
name|dma_mask
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dev
operator|->
name|dma_mask
operator|||
operator|!
name|dma_supported
argument_list|(
name|dev
argument_list|,
name|dma_mask
argument_list|)
condition|)
return|return
operator|-
name|EIO
return|;
operator|*
name|dev
operator|->
name|dma_mask
operator|=
name|dma_mask
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|dma_set_coherent_mask
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|u64
name|mask
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dma_supported
argument_list|(
name|dev
argument_list|,
name|mask
argument_list|)
condition|)
return|return
operator|-
name|EIO
return|;
comment|/* XXX Currently we don't support a separate coherent mask. */
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|dma_alloc_coherent
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|size_t
name|size
parameter_list|,
name|dma_addr_t
modifier|*
name|dma_handle
parameter_list|,
name|gfp_t
name|flag
parameter_list|)
block|{
name|vm_paddr_t
name|high
decl_stmt|;
name|size_t
name|align
decl_stmt|;
name|void
modifier|*
name|mem
decl_stmt|;
if|if
condition|(
name|dev
operator|!=
name|NULL
operator|&&
name|dev
operator|->
name|dma_mask
condition|)
name|high
operator|=
operator|*
name|dev
operator|->
name|dma_mask
expr_stmt|;
elseif|else
if|if
condition|(
name|flag
operator|&
name|GFP_DMA32
condition|)
name|high
operator|=
name|BUS_SPACE_MAXADDR_32BIT
expr_stmt|;
else|else
name|high
operator|=
name|BUS_SPACE_MAXADDR
expr_stmt|;
name|align
operator|=
name|PAGE_SIZE
operator|<<
name|get_order
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|mem
operator|=
operator|(
name|void
operator|*
operator|)
name|kmem_alloc_contig
argument_list|(
name|kmem_arena
argument_list|,
name|size
argument_list|,
name|flag
argument_list|,
literal|0
argument_list|,
name|high
argument_list|,
name|align
argument_list|,
literal|0
argument_list|,
name|VM_MEMATTR_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|mem
condition|)
operator|*
name|dma_handle
operator|=
name|vtophys
argument_list|(
name|mem
argument_list|)
expr_stmt|;
else|else
operator|*
name|dma_handle
operator|=
literal|0
expr_stmt|;
return|return
operator|(
name|mem
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|dma_zalloc_coherent
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|size_t
name|size
parameter_list|,
name|dma_addr_t
modifier|*
name|dma_handle
parameter_list|,
name|gfp_t
name|flag
parameter_list|)
block|{
return|return
operator|(
name|dma_alloc_coherent
argument_list|(
name|dev
argument_list|,
name|size
argument_list|,
name|dma_handle
argument_list|,
name|flag
operator||
name|__GFP_ZERO
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_free_coherent
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|size_t
name|size
parameter_list|,
name|void
modifier|*
name|cpu_addr
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|)
block|{
name|kmem_free
argument_list|(
name|kmem_arena
argument_list|,
operator|(
name|vm_offset_t
operator|)
name|cpu_addr
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* XXX This only works with no iommu. */
end_comment

begin_function
specifier|static
specifier|inline
name|dma_addr_t
name|dma_map_single_attrs
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|,
name|struct
name|dma_attrs
modifier|*
name|attrs
parameter_list|)
block|{
return|return
name|vtophys
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_unmap_single_attrs
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|addr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|,
name|struct
name|dma_attrs
modifier|*
name|attrs
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|int
name|dma_map_sg_attrs
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|scatterlist
modifier|*
name|sgl
parameter_list|,
name|int
name|nents
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|,
name|struct
name|dma_attrs
modifier|*
name|attrs
parameter_list|)
block|{
name|struct
name|scatterlist
modifier|*
name|sg
decl_stmt|;
name|int
name|i
decl_stmt|;
name|for_each_sg
argument_list|(
argument|sgl
argument_list|,
argument|sg
argument_list|,
argument|nents
argument_list|,
argument|i
argument_list|)
name|sg_dma_address
argument_list|(
name|sg
argument_list|)
operator|=
name|sg_phys
argument_list|(
name|sg
argument_list|)
expr_stmt|;
return|return
operator|(
name|nents
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_unmap_sg_attrs
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
name|int
name|nents
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|,
name|struct
name|dma_attrs
modifier|*
name|attrs
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|dma_addr_t
name|dma_map_page
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|page
modifier|*
name|page
parameter_list|,
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|direction
parameter_list|)
block|{
return|return
name|VM_PAGE_TO_PHYS
argument_list|(
name|page
argument_list|)
operator|+
name|offset
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_unmap_page
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_address
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|direction
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_sync_single_for_cpu
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|direction
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_sync_single
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|addr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|)
block|{
name|dma_sync_single_for_cpu
argument_list|(
name|dev
argument_list|,
name|addr
argument_list|,
name|size
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_sync_single_for_device
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|,
name|size_t
name|size
parameter_list|,
name|enum
name|dma_data_direction
name|direction
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_sync_sg_for_cpu
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
name|int
name|nelems
parameter_list|,
name|enum
name|dma_data_direction
name|direction
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_sync_sg_for_device
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|struct
name|scatterlist
modifier|*
name|sg
parameter_list|,
name|int
name|nelems
parameter_list|,
name|enum
name|dma_data_direction
name|direction
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_sync_single_range_for_cpu
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|,
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|direction
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_sync_single_range_for_device
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_handle
parameter_list|,
name|unsigned
name|long
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|direction
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
specifier|inline
name|int
name|dma_mapping_error
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|dma_addr_t
name|dma_addr
parameter_list|)
block|{
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|dma_set_max_seg_size
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|unsigned
name|int
name|size
parameter_list|)
block|{
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|dma_map_single
parameter_list|(
name|d
parameter_list|,
name|a
parameter_list|,
name|s
parameter_list|,
name|r
parameter_list|)
value|dma_map_single_attrs(d, a, s, r, NULL)
end_define

begin_define
define|#
directive|define
name|dma_unmap_single
parameter_list|(
name|d
parameter_list|,
name|a
parameter_list|,
name|s
parameter_list|,
name|r
parameter_list|)
value|dma_unmap_single_attrs(d, a, s, r, NULL)
end_define

begin_define
define|#
directive|define
name|dma_map_sg
parameter_list|(
name|d
parameter_list|,
name|s
parameter_list|,
name|n
parameter_list|,
name|r
parameter_list|)
value|dma_map_sg_attrs(d, s, n, r, NULL)
end_define

begin_define
define|#
directive|define
name|dma_unmap_sg
parameter_list|(
name|d
parameter_list|,
name|s
parameter_list|,
name|n
parameter_list|,
name|r
parameter_list|)
value|dma_unmap_sg_attrs(d, s, n, r, NULL)
end_define

begin_define
define|#
directive|define
name|DEFINE_DMA_UNMAP_ADDR
parameter_list|(
name|name
parameter_list|)
value|dma_addr_t name
end_define

begin_define
define|#
directive|define
name|DEFINE_DMA_UNMAP_LEN
parameter_list|(
name|name
parameter_list|)
value|__u32 name
end_define

begin_define
define|#
directive|define
name|dma_unmap_addr
parameter_list|(
name|p
parameter_list|,
name|name
parameter_list|)
value|((p)->name)
end_define

begin_define
define|#
directive|define
name|dma_unmap_addr_set
parameter_list|(
name|p
parameter_list|,
name|name
parameter_list|,
name|v
parameter_list|)
value|(((p)->name) = (v))
end_define

begin_define
define|#
directive|define
name|dma_unmap_len
parameter_list|(
name|p
parameter_list|,
name|name
parameter_list|)
value|((p)->name)
end_define

begin_define
define|#
directive|define
name|dma_unmap_len_set
parameter_list|(
name|p
parameter_list|,
name|name
parameter_list|,
name|v
parameter_list|)
value|(((p)->name) = (v))
end_define

begin_decl_stmt
specifier|extern
name|int
name|uma_align_cache
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|dma_get_cache_alignment
parameter_list|()
value|uma_align_cache
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_DMA_MAPPING_H_ */
end_comment

end_unit

