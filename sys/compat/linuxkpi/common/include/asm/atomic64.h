begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2016-2017 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ASM_ATOMIC64_H_
end_ifndef

begin_define
define|#
directive|define
name|_ASM_ATOMIC64_H_
end_define

begin_include
include|#
directive|include
file|<linux/compiler.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<machine/atomic.h>
end_include

begin_typedef
typedef|typedef
struct|struct
block|{
specifier|volatile
name|int64_t
name|counter
decl_stmt|;
block|}
name|atomic64_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|ATOMIC64_INIT
parameter_list|(
name|x
parameter_list|)
value|{ .counter = (x) }
end_define

begin_comment
comment|/*------------------------------------------------------------------------*  *	64-bit atomic operations  *------------------------------------------------------------------------*/
end_comment

begin_define
define|#
directive|define
name|atomic64_add
parameter_list|(
name|i
parameter_list|,
name|v
parameter_list|)
value|atomic64_add_return((i), (v))
end_define

begin_define
define|#
directive|define
name|atomic64_sub
parameter_list|(
name|i
parameter_list|,
name|v
parameter_list|)
value|atomic64_sub_return((i), (v))
end_define

begin_define
define|#
directive|define
name|atomic64_inc_return
parameter_list|(
name|v
parameter_list|)
value|atomic64_add_return(1, (v))
end_define

begin_define
define|#
directive|define
name|atomic64_add_negative
parameter_list|(
name|i
parameter_list|,
name|v
parameter_list|)
value|(atomic64_add_return((i), (v))< 0)
end_define

begin_define
define|#
directive|define
name|atomic64_add_and_test
parameter_list|(
name|i
parameter_list|,
name|v
parameter_list|)
value|(atomic64_add_return((i), (v)) == 0)
end_define

begin_define
define|#
directive|define
name|atomic64_sub_and_test
parameter_list|(
name|i
parameter_list|,
name|v
parameter_list|)
value|(atomic64_sub_return((i), (v)) == 0)
end_define

begin_define
define|#
directive|define
name|atomic64_dec_and_test
parameter_list|(
name|v
parameter_list|)
value|(atomic64_sub_return(1, (v)) == 0)
end_define

begin_define
define|#
directive|define
name|atomic64_inc_and_test
parameter_list|(
name|v
parameter_list|)
value|(atomic64_add_return(1, (v)) == 0)
end_define

begin_define
define|#
directive|define
name|atomic64_dec_return
parameter_list|(
name|v
parameter_list|)
value|atomic64_sub_return(1, (v))
end_define

begin_define
define|#
directive|define
name|atomic64_inc_not_zero
parameter_list|(
name|v
parameter_list|)
value|atomic64_add_unless((v), 1, 0)
end_define

begin_function
specifier|static
specifier|inline
name|int64_t
name|atomic64_add_return
parameter_list|(
name|int64_t
name|i
parameter_list|,
name|atomic64_t
modifier|*
name|v
parameter_list|)
block|{
return|return
name|i
operator|+
name|atomic_fetchadd_64
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
name|i
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|atomic64_sub_return
parameter_list|(
name|int64_t
name|i
parameter_list|,
name|atomic64_t
modifier|*
name|v
parameter_list|)
block|{
return|return
name|atomic_fetchadd_64
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
operator|-
name|i
argument_list|)
operator|-
name|i
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|atomic64_set
parameter_list|(
name|atomic64_t
modifier|*
name|v
parameter_list|,
name|int64_t
name|i
parameter_list|)
block|{
name|atomic_store_rel_64
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|atomic64_read
parameter_list|(
name|atomic64_t
modifier|*
name|v
parameter_list|)
block|{
return|return
name|READ_ONCE
argument_list|(
name|v
operator|->
name|counter
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|atomic64_inc
parameter_list|(
name|atomic64_t
modifier|*
name|v
parameter_list|)
block|{
return|return
name|atomic_fetchadd_64
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
literal|1
argument_list|)
operator|+
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|atomic64_dec
parameter_list|(
name|atomic64_t
modifier|*
name|v
parameter_list|)
block|{
return|return
name|atomic_fetchadd_64
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
operator|-
literal|1
argument_list|)
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|atomic64_add_unless
parameter_list|(
name|atomic64_t
modifier|*
name|v
parameter_list|,
name|int64_t
name|a
parameter_list|,
name|int64_t
name|u
parameter_list|)
block|{
name|int64_t
name|c
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|c
operator|=
name|atomic64_read
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|c
operator|==
name|u
argument_list|)
condition|)
break|break;
if|if
condition|(
name|likely
argument_list|(
name|atomic_cmpset_64
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
name|c
argument_list|,
name|c
operator|+
name|a
argument_list|)
argument_list|)
condition|)
break|break;
block|}
return|return
operator|(
name|c
operator|!=
name|u
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|atomic64_xchg
parameter_list|(
name|atomic64_t
modifier|*
name|v
parameter_list|,
name|int64_t
name|i
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__arm__
argument_list|)
operator|||
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__powerpc64__
argument_list|)
return|return
operator|(
name|atomic_swap_64
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
name|i
argument_list|)
operator|)
return|;
else|#
directive|else
name|int64_t
name|ret
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|ret
operator|=
name|READ_ONCE
argument_list|(
name|v
operator|->
name|counter
argument_list|)
expr_stmt|;
if|if
condition|(
name|atomic_cmpset_64
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
name|ret
argument_list|,
name|i
argument_list|)
condition|)
break|break;
block|}
return|return
operator|(
name|ret
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int64_t
name|atomic64_cmpxchg
parameter_list|(
name|atomic64_t
modifier|*
name|v
parameter_list|,
name|int64_t
name|old
parameter_list|,
name|int64_t
name|new
parameter_list|)
block|{
name|int64_t
name|ret
init|=
name|old
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|atomic_cmpset_64
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
name|old
argument_list|,
name|new
argument_list|)
condition|)
break|break;
name|ret
operator|=
name|READ_ONCE
argument_list|(
name|v
operator|->
name|counter
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
name|old
condition|)
break|break;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ASM_ATOMIC64_H_ */
end_comment

end_unit

