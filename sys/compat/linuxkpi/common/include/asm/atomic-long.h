begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2017 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ATOMIC_LONG_H_
end_ifndef

begin_define
define|#
directive|define
name|_ATOMIC_LONG_H_
end_define

begin_include
include|#
directive|include
file|<linux/compiler.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<machine/atomic.h>
end_include

begin_define
define|#
directive|define
name|ATOMIC_LONG_INIT
parameter_list|(
name|x
parameter_list|)
value|{ .counter = (x) }
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
specifier|volatile
name|long
name|counter
decl_stmt|;
block|}
name|atomic_long_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|atomic_long_add
parameter_list|(
name|i
parameter_list|,
name|v
parameter_list|)
value|atomic_long_add_return((i), (v))
end_define

begin_define
define|#
directive|define
name|atomic_long_inc_return
parameter_list|(
name|v
parameter_list|)
value|atomic_long_add_return(1, (v))
end_define

begin_define
define|#
directive|define
name|atomic_long_inc_not_zero
parameter_list|(
name|v
parameter_list|)
value|atomic_long_add_unless((v), 1, 0)
end_define

begin_function
specifier|static
specifier|inline
name|long
name|atomic_long_add_return
parameter_list|(
name|long
name|i
parameter_list|,
name|atomic_long_t
modifier|*
name|v
parameter_list|)
block|{
return|return
name|i
operator|+
name|atomic_fetchadd_long
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
name|i
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|atomic_long_set
parameter_list|(
name|atomic_long_t
modifier|*
name|v
parameter_list|,
name|long
name|i
parameter_list|)
block|{
name|WRITE_ONCE
argument_list|(
name|v
operator|->
name|counter
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|atomic_long_read
parameter_list|(
name|atomic_long_t
modifier|*
name|v
parameter_list|)
block|{
return|return
name|READ_ONCE
argument_list|(
name|v
operator|->
name|counter
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|atomic_long_inc
parameter_list|(
name|atomic_long_t
modifier|*
name|v
parameter_list|)
block|{
return|return
name|atomic_fetchadd_long
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
literal|1
argument_list|)
operator|+
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|atomic_long_dec
parameter_list|(
name|atomic_long_t
modifier|*
name|v
parameter_list|)
block|{
return|return
name|atomic_fetchadd_long
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
operator|-
literal|1
argument_list|)
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|atomic_long_xchg
parameter_list|(
name|atomic_long_t
modifier|*
name|v
parameter_list|,
name|long
name|val
parameter_list|)
block|{
return|return
name|atomic_swap_long
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
name|val
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|atomic_long_add_unless
parameter_list|(
name|atomic_long_t
modifier|*
name|v
parameter_list|,
name|long
name|a
parameter_list|,
name|long
name|u
parameter_list|)
block|{
name|long
name|c
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|c
operator|=
name|atomic_long_read
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|c
operator|==
name|u
argument_list|)
condition|)
break|break;
if|if
condition|(
name|likely
argument_list|(
name|atomic_cmpset_long
argument_list|(
operator|&
name|v
operator|->
name|counter
argument_list|,
name|c
argument_list|,
name|c
operator|+
name|a
argument_list|)
argument_list|)
condition|)
break|break;
block|}
return|return
operator|(
name|c
operator|!=
name|u
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|atomic_long_dec_and_test
parameter_list|(
name|atomic_long_t
modifier|*
name|v
parameter_list|)
block|{
name|long
name|i
init|=
name|atomic_long_add
argument_list|(
operator|-
literal|1
argument_list|,
name|v
argument_list|)
decl_stmt|;
return|return
name|i
operator|==
literal|0
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ATOMIC_LONG_H_ */
end_comment

end_unit

