begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007 Pawel Jakub Dawidek<pjd@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_OPENSOLARIS_SYS_CMN_ERR_H_
end_ifndef

begin_define
define|#
directive|define
name|_OPENSOLARIS_SYS_CMN_ERR_H_
end_define

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<machine/stdarg.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Common error handling severity levels */
define|#
directive|define
name|CE_CONT
value|0
comment|/* continuation		*/
define|#
directive|define
name|CE_NOTE
value|1
comment|/* notice		*/
define|#
directive|define
name|CE_WARN
value|2
comment|/* warning		*/
define|#
directive|define
name|CE_PANIC
value|3
comment|/* panic		*/
define|#
directive|define
name|CE_IGNORE
value|4
comment|/* print nothing	*/
specifier|static
name|__inline
name|void
name|vcmn_err
parameter_list|(
name|int
name|ce
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|va_list
name|adx
parameter_list|)
block|{
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
switch|switch
condition|(
name|ce
condition|)
block|{
case|case
name|CE_CONT
case|:
name|snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"ZFS(cont): %s\n"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_NOTE
case|:
name|snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"ZFS: NOTICE: %s\n"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_WARN
case|:
name|snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"ZFS: WARNING: %s\n"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_PANIC
case|:
name|snprintf
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|,
literal|"ZFS(panic): %s\n"
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
break|break;
case|case
name|CE_IGNORE
case|:
break|break;
default|default:
name|panic
argument_list|(
literal|"unknown severity level"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ce
operator|!=
name|CE_IGNORE
condition|)
name|vprintf
argument_list|(
name|buf
argument_list|,
name|adx
argument_list|)
expr_stmt|;
if|if
condition|(
name|ce
operator|==
name|CE_PANIC
condition|)
name|panic
argument_list|(
literal|"ZFS"
argument_list|)
expr_stmt|;
block|}
specifier|static
name|__inline
name|void
name|cmn_err
parameter_list|(
name|int
name|ce
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
block|{
name|va_list
name|adx
decl_stmt|;
name|va_start
argument_list|(
name|adx
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|vcmn_err
argument_list|(
name|ce
argument_list|,
name|fmt
argument_list|,
name|adx
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|adx
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _OPENSOLARIS_SYS_CMN_ERR_H_ */
end_comment

end_unit

