begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2012 Chelsio Communications, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NETINET_TOE_H_
end_ifndef

begin_define
define|#
directive|define
name|_NETINET_TOE_H_
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_error
error|#
directive|error
literal|"no user-serviceable parts inside"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_struct_decl
struct_decl|struct
name|tcpopt
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|tcphdr
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|in_conninfo
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|toedev
block|{
name|TAILQ_ENTRY
argument_list|(
argument|toedev
argument_list|)
name|link
expr_stmt|;
comment|/* glue for toedev_list */
name|void
modifier|*
name|tod_softc
decl_stmt|;
comment|/* TOE driver private data */
comment|/* 	 * Active open.  If a failure occurs, it is reported back by the driver 	 * via toe_connect_failed. 	 */
name|int
function_decl|(
modifier|*
name|tod_connect
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|socket
modifier|*
parameter_list|,
name|struct
name|rtentry
modifier|*
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|)
function_decl|;
comment|/* Passive open. */
name|int
function_decl|(
modifier|*
name|tod_listen_start
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|tod_listen_stop
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
comment|/* 	 * The kernel uses this routine to pass on any frame it receives for an 	 * offloaded connection to the TOE driver.  This is an unusual event. 	 */
name|void
function_decl|(
modifier|*
name|tod_input
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
comment|/* 	 * This is called by the kernel during pru_rcvd for an offloaded TCP 	 * connection and provides an opportunity for the TOE driver to manage 	 * its rx window and credits. 	 */
name|void
function_decl|(
modifier|*
name|tod_rcvd
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
comment|/* 	 * Transmit routine.  The kernel calls this to have the TOE driver 	 * evaluate whether there is data to be transmitted, and transmit it. 	 */
name|int
function_decl|(
modifier|*
name|tod_output
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
comment|/* Immediate teardown: send RST to peer. */
name|int
function_decl|(
modifier|*
name|tod_send_rst
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
comment|/* Initiate orderly disconnect by sending FIN to the peer. */
name|int
function_decl|(
modifier|*
name|tod_send_fin
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
comment|/* Called to indicate that the kernel is done with this TCP PCB. */
name|void
function_decl|(
modifier|*
name|tod_pcb_detach
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
comment|/* 	 * The kernel calls this once it has information about an L2 entry that 	 * the TOE driver enquired about previously (via toe_l2_resolve). 	 */
name|void
function_decl|(
modifier|*
name|tod_l2_update
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|ifnet
modifier|*
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
comment|/* XXX.  Route has been redirected. */
name|void
function_decl|(
modifier|*
name|tod_route_redirect
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|ifnet
modifier|*
parameter_list|,
name|struct
name|rtentry
modifier|*
parameter_list|,
name|struct
name|rtentry
modifier|*
parameter_list|)
function_decl|;
comment|/* Syncache interaction. */
name|void
function_decl|(
modifier|*
name|tod_syncache_added
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|tod_syncache_removed
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|tod_syncache_respond
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|tod_offload_socket
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|socket
modifier|*
parameter_list|)
function_decl|;
comment|/* TCP socket option */
name|void
function_decl|(
modifier|*
name|tod_ctloutput
function_decl|)
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_include
include|#
directive|include
file|<sys/eventhandler.h>
end_include

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|tcp_offload_listen_start_fn
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|tcp_offload_listen_stop_fn
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
name|EVENTHANDLER_DECLARE
argument_list|(
name|tcp_offload_listen_start
argument_list|,
name|tcp_offload_listen_start_fn
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|EVENTHANDLER_DECLARE
argument_list|(
name|tcp_offload_listen_stop
argument_list|,
name|tcp_offload_listen_stop_fn
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|void
name|init_toedev
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|register_toedev
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|unregister_toedev
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * General interface for looking up L2 information for an IP address.  If an  * answer is not available right away then the TOE driver's tod_l2_update will  * be called later.  */
end_comment

begin_function_decl
name|int
name|toe_l2_resolve
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|ifnet
modifier|*
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|,
name|uint16_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|toe_connect_failed
parameter_list|(
name|struct
name|toedev
modifier|*
parameter_list|,
name|struct
name|inpcb
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|toe_syncache_add
parameter_list|(
name|struct
name|in_conninfo
modifier|*
parameter_list|,
name|struct
name|tcpopt
modifier|*
parameter_list|,
name|struct
name|tcphdr
modifier|*
parameter_list|,
name|struct
name|inpcb
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|toe_syncache_expand
parameter_list|(
name|struct
name|in_conninfo
modifier|*
parameter_list|,
name|struct
name|tcpopt
modifier|*
parameter_list|,
name|struct
name|tcphdr
modifier|*
parameter_list|,
name|struct
name|socket
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|toe_4tuple_check
parameter_list|(
name|struct
name|in_conninfo
modifier|*
parameter_list|,
name|struct
name|tcphdr
modifier|*
parameter_list|,
name|struct
name|ifnet
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

