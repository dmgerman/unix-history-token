begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007, Chelsio Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * 1. Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  *  * 2. Neither the name of the Chelsio Corporation nor the names of its  *    contributors may be used to endorse or promote products derived from  *    this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NETINET_TCP_OFLD_H_
end_ifndef

begin_define
define|#
directive|define
name|_NETINET_TCP_OFLD_H_
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_error
error|#
directive|error
literal|"no user-serviceable parts inside"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|SC_ENTRY_PRESENT
value|1
end_define

begin_define
define|#
directive|define
name|SC_DROP
value|2
end_define

begin_define
define|#
directive|define
name|tp_offload
parameter_list|(
name|tp
parameter_list|)
value|((tp)->t_flags& TF_TOE)
end_define

begin_define
define|#
directive|define
name|SO_OFFLOADABLE
parameter_list|(
name|so
parameter_list|)
value|((so->so_options& SO_NO_OFFLOAD) == 0)
end_define

begin_function_decl
name|int
name|ofld_connect
parameter_list|(
name|struct
name|socket
modifier|*
name|so
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|nam
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ofld_can_offload
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|nam
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ofld_abort
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ofld_disconnect
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ofld_send
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ofld_rcvd
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ofld_detach
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ofld_listen_close
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ofld_listen_open
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|DISABLE_TCP_OFFLOAD
end_ifndef

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_connect
parameter_list|(
name|struct
name|socket
modifier|*
name|so
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|nam
parameter_list|)
block|{
name|struct
name|tcpcb
modifier|*
name|tp
init|=
name|sototcpcb
argument_list|(
name|so
argument_list|)
decl_stmt|;
name|int
name|error
decl_stmt|;
if|if
condition|(
operator|!
name|SO_OFFLOADABLE
argument_list|(
name|so
argument_list|)
operator|||
operator|(
name|error
operator|=
name|ofld_connect
argument_list|(
name|so
argument_list|,
name|nam
argument_list|)
operator|)
operator|!=
literal|0
condition|)
name|error
operator|=
name|tcp_output
argument_list|(
name|tp
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_disconnect
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
if|if
condition|(
name|tp_offload
argument_list|(
name|tp
argument_list|)
condition|)
name|error
operator|=
name|ofld_disconnect
argument_list|(
name|tp
argument_list|)
expr_stmt|;
else|else
name|error
operator|=
name|tcp_output
argument_list|(
name|tp
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_abort
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
if|if
condition|(
name|tp_offload
argument_list|(
name|tp
argument_list|)
condition|)
name|error
operator|=
name|ofld_abort
argument_list|(
name|tp
argument_list|)
expr_stmt|;
else|else
name|error
operator|=
name|tcp_output
argument_list|(
name|tp
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_send
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
if|if
condition|(
name|tp_offload
argument_list|(
name|tp
argument_list|)
condition|)
name|error
operator|=
name|ofld_send
argument_list|(
name|tp
argument_list|)
expr_stmt|;
else|else
name|error
operator|=
name|tcp_output
argument_list|(
name|tp
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_rcvd
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
if|if
condition|(
name|tp_offload
argument_list|(
name|tp
argument_list|)
condition|)
name|error
operator|=
name|ofld_rcvd
argument_list|(
name|tp
argument_list|)
expr_stmt|;
else|else
name|error
operator|=
name|tcp_output
argument_list|(
name|tp
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tcp_gen_listen_open
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
if|if
condition|(
name|SO_OFFLOADABLE
argument_list|(
name|tp
operator|->
name|t_inpcb
operator|->
name|inp_socket
argument_list|)
condition|)
name|ofld_listen_open
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tcp_gen_listen_close
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
name|ofld_listen_close
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tcp_gen_detach
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
if|if
condition|(
name|tp_offload
argument_list|(
name|tp
argument_list|)
condition|)
name|ofld_detach
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_connect
parameter_list|(
name|struct
name|socket
modifier|*
name|so
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|nam
parameter_list|)
block|{
return|return
operator|(
name|tcp_output
argument_list|(
name|tp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_disconnect
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
return|return
operator|(
name|tcp_output
argument_list|(
name|tp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_abort
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
return|return
operator|(
name|tcp_output
argument_list|(
name|tp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_send
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
return|return
operator|(
name|tcp_output
argument_list|(
name|tp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|tcp_gen_rcvd
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{
return|return
operator|(
name|tcp_output
argument_list|(
name|tp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tcp_gen_listen_open
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
name|__inline
name|void
name|tcp_gen_listen_close
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
name|__inline
name|void
name|tcp_gen_detach
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
block|{ }
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|toe_usrreqs
block|{
name|int
function_decl|(
modifier|*
name|tu_send
function_decl|)
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|tu_rcvd
function_decl|)
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|tu_disconnect
function_decl|)
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|tu_abort
function_decl|)
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|tu_detach
function_decl|)
parameter_list|(
name|struct
name|tcpcb
modifier|*
name|tp
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|tu_syncache_event
function_decl|)
parameter_list|(
name|int
name|event
parameter_list|,
name|void
modifier|*
name|toep
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|OFLD_LISTEN_OPEN
value|1
end_define

begin_define
define|#
directive|define
name|OFLD_LISTEN_CLOSE
value|2
end_define

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|ofld_listen_fn
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|tcpcb
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
name|EVENTHANDLER_DECLARE
argument_list|(
name|ofld_listen
argument_list|,
name|ofld_listen_fn
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

