begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2001-2007, by Cisco Systems, Inc. All rights reserved.  * Copyright (c) 2008-2012, by Randall Stewart. All rights reserved.  * Copyright (c) 2008-2012, by Michael Tuexen. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *  * a) Redistributions of source code must retain the above copyright notice,  *    this list of conditions and the following disclaimer.  *  * b) Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the distribution.  *  * c) Neither the name of Cisco Systems, Inc. nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  * THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|_NETINET_SCTP_UTIL_H_
end_ifndef

begin_define
define|#
directive|define
name|_NETINET_SCTP_UTIL_H_
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|__Userspace__
argument_list|)
end_if

begin_define
define|#
directive|define
name|SCTP_READ_LOCK_HELD
value|1
end_define

begin_define
define|#
directive|define
name|SCTP_READ_LOCK_NOT_HELD
value|0
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|SCTP_ASOCLOG_OF_TSNS
end_ifdef

begin_function_decl
name|void
name|sctp_print_out_track_log
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|SCTP_MBUF_LOGGING
end_ifdef

begin_function_decl
name|struct
name|mbuf
modifier|*
name|sctp_m_free
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_m_freem
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|sctp_m_free
value|m_free
end_define

begin_define
define|#
directive|define
name|sctp_m_freem
value|m_freem
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|SCTP_LOCAL_TRACE_BUF
argument_list|)
operator|||
name|defined
argument_list|(
name|__APPLE__
argument_list|)
end_if

begin_function_decl
name|void
name|sctp_log_trace
parameter_list|(
name|uint32_t
name|fr
parameter_list|,
specifier|const
name|char
modifier|*
name|str
name|SCTP_UNUSED
parameter_list|,
name|uint32_t
name|a
parameter_list|,
name|uint32_t
name|b
parameter_list|,
name|uint32_t
name|c
parameter_list|,
name|uint32_t
name|d
parameter_list|,
name|uint32_t
name|e
parameter_list|,
name|uint32_t
name|f
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|sctp_get_associd
parameter_list|(
name|stcb
parameter_list|)
value|((sctp_assoc_t)stcb->asoc.assoc_id)
end_define

begin_comment
comment|/*  * Function prototypes  */
end_comment

begin_function_decl
name|uint32_t
name|sctp_get_ifa_hash_val
parameter_list|(
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|sctp_ifa
modifier|*
name|sctp_find_ifa_in_ep
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
name|inp
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|,
name|int
name|hold_lock
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|sctp_ifa
modifier|*
name|sctp_find_ifa_by_addr
parameter_list|(
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|,
name|uint32_t
name|vrf_id
parameter_list|,
name|int
name|holds_lock
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|sctp_select_initial_TSN
parameter_list|(
name|struct
name|sctp_pcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|sctp_select_a_tag
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
parameter_list|,
name|uint16_t
name|lport
parameter_list|,
name|uint16_t
name|rport
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_init_asoc
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_fill_random_store
parameter_list|(
name|struct
name|sctp_pcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_notify_stream_reset_add
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|uint16_t
name|numberin
parameter_list|,
name|uint16_t
name|numberout
parameter_list|,
name|int
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_notify_stream_reset_tsn
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|uint32_t
name|sending_tsn
parameter_list|,
name|uint32_t
name|recv_tsn
parameter_list|,
name|int
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_timer_start
parameter_list|(
name|int
parameter_list|,
name|struct
name|sctp_inpcb
modifier|*
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|struct
name|sctp_nets
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_timer_stop
parameter_list|(
name|int
parameter_list|,
name|struct
name|sctp_inpcb
modifier|*
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|struct
name|sctp_nets
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_dynamic_set_primary
parameter_list|(
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|,
name|uint32_t
name|vrf_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_mtu_size_reset
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
parameter_list|,
name|struct
name|sctp_association
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_add_to_readq
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
name|inp
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|struct
name|sctp_queued_to_read
modifier|*
name|control
parameter_list|,
name|struct
name|sockbuf
modifier|*
name|sb
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|inpread_locked
parameter_list|,
name|int
name|so_locked
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|SCTP_SO_LOCK_TESTING
argument_list|)
name|SCTP_UNUSED
endif|#
directive|endif
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_append_to_readq
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
name|inp
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|struct
name|sctp_queued_to_read
modifier|*
name|control
parameter_list|,
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|new_cumack
parameter_list|,
name|struct
name|sockbuf
modifier|*
name|sb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_iterator_worker
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|sctp_get_prev_mtu
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|sctp_get_next_mtu
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_timeout_handler
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|sctp_calculate_rto
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|struct
name|sctp_association
modifier|*
parameter_list|,
name|struct
name|sctp_nets
modifier|*
parameter_list|,
name|struct
name|timeval
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|sctp_calculate_len
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|caddr_t
name|sctp_m_getptr
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|sctp_paramhdr
modifier|*
name|sctp_get_next_param
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|sctp_paramhdr
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_add_pad_tombuf
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_pad_lastmbuf
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_ulp_notify
parameter_list|(
name|uint32_t
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|SCTP_SO_LOCK_TESTING
argument_list|)
name|SCTP_UNUSED
endif|#
directive|endif
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_pull_off_control_to_new_inp
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
name|old_inp
parameter_list|,
name|struct
name|sctp_inpcb
modifier|*
name|new_inp
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|int
name|waitflags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_stop_timers_for_shutdown
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_report_all_outbound
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|int
parameter_list|,
name|int
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|SCTP_SO_LOCK_TESTING
argument_list|)
name|SCTP_UNUSED
endif|#
directive|endif
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_expand_mapping_array
parameter_list|(
name|struct
name|sctp_association
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_abort_notification
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|uint8_t
parameter_list|,
name|uint16_t
parameter_list|,
name|struct
name|sctp_abort_chunk
modifier|*
parameter_list|,
name|int
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|SCTP_SO_LOCK_TESTING
argument_list|)
name|SCTP_UNUSED
endif|#
directive|endif
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* We abort responding to an IP packet for some reason */
end_comment

begin_function_decl
name|void
name|sctp_abort_association
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|struct
name|sctphdr
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|uint8_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* We choose to abort via user input */
end_comment

begin_function_decl
name|void
name|sctp_abort_an_association
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|SCTP_SO_LOCK_TESTING
argument_list|)
name|SCTP_UNUSED
endif|#
directive|endif
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_handle_ootb
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|struct
name|sctphdr
modifier|*
parameter_list|,
name|struct
name|sctp_inpcb
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|uint8_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_connectx_helper_add
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|,
name|int
name|totaddr
parameter_list|,
name|int
modifier|*
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|sctp_tcb
modifier|*
name|sctp_connectx_helper_find
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
name|inp
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|,
name|int
modifier|*
name|totaddr
parameter_list|,
name|int
modifier|*
name|num_v4
parameter_list|,
name|int
modifier|*
name|num_v6
parameter_list|,
name|int
modifier|*
name|error
parameter_list|,
name|int
name|limit
parameter_list|,
name|int
modifier|*
name|bad_addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_is_there_an_abort_here
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint32_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|INET6
end_ifdef

begin_function_decl
name|uint32_t
name|sctp_is_same_scope
parameter_list|(
name|struct
name|sockaddr_in6
modifier|*
parameter_list|,
name|struct
name|sockaddr_in6
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|sockaddr_in6
modifier|*
name|sctp_recover_scope
parameter_list|(
name|struct
name|sockaddr_in6
modifier|*
parameter_list|,
name|struct
name|sockaddr_in6
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|sctp_recover_scope_mac
parameter_list|(
name|addr
parameter_list|,
name|store
parameter_list|)
value|do { \ 	 if ((addr->sin6_family == AF_INET6)&& \ 	     (IN6_IS_SCOPE_LINKLOCAL(&addr->sin6_addr))) { \ 		*store = *addr; \ 		if (addr->sin6_scope_id == 0) { \ 			if (!sa6_recoverscope(store)) { \ 				addr = store; \ 			} \ 		} else { \ 			in6_clearscope(&addr->sin6_addr); \ 			addr = store; \ 		} \ 	 } \ } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|sctp_cmpaddr
parameter_list|(
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_print_address
parameter_list|(
name|struct
name|sockaddr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_release_pr_sctp_chunk
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|struct
name|sctp_tmit_chunk
modifier|*
parameter_list|,
name|uint8_t
parameter_list|,
name|int
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|SCTP_SO_LOCK_TESTING
argument_list|)
name|SCTP_UNUSED
endif|#
directive|endif
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|sctp_generate_cause
parameter_list|(
name|uint16_t
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|sctp_generate_no_user_data_cause
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_bindx_add_address
parameter_list|(
name|struct
name|socket
modifier|*
name|so
parameter_list|,
name|struct
name|sctp_inpcb
modifier|*
name|inp
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|,
name|sctp_assoc_t
name|assoc_id
parameter_list|,
name|uint32_t
name|vrf_id
parameter_list|,
name|int
modifier|*
name|error
parameter_list|,
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_bindx_delete_address
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
name|inp
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|sa
parameter_list|,
name|sctp_assoc_t
name|assoc_id
parameter_list|,
name|uint32_t
name|vrf_id
parameter_list|,
name|int
modifier|*
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_local_addr_count
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|SCTP_MBCNT_LOGGING
end_ifdef

begin_function_decl
name|void
name|sctp_free_bufspace
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|struct
name|sctp_association
modifier|*
parameter_list|,
name|struct
name|sctp_tmit_chunk
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|sctp_free_bufspace
parameter_list|(
name|stcb
parameter_list|,
name|asoc
parameter_list|,
name|tp1
parameter_list|,
name|chk_cnt
parameter_list|)
define|\
value|do { \ 	if (tp1->data != NULL) { \ 		atomic_subtract_int(&((asoc)->chunks_on_out_queue), chk_cnt); \ 		if ((asoc)->total_output_queue_size>= tp1->book_size) { \ 			atomic_subtract_int(&((asoc)->total_output_queue_size), tp1->book_size); \ 		} else { \ 			(asoc)->total_output_queue_size = 0; \ 		} \ 		if (stcb->sctp_socket&& ((stcb->sctp_ep->sctp_flags& SCTP_PCB_FLAGS_TCPTYPE) || \ 		    (stcb->sctp_ep->sctp_flags& SCTP_PCB_FLAGS_IN_TCPPOOL))) { \ 			if (stcb->sctp_socket->so_snd.sb_cc>= tp1->book_size) { \ 				atomic_subtract_int(&((stcb)->sctp_socket->so_snd.sb_cc), tp1->book_size); \ 			} else { \ 				stcb->sctp_socket->so_snd.sb_cc = 0; \ 			} \ 		} \ 	} \ } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|sctp_free_spbufspace
parameter_list|(
name|stcb
parameter_list|,
name|asoc
parameter_list|,
name|sp
parameter_list|)
define|\
value|do { \ 	if (sp->data != NULL) { \ 		if ((asoc)->total_output_queue_size>= sp->length) { \ 			atomic_subtract_int(&(asoc)->total_output_queue_size, sp->length); \ 		} else { \ 			(asoc)->total_output_queue_size = 0; \ 		} \ 		if (stcb->sctp_socket&& ((stcb->sctp_ep->sctp_flags& SCTP_PCB_FLAGS_TCPTYPE) || \ 		    (stcb->sctp_ep->sctp_flags& SCTP_PCB_FLAGS_IN_TCPPOOL))) { \ 			if (stcb->sctp_socket->so_snd.sb_cc>= sp->length) { \ 				atomic_subtract_int(&stcb->sctp_socket->so_snd.sb_cc,sp->length); \ 			} else { \ 				stcb->sctp_socket->so_snd.sb_cc = 0; \ 			} \ 		} \ 	} \ } while (0)
end_define

begin_define
define|#
directive|define
name|sctp_snd_sb_alloc
parameter_list|(
name|stcb
parameter_list|,
name|sz
parameter_list|)
define|\
value|do { \ 	atomic_add_int(&stcb->asoc.total_output_queue_size,sz); \ 	if ((stcb->sctp_socket != NULL)&& \ 	    ((stcb->sctp_ep->sctp_flags& SCTP_PCB_FLAGS_TCPTYPE) || \ 	     (stcb->sctp_ep->sctp_flags& SCTP_PCB_FLAGS_IN_TCPPOOL))) { \ 		atomic_add_int(&stcb->sctp_socket->so_snd.sb_cc,sz); \ 	} \ } while (0)
end_define

begin_comment
comment|/* functions to start/stop udp tunneling */
end_comment

begin_function_decl
name|void
name|sctp_over_udp_stop
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_over_udp_start
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_soreceive
parameter_list|(
name|struct
name|socket
modifier|*
name|so
parameter_list|,
name|struct
name|sockaddr
modifier|*
modifier|*
name|psa
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
name|mp0
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
name|controlp
parameter_list|,
name|int
modifier|*
name|flagsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_misc_ints
parameter_list|(
name|uint8_t
name|from
parameter_list|,
name|uint32_t
name|a
parameter_list|,
name|uint32_t
name|b
parameter_list|,
name|uint32_t
name|c
parameter_list|,
name|uint32_t
name|d
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_wakeup_log
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|uint32_t
name|wake_cnt
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_strm_del_alt
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|uint32_t
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_nagle_event
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|int
name|action
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_mb
parameter_list|(
name|struct
name|mbuf
modifier|*
name|m
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_sblog
parameter_list|(
name|struct
name|sockbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|incr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_strm_del
parameter_list|(
name|struct
name|sctp_queued_to_read
modifier|*
name|control
parameter_list|,
name|struct
name|sctp_queued_to_read
modifier|*
name|poschk
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_cwnd
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|struct
name|sctp_nets
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rto_logging
parameter_list|(
name|struct
name|sctp_nets
modifier|*
name|net
parameter_list|,
name|int
name|from
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_closing
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
name|inp
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|int16_t
name|loc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_lock
parameter_list|(
name|struct
name|sctp_inpcb
modifier|*
name|inp
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|uint8_t
name|from
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_maxburst
parameter_list|(
name|struct
name|sctp_tcb
modifier|*
name|stcb
parameter_list|,
name|struct
name|sctp_nets
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_block
parameter_list|(
name|uint8_t
parameter_list|,
name|struct
name|sctp_association
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_rwnd
parameter_list|(
name|uint8_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_mbcnt
parameter_list|(
name|uint8_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_rwnd_set
parameter_list|(
name|uint8_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sctp_fill_stat_log
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_fr
parameter_list|(
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_sack
parameter_list|(
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_log_map
parameter_list|(
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_print_mapping_array
parameter_list|(
name|struct
name|sctp_association
modifier|*
name|asoc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_clr_stat_log
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|SCTP_AUDITING_ENABLED
end_ifdef

begin_function_decl
name|void
name|sctp_auditing
parameter_list|(
name|int
parameter_list|,
name|struct
name|sctp_inpcb
modifier|*
parameter_list|,
name|struct
name|sctp_tcb
modifier|*
parameter_list|,
name|struct
name|sctp_nets
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sctp_audit_log
parameter_list|(
name|uint8_t
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

