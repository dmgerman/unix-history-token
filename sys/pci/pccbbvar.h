begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1999 HAYAKAWA Koichi.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by HAYAKAWA Koichi.  * 4. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_struct_decl
struct_decl|struct
name|pccbb_softc
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|cbb_pcic_handle
block|{
name|struct
name|pccbb_softc
modifier|*
name|sc
decl_stmt|;
name|bus_space_tag_t
name|ph_iot
decl_stmt|;
name|bus_space_handle_t
name|ph_ioh
decl_stmt|;
name|u_int8_t
argument_list|(
argument|* ph_read
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|cbb_pcic_handle
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|* ph_write
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|cbb_pcic_handle
operator|*
operator|,
name|int
operator|,
name|u_int8_t
operator|)
argument_list|)
expr_stmt|;
name|int
name|sock
decl_stmt|;
name|int
name|vendor
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|memalloc
decl_stmt|;
struct|struct
block|{
name|bus_addr_t
name|addr
decl_stmt|;
name|bus_size_t
name|size
decl_stmt|;
name|long
name|offset
decl_stmt|;
name|int
name|kind
decl_stmt|;
block|}
name|mem
index|[
name|PCIC_MEM_WINS
index|]
struct|;
name|int
name|ioalloc
decl_stmt|;
struct|struct
block|{
name|bus_addr_t
name|addr
decl_stmt|;
name|bus_size_t
name|size
decl_stmt|;
name|int
name|width
decl_stmt|;
block|}
name|io
index|[
name|PCIC_IO_WINS
index|]
struct|;
name|int
name|ih_irq
decl_stmt|;
name|struct
name|device
modifier|*
name|pcmcia
decl_stmt|;
name|int
name|shutdown
decl_stmt|;
name|struct
name|proc
modifier|*
name|event_thread
decl_stmt|;
name|SIMPLEQ_HEAD
argument_list|(
argument_list|,
argument|pcic_event
argument_list|)
name|events
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|pccbb_softc
block|{
name|struct
name|device
name|sc_dev
decl_stmt|;
name|bus_space_tag_t
name|sc_iot
decl_stmt|;
name|bus_space_tag_t
name|sc_memt
decl_stmt|;
name|bus_space_tag_t
name|sc_base_memt
decl_stmt|;
name|bus_space_handle_t
name|sc_base_memh
decl_stmt|;
name|void
modifier|*
name|sc_ih
decl_stmt|;
comment|/* interrupt handler */
name|int
name|sc_intrline
decl_stmt|;
comment|/* interrupt line */
name|pcitag_t
name|sc_intrtag
decl_stmt|;
comment|/* copy of pa->pa_intrtag */
name|pci_intr_pin_t
name|sc_intrpin
decl_stmt|;
comment|/* copy of pa->pa_intrpin */
name|int
name|sc_function
decl_stmt|;
name|u_int32_t
name|sc_flags
decl_stmt|;
define|#
directive|define
name|CBB_CARDEXIST
value|0x01
define|#
directive|define
name|CBB_CARDSTATUS_BUSY
value|0x01000000
name|pci_chipset_tag_t
name|sc_pc
decl_stmt|;
name|pcitag_t
name|sc_tag
decl_stmt|;
name|int
name|sc_chipset
decl_stmt|;
comment|/* chipset id */
name|bus_addr_t
name|sc_mem_start
decl_stmt|;
comment|/* CardBus/PCMCIA memory start */
name|bus_addr_t
name|sc_mem_end
decl_stmt|;
comment|/* CardBus/PCMCIA memory end */
comment|/* CardBus stuff */
name|struct
name|cardbus_softc
modifier|*
name|sc_csc
decl_stmt|;
name|struct
name|device
modifier|*
name|sc_cbdev
decl_stmt|;
comment|/* Device which attached to the slot XXX mfc */
comment|/* pcmcia stuff */
name|struct
name|cbb_pcic_handle
name|sc_pcmcia_h
decl_stmt|;
name|pcmcia_chipset_tag_t
name|sc_pct
decl_stmt|;
name|int
name|sc_pcmcia_flags
decl_stmt|;
define|#
directive|define
name|PCCBB_PCMCIA_IO_RELOC
value|0x01
comment|/* IO address relocatable stuff exists */
define|#
directive|define
name|PCCBB_PCMCIA_MEM_32
value|0x02
comment|/* 32-bit memory address ready */
comment|/* kthread staff */
name|int
name|sc_queued
decl_stmt|;
name|struct
name|proc
modifier|*
name|event_thread
decl_stmt|;
name|SIMPLEQ_HEAD
argument_list|(
argument_list|,
argument|pcic_event
argument_list|)
name|events
expr_stmt|;
block|}
struct|;
end_struct

end_unit

