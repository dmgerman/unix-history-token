begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1995 Matt Thomas (thomas@lkg.dec.com)  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software withough specific prior written permission  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $Id: pdqreg.h,v 1.5 1995/03/10 17:41:55 thomas Exp $  *  * $Log: pdqreg.h,v $  * Revision 1.5  1995/03/10  17:41:55  thomas  * Add DEFTA, DEFQA, and DEFAA  *  * Revision 1.4  1995/03/06  17:07:05  thomas  * Add copyright/disclaimer  * Add EISA register definitions  *  * Revision 1.3  1995/03/03  13:48:35  thomas  * more fixes  *  *  */
end_comment

begin_comment
comment|/*  * DEC PDQ FDDI Controller; PDQ port driver definitions  *  * Written by Matt Thomas  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PDQREG_H
end_ifndef

begin_define
define|#
directive|define
name|_PDQREG_H
end_define

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|PDQTEST
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|PDQ_NDEBUG
argument_list|)
end_if

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_define
define|#
directive|define
name|PDQ_ASSERT
value|assert
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|PDQ_ASSERT
parameter_list|(
name|x
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|PDQ_RING_SIZE
parameter_list|(
name|array
parameter_list|)
value|((sizeof(array) / sizeof(array[0])))
end_define

begin_define
define|#
directive|define
name|PDQ_ARRAY_SIZE
parameter_list|(
name|array
parameter_list|)
value|((sizeof(array) / sizeof(array[0])))
end_define

begin_define
define|#
directive|define
name|PDQ_RING_MASK
parameter_list|(
name|array
parameter_list|)
value|(PDQ_RING_SIZE(array) - 1)
end_define

begin_define
define|#
directive|define
name|PDQ_BITMASK
parameter_list|(
name|n
parameter_list|)
value|(1L<< (pdq_uint32_t) (n))
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_MAX
value|4495
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_LLC_MIN
value|20
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_SMT_MIN
value|37
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_SMT
value|0x40
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_LLC_ASYNC
value|0x50
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_LLC_SYNC
value|0xD0
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_IMP_ASYNC
value|0x60
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_IMP_SYNC
value|0xE0
end_define

begin_define
define|#
directive|define
name|PDQ_FDDIFC_C
value|0x80
end_define

begin_define
define|#
directive|define
name|PDQ_FDDIFC_L
value|0x40
end_define

begin_define
define|#
directive|define
name|PDQ_FDDIFC_F
value|0x30
end_define

begin_define
define|#
directive|define
name|PDQ_FDDIFC_Z
value|0x0F
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_PH0
value|0x20
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_PH1
value|0x38
end_define

begin_define
define|#
directive|define
name|PDQ_FDDI_PH2
value|0x00
end_define

begin_typedef
typedef|typedef
name|unsigned
name|int
name|pdq_uint32_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|short
name|pdq_uint16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|char
name|pdq_uint8_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|pdq_uint32_t
name|pdq_physaddr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint8_t
name|lanaddr_bytes
index|[
literal|8
index|]
decl_stmt|;
block|}
name|pdq_lanaddr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint8_t
name|fwrev_bytes
index|[
literal|4
index|]
decl_stmt|;
block|}
name|pdq_fwrev_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQS_RESET
init|=
literal|0
block|,
name|PDQS_UPGRADE
init|=
literal|1
block|,
name|PDQS_DMA_UNAVAILABLE
init|=
literal|2
block|,
name|PDQS_DMA_AVAILABLE
init|=
literal|3
block|,
name|PDQS_LINK_AVAILABLE
init|=
literal|4
block|,
name|PDQS_LINK_UNAVAILABLE
init|=
literal|5
block|,
name|PDQS_HALTED
init|=
literal|6
block|,
name|PDQS_RING_MEMBER
init|=
literal|7
block|}
name|pdq_state_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_port_reset
decl_stmt|;
comment|/* 0x00 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_host_data
decl_stmt|;
comment|/* 0x04 [R]  */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_port_control
decl_stmt|;
comment|/* 0x08 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_port_data_a
decl_stmt|;
comment|/* 0x0C [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_port_data_b
decl_stmt|;
comment|/* 0x10 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_port_status
decl_stmt|;
comment|/* 0x14 [R]  */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_host_int_type_0
decl_stmt|;
comment|/* 0x18 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_host_int_enable
decl_stmt|;
comment|/* 0x1C [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_type_2_producer
decl_stmt|;
comment|/* 0x20 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_cmd_response_producer
decl_stmt|;
comment|/* 0x28 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_cmd_request_producer
decl_stmt|;
comment|/* 0x2C [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_host_smt_producer
decl_stmt|;
comment|/* 0x30 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_unsolicited_producer
decl_stmt|;
comment|/* 0x34 [RW] */
block|}
name|pdq_csrs_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_pfi_mode_control
decl_stmt|;
comment|/* 0x40 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_pfi_status
decl_stmt|;
comment|/* 0x44 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_fifo_write
decl_stmt|;
comment|/* 0x48 [RW] */
specifier|volatile
name|pdq_uint32_t
modifier|*
name|csr_fifo_read
decl_stmt|;
comment|/* 0x4C [RW] */
block|}
name|pdq_pci_csrs_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PDQ_PFI_MODE_DMA_ENABLE
value|0x01
end_define

begin_comment
comment|/* DMA Enable */
end_comment

begin_define
define|#
directive|define
name|PDQ_PFI_MODE_PFI_PCI_INTR
value|0x02
end_define

begin_comment
comment|/* PFI-to-PCI Int Enable */
end_comment

begin_define
define|#
directive|define
name|PDQ_PFI_MODE_PDQ_PCI_INTR
value|0x04
end_define

begin_comment
comment|/* PDQ-to-PCI Int Enable */
end_comment

begin_define
define|#
directive|define
name|PDQ_PFI_STATUS_PDQ_INTR
value|0x10
end_define

begin_comment
comment|/* PDQ Int received */
end_comment

begin_define
define|#
directive|define
name|PDQ_PFI_STATUS_DMA_ABORT
value|0x08
end_define

begin_comment
comment|/* PDQ DMA Abort asserted */
end_comment

begin_define
define|#
directive|define
name|PDQ_EISA_BURST_HOLDOFF
value|0x0040
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_SLOT_ID
value|0x0C80
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_SLOT_CTRL
value|0x0C84
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_CMP_0
value|0x0C85
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_CMP_1
value|0x0C86
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_CMP_2
value|0x0C87
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_HI_CMP_0
value|0x0C88
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_HI_CMP_1
value|0x0C89
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_HI_CMP_2
value|0x0C8A
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_MASK_0
value|0x0C8B
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_MASK_1
value|0x0C8C
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_MASK_2
value|0x0C8D
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_LO_CMP_0
value|0x0C8E
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_LO_CMP_1
value|0x0C8F
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MEM_ADD_LO_CMP_2
value|0x0C90
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CMP_0_0
value|0x0C91
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CMP_0_1
value|0x0C92
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CMP_1_0
value|0x0C93
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CMP_1_1
value|0x0C94
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CMP_2_0
value|0x0C95
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CMP_2_1
value|0x0C96
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CMP_3_0
value|0x0C97
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CMP_3_1
value|0x0C98
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_ADD_MASK_0_0
value|0x0C99
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_ADD_MASK_0_1
value|0x0C9A
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_ADD_MASK_1_0
value|0x0C9B
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_ADD_MASK_1_1
value|0x0C9C
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_ADD_MASK_2_0
value|0x0C9D
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_ADD_MASK_2_1
value|0x0C9E
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_ADD_MASK_3_0
value|0x0C9F
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_ADD_MASK_3_1
value|0x0CA0
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MOD_CONFIG_1
value|0x0CA1
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MOD_CONFIG_2
value|0x0CA2
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MOD_CONFIG_3
value|0x0CA3
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MOD_CONFIG_4
value|0x0CA4
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MOD_CONFIG_5
value|0x0CA5
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MOD_CONFIG_6
value|0x0CA6
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_MOD_CONFIG_7
value|0x0CA7
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_DIP_SWITCH
value|0x0CA8
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CONFIG_STAT_0
value|0x0CA9
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_IO_CONFIG_STAT_1
value|0x0CAA
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_DMA_CONFIG
value|0x0CAB
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_INPUT_PORT
value|0x0CAC
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_OUTPUT_PORT
value|0x0CAD
end_define

begin_define
define|#
directive|define
name|PDQ_EISA_FUNCTION_CTRL
value|0x0CAE
end_define

begin_comment
comment|/*  * Port Reset Data A Definitions  */
end_comment

begin_define
define|#
directive|define
name|PDQ_PRESET_SKIP_SELFTEST
value|0x0004
end_define

begin_define
define|#
directive|define
name|PDQ_PRESET_SOFT_RESET
value|0x0002
end_define

begin_define
define|#
directive|define
name|PDQ_PRESET_UPGRADE
value|0x0001
end_define

begin_comment
comment|/*  * Port Control Register Definitions  */
end_comment

begin_define
define|#
directive|define
name|PDQ_PCTL_CMD_ERROR
value|0x8000
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_FLASH_BLAST
value|0x4000
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_HALT
value|0x2000
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_COPY_DATA
value|0x1000
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_ERROR_LOG_START
value|0x0800
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_ERROR_LOG_READ
value|0x0400
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_XMT_DATA_FLUSH_DONE
value|0x0200
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_DMA_INIT
value|0x0100
end_define

begin_define
define|#
directive|define
name|PDQ_DMA_INIT_LW_BSWAP_DATA
value|0x02
end_define

begin_define
define|#
directive|define
name|PDQ_DMA_INIT_LW_BSWAP_LITERAL
value|0x01
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_INIT_START
value|0x0080
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_CONSUMER_BLOCK
value|0x0040
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_DMA_UNINIT
value|0x0020
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_RING_MEMBER
value|0x0010
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_MLA_READ
value|0x0008
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_FW_REV_READ
value|0x0004
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_DEVICE_SPECIFIC
value|0x0002
end_define

begin_define
define|#
directive|define
name|PDQ_PCTL_SUB_CMD
value|0x0001
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_SUB_CMD_LINK_UNINIT
init|=
literal|1
block|,
name|PDQ_SUB_CMD_DMA_BURST_SIZE_SET
init|=
literal|2
block|,
name|PDQ_SUB_CMD_PDQ_REV_GET
init|=
literal|4
block|}
name|pdq_sub_cmd_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_DMA_BURST_4LW
init|=
literal|0
block|,
name|PDQ_DMA_BURST_8LW
init|=
literal|1
block|,
name|PDQ_DMA_BURST_16LW
init|=
literal|2
block|,
name|PDQ_DMA_BURST_32LW
init|=
literal|3
block|}
name|pdq_dma_burst_size_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_CHIP_REV_A_B_OR_C
init|=
literal|0
block|,
name|PDQ_CHIP_REV_D
init|=
literal|2
block|,
name|PDQ_CHIP_REV_E
init|=
literal|4
block|}
name|pdq_chip_rev_t
typedef|;
end_typedef

begin_comment
comment|/*  * Port Status Register Definitions  */
end_comment

begin_define
define|#
directive|define
name|PDQ_PSTS_RCV_DATA_PENDING
value|0x80000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_PSTS_XMT_DATA_PENDING
value|0x40000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_PSTS_HOST_SMT_PENDING
value|0x20000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_PSTS_UNSOL_PENDING
value|0x10000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_PSTS_CMD_RSP_PENDING
value|0x08000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_PSTS_CMD_REQ_PENDING
value|0x04000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_PSTS_TYPE_0_PENDING
value|0x02000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_PSTS_INTR_PENDING
value|0xFE000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_PSTS_ADAPTER_STATE
parameter_list|(
name|sts
parameter_list|)
value|((pdq_state_t) (((sts)>> 8)& 0x07))
end_define

begin_define
define|#
directive|define
name|PDQ_PSTS_HALT_ID
parameter_list|(
name|sts
parameter_list|)
value|((pdq_halt_code_t) ((sts)& 0xFF))
end_define

begin_comment
comment|/*  * Host Interrupt Register Definitions  */
end_comment

begin_define
define|#
directive|define
name|PDQ_HOST_INT_TX_ENABLE
value|0x80000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_RX_ENABLE
value|0x40000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_UNSOL_ENABLE
value|0x20000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_HOST_SMT_ENABLE
value|0x10000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_CMD_RSP_ENABLE
value|0x08000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_CMD_RQST_ENABLE
value|0x04000000ul
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_1MS
value|0x80
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_20MS
value|0x40
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_CSR_CMD_DONE
value|0x20
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_STATE_CHANGE
value|0x10
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_XMT_DATA_FLUSH
value|0x08
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_NXM
value|0x04
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_PM_PARITY_ERROR
value|0x02
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_HOST_BUS_PARITY_ERROR
value|0x01
end_define

begin_define
define|#
directive|define
name|PDQ_HOST_INT_FATAL_ERROR
value|0x07
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQH_SELFTEST_TIMEOUT
init|=
literal|0
block|,
name|PDQH_HOST_BUS_PARITY_ERROR
init|=
literal|1
block|,
name|PDQH_HOST_DIRECTED_HALT
init|=
literal|2
block|,
name|PDQH_SOFTWARE_FAULT
init|=
literal|3
block|,
name|PDQH_HARDWARE_FAULT
init|=
literal|4
block|,
name|PDQH_PC_TRACE_PATH_TEST
init|=
literal|5
block|,
name|PDQH_DMA_ERROR
init|=
literal|6
block|,
name|PDQH_IMAGE_CRC_ERROR
init|=
literal|7
block|,
name|PDQH_ADAPTER_PROCESSOR_ERROR
init|=
literal|8
block|,
name|PDQH_MAX
init|=
literal|9
block|}
name|pdq_halt_code_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint16_t
name|pdqcb_receives
decl_stmt|;
name|pdq_uint16_t
name|pdqcb_transmits
decl_stmt|;
name|pdq_uint32_t
name|pdqcb__filler1
decl_stmt|;
name|pdq_uint32_t
name|pdqcb_host_smt
decl_stmt|;
name|pdq_uint32_t
name|pdqcb__filler2
decl_stmt|;
name|pdq_uint32_t
name|pdqcb_unsolicited_event
decl_stmt|;
name|pdq_uint32_t
name|pdqcb__filler3
decl_stmt|;
name|pdq_uint32_t
name|pdqcb_command_response
decl_stmt|;
name|pdq_uint32_t
name|pdqcb__filler4
decl_stmt|;
name|pdq_uint32_t
name|pdqcb_command_request
decl_stmt|;
name|pdq_uint32_t
name|pdqcb__filler5
index|[
literal|7
index|]
decl_stmt|;
block|}
name|pdq_consumer_block_t
typedef|;
end_typedef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|BYTE_ORDER
argument_list|)
operator|&&
name|BYTE_ORDER
operator|==
name|BIG_ENDIAN
end_if

begin_define
define|#
directive|define
name|PDQ_BITFIELD2
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|b, a
end_define

begin_define
define|#
directive|define
name|PDQ_BITFIELD3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|c, b, a
end_define

begin_define
define|#
directive|define
name|PDQ_BITFIELD4
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
value|d, c, b, a
end_define

begin_define
define|#
directive|define
name|PDQ_BITFIELD5
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|)
value|e, d, c, b, a
end_define

begin_define
define|#
directive|define
name|PDQ_BITFIELD12
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|,
name|f
parameter_list|,
name|g
parameter_list|,
name|h
parameter_list|,
name|i
parameter_list|,
name|j
parameter_list|,
name|k
parameter_list|,
name|l
parameter_list|)
define|\
value|l, k, j, i, h, g, f, e, d, c, b, a
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|PDQ_BITFIELD2
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|a, b
end_define

begin_define
define|#
directive|define
name|PDQ_BITFIELD3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|a, b, c
end_define

begin_define
define|#
directive|define
name|PDQ_BITFIELD4
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
value|a, b, c, d
end_define

begin_define
define|#
directive|define
name|PDQ_BITFIELD5
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|)
value|a, b, c, d, e
end_define

begin_define
define|#
directive|define
name|PDQ_BITFIELD12
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|,
name|f
parameter_list|,
name|g
parameter_list|,
name|h
parameter_list|,
name|i
parameter_list|,
name|j
parameter_list|,
name|k
parameter_list|,
name|l
parameter_list|)
define|\
value|a, b, c, d, e, f, g, h, i, j, k, l
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint32_t
name|PDQ_BITFIELD5
argument_list|(
name|rxd_pa_hi
operator|:
literal|16
argument_list|,
name|rxd_seg_cnt
operator|:
literal|4
argument_list|,
name|rxd_seg_len_hi
operator|:
literal|9
argument_list|,
name|rxd_seg_len_lo
operator|:
literal|2
argument_list|,
name|rxd_sop
operator|:
literal|1
argument_list|)
decl_stmt|;
name|pdq_uint32_t
name|rxd_pa_lo
decl_stmt|;
block|}
name|pdq_rxdesc_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|pdq_uint32_t
name|rxs_status
decl_stmt|;
name|pdq_uint32_t
name|PDQ_BITFIELD12
argument_list|(
name|rxs_len
operator|:
literal|13
argument_list|,
name|rxs_rcc_ss
operator|:
literal|2
argument_list|,
name|rxs_rcc_dd
operator|:
literal|2
argument_list|,
name|rxs_rcc_reason
operator|:
literal|3
argument_list|,
name|rxs_rcc_badcrc
operator|:
literal|1
argument_list|,
name|rxs_rcc_badpdu
operator|:
literal|1
argument_list|,
name|rxs_fsb__reserved
operator|:
literal|2
argument_list|,
name|rxs_fsb_c
operator|:
literal|1
argument_list|,
name|rxs_fsb_a
operator|:
literal|1
argument_list|,
name|rxs_fsb_e
operator|:
literal|1
argument_list|,
name|rxs_fsc
operator|:
literal|3
argument_list|,
name|rxs__reserved
operator|:
literal|2
argument_list|)
decl_stmt|;
block|}
name|pdq_rxstatus_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint32_t
name|PDQ_BITFIELD5
argument_list|(
name|txd_pa_hi
operator|:
literal|16
argument_list|,
name|txd_seg_len
operator|:
literal|13
argument_list|,
name|txd_mbz
operator|:
literal|1
argument_list|,
name|txd_eop
operator|:
literal|1
argument_list|,
name|txd_sop
operator|:
literal|1
argument_list|)
decl_stmt|;
name|pdq_uint32_t
name|txd_pa_lo
decl_stmt|;
block|}
name|pdq_txdesc_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_rxdesc_t
name|pdqdb_receives
index|[
literal|256
index|]
decl_stmt|;
comment|/* 2048;	0x0000..0x07FF */
name|pdq_txdesc_t
name|pdqdb_transmits
index|[
literal|256
index|]
decl_stmt|;
comment|/* 2048;	0x0800..0x0FFF */
name|pdq_rxdesc_t
name|pdqdb_host_smt
index|[
literal|64
index|]
decl_stmt|;
comment|/*  512;	0x1000..0x11FF */
name|pdq_rxdesc_t
name|pdqdb_unsolicited_events
index|[
literal|16
index|]
decl_stmt|;
comment|/*  128;	0x1200..0x127F */
name|pdq_rxdesc_t
name|pdqdb_command_responses
index|[
literal|16
index|]
decl_stmt|;
comment|/*  128;	0x1280..0x12FF */
name|pdq_txdesc_t
name|pdqdb_command_requests
index|[
literal|16
index|]
decl_stmt|;
comment|/*  128;	0x1300..0x137F */
comment|/*      * The rest of the descriptor block is unused.      * As such we could use it for other things.      */
name|pdq_consumer_block_t
name|pdqdb_consumer
decl_stmt|;
comment|/*   64;	0x1380..0x13BF */
name|void
modifier|*
name|pdqdb_receive_buffers
index|[
literal|256
index|]
decl_stmt|;
comment|/* 1024/2048;	0x13C0..0x17BF 0x13C0..0x1BBF */
name|void
modifier|*
name|pdqdb_host_smt_buffers
index|[
literal|64
index|]
decl_stmt|;
comment|/*  256/ 512;	0x17C0..0x18BF 0x1BC0..0x1DBF */
comment|/*      * The maximum command size is 512 so as long as thes      * command is at least that long all will be fine.      */
ifdef|#
directive|ifdef
name|__alpha
name|pdq_uint32_t
name|pdqdb_command_pool
index|[
literal|144
index|]
decl_stmt|;
else|#
directive|else
name|pdq_uint32_t
name|pdqdb_command_pool
index|[
literal|464
index|]
decl_stmt|;
endif|#
directive|endif
block|}
name|pdq_descriptor_block_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_DEFPA
block|,
comment|/* PCI-bus */
name|PDQ_DEFEA
block|,
comment|/* EISA-bus */
name|PDQ_DEFTA
block|,
comment|/* TurboChannel */
name|PDQ_DEFAA
block|,
comment|/* FutureBus+ */
name|PDQ_DEFQA
comment|/* Q-bus */
block|}
name|pdq_type_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
comment|/*      * These value manage the available space in command/response      * buffer area.      */
name|pdq_physaddr_t
name|ci_pa_bufstart
decl_stmt|;
name|pdq_uint8_t
modifier|*
name|ci_bufstart
decl_stmt|;
name|pdq_uint8_t
modifier|*
name|ci_bufend
decl_stmt|;
name|pdq_uint8_t
modifier|*
name|ci_bufptr
decl_stmt|;
name|size_t
name|ci_buffree
decl_stmt|;
comment|/*      * Bitmask of commands to sent to the PDQ      */
name|pdq_uint32_t
name|ci_pending_commands
decl_stmt|;
comment|/*      * Variables to maintain the PDQ queues.      */
name|pdq_uint32_t
name|ci_request_free
decl_stmt|;
name|pdq_uint32_t
name|ci_response_free
decl_stmt|;
name|pdq_uint32_t
name|ci_request_max
decl_stmt|;
name|pdq_uint32_t
name|ci_response_max
decl_stmt|;
name|pdq_uint32_t
name|ci_request_producer
decl_stmt|;
name|pdq_uint32_t
name|ci_response_producer
decl_stmt|;
name|pdq_uint32_t
name|ci_request_completion
decl_stmt|;
name|pdq_uint32_t
name|ci_response_completion
decl_stmt|;
block|}
name|pdq_command_info_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PDQ_SIZE_UNSOLICITED_EVENT
value|512
end_define

begin_define
define|#
directive|define
name|PDQ_NUM_UNSOLICITED_EVENTS
value|(PDQ_OS_PAGESIZE / PDQ_SIZE_UNSOLICITED_EVENT)
end_define

begin_typedef
typedef|typedef
name|struct
name|_pdq_unsolicited_event_t
name|pdq_unsolicited_event_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_physaddr_t
name|ui_pa_bufstart
decl_stmt|;
name|pdq_unsolicited_event_t
modifier|*
name|ui_events
decl_stmt|;
name|pdq_uint32_t
name|ui_free
decl_stmt|;
name|pdq_uint32_t
name|ui_producer
decl_stmt|;
name|pdq_uint32_t
name|ui_completion
decl_stmt|;
block|}
name|pdq_unsolicited_info_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PDQ_RX_FC_OFFSET
value|(sizeof(pdq_rxstatus_t) + 3)
end_define

begin_define
define|#
directive|define
name|PDQ_RX_SEGCNT
value|((PDQ_FDDI_MAX + PDQ_OS_DATABUF_SIZE - 1) / PDQ_OS_DATABUF_SIZE)
end_define

begin_define
define|#
directive|define
name|PDQ_DO_TYPE2_PRODUCER
parameter_list|(
name|pdq
parameter_list|)
define|\
value|(*pdq->pdq_csrs.csr_type_2_producer = (pdq->pdq_rx_info.rx_producer<< 0) \ 	| (pdq->pdq_tx_info.tx_producer<< 8) \ 	| (pdq->pdq_rx_info.rx_completion<< 16) \ 	| (pdq->pdq_tx_info.tx_completion<< 24))
end_define

begin_define
define|#
directive|define
name|PDQ_ADVANCE
parameter_list|(
name|n
parameter_list|,
name|a
parameter_list|,
name|m
parameter_list|)
value|((n) = ((n) + (a))& (m))
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|void
modifier|*
name|q_head
decl_stmt|;
name|void
modifier|*
name|q_tail
decl_stmt|;
block|}
name|pdq_databuf_queue_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|void
modifier|*
name|rx_buffers
decl_stmt|;
name|pdq_uint32_t
name|rx_target
decl_stmt|;
name|pdq_uint32_t
name|rx_free
decl_stmt|;
name|pdq_uint32_t
name|rx_producer
decl_stmt|;
name|pdq_uint32_t
name|rx_completion
decl_stmt|;
block|}
name|pdq_rx_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_databuf_queue_t
name|tx_txq
decl_stmt|;
name|pdq_txdesc_t
name|tx_hdrdesc
decl_stmt|;
name|pdq_uint8_t
name|tx_descriptor_count
index|[
literal|256
index|]
decl_stmt|;
name|pdq_uint32_t
name|tx_free
decl_stmt|;
name|pdq_uint32_t
name|tx_producer
decl_stmt|;
name|pdq_uint32_t
name|tx_completion
decl_stmt|;
block|}
name|pdq_tx_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_csrs_t
name|pdq_csrs
decl_stmt|;
name|pdq_pci_csrs_t
name|pdq_pci_csrs
decl_stmt|;
name|pdq_type_t
name|pdq_type
decl_stmt|;
name|pdq_chip_rev_t
name|pdq_chip_rev
decl_stmt|;
name|pdq_lanaddr_t
name|pdq_hwaddr
decl_stmt|;
name|pdq_fwrev_t
name|pdq_fwrev
decl_stmt|;
name|pdq_descriptor_block_t
modifier|*
name|pdq_dbp
decl_stmt|;
specifier|volatile
name|pdq_consumer_block_t
modifier|*
name|pdq_cbp
decl_stmt|;
name|pdq_uint32_t
name|pdq_flags
decl_stmt|;
define|#
directive|define
name|PDQ_PROMISC
value|0x0001
define|#
directive|define
name|PDQ_ALLMULTI
value|0x0002
define|#
directive|define
name|PDQ_PASS_SMT
value|0x0004
define|#
directive|define
name|PDQ_RUNNING
value|0x0008
define|#
directive|define
name|PDQ_PRINTCHARS
value|0x0010
define|#
directive|define
name|PDQ_TXOK
value|0x0020
specifier|const
name|char
modifier|*
name|pdq_os_name
decl_stmt|;
name|void
modifier|*
name|pdq_os_ctx
decl_stmt|;
name|pdq_uint32_t
name|pdq_unit
decl_stmt|;
name|pdq_command_info_t
name|pdq_command_info
decl_stmt|;
name|pdq_unsolicited_info_t
name|pdq_unsolicited_info
decl_stmt|;
name|pdq_tx_info_t
name|pdq_tx_info
decl_stmt|;
name|pdq_rx_info_t
name|pdq_rx_info
decl_stmt|;
name|pdq_rx_info_t
name|pdq_host_smt_info
decl_stmt|;
name|pdq_uint8_t
name|pdq_tx_hdr
index|[
literal|3
index|]
decl_stmt|;
block|}
name|pdq_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQC_START
init|=
literal|0
block|,
name|PDQC_FILTER_SET
init|=
literal|1
block|,
name|PDQC_FILTER_GET
init|=
literal|2
block|,
name|PDQC_CHARS_SET
init|=
literal|3
block|,
name|PDQC_STATUS_CHARS_GET
init|=
literal|4
block|,
name|PDQC_COUNTERS_GET
init|=
literal|5
block|,
name|PDQC_COUNTERS_SET
init|=
literal|6
block|,
name|PDQC_ADDR_FILTER_SET
init|=
literal|7
block|,
name|PDQC_ADDR_FILTER_GET
init|=
literal|8
block|,
name|PDQC_ERROR_LOG_CLEAR
init|=
literal|9
block|,
name|PDQC_ERROR_LOG_GET
init|=
literal|10
block|,
name|PDQC_FDDI_MIB_GET
init|=
literal|11
block|,
name|PDQC_DEC_EXT_MIB_GET
init|=
literal|12
block|,
name|PDQC_DEV_SPECIFIC_GET
init|=
literal|13
block|,
name|PDQC_SNMP_SET
init|=
literal|14
block|,
name|PDQC_SMT_MIB_GET
init|=
literal|16
block|,
name|PDQC_SMT_MIB_SET
init|=
literal|17
block|}
name|pdq_cmd_code_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQR_SUCCESS
init|=
literal|0
block|,
name|PDQR_FAILURE
init|=
literal|1
block|,
name|PDQR_WARNING
init|=
literal|2
block|,
name|PDQR_LOOP_MODE_BAD
init|=
literal|3
block|,
name|PDQR_ITEM_CODE_BAD
init|=
literal|4
block|,
name|PDQR_TVX_BAD
init|=
literal|5
block|,
name|PDQR_TREQ_BAD
init|=
literal|6
block|,
name|PDQR_RESTRICTED_TOKEN_BAD
init|=
literal|7
block|,
name|PDQR_NO_EOL
init|=
literal|12
block|,
name|PDQR_FILTER_STATE_BAD
init|=
literal|13
block|,
name|PDQR_CMD_TYPE_BAD
init|=
literal|14
block|,
name|PDQR_ADAPTER_STATE_BAD
init|=
literal|15
block|,
name|PDQR_RING_PURGER_BAD
init|=
literal|16
block|,
name|PDQR_LEM_THRESHOLD_BAD
init|=
literal|17
block|,
name|PDQR_LOOP_NOT_SUPPORTED
init|=
literal|18
block|,
name|PDQR_FLUSH_TIME_BAD
init|=
literal|19
block|,
name|PDQR_NOT_YET_IMPLEMENTED
init|=
literal|20
block|,
name|PDQR_CONFIG_POLICY_BAD
init|=
literal|21
block|,
name|PDQR_STATION_ACTION_BAD
init|=
literal|22
block|,
name|PDQR_MAC_ACTION_BAD
init|=
literal|23
block|,
name|PDQR_CON_POLICIES_BAD
init|=
literal|24
block|,
name|PDQR_MAC_LOOP_TIME_BAD
init|=
literal|25
block|,
name|PDQR_TB_MAX_BAD
init|=
literal|26
block|,
name|PDQR_LER_CUTOFF_BAD
init|=
literal|27
block|,
name|PDQR_LER_ALARM_BAD
init|=
literal|28
block|,
name|PDQR_MAC_PATHS_REQ_BAD
init|=
literal|29
block|,
name|PDQR_MAC_T_REQ_BAD
init|=
literal|30
block|,
name|PDQR_EMAC_RING_PURGER_BAD
init|=
literal|31
block|,
name|PDQR_EMAC_RTOKEN_TIMOUT_AD
init|=
literal|32
block|,
name|PDQR_NO_SUCH_ENTRY
init|=
literal|33
block|,
name|PDQR_T_NOTIFY_BAD
init|=
literal|34
block|,
name|PDQR_TR_MAX_EXP_BAD
init|=
literal|35
block|,
name|PDQR_FRAME_ERR_THRESHOLD_BAD
init|=
literal|36
block|,
name|PDQR_MAX_TREQ_BAD
init|=
literal|37
block|,
name|PDQR_FULL_DUPLEX_ENABLE_BAD
init|=
literal|38
block|,
name|PDQR_ITEM_INDEX_BAD
init|=
literal|39
block|}
name|pdq_response_code_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQI_EOL
init|=
literal|0
block|,
name|PDQI_T_REQ
init|=
literal|1
block|,
name|PDQI_TVX
init|=
literal|2
block|,
name|PDQI_RESTRICTED_TOKEN
init|=
literal|3
block|,
name|PDQI_LEM_THRESHOLD
init|=
literal|4
block|,
name|PDQI_RING_PURGER
init|=
literal|5
block|,
name|PDQI_COUNTER_INTERVAL
init|=
literal|6
block|,
name|PDQI_IND_GROUP_PROM
init|=
literal|7
block|,
name|PDQI_GROUP_PROM
init|=
literal|8
block|,
name|PDQI_BROADCAST
init|=
literal|9
block|,
name|PDQI_SMT_PROM
init|=
literal|10
block|,
name|PDQI_SMT_USER
init|=
literal|11
block|,
name|PDQI_RESERVED
init|=
literal|12
block|,
name|PDQI_IMPLEMENTOR
init|=
literal|13
block|,
name|PDQI_LOOPBACK_MODE
init|=
literal|14
block|,
name|PDQI_SMT_CONFIG_POLICY
init|=
literal|16
block|,
name|PDQI_SMT_CONNECTION_POLICY
init|=
literal|17
block|,
name|PDQI_SMT_T_NOTIFY
init|=
literal|18
block|,
name|PDQI_SMT_STATION_ACTION
init|=
literal|19
block|,
name|PDQI_MAC_PATHS_REQUESTED
init|=
literal|21
block|,
name|PDQI_MAC_ACTION
init|=
literal|23
block|,
name|PDQI_PORT_CONNECTION_POLICIES
init|=
literal|24
block|,
name|PDQI_PORT_PATHS_REQUESTED
init|=
literal|25
block|,
name|PDQI_PORT_MAC_LOOP_TIME
init|=
literal|26
block|,
name|PDQI_PORT_TB_MAX
init|=
literal|27
block|,
name|PDQI_PORT_LER_CUTOFF
init|=
literal|28
block|,
name|PDQI_PORT_LER_ALARM
init|=
literal|29
block|,
name|PDQI_PORT_ACTION
init|=
literal|30
block|,
name|PDQI_FLUSH_TIME
init|=
literal|32
block|,
name|PDQI_SMT_USER_DATA
init|=
literal|33
block|,
name|PDQI_SMT_STATUS_REPORT_POLICY
init|=
literal|34
block|,
name|PDQI_SMT_TRACE_MAX_EXPIRATION
init|=
literal|35
block|,
name|PDQI_MAC_FRAME_ERR_THRESHOLD
init|=
literal|36
block|,
name|PDQI_MAC_UNIT_DATA_ENABLE
init|=
literal|37
block|,
name|PDQI_PATH_TVX_LOWER_BOUND
init|=
literal|38
block|,
name|PDQI_PATH_TMAX_LOWER_BOUND
init|=
literal|39
block|,
name|PDQI_PATH_MAX_TREQ
init|=
literal|40
block|,
name|PDQI_MAC_TREQ
init|=
literal|41
block|,
name|PDQI_EMAC_RING_PURGER
init|=
literal|42
block|,
name|PDQI_EMAC_RTOKEN_TIMEOUT
init|=
literal|43
block|,
name|PDQI_FULL_DUPLEX_ENABLE
init|=
literal|44
block|}
name|pdq_item_code_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_FALSE
init|=
literal|0
block|,
name|PDQ_TRUE
init|=
literal|1
block|}
name|pdq_boolean_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_FILTER_BLOCK
init|=
literal|0
block|,
name|PDQ_FILTER_PASS
init|=
literal|1
block|}
name|pdq_filter_state_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_STATION_TYPE_SAS
init|=
literal|0
block|,
name|PDQ_STATION_TYPE_DAC
init|=
literal|1
block|,
name|PDQ_STATION_TYPE_SAC
init|=
literal|2
block|,
name|PDQ_STATION_TYPE_NAC
init|=
literal|3
block|,
name|PDQ_STATION_TYPE_DAS
init|=
literal|4
block|}
name|pdq_station_type_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_STATION_STATE_OFF
init|=
literal|0
block|,
name|PDQ_STATION_STATE_ON
init|=
literal|1
block|,
name|PDQ_STATION_STATE_LOOPBACK
init|=
literal|2
block|}
name|pdq_station_state_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_LINK_STATE_OFF_READY
init|=
literal|1
block|,
name|PDQ_LINK_STATE_OFF_FAULT_RECOVERY
init|=
literal|2
block|,
name|PDQ_LINK_STATE_ON_RING_INIT
init|=
literal|3
block|,
name|PDQ_LINK_STATE_ON_RING_RUN
init|=
literal|4
block|,
name|PDQ_LINK_STATE_BROKEN
init|=
literal|5
block|}
name|pdq_link_state_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_DA_TEST_STATE_UNKNOWN
init|=
literal|0
block|,
name|PDQ_DA_TEST_STATE_SUCCESS
init|=
literal|1
block|,
name|PDQ_DA_TEST_STATE_DUPLICATE
init|=
literal|2
block|}
name|pdq_da_test_state_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_RING_PURGER_STATE_OFF
init|=
literal|0
block|,
name|PDQ_RING_PURGER_STATE_CANDIDATE
init|=
literal|1
block|,
name|PDQ_RING_PURGER_STATE_NON_PURGER
init|=
literal|2
block|,
name|PDQ_RING_PURGER_STATE_PURGER
init|=
literal|3
block|}
name|pdq_ring_purger_state_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_FRAME_STRING_MODE_SA_MATCH
init|=
literal|0
block|,
name|PDQ_FRAME_STRING_MODE_FCI_STRIP
init|=
literal|1
block|}
name|pdq_frame_strip_mode_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_RING_ERROR_REASON_NO_ERROR
init|=
literal|0
block|,
name|PDQ_RING_ERROR_REASON_RING_INIT_INITIATED
init|=
literal|5
block|,
name|PDQ_RING_ERROR_REASON_RING_INIT_RECEIVED
init|=
literal|6
block|,
name|PDQ_RING_ERROR_REASON_RING_BEACONING_INITIATED
init|=
literal|7
block|,
name|PDQ_RING_ERROR_REASON_DUPLICATE_ADDRESS_DETECTED
init|=
literal|8
block|,
name|PDQ_RING_ERROR_REASON_DUPLICATE_TOKEN_DETECTED
init|=
literal|9
block|,
name|PDQ_RING_ERROR_REASON_RING_PURGER_ERROR
init|=
literal|10
block|,
name|PDQ_RING_ERROR_REASON_FCI_STRIP_ERROR
init|=
literal|11
block|,
name|PDQ_RING_ERROR_REASON_RING_OP_OSCILLATION
init|=
literal|12
block|,
name|PDQ_RING_ERROR_REASON_DIRECTED_BEACON_RECEVIED
init|=
literal|13
block|,
name|PDQ_RING_ERROR_REASON_PC_TRACE_INITIATED
init|=
literal|14
block|,
name|PDQ_RING_ERROR_REASON_PC_TRACE_RECEVIED
init|=
literal|15
block|}
name|pdq_ring_error_reason_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_STATION_MODE_NORMAL
init|=
literal|0
block|,
name|PDQ_STATION_MODE_INTERNAL_LOOPBACK
init|=
literal|1
block|}
name|pdq_station_mode_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_PHY_TYPE_A
init|=
literal|0
block|,
name|PDQ_PHY_TYPE_B
init|=
literal|1
block|,
name|PDQ_PHY_TYPE_S
init|=
literal|2
block|,
name|PDQ_PHY_TYPE_M
init|=
literal|3
block|,
name|PDQ_PHY_TYPE_UNKNOWN
init|=
literal|4
block|}
name|pdq_phy_type_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_PMD_TYPE_ANSI_MUTLI_MODE
init|=
literal|0
block|,
name|PDQ_PMD_TYPE_ANSI_SINGLE_MODE_TYPE_1
init|=
literal|1
block|,
name|PDQ_PMD_TYPE_ANSI_SIGNLE_MODE_TYPE_2
init|=
literal|2
block|,
name|PDQ_PMD_TYPE_ANSI_SONET
init|=
literal|3
block|,
name|PDQ_PMD_TYPE_LOW_POWER
init|=
literal|100
block|,
name|PDQ_PMD_TYPE_THINWIRE
init|=
literal|101
block|,
name|PDQ_PMD_TYPE_SHIELDED_TWISTED_PAIR
init|=
literal|102
block|,
name|PDQ_PMD_TYPE_UNSHIELDED_TWISTED_PAIR
init|=
literal|103
block|}
name|pdq_pmd_type_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_PMD_CLASS_ANSI_MULTI_MODE
init|=
literal|0
block|,
name|PDQ_PMD_CLASS_SINGLE_MODE_TYPE_1
init|=
literal|1
block|,
name|PDQ_PMD_CLASS_SINGLE_MODE_TYPE_2
init|=
literal|2
block|,
name|PDQ_PMD_CLASS_SONET
init|=
literal|3
block|,
name|PDQ_PMD_CLASS_LOW_COST_POWER_FIBER
init|=
literal|4
block|,
name|PDQ_PMD_CLASS_TWISTED_PAIR
init|=
literal|5
block|,
name|PDQ_PMD_CLASS_UNKNOWN
init|=
literal|6
block|,
name|PDQ_PMD_CLASS_UNSPECIFIED
init|=
literal|7
block|}
name|pdq_pmd_class_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_PHY_STATE_INTERNAL_LOOPBACK
init|=
literal|0
block|,
name|PDQ_PHY_STATE_BROKEN
init|=
literal|1
block|,
name|PDQ_PHY_STATE_OFF_READY
init|=
literal|2
block|,
name|PDQ_PHY_STATE_WAITING
init|=
literal|3
block|,
name|PDQ_PHY_STATE_STARTING
init|=
literal|4
block|,
name|PDQ_PHY_STATE_FAILED
init|=
literal|5
block|,
name|PDQ_PHY_STATE_WATCH
init|=
literal|6
block|,
name|PDQ_PHY_STATE_INUSE
init|=
literal|7
block|}
name|pdq_phy_state_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_REJECT_REASON_NONE
init|=
literal|0
block|,
name|PDQ_REJECT_REASON_LOCAL_LCT
init|=
literal|1
block|,
name|PDQ_REJECT_REASON_REMOTE_LCT
init|=
literal|2
block|,
name|PDQ_REJECT_REASON_LCT_BOTH_SIDES
init|=
literal|3
block|,
name|PDQ_REJECT_REASON_LEM_REJECT
init|=
literal|4
block|,
name|PDQ_REJECT_REASON_TOPOLOGY_ERROR
init|=
literal|5
block|,
name|PDQ_REJECT_REASON_NOISE_REJECT
init|=
literal|6
block|,
name|PDQ_REJECT_REASON_REMOTE_REJECT
init|=
literal|7
block|,
name|PDQ_REJECT_REASON_TRACE_IN_PROGRESS
init|=
literal|8
block|,
name|PDQ_REJECT_REASON_TRACE_RECEIVED_DISABLED
init|=
literal|9
block|,
name|PDQ_REJECT_REASON_STANDBY
init|=
literal|10
block|,
name|PDQ_REJECT_REASON_LCT_PROTOCOL_ERROR
init|=
literal|11
block|}
name|pdq_reject_reason_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_BROKEN_REASON_NONE
init|=
literal|0
block|}
name|pdq_broken_reason_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_RI_REASON_TVX_EXPIRED
init|=
literal|0
block|,
name|PDQ_RI_REASON_TRT_EXPIRED
init|=
literal|1
block|,
name|PDQ_RI_REASON_RING_PURGER_ELECTION_ATTEMPT_LIMIT_EXCEEDED
init|=
literal|2
block|,
name|PDQ_RI_REASON_PURGE_ERROR_LIMIT_EXCEEDED
init|=
literal|3
block|,
name|PDQ_RI_REASON_RESTRICTED_TOKEN_TIMEOUT
init|=
literal|4
block|}
name|pdq_ri_reason_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_LCT_DIRECTION_LOCAL_LCT
init|=
literal|0
block|,
name|PDQ_LCT_DIRECTION_REMOTE_LCT
init|=
literal|1
block|,
name|PDQ_LCT_DIRECTION_LCT_BOTH_SIDES
init|=
literal|2
block|}
name|pdq_lct_direction_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_PORT_A
init|=
literal|0
block|,
name|PDQ_PORT_B
init|=
literal|1
block|}
name|pdq_port_type_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint8_t
name|station_id_bytes
index|[
literal|8
index|]
decl_stmt|;
block|}
name|pdq_station_id_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|pdq_uint32_t
name|pdq_fdditimer_t
typedef|;
end_typedef

begin_comment
comment|/*  * Command format for Start, Filter_Get, ... commands  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_cmd_code_t
name|generic_op
decl_stmt|;
block|}
name|pdq_cmd_generic_t
typedef|;
end_typedef

begin_comment
comment|/*  * Response format for Start, Filter_Set, ... commands  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint32_t
name|generic_reserved
decl_stmt|;
name|pdq_cmd_code_t
name|generic_op
decl_stmt|;
name|pdq_response_code_t
name|generic_status
decl_stmt|;
block|}
name|pdq_response_generic_t
typedef|;
end_typedef

begin_comment
comment|/*  * Command format for Filter_Set command  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_cmd_code_t
name|filter_set_op
decl_stmt|;
struct|struct
block|{
name|pdq_item_code_t
name|item_code
decl_stmt|;
name|pdq_filter_state_t
name|filter_state
decl_stmt|;
block|}
name|filter_set_items
index|[
literal|7
index|]
struct|;
name|pdq_item_code_t
name|filter_set_eol_item_code
decl_stmt|;
block|}
name|pdq_cmd_filter_set_t
typedef|;
end_typedef

begin_comment
comment|/*  * Response format for Filter_Get command.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint32_t
name|filter_get_reserved
decl_stmt|;
name|pdq_cmd_code_t
name|filter_get_op
decl_stmt|;
name|pdq_response_code_t
name|filter_get_status
decl_stmt|;
name|pdq_filter_state_t
name|filter_get_ind_group_prom
decl_stmt|;
name|pdq_filter_state_t
name|filter_get_group_prom
decl_stmt|;
name|pdq_filter_state_t
name|filter_get_broadcast_all
decl_stmt|;
name|pdq_filter_state_t
name|filter_get_smt_prom
decl_stmt|;
name|pdq_filter_state_t
name|filter_get_smt_user
decl_stmt|;
name|pdq_filter_state_t
name|filter_get_reserved_all
decl_stmt|;
name|pdq_filter_state_t
name|filter_get_implementor_all
decl_stmt|;
block|}
name|pdq_response_filter_get_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PDQ_SIZE_RESPONSE_FILTER_GET
value|0x28
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_cmd_code_t
name|chars_set_op
decl_stmt|;
struct|struct
block|{
name|pdq_item_code_t
name|item_code
decl_stmt|;
name|pdq_uint32_t
name|item_value
decl_stmt|;
name|pdq_port_type_t
name|item_port
decl_stmt|;
block|}
name|chars_set_items
index|[
literal|1
index|]
struct|;
name|pdq_item_code_t
name|chars_set_eol_item_code
decl_stmt|;
block|}
name|pdq_cmd_chars_set_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_cmd_code_t
name|addr_filter_set_op
decl_stmt|;
name|pdq_lanaddr_t
name|addr_filter_set_addresses
index|[
literal|62
index|]
decl_stmt|;
block|}
name|pdq_cmd_addr_filter_set_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PDQ_SIZE_CMD_ADDR_FILTER_SET
value|0x1F4
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint32_t
name|addr_filter_get_reserved
decl_stmt|;
name|pdq_cmd_code_t
name|addr_filter_get_op
decl_stmt|;
name|pdq_response_code_t
name|addr_filter_get_status
decl_stmt|;
name|pdq_lanaddr_t
name|addr_filter_get_addresses
index|[
literal|62
index|]
decl_stmt|;
block|}
name|pdq_response_addr_filter_get_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PDQ_SIZE_RESPONSE_ADDR_FILTER_GET
value|0x1FC
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint32_t
name|status_chars_get_reserved
decl_stmt|;
name|pdq_cmd_code_t
name|status_chars_get_op
decl_stmt|;
name|pdq_response_code_t
name|status_chars_get_status
decl_stmt|;
struct|struct
block|{
comment|/* Station Characteristic Attributes */
name|pdq_station_id_t
name|station_id
decl_stmt|;
name|pdq_station_type_t
name|station_type
decl_stmt|;
name|pdq_uint32_t
name|smt_version_id
decl_stmt|;
name|pdq_uint32_t
name|smt_max_version_id
decl_stmt|;
name|pdq_uint32_t
name|smt_min_version_id
decl_stmt|;
comment|/* Station Status Attributes */
name|pdq_station_state_t
name|station_state
decl_stmt|;
comment|/* Link Characteristic Attributes */
name|pdq_lanaddr_t
name|link_address
decl_stmt|;
name|pdq_fdditimer_t
name|t_req
decl_stmt|;
name|pdq_fdditimer_t
name|tvx
decl_stmt|;
name|pdq_fdditimer_t
name|restricted_token_timeout
decl_stmt|;
name|pdq_boolean_t
name|ring_purger_enable
decl_stmt|;
name|pdq_link_state_t
name|link_state
decl_stmt|;
name|pdq_fdditimer_t
name|negotiated_trt
decl_stmt|;
name|pdq_da_test_state_t
name|dup_addr_flag
decl_stmt|;
comment|/* Link Status Attributes */
name|pdq_lanaddr_t
name|upstream_neighbor
decl_stmt|;
name|pdq_lanaddr_t
name|old_upstream_neighbor
decl_stmt|;
name|pdq_boolean_t
name|upstream_neighbor_dup_addr_flag
decl_stmt|;
name|pdq_lanaddr_t
name|downstream_neighbor
decl_stmt|;
name|pdq_lanaddr_t
name|old_downstream_neighbor
decl_stmt|;
name|pdq_ring_purger_state_t
name|ring_purger_state
decl_stmt|;
name|pdq_frame_strip_mode_t
name|frame_strip_mode
decl_stmt|;
name|pdq_ring_error_reason_t
name|ring_error_reason
decl_stmt|;
name|pdq_boolean_t
name|loopback
decl_stmt|;
name|pdq_fdditimer_t
name|ring_latency
decl_stmt|;
name|pdq_lanaddr_t
name|last_dir_beacon_sa
decl_stmt|;
name|pdq_lanaddr_t
name|last_dir_beacon_una
decl_stmt|;
comment|/* Phy Characteristic Attributes */
name|pdq_phy_type_t
name|phy_type
index|[
literal|2
index|]
decl_stmt|;
name|pdq_pmd_type_t
name|pmd_type
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|lem_threshold
index|[
literal|2
index|]
decl_stmt|;
comment|/* Phy Status Attributes */
name|pdq_phy_state_t
name|phy_state
index|[
literal|2
index|]
decl_stmt|;
name|pdq_phy_type_t
name|neighbor_phy_type
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|link_error_estimate
index|[
literal|2
index|]
decl_stmt|;
name|pdq_broken_reason_t
name|broken_reason
index|[
literal|2
index|]
decl_stmt|;
name|pdq_reject_reason_t
name|reject_reason
index|[
literal|2
index|]
decl_stmt|;
comment|/* Miscellaneous */
name|pdq_uint32_t
name|counter_interval
decl_stmt|;
name|pdq_fwrev_t
name|module_rev
decl_stmt|;
name|pdq_fwrev_t
name|firmware_rev
decl_stmt|;
name|pdq_uint32_t
name|mop_device_type
decl_stmt|;
name|pdq_uint32_t
name|fddi_led
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|flush
decl_stmt|;
block|}
name|status_chars_get
struct|;
block|}
name|pdq_response_status_chars_get_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PDQ_SIZE_RESPONSE_STATUS_CHARS_GET
value|0xF0
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint32_t
name|fddi_mib_get_reserved
decl_stmt|;
name|pdq_cmd_code_t
name|fddi_mib_get_op
decl_stmt|;
name|pdq_response_code_t
name|fddi_mib_get_status
decl_stmt|;
struct|struct
block|{
comment|/* SMT Objects */
name|pdq_station_id_t
name|smt_station_id
decl_stmt|;
name|pdq_uint32_t
name|smt_op_version_id
decl_stmt|;
name|pdq_uint32_t
name|smt_hi_version_id
decl_stmt|;
name|pdq_uint32_t
name|smt_lo_version_id
decl_stmt|;
name|pdq_uint32_t
name|smt_mac_ct
decl_stmt|;
name|pdq_uint32_t
name|smt_non_master_ct
decl_stmt|;
name|pdq_uint32_t
name|smt_master_ct
decl_stmt|;
name|pdq_uint32_t
name|smt_paths_available
decl_stmt|;
name|pdq_uint32_t
name|smt_config_capabilities
decl_stmt|;
name|pdq_uint32_t
name|smt_config_policy
decl_stmt|;
name|pdq_uint32_t
name|smt_connection_policy
decl_stmt|;
name|pdq_uint32_t
name|smt_t_notify
decl_stmt|;
name|pdq_uint32_t
name|smt_status_reporting
decl_stmt|;
name|pdq_uint32_t
name|smt_ecm_state
decl_stmt|;
name|pdq_uint32_t
name|smt_cf_state
decl_stmt|;
name|pdq_uint32_t
name|smt_hold_state
decl_stmt|;
name|pdq_uint32_t
name|smt_remote_disconnect_flag
decl_stmt|;
name|pdq_uint32_t
name|smt_station_action
decl_stmt|;
comment|/* MAC Objects */
name|pdq_uint32_t
name|mac_frame_status_capabilities
decl_stmt|;
name|pdq_uint32_t
name|mac_t_max_greatest_lower_bound
decl_stmt|;
name|pdq_uint32_t
name|mac_tvx_greatest_lower_bound
decl_stmt|;
name|pdq_uint32_t
name|mac_paths_available
decl_stmt|;
name|pdq_uint32_t
name|mac_current_path
decl_stmt|;
name|pdq_lanaddr_t
name|mac_upstream_neighbor
decl_stmt|;
name|pdq_lanaddr_t
name|mac_old_upstream_neighbor
decl_stmt|;
name|pdq_uint32_t
name|mac_dup_addr_test
decl_stmt|;
name|pdq_uint32_t
name|mac_paths_requested
decl_stmt|;
name|pdq_uint32_t
name|mac_downstream_port_type
decl_stmt|;
name|pdq_lanaddr_t
name|mac_smt_address
decl_stmt|;
name|pdq_uint32_t
name|mac_t_req
decl_stmt|;
name|pdq_uint32_t
name|mac_t_neg
decl_stmt|;
name|pdq_uint32_t
name|mac_t_max
decl_stmt|;
name|pdq_uint32_t
name|mac_tvx_value
decl_stmt|;
name|pdq_uint32_t
name|mac_t_min
decl_stmt|;
name|pdq_uint32_t
name|mac_current_frame_status
decl_stmt|;
name|pdq_uint32_t
name|mac_frame_error_threshold
decl_stmt|;
name|pdq_uint32_t
name|mac_frame_error_ratio
decl_stmt|;
name|pdq_uint32_t
name|mac_rmt_state
decl_stmt|;
name|pdq_uint32_t
name|mac_da_flag
decl_stmt|;
name|pdq_uint32_t
name|mac_una_da_flag
decl_stmt|;
name|pdq_uint32_t
name|mac_frame_condition
decl_stmt|;
name|pdq_uint32_t
name|mac_chip_set
decl_stmt|;
name|pdq_uint32_t
name|mac_action
decl_stmt|;
comment|/* Port Objects */
name|pdq_uint32_t
name|port_pc_type
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_pc_neighbor
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_connection_policies
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_remote_mac_indicated
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_ce_state
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_paths_requested
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_mac_placement
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_available_paths
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_mac_loop_time
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_tb_max
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_bs_flag
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_ler_estimate
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_ler_cutoff
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_ler_alarm
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_connect_state
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_pcm_state
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_pc_withhold
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_ler_condition
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_chip_set
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|port_action
index|[
literal|2
index|]
decl_stmt|;
comment|/* Attachment Objects */
name|pdq_uint32_t
name|attachment_class
decl_stmt|;
name|pdq_uint32_t
name|attachment_optical_bypass_present
decl_stmt|;
name|pdq_uint32_t
name|attachment_imax_expiration
decl_stmt|;
name|pdq_uint32_t
name|attachment_inserted_status
decl_stmt|;
name|pdq_uint32_t
name|attachment_insert_policy
decl_stmt|;
block|}
name|fddi_mib_get
struct|;
block|}
name|pdq_response_fddi_mib_get_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PDQ_SIZE_RESPONSE_FDDI_MIB_GET
value|0x17C
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_FDX_STATE_IDLE
init|=
literal|0
block|,
name|PDQ_FDX_STATE_REQUEST
init|=
literal|1
block|,
name|PDQ_FDX_STATE_CONFIRM
init|=
literal|2
block|,
name|PDQ_FDX_STATE_OPERATION
init|=
literal|3
block|}
name|pdq_fdx_state_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint32_t
name|dec_ext_mib_get_reserved
decl_stmt|;
name|pdq_cmd_code_t
name|dec_ext_mib_get_op
decl_stmt|;
name|pdq_response_code_t
name|dec_ext_mib_get_response
decl_stmt|;
struct|struct
block|{
comment|/* SMT Objects */
name|pdq_uint32_t
name|esmt_station_type
decl_stmt|;
comment|/* MAC Objects */
name|pdq_uint32_t
name|emac_link_state
decl_stmt|;
name|pdq_uint32_t
name|emac_ring_purger_state
decl_stmt|;
name|pdq_uint32_t
name|emac_ring_purger_enable
decl_stmt|;
name|pdq_uint32_t
name|emac_frame_strip_mode
decl_stmt|;
name|pdq_uint32_t
name|emac_ring_error_reason
decl_stmt|;
name|pdq_uint32_t
name|emac_upstream_nbr_dupl_address_flag
decl_stmt|;
name|pdq_uint32_t
name|emac_restricted_token_timeout
decl_stmt|;
comment|/* Port Objects */
name|pdq_uint32_t
name|eport_pmd_type
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|eport_phy_state
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|eport_reject_reason
index|[
literal|2
index|]
decl_stmt|;
comment|/* Full Duplex Objects */
name|pdq_boolean_t
name|fdx_enable
decl_stmt|;
name|pdq_boolean_t
name|fdx_operational
decl_stmt|;
name|pdq_fdx_state_t
name|fdx_state
decl_stmt|;
block|}
name|dec_ext_mib_get
struct|;
block|}
name|pdq_response_dec_ext_mib_get_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PDQ_SIZE_RESPONSE_DEC_EXT_MIB_GET
value|0x50
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_CALLER_ID_NONE
init|=
literal|0
block|,
name|PDQ_CALLER_ID_SELFTEST
init|=
literal|1
block|,
name|PDQ_CALLER_ID_MFG
init|=
literal|2
block|,
name|PDQ_CALLER_ID_FIRMWARE
init|=
literal|5
block|,
name|PDQ_CALLER_ID_CONSOLE
init|=
literal|8
block|}
name|pdq_caller_id_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|pdq_uint32_t
name|error_log_get__reserved
decl_stmt|;
name|pdq_cmd_code_t
name|error_log_get_op
decl_stmt|;
name|pdq_response_code_t
name|error_log_get_status
decl_stmt|;
comment|/* Error Header */
name|pdq_uint32_t
name|error_log_get_event_status
decl_stmt|;
comment|/* Event Information Block */
name|pdq_caller_id_t
name|error_log_get_caller_id
decl_stmt|;
name|pdq_uint32_t
name|error_log_get_timestamp
index|[
literal|2
index|]
decl_stmt|;
name|pdq_uint32_t
name|error_log_get_write_count
decl_stmt|;
comment|/* Diagnostic Information */
name|pdq_uint32_t
name|error_log_get_fru_implication_mask
decl_stmt|;
name|pdq_uint32_t
name|error_log_get_test_id
decl_stmt|;
name|pdq_uint32_t
name|error_log_get_diag_reserved
index|[
literal|6
index|]
decl_stmt|;
comment|/* Firmware Information */
name|pdq_uint32_t
name|error_log_get_fw_reserved
index|[
literal|112
index|]
decl_stmt|;
block|}
name|pdq_response_error_log_get_t
typedef|;
end_typedef

begin_escape
end_escape

begin_comment
comment|/*  * Definitions for the Unsolicited Event Queue.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_UNSOLICITED_EVENT
init|=
literal|0
block|,
name|PDQ_UNSOLICITED_COUNTERS
init|=
literal|1
block|}
name|pdq_event_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_ENTITY_STATION
init|=
literal|0
block|,
name|PDQ_ENTITY_LINK
init|=
literal|1
block|,
name|PDQ_ENTITY_PHY_PORT
init|=
literal|2
block|}
name|pdq_entity_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_STATION_EVENT_TRACE_RECEIVED
init|=
literal|1
block|}
name|pdq_station_event_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_STATION_EVENT_ARGUMENT_REASON
init|=
literal|0
block|,
comment|/* pdq_uint32_t */
name|PDQ_STATION_EVENT_ARGUMENT_EOL
init|=
literal|0xFF
block|}
name|pdq_station_event_argument_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_LINK_EVENT_TRANSMIT_UNDERRUN
init|=
literal|0
block|,
name|PDQ_LINK_EVENT_TRANSMIT_FAILED
init|=
literal|1
block|,
name|PDQ_LINK_EVENT_BLOCK_CHECK_ERROR
init|=
literal|2
block|,
name|PDQ_LINK_EVENT_FRAME_STATUS_ERROR
init|=
literal|3
block|,
name|PDQ_LINK_EVENT_PDU_LENGTH_ERROR
init|=
literal|4
block|,
name|PDQ_LINK_EVENT_RECEIVE_DATA_OVERRUN
init|=
literal|7
block|,
name|PDQ_LINK_EVENT_NO_USER_BUFFER
init|=
literal|9
block|,
name|PDQ_LINK_EVENT_RING_INITIALIZATION_INITIATED
init|=
literal|10
block|,
name|PDQ_LINK_EVENT_RING_INITIALIZATION_RECEIVED
init|=
literal|11
block|,
name|PDQ_LINK_EVENT_RING_BEACON_INITIATED
init|=
literal|12
block|,
name|PDQ_LINK_EVENT_DUPLICATE_ADDRESS_FAILURE
init|=
literal|13
block|,
name|PDQ_LINK_EVENT_DUPLICATE_TOKEN_DETECTED
init|=
literal|14
block|,
name|PDQ_LINK_EVENT_RING_PURGE_ERROR
init|=
literal|15
block|,
name|PDQ_LINK_EVENT_FCI_STRIP_ERROR
init|=
literal|16
block|,
name|PDQ_LINK_EVENT_TRACE_INITIATED
init|=
literal|17
block|,
name|PDQ_LINK_EVENT_DIRECTED_BEACON_RECEIVED
init|=
literal|18
block|}
name|pdq_link_event_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_LINK_EVENT_ARGUMENT_REASON
init|=
literal|0
block|,
comment|/* pdq_rireason_t */
name|PDQ_LINK_EVENT_ARGUMENT_DATA_LINK_HEADER
init|=
literal|1
block|,
comment|/* pdq_dlhdr_t */
name|PDQ_LINK_EVENT_ARGUMENT_SOURCE
init|=
literal|2
block|,
comment|/* pdq_lanaddr_t */
name|PDQ_LINK_EVENT_ARGUMENT_UPSTREAM_NEIGHBOR
init|=
literal|3
block|,
comment|/* pdq_lanaddr_t */
name|PDQ_LINK_EVENT_ARGUMENT_EOL
init|=
literal|0xFF
block|}
name|pdq_link_event_argument_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_PHY_EVENT_LEM_ERROR_MONITOR_REJECT
init|=
literal|0
block|,
name|PDQ_PHY_EVENT_ELASTICITY_BUFFER_ERROR
init|=
literal|1
block|,
name|PDQ_PHY_EVENT_LINK_CONFIDENCE_TEST_REJECT
init|=
literal|2
block|}
name|pdq_phy_event_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|PDQ_PHY_EVENT_ARGUMENT_DIRECTION
init|=
literal|0
block|,
comment|/* pdq_lct_direction_t */
name|PDQ_PHY_EVENT_ARGUMENT_EOL
init|=
literal|0xFF
block|}
name|pdq_phy_event_arguments
typedef|;
end_typedef

begin_struct
struct|struct
name|_pdq_unsolicited_event_t
block|{
name|pdq_uint32_t
name|rvent_reserved
decl_stmt|;
name|pdq_event_t
name|event_type
decl_stmt|;
name|pdq_entity_t
name|event_entity
decl_stmt|;
name|pdq_uint32_t
name|event_index
decl_stmt|;
union|union
block|{
name|pdq_station_event_t
name|station_event
decl_stmt|;
name|pdq_link_event_t
name|link_event
decl_stmt|;
name|pdq_phy_event_t
name|phy_event
decl_stmt|;
name|pdq_uint32_t
name|value
decl_stmt|;
block|}
name|event_code
union|;
comment|/*      * The remainder of this event is an argument list.      */
name|pdq_uint32_t
name|event__filler
index|[
literal|123
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _PDQREG_H */
end_comment

end_unit

