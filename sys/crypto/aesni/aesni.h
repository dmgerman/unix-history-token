begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Konstantin Belousov<kib@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_AESNI_H_
end_ifndef

begin_define
define|#
directive|define
name|_AESNI_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<opencrypto/cryptodev.h>
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__amd64__
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|PC98
argument_list|)
operator|)
end_if

begin_include
include|#
directive|include
file|<machine/cpufunc.h>
end_include

begin_include
include|#
directive|include
file|<machine/cputypes.h>
end_include

begin_include
include|#
directive|include
file|<machine/md_var.h>
end_include

begin_include
include|#
directive|include
file|<machine/specialreg.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
end_if

begin_include
include|#
directive|include
file|<machine/npx.h>
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__amd64__
argument_list|)
end_elif

begin_include
include|#
directive|include
file|<machine/fpu.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|AES128_ROUNDS
value|10
end_define

begin_define
define|#
directive|define
name|AES192_ROUNDS
value|12
end_define

begin_define
define|#
directive|define
name|AES256_ROUNDS
value|14
end_define

begin_define
define|#
directive|define
name|AES_SCHED_LEN
value|((AES256_ROUNDS + 1) * AES_BLOCK_LEN)
end_define

begin_struct
struct|struct
name|aesni_session
block|{
name|uint8_t
name|enc_schedule
index|[
name|AES_SCHED_LEN
index|]
name|__aligned
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|uint8_t
name|dec_schedule
index|[
name|AES_SCHED_LEN
index|]
name|__aligned
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|uint8_t
name|xts_schedule
index|[
name|AES_SCHED_LEN
index|]
name|__aligned
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|uint8_t
name|iv
index|[
name|AES_BLOCK_LEN
index|]
decl_stmt|;
name|int
name|algo
decl_stmt|;
name|int
name|rounds
decl_stmt|;
comment|/* uint8_t *ses_ictx; */
comment|/* uint8_t *ses_octx; */
comment|/* int ses_mlen; */
name|int
name|used
decl_stmt|;
name|uint32_t
name|id
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|aesni_session
argument_list|)
name|next
expr_stmt|;
name|struct
name|fpu_kern_ctx
modifier|*
name|fpu_ctx
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Internal functions, implemented in assembler.  */
end_comment

begin_function_decl
name|void
name|aesni_set_enckey
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|userkey
parameter_list|,
name|uint8_t
modifier|*
name|encrypt_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|int
name|number_of_rounds
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aesni_set_deckey
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|encrypt_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|uint8_t
modifier|*
name|decrypt_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|int
name|number_of_rounds
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Slightly more public interfaces.  */
end_comment

begin_function_decl
name|void
name|aesni_encrypt_cbc
parameter_list|(
name|int
name|rounds
parameter_list|,
specifier|const
name|void
modifier|*
name|key_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|from
parameter_list|,
name|uint8_t
modifier|*
name|to
parameter_list|,
specifier|const
name|uint8_t
name|iv
index|[
name|AES_BLOCK_LEN
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aesni_decrypt_cbc
parameter_list|(
name|int
name|rounds
parameter_list|,
specifier|const
name|void
modifier|*
name|key_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|size_t
name|len
parameter_list|,
name|uint8_t
modifier|*
name|buf
parameter_list|,
specifier|const
name|uint8_t
name|iv
index|[
name|AES_BLOCK_LEN
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aesni_encrypt_ecb
parameter_list|(
name|int
name|rounds
parameter_list|,
specifier|const
name|void
modifier|*
name|key_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|from
parameter_list|,
name|uint8_t
modifier|*
name|to
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aesni_decrypt_ecb
parameter_list|(
name|int
name|rounds
parameter_list|,
specifier|const
name|void
modifier|*
name|key_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|from
parameter_list|,
name|uint8_t
modifier|*
name|to
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aesni_encrypt_icm
parameter_list|(
name|int
name|rounds
parameter_list|,
specifier|const
name|void
modifier|*
name|key_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|from
parameter_list|,
name|uint8_t
modifier|*
name|to
parameter_list|,
specifier|const
name|uint8_t
name|iv
index|[
name|AES_BLOCK_LEN
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aesni_encrypt_xts
parameter_list|(
name|int
name|rounds
parameter_list|,
specifier|const
name|void
modifier|*
name|data_schedule
comment|/*__aligned(16)*/
parameter_list|,
specifier|const
name|void
modifier|*
name|tweak_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|from
parameter_list|,
name|uint8_t
modifier|*
name|to
parameter_list|,
specifier|const
name|uint8_t
name|iv
index|[
name|AES_BLOCK_LEN
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aesni_decrypt_xts
parameter_list|(
name|int
name|rounds
parameter_list|,
specifier|const
name|void
modifier|*
name|data_schedule
comment|/*__aligned(16)*/
parameter_list|,
specifier|const
name|void
modifier|*
name|tweak_schedule
comment|/*__aligned(16)*/
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|from
parameter_list|,
name|uint8_t
modifier|*
name|to
parameter_list|,
specifier|const
name|uint8_t
name|iv
index|[
name|AES_BLOCK_LEN
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* GCM& GHASH functions */
end_comment

begin_function_decl
name|void
name|AES_GCM_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|addt
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|ivec
parameter_list|,
name|unsigned
name|char
modifier|*
name|tag
parameter_list|,
name|uint32_t
name|nbytes
parameter_list|,
name|uint32_t
name|abytes
parameter_list|,
name|int
name|ibytes
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|int
name|nr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|AES_GCM_decrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|in
parameter_list|,
name|unsigned
name|char
modifier|*
name|out
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|addt
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|ivec
parameter_list|,
name|unsigned
name|char
modifier|*
name|tag
parameter_list|,
name|uint32_t
name|nbytes
parameter_list|,
name|uint32_t
name|abytes
parameter_list|,
name|int
name|ibytes
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|int
name|nr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aesni_cipher_setup_common
parameter_list|(
name|struct
name|aesni_session
modifier|*
name|ses
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|key
parameter_list|,
name|int
name|keylen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|aesni_cipher_alloc
parameter_list|(
name|struct
name|cryptodesc
modifier|*
name|enccrd
parameter_list|,
name|struct
name|cryptop
modifier|*
name|crp
parameter_list|,
name|int
modifier|*
name|allocated
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _AESNI_H_ */
end_comment

end_unit

