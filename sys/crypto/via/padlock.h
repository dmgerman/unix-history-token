begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005-2006 Pawel Jakub Dawidek<pjd@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PADLOCK_H_
end_ifndef

begin_define
define|#
directive|define
name|_PADLOCK_H_
end_define

begin_include
include|#
directive|include
file|<opencrypto/cryptodev.h>
end_include

begin_include
include|#
directive|include
file|<crypto/rijndael/rijndael.h>
end_include

begin_union
union|union
name|padlock_cw
block|{
name|uint64_t
name|raw
decl_stmt|;
struct|struct
block|{
name|u_int
name|round_count
range|:
literal|4
decl_stmt|;
name|u_int
name|algorithm_type
range|:
literal|3
decl_stmt|;
name|u_int
name|key_generation
range|:
literal|1
decl_stmt|;
name|u_int
name|intermediate
range|:
literal|1
decl_stmt|;
name|u_int
name|direction
range|:
literal|1
decl_stmt|;
name|u_int
name|key_size
range|:
literal|2
decl_stmt|;
name|u_int
name|filler0
range|:
literal|20
decl_stmt|;
name|u_int
name|filler1
range|:
literal|32
decl_stmt|;
name|u_int
name|filler2
range|:
literal|32
decl_stmt|;
name|u_int
name|filler3
range|:
literal|32
decl_stmt|;
block|}
name|__field
struct|;
block|}
union|;
end_union

begin_define
define|#
directive|define
name|cw_round_count
value|__field.round_count
end_define

begin_define
define|#
directive|define
name|cw_algorithm_type
value|__field.algorithm_type
end_define

begin_define
define|#
directive|define
name|cw_key_generation
value|__field.key_generation
end_define

begin_define
define|#
directive|define
name|cw_intermediate
value|__field.intermediate
end_define

begin_define
define|#
directive|define
name|cw_direction
value|__field.direction
end_define

begin_define
define|#
directive|define
name|cw_key_size
value|__field.key_size
end_define

begin_define
define|#
directive|define
name|cw_filler0
value|__field.filler0
end_define

begin_define
define|#
directive|define
name|cw_filler1
value|__field.filler1
end_define

begin_define
define|#
directive|define
name|cw_filler2
value|__field.filler2
end_define

begin_define
define|#
directive|define
name|cw_filler3
value|__field.filler3
end_define

begin_struct
struct|struct
name|padlock_session
block|{
name|union
name|padlock_cw
name|ses_cw
name|__aligned
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|uint32_t
name|ses_ekey
index|[
literal|4
operator|*
operator|(
name|RIJNDAEL_MAXNR
operator|+
literal|1
operator|)
operator|+
literal|4
index|]
name|__aligned
argument_list|(
literal|16
argument_list|)
decl_stmt|;
comment|/* 128 bit aligned */
name|uint32_t
name|ses_dkey
index|[
literal|4
operator|*
operator|(
name|RIJNDAEL_MAXNR
operator|+
literal|1
operator|)
operator|+
literal|4
index|]
name|__aligned
argument_list|(
literal|16
argument_list|)
decl_stmt|;
comment|/* 128 bit aligned */
name|uint8_t
name|ses_iv
index|[
literal|16
index|]
name|__aligned
argument_list|(
literal|16
argument_list|)
decl_stmt|;
comment|/* 128 bit aligned */
name|struct
name|auth_hash
modifier|*
name|ses_axf
decl_stmt|;
name|uint8_t
modifier|*
name|ses_ictx
decl_stmt|;
name|uint8_t
modifier|*
name|ses_octx
decl_stmt|;
name|int
name|ses_mlen
decl_stmt|;
name|int
name|ses_used
decl_stmt|;
name|uint32_t
name|ses_id
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|padlock_session
argument_list|)
name|ses_next
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PADLOCK_ALIGN
parameter_list|(
name|p
parameter_list|)
value|(void *)(roundup2((uintptr_t)(p), 16))
end_define

begin_function_decl
name|int
name|padlock_cipher_setup
parameter_list|(
name|struct
name|padlock_session
modifier|*
name|ses
parameter_list|,
name|struct
name|cryptoini
modifier|*
name|encini
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|padlock_cipher_process
parameter_list|(
name|struct
name|padlock_session
modifier|*
name|ses
parameter_list|,
name|struct
name|cryptodesc
modifier|*
name|enccrd
parameter_list|,
name|struct
name|cryptop
modifier|*
name|crp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|padlock_hash_setup
parameter_list|(
name|struct
name|padlock_session
modifier|*
name|ses
parameter_list|,
name|struct
name|cryptoini
modifier|*
name|macini
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|padlock_hash_process
parameter_list|(
name|struct
name|padlock_session
modifier|*
name|ses
parameter_list|,
name|struct
name|cryptodesc
modifier|*
name|maccrd
parameter_list|,
name|struct
name|cryptop
modifier|*
name|crp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|padlock_hash_free
parameter_list|(
name|struct
name|padlock_session
modifier|*
name|ses
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_PADLOCK_H_ */
end_comment

end_unit

