begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*	$KAME: sha2.h,v 1.5 2007/06/14 12:09:41 itojun Exp $	*/
end_comment

begin_comment
comment|/*  * sha2.h  *  * Version 1.0.0beta1  *  * Written by Aaron D. Gifford<me@aarongifford.com>  *  * Copyright 2000 Aaron D. Gifford.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the copyright holder nor the names of contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) AND CONTRIBUTOR(S) ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR(S) OR CONTRIBUTOR(S) BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SHA2_H__
end_ifndef

begin_define
define|#
directive|define
name|__SHA2_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*** SHA-256/384/512 Various Length Definitions ***********************/
define|#
directive|define
name|SHA256_BLOCK_LENGTH
value|64
define|#
directive|define
name|SHA256_DIGEST_LENGTH
value|32
define|#
directive|define
name|SHA256_DIGEST_STRING_LENGTH
value|(SHA256_DIGEST_LENGTH * 2 + 1)
define|#
directive|define
name|SHA384_BLOCK_LENGTH
value|128
define|#
directive|define
name|SHA384_DIGEST_LENGTH
value|48
define|#
directive|define
name|SHA384_DIGEST_STRING_LENGTH
value|(SHA384_DIGEST_LENGTH * 2 + 1)
define|#
directive|define
name|SHA512_BLOCK_LENGTH
value|128
define|#
directive|define
name|SHA512_DIGEST_LENGTH
value|64
define|#
directive|define
name|SHA512_DIGEST_STRING_LENGTH
value|(SHA512_DIGEST_LENGTH * 2 + 1)
comment|/*** SHA-256/384/512 Context Structures *******************************/
comment|/* NOTE: If your architecture does not define either u_intXX_t types or  * uintXX_t (from inttypes.h), you may need to define things by hand  * for your system:  */
if|#
directive|if
literal|0
block|typedef unsigned char u_int8_t;
comment|/* 1-byte  (8-bits)  */
block|typedef unsigned int u_int32_t;
comment|/* 4-bytes (32-bits) */
block|typedef unsigned long long u_int64_t;
comment|/* 8-bytes (64-bits) */
endif|#
directive|endif
comment|/*  * Most BSD systems already define u_intXX_t types, as does Linux.  * Some systems, however, like Compaq's Tru64 Unix instead can use  * uintXX_t types defined by very recent ANSI C standards and included  * in the file:  *  *   #include<inttypes.h>  *  * If you choose to use<inttypes.h> then please define:   *  *   #define SHA2_USE_INTTYPES_H  *  * Or on the command line during compile:  *  *   cc -DSHA2_USE_INTTYPES_H ...  */
if|#
directive|if
literal|0
comment|/*def SHA2_USE_INTTYPES_H*/
block|typedef struct _SHA256_CTX { 	uint32_t	state[8]; 	uint64_t	bitcount; 	uint8_t	buffer[SHA256_BLOCK_LENGTH]; } SHA256_CTX; typedef struct _SHA512_CTX { 	uint64_t	state[8]; 	uint64_t	bitcount[2]; 	uint8_t	buffer[SHA512_BLOCK_LENGTH]; } SHA512_CTX;
else|#
directive|else
comment|/* SHA2_USE_INTTYPES_H */
typedef|typedef
struct|struct
name|_SHA256_CTX
block|{
name|u_int32_t
name|state
index|[
literal|8
index|]
decl_stmt|;
name|u_int64_t
name|bitcount
decl_stmt|;
name|u_int8_t
name|buffer
index|[
name|SHA256_BLOCK_LENGTH
index|]
decl_stmt|;
block|}
name|SHA256_CTX
typedef|;
typedef|typedef
struct|struct
name|_SHA512_CTX
block|{
name|u_int64_t
name|state
index|[
literal|8
index|]
decl_stmt|;
name|u_int64_t
name|bitcount
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|buffer
index|[
name|SHA512_BLOCK_LENGTH
index|]
decl_stmt|;
block|}
name|SHA512_CTX
typedef|;
endif|#
directive|endif
comment|/* SHA2_USE_INTTYPES_H */
typedef|typedef
name|SHA512_CTX
name|SHA384_CTX
typedef|;
comment|/*** SHA-256/384/512 Function Prototypes ******************************/
name|void
name|SHA256_Init
parameter_list|(
name|SHA256_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|SHA256_Update
parameter_list|(
name|SHA256_CTX
modifier|*
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|SHA256_Final
parameter_list|(
name|u_int8_t
index|[
name|SHA256_DIGEST_LENGTH
index|]
parameter_list|,
name|SHA256_CTX
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|SHA256_End
parameter_list|(
name|SHA256_CTX
modifier|*
parameter_list|,
name|char
index|[
name|SHA256_DIGEST_STRING_LENGTH
index|]
parameter_list|)
function_decl|;
name|char
modifier|*
name|SHA256_Data
parameter_list|(
specifier|const
name|u_int8_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|char
index|[
name|SHA256_DIGEST_STRING_LENGTH
index|]
parameter_list|)
function_decl|;
name|void
name|SHA384_Init
parameter_list|(
name|SHA384_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|SHA384_Update
parameter_list|(
name|SHA384_CTX
modifier|*
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|SHA384_Final
parameter_list|(
name|u_int8_t
index|[
name|SHA384_DIGEST_LENGTH
index|]
parameter_list|,
name|SHA384_CTX
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|SHA384_End
parameter_list|(
name|SHA384_CTX
modifier|*
parameter_list|,
name|char
index|[
name|SHA384_DIGEST_STRING_LENGTH
index|]
parameter_list|)
function_decl|;
name|char
modifier|*
name|SHA384_Data
parameter_list|(
specifier|const
name|u_int8_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|char
index|[
name|SHA384_DIGEST_STRING_LENGTH
index|]
parameter_list|)
function_decl|;
name|void
name|SHA512_Init
parameter_list|(
name|SHA512_CTX
modifier|*
parameter_list|)
function_decl|;
name|void
name|SHA512_Update
parameter_list|(
name|SHA512_CTX
modifier|*
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|SHA512_Final
parameter_list|(
name|u_int8_t
index|[
name|SHA512_DIGEST_LENGTH
index|]
parameter_list|,
name|SHA512_CTX
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|SHA512_End
parameter_list|(
name|SHA512_CTX
modifier|*
parameter_list|,
name|char
index|[
name|SHA512_DIGEST_STRING_LENGTH
index|]
parameter_list|)
function_decl|;
name|char
modifier|*
name|SHA512_Data
parameter_list|(
specifier|const
name|u_int8_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|char
index|[
name|SHA512_DIGEST_STRING_LENGTH
index|]
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SHA2_H__ */
end_comment

end_unit

