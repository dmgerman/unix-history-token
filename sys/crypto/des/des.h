begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*	$KAME: des.h,v 1.8 2001/09/10 04:03:57 itojun Exp $	*/
end_comment

begin_comment
comment|/* lib/des/des.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1996 Eric Young (eay@mincom.oz.au)  * All rights reserved.  *  * This file is part of an SSL implementation written  * by Eric Young (eay@mincom.oz.au).  * The implementation was written so as to conform with Netscapes SSL  * specification.  This library and applications are  * FREE FOR COMMERCIAL AND NON-COMMERCIAL USE  * as long as the following conditions are aheared to.  *  * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  If this code is used in a product,  * Eric Young should be given attribution as the author of the parts used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    This product includes software developed by Eric Young (eay@mincom.oz.au)  *  * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_DES_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_DES_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* must be 32bit quantity */
define|#
directive|define
name|DES_LONG
value|u_int32_t
typedef|typedef
name|unsigned
name|char
name|des_cblock
index|[
literal|8
index|]
typedef|;
typedef|typedef
struct|struct
name|des_ks_struct
block|{
union|union
block|{
name|des_cblock
name|cblock
decl_stmt|;
comment|/* make sure things are correct size on machines with 	 * 8 byte longs */
name|DES_LONG
name|deslong
index|[
literal|2
index|]
decl_stmt|;
block|}
name|ks
union|;
name|int
name|weak_key
decl_stmt|;
block|}
name|des_key_schedule
index|[
literal|16
index|]
typedef|;
define|#
directive|define
name|DES_KEY_SZ
value|(sizeof(des_cblock))
define|#
directive|define
name|DES_SCHEDULE_SZ
value|(sizeof(des_key_schedule))
define|#
directive|define
name|DES_ENCRYPT
value|1
define|#
directive|define
name|DES_DECRYPT
value|0
define|#
directive|define
name|DES_CBC_MODE
value|0
define|#
directive|define
name|DES_PCBC_MODE
value|1
specifier|extern
name|int
name|des_check_key
decl_stmt|;
comment|/* defaults to false */
name|char
modifier|*
name|des_options
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_ecb_encrypt
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_encrypt1
name|__P
argument_list|(
operator|(
name|DES_LONG
operator|*
operator|,
name|des_key_schedule
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_encrypt2
name|__P
argument_list|(
operator|(
name|DES_LONG
operator|*
operator|,
name|des_key_schedule
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_encrypt3
name|__P
argument_list|(
operator|(
name|DES_LONG
operator|*
operator|,
name|des_key_schedule
operator|,
name|des_key_schedule
operator|,
name|des_key_schedule
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_decrypt3
name|__P
argument_list|(
operator|(
name|DES_LONG
operator|*
operator|,
name|des_key_schedule
operator|,
name|des_key_schedule
operator|,
name|des_key_schedule
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_ecb3_encrypt
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|,
name|des_key_schedule
operator|,
name|des_key_schedule
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_ncbc_encrypt
name|__P
argument_list|(
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|long
operator|,
name|des_key_schedule
operator|,
name|des_cblock
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_ede3_cbc_encrypt
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|long
parameter_list|,
name|des_key_schedule
parameter_list|,
name|des_key_schedule
parameter_list|,
name|des_key_schedule
parameter_list|,
name|des_cblock
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|des_set_odd_parity
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_fixup_key_parity
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|)
argument_list|)
decl_stmt|;
name|int
name|des_is_weak_key
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|)
argument_list|)
decl_stmt|;
name|int
name|des_set_key
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|)
argument_list|)
decl_stmt|;
name|int
name|des_key_sched
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|)
argument_list|)
decl_stmt|;
name|int
name|des_set_key_checked
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|)
argument_list|)
decl_stmt|;
name|void
name|des_set_key_unchecked
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|,
name|des_key_schedule
operator|)
argument_list|)
decl_stmt|;
name|int
name|des_check_key_parity
name|__P
argument_list|(
operator|(
name|des_cblock
operator|*
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

