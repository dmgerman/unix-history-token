begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2013-2015, Mellanox Technologies. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX5_ABI_USER_H
end_ifndef

begin_define
define|#
directive|define
name|MLX5_ABI_USER_H
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_enum
enum|enum
block|{
name|MLX5_QP_FLAG_SIGNATURE
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_QP_FLAG_SCATTER_CQE
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_SRQ_FLAG_SIGNATURE
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX5_WQ_FLAG_SIGNATURE
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_comment
comment|/* Increment this value if any changes that break userspace ABI  * compatibility are made.  */
end_comment

begin_define
define|#
directive|define
name|MLX5_IB_UVERBS_ABI_VERSION
value|1
end_define

begin_comment
comment|/* Make sure that all structs defined in this file remain laid out so  * that they pack the same way on 32-bit and 64-bit architectures (to  * avoid incompatibility between 32-bit userspace and 64-bit kernels).  * In particular do not use pointer types -- pass pointers in __u64  * instead.  */
end_comment

begin_struct
struct|struct
name|mlx5_ib_alloc_ucontext_req
block|{
name|__u32
name|total_num_uuars
decl_stmt|;
name|__u32
name|num_low_latency_uuars
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_alloc_ucontext_req_v2
block|{
name|__u32
name|total_num_uuars
decl_stmt|;
name|__u32
name|num_low_latency_uuars
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|comp_mask
decl_stmt|;
name|__u8
name|max_cqe_version
decl_stmt|;
name|__u8
name|reserved0
decl_stmt|;
name|__u16
name|reserved1
decl_stmt|;
name|__u32
name|reserved2
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|mlx5_ib_alloc_ucontext_resp_mask
block|{
name|MLX5_IB_ALLOC_UCONTEXT_RESP_MASK_CORE_CLOCK_OFFSET
init|=
literal|1UL
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|mlx5_user_cmds_supp_uhw
block|{
name|MLX5_USER_CMDS_SUPP_UHW_QUERY_DEVICE
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_ib_alloc_ucontext_resp
block|{
name|__u32
name|qp_tab_size
decl_stmt|;
name|__u32
name|bf_reg_size
decl_stmt|;
name|__u32
name|tot_uuars
decl_stmt|;
name|__u32
name|cache_line_size
decl_stmt|;
name|__u16
name|max_sq_desc_sz
decl_stmt|;
name|__u16
name|max_rq_desc_sz
decl_stmt|;
name|__u32
name|max_send_wqebb
decl_stmt|;
name|__u32
name|max_recv_wr
decl_stmt|;
name|__u32
name|max_srq_recv_wr
decl_stmt|;
name|__u16
name|num_ports
decl_stmt|;
name|__u16
name|reserved1
decl_stmt|;
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|response_length
decl_stmt|;
name|__u8
name|cqe_version
decl_stmt|;
name|__u8
name|cmds_supp_uhw
decl_stmt|;
name|__u16
name|reserved2
decl_stmt|;
name|__u64
name|hca_core_clock_offset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_alloc_pd_resp
block|{
name|__u32
name|pdn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_tso_caps
block|{
name|__u32
name|max_tso
decl_stmt|;
comment|/* Maximum tso payload size in bytes */
comment|/* Corresponding bit will be set if qp type from 	 * 'enum ib_qp_type' is supported, e.g. 	 * supported_qpts |= 1<< IB_QPT_UD 	 */
name|__u32
name|supported_qpts
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_rss_caps
block|{
name|__u64
name|rx_hash_fields_mask
decl_stmt|;
comment|/* enum mlx5_rx_hash_fields */
name|__u8
name|rx_hash_function
decl_stmt|;
comment|/* enum mlx5_rx_hash_function_flags */
name|__u8
name|reserved
index|[
literal|7
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_query_device_resp
block|{
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|response_length
decl_stmt|;
name|struct
name|mlx5_ib_tso_caps
name|tso_caps
decl_stmt|;
name|struct
name|mlx5_ib_rss_caps
name|rss_caps
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_cq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|cqe_size
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
comment|/* explicit padding (optional on i386) */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_cq_resp
block|{
name|__u32
name|cqn
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_resize_cq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u16
name|cqe_size
decl_stmt|;
name|__u16
name|reserved0
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_srq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|reserved0
decl_stmt|;
comment|/* explicit padding (optional on i386) */
name|__u32
name|uidx
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_srq_resp
block|{
name|__u32
name|srqn
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_qp
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|sq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_shift
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|uidx
decl_stmt|;
name|__u32
name|reserved0
decl_stmt|;
name|__u64
name|sq_buf_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* RX Hash function flags */
end_comment

begin_enum
enum|enum
name|mlx5_rx_hash_function_flags
block|{
name|MLX5_RX_HASH_FUNC_TOEPLITZ
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_comment
comment|/*  * RX Hash flags, these flags allows to set which incoming packet's field should  * participates in RX Hash. Each flag represent certain packet's field,  * when the flag is set the field that is represented by the flag will  * participate in RX Hash calculation.  * Note: *IPV4 and *IPV6 flags can't be enabled together on the same QP  * and *TCP and *UDP flags can't be enabled together on the same QP. */
end_comment

begin_enum
enum|enum
name|mlx5_rx_hash_fields
block|{
name|MLX5_RX_HASH_SRC_IPV4
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX5_RX_HASH_DST_IPV4
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX5_RX_HASH_SRC_IPV6
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX5_RX_HASH_DST_IPV6
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX5_RX_HASH_SRC_PORT_TCP
init|=
literal|1
operator|<<
literal|4
block|,
name|MLX5_RX_HASH_DST_PORT_TCP
init|=
literal|1
operator|<<
literal|5
block|,
name|MLX5_RX_HASH_SRC_PORT_UDP
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX5_RX_HASH_DST_PORT_UDP
init|=
literal|1
operator|<<
literal|7
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mlx5_ib_create_qp_rss
block|{
name|__u64
name|rx_hash_fields_mask
decl_stmt|;
comment|/* enum mlx5_rx_hash_fields */
name|__u8
name|rx_hash_function
decl_stmt|;
comment|/* enum mlx5_rx_hash_function_flags */
name|__u8
name|rx_key_len
decl_stmt|;
comment|/* valid only for Toeplitz */
name|__u8
name|reserved
index|[
literal|6
index|]
decl_stmt|;
name|__u8
name|rx_hash_key
index|[
literal|128
index|]
decl_stmt|;
comment|/* valid only for Toeplitz */
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_qp_resp
block|{
name|__u32
name|uuar_index
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_alloc_mw
block|{
name|__u32
name|comp_mask
decl_stmt|;
name|__u8
name|num_klms
decl_stmt|;
name|__u8
name|reserved1
decl_stmt|;
name|__u16
name|reserved2
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_wq
block|{
name|__u64
name|buf_addr
decl_stmt|;
name|__u64
name|db_addr
decl_stmt|;
name|__u32
name|rq_wqe_count
decl_stmt|;
name|__u32
name|rq_wqe_shift
decl_stmt|;
name|__u32
name|user_index
decl_stmt|;
name|__u32
name|flags
decl_stmt|;
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_wq_resp
block|{
name|__u32
name|response_length
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_create_rwq_ind_tbl_resp
block|{
name|__u32
name|response_length
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx5_ib_modify_wq
block|{
name|__u32
name|comp_mask
decl_stmt|;
name|__u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX5_ABI_USER_H */
end_comment

end_unit

