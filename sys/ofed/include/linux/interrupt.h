begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_INTERRUPT_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_INTERRUPT_H_
end_define

begin_include
include|#
directive|include
file|<linux/device.h>
end_include

begin_include
include|#
directive|include
file|<linux/pci.h>
end_include

begin_include
include|#
directive|include
file|<sys/bus.h>
end_include

begin_include
include|#
directive|include
file|<sys/rman.h>
end_include

begin_typedef
typedef|typedef
name|irqreturn_t
function_decl|(
modifier|*
name|irq_handler_t
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|IRQ_RETVAL
parameter_list|(
name|x
parameter_list|)
value|((x) != IRQ_NONE)
end_define

begin_define
define|#
directive|define
name|IRQF_SHARED
value|RF_SHAREABLE
end_define

begin_struct
struct|struct
name|irq_ent
block|{
name|struct
name|list_head
name|links
decl_stmt|;
name|struct
name|device
modifier|*
name|dev
decl_stmt|;
name|struct
name|resource
modifier|*
name|res
decl_stmt|;
name|void
modifier|*
name|arg
decl_stmt|;
name|irqreturn_t
function_decl|(
modifier|*
name|handler
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|tag
decl_stmt|;
name|int
name|irq
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|_irq_rid
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|int
name|irq
parameter_list|)
block|{
if|if
condition|(
name|irq
operator|==
name|dev
operator|->
name|irq
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
name|irq
operator|-
name|dev
operator|->
name|msix
operator|+
literal|1
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|_irq_handler
parameter_list|(
name|void
modifier|*
name|ent
parameter_list|)
block|{
name|struct
name|irq_ent
modifier|*
name|irqe
decl_stmt|;
name|irqe
operator|=
name|ent
expr_stmt|;
name|irqe
operator|->
name|handler
argument_list|(
name|irqe
operator|->
name|irq
argument_list|,
name|irqe
operator|->
name|arg
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|irq_ent
modifier|*
name|_irq_ent
parameter_list|(
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|int
name|irq
parameter_list|)
block|{
name|struct
name|irq_ent
modifier|*
name|irqe
decl_stmt|;
name|list_for_each_entry
argument_list|(
argument|irqe
argument_list|,
argument|&dev->irqents
argument_list|,
argument|links
argument_list|)
if|if
condition|(
name|irqe
operator|->
name|irq
operator|==
name|irq
condition|)
return|return
operator|(
name|irqe
operator|)
return|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|request_irq
parameter_list|(
name|unsigned
name|int
name|irq
parameter_list|,
name|irq_handler_t
name|handler
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|struct
name|resource
modifier|*
name|res
decl_stmt|;
name|struct
name|irq_ent
modifier|*
name|irqe
decl_stmt|;
name|struct
name|device
modifier|*
name|dev
decl_stmt|;
name|int
name|error
decl_stmt|;
name|int
name|rid
decl_stmt|;
name|dev
operator|=
name|_pci_find_irq_dev
argument_list|(
name|irq
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|==
name|NULL
condition|)
return|return
operator|-
name|ENXIO
return|;
name|rid
operator|=
name|_irq_rid
argument_list|(
name|dev
argument_list|,
name|irq
argument_list|)
expr_stmt|;
name|res
operator|=
name|bus_alloc_resource_any
argument_list|(
name|dev
operator|->
name|bsddev
argument_list|,
name|SYS_RES_IRQ
argument_list|,
operator|&
name|rid
argument_list|,
name|flags
operator||
name|RF_ACTIVE
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|==
name|NULL
condition|)
return|return
operator|(
operator|-
name|ENXIO
operator|)
return|;
name|irqe
operator|=
name|kmalloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|irqe
argument_list|)
argument_list|,
name|GFP_KERNEL
argument_list|)
expr_stmt|;
name|irqe
operator|->
name|dev
operator|=
name|dev
expr_stmt|;
name|irqe
operator|->
name|res
operator|=
name|res
expr_stmt|;
name|irqe
operator|->
name|arg
operator|=
name|arg
expr_stmt|;
name|irqe
operator|->
name|handler
operator|=
name|handler
expr_stmt|;
name|irqe
operator|->
name|irq
operator|=
name|irq
expr_stmt|;
name|error
operator|=
name|bus_setup_intr
argument_list|(
name|dev
operator|->
name|bsddev
argument_list|,
name|res
argument_list|,
name|INTR_TYPE_NET
operator||
name|INTR_MPSAFE
argument_list|,
name|NULL
argument_list|,
name|_irq_handler
argument_list|,
name|irqe
argument_list|,
operator|&
name|irqe
operator|->
name|tag
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|bus_release_resource
argument_list|(
name|dev
operator|->
name|bsddev
argument_list|,
name|SYS_RES_IRQ
argument_list|,
name|rid
argument_list|,
name|irqe
operator|->
name|res
argument_list|)
expr_stmt|;
name|kfree
argument_list|(
name|irqe
argument_list|)
expr_stmt|;
return|return
operator|(
operator|-
name|error
operator|)
return|;
block|}
name|list_add
argument_list|(
operator|&
name|irqe
operator|->
name|links
argument_list|,
operator|&
name|dev
operator|->
name|irqents
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|free_irq
parameter_list|(
name|unsigned
name|int
name|irq
parameter_list|,
name|void
modifier|*
name|device
parameter_list|)
block|{
name|struct
name|irq_ent
modifier|*
name|irqe
decl_stmt|;
name|struct
name|device
modifier|*
name|dev
decl_stmt|;
name|int
name|rid
decl_stmt|;
name|dev
operator|=
name|_pci_find_irq_dev
argument_list|(
name|irq
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
operator|==
name|NULL
condition|)
return|return;
name|rid
operator|=
name|_irq_rid
argument_list|(
name|dev
argument_list|,
name|irq
argument_list|)
expr_stmt|;
name|irqe
operator|=
name|_irq_ent
argument_list|(
name|dev
argument_list|,
name|irq
argument_list|)
expr_stmt|;
if|if
condition|(
name|irqe
operator|==
name|NULL
condition|)
return|return;
name|bus_teardown_intr
argument_list|(
name|dev
operator|->
name|bsddev
argument_list|,
name|irqe
operator|->
name|res
argument_list|,
name|irqe
operator|->
name|tag
argument_list|)
expr_stmt|;
name|bus_release_resource
argument_list|(
name|dev
operator|->
name|bsddev
argument_list|,
name|SYS_RES_IRQ
argument_list|,
name|rid
argument_list|,
name|irqe
operator|->
name|res
argument_list|)
expr_stmt|;
name|list_del
argument_list|(
operator|&
name|irqe
operator|->
name|links
argument_list|)
expr_stmt|;
name|kfree
argument_list|(
name|irqe
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_INTERRUPT_H_ */
end_comment

end_unit

