begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_COMPLETION_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_COMPLETION_H_
end_define

begin_include
include|#
directive|include
file|<linux/errno.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/sleepqueue.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_struct
struct|struct
name|completion
block|{
name|unsigned
name|int
name|done
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|INIT_COMPLETION
parameter_list|(
name|c
parameter_list|)
value|((c).done = 0)
end_define

begin_define
define|#
directive|define
name|init_completion
parameter_list|(
name|c
parameter_list|)
value|((c)->done = 0)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|_complete_common
parameter_list|(
name|struct
name|completion
modifier|*
name|c
parameter_list|,
name|int
name|all
parameter_list|)
block|{
name|int
name|wakeup_swapper
decl_stmt|;
name|sleepq_lock
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|->
name|done
operator|++
expr_stmt|;
if|if
condition|(
name|all
condition|)
name|wakeup_swapper
operator|=
name|sleepq_broadcast
argument_list|(
name|c
argument_list|,
name|SLEEPQ_SLEEP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|wakeup_swapper
operator|=
name|sleepq_signal
argument_list|(
name|c
argument_list|,
name|SLEEPQ_SLEEP
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sleepq_release
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|wakeup_swapper
condition|)
name|kick_proc0
argument_list|()
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|complete
parameter_list|(
name|c
parameter_list|)
value|_complete_common(c, 0)
end_define

begin_define
define|#
directive|define
name|complete_all
parameter_list|(
name|c
parameter_list|)
value|_complete_common(c, 1)
end_define

begin_comment
comment|/*  * Indefinite wait for done != 0 with or without signals.  */
end_comment

begin_function
specifier|static
specifier|inline
name|long
name|_wait_for_common
parameter_list|(
name|struct
name|completion
modifier|*
name|c
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|flags
operator||=
name|SLEEPQ_SLEEP
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|sleepq_lock
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|done
condition|)
break|break;
name|sleepq_add
argument_list|(
name|c
argument_list|,
name|NULL
argument_list|,
literal|"completion"
argument_list|,
name|flags
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|SLEEPQ_INTERRUPTIBLE
condition|)
block|{
if|if
condition|(
name|sleepq_wait_sig
argument_list|(
name|c
argument_list|,
literal|0
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|(
operator|-
name|ERESTARTSYS
operator|)
return|;
block|}
else|else
name|sleepq_wait
argument_list|(
name|c
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|c
operator|->
name|done
operator|--
expr_stmt|;
name|sleepq_release
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|wait_for_completion
parameter_list|(
name|c
parameter_list|)
value|_wait_for_common(c, 0)
end_define

begin_define
define|#
directive|define
name|wait_for_completion_interuptible
parameter_list|(
name|c
parameter_list|)
define|\
value|_wait_for_common(c, SLEEPQ_INTERRUPTIBLE)
end_define

begin_function
specifier|static
specifier|inline
name|long
name|_wait_for_timeout_common
parameter_list|(
name|struct
name|completion
modifier|*
name|c
parameter_list|,
name|long
name|timeout
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|long
name|end
decl_stmt|;
name|end
operator|=
name|ticks
operator|+
name|timeout
expr_stmt|;
name|flags
operator||=
name|SLEEPQ_SLEEP
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|sleepq_lock
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|done
condition|)
break|break;
name|sleepq_add
argument_list|(
name|c
argument_list|,
name|NULL
argument_list|,
literal|"completion"
argument_list|,
name|flags
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sleepq_set_timeout
argument_list|(
name|c
argument_list|,
name|end
operator|-
name|ticks
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|SLEEPQ_INTERRUPTIBLE
condition|)
block|{
if|if
condition|(
name|sleepq_timedwait_sig
argument_list|(
name|c
argument_list|,
literal|0
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|(
operator|-
name|ERESTARTSYS
operator|)
return|;
block|}
else|else
name|sleepq_timedwait
argument_list|(
name|c
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|c
operator|->
name|done
operator|--
expr_stmt|;
name|sleepq_release
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|timeout
operator|=
name|end
operator|-
name|ticks
expr_stmt|;
return|return
operator|(
name|timeout
operator|>
literal|0
condition|?
name|timeout
else|:
literal|1
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|wait_for_completion_timeout
parameter_list|(
name|c
parameter_list|,
name|timeout
parameter_list|)
define|\
value|_wait_for_timeout_common(c, timeout, 0)
end_define

begin_define
define|#
directive|define
name|wait_for_completion_interruptible_timeout
parameter_list|(
name|c
parameter_list|,
name|timeout
parameter_list|)
define|\
value|_wait_for_timeout_common(c, timeout, SLEEPQ_INTERRUPTIBLE)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|try_wait_for_completion
parameter_list|(
name|struct
name|completion
modifier|*
name|c
parameter_list|)
block|{
name|int
name|isdone
decl_stmt|;
name|isdone
operator|=
literal|1
expr_stmt|;
name|sleepq_lock
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|done
condition|)
name|c
operator|->
name|done
operator|--
expr_stmt|;
else|else
name|isdone
operator|=
literal|0
expr_stmt|;
name|sleepq_release
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
operator|(
name|isdone
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|completion_done
parameter_list|(
name|struct
name|completion
modifier|*
name|c
parameter_list|)
block|{
name|int
name|isdone
decl_stmt|;
name|isdone
operator|=
literal|1
expr_stmt|;
name|sleepq_lock
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|->
name|done
operator|==
literal|0
condition|)
name|isdone
operator|=
literal|0
expr_stmt|;
name|sleepq_release
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
operator|(
name|isdone
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_COMPLETION_H_ */
end_comment

end_unit

