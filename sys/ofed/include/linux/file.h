begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_FILE_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_FILE_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/file.h>
end_include

begin_include
include|#
directive|include
file|<sys/filedesc.h>
end_include

begin_include
include|#
directive|include
file|<sys/refcount.h>
end_include

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_include
include|#
directive|include
file|<linux/fs.h>
end_include

begin_struct_decl
struct_decl|struct
name|linux_file
struct_decl|;
end_struct_decl

begin_undef
undef|#
directive|undef
name|file
end_undef

begin_decl_stmt
specifier|extern
name|struct
name|fileops
name|linuxfileops
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|struct
name|linux_file
modifier|*
name|linux_fget
parameter_list|(
name|unsigned
name|int
name|fd
parameter_list|)
block|{
name|struct
name|file
modifier|*
name|file
decl_stmt|;
if|if
condition|(
name|fget_unlocked
argument_list|(
name|curthread
operator|->
name|td_proc
operator|->
name|p_fd
argument_list|,
name|fd
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|file
argument_list|,
name|NULL
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
operator|(
name|NULL
operator|)
return|;
block|}
return|return
operator|(
expr|struct
name|linux_file
operator|*
operator|)
name|file
operator|->
name|f_data
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|fput
parameter_list|(
name|struct
name|linux_file
modifier|*
name|filp
parameter_list|)
block|{
if|if
condition|(
name|filp
operator|->
name|_file
operator|==
name|NULL
condition|)
block|{
name|kfree
argument_list|(
name|filp
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|refcount_release
argument_list|(
operator|&
name|filp
operator|->
name|_file
operator|->
name|f_count
argument_list|)
condition|)
block|{
name|_fdrop
argument_list|(
name|filp
operator|->
name|_file
argument_list|,
name|curthread
argument_list|)
expr_stmt|;
name|kfree
argument_list|(
name|filp
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|put_unused_fd
parameter_list|(
name|unsigned
name|int
name|fd
parameter_list|)
block|{
name|struct
name|file
modifier|*
name|file
decl_stmt|;
if|if
condition|(
name|fget_unlocked
argument_list|(
name|curthread
operator|->
name|td_proc
operator|->
name|p_fd
argument_list|,
name|fd
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|file
argument_list|,
name|NULL
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return;
block|}
name|fdclose
argument_list|(
name|curthread
operator|->
name|td_proc
operator|->
name|p_fd
argument_list|,
name|file
argument_list|,
name|fd
argument_list|,
name|curthread
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|fd_install
parameter_list|(
name|unsigned
name|int
name|fd
parameter_list|,
name|struct
name|linux_file
modifier|*
name|filp
parameter_list|)
block|{
name|struct
name|file
modifier|*
name|file
decl_stmt|;
if|if
condition|(
name|fget_unlocked
argument_list|(
name|curthread
operator|->
name|td_proc
operator|->
name|p_fd
argument_list|,
name|fd
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
operator|&
name|file
argument_list|,
name|NULL
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|file
operator|=
name|NULL
expr_stmt|;
block|}
name|filp
operator|->
name|_file
operator|=
name|file
expr_stmt|;
name|finit
argument_list|(
name|file
argument_list|,
name|filp
operator|->
name|f_mode
argument_list|,
name|DTYPE_DEV
argument_list|,
name|filp
argument_list|,
operator|&
name|linuxfileops
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|get_unused_fd
parameter_list|(
name|void
parameter_list|)
block|{
name|struct
name|file
modifier|*
name|file
decl_stmt|;
name|int
name|error
decl_stmt|;
name|int
name|fd
decl_stmt|;
name|error
operator|=
name|falloc
argument_list|(
name|curthread
argument_list|,
operator|&
name|file
argument_list|,
operator|&
name|fd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
return|return
operator|-
name|error
return|;
return|return
name|fd
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|linux_file
modifier|*
name|_alloc_file
parameter_list|(
name|int
name|mode
parameter_list|,
specifier|const
name|struct
name|file_operations
modifier|*
name|fops
parameter_list|)
block|{
name|struct
name|linux_file
modifier|*
name|filp
decl_stmt|;
name|filp
operator|=
name|kzalloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|filp
argument_list|)
argument_list|,
name|GFP_KERNEL
argument_list|)
expr_stmt|;
if|if
condition|(
name|filp
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|filp
operator|->
name|f_op
operator|=
name|fops
expr_stmt|;
name|filp
operator|->
name|f_mode
operator|=
name|mode
expr_stmt|;
return|return
name|filp
return|;
block|}
end_function

begin_define
define|#
directive|define
name|alloc_file
parameter_list|(
name|mnt
parameter_list|,
name|root
parameter_list|,
name|mode
parameter_list|,
name|fops
parameter_list|)
value|_alloc_file((mode), (fops))
end_define

begin_define
define|#
directive|define
name|file
value|linux_file
end_define

begin_define
define|#
directive|define
name|fget
value|linux_fget
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_FILE_H_ */
end_comment

end_unit

