begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_KOBJECT_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_KOBJECT_H_
end_define

begin_include
include|#
directive|include
file|<machine/stdarg.h>
end_include

begin_include
include|#
directive|include
file|<linux/kernel.h>
end_include

begin_include
include|#
directive|include
file|<linux/kref.h>
end_include

begin_include
include|#
directive|include
file|<linux/slab.h>
end_include

begin_struct_decl
struct_decl|struct
name|kobject
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|sysctl_oid
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|kobj_type
block|{
name|void
function_decl|(
modifier|*
name|release
function_decl|)
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|)
function_decl|;
specifier|const
name|struct
name|sysfs_ops
modifier|*
name|sysfs_ops
decl_stmt|;
name|struct
name|attribute
modifier|*
modifier|*
name|default_attrs
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|kobj_type
name|kfree_type
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|kobject
block|{
name|struct
name|kobject
modifier|*
name|parent
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|kref
name|kref
decl_stmt|;
name|struct
name|kobj_type
modifier|*
name|ktype
decl_stmt|;
name|struct
name|list_head
name|entry
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|oidp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|kobject
modifier|*
name|mm_kobj
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|void
name|kobject_init
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
name|struct
name|kobj_type
modifier|*
name|ktype
parameter_list|)
block|{
name|kref_init
argument_list|(
operator|&
name|kobj
operator|->
name|kref
argument_list|)
expr_stmt|;
name|INIT_LIST_HEAD
argument_list|(
operator|&
name|kobj
operator|->
name|entry
argument_list|)
expr_stmt|;
name|kobj
operator|->
name|ktype
operator|=
name|ktype
expr_stmt|;
name|kobj
operator|->
name|oidp
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_function_decl
specifier|static
specifier|inline
name|void
name|kobject_put
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|kobject_release
parameter_list|(
name|struct
name|kref
modifier|*
name|kref
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|kobject_put
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|)
block|{
if|if
condition|(
name|kobj
condition|)
name|kref_put
argument_list|(
operator|&
name|kobj
operator|->
name|kref
argument_list|,
name|kobject_release
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|kobject
modifier|*
name|kobject_get
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|)
block|{
if|if
condition|(
name|kobj
condition|)
name|kref_get
argument_list|(
operator|&
name|kobj
operator|->
name|kref
argument_list|)
expr_stmt|;
return|return
name|kobj
return|;
block|}
end_function

begin_function_decl
name|int
name|kobject_set_name_vargs
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|kobject_add
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
name|struct
name|kobject
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|struct
name|kobject
modifier|*
name|kobject_create
parameter_list|(
name|void
parameter_list|)
block|{
name|struct
name|kobject
modifier|*
name|kobj
decl_stmt|;
name|kobj
operator|=
name|kzalloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|kobj
argument_list|)
argument_list|,
name|GFP_KERNEL
argument_list|)
expr_stmt|;
if|if
condition|(
name|kobj
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|kobject_init
argument_list|(
name|kobj
argument_list|,
operator|&
name|kfree_type
argument_list|)
expr_stmt|;
return|return
operator|(
name|kobj
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|kobject
modifier|*
name|kobject_create_and_add
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|kobject
modifier|*
name|parent
parameter_list|)
block|{
name|struct
name|kobject
modifier|*
name|kobj
decl_stmt|;
name|kobj
operator|=
name|kobject_create
argument_list|()
expr_stmt|;
if|if
condition|(
name|kobj
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
if|if
condition|(
name|kobject_add
argument_list|(
name|kobj
argument_list|,
name|parent
argument_list|,
literal|"%s"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|kobj
operator|)
return|;
name|kobject_put
argument_list|(
name|kobj
argument_list|)
expr_stmt|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|kobject_name
parameter_list|(
specifier|const
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|)
block|{
return|return
name|kobj
operator|->
name|name
return|;
block|}
end_function

begin_function_decl
name|int
name|kobject_set_name
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|kobject_init_and_add
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
name|struct
name|kobj_type
modifier|*
name|ktype
parameter_list|,
name|struct
name|kobject
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* sysfs.h calles for 'kobject' which is defined here,   * so we need to add the include only after the 'kobject' def.  */
end_comment

begin_include
include|#
directive|include
file|<linux/sysfs.h>
end_include

begin_struct
struct|struct
name|kobj_attribute
block|{
name|struct
name|attribute
name|attr
decl_stmt|;
name|ssize_t
function_decl|(
modifier|*
name|show
function_decl|)
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
name|struct
name|kobj_attribute
modifier|*
name|attr
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
name|ssize_t
function_decl|(
modifier|*
name|store
function_decl|)
parameter_list|(
name|struct
name|kobject
modifier|*
name|kobj
parameter_list|,
name|struct
name|kobj_attribute
modifier|*
name|attr
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_KOBJECT_H_ */
end_comment

end_unit

