begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2017 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_NETDEVICE_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_NETDEVICE_H_
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<net/if_types.h>
end_include

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_include
include|#
directive|include
file|<net/if_var.h>
end_include

begin_include
include|#
directive|include
file|<net/if_dl.h>
end_include

begin_include
include|#
directive|include
file|<linux/list.h>
end_include

begin_include
include|#
directive|include
file|<linux/completion.h>
end_include

begin_include
include|#
directive|include
file|<linux/device.h>
end_include

begin_include
include|#
directive|include
file|<linux/workqueue.h>
end_include

begin_include
include|#
directive|include
file|<linux/net.h>
end_include

begin_include
include|#
directive|include
file|<linux/notifier.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|VIMAGE
end_ifdef

begin_define
define|#
directive|define
name|init_net
value|*vnet0
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|init_net
value|*((struct vnet *)0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|MAX_ADDR_LEN
value|20
end_define

begin_define
define|#
directive|define
name|net_device
value|ifnet
end_define

begin_function
specifier|static
specifier|inline
name|struct
name|ifnet
modifier|*
name|dev_get_by_index
parameter_list|(
name|struct
name|vnet
modifier|*
name|vnet
parameter_list|,
name|int
name|if_index
parameter_list|)
block|{
name|struct
name|ifnet
modifier|*
name|retval
decl_stmt|;
name|CURVNET_SET
argument_list|(
name|vnet
argument_list|)
expr_stmt|;
name|retval
operator|=
name|ifnet_byindex_ref
argument_list|(
name|if_index
argument_list|)
expr_stmt|;
name|CURVNET_RESTORE
argument_list|()
expr_stmt|;
return|return
operator|(
name|retval
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|dev_hold
parameter_list|(
name|d
parameter_list|)
value|if_ref(d)
end_define

begin_define
define|#
directive|define
name|dev_put
parameter_list|(
name|d
parameter_list|)
value|if_rele(d)
end_define

begin_define
define|#
directive|define
name|dev_net
parameter_list|(
name|d
parameter_list|)
value|((d)->if_vnet)
end_define

begin_define
define|#
directive|define
name|net_eq
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((a) == (b))
end_define

begin_define
define|#
directive|define
name|netif_running
parameter_list|(
name|dev
parameter_list|)
value|!!((dev)->if_drv_flags& IFF_DRV_RUNNING)
end_define

begin_define
define|#
directive|define
name|netif_oper_up
parameter_list|(
name|dev
parameter_list|)
value|!!((dev)->if_flags& IFF_UP)
end_define

begin_define
define|#
directive|define
name|netif_carrier_ok
parameter_list|(
name|dev
parameter_list|)
value|netif_running(dev)
end_define

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|netdev_priv
parameter_list|(
specifier|const
name|struct
name|net_device
modifier|*
name|dev
parameter_list|)
block|{
return|return
operator|(
name|dev
operator|->
name|if_softc
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|_handle_ifnet_link_event
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|,
name|int
name|linkstate
parameter_list|)
block|{
name|struct
name|notifier_block
modifier|*
name|nb
decl_stmt|;
name|nb
operator|=
name|arg
expr_stmt|;
if|if
condition|(
name|linkstate
operator|==
name|LINK_STATE_UP
condition|)
name|nb
operator|->
name|notifier_call
argument_list|(
name|nb
argument_list|,
name|NETDEV_UP
argument_list|,
name|ifp
argument_list|)
expr_stmt|;
else|else
name|nb
operator|->
name|notifier_call
argument_list|(
name|nb
argument_list|,
name|NETDEV_DOWN
argument_list|,
name|ifp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|_handle_ifnet_arrival_event
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|)
block|{
name|struct
name|notifier_block
modifier|*
name|nb
decl_stmt|;
name|nb
operator|=
name|arg
expr_stmt|;
name|nb
operator|->
name|notifier_call
argument_list|(
name|nb
argument_list|,
name|NETDEV_REGISTER
argument_list|,
name|ifp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|_handle_ifnet_departure_event
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|)
block|{
name|struct
name|notifier_block
modifier|*
name|nb
decl_stmt|;
name|nb
operator|=
name|arg
expr_stmt|;
name|nb
operator|->
name|notifier_call
argument_list|(
name|nb
argument_list|,
name|NETDEV_UNREGISTER
argument_list|,
name|ifp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|_handle_iflladdr_event
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|)
block|{
name|struct
name|notifier_block
modifier|*
name|nb
decl_stmt|;
name|nb
operator|=
name|arg
expr_stmt|;
name|nb
operator|->
name|notifier_call
argument_list|(
name|nb
argument_list|,
name|NETDEV_CHANGEADDR
argument_list|,
name|ifp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|_handle_ifaddr_event
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|struct
name|ifnet
modifier|*
name|ifp
parameter_list|)
block|{
name|struct
name|notifier_block
modifier|*
name|nb
decl_stmt|;
name|nb
operator|=
name|arg
expr_stmt|;
name|nb
operator|->
name|notifier_call
argument_list|(
name|nb
argument_list|,
name|NETDEV_CHANGEIFADDR
argument_list|,
name|ifp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|register_netdevice_notifier
parameter_list|(
name|struct
name|notifier_block
modifier|*
name|nb
parameter_list|)
block|{
name|nb
operator|->
name|tags
index|[
name|NETDEV_UP
index|]
operator|=
name|EVENTHANDLER_REGISTER
argument_list|(
name|ifnet_link_event
argument_list|,
name|_handle_ifnet_link_event
argument_list|,
name|nb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nb
operator|->
name|tags
index|[
name|NETDEV_REGISTER
index|]
operator|=
name|EVENTHANDLER_REGISTER
argument_list|(
name|ifnet_arrival_event
argument_list|,
name|_handle_ifnet_arrival_event
argument_list|,
name|nb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nb
operator|->
name|tags
index|[
name|NETDEV_UNREGISTER
index|]
operator|=
name|EVENTHANDLER_REGISTER
argument_list|(
name|ifnet_departure_event
argument_list|,
name|_handle_ifnet_departure_event
argument_list|,
name|nb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nb
operator|->
name|tags
index|[
name|NETDEV_CHANGEADDR
index|]
operator|=
name|EVENTHANDLER_REGISTER
argument_list|(
name|iflladdr_event
argument_list|,
name|_handle_iflladdr_event
argument_list|,
name|nb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|register_inetaddr_notifier
parameter_list|(
name|struct
name|notifier_block
modifier|*
name|nb
parameter_list|)
block|{
name|nb
operator|->
name|tags
index|[
name|NETDEV_CHANGEIFADDR
index|]
operator|=
name|EVENTHANDLER_REGISTER
argument_list|(
name|ifaddr_event
argument_list|,
name|_handle_ifaddr_event
argument_list|,
name|nb
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|unregister_netdevice_notifier
parameter_list|(
name|struct
name|notifier_block
modifier|*
name|nb
parameter_list|)
block|{
name|EVENTHANDLER_DEREGISTER
argument_list|(
name|ifnet_link_event
argument_list|,
name|nb
operator|->
name|tags
index|[
name|NETDEV_UP
index|]
argument_list|)
expr_stmt|;
name|EVENTHANDLER_DEREGISTER
argument_list|(
name|ifnet_arrival_event
argument_list|,
name|nb
operator|->
name|tags
index|[
name|NETDEV_REGISTER
index|]
argument_list|)
expr_stmt|;
name|EVENTHANDLER_DEREGISTER
argument_list|(
name|ifnet_departure_event
argument_list|,
name|nb
operator|->
name|tags
index|[
name|NETDEV_UNREGISTER
index|]
argument_list|)
expr_stmt|;
name|EVENTHANDLER_DEREGISTER
argument_list|(
name|iflladdr_event
argument_list|,
name|nb
operator|->
name|tags
index|[
name|NETDEV_CHANGEADDR
index|]
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|unregister_inetaddr_notifier
parameter_list|(
name|struct
name|notifier_block
modifier|*
name|nb
parameter_list|)
block|{
name|EVENTHANDLER_DEREGISTER
argument_list|(
name|ifaddr_event
argument_list|,
name|nb
operator|->
name|tags
index|[
name|NETDEV_CHANGEIFADDR
index|]
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|rtnl_lock
parameter_list|()
end_define

begin_define
define|#
directive|define
name|rtnl_unlock
parameter_list|()
end_define

begin_function
specifier|static
specifier|inline
name|int
name|dev_mc_delete
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|alen
parameter_list|,
name|int
name|all
parameter_list|)
block|{
name|struct
name|sockaddr_dl
name|sdl
decl_stmt|;
if|if
condition|(
name|alen
operator|>
sizeof|sizeof
argument_list|(
name|sdl
operator|.
name|sdl_data
argument_list|)
condition|)
return|return
operator|(
operator|-
name|EINVAL
operator|)
return|;
name|memset
argument_list|(
operator|&
name|sdl
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sdl
argument_list|)
argument_list|)
expr_stmt|;
name|sdl
operator|.
name|sdl_len
operator|=
sizeof|sizeof
argument_list|(
name|sdl
argument_list|)
expr_stmt|;
name|sdl
operator|.
name|sdl_family
operator|=
name|AF_LINK
expr_stmt|;
name|sdl
operator|.
name|sdl_alen
operator|=
name|alen
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|sdl
operator|.
name|sdl_data
argument_list|,
name|addr
argument_list|,
name|alen
argument_list|)
expr_stmt|;
return|return
operator|-
name|if_delmulti
argument_list|(
name|dev
argument_list|,
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|sdl
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|dev_mc_add
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|int
name|alen
parameter_list|,
name|int
name|newonly
parameter_list|)
block|{
name|struct
name|sockaddr_dl
name|sdl
decl_stmt|;
if|if
condition|(
name|alen
operator|>
sizeof|sizeof
argument_list|(
name|sdl
operator|.
name|sdl_data
argument_list|)
condition|)
return|return
operator|(
operator|-
name|EINVAL
operator|)
return|;
name|memset
argument_list|(
operator|&
name|sdl
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sdl
argument_list|)
argument_list|)
expr_stmt|;
name|sdl
operator|.
name|sdl_len
operator|=
sizeof|sizeof
argument_list|(
name|sdl
argument_list|)
expr_stmt|;
name|sdl
operator|.
name|sdl_family
operator|=
name|AF_LINK
expr_stmt|;
name|sdl
operator|.
name|sdl_alen
operator|=
name|alen
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|sdl
operator|.
name|sdl_data
argument_list|,
name|addr
argument_list|,
name|alen
argument_list|)
expr_stmt|;
return|return
operator|-
name|if_addmulti
argument_list|(
name|dev
argument_list|,
operator|(
expr|struct
name|sockaddr
operator|*
operator|)
operator|&
name|sdl
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_NETDEVICE_H_ */
end_comment

end_unit

