begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_NET_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_NET_H_
end_define

begin_include
include|#
directive|include
file|<sys/protosw.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/socketvar.h>
end_include

begin_function
specifier|static
specifier|inline
name|int
name|sock_create_kern
parameter_list|(
name|int
name|family
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|proto
parameter_list|,
name|struct
name|socket
modifier|*
modifier|*
name|res
parameter_list|)
block|{
return|return
operator|-
name|socreate
argument_list|(
name|family
argument_list|,
name|res
argument_list|,
name|type
argument_list|,
name|proto
argument_list|,
name|curthread
operator|->
name|td_ucred
argument_list|,
name|curthread
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|sock_getname
parameter_list|(
name|struct
name|socket
modifier|*
name|so
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|,
name|int
modifier|*
name|sockaddr_len
parameter_list|,
name|int
name|peer
parameter_list|)
block|{
name|struct
name|sockaddr
modifier|*
modifier|*
name|nam
decl_stmt|;
name|int
name|error
decl_stmt|;
name|nam
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
name|peer
condition|)
block|{
if|if
condition|(
operator|(
name|so
operator|->
name|so_state
operator|&
operator|(
name|SS_ISCONNECTED
operator||
name|SS_ISCONFIRMING
operator|)
operator|)
operator|==
literal|0
condition|)
return|return
operator|(
operator|-
name|ENOTCONN
operator|)
return|;
name|error
operator|=
call|(
modifier|*
name|so
operator|->
name|so_proto
operator|->
name|pr_usrreqs
operator|->
name|pru_peeraddr
call|)
argument_list|(
name|so
argument_list|,
name|nam
argument_list|)
expr_stmt|;
block|}
else|else
name|error
operator|=
call|(
modifier|*
name|so
operator|->
name|so_proto
operator|->
name|pr_usrreqs
operator|->
name|pru_sockaddr
call|)
argument_list|(
name|so
argument_list|,
name|nam
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
return|return
operator|(
operator|-
name|error
operator|)
return|;
operator|*
name|addr
operator|=
operator|*
operator|*
name|nam
expr_stmt|;
operator|*
name|sockaddr_len
operator|=
name|addr
operator|->
name|sa_len
expr_stmt|;
name|free
argument_list|(
operator|*
name|nam
argument_list|,
name|M_SONAME
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sock_release
parameter_list|(
name|struct
name|socket
modifier|*
name|so
parameter_list|)
block|{
name|soclose
argument_list|(
name|so
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_NET_H_ */
end_comment

end_unit

