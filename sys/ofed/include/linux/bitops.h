begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013-2015 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_BITOPS_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_BITOPS_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_define
define|#
directive|define
name|BIT
parameter_list|(
name|nr
parameter_list|)
value|(1UL<< (nr))
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__LP64__
end_ifdef

begin_define
define|#
directive|define
name|BITS_PER_LONG
value|64
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|BITS_PER_LONG
value|32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|BITMAP_FIRST_WORD_MASK
parameter_list|(
name|start
parameter_list|)
value|(~0UL<< ((start) % BITS_PER_LONG))
end_define

begin_define
define|#
directive|define
name|BITMAP_LAST_WORD_MASK
parameter_list|(
name|n
parameter_list|)
value|(~0UL>> (BITS_PER_LONG - (n)))
end_define

begin_define
define|#
directive|define
name|BITS_TO_LONGS
parameter_list|(
name|n
parameter_list|)
value|howmany((n), BITS_PER_LONG)
end_define

begin_define
define|#
directive|define
name|BIT_MASK
parameter_list|(
name|nr
parameter_list|)
value|(1UL<< ((nr)& (BITS_PER_LONG - 1)))
end_define

begin_define
define|#
directive|define
name|BIT_WORD
parameter_list|(
name|nr
parameter_list|)
value|((nr) / BITS_PER_LONG)
end_define

begin_define
define|#
directive|define
name|GENMASK
parameter_list|(
name|lo
parameter_list|,
name|hi
parameter_list|)
value|(((2UL<< ((hi) - (lo))) - 1UL)<< (lo))
end_define

begin_define
define|#
directive|define
name|BITS_PER_BYTE
value|8
end_define

begin_function
specifier|static
specifier|inline
name|int
name|__ffs
parameter_list|(
name|int
name|mask
parameter_list|)
block|{
return|return
operator|(
name|ffs
argument_list|(
name|mask
argument_list|)
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__fls
parameter_list|(
name|int
name|mask
parameter_list|)
block|{
return|return
operator|(
name|fls
argument_list|(
name|mask
argument_list|)
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__ffsl
parameter_list|(
name|long
name|mask
parameter_list|)
block|{
return|return
operator|(
name|ffsl
argument_list|(
name|mask
argument_list|)
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__flsl
parameter_list|(
name|long
name|mask
parameter_list|)
block|{
return|return
operator|(
name|flsl
argument_list|(
name|mask
argument_list|)
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|ffz
parameter_list|(
name|mask
parameter_list|)
value|__ffs(~(mask))
end_define

begin_function
specifier|static
specifier|inline
name|int
name|get_count_order
parameter_list|(
name|unsigned
name|int
name|count
parameter_list|)
block|{
name|int
name|order
decl_stmt|;
name|order
operator|=
name|fls
argument_list|(
name|count
argument_list|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|count
operator|&
operator|(
name|count
operator|-
literal|1
operator|)
condition|)
name|order
operator|++
expr_stmt|;
return|return
name|order
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|find_first_bit
parameter_list|(
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
block|{
name|long
name|mask
decl_stmt|;
name|int
name|bit
decl_stmt|;
for|for
control|(
name|bit
operator|=
literal|0
init|;
name|size
operator|>=
name|BITS_PER_LONG
condition|;
name|size
operator|-=
name|BITS_PER_LONG
operator|,
name|bit
operator|+=
name|BITS_PER_LONG
operator|,
name|addr
operator|++
control|)
block|{
if|if
condition|(
operator|*
name|addr
operator|==
literal|0
condition|)
continue|continue;
return|return
operator|(
name|bit
operator|+
name|__ffsl
argument_list|(
operator|*
name|addr
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|size
condition|)
block|{
name|mask
operator|=
operator|(
operator|*
name|addr
operator|)
operator|&
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
condition|)
name|bit
operator|+=
name|__ffsl
argument_list|(
name|mask
argument_list|)
expr_stmt|;
else|else
name|bit
operator|+=
name|size
expr_stmt|;
block|}
return|return
operator|(
name|bit
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|find_first_zero_bit
parameter_list|(
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
block|{
name|long
name|mask
decl_stmt|;
name|int
name|bit
decl_stmt|;
for|for
control|(
name|bit
operator|=
literal|0
init|;
name|size
operator|>=
name|BITS_PER_LONG
condition|;
name|size
operator|-=
name|BITS_PER_LONG
operator|,
name|bit
operator|+=
name|BITS_PER_LONG
operator|,
name|addr
operator|++
control|)
block|{
if|if
condition|(
operator|~
operator|(
operator|*
name|addr
operator|)
operator|==
literal|0
condition|)
continue|continue;
return|return
operator|(
name|bit
operator|+
name|__ffsl
argument_list|(
operator|~
operator|(
operator|*
name|addr
operator|)
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|size
condition|)
block|{
name|mask
operator|=
operator|~
operator|(
operator|*
name|addr
operator|)
operator|&
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
condition|)
name|bit
operator|+=
name|__ffsl
argument_list|(
name|mask
argument_list|)
expr_stmt|;
else|else
name|bit
operator|+=
name|size
expr_stmt|;
block|}
return|return
operator|(
name|bit
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|find_last_bit
parameter_list|(
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
block|{
name|long
name|mask
decl_stmt|;
name|int
name|offs
decl_stmt|;
name|int
name|bit
decl_stmt|;
name|int
name|pos
decl_stmt|;
name|pos
operator|=
name|size
operator|/
name|BITS_PER_LONG
expr_stmt|;
name|offs
operator|=
name|size
operator|%
name|BITS_PER_LONG
expr_stmt|;
name|bit
operator|=
name|BITS_PER_LONG
operator|*
name|pos
expr_stmt|;
name|addr
operator|+=
name|pos
expr_stmt|;
if|if
condition|(
name|offs
condition|)
block|{
name|mask
operator|=
operator|(
operator|*
name|addr
operator|)
operator|&
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|offs
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
condition|)
return|return
operator|(
name|bit
operator|+
name|__flsl
argument_list|(
name|mask
argument_list|)
operator|)
return|;
block|}
while|while
condition|(
operator|--
name|pos
condition|)
block|{
name|addr
operator|--
expr_stmt|;
name|bit
operator|-=
name|BITS_PER_LONG
expr_stmt|;
if|if
condition|(
operator|*
name|addr
condition|)
return|return
operator|(
name|bit
operator|+
name|__flsl
argument_list|(
name|mask
argument_list|)
operator|)
return|;
block|}
return|return
operator|(
name|size
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|find_next_bit
parameter_list|(
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|,
name|unsigned
name|long
name|offset
parameter_list|)
block|{
name|long
name|mask
decl_stmt|;
name|int
name|offs
decl_stmt|;
name|int
name|bit
decl_stmt|;
name|int
name|pos
decl_stmt|;
if|if
condition|(
name|offset
operator|>=
name|size
condition|)
return|return
operator|(
name|size
operator|)
return|;
name|pos
operator|=
name|offset
operator|/
name|BITS_PER_LONG
expr_stmt|;
name|offs
operator|=
name|offset
operator|%
name|BITS_PER_LONG
expr_stmt|;
name|bit
operator|=
name|BITS_PER_LONG
operator|*
name|pos
expr_stmt|;
name|addr
operator|+=
name|pos
expr_stmt|;
if|if
condition|(
name|offs
condition|)
block|{
name|mask
operator|=
operator|(
operator|*
name|addr
operator|)
operator|&
operator|~
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|offs
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
condition|)
return|return
operator|(
name|bit
operator|+
name|__ffsl
argument_list|(
name|mask
argument_list|)
operator|)
return|;
if|if
condition|(
name|size
operator|-
name|bit
operator|<=
name|BITS_PER_LONG
condition|)
return|return
operator|(
name|size
operator|)
return|;
name|bit
operator|+=
name|BITS_PER_LONG
expr_stmt|;
name|addr
operator|++
expr_stmt|;
block|}
for|for
control|(
name|size
operator|-=
name|bit
init|;
name|size
operator|>=
name|BITS_PER_LONG
condition|;
name|size
operator|-=
name|BITS_PER_LONG
operator|,
name|bit
operator|+=
name|BITS_PER_LONG
operator|,
name|addr
operator|++
control|)
block|{
if|if
condition|(
operator|*
name|addr
operator|==
literal|0
condition|)
continue|continue;
return|return
operator|(
name|bit
operator|+
name|__ffsl
argument_list|(
operator|*
name|addr
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|size
condition|)
block|{
name|mask
operator|=
operator|(
operator|*
name|addr
operator|)
operator|&
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
condition|)
name|bit
operator|+=
name|__ffsl
argument_list|(
name|mask
argument_list|)
expr_stmt|;
else|else
name|bit
operator|+=
name|size
expr_stmt|;
block|}
return|return
operator|(
name|bit
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|find_next_zero_bit
parameter_list|(
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|,
name|unsigned
name|long
name|offset
parameter_list|)
block|{
name|long
name|mask
decl_stmt|;
name|int
name|offs
decl_stmt|;
name|int
name|bit
decl_stmt|;
name|int
name|pos
decl_stmt|;
if|if
condition|(
name|offset
operator|>=
name|size
condition|)
return|return
operator|(
name|size
operator|)
return|;
name|pos
operator|=
name|offset
operator|/
name|BITS_PER_LONG
expr_stmt|;
name|offs
operator|=
name|offset
operator|%
name|BITS_PER_LONG
expr_stmt|;
name|bit
operator|=
name|BITS_PER_LONG
operator|*
name|pos
expr_stmt|;
name|addr
operator|+=
name|pos
expr_stmt|;
if|if
condition|(
name|offs
condition|)
block|{
name|mask
operator|=
operator|~
operator|(
operator|*
name|addr
operator|)
operator|&
operator|~
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|offs
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
condition|)
return|return
operator|(
name|bit
operator|+
name|__ffsl
argument_list|(
name|mask
argument_list|)
operator|)
return|;
if|if
condition|(
name|size
operator|-
name|bit
operator|<=
name|BITS_PER_LONG
condition|)
return|return
operator|(
name|size
operator|)
return|;
name|bit
operator|+=
name|BITS_PER_LONG
expr_stmt|;
name|addr
operator|++
expr_stmt|;
block|}
for|for
control|(
name|size
operator|-=
name|bit
init|;
name|size
operator|>=
name|BITS_PER_LONG
condition|;
name|size
operator|-=
name|BITS_PER_LONG
operator|,
name|bit
operator|+=
name|BITS_PER_LONG
operator|,
name|addr
operator|++
control|)
block|{
if|if
condition|(
operator|~
operator|(
operator|*
name|addr
operator|)
operator|==
literal|0
condition|)
continue|continue;
return|return
operator|(
name|bit
operator|+
name|__ffsl
argument_list|(
operator|~
operator|(
operator|*
name|addr
operator|)
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|size
condition|)
block|{
name|mask
operator|=
operator|~
operator|(
operator|*
name|addr
operator|)
operator|&
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
condition|)
name|bit
operator|+=
name|__ffsl
argument_list|(
name|mask
argument_list|)
expr_stmt|;
else|else
name|bit
operator|+=
name|size
expr_stmt|;
block|}
return|return
operator|(
name|bit
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|bitmap_zero
parameter_list|(
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|int
name|len
decl_stmt|;
name|len
operator|=
name|BITS_TO_LONGS
argument_list|(
name|size
argument_list|)
operator|*
sizeof|sizeof
argument_list|(
name|long
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|addr
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|bitmap_fill
parameter_list|(
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|int
name|tail
decl_stmt|;
name|int
name|len
decl_stmt|;
name|len
operator|=
operator|(
name|size
operator|/
name|BITS_PER_LONG
operator|)
operator|*
sizeof|sizeof
argument_list|(
name|long
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|addr
argument_list|,
literal|0xff
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|tail
operator|=
name|size
operator|&
operator|(
name|BITS_PER_LONG
operator|-
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|tail
condition|)
name|addr
index|[
name|size
operator|/
name|BITS_PER_LONG
index|]
operator|=
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|tail
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|bitmap_full
parameter_list|(
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|unsigned
name|long
name|mask
decl_stmt|;
name|int
name|tail
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|i
decl_stmt|;
name|len
operator|=
name|size
operator|/
name|BITS_PER_LONG
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|addr
index|[
name|i
index|]
operator|!=
operator|~
literal|0UL
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|tail
operator|=
name|size
operator|&
operator|(
name|BITS_PER_LONG
operator|-
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|tail
condition|)
block|{
name|mask
operator|=
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|tail
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|addr
index|[
name|i
index|]
operator|&
name|mask
operator|)
operator|!=
name|mask
condition|)
return|return
operator|(
literal|0
operator|)
return|;
block|}
return|return
operator|(
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|bitmap_empty
parameter_list|(
name|unsigned
name|long
modifier|*
name|addr
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|unsigned
name|long
name|mask
decl_stmt|;
name|int
name|tail
decl_stmt|;
name|int
name|len
decl_stmt|;
name|int
name|i
decl_stmt|;
name|len
operator|=
name|size
operator|/
name|BITS_PER_LONG
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|addr
index|[
name|i
index|]
operator|!=
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|tail
operator|=
name|size
operator|&
operator|(
name|BITS_PER_LONG
operator|-
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|tail
condition|)
block|{
name|mask
operator|=
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|tail
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|addr
index|[
name|i
index|]
operator|&
name|mask
operator|)
operator|!=
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
block|}
return|return
operator|(
literal|1
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|__set_bit
parameter_list|(
name|i
parameter_list|,
name|a
parameter_list|)
define|\
value|atomic_set_long(&((volatile long *)(a))[BIT_WORD(i)], BIT_MASK(i))
end_define

begin_define
define|#
directive|define
name|set_bit
parameter_list|(
name|i
parameter_list|,
name|a
parameter_list|)
define|\
value|atomic_set_long(&((volatile long *)(a))[BIT_WORD(i)], BIT_MASK(i))
end_define

begin_define
define|#
directive|define
name|__clear_bit
parameter_list|(
name|i
parameter_list|,
name|a
parameter_list|)
define|\
value|atomic_clear_long(&((volatile long *)(a))[BIT_WORD(i)], BIT_MASK(i))
end_define

begin_define
define|#
directive|define
name|clear_bit
parameter_list|(
name|i
parameter_list|,
name|a
parameter_list|)
define|\
value|atomic_clear_long(&((volatile long *)(a))[BIT_WORD(i)], BIT_MASK(i))
end_define

begin_define
define|#
directive|define
name|test_bit
parameter_list|(
name|i
parameter_list|,
name|a
parameter_list|)
define|\
value|!!(atomic_load_acq_long(&((volatile long *)(a))[BIT_WORD(i)])&	\     BIT_MASK(i))
end_define

begin_function
specifier|static
specifier|inline
name|long
name|test_and_clear_bit
parameter_list|(
name|long
name|bit
parameter_list|,
name|long
modifier|*
name|var
parameter_list|)
block|{
name|long
name|val
decl_stmt|;
name|var
operator|+=
name|BIT_WORD
argument_list|(
name|bit
argument_list|)
expr_stmt|;
name|bit
operator|%=
name|BITS_PER_LONG
expr_stmt|;
name|bit
operator|=
operator|(
literal|1UL
operator|<<
name|bit
operator|)
expr_stmt|;
do|do
block|{
name|val
operator|=
operator|*
operator|(
specifier|volatile
name|long
operator|*
operator|)
name|var
expr_stmt|;
block|}
do|while
condition|(
name|atomic_cmpset_long
argument_list|(
name|var
argument_list|,
name|val
argument_list|,
name|val
operator|&
operator|~
name|bit
argument_list|)
operator|==
literal|0
condition|)
do|;
return|return
operator|!
operator|!
operator|(
name|val
operator|&
name|bit
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|test_and_set_bit
parameter_list|(
name|long
name|bit
parameter_list|,
name|long
modifier|*
name|var
parameter_list|)
block|{
name|long
name|val
decl_stmt|;
name|var
operator|+=
name|BIT_WORD
argument_list|(
name|bit
argument_list|)
expr_stmt|;
name|bit
operator|%=
name|BITS_PER_LONG
expr_stmt|;
name|bit
operator|=
operator|(
literal|1UL
operator|<<
name|bit
operator|)
expr_stmt|;
do|do
block|{
name|val
operator|=
operator|*
operator|(
specifier|volatile
name|long
operator|*
operator|)
name|var
expr_stmt|;
block|}
do|while
condition|(
name|atomic_cmpset_long
argument_list|(
name|var
argument_list|,
name|val
argument_list|,
name|val
operator||
name|bit
argument_list|)
operator|==
literal|0
condition|)
do|;
return|return
operator|!
operator|!
operator|(
name|val
operator|&
name|bit
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|bitmap_set
parameter_list|(
name|unsigned
name|long
modifier|*
name|map
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|nr
parameter_list|)
block|{
name|unsigned
name|long
modifier|*
name|p
init|=
name|map
operator|+
name|BIT_WORD
argument_list|(
name|start
argument_list|)
decl_stmt|;
specifier|const
name|int
name|size
init|=
name|start
operator|+
name|nr
decl_stmt|;
name|int
name|bits_to_set
init|=
name|BITS_PER_LONG
operator|-
operator|(
name|start
operator|%
name|BITS_PER_LONG
operator|)
decl_stmt|;
name|unsigned
name|long
name|mask_to_set
init|=
name|BITMAP_FIRST_WORD_MASK
argument_list|(
name|start
argument_list|)
decl_stmt|;
while|while
condition|(
name|nr
operator|-
name|bits_to_set
operator|>=
literal|0
condition|)
block|{
operator|*
name|p
operator||=
name|mask_to_set
expr_stmt|;
name|nr
operator|-=
name|bits_to_set
expr_stmt|;
name|bits_to_set
operator|=
name|BITS_PER_LONG
expr_stmt|;
name|mask_to_set
operator|=
operator|~
literal|0UL
expr_stmt|;
name|p
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nr
condition|)
block|{
name|mask_to_set
operator|&=
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|size
argument_list|)
expr_stmt|;
operator|*
name|p
operator||=
name|mask_to_set
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|bitmap_clear
parameter_list|(
name|unsigned
name|long
modifier|*
name|map
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|nr
parameter_list|)
block|{
name|unsigned
name|long
modifier|*
name|p
init|=
name|map
operator|+
name|BIT_WORD
argument_list|(
name|start
argument_list|)
decl_stmt|;
specifier|const
name|int
name|size
init|=
name|start
operator|+
name|nr
decl_stmt|;
name|int
name|bits_to_clear
init|=
name|BITS_PER_LONG
operator|-
operator|(
name|start
operator|%
name|BITS_PER_LONG
operator|)
decl_stmt|;
name|unsigned
name|long
name|mask_to_clear
init|=
name|BITMAP_FIRST_WORD_MASK
argument_list|(
name|start
argument_list|)
decl_stmt|;
while|while
condition|(
name|nr
operator|-
name|bits_to_clear
operator|>=
literal|0
condition|)
block|{
operator|*
name|p
operator|&=
operator|~
name|mask_to_clear
expr_stmt|;
name|nr
operator|-=
name|bits_to_clear
expr_stmt|;
name|bits_to_clear
operator|=
name|BITS_PER_LONG
expr_stmt|;
name|mask_to_clear
operator|=
operator|~
literal|0UL
expr_stmt|;
name|p
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nr
condition|)
block|{
name|mask_to_clear
operator|&=
name|BITMAP_LAST_WORD_MASK
argument_list|(
name|size
argument_list|)
expr_stmt|;
operator|*
name|p
operator|&=
operator|~
name|mask_to_clear
expr_stmt|;
block|}
block|}
end_function

begin_enum
enum|enum
block|{
name|REG_OP_ISFREE
block|,
name|REG_OP_ALLOC
block|,
name|REG_OP_RELEASE
block|, }
enum|;
end_enum

begin_function
specifier|static
name|int
name|__reg_op
parameter_list|(
name|unsigned
name|long
modifier|*
name|bitmap
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|order
parameter_list|,
name|int
name|reg_op
parameter_list|)
block|{
name|int
name|nbits_reg
decl_stmt|;
name|int
name|index
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|nlongs_reg
decl_stmt|;
name|int
name|nbitsinlong
decl_stmt|;
name|unsigned
name|long
name|mask
decl_stmt|;
name|int
name|i
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|nbits_reg
operator|=
literal|1
operator|<<
name|order
expr_stmt|;
name|index
operator|=
name|pos
operator|/
name|BITS_PER_LONG
expr_stmt|;
name|offset
operator|=
name|pos
operator|-
operator|(
name|index
operator|*
name|BITS_PER_LONG
operator|)
expr_stmt|;
name|nlongs_reg
operator|=
name|BITS_TO_LONGS
argument_list|(
name|nbits_reg
argument_list|)
expr_stmt|;
name|nbitsinlong
operator|=
name|min
argument_list|(
name|nbits_reg
argument_list|,
name|BITS_PER_LONG
argument_list|)
expr_stmt|;
name|mask
operator|=
operator|(
literal|1UL
operator|<<
operator|(
name|nbitsinlong
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
name|mask
operator|+=
name|mask
operator|-
literal|1
expr_stmt|;
name|mask
operator|<<=
name|offset
expr_stmt|;
switch|switch
condition|(
name|reg_op
condition|)
block|{
case|case
name|REG_OP_ISFREE
case|:
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nlongs_reg
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bitmap
index|[
name|index
operator|+
name|i
index|]
operator|&
name|mask
condition|)
goto|goto
name|done
goto|;
block|}
name|ret
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|REG_OP_ALLOC
case|:
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nlongs_reg
condition|;
name|i
operator|++
control|)
name|bitmap
index|[
name|index
operator|+
name|i
index|]
operator||=
name|mask
expr_stmt|;
break|break;
case|case
name|REG_OP_RELEASE
case|:
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nlongs_reg
condition|;
name|i
operator|++
control|)
name|bitmap
index|[
name|index
operator|+
name|i
index|]
operator|&=
operator|~
name|mask
expr_stmt|;
break|break;
block|}
name|done
label|:
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|bitmap_find_free_region
parameter_list|(
name|unsigned
name|long
modifier|*
name|bitmap
parameter_list|,
name|int
name|bits
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|int
name|pos
decl_stmt|;
name|int
name|end
decl_stmt|;
for|for
control|(
name|pos
operator|=
literal|0
init|;
operator|(
name|end
operator|=
name|pos
operator|+
operator|(
literal|1
operator|<<
name|order
operator|)
operator|)
operator|<=
name|bits
condition|;
name|pos
operator|=
name|end
control|)
block|{
if|if
condition|(
operator|!
name|__reg_op
argument_list|(
name|bitmap
argument_list|,
name|pos
argument_list|,
name|order
argument_list|,
name|REG_OP_ISFREE
argument_list|)
condition|)
continue|continue;
name|__reg_op
argument_list|(
name|bitmap
argument_list|,
name|pos
argument_list|,
name|order
argument_list|,
name|REG_OP_ALLOC
argument_list|)
expr_stmt|;
return|return
name|pos
return|;
block|}
return|return
operator|-
name|ENOMEM
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|bitmap_allocate_region
parameter_list|(
name|unsigned
name|long
modifier|*
name|bitmap
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|order
parameter_list|)
block|{
if|if
condition|(
operator|!
name|__reg_op
argument_list|(
name|bitmap
argument_list|,
name|pos
argument_list|,
name|order
argument_list|,
name|REG_OP_ISFREE
argument_list|)
condition|)
return|return
operator|-
name|EBUSY
return|;
name|__reg_op
argument_list|(
name|bitmap
argument_list|,
name|pos
argument_list|,
name|order
argument_list|,
name|REG_OP_ALLOC
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|bitmap_release_region
parameter_list|(
name|unsigned
name|long
modifier|*
name|bitmap
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|__reg_op
argument_list|(
name|bitmap
argument_list|,
name|pos
argument_list|,
name|order
argument_list|,
name|REG_OP_RELEASE
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|for_each_set_bit
parameter_list|(
name|bit
parameter_list|,
name|addr
parameter_list|,
name|size
parameter_list|)
define|\
value|for ((bit) = find_first_bit((addr), (size));		\ 	     (bit)< (size);					\ 	     (bit) = find_next_bit((addr), (size), (bit) + 1))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_BITOPS_H_ */
end_comment

end_unit

