begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007 Cisco Systems, Inc.  All rights reserved.  * Copyright (c) 2014 Mellanox Technologies, Ltd. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_MATH64_H
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_MATH64_H
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/bitops.h>
end_include

begin_if
if|#
directive|if
name|BITS_PER_LONG
operator|==
literal|64
end_if

begin_define
define|#
directive|define
name|do_div
parameter_list|(
name|n
parameter_list|,
name|base
parameter_list|)
value|({                                    \ 	uint32_t __base = (base);                               \ 	uint32_t __rem;                                         \ 	__rem = ((uint64_t)(n)) % __base;                       \ 	(n) = ((uint64_t)(n)) / __base;                         \ 	__rem;                                                  \ })
end_define

begin_comment
comment|/** * div_u64_rem - unsigned 64bit divide with 32bit divisor with remainder * * This is commonly provided by 32bit archs to provide an optimized 64bit * divide. */
end_comment

begin_function
specifier|static
specifier|inline
name|u64
name|div_u64_rem
parameter_list|(
name|u64
name|dividend
parameter_list|,
name|u32
name|divisor
parameter_list|,
name|u32
modifier|*
name|remainder
parameter_list|)
block|{
operator|*
name|remainder
operator|=
name|dividend
operator|%
name|divisor
expr_stmt|;
return|return
name|dividend
operator|/
name|divisor
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
name|BITS_PER_LONG
operator|==
literal|32
end_elif

begin_function
specifier|static
name|uint32_t
name|__div64_32
parameter_list|(
name|uint64_t
modifier|*
name|n
parameter_list|,
name|uint32_t
name|base
parameter_list|)
block|{
name|uint64_t
name|rem
init|=
operator|*
name|n
decl_stmt|;
name|uint64_t
name|b
init|=
name|base
decl_stmt|;
name|uint64_t
name|res
decl_stmt|,
name|d
init|=
literal|1
decl_stmt|;
name|uint32_t
name|high
init|=
name|rem
operator|>>
literal|32
decl_stmt|;
comment|/* Reduce the thing a bit first */
name|res
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|high
operator|>=
name|base
condition|)
block|{
name|high
operator|/=
name|base
expr_stmt|;
name|res
operator|=
operator|(
name|uint64_t
operator|)
name|high
operator|<<
literal|32
expr_stmt|;
name|rem
operator|-=
call|(
name|uint64_t
call|)
argument_list|(
name|high
operator|*
name|base
argument_list|)
operator|<<
literal|32
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|int64_t
operator|)
name|b
operator|>
literal|0
operator|&&
name|b
operator|<
name|rem
condition|)
block|{
name|b
operator|=
name|b
operator|+
name|b
expr_stmt|;
name|d
operator|=
name|d
operator|+
name|d
expr_stmt|;
block|}
do|do
block|{
if|if
condition|(
name|rem
operator|>=
name|b
condition|)
block|{
name|rem
operator|-=
name|b
expr_stmt|;
name|res
operator|+=
name|d
expr_stmt|;
block|}
name|b
operator|>>=
literal|1
expr_stmt|;
name|d
operator|>>=
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|d
condition|)
do|;
operator|*
name|n
operator|=
name|res
expr_stmt|;
return|return
name|rem
return|;
block|}
end_function

begin_define
define|#
directive|define
name|do_div
parameter_list|(
name|n
parameter_list|,
name|base
parameter_list|)
value|({                            \ 	uint32_t __base = (base);                       \ 	uint32_t __rem;                                 \ 	(void)(((typeof((n)) *)0) == ((uint64_t *)0));  \ 	if (likely(((n)>> 32) == 0)) {                 \ 		__rem = (uint32_t)(n) % __base;         \ 		(n) = (uint32_t)(n) / __base;           \ 	} else                                          \ 		__rem = __div64_32(&(n), __base);       \ 	__rem;                                          \ })
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|div_u64_rem
end_ifndef

begin_function
specifier|static
specifier|inline
name|u64
name|div_u64_rem
parameter_list|(
name|u64
name|dividend
parameter_list|,
name|u32
name|divisor
parameter_list|,
name|u32
modifier|*
name|remainder
parameter_list|)
block|{
operator|*
name|remainder
operator|=
name|do_div
argument_list|(
name|dividend
argument_list|,
name|divisor
argument_list|)
expr_stmt|;
return|return
name|dividend
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* BITS_PER_LONG */
end_comment

begin_comment
comment|/**  ** div_u64 - unsigned 64bit divide with 32bit divisor  **  ** This is the most common 64bit divide and should be used if possible,  ** as many 32bit archs can optimize this variant better than a full 64bit  ** divide.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|div_u64
end_ifndef

begin_function
specifier|static
specifier|inline
name|u64
name|div_u64
parameter_list|(
name|u64
name|dividend
parameter_list|,
name|u32
name|divisor
parameter_list|)
block|{
name|u32
name|remainder
decl_stmt|;
return|return
name|div_u64_rem
argument_list|(
name|dividend
argument_list|,
name|divisor
argument_list|,
operator|&
name|remainder
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_MATH64_H */
end_comment

end_unit

