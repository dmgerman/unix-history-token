begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_MISCDEVICE_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_MISCDEVICE_H_
end_define

begin_define
define|#
directive|define
name|MISC_DYNAMIC_MINOR
value|-1
end_define

begin_include
include|#
directive|include
file|<linux/device.h>
end_include

begin_include
include|#
directive|include
file|<linux/cdev.h>
end_include

begin_struct
struct|struct
name|miscdevice
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|device
modifier|*
name|this_device
decl_stmt|;
specifier|const
name|struct
name|file_operations
modifier|*
name|fops
decl_stmt|;
name|struct
name|cdev
modifier|*
name|cdev
decl_stmt|;
name|int
name|minor
decl_stmt|;
specifier|const
name|char
modifier|*
name|nodename
decl_stmt|;
name|umode_t
name|mode
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|class
name|miscclass
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|misc_register
parameter_list|(
name|struct
name|miscdevice
modifier|*
name|misc
parameter_list|)
block|{
name|misc
operator|->
name|this_device
operator|=
name|device_create
argument_list|(
operator|&
name|miscclass
argument_list|,
operator|&
name|linux_rootdev
argument_list|,
literal|0
argument_list|,
name|misc
argument_list|,
name|misc
operator|->
name|name
argument_list|)
expr_stmt|;
name|misc
operator|->
name|cdev
operator|=
name|cdev_alloc
argument_list|()
expr_stmt|;
if|if
condition|(
name|misc
operator|->
name|cdev
operator|==
name|NULL
condition|)
return|return
operator|-
name|ENOMEM
return|;
name|misc
operator|->
name|cdev
operator|->
name|owner
operator|=
name|THIS_MODULE
expr_stmt|;
name|misc
operator|->
name|cdev
operator|->
name|ops
operator|=
name|misc
operator|->
name|fops
expr_stmt|;
name|kobject_set_name
argument_list|(
operator|&
name|misc
operator|->
name|cdev
operator|->
name|kobj
argument_list|,
name|misc
operator|->
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|cdev_add
argument_list|(
name|misc
operator|->
name|cdev
argument_list|,
name|misc
operator|->
name|this_device
operator|->
name|devt
argument_list|,
literal|1
argument_list|)
condition|)
return|return
operator|-
name|EINVAL
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|misc_deregister
parameter_list|(
name|struct
name|miscdevice
modifier|*
name|misc
parameter_list|)
block|{
name|device_destroy
argument_list|(
operator|&
name|miscclass
argument_list|,
name|misc
operator|->
name|this_device
operator|->
name|devt
argument_list|)
expr_stmt|;
name|cdev_del
argument_list|(
name|misc
operator|->
name|cdev
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_MISCDEVICE_H_ */
end_comment

end_unit

