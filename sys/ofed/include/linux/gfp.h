begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_GFP_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_GFP_H_
end_define

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<linux/page.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm_object.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm_extern.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm_kern.h>
end_include

begin_define
define|#
directive|define
name|__GFP_NOWARN
value|0
end_define

begin_define
define|#
directive|define
name|__GFP_HIGHMEM
value|0
end_define

begin_define
define|#
directive|define
name|__GFP_ZERO
value|M_ZERO
end_define

begin_define
define|#
directive|define
name|GFP_NOWAIT
value|M_NOWAIT
end_define

begin_define
define|#
directive|define
name|GFP_ATOMIC
value|(M_NOWAIT | M_USE_RESERVE)
end_define

begin_define
define|#
directive|define
name|GFP_KERNEL
value|M_WAITOK
end_define

begin_define
define|#
directive|define
name|GFP_USER
value|M_WAITOK
end_define

begin_define
define|#
directive|define
name|GFP_HIGHUSER
value|M_WAITOK
end_define

begin_define
define|#
directive|define
name|GFP_HIGHUSER_MOVABLE
value|M_WAITOK
end_define

begin_define
define|#
directive|define
name|GFP_IOFS
value|M_NOWAIT
end_define

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|page_address
parameter_list|(
name|struct
name|page
modifier|*
name|page
parameter_list|)
block|{
if|if
condition|(
name|page
operator|->
name|object
operator|!=
name|kmem_object
operator|&&
name|page
operator|->
name|object
operator|!=
name|kernel_object
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|VM_MIN_KERNEL_ADDRESS
operator|+
name|IDX_TO_OFF
argument_list|(
name|page
operator|->
name|pindex
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|_get_page
parameter_list|(
name|gfp_t
name|mask
parameter_list|)
block|{
return|return
name|kmem_malloc
argument_list|(
name|kmem_map
argument_list|,
name|PAGE_SIZE
argument_list|,
name|mask
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|get_zeroed_page
parameter_list|(
name|mask
parameter_list|)
value|_get_page((mask) | M_ZERO)
end_define

begin_define
define|#
directive|define
name|alloc_page
parameter_list|(
name|mask
parameter_list|)
value|virt_to_page(_get_page((mask)))
end_define

begin_define
define|#
directive|define
name|__get_free_page
parameter_list|(
name|mask
parameter_list|)
value|_get_page((mask))
end_define

begin_function
specifier|static
specifier|inline
name|void
name|free_page
parameter_list|(
name|unsigned
name|long
name|page
parameter_list|)
block|{
if|if
condition|(
name|page
operator|==
literal|0
condition|)
return|return;
name|kmem_free
argument_list|(
name|kmem_map
argument_list|,
name|page
argument_list|,
name|PAGE_SIZE
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|__free_page
parameter_list|(
name|struct
name|page
modifier|*
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|->
name|object
operator|!=
name|kmem_object
condition|)
name|panic
argument_list|(
literal|"__free_page:  Freed page %p not allocated via wrappers."
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|kmem_free
argument_list|(
name|kmem_map
argument_list|,
operator|(
name|vm_offset_t
operator|)
name|page_address
argument_list|(
name|m
argument_list|)
argument_list|,
name|PAGE_SIZE
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|__free_pages
parameter_list|(
name|void
modifier|*
name|p
parameter_list|,
name|unsigned
name|int
name|order
parameter_list|)
block|{
name|size_t
name|size
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|0
condition|)
return|return;
name|size
operator|=
name|PAGE_SIZE
operator|<<
name|order
expr_stmt|;
name|kmem_free
argument_list|(
name|kmem_map
argument_list|,
operator|(
name|vm_offset_t
operator|)
name|p
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Alloc pages allocates directly from the buddy allocator on linux so  * order specifies a power of two bucket of pages and the results  * are expected to be aligned on the size as well.  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|page
modifier|*
name|alloc_pages
parameter_list|(
name|gfp_t
name|gfp_mask
parameter_list|,
name|unsigned
name|int
name|order
parameter_list|)
block|{
name|unsigned
name|long
name|page
decl_stmt|;
name|size_t
name|size
decl_stmt|;
name|size
operator|=
name|PAGE_SIZE
operator|<<
name|order
expr_stmt|;
name|page
operator|=
name|kmem_alloc_contig
argument_list|(
name|kmem_map
argument_list|,
name|size
argument_list|,
name|gfp_mask
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
name|VM_MEMATTR_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|page
operator|==
literal|0
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
return|return
operator|(
name|virt_to_page
argument_list|(
name|page
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_GFP_H_ */
end_comment

end_unit

