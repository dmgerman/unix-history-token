begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2007 Cisco Systems, Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *	- Redistributions of source code must retain the above  *	  copyright notice, this list of conditions and the following  *	  disclaimer.  *  *	- Redistributions in binary form must reproduce the above  *	  copyright notice, this list of conditions and the following  *	  disclaimer in the documentation and/or other materials  *	  provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX4_QP_H
end_ifndef

begin_define
define|#
directive|define
name|MLX4_QP_H
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/mlx4/device.h>
end_include

begin_define
define|#
directive|define
name|MLX4_INVALID_LKEY
value|0x100
end_define

begin_enum
enum|enum
name|mlx4_qp_optpar
block|{
name|MLX4_QP_OPTPAR_ALT_ADDR_PATH
init|=
literal|1
operator|<<
literal|0
block|,
name|MLX4_QP_OPTPAR_RRE
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX4_QP_OPTPAR_RAE
init|=
literal|1
operator|<<
literal|2
block|,
name|MLX4_QP_OPTPAR_RWE
init|=
literal|1
operator|<<
literal|3
block|,
name|MLX4_QP_OPTPAR_PKEY_INDEX
init|=
literal|1
operator|<<
literal|4
block|,
name|MLX4_QP_OPTPAR_Q_KEY
init|=
literal|1
operator|<<
literal|5
block|,
name|MLX4_QP_OPTPAR_RNR_TIMEOUT
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX4_QP_OPTPAR_PRIMARY_ADDR_PATH
init|=
literal|1
operator|<<
literal|7
block|,
name|MLX4_QP_OPTPAR_SRA_MAX
init|=
literal|1
operator|<<
literal|8
block|,
name|MLX4_QP_OPTPAR_RRA_MAX
init|=
literal|1
operator|<<
literal|9
block|,
name|MLX4_QP_OPTPAR_PM_STATE
init|=
literal|1
operator|<<
literal|10
block|,
name|MLX4_QP_OPTPAR_RETRY_COUNT
init|=
literal|1
operator|<<
literal|12
block|,
name|MLX4_QP_OPTPAR_RNR_RETRY
init|=
literal|1
operator|<<
literal|13
block|,
name|MLX4_QP_OPTPAR_ACK_TIMEOUT
init|=
literal|1
operator|<<
literal|14
block|,
name|MLX4_QP_OPTPAR_SCHED_QUEUE
init|=
literal|1
operator|<<
literal|16
block|,
name|MLX4_QP_OPTPAR_COUNTER_INDEX
init|=
literal|1
operator|<<
literal|20
block|}
enum|;
end_enum

begin_enum
enum|enum
name|mlx4_qp_state
block|{
name|MLX4_QP_STATE_RST
init|=
literal|0
block|,
name|MLX4_QP_STATE_INIT
init|=
literal|1
block|,
name|MLX4_QP_STATE_RTR
init|=
literal|2
block|,
name|MLX4_QP_STATE_RTS
init|=
literal|3
block|,
name|MLX4_QP_STATE_SQER
init|=
literal|4
block|,
name|MLX4_QP_STATE_SQD
init|=
literal|5
block|,
name|MLX4_QP_STATE_ERR
init|=
literal|6
block|,
name|MLX4_QP_STATE_SQ_DRAINING
init|=
literal|7
block|,
name|MLX4_QP_NUM_STATE
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_QP_ST_RC
init|=
literal|0x0
block|,
name|MLX4_QP_ST_UC
init|=
literal|0x1
block|,
name|MLX4_QP_ST_RD
init|=
literal|0x2
block|,
name|MLX4_QP_ST_UD
init|=
literal|0x3
block|,
name|MLX4_QP_ST_XRC
init|=
literal|0x6
block|,
name|MLX4_QP_ST_MLX
init|=
literal|0x7
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MLX4_QP_PM_MIGRATED
init|=
literal|0x3
block|,
name|MLX4_QP_PM_ARMED
init|=
literal|0x0
block|,
name|MLX4_QP_PM_REARM
init|=
literal|0x1
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
comment|/* params1 */
name|MLX4_QP_BIT_SRE
init|=
literal|1
operator|<<
literal|15
block|,
name|MLX4_QP_BIT_SWE
init|=
literal|1
operator|<<
literal|14
block|,
name|MLX4_QP_BIT_SAE
init|=
literal|1
operator|<<
literal|13
block|,
comment|/* params2 */
name|MLX4_QP_BIT_RRE
init|=
literal|1
operator|<<
literal|15
block|,
name|MLX4_QP_BIT_RWE
init|=
literal|1
operator|<<
literal|14
block|,
name|MLX4_QP_BIT_RAE
init|=
literal|1
operator|<<
literal|13
block|,
name|MLX4_QP_BIT_RIC
init|=
literal|1
operator|<<
literal|4
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_qp_path
block|{
name|u8
name|fl
decl_stmt|;
name|u8
name|reserved1
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|pkey_index
decl_stmt|;
name|u8
name|counter_index
decl_stmt|;
name|u8
name|grh_mylmc
decl_stmt|;
name|__be16
name|rlid
decl_stmt|;
name|u8
name|ackto
decl_stmt|;
name|u8
name|mgid_index
decl_stmt|;
name|u8
name|static_rate
decl_stmt|;
name|u8
name|hop_limit
decl_stmt|;
name|__be32
name|tclass_flowlabel
decl_stmt|;
name|u8
name|rgid
index|[
literal|16
index|]
decl_stmt|;
name|u8
name|sched_queue
decl_stmt|;
name|u8
name|vlan_index
decl_stmt|;
name|u8
name|reserved3
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|reserved4
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|dmac
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_qp_context
block|{
name|__be32
name|flags
decl_stmt|;
name|__be32
name|pd
decl_stmt|;
name|u8
name|mtu_msgmax
decl_stmt|;
name|u8
name|rq_size_stride
decl_stmt|;
name|u8
name|sq_size_stride
decl_stmt|;
name|u8
name|rlkey
decl_stmt|;
name|__be32
name|usr_page
decl_stmt|;
name|__be32
name|local_qpn
decl_stmt|;
name|__be32
name|remote_qpn
decl_stmt|;
name|struct
name|mlx4_qp_path
name|pri_path
decl_stmt|;
name|struct
name|mlx4_qp_path
name|alt_path
decl_stmt|;
name|__be32
name|params1
decl_stmt|;
name|u32
name|reserved1
decl_stmt|;
name|__be32
name|next_send_psn
decl_stmt|;
name|__be32
name|cqn_send
decl_stmt|;
name|u32
name|reserved2
index|[
literal|2
index|]
decl_stmt|;
name|__be32
name|last_acked_psn
decl_stmt|;
name|__be32
name|ssn
decl_stmt|;
name|__be32
name|params2
decl_stmt|;
name|__be32
name|rnr_nextrecvpsn
decl_stmt|;
name|__be32
name|xrcd
decl_stmt|;
name|__be32
name|cqn_recv
decl_stmt|;
name|__be64
name|db_rec_addr
decl_stmt|;
name|__be32
name|qkey
decl_stmt|;
name|__be32
name|srqn
decl_stmt|;
name|__be32
name|msn
decl_stmt|;
name|__be16
name|rq_wqe_counter
decl_stmt|;
name|__be16
name|sq_wqe_counter
decl_stmt|;
name|u32
name|reserved3
index|[
literal|2
index|]
decl_stmt|;
name|__be32
name|param3
decl_stmt|;
name|__be32
name|nummmcpeers_basemkey
decl_stmt|;
name|u8
name|log_page_size
decl_stmt|;
name|u8
name|reserved4
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|mtt_base_addr_h
decl_stmt|;
name|__be32
name|mtt_base_addr_l
decl_stmt|;
name|u8
name|VE
decl_stmt|;
name|u8
name|reserved5
decl_stmt|;
name|__be16
name|VFT_id_prio
decl_stmt|;
name|u8
name|reserved6
decl_stmt|;
name|u8
name|exch_size
decl_stmt|;
name|__be16
name|exch_base
decl_stmt|;
name|u8
name|VFT_hop_cnt
decl_stmt|;
name|u8
name|my_fc_id_idx
decl_stmt|;
name|__be16
name|reserved7
decl_stmt|;
name|u32
name|reserved8
index|[
literal|7
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Which firmware version adds support for NEC (NoErrorCompletion) bit */
end_comment

begin_define
define|#
directive|define
name|MLX4_FW_VER_WQE_CTRL_NEC
value|mlx4_fw_ver(2, 2, 232)
end_define

begin_enum
enum|enum
block|{
name|MLX4_WQE_CTRL_NEC
init|=
literal|1
operator|<<
literal|29
block|,
name|MLX4_WQE_CTRL_FENCE
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX4_WQE_CTRL_CQ_UPDATE
init|=
literal|3
operator|<<
literal|2
block|,
name|MLX4_WQE_CTRL_SOLICITED
init|=
literal|1
operator|<<
literal|1
block|,
name|MLX4_WQE_CTRL_IP_CSUM
init|=
literal|1
operator|<<
literal|4
block|,
name|MLX4_WQE_CTRL_TCP_UDP_CSUM
init|=
literal|1
operator|<<
literal|5
block|,
name|MLX4_WQE_CTRL_INS_VLAN
init|=
literal|1
operator|<<
literal|6
block|,
name|MLX4_WQE_CTRL_STRONG_ORDER
init|=
literal|1
operator|<<
literal|7
block|,
name|MLX4_WQE_CTRL_FORCE_LOOPBACK
init|=
literal|1
operator|<<
literal|0
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_wqe_ctrl_seg
block|{
name|__be32
name|owner_opcode
decl_stmt|;
name|__be16
name|vlan_tag
decl_stmt|;
name|u8
name|ins_vlan
decl_stmt|;
name|u8
name|fence_size
decl_stmt|;
comment|/* 	 * High 24 bits are SRC remote buffer; low 8 bits are flags: 	 * [7]   SO (strong ordering) 	 * [5]   TCP/UDP checksum 	 * [4]   IP checksum 	 * [3:2] C (generate completion queue entry) 	 * [1]   SE (solicited event) 	 */
name|__be32
name|srcrb_flags
decl_stmt|;
comment|/* 	 * imm is immediate data for send/RDMA write w/ immediate; 	 * also invalidation key for send with invalidate; input 	 * modifier for WQEs on CCQs. 	 */
name|__be32
name|imm
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX4_WQE_MLX_VL15
init|=
literal|1
operator|<<
literal|17
block|,
name|MLX4_WQE_MLX_SLR
init|=
literal|1
operator|<<
literal|16
block|,
name|MLX4_WQE_MLX_ICRC
init|=
literal|1
operator|<<
literal|4
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_wqe_mlx_seg
block|{
name|u8
name|owner
decl_stmt|;
name|u8
name|reserved1
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|opcode
decl_stmt|;
name|u8
name|reserved2
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|size
decl_stmt|;
comment|/* 	 * [17]    VL15 	 * [16]    SLR 	 * [15:12] static rate 	 * [11:8]  SL 	 * [4]     ICRC 	 * [3:2]   C 	 * [0]     FL (force loopback) 	 */
name|__be32
name|flags
decl_stmt|;
name|__be16
name|rlid
decl_stmt|;
name|u16
name|reserved3
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_wqe_datagram_seg
block|{
name|__be32
name|av
index|[
literal|8
index|]
decl_stmt|;
name|__be32
name|dqpn
decl_stmt|;
name|__be32
name|qkey
decl_stmt|;
name|__be16
name|vlan
decl_stmt|;
name|u8
name|mac
index|[
literal|6
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_wqe_lso_seg
block|{
name|__be32
name|mss_hdr_size
decl_stmt|;
name|__be32
name|header
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_wqe_bind_seg
block|{
name|__be32
name|flags1
decl_stmt|;
name|__be32
name|flags2
decl_stmt|;
name|__be32
name|new_rkey
decl_stmt|;
name|__be32
name|lkey
decl_stmt|;
name|__be64
name|addr
decl_stmt|;
name|__be64
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX4_WQE_FMR_PERM_LOCAL_READ
init|=
literal|1
operator|<<
literal|27
block|,
name|MLX4_WQE_FMR_PERM_LOCAL_WRITE
init|=
literal|1
operator|<<
literal|28
block|,
name|MLX4_WQE_FMR_PERM_REMOTE_READ
init|=
literal|1
operator|<<
literal|29
block|,
name|MLX4_WQE_FMR_PERM_REMOTE_WRITE
init|=
literal|1
operator|<<
literal|30
block|,
name|MLX4_WQE_FMR_PERM_ATOMIC
init|=
literal|1
operator|<<
literal|31
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_wqe_fmr_seg
block|{
name|__be32
name|flags
decl_stmt|;
name|__be32
name|mem_key
decl_stmt|;
name|__be64
name|buf_list
decl_stmt|;
name|__be64
name|start_addr
decl_stmt|;
name|__be64
name|reg_len
decl_stmt|;
name|__be32
name|offset
decl_stmt|;
name|__be32
name|page_size
decl_stmt|;
name|u32
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_wqe_fmr_ext_seg
block|{
name|u8
name|flags
decl_stmt|;
name|u8
name|reserved
decl_stmt|;
name|__be16
name|app_mask
decl_stmt|;
name|__be16
name|wire_app_tag
decl_stmt|;
name|__be16
name|mem_app_tag
decl_stmt|;
name|__be32
name|wire_ref_tag_base
decl_stmt|;
name|__be32
name|mem_ref_tag_base
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_wqe_local_inval_seg
block|{
name|__be32
name|flags
decl_stmt|;
name|u32
name|reserved1
decl_stmt|;
name|__be32
name|mem_key
decl_stmt|;
name|u32
name|reserved2
index|[
literal|2
index|]
decl_stmt|;
name|__be32
name|guest_id
decl_stmt|;
name|__be64
name|pa
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_wqe_raddr_seg
block|{
name|__be64
name|raddr
decl_stmt|;
name|__be32
name|rkey
decl_stmt|;
name|u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_wqe_atomic_seg
block|{
name|__be64
name|swap_add
decl_stmt|;
name|__be64
name|compare
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_wqe_masked_atomic_seg
block|{
name|__be64
name|swap_add
decl_stmt|;
name|__be64
name|compare
decl_stmt|;
name|__be64
name|swap_add_mask
decl_stmt|;
name|__be64
name|compare_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_wqe_data_seg
block|{
name|__be32
name|byte_count
decl_stmt|;
name|__be32
name|lkey
decl_stmt|;
name|__be64
name|addr
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX4_INLINE_ALIGN
init|=
literal|64
block|,
name|MLX4_INLINE_SEG
init|=
literal|1
operator|<<
literal|31
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_wqe_inline_seg
block|{
name|__be32
name|byte_count
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|mlx4_qp_modify
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|,
name|enum
name|mlx4_qp_state
name|cur_state
parameter_list|,
name|enum
name|mlx4_qp_state
name|new_state
parameter_list|,
name|struct
name|mlx4_qp_context
modifier|*
name|context
parameter_list|,
name|enum
name|mlx4_qp_optpar
name|optpar
parameter_list|,
name|int
name|sqd_event
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_qp_query
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|mlx4_qp_context
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_qp_to_ready
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_mtt
modifier|*
name|mtt
parameter_list|,
name|struct
name|mlx4_qp_context
modifier|*
name|context
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|,
name|enum
name|mlx4_qp_state
modifier|*
name|qp_state
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|struct
name|mlx4_qp
modifier|*
name|__mlx4_qp_lookup
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|qpn
parameter_list|)
block|{
return|return
name|radix_tree_lookup
argument_list|(
operator|&
name|dev
operator|->
name|qp_table_tree
argument_list|,
name|qpn
operator|&
operator|(
name|dev
operator|->
name|caps
operator|.
name|num_qps
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|struct
name|mlx4_qp
modifier|*
name|mlx4_qp_lookup_lock
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|u32
name|qpn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_qp_remove
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|struct
name|mlx4_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_qp_get_region
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|mlx4_qp_region
name|region
parameter_list|,
name|int
modifier|*
name|base_qpn
parameter_list|,
name|int
modifier|*
name|cnt
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX4_QP_H */
end_comment

end_unit

