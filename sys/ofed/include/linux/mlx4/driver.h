begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2006 Cisco Systems, Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MLX4_DRIVER_H
end_ifndef

begin_define
define|#
directive|define
name|MLX4_DRIVER_H
end_define

begin_include
include|#
directive|include
file|<linux/mlx4/device.h>
end_include

begin_struct_decl
struct_decl|struct
name|mlx4_dev
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|MLX4_MAC_MASK
value|0xffffffffffffULL
end_define

begin_define
define|#
directive|define
name|MLX4_BE_SHORT_MASK
value|cpu_to_be16(0xffff)
end_define

begin_define
define|#
directive|define
name|MLX4_BE_WORD_MASK
value|cpu_to_be32(0xffffffff)
end_define

begin_enum
enum|enum
name|mlx4_dev_event
block|{
name|MLX4_DEV_EVENT_CATASTROPHIC_ERROR
block|,
name|MLX4_DEV_EVENT_PORT_UP
block|,
name|MLX4_DEV_EVENT_PORT_DOWN
block|,
name|MLX4_DEV_EVENT_PORT_REINIT
block|,
name|MLX4_DEV_EVENT_PORT_MGMT_CHANGE
block|,
name|MLX4_DEV_EVENT_SLAVE_INIT
block|,
name|MLX4_DEV_EVENT_SLAVE_SHUTDOWN
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_interface
block|{
name|void
modifier|*
function_decl|(
modifier|*
name|add
function_decl|)
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|remove
function_decl|)
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|event
function_decl|)
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|enum
name|mlx4_dev_event
name|event
parameter_list|,
name|unsigned
name|long
name|param
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|get_dev
function_decl|)
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|context
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
name|struct
name|list_head
name|list
decl_stmt|;
name|enum
name|mlx4_protocol
name|protocol
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
block|{
name|MLX4_MAX_DEVICES
init|=
literal|32
block|,
name|MLX4_DEVS_TBL_SIZE
init|=
name|MLX4_MAX_DEVICES
operator|+
literal|1
block|,
name|MLX4_DBDF2VAL_STR_SIZE
init|=
literal|512
block|,
name|MLX4_STR_NAME_SIZE
init|=
literal|64
block|,
name|MLX4_MAX_BDF_VALS
init|=
literal|2
block|,
name|MLX4_ENDOF_TBL
init|=
operator|-
literal|1LL
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mlx4_dbdf2val
block|{
name|u64
name|dbdf
decl_stmt|;
name|int
name|val
index|[
name|MLX4_MAX_BDF_VALS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mlx4_range
block|{
name|int
name|min
decl_stmt|;
name|int
name|max
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * mlx4_dbdf2val_lst struct holds all the data needed to convert  * dbdf-to-value-list string into dbdf-to-value table.  * dbdf-to-value-list string is a comma separated list of dbdf-to-value strings.  * the format of dbdf-to-value string is: "[mmmm:]bb:dd.f-v1[;v2]"  * mmmm - Domain number (optional)  * bb - Bus number  * dd - device number  * f  - Function number  * v1 - First value related to the domain-bus-device-function.  * v2 - Second value related to the domain-bus-device-function (optional).  * bb, dd - Two hexadecimal digits without preceding 0x.  * mmmm - Four hexadecimal digits without preceding 0x.  * f  - One hexadecimal without preceding 0x.  * v1,v2 - Number with normal convention (e.g 100, 0xd3).  * dbdf-to-value-list string format:  *     "[mmmm:]bb:dd.f-v1[;v2],[mmmm:]bb:dd.f-v1[;v2],..."  *  */
end_comment

begin_struct
struct|struct
name|mlx4_dbdf2val_lst
block|{
name|char
name|name
index|[
name|MLX4_STR_NAME_SIZE
index|]
decl_stmt|;
comment|/* String name */
name|char
name|str
index|[
name|MLX4_DBDF2VAL_STR_SIZE
index|]
decl_stmt|;
comment|/* dbdf2val list str */
name|struct
name|mlx4_dbdf2val
name|tbl
index|[
name|MLX4_DEVS_TBL_SIZE
index|]
decl_stmt|;
comment|/* dbdf to value table */
name|int
name|num_vals
decl_stmt|;
comment|/* # of vals per dbdf */
name|int
name|def_val
index|[
name|MLX4_MAX_BDF_VALS
index|]
decl_stmt|;
comment|/* Default values */
name|struct
name|mlx4_range
name|range
decl_stmt|;
comment|/* Valid values range */
block|}
struct|;
end_struct

begin_function_decl
name|int
name|mlx4_fill_dbdf2val_tbl
parameter_list|(
name|struct
name|mlx4_dbdf2val_lst
modifier|*
name|dbdf2val_lst
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_get_val
parameter_list|(
name|struct
name|mlx4_dbdf2val
modifier|*
name|tbl
parameter_list|,
name|struct
name|pci_dev
modifier|*
name|pdev
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mlx4_register_interface
parameter_list|(
name|struct
name|mlx4_interface
modifier|*
name|intf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mlx4_unregister_interface
parameter_list|(
name|struct
name|mlx4_interface
modifier|*
name|intf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mlx4_get_protocol_dev
parameter_list|(
name|struct
name|mlx4_dev
modifier|*
name|dev
parameter_list|,
name|enum
name|mlx4_protocol
name|proto
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|ETH_ALEN
end_ifndef

begin_define
define|#
directive|define
name|ETH_ALEN
value|6
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|u64
name|mlx4_mac_to_u64
parameter_list|(
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
name|u64
name|mac
init|=
literal|0
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ETH_ALEN
condition|;
name|i
operator|++
control|)
block|{
name|mac
operator|<<=
literal|8
expr_stmt|;
name|mac
operator||=
name|addr
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|mac
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MLX4_DRIVER_H */
end_comment

end_unit

