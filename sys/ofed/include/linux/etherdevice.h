begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007 Cisco Systems, Inc.  All rights reserved.  * Copyright (c) 2014 Mellanox Technologies, Ltd. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *	- Redistributions of source code must retain the above  *	  copyright notice, this list of conditions and the following  *	  disclaimer.  *  *	- Redistributions in binary form must reproduce the above  *	  copyright notice, this list of conditions and the following  *	  disclaimer in the documentation and/or other materials  *	  provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_ETHERDEVICE
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_ETHERDEVICE
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/random.h>
end_include

begin_include
include|#
directive|include
file|<sys/libkern.h>
end_include

begin_define
define|#
directive|define
name|ETH_MODULE_SFF_8079
value|1
end_define

begin_define
define|#
directive|define
name|ETH_MODULE_SFF_8079_LEN
value|256
end_define

begin_define
define|#
directive|define
name|ETH_MODULE_SFF_8472
value|2
end_define

begin_define
define|#
directive|define
name|ETH_MODULE_SFF_8472_LEN
value|512
end_define

begin_define
define|#
directive|define
name|ETH_MODULE_SFF_8636
value|3
end_define

begin_define
define|#
directive|define
name|ETH_MODULE_SFF_8636_LEN
value|256
end_define

begin_define
define|#
directive|define
name|ETH_MODULE_SFF_8436
value|4
end_define

begin_define
define|#
directive|define
name|ETH_MODULE_SFF_8436_LEN
value|256
end_define

begin_struct
struct|struct
name|ethtool_eeprom
block|{
name|u32
name|offset
decl_stmt|;
name|u32
name|len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ethtool_modinfo
block|{
name|u32
name|type
decl_stmt|;
name|u32
name|eeprom_len
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * is_zero_ether_addr - Determine if give Ethernet address is all zeros.  * @addr: Pointer to a six-byte array containing the Ethernet address  *  * Return true if the address is all zeroes.  */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|is_zero_ether_addr
parameter_list|(
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
return|return
operator|!
operator|(
name|addr
index|[
literal|0
index|]
operator||
name|addr
index|[
literal|1
index|]
operator||
name|addr
index|[
literal|2
index|]
operator||
name|addr
index|[
literal|3
index|]
operator||
name|addr
index|[
literal|4
index|]
operator||
name|addr
index|[
literal|5
index|]
operator|)
return|;
block|}
end_function

begin_comment
comment|/**  * is_multicast_ether_addr - Determine if the Ethernet address is a multicast.  * @addr: Pointer to a six-byte array containing the Ethernet address  *  * Return true if the address is a multicast address.  * By definition the broadcast address is also a multicast address.  */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|is_multicast_ether_addr
parameter_list|(
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
return|return
operator|(
literal|0x01
operator|&
name|addr
index|[
literal|0
index|]
operator|)
return|;
block|}
end_function

begin_comment
comment|/**  * is_broadcast_ether_addr - Determine if the Ethernet address is broadcast  * @addr: Pointer to a six-byte array containing the Ethernet address  *  * Return true if the address is the broadcast address.  */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|is_broadcast_ether_addr
parameter_list|(
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
return|return
operator|(
name|addr
index|[
literal|0
index|]
operator|&
name|addr
index|[
literal|1
index|]
operator|&
name|addr
index|[
literal|2
index|]
operator|&
name|addr
index|[
literal|3
index|]
operator|&
name|addr
index|[
literal|4
index|]
operator|&
name|addr
index|[
literal|5
index|]
operator|)
operator|==
literal|0xff
return|;
block|}
end_function

begin_comment
comment|/**  * is_valid_ether_addr - Determine if the given Ethernet address is valid  * @addr: Pointer to a six-byte array containing the Ethernet address  *  * Check that the Ethernet address (MAC) is not 00:00:00:00:00:00, is not  * a multicast address, and is not FF:FF:FF:FF:FF:FF.  *  * Return true if the address is valid.  **/
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|is_valid_ether_addr
parameter_list|(
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
comment|/* FF:FF:FF:FF:FF:FF is a multicast address so we don't need to         ** explicitly check for it here. */
return|return
operator|!
name|is_multicast_ether_addr
argument_list|(
name|addr
argument_list|)
operator|&&
operator|!
name|is_zero_ether_addr
argument_list|(
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ether_addr_copy
parameter_list|(
name|u8
modifier|*
name|dst
parameter_list|,
specifier|const
name|u8
modifier|*
name|src
parameter_list|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|ether_addr_equal
parameter_list|(
specifier|const
name|u8
modifier|*
name|pa
parameter_list|,
specifier|const
name|u8
modifier|*
name|pb
parameter_list|)
block|{
return|return
operator|(
name|memcmp
argument_list|(
name|pa
argument_list|,
name|pb
argument_list|,
literal|6
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|ether_addr_equal_64bits
parameter_list|(
specifier|const
name|u8
modifier|*
name|pa
parameter_list|,
specifier|const
name|u8
modifier|*
name|pb
parameter_list|)
block|{
return|return
operator|(
name|memcmp
argument_list|(
name|pa
argument_list|,
name|pb
argument_list|,
literal|6
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|eth_broadcast_addr
parameter_list|(
name|u8
modifier|*
name|pa
parameter_list|)
block|{
name|memset
argument_list|(
name|pa
argument_list|,
literal|0xff
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|random_ether_addr
parameter_list|(
name|u8
modifier|*
name|dst
parameter_list|)
block|{
name|read_random
argument_list|(
name|dst
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|dst
index|[
literal|0
index|]
operator|&=
literal|0xfe
expr_stmt|;
name|dst
index|[
literal|0
index|]
operator||=
literal|0x02
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_ETHERDEVICE */
end_comment

end_unit

