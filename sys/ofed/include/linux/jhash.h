begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_JHASH_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_JHASH_H_
end_define

begin_comment
comment|/* jhash.h: Jenkins hash support.  *  * Copyright (C) 1996 Bob Jenkins (bob_jenkins@burtleburtle.net)  *  * http://burtleburtle.net/bob/hash/  *  * These are the credits from Bob's sources:  *  * lookup2.c, by Bob Jenkins, December 1996, Public Domain.  * hash(), hash2(), hash3, and mix() are externally useful functions.  * Routines to test the hash are included if SELF_TEST is defined.  * You can use this free for any purpose.  It has no warranty.  *  * Copyright (C) 2003 David S. Miller (davem@redhat.com)  *  * I've modified Bob's hash to be useful in the Linux kernel, and  * any bugs present are surely my fault.  -DaveM  */
end_comment

begin_comment
comment|/* NOTE: Arguments are modified. */
end_comment

begin_define
define|#
directive|define
name|__jhash_mix
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|{ \   a -= b; a -= c; a ^= (c>>13); \   b -= c; b -= a; b ^= (a<<8); \   c -= a; c -= b; c ^= (b>>13); \   a -= b; a -= c; a ^= (c>>12);  \   b -= c; b -= a; b ^= (a<<16); \   c -= a; c -= b; c ^= (b>>5); \   a -= b; a -= c; a ^= (c>>3);  \   b -= c; b -= a; b ^= (a<<10); \   c -= a; c -= b; c ^= (b>>15); \ }
end_define

begin_comment
comment|/* The golden ration: an arbitrary value */
end_comment

begin_define
define|#
directive|define
name|JHASH_GOLDEN_RATIO
value|0x9e3779b9
end_define

begin_comment
comment|/* The most generic version, hashes an arbitrary sequence  * of bytes.  No alignment or length assumptions are made about  * the input key.  */
end_comment

begin_function
specifier|static
specifier|inline
name|u32
name|jhash
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|u32
name|length
parameter_list|,
name|u32
name|initval
parameter_list|)
block|{
name|u32
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|len
decl_stmt|;
specifier|const
name|u8
modifier|*
name|k
init|=
name|key
decl_stmt|;
name|len
operator|=
name|length
expr_stmt|;
name|a
operator|=
name|b
operator|=
name|JHASH_GOLDEN_RATIO
expr_stmt|;
name|c
operator|=
name|initval
expr_stmt|;
while|while
condition|(
name|len
operator|>=
literal|12
condition|)
block|{
name|a
operator|+=
operator|(
name|k
index|[
literal|0
index|]
operator|+
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|3
index|]
operator|<<
literal|24
operator|)
operator|)
expr_stmt|;
name|b
operator|+=
operator|(
name|k
index|[
literal|4
index|]
operator|+
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|5
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|6
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|7
index|]
operator|<<
literal|24
operator|)
operator|)
expr_stmt|;
name|c
operator|+=
operator|(
name|k
index|[
literal|8
index|]
operator|+
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|9
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|10
index|]
operator|<<
literal|16
operator|)
operator|+
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|11
index|]
operator|<<
literal|24
operator|)
operator|)
expr_stmt|;
name|__jhash_mix
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|k
operator|+=
literal|12
expr_stmt|;
name|len
operator|-=
literal|12
expr_stmt|;
block|}
name|c
operator|+=
name|length
expr_stmt|;
switch|switch
condition|(
name|len
condition|)
block|{
case|case
literal|11
case|:
name|c
operator|+=
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|10
index|]
operator|<<
literal|24
operator|)
expr_stmt|;
case|case
literal|10
case|:
name|c
operator|+=
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|9
index|]
operator|<<
literal|16
operator|)
expr_stmt|;
case|case
literal|9
case|:
name|c
operator|+=
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|8
index|]
operator|<<
literal|8
operator|)
expr_stmt|;
case|case
literal|8
case|:
name|b
operator|+=
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|7
index|]
operator|<<
literal|24
operator|)
expr_stmt|;
case|case
literal|7
case|:
name|b
operator|+=
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|6
index|]
operator|<<
literal|16
operator|)
expr_stmt|;
case|case
literal|6
case|:
name|b
operator|+=
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|5
index|]
operator|<<
literal|8
operator|)
expr_stmt|;
case|case
literal|5
case|:
name|b
operator|+=
name|k
index|[
literal|4
index|]
expr_stmt|;
case|case
literal|4
case|:
name|a
operator|+=
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|3
index|]
operator|<<
literal|24
operator|)
expr_stmt|;
case|case
literal|3
case|:
name|a
operator|+=
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
expr_stmt|;
case|case
literal|2
case|:
name|a
operator|+=
operator|(
operator|(
name|u32
operator|)
name|k
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
expr_stmt|;
case|case
literal|1
case|:
name|a
operator|+=
name|k
index|[
literal|0
index|]
expr_stmt|;
block|}
empty_stmt|;
name|__jhash_mix
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
end_function

begin_comment
comment|/* A special optimized version that handles 1 or more of u32s.  * The length parameter here is the number of u32s in the key.  */
end_comment

begin_function
specifier|static
specifier|inline
name|u32
name|jhash2
parameter_list|(
specifier|const
name|u32
modifier|*
name|k
parameter_list|,
name|u32
name|length
parameter_list|,
name|u32
name|initval
parameter_list|)
block|{
name|u32
name|a
decl_stmt|,
name|b
decl_stmt|,
name|c
decl_stmt|,
name|len
decl_stmt|;
name|a
operator|=
name|b
operator|=
name|JHASH_GOLDEN_RATIO
expr_stmt|;
name|c
operator|=
name|initval
expr_stmt|;
name|len
operator|=
name|length
expr_stmt|;
while|while
condition|(
name|len
operator|>=
literal|3
condition|)
block|{
name|a
operator|+=
name|k
index|[
literal|0
index|]
expr_stmt|;
name|b
operator|+=
name|k
index|[
literal|1
index|]
expr_stmt|;
name|c
operator|+=
name|k
index|[
literal|2
index|]
expr_stmt|;
name|__jhash_mix
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|k
operator|+=
literal|3
expr_stmt|;
name|len
operator|-=
literal|3
expr_stmt|;
block|}
name|c
operator|+=
name|length
operator|*
literal|4
expr_stmt|;
switch|switch
condition|(
name|len
condition|)
block|{
case|case
literal|2
case|:
name|b
operator|+=
name|k
index|[
literal|1
index|]
expr_stmt|;
case|case
literal|1
case|:
name|a
operator|+=
name|k
index|[
literal|0
index|]
expr_stmt|;
block|}
empty_stmt|;
name|__jhash_mix
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
end_function

begin_comment
comment|/* A special ultra-optimized versions that knows they are hashing exactly  * 3, 2 or 1 word(s).  *  * NOTE: In partilar the "c += length; __jhash_mix(a,b,c);" normally  *       done at the end is not done here.  */
end_comment

begin_function
specifier|static
specifier|inline
name|u32
name|jhash_3words
parameter_list|(
name|u32
name|a
parameter_list|,
name|u32
name|b
parameter_list|,
name|u32
name|c
parameter_list|,
name|u32
name|initval
parameter_list|)
block|{
name|a
operator|+=
name|JHASH_GOLDEN_RATIO
expr_stmt|;
name|b
operator|+=
name|JHASH_GOLDEN_RATIO
expr_stmt|;
name|c
operator|+=
name|initval
expr_stmt|;
name|__jhash_mix
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|jhash_2words
parameter_list|(
name|u32
name|a
parameter_list|,
name|u32
name|b
parameter_list|,
name|u32
name|initval
parameter_list|)
block|{
return|return
name|jhash_3words
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|initval
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u32
name|jhash_1word
parameter_list|(
name|u32
name|a
parameter_list|,
name|u32
name|initval
parameter_list|)
block|{
return|return
name|jhash_3words
argument_list|(
name|a
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|initval
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_JHASH_H_ */
end_comment

end_unit

