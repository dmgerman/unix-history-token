begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_MODULEPARAM_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_MODULEPARAM_H_
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_comment
comment|/*  * These are presently not hooked up to anything.  In linux the parameters  * can be set when modules are loaded.  On FreeBSD these could be mapped  * to kenv in the future.  */
end_comment

begin_struct_decl
struct_decl|struct
name|kernel_param
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|param_set_fn
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|param_get_fn
function_decl|)
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|kernel_param
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|u16
name|perm
decl_stmt|;
name|u16
name|flags
decl_stmt|;
name|param_set_fn
name|set
decl_stmt|;
name|param_get_fn
name|get
decl_stmt|;
union|union
block|{
name|void
modifier|*
name|arg
decl_stmt|;
name|struct
name|kparam_string
modifier|*
name|str
decl_stmt|;
name|struct
name|kparam_array
modifier|*
name|arr
decl_stmt|;
block|}
name|un
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|KPARAM_ISBOOL
value|2
end_define

begin_struct
struct|struct
name|kparam_string
block|{
name|unsigned
name|int
name|maxlen
decl_stmt|;
name|char
modifier|*
name|string
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|kparam_array
block|{
name|unsigned
name|int
name|max
decl_stmt|;
name|unsigned
name|int
modifier|*
name|num
decl_stmt|;
name|param_set_fn
name|set
decl_stmt|;
name|param_get_fn
name|get
decl_stmt|;
name|unsigned
name|int
name|elemsize
decl_stmt|;
name|void
modifier|*
name|elem
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|void
name|param_sysinit
parameter_list|(
name|struct
name|kernel_param
modifier|*
name|param
parameter_list|)
block|{ }
end_function

begin_define
define|#
directive|define
name|module_param_call
parameter_list|(
name|name
parameter_list|,
name|set
parameter_list|,
name|get
parameter_list|,
name|arg
parameter_list|,
name|perm
parameter_list|)
define|\
value|static struct kernel_param __param_##name =			\ 	    { #name, perm, 0, set, get, { arg } };			\ 	SYSINIT(name##_param_sysinit, SI_SUB_DRIVERS, SI_ORDER_FIRST,	\ 	    param_sysinit,&__param_##name);
end_define

begin_define
define|#
directive|define
name|module_param_string
parameter_list|(
name|name
parameter_list|,
name|string
parameter_list|,
name|len
parameter_list|,
name|perm
parameter_list|)
end_define

begin_define
define|#
directive|define
name|module_param_named
parameter_list|(
name|name
parameter_list|,
name|var
parameter_list|,
name|type
parameter_list|,
name|mode
parameter_list|)
define|\
value|module_param_call(name, param_set_##type, param_get_##type,&var, mode)
end_define

begin_define
define|#
directive|define
name|module_param
parameter_list|(
name|var
parameter_list|,
name|type
parameter_list|,
name|mode
parameter_list|)
define|\
value|module_param_named(var, var, type, mode)
end_define

begin_define
define|#
directive|define
name|module_param_array
parameter_list|(
name|var
parameter_list|,
name|type
parameter_list|,
name|addr_argc
parameter_list|,
name|mode
parameter_list|)
define|\
value|module_param_named(var, var, type, mode)
end_define

begin_define
define|#
directive|define
name|MODULE_PARM_DESC
parameter_list|(
name|name
parameter_list|,
name|desc
parameter_list|)
end_define

begin_function
specifier|static
specifier|inline
name|int
name|param_set_byte
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_get_byte
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_set_short
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_get_short
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_set_ushort
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_get_ushort
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_set_int
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_get_int
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_set_uint
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_get_uint
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_set_long
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_get_long
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_set_ulong
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_get_ulong
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_set_charp
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_get_charp
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_set_bool
parameter_list|(
specifier|const
name|char
modifier|*
name|val
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|param_get_bool
parameter_list|(
name|char
modifier|*
name|buffer
parameter_list|,
name|struct
name|kernel_param
modifier|*
name|kp
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_MODULEPARAM_H_ */
end_comment

end_unit

