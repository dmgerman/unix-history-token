begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_IO_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_IO_H_
end_define

begin_include
include|#
directive|include
file|<machine/vm.h>
end_include

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_function
specifier|static
specifier|inline
name|uint32_t
name|__raw_readl
parameter_list|(
specifier|const
specifier|volatile
name|void
modifier|*
name|addr
parameter_list|)
block|{
return|return
operator|*
operator|(
specifier|const
specifier|volatile
name|uint32_t
operator|*
operator|)
name|addr
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|__raw_writel
parameter_list|(
name|uint32_t
name|b
parameter_list|,
specifier|volatile
name|void
modifier|*
name|addr
parameter_list|)
block|{
operator|*
operator|(
specifier|volatile
name|uint32_t
operator|*
operator|)
name|addr
operator|=
name|b
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|__raw_readq
parameter_list|(
specifier|const
specifier|volatile
name|void
modifier|*
name|addr
parameter_list|)
block|{
return|return
operator|*
operator|(
specifier|const
specifier|volatile
name|uint64_t
operator|*
operator|)
name|addr
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|__raw_writeq
parameter_list|(
name|uint64_t
name|b
parameter_list|,
specifier|volatile
name|void
modifier|*
name|addr
parameter_list|)
block|{
operator|*
operator|(
specifier|volatile
name|uint64_t
operator|*
operator|)
name|addr
operator|=
name|b
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * XXX This is all x86 specific.  It should be bus space access.  */
end_comment

begin_define
define|#
directive|define
name|mmiowb
parameter_list|()
end_define

begin_undef
undef|#
directive|undef
name|writel
end_undef

begin_function
specifier|static
specifier|inline
name|void
name|writel
parameter_list|(
name|uint32_t
name|b
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
operator|*
operator|(
specifier|volatile
name|uint32_t
operator|*
operator|)
name|addr
operator|=
name|b
expr_stmt|;
block|}
end_function

begin_undef
undef|#
directive|undef
name|writeq
end_undef

begin_function
specifier|static
specifier|inline
name|void
name|writeq
parameter_list|(
name|uint64_t
name|b
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
operator|*
operator|(
specifier|volatile
name|uint64_t
operator|*
operator|)
name|addr
operator|=
name|b
expr_stmt|;
block|}
end_function

begin_undef
undef|#
directive|undef
name|writeb
end_undef

begin_function
specifier|static
specifier|inline
name|void
name|writeb
parameter_list|(
name|uint8_t
name|b
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
operator|*
operator|(
specifier|volatile
name|uint8_t
operator|*
operator|)
name|addr
operator|=
name|b
expr_stmt|;
block|}
end_function

begin_undef
undef|#
directive|undef
name|writew
end_undef

begin_function
specifier|static
specifier|inline
name|void
name|writew
parameter_list|(
name|uint16_t
name|b
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
operator|*
operator|(
specifier|volatile
name|uint16_t
operator|*
operator|)
name|addr
operator|=
name|b
expr_stmt|;
block|}
end_function

begin_undef
undef|#
directive|undef
name|ioread32be
end_undef

begin_function
specifier|static
specifier|inline
name|uint32_t
name|ioread32be
parameter_list|(
specifier|const
specifier|volatile
name|void
modifier|*
name|addr
parameter_list|)
block|{
return|return
name|be32toh
argument_list|(
operator|*
operator|(
specifier|const
specifier|volatile
name|uint32_t
operator|*
operator|)
name|addr
argument_list|)
return|;
block|}
end_function

begin_undef
undef|#
directive|undef
name|iowrite32be
end_undef

begin_function
specifier|static
specifier|inline
name|void
name|iowrite32be
parameter_list|(
name|uint32_t
name|v
parameter_list|,
specifier|volatile
name|void
modifier|*
name|addr
parameter_list|)
block|{
operator|*
operator|(
specifier|volatile
name|uint32_t
operator|*
operator|)
name|addr
operator|=
name|htobe32
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
modifier|*
name|_ioremap_attr
parameter_list|(
name|vm_paddr_t
name|phys_addr
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|,
name|int
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|ioremap_nocache
parameter_list|(
name|addr
parameter_list|,
name|size
parameter_list|)
define|\
value|_ioremap_attr((addr), (size), VM_MEMATTR_UNCACHEABLE)
end_define

begin_define
define|#
directive|define
name|ioremap_wc
parameter_list|(
name|addr
parameter_list|,
name|size
parameter_list|)
define|\
value|_ioremap_attr((addr), (size), VM_MEMATTR_WRITE_COMBINING)
end_define

begin_define
define|#
directive|define
name|ioremap
value|ioremap_nocache
end_define

begin_function_decl
name|void
name|iounmap
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|memset_io
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|memset((a), (b), (c))
end_define

begin_define
define|#
directive|define
name|memcpy_fromio
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|memcpy((a), (b), (c))
end_define

begin_define
define|#
directive|define
name|memcpy_toio
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|memcpy((a), (b), (c))
end_define

begin_function
specifier|static
specifier|inline
name|void
name|__iowrite64_copy
parameter_list|(
name|void
modifier|*
name|to
parameter_list|,
name|void
modifier|*
name|from
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__LP64__
name|uint64_t
modifier|*
name|src
decl_stmt|;
name|uint64_t
modifier|*
name|dst
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|src
operator|=
name|from
operator|,
name|dst
operator|=
name|to
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
operator|,
name|src
operator|++
operator|,
name|dst
operator|++
control|)
name|__raw_writeq
argument_list|(
operator|*
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
else|#
directive|else
name|uint32_t
modifier|*
name|src
decl_stmt|;
name|uint32_t
modifier|*
name|dst
decl_stmt|;
name|int
name|i
decl_stmt|;
name|count
operator|*=
literal|2
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|src
operator|=
name|from
operator|,
name|dst
operator|=
name|to
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
operator|,
name|src
operator|++
operator|,
name|dst
operator|++
control|)
name|__raw_writel
argument_list|(
operator|*
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_IO_H_ */
end_comment

end_unit

