begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Isilon Systems, Inc.  * Copyright (c) 2010 iX Systems, Inc.  * Copyright (c) 2010 Panasas, Inc.  * Copyright (c) 2013, 2014 Mellanox Technologies, Ltd.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LINUX_DMAPOOL_H_
end_ifndef

begin_define
define|#
directive|define
name|_LINUX_DMAPOOL_H_
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/io.h>
end_include

begin_include
include|#
directive|include
file|<linux/scatterlist.h>
end_include

begin_include
include|#
directive|include
file|<linux/device.h>
end_include

begin_include
include|#
directive|include
file|<linux/slab.h>
end_include

begin_struct
struct|struct
name|dma_pool
block|{
name|uma_zone_t
name|pool_zone
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|struct
name|dma_pool
modifier|*
name|dma_pool_create
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|device
modifier|*
name|dev
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|align
parameter_list|,
name|size_t
name|boundary
parameter_list|)
block|{
name|struct
name|dma_pool
modifier|*
name|pool
decl_stmt|;
name|pool
operator|=
name|kmalloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|pool
argument_list|)
argument_list|,
name|GFP_KERNEL
argument_list|)
expr_stmt|;
name|align
operator|--
expr_stmt|;
comment|/* 	 * XXX Eventually this could use a seperate allocf to honor boundary 	 * and physical address requirements of the device. 	 */
name|pool
operator|->
name|pool_zone
operator|=
name|uma_zcreate
argument_list|(
name|name
argument_list|,
name|size
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|align
argument_list|,
name|UMA_ZONE_OFFPAGE
operator||
name|UMA_ZONE_HASH
argument_list|)
expr_stmt|;
return|return
operator|(
name|pool
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_pool_destroy
parameter_list|(
name|struct
name|dma_pool
modifier|*
name|pool
parameter_list|)
block|{
name|uma_zdestroy
argument_list|(
name|pool
operator|->
name|pool_zone
argument_list|)
expr_stmt|;
name|kfree
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|dma_pool_alloc
parameter_list|(
name|struct
name|dma_pool
modifier|*
name|pool
parameter_list|,
name|gfp_t
name|mem_flags
parameter_list|,
name|dma_addr_t
modifier|*
name|handle
parameter_list|)
block|{
name|void
modifier|*
name|vaddr
decl_stmt|;
name|vaddr
operator|=
name|uma_zalloc
argument_list|(
name|pool
operator|->
name|pool_zone
argument_list|,
name|mem_flags
argument_list|)
expr_stmt|;
if|if
condition|(
name|vaddr
condition|)
operator|*
name|handle
operator|=
name|vtophys
argument_list|(
name|vaddr
argument_list|)
expr_stmt|;
return|return
operator|(
name|vaddr
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dma_pool_free
parameter_list|(
name|struct
name|dma_pool
modifier|*
name|pool
parameter_list|,
name|void
modifier|*
name|vaddr
parameter_list|,
name|dma_addr_t
name|addr
parameter_list|)
block|{
name|uma_zfree
argument_list|(
name|pool
operator|->
name|pool_zone
argument_list|,
name|vaddr
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LINUX_DMAPOOL_H_ */
end_comment

end_unit

