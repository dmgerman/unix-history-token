begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2014 Intel Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|OPA_SMI_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|OPA_SMI_H
end_define

begin_include
include|#
directive|include
file|<rdma/ib_mad.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_smi.h>
end_include

begin_define
define|#
directive|define
name|OPA_SMP_LID_DATA_SIZE
value|2016
end_define

begin_define
define|#
directive|define
name|OPA_SMP_DR_DATA_SIZE
value|1872
end_define

begin_define
define|#
directive|define
name|OPA_SMP_MAX_PATH_HOPS
value|64
end_define

begin_define
define|#
directive|define
name|OPA_MAX_VLS
value|32
end_define

begin_define
define|#
directive|define
name|OPA_MAX_SLS
value|32
end_define

begin_define
define|#
directive|define
name|OPA_MAX_SCS
value|32
end_define

begin_define
define|#
directive|define
name|OPA_SMI_CLASS_VERSION
value|0x80
end_define

begin_define
define|#
directive|define
name|OPA_LID_PERMISSIVE
value|cpu_to_be32(0xFFFFFFFF)
end_define

begin_struct
struct|struct
name|opa_smp
block|{
name|u8
name|base_version
decl_stmt|;
name|u8
name|mgmt_class
decl_stmt|;
name|u8
name|class_version
decl_stmt|;
name|u8
name|method
decl_stmt|;
name|__be16
name|status
decl_stmt|;
name|u8
name|hop_ptr
decl_stmt|;
name|u8
name|hop_cnt
decl_stmt|;
name|__be64
name|tid
decl_stmt|;
name|__be16
name|attr_id
decl_stmt|;
name|__be16
name|resv
decl_stmt|;
name|__be32
name|attr_mod
decl_stmt|;
name|__be64
name|mkey
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint8_t
name|data
index|[
name|OPA_SMP_LID_DATA_SIZE
index|]
decl_stmt|;
block|}
name|lid
struct|;
struct|struct
block|{
name|__be32
name|dr_slid
decl_stmt|;
name|__be32
name|dr_dlid
decl_stmt|;
name|u8
name|initial_path
index|[
name|OPA_SMP_MAX_PATH_HOPS
index|]
decl_stmt|;
name|u8
name|return_path
index|[
name|OPA_SMP_MAX_PATH_HOPS
index|]
decl_stmt|;
name|u8
name|reserved
index|[
literal|8
index|]
decl_stmt|;
name|u8
name|data
index|[
name|OPA_SMP_DR_DATA_SIZE
index|]
decl_stmt|;
block|}
name|dr
struct|;
block|}
name|route
union|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/* Subnet management attributes */
end_comment

begin_comment
comment|/* ... */
end_comment

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_NODE_DESCRIPTION
value|cpu_to_be16(0x0010)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_NODE_INFO
value|cpu_to_be16(0x0011)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_PORT_INFO
value|cpu_to_be16(0x0015)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_PARTITION_TABLE
value|cpu_to_be16(0x0016)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_SL_TO_SC_MAP
value|cpu_to_be16(0x0017)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_VL_ARBITRATION
value|cpu_to_be16(0x0018)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_SM_INFO
value|cpu_to_be16(0x0020)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_CABLE_INFO
value|cpu_to_be16(0x0032)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_AGGREGATE
value|cpu_to_be16(0x0080)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_SC_TO_SL_MAP
value|cpu_to_be16(0x0082)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_SC_TO_VLR_MAP
value|cpu_to_be16(0x0083)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_SC_TO_VLT_MAP
value|cpu_to_be16(0x0084)
end_define

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_SC_TO_VLNT_MAP
value|cpu_to_be16(0x0085)
end_define

begin_comment
comment|/* ... */
end_comment

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_PORT_STATE_INFO
value|cpu_to_be16(0x0087)
end_define

begin_comment
comment|/* ... */
end_comment

begin_define
define|#
directive|define
name|OPA_ATTRIB_ID_BUFFER_CONTROL_TABLE
value|cpu_to_be16(0x008A)
end_define

begin_comment
comment|/* ... */
end_comment

begin_struct
struct|struct
name|opa_node_description
block|{
name|u8
name|data
index|[
literal|64
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|opa_node_info
block|{
name|u8
name|base_version
decl_stmt|;
name|u8
name|class_version
decl_stmt|;
name|u8
name|node_type
decl_stmt|;
name|u8
name|num_ports
decl_stmt|;
name|__be32
name|reserved
decl_stmt|;
name|__be64
name|system_image_guid
decl_stmt|;
name|__be64
name|node_guid
decl_stmt|;
name|__be64
name|port_guid
decl_stmt|;
name|__be16
name|partition_cap
decl_stmt|;
name|__be16
name|device_id
decl_stmt|;
name|__be32
name|revision
decl_stmt|;
name|u8
name|local_port_num
decl_stmt|;
name|u8
name|vendor_id
index|[
literal|3
index|]
decl_stmt|;
comment|/* network byte order */
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_define
define|#
directive|define
name|OPA_PARTITION_TABLE_BLK_SIZE
value|32
end_define

begin_function
specifier|static
specifier|inline
name|u8
name|opa_get_smp_direction
parameter_list|(
specifier|const
name|struct
name|opa_smp
modifier|*
name|smp
parameter_list|)
block|{
return|return
name|ib_get_smp_direction
argument_list|(
operator|(
specifier|const
expr|struct
name|ib_smp
operator|*
operator|)
name|smp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
modifier|*
name|opa_get_smp_data
parameter_list|(
name|struct
name|opa_smp
modifier|*
name|smp
parameter_list|)
block|{
if|if
condition|(
name|smp
operator|->
name|mgmt_class
operator|==
name|IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE
condition|)
return|return
name|smp
operator|->
name|route
operator|.
name|dr
operator|.
name|data
return|;
return|return
name|smp
operator|->
name|route
operator|.
name|lid
operator|.
name|data
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|size_t
name|opa_get_smp_data_size
parameter_list|(
specifier|const
name|struct
name|opa_smp
modifier|*
name|smp
parameter_list|)
block|{
if|if
condition|(
name|smp
operator|->
name|mgmt_class
operator|==
name|IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE
condition|)
return|return
sizeof|sizeof
argument_list|(
name|smp
operator|->
name|route
operator|.
name|dr
operator|.
name|data
argument_list|)
return|;
return|return
sizeof|sizeof
argument_list|(
name|smp
operator|->
name|route
operator|.
name|lid
operator|.
name|data
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|size_t
name|opa_get_smp_header_size
parameter_list|(
specifier|const
name|struct
name|opa_smp
modifier|*
name|smp
parameter_list|)
block|{
if|if
condition|(
name|smp
operator|->
name|mgmt_class
operator|==
name|IB_MGMT_CLASS_SUBN_DIRECTED_ROUTE
condition|)
return|return
sizeof|sizeof
argument_list|(
operator|*
name|smp
argument_list|)
operator|-
sizeof|sizeof
argument_list|(
name|smp
operator|->
name|route
operator|.
name|dr
operator|.
name|data
argument_list|)
return|;
return|return
sizeof|sizeof
argument_list|(
operator|*
name|smp
argument_list|)
operator|-
sizeof|sizeof
argument_list|(
name|smp
operator|->
name|route
operator|.
name|lid
operator|.
name|data
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* OPA_SMI_H */
end_comment

end_unit

