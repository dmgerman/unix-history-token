begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005 Voltaire Inc.  All rights reserved.  * Copyright (c) 2005 Intel Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|IB_ADDR_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|IB_ADDR_H
end_define

begin_include
include|#
directive|include
file|<linux/in.h>
end_include

begin_include
include|#
directive|include
file|<linux/in6.h>
end_include

begin_include
include|#
directive|include
file|<linux/if_arp.h>
end_include

begin_include
include|#
directive|include
file|<linux/netdevice.h>
end_include

begin_include
include|#
directive|include
file|<linux/socket.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_pack.h>
end_include

begin_include
include|#
directive|include
file|<linux/ethtool.h>
end_include

begin_include
include|#
directive|include
file|<linux/if_vlan.h>
end_include

begin_struct
struct|struct
name|rdma_addr_client
block|{
name|atomic_t
name|refcount
decl_stmt|;
name|struct
name|completion
name|comp
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * rdma_addr_register_client - Register an address client.  */
end_comment

begin_function_decl
name|void
name|rdma_addr_register_client
parameter_list|(
name|struct
name|rdma_addr_client
modifier|*
name|client
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * rdma_addr_unregister_client - Deregister an address client.  * @client: Client object to deregister.  */
end_comment

begin_function_decl
name|void
name|rdma_addr_unregister_client
parameter_list|(
name|struct
name|rdma_addr_client
modifier|*
name|client
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|rdma_dev_addr
block|{
name|unsigned
name|char
name|src_dev_addr
index|[
name|MAX_ADDR_LEN
index|]
decl_stmt|;
name|unsigned
name|char
name|dst_dev_addr
index|[
name|MAX_ADDR_LEN
index|]
decl_stmt|;
name|unsigned
name|char
name|broadcast
index|[
name|MAX_ADDR_LEN
index|]
decl_stmt|;
name|unsigned
name|short
name|dev_type
decl_stmt|;
name|int
name|bound_dev_if
decl_stmt|;
name|enum
name|rdma_transport_type
name|transport
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * rdma_translate_ip - Translate a local IP address to an RDMA hardware  *   address.  */
end_comment

begin_function_decl
name|int
name|rdma_translate_ip
parameter_list|(
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|,
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * rdma_resolve_ip - Resolve source and destination IP addresses to  *   RDMA hardware addresses.  * @client: Address client associated with request.  * @src_addr: An optional source address to use in the resolution.  If a  *   source address is not provided, a usable address will be returned via  *   the callback.  * @dst_addr: The destination address to resolve.  * @addr: A reference to a data location that will receive the resolved  *   addresses.  The data location must remain valid until the callback has  *   been invoked.  * @timeout_ms: Amount of time to wait for the address resolution to complete.  * @callback: Call invoked once address resolution has completed, timed out,  *   or been canceled.  A status of 0 indicates success.  * @context: User-specified context associated with the call.  */
end_comment

begin_function_decl
name|int
name|rdma_resolve_ip
parameter_list|(
name|struct
name|rdma_addr_client
modifier|*
name|client
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|src_addr
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|dst_addr
parameter_list|,
name|struct
name|rdma_dev_addr
modifier|*
name|addr
parameter_list|,
name|int
name|timeout_ms
parameter_list|,
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|int
name|status
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|src_addr
parameter_list|,
name|struct
name|rdma_dev_addr
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rdma_addr_cancel
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rdma_copy_addr
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|dst_dev_addr
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|ip_addr_size
parameter_list|(
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|->
name|sa_family
operator|==
name|AF_INET6
condition|?
sizeof|sizeof
argument_list|(
expr|struct
name|sockaddr_in6
argument_list|)
else|:
sizeof|sizeof
argument_list|(
expr|struct
name|sockaddr_in
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|ib_addr_get_pkey
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|)
block|{
return|return
operator|(
operator|(
name|u16
operator|)
name|dev_addr
operator|->
name|broadcast
index|[
literal|8
index|]
operator|<<
literal|8
operator|)
operator||
operator|(
name|u16
operator|)
name|dev_addr
operator|->
name|broadcast
index|[
literal|9
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ib_addr_set_pkey
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|u16
name|pkey
parameter_list|)
block|{
name|dev_addr
operator|->
name|broadcast
index|[
literal|8
index|]
operator|=
name|pkey
operator|>>
literal|8
expr_stmt|;
name|dev_addr
operator|->
name|broadcast
index|[
literal|9
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|pkey
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ib_addr_get_mgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|gid
argument_list|,
name|dev_addr
operator|->
name|broadcast
operator|+
literal|4
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|rdma_addr_gid_offset
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|)
block|{
return|return
name|dev_addr
operator|->
name|dev_type
operator|==
name|ARPHRD_INFINIBAND
condition|?
literal|4
else|:
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|iboe_mac_vlan_to_ll
parameter_list|(
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|,
name|u8
modifier|*
name|mac
parameter_list|,
name|u16
name|vid
parameter_list|)
block|{
name|memset
argument_list|(
name|gid
operator|->
name|raw
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
operator|*
operator|(
operator|(
name|u32
operator|*
operator|)
name|gid
operator|->
name|raw
operator|)
operator|=
name|cpu_to_be32
argument_list|(
literal|0xfe800000
argument_list|)
expr_stmt|;
if|if
condition|(
name|vid
operator|<
literal|0x1000
condition|)
block|{
name|gid
operator|->
name|raw
index|[
literal|12
index|]
operator|=
name|vid
operator|&
literal|0xff
expr_stmt|;
name|gid
operator|->
name|raw
index|[
literal|11
index|]
operator|=
name|vid
operator|>>
literal|8
expr_stmt|;
block|}
else|else
block|{
name|gid
operator|->
name|raw
index|[
literal|12
index|]
operator|=
literal|0xfe
expr_stmt|;
name|gid
operator|->
name|raw
index|[
literal|11
index|]
operator|=
literal|0xff
expr_stmt|;
block|}
name|memcpy
argument_list|(
name|gid
operator|->
name|raw
operator|+
literal|13
argument_list|,
name|mac
operator|+
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|gid
operator|->
name|raw
operator|+
literal|8
argument_list|,
name|mac
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|gid
operator|->
name|raw
index|[
literal|8
index|]
operator|^=
literal|2
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|rdma_vlan_dev_vlan_id
parameter_list|(
specifier|const
name|struct
name|net_device
modifier|*
name|dev
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__linux__
return|return
name|dev
operator|->
name|priv_flags
operator|&
name|IFF_802_1Q_VLAN
condition|?
name|vlan_dev_vlan_id
argument_list|(
name|dev
argument_list|)
else|:
literal|0xffff
return|;
else|#
directive|else
name|uint16_t
name|tag
decl_stmt|;
if|if
condition|(
name|VLAN_TAG
argument_list|(
name|__DECONST
argument_list|(
expr|struct
name|ifnet
operator|*
argument_list|,
name|dev
argument_list|)
argument_list|,
operator|&
name|tag
argument_list|)
operator|!=
literal|0
condition|)
return|return
literal|0xffff
return|;
return|return
name|tag
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|iboe_addr_get_sgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|struct
name|net_device
modifier|*
name|dev
decl_stmt|;
name|u16
name|vid
init|=
literal|0xffff
decl_stmt|;
name|dev
operator|=
name|dev_get_by_index
argument_list|(
operator|&
name|init_net
argument_list|,
name|dev_addr
operator|->
name|bound_dev_if
argument_list|)
expr_stmt|;
if|if
condition|(
name|dev
condition|)
block|{
name|vid
operator|=
name|rdma_vlan_dev_vlan_id
argument_list|(
name|dev
argument_list|)
expr_stmt|;
name|dev_put
argument_list|(
name|dev
argument_list|)
expr_stmt|;
block|}
name|iboe_mac_vlan_to_ll
argument_list|(
name|gid
argument_list|,
name|dev_addr
operator|->
name|src_dev_addr
argument_list|,
name|vid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rdma_addr_get_sgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
if|if
condition|(
name|dev_addr
operator|->
name|transport
operator|==
name|RDMA_TRANSPORT_IB
operator|&&
name|dev_addr
operator|->
name|dev_type
operator|!=
name|ARPHRD_INFINIBAND
condition|)
name|iboe_addr_get_sgid
argument_list|(
name|dev_addr
argument_list|,
name|gid
argument_list|)
expr_stmt|;
else|else
name|memcpy
argument_list|(
name|gid
argument_list|,
name|dev_addr
operator|->
name|src_dev_addr
operator|+
name|rdma_addr_gid_offset
argument_list|(
name|dev_addr
argument_list|)
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rdma_addr_set_sgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|dev_addr
operator|->
name|src_dev_addr
operator|+
name|rdma_addr_gid_offset
argument_list|(
name|dev_addr
argument_list|)
argument_list|,
name|gid
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rdma_addr_get_dgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|gid
argument_list|,
name|dev_addr
operator|->
name|dst_dev_addr
operator|+
name|rdma_addr_gid_offset
argument_list|(
name|dev_addr
argument_list|)
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rdma_addr_set_dgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|dev_addr
operator|->
name|dst_dev_addr
operator|+
name|rdma_addr_gid_offset
argument_list|(
name|dev_addr
argument_list|)
argument_list|,
name|gid
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|enum
name|ib_mtu
name|iboe_get_mtu
parameter_list|(
name|int
name|mtu
parameter_list|)
block|{
comment|/* 	 * reduce IB headers from effective IBoE MTU. 28 stands for 	 * atomic header which is the biggest possible header after BTH 	 */
name|mtu
operator|=
name|mtu
operator|-
name|IB_GRH_BYTES
operator|-
name|IB_BTH_BYTES
operator|-
literal|28
expr_stmt|;
if|if
condition|(
name|mtu
operator|>=
name|ib_mtu_enum_to_int
argument_list|(
name|IB_MTU_4096
argument_list|)
condition|)
return|return
name|IB_MTU_4096
return|;
elseif|else
if|if
condition|(
name|mtu
operator|>=
name|ib_mtu_enum_to_int
argument_list|(
name|IB_MTU_2048
argument_list|)
condition|)
return|return
name|IB_MTU_2048
return|;
elseif|else
if|if
condition|(
name|mtu
operator|>=
name|ib_mtu_enum_to_int
argument_list|(
name|IB_MTU_1024
argument_list|)
condition|)
return|return
name|IB_MTU_1024
return|;
elseif|else
if|if
condition|(
name|mtu
operator|>=
name|ib_mtu_enum_to_int
argument_list|(
name|IB_MTU_512
argument_list|)
condition|)
return|return
name|IB_MTU_512
return|;
elseif|else
if|if
condition|(
name|mtu
operator|>=
name|ib_mtu_enum_to_int
argument_list|(
name|IB_MTU_256
argument_list|)
condition|)
return|return
name|IB_MTU_256
return|;
else|else
return|return
literal|0
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_function
specifier|static
specifier|inline
name|int
name|iboe_get_rate
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|)
block|{
name|struct
name|ethtool_cmd
name|cmd
decl_stmt|;
if|if
condition|(
operator|!
name|dev
operator|->
name|ethtool_ops
operator|||
operator|!
name|dev
operator|->
name|ethtool_ops
operator|->
name|get_settings
operator|||
name|dev
operator|->
name|ethtool_ops
operator|->
name|get_settings
argument_list|(
name|dev
argument_list|,
operator|&
name|cmd
argument_list|)
condition|)
return|return
name|IB_RATE_PORT_CURRENT
return|;
if|if
condition|(
name|cmd
operator|.
name|speed
operator|>=
literal|40000
condition|)
return|return
name|IB_RATE_40_GBPS
return|;
elseif|else
if|if
condition|(
name|cmd
operator|.
name|speed
operator|>=
literal|30000
condition|)
return|return
name|IB_RATE_30_GBPS
return|;
elseif|else
if|if
condition|(
name|cmd
operator|.
name|speed
operator|>=
literal|20000
condition|)
return|return
name|IB_RATE_20_GBPS
return|;
elseif|else
if|if
condition|(
name|cmd
operator|.
name|speed
operator|>=
literal|10000
condition|)
return|return
name|IB_RATE_10_GBPS
return|;
else|else
return|return
name|IB_RATE_PORT_CURRENT
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
specifier|inline
name|int
name|iboe_get_rate
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|)
block|{
name|uintmax_t
name|baudrate
decl_stmt|;
name|int
name|exp
decl_stmt|;
name|baudrate
operator|=
name|dev
operator|->
name|if_baudrate
expr_stmt|;
for|for
control|(
name|exp
operator|=
name|dev
operator|->
name|if_baudrate_pf
init|;
name|exp
operator|>
literal|0
condition|;
name|exp
operator|--
control|)
name|baudrate
operator|*=
literal|10
expr_stmt|;
if|if
condition|(
name|baudrate
operator|>=
name|IF_Gbps
argument_list|(
literal|40
argument_list|)
condition|)
return|return
name|IB_RATE_40_GBPS
return|;
elseif|else
if|if
condition|(
name|baudrate
operator|>=
name|IF_Gbps
argument_list|(
literal|30
argument_list|)
condition|)
return|return
name|IB_RATE_30_GBPS
return|;
elseif|else
if|if
condition|(
name|baudrate
operator|>=
name|IF_Gbps
argument_list|(
literal|20
argument_list|)
condition|)
return|return
name|IB_RATE_20_GBPS
return|;
elseif|else
if|if
condition|(
name|baudrate
operator|>=
name|IF_Gbps
argument_list|(
literal|10
argument_list|)
condition|)
return|return
name|IB_RATE_10_GBPS
return|;
else|else
return|return
name|IB_RATE_PORT_CURRENT
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|int
name|rdma_link_local_addr
parameter_list|(
name|struct
name|in6_addr
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|addr
operator|->
name|s6_addr32
index|[
literal|0
index|]
operator|==
name|cpu_to_be32
argument_list|(
literal|0xfe800000
argument_list|)
operator|&&
name|addr
operator|->
name|s6_addr32
index|[
literal|1
index|]
operator|==
literal|0
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rdma_get_ll_mac
parameter_list|(
name|struct
name|in6_addr
modifier|*
name|addr
parameter_list|,
name|u8
modifier|*
name|mac
parameter_list|)
block|{
name|memcpy
argument_list|(
name|mac
argument_list|,
operator|&
name|addr
operator|->
name|s6_addr
index|[
literal|8
index|]
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|mac
operator|+
literal|3
argument_list|,
operator|&
name|addr
operator|->
name|s6_addr
index|[
literal|13
index|]
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mac
index|[
literal|0
index|]
operator|^=
literal|2
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|rdma_is_multicast_addr
parameter_list|(
name|struct
name|in6_addr
modifier|*
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|->
name|s6_addr
index|[
literal|0
index|]
operator|==
literal|0xff
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rdma_get_mcast_mac
parameter_list|(
name|struct
name|in6_addr
modifier|*
name|addr
parameter_list|,
name|u8
modifier|*
name|mac
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
name|mac
index|[
literal|0
index|]
operator|=
literal|0x33
expr_stmt|;
name|mac
index|[
literal|1
index|]
operator|=
literal|0x33
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|2
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
name|mac
index|[
name|i
index|]
operator|=
name|addr
operator|->
name|s6_addr
index|[
name|i
operator|+
literal|10
index|]
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|rdma_get_vlan_id
parameter_list|(
name|union
name|ib_gid
modifier|*
name|dgid
parameter_list|)
block|{
name|u16
name|vid
decl_stmt|;
name|vid
operator|=
name|dgid
operator|->
name|raw
index|[
literal|11
index|]
operator|<<
literal|8
operator||
name|dgid
operator|->
name|raw
index|[
literal|12
index|]
expr_stmt|;
return|return
name|vid
operator|<
literal|0x1000
condition|?
name|vid
else|:
literal|0xffff
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|net_device
modifier|*
name|rdma_vlan_dev_real_dev
parameter_list|(
specifier|const
name|struct
name|net_device
modifier|*
name|dev
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|__linux__
return|return
name|dev
operator|->
name|priv_flags
operator|&
name|IFF_802_1Q_VLAN
condition|?
name|vlan_dev_real_dev
argument_list|(
name|dev
argument_list|)
else|:
literal|0
return|;
else|#
directive|else
return|return
name|VLAN_TRUNKDEV
argument_list|(
name|__DECONST
argument_list|(
expr|struct
name|ifnet
operator|*
argument_list|,
name|dev
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* IB_ADDR_H */
end_comment

end_unit

