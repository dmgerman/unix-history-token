begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2010 Intel Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_RDMA_IB_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|_RDMA_IB_H
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_include
include|#
directive|include
file|<linux/sched.h>
end_include

begin_include
include|#
directive|include
file|<linux/file.h>
end_include

begin_comment
comment|/*  * Define a native infiniband address as in Linux upstream  * 8d36eb01da5d371feffa280e501377b5c450f5a5  */
end_comment

begin_define
define|#
directive|define
name|AF_IB
value|41
end_define

begin_struct
struct|struct
name|ib_addr
block|{
union|union
block|{
name|__u8
name|uib_addr8
index|[
literal|16
index|]
decl_stmt|;
name|__be16
name|uib_addr16
index|[
literal|8
index|]
decl_stmt|;
name|__be32
name|uib_addr32
index|[
literal|4
index|]
decl_stmt|;
name|__be64
name|uib_addr64
index|[
literal|2
index|]
decl_stmt|;
block|}
name|ib_u
union|;
define|#
directive|define
name|sib_addr8
value|ib_u.uib_addr8
define|#
directive|define
name|sib_addr16
value|ib_u.uib_addr16
define|#
directive|define
name|sib_addr32
value|ib_u.uib_addr32
define|#
directive|define
name|sib_addr64
value|ib_u.uib_addr64
define|#
directive|define
name|sib_raw
value|ib_u.uib_addr8
define|#
directive|define
name|sib_subnet_prefix
value|ib_u.uib_addr64[0]
define|#
directive|define
name|sib_interface_id
value|ib_u.uib_addr64[1]
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|ib_addr_any
parameter_list|(
specifier|const
name|struct
name|ib_addr
modifier|*
name|a
parameter_list|)
block|{
return|return
operator|(
operator|(
name|a
operator|->
name|sib_addr64
index|[
literal|0
index|]
operator||
name|a
operator|->
name|sib_addr64
index|[
literal|1
index|]
operator|)
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|ib_addr_loopback
parameter_list|(
specifier|const
name|struct
name|ib_addr
modifier|*
name|a
parameter_list|)
block|{
return|return
operator|(
operator|(
name|a
operator|->
name|sib_addr32
index|[
literal|0
index|]
operator||
name|a
operator|->
name|sib_addr32
index|[
literal|1
index|]
operator||
name|a
operator|->
name|sib_addr32
index|[
literal|2
index|]
operator||
operator|(
name|a
operator|->
name|sib_addr32
index|[
literal|3
index|]
operator|^
name|htonl
argument_list|(
literal|1
argument_list|)
operator|)
operator|)
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ib_addr_set
parameter_list|(
name|struct
name|ib_addr
modifier|*
name|addr
parameter_list|,
name|__be32
name|w1
parameter_list|,
name|__be32
name|w2
parameter_list|,
name|__be32
name|w3
parameter_list|,
name|__be32
name|w4
parameter_list|)
block|{
name|addr
operator|->
name|sib_addr32
index|[
literal|0
index|]
operator|=
name|w1
expr_stmt|;
name|addr
operator|->
name|sib_addr32
index|[
literal|1
index|]
operator|=
name|w2
expr_stmt|;
name|addr
operator|->
name|sib_addr32
index|[
literal|2
index|]
operator|=
name|w3
expr_stmt|;
name|addr
operator|->
name|sib_addr32
index|[
literal|3
index|]
operator|=
name|w4
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|ib_addr_cmp
parameter_list|(
specifier|const
name|struct
name|ib_addr
modifier|*
name|a1
parameter_list|,
specifier|const
name|struct
name|ib_addr
modifier|*
name|a2
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
sizeof|sizeof
argument_list|(
expr|struct
name|ib_addr
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_struct
struct|struct
name|sockaddr_ib
block|{
name|unsigned
name|short
name|int
name|sib_family
decl_stmt|;
comment|/* AF_IB */
name|__be16
name|sib_pkey
decl_stmt|;
name|__be32
name|sib_flowinfo
decl_stmt|;
name|struct
name|ib_addr
name|sib_addr
decl_stmt|;
name|__be64
name|sib_sid
decl_stmt|;
name|__be64
name|sib_sid_mask
decl_stmt|;
name|__u64
name|sib_scope_id
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The IB interfaces that use write() as bi-directional ioctl() are  * fundamentally unsafe, since there are lots of ways to trigger "write()"  * calls from various contexts with elevated privileges. That includes the  * traditional suid executable error message writes, but also various kernel  * interfaces that can write to file descriptors.  *  * This function provides protection for the legacy API by restricting the  * calling context.  */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|ib_safe_file_access
parameter_list|(
name|struct
name|file
modifier|*
name|filp
parameter_list|)
block|{
name|struct
name|thread
modifier|*
name|td
init|=
name|curthread
decl_stmt|;
comment|/* 	 * Check if called from userspace through a devfs related 	 * system call belonging to the given file: 	 */
return|return
operator|(
name|filp
operator|->
name|_file
operator|!=
name|NULL
operator|&&
name|filp
operator|->
name|_file
operator|==
name|td
operator|->
name|td_fpop
operator|&&
name|filp
operator|->
name|_file
operator|->
name|f_cred
operator|==
name|td
operator|->
name|td_ucred
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _RDMA_IB_H */
end_comment

end_unit

