begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|DEF_RDMA_VT_H
end_ifndef

begin_define
define|#
directive|define
name|DEF_RDMA_VT_H
end_define

begin_comment
comment|/*  * Copyright(c) 2016 Intel Corporation.  *  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * BSD LICENSE  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *  - Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  - Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  - Neither the name of Intel Corporation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  */
end_comment

begin_comment
comment|/*  * Structure that low level drivers will populate in order to register with the  * rdmavt layer.  */
end_comment

begin_include
include|#
directive|include
file|<linux/spinlock.h>
end_include

begin_include
include|#
directive|include
file|<linux/list.h>
end_include

begin_include
include|#
directive|include
file|<linux/hash.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_include
include|#
directive|include
file|<rdma/rdmavt_mr.h>
end_include

begin_include
include|#
directive|include
file|<rdma/rdmavt_qp.h>
end_include

begin_define
define|#
directive|define
name|RVT_MAX_PKEY_VALUES
value|16
end_define

begin_struct
struct|struct
name|rvt_ibport
block|{
name|struct
name|rvt_qp
name|__rcu
modifier|*
name|qp
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|ib_mad_agent
modifier|*
name|send_agent
decl_stmt|;
comment|/* agent for SMI (traps) */
name|struct
name|rb_root
name|mcast_tree
decl_stmt|;
name|spinlock_t
name|lock
decl_stmt|;
comment|/* protect changes in this struct */
comment|/* non-zero when timer is set */
name|unsigned
name|long
name|mkey_lease_timeout
decl_stmt|;
name|unsigned
name|long
name|trap_timeout
decl_stmt|;
name|__be64
name|gid_prefix
decl_stmt|;
comment|/* in network order */
name|__be64
name|mkey
decl_stmt|;
name|u64
name|tid
decl_stmt|;
name|u32
name|port_cap_flags
decl_stmt|;
name|u32
name|pma_sample_start
decl_stmt|;
name|u32
name|pma_sample_interval
decl_stmt|;
name|__be16
name|pma_counter_select
index|[
literal|5
index|]
decl_stmt|;
name|u16
name|pma_tag
decl_stmt|;
name|u16
name|mkey_lease_period
decl_stmt|;
name|u16
name|sm_lid
decl_stmt|;
name|u8
name|sm_sl
decl_stmt|;
name|u8
name|mkeyprot
decl_stmt|;
name|u8
name|subnet_timeout
decl_stmt|;
name|u8
name|vl_high_limit
decl_stmt|;
comment|/* 	 * Driver is expected to keep these up to date. These 	 * counters are informational only and not required to be 	 * completely accurate. 	 */
name|u64
name|n_rc_resends
decl_stmt|;
name|u64
name|n_seq_naks
decl_stmt|;
name|u64
name|n_rdma_seq
decl_stmt|;
name|u64
name|n_rnr_naks
decl_stmt|;
name|u64
name|n_other_naks
decl_stmt|;
name|u64
name|n_loop_pkts
decl_stmt|;
name|u64
name|n_pkt_drops
decl_stmt|;
name|u64
name|n_vl15_dropped
decl_stmt|;
name|u64
name|n_rc_timeouts
decl_stmt|;
name|u64
name|n_dmawait
decl_stmt|;
name|u64
name|n_unaligned
decl_stmt|;
name|u64
name|n_rc_dupreq
decl_stmt|;
name|u64
name|n_rc_seqnak
decl_stmt|;
name|u16
name|pkey_violations
decl_stmt|;
name|u16
name|qkey_violations
decl_stmt|;
name|u16
name|mkey_violations
decl_stmt|;
comment|/* Hot-path per CPU counters to avoid cacheline trading to update */
name|u64
name|z_rc_acks
decl_stmt|;
name|u64
name|z_rc_qacks
decl_stmt|;
name|u64
name|z_rc_delayed_comp
decl_stmt|;
name|u64
name|__percpu
modifier|*
name|rc_acks
decl_stmt|;
name|u64
name|__percpu
modifier|*
name|rc_qacks
decl_stmt|;
name|u64
name|__percpu
modifier|*
name|rc_delayed_comp
decl_stmt|;
name|void
modifier|*
name|priv
decl_stmt|;
comment|/* driver private data */
comment|/* 	 * The pkey table is allocated and maintained by the driver. Drivers 	 * need to have access to this before registering with rdmav. However 	 * rdmavt will need access to it so drivers need to proviee this during 	 * the attach port API call. 	 */
name|u16
modifier|*
name|pkey_table
decl_stmt|;
name|struct
name|rvt_ah
modifier|*
name|sm_ah
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RVT_CQN_MAX
value|16
end_define

begin_comment
comment|/* maximum length of cq name */
end_comment

begin_comment
comment|/*  * Things that are driver specific, module parameters in hfi1 and qib  */
end_comment

begin_struct
struct|struct
name|rvt_driver_params
block|{
name|struct
name|ib_device_attr
name|props
decl_stmt|;
comment|/* 	 * Anything driver specific that is not covered by props 	 * For instance special module parameters. Goes here. 	 */
name|unsigned
name|int
name|lkey_table_size
decl_stmt|;
name|unsigned
name|int
name|qp_table_size
decl_stmt|;
name|int
name|qpn_start
decl_stmt|;
name|int
name|qpn_inc
decl_stmt|;
name|int
name|qpn_res_start
decl_stmt|;
name|int
name|qpn_res_end
decl_stmt|;
name|int
name|nports
decl_stmt|;
name|int
name|npkeys
decl_stmt|;
name|char
name|cq_name
index|[
name|RVT_CQN_MAX
index|]
decl_stmt|;
name|int
name|node
decl_stmt|;
name|int
name|psn_mask
decl_stmt|;
name|int
name|psn_shift
decl_stmt|;
name|int
name|psn_modify_mask
decl_stmt|;
name|u32
name|core_cap_flags
decl_stmt|;
name|u32
name|max_mad_size
decl_stmt|;
name|u8
name|qos_shift
decl_stmt|;
name|u8
name|max_rdma_atomic
decl_stmt|;
name|u8
name|reserved_operations
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Protection domain */
end_comment

begin_struct
struct|struct
name|rvt_pd
block|{
name|struct
name|ib_pd
name|ibpd
decl_stmt|;
name|int
name|user
decl_stmt|;
comment|/* non-zero if created from user space */
block|}
struct|;
end_struct

begin_comment
comment|/* Address handle */
end_comment

begin_struct
struct|struct
name|rvt_ah
block|{
name|struct
name|ib_ah
name|ibah
decl_stmt|;
name|struct
name|ib_ah_attr
name|attr
decl_stmt|;
name|atomic_t
name|refcount
decl_stmt|;
name|u8
name|vl
decl_stmt|;
name|u8
name|log_pmtu
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|rvt_dev_info
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|rvt_swqe
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|rvt_driver_provided
block|{
comment|/* 	 * Which functions are required depends on which verbs rdmavt is 	 * providing and which verbs the driver is overriding. See 	 * check_support() for details. 	 */
comment|/* Passed to ib core registration. Callback to create syfs files */
name|int
function_decl|(
modifier|*
name|port_callback
function_decl|)
parameter_list|(
name|struct
name|ib_device
modifier|*
parameter_list|,
name|u8
parameter_list|,
name|struct
name|kobject
modifier|*
parameter_list|)
function_decl|;
comment|/* 	 * Returns a string to represent the device for which is being 	 * registered. This is primarily used for error and debug messages on 	 * the console. 	 */
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|get_card_name
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|)
function_decl|;
comment|/* 	 * Returns a pointer to the undelying hardware's PCI device. This is 	 * used to display information as to what hardware is being referenced 	 * in an output message 	 */
name|struct
name|pci_dev
modifier|*
function_decl|(
modifier|*
name|get_pci_dev
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|)
function_decl|;
comment|/* 	 * Allocate a private queue pair data structure for driver specific 	 * information which is opaque to rdmavt.  Errors are returned via 	 * ERR_PTR(err).  The driver is free to return NULL or a valid 	 * pointer. 	 */
name|void
modifier|*
function_decl|(
modifier|*
name|qp_priv_alloc
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
function_decl|;
comment|/* 	 * Free the driver's private qp structure. 	 */
name|void
function_decl|(
modifier|*
name|qp_priv_free
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
comment|/* 	 * Inform the driver the particular qp in quesiton has been reset so 	 * that it can clean up anything it needs to. 	 */
name|void
function_decl|(
modifier|*
name|notify_qp_reset
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
comment|/* 	 * Give the driver a notice that there is send work to do. It is up to 	 * the driver to generally push the packets out, this just queues the 	 * work with the driver. There are two variants here. The no_lock 	 * version requires the s_lock not to be held. The other assumes the 	 * s_lock is held. 	 */
name|void
function_decl|(
modifier|*
name|schedule_send
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|schedule_send_no_lock
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
comment|/* 	 * Sometimes rdmavt needs to kick the driver's send progress. That is 	 * done by this call back. 	 */
name|void
function_decl|(
modifier|*
name|do_send
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
comment|/* 	 * Get a path mtu from the driver based on qp attributes. 	 */
name|int
function_decl|(
modifier|*
name|get_pmtu_from_attr
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ib_qp_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
comment|/* 	 * Notify driver that it needs to flush any outstanding IO requests that 	 * are waiting on a qp. 	 */
name|void
function_decl|(
modifier|*
name|flush_qp_waiters
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
comment|/* 	 * Notify driver to stop its queue of sending packets. Nothing else 	 * should be posted to the queue pair after this has been called. 	 */
name|void
function_decl|(
modifier|*
name|stop_send_queue
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
comment|/* 	 * Have the drivr drain any in progress operations 	 */
name|void
function_decl|(
modifier|*
name|quiesce_qp
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
comment|/* 	 * Inform the driver a qp has went to error state. 	 */
name|void
function_decl|(
modifier|*
name|notify_error_qp
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|)
function_decl|;
comment|/* 	 * Get an MTU for a qp. 	 */
name|u32
function_decl|(
modifier|*
name|mtu_from_qp
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|,
name|u32
name|pmtu
parameter_list|)
function_decl|;
comment|/* 	 * Convert an mtu to a path mtu 	 */
name|int
function_decl|(
modifier|*
name|mtu_to_path_mtu
function_decl|)
parameter_list|(
name|u32
name|mtu
parameter_list|)
function_decl|;
comment|/* 	 * Get the guid of a port in big endian byte order 	 */
name|int
function_decl|(
modifier|*
name|get_guid_be
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|struct
name|rvt_ibport
modifier|*
name|rvp
parameter_list|,
name|int
name|guid_index
parameter_list|,
name|__be64
modifier|*
name|guid
parameter_list|)
function_decl|;
comment|/* 	 * Query driver for the state of the port. 	 */
name|int
function_decl|(
modifier|*
name|query_port_state
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|u8
name|port_num
parameter_list|,
name|struct
name|ib_port_attr
modifier|*
name|props
parameter_list|)
function_decl|;
comment|/* 	 * Tell driver to shutdown a port 	 */
name|int
function_decl|(
modifier|*
name|shut_down_port
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|u8
name|port_num
parameter_list|)
function_decl|;
comment|/* Tell driver to send a trap for changed  port capabilities */
name|void
function_decl|(
modifier|*
name|cap_mask_chg
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|u8
name|port_num
parameter_list|)
function_decl|;
comment|/* 	 * The following functions can be safely ignored completely. Any use of 	 * these is checked for NULL before blindly calling. Rdmavt should also 	 * be functional if drivers omit these. 	 */
comment|/* Called to inform the driver that all qps should now be freed. */
name|unsigned
function_decl|(
modifier|*
name|free_all_qps
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|)
function_decl|;
comment|/* Driver specific AH validation */
name|int
function_decl|(
modifier|*
name|check_ah
function_decl|)
parameter_list|(
name|struct
name|ib_device
modifier|*
parameter_list|,
name|struct
name|ib_ah_attr
modifier|*
parameter_list|)
function_decl|;
comment|/* Inform the driver a new AH has been created */
name|void
function_decl|(
modifier|*
name|notify_new_ah
function_decl|)
parameter_list|(
name|struct
name|ib_device
modifier|*
parameter_list|,
name|struct
name|ib_ah_attr
modifier|*
parameter_list|,
name|struct
name|rvt_ah
modifier|*
parameter_list|)
function_decl|;
comment|/* Let the driver pick the next queue pair number*/
name|int
function_decl|(
modifier|*
name|alloc_qpn
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|struct
name|rvt_qpn_table
modifier|*
name|qpt
parameter_list|,
name|enum
name|ib_qp_type
name|type
parameter_list|,
name|u8
name|port_num
parameter_list|,
name|gfp_t
name|gfp
parameter_list|)
function_decl|;
comment|/* Determine if its safe or allowed to modify the qp */
name|int
function_decl|(
modifier|*
name|check_modify_qp
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ib_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|,
name|struct
name|ib_udata
modifier|*
name|udata
parameter_list|)
function_decl|;
comment|/* Driver specific QP modification/notification-of */
name|void
function_decl|(
modifier|*
name|modify_qp
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ib_qp_attr
modifier|*
name|attr
parameter_list|,
name|int
name|attr_mask
parameter_list|,
name|struct
name|ib_udata
modifier|*
name|udata
parameter_list|)
function_decl|;
comment|/* Driver specific work request checking */
name|int
function_decl|(
modifier|*
name|check_send_wqe
function_decl|)
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|rvt_swqe
modifier|*
name|wqe
parameter_list|)
function_decl|;
comment|/* Notify driver a mad agent has been created */
name|void
function_decl|(
modifier|*
name|notify_create_mad_agent
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|int
name|port_idx
parameter_list|)
function_decl|;
comment|/* Notify driver a mad agent has been removed */
name|void
function_decl|(
modifier|*
name|notify_free_mad_agent
function_decl|)
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|int
name|port_idx
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|rvt_dev_info
block|{
name|struct
name|ib_device
name|ibdev
decl_stmt|;
comment|/* Keep this first. Nothing above here */
comment|/* 	 * Prior to calling for registration the driver will be responsible for 	 * allocating space for this structure. 	 * 	 * The driver will also be responsible for filling in certain members of 	 * dparms.props. The driver needs to fill in dparms exactly as it would 	 * want values reported to a ULP. This will be returned to the caller 	 * in rdmavt's device. The driver should also therefore refrain from 	 * modifying this directly after registration with rdmavt. 	 */
comment|/* Driver specific properties */
name|struct
name|rvt_driver_params
name|dparms
decl_stmt|;
comment|/* post send table */
specifier|const
name|struct
name|rvt_operation_params
modifier|*
name|post_parms
decl_stmt|;
name|struct
name|rvt_mregion
name|__rcu
modifier|*
name|dma_mr
decl_stmt|;
name|struct
name|rvt_lkey_table
name|lkey_table
decl_stmt|;
comment|/* Driver specific helper functions */
name|struct
name|rvt_driver_provided
name|driver_f
decl_stmt|;
comment|/* Internal use */
name|int
name|n_pds_allocated
decl_stmt|;
name|spinlock_t
name|n_pds_lock
decl_stmt|;
comment|/* Protect pd allocated count */
name|int
name|n_ahs_allocated
decl_stmt|;
name|spinlock_t
name|n_ahs_lock
decl_stmt|;
comment|/* Protect ah allocated count */
name|u32
name|n_srqs_allocated
decl_stmt|;
name|spinlock_t
name|n_srqs_lock
decl_stmt|;
comment|/* Protect srqs allocated count */
name|int
name|flags
decl_stmt|;
name|struct
name|rvt_ibport
modifier|*
modifier|*
name|ports
decl_stmt|;
comment|/* QP */
name|struct
name|rvt_qp_ibdev
modifier|*
name|qp_dev
decl_stmt|;
name|u32
name|n_qps_allocated
decl_stmt|;
comment|/* number of QPs allocated for device */
name|u32
name|n_rc_qps
decl_stmt|;
comment|/* number of RC QPs allocated for device */
name|u32
name|busy_jiffies
decl_stmt|;
comment|/* timeout scaling based on RC QP count */
name|spinlock_t
name|n_qps_lock
decl_stmt|;
comment|/* protect qps, rc qps and busy jiffy counts */
comment|/* memory maps */
name|struct
name|list_head
name|pending_mmaps
decl_stmt|;
name|spinlock_t
name|mmap_offset_lock
decl_stmt|;
comment|/* protect mmap_offset */
name|u32
name|mmap_offset
decl_stmt|;
name|spinlock_t
name|pending_lock
decl_stmt|;
comment|/* protect pending mmap list */
comment|/* CQ */
name|struct
name|kthread_worker
modifier|*
name|worker
decl_stmt|;
comment|/* per device cq worker */
name|u32
name|n_cqs_allocated
decl_stmt|;
comment|/* number of CQs allocated for device */
name|spinlock_t
name|n_cqs_lock
decl_stmt|;
comment|/* protect count of in use cqs */
comment|/* Multicast */
name|u32
name|n_mcast_grps_allocated
decl_stmt|;
comment|/* number of mcast groups allocated */
name|spinlock_t
name|n_mcast_grps_lock
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|struct
name|rvt_pd
modifier|*
name|ibpd_to_rvtpd
parameter_list|(
name|struct
name|ib_pd
modifier|*
name|ibpd
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibpd
argument_list|,
expr|struct
name|rvt_pd
argument_list|,
name|ibpd
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|rvt_ah
modifier|*
name|ibah_to_rvtah
parameter_list|(
name|struct
name|ib_ah
modifier|*
name|ibah
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibah
argument_list|,
expr|struct
name|rvt_ah
argument_list|,
name|ibah
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|rvt_dev_info
modifier|*
name|ib_to_rvt
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ibdev
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibdev
argument_list|,
expr|struct
name|rvt_dev_info
argument_list|,
name|ibdev
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|rvt_srq
modifier|*
name|ibsrq_to_rvtsrq
parameter_list|(
name|struct
name|ib_srq
modifier|*
name|ibsrq
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibsrq
argument_list|,
expr|struct
name|rvt_srq
argument_list|,
name|ibsrq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|rvt_qp
modifier|*
name|ibqp_to_rvtqp
parameter_list|(
name|struct
name|ib_qp
modifier|*
name|ibqp
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibqp
argument_list|,
expr|struct
name|rvt_qp
argument_list|,
name|ibqp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|rvt_get_npkeys
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|)
block|{
comment|/* 	 * All ports have same number of pkeys. 	 */
return|return
name|rdi
operator|->
name|dparms
operator|.
name|npkeys
return|;
block|}
end_function

begin_comment
comment|/*  * Return the max atomic suitable for determining  * the size of the ack ring buffer in a QP.  */
end_comment

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|rvt_max_atomic
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|)
block|{
return|return
name|rdi
operator|->
name|dparms
operator|.
name|max_rdma_atomic
operator|+
literal|1
return|;
block|}
end_function

begin_comment
comment|/*  * Return the indexed PKEY from the port PKEY table.  */
end_comment

begin_function
specifier|static
specifier|inline
name|u16
name|rvt_get_pkey
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|int
name|port_index
parameter_list|,
name|unsigned
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|rvt_get_npkeys
argument_list|(
name|rdi
argument_list|)
condition|)
return|return
literal|0
return|;
else|else
return|return
name|rdi
operator|->
name|ports
index|[
name|port_index
index|]
operator|->
name|pkey_table
index|[
name|index
index|]
return|;
block|}
end_function

begin_comment
comment|/**  * rvt_lookup_qpn - return the QP with the given QPN  * @ibp: the ibport  * @qpn: the QP number to look up  *  * The caller must hold the rcu_read_lock(), and keep the lock until  * the returned qp is no longer in use.  */
end_comment

begin_comment
comment|/* TODO: Remove this and put in rdmavt/qp.h when no longer needed by drivers */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|rvt_qp
modifier|*
name|rvt_lookup_qpn
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|struct
name|rvt_ibport
modifier|*
name|rvp
parameter_list|,
name|u32
name|qpn
parameter_list|)
function|__must_hold
parameter_list|(
name|RCU
parameter_list|)
block|{
name|struct
name|rvt_qp
modifier|*
name|qp
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|qpn
operator|<=
literal|1
argument_list|)
condition|)
block|{
name|qp
operator|=
name|rcu_dereference
argument_list|(
name|rvp
operator|->
name|qp
index|[
name|qpn
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|u32
name|n
init|=
name|hash_32
argument_list|(
name|qpn
argument_list|,
name|rdi
operator|->
name|qp_dev
operator|->
name|qp_table_bits
argument_list|)
decl_stmt|;
for|for
control|(
name|qp
operator|=
name|rcu_dereference
argument_list|(
name|rdi
operator|->
name|qp_dev
operator|->
name|qp_table
index|[
name|n
index|]
argument_list|)
init|;
name|qp
condition|;
name|qp
operator|=
name|rcu_dereference
argument_list|(
name|qp
operator|->
name|next
argument_list|)
control|)
if|if
condition|(
name|qp
operator|->
name|ibqp
operator|.
name|qp_num
operator|==
name|qpn
condition|)
break|break;
block|}
return|return
name|qp
return|;
block|}
end_function

begin_function_decl
name|struct
name|rvt_dev_info
modifier|*
name|rvt_alloc_device
parameter_list|(
name|size_t
name|size
parameter_list|,
name|int
name|nports
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rvt_dealloc_device
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rvt_register_device
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rvd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rvt_unregister_device
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rvd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rvt_check_ah
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ibdev
parameter_list|,
name|struct
name|ib_ah_attr
modifier|*
name|ah_attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rvt_init_port
parameter_list|(
name|struct
name|rvt_dev_info
modifier|*
name|rdi
parameter_list|,
name|struct
name|rvt_ibport
modifier|*
name|port
parameter_list|,
name|int
name|port_index
parameter_list|,
name|u16
modifier|*
name|pkey_table
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rvt_fast_reg_mr
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ib_mr
modifier|*
name|ibmr
parameter_list|,
name|u32
name|key
parameter_list|,
name|int
name|access
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rvt_invalidate_rkey
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|,
name|u32
name|rkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rvt_rkey_ok
parameter_list|(
name|struct
name|rvt_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|rvt_sge
modifier|*
name|sge
parameter_list|,
name|u32
name|len
parameter_list|,
name|u64
name|vaddr
parameter_list|,
name|u32
name|rkey
parameter_list|,
name|int
name|acc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rvt_lkey_ok
parameter_list|(
name|struct
name|rvt_lkey_table
modifier|*
name|rkt
parameter_list|,
name|struct
name|rvt_pd
modifier|*
name|pd
parameter_list|,
name|struct
name|rvt_sge
modifier|*
name|isge
parameter_list|,
name|struct
name|ib_sge
modifier|*
name|sge
parameter_list|,
name|int
name|acc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|rvt_mcast
modifier|*
name|rvt_mcast_find
parameter_list|(
name|struct
name|rvt_ibport
modifier|*
name|ibp
parameter_list|,
name|union
name|ib_gid
modifier|*
name|mgid
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DEF_RDMA_VT_H */
end_comment

end_unit

