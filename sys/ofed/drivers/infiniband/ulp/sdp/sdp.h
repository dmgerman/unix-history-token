begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|_SDP_H_
end_ifndef

begin_define
define|#
directive|define
name|_SDP_H_
end_define

begin_define
define|#
directive|define
name|LINUXKPI_PARAM_PREFIX
value|ib_sdp_
end_define

begin_include
include|#
directive|include
file|"opt_ddb.h"
end_include

begin_include
include|#
directive|include
file|"opt_inet.h"
end_include

begin_include
include|#
directive|include
file|"opt_ofed.h"
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<sys/sysctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/mbuf.h>
end_include

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/rwlock.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/socketvar.h>
end_include

begin_include
include|#
directive|include
file|<sys/protosw.h>
end_include

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_include
include|#
directive|include
file|<sys/jail.h>
end_include

begin_include
include|#
directive|include
file|<sys/domain.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|DDB
end_ifdef

begin_include
include|#
directive|include
file|<ddb/ddb.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_include
include|#
directive|include
file|<net/if_var.h>
end_include

begin_include
include|#
directive|include
file|<net/route.h>
end_include

begin_include
include|#
directive|include
file|<net/vnet.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in_systm.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in_var.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in_pcb.h>
end_include

begin_include
include|#
directive|include
file|<netinet/tcp.h>
end_include

begin_include
include|#
directive|include
file|<netinet/tcp_fsm.h>
end_include

begin_include
include|#
directive|include
file|<netinet/tcp_timer.h>
end_include

begin_include
include|#
directive|include
file|<netinet/tcp_var.h>
end_include

begin_include
include|#
directive|include
file|<linux/device.h>
end_include

begin_include
include|#
directive|include
file|<linux/err.h>
end_include

begin_include
include|#
directive|include
file|<linux/sched.h>
end_include

begin_include
include|#
directive|include
file|<linux/workqueue.h>
end_include

begin_include
include|#
directive|include
file|<linux/wait.h>
end_include

begin_include
include|#
directive|include
file|<linux/module.h>
end_include

begin_include
include|#
directive|include
file|<linux/moduleparam.h>
end_include

begin_include
include|#
directive|include
file|<linux/pci.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_include
include|#
directive|include
file|<rdma/rdma_cm.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_cm.h>
end_include

begin_include
include|#
directive|include
file|<rdma/sdp_socket.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_fmr_pool.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|SDP_DEBUG
end_ifdef

begin_define
define|#
directive|define
name|CONFIG_INFINIBAND_SDP_DEBUG
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"sdp_dbg.h"
end_include

begin_undef
undef|#
directive|undef
name|LIST_HEAD
end_undef

begin_comment
comment|/* From sys/queue.h */
end_comment

begin_define
define|#
directive|define
name|LIST_HEAD
parameter_list|(
name|name
parameter_list|,
name|type
parameter_list|)
define|\
value|struct name {                                                           \         struct type *lh_first;
comment|/* first element */
value|\ }
end_define

begin_comment
comment|/* Interval between successive polls in the Tx routine when polling is used    instead of interrupts (in per-core Tx rings) - should be power of 2 */
end_comment

begin_define
define|#
directive|define
name|SDP_TX_POLL_MODER
value|16
end_define

begin_define
define|#
directive|define
name|SDP_TX_POLL_TIMEOUT
value|(HZ / 20)
end_define

begin_define
define|#
directive|define
name|SDP_NAGLE_TIMEOUT
value|(HZ / 10)
end_define

begin_define
define|#
directive|define
name|SDP_SRCAVAIL_CANCEL_TIMEOUT
value|(HZ * 5)
end_define

begin_define
define|#
directive|define
name|SDP_SRCAVAIL_ADV_TIMEOUT
value|(1 * HZ)
end_define

begin_define
define|#
directive|define
name|SDP_SRCAVAIL_PAYLOAD_LEN
value|1
end_define

begin_define
define|#
directive|define
name|SDP_RESOLVE_TIMEOUT
value|1000
end_define

begin_define
define|#
directive|define
name|SDP_ROUTE_TIMEOUT
value|1000
end_define

begin_define
define|#
directive|define
name|SDP_RETRY_COUNT
value|5
end_define

begin_define
define|#
directive|define
name|SDP_KEEPALIVE_TIME
value|(120 * 60 * HZ)
end_define

begin_define
define|#
directive|define
name|SDP_FIN_WAIT_TIMEOUT
value|(60 * HZ)
end_define

begin_comment
comment|/* like TCP_FIN_TIMEOUT */
end_comment

begin_define
define|#
directive|define
name|SDP_TX_SIZE
value|0x40
end_define

begin_define
define|#
directive|define
name|SDP_RX_SIZE
value|0x40
end_define

begin_define
define|#
directive|define
name|SDP_FMR_SIZE
value|(MIN(0x1000, PAGE_SIZE) / sizeof(u64))
end_define

begin_define
define|#
directive|define
name|SDP_FMR_POOL_SIZE
value|1024
end_define

begin_define
define|#
directive|define
name|SDP_FMR_DIRTY_SIZE
value|( SDP_FMR_POOL_SIZE / 4 )
end_define

begin_define
define|#
directive|define
name|SDP_MAX_RDMA_READ_LEN
value|(PAGE_SIZE * (SDP_FMR_SIZE - 2))
end_define

begin_comment
comment|/* mb inlined data len - rest will be rx'ed into frags */
end_comment

begin_define
define|#
directive|define
name|SDP_HEAD_SIZE
value|(sizeof(struct sdp_bsdh))
end_define

begin_comment
comment|/* limit tx payload len, if the sink supports bigger buffers than the source  * can handle.  * or rx fragment size (limited by sge->length size) */
end_comment

begin_define
define|#
directive|define
name|SDP_MAX_PACKET
value|(1<< 16)
end_define

begin_define
define|#
directive|define
name|SDP_MAX_PAYLOAD
value|(SDP_MAX_PACKET - SDP_HEAD_SIZE)
end_define

begin_define
define|#
directive|define
name|SDP_MAX_RECV_SGES
value|(SDP_MAX_PACKET / MCLBYTES)
end_define

begin_define
define|#
directive|define
name|SDP_MAX_SEND_SGES
value|(SDP_MAX_PACKET / MCLBYTES) + 2
end_define

begin_define
define|#
directive|define
name|SDP_NUM_WC
value|4
end_define

begin_define
define|#
directive|define
name|SDP_DEF_ZCOPY_THRESH
value|64*1024
end_define

begin_define
define|#
directive|define
name|SDP_MIN_ZCOPY_THRESH
value|PAGE_SIZE
end_define

begin_define
define|#
directive|define
name|SDP_MAX_ZCOPY_THRESH
value|1048576
end_define

begin_define
define|#
directive|define
name|SDP_OP_RECV
value|0x800000000LL
end_define

begin_define
define|#
directive|define
name|SDP_OP_SEND
value|0x400000000LL
end_define

begin_define
define|#
directive|define
name|SDP_OP_RDMA
value|0x200000000LL
end_define

begin_define
define|#
directive|define
name|SDP_OP_NOP
value|0x100000000LL
end_define

begin_comment
comment|/* how long (in jiffies) to block sender till tx completion*/
end_comment

begin_define
define|#
directive|define
name|SDP_BZCOPY_POLL_TIMEOUT
value|(HZ / 10)
end_define

begin_define
define|#
directive|define
name|SDP_AUTO_CONF
value|0xffff
end_define

begin_define
define|#
directive|define
name|AUTO_MOD_DELAY
value|(HZ / 4)
end_define

begin_struct
struct|struct
name|sdp_mb_cb
block|{
name|__u32
name|seq
decl_stmt|;
comment|/* Starting sequence number	*/
name|struct
name|bzcopy_state
modifier|*
name|bz
decl_stmt|;
name|struct
name|rx_srcavail_state
modifier|*
name|rx_sa
decl_stmt|;
name|struct
name|tx_srcavail_state
modifier|*
name|tx_sa
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|M_PUSH
value|M_PROTO1
end_define

begin_comment
comment|/* Do a 'push'. */
end_comment

begin_define
define|#
directive|define
name|M_URG
value|M_PROTO2
end_define

begin_comment
comment|/* Mark as urgent (oob). */
end_comment

begin_define
define|#
directive|define
name|SDP_SKB_CB
parameter_list|(
name|__mb
parameter_list|)
value|((struct sdp_mb_cb *)&((__mb)->cb[0]))
end_define

begin_define
define|#
directive|define
name|BZCOPY_STATE
parameter_list|(
name|mb
parameter_list|)
value|(SDP_SKB_CB(mb)->bz)
end_define

begin_define
define|#
directive|define
name|RX_SRCAVAIL_STATE
parameter_list|(
name|mb
parameter_list|)
value|(SDP_SKB_CB(mb)->rx_sa)
end_define

begin_define
define|#
directive|define
name|TX_SRCAVAIL_STATE
parameter_list|(
name|mb
parameter_list|)
value|(SDP_SKB_CB(mb)->tx_sa)
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|MIN
end_ifndef

begin_define
define|#
directive|define
name|MIN
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(a< b ? a : b)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ring_head
parameter_list|(
name|ring
parameter_list|)
value|(atomic_read(&(ring).head))
end_define

begin_define
define|#
directive|define
name|ring_tail
parameter_list|(
name|ring
parameter_list|)
value|(atomic_read(&(ring).tail))
end_define

begin_define
define|#
directive|define
name|ring_posted
parameter_list|(
name|ring
parameter_list|)
value|(ring_head(ring) - ring_tail(ring))
end_define

begin_define
define|#
directive|define
name|rx_ring_posted
parameter_list|(
name|ssk
parameter_list|)
value|ring_posted(ssk->rx_ring)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|SDP_ZCOPY
end_ifdef

begin_define
define|#
directive|define
name|tx_ring_posted
parameter_list|(
name|ssk
parameter_list|)
value|(ring_posted(ssk->tx_ring) + \ 	(ssk->tx_ring.rdma_inflight ? ssk->tx_ring.rdma_inflight->busy : 0))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|tx_ring_posted
parameter_list|(
name|ssk
parameter_list|)
value|ring_posted(ssk->tx_ring)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|int
name|sdp_zcopy_thresh
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|rcvbuf_initial_size
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|workqueue_struct
modifier|*
name|rx_comp_wq
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|ib_client
name|sdp_client
decl_stmt|;
end_decl_stmt

begin_enum
enum|enum
name|sdp_mid
block|{
name|SDP_MID_HELLO
init|=
literal|0x0
block|,
name|SDP_MID_HELLO_ACK
init|=
literal|0x1
block|,
name|SDP_MID_DISCONN
init|=
literal|0x2
block|,
name|SDP_MID_ABORT
init|=
literal|0x3
block|,
name|SDP_MID_SENDSM
init|=
literal|0x4
block|,
name|SDP_MID_RDMARDCOMPL
init|=
literal|0x6
block|,
name|SDP_MID_SRCAVAIL_CANCEL
init|=
literal|0x8
block|,
name|SDP_MID_CHRCVBUF
init|=
literal|0xB
block|,
name|SDP_MID_CHRCVBUF_ACK
init|=
literal|0xC
block|,
name|SDP_MID_SINKAVAIL
init|=
literal|0xFD
block|,
name|SDP_MID_SRCAVAIL
init|=
literal|0xFE
block|,
name|SDP_MID_DATA
init|=
literal|0xFF
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|sdp_flags
block|{
name|SDP_OOB_PRES
init|=
literal|1
operator|<<
literal|0
block|,
name|SDP_OOB_PEND
init|=
literal|1
operator|<<
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|SDP_MIN_TX_CREDITS
init|=
literal|2
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|SDP_ERR_ERROR
init|=
operator|-
literal|4
block|,
name|SDP_ERR_FAULT
init|=
operator|-
literal|3
block|,
name|SDP_NEW_SEG
init|=
operator|-
literal|2
block|,
name|SDP_DO_WAIT_MEM
init|=
operator|-
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|sdp_bsdh
block|{
name|u8
name|mid
decl_stmt|;
name|u8
name|flags
decl_stmt|;
name|__u16
name|bufs
decl_stmt|;
name|__u32
name|len
decl_stmt|;
name|__u32
name|mseq
decl_stmt|;
name|__u32
name|mseq_ack
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
struct|;
end_struct

begin_union
union|union
name|cma_ip_addr
block|{
name|struct
name|in6_addr
name|ip6
decl_stmt|;
struct|struct
block|{
name|__u32
name|pad
index|[
literal|3
index|]
decl_stmt|;
name|__u32
name|addr
decl_stmt|;
block|}
name|ip4
struct|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
union|;
end_union

begin_comment
comment|/* TODO: too much? Can I avoid having the src/dst and port here? */
end_comment

begin_struct
struct|struct
name|sdp_hh
block|{
name|struct
name|sdp_bsdh
name|bsdh
decl_stmt|;
name|u8
name|majv_minv
decl_stmt|;
name|u8
name|ipv_cap
decl_stmt|;
name|u8
name|rsvd1
decl_stmt|;
name|u8
name|max_adverts
decl_stmt|;
name|__u32
name|desremrcvsz
decl_stmt|;
name|__u32
name|localrcvsz
decl_stmt|;
name|__u16
name|port
decl_stmt|;
name|__u16
name|rsvd2
decl_stmt|;
name|union
name|cma_ip_addr
name|src_addr
decl_stmt|;
name|union
name|cma_ip_addr
name|dst_addr
decl_stmt|;
name|u8
name|rsvd3
index|[
name|IB_CM_REQ_PRIVATE_DATA_SIZE
operator|-
sizeof|sizeof
argument_list|(
expr|struct
name|sdp_bsdh
argument_list|)
operator|-
literal|48
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|sdp_hah
block|{
name|struct
name|sdp_bsdh
name|bsdh
decl_stmt|;
name|u8
name|majv_minv
decl_stmt|;
name|u8
name|ipv_cap
decl_stmt|;
name|u8
name|rsvd1
decl_stmt|;
name|u8
name|ext_max_adverts
decl_stmt|;
name|__u32
name|actrcvsz
decl_stmt|;
name|u8
name|rsvd2
index|[
name|IB_CM_REP_PRIVATE_DATA_SIZE
operator|-
sizeof|sizeof
argument_list|(
expr|struct
name|sdp_bsdh
argument_list|)
operator|-
literal|8
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|sdp_rrch
block|{
name|__u32
name|len
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|sdp_srcah
block|{
name|__u32
name|len
decl_stmt|;
name|__u32
name|rkey
decl_stmt|;
name|__u64
name|vaddr
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|sdp_buf
block|{
name|struct
name|mbuf
modifier|*
name|mb
decl_stmt|;
name|u64
name|mapping
index|[
name|SDP_MAX_SEND_SGES
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|sdp_chrecvbuf
block|{
name|u32
name|size
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|)
argument_list|)
struct|;
end_struct

begin_comment
comment|/* Context used for synchronous zero copy bcopy (BZCOPY) */
end_comment

begin_struct
struct|struct
name|bzcopy_state
block|{
name|unsigned
name|char
name|__user
modifier|*
name|u_base
decl_stmt|;
name|int
name|u_len
decl_stmt|;
name|int
name|left
decl_stmt|;
name|int
name|page_cnt
decl_stmt|;
name|int
name|cur_page
decl_stmt|;
name|int
name|cur_offset
decl_stmt|;
name|int
name|busy
decl_stmt|;
name|struct
name|sdp_sock
modifier|*
name|ssk
decl_stmt|;
name|struct
name|page
modifier|*
modifier|*
name|pages
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|rx_sa_flag
block|{
name|RX_SA_ABORTED
init|=
literal|2
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|tx_sa_flag
block|{
name|TX_SA_SENDSM
init|=
literal|0x01
block|,
name|TX_SA_CROSS_SEND
init|=
literal|0x02
block|,
name|TX_SA_INTRRUPTED
init|=
literal|0x04
block|,
name|TX_SA_TIMEDOUT
init|=
literal|0x08
block|,
name|TX_SA_ERROR
init|=
literal|0x10
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|rx_srcavail_state
block|{
comment|/* Advertised buffer stuff */
name|u32
name|mseq
decl_stmt|;
name|u32
name|used
decl_stmt|;
name|u32
name|reported
decl_stmt|;
name|u32
name|len
decl_stmt|;
name|u32
name|rkey
decl_stmt|;
name|u64
name|vaddr
decl_stmt|;
comment|/* Dest buff info */
name|struct
name|ib_umem
modifier|*
name|umem
decl_stmt|;
name|struct
name|ib_pool_fmr
modifier|*
name|fmr
decl_stmt|;
comment|/* Utility */
name|u8
name|busy
decl_stmt|;
name|enum
name|rx_sa_flag
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tx_srcavail_state
block|{
comment|/* Data below 'busy' will be reset */
name|u8
name|busy
decl_stmt|;
name|struct
name|ib_umem
modifier|*
name|umem
decl_stmt|;
name|struct
name|ib_pool_fmr
modifier|*
name|fmr
decl_stmt|;
name|u32
name|bytes_sent
decl_stmt|;
name|u32
name|bytes_acked
decl_stmt|;
name|enum
name|tx_sa_flag
name|abort_flags
decl_stmt|;
name|u8
name|posted
decl_stmt|;
name|u32
name|mseq
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sdp_tx_ring
block|{
ifdef|#
directive|ifdef
name|SDP_ZCOPY
name|struct
name|rx_srcavail_state
modifier|*
name|rdma_inflight
decl_stmt|;
endif|#
directive|endif
name|struct
name|sdp_buf
modifier|*
name|buffer
decl_stmt|;
name|atomic_t
name|head
decl_stmt|;
name|atomic_t
name|tail
decl_stmt|;
name|struct
name|ib_cq
modifier|*
name|cq
decl_stmt|;
name|atomic_t
name|credits
decl_stmt|;
define|#
directive|define
name|tx_credits
parameter_list|(
name|ssk
parameter_list|)
value|(atomic_read(&ssk->tx_ring.credits))
name|struct
name|callout
name|timer
decl_stmt|;
name|u16
name|poll_cnt
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sdp_rx_ring
block|{
name|struct
name|sdp_buf
modifier|*
name|buffer
decl_stmt|;
name|atomic_t
name|head
decl_stmt|;
name|atomic_t
name|tail
decl_stmt|;
name|struct
name|ib_cq
modifier|*
name|cq
decl_stmt|;
name|int
name|destroyed
decl_stmt|;
name|struct
name|rwlock
name|destroyed_lock
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sdp_device
block|{
name|struct
name|ib_pd
modifier|*
name|pd
decl_stmt|;
name|struct
name|ib_mr
modifier|*
name|mr
decl_stmt|;
name|struct
name|ib_fmr_pool
modifier|*
name|fmr_pool
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sdp_moderation
block|{
name|unsigned
name|long
name|last_moder_packets
decl_stmt|;
name|unsigned
name|long
name|last_moder_tx_packets
decl_stmt|;
name|unsigned
name|long
name|last_moder_bytes
decl_stmt|;
name|unsigned
name|long
name|last_moder_jiffies
decl_stmt|;
name|int
name|last_moder_time
decl_stmt|;
name|u16
name|rx_usecs
decl_stmt|;
name|u16
name|rx_frames
decl_stmt|;
name|u16
name|tx_usecs
decl_stmt|;
name|u32
name|pkt_rate_low
decl_stmt|;
name|u16
name|rx_usecs_low
decl_stmt|;
name|u32
name|pkt_rate_high
decl_stmt|;
name|u16
name|rx_usecs_high
decl_stmt|;
name|u16
name|sample_interval
decl_stmt|;
name|u16
name|adaptive_rx_coal
decl_stmt|;
name|u32
name|msg_enable
decl_stmt|;
name|int
name|moder_cnt
decl_stmt|;
name|int
name|moder_time
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* These are flags fields. */
end_comment

begin_define
define|#
directive|define
name|SDP_TIMEWAIT
value|0x0001
end_define

begin_comment
comment|/* In ssk timewait state. */
end_comment

begin_define
define|#
directive|define
name|SDP_DROPPED
value|0x0002
end_define

begin_comment
comment|/* Socket has been dropped. */
end_comment

begin_define
define|#
directive|define
name|SDP_SOCKREF
value|0x0004
end_define

begin_comment
comment|/* Holding a sockref for close. */
end_comment

begin_define
define|#
directive|define
name|SDP_NODELAY
value|0x0008
end_define

begin_comment
comment|/* Disble nagle. */
end_comment

begin_define
define|#
directive|define
name|SDP_NEEDFIN
value|0x0010
end_define

begin_comment
comment|/* Send a fin on the next tx. */
end_comment

begin_define
define|#
directive|define
name|SDP_DREQWAIT
value|0x0020
end_define

begin_comment
comment|/* Waiting on DREQ. */
end_comment

begin_define
define|#
directive|define
name|SDP_DESTROY
value|0x0040
end_define

begin_comment
comment|/* Being destroyed. */
end_comment

begin_define
define|#
directive|define
name|SDP_DISCON
value|0x0080
end_define

begin_comment
comment|/* rdma_disconnect is owed. */
end_comment

begin_comment
comment|/* These are oobflags */
end_comment

begin_define
define|#
directive|define
name|SDP_HADOOB
value|0x0001
end_define

begin_comment
comment|/* Had OOB data. */
end_comment

begin_define
define|#
directive|define
name|SDP_HAVEOOB
value|0x0002
end_define

begin_comment
comment|/* Have OOB data. */
end_comment

begin_struct
struct|struct
name|sdp_sock
block|{
name|LIST_ENTRY
argument_list|(
argument|sdp_sock
argument_list|)
name|list
expr_stmt|;
name|struct
name|socket
modifier|*
name|socket
decl_stmt|;
name|struct
name|rdma_cm_id
modifier|*
name|id
decl_stmt|;
name|struct
name|ib_device
modifier|*
name|ib_device
decl_stmt|;
name|struct
name|sdp_device
modifier|*
name|sdp_dev
decl_stmt|;
name|struct
name|ib_qp
modifier|*
name|qp
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|callout
name|keep2msl
decl_stmt|;
comment|/* 2msl and keepalive timer. */
name|struct
name|callout
name|nagle_timer
decl_stmt|;
comment|/* timeout waiting for ack */
name|struct
name|ib_ucontext
name|context
decl_stmt|;
name|in_port_t
name|lport
decl_stmt|;
name|in_addr_t
name|laddr
decl_stmt|;
name|in_port_t
name|fport
decl_stmt|;
name|in_addr_t
name|faddr
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|oobflags
decl_stmt|;
comment|/* protected by rx lock. */
name|int
name|state
decl_stmt|;
name|int
name|softerror
decl_stmt|;
name|int
name|recv_bytes
decl_stmt|;
comment|/* Bytes per recv. buf including header */
name|int
name|xmit_size_goal
decl_stmt|;
name|char
name|iobc
decl_stmt|;
name|struct
name|sdp_rx_ring
name|rx_ring
decl_stmt|;
name|struct
name|sdp_tx_ring
name|tx_ring
decl_stmt|;
name|struct
name|rwlock
name|lock
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|rx_ctl_q
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|rx_ctl_tail
decl_stmt|;
name|int
name|qp_active
decl_stmt|;
comment|/* XXX Flag. */
name|int
name|max_sge
decl_stmt|;
name|struct
name|work_struct
name|rx_comp_work
decl_stmt|;
define|#
directive|define
name|rcv_nxt
parameter_list|(
name|ssk
parameter_list|)
value|atomic_read(&(ssk->rcv_nxt))
name|atomic_t
name|rcv_nxt
decl_stmt|;
comment|/* SDP specific */
name|atomic_t
name|mseq_ack
decl_stmt|;
define|#
directive|define
name|mseq_ack
parameter_list|(
name|ssk
parameter_list|)
value|(atomic_read(&ssk->mseq_ack))
name|unsigned
name|max_bufs
decl_stmt|;
comment|/* Initial buffers offered by other side */
name|unsigned
name|min_bufs
decl_stmt|;
comment|/* Low water mark to wake senders */
name|unsigned
name|long
name|nagle_last_unacked
decl_stmt|;
comment|/* mseq of lastest unacked packet */
name|atomic_t
name|remote_credits
decl_stmt|;
define|#
directive|define
name|remote_credits
parameter_list|(
name|ssk
parameter_list|)
value|(atomic_read(&ssk->remote_credits))
name|int
name|poll_cq
decl_stmt|;
comment|/* SDP slow start */
name|int
name|recv_request_head
decl_stmt|;
comment|/* mark the rx_head when the resize request 				   was received */
name|int
name|recv_request
decl_stmt|;
comment|/* XXX flag if request to resize was received */
name|unsigned
name|long
name|tx_packets
decl_stmt|;
name|unsigned
name|long
name|rx_packets
decl_stmt|;
name|unsigned
name|long
name|tx_bytes
decl_stmt|;
name|unsigned
name|long
name|rx_bytes
decl_stmt|;
name|struct
name|sdp_moderation
name|auto_mod
decl_stmt|;
name|struct
name|task
name|shutdown_task
decl_stmt|;
ifdef|#
directive|ifdef
name|SDP_ZCOPY
name|struct
name|tx_srcavail_state
modifier|*
name|tx_sa
decl_stmt|;
name|struct
name|rx_srcavail_state
modifier|*
name|rx_sa
decl_stmt|;
name|spinlock_t
name|tx_sa_lock
decl_stmt|;
name|struct
name|delayed_work
name|srcavail_cancel_work
decl_stmt|;
name|int
name|srcavail_cancel_mseq
decl_stmt|;
comment|/* ZCOPY data: -1:use global; 0:disable zcopy;>0: zcopy threshold */
name|int
name|zcopy_thresh
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|sdp_sk
parameter_list|(
name|so
parameter_list|)
value|((struct sdp_sock *)(so->so_pcb))
end_define

begin_define
define|#
directive|define
name|SDP_RLOCK
parameter_list|(
name|ssk
parameter_list|)
value|rw_rlock(&(ssk)->lock)
end_define

begin_define
define|#
directive|define
name|SDP_WLOCK
parameter_list|(
name|ssk
parameter_list|)
value|rw_wlock(&(ssk)->lock)
end_define

begin_define
define|#
directive|define
name|SDP_RUNLOCK
parameter_list|(
name|ssk
parameter_list|)
value|rw_runlock(&(ssk)->lock)
end_define

begin_define
define|#
directive|define
name|SDP_WUNLOCK
parameter_list|(
name|ssk
parameter_list|)
value|rw_wunlock(&(ssk)->lock)
end_define

begin_define
define|#
directive|define
name|SDP_WLOCK_ASSERT
parameter_list|(
name|ssk
parameter_list|)
value|rw_assert(&(ssk)->lock, RA_WLOCKED)
end_define

begin_define
define|#
directive|define
name|SDP_RLOCK_ASSERT
parameter_list|(
name|ssk
parameter_list|)
value|rw_assert(&(ssk)->lock, RA_RLOCKED)
end_define

begin_define
define|#
directive|define
name|SDP_LOCK_ASSERT
parameter_list|(
name|ssk
parameter_list|)
value|rw_assert(&(ssk)->lock, RA_LOCKED)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|tx_sa_reset
parameter_list|(
name|struct
name|tx_srcavail_state
modifier|*
name|tx_sa
parameter_list|)
block|{
name|memset
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|&
name|tx_sa
operator|->
name|busy
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|tx_sa
argument_list|)
operator|-
name|offsetof
argument_list|(
name|typeof
argument_list|(
operator|*
name|tx_sa
argument_list|)
argument_list|,
name|busy
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rx_ring_unlock
parameter_list|(
name|struct
name|sdp_rx_ring
modifier|*
name|rx_ring
parameter_list|)
block|{
name|rw_runlock
argument_list|(
operator|&
name|rx_ring
operator|->
name|destroyed_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|rx_ring_trylock
parameter_list|(
name|struct
name|sdp_rx_ring
modifier|*
name|rx_ring
parameter_list|)
block|{
name|rw_rlock
argument_list|(
operator|&
name|rx_ring
operator|->
name|destroyed_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|rx_ring
operator|->
name|destroyed
condition|)
block|{
name|rx_ring_unlock
argument_list|(
name|rx_ring
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
return|return
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|rx_ring_destroy_lock
parameter_list|(
name|struct
name|sdp_rx_ring
modifier|*
name|rx_ring
parameter_list|)
block|{
name|rw_wlock
argument_list|(
operator|&
name|rx_ring
operator|->
name|destroyed_lock
argument_list|)
expr_stmt|;
name|rx_ring
operator|->
name|destroyed
operator|=
literal|1
expr_stmt|;
name|rw_wunlock
argument_list|(
operator|&
name|rx_ring
operator|->
name|destroyed_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sdp_arm_rx_cq
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
block|{
name|sdp_prf
argument_list|(
name|ssk
operator|->
name|socket
argument_list|,
name|NULL
argument_list|,
literal|"Arming RX cq"
argument_list|)
expr_stmt|;
name|sdp_dbg_data
argument_list|(
name|ssk
operator|->
name|socket
argument_list|,
literal|"Arming RX cq\n"
argument_list|)
expr_stmt|;
name|ib_req_notify_cq
argument_list|(
name|ssk
operator|->
name|rx_ring
operator|.
name|cq
argument_list|,
name|IB_CQ_NEXT_COMP
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|sdp_arm_tx_cq
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
block|{
name|sdp_prf
argument_list|(
name|ssk
operator|->
name|socket
argument_list|,
name|NULL
argument_list|,
literal|"Arming TX cq"
argument_list|)
expr_stmt|;
name|sdp_dbg_data
argument_list|(
name|ssk
operator|->
name|socket
argument_list|,
literal|"Arming TX cq. credits: %d, posted: %d\n"
argument_list|,
name|tx_credits
argument_list|(
name|ssk
argument_list|)
argument_list|,
name|tx_ring_posted
argument_list|(
name|ssk
argument_list|)
argument_list|)
expr_stmt|;
name|ib_req_notify_cq
argument_list|(
name|ssk
operator|->
name|tx_ring
operator|.
name|cq
argument_list|,
name|IB_CQ_NEXT_COMP
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* return the min of:  * - tx credits  * - free slots in tx_ring (not including SDP_MIN_TX_CREDITS  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|tx_slots_free
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
block|{
name|int
name|min_free
decl_stmt|;
name|min_free
operator|=
name|MIN
argument_list|(
name|tx_credits
argument_list|(
name|ssk
argument_list|)
argument_list|,
name|SDP_TX_SIZE
operator|-
name|tx_ring_posted
argument_list|(
name|ssk
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|min_free
operator|<
name|SDP_MIN_TX_CREDITS
condition|)
return|return
literal|0
return|;
return|return
name|min_free
operator|-
name|SDP_MIN_TX_CREDITS
return|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* utilities */
end_comment

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|mid2str
parameter_list|(
name|int
name|mid
parameter_list|)
block|{
define|#
directive|define
name|ENUM2STR
parameter_list|(
name|e
parameter_list|)
value|[e] = #e
specifier|static
name|char
modifier|*
name|mid2str
index|[]
init|=
block|{
name|ENUM2STR
argument_list|(
name|SDP_MID_HELLO
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_HELLO_ACK
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_ABORT
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_DISCONN
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_SENDSM
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_RDMARDCOMPL
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_SRCAVAIL_CANCEL
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_CHRCVBUF
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_CHRCVBUF_ACK
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_DATA
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_SRCAVAIL
argument_list|)
block|,
name|ENUM2STR
argument_list|(
name|SDP_MID_SINKAVAIL
argument_list|)
block|, 	}
decl_stmt|;
if|if
condition|(
name|mid
operator|>=
name|ARRAY_SIZE
argument_list|(
name|mid2str
argument_list|)
condition|)
return|return
name|NULL
return|;
return|return
name|mid2str
index|[
name|mid
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mbuf
modifier|*
name|sdp_alloc_mb
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|u8
name|mid
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|wait
parameter_list|)
block|{
name|struct
name|sdp_bsdh
modifier|*
name|h
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mb
decl_stmt|;
name|MGETHDR
argument_list|(
name|mb
argument_list|,
name|wait
argument_list|,
name|MT_DATA
argument_list|)
expr_stmt|;
if|if
condition|(
name|mb
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|mb
operator|->
name|m_pkthdr
operator|.
name|len
operator|=
name|mb
operator|->
name|m_len
operator|=
sizeof|sizeof
argument_list|(
expr|struct
name|sdp_bsdh
argument_list|)
expr_stmt|;
name|h
operator|=
name|mtod
argument_list|(
name|mb
argument_list|,
expr|struct
name|sdp_bsdh
operator|*
argument_list|)
expr_stmt|;
name|h
operator|->
name|mid
operator|=
name|mid
expr_stmt|;
return|return
name|mb
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mbuf
modifier|*
name|sdp_alloc_mb_data
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|int
name|wait
parameter_list|)
block|{
return|return
name|sdp_alloc_mb
argument_list|(
name|sk
argument_list|,
name|SDP_MID_DATA
argument_list|,
literal|0
argument_list|,
name|wait
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mbuf
modifier|*
name|sdp_alloc_mb_disconnect
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|int
name|wait
parameter_list|)
block|{
return|return
name|sdp_alloc_mb
argument_list|(
name|sk
argument_list|,
name|SDP_MID_DISCONN
argument_list|,
literal|0
argument_list|,
name|wait
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|mb_put
parameter_list|(
name|struct
name|mbuf
modifier|*
name|mb
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|uint8_t
modifier|*
name|data
decl_stmt|;
name|data
operator|=
name|mb
operator|->
name|m_data
expr_stmt|;
name|data
operator|+=
name|mb
operator|->
name|m_len
expr_stmt|;
name|mb
operator|->
name|m_len
operator|+=
name|len
expr_stmt|;
return|return
operator|(
name|void
operator|*
operator|)
name|data
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mbuf
modifier|*
name|sdp_alloc_mb_chrcvbuf_ack
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|wait
parameter_list|)
block|{
name|struct
name|mbuf
modifier|*
name|mb
decl_stmt|;
name|struct
name|sdp_chrecvbuf
modifier|*
name|resp_size
decl_stmt|;
name|mb
operator|=
name|sdp_alloc_mb
argument_list|(
name|sk
argument_list|,
name|SDP_MID_CHRCVBUF_ACK
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|resp_size
argument_list|)
argument_list|,
name|wait
argument_list|)
expr_stmt|;
if|if
condition|(
name|mb
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|resp_size
operator|=
operator|(
expr|struct
name|sdp_chrecvbuf
operator|*
operator|)
name|mb_put
argument_list|(
name|mb
argument_list|,
sizeof|sizeof
expr|*
name|resp_size
argument_list|)
expr_stmt|;
name|resp_size
operator|->
name|size
operator|=
name|htonl
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|mb
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mbuf
modifier|*
name|sdp_alloc_mb_srcavail
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|u32
name|len
parameter_list|,
name|u32
name|rkey
parameter_list|,
name|u64
name|vaddr
parameter_list|,
name|int
name|wait
parameter_list|)
block|{
name|struct
name|mbuf
modifier|*
name|mb
decl_stmt|;
name|struct
name|sdp_srcah
modifier|*
name|srcah
decl_stmt|;
name|mb
operator|=
name|sdp_alloc_mb
argument_list|(
name|sk
argument_list|,
name|SDP_MID_SRCAVAIL
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|srcah
argument_list|)
argument_list|,
name|wait
argument_list|)
expr_stmt|;
if|if
condition|(
name|mb
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|srcah
operator|=
operator|(
expr|struct
name|sdp_srcah
operator|*
operator|)
name|mb_put
argument_list|(
name|mb
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|srcah
argument_list|)
argument_list|)
expr_stmt|;
name|srcah
operator|->
name|len
operator|=
name|htonl
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|srcah
operator|->
name|rkey
operator|=
name|htonl
argument_list|(
name|rkey
argument_list|)
expr_stmt|;
name|srcah
operator|->
name|vaddr
operator|=
name|cpu_to_be64
argument_list|(
name|vaddr
argument_list|)
expr_stmt|;
return|return
name|mb
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mbuf
modifier|*
name|sdp_alloc_mb_srcavail_cancel
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|int
name|wait
parameter_list|)
block|{
return|return
name|sdp_alloc_mb
argument_list|(
name|sk
argument_list|,
name|SDP_MID_SRCAVAIL_CANCEL
argument_list|,
literal|0
argument_list|,
name|wait
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mbuf
modifier|*
name|sdp_alloc_mb_rdmardcompl
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|u32
name|len
parameter_list|,
name|int
name|wait
parameter_list|)
block|{
name|struct
name|mbuf
modifier|*
name|mb
decl_stmt|;
name|struct
name|sdp_rrch
modifier|*
name|rrch
decl_stmt|;
name|mb
operator|=
name|sdp_alloc_mb
argument_list|(
name|sk
argument_list|,
name|SDP_MID_RDMARDCOMPL
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|rrch
argument_list|)
argument_list|,
name|wait
argument_list|)
expr_stmt|;
if|if
condition|(
name|mb
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|rrch
operator|=
operator|(
expr|struct
name|sdp_rrch
operator|*
operator|)
name|mb_put
argument_list|(
name|mb
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|rrch
argument_list|)
argument_list|)
expr_stmt|;
name|rrch
operator|->
name|len
operator|=
name|htonl
argument_list|(
name|len
argument_list|)
expr_stmt|;
return|return
name|mb
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mbuf
modifier|*
name|sdp_alloc_mb_sendsm
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|int
name|wait
parameter_list|)
block|{
return|return
name|sdp_alloc_mb
argument_list|(
name|sk
argument_list|,
name|SDP_MID_SENDSM
argument_list|,
literal|0
argument_list|,
name|wait
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|sdp_tx_ring_slots_left
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
block|{
return|return
name|SDP_TX_SIZE
operator|-
name|tx_ring_posted
argument_list|(
name|ssk
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|credit_update_needed
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
block|{
name|int
name|c
decl_stmt|;
name|c
operator|=
name|remote_credits
argument_list|(
name|ssk
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|c
operator|>
name|SDP_MIN_TX_CREDITS
argument_list|)
condition|)
name|c
operator|+=
name|c
operator|/
literal|2
expr_stmt|;
return|return
name|unlikely
argument_list|(
name|c
operator|<
name|rx_ring_posted
argument_list|(
name|ssk
argument_list|)
argument_list|)
operator|&&
name|likely
argument_list|(
name|tx_credits
argument_list|(
name|ssk
argument_list|)
operator|>
literal|0
argument_list|)
operator|&&
name|likely
argument_list|(
name|sdp_tx_ring_slots_left
argument_list|(
name|ssk
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|SDPSTATS_COUNTER_INC
parameter_list|(
name|stat
parameter_list|)
end_define

begin_define
define|#
directive|define
name|SDPSTATS_COUNTER_ADD
parameter_list|(
name|stat
parameter_list|,
name|val
parameter_list|)
end_define

begin_define
define|#
directive|define
name|SDPSTATS_COUNTER_MID_INC
parameter_list|(
name|stat
parameter_list|,
name|mid
parameter_list|)
end_define

begin_define
define|#
directive|define
name|SDPSTATS_HIST_LINEAR
parameter_list|(
name|stat
parameter_list|,
name|size
parameter_list|)
end_define

begin_define
define|#
directive|define
name|SDPSTATS_HIST
parameter_list|(
name|stat
parameter_list|,
name|size
parameter_list|)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|sdp_cleanup_sdp_buf
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|struct
name|sdp_buf
modifier|*
name|sbuf
parameter_list|,
name|enum
name|dma_data_direction
name|dir
parameter_list|)
block|{
name|struct
name|ib_device
modifier|*
name|dev
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mb
decl_stmt|;
name|int
name|i
decl_stmt|;
name|dev
operator|=
name|ssk
operator|->
name|ib_device
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|mb
operator|=
name|sbuf
operator|->
name|mb
init|;
name|mb
operator|!=
name|NULL
condition|;
name|mb
operator|=
name|mb
operator|->
name|m_next
operator|,
name|i
operator|++
control|)
name|ib_dma_unmap_single
argument_list|(
name|dev
argument_list|,
name|sbuf
operator|->
name|mapping
index|[
name|i
index|]
argument_list|,
name|mb
operator|->
name|m_len
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* sdp_main.c */
end_comment

begin_function_decl
name|void
name|sdp_set_default_moderation
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_start_keepalive_timer
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_urg
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|struct
name|mbuf
modifier|*
name|mb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_cancel_dreq_wait_timeout
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_abort
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|sdp_sock
modifier|*
name|sdp_notify
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* sdp_cma.c */
end_comment

begin_function_decl
name|int
name|sdp_cma_handler
parameter_list|(
name|struct
name|rdma_cm_id
modifier|*
parameter_list|,
name|struct
name|rdma_cm_event
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* sdp_tx.c */
end_comment

begin_function_decl
name|int
name|sdp_tx_ring_create
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|struct
name|ib_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_tx_ring_destroy
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_xmit_poll
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|int
name|force
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_post_send
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|struct
name|mbuf
modifier|*
name|mb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_post_sends
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|int
name|wait
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_post_keepalive
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* sdp_rx.c */
end_comment

begin_function_decl
name|void
name|sdp_rx_ring_init
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_rx_ring_create
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|struct
name|ib_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_rx_ring_destroy
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_resize_buffers
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|u32
name|new_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_init_buffers
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|u32
name|new_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_do_posts
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_rx_comp_full
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* sdp_zcopy.c */
end_comment

begin_struct_decl
struct_decl|struct
name|kiocb
struct_decl|;
end_struct_decl

begin_function_decl
name|int
name|sdp_sendmsg_zcopy
parameter_list|(
name|struct
name|kiocb
modifier|*
name|iocb
parameter_list|,
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|struct
name|iovec
modifier|*
name|iov
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_handle_srcavail
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|struct
name|sdp_srcah
modifier|*
name|srcah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_handle_sendsm
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|u32
name|mseq_ack
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_handle_rdma_read_compl
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|u32
name|mseq_ack
parameter_list|,
name|u32
name|bytes_completed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_handle_rdma_read_cqe
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_rdma_to_iovec
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|,
name|struct
name|iovec
modifier|*
name|iov
parameter_list|,
name|struct
name|mbuf
modifier|*
name|mb
parameter_list|,
name|unsigned
name|long
modifier|*
name|used
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_post_rdma_rd_compl
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|,
name|struct
name|rx_srcavail_state
modifier|*
name|rx_sa
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_post_sendsm
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|srcavail_cancel_timeout
parameter_list|(
name|struct
name|work_struct
modifier|*
name|work
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_abort_srcavail
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sdp_abort_rdma_read
parameter_list|(
name|struct
name|socket
modifier|*
name|sk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sdp_process_rx
parameter_list|(
name|struct
name|sdp_sock
modifier|*
name|ssk
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

