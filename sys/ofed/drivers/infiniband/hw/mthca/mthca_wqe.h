begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005 Cisco Systems. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MTHCA_WQE_H
end_ifndef

begin_define
define|#
directive|define
name|MTHCA_WQE_H
end_define

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_enum
enum|enum
block|{
name|MTHCA_NEXT_DBD
init|=
literal|1
operator|<<
literal|7
block|,
name|MTHCA_NEXT_FENCE
init|=
literal|1
operator|<<
literal|6
block|,
name|MTHCA_NEXT_CQ_UPDATE
init|=
literal|1
operator|<<
literal|3
block|,
name|MTHCA_NEXT_EVENT_GEN
init|=
literal|1
operator|<<
literal|2
block|,
name|MTHCA_NEXT_SOLICIT
init|=
literal|1
operator|<<
literal|1
block|,
name|MTHCA_NEXT_IP_CSUM
init|=
literal|1
operator|<<
literal|4
block|,
name|MTHCA_NEXT_TCP_UDP_CSUM
init|=
literal|1
operator|<<
literal|5
block|,
name|MTHCA_MLX_VL15
init|=
literal|1
operator|<<
literal|17
block|,
name|MTHCA_MLX_SLR
init|=
literal|1
operator|<<
literal|16
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|MTHCA_INVAL_LKEY
init|=
literal|0x100
block|,
name|MTHCA_TAVOR_MAX_WQES_PER_RECV_DB
init|=
literal|256
block|,
name|MTHCA_ARBEL_MAX_WQES_PER_SEND_DB
init|=
literal|255
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mthca_next_seg
block|{
name|__be32
name|nda_op
decl_stmt|;
comment|/* [31:6] next WQE [4:0] next opcode */
name|__be32
name|ee_nds
decl_stmt|;
comment|/* [31:8] next EE  [7] DBD [6] F [5:0] next WQE size */
name|__be32
name|flags
decl_stmt|;
comment|/* [3] CQ [2] Event [1] Solicit */
name|__be32
name|imm
decl_stmt|;
comment|/* immediate data */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_tavor_ud_seg
block|{
name|u32
name|reserved1
decl_stmt|;
name|__be32
name|lkey
decl_stmt|;
name|__be64
name|av_addr
decl_stmt|;
name|u32
name|reserved2
index|[
literal|4
index|]
decl_stmt|;
name|__be32
name|dqpn
decl_stmt|;
name|__be32
name|qkey
decl_stmt|;
name|u32
name|reserved3
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_arbel_ud_seg
block|{
name|__be32
name|av
index|[
literal|8
index|]
decl_stmt|;
name|__be32
name|dqpn
decl_stmt|;
name|__be32
name|qkey
decl_stmt|;
name|u32
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_bind_seg
block|{
name|__be32
name|flags
decl_stmt|;
comment|/* [31] Atomic [30] rem write [29] rem read */
name|u32
name|reserved
decl_stmt|;
name|__be32
name|new_rkey
decl_stmt|;
name|__be32
name|lkey
decl_stmt|;
name|__be64
name|addr
decl_stmt|;
name|__be64
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_raddr_seg
block|{
name|__be64
name|raddr
decl_stmt|;
name|__be32
name|rkey
decl_stmt|;
name|u32
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_atomic_seg
block|{
name|__be64
name|swap_add
decl_stmt|;
name|__be64
name|compare
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_data_seg
block|{
name|__be32
name|byte_count
decl_stmt|;
name|__be32
name|lkey
decl_stmt|;
name|__be64
name|addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_mlx_seg
block|{
name|__be32
name|nda_op
decl_stmt|;
name|__be32
name|nds
decl_stmt|;
name|__be32
name|flags
decl_stmt|;
comment|/* [17] VL15 [16] SLR [14:12] static rate 				   [11:8] SL [3] C [2] E */
name|__be16
name|rlid
decl_stmt|;
name|__be16
name|vcrc
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__always_inline
name|void
name|mthca_set_data_seg
parameter_list|(
name|struct
name|mthca_data_seg
modifier|*
name|dseg
parameter_list|,
name|struct
name|ib_sge
modifier|*
name|sg
parameter_list|)
block|{
name|dseg
operator|->
name|byte_count
operator|=
name|cpu_to_be32
argument_list|(
name|sg
operator|->
name|length
argument_list|)
expr_stmt|;
name|dseg
operator|->
name|lkey
operator|=
name|cpu_to_be32
argument_list|(
name|sg
operator|->
name|lkey
argument_list|)
expr_stmt|;
name|dseg
operator|->
name|addr
operator|=
name|cpu_to_be64
argument_list|(
name|sg
operator|->
name|addr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__always_inline
name|void
name|mthca_set_data_seg_inval
parameter_list|(
name|struct
name|mthca_data_seg
modifier|*
name|dseg
parameter_list|)
block|{
name|dseg
operator|->
name|byte_count
operator|=
literal|0
expr_stmt|;
name|dseg
operator|->
name|lkey
operator|=
name|cpu_to_be32
argument_list|(
name|MTHCA_INVAL_LKEY
argument_list|)
expr_stmt|;
name|dseg
operator|->
name|addr
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MTHCA_WQE_H */
end_comment

end_unit

