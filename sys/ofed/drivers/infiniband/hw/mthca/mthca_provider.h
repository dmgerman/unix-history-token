begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004 Topspin Communications.  All rights reserved.  * Copyright (c) 2005, 2006 Cisco Systems.  All rights reserved.  * Copyright (c) 2005 Mellanox Technologies. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MTHCA_PROVIDER_H
end_ifndef

begin_define
define|#
directive|define
name|MTHCA_PROVIDER_H
end_define

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_pack.h>
end_include

begin_define
define|#
directive|define
name|MTHCA_MPT_FLAG_ATOMIC
value|(1<< 14)
end_define

begin_define
define|#
directive|define
name|MTHCA_MPT_FLAG_REMOTE_WRITE
value|(1<< 13)
end_define

begin_define
define|#
directive|define
name|MTHCA_MPT_FLAG_REMOTE_READ
value|(1<< 12)
end_define

begin_define
define|#
directive|define
name|MTHCA_MPT_FLAG_LOCAL_WRITE
value|(1<< 11)
end_define

begin_define
define|#
directive|define
name|MTHCA_MPT_FLAG_LOCAL_READ
value|(1<< 10)
end_define

begin_struct
struct|struct
name|mthca_buf_list
block|{
name|void
modifier|*
name|buf
decl_stmt|;
name|DECLARE_PCI_UNMAP_ADDR
argument_list|(
argument|mapping
argument_list|)
block|}
struct|;
end_struct

begin_union
union|union
name|mthca_buf
block|{
name|struct
name|mthca_buf_list
name|direct
decl_stmt|;
name|struct
name|mthca_buf_list
modifier|*
name|page_list
decl_stmt|;
block|}
union|;
end_union

begin_struct
struct|struct
name|mthca_uar
block|{
name|unsigned
name|long
name|pfn
decl_stmt|;
name|int
name|index
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|mthca_user_db_table
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|mthca_ucontext
block|{
name|struct
name|ib_ucontext
name|ibucontext
decl_stmt|;
name|struct
name|mthca_uar
name|uar
decl_stmt|;
name|struct
name|mthca_user_db_table
modifier|*
name|db_tab
decl_stmt|;
name|int
name|reg_mr_warned
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|mthca_mtt
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|mthca_mr
block|{
name|struct
name|ib_mr
name|ibmr
decl_stmt|;
name|struct
name|ib_umem
modifier|*
name|umem
decl_stmt|;
name|struct
name|mthca_mtt
modifier|*
name|mtt
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_fmr
block|{
name|struct
name|ib_fmr
name|ibmr
decl_stmt|;
name|struct
name|ib_fmr_attr
name|attr
decl_stmt|;
name|struct
name|mthca_mtt
modifier|*
name|mtt
decl_stmt|;
name|int
name|maps
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|struct
name|mthca_mpt_entry
name|__iomem
modifier|*
name|mpt
decl_stmt|;
name|u64
name|__iomem
modifier|*
name|mtts
decl_stmt|;
block|}
name|tavor
struct|;
struct|struct
block|{
name|struct
name|mthca_mpt_entry
modifier|*
name|mpt
decl_stmt|;
name|__be64
modifier|*
name|mtts
decl_stmt|;
name|dma_addr_t
name|dma_handle
decl_stmt|;
block|}
name|arbel
struct|;
block|}
name|mem
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_pd
block|{
name|struct
name|ib_pd
name|ibpd
decl_stmt|;
name|u32
name|pd_num
decl_stmt|;
name|atomic_t
name|sqp_count
decl_stmt|;
name|struct
name|mthca_mr
name|ntmr
decl_stmt|;
name|int
name|privileged
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_eq
block|{
name|struct
name|mthca_dev
modifier|*
name|dev
decl_stmt|;
name|int
name|eqn
decl_stmt|;
name|u32
name|eqn_mask
decl_stmt|;
name|u32
name|cons_index
decl_stmt|;
name|u16
name|msi_x_vector
decl_stmt|;
name|u16
name|msi_x_entry
decl_stmt|;
name|int
name|have_irq
decl_stmt|;
name|int
name|nent
decl_stmt|;
name|struct
name|mthca_buf_list
modifier|*
name|page_list
decl_stmt|;
name|struct
name|mthca_mr
name|mr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|mthca_av
struct_decl|;
end_struct_decl

begin_enum
enum|enum
name|mthca_ah_type
block|{
name|MTHCA_AH_ON_HCA
block|,
name|MTHCA_AH_PCI_POOL
block|,
name|MTHCA_AH_KMALLOC
block|}
enum|;
end_enum

begin_struct
struct|struct
name|mthca_ah
block|{
name|struct
name|ib_ah
name|ibah
decl_stmt|;
name|enum
name|mthca_ah_type
name|type
decl_stmt|;
name|u32
name|key
decl_stmt|;
name|struct
name|mthca_av
modifier|*
name|av
decl_stmt|;
name|dma_addr_t
name|avdma
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Quick description of our CQ/QP locking scheme:  *  * We have one global lock that protects dev->cq/qp_table.  Each  * struct mthca_cq/qp also has its own lock.  An individual qp lock  * may be taken inside of an individual cq lock.  Both cqs attached to  * a qp may be locked, with the cq with the lower cqn locked first.  * No other nesting should be done.  *  * Each struct mthca_cq/qp also has an ref count, protected by the  * corresponding table lock.  The pointer from the cq/qp_table to the  * struct counts as one reference.  This reference also is good for  * access through the consumer API, so modifying the CQ/QP etc doesn't  * need to take another reference.  Access to a QP because of a  * completion being polled does not need a reference either.  *  * Finally, each struct mthca_cq/qp has a wait_queue_head_t for the  * destroy function to sleep on.  *  * This means that access from the consumer API requires nothing but  * taking the struct's lock.  *  * Access because of a completion event should go as follows:  * - lock cq/qp_table and look up struct  * - increment ref count in struct  * - drop cq/qp_table lock  * - lock struct, do your thing, and unlock struct  * - decrement ref count; if zero, wake up waiters  *  * To destroy a CQ/QP, we can do the following:  * - lock cq/qp_table  * - remove pointer and decrement ref count  * - unlock cq/qp_table lock  * - wait_event until ref count is zero  *  * It is the consumer's responsibilty to make sure that no QP  * operations (WQE posting or state modification) are pending when a  * QP is destroyed.  Also, the consumer must make sure that calls to  * qp_modify are serialized.  Similarly, the consumer is responsible  * for ensuring that no CQ resize operations are pending when a CQ  * is destroyed.  *  * Possible optimizations (wait for profile data to see if/where we  * have locks bouncing between CPUs):  * - split cq/qp table lock into n separate (cache-aligned) locks,  *   indexed (say) by the page in the table  * - split QP struct lock into three (one for common info, one for the  *   send queue and one for the receive queue)  */
end_comment

begin_struct
struct|struct
name|mthca_cq_buf
block|{
name|union
name|mthca_buf
name|queue
decl_stmt|;
name|struct
name|mthca_mr
name|mr
decl_stmt|;
name|int
name|is_direct
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_cq_resize
block|{
name|struct
name|mthca_cq_buf
name|buf
decl_stmt|;
name|int
name|cqe
decl_stmt|;
enum|enum
block|{
name|CQ_RESIZE_ALLOC
block|,
name|CQ_RESIZE_READY
block|,
name|CQ_RESIZE_SWAPPED
block|}
name|state
enum|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_cq
block|{
name|struct
name|ib_cq
name|ibcq
decl_stmt|;
name|spinlock_t
name|lock
decl_stmt|;
name|int
name|refcount
decl_stmt|;
name|int
name|cqn
decl_stmt|;
name|u32
name|cons_index
decl_stmt|;
name|struct
name|mthca_cq_buf
name|buf
decl_stmt|;
name|struct
name|mthca_cq_resize
modifier|*
name|resize_buf
decl_stmt|;
name|int
name|is_kernel
decl_stmt|;
comment|/* Next fields are Arbel only */
name|int
name|set_ci_db_index
decl_stmt|;
name|__be32
modifier|*
name|set_ci_db
decl_stmt|;
name|int
name|arm_db_index
decl_stmt|;
name|__be32
modifier|*
name|arm_db
decl_stmt|;
name|int
name|arm_sn
decl_stmt|;
name|wait_queue_head_t
name|wait
decl_stmt|;
name|struct
name|mutex
name|mutex
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_srq
block|{
name|struct
name|ib_srq
name|ibsrq
decl_stmt|;
name|spinlock_t
name|lock
decl_stmt|;
name|int
name|refcount
decl_stmt|;
name|int
name|srqn
decl_stmt|;
name|int
name|max
decl_stmt|;
name|int
name|max_gs
decl_stmt|;
name|int
name|wqe_shift
decl_stmt|;
name|int
name|first_free
decl_stmt|;
name|int
name|last_free
decl_stmt|;
name|u16
name|counter
decl_stmt|;
comment|/* Arbel only */
name|int
name|db_index
decl_stmt|;
comment|/* Arbel only */
name|__be32
modifier|*
name|db
decl_stmt|;
comment|/* Arbel only */
name|void
modifier|*
name|last
decl_stmt|;
name|int
name|is_direct
decl_stmt|;
name|u64
modifier|*
name|wrid
decl_stmt|;
name|union
name|mthca_buf
name|queue
decl_stmt|;
name|struct
name|mthca_mr
name|mr
decl_stmt|;
name|wait_queue_head_t
name|wait
decl_stmt|;
name|struct
name|mutex
name|mutex
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_wq
block|{
name|spinlock_t
name|lock
decl_stmt|;
name|int
name|max
decl_stmt|;
name|unsigned
name|next_ind
decl_stmt|;
name|unsigned
name|last_comp
decl_stmt|;
name|unsigned
name|head
decl_stmt|;
name|unsigned
name|tail
decl_stmt|;
name|void
modifier|*
name|last
decl_stmt|;
name|int
name|max_gs
decl_stmt|;
name|int
name|wqe_shift
decl_stmt|;
name|int
name|db_index
decl_stmt|;
comment|/* Arbel only */
name|__be32
modifier|*
name|db
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_qp
block|{
name|struct
name|ib_qp
name|ibqp
decl_stmt|;
name|int
name|refcount
decl_stmt|;
name|u32
name|qpn
decl_stmt|;
name|int
name|is_direct
decl_stmt|;
name|u8
name|port
decl_stmt|;
comment|/* for SQP and memfree use only */
name|u8
name|alt_port
decl_stmt|;
comment|/* for memfree use only */
name|u8
name|transport
decl_stmt|;
name|u8
name|state
decl_stmt|;
name|u8
name|atomic_rd_en
decl_stmt|;
name|u8
name|resp_depth
decl_stmt|;
name|struct
name|mthca_mr
name|mr
decl_stmt|;
name|struct
name|mthca_wq
name|rq
decl_stmt|;
name|struct
name|mthca_wq
name|sq
decl_stmt|;
name|enum
name|ib_sig_type
name|sq_policy
decl_stmt|;
name|int
name|send_wqe_offset
decl_stmt|;
name|int
name|max_inline_data
decl_stmt|;
name|u64
modifier|*
name|wrid
decl_stmt|;
name|union
name|mthca_buf
name|queue
decl_stmt|;
name|wait_queue_head_t
name|wait
decl_stmt|;
name|struct
name|mutex
name|mutex
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mthca_sqp
block|{
name|struct
name|mthca_qp
name|qp
decl_stmt|;
name|int
name|pkey_index
decl_stmt|;
name|u32
name|qkey
decl_stmt|;
name|u32
name|send_psn
decl_stmt|;
name|struct
name|ib_ud_header
name|ud_header
decl_stmt|;
name|int
name|header_buf_size
decl_stmt|;
name|void
modifier|*
name|header_buf
decl_stmt|;
name|dma_addr_t
name|header_dma
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|struct
name|mthca_ucontext
modifier|*
name|to_mucontext
parameter_list|(
name|struct
name|ib_ucontext
modifier|*
name|ibucontext
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibucontext
argument_list|,
expr|struct
name|mthca_ucontext
argument_list|,
name|ibucontext
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mthca_fmr
modifier|*
name|to_mfmr
parameter_list|(
name|struct
name|ib_fmr
modifier|*
name|ibmr
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibmr
argument_list|,
expr|struct
name|mthca_fmr
argument_list|,
name|ibmr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mthca_mr
modifier|*
name|to_mmr
parameter_list|(
name|struct
name|ib_mr
modifier|*
name|ibmr
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibmr
argument_list|,
expr|struct
name|mthca_mr
argument_list|,
name|ibmr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mthca_pd
modifier|*
name|to_mpd
parameter_list|(
name|struct
name|ib_pd
modifier|*
name|ibpd
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibpd
argument_list|,
expr|struct
name|mthca_pd
argument_list|,
name|ibpd
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mthca_ah
modifier|*
name|to_mah
parameter_list|(
name|struct
name|ib_ah
modifier|*
name|ibah
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibah
argument_list|,
expr|struct
name|mthca_ah
argument_list|,
name|ibah
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mthca_cq
modifier|*
name|to_mcq
parameter_list|(
name|struct
name|ib_cq
modifier|*
name|ibcq
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibcq
argument_list|,
expr|struct
name|mthca_cq
argument_list|,
name|ibcq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mthca_srq
modifier|*
name|to_msrq
parameter_list|(
name|struct
name|ib_srq
modifier|*
name|ibsrq
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibsrq
argument_list|,
expr|struct
name|mthca_srq
argument_list|,
name|ibsrq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mthca_qp
modifier|*
name|to_mqp
parameter_list|(
name|struct
name|ib_qp
modifier|*
name|ibqp
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|ibqp
argument_list|,
expr|struct
name|mthca_qp
argument_list|,
name|ibqp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|mthca_sqp
modifier|*
name|to_msqp
parameter_list|(
name|struct
name|mthca_qp
modifier|*
name|qp
parameter_list|)
block|{
return|return
name|container_of
argument_list|(
name|qp
argument_list|,
expr|struct
name|mthca_sqp
argument_list|,
name|qp
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MTHCA_PROVIDER_H */
end_comment

end_unit

