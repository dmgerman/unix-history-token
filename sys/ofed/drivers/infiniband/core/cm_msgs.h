begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004, 2011 Intel Corporation.  All rights reserved.  * Copyright (c) 2004 Topspin Corporation.  All rights reserved.  * Copyright (c) 2004 Voltaire Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING the madirectory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use source and binary forms, with or  *     withmodification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retathe above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHWARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS THE  * SOFTWARE.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|CM_MSGS_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|CM_MSGS_H
end_define

begin_include
include|#
directive|include
file|<rdma/ib_mad.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_cm.h>
end_include

begin_comment
comment|/*  * Parameters to routines below should be in network-byte order, and values  * are returned in network-byte order.  */
end_comment

begin_define
define|#
directive|define
name|IB_CM_CLASS_VERSION
value|2
end_define

begin_comment
comment|/* IB specification 1.2 */
end_comment

begin_enum
enum|enum
name|cm_msg_sequence
block|{
name|CM_MSG_SEQUENCE_REQ
block|,
name|CM_MSG_SEQUENCE_LAP
block|,
name|CM_MSG_SEQUENCE_DREQ
block|,
name|CM_MSG_SEQUENCE_SIDR
block|}
enum|;
end_enum

begin_struct
struct|struct
name|cm_req_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|local_comm_id
decl_stmt|;
name|__be32
name|rsvd4
decl_stmt|;
name|__be64
name|service_id
decl_stmt|;
name|__be64
name|local_ca_guid
decl_stmt|;
name|__be32
name|rsvd24
decl_stmt|;
name|__be32
name|local_qkey
decl_stmt|;
comment|/* local QPN:24, responder resources:8 */
name|__be32
name|offset32
decl_stmt|;
comment|/* local EECN:24, initiator depth:8 */
name|__be32
name|offset36
decl_stmt|;
comment|/* 	 * remote EECN:24, remote CM response timeout:5, 	 * transport service type:2, end-to-end flow control:1 	 */
name|__be32
name|offset40
decl_stmt|;
comment|/* starting PSN:24, local CM response timeout:5, retry count:3 */
name|__be32
name|offset44
decl_stmt|;
name|__be16
name|pkey
decl_stmt|;
comment|/* path MTU:4, RDC exists:1, RNR retry count:3. */
name|u8
name|offset50
decl_stmt|;
comment|/* max CM Retries:4, SRQ:1, extended transport type:3 */
name|u8
name|offset51
decl_stmt|;
name|__be16
name|primary_local_lid
decl_stmt|;
name|__be16
name|primary_remote_lid
decl_stmt|;
name|union
name|ib_gid
name|primary_local_gid
decl_stmt|;
name|union
name|ib_gid
name|primary_remote_gid
decl_stmt|;
comment|/* flow label:20, rsvd:6, packet rate:6 */
name|__be32
name|primary_offset88
decl_stmt|;
name|u8
name|primary_traffic_class
decl_stmt|;
name|u8
name|primary_hop_limit
decl_stmt|;
comment|/* SL:4, subnet local:1, rsvd:3 */
name|u8
name|primary_offset94
decl_stmt|;
comment|/* local ACK timeout:5, rsvd:3 */
name|u8
name|primary_offset95
decl_stmt|;
name|__be16
name|alt_local_lid
decl_stmt|;
name|__be16
name|alt_remote_lid
decl_stmt|;
name|union
name|ib_gid
name|alt_local_gid
decl_stmt|;
name|union
name|ib_gid
name|alt_remote_gid
decl_stmt|;
comment|/* flow label:20, rsvd:6, packet rate:6 */
name|__be32
name|alt_offset132
decl_stmt|;
name|u8
name|alt_traffic_class
decl_stmt|;
name|u8
name|alt_hop_limit
decl_stmt|;
comment|/* SL:4, subnet local:1, rsvd:3 */
name|u8
name|alt_offset138
decl_stmt|;
comment|/* local ACK timeout:5, rsvd:3 */
name|u8
name|alt_offset139
decl_stmt|;
name|u32
name|private_data
index|[
name|IB_CM_REQ_PRIVATE_DATA_SIZE
operator|/
sizeof|sizeof
argument_list|(
name|u32
argument_list|)
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_req_get_local_qpn
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset32
argument_list|)
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_local_qpn
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|__be32
name|qpn
parameter_list|)
block|{
name|req_msg
operator|->
name|offset32
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|qpn
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset32
argument_list|)
operator|&
literal|0x000000FF
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_resp_res
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
operator|(
name|u8
operator|)
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset32
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_resp_res
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|resp_res
parameter_list|)
block|{
name|req_msg
operator|->
name|offset32
operator|=
name|cpu_to_be32
argument_list|(
name|resp_res
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset32
argument_list|)
operator|&
literal|0xFFFFFF00
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_init_depth
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
operator|(
name|u8
operator|)
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset36
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_init_depth
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|init_depth
parameter_list|)
block|{
name|req_msg
operator|->
name|offset36
operator|=
name|cpu_to_be32
argument_list|(
name|init_depth
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset36
argument_list|)
operator|&
literal|0xFFFFFF00
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_remote_resp_timeout
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset40
argument_list|)
operator|&
literal|0xF8
operator|)
operator|>>
literal|3
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_remote_resp_timeout
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|resp_timeout
parameter_list|)
block|{
name|req_msg
operator|->
name|offset40
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|resp_timeout
operator|<<
literal|3
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset40
argument_list|)
operator|&
literal|0xFFFFFF07
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|enum
name|ib_qp_type
name|cm_req_get_qp_type
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
name|u8
name|transport_type
init|=
call|(
name|u8
call|)
argument_list|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset40
argument_list|)
operator|&
literal|0x06
argument_list|)
operator|>>
literal|1
decl_stmt|;
switch|switch
condition|(
name|transport_type
condition|)
block|{
case|case
literal|0
case|:
return|return
name|IB_QPT_RC
return|;
case|case
literal|1
case|:
return|return
name|IB_QPT_UC
return|;
case|case
literal|3
case|:
switch|switch
condition|(
name|req_msg
operator|->
name|offset51
operator|&
literal|0x7
condition|)
block|{
case|case
literal|1
case|:
return|return
name|IB_QPT_XRC_TGT
return|;
default|default:
return|return
literal|0
return|;
block|}
default|default:
return|return
literal|0
return|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_qp_type
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|enum
name|ib_qp_type
name|qp_type
parameter_list|)
block|{
switch|switch
condition|(
name|qp_type
condition|)
block|{
case|case
name|IB_QPT_UC
case|:
name|req_msg
operator|->
name|offset40
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset40
argument_list|)
operator|&
literal|0xFFFFFFF9
operator|)
operator||
literal|0x2
argument_list|)
expr_stmt|;
break|break;
case|case
name|IB_QPT_XRC_INI
case|:
name|req_msg
operator|->
name|offset40
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset40
argument_list|)
operator|&
literal|0xFFFFFFF9
operator|)
operator||
literal|0x6
argument_list|)
expr_stmt|;
name|req_msg
operator|->
name|offset51
operator|=
operator|(
name|req_msg
operator|->
name|offset51
operator|&
literal|0xF8
operator|)
operator||
literal|1
expr_stmt|;
break|break;
default|default:
name|req_msg
operator|->
name|offset40
operator|=
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset40
argument_list|)
operator|&
literal|0xFFFFFFF9
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_flow_ctrl
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset40
argument_list|)
operator|&
literal|0x1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_flow_ctrl
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|flow_ctrl
parameter_list|)
block|{
name|req_msg
operator|->
name|offset40
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|flow_ctrl
operator|&
literal|0x1
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset40
argument_list|)
operator|&
literal|0xFFFFFFFE
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_req_get_starting_psn
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset44
argument_list|)
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_starting_psn
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|__be32
name|starting_psn
parameter_list|)
block|{
name|req_msg
operator|->
name|offset44
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|starting_psn
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset44
argument_list|)
operator|&
literal|0x000000FF
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_local_resp_timeout
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset44
argument_list|)
operator|&
literal|0xF8
operator|)
operator|>>
literal|3
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_local_resp_timeout
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|resp_timeout
parameter_list|)
block|{
name|req_msg
operator|->
name|offset44
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|resp_timeout
operator|<<
literal|3
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset44
argument_list|)
operator|&
literal|0xFFFFFF07
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_retry_count
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset44
argument_list|)
operator|&
literal|0x7
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_retry_count
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|retry_count
parameter_list|)
block|{
name|req_msg
operator|->
name|offset44
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|retry_count
operator|&
literal|0x7
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|offset44
argument_list|)
operator|&
literal|0xFFFFFFF8
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_path_mtu
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
name|req_msg
operator|->
name|offset50
operator|>>
literal|4
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_path_mtu
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|path_mtu
parameter_list|)
block|{
name|req_msg
operator|->
name|offset50
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|offset50
operator|&
literal|0xF
operator|)
operator||
operator|(
name|path_mtu
operator|<<
literal|4
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_rnr_retry_count
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
name|req_msg
operator|->
name|offset50
operator|&
literal|0x7
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_rnr_retry_count
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|rnr_retry_count
parameter_list|)
block|{
name|req_msg
operator|->
name|offset50
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|offset50
operator|&
literal|0xF8
operator|)
operator||
operator|(
name|rnr_retry_count
operator|&
literal|0x7
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_max_cm_retries
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
name|req_msg
operator|->
name|offset51
operator|>>
literal|4
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_max_cm_retries
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|retries
parameter_list|)
block|{
name|req_msg
operator|->
name|offset51
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|offset51
operator|&
literal|0xF
operator|)
operator||
operator|(
name|retries
operator|<<
literal|4
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_srq
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
operator|(
name|req_msg
operator|->
name|offset51
operator|&
literal|0x8
operator|)
operator|>>
literal|3
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_srq
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|srq
parameter_list|)
block|{
name|req_msg
operator|->
name|offset51
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|offset51
operator|&
literal|0xF7
operator|)
operator||
operator|(
operator|(
name|srq
operator|&
literal|0x1
operator|)
operator|<<
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_req_get_primary_flow_label
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|primary_offset88
argument_list|)
operator|>>
literal|12
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_primary_flow_label
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|__be32
name|flow_label
parameter_list|)
block|{
name|req_msg
operator|->
name|primary_offset88
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|primary_offset88
argument_list|)
operator|&
literal|0x00000FFF
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|flow_label
argument_list|)
operator|<<
literal|12
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_primary_packet_rate
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|primary_offset88
argument_list|)
operator|&
literal|0x3F
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_primary_packet_rate
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|rate
parameter_list|)
block|{
name|req_msg
operator|->
name|primary_offset88
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|primary_offset88
argument_list|)
operator|&
literal|0xFFFFFFC0
operator|)
operator||
operator|(
name|rate
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_primary_sl
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|req_msg
operator|->
name|primary_offset94
operator|>>
literal|4
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_primary_sl
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|sl
parameter_list|)
block|{
name|req_msg
operator|->
name|primary_offset94
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|primary_offset94
operator|&
literal|0x0F
operator|)
operator||
operator|(
name|sl
operator|<<
literal|4
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_primary_subnet_local
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|primary_offset94
operator|&
literal|0x08
operator|)
operator|>>
literal|3
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_primary_subnet_local
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|subnet_local
parameter_list|)
block|{
name|req_msg
operator|->
name|primary_offset94
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|primary_offset94
operator|&
literal|0xF7
operator|)
operator||
operator|(
operator|(
name|subnet_local
operator|&
literal|0x1
operator|)
operator|<<
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_primary_local_ack_timeout
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|req_msg
operator|->
name|primary_offset95
operator|>>
literal|3
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_primary_local_ack_timeout
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|local_ack_timeout
parameter_list|)
block|{
name|req_msg
operator|->
name|primary_offset95
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|primary_offset95
operator|&
literal|0x07
operator|)
operator||
operator|(
name|local_ack_timeout
operator|<<
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_req_get_alt_flow_label
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|alt_offset132
argument_list|)
operator|>>
literal|12
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_alt_flow_label
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|__be32
name|flow_label
parameter_list|)
block|{
name|req_msg
operator|->
name|alt_offset132
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|alt_offset132
argument_list|)
operator|&
literal|0x00000FFF
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|flow_label
argument_list|)
operator|<<
literal|12
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_alt_packet_rate
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|alt_offset132
argument_list|)
operator|&
literal|0x3F
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_alt_packet_rate
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|rate
parameter_list|)
block|{
name|req_msg
operator|->
name|alt_offset132
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|req_msg
operator|->
name|alt_offset132
argument_list|)
operator|&
literal|0xFFFFFFC0
operator|)
operator||
operator|(
name|rate
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_alt_sl
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|req_msg
operator|->
name|alt_offset138
operator|>>
literal|4
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_alt_sl
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|sl
parameter_list|)
block|{
name|req_msg
operator|->
name|alt_offset138
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|alt_offset138
operator|&
literal|0x0F
operator|)
operator||
operator|(
name|sl
operator|<<
literal|4
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_alt_subnet_local
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|alt_offset138
operator|&
literal|0x08
operator|)
operator|>>
literal|3
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_alt_subnet_local
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|subnet_local
parameter_list|)
block|{
name|req_msg
operator|->
name|alt_offset138
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|alt_offset138
operator|&
literal|0xF7
operator|)
operator||
operator|(
operator|(
name|subnet_local
operator|&
literal|0x1
operator|)
operator|<<
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_req_get_alt_local_ack_timeout
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|req_msg
operator|->
name|alt_offset139
operator|>>
literal|3
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_req_set_alt_local_ack_timeout
parameter_list|(
name|struct
name|cm_req_msg
modifier|*
name|req_msg
parameter_list|,
name|u8
name|local_ack_timeout
parameter_list|)
block|{
name|req_msg
operator|->
name|alt_offset139
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|req_msg
operator|->
name|alt_offset139
operator|&
literal|0x07
operator|)
operator||
operator|(
name|local_ack_timeout
operator|<<
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Message REJected or MRAed */
end_comment

begin_enum
enum|enum
name|cm_msg_response
block|{
name|CM_MSG_RESPONSE_REQ
init|=
literal|0x0
block|,
name|CM_MSG_RESPONSE_REP
init|=
literal|0x1
block|,
name|CM_MSG_RESPONSE_OTHER
init|=
literal|0x2
block|}
enum|;
end_enum

begin_struct
struct|struct
name|cm_mra_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|local_comm_id
decl_stmt|;
name|__be32
name|remote_comm_id
decl_stmt|;
comment|/* message MRAed:2, rsvd:6 */
name|u8
name|offset8
decl_stmt|;
comment|/* service timeout:5, rsvd:3 */
name|u8
name|offset9
decl_stmt|;
name|u8
name|private_data
index|[
name|IB_CM_MRA_PRIVATE_DATA_SIZE
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|u8
name|cm_mra_get_msg_mraed
parameter_list|(
name|struct
name|cm_mra_msg
modifier|*
name|mra_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|mra_msg
operator|->
name|offset8
operator|>>
literal|6
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_mra_set_msg_mraed
parameter_list|(
name|struct
name|cm_mra_msg
modifier|*
name|mra_msg
parameter_list|,
name|u8
name|msg
parameter_list|)
block|{
name|mra_msg
operator|->
name|offset8
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|mra_msg
operator|->
name|offset8
operator|&
literal|0x3F
operator|)
operator||
operator|(
name|msg
operator|<<
literal|6
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_mra_get_service_timeout
parameter_list|(
name|struct
name|cm_mra_msg
modifier|*
name|mra_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|mra_msg
operator|->
name|offset9
operator|>>
literal|3
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_mra_set_service_timeout
parameter_list|(
name|struct
name|cm_mra_msg
modifier|*
name|mra_msg
parameter_list|,
name|u8
name|service_timeout
parameter_list|)
block|{
name|mra_msg
operator|->
name|offset9
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|mra_msg
operator|->
name|offset9
operator|&
literal|0x07
operator|)
operator||
operator|(
name|service_timeout
operator|<<
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_struct
struct|struct
name|cm_rej_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|local_comm_id
decl_stmt|;
name|__be32
name|remote_comm_id
decl_stmt|;
comment|/* message REJected:2, rsvd:6 */
name|u8
name|offset8
decl_stmt|;
comment|/* reject info length:7, rsvd:1. */
name|u8
name|offset9
decl_stmt|;
name|__be16
name|reason
decl_stmt|;
name|u8
name|ari
index|[
name|IB_CM_REJ_ARI_LENGTH
index|]
decl_stmt|;
name|u8
name|private_data
index|[
name|IB_CM_REJ_PRIVATE_DATA_SIZE
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|u8
name|cm_rej_get_msg_rejected
parameter_list|(
name|struct
name|cm_rej_msg
modifier|*
name|rej_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|rej_msg
operator|->
name|offset8
operator|>>
literal|6
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rej_set_msg_rejected
parameter_list|(
name|struct
name|cm_rej_msg
modifier|*
name|rej_msg
parameter_list|,
name|u8
name|msg
parameter_list|)
block|{
name|rej_msg
operator|->
name|offset8
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|rej_msg
operator|->
name|offset8
operator|&
literal|0x3F
operator|)
operator||
operator|(
name|msg
operator|<<
literal|6
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_rej_get_reject_info_len
parameter_list|(
name|struct
name|cm_rej_msg
modifier|*
name|rej_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|rej_msg
operator|->
name|offset9
operator|>>
literal|1
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rej_set_reject_info_len
parameter_list|(
name|struct
name|cm_rej_msg
modifier|*
name|rej_msg
parameter_list|,
name|u8
name|len
parameter_list|)
block|{
name|rej_msg
operator|->
name|offset9
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|rej_msg
operator|->
name|offset9
operator|&
literal|0x1
operator|)
operator||
operator|(
name|len
operator|<<
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_struct
struct|struct
name|cm_rep_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|local_comm_id
decl_stmt|;
name|__be32
name|remote_comm_id
decl_stmt|;
name|__be32
name|local_qkey
decl_stmt|;
comment|/* local QPN:24, rsvd:8 */
name|__be32
name|offset12
decl_stmt|;
comment|/* local EECN:24, rsvd:8 */
name|__be32
name|offset16
decl_stmt|;
comment|/* starting PSN:24 rsvd:8 */
name|__be32
name|offset20
decl_stmt|;
name|u8
name|resp_resources
decl_stmt|;
name|u8
name|initiator_depth
decl_stmt|;
comment|/* target ACK delay:5, failover accepted:2, end-to-end flow control:1 */
name|u8
name|offset26
decl_stmt|;
comment|/* RNR retry count:3, SRQ:1, rsvd:5 */
name|u8
name|offset27
decl_stmt|;
name|__be64
name|local_ca_guid
decl_stmt|;
name|u8
name|private_data
index|[
name|IB_CM_REP_PRIVATE_DATA_SIZE
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_rep_get_local_qpn
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|rep_msg
operator|->
name|offset12
argument_list|)
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rep_set_local_qpn
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|,
name|__be32
name|qpn
parameter_list|)
block|{
name|rep_msg
operator|->
name|offset12
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|qpn
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|rep_msg
operator|->
name|offset12
argument_list|)
operator|&
literal|0x000000FF
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_rep_get_local_eecn
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|rep_msg
operator|->
name|offset16
argument_list|)
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rep_set_local_eecn
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|,
name|__be32
name|eecn
parameter_list|)
block|{
name|rep_msg
operator|->
name|offset16
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|eecn
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|rep_msg
operator|->
name|offset16
argument_list|)
operator|&
literal|0x000000FF
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_rep_get_qpn
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|,
name|enum
name|ib_qp_type
name|qp_type
parameter_list|)
block|{
return|return
operator|(
name|qp_type
operator|==
name|IB_QPT_XRC_INI
operator|)
condition|?
name|cm_rep_get_local_eecn
argument_list|(
name|rep_msg
argument_list|)
else|:
name|cm_rep_get_local_qpn
argument_list|(
name|rep_msg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_rep_get_starting_psn
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|rep_msg
operator|->
name|offset20
argument_list|)
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rep_set_starting_psn
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|,
name|__be32
name|starting_psn
parameter_list|)
block|{
name|rep_msg
operator|->
name|offset20
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|starting_psn
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|rep_msg
operator|->
name|offset20
argument_list|)
operator|&
literal|0x000000FF
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_rep_get_target_ack_delay
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|rep_msg
operator|->
name|offset26
operator|>>
literal|3
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rep_set_target_ack_delay
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|,
name|u8
name|target_ack_delay
parameter_list|)
block|{
name|rep_msg
operator|->
name|offset26
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|rep_msg
operator|->
name|offset26
operator|&
literal|0x07
operator|)
operator||
operator|(
name|target_ack_delay
operator|<<
literal|3
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_rep_get_failover
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
operator|(
name|rep_msg
operator|->
name|offset26
operator|&
literal|0x06
operator|)
operator|>>
literal|1
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rep_set_failover
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|,
name|u8
name|failover
parameter_list|)
block|{
name|rep_msg
operator|->
name|offset26
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|rep_msg
operator|->
name|offset26
operator|&
literal|0xF9
operator|)
operator||
operator|(
operator|(
name|failover
operator|&
literal|0x3
operator|)
operator|<<
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_rep_get_flow_ctrl
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|rep_msg
operator|->
name|offset26
operator|&
literal|0x01
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rep_set_flow_ctrl
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|,
name|u8
name|flow_ctrl
parameter_list|)
block|{
name|rep_msg
operator|->
name|offset26
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|rep_msg
operator|->
name|offset26
operator|&
literal|0xFE
operator|)
operator||
operator|(
name|flow_ctrl
operator|&
literal|0x1
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_rep_get_rnr_retry_count
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
name|rep_msg
operator|->
name|offset27
operator|>>
literal|5
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rep_set_rnr_retry_count
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|,
name|u8
name|rnr_retry_count
parameter_list|)
block|{
name|rep_msg
operator|->
name|offset27
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|rep_msg
operator|->
name|offset27
operator|&
literal|0x1F
operator|)
operator||
operator|(
name|rnr_retry_count
operator|<<
literal|5
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_rep_get_srq
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
operator|(
name|rep_msg
operator|->
name|offset27
operator|>>
literal|4
operator|)
operator|&
literal|0x1
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_rep_set_srq
parameter_list|(
name|struct
name|cm_rep_msg
modifier|*
name|rep_msg
parameter_list|,
name|u8
name|srq
parameter_list|)
block|{
name|rep_msg
operator|->
name|offset27
operator|=
call|(
name|u8
call|)
argument_list|(
operator|(
name|rep_msg
operator|->
name|offset27
operator|&
literal|0xEF
operator|)
operator||
operator|(
operator|(
name|srq
operator|&
literal|0x1
operator|)
operator|<<
literal|4
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_struct
struct|struct
name|cm_rtu_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|local_comm_id
decl_stmt|;
name|__be32
name|remote_comm_id
decl_stmt|;
name|u8
name|private_data
index|[
name|IB_CM_RTU_PRIVATE_DATA_SIZE
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|cm_dreq_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|local_comm_id
decl_stmt|;
name|__be32
name|remote_comm_id
decl_stmt|;
comment|/* remote QPN/EECN:24, rsvd:8 */
name|__be32
name|offset8
decl_stmt|;
name|u8
name|private_data
index|[
name|IB_CM_DREQ_PRIVATE_DATA_SIZE
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_dreq_get_remote_qpn
parameter_list|(
name|struct
name|cm_dreq_msg
modifier|*
name|dreq_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|dreq_msg
operator|->
name|offset8
argument_list|)
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_dreq_set_remote_qpn
parameter_list|(
name|struct
name|cm_dreq_msg
modifier|*
name|dreq_msg
parameter_list|,
name|__be32
name|qpn
parameter_list|)
block|{
name|dreq_msg
operator|->
name|offset8
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|qpn
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|dreq_msg
operator|->
name|offset8
argument_list|)
operator|&
literal|0x000000FF
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_struct
struct|struct
name|cm_drep_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|local_comm_id
decl_stmt|;
name|__be32
name|remote_comm_id
decl_stmt|;
name|u8
name|private_data
index|[
name|IB_CM_DREP_PRIVATE_DATA_SIZE
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|cm_lap_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|local_comm_id
decl_stmt|;
name|__be32
name|remote_comm_id
decl_stmt|;
name|__be32
name|rsvd8
decl_stmt|;
comment|/* remote QPN/EECN:24, remote CM response timeout:5, rsvd:3 */
name|__be32
name|offset12
decl_stmt|;
name|__be32
name|rsvd16
decl_stmt|;
name|__be16
name|alt_local_lid
decl_stmt|;
name|__be16
name|alt_remote_lid
decl_stmt|;
name|union
name|ib_gid
name|alt_local_gid
decl_stmt|;
name|union
name|ib_gid
name|alt_remote_gid
decl_stmt|;
comment|/* flow label:20, rsvd:4, traffic class:8 */
name|__be32
name|offset56
decl_stmt|;
name|u8
name|alt_hop_limit
decl_stmt|;
comment|/* rsvd:2, packet rate:6 */
name|u8
name|offset61
decl_stmt|;
comment|/* SL:4, subnet local:1, rsvd:3 */
name|u8
name|offset62
decl_stmt|;
comment|/* local ACK timeout:5, rsvd:3 */
name|u8
name|offset63
decl_stmt|;
name|u8
name|private_data
index|[
name|IB_CM_LAP_PRIVATE_DATA_SIZE
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_lap_get_remote_qpn
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|lap_msg
operator|->
name|offset12
argument_list|)
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_lap_set_remote_qpn
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|,
name|__be32
name|qpn
parameter_list|)
block|{
name|lap_msg
operator|->
name|offset12
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|qpn
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|lap_msg
operator|->
name|offset12
argument_list|)
operator|&
literal|0x000000FF
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_lap_get_remote_resp_timeout
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|)
block|{
return|return
call|(
name|u8
call|)
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|lap_msg
operator|->
name|offset12
argument_list|)
operator|&
literal|0xF8
operator|)
operator|>>
literal|3
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_lap_set_remote_resp_timeout
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|,
name|u8
name|resp_timeout
parameter_list|)
block|{
name|lap_msg
operator|->
name|offset12
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|resp_timeout
operator|<<
literal|3
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|lap_msg
operator|->
name|offset12
argument_list|)
operator|&
literal|0xFFFFFF07
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_lap_get_flow_label
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|lap_msg
operator|->
name|offset56
argument_list|)
operator|>>
literal|12
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_lap_set_flow_label
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|,
name|__be32
name|flow_label
parameter_list|)
block|{
name|lap_msg
operator|->
name|offset56
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|lap_msg
operator|->
name|offset56
argument_list|)
operator|&
literal|0x00000FFF
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|flow_label
argument_list|)
operator|<<
literal|12
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_lap_get_traffic_class
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|)
block|{
return|return
operator|(
name|u8
operator|)
name|be32_to_cpu
argument_list|(
name|lap_msg
operator|->
name|offset56
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_lap_set_traffic_class
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|,
name|u8
name|traffic_class
parameter_list|)
block|{
name|lap_msg
operator|->
name|offset56
operator|=
name|cpu_to_be32
argument_list|(
name|traffic_class
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|lap_msg
operator|->
name|offset56
argument_list|)
operator|&
literal|0xFFFFFF00
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_lap_get_packet_rate
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|)
block|{
return|return
name|lap_msg
operator|->
name|offset61
operator|&
literal|0x3F
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_lap_set_packet_rate
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|,
name|u8
name|packet_rate
parameter_list|)
block|{
name|lap_msg
operator|->
name|offset61
operator|=
operator|(
name|packet_rate
operator|&
literal|0x3F
operator|)
operator||
operator|(
name|lap_msg
operator|->
name|offset61
operator|&
literal|0xC0
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_lap_get_sl
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|)
block|{
return|return
name|lap_msg
operator|->
name|offset62
operator|>>
literal|4
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_lap_set_sl
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|,
name|u8
name|sl
parameter_list|)
block|{
name|lap_msg
operator|->
name|offset62
operator|=
operator|(
name|sl
operator|<<
literal|4
operator|)
operator||
operator|(
name|lap_msg
operator|->
name|offset62
operator|&
literal|0x0F
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_lap_get_subnet_local
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|)
block|{
return|return
operator|(
name|lap_msg
operator|->
name|offset62
operator|>>
literal|3
operator|)
operator|&
literal|0x1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_lap_set_subnet_local
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|,
name|u8
name|subnet_local
parameter_list|)
block|{
name|lap_msg
operator|->
name|offset62
operator|=
operator|(
operator|(
name|subnet_local
operator|&
literal|0x1
operator|)
operator|<<
literal|3
operator|)
operator||
operator|(
name|lap_msg
operator|->
name|offset61
operator|&
literal|0xF7
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
name|cm_lap_get_local_ack_timeout
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|)
block|{
return|return
name|lap_msg
operator|->
name|offset63
operator|>>
literal|3
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_lap_set_local_ack_timeout
parameter_list|(
name|struct
name|cm_lap_msg
modifier|*
name|lap_msg
parameter_list|,
name|u8
name|local_ack_timeout
parameter_list|)
block|{
name|lap_msg
operator|->
name|offset63
operator|=
operator|(
name|local_ack_timeout
operator|<<
literal|3
operator|)
operator||
operator|(
name|lap_msg
operator|->
name|offset63
operator|&
literal|0x07
operator|)
expr_stmt|;
block|}
end_function

begin_struct
struct|struct
name|cm_apr_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|local_comm_id
decl_stmt|;
name|__be32
name|remote_comm_id
decl_stmt|;
name|u8
name|info_length
decl_stmt|;
name|u8
name|ap_status
decl_stmt|;
name|__be16
name|rsvd
decl_stmt|;
name|u8
name|info
index|[
name|IB_CM_APR_INFO_LENGTH
index|]
decl_stmt|;
name|u8
name|private_data
index|[
name|IB_CM_APR_PRIVATE_DATA_SIZE
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|cm_sidr_req_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|request_id
decl_stmt|;
name|__be16
name|pkey
decl_stmt|;
name|__be16
name|rsvd
decl_stmt|;
name|__be64
name|service_id
decl_stmt|;
name|u32
name|private_data
index|[
name|IB_CM_SIDR_REQ_PRIVATE_DATA_SIZE
operator|/
sizeof|sizeof
argument_list|(
name|u32
argument_list|)
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_struct
struct|struct
name|cm_sidr_rep_msg
block|{
name|struct
name|ib_mad_hdr
name|hdr
decl_stmt|;
name|__be32
name|request_id
decl_stmt|;
name|u8
name|status
decl_stmt|;
name|u8
name|info_length
decl_stmt|;
name|__be16
name|rsvd
decl_stmt|;
comment|/* QPN:24, rsvd:8 */
name|__be32
name|offset8
decl_stmt|;
name|__be64
name|service_id
decl_stmt|;
name|__be32
name|qkey
decl_stmt|;
name|u8
name|info
index|[
name|IB_CM_SIDR_REP_INFO_LENGTH
index|]
decl_stmt|;
name|u8
name|private_data
index|[
name|IB_CM_SIDR_REP_PRIVATE_DATA_SIZE
index|]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|)
argument_list|)
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|__be32
name|cm_sidr_rep_get_qpn
parameter_list|(
name|struct
name|cm_sidr_rep_msg
modifier|*
name|sidr_rep_msg
parameter_list|)
block|{
return|return
name|cpu_to_be32
argument_list|(
name|be32_to_cpu
argument_list|(
name|sidr_rep_msg
operator|->
name|offset8
argument_list|)
operator|>>
literal|8
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cm_sidr_rep_set_qpn
parameter_list|(
name|struct
name|cm_sidr_rep_msg
modifier|*
name|sidr_rep_msg
parameter_list|,
name|__be32
name|qpn
parameter_list|)
block|{
name|sidr_rep_msg
operator|->
name|offset8
operator|=
name|cpu_to_be32
argument_list|(
operator|(
name|be32_to_cpu
argument_list|(
name|qpn
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|be32_to_cpu
argument_list|(
name|sidr_rep_msg
operator|->
name|offset8
argument_list|)
operator|&
literal|0x000000FF
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CM_MSGS_H */
end_comment

end_unit

