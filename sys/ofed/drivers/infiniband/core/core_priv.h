begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004 Topspin Communications.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CORE_PRIV_H
end_ifndef

begin_define
define|#
directive|define
name|_CORE_PRIV_H
end_define

begin_include
include|#
directive|include
file|<linux/list.h>
end_include

begin_include
include|#
directive|include
file|<linux/spinlock.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_include
include|#
directive|include
file|<net/if_vlan_var.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_INFINIBAND_ADDR_TRANS_CONFIGFS
end_ifdef

begin_function_decl
name|int
name|cma_configfs_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cma_configfs_exit
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
specifier|inline
name|int
name|cma_configfs_init
parameter_list|(
name|void
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|cma_configfs_exit
parameter_list|(
name|void
parameter_list|)
block|{ }
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_struct_decl
struct_decl|struct
name|cma_device
struct_decl|;
end_struct_decl

begin_function_decl
name|void
name|cma_ref_dev
parameter_list|(
name|struct
name|cma_device
modifier|*
name|cma_dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cma_deref_dev
parameter_list|(
name|struct
name|cma_device
modifier|*
name|cma_dev
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|bool
function_decl|(
modifier|*
name|cma_device_filter
function_decl|)
parameter_list|(
name|struct
name|ib_device
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|struct
name|cma_device
modifier|*
name|cma_enum_devices_by_ibdev
parameter_list|(
name|cma_device_filter
name|filter
parameter_list|,
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cma_get_default_gid_type
parameter_list|(
name|struct
name|cma_device
modifier|*
name|cma_dev
parameter_list|,
name|unsigned
name|int
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cma_set_default_gid_type
parameter_list|(
name|struct
name|cma_device
modifier|*
name|cma_dev
parameter_list|,
name|unsigned
name|int
name|port
parameter_list|,
name|enum
name|ib_gid_type
name|default_gid_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ib_device
modifier|*
name|cma_get_ib_dev
parameter_list|(
name|struct
name|cma_device
modifier|*
name|cma_dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_device_register_sysfs
parameter_list|(
name|struct
name|ib_device
modifier|*
name|device
parameter_list|,
name|int
function_decl|(
modifier|*
name|port_callback
function_decl|)
parameter_list|(
name|struct
name|ib_device
modifier|*
parameter_list|,
name|u8
parameter_list|,
name|struct
name|kobject
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_device_unregister_sysfs
parameter_list|(
name|struct
name|ib_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_cache_setup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_cache_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_resolve_eth_dmac
parameter_list|(
name|struct
name|ib_qp
modifier|*
name|qp
parameter_list|,
name|struct
name|ib_qp_attr
modifier|*
name|qp_attr
parameter_list|,
name|int
modifier|*
name|qp_attr_mask
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|roce_netdev_callback
function_decl|)
parameter_list|(
name|struct
name|ib_device
modifier|*
name|device
parameter_list|,
name|u8
name|port
parameter_list|,
name|struct
name|net_device
modifier|*
name|idev
parameter_list|,
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|roce_netdev_filter
function_decl|)
parameter_list|(
name|struct
name|ib_device
modifier|*
name|device
parameter_list|,
name|u8
name|port
parameter_list|,
name|struct
name|net_device
modifier|*
name|idev
parameter_list|,
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|void
name|ib_enum_roce_netdev
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ib_dev
parameter_list|,
name|roce_netdev_filter
name|filter
parameter_list|,
name|void
modifier|*
name|filter_cookie
parameter_list|,
name|roce_netdev_callback
name|cb
parameter_list|,
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_enum_all_roce_netdevs
parameter_list|(
name|roce_netdev_filter
name|filter
parameter_list|,
name|void
modifier|*
name|filter_cookie
parameter_list|,
name|roce_netdev_callback
name|cb
parameter_list|,
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|ib_cache_gid_default_mode
block|{
name|IB_CACHE_GID_DEFAULT_MODE_SET
block|,
name|IB_CACHE_GID_DEFAULT_MODE_DELETE
block|}
enum|;
end_enum

begin_function_decl
name|int
name|ib_cache_gid_parse_type_str
parameter_list|(
specifier|const
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|ib_cache_gid_type_str
parameter_list|(
name|enum
name|ib_gid_type
name|gid_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_cache_gid_set_default_gid
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ib_dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|struct
name|net_device
modifier|*
name|ndev
parameter_list|,
name|unsigned
name|long
name|gid_type_mask
parameter_list|,
name|enum
name|ib_cache_gid_default_mode
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_cache_gid_add
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ib_dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|,
name|struct
name|ib_gid_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_cache_gid_del
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ib_dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|,
name|struct
name|ib_gid_attr
modifier|*
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_cache_gid_del_all_netdev_gids
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ib_dev
parameter_list|,
name|u8
name|port
parameter_list|,
name|struct
name|net_device
modifier|*
name|ndev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|roce_gid_mgmt_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|roce_gid_mgmt_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|roce_rescan_device
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ib_dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|long
name|roce_gid_type_mask_support
parameter_list|(
name|struct
name|ib_device
modifier|*
name|ib_dev
parameter_list|,
name|u8
name|port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_cache_setup_one
parameter_list|(
name|struct
name|ib_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_cache_cleanup_one
parameter_list|(
name|struct
name|ib_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_cache_release_one
parameter_list|(
name|struct
name|ib_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|bool
name|rdma_is_upper_dev_rcu
parameter_list|(
name|struct
name|net_device
modifier|*
name|dev
parameter_list|,
name|struct
name|net_device
modifier|*
name|upper
parameter_list|)
block|{
comment|/* TODO: add support for LAGG */
name|upper
operator|=
name|VLAN_TRUNKDEV
argument_list|(
name|upper
argument_list|)
expr_stmt|;
return|return
operator|(
name|dev
operator|==
name|upper
operator|)
return|;
block|}
end_function

begin_function_decl
name|int
name|addr_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|addr_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_mad_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_mad_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_sa_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_sa_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CORE_PRIV_H */
end_comment

end_unit

