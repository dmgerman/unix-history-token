begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005 Topspin Communications.  All rights reserved.  * Copyright (c) 2005, 2006 Cisco Systems.  All rights reserved.  * Copyright (c) 2005 Mellanox Technologies. All rights reserved.  * Copyright (c) 2005 Voltaire, Inc. All rights reserved.  * Copyright (c) 2005 PathScale, Inc. All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|UVERBS_H
end_ifndef

begin_define
define|#
directive|define
name|UVERBS_H
end_define

begin_include
include|#
directive|include
file|<linux/kref.h>
end_include

begin_include
include|#
directive|include
file|<linux/idr.h>
end_include

begin_include
include|#
directive|include
file|<linux/mutex.h>
end_include

begin_include
include|#
directive|include
file|<linux/completion.h>
end_include

begin_include
include|#
directive|include
file|<linux/cdev.h>
end_include

begin_include
include|#
directive|include
file|<linux/srcu.h>
end_include

begin_include
include|#
directive|include
file|<linux/rcupdate.h>
end_include

begin_include
include|#
directive|include
file|<linux/rbtree.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_umem.h>
end_include

begin_include
include|#
directive|include
file|<rdma/ib_user_verbs.h>
end_include

begin_define
define|#
directive|define
name|INIT_UDATA
parameter_list|(
name|udata
parameter_list|,
name|ibuf
parameter_list|,
name|obuf
parameter_list|,
name|ilen
parameter_list|,
name|olen
parameter_list|)
define|\
value|do {								\ 		(udata)->inbuf  = (const void __user *) (ibuf);		\ 		(udata)->outbuf = (void __user *) (obuf);		\ 		(udata)->inlen  = (ilen);				\ 		(udata)->outlen = (olen);				\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|INIT_UDATA_BUF_OR_NULL
parameter_list|(
name|udata
parameter_list|,
name|ibuf
parameter_list|,
name|obuf
parameter_list|,
name|ilen
parameter_list|,
name|olen
parameter_list|)
define|\
value|do {									\ 		(udata)->inbuf  = (ilen) ? (const void __user *) (ibuf) : NULL;	\ 		(udata)->outbuf = (olen) ? (void __user *) (obuf) : NULL;	\ 		(udata)->inlen  = (ilen);					\ 		(udata)->outlen = (olen);					\ 	} while (0)
end_define

begin_comment
comment|/*  * Our lifetime rules for these structs are the following:  *  * struct ib_uverbs_device: One reference is held by the module and  * released in ib_uverbs_remove_one().  Another reference is taken by  * ib_uverbs_open() each time the character special file is opened,  * and released in ib_uverbs_release_file() when the file is released.  *  * struct ib_uverbs_file: One reference is held by the VFS and  * released when the file is closed.  Another reference is taken when  * an asynchronous event queue file is created and released when the  * event file is closed.  *  * struct ib_uverbs_event_file: One reference is held by the VFS and  * released when the file is closed.  For asynchronous event files,  * another reference is held by the corresponding main context file  * and released when that file is closed.  For completion event files,  * a reference is taken when a CQ is created that uses the file, and  * released when the CQ is destroyed.  */
end_comment

begin_struct
struct|struct
name|ib_uverbs_device
block|{
name|atomic_t
name|refcount
decl_stmt|;
name|int
name|num_comp_vectors
decl_stmt|;
name|struct
name|completion
name|comp
decl_stmt|;
name|struct
name|device
modifier|*
name|dev
decl_stmt|;
name|struct
name|ib_device
name|__rcu
modifier|*
name|ib_dev
decl_stmt|;
name|int
name|devnum
decl_stmt|;
name|struct
name|cdev
name|cdev
decl_stmt|;
name|struct
name|rb_root
name|xrcd_tree
decl_stmt|;
name|struct
name|mutex
name|xrcd_tree_mutex
decl_stmt|;
name|struct
name|kobject
name|kobj
decl_stmt|;
name|struct
name|srcu_struct
name|disassociate_srcu
decl_stmt|;
name|struct
name|mutex
name|lists_mutex
decl_stmt|;
comment|/* protect lists */
name|struct
name|list_head
name|uverbs_file_list
decl_stmt|;
name|struct
name|list_head
name|uverbs_events_file_list
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_uverbs_event_file
block|{
name|struct
name|kref
name|ref
decl_stmt|;
name|int
name|is_async
decl_stmt|;
name|struct
name|ib_uverbs_file
modifier|*
name|uverbs_file
decl_stmt|;
name|spinlock_t
name|lock
decl_stmt|;
name|int
name|is_closed
decl_stmt|;
name|wait_queue_head_t
name|poll_wait
decl_stmt|;
name|struct
name|fasync_struct
modifier|*
name|async_queue
decl_stmt|;
name|struct
name|list_head
name|event_list
decl_stmt|;
name|struct
name|list_head
name|list
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_uverbs_file
block|{
name|struct
name|kref
name|ref
decl_stmt|;
name|struct
name|mutex
name|mutex
decl_stmt|;
name|struct
name|mutex
name|cleanup_mutex
decl_stmt|;
comment|/* protect cleanup */
name|struct
name|ib_uverbs_device
modifier|*
name|device
decl_stmt|;
name|struct
name|ib_ucontext
modifier|*
name|ucontext
decl_stmt|;
name|struct
name|ib_event_handler
name|event_handler
decl_stmt|;
name|struct
name|ib_uverbs_event_file
modifier|*
name|async_file
decl_stmt|;
name|struct
name|list_head
name|list
decl_stmt|;
name|int
name|is_closed
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_uverbs_event
block|{
union|union
block|{
name|struct
name|ib_uverbs_async_event_desc
name|async
decl_stmt|;
name|struct
name|ib_uverbs_comp_event_desc
name|comp
decl_stmt|;
block|}
name|desc
union|;
name|struct
name|list_head
name|list
decl_stmt|;
name|struct
name|list_head
name|obj_list
decl_stmt|;
name|u32
modifier|*
name|counter
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_uverbs_mcast_entry
block|{
name|struct
name|list_head
name|list
decl_stmt|;
name|union
name|ib_gid
name|gid
decl_stmt|;
name|u16
name|lid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_uevent_object
block|{
name|struct
name|ib_uobject
name|uobject
decl_stmt|;
name|struct
name|list_head
name|event_list
decl_stmt|;
name|u32
name|events_reported
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_uxrcd_object
block|{
name|struct
name|ib_uobject
name|uobject
decl_stmt|;
name|atomic_t
name|refcnt
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_usrq_object
block|{
name|struct
name|ib_uevent_object
name|uevent
decl_stmt|;
name|struct
name|ib_uxrcd_object
modifier|*
name|uxrcd
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_uqp_object
block|{
name|struct
name|ib_uevent_object
name|uevent
decl_stmt|;
name|struct
name|list_head
name|mcast_list
decl_stmt|;
name|struct
name|ib_uxrcd_object
modifier|*
name|uxrcd
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_uwq_object
block|{
name|struct
name|ib_uevent_object
name|uevent
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_ucq_object
block|{
name|struct
name|ib_uobject
name|uobject
decl_stmt|;
name|struct
name|ib_uverbs_file
modifier|*
name|uverbs_file
decl_stmt|;
name|struct
name|list_head
name|comp_list
decl_stmt|;
name|struct
name|list_head
name|async_list
decl_stmt|;
name|u32
name|comp_events_reported
decl_stmt|;
name|u32
name|async_events_reported
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|spinlock_t
name|ib_uverbs_idr_lock
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_pd_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_mr_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_mw_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_ah_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_cq_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_qp_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_srq_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_xrcd_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_rule_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_wq_idr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|idr
name|ib_uverbs_rwq_ind_tbl_idr
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|idr_remove_uobj
parameter_list|(
name|struct
name|idr
modifier|*
name|idp
parameter_list|,
name|struct
name|ib_uobject
modifier|*
name|uobj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|file
modifier|*
name|ib_uverbs_alloc_event_file
parameter_list|(
name|struct
name|ib_uverbs_file
modifier|*
name|uverbs_file
parameter_list|,
name|struct
name|ib_device
modifier|*
name|ib_dev
parameter_list|,
name|int
name|is_async
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_free_async_event_file
parameter_list|(
name|struct
name|ib_uverbs_file
modifier|*
name|uverbs_file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ib_uverbs_event_file
modifier|*
name|ib_uverbs_lookup_comp_file
parameter_list|(
name|int
name|fd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_release_ucq
parameter_list|(
name|struct
name|ib_uverbs_file
modifier|*
name|file
parameter_list|,
name|struct
name|ib_uverbs_event_file
modifier|*
name|ev_file
parameter_list|,
name|struct
name|ib_ucq_object
modifier|*
name|uobj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_release_uevent
parameter_list|(
name|struct
name|ib_uverbs_file
modifier|*
name|file
parameter_list|,
name|struct
name|ib_uevent_object
modifier|*
name|uobj
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_comp_handler
parameter_list|(
name|struct
name|ib_cq
modifier|*
name|cq
parameter_list|,
name|void
modifier|*
name|cq_context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_cq_event_handler
parameter_list|(
name|struct
name|ib_event
modifier|*
name|event
parameter_list|,
name|void
modifier|*
name|context_ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_qp_event_handler
parameter_list|(
name|struct
name|ib_event
modifier|*
name|event
parameter_list|,
name|void
modifier|*
name|context_ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_wq_event_handler
parameter_list|(
name|struct
name|ib_event
modifier|*
name|event
parameter_list|,
name|void
modifier|*
name|context_ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_srq_event_handler
parameter_list|(
name|struct
name|ib_event
modifier|*
name|event
parameter_list|,
name|void
modifier|*
name|context_ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_event_handler
parameter_list|(
name|struct
name|ib_event_handler
modifier|*
name|handler
parameter_list|,
name|struct
name|ib_event
modifier|*
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_uverbs_dealloc_xrcd
parameter_list|(
name|struct
name|ib_uverbs_device
modifier|*
name|dev
parameter_list|,
name|struct
name|ib_xrcd
modifier|*
name|xrcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|uverbs_dealloc_mw
parameter_list|(
name|struct
name|ib_mw
modifier|*
name|mw
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ib_uverbs_flow_spec
block|{
union|union
block|{
union|union
block|{
name|struct
name|ib_uverbs_flow_spec_hdr
name|hdr
decl_stmt|;
struct|struct
block|{
name|__u32
name|type
decl_stmt|;
name|__u16
name|size
decl_stmt|;
name|__u16
name|reserved
decl_stmt|;
block|}
struct|;
block|}
union|;
name|struct
name|ib_uverbs_flow_spec_eth
name|eth
decl_stmt|;
name|struct
name|ib_uverbs_flow_spec_ipv4
name|ipv4
decl_stmt|;
name|struct
name|ib_uverbs_flow_spec_tcp_udp
name|tcp_udp
decl_stmt|;
name|struct
name|ib_uverbs_flow_spec_ipv6
name|ipv6
decl_stmt|;
block|}
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|IB_UVERBS_DECLARE_CMD
parameter_list|(
name|name
parameter_list|)
define|\
value|ssize_t ib_uverbs_##name(struct ib_uverbs_file *file,		\ 				 struct ib_device *ib_dev,              \ 				 const char __user *buf, int in_len,	\ 				 int out_len)
end_define

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|get_context
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|query_device
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|query_port
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|alloc_pd
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|dealloc_pd
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|reg_mr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|rereg_mr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|dereg_mr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|alloc_mw
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|dealloc_mw
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|create_comp_channel
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|create_cq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|resize_cq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|poll_cq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|req_notify_cq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|destroy_cq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|create_qp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|open_qp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|query_qp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|modify_qp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|destroy_qp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|post_send
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|post_recv
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|post_srq_recv
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|create_ah
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|destroy_ah
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|attach_mcast
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|detach_mcast
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|create_srq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|modify_srq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|query_srq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|destroy_srq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|create_xsrq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|open_xrcd
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_CMD
argument_list|(
name|close_xrcd
argument_list|)
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|IB_UVERBS_DECLARE_EX_CMD
parameter_list|(
name|name
parameter_list|)
define|\
value|int ib_uverbs_ex_##name(struct ib_uverbs_file *file,	\ 				struct ib_device *ib_dev,		\ 				struct ib_udata *ucore,		\ 				struct ib_udata *uhw)
end_define

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|create_flow
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|destroy_flow
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|query_device
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|create_cq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|create_qp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|create_wq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|modify_wq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|destroy_wq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|create_rwq_ind_table
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IB_UVERBS_DECLARE_EX_CMD
argument_list|(
name|destroy_rwq_ind_table
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* UVERBS_H */
end_comment

end_unit

