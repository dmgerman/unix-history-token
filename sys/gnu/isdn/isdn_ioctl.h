begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_decl_stmt
specifier|static
name|char
name|_isdn_ioctl_id
index|[]
init|=
literal|"@(#)$FreeBSD$"
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*******************************************************************************  *  II - Version 0.1 $Revision: 1.1 $   $State: Exp $  *  * Copyright 1994 Dietmar Friede  *******************************************************************************  * Bug reports, patches, comments, suggestions should be sent to:  *  *	jkr@saarlink.de or jkrause@guug.de  *  *******************************************************************************  * $Log: isdn_ioctl.h,v $  * Revision 1.1  1995/02/14  15:00:35  jkh  * An ISDN driver that supports the EDSS1 and the 1TR6 ISDN interfaces.  * EDSS1 is the "Euro-ISDN", 1TR6 is the soon obsolete german ISDN Interface.  * Obtained from: Dietmar Friede<dfriede@drnhh.neuhaus.de> and  * 	Juergen Krause<jkr@saarlink.de>  *  * This is only one part - the rest to follow in a couple of hours.  * This part is a benign import, since it doesn't affect anything else.  *  *  ******************************************************************************/
end_comment

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|1
name|)
end_pragma

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_char
name|protokoll
decl_stmt|;
name|u_char
name|length
decl_stmt|;
name|u_short
name|data_length
decl_stmt|;
name|u_char
name|link_addr_a
decl_stmt|;
name|u_char
name|link_addr_b
decl_stmt|;
name|u_char
name|modulo_mode
decl_stmt|;
name|u_char
name|window_size
decl_stmt|;
name|u_char
name|xid
decl_stmt|;
block|}
name|dlpd_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_char
name|protokoll
decl_stmt|;
name|u_char
name|length
decl_stmt|;
name|u_short
name|lic
decl_stmt|,
name|hic
decl_stmt|,
name|ltc
decl_stmt|,
name|htc
decl_stmt|,
name|loc
decl_stmt|,
name|hoc
decl_stmt|;
name|u_char
name|modulo_mode
decl_stmt|;
block|}
name|ncpd_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_char
name|length
decl_stmt|;
name|u_short
name|lic
decl_stmt|,
name|hic
decl_stmt|,
name|ltc
decl_stmt|,
name|htc
decl_stmt|,
name|loc
decl_stmt|,
name|hoc
decl_stmt|;
name|u_char
name|modulo_mode
decl_stmt|;
block|}
name|ncpi_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_char
name|stat
decl_stmt|;
name|u_char
name|length
decl_stmt|;
name|u_char
name|no
index|[
literal|124
index|]
decl_stmt|;
block|}
name|telno_t
typedef|;
end_typedef

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|)
end_pragma

begin_typedef
typedef|typedef
struct|struct
block|{
name|short
name|appl
decl_stmt|;
name|dlpd_t
name|dlpd
decl_stmt|;
name|ncpd_t
name|ncpd
decl_stmt|;
name|u_long
name|timeout
decl_stmt|;
name|u_char
name|prot
decl_stmt|;
name|int
function_decl|(
modifier|*
name|PassUp
function_decl|)
parameter_list|()
function_decl|;
comment|/* pass data from isdn interface upstream to appl. */
name|int
function_decl|(
modifier|*
name|PassUpInfo
function_decl|)
parameter_list|()
function_decl|;
comment|/* pass info from isdn interface upstream to appl. */
name|int
function_decl|(
modifier|*
name|PassDown
function_decl|)
parameter_list|()
function_decl|;
comment|/* get data from application */
name|int
function_decl|(
modifier|*
name|Connect
function_decl|)
parameter_list|()
function_decl|;
comment|/* Connect Indikation */
name|int
function_decl|(
modifier|*
name|DisConn
function_decl|)
parameter_list|()
function_decl|;
comment|/* Disconnect Indikation */
name|short
name|drivno
decl_stmt|;
comment|/* Number of the high level Driver */
name|char
name|ctrl
decl_stmt|;
name|char
name|typ
decl_stmt|;
name|short
name|state
decl_stmt|;
name|short
name|listen_state
decl_stmt|;
name|u_long
name|send_err
decl_stmt|;
block|}
name|isdn_appl_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|char
name|ctrl
decl_stmt|;
name|char
name|islisten
decl_stmt|;
name|short
name|unit
decl_stmt|;
name|short
name|appl
decl_stmt|;
name|int
function_decl|(
modifier|*
name|connect
function_decl|)
parameter_list|()
function_decl|;
name|int
function_decl|(
modifier|*
name|listen
function_decl|)
parameter_list|()
function_decl|;
name|int
function_decl|(
modifier|*
name|accept
function_decl|)
parameter_list|()
function_decl|;
name|int
function_decl|(
modifier|*
name|disconnect
function_decl|)
parameter_list|()
function_decl|;
name|int
function_decl|(
modifier|*
name|output
function_decl|)
parameter_list|()
function_decl|;
name|int
function_decl|(
modifier|*
name|state
function_decl|)
parameter_list|()
function_decl|;
name|short
name|o_len
decl_stmt|;
name|char
modifier|*
name|o_buf
decl_stmt|;
name|time_t
name|lastact
decl_stmt|;
name|u_long
name|send_err
decl_stmt|;
name|u_long
name|rcv_err
decl_stmt|;
block|}
name|isdn_ctrl_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|short
name|appl
decl_stmt|;
name|dlpd_t
name|dlpd
decl_stmt|;
name|ncpd_t
name|ncpd
decl_stmt|;
name|u_long
name|timeout
decl_stmt|;
name|u_char
name|prot
decl_stmt|;
block|}
name|isdn_param
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|short
name|appl
decl_stmt|;
name|short
name|ctrl
decl_stmt|;
name|u_char
name|b_channel
decl_stmt|;
name|u_long
name|inf_mask
decl_stmt|;
name|u_char
name|out_serv
decl_stmt|;
name|u_char
name|out_serv_add
decl_stmt|;
name|u_char
name|src_subadr
decl_stmt|;
name|u_char
name|spv
decl_stmt|;
name|telno_t
name|telno
decl_stmt|;
block|}
name|dial_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|short
name|appl
decl_stmt|;
name|short
name|ctrl
decl_stmt|;
name|u_long
name|inf_mask
decl_stmt|;
name|u_short
name|subadr_mask
decl_stmt|;
name|u_short
name|si_mask
decl_stmt|;
block|}
name|listen_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|ISBUSY
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0x80) == 0)
end_define

begin_define
define|#
directive|define
name|ISFREE
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0x80) == 0x80)
end_define

begin_define
define|#
directive|define
name|TELNO_VALID
value|1
end_define

begin_define
define|#
directive|define
name|TELNO_PROMISC
value|2
end_define

begin_define
define|#
directive|define
name|N_ISDN_CTRL
value|2
end_define

begin_define
define|#
directive|define
name|ISDN_DIAL
value|_IOWR('I',1,dial_t)
end_define

begin_define
define|#
directive|define
name|ISDN_LISTEN
value|_IOWR('I',2,listen_t)
end_define

begin_define
define|#
directive|define
name|ISDN_ACCEPT
value|_IOWR('I',3,int)
end_define

begin_define
define|#
directive|define
name|ISDN_HANGUP
value|_IOWR('I',4,int)
end_define

begin_define
define|#
directive|define
name|ISDN_SET_PARAM
value|_IOWR('I',8,isdn_param)
end_define

begin_define
define|#
directive|define
name|ISDN_GET_PARAM
value|_IOWR('I',9,isdn_param)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|KERNEL
end_ifdef

begin_comment
comment|/* XXX should be elsewhere. */
end_comment

begin_comment
comment|/* From isdn.c. */
end_comment

begin_decl_stmt
name|void
name|isdn_accept_con_ind
name|__P
argument_list|(
operator|(
name|int
name|an
operator|,
name|int
name|cn
operator|,
name|char
name|serv
operator|,
name|char
name|serv_add
operator|,
name|char
name|subadr
operator|,
name|char
name|nl
operator|,
name|char
operator|*
name|num
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|isdn_conn_ind
name|__P
argument_list|(
operator|(
name|int
name|an
operator|,
name|int
name|cn
operator|,
name|int
name|dial
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|isdn_ctrl_attach
name|__P
argument_list|(
operator|(
name|int
name|n
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|isdn_disconn_ind
name|__P
argument_list|(
operator|(
name|int
name|an
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|isdn_disconnect
name|__P
argument_list|(
operator|(
name|int
name|an
operator|,
name|int
name|rea
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|isdn_info
name|__P
argument_list|(
operator|(
name|int
name|an
operator|,
name|int
name|typ
operator|,
name|int
name|len
operator|,
name|char
operator|*
name|data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|isdn_input
name|__P
argument_list|(
operator|(
name|int
name|an
operator|,
name|int
name|len
operator|,
name|char
operator|*
name|buf
operator|,
name|int
name|dir
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|isdn_msg
name|__P
argument_list|(
operator|(
name|int
name|an
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|isdn_output
name|__P
argument_list|(
operator|(
name|int
name|an
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* From if_ii.c. */
end_comment

begin_decl_stmt
name|int
name|iiattach
name|__P
argument_list|(
operator|(
name|int
name|ap
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* From iispy.c. */
end_comment

begin_decl_stmt
name|int
name|ispyattach
name|__P
argument_list|(
operator|(
name|int
name|ap
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* From iitel.c. */
end_comment

begin_decl_stmt
name|int
name|itelattach
name|__P
argument_list|(
operator|(
name|int
name|ap
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* From iitty.c. */
end_comment

begin_decl_stmt
name|int
name|ityattach
name|__P
argument_list|(
operator|(
name|int
name|ap
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* KERNEL */
end_comment

end_unit

