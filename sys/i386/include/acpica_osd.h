begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2000 Mitsuru IWASAKI<iwasaki@FreeBSD.org>  * Copyright (c) 2000 Munehiro Matsuda<haro@tk.kubota.co.jp>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	$Id: acpica_osd.h,v 1.3 2000/08/09 14:47:48 iwasaki Exp $  *	$FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<machine/bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/vmparam.h>
end_include

begin_include
include|#
directive|include
file|<sys/acpi.h>
end_include

begin_include
include|#
directive|include
file|<vm/vm.h>
end_include

begin_include
include|#
directive|include
file|<vm/pmap.h>
end_include

begin_include
include|#
directive|include
file|<pci/pcivar.h>
end_include

begin_comment
comment|/*  * ACPICA compatibility  */
end_comment

begin_function_decl
specifier|static
name|UINT32
name|OsdInX
parameter_list|(
name|ACPI_IO_ADDRESS
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|OsdOutX
parameter_list|(
name|ACPI_IO_ADDRESS
parameter_list|,
name|UINT32
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Platform/Hardware independent I/O interfaces  */
end_comment

begin_function
specifier|static
name|__inline
name|UINT32
name|OsdInX
parameter_list|(
name|ACPI_IO_ADDRESS
name|InPort
parameter_list|,
name|int
name|bytes
parameter_list|)
block|{
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|UINT32
name|retval
decl_stmt|;
name|bst
operator|=
name|I386_BUS_SPACE_IO
expr_stmt|;
name|bsh
operator|=
name|InPort
expr_stmt|;
switch|switch
condition|(
name|bytes
condition|)
block|{
case|case
literal|1
case|:
name|retval
operator|=
name|bus_space_read_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|retval
operator|=
name|bus_space_read_2
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|retval
operator|=
name|bus_space_read_4
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
name|printf
argument_list|(
literal|"OsdInX: wrong length to read\n"
argument_list|)
expr_stmt|;
name|retval
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|(
name|retval
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|UINT8
name|OsdIn8
parameter_list|(
name|ACPI_IO_ADDRESS
name|InPort
parameter_list|)
block|{
return|return
operator|(
name|OsdInX
argument_list|(
name|InPort
argument_list|,
literal|1
argument_list|)
operator|&
literal|0xff
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|UINT16
name|OsdIn16
parameter_list|(
name|ACPI_IO_ADDRESS
name|InPort
parameter_list|)
block|{
return|return
operator|(
name|OsdInX
argument_list|(
name|InPort
argument_list|,
literal|2
argument_list|)
operator|&
literal|0xffff
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|UINT32
name|OsdIn32
parameter_list|(
name|ACPI_IO_ADDRESS
name|InPort
parameter_list|)
block|{
return|return
operator|(
name|OsdInX
argument_list|(
name|InPort
argument_list|,
literal|4
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|OsdOutX
parameter_list|(
name|ACPI_IO_ADDRESS
name|OutPort
parameter_list|,
name|UINT32
name|Value
parameter_list|,
name|int
name|bytes
parameter_list|)
block|{
name|bus_space_tag_t
name|bst
decl_stmt|;
name|bus_space_handle_t
name|bsh
decl_stmt|;
name|bst
operator|=
name|I386_BUS_SPACE_IO
expr_stmt|;
name|bsh
operator|=
name|OutPort
expr_stmt|;
switch|switch
condition|(
name|bytes
condition|)
block|{
case|case
literal|1
case|:
name|bus_space_write_1
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
literal|0
argument_list|,
name|Value
operator|&
literal|0xff
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|bus_space_write_2
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
literal|0
argument_list|,
name|Value
operator|&
literal|0xffff
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|bus_space_write_4
argument_list|(
name|bst
argument_list|,
name|bsh
argument_list|,
literal|0
argument_list|,
name|Value
argument_list|)
expr_stmt|;
break|break;
default|default:
name|printf
argument_list|(
literal|"OsdOutX: wrong length to write\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|void
name|OsdOut8
parameter_list|(
name|ACPI_IO_ADDRESS
name|OutPort
parameter_list|,
name|UINT8
name|Value
parameter_list|)
block|{
name|OsdOutX
argument_list|(
name|OutPort
argument_list|,
name|Value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|void
name|OsdOut16
parameter_list|(
name|ACPI_IO_ADDRESS
name|OutPort
parameter_list|,
name|UINT16
name|Value
parameter_list|)
block|{
name|OsdOutX
argument_list|(
name|OutPort
argument_list|,
name|Value
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|void
name|OsdOut32
parameter_list|(
name|ACPI_IO_ADDRESS
name|OutPort
parameter_list|,
name|UINT32
name|Value
parameter_list|)
block|{
name|OsdOutX
argument_list|(
name|OutPort
argument_list|,
name|Value
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|ACPI_STATUS
name|OsdMapMemory
parameter_list|(
name|void
modifier|*
name|PhysicalAddress
parameter_list|,
name|UINT32
name|Length
parameter_list|,
name|void
modifier|*
modifier|*
name|LogicalAddress
parameter_list|)
block|{
name|vm_offset_t
name|PhysicalEnd
decl_stmt|;
name|vm_offset_t
name|PhysicalOffs
decl_stmt|;
name|PhysicalEnd
operator|=
operator|(
name|vm_offset_t
operator|)
name|PhysicalAddress
operator|+
name|Length
expr_stmt|;
if|if
condition|(
name|PhysicalEnd
operator|<
literal|1024
operator|*
literal|1024
condition|)
block|{
comment|/* 		 * The first 1Mb is mapped at KERNBASE. 		 */
operator|*
name|LogicalAddress
operator|=
operator|(
name|void
operator|*
operator|)
call|(
name|uintptr_t
call|)
argument_list|(
name|KERNBASE
operator|+
operator|(
name|vm_offset_t
operator|)
name|PhysicalAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PhysicalOffs
operator|=
operator|(
name|vm_offset_t
operator|)
name|PhysicalAddress
operator|-
name|trunc_page
argument_list|(
operator|(
name|vm_offset_t
operator|)
name|PhysicalAddress
argument_list|)
expr_stmt|;
operator|*
name|LogicalAddress
operator|=
operator|(
name|caddr_t
operator|)
name|pmap_mapdev
argument_list|(
operator|(
name|vm_offset_t
operator|)
name|PhysicalAddress
operator|-
name|PhysicalOffs
argument_list|,
name|Length
operator|+
name|PhysicalOffs
argument_list|)
operator|+
name|PhysicalOffs
expr_stmt|;
block|}
return|return
operator|(
name|AE_OK
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|void
name|OsdUnMapMemory
parameter_list|(
name|void
modifier|*
name|LogicalAddress
parameter_list|,
name|UINT32
name|Length
parameter_list|)
block|{
if|if
condition|(
operator|(
name|vm_offset_t
operator|)
name|LogicalAddress
operator|+
name|Length
operator|-
name|KERNBASE
operator|>=
literal|1024
operator|*
literal|1024
condition|)
block|{
name|pmap_unmapdev
argument_list|(
operator|(
name|vm_offset_t
operator|)
name|LogicalAddress
argument_list|,
name|Length
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * Standard access to PCI configuration space  */
end_comment

begin_function
specifier|static
name|__inline
name|ACPI_STATUS
name|OsdReadPciCfg
parameter_list|(
name|UINT32
name|Bus
parameter_list|,
name|UINT32
name|DeviceFunction
parameter_list|,
name|UINT32
name|Register
parameter_list|,
name|UINT32
modifier|*
name|Value
parameter_list|,
name|int
name|bytes
parameter_list|)
block|{
name|pcicfgregs
name|pcicfg
decl_stmt|;
comment|/* 	 * XXX Hack for Alpha(tsunami) systems. 	 * pcicfg.hose is set to -1 in the hope that, 	 * tsunami_cfgreadX() will set it up right. 	 * Other Alpha systems (and i386's) don't seem to use hose. 	 */
name|pcicfg
operator|.
name|hose
operator|=
operator|-
literal|1
expr_stmt|;
name|pcicfg
operator|.
name|bus
operator|=
name|Bus
expr_stmt|;
name|pcicfg
operator|.
name|slot
operator|=
operator|(
name|DeviceFunction
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|pcicfg
operator|.
name|func
operator|=
name|DeviceFunction
operator|&
literal|0xff
expr_stmt|;
operator|*
name|Value
operator|=
name|pci_cfgread
argument_list|(
operator|&
name|pcicfg
argument_list|,
name|Register
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|(
name|AE_OK
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|ACPI_STATUS
name|OsdReadPciCfgByte
parameter_list|(
name|UINT32
name|Bus
parameter_list|,
name|UINT32
name|DeviceFunction
parameter_list|,
name|UINT32
name|Register
parameter_list|,
name|UINT8
modifier|*
name|Value
parameter_list|)
block|{
name|ACPI_STATUS
name|status
decl_stmt|;
name|UINT32
name|tmp
decl_stmt|;
name|status
operator|=
name|OsdReadPciCfg
argument_list|(
name|Bus
argument_list|,
name|DeviceFunction
argument_list|,
name|Register
argument_list|,
operator|&
name|tmp
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|*
name|Value
operator|=
name|tmp
operator|&
literal|0xff
expr_stmt|;
return|return
operator|(
name|status
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|ACPI_STATUS
name|OsdReadPciCfgWord
parameter_list|(
name|UINT32
name|Bus
parameter_list|,
name|UINT32
name|DeviceFunction
parameter_list|,
name|UINT32
name|Register
parameter_list|,
name|UINT16
modifier|*
name|Value
parameter_list|)
block|{
name|ACPI_STATUS
name|status
decl_stmt|;
name|UINT32
name|tmp
decl_stmt|;
name|status
operator|=
name|OsdReadPciCfg
argument_list|(
name|Bus
argument_list|,
name|DeviceFunction
argument_list|,
name|Register
argument_list|,
operator|&
name|tmp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|*
name|Value
operator|=
name|tmp
operator|&
literal|0xffff
expr_stmt|;
return|return
operator|(
name|status
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|ACPI_STATUS
name|OsdReadPciCfgDword
parameter_list|(
name|UINT32
name|Bus
parameter_list|,
name|UINT32
name|DeviceFunction
parameter_list|,
name|UINT32
name|Register
parameter_list|,
name|UINT32
modifier|*
name|Value
parameter_list|)
block|{
name|ACPI_STATUS
name|status
decl_stmt|;
name|UINT32
name|tmp
decl_stmt|;
name|status
operator|=
name|OsdReadPciCfg
argument_list|(
name|Bus
argument_list|,
name|DeviceFunction
argument_list|,
name|Register
argument_list|,
operator|&
name|tmp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|*
name|Value
operator|=
name|tmp
expr_stmt|;
return|return
operator|(
name|status
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|ACPI_STATUS
name|OsdWritePciCfg
parameter_list|(
name|UINT32
name|Bus
parameter_list|,
name|UINT32
name|DeviceFunction
parameter_list|,
name|UINT32
name|Register
parameter_list|,
name|UINT32
name|Value
parameter_list|,
name|int
name|bytes
parameter_list|)
block|{
name|pcicfgregs
name|pcicfg
decl_stmt|;
comment|/* 	 * XXX Hack for Alpha(tsunami) systems. 	 * pcicfg.hose is set to -1 in the hope that, 	 * tsunami_cfgreadX() will set it up right. 	 * Other Alpha systems (and i386's) don't seem to use hose. 	 */
name|pcicfg
operator|.
name|hose
operator|=
operator|-
literal|1
expr_stmt|;
name|pcicfg
operator|.
name|bus
operator|=
name|Bus
expr_stmt|;
name|pcicfg
operator|.
name|slot
operator|=
operator|(
name|DeviceFunction
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|pcicfg
operator|.
name|func
operator|=
name|DeviceFunction
operator|&
literal|0xff
expr_stmt|;
name|pci_cfgwrite
argument_list|(
operator|&
name|pcicfg
argument_list|,
name|Register
argument_list|,
name|Value
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
return|return
operator|(
name|AE_OK
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|ACPI_STATUS
name|OsdWritePciCfgByte
parameter_list|(
name|UINT32
name|Bus
parameter_list|,
name|UINT32
name|DeviceFunction
parameter_list|,
name|UINT32
name|Register
parameter_list|,
name|UINT8
name|Value
parameter_list|)
block|{
return|return
operator|(
name|OsdWritePciCfg
argument_list|(
name|Bus
argument_list|,
name|DeviceFunction
argument_list|,
name|Register
argument_list|,
operator|(
name|UINT32
operator|)
name|Value
argument_list|,
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|ACPI_STATUS
name|OsdWritePciCfgWord
parameter_list|(
name|UINT32
name|Bus
parameter_list|,
name|UINT32
name|DeviceFunction
parameter_list|,
name|UINT32
name|Register
parameter_list|,
name|UINT16
name|Value
parameter_list|)
block|{
return|return
operator|(
name|OsdWritePciCfg
argument_list|(
name|Bus
argument_list|,
name|DeviceFunction
argument_list|,
name|Register
argument_list|,
operator|(
name|UINT32
operator|)
name|Value
argument_list|,
literal|2
argument_list|)
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_NO_OSDFUNC_INLINE
end_ifndef

begin_function
specifier|static
name|__inline
endif|#
directive|endif
name|ACPI_STATUS
name|OsdWritePciCfgDword
parameter_list|(
name|UINT32
name|Bus
parameter_list|,
name|UINT32
name|DeviceFunction
parameter_list|,
name|UINT32
name|Register
parameter_list|,
name|UINT32
name|Value
parameter_list|)
block|{
return|return
operator|(
name|OsdWritePciCfg
argument_list|(
name|Bus
argument_list|,
name|DeviceFunction
argument_list|,
name|Register
argument_list|,
name|Value
argument_list|,
literal|4
argument_list|)
operator|)
return|;
block|}
end_function

end_unit

