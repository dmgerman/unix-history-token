begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************  * hypercall.h  *   * Linux-specific hypervisor handling.  *   * Copyright (c) 2002-2004, K A Fraser  *   * This file may be distributed separately from the Linux kernel, or  * incorporated into other software packages, subject to the following license:  *   * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this source file (the "Software"), to deal in the Software without  * restriction, including without limitation the rights to use, copy, modify,  * merge, publish, distribute, sublicense, and/or sell copies of the Software,  * and to permit persons to whom the Software is furnished to do so, subject to  * the following conditions:  *   * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS  * IN THE SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__HYPERCALL_H__
end_ifndef

begin_define
define|#
directive|define
name|__HYPERCALL_H__
end_define

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<xen/interface/xen.h>
end_include

begin_include
include|#
directive|include
file|<xen/interface/sched.h>
end_include

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|hypercall_page
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|__STR
parameter_list|(
name|x
parameter_list|)
value|#x
end_define

begin_define
define|#
directive|define
name|STR
parameter_list|(
name|x
parameter_list|)
value|__STR(x)
end_define

begin_define
define|#
directive|define
name|ENOXENSYS
value|38
end_define

begin_define
define|#
directive|define
name|CONFIG_XEN_COMPAT
value|0x030002
end_define

begin_define
define|#
directive|define
name|HYPERCALL_STR
parameter_list|(
name|name
parameter_list|)
define|\
value|"call hypercall_page + ("STR(__HYPERVISOR_##name)" * 32)"
end_define

begin_define
define|#
directive|define
name|_hypercall0
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
define|\
value|({                                              \         long __res;                             \         __asm__ volatile (                          \                 HYPERCALL_STR(name)             \                 : "=a" (__res)                  \                 :                               \                 : "memory" );                   \         (type)__res;                            \ })
end_define

begin_define
define|#
directive|define
name|_hypercall1
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|)
define|\
value|({                                                              \         long __res, __ign1;                                     \         __asm__ volatile (                                          \                 HYPERCALL_STR(name)                             \                 : "=a" (__res), "=b" (__ign1)                   \                 : "1" ((long)(a1))                              \                 : "memory" );                                   \         (type)__res;                                            \ })
end_define

begin_define
define|#
directive|define
name|_hypercall2
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|)
define|\
value|({                                                              \         long __res, __ign1, __ign2;                             \         __asm__ volatile (                                          \                 HYPERCALL_STR(name)                             \                 : "=a" (__res), "=b" (__ign1), "=c" (__ign2)    \                 : "1" ((long)(a1)), "2" ((long)(a2))            \                 : "memory" );                                   \         (type)__res;                                            \ })
end_define

begin_define
define|#
directive|define
name|_hypercall3
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|,
name|a3
parameter_list|)
define|\
value|({                                                              \         long __res, __ign1, __ign2, __ign3;                     \         __asm__ volatile (                                          \                 HYPERCALL_STR(name)                             \                 : "=a" (__res), "=b" (__ign1), "=c" (__ign2),   \                 "=d" (__ign3)                                   \                 : "1" ((long)(a1)), "2" ((long)(a2)),           \                 "3" ((long)(a3))                                \                 : "memory" );                                   \         (type)__res;                                            \ })
end_define

begin_define
define|#
directive|define
name|_hypercall4
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|,
name|a3
parameter_list|,
name|a4
parameter_list|)
define|\
value|({                                                              \         long __res, __ign1, __ign2, __ign3, __ign4;             \         __asm__ volatile (                                          \                 HYPERCALL_STR(name)                             \                 : "=a" (__res), "=b" (__ign1), "=c" (__ign2),   \                 "=d" (__ign3), "=S" (__ign4)                    \                 : "1" ((long)(a1)), "2" ((long)(a2)),           \                 "3" ((long)(a3)), "4" ((long)(a4))              \                 : "memory" );                                   \         (type)__res;                                            \ })
end_define

begin_define
define|#
directive|define
name|_hypercall5
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|a1
parameter_list|,
name|a2
parameter_list|,
name|a3
parameter_list|,
name|a4
parameter_list|,
name|a5
parameter_list|)
define|\
value|({                                                              \         long __res, __ign1, __ign2, __ign3, __ign4, __ign5;     \         __asm__ volatile (                                          \                 HYPERCALL_STR(name)                             \                 : "=a" (__res), "=b" (__ign1), "=c" (__ign2),   \                 "=d" (__ign3), "=S" (__ign4), "=D" (__ign5)     \                 : "1" ((long)(a1)), "2" ((long)(a2)),           \                 "3" ((long)(a3)), "4" ((long)(a4)),             \                 "5" ((long)(a5))                                \                 : "memory" );                                   \         (type)__res;                                            \ })
end_define

begin_function
specifier|static
specifier|inline
name|long
name|privcmd_hypercall
parameter_list|(
name|long
name|op
parameter_list|,
name|long
name|a1
parameter_list|,
name|long
name|a2
parameter_list|,
name|long
name|a3
parameter_list|,
name|long
name|a4
parameter_list|,
name|long
name|a5
parameter_list|)
block|{
name|long
name|__res
decl_stmt|,
name|__ign1
decl_stmt|,
name|__ign2
decl_stmt|,
name|__ign3
decl_stmt|,
name|__ign4
decl_stmt|,
name|__ign5
decl_stmt|,
name|__call
decl_stmt|;
name|__call
operator|=
operator|(
name|long
operator|)
operator|&
name|hypercall_page
operator|+
operator|(
name|op
operator|*
literal|32
operator|)
expr_stmt|;
asm|__asm__
specifier|volatile
asm|( 		"call *%[call]" 		: "=a" (__res), "=b" (__ign1), "=c" (__ign2),                 "=d" (__ign3), "=S" (__ign4), "=D" (__ign5)                 : "1" ((long)(a1)), "2" ((long)(a2)),                 "3" ((long)(a3)), "4" ((long)(a4)),                 "5" ((long)(a5)), [call] "a" (__call) 		: "memory" );
return|return
name|__res
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_set_trap_table
parameter_list|(
name|trap_info_t
modifier|*
name|table
parameter_list|)
block|{
return|return
name|_hypercall1
argument_list|(
name|int
argument_list|,
name|set_trap_table
argument_list|,
name|table
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_mmu_update
parameter_list|(
name|mmu_update_t
modifier|*
name|req
parameter_list|,
name|int
name|count
parameter_list|,
name|int
modifier|*
name|success_count
parameter_list|,
name|domid_t
name|domid
parameter_list|)
block|{
return|return
name|_hypercall4
argument_list|(
name|int
argument_list|,
name|mmu_update
argument_list|,
name|req
argument_list|,
name|count
argument_list|,
name|success_count
argument_list|,
name|domid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_mmuext_op
parameter_list|(
name|mmuext_op_t
modifier|*
name|op
parameter_list|,
name|int
name|count
parameter_list|,
name|int
modifier|*
name|success_count
parameter_list|,
name|domid_t
name|domid
parameter_list|)
block|{
return|return
name|_hypercall4
argument_list|(
name|int
argument_list|,
name|mmuext_op
argument_list|,
name|op
argument_list|,
name|count
argument_list|,
name|success_count
argument_list|,
name|domid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_set_gdt
parameter_list|(
name|unsigned
name|long
modifier|*
name|frame_list
parameter_list|,
name|int
name|entries
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|set_gdt
argument_list|,
name|frame_list
argument_list|,
name|entries
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_stack_switch
parameter_list|(
name|unsigned
name|long
name|ss
parameter_list|,
name|unsigned
name|long
name|esp
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|stack_switch
argument_list|,
name|ss
argument_list|,
name|esp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_set_callbacks
parameter_list|(
name|unsigned
name|long
name|event_selector
parameter_list|,
name|unsigned
name|long
name|event_address
parameter_list|,
name|unsigned
name|long
name|failsafe_selector
parameter_list|,
name|unsigned
name|long
name|failsafe_address
parameter_list|)
block|{
return|return
name|_hypercall4
argument_list|(
name|int
argument_list|,
name|set_callbacks
argument_list|,
name|event_selector
argument_list|,
name|event_address
argument_list|,
name|failsafe_selector
argument_list|,
name|failsafe_address
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_fpu_taskswitch
parameter_list|(
name|int
name|set
parameter_list|)
block|{
return|return
name|_hypercall1
argument_list|(
name|int
argument_list|,
name|fpu_taskswitch
argument_list|,
name|set
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_sched_op_compat
parameter_list|(
name|int
name|cmd
parameter_list|,
name|unsigned
name|long
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|sched_op_compat
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_sched_op
parameter_list|(
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|sched_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|HYPERVISOR_set_timer_op
parameter_list|(
name|uint64_t
name|timeout
parameter_list|)
block|{
name|unsigned
name|long
name|timeout_hi
init|=
call|(
name|unsigned
name|long
call|)
argument_list|(
name|timeout
operator|>>
literal|32
argument_list|)
decl_stmt|;
name|unsigned
name|long
name|timeout_lo
init|=
operator|(
name|unsigned
name|long
operator|)
name|timeout
decl_stmt|;
return|return
name|_hypercall2
argument_list|(
name|long
argument_list|,
name|set_timer_op
argument_list|,
name|timeout_lo
argument_list|,
name|timeout_hi
argument_list|)
return|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|static inline int HYPERVISOR_platform_op(         struct xen_platform_op *platform_op) {         platform_op->interface_version = XENPF_INTERFACE_VERSION;         return _hypercall1(int, platform_op, platform_op); }
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_set_debugreg
parameter_list|(
name|int
name|reg
parameter_list|,
name|unsigned
name|long
name|value
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|set_debugreg
argument_list|,
name|reg
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|HYPERVISOR_get_debugreg
parameter_list|(
name|int
name|reg
parameter_list|)
block|{
return|return
name|_hypercall1
argument_list|(
argument|unsigned long
argument_list|,
argument|get_debugreg
argument_list|,
argument|reg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_update_descriptor
parameter_list|(
name|uint64_t
name|ma
parameter_list|,
name|uint64_t
name|desc
parameter_list|)
block|{
return|return
name|_hypercall4
argument_list|(
name|int
argument_list|,
name|update_descriptor
argument_list|,
name|ma
argument_list|,
name|ma
operator|>>
literal|32
argument_list|,
name|desc
argument_list|,
name|desc
operator|>>
literal|32
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_memory_op
parameter_list|(
name|unsigned
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|memory_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_multicall
parameter_list|(
name|void
modifier|*
name|call_list
parameter_list|,
name|int
name|nr_calls
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|multicall
argument_list|,
name|call_list
argument_list|,
name|nr_calls
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_update_va_mapping
parameter_list|(
name|unsigned
name|long
name|va
parameter_list|,
name|uint64_t
name|new_val
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|)
block|{
name|uint32_t
name|hi
decl_stmt|,
name|lo
decl_stmt|;
name|lo
operator|=
call|(
name|uint32_t
call|)
argument_list|(
name|new_val
operator|&
literal|0xffffffff
argument_list|)
expr_stmt|;
name|hi
operator|=
call|(
name|uint32_t
call|)
argument_list|(
name|new_val
operator|>>
literal|32
argument_list|)
expr_stmt|;
return|return
name|_hypercall4
argument_list|(
name|int
argument_list|,
name|update_va_mapping
argument_list|,
name|va
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_event_channel_op
parameter_list|(
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|int
name|rc
init|=
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|event_channel_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
decl_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
if|if
condition|(
name|__predict_false
argument_list|(
name|rc
operator|==
operator|-
name|ENOXENSYS
argument_list|)
condition|)
block|{
name|struct
name|evtchn_op
name|op
decl_stmt|;
name|op
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|op
operator|.
name|u
argument_list|,
name|arg
argument_list|,
sizeof|sizeof
argument_list|(
name|op
operator|.
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|=
name|_hypercall1
argument_list|(
name|int
argument_list|,
name|event_channel_op_compat
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|arg
argument_list|,
operator|&
name|op
operator|.
name|u
argument_list|,
sizeof|sizeof
argument_list|(
name|op
operator|.
name|u
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
operator|(
name|rc
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_xen_version
parameter_list|(
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|xen_version
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_console_io
parameter_list|(
name|int
name|cmd
parameter_list|,
name|int
name|count
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
return|return
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|console_io
argument_list|,
name|cmd
argument_list|,
name|count
argument_list|,
name|str
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_physdev_op
parameter_list|(
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|int
name|rc
init|=
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|physdev_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
decl_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
if|if
condition|(
name|__predict_false
argument_list|(
name|rc
operator|==
operator|-
name|ENOXENSYS
argument_list|)
condition|)
block|{
name|struct
name|physdev_op
name|op
decl_stmt|;
name|op
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|memcpy
argument_list|(
operator|&
name|op
operator|.
name|u
argument_list|,
name|arg
argument_list|,
sizeof|sizeof
argument_list|(
name|op
operator|.
name|u
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|=
name|_hypercall1
argument_list|(
name|int
argument_list|,
name|physdev_op_compat
argument_list|,
operator|&
name|op
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|arg
argument_list|,
operator|&
name|op
operator|.
name|u
argument_list|,
sizeof|sizeof
argument_list|(
name|op
operator|.
name|u
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
operator|(
name|rc
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_grant_table_op
parameter_list|(
name|unsigned
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|uop
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|)
block|{
return|return
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|grant_table_op
argument_list|,
name|cmd
argument_list|,
name|uop
argument_list|,
name|count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_update_va_mapping_otherdomain
parameter_list|(
name|unsigned
name|long
name|va
parameter_list|,
name|uint64_t
name|new_val
parameter_list|,
name|unsigned
name|long
name|flags
parameter_list|,
name|domid_t
name|domid
parameter_list|)
block|{
name|uint32_t
name|hi
decl_stmt|,
name|lo
decl_stmt|;
name|lo
operator|=
call|(
name|uint32_t
call|)
argument_list|(
name|new_val
operator|&
literal|0xffffffff
argument_list|)
expr_stmt|;
name|hi
operator|=
call|(
name|uint32_t
call|)
argument_list|(
name|new_val
operator|>>
literal|32
argument_list|)
expr_stmt|;
return|return
name|_hypercall5
argument_list|(
name|int
argument_list|,
name|update_va_mapping_otherdomain
argument_list|,
name|va
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|,
name|flags
argument_list|,
name|domid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_vm_assist
parameter_list|(
name|unsigned
name|int
name|cmd
parameter_list|,
name|unsigned
name|int
name|type
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|vm_assist
argument_list|,
name|cmd
argument_list|,
name|type
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_vcpu_op
parameter_list|(
name|int
name|cmd
parameter_list|,
name|int
name|vcpuid
parameter_list|,
name|void
modifier|*
name|extra_args
parameter_list|)
block|{
return|return
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|vcpu_op
argument_list|,
name|cmd
argument_list|,
name|vcpuid
argument_list|,
name|extra_args
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_suspend
parameter_list|(
name|unsigned
name|long
name|srec
parameter_list|)
block|{
name|struct
name|sched_shutdown
name|sched_shutdown
init|=
block|{
operator|.
name|reason
operator|=
name|SHUTDOWN_suspend
block|}
decl_stmt|;
name|int
name|rc
init|=
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|sched_op
argument_list|,
name|SCHEDOP_shutdown
argument_list|,
operator|&
name|sched_shutdown
argument_list|,
name|srec
argument_list|)
decl_stmt|;
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
if|if
condition|(
name|rc
operator|==
operator|-
name|ENOXENSYS
condition|)
name|rc
operator|=
name|_hypercall3
argument_list|(
name|int
argument_list|,
name|sched_op_compat
argument_list|,
name|SCHEDOP_shutdown
argument_list|,
name|SHUTDOWN_suspend
argument_list|,
name|srec
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|(
name|rc
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|CONFIG_XEN_COMPAT
operator|<=
literal|0x030002
end_if

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_nmi_op
parameter_list|(
name|unsigned
name|long
name|op
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|nmi_op
argument_list|,
name|op
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_callback_op
parameter_list|(
name|int
name|cmd
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|callback_op
argument_list|,
name|cmd
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|CONFIG_XEN
end_ifndef

begin_function
specifier|static
specifier|inline
name|unsigned
name|long
name|HYPERVISOR_hvm_op
parameter_list|(
name|int
name|op
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
argument|unsigned long
argument_list|,
argument|hvm_op
argument_list|,
argument|op
argument_list|,
argument|arg
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_xenoprof_op
parameter_list|(
name|int
name|op
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|xenoprof_op
argument_list|,
name|op
argument_list|,
name|arg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|HYPERVISOR_kexec_op
parameter_list|(
name|unsigned
name|long
name|op
parameter_list|,
name|void
modifier|*
name|args
parameter_list|)
block|{
return|return
name|_hypercall2
argument_list|(
name|int
argument_list|,
name|kexec_op
argument_list|,
name|op
argument_list|,
name|args
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __HYPERCALL_H__ */
end_comment

begin_comment
comment|/*  * Local variables:  *  c-file-style: "linux"  *  indent-tabs-mode: t  *  c-indent-level: 8  *  c-basic-offset: 8  *  tab-width: 8  * End:  */
end_comment

end_unit

