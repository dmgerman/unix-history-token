begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * This file is a part of configure.c  *  * hex2hex reads an input file in Intel HEX format and produces  * an (unsigned char) array which contains the bytes and writes it to the  * output file using C syntax  */
end_comment

begin_define
define|#
directive|define
name|MAX_SIZE
value|(256*1024)
end_define

begin_define
define|#
directive|define
name|ABANDON
parameter_list|(
name|why
parameter_list|)
value|{ \ 		fprintf(stderr, "%s: " why "\n", source); \ 		fclose(inf);fclose(outf);return 0; \ 		}
end_define

begin_function
name|int
name|hex2hex
parameter_list|(
name|char
modifier|*
name|source
parameter_list|,
name|char
modifier|*
name|target
parameter_list|,
name|char
modifier|*
name|varline
parameter_list|)
block|{
name|FILE
modifier|*
name|inf
decl_stmt|,
modifier|*
name|outf
decl_stmt|;
name|int
name|i
decl_stmt|,
name|l
decl_stmt|,
name|c
decl_stmt|;
name|unsigned
name|char
name|buf
index|[
name|MAX_SIZE
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|inf
operator|=
name|fopen
argument_list|(
name|source
argument_list|,
literal|"r"
argument_list|)
operator|)
operator|==
name|NULL
condition|)
block|{
name|perror
argument_list|(
name|source
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|(
name|outf
operator|=
name|fopen
argument_list|(
name|target
argument_list|,
literal|"w"
argument_list|)
operator|)
operator|==
name|NULL
condition|)
block|{
name|perror
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|inf
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|l
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|getc
argument_list|(
name|inf
argument_list|)
operator|)
operator|!=
name|EOF
condition|)
block|{
if|if
condition|(
name|c
operator|==
literal|':'
condition|)
comment|/* Sync with beginning of line */
block|{
name|int
name|n
decl_stmt|,
name|check
decl_stmt|;
name|unsigned
name|char
name|sum
decl_stmt|;
name|int
name|addr
decl_stmt|;
name|int
name|linetype
decl_stmt|;
if|if
condition|(
name|fscanf
argument_list|(
name|inf
argument_list|,
literal|"%02x"
argument_list|,
operator|&
name|n
argument_list|)
operator|!=
literal|1
condition|)
name|ABANDON
argument_list|(
literal|"File format error"
argument_list|)
expr_stmt|;
name|sum
operator|=
name|n
expr_stmt|;
if|if
condition|(
name|fscanf
argument_list|(
name|inf
argument_list|,
literal|"%04x"
argument_list|,
operator|&
name|addr
argument_list|)
operator|!=
literal|1
condition|)
name|ABANDON
argument_list|(
literal|"File format error"
argument_list|)
expr_stmt|;
name|sum
operator|+=
name|addr
operator|/
literal|256
expr_stmt|;
name|sum
operator|+=
name|addr
operator|%
literal|256
expr_stmt|;
if|if
condition|(
name|fscanf
argument_list|(
name|inf
argument_list|,
literal|"%02x"
argument_list|,
operator|&
name|linetype
argument_list|)
operator|!=
literal|1
condition|)
name|ABANDON
argument_list|(
literal|"File format error"
argument_list|)
expr_stmt|;
name|sum
operator|+=
name|linetype
expr_stmt|;
if|if
condition|(
name|linetype
operator|!=
literal|0
condition|)
continue|continue;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fscanf
argument_list|(
name|inf
argument_list|,
literal|"%02x"
argument_list|,
operator|&
name|c
argument_list|)
operator|!=
literal|1
condition|)
name|ABANDON
argument_list|(
literal|"File format error"
argument_list|)
expr_stmt|;
if|if
condition|(
name|addr
operator|>=
name|MAX_SIZE
condition|)
name|ABANDON
argument_list|(
literal|"File too large"
argument_list|)
expr_stmt|;
name|buf
index|[
name|addr
operator|++
index|]
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|addr
operator|>
name|l
condition|)
name|l
operator|=
name|addr
expr_stmt|;
name|sum
operator|+=
name|c
expr_stmt|;
block|}
if|if
condition|(
name|fscanf
argument_list|(
name|inf
argument_list|,
literal|"%02x"
argument_list|,
operator|&
name|check
argument_list|)
operator|!=
literal|1
condition|)
name|ABANDON
argument_list|(
literal|"File format error"
argument_list|)
expr_stmt|;
name|sum
operator|=
operator|~
name|sum
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|check
operator|!=
name|sum
condition|)
name|ABANDON
argument_list|(
literal|"Line checksum error"
argument_list|)
expr_stmt|;
block|}
block|}
name|fprintf
argument_list|(
name|outf
argument_list|,
literal|"/*\n *\t Computer generated file. Do not edit.\n */\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|outf
argument_list|,
literal|"static unsigned char %s[] = {\n"
argument_list|,
name|varline
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|l
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
condition|)
name|fprintf
argument_list|(
name|outf
argument_list|,
literal|","
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|&&
operator|!
operator|(
name|i
operator|%
literal|16
operator|)
condition|)
name|fprintf
argument_list|(
name|outf
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|outf
argument_list|,
literal|"0x%02x"
argument_list|,
name|buf
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|fprintf
argument_list|(
name|outf
argument_list|,
literal|"\n};\n\n"
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|inf
argument_list|)
expr_stmt|;
name|fclose
argument_list|(
name|outf
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function

end_unit

