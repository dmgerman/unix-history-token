begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *	dev_table.h  *  *	Global definitions for device call tables  *   * Copyright by Hannu Savolainen 1993  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEV_TABLE_H_
end_ifndef

begin_define
define|#
directive|define
name|_DEV_TABLE_H_
end_define

begin_comment
comment|/*  *	NOTE! 	NOTE!	NOTE!	NOTE!  *  *	If you modify this file, please check the dev_table.c also.  *  *	NOTE! 	NOTE!	NOTE!	NOTE!  */
end_comment

begin_struct
struct|struct
name|card_info
block|{
name|int
name|card_type
decl_stmt|;
comment|/*	From soundcard.c	*/
name|char
modifier|*
name|name
decl_stmt|;
name|long
function_decl|(
modifier|*
name|attach
function_decl|)
parameter_list|(
name|long
name|mem_start
parameter_list|,
name|struct
name|address_info
modifier|*
name|hw_config
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|probe
function_decl|)
parameter_list|(
name|struct
name|address_info
modifier|*
name|hw_config
parameter_list|)
function_decl|;
name|struct
name|address_info
name|config
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/** UWM -- new  MIDI structure here.. **/
end_comment

begin_struct
struct|struct
name|generic_midi_info
block|{
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Name of the MIDI device.. */
name|long
function_decl|(
modifier|*
name|attach
function_decl|)
parameter_list|(
name|long
name|mem_start
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|audio_operations
block|{
name|char
name|name
index|[
literal|32
index|]
decl_stmt|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|output_block
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|long
name|buf
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|intrflag
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|start_input
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|long
name|buf
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|intrflag
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|unsigned
name|int
name|arg
parameter_list|,
name|int
name|local
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|prepare_for_input
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|bufsize
parameter_list|,
name|int
name|nbufs
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|prepare_for_output
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|bufsize
parameter_list|,
name|int
name|nbufs
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|halt_xfer
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|has_output_drained
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|copy_from_user
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|char
modifier|*
name|localbuf
parameter_list|,
name|int
name|localoffs
parameter_list|,
name|snd_rw_buf
modifier|*
name|userbuf
parameter_list|,
name|int
name|useroffs
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mixer_operations
block|{
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|unsigned
name|int
name|arg
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|synth_operations
block|{
name|struct
name|synth_info
modifier|*
name|info
decl_stmt|;
name|int
name|synth_type
decl_stmt|;
name|int
name|synth_subtype
decl_stmt|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|unsigned
name|int
name|arg
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|kill_note
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|velocity
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|start_note
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|note
parameter_list|,
name|int
name|velocity
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_instr
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|instr
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|hw_control
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
modifier|*
name|event
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|load_patch
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|format
parameter_list|,
name|snd_rw_buf
modifier|*
name|addr
parameter_list|,
name|int
name|offs
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|pmgr_flag
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|aftertouch
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|pressure
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|controller
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|ctrl_num
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|panning
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|pmgr_interface
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|struct
name|patmgr_info
modifier|*
name|info
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|midi_operations
block|{
name|struct
name|midi_info
name|info
decl_stmt|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|mode
parameter_list|,
name|void
function_decl|(
modifier|*
name|inputintr
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
name|data
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|outputintr
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|unsigned
name|int
name|arg
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|putc
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
name|data
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|start_read
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|end_read
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|kick
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|command
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
name|data
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|buffer_status
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/** UWM -- new structure for MIDI  **/
end_comment

begin_struct
struct|struct
name|generic_midi_operations
block|{
name|struct
name|midi_info
name|info
decl_stmt|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|write
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|snd_rw_buf
modifier|*
name|data
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|read
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|snd_rw_buf
modifier|*
name|data
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|ALL_EXTERNAL_TO_ME
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|_MIDI_TABLE_C_
end_ifdef

begin_comment
comment|/** UWM **/
end_comment

begin_decl_stmt
name|struct
name|generic_midi_operations
modifier|*
name|generic_midi_devs
index|[
name|MAX_MIDI_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_generic_midis
init|=
literal|0
decl_stmt|,
name|pro_midi_dev
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|generic_midi_info
name|midi_supported
index|[]
init|=
block|{
ifndef|#
directive|ifndef
name|EXCLUDE_PRO_MIDI
block|{
literal|"ProAudioSpectrum MV101"
block|,
name|pro_midi_attach
block|}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_midi_drivers
init|=
sizeof|sizeof
argument_list|(
name|midi_supported
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
expr|struct
name|generic_midi_info
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_DEV_TABLE_C_
end_ifdef

begin_decl_stmt
name|struct
name|audio_operations
modifier|*
name|dsp_devs
index|[
name|MAX_DSP_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_dspdevs
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|mixer_operations
modifier|*
name|mixer_devs
index|[
name|MAX_MIXER_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_mixers
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|synth_operations
modifier|*
name|synth_devs
index|[
name|MAX_SYNTH_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_synths
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|midi_operations
modifier|*
name|midi_devs
index|[
name|MAX_MIDI_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_midis
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|EXCLUDE_MPU401
end_ifndef

begin_decl_stmt
name|int
name|mpu401_dev
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  *	Note! The detection order is significant. Don't change it.  */
end_comment

begin_decl_stmt
name|struct
name|card_info
name|supported_drivers
index|[]
init|=
block|{
ifndef|#
directive|ifndef
name|EXCLUDE_MPU401
block|{
name|SNDCARD_MPU401
block|,
literal|"Roland MPU-401"
block|,
name|attach_mpu401
block|,
name|probe_mpu401
block|,
block|{
name|MPU_BASE
block|,
name|MPU_IRQ
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|EXCLUDE_GUS
block|{
name|SNDCARD_GUS
block|,
literal|"Gravis Ultrasound"
block|,
name|attach_gus_card
block|,
name|probe_gus
block|,
block|{
name|GUS_BASE
block|,
name|GUS_IRQ
block|,
name|GUS_DMA
block|}
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|EXCLUDE_PAS
block|{
name|SNDCARD_PAS
block|,
literal|"ProAudioSpectrum"
block|,
name|attach_pas_card
block|,
name|probe_pas
block|,
block|{
name|PAS_BASE
block|,
name|PAS_IRQ
block|,
name|PAS_DMA
block|}
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|EXCLUDE_SB
block|{
name|SNDCARD_SB
block|,
literal|"SoundBlaster"
block|,
name|attach_sb_card
block|,
name|probe_sb
block|,
block|{
name|SBC_BASE
block|,
name|SBC_IRQ
block|,
name|SBC_DMA
block|}
block|}
block|,
endif|#
directive|endif
ifndef|#
directive|ifndef
name|EXCLUDE_YM3812
block|{
name|SNDCARD_ADLIB
block|,
literal|"AdLib"
block|,
name|attach_adlib_card
block|,
name|probe_adlib
block|,
block|{
name|FM_MONO
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
block|{
literal|0
block|,
literal|"*?*"
block|,
name|NULL
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_sound_drivers
init|=
sizeof|sizeof
argument_list|(
name|supported_drivers
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
expr|struct
name|card_info
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|EXCLUDE_AUDIO
end_ifndef

begin_decl_stmt
name|int
name|sound_buffcounts
index|[
name|MAX_DSP_DEV
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|long
name|sound_buffsizes
index|[
name|MAX_DSP_DEV
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sound_dsp_dmachan
index|[
name|MAX_DSP_DEV
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sound_dma_automode
index|[
name|MAX_DSP_DEV
index|]
init|=
block|{
literal|0
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|extern
name|struct
name|audio_operations
modifier|*
name|dsp_devs
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_dspdevs
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|mixer_operations
modifier|*
name|mixer_devs
index|[
name|MAX_MIXER_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_mixers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|synth_operations
modifier|*
name|synth_devs
index|[
name|MAX_SYNTH_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_synths
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|midi_operations
modifier|*
name|midi_devs
index|[
name|MAX_MIDI_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_midis
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|EXCLUDE_MPU401
end_ifndef

begin_decl_stmt
specifier|extern
name|int
name|mpu401_dev
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|struct
name|card_info
name|supported_drivers
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_sound_drivers
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|EXCLUDE_AUDIO
end_ifndef

begin_decl_stmt
specifier|extern
name|int
name|sound_buffcounts
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|long
name|sound_buffsizes
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|sound_dsp_dmachan
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|sound_dma_automode
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|long
name|sndtable_init
parameter_list|(
name|long
name|mem_start
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sndtable_get_cardcount
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|long
name|CMIDI_init
parameter_list|(
name|long
name|mem_start
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* If external to me.... :) */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|ALL_EXTERNAL_TO_ME
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|audio_operations
modifier|*
name|dsp_devs
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_dspdevs
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|mixer_operations
modifier|*
name|mixer_devs
index|[
name|MAX_MIXER_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_mixers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|synth_operations
modifier|*
name|synth_devs
index|[
name|MAX_SYNTH_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_synths
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|midi_operations
modifier|*
name|midi_devs
index|[
name|MAX_MIDI_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_midis
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|generic_midi_operations
modifier|*
name|generic_midi_devs
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_generic_midis
decl_stmt|,
name|pro_midi_dev
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|EXCLUDE_MPU401
end_ifndef

begin_decl_stmt
specifier|extern
name|int
name|mpu401_dev
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|struct
name|generic_midi_info
name|midi_supported
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|card_info
name|supported_drivers
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_sound_drivers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_midi_drivers
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|EXCLUDE_AUDIO
end_ifndef

begin_decl_stmt
specifier|extern
name|int
name|sound_buffcounts
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|long
name|sound_buffsizes
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|sound_dsp_dmachan
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|sound_dma_automode
index|[
name|MAX_DSP_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

