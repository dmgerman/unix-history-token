begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * dev_table.h  *   * Global definitions for device call tables  *   * Copyright by Hannu Savolainen 1993  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met: 1. Redistributions of source code must retain the above copyright  * notice, this list of conditions and the following disclaimer. 2.  * Redistributions in binary form must reproduce the above copyright notice,  * this list of conditions and the following disclaimer in the documentation  * and/or other materials provided with the distribution.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEV_TABLE_H_
end_ifndef

begin_define
define|#
directive|define
name|_DEV_TABLE_H_
end_define

begin_comment
comment|/*  * NOTE! 	NOTE!	NOTE!	NOTE!  *   * If you modify this file, please check the dev_table.c also.  *   * NOTE! 	NOTE!	NOTE!	NOTE!  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|sound_started
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|driver_info
block|{
name|char
modifier|*
name|driver_id
decl_stmt|;
name|int
name|card_subtype
decl_stmt|;
comment|/* Driver specific. Usually 0 */
name|int
name|card_type
decl_stmt|;
comment|/* From soundcard.h	 */
name|char
modifier|*
name|name
decl_stmt|;
name|void
function_decl|(
modifier|*
name|attach
function_decl|)
parameter_list|(
name|struct
name|address_info
modifier|*
name|hw_config
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|probe
function_decl|)
parameter_list|(
name|struct
name|address_info
modifier|*
name|hw_config
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|card_info
block|{
name|int
name|card_type
decl_stmt|;
comment|/* Link (search key) to the driver list */
name|struct
name|address_info
name|config
decl_stmt|;
name|int
name|enabled
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
struct|struct
name|pnp_sounddev
block|{
name|int
name|id
decl_stmt|;
name|void
function_decl|(
modifier|*
name|setup
function_decl|)
parameter_list|(
name|void
modifier|*
name|dev
parameter_list|)
function_decl|;
name|char
modifier|*
name|driver_name
decl_stmt|;
block|}
name|pnp_sounddev
typedef|;
end_typedef

begin_comment
comment|/*  * Device specific parameters (used only by dmabuf.c)  */
end_comment

begin_define
define|#
directive|define
name|MAX_SUB_BUFFERS
value|(32*MAX_REALTIME_FACTOR)
end_define

begin_define
define|#
directive|define
name|DMODE_NONE
value|0
end_define

begin_define
define|#
directive|define
name|DMODE_OUTPUT
value|1
end_define

begin_define
define|#
directive|define
name|DMODE_INPUT
value|2
end_define

begin_struct
struct|struct
name|dma_buffparms
block|{
name|int
name|dma_mode
decl_stmt|;
comment|/* DMODE_INPUT, DMODE_OUTPUT or DMODE_NONE */
name|char
modifier|*
name|raw_buf
decl_stmt|;
comment|/* Pointers to raw buffers */
name|u_long
name|raw_buf_phys
decl_stmt|;
comment|/* 	 * Device state tables 	 */
name|u_long
name|flags
decl_stmt|;
define|#
directive|define
name|DMA_BUSY
value|0x00000001
define|#
directive|define
name|DMA_RESTART
value|0x00000002
define|#
directive|define
name|DMA_ACTIVE
value|0x00000004
define|#
directive|define
name|DMA_STARTED
value|0x00000008
define|#
directive|define
name|DMA_ALLOC_DONE
value|0x00000020
name|int
name|open_mode
decl_stmt|;
comment|/* 	 * Queue parameters. 	 */
name|int
name|qlen
decl_stmt|;
name|int
name|qhead
decl_stmt|;
name|int
name|qtail
decl_stmt|;
name|int
name|nbufs
decl_stmt|;
name|int
name|counts
index|[
name|MAX_SUB_BUFFERS
index|]
decl_stmt|;
name|int
name|subdivision
decl_stmt|;
name|int
name|fragment_size
decl_stmt|;
name|int
name|max_fragments
decl_stmt|;
name|int
name|bytes_in_use
decl_stmt|;
name|int
name|underrun_count
decl_stmt|;
name|int
name|byte_counter
decl_stmt|;
name|int
name|mapping_flags
decl_stmt|;
define|#
directive|define
name|DMA_MAP_MAPPED
value|0x00000001
name|char
name|neutral_byte
decl_stmt|;
name|int
name|dma_chan
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Structure for use with various microcontrollers and DSP processors in the  * recent soundcards.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|coproc_operations
block|{
name|char
name|name
index|[
literal|32
index|]
decl_stmt|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|void
modifier|*
name|devc
parameter_list|,
name|int
name|sub_device
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|void
modifier|*
name|devc
parameter_list|,
name|int
name|sub_device
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|void
modifier|*
name|devc
parameter_list|,
name|u_int
name|cmd
parameter_list|,
name|ioctl_arg
name|arg
parameter_list|,
name|int
name|local
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|void
modifier|*
name|devc
parameter_list|)
function_decl|;
name|void
modifier|*
name|devc
decl_stmt|;
comment|/* Driver specific info */
block|}
name|coproc_operations
typedef|;
end_typedef

begin_struct
struct|struct
name|audio_operations
block|{
name|char
name|name
index|[
literal|32
index|]
decl_stmt|;
name|int
name|flags
decl_stmt|;
define|#
directive|define
name|NOTHING_SPECIAL
value|0
define|#
directive|define
name|NEEDS_RESTART
value|1
define|#
directive|define
name|DMA_AUTOMODE
value|2
define|#
directive|define
name|DMA_DUPLEX
value|4
define|#
directive|define
name|DMA_DISABLE
value|8
name|int
name|format_mask
decl_stmt|;
comment|/* Bitmask for supported audio formats */
name|void
modifier|*
name|devc
decl_stmt|;
comment|/* Driver specific info */
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|output_block
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|long
name|buf
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|intrflag
parameter_list|,
name|int
name|dma_restart
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|start_input
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|long
name|buf
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|intrflag
parameter_list|,
name|int
name|dma_restart
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|u_int
name|cmd
parameter_list|,
name|ioctl_arg
name|arg
parameter_list|,
name|int
name|local
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|prepare_for_input
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|bufsize
parameter_list|,
name|int
name|nbufs
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|prepare_for_output
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|bufsize
parameter_list|,
name|int
name|nbufs
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|halt_xfer
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|local_qlen
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|copy_from_user
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|char
modifier|*
name|localbuf
parameter_list|,
name|int
name|localoffs
parameter_list|,
name|snd_rw_buf
modifier|*
name|userbuf
parameter_list|,
name|int
name|useroffs
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|halt_input
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|halt_output
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|trigger
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|bits
parameter_list|)
function_decl|;
name|long
name|buffsize
decl_stmt|;
name|int
name|dmachan1
decl_stmt|,
name|dmachan2
decl_stmt|;
name|struct
name|dma_buffparms
modifier|*
name|dmap_in
decl_stmt|,
modifier|*
name|dmap_out
decl_stmt|;
name|struct
name|coproc_operations
modifier|*
name|coproc
decl_stmt|;
name|int
name|mixer_dev
decl_stmt|;
name|int
name|enable_bits
decl_stmt|;
name|int
name|open_mode
decl_stmt|;
name|int
name|go
decl_stmt|;
name|int
name|otherside
decl_stmt|;
name|int
name|busy
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mixer_operations
block|{
name|char
name|name
index|[
literal|32
index|]
decl_stmt|;
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|ioctl_arg
name|arg
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|synth_operations
block|{
name|struct
name|synth_info
modifier|*
name|info
decl_stmt|;
name|int
name|midi_dev
decl_stmt|;
name|int
name|synth_type
decl_stmt|;
name|int
name|synth_subtype
decl_stmt|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|ioctl_arg
name|arg
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|kill_note
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|note
parameter_list|,
name|int
name|velocity
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|start_note
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|note
parameter_list|,
name|int
name|velocity
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_instr
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|instr
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|reset
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|hw_control
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
modifier|*
name|event
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|load_patch
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|format
parameter_list|,
name|snd_rw_buf
modifier|*
name|addr
parameter_list|,
name|int
name|offs
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|pmgr_flag
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|aftertouch
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|pressure
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|controller
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|ctrl_num
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|panning
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|volume_method
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|pmgr_interface
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|struct
name|patmgr_info
modifier|*
name|info
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|bender
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|alloc_voice
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|chn
parameter_list|,
name|int
name|note
parameter_list|,
name|struct
name|voice_alloc_info
modifier|*
name|alloc
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|setup_voice
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|voice
parameter_list|,
name|int
name|chn
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|send_sysex
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|struct
name|voice_alloc_info
name|alloc
decl_stmt|;
name|struct
name|channel_info
name|chn_info
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|midi_input_info
block|{
comment|/* MIDI input scanner variables */
define|#
directive|define
name|MI_MAX
value|10
name|int
name|m_busy
decl_stmt|;
name|unsigned
name|char
name|m_buf
index|[
name|MI_MAX
index|]
decl_stmt|;
name|unsigned
name|char
name|m_prev_status
decl_stmt|;
comment|/* For running status */
name|int
name|m_ptr
decl_stmt|;
define|#
directive|define
name|MST_INIT
value|0
define|#
directive|define
name|MST_DATA
value|1
define|#
directive|define
name|MST_SYSEX
value|2
name|int
name|m_state
decl_stmt|;
name|int
name|m_left
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|midi_operations
block|{
name|struct
name|midi_info
name|info
decl_stmt|;
name|struct
name|synth_operations
modifier|*
name|converter
decl_stmt|;
name|struct
name|midi_input_info
name|in_info
decl_stmt|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|mode
parameter_list|,
name|void
function_decl|(
modifier|*
name|inputintr
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
name|data
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|outputintr
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|ioctl_arg
name|arg
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|putc
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
name|data
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|start_read
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|end_read
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|kick
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|command
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|buffer_status
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|prefix_cmd
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
name|status
parameter_list|)
function_decl|;
name|struct
name|coproc_operations
modifier|*
name|coproc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sound_lowlev_timer
block|{
name|int
name|dev
decl_stmt|;
name|u_int
function_decl|(
modifier|*
name|tmr_start
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|int
name|usecs
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|tmr_disable
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|tmr_restart
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sound_timer_operations
block|{
name|struct
name|sound_timer_info
name|info
decl_stmt|;
name|int
name|priority
decl_stmt|;
name|int
name|devlink
decl_stmt|;
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|event
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|char
modifier|*
name|ev
parameter_list|)
function_decl|;
name|u_long
function_decl|(
modifier|*
name|get_time
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ioctl
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|ioctl_arg
name|arg
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|arm_timer
function_decl|)
parameter_list|(
name|int
name|dev
parameter_list|,
name|long
name|time
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_DEV_TABLE_C_
end_ifdef

begin_decl_stmt
name|struct
name|audio_operations
modifier|*
name|audio_devs
index|[
name|MAX_AUDIO_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_audiodevs
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|mixer_operations
modifier|*
name|mixer_devs
index|[
name|MAX_MIXER_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_mixers
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|synth_operations
modifier|*
name|synth_devs
index|[
name|MAX_SYNTH_DEV
operator|+
name|MAX_MIDI_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_synths
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|midi_operations
modifier|*
name|midi_devs
index|[
name|MAX_MIDI_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_midis
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_SEQUENCER
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|sound_timer_operations
name|default_sound_timer
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|sound_timer_operations
modifier|*
name|sound_timer_devs
index|[
name|MAX_TIMER_DEV
index|]
init|=
block|{
operator|&
name|default_sound_timer
block|,
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_sound_timers
init|=
literal|1
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|struct
name|sound_timer_operations
modifier|*
name|sound_timer_devs
index|[
name|MAX_TIMER_DEV
index|]
init|=
block|{
name|NULL
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_sound_timers
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * List of low level drivers compiled into the kernel.  *  * remember, each entry contains:  	char	*driver_id; 	int      card_subtype;	(Driver specific. Usually 0) 	int      card_type;	(From soundcard.h) 	char    *name; 	void    (*attach) (struct address_info * hw_config); 	int     (*probe) (struct address_info * hw_config);  *  */
end_comment

begin_decl_stmt
name|struct
name|driver_info
name|sound_drivers
index|[]
init|=
block|{
ifdef|#
directive|ifdef
name|CONFIG_PSS
block|{
literal|"PSSECHO"
block|,
literal|0
block|,
name|SNDCARD_PSS
block|,
literal|"Echo Personal Sound System PSS (ESC614)"
block|,
name|attach_pss
block|,
name|probe_pss
block|}
block|,
block|{
literal|"PSSMPU"
block|,
literal|0
block|,
name|SNDCARD_PSS_MPU
block|,
literal|"PSS-MPU"
block|,
name|attach_pss_mpu
block|,
name|probe_pss_mpu
block|}
block|,
block|{
literal|"PSSMSS"
block|,
literal|0
block|,
name|SNDCARD_PSS_MSS
block|,
literal|"PSS-MSS"
block|,
name|attach_pss_mss
block|,
name|probe_pss_mss
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_MSS
comment|/* XXX changed type from 0 to 1 -lr 970705 */
block|{
literal|"MSS"
block|,
literal|1
block|,
name|SNDCARD_MSS
block|,
literal|"MS Sound System"
block|,
name|attach_mss
block|,
name|probe_mss
block|}
block|,
comment|/* MSS without IRQ/DMA config registers (for DEC Alphas) */
block|{
literal|"PCXBJ"
block|,
literal|1
block|,
name|SNDCARD_PSEUDO_MSS
block|,
literal|"MS Sound System (AXP)"
block|,
name|attach_mss
block|,
name|probe_mss
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_MAD16
block|{
literal|"MAD16"
block|,
literal|0
block|,
name|SNDCARD_MAD16
block|,
literal|"MAD16/Mozart (MSS)"
block|,
name|attach_mad16
block|,
name|probe_mad16
block|}
block|,
block|{
literal|"MAD16MPU"
block|,
literal|0
block|,
name|SNDCARD_MAD16_MPU
block|,
literal|"MAD16/Mozart (MPU)"
block|,
name|attach_mad16_mpu
block|,
name|probe_mad16_mpu
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_CS4232
block|{
literal|"CS4232"
block|,
literal|0
block|,
name|SNDCARD_CS4232
block|,
literal|"CS4232"
block|,
name|attach_cs4232
block|,
name|probe_cs4232
block|}
block|,
block|{
literal|"CS4232MPU"
block|,
literal|0
block|,
name|SNDCARD_CS4232_MPU
block|,
literal|"CS4232 MIDI"
block|,
name|attach_cs4232_mpu
block|,
name|probe_cs4232_mpu
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_YM3812
block|{
literal|"OPL3"
block|,
literal|0
block|,
name|SNDCARD_ADLIB
block|,
literal|"OPL-2/OPL-3 FM"
block|,
name|attach_adlib_card
block|,
name|probe_adlib
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_PAS
block|{
literal|"PAS16"
block|,
literal|0
block|,
name|SNDCARD_PAS
block|,
literal|"ProAudioSpectrum"
block|,
name|attach_pas_card
block|,
name|probe_pas
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_MPU401
argument_list|)
operator|&&
name|defined
argument_list|(
name|CONFIG_MIDI
argument_list|)
block|{
literal|"MPU401"
block|,
literal|0
block|,
name|SNDCARD_MPU401
block|,
literal|"Roland MPU-401"
block|,
name|attach_mpu401
block|,
name|probe_mpu401
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_MAUI
argument_list|)
block|{
literal|"MAUI"
block|,
literal|0
block|,
name|SNDCARD_MAUI
block|,
literal|"TB Maui"
block|,
name|attach_maui
block|,
name|probe_maui
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_UART6850
argument_list|)
operator|&&
name|defined
argument_list|(
name|CONFIG_MIDI
argument_list|)
block|{
literal|"MIDI6850"
block|,
literal|0
block|,
name|SNDCARD_UART6850
block|,
literal|"6860 UART Midi"
block|,
name|attach_uart6850
block|,
name|probe_uart6850
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_SB
block|{
literal|"SBLAST"
block|,
literal|0
block|,
name|SNDCARD_SB
block|,
literal|"SoundBlaster"
block|,
name|attach_sb_card
block|,
name|probe_sb
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_SB
argument_list|)
operator|&&
name|defined
argument_list|(
name|CONFIG_SB16
argument_list|)
ifdef|#
directive|ifdef
name|CONFIG_AUDIO
block|{
literal|"SB16"
block|,
literal|0
block|,
name|SNDCARD_SB16
block|,
literal|"SoundBlaster16"
block|,
name|sb16_dsp_init
block|,
name|sb16_dsp_detect
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_AWE32
block|{
literal|"AWE32"
block|,
literal|0
block|,
name|SNDCARD_AWE32
block|,
literal|"AWE32 Synth"
block|,
name|attach_awe
block|,
name|probe_awe
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_MIDI
block|{
literal|"SB16MIDI"
block|,
literal|0
block|,
name|SNDCARD_SB16MIDI
block|,
literal|"SB16 MIDI"
block|,
name|attach_sb16midi
block|,
name|probe_sb16midi
block|}
block|,
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_GUS16
block|{
literal|"GUS16"
block|,
literal|0
block|,
name|SNDCARD_GUS16
block|,
literal|"Ultrasound 16-bit opt."
block|,
name|attach_gus_db16
block|,
name|probe_gus_db16
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_GUS
block|{
literal|"GUS"
block|,
literal|0
block|,
name|SNDCARD_GUS
block|,
literal|"Gravis Ultrasound"
block|,
name|attach_gus_card
block|,
name|probe_gus
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_SSCAPE
block|{
literal|"SSCAPE"
block|,
literal|0
block|,
name|SNDCARD_SSCAPE
block|,
literal|"Ensoniq Soundscape"
block|,
name|attach_sscape
block|,
name|probe_sscape
block|}
block|,
block|{
literal|"SSCAPEMSS"
block|,
literal|0
block|,
name|SNDCARD_SSCAPE_MSS
block|,
literal|"MS Sound System (SoundScape)"
block|,
name|attach_ss_mss
block|,
name|probe_ss_mss
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NTRIX
operator|>
literal|0
block|{
literal|"TRXPRO"
block|,
literal|0
block|,
name|SNDCARD_TRXPRO
block|,
literal|"MediaTriX AudioTriX Pro"
block|,
name|attach_trix_wss
block|,
name|probe_trix_wss
block|}
block|,
block|{
literal|"TRXPROSB"
block|,
literal|0
block|,
name|SNDCARD_TRXPRO_SB
block|,
literal|"AudioTriX (SB mode)"
block|,
name|attach_trix_sb
block|,
name|probe_trix_sb
block|}
block|,
block|{
literal|"TRXPROMPU"
block|,
literal|0
block|,
name|SNDCARD_TRXPRO_MPU
block|,
literal|"AudioTriX MIDI"
block|,
name|attach_trix_mpu
block|,
name|probe_trix_mpu
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_PNP
block|{
literal|"AD1848"
block|,
literal|0
block|,
literal|500
block|,
literal|"PnP MSS"
block|,
name|attach_pnp_ad1848
block|,
name|probe_pnp_ad1848
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_NSS
block|{
literal|"NSS"
block|,
literal|0
block|,
name|SNDCARD_NSS
block|,
literal|"NEC PC-9801-86 Sound System"
block|,
name|attach_nss
block|,
name|probe_nss
block|}
block|,
endif|#
directive|endif
block|{
name|NULL
block|,
literal|0
block|,
literal|0
block|,
literal|"*?*"
block|,
name|NULL
block|,
name|NULL
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_sound_drivers
init|=
sizeof|sizeof
argument_list|(
name|sound_drivers
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
expr|struct
name|driver_info
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|max_sound_drivers
init|=
sizeof|sizeof
argument_list|(
name|sound_drivers
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
expr|struct
name|driver_info
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|FULL_SOUND
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|FULL_SOUND
end_ifndef

begin_comment
comment|/*  * List of devices actually configured in the system.  *   * Note! The detection order is significant. Don't change it.  *  * remember, the list contains  *  *	int     card_type;	(Link (search key) to the driver list)  *	struct address_info config;  *		io_base, irq, dma, dma2,  *		always_detect, char *name, struct... *osp  *	int     enabled;  *	void    *for_driver_use;  *  */
end_comment

begin_decl_stmt
name|struct
name|card_info
name|snd_installed_cards
index|[]
init|=
block|{
ifdef|#
directive|ifdef
name|CONFIG_PSS
block|{
name|SNDCARD_PSS
block|,
block|{
name|PSS_BASE
block|,
literal|0
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
ifdef|#
directive|ifdef
name|PSS_MPU_BASE
block|{
name|SNDCARD_PSS_MPU
block|,
block|{
name|PSS_MPU_BASE
block|,
name|PSS_MPU_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|PSS_MSS_BASE
block|{
name|SNDCARD_PSS_MSS
block|,
block|{
name|PSS_MSS_BASE
block|,
name|PSS_MSS_IRQ
block|,
name|PSS_MSS_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
endif|#
directive|endif
comment|/* config PSS */
if|#
directive|if
name|NTRIX
operator|>
literal|0
block|{
name|SNDCARD_TRXPRO
block|,
block|{
name|TRIX_BASE
block|,
name|TRIX_IRQ
block|,
name|TRIX_DMA
block|,
name|TRIX_DMA2
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
ifdef|#
directive|ifdef
name|TRIX_SB_BASE
block|{
name|SNDCARD_TRXPRO_SB
block|,
block|{
name|TRIX_SB_BASE
block|,
name|TRIX_SB_IRQ
block|,
name|TRIX_SB_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|TRIX_MPU_BASE
block|{
name|SNDCARD_TRXPRO_MPU
block|,
block|{
name|TRIX_MPU_BASE
block|,
name|TRIX_MPU_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
endif|#
directive|endif
comment|/* 	NTRIX> 0	*/
ifdef|#
directive|ifdef
name|CONFIG_SSCAPE
block|{
name|SNDCARD_SSCAPE
block|,
block|{
name|SSCAPE_BASE
block|,
name|SSCAPE_IRQ
block|,
name|SSCAPE_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
block|{
name|SNDCARD_SSCAPE_MSS
block|,
block|{
name|SSCAPE_MSS_BASE
block|,
name|SSCAPE_MSS_IRQ
block|,
name|SSCAPE_MSS_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_MAD16
block|{
name|SNDCARD_MAD16
block|,
block|{
name|MAD16_BASE
block|,
name|MAD16_IRQ
block|,
name|MAD16_DMA
block|,
name|MAD16_DMA2
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
ifdef|#
directive|ifdef
name|MAD16_MPU_BASE
block|{
name|SNDCARD_MAD16_MPU
block|,
block|{
name|MAD16_MPU_BASE
block|,
name|MAD16_MPU_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
endif|#
directive|endif
comment|/* CONFIG_MAD16 */
ifdef|#
directive|ifdef
name|CONFIG_CS4232
ifdef|#
directive|ifdef
name|CS4232_MPU_BASE
block|{
name|SNDCARD_CS4232_MPU
block|,
block|{
name|CS4232_MPU_BASE
block|,
name|CS4232_MPU_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
block|{
name|SNDCARD_CS4232
block|,
block|{
name|CS4232_BASE
block|,
name|CS4232_IRQ
block|,
name|CS4232_DMA
block|,
name|CS4232_DMA2
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_MSS
ifdef|#
directive|ifdef
name|PSEUDO_MSS
block|{
name|SNDCARD_MSS
block|,
block|{
name|MSS_BASE
block|,
name|MSS_IRQ
block|,
name|MSS_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
else|#
directive|else
block|{
name|SNDCARD_PSEUDO_MSS
block|,
block|{
name|MSS_BASE
block|,
name|MSS_IRQ
block|,
name|MSS_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|MSS2_BASE
block|{
name|SNDCARD_MSS
block|,
block|{
name|MSS2_BASE
block|,
name|MSS2_IRQ
block|,
name|MSS2_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
endif|#
directive|endif
comment|/* CONFIG_MSS */
ifdef|#
directive|ifdef
name|CONFIG_PAS
block|{
name|SNDCARD_PAS
block|,
block|{
name|PAS_BASE
block|,
name|PAS_IRQ
block|,
name|PAS_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_SB
ifndef|#
directive|ifndef
name|SBC_DMA
define|#
directive|define
name|SBC_DMA
value|1
endif|#
directive|endif
block|{
name|SNDCARD_SB
block|,
block|{
name|SBC_BASE
block|,
name|SBC_IRQ
block|,
name|SBC_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_MAUI
argument_list|)
block|{
name|SNDCARD_MAUI
block|,
block|{
name|MAUI_BASE
block|,
name|MAUI_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_MPU401
argument_list|)
operator|&&
name|defined
argument_list|(
name|CONFIG_MIDI
argument_list|)
block|{
name|SNDCARD_MPU401
block|,
block|{
name|MPU_BASE
block|,
name|MPU_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
ifdef|#
directive|ifdef
name|MPU2_BASE
block|{
name|SNDCARD_MPU401
block|,
block|{
name|MPU2_BASE
block|,
name|MPU2_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|MPU3_BASE
block|{
name|SNDCARD_MPU401
block|,
block|{
name|MPU3_BASE
block|,
name|MPU2_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_UART6850
argument_list|)
operator|&&
name|defined
argument_list|(
name|CONFIG_MIDI
argument_list|)
block|{
name|SNDCARD_UART6850
block|,
block|{
name|U6850_BASE
block|,
name|U6850_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|CONFIG_SB
argument_list|)
operator|&&
name|defined
argument_list|(
name|CONFIG_SB16
argument_list|)
ifdef|#
directive|ifdef
name|CONFIG_AUDIO
block|{
name|SNDCARD_SB16
block|,
block|{
name|SBC_BASE
block|,
name|SBC_IRQ
block|,
name|SB16_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_MIDI
block|{
name|SNDCARD_SB16MIDI
block|,
block|{
name|SB16MIDI_BASE
block|,
name|SBC_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_AWE32
block|{
name|SNDCARD_AWE32
block|,
block|{
name|AWE32_BASE
block|,
literal|0
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_GUS
ifdef|#
directive|ifdef
name|CONFIG_GUS16
block|{
name|SNDCARD_GUS16
block|,
block|{
name|GUS16_BASE
block|,
name|GUS16_IRQ
block|,
name|GUS16_DMA
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
block|{
name|SNDCARD_GUS
block|,
block|{
name|GUS_BASE
block|,
name|GUS_IRQ
block|,
name|GUS_DMA
block|,
name|GUS_DMA2
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_YM3812
block|{
name|SNDCARD_ADLIB
block|,
block|{
name|FM_MONO
block|,
literal|0
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|CONFIG_NSS
block|{
name|SNDCARD_NSS
block|,
block|{
name|NSS_BASE
block|,
name|NSS_IRQ
block|,
literal|0
block|,
operator|-
literal|1
block|}
block|,
name|SND_DEFAULT_ENABLE
block|}
block|,
endif|#
directive|endif
comment|/* Define some expansion space */
block|{
literal|0
block|,
block|{
literal|0
block|}
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
block|{
literal|0
block|}
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
block|{
literal|0
block|}
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
block|{
literal|0
block|}
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
block|{
literal|0
block|}
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|num_sound_cards
init|=
sizeof|sizeof
argument_list|(
name|snd_installed_cards
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
expr|struct
name|card_info
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|max_sound_cards
init|=
sizeof|sizeof
argument_list|(
name|snd_installed_cards
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
expr|struct
name|card_info
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|int
name|num_sound_cards
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|card_info
name|snd_installed_cards
index|[
literal|20
index|]
init|=
block|{
block|{
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|max_sound_cards
init|=
literal|20
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|MODULE
end_ifdef

begin_decl_stmt
name|int
name|trace_init
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|int
name|trace_init
init|=
literal|1
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|extern
name|struct
name|audio_operations
modifier|*
name|audio_devs
index|[
name|MAX_AUDIO_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_audiodevs
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|mixer_operations
modifier|*
name|mixer_devs
index|[
name|MAX_MIXER_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_mixers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|synth_operations
modifier|*
name|synth_devs
index|[
name|MAX_SYNTH_DEV
operator|+
name|MAX_MIDI_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_synths
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|midi_operations
modifier|*
name|midi_devs
index|[
name|MAX_MIDI_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_midis
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|sound_timer_operations
modifier|*
name|sound_timer_devs
index|[
name|MAX_TIMER_DEV
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_sound_timers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|driver_info
name|sound_drivers
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_sound_drivers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|max_sound_drivers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|card_info
name|snd_installed_cards
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|num_sound_cards
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|max_sound_cards
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|trace_init
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|sndtable_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sndtable_get_cardcount
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|address_info
modifier|*
name|sound_getconf
parameter_list|(
name|int
name|card_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sound_chconf
parameter_list|(
name|int
name|card_type
parameter_list|,
name|int
name|ioaddr
parameter_list|,
name|int
name|irq
parameter_list|,
name|int
name|dma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|snd_find_driver
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sndtable_identify_card
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sound_setup
parameter_list|(
name|char
modifier|*
name|str
parameter_list|,
name|int
modifier|*
name|ints
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sound_alloc_dmap
parameter_list|(
name|int
name|dev
parameter_list|,
name|struct
name|dma_buffparms
modifier|*
name|dmap
parameter_list|,
name|int
name|chan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sound_free_dmap
parameter_list|(
name|int
name|dev
parameter_list|,
name|struct
name|dma_buffparms
modifier|*
name|dmap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|soud_map_buffer
parameter_list|(
name|int
name|dev
parameter_list|,
name|struct
name|dma_buffparms
modifier|*
name|dmap
parameter_list|,
name|buffmem_desc
modifier|*
name|info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|install_pnp_sounddrv
parameter_list|(
name|struct
name|pnp_sounddev
modifier|*
name|drv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sndtable_probe
parameter_list|(
name|int
name|unit
parameter_list|,
name|struct
name|address_info
modifier|*
name|hw_config
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sndtable_init_card
parameter_list|(
name|int
name|unit
parameter_list|,
name|struct
name|address_info
modifier|*
name|hw_config
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sound_timer_init
parameter_list|(
name|struct
name|sound_lowlev_timer
modifier|*
name|t
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sound_start_dma
parameter_list|(
name|int
name|dev
parameter_list|,
name|struct
name|dma_buffparms
modifier|*
name|dmap
parameter_list|,
name|int
name|chan
parameter_list|,
name|unsigned
name|long
name|physaddr
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|dma_mode
parameter_list|,
name|int
name|autoinit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sound_dma_intr
parameter_list|(
name|int
name|dev
parameter_list|,
name|struct
name|dma_buffparms
modifier|*
name|dmap
parameter_list|,
name|int
name|chan
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEV_TABLE_C_ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEV_TABLE_H_ */
end_comment

end_unit

