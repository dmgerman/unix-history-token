begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NecBSD: bsfunc.h,v 1.1 1997/07/18 09:19:03 kmatsuda Exp $	*/
end_comment

begin_comment
comment|/*	$NetBSD$	*/
end_comment

begin_comment
comment|/*  * [NetBSD for NEC PC98 series]  *  Copyright (c) 1994, 1995, 1996 NetBSD/pc98 porting staff.  *  All rights reserved.  *   *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  3. The name of the author may not be used to endorse or promote products  *     derived from this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * Copyright (c) 1994, 1995, 1996 Naofumi HONDA.  All rights reserved.  */
end_comment

begin_comment
comment|/**************************************************  * FUNC  **************************************************/
end_comment

begin_comment
comment|/* timeout */
end_comment

begin_function_decl
name|void
name|bstimeout
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ctrl setup */
end_comment

begin_function_decl
name|void
name|bs_setup_ctrl
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|targ_info
modifier|*
name|bs_init_target_info
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* msg op */
end_comment

begin_function_decl
name|int
name|bs_send_msg
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|struct
name|msgbase
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bsccb
modifier|*
name|bs_request_sense
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* sync msg op */
end_comment

begin_function_decl
name|int
name|bs_start_syncmsg
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|,
name|struct
name|bsccb
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bs_send_syncmsg
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bs_analyze_syncmsg
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|,
name|struct
name|bsccb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* reset device */
end_comment

begin_function_decl
name|void
name|bs_scsibus_start
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bs_reset_nexus
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bsccb
modifier|*
name|bs_force_abort
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bs_reset_device
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ccb */
end_comment

begin_function_decl
name|struct
name|bsccb
modifier|*
name|bs_make_internal_ccb
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|u_int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bsccb
modifier|*
name|bs_make_msg_ccb
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|struct
name|bsccb
modifier|*
parameter_list|,
name|struct
name|msgbase
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* misc funcs */
end_comment

begin_function_decl
name|void
name|bs_printf
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bs_panic
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|,
name|u_char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* misc debug */
end_comment

begin_function_decl
name|u_int
name|bsr
parameter_list|(
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int
name|bsw
parameter_list|(
name|u_int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bs_debug_print_all
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bs_debug_print
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|,
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**************************************************  * TARG FLAGS  *************************************************/
end_comment

begin_function_decl
specifier|static
name|BS_INLINE
name|int
name|bs_check_sat
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|BS_INLINE
name|int
name|bs_check_smit
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|BS_INLINE
name|int
name|bs_check_disc
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|BS_INLINE
name|int
name|bs_check_link
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|,
name|struct
name|bsccb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|BS_INLINE
name|u_int8_t
name|bs_identify_msg
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|BS_INLINE
name|void
name|bs_targ_flags
parameter_list|(
name|struct
name|targ_info
modifier|*
parameter_list|,
name|struct
name|bsccb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|BS_INLINE
name|int
name|bs_check_disc
parameter_list|(
name|ti
parameter_list|)
name|struct
name|targ_info
modifier|*
name|ti
decl_stmt|;
block|{
return|return
operator|(
name|ti
operator|->
name|ti_flags
operator|&
name|BSDISC
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|BS_INLINE
name|int
name|bs_check_sat
parameter_list|(
name|ti
parameter_list|)
name|struct
name|targ_info
modifier|*
name|ti
decl_stmt|;
block|{
return|return
operator|(
name|ti
operator|->
name|ti_flags
operator|&
name|BSSAT
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|BS_INLINE
name|int
name|bs_check_smit
parameter_list|(
name|ti
parameter_list|)
name|struct
name|targ_info
modifier|*
name|ti
decl_stmt|;
block|{
return|return
operator|(
name|ti
operator|->
name|ti_flags
operator|&
name|BSSMIT
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|BS_INLINE
name|int
name|bs_check_link
parameter_list|(
name|ti
parameter_list|,
name|cb
parameter_list|)
name|struct
name|targ_info
modifier|*
name|ti
decl_stmt|;
name|struct
name|bsccb
modifier|*
name|cb
decl_stmt|;
block|{
name|struct
name|bsccb
modifier|*
name|nextcb
decl_stmt|;
return|return
operator|(
operator|(
name|ti
operator|->
name|ti_flags
operator|&
name|BSLINK
operator|)
operator|&&
operator|(
name|nextcb
operator|=
name|cb
operator|->
name|ccb_chain
operator|.
name|tqe_next
operator|)
operator|&&
operator|(
name|nextcb
operator|->
name|bsccb_flags
operator|&
name|BSLINK
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|BS_INLINE
name|u_int8_t
name|bs_identify_msg
parameter_list|(
name|ti
parameter_list|)
name|struct
name|targ_info
modifier|*
name|ti
decl_stmt|;
block|{
return|return
operator|(
operator|(
name|bs_check_disc
argument_list|(
name|ti
argument_list|)
condition|?
literal|0xc0
else|:
literal|0x80
operator|)
operator||
name|ti
operator|->
name|ti_lun
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|BS_INLINE
name|void
name|bs_targ_flags
parameter_list|(
name|ti
parameter_list|,
name|cb
parameter_list|)
name|struct
name|targ_info
modifier|*
name|ti
decl_stmt|;
name|struct
name|bsccb
modifier|*
name|cb
decl_stmt|;
block|{
name|u_int
name|cmf
init|=
operator|(
name|u_int
operator|)
name|bshw_cmd
index|[
name|cb
operator|->
name|cmd
index|[
literal|0
index|]
index|]
decl_stmt|;
name|cb
operator|->
name|bsccb_flags
operator||=
operator|(
operator|(
name|cmf
operator|&
operator|(
name|BSSAT
operator||
name|BSSMIT
operator||
name|BSLINK
operator|)
operator|)
operator||
name|BSDISC
operator|)
expr_stmt|;
name|cb
operator|->
name|bsccb_flags
operator|&=
name|ti
operator|->
name|ti_mflags
expr_stmt|;
if|if
condition|(
name|cb
operator|->
name|datalen
operator|<
name|DEV_BSIZE
condition|)
name|cb
operator|->
name|bsccb_flags
operator|&=
operator|~
name|BSSMIT
expr_stmt|;
if|if
condition|(
name|cb
operator|->
name|bsccb_flags
operator|&
name|BSFORCEIOPOLL
condition|)
name|cb
operator|->
name|bsccb_flags
operator|&=
operator|~
operator|(
name|BSLINK
operator||
name|BSSMIT
operator||
name|BSSAT
operator||
name|BSDISC
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**************************************************  * QUEUE OP  **************************************************/
end_comment

begin_function_decl
specifier|static
name|BS_INLINE
name|void
name|bs_hostque_init
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|BS_INLINE
name|void
name|bs_hostque_head
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|,
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|BS_INLINE
name|void
name|bs_hostque_tail
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|,
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|BS_INLINE
name|void
name|bs_hostque_delete
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|,
name|struct
name|targ_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|BS_INLINE
name|void
name|bs_hostque_init
parameter_list|(
name|bsc
parameter_list|)
name|struct
name|bs_softc
modifier|*
name|bsc
decl_stmt|;
block|{
name|TAILQ_INIT
argument_list|(
operator|&
name|bsc
operator|->
name|sc_sttab
argument_list|)
expr_stmt|;
name|TAILQ_INIT
argument_list|(
operator|&
name|bsc
operator|->
name|sc_titab
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|BS_INLINE
name|void
name|bs_hostque_head
parameter_list|(
name|bsc
parameter_list|,
name|ti
parameter_list|)
name|struct
name|bs_softc
modifier|*
name|bsc
decl_stmt|;
name|struct
name|targ_info
modifier|*
name|ti
decl_stmt|;
block|{
if|if
condition|(
name|ti
operator|->
name|ti_flags
operator|&
name|BSQUEUED
condition|)
block|{
name|TAILQ_REMOVE
argument_list|(
operator|&
name|bsc
operator|->
name|sc_sttab
argument_list|,
name|ti
argument_list|,
name|ti_wchain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ti
operator|->
name|ti_flags
operator||=
name|BSQUEUED
expr_stmt|;
block|}
name|TAILQ_INSERT_HEAD
argument_list|(
operator|&
name|bsc
operator|->
name|sc_sttab
argument_list|,
name|ti
argument_list|,
name|ti_wchain
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|BS_INLINE
name|void
name|bs_hostque_tail
parameter_list|(
name|bsc
parameter_list|,
name|ti
parameter_list|)
name|struct
name|bs_softc
modifier|*
name|bsc
decl_stmt|;
name|struct
name|targ_info
modifier|*
name|ti
decl_stmt|;
block|{
if|if
condition|(
name|ti
operator|->
name|ti_flags
operator|&
name|BSQUEUED
condition|)
block|{
name|TAILQ_REMOVE
argument_list|(
operator|&
name|bsc
operator|->
name|sc_sttab
argument_list|,
name|ti
argument_list|,
name|ti_wchain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ti
operator|->
name|ti_flags
operator||=
name|BSQUEUED
expr_stmt|;
block|}
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|bsc
operator|->
name|sc_sttab
argument_list|,
name|ti
argument_list|,
name|ti_wchain
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|BS_INLINE
name|void
name|bs_hostque_delete
parameter_list|(
name|bsc
parameter_list|,
name|ti
parameter_list|)
name|struct
name|bs_softc
modifier|*
name|bsc
decl_stmt|;
name|struct
name|targ_info
modifier|*
name|ti
decl_stmt|;
block|{
if|if
condition|(
name|ti
operator|->
name|ti_flags
operator|&
name|BSQUEUED
condition|)
block|{
name|ti
operator|->
name|ti_flags
operator|&=
operator|~
name|BSQUEUED
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|bsc
operator|->
name|sc_sttab
argument_list|,
name|ti
argument_list|,
name|ti_wchain
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*************************************************************  * TIMEOUT  ************************************************************/
end_comment

begin_function_decl
specifier|static
name|BS_INLINE
name|void
name|bs_start_timeout
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|BS_INLINE
name|void
name|bs_terminate_timeout
parameter_list|(
name|struct
name|bs_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|BS_INLINE
name|void
name|bs_start_timeout
parameter_list|(
name|bsc
parameter_list|)
name|struct
name|bs_softc
modifier|*
name|bsc
decl_stmt|;
block|{
if|if
condition|(
operator|(
name|bsc
operator|->
name|sc_flags
operator|&
name|BSSTARTTIMEOUT
operator|)
operator|==
literal|0
condition|)
block|{
name|bsc
operator|->
name|sc_flags
operator||=
name|BSSTARTTIMEOUT
expr_stmt|;
ifdef|#
directive|ifdef
name|__FreeBSD__
name|bsc
operator|->
name|timeout_ch
operator|=
endif|#
directive|endif
name|timeout
argument_list|(
name|bstimeout
argument_list|,
name|bsc
argument_list|,
name|BS_TIMEOUT_INTERVAL
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|BS_INLINE
name|void
name|bs_terminate_timeout
parameter_list|(
name|bsc
parameter_list|)
name|struct
name|bs_softc
modifier|*
name|bsc
decl_stmt|;
block|{
if|if
condition|(
name|bsc
operator|->
name|sc_flags
operator|&
name|BSSTARTTIMEOUT
condition|)
block|{
ifdef|#
directive|ifdef
name|__FreeBSD__
name|untimeout
argument_list|(
name|bstimeout
argument_list|,
name|bsc
argument_list|,
name|bsc
operator|->
name|timeout_ch
argument_list|)
expr_stmt|;
else|#
directive|else
name|untimeout
argument_list|(
name|bstimeout
argument_list|,
name|bsc
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|bsc
operator|->
name|sc_flags
operator|&=
operator|~
name|BSSTARTTIMEOUT
expr_stmt|;
block|}
block|}
end_function

end_unit

