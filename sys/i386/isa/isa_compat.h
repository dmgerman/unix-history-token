begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1998 Doug Rabson  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|"vt.h"
end_include

begin_include
include|#
directive|include
file|"adv.h"
end_include

begin_include
include|#
directive|include
file|"ar.h"
end_include

begin_include
include|#
directive|include
file|"cs.h"
end_include

begin_include
include|#
directive|include
file|"cx.h"
end_include

begin_include
include|#
directive|include
file|"el.h"
end_include

begin_include
include|#
directive|include
file|"fe.h"
end_include

begin_include
include|#
directive|include
file|"le.h"
end_include

begin_include
include|#
directive|include
file|"lnc.h"
end_include

begin_include
include|#
directive|include
file|"rdp.h"
end_include

begin_include
include|#
directive|include
file|"sr.h"
end_include

begin_include
include|#
directive|include
file|"wl.h"
end_include

begin_include
include|#
directive|include
file|"oltr.h"
end_include

begin_include
include|#
directive|include
file|"pcm.h"
end_include

begin_include
include|#
directive|include
file|"pas.h"
end_include

begin_include
include|#
directive|include
file|"sb.h"
end_include

begin_include
include|#
directive|include
file|"sbxvi.h"
end_include

begin_include
include|#
directive|include
file|"sbmidi.h"
end_include

begin_include
include|#
directive|include
file|"awe.h"
end_include

begin_include
include|#
directive|include
file|"gus.h"
end_include

begin_include
include|#
directive|include
file|"mss.h"
end_include

begin_include
include|#
directive|include
file|"css.h"
end_include

begin_include
include|#
directive|include
file|"sscape.h"
end_include

begin_include
include|#
directive|include
file|"trix.h"
end_include

begin_include
include|#
directive|include
file|"opl.h"
end_include

begin_include
include|#
directive|include
file|"mpu.h"
end_include

begin_include
include|#
directive|include
file|"uart.h"
end_include

begin_include
include|#
directive|include
file|"mcd.h"
end_include

begin_include
include|#
directive|include
file|"scd.h"
end_include

begin_include
include|#
directive|include
file|"matcd.h"
end_include

begin_include
include|#
directive|include
file|"wt.h"
end_include

begin_include
include|#
directive|include
file|"ctx.h"
end_include

begin_include
include|#
directive|include
file|"spigot.h"
end_include

begin_include
include|#
directive|include
file|"gp.h"
end_include

begin_include
include|#
directive|include
file|"gsc.h"
end_include

begin_include
include|#
directive|include
file|"cy.h"
end_include

begin_include
include|#
directive|include
file|"dgb.h"
end_include

begin_include
include|#
directive|include
file|"dgm.h"
end_include

begin_include
include|#
directive|include
file|"labpc.h"
end_include

begin_include
include|#
directive|include
file|"rc.h"
end_include

begin_include
include|#
directive|include
file|"rp.h"
end_include

begin_include
include|#
directive|include
file|"tw.h"
end_include

begin_include
include|#
directive|include
file|"asc.h"
end_include

begin_include
include|#
directive|include
file|"stl.h"
end_include

begin_include
include|#
directive|include
file|"stli.h"
end_include

begin_include
include|#
directive|include
file|"loran.h"
end_include

begin_include
include|#
directive|include
file|"tina.h"
end_include

begin_include
include|#
directive|include
file|"fla.h"
end_include

begin_struct
struct|struct
name|old_isa_driver
block|{
name|int
name|type
decl_stmt|;
name|struct
name|isa_driver
modifier|*
name|driver
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|vtdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|advdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|ardriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|csdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|cxdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|eldriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|fedriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|ledriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|lncdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|rdpdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|srdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|wldriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|oltrdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|pasdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|sbdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|sbxvidriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|sbmididriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|awedriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|gusdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|mssdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|cssdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|sscapedriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|trixdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|sscape_mssdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|opldriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|mpudriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|uartdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|mcddriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|scddriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|matcddriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|wtdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|ctxdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|spigotdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|gpdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|gscdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|cydriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|dgbdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|dgmdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|labpcdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|rcdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|rpdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|twdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|ascdriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|stldriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|stlidriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|lorandriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|isa_driver
name|tinadriver
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|struct
name|old_isa_driver
name|old_drivers
index|[]
init|=
block|{
comment|/* Sensitive TTY */
comment|/* Sensitive BIO */
comment|/* Sensitive NET */
if|#
directive|if
name|NFE
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|fedriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NRDP
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|rdpdriver
block|}
block|,
endif|#
directive|endif
comment|/* Sensitive CAM */
comment|/* TTY */
if|#
directive|if
name|NVT
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|vtdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NGP
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|gpdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NGSC
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|gscdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NCY
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
operator||
name|INTR_TYPE_FAST
block|,
operator|&
name|cydriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NDGB
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|dgbdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NDGM
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|dgmdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NLABPC
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|labpcdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NRC
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|rcdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NRP
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|rpdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NTW
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|twdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NASC
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|ascdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSTL
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|stldriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSTLI
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
block|,
operator|&
name|stlidriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NLORAN
operator|>
literal|0
block|{
name|INTR_TYPE_TTY
operator||
name|INTR_TYPE_FAST
block|,
operator|&
name|lorandriver
block|}
block|,
endif|#
directive|endif
comment|/* BIO */
if|#
directive|if
name|NMCD
operator|>
literal|0
block|{
name|INTR_TYPE_BIO
block|,
operator|&
name|mcddriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSCD
operator|>
literal|0
block|{
name|INTR_TYPE_BIO
block|,
operator|&
name|scddriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NMATCD
operator|>
literal|0
block|{
name|INTR_TYPE_BIO
block|,
operator|&
name|matcddriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NWT
operator|>
literal|0
block|{
name|INTR_TYPE_BIO
block|,
operator|&
name|wtdriver
block|}
block|,
endif|#
directive|endif
comment|/* NET */
if|#
directive|if
name|NLE
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|ledriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NLNC
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|lncdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NCS
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|csdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NAR
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|ardriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NCX
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|cxdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NEL
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|eldriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSR
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|srdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NWL
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|wldriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NTINA
operator|>
literal|0
block|{
name|INTR_TYPE_NET
block|,
operator|&
name|tinadriver
block|}
block|,
endif|#
directive|endif
comment|/* CAM */
if|#
directive|if
name|NADV
operator|>
literal|0
block|{
name|INTR_TYPE_CAM
block|,
operator|&
name|advdriver
block|}
block|,
endif|#
directive|endif
ifdef|#
directive|ifdef
name|PC98
if|#
directive|if
name|NBS
operator|>
literal|0
block|{
name|INTR_TYPE_CAM
block|,
operator|&
name|bsdriver
block|}
block|,
endif|#
directive|endif
endif|#
directive|endif
comment|/* MISC */
if|#
directive|if
name|NOLTR
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|oltrdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NPAS
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|pasdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSB
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|sbdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSBXVI
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|sbxvidriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSBMIDI
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|sbmididriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NAWE
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|awedriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NGUS
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|gusdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NMSS
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|mssdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NCSS
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|cssdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSSCAPE
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|sscapedriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NTRIX
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|trixdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSSCAPE
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|sscape_mssdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NOPL
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|opldriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NMPU
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|mpudriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NUART
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|uartdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NCTX
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|ctxdriver
block|}
block|,
endif|#
directive|endif
if|#
directive|if
name|NSPIGOT
operator|>
literal|0
block|{
name|INTR_TYPE_MISC
block|,
operator|&
name|spigotdriver
block|}
block|,
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|old_drivers_count
value|(sizeof(old_drivers) / sizeof(old_drivers[0]))
end_define

end_unit

