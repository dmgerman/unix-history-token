begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_EFINET_H
end_ifndef

begin_define
define|#
directive|define
name|_EFINET_H
end_define

begin_comment
comment|/*++ Copyright (c) 1999  Intel Corporation  Module Name:     efinet.h  Abstract:     EFI Simple Network protocol  Revision History --*/
end_comment

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_PROTOCOL
define|\
value|{ 0xA19832B9, 0xAC25, 0x11D3, 0x9A, 0x2D, 0x00, 0x90, 0x27, 0x3F, 0xC1, 0x4D }
end_define

begin_expr_stmt
name|INTERFACE_DECL
argument_list|(
name|_EFI_SIMPLE_NETWORK
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
struct|struct
block|{
comment|/* 	 * Total number of frames received.  Includes frames with errors and 	 * dropped frames. 	 */
name|UINT64
name|RxTotalFrames
decl_stmt|;
comment|/* Number of valid frames received and copied into receive buffers. */
name|UINT64
name|RxGoodFrames
decl_stmt|;
comment|/* 	 * Number of frames below the minimum length for the media. 	 * This would be<64 for ethernet. 	 */
name|UINT64
name|RxUndersizeFrames
decl_stmt|;
comment|/* 	 * Number of frames longer than the maxminum length for the 	 * media.  This would be>1500 for ethernet. 	 */
name|UINT64
name|RxOversizeFrames
decl_stmt|;
comment|/* Valid frames that were dropped because receive buffers were full. */
name|UINT64
name|RxDroppedFrames
decl_stmt|;
comment|/* Number of valid unicast frames received and not dropped. */
name|UINT64
name|RxUnicastFrames
decl_stmt|;
comment|/* Number of valid broadcast frames received and not dropped. */
name|UINT64
name|RxBroadcastFrames
decl_stmt|;
comment|/* Number of valid mutlicast frames received and not dropped. */
name|UINT64
name|RxMulticastFrames
decl_stmt|;
comment|/* Number of frames w/ CRC or alignment errors. */
name|UINT64
name|RxCrcErrorFrames
decl_stmt|;
comment|/* 	 * Total number of bytes received.  Includes frames with errors 	 * and dropped frames. 	 */
name|UINT64
name|RxTotalBytes
decl_stmt|;
comment|/* Transmit statistics. */
name|UINT64
name|TxTotalFrames
decl_stmt|;
name|UINT64
name|TxGoodFrames
decl_stmt|;
name|UINT64
name|TxUndersizeFrames
decl_stmt|;
name|UINT64
name|TxOversizeFrames
decl_stmt|;
name|UINT64
name|TxDroppedFrames
decl_stmt|;
name|UINT64
name|TxUnicastFrames
decl_stmt|;
name|UINT64
name|TxBroadcastFrames
decl_stmt|;
name|UINT64
name|TxMulticastFrames
decl_stmt|;
name|UINT64
name|TxCrcErrorFrames
decl_stmt|;
name|UINT64
name|TxTotalBytes
decl_stmt|;
comment|/* Number of collisions detection on this subnet. */
name|UINT64
name|Collisions
decl_stmt|;
comment|/* Number of frames destined for unsupported protocol. */
name|UINT64
name|UnsupportedProtocol
decl_stmt|;
block|}
name|EFI_NETWORK_STATISTICS
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|EfiSimpleNetworkStopped
block|,
name|EfiSimpleNetworkStarted
block|,
name|EfiSimpleNetworkInitialized
block|,
name|EfiSimpleNetworkMaxState
block|}
name|EFI_SIMPLE_NETWORK_STATE
typedef|;
end_typedef

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_RECEIVE_UNICAST
value|0x01
end_define

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_RECEIVE_MULTICAST
value|0x02
end_define

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_RECEIVE_BROADCAST
value|0x04
end_define

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_RECEIVE_PROMISCUOUS
value|0x08
end_define

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_RECEIVE_PROMISCUOUS_MULTICAST
value|0x10
end_define

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_RECEIVE_INTERRUPT
value|0x01
end_define

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_TRANSMIT_INTERRUPT
value|0x02
end_define

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_COMMAND_INTERRUPT
value|0x04
end_define

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_SOFTWARE_INTERRUPT
value|0x08
end_define

begin_define
define|#
directive|define
name|MAX_MCAST_FILTER_CNT
value|16
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT32
name|State
decl_stmt|;
name|UINT32
name|HwAddressSize
decl_stmt|;
name|UINT32
name|MediaHeaderSize
decl_stmt|;
name|UINT32
name|MaxPacketSize
decl_stmt|;
name|UINT32
name|NvRamSize
decl_stmt|;
name|UINT32
name|NvRamAccessSize
decl_stmt|;
name|UINT32
name|ReceiveFilterMask
decl_stmt|;
name|UINT32
name|ReceiveFilterSetting
decl_stmt|;
name|UINT32
name|MaxMCastFilterCount
decl_stmt|;
name|UINT32
name|MCastFilterCount
decl_stmt|;
name|EFI_MAC_ADDRESS
name|MCastFilter
index|[
name|MAX_MCAST_FILTER_CNT
index|]
decl_stmt|;
name|EFI_MAC_ADDRESS
name|CurrentAddress
decl_stmt|;
name|EFI_MAC_ADDRESS
name|BroadcastAddress
decl_stmt|;
name|EFI_MAC_ADDRESS
name|PermanentAddress
decl_stmt|;
name|UINT8
name|IfType
decl_stmt|;
name|BOOLEAN
name|MacAddressChangeable
decl_stmt|;
name|BOOLEAN
name|MultipleTxSupported
decl_stmt|;
name|BOOLEAN
name|MediaPresentSupported
decl_stmt|;
name|BOOLEAN
name|MediaPresent
decl_stmt|;
block|}
name|EFI_SIMPLE_NETWORK_MODE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_START
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_STOP
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_INITIALIZE
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|IN
name|UINTN
name|ExtraRxBufferSize
name|OPTIONAL
parameter_list|,
name|IN
name|UINTN
name|ExtraTxBufferSize
name|OPTIONAL
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_RESET
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|IN
name|BOOLEAN
name|ExtendedVerification
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_SHUTDOWN
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_RECEIVE_FILTERS
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|IN
name|UINT32
name|Enable
parameter_list|,
name|IN
name|UINT32
name|Disable
parameter_list|,
name|IN
name|BOOLEAN
name|ResetMCastFilter
parameter_list|,
name|IN
name|UINTN
name|MCastFilterCnt
name|OPTIONAL
parameter_list|,
name|IN
name|EFI_MAC_ADDRESS
modifier|*
name|MCastFilter
name|OPTIONAL
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_STATION_ADDRESS
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|IN
name|BOOLEAN
name|Reset
parameter_list|,
name|IN
name|EFI_MAC_ADDRESS
modifier|*
name|New
name|OPTIONAL
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_STATISTICS
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|IN
name|BOOLEAN
name|Reset
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|StatisticsSize
name|OPTIONAL
parameter_list|,
name|OUT
name|EFI_NETWORK_STATISTICS
modifier|*
name|StatisticsTable
name|OPTIONAL
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_MCAST_IP_TO_MAC
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|IN
name|BOOLEAN
name|IPv6
parameter_list|,
name|IN
name|EFI_IP_ADDRESS
modifier|*
name|IP
parameter_list|,
name|OUT
name|EFI_MAC_ADDRESS
modifier|*
name|MAC
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_NVDATA
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|IN
name|BOOLEAN
name|ReadWrite
parameter_list|,
name|IN
name|UINTN
name|Offset
parameter_list|,
name|IN
name|UINTN
name|BufferSize
parameter_list|,
name|IN
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_GET_STATUS
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|OUT
name|UINT32
modifier|*
name|InterruptStatus
name|OPTIONAL
parameter_list|,
name|OUT
name|VOID
modifier|*
modifier|*
name|TxBuf
name|OPTIONAL
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_TRANSMIT
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|IN
name|UINTN
name|HeaderSize
parameter_list|,
name|IN
name|UINTN
name|BufferSize
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|,
name|IN
name|EFI_MAC_ADDRESS
modifier|*
name|SrcAddr
name|OPTIONAL
parameter_list|,
name|IN
name|EFI_MAC_ADDRESS
modifier|*
name|DestAddr
name|OPTIONAL
parameter_list|,
name|IN
name|UINT16
modifier|*
name|Protocol
name|OPTIONAL
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_SIMPLE_NETWORK_RECEIVE
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_SIMPLE_NETWORK
modifier|*
name|This
parameter_list|,
name|OUT
name|UINTN
modifier|*
name|HeaderSize
name|OPTIONAL
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|,
name|OUT
name|EFI_MAC_ADDRESS
modifier|*
name|SrcAddr
name|OPTIONAL
parameter_list|,
name|OUT
name|EFI_MAC_ADDRESS
modifier|*
name|DestAddr
name|OPTIONAL
parameter_list|,
name|OUT
name|UINT16
modifier|*
name|Protocol
name|OPTIONAL
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|EFI_SIMPLE_NETWORK_INTERFACE_REVISION
value|0x00010000
end_define

begin_typedef
typedef|typedef
struct|struct
name|_EFI_SIMPLE_NETWORK
block|{
name|UINT64
name|Revision
decl_stmt|;
name|EFI_SIMPLE_NETWORK_START
name|Start
decl_stmt|;
name|EFI_SIMPLE_NETWORK_STOP
name|Stop
decl_stmt|;
name|EFI_SIMPLE_NETWORK_INITIALIZE
name|Initialize
decl_stmt|;
name|EFI_SIMPLE_NETWORK_RESET
name|Reset
decl_stmt|;
name|EFI_SIMPLE_NETWORK_SHUTDOWN
name|Shutdown
decl_stmt|;
name|EFI_SIMPLE_NETWORK_RECEIVE_FILTERS
name|ReceiveFilters
decl_stmt|;
name|EFI_SIMPLE_NETWORK_STATION_ADDRESS
name|StationAddress
decl_stmt|;
name|EFI_SIMPLE_NETWORK_STATISTICS
name|Statistics
decl_stmt|;
name|EFI_SIMPLE_NETWORK_MCAST_IP_TO_MAC
name|MCastIpToMac
decl_stmt|;
name|EFI_SIMPLE_NETWORK_NVDATA
name|NvData
decl_stmt|;
name|EFI_SIMPLE_NETWORK_GET_STATUS
name|GetStatus
decl_stmt|;
name|EFI_SIMPLE_NETWORK_TRANSMIT
name|Transmit
decl_stmt|;
name|EFI_SIMPLE_NETWORK_RECEIVE
name|Receive
decl_stmt|;
name|EFI_EVENT
name|WaitForPacket
decl_stmt|;
name|EFI_SIMPLE_NETWORK_MODE
modifier|*
name|Mode
decl_stmt|;
block|}
name|EFI_SIMPLE_NETWORK
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _EFINET_H */
end_comment

end_unit

