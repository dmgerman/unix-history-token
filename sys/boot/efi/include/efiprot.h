begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_EFI_PROT_H
end_ifndef

begin_define
define|#
directive|define
name|_EFI_PROT_H
end_define

begin_comment
comment|/*++  Copyright (c)  1999 - 2002 Intel Corporation. All rights reserved This software and associated documentation (if any) is furnished under a license and may only be used or copied in accordance with the terms of the license. Except as permitted by such license, no part of this software or documentation may be reproduced, stored in a retrieval system, or transmitted in any form or by any means without the express written consent of Intel Corporation.  Module Name:      efiprot.h  Abstract:      EFI Protocols    Revision History  --*/
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Device Path protocol
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|DEVICE_PATH_PROTOCOL
define|\
value|{ 0x9576e91, 0x6d3f, 0x11d2, 0x8e, 0x39, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b }
end_define

begin_comment
comment|//
end_comment

begin_comment
comment|// Block IO protocol
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|BLOCK_IO_PROTOCOL
define|\
value|{ 0x964e5b21, 0x6459, 0x11d2, 0x8e, 0x39, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b }
end_define

begin_define
define|#
directive|define
name|EFI_BLOCK_IO_INTERFACE_REVISION
value|0x00010000
end_define

begin_expr_stmt
name|INTERFACE_DECL
argument_list|(
name|_EFI_BLOCK_IO
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLOCK_RESET
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_BLOCK_IO
modifier|*
name|This
parameter_list|,
name|IN
name|BOOLEAN
name|ExtendedVerification
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLOCK_READ
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_BLOCK_IO
modifier|*
name|This
parameter_list|,
name|IN
name|UINT32
name|MediaId
parameter_list|,
name|IN
name|EFI_LBA
name|LBA
parameter_list|,
name|IN
name|UINTN
name|BufferSize
parameter_list|,
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLOCK_WRITE
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_BLOCK_IO
modifier|*
name|This
parameter_list|,
name|IN
name|UINT32
name|MediaId
parameter_list|,
name|IN
name|EFI_LBA
name|LBA
parameter_list|,
name|IN
name|UINTN
name|BufferSize
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_BLOCK_FLUSH
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_BLOCK_IO
modifier|*
name|This
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT32
name|MediaId
decl_stmt|;
name|BOOLEAN
name|RemovableMedia
decl_stmt|;
name|BOOLEAN
name|MediaPresent
decl_stmt|;
name|BOOLEAN
name|LogicalPartition
decl_stmt|;
name|BOOLEAN
name|ReadOnly
decl_stmt|;
name|BOOLEAN
name|WriteCaching
decl_stmt|;
name|UINT32
name|BlockSize
decl_stmt|;
name|UINT32
name|IoAlign
decl_stmt|;
name|EFI_LBA
name|LastBlock
decl_stmt|;
block|}
name|EFI_BLOCK_IO_MEDIA
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_BLOCK_IO
block|{
name|UINT64
name|Revision
decl_stmt|;
name|EFI_BLOCK_IO_MEDIA
modifier|*
name|Media
decl_stmt|;
name|EFI_BLOCK_RESET
name|Reset
decl_stmt|;
name|EFI_BLOCK_READ
name|ReadBlocks
decl_stmt|;
name|EFI_BLOCK_WRITE
name|WriteBlocks
decl_stmt|;
name|EFI_BLOCK_FLUSH
name|FlushBlocks
decl_stmt|;
block|}
name|EFI_BLOCK_IO
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|// Disk Block IO protocol
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|DISK_IO_PROTOCOL
define|\
value|{ 0xce345171, 0xba0b, 0x11d2,  0x8e, 0x4f, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b }
end_define

begin_define
define|#
directive|define
name|EFI_DISK_IO_INTERFACE_REVISION
value|0x00010000
end_define

begin_expr_stmt
name|INTERFACE_DECL
argument_list|(
name|_EFI_DISK_IO
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_DISK_READ
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_DISK_IO
modifier|*
name|This
parameter_list|,
name|IN
name|UINT32
name|MediaId
parameter_list|,
name|IN
name|UINT64
name|Offset
parameter_list|,
name|IN
name|UINTN
name|BufferSize
parameter_list|,
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_DISK_WRITE
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_DISK_IO
modifier|*
name|This
parameter_list|,
name|IN
name|UINT32
name|MediaId
parameter_list|,
name|IN
name|UINT64
name|Offset
parameter_list|,
name|IN
name|UINTN
name|BufferSize
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_DISK_IO
block|{
name|UINT64
name|Revision
decl_stmt|;
name|EFI_DISK_READ
name|ReadDisk
decl_stmt|;
name|EFI_DISK_WRITE
name|WriteDisk
decl_stmt|;
block|}
name|EFI_DISK_IO
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|// Simple file system protocol
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|SIMPLE_FILE_SYSTEM_PROTOCOL
define|\
value|{ 0x964e5b22, 0x6459, 0x11d2, 0x8e, 0x39, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b }
end_define

begin_expr_stmt
name|INTERFACE_DECL
argument_list|(
name|_EFI_FILE_IO_INTERFACE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|INTERFACE_DECL
argument_list|(
name|_EFI_FILE_HANDLE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_VOLUME_OPEN
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_IO_INTERFACE
modifier|*
name|This
parameter_list|,
name|OUT
name|struct
name|_EFI_FILE_HANDLE
modifier|*
modifier|*
name|Root
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|EFI_FILE_IO_INTERFACE_REVISION
value|0x00010000
end_define

begin_typedef
typedef|typedef
struct|struct
name|_EFI_FILE_IO_INTERFACE
block|{
name|UINT64
name|Revision
decl_stmt|;
name|EFI_VOLUME_OPEN
name|OpenVolume
decl_stmt|;
block|}
name|EFI_FILE_IO_INTERFACE
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//
end_comment

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_OPEN
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|OUT
name|struct
name|_EFI_FILE_HANDLE
modifier|*
modifier|*
name|NewHandle
parameter_list|,
name|IN
name|CHAR16
modifier|*
name|FileName
parameter_list|,
name|IN
name|UINT64
name|OpenMode
parameter_list|,
name|IN
name|UINT64
name|Attributes
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|// Open modes
end_comment

begin_define
define|#
directive|define
name|EFI_FILE_MODE_READ
value|0x0000000000000001
end_define

begin_define
define|#
directive|define
name|EFI_FILE_MODE_WRITE
value|0x0000000000000002
end_define

begin_define
define|#
directive|define
name|EFI_FILE_MODE_CREATE
value|0x8000000000000000
end_define

begin_comment
comment|// File attributes
end_comment

begin_define
define|#
directive|define
name|EFI_FILE_READ_ONLY
value|0x0000000000000001
end_define

begin_define
define|#
directive|define
name|EFI_FILE_HIDDEN
value|0x0000000000000002
end_define

begin_define
define|#
directive|define
name|EFI_FILE_SYSTEM
value|0x0000000000000004
end_define

begin_define
define|#
directive|define
name|EFI_FILE_RESERVIED
value|0x0000000000000008
end_define

begin_define
define|#
directive|define
name|EFI_FILE_DIRECTORY
value|0x0000000000000010
end_define

begin_define
define|#
directive|define
name|EFI_FILE_ARCHIVE
value|0x0000000000000020
end_define

begin_define
define|#
directive|define
name|EFI_FILE_VALID_ATTR
value|0x0000000000000037
end_define

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_CLOSE
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_DELETE
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_READ
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_WRITE
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_SET_POSITION
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|IN
name|UINT64
name|Position
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_GET_POSITION
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|OUT
name|UINT64
modifier|*
name|Position
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_GET_INFO
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|IN
name|EFI_GUID
modifier|*
name|InformationType
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_SET_INFO
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|IN
name|EFI_GUID
modifier|*
name|InformationType
parameter_list|,
name|IN
name|UINTN
name|BufferSize
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_FILE_FLUSH
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|EFI_FILE_HANDLE_REVISION
value|0x00010000
end_define

begin_typedef
typedef|typedef
struct|struct
name|_EFI_FILE_HANDLE
block|{
name|UINT64
name|Revision
decl_stmt|;
name|EFI_FILE_OPEN
name|Open
decl_stmt|;
name|EFI_FILE_CLOSE
name|Close
decl_stmt|;
name|EFI_FILE_DELETE
name|Delete
decl_stmt|;
name|EFI_FILE_READ
name|Read
decl_stmt|;
name|EFI_FILE_WRITE
name|Write
decl_stmt|;
name|EFI_FILE_GET_POSITION
name|GetPosition
decl_stmt|;
name|EFI_FILE_SET_POSITION
name|SetPosition
decl_stmt|;
name|EFI_FILE_GET_INFO
name|GetInfo
decl_stmt|;
name|EFI_FILE_SET_INFO
name|SetInfo
decl_stmt|;
name|EFI_FILE_FLUSH
name|Flush
decl_stmt|;
block|}
name|EFI_FILE
operator|,
typedef|*
name|EFI_FILE_HANDLE
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|// File information types
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|EFI_FILE_INFO_ID
define|\
value|{ 0x9576e92, 0x6d3f, 0x11d2, 0x8e, 0x39, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b }
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT64
name|Size
decl_stmt|;
name|UINT64
name|FileSize
decl_stmt|;
name|UINT64
name|PhysicalSize
decl_stmt|;
name|EFI_TIME
name|CreateTime
decl_stmt|;
name|EFI_TIME
name|LastAccessTime
decl_stmt|;
name|EFI_TIME
name|ModificationTime
decl_stmt|;
name|UINT64
name|Attribute
decl_stmt|;
name|CHAR16
name|FileName
index|[
literal|1
index|]
decl_stmt|;
block|}
name|EFI_FILE_INFO
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|// The FileName field of the EFI_FILE_INFO data structure is variable length.
end_comment

begin_comment
comment|// Whenever code needs to know the size of the EFI_FILE_INFO data structure, it needs to
end_comment

begin_comment
comment|// be the size of the data structure without the FileName field.  The following macro
end_comment

begin_comment
comment|// computes this size correctly no matter how big the FileName array is declared.
end_comment

begin_comment
comment|// This is required to make the EFI_FILE_INFO data structure ANSI compilant.
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|SIZE_OF_EFI_FILE_INFO
value|EFI_FIELD_OFFSET(EFI_FILE_INFO,FileName)
end_define

begin_define
define|#
directive|define
name|EFI_FILE_SYSTEM_INFO_ID
define|\
value|{ 0x9576e93, 0x6d3f, 0x11d2, 0x8e, 0x39, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b }
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT64
name|Size
decl_stmt|;
name|BOOLEAN
name|ReadOnly
decl_stmt|;
name|UINT64
name|VolumeSize
decl_stmt|;
name|UINT64
name|FreeSpace
decl_stmt|;
name|UINT32
name|BlockSize
decl_stmt|;
name|CHAR16
name|VolumeLabel
index|[
literal|1
index|]
decl_stmt|;
block|}
name|EFI_FILE_SYSTEM_INFO
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|// The VolumeLabel field of the EFI_FILE_SYSTEM_INFO data structure is variable length.
end_comment

begin_comment
comment|// Whenever code needs to know the size of the EFI_FILE_SYSTEM_INFO data structure, it needs
end_comment

begin_comment
comment|// to be the size of the data structure without the VolumeLable field.  The following macro
end_comment

begin_comment
comment|// computes this size correctly no matter how big the VolumeLable array is declared.
end_comment

begin_comment
comment|// This is required to make the EFI_FILE_SYSTEM_INFO data structure ANSI compilant.
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|SIZE_OF_EFI_FILE_SYSTEM_INFO
value|EFI_FIELD_OFFSET(EFI_FILE_SYSTEM_INFO,VolumeLabel)
end_define

begin_define
define|#
directive|define
name|EFI_FILE_SYSTEM_VOLUME_LABEL_INFO_ID
define|\
value|{ 0xDB47D7D3,0xFE81, 0x11d3, 0x9A, 0x35, 0x00, 0x90, 0x27, 0x3F, 0xC1, 0x4D }
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|CHAR16
name|VolumeLabel
index|[
literal|1
index|]
decl_stmt|;
block|}
name|EFI_FILE_SYSTEM_VOLUME_LABEL_INFO
typedef|;
end_typedef

begin_define
define|#
directive|define
name|SIZE_OF_EFI_FILE_SYSTEM_VOLUME_LABEL_INFO
value|EFI_FIELD_OFFSET(EFI_FILE_SYSTEM_VOLUME_LABEL_INFO,VolumeLabel)
end_define

begin_comment
comment|//
end_comment

begin_comment
comment|// Load file protocol
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|LOAD_FILE_PROTOCOL
define|\
value|{ 0x56EC3091, 0x954C, 0x11d2, 0x8E, 0x3F, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x3B }
end_define

begin_expr_stmt
name|INTERFACE_DECL
argument_list|(
name|_EFI_LOAD_FILE_INTERFACE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_LOAD_FILE
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_LOAD_FILE_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_DEVICE_PATH
modifier|*
name|FilePath
parameter_list|,
name|IN
name|BOOLEAN
name|BootPolicy
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|IN
name|VOID
modifier|*
name|Buffer
name|OPTIONAL
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_LOAD_FILE_INTERFACE
block|{
name|EFI_LOAD_FILE
name|LoadFile
decl_stmt|;
block|}
name|EFI_LOAD_FILE_INTERFACE
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|// Device IO protocol
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|DEVICE_IO_PROTOCOL
define|\
value|{ 0xaf6ac311, 0x84c3, 0x11d2, 0x8e, 0x3c, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b }
end_define

begin_expr_stmt
name|INTERFACE_DECL
argument_list|(
name|_EFI_DEVICE_IO_INTERFACE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
enum|enum
block|{
name|IO_UINT8
block|,
name|IO_UINT16
block|,
name|IO_UINT32
block|,
name|IO_UINT64
block|,
comment|//
comment|// Specification Change: Copy from MMIO to MMIO vs. MMIO to buffer, buffer to MMIO
comment|//
name|MMIO_COPY_UINT8
block|,
name|MMIO_COPY_UINT16
block|,
name|MMIO_COPY_UINT32
block|,
name|MMIO_COPY_UINT64
block|}
name|EFI_IO_WIDTH
typedef|;
end_typedef

begin_define
define|#
directive|define
name|EFI_PCI_ADDRESS
parameter_list|(
name|bus
parameter_list|,
name|dev
parameter_list|,
name|func
parameter_list|,
name|reg
parameter_list|)
define|\
value|( (UINT64) ( (((UINTN)bus)<< 24) + (((UINTN)dev)<< 16) + (((UINTN)func)<< 8) + ((UINTN)reg) ))
end_define

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_DEVICE_IO
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_DEVICE_IO_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_IO_WIDTH
name|Width
parameter_list|,
name|IN
name|UINT64
name|Address
parameter_list|,
name|IN
name|UINTN
name|Count
parameter_list|,
name|IN
name|OUT
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|EFI_DEVICE_IO
name|Read
decl_stmt|;
name|EFI_DEVICE_IO
name|Write
decl_stmt|;
block|}
name|EFI_IO_ACCESS
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_PCI_DEVICE_PATH
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_DEVICE_IO_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|UINT64
name|Address
parameter_list|,
name|IN
name|OUT
name|EFI_DEVICE_PATH
modifier|*
modifier|*
name|PciDevicePath
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|EfiBusMasterRead
block|,
name|EfiBusMasterWrite
block|,
name|EfiBusMasterCommonBuffer
block|}
name|EFI_IO_OPERATION_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_IO_MAP
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_DEVICE_IO_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_IO_OPERATION_TYPE
name|Operation
parameter_list|,
name|IN
name|EFI_PHYSICAL_ADDRESS
modifier|*
name|HostAddress
parameter_list|,
name|IN
name|OUT
name|UINTN
modifier|*
name|NumberOfBytes
parameter_list|,
name|OUT
name|EFI_PHYSICAL_ADDRESS
modifier|*
name|DeviceAddress
parameter_list|,
name|OUT
name|VOID
modifier|*
modifier|*
name|Mapping
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_IO_UNMAP
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_DEVICE_IO_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|VOID
modifier|*
name|Mapping
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_IO_ALLOCATE_BUFFER
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_DEVICE_IO_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|EFI_ALLOCATE_TYPE
name|Type
parameter_list|,
name|IN
name|EFI_MEMORY_TYPE
name|MemoryType
parameter_list|,
name|IN
name|UINTN
name|Pages
parameter_list|,
name|IN
name|OUT
name|EFI_PHYSICAL_ADDRESS
modifier|*
name|HostAddress
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_IO_FLUSH
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_DEVICE_IO_INTERFACE
modifier|*
name|This
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|EFI_STATUS
function_decl|(
name|EFIAPI
modifier|*
name|EFI_IO_FREE_BUFFER
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_DEVICE_IO_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|UINTN
name|Pages
parameter_list|,
name|IN
name|EFI_PHYSICAL_ADDRESS
name|HostAddress
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_DEVICE_IO_INTERFACE
block|{
name|EFI_IO_ACCESS
name|Mem
decl_stmt|;
name|EFI_IO_ACCESS
name|Io
decl_stmt|;
name|EFI_IO_ACCESS
name|Pci
decl_stmt|;
name|EFI_IO_MAP
name|Map
decl_stmt|;
name|EFI_PCI_DEVICE_PATH
name|PciDevicePath
decl_stmt|;
name|EFI_IO_UNMAP
name|Unmap
decl_stmt|;
name|EFI_IO_ALLOCATE_BUFFER
name|AllocateBuffer
decl_stmt|;
name|EFI_IO_FLUSH
name|Flush
decl_stmt|;
name|EFI_IO_FREE_BUFFER
name|FreeBuffer
decl_stmt|;
block|}
name|EFI_DEVICE_IO_INTERFACE
typedef|;
end_typedef

begin_comment
comment|//
end_comment

begin_comment
comment|// Unicode Collation protocol
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|UNICODE_COLLATION_PROTOCOL
define|\
value|{ 0x1d85cd7f, 0xf43d, 0x11d2, 0x9a, 0xc,  0x0, 0x90, 0x27, 0x3f, 0xc1, 0x4d }
end_define

begin_define
define|#
directive|define
name|UNICODE_BYTE_ORDER_MARK
value|(CHAR16)(0xfeff)
end_define

begin_expr_stmt
name|INTERFACE_DECL
argument_list|(
name|_EFI_UNICODE_COLLATION_INTERFACE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|INTN
function_decl|(
name|EFIAPI
modifier|*
name|EFI_UNICODE_COLLATION_STRICOLL
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_UNICODE_COLLATION_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|CHAR16
modifier|*
name|s1
parameter_list|,
name|IN
name|CHAR16
modifier|*
name|s2
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|BOOLEAN
function_decl|(
name|EFIAPI
modifier|*
name|EFI_UNICODE_COLLATION_METAIMATCH
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_UNICODE_COLLATION_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|CHAR16
modifier|*
name|String
parameter_list|,
name|IN
name|CHAR16
modifier|*
name|Pattern
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|VOID
function_decl|(
name|EFIAPI
modifier|*
name|EFI_UNICODE_COLLATION_STRLWR
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_UNICODE_COLLATION_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|OUT
name|CHAR16
modifier|*
name|Str
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|VOID
function_decl|(
name|EFIAPI
modifier|*
name|EFI_UNICODE_COLLATION_STRUPR
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_UNICODE_COLLATION_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|OUT
name|CHAR16
modifier|*
name|Str
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|VOID
function_decl|(
name|EFIAPI
modifier|*
name|EFI_UNICODE_COLLATION_FATTOSTR
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_UNICODE_COLLATION_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|UINTN
name|FatSize
parameter_list|,
name|IN
name|CHAR8
modifier|*
name|Fat
parameter_list|,
name|OUT
name|CHAR16
modifier|*
name|String
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|BOOLEAN
function_decl|(
name|EFIAPI
modifier|*
name|EFI_UNICODE_COLLATION_STRTOFAT
function_decl|)
parameter_list|(
name|IN
name|struct
name|_EFI_UNICODE_COLLATION_INTERFACE
modifier|*
name|This
parameter_list|,
name|IN
name|CHAR16
modifier|*
name|String
parameter_list|,
name|IN
name|UINTN
name|FatSize
parameter_list|,
name|OUT
name|CHAR8
modifier|*
name|Fat
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_UNICODE_COLLATION_INTERFACE
block|{
comment|// general
name|EFI_UNICODE_COLLATION_STRICOLL
name|StriColl
decl_stmt|;
name|EFI_UNICODE_COLLATION_METAIMATCH
name|MetaiMatch
decl_stmt|;
name|EFI_UNICODE_COLLATION_STRLWR
name|StrLwr
decl_stmt|;
name|EFI_UNICODE_COLLATION_STRUPR
name|StrUpr
decl_stmt|;
comment|// for supporting fat volumes
name|EFI_UNICODE_COLLATION_FATTOSTR
name|FatToStr
decl_stmt|;
name|EFI_UNICODE_COLLATION_STRTOFAT
name|StrToFat
decl_stmt|;
name|CHAR8
modifier|*
name|SupportedLanguages
decl_stmt|;
block|}
name|EFI_UNICODE_COLLATION_INTERFACE
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

