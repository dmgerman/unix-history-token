begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011 Doug Rabson  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * USERBOOT interface versions  */
end_comment

begin_define
define|#
directive|define
name|USERBOOT_VERSION_1
value|1
end_define

begin_define
define|#
directive|define
name|USERBOOT_VERSION_2
value|2
end_define

begin_define
define|#
directive|define
name|USERBOOT_VERSION_3
value|3
end_define

begin_comment
comment|/*  * Version 4 added more generic callbacks for setting up  * registers and descriptors. The callback structure is  * backward compatible (new callbacks have been added at  * the tail end).  */
end_comment

begin_define
define|#
directive|define
name|USERBOOT_VERSION_4
value|4
end_define

begin_comment
comment|/*  * Exit codes from the loader  */
end_comment

begin_define
define|#
directive|define
name|USERBOOT_EXIT_QUIT
value|1
end_define

begin_define
define|#
directive|define
name|USERBOOT_EXIT_REBOOT
value|2
end_define

begin_struct
struct|struct
name|loader_callbacks
block|{
comment|/* 	 * Console i/o 	 */
comment|/*          * Wait until a key is pressed on the console and then return it          */
name|int
function_decl|(
modifier|*
name|getc
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
comment|/*          * Write the character ch to the console          */
name|void
function_decl|(
modifier|*
name|putc
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|ch
parameter_list|)
function_decl|;
comment|/*          * Return non-zero if a key can be read from the console          */
name|int
function_decl|(
modifier|*
name|poll
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
comment|/* 	 * Host filesystem i/o 	 */
comment|/*          * Open a file in the host filesystem          */
name|int
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|void
modifier|*
modifier|*
name|h_return
parameter_list|)
function_decl|;
comment|/*          * Close a file          */
name|int
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
name|h
parameter_list|)
function_decl|;
comment|/*          * Return non-zero if the file is a directory          */
name|int
function_decl|(
modifier|*
name|isdir
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
name|h
parameter_list|)
function_decl|;
comment|/*          * Read size bytes from a file. The number of bytes remaining          * in dst after reading is returned in *resid_return          */
name|int
function_decl|(
modifier|*
name|read
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
name|h
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
modifier|*
name|resid_return
parameter_list|)
function_decl|;
comment|/*          * Read an entry from a directory. The entry's inode number is          * returned in *fileno_return, its type in *type_return and          * the name length in *namelen_return. The name itself is          * copied to the buffer name which must be at least PATH_MAX          * in size.          */
name|int
function_decl|(
modifier|*
name|readdir
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
name|h
parameter_list|,
name|uint32_t
modifier|*
name|fileno_return
parameter_list|,
name|uint8_t
modifier|*
name|type_return
parameter_list|,
name|size_t
modifier|*
name|namelen_return
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/*          * Seek to a location within an open file          */
name|int
function_decl|(
modifier|*
name|seek
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
name|h
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|int
name|whence
parameter_list|)
function_decl|;
comment|/*          * Return some stat(2) related information about the file          */
name|int
function_decl|(
modifier|*
name|stat
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
name|h
parameter_list|,
name|int
modifier|*
name|mode_return
parameter_list|,
name|int
modifier|*
name|uid_return
parameter_list|,
name|int
modifier|*
name|gid_return
parameter_list|,
name|uint64_t
modifier|*
name|size_return
parameter_list|)
function_decl|;
comment|/* 	 * Disk image i/o 	 */
comment|/*          * Read from a disk image at the given offset          */
name|int
function_decl|(
modifier|*
name|diskread
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|unit
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
modifier|*
name|resid_return
parameter_list|)
function_decl|;
comment|/* 	 * Guest virtual machine i/o 	 */
comment|/*          * Copy to the guest address space          */
name|int
function_decl|(
modifier|*
name|copyin
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
specifier|const
name|void
modifier|*
name|from
parameter_list|,
name|uint64_t
name|to
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
comment|/*          * Copy from the guest address space          */
name|int
function_decl|(
modifier|*
name|copyout
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|uint64_t
name|from
parameter_list|,
name|void
modifier|*
name|to
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
comment|/*          * Set a guest register value          */
name|void
function_decl|(
modifier|*
name|setreg
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
comment|/*          * Set a guest MSR value          */
name|void
function_decl|(
modifier|*
name|setmsr
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
comment|/*          * Set a guest CR value          */
name|void
function_decl|(
modifier|*
name|setcr
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
comment|/*          * Set the guest GDT address          */
name|void
function_decl|(
modifier|*
name|setgdt
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|uint64_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
comment|/*          * Transfer control to the guest at the given address          */
name|void
function_decl|(
modifier|*
name|exec
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|uint64_t
name|pc
parameter_list|)
function_decl|;
comment|/* 	 * Misc 	 */
comment|/*          * Sleep for usec microseconds          */
name|void
function_decl|(
modifier|*
name|delay
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|usec
parameter_list|)
function_decl|;
comment|/*          * Exit with the given exit code          */
name|void
function_decl|(
modifier|*
name|exit
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|v
parameter_list|)
function_decl|;
comment|/*          * Return guest physical memory map details          */
name|void
function_decl|(
modifier|*
name|getmem
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|uint64_t
modifier|*
name|lowmem
parameter_list|,
name|uint64_t
modifier|*
name|highmem
parameter_list|)
function_decl|;
comment|/* 	 * ioctl interface to the disk device 	 */
name|int
function_decl|(
modifier|*
name|diskioctl
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|unit
parameter_list|,
name|u_long
name|cmd
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
comment|/* 	 * Returns an environment variable in the form "name=value". 	 * 	 * If there are no more variables that need to be set in the 	 * loader environment then return NULL. 	 * 	 * 'num' is used as a handle for the callback to identify which 	 * environment variable to return next. It will begin at 0 and 	 * each invocation will add 1 to the previous value of 'num'. 	 */
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|getenv
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|num
parameter_list|)
function_decl|;
comment|/* 	 * Version 4 additions. 	 */
name|int
function_decl|(
modifier|*
name|vm_set_register
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint64_t
name|val
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|vm_set_desc
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|int
name|reg
parameter_list|,
name|uint64_t
name|base
parameter_list|,
name|u_int
name|limit
parameter_list|,
name|u_int
name|access
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

end_unit

