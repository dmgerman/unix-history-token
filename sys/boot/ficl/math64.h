begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************* ** m a t h 6 4 . h ** Forth Inspired Command Language - 64 bit math support routines ** Author: John Sadler (john_sadler@alum.mit.edu) ** Created: 25 January 1998 ** $Id: math64.h,v 1.9 2001/12/05 07:21:34 jsadler Exp $ *******************************************************************/
end_comment

begin_comment
comment|/* ** Copyright (c) 1997-2001 John Sadler (john_sadler@alum.mit.edu) ** All rights reserved. ** ** I am interested in hearing from anyone who uses ficl. If you have ** a problem, a success story, a defect, an enhancement request, or ** if you would like to contribute to the ficl release, please  ** contact me by email at the address above. ** ** Get the latest Ficl release at http://ficl.sourceforge.net ** ** L I C E N S E  and  D I S C L A I M E R **  ** Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions ** are met: ** 1. Redistributions of source code must retain the above copyright **    notice, this list of conditions and the following disclaimer. ** 2. Redistributions in binary form must reproduce the above copyright **    notice, this list of conditions and the following disclaimer in the **    documentation and/or other materials provided with the distribution. ** ** THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ** ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE ** IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ** ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE ** FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL ** DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS ** OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) ** HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT ** LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY ** OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF ** SUCH DAMAGE. */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__MATH64_H__
argument_list|)
end_if

begin_define
define|#
directive|define
name|__MATH64_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
name|DPINT
name|m64Abs
parameter_list|(
name|DPINT
name|x
parameter_list|)
function_decl|;
name|int
name|m64IsNegative
parameter_list|(
name|DPINT
name|x
parameter_list|)
function_decl|;
name|DPUNS
name|m64Mac
parameter_list|(
name|DPUNS
name|u
parameter_list|,
name|FICL_UNS
name|mul
parameter_list|,
name|FICL_UNS
name|add
parameter_list|)
function_decl|;
name|DPINT
name|m64MulI
parameter_list|(
name|FICL_INT
name|x
parameter_list|,
name|FICL_INT
name|y
parameter_list|)
function_decl|;
name|DPINT
name|m64Negate
parameter_list|(
name|DPINT
name|x
parameter_list|)
function_decl|;
name|INTQR
name|m64FlooredDivI
parameter_list|(
name|DPINT
name|num
parameter_list|,
name|FICL_INT
name|den
parameter_list|)
function_decl|;
name|void
name|i64Push
parameter_list|(
name|FICL_STACK
modifier|*
name|pStack
parameter_list|,
name|DPINT
name|i64
parameter_list|)
function_decl|;
name|DPINT
name|i64Pop
parameter_list|(
name|FICL_STACK
modifier|*
name|pStack
parameter_list|)
function_decl|;
name|void
name|u64Push
parameter_list|(
name|FICL_STACK
modifier|*
name|pStack
parameter_list|,
name|DPUNS
name|u64
parameter_list|)
function_decl|;
name|DPUNS
name|u64Pop
parameter_list|(
name|FICL_STACK
modifier|*
name|pStack
parameter_list|)
function_decl|;
name|INTQR
name|m64SymmetricDivI
parameter_list|(
name|DPINT
name|num
parameter_list|,
name|FICL_INT
name|den
parameter_list|)
function_decl|;
name|UNS16
name|m64UMod
parameter_list|(
name|DPUNS
modifier|*
name|pUD
parameter_list|,
name|UNS16
name|base
parameter_list|)
function_decl|;
if|#
directive|if
name|PORTABLE_LONGMULDIV
operator|!=
literal|0
comment|/* see sysdep.h */
name|DPUNS
name|m64Add
parameter_list|(
name|DPUNS
name|x
parameter_list|,
name|DPUNS
name|y
parameter_list|)
function_decl|;
name|DPUNS
name|m64ASL
parameter_list|(
name|DPUNS
name|x
parameter_list|)
function_decl|;
name|DPUNS
name|m64ASR
parameter_list|(
name|DPUNS
name|x
parameter_list|)
function_decl|;
name|int
name|m64Compare
parameter_list|(
name|DPUNS
name|x
parameter_list|,
name|DPUNS
name|y
parameter_list|)
function_decl|;
name|DPUNS
name|m64Or
parameter_list|(
name|DPUNS
name|x
parameter_list|,
name|DPUNS
name|y
parameter_list|)
function_decl|;
name|DPUNS
name|m64Sub
parameter_list|(
name|DPUNS
name|x
parameter_list|,
name|DPUNS
name|y
parameter_list|)
function_decl|;
endif|#
directive|endif
define|#
directive|define
name|i64Extend
parameter_list|(
name|i64
parameter_list|)
value|(i64).hi = ((i64).lo< 0) ? -1L : 0
define|#
directive|define
name|m64CastIU
parameter_list|(
name|i64
parameter_list|)
value|(*(DPUNS *)(&(i64)))
define|#
directive|define
name|m64CastUI
parameter_list|(
name|u64
parameter_list|)
value|(*(DPINT *)(&(u64)))
define|#
directive|define
name|m64CastQRIU
parameter_list|(
name|iqr
parameter_list|)
value|(*(UNSQR *)(&(iqr)))
define|#
directive|define
name|m64CastQRUI
parameter_list|(
name|uqr
parameter_list|)
value|(*(INTQR *)(&(uqr)))
define|#
directive|define
name|CELL_HI_BIT
value|(1L<< (BITS_PER_CELL-1))
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

