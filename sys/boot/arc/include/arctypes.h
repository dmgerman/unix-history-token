begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1999, Stefan Esser<se@freebsd.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ARC_TYPES_H_
end_ifndef

begin_define
define|#
directive|define
name|_ARC_TYPES_H_
end_define

begin_define
define|#
directive|define
name|ESUCCESS
value|0
end_define

begin_typedef
typedef|typedef
name|u_int8_t
name|BOOLEAN
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int16_t
name|WCHAR
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int64_t
name|fpos_t
typedef|;
end_typedef

begin_comment
comment|/* XXX the following types are defined in ARC but are not currently used */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
unit|typedef void		VOID;  typedef int8_t		CHAR; typedef int16_t		SHORT; typedef int32_t		LONG; typedef int64_t		LONGLONG;  typedef u_int8_t	UCHAR; typedef u_int16_t	USHORT; typedef u_int32_t	ULONG; typedef u_int64_t	ULONGLONG;
comment|/*  * The following ARC types conflict with<sys/types.h> !  * They are not used in the ARC wrapper functions or ARC structs  * currently, and thus may be left alone for now. In case the   * wrappers or structs are converted to use them, it is suggested  * to prefix them with "arc" to avoid type clashes (if linking  * against libstand.a which expects the FreeBSD declarations).  */
end_comment

begin_endif
unit|typedef u_int32_t	size_t; typedef int64_t		clock_t; typedef int64_t		off_t; typedef int32_t		time_t;
endif|#
directive|endif
end_endif

begin_comment
comment|/* 0 */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int32_t
name|adr
decl_stmt|;
block|}
name|arcptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int32_t
name|SPBSignature
decl_stmt|;
name|u_int32_t
name|SPBLength
decl_stmt|;
name|u_int16_t
name|Version
decl_stmt|;
name|u_int16_t
name|Revision
decl_stmt|;
name|arcptr
name|RestartBlockP
decl_stmt|;
name|arcptr
name|DebugBlockP
decl_stmt|;
name|arcptr
name|GEVectorP
decl_stmt|;
name|arcptr
name|ULTBMissVectorP
decl_stmt|;
name|u_int32_t
name|FirmwareVectorLength
decl_stmt|;
name|arcptr
name|FirmwareVectorP
decl_stmt|;
name|u_int32_t
name|PrivateVectorLength
decl_stmt|;
name|arcptr
name|PrivateVectorP
decl_stmt|;
name|u_int32_t
name|AdapterCount
decl_stmt|;
struct|struct
block|{
name|u_int32_t
name|AdapterType
decl_stmt|;
name|u_int32_t
name|AdapterVectorLength
decl_stmt|;
name|arcptr
name|AdapterVectorP
decl_stmt|;
block|}
name|Adapters
index|[
literal|1
index|]
struct|;
block|}
name|SPB
typedef|;
end_typedef

begin_comment
comment|/* ARC function specific data types */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|SystemClass
block|,
name|ProcessorClass
block|,
name|CacheClass
block|,
name|AdapterClass
block|,
name|ControllerClass
block|,
name|PeripheralClass
block|,
name|MemoryClass
block|,
name|MaximumClass
block|}
name|CONFIGURATION_CLASS
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|ArcSystem
block|,
name|CentralProcessor
block|,
name|FloatingPointProcessor
block|,
name|PrimaryIcache
block|,
name|PrimaryDcache
block|,
name|SecondaryIcache
block|,
name|SecondaryDcache
block|,
name|SecondaryCache
block|,
name|EisaAdapter
block|,
name|TcAdapter
block|,
name|ScsiAdapter
block|,
name|DtiAdapter
block|,
name|MultiFunctionAdapter
block|,
name|DiskController
block|,
name|TapeController
block|,
name|CdromController
block|,
name|WormController
block|,
name|SerialController
block|,
name|NetworkController
block|,
name|DisplayController
block|,
name|ParallelController
block|,
name|PointerController
block|,
name|KeyboardController
block|,
name|AudioController
block|,
name|OtherController
block|,
name|DiskPeripheral
block|,
name|FloppyDiskPeripheral
block|,
name|TapePeripheral
block|,
name|ModemPeripheral
block|,
name|MonitorPeripheral
block|,
name|PrinterPeripheral
block|,
name|PointerPeripheral
block|,
name|KeyboardPeripheral
block|,
name|TerminalPeripheral
block|,
name|OtherPeripheral
block|,
name|LinePeripheral
block|,
name|NetworkPeripheral
block|,
name|SystemMemory
block|,
name|MaximumType
block|}
name|CONFIGURATION_TYPE
operator|,
typedef|*
name|PCONFIGURATION_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|Failed
init|=
literal|0x01
block|,
name|ReadOnly
init|=
literal|0x02
block|,
name|Removable
init|=
literal|0x04
block|,
name|ConsoleIn
init|=
literal|0x08
block|,
name|ConsoleOut
init|=
literal|0x10
block|,
name|Input
init|=
literal|0x20
block|,
name|Output
init|=
literal|0x40
block|}
name|IDENTIFIERFLAG
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CONFIGURATION_CLASS
name|Class
decl_stmt|;
name|CONFIGURATION_TYPE
name|Type
decl_stmt|;
name|IDENTIFIERFLAG
name|Flags
decl_stmt|;
name|u_int16_t
name|Version
decl_stmt|;
name|u_int16_t
name|Revision
decl_stmt|;
name|u_int32_t
name|Key
decl_stmt|;
name|u_int32_t
name|AffinityMask
decl_stmt|;
name|u_int32_t
name|ConfigurationDataLength
decl_stmt|;
name|u_int32_t
name|IdentifierLength
decl_stmt|;
name|arcptr
name|Identifier
decl_stmt|;
block|}
name|CONFIGURATION_COMPONENT
operator|,
typedef|*
name|PCONFIGURATION_COMPONENT
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int8_t
name|VendorId
index|[
literal|8
index|]
decl_stmt|;
name|int8_t
name|ProductId
index|[
literal|8
index|]
decl_stmt|;
block|}
name|SYSTEM_ID
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|MemoryExceptionBlock
block|,
name|MemorySystemBlock
block|,
name|MemoryFree
block|,
name|MemoryBad
block|,
name|MemoryLoadedProgram
block|,
name|MemoryFirmwareTemporary
block|,
name|MemoryFirmwarePermanent
block|,
name|MemoryFreeContiguous
block|,
name|MemorySpecialMemory
block|,
name|MemoryMaximum
block|}
name|MEMORY_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|MEMORY_TYPE
name|Type
decl_stmt|;
name|u_int32_t
name|BasePage
decl_stmt|;
name|u_int32_t
name|PageCount
decl_stmt|;
block|}
name|MEMORY_DESCRIPTOR
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_TIME_FIELDS
block|{
name|u_int16_t
name|Year
decl_stmt|;
comment|/* 1601 .. */
name|u_int16_t
name|Month
decl_stmt|;
comment|/* 1 .. 12 */
name|u_int16_t
name|Day
decl_stmt|;
comment|/* 1 .. 31 */
name|u_int16_t
name|Hour
decl_stmt|;
comment|/* 0 .. 23 */
name|u_int16_t
name|Minute
decl_stmt|;
comment|/* 0 .. 59 */
name|u_int16_t
name|Second
decl_stmt|;
comment|/* 0 .. 59 */
name|u_int16_t
name|Milliseconds
decl_stmt|;
comment|/* 0 .. 999 */
name|u_int16_t
name|Weekday
decl_stmt|;
comment|/* 0 .. 6 = Sunday .. Saturday  */
block|}
name|TIME_FIELDS
operator|,
typedef|*
name|PTIME_FIELDS
typedef|;
end_typedef

begin_define
define|#
directive|define
name|StandardIn
value|0
end_define

begin_define
define|#
directive|define
name|StandardOut
value|1
end_define

begin_define
define|#
directive|define
name|ReadOnlyFile
value|0x01
end_define

begin_define
define|#
directive|define
name|HiddenFile
value|0x02
end_define

begin_define
define|#
directive|define
name|SystemFile
value|0x04
end_define

begin_define
define|#
directive|define
name|ArchiveFile
value|0x08
end_define

begin_define
define|#
directive|define
name|DirectoryFile
value|0x10
end_define

begin_define
define|#
directive|define
name|DeleteFile
value|0x20
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int32_t
name|FileNameLength
decl_stmt|;
name|u_int8_t
name|FileAttribute
decl_stmt|;
name|int8_t
name|FileName
index|[
literal|32
index|]
decl_stmt|;
block|}
name|DIRECTORY_ENTRY
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|OpenReadOnly
block|,
name|OpenWriteOnly
block|,
name|OpenReadWrite
block|,
name|CreateWriteOnly
block|,
name|CreateReadWrite
block|,
name|SupersedeWriteOnly
block|,
name|SupersedeReadWrite
block|,
name|OpenDirectory
block|,
name|CreateDirectory
block|,
name|OpenMaximumMode
block|}
name|OPEN_MODE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|SeekAbsolute
block|,
name|SeekRelative
block|,
name|SeekMaximum
block|}
name|SEEK_MODE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|MountLoadMedia
block|,
name|MountUnloadMedia
block|,
name|MountMaximum
block|}
name|MOUNT_OPERATION
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|fpos_t
name|StartingAddress
decl_stmt|;
name|fpos_t
name|EndingAddress
decl_stmt|;
name|fpos_t
name|CurrentAddress
decl_stmt|;
name|CONFIGURATION_TYPE
name|Type
decl_stmt|;
name|u_int32_t
name|FileNameLength
decl_stmt|;
name|u_int8_t
name|Attributes
decl_stmt|;
name|int8_t
name|FileName
index|[
literal|32
index|]
decl_stmt|;
block|}
name|FILE_INFORMATION
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int16_t
name|CursorXPosition
decl_stmt|;
name|u_int16_t
name|CursorYPosition
decl_stmt|;
name|u_int16_t
name|CursorMaxXPosition
decl_stmt|;
name|u_int16_t
name|CursorMaxYPosition
decl_stmt|;
name|u_int8_t
name|ForegroundColor
decl_stmt|;
name|u_int8_t
name|BackgroundColor
decl_stmt|;
name|BOOLEAN
name|HighIntensity
decl_stmt|;
name|BOOLEAN
name|Underscored
decl_stmt|;
name|BOOLEAN
name|ReverseVideo
decl_stmt|;
block|}
name|ARC_DISPLAY_STATUS
typedef|;
end_typedef

begin_comment
comment|/* vendor function specific data types */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int32_t
name|ProcessorId
decl_stmt|;
name|u_int32_t
name|ProcessorRevision
decl_stmt|;
name|u_int32_t
name|ProcessorPageSize
decl_stmt|;
name|u_int32_t
name|NumberOfPhysicalAddressBits
decl_stmt|;
name|u_int32_t
name|MaximumAddressSpaceNumber
decl_stmt|;
name|u_int32_t
name|ProcessorCycleCounterPeriod
decl_stmt|;
name|u_int32_t
name|SystemRevision
decl_stmt|;
name|u_int8_t
name|SystemSerialNumber
index|[
literal|16
index|]
decl_stmt|;
name|u_int8_t
name|FirmwareVersion
index|[
literal|16
index|]
decl_stmt|;
name|u_int8_t
name|FirmwareBuildTimeStamp
index|[
literal|12
index|]
decl_stmt|;
block|}
name|EXTENDED_SYSTEM_INFORMATION
operator|,
typedef|*
name|PEXTENDED_SYSTEM_INFORMATION
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ARC_TYPES_H_ */
end_comment

end_unit

