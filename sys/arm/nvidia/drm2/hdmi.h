begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 Avionic Design GmbH  *  * Permission is hereby granted, free of charge, to any person obtaining a  * copy of this software and associated documentation files (the "Software"),  * to deal in the Software without restriction, including without limitation  * the rights to use, copy, modify, merge, publish, distribute, sub license,  * and/or sell copies of the Software, and to permit persons to whom the  * Software is furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice (including the  * next paragraph) shall be included in all copies or substantial portions  * of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL  * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  * DEALINGS IN THE SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_HDMI_H_
end_ifndef

begin_define
define|#
directive|define
name|_HDMI_H_
end_define

begin_enum
enum|enum
name|hdmi_infoframe_type
block|{
name|HDMI_INFOFRAME_TYPE_VENDOR
init|=
literal|0x81
block|,
name|HDMI_INFOFRAME_TYPE_AVI
init|=
literal|0x82
block|,
name|HDMI_INFOFRAME_TYPE_SPD
init|=
literal|0x83
block|,
name|HDMI_INFOFRAME_TYPE_AUDIO
init|=
literal|0x84
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|HDMI_IEEE_OUI
value|0x000c03
end_define

begin_define
define|#
directive|define
name|HDMI_INFOFRAME_HEADER_SIZE
value|4
end_define

begin_define
define|#
directive|define
name|HDMI_AVI_INFOFRAME_SIZE
value|13
end_define

begin_define
define|#
directive|define
name|HDMI_SPD_INFOFRAME_SIZE
value|25
end_define

begin_define
define|#
directive|define
name|HDMI_AUDIO_INFOFRAME_SIZE
value|10
end_define

begin_define
define|#
directive|define
name|HDMI_INFOFRAME_SIZE
parameter_list|(
name|type
parameter_list|)
define|\
value|(HDMI_INFOFRAME_HEADER_SIZE + HDMI_ ## type ## _INFOFRAME_SIZE)
end_define

begin_struct
struct|struct
name|hdmi_any_infoframe
block|{
name|enum
name|hdmi_infoframe_type
name|type
decl_stmt|;
name|unsigned
name|char
name|version
decl_stmt|;
name|unsigned
name|char
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|hdmi_colorspace
block|{
name|HDMI_COLORSPACE_RGB
block|,
name|HDMI_COLORSPACE_YUV422
block|,
name|HDMI_COLORSPACE_YUV444
block|,
name|HDMI_COLORSPACE_YUV420
block|,
name|HDMI_COLORSPACE_RESERVED4
block|,
name|HDMI_COLORSPACE_RESERVED5
block|,
name|HDMI_COLORSPACE_RESERVED6
block|,
name|HDMI_COLORSPACE_IDO_DEFINED
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_scan_mode
block|{
name|HDMI_SCAN_MODE_NONE
block|,
name|HDMI_SCAN_MODE_OVERSCAN
block|,
name|HDMI_SCAN_MODE_UNDERSCAN
block|,
name|HDMI_SCAN_MODE_RESERVED
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_colorimetry
block|{
name|HDMI_COLORIMETRY_NONE
block|,
name|HDMI_COLORIMETRY_ITU_601
block|,
name|HDMI_COLORIMETRY_ITU_709
block|,
name|HDMI_COLORIMETRY_EXTENDED
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_picture_aspect
block|{
name|HDMI_PICTURE_ASPECT_NONE
block|,
name|HDMI_PICTURE_ASPECT_4_3
block|,
name|HDMI_PICTURE_ASPECT_16_9
block|,
name|HDMI_PICTURE_ASPECT_RESERVED
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_active_aspect
block|{
name|HDMI_ACTIVE_ASPECT_16_9_TOP
init|=
literal|2
block|,
name|HDMI_ACTIVE_ASPECT_14_9_TOP
init|=
literal|3
block|,
name|HDMI_ACTIVE_ASPECT_16_9_CENTER
init|=
literal|4
block|,
name|HDMI_ACTIVE_ASPECT_PICTURE
init|=
literal|8
block|,
name|HDMI_ACTIVE_ASPECT_4_3
init|=
literal|9
block|,
name|HDMI_ACTIVE_ASPECT_16_9
init|=
literal|10
block|,
name|HDMI_ACTIVE_ASPECT_14_9
init|=
literal|11
block|,
name|HDMI_ACTIVE_ASPECT_4_3_SP_14_9
init|=
literal|13
block|,
name|HDMI_ACTIVE_ASPECT_16_9_SP_14_9
init|=
literal|14
block|,
name|HDMI_ACTIVE_ASPECT_16_9_SP_4_3
init|=
literal|15
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_extended_colorimetry
block|{
name|HDMI_EXTENDED_COLORIMETRY_XV_YCC_601
block|,
name|HDMI_EXTENDED_COLORIMETRY_XV_YCC_709
block|,
name|HDMI_EXTENDED_COLORIMETRY_S_YCC_601
block|,
name|HDMI_EXTENDED_COLORIMETRY_ADOBE_YCC_601
block|,
name|HDMI_EXTENDED_COLORIMETRY_ADOBE_RGB
block|,
comment|/* The following EC values are only defined in CEA-861-F. */
name|HDMI_EXTENDED_COLORIMETRY_BT2020_CONST_LUM
block|,
name|HDMI_EXTENDED_COLORIMETRY_BT2020
block|,
name|HDMI_EXTENDED_COLORIMETRY_RESERVED
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_quantization_range
block|{
name|HDMI_QUANTIZATION_RANGE_DEFAULT
block|,
name|HDMI_QUANTIZATION_RANGE_LIMITED
block|,
name|HDMI_QUANTIZATION_RANGE_FULL
block|,
name|HDMI_QUANTIZATION_RANGE_RESERVED
block|, }
enum|;
end_enum

begin_comment
comment|/* non-uniform picture scaling */
end_comment

begin_enum
enum|enum
name|hdmi_nups
block|{
name|HDMI_NUPS_UNKNOWN
block|,
name|HDMI_NUPS_HORIZONTAL
block|,
name|HDMI_NUPS_VERTICAL
block|,
name|HDMI_NUPS_BOTH
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_ycc_quantization_range
block|{
name|HDMI_YCC_QUANTIZATION_RANGE_LIMITED
block|,
name|HDMI_YCC_QUANTIZATION_RANGE_FULL
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_content_type
block|{
name|HDMI_CONTENT_TYPE_GRAPHICS
block|,
name|HDMI_CONTENT_TYPE_PHOTO
block|,
name|HDMI_CONTENT_TYPE_CINEMA
block|,
name|HDMI_CONTENT_TYPE_GAME
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|hdmi_avi_infoframe
block|{
name|enum
name|hdmi_infoframe_type
name|type
decl_stmt|;
name|unsigned
name|char
name|version
decl_stmt|;
name|unsigned
name|char
name|length
decl_stmt|;
name|enum
name|hdmi_colorspace
name|colorspace
decl_stmt|;
name|enum
name|hdmi_scan_mode
name|scan_mode
decl_stmt|;
name|enum
name|hdmi_colorimetry
name|colorimetry
decl_stmt|;
name|enum
name|hdmi_picture_aspect
name|picture_aspect
decl_stmt|;
name|enum
name|hdmi_active_aspect
name|active_aspect
decl_stmt|;
name|bool
name|itc
decl_stmt|;
name|enum
name|hdmi_extended_colorimetry
name|extended_colorimetry
decl_stmt|;
name|enum
name|hdmi_quantization_range
name|quantization_range
decl_stmt|;
name|enum
name|hdmi_nups
name|nups
decl_stmt|;
name|unsigned
name|char
name|video_code
decl_stmt|;
name|enum
name|hdmi_ycc_quantization_range
name|ycc_quantization_range
decl_stmt|;
name|enum
name|hdmi_content_type
name|content_type
decl_stmt|;
name|unsigned
name|char
name|pixel_repeat
decl_stmt|;
name|unsigned
name|short
name|top_bar
decl_stmt|;
name|unsigned
name|short
name|bottom_bar
decl_stmt|;
name|unsigned
name|short
name|left_bar
decl_stmt|;
name|unsigned
name|short
name|right_bar
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|hdmi_avi_infoframe_init
parameter_list|(
name|struct
name|hdmi_avi_infoframe
modifier|*
name|frame
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ssize_t
name|hdmi_avi_infoframe_pack
parameter_list|(
name|struct
name|hdmi_avi_infoframe
modifier|*
name|frame
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|hdmi_spd_sdi
block|{
name|HDMI_SPD_SDI_UNKNOWN
block|,
name|HDMI_SPD_SDI_DSTB
block|,
name|HDMI_SPD_SDI_DVDP
block|,
name|HDMI_SPD_SDI_DVHS
block|,
name|HDMI_SPD_SDI_HDDVR
block|,
name|HDMI_SPD_SDI_DVC
block|,
name|HDMI_SPD_SDI_DSC
block|,
name|HDMI_SPD_SDI_VCD
block|,
name|HDMI_SPD_SDI_GAME
block|,
name|HDMI_SPD_SDI_PC
block|,
name|HDMI_SPD_SDI_BD
block|,
name|HDMI_SPD_SDI_SACD
block|,
name|HDMI_SPD_SDI_HDDVD
block|,
name|HDMI_SPD_SDI_PMP
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|hdmi_spd_infoframe
block|{
name|enum
name|hdmi_infoframe_type
name|type
decl_stmt|;
name|unsigned
name|char
name|version
decl_stmt|;
name|unsigned
name|char
name|length
decl_stmt|;
name|char
name|vendor
index|[
literal|8
index|]
decl_stmt|;
name|char
name|product
index|[
literal|16
index|]
decl_stmt|;
name|enum
name|hdmi_spd_sdi
name|sdi
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|hdmi_spd_infoframe_init
parameter_list|(
name|struct
name|hdmi_spd_infoframe
modifier|*
name|frame
parameter_list|,
specifier|const
name|char
modifier|*
name|vendor
parameter_list|,
specifier|const
name|char
modifier|*
name|product
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ssize_t
name|hdmi_spd_infoframe_pack
parameter_list|(
name|struct
name|hdmi_spd_infoframe
modifier|*
name|frame
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|hdmi_audio_coding_type
block|{
name|HDMI_AUDIO_CODING_TYPE_STREAM
block|,
name|HDMI_AUDIO_CODING_TYPE_PCM
block|,
name|HDMI_AUDIO_CODING_TYPE_AC3
block|,
name|HDMI_AUDIO_CODING_TYPE_MPEG1
block|,
name|HDMI_AUDIO_CODING_TYPE_MP3
block|,
name|HDMI_AUDIO_CODING_TYPE_MPEG2
block|,
name|HDMI_AUDIO_CODING_TYPE_AAC_LC
block|,
name|HDMI_AUDIO_CODING_TYPE_DTS
block|,
name|HDMI_AUDIO_CODING_TYPE_ATRAC
block|,
name|HDMI_AUDIO_CODING_TYPE_DSD
block|,
name|HDMI_AUDIO_CODING_TYPE_EAC3
block|,
name|HDMI_AUDIO_CODING_TYPE_DTS_HD
block|,
name|HDMI_AUDIO_CODING_TYPE_MLP
block|,
name|HDMI_AUDIO_CODING_TYPE_DST
block|,
name|HDMI_AUDIO_CODING_TYPE_WMA_PRO
block|,
name|HDMI_AUDIO_CODING_TYPE_CXT
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_audio_sample_size
block|{
name|HDMI_AUDIO_SAMPLE_SIZE_STREAM
block|,
name|HDMI_AUDIO_SAMPLE_SIZE_16
block|,
name|HDMI_AUDIO_SAMPLE_SIZE_20
block|,
name|HDMI_AUDIO_SAMPLE_SIZE_24
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_audio_sample_frequency
block|{
name|HDMI_AUDIO_SAMPLE_FREQUENCY_STREAM
block|,
name|HDMI_AUDIO_SAMPLE_FREQUENCY_32000
block|,
name|HDMI_AUDIO_SAMPLE_FREQUENCY_44100
block|,
name|HDMI_AUDIO_SAMPLE_FREQUENCY_48000
block|,
name|HDMI_AUDIO_SAMPLE_FREQUENCY_88200
block|,
name|HDMI_AUDIO_SAMPLE_FREQUENCY_96000
block|,
name|HDMI_AUDIO_SAMPLE_FREQUENCY_176400
block|,
name|HDMI_AUDIO_SAMPLE_FREQUENCY_192000
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|hdmi_audio_coding_type_ext
block|{
comment|/* Refer to Audio Coding Type (CT) field in Data Byte 1 */
name|HDMI_AUDIO_CODING_TYPE_EXT_CT
block|,
comment|/* 	 * The next three CXT values are defined in CEA-861-E only. 	 * They do not exist in older versions, and in CEA-861-F they are 	 * defined as 'Not in use'. 	 */
name|HDMI_AUDIO_CODING_TYPE_EXT_HE_AAC
block|,
name|HDMI_AUDIO_CODING_TYPE_EXT_HE_AAC_V2
block|,
name|HDMI_AUDIO_CODING_TYPE_EXT_MPEG_SURROUND
block|,
comment|/* The following CXT values are only defined in CEA-861-F. */
name|HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC
block|,
name|HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_V2
block|,
name|HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC
block|,
name|HDMI_AUDIO_CODING_TYPE_EXT_DRA
block|,
name|HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_SURROUND
block|,
name|HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC_SURROUND
init|=
literal|10
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|hdmi_audio_infoframe
block|{
name|enum
name|hdmi_infoframe_type
name|type
decl_stmt|;
name|unsigned
name|char
name|version
decl_stmt|;
name|unsigned
name|char
name|length
decl_stmt|;
name|unsigned
name|char
name|channels
decl_stmt|;
name|enum
name|hdmi_audio_coding_type
name|coding_type
decl_stmt|;
name|enum
name|hdmi_audio_sample_size
name|sample_size
decl_stmt|;
name|enum
name|hdmi_audio_sample_frequency
name|sample_frequency
decl_stmt|;
name|enum
name|hdmi_audio_coding_type_ext
name|coding_type_ext
decl_stmt|;
name|unsigned
name|char
name|channel_allocation
decl_stmt|;
name|unsigned
name|char
name|level_shift_value
decl_stmt|;
name|bool
name|downmix_inhibit
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|hdmi_audio_infoframe_init
parameter_list|(
name|struct
name|hdmi_audio_infoframe
modifier|*
name|frame
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ssize_t
name|hdmi_audio_infoframe_pack
parameter_list|(
name|struct
name|hdmi_audio_infoframe
modifier|*
name|frame
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|hdmi_3d_structure
block|{
name|HDMI_3D_STRUCTURE_INVALID
init|=
operator|-
literal|1
block|,
name|HDMI_3D_STRUCTURE_FRAME_PACKING
init|=
literal|0
block|,
name|HDMI_3D_STRUCTURE_FIELD_ALTERNATIVE
block|,
name|HDMI_3D_STRUCTURE_LINE_ALTERNATIVE
block|,
name|HDMI_3D_STRUCTURE_SIDE_BY_SIDE_FULL
block|,
name|HDMI_3D_STRUCTURE_L_DEPTH
block|,
name|HDMI_3D_STRUCTURE_L_DEPTH_GFX_GFX_DEPTH
block|,
name|HDMI_3D_STRUCTURE_TOP_AND_BOTTOM
block|,
name|HDMI_3D_STRUCTURE_SIDE_BY_SIDE_HALF
init|=
literal|8
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|hdmi_vendor_infoframe
block|{
name|enum
name|hdmi_infoframe_type
name|type
decl_stmt|;
name|unsigned
name|char
name|version
decl_stmt|;
name|unsigned
name|char
name|length
decl_stmt|;
name|unsigned
name|int
name|oui
decl_stmt|;
name|uint8_t
name|vic
decl_stmt|;
name|enum
name|hdmi_3d_structure
name|s3d_struct
decl_stmt|;
name|unsigned
name|int
name|s3d_ext_data
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|hdmi_vendor_infoframe_init
parameter_list|(
name|struct
name|hdmi_vendor_infoframe
modifier|*
name|frame
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ssize_t
name|hdmi_vendor_infoframe_pack
parameter_list|(
name|struct
name|hdmi_vendor_infoframe
modifier|*
name|frame
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_union
union|union
name|hdmi_vendor_any_infoframe
block|{
struct|struct
block|{
name|enum
name|hdmi_infoframe_type
name|type
decl_stmt|;
name|unsigned
name|char
name|version
decl_stmt|;
name|unsigned
name|char
name|length
decl_stmt|;
name|unsigned
name|int
name|oui
decl_stmt|;
block|}
name|any
struct|;
name|struct
name|hdmi_vendor_infoframe
name|hdmi
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/**  * union hdmi_infoframe - overall union of all abstract infoframe representations  * @any: generic infoframe  * @avi: avi infoframe  * @spd: spd infoframe  * @vendor: union of all vendor infoframes  * @audio: audio infoframe  *  * This is used by the generic pack function. This works since all infoframes  * have the same header which also indicates which type of infoframe should be  * packed.  */
end_comment

begin_union
union|union
name|hdmi_infoframe
block|{
name|struct
name|hdmi_any_infoframe
name|any
decl_stmt|;
name|struct
name|hdmi_avi_infoframe
name|avi
decl_stmt|;
name|struct
name|hdmi_spd_infoframe
name|spd
decl_stmt|;
name|union
name|hdmi_vendor_any_infoframe
name|vendor
decl_stmt|;
name|struct
name|hdmi_audio_infoframe
name|audio
decl_stmt|;
block|}
union|;
end_union

begin_function_decl
name|ssize_t
name|hdmi_infoframe_pack
parameter_list|(
name|union
name|hdmi_infoframe
modifier|*
name|frame
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hdmi_infoframe_unpack
parameter_list|(
name|union
name|hdmi_infoframe
modifier|*
name|frame
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hdmi_infoframe_log
parameter_list|(
name|union
name|hdmi_infoframe
modifier|*
name|frame
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _HDMI_H */
end_comment

end_unit

