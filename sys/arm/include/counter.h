begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2012 Konstantin Belousov<kib@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MACHINE_COUNTER_H__
end_ifndef

begin_define
define|#
directive|define
name|__MACHINE_COUNTER_H__
end_define

begin_include
include|#
directive|include
file|<sys/pcpu.h>
end_include

begin_include
include|#
directive|include
file|<machine/atomic.h>
end_include

begin_define
define|#
directive|define
name|counter_enter
parameter_list|()
value|do {} while (0)
end_define

begin_define
define|#
directive|define
name|counter_exit
parameter_list|()
value|do {} while (0)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|IN_SUBR_COUNTER_C
end_ifdef

begin_function
specifier|static
specifier|inline
name|uint64_t
name|counter_u64_read_one
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|int
name|cpu
parameter_list|)
block|{
return|return
operator|(
name|atomic_load_64
argument_list|(
operator|(
name|uint64_t
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|p
operator|+
sizeof|sizeof
argument_list|(
expr|struct
name|pcpu
argument_list|)
operator|*
name|cpu
operator|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|counter_u64_fetch_inline
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|)
block|{
name|uint64_t
name|r
decl_stmt|;
name|int
name|i
decl_stmt|;
name|r
operator|=
literal|0
expr_stmt|;
name|CPU_FOREACH
argument_list|(
argument|i
argument_list|)
name|r
operator|+=
name|counter_u64_read_one
argument_list|(
operator|(
name|uint64_t
operator|*
operator|)
name|p
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
operator|(
name|r
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|counter_u64_zero_one_cpu
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|atomic_store_64
argument_list|(
operator|(
name|uint64_t
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|arg
operator|+
sizeof|sizeof
argument_list|(
expr|struct
name|pcpu
argument_list|)
operator|*
name|PCPU_GET
argument_list|(
name|cpuid
argument_list|)
operator|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|counter_u64_zero_inline
parameter_list|(
name|counter_u64_t
name|c
parameter_list|)
block|{
name|smp_rendezvous
argument_list|(
name|smp_no_rendezvous_barrier
argument_list|,
name|counter_u64_zero_one_cpu
argument_list|,
name|smp_no_rendezvous_barrier
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|counter_u64_add_protected
parameter_list|(
name|c
parameter_list|,
name|inc
parameter_list|)
value|counter_u64_add(c, inc)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|counter_u64_add
parameter_list|(
name|counter_u64_t
name|c
parameter_list|,
name|int64_t
name|inc
parameter_list|)
block|{
name|atomic_add_64
argument_list|(
operator|(
name|uint64_t
operator|*
operator|)
name|zpcpu_get
argument_list|(
name|c
argument_list|)
argument_list|,
name|inc
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ! __MACHINE_COUNTER_H__ */
end_comment

end_unit

