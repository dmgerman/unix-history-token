begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (C) 2013-2014 Daisuke Aoyama<aoyama@peach.ne.jp>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_BCM2835_MBOX_PROP_H_
end_ifndef

begin_define
define|#
directive|define
name|_BCM2835_MBOX_PROP_H_
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_comment
comment|/*  * Mailbox property interface:  * https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface  */
end_comment

begin_define
define|#
directive|define
name|BCM2835_MBOX_CODE_REQ
value|0
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CODE_RESP_SUCCESS
value|0x80000000
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CODE_RESP_ERROR
value|0x80000001
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_VAL_LEN_RESPONSE
value|0x80000000
end_define

begin_struct
struct|struct
name|bcm2835_mbox_hdr
block|{
name|uint32_t
name|buf_size
decl_stmt|;
name|uint32_t
name|code
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bcm2835_mbox_tag_hdr
block|{
name|uint32_t
name|tag
decl_stmt|;
name|uint32_t
name|val_buf_size
decl_stmt|;
name|uint32_t
name|val_len
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_INIT_TAG
parameter_list|(
name|tag_
parameter_list|,
name|tagid_
parameter_list|)
value|do {		\ 	(tag_)->tag_hdr.tag = BCM2835_MBOX_TAG_##tagid_;	\ 	(tag_)->tag_hdr.val_buf_size = sizeof((tag_)->body);	\ 	(tag_)->tag_hdr.val_len = sizeof((tag_)->body.req);	\ } while (0)
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ID_EMMC
value|0x00000000
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ID_UART0
value|0x00000001
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ID_UART1
value|0x00000002
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ID_USB_HCD
value|0x00000003
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ID_I2C0
value|0x00000004
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ID_I2C1
value|0x00000005
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ID_I2C2
value|0x00000006
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ID_SPI
value|0x00000007
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ID_CCP2TX
value|0x00000008
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_ON
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_POWER_WAIT
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_POWER_STATE
value|0x00020001
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_SET_POWER_STATE
value|0x00028001
end_define

begin_struct
struct|struct
name|msg_get_power_state
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|device_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|device_id
decl_stmt|;
name|uint32_t
name|state
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_set_power_state
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|device_id
decl_stmt|;
name|uint32_t
name|state
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|device_id
decl_stmt|;
name|uint32_t
name|state
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Sets the power state for a given device */
end_comment

begin_function_decl
name|int
name|bcm2835_mbox_set_power_state
parameter_list|(
name|uint32_t
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_EMMC
value|0x00000001
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_UART
value|0x00000002
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_ARM
value|0x00000003
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_CORE
value|0x00000004
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_V3D
value|0x00000005
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_H264
value|0x00000006
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_ISP
value|0x00000007
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_SDRAM
value|0x00000008
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_PIXEL
value|0x00000009
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_CLOCK_ID_PWM
value|0x0000000a
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_CLOCK_RATE
value|0x00030002
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_SET_CLOCK_RATE
value|0x00038002
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_MAX_CLOCK_RATE
value|0x00030004
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_MIN_CLOCK_RATE
value|0x00030007
end_define

begin_struct
struct|struct
name|msg_get_clock_rate
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|clock_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|clock_id
decl_stmt|;
name|uint32_t
name|rate_hz
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_set_clock_rate
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|clock_id
decl_stmt|;
name|uint32_t
name|rate_hz
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|clock_id
decl_stmt|;
name|uint32_t
name|rate_hz
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_get_max_clock_rate
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|clock_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|clock_id
decl_stmt|;
name|uint32_t
name|rate_hz
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_get_min_clock_rate
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|clock_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|clock_id
decl_stmt|;
name|uint32_t
name|rate_hz
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|bcm2835_mbox_get_clock_rate
parameter_list|(
name|uint32_t
parameter_list|,
name|uint32_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|BCM2835_MBOX_TURBO_ON
value|1
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TURBO_OFF
value|0
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_TURBO
value|0x00030009
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_SET_TURBO
value|0x00038009
end_define

begin_struct
struct|struct
name|msg_get_turbo
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|id
decl_stmt|;
name|uint32_t
name|level
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_set_turbo
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|id
decl_stmt|;
name|uint32_t
name|level
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|id
decl_stmt|;
name|uint32_t
name|level
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_VOLTAGE_ID_CORE
value|0x00000001
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_VOLTAGE_ID_SDRAM_C
value|0x00000002
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_VOLTAGE_ID_SDRAM_P
value|0x00000003
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_VOLTAGE_ID_SDRAM_I
value|0x00000004
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_VOLTAGE
value|0x00030003
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_SET_VOLTAGE
value|0x00038003
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_MAX_VOLTAGE
value|0x00030005
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_MIN_VOLTAGE
value|0x00030008
end_define

begin_struct
struct|struct
name|msg_get_voltage
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|voltage_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|voltage_id
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_set_voltage
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|voltage_id
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|voltage_id
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_get_max_voltage
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|voltage_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|voltage_id
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_get_min_voltage
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|voltage_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|voltage_id
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_TEMPERATURE
value|0x00030006
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_MAX_TEMPERATURE
value|0x0003000a
end_define

begin_struct
struct|struct
name|msg_get_temperature
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|temperature_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|temperature_id
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_get_max_temperature
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|temperature_id
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|temperature_id
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_PHYSICAL_W_H
value|0x00040003
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_SET_PHYSICAL_W_H
value|0x00048003
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_VIRTUAL_W_H
value|0x00040004
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_SET_VIRTUAL_W_H
value|0x00048004
end_define

begin_struct
struct|struct
name|bcm2835_mbox_tag_fb_w_h
block|{
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|width
decl_stmt|;
name|uint32_t
name|height
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|width
decl_stmt|;
name|uint32_t
name|height
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_DEPTH
value|0x00040005
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_SET_DEPTH
value|0x00048005
end_define

begin_struct
struct|struct
name|bcm2835_mbox_tag_depth
block|{
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|bpp
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|bpp
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_ALPHA_MODE
value|0x00040007
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_SET_ALPHA_MODE
value|0x00048007
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_ALPHA_MODE_0_OPAQUE
value|0
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_ALPHA_MODE_0_TRANSPARENT
value|1
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_ALPHA_MODE_IGNORED
value|2
end_define

begin_struct
struct|struct
name|bcm2835_mbox_tag_alpha_mode
block|{
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|alpha
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|alpha
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_VIRTUAL_OFFSET
value|0x00040009
end_define

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_SET_VIRTUAL_OFFSET
value|0x00048009
end_define

begin_struct
struct|struct
name|bcm2835_mbox_tag_virtual_offset
block|{
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|x
decl_stmt|;
name|uint32_t
name|y
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|x
decl_stmt|;
name|uint32_t
name|y
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_PITCH
value|0x00040008
end_define

begin_struct
struct|struct
name|bcm2835_mbox_tag_pitch
block|{
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{ 		}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|pitch
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_ALLOCATE_BUFFER
value|0x00040001
end_define

begin_struct
struct|struct
name|bcm2835_mbox_tag_allocate_buffer
block|{
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|uint32_t
name|alignment
decl_stmt|;
block|}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|fb_address
decl_stmt|;
name|uint32_t
name|fb_size
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_RELEASE_BUFFER
value|0x00048001
end_define

begin_struct
struct|struct
name|bcm2835_mbox_tag_release_buffer
block|{
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{ 		}
name|req
struct|;
struct|struct
block|{ 		}
name|resp
struct|;
block|}
name|body
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BCM2835_MBOX_TAG_GET_TOUCHBUF
value|0x0004000f
end_define

begin_struct
struct|struct
name|bcm2835_mbox_tag_touchbuf
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_hdr
name|tag_hdr
decl_stmt|;
union|union
block|{
struct|struct
block|{ 		}
name|req
struct|;
struct|struct
block|{
name|uint32_t
name|address
decl_stmt|;
block|}
name|resp
struct|;
block|}
name|body
union|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bcm2835_fb_config
block|{
name|uint32_t
name|xres
decl_stmt|;
name|uint32_t
name|yres
decl_stmt|;
name|uint32_t
name|vxres
decl_stmt|;
name|uint32_t
name|vyres
decl_stmt|;
name|uint32_t
name|xoffset
decl_stmt|;
name|uint32_t
name|yoffset
decl_stmt|;
name|uint32_t
name|bpp
decl_stmt|;
name|uint32_t
name|pitch
decl_stmt|;
name|uint32_t
name|base
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msg_fb_get_w_h
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_fb_w_h
name|physical_w_h
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_fb_w_h
name|virtual_w_h
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_virtual_offset
name|offset
decl_stmt|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|bcm2835_mbox_fb_get_w_h
parameter_list|(
name|struct
name|bcm2835_fb_config
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|msg_fb_setup
block|{
name|struct
name|bcm2835_mbox_hdr
name|hdr
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_fb_w_h
name|physical_w_h
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_fb_w_h
name|virtual_w_h
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_virtual_offset
name|offset
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_depth
name|depth
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_alpha_mode
name|alpha
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_allocate_buffer
name|buffer
decl_stmt|;
name|struct
name|bcm2835_mbox_tag_pitch
name|pitch
decl_stmt|;
name|uint32_t
name|end_tag
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|bcm2835_mbox_fb_init
parameter_list|(
name|struct
name|bcm2835_fb_config
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bcm2835_mbox_property
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _BCM2835_MBOX_PROP_H_ */
end_comment

end_unit

