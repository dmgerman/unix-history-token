begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007 Pawel Jakub Dawidek<pjd@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_OPENSOLARIS_SYS_ATOMIC_H_
end_ifndef

begin_define
define|#
directive|define
name|_OPENSOLARIS_SYS_ATOMIC_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<machine/atomic.h>
end_include

begin_define
define|#
directive|define
name|casptr
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|,
name|_c
parameter_list|)
define|\
value|atomic_cmpset_ptr((volatile uintptr_t *)(_a), (uintptr_t)(_b), (uintptr_t) (_c))
end_define

begin_define
define|#
directive|define
name|cas32
value|atomic_cmpset_32
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__LP64__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__mips_n32
argument_list|)
end_if

begin_function_decl
specifier|extern
name|void
name|atomic_add_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
name|target
parameter_list|,
name|int64_t
name|delta
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|atomic_dec_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
name|target
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__LP64__
end_ifndef

begin_function_decl
specifier|extern
name|void
modifier|*
name|atomic_cas_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|target
parameter_list|,
name|void
modifier|*
name|cmp
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__sparc64__
end_ifndef

begin_function_decl
specifier|extern
name|uint64_t
name|atomic_cas_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
name|target
parameter_list|,
name|uint64_t
name|cmp
parameter_list|,
name|uint64_t
name|newval
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|uint64_t
name|atomic_add_64_nv
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
name|target
parameter_list|,
name|int64_t
name|delta
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|uint8_t
name|atomic_or_8_nv
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
name|target
parameter_list|,
name|uint8_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|membar_producer
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sparc64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__powerpc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__arm__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__mips__
argument_list|)
end_if

begin_function_decl
specifier|extern
name|void
name|atomic_or_8
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
name|target
parameter_list|,
name|uint8_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
name|__inline
name|void
name|atomic_or_8
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
name|target
parameter_list|,
name|uint8_t
name|value
parameter_list|)
block|{
name|atomic_set_8
argument_list|(
name|target
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|uint32_t
name|atomic_add_32_nv
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
name|target
parameter_list|,
name|int32_t
name|delta
parameter_list|)
block|{
return|return
operator|(
name|atomic_fetchadd_32
argument_list|(
name|target
argument_list|,
name|delta
argument_list|)
operator|+
name|delta
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int
name|atomic_add_int_nv
parameter_list|(
specifier|volatile
name|u_int
modifier|*
name|target
parameter_list|,
name|int
name|delta
parameter_list|)
block|{
return|return
operator|(
name|atomic_add_32_nv
argument_list|(
name|target
argument_list|,
name|delta
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|atomic_dec_32
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
name|target
parameter_list|)
block|{
name|atomic_subtract_32
argument_list|(
name|target
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|atomic_dec_32_nv
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
name|target
parameter_list|)
block|{
return|return
operator|(
name|atomic_fetchadd_32
argument_list|(
name|target
argument_list|,
operator|-
literal|1
argument_list|)
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__LP64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__mips_n32
argument_list|)
end_if

begin_function
specifier|static
name|__inline
name|void
name|atomic_dec_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
name|target
parameter_list|)
block|{
name|atomic_subtract_64
argument_list|(
name|target
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|void
name|atomic_inc_32
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
name|target
parameter_list|)
block|{
name|atomic_add_32
argument_list|(
name|target
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|atomic_inc_32_nv
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
name|target
parameter_list|)
block|{
return|return
operator|(
name|atomic_add_32_nv
argument_list|(
name|target
argument_list|,
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|atomic_inc_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
name|target
parameter_list|)
block|{
name|atomic_add_64
argument_list|(
name|target
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint64_t
name|atomic_inc_64_nv
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
name|target
parameter_list|)
block|{
return|return
operator|(
name|atomic_add_64_nv
argument_list|(
name|target
argument_list|,
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__LP64__
end_ifdef

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|atomic_cas_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
name|target
parameter_list|,
name|void
modifier|*
name|cmp
parameter_list|,
name|void
modifier|*
name|newval
parameter_list|)
block|{
return|return
operator|(
operator|(
name|void
operator|*
operator|)
name|atomic_cas_64
argument_list|(
operator|(
specifier|volatile
name|uint64_t
operator|*
operator|)
name|target
argument_list|,
operator|(
name|uint64_t
operator|)
name|cmp
argument_list|,
operator|(
name|uint64_t
operator|)
name|newval
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_OPENSOLARIS_SYS_ATOMIC_H_ */
end_comment

end_unit

