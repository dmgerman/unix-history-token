begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007 Pawel Jakub Dawidek<pjd@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_OPENSOLARIS_SYS_VNODE_H_
end_ifndef

begin_define
define|#
directive|define
name|_OPENSOLARIS_SYS_VNODE_H_
end_define

begin_struct_decl
struct_decl|struct
name|vnode
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vattr
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|struct
name|vnode
name|vnode_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|vattr
name|vattr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|enum
name|vtype
name|vtype_t
typedef|;
end_typedef

begin_include
include|#
directive|include
file|<sys/namei.h>
end_include

begin_enum
enum|enum
name|symfollow
block|{
name|NO_FOLLOW
init|=
name|NOFOLLOW
block|}
enum|;
end_enum

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_empty
empty|#include_next<sys/vnode.h>
end_empty

begin_include
include|#
directive|include
file|<sys/mount.h>
end_include

begin_include
include|#
directive|include
file|<sys/cred.h>
end_include

begin_include
include|#
directive|include
file|<sys/fcntl.h>
end_include

begin_include
include|#
directive|include
file|<sys/file.h>
end_include

begin_include
include|#
directive|include
file|<sys/filedesc.h>
end_include

begin_include
include|#
directive|include
file|<sys/syscallsubr.h>
end_include

begin_typedef
typedef|typedef
name|struct
name|vop_vector
name|vnodeops_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|VOP_FID
value|VOP_VPTOFH
end_define

begin_define
define|#
directive|define
name|vop_fid
value|vop_vptofh
end_define

begin_define
define|#
directive|define
name|vop_fid_args
value|vop_vptofh_args
end_define

begin_define
define|#
directive|define
name|a_fid
value|a_fhp
end_define

begin_define
define|#
directive|define
name|IS_XATTRDIR
parameter_list|(
name|dvp
parameter_list|)
value|(0)
end_define

begin_define
define|#
directive|define
name|v_count
value|v_usecount
end_define

begin_define
define|#
directive|define
name|V_APPEND
value|VAPPEND
end_define

begin_function
specifier|static
name|__inline
name|int
name|vn_is_readonly
parameter_list|(
name|vnode_t
modifier|*
name|vp
parameter_list|)
block|{
return|return
operator|(
name|vp
operator|->
name|v_mount
operator|->
name|mnt_flag
operator|&
name|MNT_RDONLY
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|vn_vfswlock
parameter_list|(
name|vp
parameter_list|)
value|(0)
end_define

begin_define
define|#
directive|define
name|vn_vfsunlock
parameter_list|(
name|vp
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vn_ismntpt
parameter_list|(
name|vp
parameter_list|)
value|((vp)->v_type == VDIR&& (vp)->v_mountedhere != NULL)
end_define

begin_define
define|#
directive|define
name|vn_mountedvfs
parameter_list|(
name|vp
parameter_list|)
value|((vp)->v_mountedhere)
end_define

begin_define
define|#
directive|define
name|vn_has_cached_data
parameter_list|(
name|vp
parameter_list|)
define|\
value|((vp)->v_object != NULL&& ((vp)->v_object->resident_page_count> 0 \ 				    || (vp)->v_object->cache != NULL))
end_define

begin_define
define|#
directive|define
name|vn_exists
parameter_list|(
name|vp
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vn_invalid
parameter_list|(
name|vp
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vn_renamepath
parameter_list|(
name|tdvp
parameter_list|,
name|svp
parameter_list|,
name|tnm
parameter_list|,
name|lentnm
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vn_free
parameter_list|(
name|vp
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vn_matchops
parameter_list|(
name|vp
parameter_list|,
name|vops
parameter_list|)
value|((vp)->v_op ==&(vops))
end_define

begin_define
define|#
directive|define
name|VN_HOLD
parameter_list|(
name|v
parameter_list|)
value|vref(v)
end_define

begin_define
define|#
directive|define
name|VN_RELE
parameter_list|(
name|v
parameter_list|)
value|vrele(v)
end_define

begin_define
define|#
directive|define
name|VN_URELE
parameter_list|(
name|v
parameter_list|)
value|vput(v)
end_define

begin_define
define|#
directive|define
name|VOP_REALVP
parameter_list|(
name|vp
parameter_list|,
name|vpp
parameter_list|,
name|ct
parameter_list|)
value|(*(vpp) = (vp), 0)
end_define

begin_define
define|#
directive|define
name|vnevent_create
parameter_list|(
name|vp
parameter_list|,
name|ct
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vnevent_link
parameter_list|(
name|vp
parameter_list|,
name|ct
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vnevent_remove
parameter_list|(
name|vp
parameter_list|,
name|dvp
parameter_list|,
name|name
parameter_list|,
name|ct
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vnevent_rmdir
parameter_list|(
name|vp
parameter_list|,
name|dvp
parameter_list|,
name|name
parameter_list|,
name|ct
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vnevent_rename_src
parameter_list|(
name|vp
parameter_list|,
name|dvp
parameter_list|,
name|name
parameter_list|,
name|ct
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vnevent_rename_dest
parameter_list|(
name|vp
parameter_list|,
name|dvp
parameter_list|,
name|name
parameter_list|,
name|ct
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|vnevent_rename_dest_dir
parameter_list|(
name|vp
parameter_list|,
name|ct
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|specvp
parameter_list|(
name|vp
parameter_list|,
name|rdev
parameter_list|,
name|type
parameter_list|,
name|cr
parameter_list|)
value|(VN_HOLD(vp), (vp))
end_define

begin_define
define|#
directive|define
name|MANDMODE
parameter_list|(
name|mode
parameter_list|)
value|(0)
end_define

begin_define
define|#
directive|define
name|chklock
parameter_list|(
name|vp
parameter_list|,
name|op
parameter_list|,
name|offset
parameter_list|,
name|size
parameter_list|,
name|mode
parameter_list|,
name|ct
parameter_list|)
value|(0)
end_define

begin_define
define|#
directive|define
name|cleanlocks
parameter_list|(
name|vp
parameter_list|,
name|pid
parameter_list|,
name|foo
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|cleanshares
parameter_list|(
name|vp
parameter_list|,
name|pid
parameter_list|)
value|do { } while (0)
end_define

begin_comment
comment|/*  * We will use va_spare is place of Solaris' va_mask.  * This field is initialized in zfs_setattr().  */
end_comment

begin_define
define|#
directive|define
name|va_mask
value|va_spare
end_define

begin_comment
comment|/* TODO: va_fileid is shorter than va_nodeid !!! */
end_comment

begin_define
define|#
directive|define
name|va_nodeid
value|va_fileid
end_define

begin_comment
comment|/* TODO: This field needs conversion! */
end_comment

begin_define
define|#
directive|define
name|va_nblocks
value|va_bytes
end_define

begin_define
define|#
directive|define
name|va_blksize
value|va_blocksize
end_define

begin_define
define|#
directive|define
name|va_seq
value|va_gen
end_define

begin_define
define|#
directive|define
name|MAXOFFSET_T
value|OFF_MAX
end_define

begin_define
define|#
directive|define
name|EXCL
value|0
end_define

begin_define
define|#
directive|define
name|ACCESSED
value|(AT_ATIME)
end_define

begin_define
define|#
directive|define
name|STATE_CHANGED
value|(AT_CTIME)
end_define

begin_define
define|#
directive|define
name|CONTENT_MODIFIED
value|(AT_MTIME | AT_CTIME)
end_define

begin_function
specifier|static
name|__inline
name|void
name|vattr_init_mask
parameter_list|(
name|vattr_t
modifier|*
name|vap
parameter_list|)
block|{
name|vap
operator|->
name|va_mask
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|vap
operator|->
name|va_type
operator|!=
name|VNON
condition|)
name|vap
operator|->
name|va_mask
operator||=
name|AT_TYPE
expr_stmt|;
if|if
condition|(
name|vap
operator|->
name|va_uid
operator|!=
operator|(
name|uid_t
operator|)
name|VNOVAL
condition|)
name|vap
operator|->
name|va_mask
operator||=
name|AT_UID
expr_stmt|;
if|if
condition|(
name|vap
operator|->
name|va_gid
operator|!=
operator|(
name|gid_t
operator|)
name|VNOVAL
condition|)
name|vap
operator|->
name|va_mask
operator||=
name|AT_GID
expr_stmt|;
if|if
condition|(
name|vap
operator|->
name|va_size
operator|!=
operator|(
name|u_quad_t
operator|)
name|VNOVAL
condition|)
name|vap
operator|->
name|va_mask
operator||=
name|AT_SIZE
expr_stmt|;
if|if
condition|(
name|vap
operator|->
name|va_atime
operator|.
name|tv_sec
operator|!=
name|VNOVAL
condition|)
name|vap
operator|->
name|va_mask
operator||=
name|AT_ATIME
expr_stmt|;
if|if
condition|(
name|vap
operator|->
name|va_mtime
operator|.
name|tv_sec
operator|!=
name|VNOVAL
condition|)
name|vap
operator|->
name|va_mask
operator||=
name|AT_MTIME
expr_stmt|;
if|if
condition|(
name|vap
operator|->
name|va_mode
operator|!=
operator|(
name|u_short
operator|)
name|VNOVAL
condition|)
name|vap
operator|->
name|va_mask
operator||=
name|AT_MODE
expr_stmt|;
if|if
condition|(
name|vap
operator|->
name|va_flags
operator|!=
name|VNOVAL
condition|)
name|vap
operator|->
name|va_mask
operator||=
name|AT_XVATTR
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|FCREAT
value|O_CREAT
end_define

begin_define
define|#
directive|define
name|FTRUNC
value|O_TRUNC
end_define

begin_define
define|#
directive|define
name|FDSYNC
value|FFSYNC
end_define

begin_define
define|#
directive|define
name|FRSYNC
value|FFSYNC
end_define

begin_define
define|#
directive|define
name|FSYNC
value|FFSYNC
end_define

begin_define
define|#
directive|define
name|FOFFMAX
value|0x00
end_define

begin_define
define|#
directive|define
name|FIGNORECASE
value|0x00
end_define

begin_function
specifier|static
name|__inline
name|int
name|vn_openat
parameter_list|(
name|char
modifier|*
name|pnamep
parameter_list|,
name|enum
name|uio_seg
name|seg
parameter_list|,
name|int
name|filemode
parameter_list|,
name|int
name|createmode
parameter_list|,
name|vnode_t
modifier|*
modifier|*
name|vpp
parameter_list|,
name|enum
name|create
name|crwhy
parameter_list|,
name|mode_t
name|umask
parameter_list|,
name|struct
name|vnode
modifier|*
name|startvp
parameter_list|,
name|int
name|fd
parameter_list|)
block|{
name|struct
name|thread
modifier|*
name|td
init|=
name|curthread
decl_stmt|;
name|struct
name|filedesc
modifier|*
name|fdc
decl_stmt|;
name|struct
name|nameidata
name|nd
decl_stmt|;
name|int
name|error
decl_stmt|,
name|operation
decl_stmt|;
name|ASSERT
argument_list|(
name|seg
operator|==
name|UIO_SYSSPACE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|filemode
operator|&
name|FCREAT
operator|)
operator|!=
literal|0
condition|)
block|{
name|ASSERT
argument_list|(
name|filemode
operator|==
operator|(
name|FWRITE
operator||
name|FCREAT
operator||
name|FTRUNC
operator||
name|FOFFMAX
operator|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|crwhy
operator|==
name|CRCREAT
argument_list|)
expr_stmt|;
name|operation
operator|=
name|CREATE
expr_stmt|;
block|}
else|else
block|{
name|ASSERT
argument_list|(
name|filemode
operator|==
operator|(
name|FREAD
operator||
name|FWRITE
operator||
name|FOFFMAX
operator|)
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|crwhy
operator|==
literal|0
argument_list|)
expr_stmt|;
name|operation
operator|=
name|LOOKUP
expr_stmt|;
block|}
name|ASSERT
argument_list|(
name|umask
operator|==
literal|0
argument_list|)
expr_stmt|;
name|fdc
operator|=
name|td
operator|->
name|td_proc
operator|->
name|p_fd
expr_stmt|;
name|FILEDESC_XLOCK
argument_list|(
name|fdc
argument_list|)
expr_stmt|;
if|if
condition|(
name|fdc
operator|->
name|fd_rdir
operator|==
name|NULL
condition|)
block|{
name|fdc
operator|->
name|fd_rdir
operator|=
name|rootvnode
expr_stmt|;
name|vref
argument_list|(
name|fdc
operator|->
name|fd_rdir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fdc
operator|->
name|fd_cdir
operator|==
name|NULL
condition|)
block|{
name|fdc
operator|->
name|fd_cdir
operator|=
name|rootvnode
expr_stmt|;
name|vref
argument_list|(
name|fdc
operator|->
name|fd_rdir
argument_list|)
expr_stmt|;
block|}
name|FILEDESC_XUNLOCK
argument_list|(
name|fdc
argument_list|)
expr_stmt|;
if|if
condition|(
name|startvp
operator|!=
name|NULL
condition|)
name|vref
argument_list|(
name|startvp
argument_list|)
expr_stmt|;
name|NDINIT_ATVP
argument_list|(
operator|&
name|nd
argument_list|,
name|operation
argument_list|,
name|MPSAFE
argument_list|,
name|UIO_SYSSPACE
argument_list|,
name|pnamep
argument_list|,
name|startvp
argument_list|,
name|td
argument_list|)
expr_stmt|;
name|filemode
operator||=
name|O_NOFOLLOW
expr_stmt|;
name|error
operator|=
name|vn_open_cred
argument_list|(
operator|&
name|nd
argument_list|,
operator|&
name|filemode
argument_list|,
name|createmode
argument_list|,
literal|0
argument_list|,
name|td
operator|->
name|td_ucred
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|NDFREE
argument_list|(
operator|&
name|nd
argument_list|,
name|NDF_ONLY_PNBUF
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
literal|0
condition|)
block|{
comment|/* We just unlock so we hold a reference. */
name|VOP_UNLOCK
argument_list|(
name|nd
operator|.
name|ni_vp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|*
name|vpp
operator|=
name|nd
operator|.
name|ni_vp
expr_stmt|;
block|}
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|zfs_vn_open
parameter_list|(
name|char
modifier|*
name|pnamep
parameter_list|,
name|enum
name|uio_seg
name|seg
parameter_list|,
name|int
name|filemode
parameter_list|,
name|int
name|createmode
parameter_list|,
name|vnode_t
modifier|*
modifier|*
name|vpp
parameter_list|,
name|enum
name|create
name|crwhy
parameter_list|,
name|mode_t
name|umask
parameter_list|)
block|{
return|return
operator|(
name|vn_openat
argument_list|(
name|pnamep
argument_list|,
name|seg
argument_list|,
name|filemode
argument_list|,
name|createmode
argument_list|,
name|vpp
argument_list|,
name|crwhy
argument_list|,
name|umask
argument_list|,
name|NULL
argument_list|,
operator|-
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|vn_open
parameter_list|(
name|pnamep
parameter_list|,
name|seg
parameter_list|,
name|filemode
parameter_list|,
name|createmode
parameter_list|,
name|vpp
parameter_list|,
name|crwhy
parameter_list|,
name|umask
parameter_list|)
define|\
value|zfs_vn_open((pnamep), (seg), (filemode), (createmode), (vpp), (crwhy), (umask))
end_define

begin_define
define|#
directive|define
name|RLIM64_INFINITY
value|0
end_define

begin_function
specifier|static
name|__inline
name|int
name|zfs_vn_rdwr
parameter_list|(
name|enum
name|uio_rw
name|rw
parameter_list|,
name|vnode_t
modifier|*
name|vp
parameter_list|,
name|caddr_t
name|base
parameter_list|,
name|ssize_t
name|len
parameter_list|,
name|offset_t
name|offset
parameter_list|,
name|enum
name|uio_seg
name|seg
parameter_list|,
name|int
name|ioflag
parameter_list|,
name|int
name|ulimit
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|,
name|ssize_t
modifier|*
name|residp
parameter_list|)
block|{
name|struct
name|thread
modifier|*
name|td
init|=
name|curthread
decl_stmt|;
name|int
name|error
decl_stmt|,
name|vfslocked
decl_stmt|,
name|resid
decl_stmt|;
name|ASSERT
argument_list|(
name|ioflag
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|ulimit
operator|==
name|RLIM64_INFINITY
argument_list|)
expr_stmt|;
name|vfslocked
operator|=
name|VFS_LOCK_GIANT
argument_list|(
name|vp
operator|->
name|v_mount
argument_list|)
expr_stmt|;
if|if
condition|(
name|rw
operator|==
name|UIO_WRITE
condition|)
block|{
name|ioflag
operator|=
name|IO_SYNC
expr_stmt|;
block|}
else|else
block|{
name|ioflag
operator|=
name|IO_DIRECT
expr_stmt|;
block|}
name|error
operator|=
name|vn_rdwr
argument_list|(
name|rw
argument_list|,
name|vp
argument_list|,
name|base
argument_list|,
name|len
argument_list|,
name|offset
argument_list|,
name|seg
argument_list|,
name|ioflag
argument_list|,
name|cr
argument_list|,
name|NOCRED
argument_list|,
operator|&
name|resid
argument_list|,
name|td
argument_list|)
expr_stmt|;
name|VFS_UNLOCK_GIANT
argument_list|(
name|vfslocked
argument_list|)
expr_stmt|;
if|if
condition|(
name|residp
operator|!=
name|NULL
condition|)
operator|*
name|residp
operator|=
operator|(
name|ssize_t
operator|)
name|resid
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|vn_rdwr
parameter_list|(
name|rw
parameter_list|,
name|vp
parameter_list|,
name|base
parameter_list|,
name|len
parameter_list|,
name|offset
parameter_list|,
name|seg
parameter_list|,
name|ioflag
parameter_list|,
name|ulimit
parameter_list|,
name|cr
parameter_list|,
name|residp
parameter_list|)
define|\
value|zfs_vn_rdwr((rw), (vp), (base), (len), (offset), (seg), (ioflag), (ulimit), (cr), (residp))
end_define

begin_function
specifier|static
name|__inline
name|int
name|zfs_vop_fsync
parameter_list|(
name|vnode_t
modifier|*
name|vp
parameter_list|,
name|int
name|flag
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
block|{
name|struct
name|mount
modifier|*
name|mp
decl_stmt|;
name|int
name|error
decl_stmt|,
name|vfslocked
decl_stmt|;
name|ASSERT
argument_list|(
name|flag
operator|==
name|FSYNC
argument_list|)
expr_stmt|;
name|vfslocked
operator|=
name|VFS_LOCK_GIANT
argument_list|(
name|vp
operator|->
name|v_mount
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|error
operator|=
name|vn_start_write
argument_list|(
name|vp
argument_list|,
operator|&
name|mp
argument_list|,
name|V_WAIT
operator||
name|PCATCH
argument_list|)
operator|)
operator|!=
literal|0
condition|)
goto|goto
name|drop
goto|;
name|vn_lock
argument_list|(
name|vp
argument_list|,
name|LK_EXCLUSIVE
operator||
name|LK_RETRY
argument_list|)
expr_stmt|;
name|error
operator|=
name|VOP_FSYNC
argument_list|(
name|vp
argument_list|,
name|MNT_WAIT
argument_list|,
name|curthread
argument_list|)
expr_stmt|;
name|VOP_UNLOCK
argument_list|(
name|vp
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|vn_finished_write
argument_list|(
name|mp
argument_list|)
expr_stmt|;
name|drop
label|:
name|VFS_UNLOCK_GIANT
argument_list|(
name|vfslocked
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|VOP_FSYNC
parameter_list|(
name|vp
parameter_list|,
name|flag
parameter_list|,
name|cr
parameter_list|,
name|ct
parameter_list|)
value|zfs_vop_fsync((vp), (flag), (cr))
end_define

begin_function
specifier|static
name|__inline
name|int
name|zfs_vop_close
parameter_list|(
name|vnode_t
modifier|*
name|vp
parameter_list|,
name|int
name|flag
parameter_list|,
name|int
name|count
parameter_list|,
name|offset_t
name|offset
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
block|{
name|int
name|error
decl_stmt|,
name|vfslocked
decl_stmt|;
name|ASSERT
argument_list|(
name|count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|offset
operator|==
literal|0
argument_list|)
expr_stmt|;
name|vfslocked
operator|=
name|VFS_LOCK_GIANT
argument_list|(
name|vp
operator|->
name|v_mount
argument_list|)
expr_stmt|;
name|error
operator|=
name|vn_close
argument_list|(
name|vp
argument_list|,
name|flag
argument_list|,
name|cr
argument_list|,
name|curthread
argument_list|)
expr_stmt|;
name|VFS_UNLOCK_GIANT
argument_list|(
name|vfslocked
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|VOP_CLOSE
parameter_list|(
name|vp
parameter_list|,
name|oflags
parameter_list|,
name|count
parameter_list|,
name|offset
parameter_list|,
name|cr
parameter_list|,
name|ct
parameter_list|)
define|\
value|zfs_vop_close((vp), (oflags), (count), (offset), (cr))
end_define

begin_function
specifier|static
name|__inline
name|int
name|vn_rename
parameter_list|(
name|char
modifier|*
name|from
parameter_list|,
name|char
modifier|*
name|to
parameter_list|,
name|enum
name|uio_seg
name|seg
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|seg
operator|==
name|UIO_SYSSPACE
argument_list|)
expr_stmt|;
return|return
operator|(
name|kern_rename
argument_list|(
name|curthread
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|seg
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|vn_remove
parameter_list|(
name|char
modifier|*
name|fnamep
parameter_list|,
name|enum
name|uio_seg
name|seg
parameter_list|,
name|enum
name|rm
name|dirflag
parameter_list|)
block|{
name|ASSERT
argument_list|(
name|seg
operator|==
name|UIO_SYSSPACE
argument_list|)
expr_stmt|;
name|ASSERT
argument_list|(
name|dirflag
operator|==
name|RMFILE
argument_list|)
expr_stmt|;
return|return
operator|(
name|kern_unlink
argument_list|(
name|curthread
argument_list|,
name|fnamep
argument_list|,
name|seg
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _OPENSOLARIS_SYS_VNODE_H_ */
end_comment

end_unit

