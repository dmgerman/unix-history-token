begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_REFCOUNT_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_REFCOUNT_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_empty
empty|#include_next<sys/refcount.h>
end_empty

begin_include
include|#
directive|include
file|<sys/list.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * If the reference is held only by the calling function and not any  * particular object, use FTAG (which is a string) for the holder_tag.  * Otherwise, use the object that holds the reference.  */
define|#
directive|define
name|FTAG
value|((char *)__func__)
if|#
directive|if
name|defined
argument_list|(
name|DEBUG
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|_KERNEL
argument_list|)
typedef|typedef
struct|struct
name|reference
block|{
name|list_node_t
name|ref_link
decl_stmt|;
name|void
modifier|*
name|ref_holder
decl_stmt|;
name|uint64_t
name|ref_number
decl_stmt|;
name|uint8_t
modifier|*
name|ref_removed
decl_stmt|;
block|}
name|reference_t
typedef|;
typedef|typedef
struct|struct
name|refcount
block|{
name|kmutex_t
name|rc_mtx
decl_stmt|;
name|list_t
name|rc_list
decl_stmt|;
name|list_t
name|rc_removed
decl_stmt|;
name|int64_t
name|rc_count
decl_stmt|;
name|int64_t
name|rc_removed_count
decl_stmt|;
block|}
name|refcount_t
typedef|;
comment|/* Note: refcount_t should be initialized to zero before use. */
name|void
name|refcount_create
parameter_list|(
name|refcount_t
modifier|*
name|rc
parameter_list|)
function_decl|;
name|void
name|refcount_destroy
parameter_list|(
name|refcount_t
modifier|*
name|rc
parameter_list|)
function_decl|;
name|void
name|refcount_destroy_many
parameter_list|(
name|refcount_t
modifier|*
name|rc
parameter_list|,
name|uint64_t
name|number
parameter_list|)
function_decl|;
name|int
name|refcount_is_zero
parameter_list|(
name|refcount_t
modifier|*
name|rc
parameter_list|)
function_decl|;
name|int64_t
name|refcount_count
parameter_list|(
name|refcount_t
modifier|*
name|rc
parameter_list|)
function_decl|;
name|int64_t
name|refcount_add
parameter_list|(
name|refcount_t
modifier|*
name|rc
parameter_list|,
name|void
modifier|*
name|holder_tag
parameter_list|)
function_decl|;
name|int64_t
name|refcount_remove
parameter_list|(
name|refcount_t
modifier|*
name|rc
parameter_list|,
name|void
modifier|*
name|holder_tag
parameter_list|)
function_decl|;
name|int64_t
name|refcount_add_many
parameter_list|(
name|refcount_t
modifier|*
name|rc
parameter_list|,
name|uint64_t
name|number
parameter_list|,
name|void
modifier|*
name|holder_tag
parameter_list|)
function_decl|;
name|int64_t
name|refcount_remove_many
parameter_list|(
name|refcount_t
modifier|*
name|rc
parameter_list|,
name|uint64_t
name|number
parameter_list|,
name|void
modifier|*
name|holder_tag
parameter_list|)
function_decl|;
name|void
name|refcount_sysinit
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|refcount_fini
parameter_list|(
name|void
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* DEBUG */
typedef|typedef
struct|struct
name|refcount
block|{
name|uint64_t
name|rc_count
decl_stmt|;
block|}
name|refcount_t
typedef|;
define|#
directive|define
name|refcount_create
parameter_list|(
name|rc
parameter_list|)
value|((rc)->rc_count = 0)
define|#
directive|define
name|refcount_destroy
parameter_list|(
name|rc
parameter_list|)
value|((rc)->rc_count = 0)
define|#
directive|define
name|refcount_destroy_many
parameter_list|(
name|rc
parameter_list|,
name|number
parameter_list|)
value|((rc)->rc_count = 0)
define|#
directive|define
name|refcount_is_zero
parameter_list|(
name|rc
parameter_list|)
value|((rc)->rc_count == 0)
define|#
directive|define
name|refcount_count
parameter_list|(
name|rc
parameter_list|)
value|((rc)->rc_count)
define|#
directive|define
name|refcount_add
parameter_list|(
name|rc
parameter_list|,
name|holder
parameter_list|)
value|atomic_add_64_nv(&(rc)->rc_count, 1)
define|#
directive|define
name|refcount_remove
parameter_list|(
name|rc
parameter_list|,
name|holder
parameter_list|)
value|atomic_add_64_nv(&(rc)->rc_count, -1)
define|#
directive|define
name|refcount_add_many
parameter_list|(
name|rc
parameter_list|,
name|number
parameter_list|,
name|holder
parameter_list|)
define|\
value|atomic_add_64_nv(&(rc)->rc_count, number)
define|#
directive|define
name|refcount_remove_many
parameter_list|(
name|rc
parameter_list|,
name|number
parameter_list|,
name|holder
parameter_list|)
define|\
value|atomic_add_64_nv(&(rc)->rc_count, -number)
define|#
directive|define
name|refcount_sysinit
parameter_list|()
define|#
directive|define
name|refcount_fini
parameter_list|()
endif|#
directive|endif
comment|/* DEBUG */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_REFCOUNT_H */
end_comment

end_unit

