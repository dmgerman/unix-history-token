begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_FS_ZFS_FUID_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_FS_ZFS_FUID_H
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/kidmap.h>
end_include

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_vfsops.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<sys/avl.h>
end_include

begin_include
include|#
directive|include
file|<sys/list.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
enum|enum
block|{
name|ZFS_OWNER
block|,
name|ZFS_GROUP
block|,
name|ZFS_ACE_USER
block|,
name|ZFS_ACE_GROUP
block|}
name|zfs_fuid_type_t
typedef|;
comment|/*  * Estimate space needed for one more fuid table entry.  * for now assume its current size + 1K  */
define|#
directive|define
name|FUID_SIZE_ESTIMATE
parameter_list|(
name|z
parameter_list|)
value|((z)->z_fuid_size + (SPA_MINBLOCKSIZE<< 1))
define|#
directive|define
name|FUID_INDEX
parameter_list|(
name|x
parameter_list|)
value|((x)>> 32)
define|#
directive|define
name|FUID_RID
parameter_list|(
name|x
parameter_list|)
value|((x)& 0xffffffff)
define|#
directive|define
name|FUID_ENCODE
parameter_list|(
name|idx
parameter_list|,
name|rid
parameter_list|)
value|(((uint64_t)(idx)<< 32) | (rid))
comment|/*  * FUIDs cause problems for the intent log  * we need to replay the creation of the FUID,  * but we can't count on the idmapper to be around  * and during replay the FUID index may be different than  * before.  Also, if an ACL has 100 ACEs and 12 different  * domains we don't want to log 100 domain strings, but rather  * just the unique 12.  */
comment|/*  * The FUIDs in the log will index into  * domain string table and the bottom half will be the rid.  * Used for mapping ephemeral uid/gid during ACL setting to FUIDs  */
typedef|typedef
struct|struct
name|zfs_fuid
block|{
name|list_node_t
name|z_next
decl_stmt|;
name|uint64_t
name|z_id
decl_stmt|;
comment|/* uid/gid being converted to fuid */
name|uint64_t
name|z_domidx
decl_stmt|;
comment|/* index in AVL domain table */
name|uint64_t
name|z_logfuid
decl_stmt|;
comment|/* index for domain in log */
block|}
name|zfs_fuid_t
typedef|;
comment|/* list of unique domains */
typedef|typedef
struct|struct
name|zfs_fuid_domain
block|{
name|list_node_t
name|z_next
decl_stmt|;
name|uint64_t
name|z_domidx
decl_stmt|;
comment|/* AVL tree idx */
specifier|const
name|char
modifier|*
name|z_domain
decl_stmt|;
comment|/* domain string */
block|}
name|zfs_fuid_domain_t
typedef|;
comment|/*  * FUID information necessary for logging create, setattr, and setacl.  */
typedef|typedef
struct|struct
name|zfs_fuid_info
block|{
name|list_t
name|z_fuids
decl_stmt|;
name|list_t
name|z_domains
decl_stmt|;
name|uint64_t
name|z_fuid_owner
decl_stmt|;
name|uint64_t
name|z_fuid_group
decl_stmt|;
name|char
modifier|*
modifier|*
name|z_domain_table
decl_stmt|;
comment|/* Used during replay */
name|uint32_t
name|z_fuid_cnt
decl_stmt|;
comment|/* How many fuids in z_fuids */
name|uint32_t
name|z_domain_cnt
decl_stmt|;
comment|/* How many domains */
name|size_t
name|z_domain_str_sz
decl_stmt|;
comment|/* len of domain strings z_domain list */
block|}
name|zfs_fuid_info_t
typedef|;
ifdef|#
directive|ifdef
name|_KERNEL
struct_decl|struct
name|znode
struct_decl|;
specifier|extern
name|uid_t
name|zfs_fuid_map_id
parameter_list|(
name|zfsvfs_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|zfs_fuid_type_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_fuid_node_add
parameter_list|(
name|zfs_fuid_info_t
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
parameter_list|,
name|zfs_fuid_type_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_fuid_destroy
parameter_list|(
name|zfsvfs_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zfs_fuid_create_cred
parameter_list|(
name|zfsvfs_t
modifier|*
parameter_list|,
name|zfs_fuid_type_t
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|zfs_fuid_info_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zfs_fuid_create
parameter_list|(
name|zfsvfs_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|zfs_fuid_type_t
parameter_list|,
name|zfs_fuid_info_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_fuid_map_ids
parameter_list|(
name|struct
name|znode
modifier|*
name|zp
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|,
name|uid_t
modifier|*
name|uid
parameter_list|,
name|uid_t
modifier|*
name|gid
parameter_list|)
function_decl|;
specifier|extern
name|zfs_fuid_info_t
modifier|*
name|zfs_fuid_info_alloc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_fuid_info_free
parameter_list|(
name|zfs_fuid_info_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zfs_groupmember
parameter_list|(
name|zfsvfs_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|zfs_fuid_sync
parameter_list|(
name|zfsvfs_t
modifier|*
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_fuid_find_by_domain
parameter_list|(
name|zfsvfs_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|domain
parameter_list|,
name|char
modifier|*
modifier|*
name|retdomain
parameter_list|,
name|boolean_t
name|addok
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_fuid_find_by_idx
parameter_list|(
name|zfsvfs_t
modifier|*
name|zfsvfs
parameter_list|,
name|uint32_t
name|idx
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_fuid_txhold
parameter_list|(
name|zfsvfs_t
modifier|*
name|zfsvfs
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
endif|#
directive|endif
name|char
modifier|*
name|zfs_fuid_idx_domain
parameter_list|(
name|avl_tree_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
name|void
name|zfs_fuid_avl_tree_create
parameter_list|(
name|avl_tree_t
modifier|*
parameter_list|,
name|avl_tree_t
modifier|*
parameter_list|)
function_decl|;
name|uint64_t
name|zfs_fuid_table_load
parameter_list|(
name|objset_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|avl_tree_t
modifier|*
parameter_list|,
name|avl_tree_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|zfs_fuid_table_destroy
parameter_list|(
name|avl_tree_t
modifier|*
parameter_list|,
name|avl_tree_t
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_FS_ZFS_FUID_H */
end_comment

end_unit

