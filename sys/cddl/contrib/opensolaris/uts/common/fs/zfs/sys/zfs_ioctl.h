begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2012 by Delphix. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_ZFS_IOCTL_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_ZFS_IOCTL_H
end_define

begin_include
include|#
directive|include
file|<sys/cred.h>
end_include

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/zio.h>
end_include

begin_include
include|#
directive|include
file|<sys/dsl_deleg.h>
end_include

begin_include
include|#
directive|include
file|<sys/spa.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_stat.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/nvpair.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * The structures in this file are passed between userland and the  * kernel.  Userland may be running a 32-bit process, while the kernel  * is 64-bit.  Therefore, these structures need to compile the same in  * 32-bit and 64-bit.  This means not using type "long", and adding  * explicit padding so that the 32-bit structure will not be packed more  * tightly than the 64-bit structure (which requires 64-bit alignment).  */
comment|/*  * Property values for snapdir  */
define|#
directive|define
name|ZFS_SNAPDIR_HIDDEN
value|0
define|#
directive|define
name|ZFS_SNAPDIR_VISIBLE
value|1
comment|/*  * Field manipulation macros for the drr_versioninfo field of the  * send stream header.  */
comment|/*  * Header types for zfs send streams.  */
typedef|typedef
enum|enum
name|drr_headertype
block|{
name|DMU_SUBSTREAM
init|=
literal|0x1
block|,
name|DMU_COMPOUNDSTREAM
init|=
literal|0x2
block|}
name|drr_headertype_t
typedef|;
define|#
directive|define
name|DMU_GET_STREAM_HDRTYPE
parameter_list|(
name|vi
parameter_list|)
value|BF64_GET((vi), 0, 2)
define|#
directive|define
name|DMU_SET_STREAM_HDRTYPE
parameter_list|(
name|vi
parameter_list|,
name|x
parameter_list|)
value|BF64_SET((vi), 0, 2, x)
define|#
directive|define
name|DMU_GET_FEATUREFLAGS
parameter_list|(
name|vi
parameter_list|)
value|BF64_GET((vi), 2, 30)
define|#
directive|define
name|DMU_SET_FEATUREFLAGS
parameter_list|(
name|vi
parameter_list|,
name|x
parameter_list|)
value|BF64_SET((vi), 2, 30, x)
comment|/*  * Feature flags for zfs send streams (flags in drr_versioninfo)  */
define|#
directive|define
name|DMU_BACKUP_FEATURE_DEDUP
value|(0x1)
define|#
directive|define
name|DMU_BACKUP_FEATURE_DEDUPPROPS
value|(0x2)
define|#
directive|define
name|DMU_BACKUP_FEATURE_SA_SPILL
value|(0x4)
comment|/*  * Mask of all supported backup features  */
define|#
directive|define
name|DMU_BACKUP_FEATURE_MASK
value|(DMU_BACKUP_FEATURE_DEDUP | \ 		DMU_BACKUP_FEATURE_DEDUPPROPS | DMU_BACKUP_FEATURE_SA_SPILL)
comment|/* Are all features in the given flag word currently supported? */
define|#
directive|define
name|DMU_STREAM_SUPPORTED
parameter_list|(
name|x
parameter_list|)
value|(!((x)& ~DMU_BACKUP_FEATURE_MASK))
comment|/*  * The drr_versioninfo field of the dmu_replay_record has the  * following layout:  *  *	64	56	48	40	32	24	16	8	0  *	+-------+-------+-------+-------+-------+-------+-------+-------+  *  	|		reserved	|        feature-flags	    |C|S|  *	+-------+-------+-------+-------+-------+-------+-------+-------+  *  * The low order two bits indicate the header type: SUBSTREAM (0x1)  * or COMPOUNDSTREAM (0x2).  Using two bits for this is historical:  * this field used to be a version number, where the two version types  * were 1 and 2.  Using two bits for this allows earlier versions of  * the code to be able to recognize send streams that don't use any  * of the features indicated by feature flags.  */
define|#
directive|define
name|DMU_BACKUP_MAGIC
value|0x2F5bacbacULL
define|#
directive|define
name|DRR_FLAG_CLONE
value|(1<<0)
define|#
directive|define
name|DRR_FLAG_CI_DATA
value|(1<<1)
comment|/*  * flags in the drr_checksumflags field in the DRR_WRITE and  * DRR_WRITE_BYREF blocks  */
define|#
directive|define
name|DRR_CHECKSUM_DEDUP
value|(1<<0)
define|#
directive|define
name|DRR_IS_DEDUP_CAPABLE
parameter_list|(
name|flags
parameter_list|)
value|((flags)& DRR_CHECKSUM_DEDUP)
comment|/*  * zfs ioctl command structure  */
struct|struct
name|drr_begin
block|{
name|uint64_t
name|drr_magic
decl_stmt|;
name|uint64_t
name|drr_versioninfo
decl_stmt|;
comment|/* was drr_version */
name|uint64_t
name|drr_creation_time
decl_stmt|;
name|dmu_objset_type_t
name|drr_type
decl_stmt|;
name|uint32_t
name|drr_flags
decl_stmt|;
name|uint64_t
name|drr_toguid
decl_stmt|;
name|uint64_t
name|drr_fromguid
decl_stmt|;
name|char
name|drr_toname
index|[
name|MAXNAMELEN
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|drr_end
block|{
name|zio_cksum_t
name|drr_checksum
decl_stmt|;
name|uint64_t
name|drr_toguid
decl_stmt|;
block|}
struct|;
struct|struct
name|drr_object
block|{
name|uint64_t
name|drr_object
decl_stmt|;
name|dmu_object_type_t
name|drr_type
decl_stmt|;
name|dmu_object_type_t
name|drr_bonustype
decl_stmt|;
name|uint32_t
name|drr_blksz
decl_stmt|;
name|uint32_t
name|drr_bonuslen
decl_stmt|;
name|uint8_t
name|drr_checksumtype
decl_stmt|;
name|uint8_t
name|drr_compress
decl_stmt|;
name|uint8_t
name|drr_pad
index|[
literal|6
index|]
decl_stmt|;
name|uint64_t
name|drr_toguid
decl_stmt|;
comment|/* bonus content follows */
block|}
struct|;
struct|struct
name|drr_freeobjects
block|{
name|uint64_t
name|drr_firstobj
decl_stmt|;
name|uint64_t
name|drr_numobjs
decl_stmt|;
name|uint64_t
name|drr_toguid
decl_stmt|;
block|}
struct|;
struct|struct
name|drr_write
block|{
name|uint64_t
name|drr_object
decl_stmt|;
name|dmu_object_type_t
name|drr_type
decl_stmt|;
name|uint32_t
name|drr_pad
decl_stmt|;
name|uint64_t
name|drr_offset
decl_stmt|;
name|uint64_t
name|drr_length
decl_stmt|;
name|uint64_t
name|drr_toguid
decl_stmt|;
name|uint8_t
name|drr_checksumtype
decl_stmt|;
name|uint8_t
name|drr_checksumflags
decl_stmt|;
name|uint8_t
name|drr_pad2
index|[
literal|6
index|]
decl_stmt|;
name|ddt_key_t
name|drr_key
decl_stmt|;
comment|/* deduplication key */
comment|/* content follows */
block|}
struct|;
struct|struct
name|drr_free
block|{
name|uint64_t
name|drr_object
decl_stmt|;
name|uint64_t
name|drr_offset
decl_stmt|;
name|uint64_t
name|drr_length
decl_stmt|;
name|uint64_t
name|drr_toguid
decl_stmt|;
block|}
struct|;
struct|struct
name|drr_write_byref
block|{
comment|/* where to put the data */
name|uint64_t
name|drr_object
decl_stmt|;
name|uint64_t
name|drr_offset
decl_stmt|;
name|uint64_t
name|drr_length
decl_stmt|;
name|uint64_t
name|drr_toguid
decl_stmt|;
comment|/* where to find the prior copy of the data */
name|uint64_t
name|drr_refguid
decl_stmt|;
name|uint64_t
name|drr_refobject
decl_stmt|;
name|uint64_t
name|drr_refoffset
decl_stmt|;
comment|/* properties of the data */
name|uint8_t
name|drr_checksumtype
decl_stmt|;
name|uint8_t
name|drr_checksumflags
decl_stmt|;
name|uint8_t
name|drr_pad2
index|[
literal|6
index|]
decl_stmt|;
name|ddt_key_t
name|drr_key
decl_stmt|;
comment|/* deduplication key */
block|}
struct|;
struct|struct
name|drr_spill
block|{
name|uint64_t
name|drr_object
decl_stmt|;
name|uint64_t
name|drr_length
decl_stmt|;
name|uint64_t
name|drr_toguid
decl_stmt|;
name|uint64_t
name|drr_pad
index|[
literal|4
index|]
decl_stmt|;
comment|/* needed for crypto */
comment|/* spill data follows */
block|}
struct|;
typedef|typedef
struct|struct
name|dmu_replay_record
block|{
enum|enum
block|{
name|DRR_BEGIN
block|,
name|DRR_OBJECT
block|,
name|DRR_FREEOBJECTS
block|,
name|DRR_WRITE
block|,
name|DRR_FREE
block|,
name|DRR_END
block|,
name|DRR_WRITE_BYREF
block|,
name|DRR_SPILL
block|,
name|DRR_NUMTYPES
block|}
name|drr_type
enum|;
name|uint32_t
name|drr_payloadlen
decl_stmt|;
union|union
block|{
name|struct
name|drr_begin
name|drr_begin
decl_stmt|;
name|struct
name|drr_end
name|drr_end
decl_stmt|;
name|struct
name|drr_object
name|drr_object
decl_stmt|;
name|struct
name|drr_freeobjects
name|drr_freeobjects
decl_stmt|;
name|struct
name|drr_write
name|drr_write
decl_stmt|;
name|struct
name|drr_free
name|drr_free
decl_stmt|;
name|struct
name|drr_write_byref
name|drr_write_byref
decl_stmt|;
name|struct
name|drr_spill
name|drr_spill
decl_stmt|;
block|}
name|drr_u
union|;
block|}
name|dmu_replay_record_t
typedef|;
comment|/* diff record range types */
typedef|typedef
enum|enum
name|diff_type
block|{
name|DDR_NONE
init|=
literal|0x1
block|,
name|DDR_INUSE
init|=
literal|0x2
block|,
name|DDR_FREE
init|=
literal|0x4
block|}
name|diff_type_t
typedef|;
comment|/*  * The diff reports back ranges of free or in-use objects.  */
typedef|typedef
struct|struct
name|dmu_diff_record
block|{
name|uint64_t
name|ddr_type
decl_stmt|;
name|uint64_t
name|ddr_first
decl_stmt|;
name|uint64_t
name|ddr_last
decl_stmt|;
block|}
name|dmu_diff_record_t
typedef|;
typedef|typedef
struct|struct
name|zinject_record
block|{
name|uint64_t
name|zi_objset
decl_stmt|;
name|uint64_t
name|zi_object
decl_stmt|;
name|uint64_t
name|zi_start
decl_stmt|;
name|uint64_t
name|zi_end
decl_stmt|;
name|uint64_t
name|zi_guid
decl_stmt|;
name|uint32_t
name|zi_level
decl_stmt|;
name|uint32_t
name|zi_error
decl_stmt|;
name|uint64_t
name|zi_type
decl_stmt|;
name|uint32_t
name|zi_freq
decl_stmt|;
name|uint32_t
name|zi_failfast
decl_stmt|;
name|char
name|zi_func
index|[
name|MAXNAMELEN
index|]
decl_stmt|;
name|uint32_t
name|zi_iotype
decl_stmt|;
name|int32_t
name|zi_duration
decl_stmt|;
name|uint64_t
name|zi_timer
decl_stmt|;
name|uint32_t
name|zi_cmd
decl_stmt|;
name|uint32_t
name|zi_pad
decl_stmt|;
block|}
name|zinject_record_t
typedef|;
define|#
directive|define
name|ZINJECT_NULL
value|0x1
define|#
directive|define
name|ZINJECT_FLUSH_ARC
value|0x2
define|#
directive|define
name|ZINJECT_UNLOAD_SPA
value|0x4
typedef|typedef
enum|enum
name|zinject_type
block|{
name|ZINJECT_UNINITIALIZED
block|,
name|ZINJECT_DATA_FAULT
block|,
name|ZINJECT_DEVICE_FAULT
block|,
name|ZINJECT_LABEL_FAULT
block|,
name|ZINJECT_IGNORED_WRITES
block|,
name|ZINJECT_PANIC
block|,
name|ZINJECT_DELAY_IO
block|, }
name|zinject_type_t
typedef|;
typedef|typedef
struct|struct
name|zfs_share
block|{
name|uint64_t
name|z_exportdata
decl_stmt|;
name|uint64_t
name|z_sharedata
decl_stmt|;
name|uint64_t
name|z_sharetype
decl_stmt|;
comment|/* 0 = share, 1 = unshare */
name|uint64_t
name|z_sharemax
decl_stmt|;
comment|/* max length of share string */
block|}
name|zfs_share_t
typedef|;
comment|/*  * ZFS file systems may behave the usual, POSIX-compliant way, where  * name lookups are case-sensitive.  They may also be set up so that  * all the name lookups are case-insensitive, or so that only some  * lookups, the ones that set an FIGNORECASE flag, are case-insensitive.  */
typedef|typedef
enum|enum
name|zfs_case
block|{
name|ZFS_CASE_SENSITIVE
block|,
name|ZFS_CASE_INSENSITIVE
block|,
name|ZFS_CASE_MIXED
block|}
name|zfs_case_t
typedef|;
typedef|typedef
struct|struct
name|zfs_cmd
block|{
name|char
name|zc_name
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
comment|/* name of pool or dataset */
name|uint64_t
name|zc_nvlist_src
decl_stmt|;
comment|/* really (char *) */
name|uint64_t
name|zc_nvlist_src_size
decl_stmt|;
name|uint64_t
name|zc_nvlist_dst
decl_stmt|;
comment|/* really (char *) */
name|uint64_t
name|zc_nvlist_dst_size
decl_stmt|;
name|boolean_t
name|zc_nvlist_dst_filled
decl_stmt|;
comment|/* put an nvlist in dst? */
name|int
name|zc_pad2
decl_stmt|;
comment|/* 	 * The following members are for legacy ioctls which haven't been 	 * converted to the new method. 	 */
name|uint64_t
name|zc_history
decl_stmt|;
comment|/* really (char *) */
name|char
name|zc_value
index|[
name|MAXPATHLEN
operator|*
literal|2
index|]
decl_stmt|;
name|char
name|zc_string
index|[
name|MAXNAMELEN
index|]
decl_stmt|;
name|uint64_t
name|zc_guid
decl_stmt|;
name|uint64_t
name|zc_nvlist_conf
decl_stmt|;
comment|/* really (char *) */
name|uint64_t
name|zc_nvlist_conf_size
decl_stmt|;
name|uint64_t
name|zc_cookie
decl_stmt|;
name|uint64_t
name|zc_objset_type
decl_stmt|;
name|uint64_t
name|zc_perm_action
decl_stmt|;
name|uint64_t
name|zc_history_len
decl_stmt|;
name|uint64_t
name|zc_history_offset
decl_stmt|;
name|uint64_t
name|zc_obj
decl_stmt|;
name|uint64_t
name|zc_iflags
decl_stmt|;
comment|/* internal to zfs(7fs) */
name|zfs_share_t
name|zc_share
decl_stmt|;
name|uint64_t
name|zc_jailid
decl_stmt|;
name|dmu_objset_stats_t
name|zc_objset_stats
decl_stmt|;
name|struct
name|drr_begin
name|zc_begin_record
decl_stmt|;
name|zinject_record_t
name|zc_inject_record
decl_stmt|;
name|boolean_t
name|zc_defer_destroy
decl_stmt|;
name|boolean_t
name|zc_temphold
decl_stmt|;
name|uint64_t
name|zc_action_handle
decl_stmt|;
name|int
name|zc_cleanup_fd
decl_stmt|;
name|uint8_t
name|zc_simple
decl_stmt|;
name|uint8_t
name|zc_pad
index|[
literal|3
index|]
decl_stmt|;
comment|/* alignment */
name|uint64_t
name|zc_sendobj
decl_stmt|;
name|uint64_t
name|zc_fromobj
decl_stmt|;
name|uint64_t
name|zc_createtxg
decl_stmt|;
name|zfs_stat_t
name|zc_stat
decl_stmt|;
block|}
name|zfs_cmd_t
typedef|;
typedef|typedef
struct|struct
name|zfs_useracct
block|{
name|char
name|zu_domain
index|[
literal|256
index|]
decl_stmt|;
name|uid_t
name|zu_rid
decl_stmt|;
name|uint32_t
name|zu_pad
decl_stmt|;
name|uint64_t
name|zu_space
decl_stmt|;
block|}
name|zfs_useracct_t
typedef|;
define|#
directive|define
name|ZFSDEV_MAX_MINOR
value|(1<< 16)
define|#
directive|define
name|ZFS_MIN_MINOR
value|(ZFSDEV_MAX_MINOR + 1)
define|#
directive|define
name|ZPOOL_EXPORT_AFTER_SPLIT
value|0x1
ifdef|#
directive|ifdef
name|_KERNEL
typedef|typedef
struct|struct
name|zfs_creat
block|{
name|nvlist_t
modifier|*
name|zct_zplprops
decl_stmt|;
name|nvlist_t
modifier|*
name|zct_props
decl_stmt|;
block|}
name|zfs_creat_t
typedef|;
specifier|extern
name|int
name|zfs_secpolicy_snapshot_perms
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_secpolicy_rename_perms
parameter_list|(
specifier|const
name|char
modifier|*
name|from
parameter_list|,
specifier|const
name|char
modifier|*
name|to
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_secpolicy_destroy_perms
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_busy
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_unmount_snap
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_destroy_unmount_origin
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/*  * ZFS minor numbers can refer to either a control device instance or  * a zvol. Depending on the value of zss_type, zss_data points to either  * a zvol_state_t or a zfs_onexit_t.  */
enum|enum
name|zfs_soft_state_type
block|{
name|ZSST_ZVOL
block|,
name|ZSST_CTLDEV
block|}
enum|;
typedef|typedef
struct|struct
name|zfs_soft_state
block|{
name|enum
name|zfs_soft_state_type
name|zss_type
decl_stmt|;
name|void
modifier|*
name|zss_data
decl_stmt|;
block|}
name|zfs_soft_state_t
typedef|;
specifier|extern
name|void
modifier|*
name|zfsdev_get_soft_state
parameter_list|(
name|minor_t
name|minor
parameter_list|,
name|enum
name|zfs_soft_state_type
name|which
parameter_list|)
function_decl|;
specifier|extern
name|minor_t
name|zfsdev_minor_alloc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|zfsdev_state
decl_stmt|;
endif|#
directive|endif
comment|/* _KERNEL */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_ZFS_IOCTL_H */
end_comment

end_unit

