begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * This file and its contents are supplied under the terms of the  * Common Development and Distribution License ("CDDL"), version 1.0.  * You may only use this file in accordance with the terms of version  * 1.0 of the CDDL.  *  * A full copy of the text of the CDDL should have accompanied this  * source.  A copy of the CDDL is also available via the Internet at  * http://www.illumos.org/license/CDDL.  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2013, 2017 by Delphix. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_MULTILIST_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_MULTILIST_H
end_define

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|list_node_t
name|multilist_node_t
typedef|;
typedef|typedef
name|struct
name|multilist
name|multilist_t
typedef|;
typedef|typedef
name|struct
name|multilist_sublist
name|multilist_sublist_t
typedef|;
typedef|typedef
name|unsigned
name|int
name|multilist_sublist_index_func_t
parameter_list|(
name|multilist_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
struct|struct
name|multilist_sublist
block|{
comment|/* 	 * The mutex used internally to implement thread safe insertions 	 * and removals to this individual sublist. It can also be locked 	 * by a consumer using multilist_sublist_{lock,unlock}, which is 	 * useful if a consumer needs to traverse the list in a thread 	 * safe manner. 	 */
name|kmutex_t
name|mls_lock
decl_stmt|;
comment|/* 	 * The actual list object containing all objects in this sublist. 	 */
name|list_t
name|mls_list
decl_stmt|;
comment|/* 	 * Pad to cache line (64 bytes), in an effort to try and prevent 	 * cache line contention. 	 */
name|uint8_t
name|mls_pad
index|[
literal|24
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|multilist
block|{
comment|/* 	 * This is used to get to the multilist_node_t structure given 	 * the void *object contained on the list. 	 */
name|size_t
name|ml_offset
decl_stmt|;
comment|/* 	 * The number of sublists used internally by this multilist. 	 */
name|uint64_t
name|ml_num_sublists
decl_stmt|;
comment|/* 	 * The array of pointers to the actual sublists. 	 */
name|multilist_sublist_t
modifier|*
name|ml_sublists
decl_stmt|;
comment|/* 	 * Pointer to function which determines the sublist to use 	 * when inserting and removing objects from this multilist. 	 * Please see the comment above multilist_create for details. 	 */
name|multilist_sublist_index_func_t
modifier|*
name|ml_index_func
decl_stmt|;
block|}
struct|;
name|void
name|multilist_destroy
parameter_list|(
name|multilist_t
modifier|*
parameter_list|)
function_decl|;
name|multilist_t
modifier|*
name|multilist_create
parameter_list|(
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|multilist_sublist_index_func_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|multilist_insert
parameter_list|(
name|multilist_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|multilist_remove
parameter_list|(
name|multilist_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|multilist_is_empty
parameter_list|(
name|multilist_t
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|int
name|multilist_get_num_sublists
parameter_list|(
name|multilist_t
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|int
name|multilist_get_random_index
parameter_list|(
name|multilist_t
modifier|*
parameter_list|)
function_decl|;
name|multilist_sublist_t
modifier|*
name|multilist_sublist_lock
parameter_list|(
name|multilist_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|multilist_sublist_t
modifier|*
name|multilist_sublist_lock_obj
parameter_list|(
name|multilist_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|multilist_sublist_unlock
parameter_list|(
name|multilist_sublist_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|multilist_sublist_insert_head
parameter_list|(
name|multilist_sublist_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|multilist_sublist_insert_tail
parameter_list|(
name|multilist_sublist_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|multilist_sublist_move_forward
parameter_list|(
name|multilist_sublist_t
modifier|*
name|mls
parameter_list|,
name|void
modifier|*
name|obj
parameter_list|)
function_decl|;
name|void
name|multilist_sublist_remove
parameter_list|(
name|multilist_sublist_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|multilist_sublist_head
parameter_list|(
name|multilist_sublist_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|multilist_sublist_tail
parameter_list|(
name|multilist_sublist_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|multilist_sublist_next
parameter_list|(
name|multilist_sublist_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|multilist_sublist_prev
parameter_list|(
name|multilist_sublist_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|multilist_link_init
parameter_list|(
name|multilist_node_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|multilist_link_active
parameter_list|(
name|multilist_node_t
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_MULTILIST_H */
end_comment

end_unit

