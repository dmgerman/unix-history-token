begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2012, 2014 by Delphix. All rights reserved.  * Copyright 2011 Nexenta Systems, Inc. All rights reserved.  * Copyright (c) 2013, Joyent, Inc. All rights reserved.  * Copyright (c) 2014 Integros [integros.com]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DMU_SEND_H
end_ifndef

begin_define
define|#
directive|define
name|_DMU_SEND_H
end_define

begin_include
include|#
directive|include
file|<sys/spa.h>
end_include

begin_struct_decl
struct_decl|struct
name|vnode
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|dsl_dataset
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|drr_begin
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|avl_tree
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|dmu_replay_record
struct_decl|;
end_struct_decl

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|recv_clone_name
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|dmu_send
parameter_list|(
specifier|const
name|char
modifier|*
name|tosnap
parameter_list|,
specifier|const
name|char
modifier|*
name|fromsnap
parameter_list|,
name|boolean_t
name|embedok
parameter_list|,
name|boolean_t
name|large_block_ok
parameter_list|,
name|boolean_t
name|compressok
parameter_list|,
name|int
name|outfd
parameter_list|,
name|uint64_t
name|resumeobj
parameter_list|,
name|uint64_t
name|resumeoff
parameter_list|,
ifdef|#
directive|ifdef
name|illumos
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|offset_t
modifier|*
name|off
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|struct
name|file
modifier|*
name|fp
decl_stmt|,
name|offset_t
modifier|*
name|off
decl_stmt|);
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|dmu_send_estimate
parameter_list|(
name|struct
name|dsl_dataset
modifier|*
name|ds
parameter_list|,
name|struct
name|dsl_dataset
modifier|*
name|fromds
parameter_list|,
name|boolean_t
name|stream_compressed
parameter_list|,
name|uint64_t
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dmu_send_estimate_from_txg
parameter_list|(
name|struct
name|dsl_dataset
modifier|*
name|ds
parameter_list|,
name|uint64_t
name|fromtxg
parameter_list|,
name|boolean_t
name|stream_compressed
parameter_list|,
name|uint64_t
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dmu_send_obj
parameter_list|(
specifier|const
name|char
modifier|*
name|pool
parameter_list|,
name|uint64_t
name|tosnap
parameter_list|,
name|uint64_t
name|fromsnap
parameter_list|,
name|boolean_t
name|embedok
parameter_list|,
name|boolean_t
name|large_block_ok
parameter_list|,
name|boolean_t
name|compressok
parameter_list|,
ifdef|#
directive|ifdef
name|illumos
name|int
name|outfd
parameter_list|,
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|offset_t
modifier|*
name|off
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|int
name|outfd
decl_stmt|, struct
name|file
modifier|*
name|fp
decl_stmt|,
name|offset_t
modifier|*
name|off
decl_stmt|);
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
struct|struct
name|dmu_recv_cookie
block|{
name|struct
name|dsl_dataset
modifier|*
name|drc_ds
decl_stmt|;
name|struct
name|dmu_replay_record
modifier|*
name|drc_drr_begin
decl_stmt|;
name|struct
name|drr_begin
modifier|*
name|drc_drrb
decl_stmt|;
specifier|const
name|char
modifier|*
name|drc_tofs
decl_stmt|;
specifier|const
name|char
modifier|*
name|drc_tosnap
decl_stmt|;
name|boolean_t
name|drc_newfs
decl_stmt|;
name|boolean_t
name|drc_byteswap
decl_stmt|;
name|boolean_t
name|drc_force
decl_stmt|;
name|boolean_t
name|drc_resumable
decl_stmt|;
name|struct
name|avl_tree
modifier|*
name|drc_guid_to_ds_map
decl_stmt|;
name|zio_cksum_t
name|drc_cksum
decl_stmt|;
name|uint64_t
name|drc_newsnapobj
decl_stmt|;
name|void
modifier|*
name|drc_owner
decl_stmt|;
name|cred_t
modifier|*
name|drc_cred
decl_stmt|;
block|}
name|dmu_recv_cookie_t
typedef|;
end_typedef

begin_function_decl
name|int
name|dmu_recv_begin
parameter_list|(
name|char
modifier|*
name|tofs
parameter_list|,
name|char
modifier|*
name|tosnap
parameter_list|,
name|struct
name|dmu_replay_record
modifier|*
name|drr_begin
parameter_list|,
name|boolean_t
name|force
parameter_list|,
name|boolean_t
name|resumable
parameter_list|,
name|char
modifier|*
name|origin
parameter_list|,
name|dmu_recv_cookie_t
modifier|*
name|drc
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|illumos
end_ifdef

begin_decl_stmt
name|int
name|dmu_recv_stream
argument_list|(
name|dmu_recv_cookie_t
operator|*
name|drc
argument_list|,
expr|struct
name|vnode
operator|*
name|vp
argument_list|,
name|offset_t
operator|*
name|voffp
argument_list|,
else|#
directive|else
name|int
name|dmu_recv_stream
argument_list|(
argument|dmu_recv_cookie_t *drc
argument_list|,
argument|struct file *fp
argument_list|,
argument|offset_t *voffp
argument_list|,
endif|#
directive|endif
argument|int cleanup_fd
argument_list|,
argument|uint64_t *action_handlep
argument_list|)
argument_list|;
name|int
name|dmu_recv_end
argument_list|(
name|dmu_recv_cookie_t
operator|*
name|drc
argument_list|,
name|void
operator|*
name|owner
argument_list|)
argument_list|;
name|boolean_t
name|dmu_objset_is_receiving
argument_list|(
name|objset_t
operator|*
name|os
argument_list|)
argument_list|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DMU_SEND_H */
end_comment

end_unit

