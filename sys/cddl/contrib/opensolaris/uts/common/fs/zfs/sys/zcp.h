begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * This file and its contents are supplied under the terms of the  * Common Development and Distribution License ("CDDL"), version 1.0.  * You may only use this file in accordance with the terms of version  * 1.0 of the CDDL.  *  * A full copy of the text of the CDDL should have accompanied this  * source.  A copy of the CDDL is also available via the Internet at  * http://www.illumos.org/license/CDDL.  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2016, 2017 by Delphix. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_ZCP_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_ZCP_H
end_define

begin_include
include|#
directive|include
file|<sys/dmu_tx.h>
end_include

begin_include
include|#
directive|include
file|<sys/dsl_pool.h>
end_include

begin_include
include|#
directive|include
file|"lua.h"
end_include

begin_include
include|#
directive|include
file|"lualib.h"
end_include

begin_include
include|#
directive|include
file|"lauxlib.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|ZCP_RUN_INFO_KEY
value|"runinfo"
specifier|extern
name|uint64_t
name|zfs_lua_max_instrlimit
decl_stmt|;
specifier|extern
name|uint64_t
name|zfs_lua_max_memlimit
decl_stmt|;
name|int
name|zcp_argerror
parameter_list|(
name|lua_State
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|zcp_eval
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
parameter_list|,
name|nvpair_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zcp_load_list_lib
parameter_list|(
name|lua_State
modifier|*
parameter_list|)
function_decl|;
name|int
name|zcp_load_synctask_lib
parameter_list|(
name|lua_State
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
name|zcp_cleanup_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|zcp_run_info
block|{
name|dsl_pool_t
modifier|*
name|zri_pool
decl_stmt|;
comment|/* 	 * An estimate of the total ammount of space consumed by all 	 * synctasks we have successfully performed so far in this 	 * channel program. Used to generate ENOSPC errors for syncfuncs. 	 */
name|int
name|zri_space_used
decl_stmt|;
comment|/* 	 * The credentials of the thread which originally invoked the channel 	 * program. Since channel programs are always invoked from the synctask 	 * thread they should always do permissions checks against this cred 	 * rather than the 'current' thread's. 	 */
name|cred_t
modifier|*
name|zri_cred
decl_stmt|;
comment|/* 	 * The tx in which this channel program is running. 	 */
name|dmu_tx_t
modifier|*
name|zri_tx
decl_stmt|;
comment|/* 	 * The maximum number of Lua instructions the channel program is allowed 	 * to execute. If it takes longer than this it will time out. A value 	 * of 0 indicates no instruction limit. 	 */
name|uint64_t
name|zri_maxinstrs
decl_stmt|;
comment|/* 	 * The number of Lua instructions the channel program has executed. 	 */
name|uint64_t
name|zri_curinstrs
decl_stmt|;
comment|/* 	 * Boolean indicating whether or not the channel program exited 	 * because it timed out. 	 */
name|boolean_t
name|zri_timed_out
decl_stmt|;
comment|/* 	 * The currently registered cleanup function, which will be called 	 * with the stored argument if a fatal error occurs. 	 */
name|zcp_cleanup_t
modifier|*
name|zri_cleanup
decl_stmt|;
name|void
modifier|*
name|zri_cleanup_arg
decl_stmt|;
block|}
name|zcp_run_info_t
typedef|;
name|zcp_run_info_t
modifier|*
name|zcp_run_info
parameter_list|(
name|lua_State
modifier|*
parameter_list|)
function_decl|;
name|void
name|zcp_register_cleanup
parameter_list|(
name|lua_State
modifier|*
parameter_list|,
name|zcp_cleanup_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|zcp_clear_cleanup
parameter_list|(
name|lua_State
modifier|*
parameter_list|)
function_decl|;
name|void
name|zcp_cleanup
parameter_list|(
name|lua_State
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Argument parsing routines for channel program callback functions.  */
typedef|typedef
struct|struct
name|zcp_arg
block|{
comment|/* 	 * The name of this argument. For keyword arguments this is the name 	 * functions will use to set the argument. For positional arguments 	 * the name has no programatic meaning, but will appear in error 	 * messages and help output. 	 */
specifier|const
name|char
modifier|*
name|za_name
decl_stmt|;
comment|/* 	 * The Lua type this argument should have (e.g. LUA_TSTRING, 	 * LUA_TBOOLEAN) see the lua_type() function documentation for a 	 * complete list. Calling a function with an argument that does 	 * not match the expected type will result in the program terminating. 	 */
specifier|const
name|int
name|za_lua_type
decl_stmt|;
block|}
name|zcp_arg_t
typedef|;
name|void
name|zcp_parse_args
parameter_list|(
name|lua_State
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|zcp_arg_t
modifier|*
parameter_list|,
specifier|const
name|zcp_arg_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zcp_nvlist_to_lua
parameter_list|(
name|lua_State
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|zcp_dataset_hold_error
parameter_list|(
name|lua_State
modifier|*
parameter_list|,
name|dsl_pool_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|struct
name|dsl_dataset
modifier|*
name|zcp_dataset_hold
parameter_list|(
name|lua_State
modifier|*
parameter_list|,
name|dsl_pool_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
name|zcp_lib_func_t
function_decl|)
parameter_list|(
name|lua_State
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|zcp_lib_info
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|zcp_lib_func_t
modifier|*
name|func
decl_stmt|;
specifier|const
name|zcp_arg_t
name|pargs
index|[
literal|4
index|]
decl_stmt|;
specifier|const
name|zcp_arg_t
name|kwargs
index|[
literal|2
index|]
decl_stmt|;
block|}
name|zcp_lib_info_t
typedef|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_ZCP_H */
end_comment

end_unit

