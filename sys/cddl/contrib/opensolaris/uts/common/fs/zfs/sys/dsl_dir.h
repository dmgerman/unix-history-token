begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2012 by Delphix. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_DSL_DIR_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_DSL_DIR_H
end_define

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/dsl_pool.h>
end_include

begin_include
include|#
directive|include
file|<sys/dsl_synctask.h>
end_include

begin_include
include|#
directive|include
file|<sys/refcount.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|dsl_dataset
struct_decl|;
typedef|typedef
enum|enum
name|dd_used
block|{
name|DD_USED_HEAD
block|,
name|DD_USED_SNAP
block|,
name|DD_USED_CHILD
block|,
name|DD_USED_CHILD_RSRV
block|,
name|DD_USED_REFRSRV
block|,
name|DD_USED_NUM
block|}
name|dd_used_t
typedef|;
define|#
directive|define
name|DD_FLAG_USED_BREAKDOWN
value|(1<<0)
typedef|typedef
struct|struct
name|dsl_dir_phys
block|{
name|uint64_t
name|dd_creation_time
decl_stmt|;
comment|/* not actually used */
name|uint64_t
name|dd_head_dataset_obj
decl_stmt|;
name|uint64_t
name|dd_parent_obj
decl_stmt|;
name|uint64_t
name|dd_origin_obj
decl_stmt|;
name|uint64_t
name|dd_child_dir_zapobj
decl_stmt|;
comment|/* 	 * how much space our children are accounting for; for leaf 	 * datasets, == physical space used by fs + snaps 	 */
name|uint64_t
name|dd_used_bytes
decl_stmt|;
name|uint64_t
name|dd_compressed_bytes
decl_stmt|;
name|uint64_t
name|dd_uncompressed_bytes
decl_stmt|;
comment|/* Administrative quota setting */
name|uint64_t
name|dd_quota
decl_stmt|;
comment|/* Administrative reservation setting */
name|uint64_t
name|dd_reserved
decl_stmt|;
name|uint64_t
name|dd_props_zapobj
decl_stmt|;
name|uint64_t
name|dd_deleg_zapobj
decl_stmt|;
comment|/* dataset delegation permissions */
name|uint64_t
name|dd_flags
decl_stmt|;
name|uint64_t
name|dd_used_breakdown
index|[
name|DD_USED_NUM
index|]
decl_stmt|;
name|uint64_t
name|dd_clones
decl_stmt|;
comment|/* dsl_dir objects */
name|uint64_t
name|dd_pad
index|[
literal|13
index|]
decl_stmt|;
comment|/* pad out to 256 bytes for good measure */
block|}
name|dsl_dir_phys_t
typedef|;
struct|struct
name|dsl_dir
block|{
comment|/* These are immutable; no lock needed: */
name|uint64_t
name|dd_object
decl_stmt|;
name|dsl_dir_phys_t
modifier|*
name|dd_phys
decl_stmt|;
name|dmu_buf_t
modifier|*
name|dd_dbuf
decl_stmt|;
name|dsl_pool_t
modifier|*
name|dd_pool
decl_stmt|;
comment|/* protected by lock on pool's dp_dirty_dirs list */
name|txg_node_t
name|dd_dirty_link
decl_stmt|;
comment|/* protected by dp_config_rwlock */
name|dsl_dir_t
modifier|*
name|dd_parent
decl_stmt|;
comment|/* Protected by dd_lock */
name|kmutex_t
name|dd_lock
decl_stmt|;
name|list_t
name|dd_prop_cbs
decl_stmt|;
comment|/* list of dsl_prop_cb_record_t's */
name|timestruc_t
name|dd_snap_cmtime
decl_stmt|;
comment|/* last time snapshot namespace changed */
name|uint64_t
name|dd_origin_txg
decl_stmt|;
comment|/* gross estimate of space used by in-flight tx's */
name|uint64_t
name|dd_tempreserved
index|[
name|TXG_SIZE
index|]
decl_stmt|;
comment|/* amount of space we expect to write; == amount of dirty data */
name|int64_t
name|dd_space_towrite
index|[
name|TXG_SIZE
index|]
decl_stmt|;
comment|/* protected by dd_lock; keep at end of struct for better locality */
name|char
name|dd_myname
index|[
name|MAXNAMELEN
index|]
decl_stmt|;
block|}
struct|;
name|void
name|dsl_dir_rele
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|int
name|dsl_dir_hold
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_dir_t
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|tail
parameter_list|)
function_decl|;
name|int
name|dsl_dir_hold_obj
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|ddobj
parameter_list|,
specifier|const
name|char
modifier|*
name|tail
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_dir_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
name|dsl_dir_name
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
name|int
name|dsl_dir_namelen
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_dir_create_sync
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|dsl_dir_t
modifier|*
name|pds
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dir_stats
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|nvlist_t
modifier|*
name|nv
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_dir_space_available
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|dsl_dir_t
modifier|*
name|ancestor
parameter_list|,
name|int64_t
name|delta
parameter_list|,
name|int
name|ondiskonly
parameter_list|)
function_decl|;
name|void
name|dsl_dir_dirty
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dir_sync
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dsl_dir_tempreserve_space
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|uint64_t
name|mem
parameter_list|,
name|uint64_t
name|asize
parameter_list|,
name|uint64_t
name|fsize
parameter_list|,
name|uint64_t
name|usize
parameter_list|,
name|void
modifier|*
modifier|*
name|tr_cookiep
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dir_tempreserve_clear
parameter_list|(
name|void
modifier|*
name|tr_cookie
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dir_willuse_space
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|int64_t
name|space
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dir_diduse_space
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|dd_used_t
name|type
parameter_list|,
name|int64_t
name|used
parameter_list|,
name|int64_t
name|compressed
parameter_list|,
name|int64_t
name|uncompressed
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dir_transfer_space
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|int64_t
name|delta
parameter_list|,
name|dd_used_t
name|oldtype
parameter_list|,
name|dd_used_t
name|newtype
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dsl_dir_set_quota
parameter_list|(
specifier|const
name|char
modifier|*
name|ddname
parameter_list|,
name|zprop_source_t
name|source
parameter_list|,
name|uint64_t
name|quota
parameter_list|)
function_decl|;
name|int
name|dsl_dir_set_reservation
parameter_list|(
specifier|const
name|char
modifier|*
name|ddname
parameter_list|,
name|zprop_source_t
name|source
parameter_list|,
name|uint64_t
name|reservation
parameter_list|)
function_decl|;
name|int
name|dsl_dir_rename
parameter_list|(
specifier|const
name|char
modifier|*
name|oldname
parameter_list|,
specifier|const
name|char
modifier|*
name|newname
parameter_list|)
function_decl|;
name|int
name|dsl_dir_transfer_possible
parameter_list|(
name|dsl_dir_t
modifier|*
name|sdd
parameter_list|,
name|dsl_dir_t
modifier|*
name|tdd
parameter_list|,
name|uint64_t
name|space
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dir_is_clone
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|)
function_decl|;
name|void
name|dsl_dir_new_refreservation
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|struct
name|dsl_dataset
modifier|*
name|ds
parameter_list|,
name|uint64_t
name|reservation
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dir_snap_cmtime_update
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|)
function_decl|;
name|timestruc_t
name|dsl_dir_snap_cmtime
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|)
function_decl|;
name|void
name|dsl_dir_set_reservation_sync_impl
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|uint64_t
name|value
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
comment|/* internal reserved dir name */
define|#
directive|define
name|MOS_DIR_NAME
value|"$MOS"
define|#
directive|define
name|ORIGIN_DIR_NAME
value|"$ORIGIN"
define|#
directive|define
name|XLATION_DIR_NAME
value|"$XLATION"
define|#
directive|define
name|FREE_DIR_NAME
value|"$FREE"
ifdef|#
directive|ifdef
name|ZFS_DEBUG
define|#
directive|define
name|dprintf_dd
parameter_list|(
name|dd
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|do { \ 	if (zfs_flags& ZFS_DEBUG_DPRINTF) { \ 	char *__ds_name = kmem_alloc(MAXNAMELEN + strlen(MOS_DIR_NAME) + 1, \ 	    KM_SLEEP); \ 	dsl_dir_name(dd, __ds_name); \ 	dprintf("dd=%s " fmt, __ds_name, __VA_ARGS__); \ 	kmem_free(__ds_name, MAXNAMELEN + strlen(MOS_DIR_NAME) + 1); \ 	} \ _NOTE(CONSTCOND) } while (0)
else|#
directive|else
define|#
directive|define
name|dprintf_dd
parameter_list|(
name|dd
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_DSL_DIR_H */
end_comment

end_unit

