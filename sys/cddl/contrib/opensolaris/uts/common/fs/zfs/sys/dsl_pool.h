begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2013, 2017 by Delphix. All rights reserved.  * Copyright 2016 Nexenta Systems, Inc.  All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_DSL_POOL_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_DSL_POOL_H
end_define

begin_include
include|#
directive|include
file|<sys/spa.h>
end_include

begin_include
include|#
directive|include
file|<sys/txg.h>
end_include

begin_include
include|#
directive|include
file|<sys/txg_impl.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_include
include|#
directive|include
file|<sys/zio.h>
end_include

begin_include
include|#
directive|include
file|<sys/dnode.h>
end_include

begin_include
include|#
directive|include
file|<sys/ddt.h>
end_include

begin_include
include|#
directive|include
file|<sys/arc.h>
end_include

begin_include
include|#
directive|include
file|<sys/bpobj.h>
end_include

begin_include
include|#
directive|include
file|<sys/bptree.h>
end_include

begin_include
include|#
directive|include
file|<sys/rrwlock.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|objset
struct_decl|;
struct_decl|struct
name|dsl_dir
struct_decl|;
struct_decl|struct
name|dsl_dataset
struct_decl|;
struct_decl|struct
name|dsl_pool
struct_decl|;
struct_decl|struct
name|dmu_tx
struct_decl|;
struct_decl|struct
name|dsl_scan
struct_decl|;
specifier|extern
name|uint64_t
name|zfs_dirty_data_max
decl_stmt|;
specifier|extern
name|uint64_t
name|zfs_dirty_data_max_max
decl_stmt|;
specifier|extern
name|uint64_t
name|zfs_dirty_data_sync
decl_stmt|;
specifier|extern
name|int
name|zfs_dirty_data_max_percent
decl_stmt|;
specifier|extern
name|int
name|zfs_delay_min_dirty_percent
decl_stmt|;
specifier|extern
name|uint64_t
name|zfs_delay_scale
decl_stmt|;
comment|/* These macros are for indexing into the zfs_all_blkstats_t. */
define|#
directive|define
name|DMU_OT_DEFERRED
value|DMU_OT_NONE
define|#
directive|define
name|DMU_OT_OTHER
value|DMU_OT_NUMTYPES
comment|/* place holder for DMU_OT() types */
define|#
directive|define
name|DMU_OT_TOTAL
value|(DMU_OT_NUMTYPES + 1)
typedef|typedef
struct|struct
name|zfs_blkstat
block|{
name|uint64_t
name|zb_count
decl_stmt|;
name|uint64_t
name|zb_asize
decl_stmt|;
name|uint64_t
name|zb_lsize
decl_stmt|;
name|uint64_t
name|zb_psize
decl_stmt|;
name|uint64_t
name|zb_gangs
decl_stmt|;
name|uint64_t
name|zb_ditto_2_of_2_samevdev
decl_stmt|;
name|uint64_t
name|zb_ditto_2_of_3_samevdev
decl_stmt|;
name|uint64_t
name|zb_ditto_3_of_3_samevdev
decl_stmt|;
block|}
name|zfs_blkstat_t
typedef|;
typedef|typedef
struct|struct
name|zfs_all_blkstats
block|{
name|zfs_blkstat_t
name|zab_type
index|[
name|DN_MAX_LEVELS
operator|+
literal|1
index|]
index|[
name|DMU_OT_TOTAL
operator|+
literal|1
index|]
decl_stmt|;
block|}
name|zfs_all_blkstats_t
typedef|;
typedef|typedef
struct|struct
name|dsl_pool
block|{
comment|/* Immutable */
name|spa_t
modifier|*
name|dp_spa
decl_stmt|;
name|struct
name|objset
modifier|*
name|dp_meta_objset
decl_stmt|;
name|struct
name|dsl_dir
modifier|*
name|dp_root_dir
decl_stmt|;
name|struct
name|dsl_dir
modifier|*
name|dp_mos_dir
decl_stmt|;
name|struct
name|dsl_dir
modifier|*
name|dp_free_dir
decl_stmt|;
name|struct
name|dsl_dir
modifier|*
name|dp_leak_dir
decl_stmt|;
name|struct
name|dsl_dataset
modifier|*
name|dp_origin_snap
decl_stmt|;
name|uint64_t
name|dp_root_dir_obj
decl_stmt|;
name|struct
name|taskq
modifier|*
name|dp_vnrele_taskq
decl_stmt|;
comment|/* No lock needed - sync context only */
name|blkptr_t
name|dp_meta_rootbp
decl_stmt|;
name|uint64_t
name|dp_tmp_userrefs_obj
decl_stmt|;
name|bpobj_t
name|dp_free_bpobj
decl_stmt|;
name|uint64_t
name|dp_bptree_obj
decl_stmt|;
name|uint64_t
name|dp_empty_bpobj
decl_stmt|;
name|struct
name|dsl_scan
modifier|*
name|dp_scan
decl_stmt|;
comment|/* Uses dp_lock */
name|kmutex_t
name|dp_lock
decl_stmt|;
name|kcondvar_t
name|dp_spaceavail_cv
decl_stmt|;
name|uint64_t
name|dp_dirty_pertxg
index|[
name|TXG_SIZE
index|]
decl_stmt|;
name|uint64_t
name|dp_dirty_total
decl_stmt|;
name|uint64_t
name|dp_long_free_dirty_pertxg
index|[
name|TXG_SIZE
index|]
decl_stmt|;
name|uint64_t
name|dp_mos_used_delta
decl_stmt|;
name|uint64_t
name|dp_mos_compressed_delta
decl_stmt|;
name|uint64_t
name|dp_mos_uncompressed_delta
decl_stmt|;
comment|/* 	 * Time of most recently scheduled (furthest in the future) 	 * wakeup for delayed transactions. 	 */
name|hrtime_t
name|dp_last_wakeup
decl_stmt|;
comment|/* Has its own locking */
name|tx_state_t
name|dp_tx
decl_stmt|;
name|txg_list_t
name|dp_dirty_datasets
decl_stmt|;
name|txg_list_t
name|dp_dirty_zilogs
decl_stmt|;
name|txg_list_t
name|dp_dirty_dirs
decl_stmt|;
name|txg_list_t
name|dp_sync_tasks
decl_stmt|;
name|taskq_t
modifier|*
name|dp_sync_taskq
decl_stmt|;
name|taskq_t
modifier|*
name|dp_zil_clean_taskq
decl_stmt|;
comment|/* 	 * Protects administrative changes (properties, namespace) 	 * 	 * It is only held for write in syncing context.  Therefore 	 * syncing context does not need to ever have it for read, since 	 * nobody else could possibly have it for write. 	 */
name|rrwlock_t
name|dp_config_rwlock
decl_stmt|;
name|zfs_all_blkstats_t
modifier|*
name|dp_blkstats
decl_stmt|;
block|}
name|dsl_pool_t
typedef|;
name|int
name|dsl_pool_init
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|dsl_pool_t
modifier|*
modifier|*
name|dpp
parameter_list|)
function_decl|;
name|int
name|dsl_pool_open
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|)
function_decl|;
name|void
name|dsl_pool_close
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|)
function_decl|;
name|dsl_pool_t
modifier|*
name|dsl_pool_create
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|nvlist_t
modifier|*
name|zplprops
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
name|void
name|dsl_pool_sync
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
name|void
name|dsl_pool_sync_done
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
name|int
name|dsl_pool_sync_context
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_pool_adjustedsize
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|boolean_t
name|netfree
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_pool_adjustedfree
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|boolean_t
name|netfree
parameter_list|)
function_decl|;
name|void
name|dsl_pool_dirty_space
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|int64_t
name|space
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_pool_undirty_space
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|int64_t
name|space
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
name|void
name|dsl_free
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bpp
parameter_list|)
function_decl|;
name|void
name|dsl_free_sync
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bpp
parameter_list|)
function_decl|;
name|void
name|dsl_pool_create_origin
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_pool_upgrade_clones
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_pool_upgrade_dir_clones
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_pool_mos_diduse_space
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|int64_t
name|used
parameter_list|,
name|int64_t
name|comp
parameter_list|,
name|int64_t
name|uncomp
parameter_list|)
function_decl|;
name|void
name|dsl_pool_config_enter
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|void
name|dsl_pool_config_enter_prio
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|void
name|dsl_pool_config_exit
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_pool_config_held
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_pool_config_held_writer
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_pool_need_dirty_delay
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|)
function_decl|;
name|taskq_t
modifier|*
name|dsl_pool_vnrele_taskq
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|)
function_decl|;
name|int
name|dsl_pool_user_hold
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|dsobj
parameter_list|,
specifier|const
name|char
modifier|*
name|tag
parameter_list|,
name|uint64_t
name|now
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dsl_pool_user_release
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|dsobj
parameter_list|,
specifier|const
name|char
modifier|*
name|tag
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_pool_clean_tmp_userrefs
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|)
function_decl|;
name|int
name|dsl_pool_open_special_dir
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|dsl_dir_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
name|dsl_pool_hold
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_pool_t
modifier|*
modifier|*
name|dp
parameter_list|)
function_decl|;
name|void
name|dsl_pool_rele
parameter_list|(
name|dsl_pool_t
modifier|*
name|dp
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_DSL_POOL_H */
end_comment

end_unit

