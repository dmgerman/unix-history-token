begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ZIO_H
end_ifndef

begin_define
define|#
directive|define
name|_ZIO_H
end_define

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_include
include|#
directive|include
file|<sys/spa.h>
end_include

begin_include
include|#
directive|include
file|<sys/txg.h>
end_include

begin_include
include|#
directive|include
file|<sys/avl.h>
end_include

begin_include
include|#
directive|include
file|<sys/fs/zfs.h>
end_include

begin_include
include|#
directive|include
file|<sys/zio_impl.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|ZBT_MAGIC
value|0x210da7ab10c7a11ULL
comment|/* zio data bloc tail */
typedef|typedef
struct|struct
name|zio_block_tail
block|{
name|uint64_t
name|zbt_magic
decl_stmt|;
comment|/* for validation, endianness	*/
name|zio_cksum_t
name|zbt_cksum
decl_stmt|;
comment|/* 256-bit checksum		*/
block|}
name|zio_block_tail_t
typedef|;
comment|/*  * Gang block headers are self-checksumming and contain an array  * of block pointers.  */
define|#
directive|define
name|SPA_GANGBLOCKSIZE
value|SPA_MINBLOCKSIZE
define|#
directive|define
name|SPA_GBH_NBLKPTRS
value|((SPA_GANGBLOCKSIZE - \ 	sizeof (zio_block_tail_t)) / sizeof (blkptr_t))
define|#
directive|define
name|SPA_GBH_FILLER
value|((SPA_GANGBLOCKSIZE - \ 	sizeof (zio_block_tail_t) - \ 	(SPA_GBH_NBLKPTRS * sizeof (blkptr_t))) /\ 	sizeof (uint64_t))
typedef|typedef
struct|struct
name|zio_gbh
block|{
name|blkptr_t
name|zg_blkptr
index|[
name|SPA_GBH_NBLKPTRS
index|]
decl_stmt|;
name|uint64_t
name|zg_filler
index|[
name|SPA_GBH_FILLER
index|]
decl_stmt|;
name|zio_block_tail_t
name|zg_tail
decl_stmt|;
block|}
name|zio_gbh_phys_t
typedef|;
enum|enum
name|zio_checksum
block|{
name|ZIO_CHECKSUM_INHERIT
init|=
literal|0
block|,
name|ZIO_CHECKSUM_ON
block|,
name|ZIO_CHECKSUM_OFF
block|,
name|ZIO_CHECKSUM_LABEL
block|,
name|ZIO_CHECKSUM_GANG_HEADER
block|,
name|ZIO_CHECKSUM_ZILOG
block|,
name|ZIO_CHECKSUM_FLETCHER_2
block|,
name|ZIO_CHECKSUM_FLETCHER_4
block|,
name|ZIO_CHECKSUM_SHA256
block|,
name|ZIO_CHECKSUM_FUNCTIONS
block|}
enum|;
define|#
directive|define
name|ZIO_CHECKSUM_ON_VALUE
value|ZIO_CHECKSUM_FLETCHER_4
define|#
directive|define
name|ZIO_CHECKSUM_DEFAULT
value|ZIO_CHECKSUM_ON
enum|enum
name|zio_compress
block|{
name|ZIO_COMPRESS_INHERIT
init|=
literal|0
block|,
name|ZIO_COMPRESS_ON
block|,
name|ZIO_COMPRESS_OFF
block|,
name|ZIO_COMPRESS_LZJB
block|,
name|ZIO_COMPRESS_EMPTY
block|,
name|ZIO_COMPRESS_GZIP_1
block|,
name|ZIO_COMPRESS_GZIP_2
block|,
name|ZIO_COMPRESS_GZIP_3
block|,
name|ZIO_COMPRESS_GZIP_4
block|,
name|ZIO_COMPRESS_GZIP_5
block|,
name|ZIO_COMPRESS_GZIP_6
block|,
name|ZIO_COMPRESS_GZIP_7
block|,
name|ZIO_COMPRESS_GZIP_8
block|,
name|ZIO_COMPRESS_GZIP_9
block|,
name|ZIO_COMPRESS_FUNCTIONS
block|}
enum|;
define|#
directive|define
name|ZIO_COMPRESS_ON_VALUE
value|ZIO_COMPRESS_LZJB
define|#
directive|define
name|ZIO_COMPRESS_DEFAULT
value|ZIO_COMPRESS_OFF
define|#
directive|define
name|ZIO_FAILURE_MODE_WAIT
value|0
define|#
directive|define
name|ZIO_FAILURE_MODE_CONTINUE
value|1
define|#
directive|define
name|ZIO_FAILURE_MODE_PANIC
value|2
define|#
directive|define
name|ZIO_PRIORITY_NOW
value|(zio_priority_table[0])
define|#
directive|define
name|ZIO_PRIORITY_SYNC_READ
value|(zio_priority_table[1])
define|#
directive|define
name|ZIO_PRIORITY_SYNC_WRITE
value|(zio_priority_table[2])
define|#
directive|define
name|ZIO_PRIORITY_LOG_WRITE
value|(zio_priority_table[3])
define|#
directive|define
name|ZIO_PRIORITY_CACHE_FILL
value|(zio_priority_table[4])
define|#
directive|define
name|ZIO_PRIORITY_AGG
value|(zio_priority_table[5])
define|#
directive|define
name|ZIO_PRIORITY_FREE
value|(zio_priority_table[6])
define|#
directive|define
name|ZIO_PRIORITY_ASYNC_WRITE
value|(zio_priority_table[7])
define|#
directive|define
name|ZIO_PRIORITY_ASYNC_READ
value|(zio_priority_table[8])
define|#
directive|define
name|ZIO_PRIORITY_RESILVER
value|(zio_priority_table[9])
define|#
directive|define
name|ZIO_PRIORITY_SCRUB
value|(zio_priority_table[10])
define|#
directive|define
name|ZIO_PRIORITY_TABLE_SIZE
value|11
define|#
directive|define
name|ZIO_FLAG_MUSTSUCCEED
value|0x000000
define|#
directive|define
name|ZIO_FLAG_CANFAIL
value|0x000001
define|#
directive|define
name|ZIO_FLAG_SPECULATIVE
value|0x000002
define|#
directive|define
name|ZIO_FLAG_CONFIG_WRITER
value|0x000004
define|#
directive|define
name|ZIO_FLAG_DONT_RETRY
value|0x000008
define|#
directive|define
name|ZIO_FLAG_DONT_CACHE
value|0x000010
define|#
directive|define
name|ZIO_FLAG_DONT_QUEUE
value|0x000020
define|#
directive|define
name|ZIO_FLAG_DONT_AGGREGATE
value|0x000040
define|#
directive|define
name|ZIO_FLAG_DONT_PROPAGATE
value|0x000080
define|#
directive|define
name|ZIO_FLAG_IO_BYPASS
value|0x000100
define|#
directive|define
name|ZIO_FLAG_IO_REPAIR
value|0x000200
define|#
directive|define
name|ZIO_FLAG_IO_RETRY
value|0x000400
define|#
directive|define
name|ZIO_FLAG_IO_REWRITE
value|0x000800
define|#
directive|define
name|ZIO_FLAG_SELF_HEAL
value|0x001000
define|#
directive|define
name|ZIO_FLAG_RESILVER
value|0x002000
define|#
directive|define
name|ZIO_FLAG_SCRUB
value|0x004000
define|#
directive|define
name|ZIO_FLAG_SCRUB_THREAD
value|0x008000
define|#
directive|define
name|ZIO_FLAG_PROBE
value|0x010000
define|#
directive|define
name|ZIO_FLAG_GANG_CHILD
value|0x020000
define|#
directive|define
name|ZIO_FLAG_RAW
value|0x040000
define|#
directive|define
name|ZIO_FLAG_GODFATHER
value|0x080000
define|#
directive|define
name|ZIO_FLAG_TRYHARD
value|0x100000
define|#
directive|define
name|ZIO_FLAG_GANG_INHERIT
define|\
value|(ZIO_FLAG_CANFAIL |		\ 	ZIO_FLAG_SPECULATIVE |		\ 	ZIO_FLAG_CONFIG_WRITER |	\ 	ZIO_FLAG_DONT_RETRY |		\ 	ZIO_FLAG_DONT_CACHE |		\ 	ZIO_FLAG_DONT_AGGREGATE |	\ 	ZIO_FLAG_SELF_HEAL |		\ 	ZIO_FLAG_RESILVER |		\ 	ZIO_FLAG_SCRUB |		\ 	ZIO_FLAG_SCRUB_THREAD)
define|#
directive|define
name|ZIO_FLAG_VDEV_INHERIT
define|\
value|(ZIO_FLAG_GANG_INHERIT |	\ 	ZIO_FLAG_IO_REPAIR |		\ 	ZIO_FLAG_IO_RETRY |		\ 	ZIO_FLAG_PROBE |		\ 	ZIO_FLAG_TRYHARD)
define|#
directive|define
name|ZIO_FLAG_AGG_INHERIT
define|\
value|(ZIO_FLAG_DONT_AGGREGATE |	\ 	ZIO_FLAG_IO_REPAIR |		\ 	ZIO_FLAG_SELF_HEAL |		\ 	ZIO_FLAG_RESILVER |		\ 	ZIO_FLAG_SCRUB |		\ 	ZIO_FLAG_SCRUB_THREAD)
define|#
directive|define
name|ZIO_PIPELINE_CONTINUE
value|0x100
define|#
directive|define
name|ZIO_PIPELINE_STOP
value|0x101
define|#
directive|define
name|ZIO_GANG_CHILD_FLAGS
parameter_list|(
name|zio
parameter_list|)
define|\
value|(((zio)->io_flags& ZIO_FLAG_GANG_INHERIT) |		\ 	ZIO_FLAG_GANG_CHILD | ZIO_FLAG_CANFAIL)
enum|enum
name|zio_child
block|{
name|ZIO_CHILD_VDEV
init|=
literal|0
block|,
name|ZIO_CHILD_GANG
block|,
name|ZIO_CHILD_LOGICAL
block|,
name|ZIO_CHILD_TYPES
block|}
enum|;
enum|enum
name|zio_wait_type
block|{
name|ZIO_WAIT_READY
init|=
literal|0
block|,
name|ZIO_WAIT_DONE
block|,
name|ZIO_WAIT_TYPES
block|}
enum|;
comment|/*  * We'll take the EILSEQ and ENOMSG to indicate checksum errors and  * fragmentation.  */
define|#
directive|define
name|ECKSUM
value|EILSEQ
define|#
directive|define
name|EFRAGS
value|ENOMSG
typedef|typedef
name|struct
name|zio
name|zio_t
typedef|;
typedef|typedef
name|void
name|zio_done_func_t
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|uint8_t
name|zio_priority_table
index|[
name|ZIO_PRIORITY_TABLE_SIZE
index|]
decl_stmt|;
specifier|extern
name|char
modifier|*
name|zio_type_name
index|[
name|ZIO_TYPES
index|]
decl_stmt|;
comment|/*  * A bookmark is a four-tuple<objset, object, level, blkid> that uniquely  * identifies any block in the pool.  By convention, the meta-objset (MOS)  * is objset 0, the meta-dnode is object 0, the root block (osphys_t) is  * level -1 of the meta-dnode, and intent log blocks (which are chained  * off the root block) have blkid == sequence number.  In summary:  *  *	mos is objset 0  *	meta-dnode is object 0  *	root block is<objset, 0, -1, 0>  *	intent log is<objset, 0, -1, ZIL sequence number>  *  * Note: this structure is called a bookmark because its first purpose was  * to remember where to resume a pool-wide traverse.  The absolute ordering  * for block visitation during traversal is defined in compare_bookmark().  *  * Note: this structure is passed between userland and the kernel.  * Therefore it must not change size or alignment between 32/64 bit  * compilation options.  */
typedef|typedef
struct|struct
name|zbookmark
block|{
name|uint64_t
name|zb_objset
decl_stmt|;
name|uint64_t
name|zb_object
decl_stmt|;
name|int64_t
name|zb_level
decl_stmt|;
name|uint64_t
name|zb_blkid
decl_stmt|;
block|}
name|zbookmark_t
typedef|;
typedef|typedef
struct|struct
name|zio_prop
block|{
name|enum
name|zio_checksum
name|zp_checksum
decl_stmt|;
name|enum
name|zio_compress
name|zp_compress
decl_stmt|;
name|dmu_object_type_t
name|zp_type
decl_stmt|;
name|uint8_t
name|zp_level
decl_stmt|;
name|uint8_t
name|zp_ndvas
decl_stmt|;
block|}
name|zio_prop_t
typedef|;
typedef|typedef
struct|struct
name|zio_gang_node
block|{
name|zio_gbh_phys_t
modifier|*
name|gn_gbh
decl_stmt|;
name|struct
name|zio_gang_node
modifier|*
name|gn_child
index|[
name|SPA_GBH_NBLKPTRS
index|]
decl_stmt|;
block|}
name|zio_gang_node_t
typedef|;
typedef|typedef
name|zio_t
modifier|*
name|zio_gang_issue_func_t
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|zio_gang_node_t
modifier|*
name|gn
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
typedef|typedef
name|void
name|zio_transform_func_t
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|zio_transform
block|{
name|void
modifier|*
name|zt_orig_data
decl_stmt|;
name|uint64_t
name|zt_orig_size
decl_stmt|;
name|uint64_t
name|zt_bufsize
decl_stmt|;
name|zio_transform_func_t
modifier|*
name|zt_transform
decl_stmt|;
name|struct
name|zio_transform
modifier|*
name|zt_next
decl_stmt|;
block|}
name|zio_transform_t
typedef|;
typedef|typedef
name|int
name|zio_pipe_stage_t
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
comment|/*  * The io_reexecute flags are distinct from io_flags because the child must  * be able to propagate them to the parent.  The normal io_flags are local  * to the zio, not protected by any lock, and not modifiable by children;  * the reexecute flags are protected by io_lock, modifiable by children,  * and always propagated -- even when ZIO_FLAG_DONT_PROPAGATE is set.  */
define|#
directive|define
name|ZIO_REEXECUTE_NOW
value|0x01
define|#
directive|define
name|ZIO_REEXECUTE_SUSPEND
value|0x02
typedef|typedef
struct|struct
name|zio_link
block|{
name|zio_t
modifier|*
name|zl_parent
decl_stmt|;
name|zio_t
modifier|*
name|zl_child
decl_stmt|;
name|list_node_t
name|zl_parent_node
decl_stmt|;
name|list_node_t
name|zl_child_node
decl_stmt|;
block|}
name|zio_link_t
typedef|;
struct|struct
name|zio
block|{
comment|/* Core information about this I/O */
name|zbookmark_t
name|io_bookmark
decl_stmt|;
name|zio_prop_t
name|io_prop
decl_stmt|;
name|zio_type_t
name|io_type
decl_stmt|;
name|enum
name|zio_child
name|io_child_type
decl_stmt|;
name|int
name|io_cmd
decl_stmt|;
name|uint8_t
name|io_priority
decl_stmt|;
name|uint8_t
name|io_reexecute
decl_stmt|;
name|uint8_t
name|io_state
index|[
name|ZIO_WAIT_TYPES
index|]
decl_stmt|;
name|uint64_t
name|io_txg
decl_stmt|;
name|spa_t
modifier|*
name|io_spa
decl_stmt|;
name|blkptr_t
modifier|*
name|io_bp
decl_stmt|;
name|blkptr_t
name|io_bp_copy
decl_stmt|;
name|list_t
name|io_parent_list
decl_stmt|;
name|list_t
name|io_child_list
decl_stmt|;
name|zio_link_t
modifier|*
name|io_walk_link
decl_stmt|;
name|zio_t
modifier|*
name|io_logical
decl_stmt|;
name|zio_transform_t
modifier|*
name|io_transform_stack
decl_stmt|;
comment|/* Callback info */
name|zio_done_func_t
modifier|*
name|io_ready
decl_stmt|;
name|zio_done_func_t
modifier|*
name|io_done
decl_stmt|;
name|void
modifier|*
name|io_private
decl_stmt|;
name|blkptr_t
name|io_bp_orig
decl_stmt|;
comment|/* Data represented by this I/O */
name|void
modifier|*
name|io_data
decl_stmt|;
name|uint64_t
name|io_size
decl_stmt|;
comment|/* Stuff for the vdev stack */
name|vdev_t
modifier|*
name|io_vd
decl_stmt|;
name|void
modifier|*
name|io_vsd
decl_stmt|;
name|zio_done_func_t
modifier|*
name|io_vsd_free
decl_stmt|;
name|uint64_t
name|io_offset
decl_stmt|;
name|uint64_t
name|io_deadline
decl_stmt|;
name|avl_node_t
name|io_offset_node
decl_stmt|;
name|avl_node_t
name|io_deadline_node
decl_stmt|;
name|avl_tree_t
modifier|*
name|io_vdev_tree
decl_stmt|;
comment|/* Internal pipeline state */
name|int
name|io_flags
decl_stmt|;
name|zio_stage_t
name|io_stage
decl_stmt|;
name|uint32_t
name|io_pipeline
decl_stmt|;
name|int
name|io_orig_flags
decl_stmt|;
name|zio_stage_t
name|io_orig_stage
decl_stmt|;
name|uint32_t
name|io_orig_pipeline
decl_stmt|;
name|int
name|io_error
decl_stmt|;
name|int
name|io_child_error
index|[
name|ZIO_CHILD_TYPES
index|]
decl_stmt|;
name|uint64_t
name|io_children
index|[
name|ZIO_CHILD_TYPES
index|]
index|[
name|ZIO_WAIT_TYPES
index|]
decl_stmt|;
name|uint64_t
modifier|*
name|io_stall
decl_stmt|;
name|zio_t
modifier|*
name|io_gang_leader
decl_stmt|;
name|zio_gang_node_t
modifier|*
name|io_gang_tree
decl_stmt|;
name|void
modifier|*
name|io_executor
decl_stmt|;
name|void
modifier|*
name|io_waiter
decl_stmt|;
name|kmutex_t
name|io_lock
decl_stmt|;
name|kcondvar_t
name|io_cv
decl_stmt|;
comment|/* FMA state */
name|uint64_t
name|io_ena
decl_stmt|;
ifdef|#
directive|ifdef
name|_KERNEL
comment|/* FreeBSD only. */
name|struct
name|ostask
name|io_task
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
specifier|extern
name|zio_t
modifier|*
name|zio_null
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_root
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_read
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|flags
parameter_list|,
specifier|const
name|zbookmark_t
modifier|*
name|zb
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_write
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|zio_prop_t
modifier|*
name|zp
parameter_list|,
name|zio_done_func_t
modifier|*
name|ready
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|flags
parameter_list|,
specifier|const
name|zbookmark_t
modifier|*
name|zb
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_rewrite
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|flags
parameter_list|,
name|zbookmark_t
modifier|*
name|zb
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_free
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_claim
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_ioctl
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|int
name|cmd
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_read_phys
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|int
name|checksum
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|flags
parameter_list|,
name|boolean_t
name|labels
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_write_phys
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|int
name|checksum
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|flags
parameter_list|,
name|boolean_t
name|labels
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_alloc_blk
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|blkptr_t
modifier|*
name|new_bp
parameter_list|,
name|blkptr_t
modifier|*
name|old_bp
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_free_blk
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_flush
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_wait
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_nowait
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_execute
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_interrupt
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_walk_parents
parameter_list|(
name|zio_t
modifier|*
name|cio
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_walk_children
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_unique_parent
parameter_list|(
name|zio_t
modifier|*
name|cio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_add_child
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|zio_t
modifier|*
name|cio
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|zio_buf_alloc
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_buf_free
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|zio_data_buf_alloc
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_data_buf_free
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_resubmit_stage_async
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_vdev_child_io
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|flags
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_vdev_delegated_io
parameter_list|(
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|flags
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|private
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_vdev_io_bypass
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_vdev_io_reissue
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_vdev_io_redone
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_checksum_verified
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_worst_error
parameter_list|(
name|int
name|e1
parameter_list|,
name|int
name|e2
parameter_list|)
function_decl|;
specifier|extern
name|uint8_t
name|zio_checksum_select
parameter_list|(
name|uint8_t
name|child
parameter_list|,
name|uint8_t
name|parent
parameter_list|)
function_decl|;
specifier|extern
name|uint8_t
name|zio_compress_select
parameter_list|(
name|uint8_t
name|child
parameter_list|,
name|uint8_t
name|parent
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_suspend
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_resume
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_resume_wait
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
comment|/*  * Initial setup and teardown.  */
specifier|extern
name|void
name|zio_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_fini
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * Fault injection  */
struct_decl|struct
name|zinject_record
struct_decl|;
specifier|extern
name|uint32_t
name|zio_injection_enabled
decl_stmt|;
specifier|extern
name|int
name|zio_inject_fault
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
modifier|*
name|id
parameter_list|,
name|struct
name|zinject_record
modifier|*
name|record
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_inject_list_next
parameter_list|(
name|int
modifier|*
name|id
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|size_t
name|buflen
parameter_list|,
name|struct
name|zinject_record
modifier|*
name|record
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_clear_fault
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_handle_fault_injection
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_handle_device_injection
parameter_list|(
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|zio_t
modifier|*
name|zio
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_handle_label_injection
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ZIO_H */
end_comment

end_unit

