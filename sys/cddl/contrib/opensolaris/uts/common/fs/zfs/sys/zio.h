begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright 2011 Nexenta Systems, Inc.  All rights reserved.  * Copyright (c) 2012, 2017 by Delphix. All rights reserved.  * Copyright (c) 2013 by Saso Kiselkov. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ZIO_H
end_ifndef

begin_define
define|#
directive|define
name|_ZIO_H
end_define

begin_include
include|#
directive|include
file|<sys/zio_priority.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_include
include|#
directive|include
file|<sys/spa.h>
end_include

begin_include
include|#
directive|include
file|<sys/txg.h>
end_include

begin_include
include|#
directive|include
file|<sys/avl.h>
end_include

begin_include
include|#
directive|include
file|<sys/kstat.h>
end_include

begin_include
include|#
directive|include
file|<sys/fs/zfs.h>
end_include

begin_include
include|#
directive|include
file|<sys/zio_impl.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Embedded checksum  */
define|#
directive|define
name|ZEC_MAGIC
value|0x210da7ab10c7a11ULL
typedef|typedef
struct|struct
name|zio_eck
block|{
name|uint64_t
name|zec_magic
decl_stmt|;
comment|/* for validation, endianness	*/
name|zio_cksum_t
name|zec_cksum
decl_stmt|;
comment|/* 256-bit checksum		*/
block|}
name|zio_eck_t
typedef|;
comment|/*  * Gang block headers are self-checksumming and contain an array  * of block pointers.  */
define|#
directive|define
name|SPA_GANGBLOCKSIZE
value|SPA_MINBLOCKSIZE
define|#
directive|define
name|SPA_GBH_NBLKPTRS
value|((SPA_GANGBLOCKSIZE - \ 	sizeof (zio_eck_t)) / sizeof (blkptr_t))
define|#
directive|define
name|SPA_GBH_FILLER
value|((SPA_GANGBLOCKSIZE - \ 	sizeof (zio_eck_t) - \ 	(SPA_GBH_NBLKPTRS * sizeof (blkptr_t))) /\ 	sizeof (uint64_t))
typedef|typedef
struct|struct
name|zio_gbh
block|{
name|blkptr_t
name|zg_blkptr
index|[
name|SPA_GBH_NBLKPTRS
index|]
decl_stmt|;
name|uint64_t
name|zg_filler
index|[
name|SPA_GBH_FILLER
index|]
decl_stmt|;
name|zio_eck_t
name|zg_tail
decl_stmt|;
block|}
name|zio_gbh_phys_t
typedef|;
enum|enum
name|zio_checksum
block|{
name|ZIO_CHECKSUM_INHERIT
init|=
literal|0
block|,
name|ZIO_CHECKSUM_ON
block|,
name|ZIO_CHECKSUM_OFF
block|,
name|ZIO_CHECKSUM_LABEL
block|,
name|ZIO_CHECKSUM_GANG_HEADER
block|,
name|ZIO_CHECKSUM_ZILOG
block|,
name|ZIO_CHECKSUM_FLETCHER_2
block|,
name|ZIO_CHECKSUM_FLETCHER_4
block|,
name|ZIO_CHECKSUM_SHA256
block|,
name|ZIO_CHECKSUM_ZILOG2
block|,
name|ZIO_CHECKSUM_NOPARITY
block|,
name|ZIO_CHECKSUM_SHA512
block|,
name|ZIO_CHECKSUM_SKEIN
block|,
ifdef|#
directive|ifdef
name|illumos
name|ZIO_CHECKSUM_EDONR
block|,
endif|#
directive|endif
name|ZIO_CHECKSUM_FUNCTIONS
block|}
enum|;
comment|/*  * The number of "legacy" compression functions which can be set on individual  * objects.  */
define|#
directive|define
name|ZIO_CHECKSUM_LEGACY_FUNCTIONS
value|ZIO_CHECKSUM_ZILOG2
define|#
directive|define
name|ZIO_CHECKSUM_ON_VALUE
value|ZIO_CHECKSUM_FLETCHER_4
define|#
directive|define
name|ZIO_CHECKSUM_DEFAULT
value|ZIO_CHECKSUM_ON
define|#
directive|define
name|ZIO_CHECKSUM_MASK
value|0xffULL
define|#
directive|define
name|ZIO_CHECKSUM_VERIFY
value|(1<< 8)
define|#
directive|define
name|ZIO_DEDUPCHECKSUM
value|ZIO_CHECKSUM_SHA256
define|#
directive|define
name|ZIO_DEDUPDITTO_MIN
value|100
comment|/*  * The number of "legacy" compression functions which can be set on individual  * objects.  */
define|#
directive|define
name|ZIO_COMPRESS_LEGACY_FUNCTIONS
value|ZIO_COMPRESS_LZ4
comment|/*  * The meaning of "compress = on" selected by the compression features enabled  * on a given pool.  */
define|#
directive|define
name|ZIO_COMPRESS_LEGACY_ON_VALUE
value|ZIO_COMPRESS_LZJB
define|#
directive|define
name|ZIO_COMPRESS_LZ4_ON_VALUE
value|ZIO_COMPRESS_LZ4
define|#
directive|define
name|ZIO_COMPRESS_DEFAULT
value|ZIO_COMPRESS_OFF
define|#
directive|define
name|BOOTFS_COMPRESS_VALID
parameter_list|(
name|compress
parameter_list|)
define|\
value|((compress) == ZIO_COMPRESS_LZJB ||		\ 	(compress) == ZIO_COMPRESS_LZ4 ||		\ 	(compress) == ZIO_COMPRESS_ON ||		\ 	(compress) == ZIO_COMPRESS_OFF)
define|#
directive|define
name|ZIO_FAILURE_MODE_WAIT
value|0
define|#
directive|define
name|ZIO_FAILURE_MODE_CONTINUE
value|1
define|#
directive|define
name|ZIO_FAILURE_MODE_PANIC
value|2
enum|enum
name|zio_flag
block|{
comment|/* 	 * Flags inherited by gang, ddt, and vdev children, 	 * and that must be equal for two zios to aggregate 	 */
name|ZIO_FLAG_DONT_AGGREGATE
init|=
literal|1
operator|<<
literal|0
block|,
name|ZIO_FLAG_IO_REPAIR
init|=
literal|1
operator|<<
literal|1
block|,
name|ZIO_FLAG_SELF_HEAL
init|=
literal|1
operator|<<
literal|2
block|,
name|ZIO_FLAG_RESILVER
init|=
literal|1
operator|<<
literal|3
block|,
name|ZIO_FLAG_SCRUB
init|=
literal|1
operator|<<
literal|4
block|,
name|ZIO_FLAG_SCAN_THREAD
init|=
literal|1
operator|<<
literal|5
block|,
name|ZIO_FLAG_PHYSICAL
init|=
literal|1
operator|<<
literal|6
block|,
define|#
directive|define
name|ZIO_FLAG_AGG_INHERIT
value|(ZIO_FLAG_CANFAIL - 1)
comment|/* 	 * Flags inherited by ddt, gang, and vdev children. 	 */
name|ZIO_FLAG_CANFAIL
init|=
literal|1
operator|<<
literal|7
block|,
comment|/* must be first for INHERIT */
name|ZIO_FLAG_SPECULATIVE
init|=
literal|1
operator|<<
literal|8
block|,
name|ZIO_FLAG_CONFIG_WRITER
init|=
literal|1
operator|<<
literal|9
block|,
name|ZIO_FLAG_DONT_RETRY
init|=
literal|1
operator|<<
literal|10
block|,
name|ZIO_FLAG_DONT_CACHE
init|=
literal|1
operator|<<
literal|11
block|,
name|ZIO_FLAG_NODATA
init|=
literal|1
operator|<<
literal|12
block|,
name|ZIO_FLAG_INDUCE_DAMAGE
init|=
literal|1
operator|<<
literal|13
block|,
name|ZIO_FLAG_IO_ALLOCATING
init|=
literal|1
operator|<<
literal|14
block|,
define|#
directive|define
name|ZIO_FLAG_DDT_INHERIT
value|(ZIO_FLAG_IO_RETRY - 1)
define|#
directive|define
name|ZIO_FLAG_GANG_INHERIT
value|(ZIO_FLAG_IO_RETRY - 1)
comment|/* 	 * Flags inherited by vdev children. 	 */
name|ZIO_FLAG_IO_RETRY
init|=
literal|1
operator|<<
literal|15
block|,
comment|/* must be first for INHERIT */
name|ZIO_FLAG_PROBE
init|=
literal|1
operator|<<
literal|16
block|,
name|ZIO_FLAG_TRYHARD
init|=
literal|1
operator|<<
literal|17
block|,
name|ZIO_FLAG_OPTIONAL
init|=
literal|1
operator|<<
literal|18
block|,
define|#
directive|define
name|ZIO_FLAG_VDEV_INHERIT
value|(ZIO_FLAG_DONT_QUEUE - 1)
comment|/* 	 * Flags not inherited by any children. 	 */
name|ZIO_FLAG_DONT_QUEUE
init|=
literal|1
operator|<<
literal|19
block|,
comment|/* must be first for INHERIT */
name|ZIO_FLAG_DONT_PROPAGATE
init|=
literal|1
operator|<<
literal|20
block|,
name|ZIO_FLAG_IO_BYPASS
init|=
literal|1
operator|<<
literal|21
block|,
name|ZIO_FLAG_IO_REWRITE
init|=
literal|1
operator|<<
literal|22
block|,
name|ZIO_FLAG_RAW
init|=
literal|1
operator|<<
literal|23
block|,
name|ZIO_FLAG_GANG_CHILD
init|=
literal|1
operator|<<
literal|24
block|,
name|ZIO_FLAG_DDT_CHILD
init|=
literal|1
operator|<<
literal|25
block|,
name|ZIO_FLAG_GODFATHER
init|=
literal|1
operator|<<
literal|26
block|,
name|ZIO_FLAG_NOPWRITE
init|=
literal|1
operator|<<
literal|27
block|,
name|ZIO_FLAG_REEXECUTED
init|=
literal|1
operator|<<
literal|28
block|,
name|ZIO_FLAG_DELEGATED
init|=
literal|1
operator|<<
literal|29
block|, }
enum|;
define|#
directive|define
name|ZIO_FLAG_MUSTSUCCEED
value|0
define|#
directive|define
name|ZIO_DDT_CHILD_FLAGS
parameter_list|(
name|zio
parameter_list|)
define|\
value|(((zio)->io_flags& ZIO_FLAG_DDT_INHERIT) |		\ 	ZIO_FLAG_DDT_CHILD | ZIO_FLAG_CANFAIL)
define|#
directive|define
name|ZIO_GANG_CHILD_FLAGS
parameter_list|(
name|zio
parameter_list|)
define|\
value|(((zio)->io_flags& ZIO_FLAG_GANG_INHERIT) |		\ 	ZIO_FLAG_GANG_CHILD | ZIO_FLAG_CANFAIL)
define|#
directive|define
name|ZIO_VDEV_CHILD_FLAGS
parameter_list|(
name|zio
parameter_list|)
define|\
value|(((zio)->io_flags& ZIO_FLAG_VDEV_INHERIT) |		\ 	ZIO_FLAG_CANFAIL)
enum|enum
name|zio_child
block|{
name|ZIO_CHILD_VDEV
init|=
literal|0
block|,
name|ZIO_CHILD_GANG
block|,
name|ZIO_CHILD_DDT
block|,
name|ZIO_CHILD_LOGICAL
block|,
name|ZIO_CHILD_TYPES
block|}
enum|;
enum|enum
name|zio_wait_type
block|{
name|ZIO_WAIT_READY
init|=
literal|0
block|,
name|ZIO_WAIT_DONE
block|,
name|ZIO_WAIT_TYPES
block|}
enum|;
comment|/*  * We'll take the number 122 and 123 to indicate checksum errors and  * fragmentation. Those doesn't collide with any errno values as they  * are greater than ELAST.  */
define|#
directive|define
name|ECKSUM
value|122
define|#
directive|define
name|EFRAGS
value|123
typedef|typedef
name|void
name|zio_done_func_t
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zio_dva_throttle_enabled
decl_stmt|;
specifier|extern
specifier|const
name|char
modifier|*
name|zio_type_name
index|[
name|ZIO_TYPES
index|]
decl_stmt|;
comment|/*  * A bookmark is a four-tuple<objset, object, level, blkid> that uniquely  * identifies any block in the pool.  By convention, the meta-objset (MOS)  * is objset 0, and the meta-dnode is object 0.  This covers all blocks  * except root blocks and ZIL blocks, which are defined as follows:  *  * Root blocks (objset_phys_t) are object 0, level -1:<objset, 0, -1, 0>.  * ZIL blocks are bookmarked<objset, 0, -2, blkid == ZIL sequence number>.  * dmu_sync()ed ZIL data blocks are bookmarked<objset, object, -2, blkid>.  * dnode visit bookmarks are<objset, object id of dnode, -3, 0>.  *  * Note: this structure is called a bookmark because its original purpose  * was to remember where to resume a pool-wide traverse.  *  * Note: this structure is passed between userland and the kernel, and is  * stored on disk (by virtue of being incorporated into other on-disk  * structures, e.g. dsl_scan_phys_t).  */
typedef|typedef
struct|struct
name|zbookmark_phys
block|{
name|uint64_t
name|zb_objset
decl_stmt|;
name|uint64_t
name|zb_object
decl_stmt|;
name|int64_t
name|zb_level
decl_stmt|;
name|uint64_t
name|zb_blkid
decl_stmt|;
block|}
name|zbookmark_phys_t
typedef|;
define|#
directive|define
name|SET_BOOKMARK
parameter_list|(
name|zb
parameter_list|,
name|objset
parameter_list|,
name|object
parameter_list|,
name|level
parameter_list|,
name|blkid
parameter_list|)
define|\
value|{                                                       \ 	(zb)->zb_objset = objset;                       \ 	(zb)->zb_object = object;                       \ 	(zb)->zb_level = level;                         \ 	(zb)->zb_blkid = blkid;                         \ }
define|#
directive|define
name|ZB_DESTROYED_OBJSET
value|(-1ULL)
define|#
directive|define
name|ZB_ROOT_OBJECT
value|(0ULL)
define|#
directive|define
name|ZB_ROOT_LEVEL
value|(-1LL)
define|#
directive|define
name|ZB_ROOT_BLKID
value|(0ULL)
define|#
directive|define
name|ZB_ZIL_OBJECT
value|(0ULL)
define|#
directive|define
name|ZB_ZIL_LEVEL
value|(-2LL)
define|#
directive|define
name|ZB_DNODE_LEVEL
value|(-3LL)
define|#
directive|define
name|ZB_DNODE_BLKID
value|(0ULL)
define|#
directive|define
name|ZB_IS_ZERO
parameter_list|(
name|zb
parameter_list|)
define|\
value|((zb)->zb_objset == 0&& (zb)->zb_object == 0&&	\ 	(zb)->zb_level == 0&& (zb)->zb_blkid == 0)
define|#
directive|define
name|ZB_IS_ROOT
parameter_list|(
name|zb
parameter_list|)
define|\
value|((zb)->zb_object == ZB_ROOT_OBJECT&&	\ 	(zb)->zb_level == ZB_ROOT_LEVEL&&	\ 	(zb)->zb_blkid == ZB_ROOT_BLKID)
typedef|typedef
struct|struct
name|zio_prop
block|{
name|enum
name|zio_checksum
name|zp_checksum
decl_stmt|;
name|enum
name|zio_compress
name|zp_compress
decl_stmt|;
name|dmu_object_type_t
name|zp_type
decl_stmt|;
name|uint8_t
name|zp_level
decl_stmt|;
name|uint8_t
name|zp_copies
decl_stmt|;
name|boolean_t
name|zp_dedup
decl_stmt|;
name|boolean_t
name|zp_dedup_verify
decl_stmt|;
name|boolean_t
name|zp_nopwrite
decl_stmt|;
block|}
name|zio_prop_t
typedef|;
typedef|typedef
name|struct
name|zio_cksum_report
name|zio_cksum_report_t
typedef|;
typedef|typedef
name|void
name|zio_cksum_finish_f
parameter_list|(
name|zio_cksum_report_t
modifier|*
name|rep
parameter_list|,
specifier|const
name|void
modifier|*
name|good_data
parameter_list|)
function_decl|;
typedef|typedef
name|void
name|zio_cksum_free_f
parameter_list|(
name|void
modifier|*
name|cbdata
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
struct_decl|struct
name|zio_bad_cksum
struct_decl|;
comment|/* defined in zio_checksum.h */
struct_decl|struct
name|dnode_phys
struct_decl|;
struct|struct
name|zio_cksum_report
block|{
name|struct
name|zio_cksum_report
modifier|*
name|zcr_next
decl_stmt|;
name|nvlist_t
modifier|*
name|zcr_ereport
decl_stmt|;
name|nvlist_t
modifier|*
name|zcr_detector
decl_stmt|;
name|void
modifier|*
name|zcr_cbdata
decl_stmt|;
name|size_t
name|zcr_cbinfo
decl_stmt|;
comment|/* passed to zcr_free() */
name|uint64_t
name|zcr_align
decl_stmt|;
name|uint64_t
name|zcr_length
decl_stmt|;
name|zio_cksum_finish_f
modifier|*
name|zcr_finish
decl_stmt|;
name|zio_cksum_free_f
modifier|*
name|zcr_free
decl_stmt|;
comment|/* internal use only */
name|struct
name|zio_bad_cksum
modifier|*
name|zcr_ckinfo
decl_stmt|;
comment|/* information from failure */
block|}
struct|;
typedef|typedef
name|void
name|zio_vsd_cksum_report_f
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|zio_cksum_report_t
modifier|*
name|zcr
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|zio_vsd_cksum_report_f
name|zio_vsd_default_cksum_report
decl_stmt|;
typedef|typedef
struct|struct
name|zio_vsd_ops
block|{
name|zio_done_func_t
modifier|*
name|vsd_free
decl_stmt|;
name|zio_vsd_cksum_report_f
modifier|*
name|vsd_cksum_report
decl_stmt|;
block|}
name|zio_vsd_ops_t
typedef|;
typedef|typedef
struct|struct
name|zio_gang_node
block|{
name|zio_gbh_phys_t
modifier|*
name|gn_gbh
decl_stmt|;
name|struct
name|zio_gang_node
modifier|*
name|gn_child
index|[
name|SPA_GBH_NBLKPTRS
index|]
decl_stmt|;
block|}
name|zio_gang_node_t
typedef|;
typedef|typedef
name|zio_t
modifier|*
name|zio_gang_issue_func_t
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|zio_gang_node_t
modifier|*
name|gn
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
typedef|typedef
name|void
name|zio_transform_func_t
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|zio_transform
block|{
name|void
modifier|*
name|zt_orig_data
decl_stmt|;
name|uint64_t
name|zt_orig_size
decl_stmt|;
name|uint64_t
name|zt_bufsize
decl_stmt|;
name|zio_transform_func_t
modifier|*
name|zt_transform
decl_stmt|;
name|struct
name|zio_transform
modifier|*
name|zt_next
decl_stmt|;
block|}
name|zio_transform_t
typedef|;
typedef|typedef
name|int
name|zio_pipe_stage_t
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
comment|/*  * The io_reexecute flags are distinct from io_flags because the child must  * be able to propagate them to the parent.  The normal io_flags are local  * to the zio, not protected by any lock, and not modifiable by children;  * the reexecute flags are protected by io_lock, modifiable by children,  * and always propagated -- even when ZIO_FLAG_DONT_PROPAGATE is set.  */
define|#
directive|define
name|ZIO_REEXECUTE_NOW
value|0x01
define|#
directive|define
name|ZIO_REEXECUTE_SUSPEND
value|0x02
typedef|typedef
struct|struct
name|zio_alloc_list
block|{
name|list_t
name|zal_list
decl_stmt|;
name|uint64_t
name|zal_size
decl_stmt|;
block|}
name|zio_alloc_list_t
typedef|;
typedef|typedef
struct|struct
name|zio_link
block|{
name|zio_t
modifier|*
name|zl_parent
decl_stmt|;
name|zio_t
modifier|*
name|zl_child
decl_stmt|;
name|list_node_t
name|zl_parent_node
decl_stmt|;
name|list_node_t
name|zl_child_node
decl_stmt|;
block|}
name|zio_link_t
typedef|;
comment|/*  * Used for TRIM kstat.  */
typedef|typedef
struct|struct
name|zio_trim_stats
block|{
comment|/* 	 * Number of bytes successfully TRIMmed. 	 */
name|kstat_named_t
name|bytes
decl_stmt|;
comment|/* 	 * Number of successful TRIM requests. 	 */
name|kstat_named_t
name|success
decl_stmt|;
comment|/* 	 * Number of TRIM requests that failed because TRIM is not 	 * supported. 	 */
name|kstat_named_t
name|unsupported
decl_stmt|;
comment|/* 	 * Number of TRIM requests that failed for other reasons. 	 */
name|kstat_named_t
name|failed
decl_stmt|;
block|}
name|zio_trim_stats_t
typedef|;
specifier|extern
name|zio_trim_stats_t
name|zio_trim_stats
decl_stmt|;
define|#
directive|define
name|ZIO_TRIM_STAT_INCR
parameter_list|(
name|stat
parameter_list|,
name|val
parameter_list|)
define|\
value|atomic_add_64(&zio_trim_stats.stat.value.ui64, (val));
define|#
directive|define
name|ZIO_TRIM_STAT_BUMP
parameter_list|(
name|stat
parameter_list|)
define|\
value|ZIO_TRIM_STAT_INCR(stat, 1);
struct|struct
name|zio
block|{
comment|/* Core information about this I/O */
name|zbookmark_phys_t
name|io_bookmark
decl_stmt|;
name|zio_prop_t
name|io_prop
decl_stmt|;
name|zio_type_t
name|io_type
decl_stmt|;
name|enum
name|zio_child
name|io_child_type
decl_stmt|;
name|int
name|io_cmd
decl_stmt|;
name|zio_priority_t
name|io_priority
decl_stmt|;
name|uint8_t
name|io_reexecute
decl_stmt|;
name|uint8_t
name|io_state
index|[
name|ZIO_WAIT_TYPES
index|]
decl_stmt|;
name|uint64_t
name|io_txg
decl_stmt|;
name|spa_t
modifier|*
name|io_spa
decl_stmt|;
name|blkptr_t
modifier|*
name|io_bp
decl_stmt|;
name|blkptr_t
modifier|*
name|io_bp_override
decl_stmt|;
name|blkptr_t
name|io_bp_copy
decl_stmt|;
name|list_t
name|io_parent_list
decl_stmt|;
name|list_t
name|io_child_list
decl_stmt|;
name|zio_t
modifier|*
name|io_logical
decl_stmt|;
name|zio_transform_t
modifier|*
name|io_transform_stack
decl_stmt|;
comment|/* Callback info */
name|zio_done_func_t
modifier|*
name|io_ready
decl_stmt|;
name|zio_done_func_t
modifier|*
name|io_children_ready
decl_stmt|;
name|zio_done_func_t
modifier|*
name|io_physdone
decl_stmt|;
name|zio_done_func_t
modifier|*
name|io_done
decl_stmt|;
name|void
modifier|*
name|io_private
decl_stmt|;
name|int64_t
name|io_prev_space_delta
decl_stmt|;
comment|/* DMU private */
name|blkptr_t
name|io_bp_orig
decl_stmt|;
comment|/* Data represented by this I/O */
name|void
modifier|*
name|io_data
decl_stmt|;
name|void
modifier|*
name|io_orig_data
decl_stmt|;
name|uint64_t
name|io_size
decl_stmt|;
name|uint64_t
name|io_orig_size
decl_stmt|;
comment|/* io_lsize != io_orig_size iff this is a raw write */
name|uint64_t
name|io_lsize
decl_stmt|;
comment|/* Stuff for the vdev stack */
name|vdev_t
modifier|*
name|io_vd
decl_stmt|;
name|void
modifier|*
name|io_vsd
decl_stmt|;
specifier|const
name|zio_vsd_ops_t
modifier|*
name|io_vsd_ops
decl_stmt|;
name|uint64_t
name|io_offset
decl_stmt|;
name|hrtime_t
name|io_timestamp
decl_stmt|;
name|hrtime_t
name|io_queued_timestamp
decl_stmt|;
name|hrtime_t
name|io_target_timestamp
decl_stmt|;
name|avl_node_t
name|io_queue_node
decl_stmt|;
name|avl_node_t
name|io_offset_node
decl_stmt|;
name|avl_node_t
name|io_alloc_node
decl_stmt|;
name|zio_alloc_list_t
name|io_alloc_list
decl_stmt|;
comment|/* Internal pipeline state */
name|enum
name|zio_flag
name|io_flags
decl_stmt|;
name|enum
name|zio_stage
name|io_stage
decl_stmt|;
name|enum
name|zio_stage
name|io_pipeline
decl_stmt|;
name|enum
name|zio_flag
name|io_orig_flags
decl_stmt|;
name|enum
name|zio_stage
name|io_orig_stage
decl_stmt|;
name|enum
name|zio_stage
name|io_orig_pipeline
decl_stmt|;
name|enum
name|zio_stage
name|io_pipeline_trace
decl_stmt|;
name|int
name|io_error
decl_stmt|;
name|int
name|io_child_error
index|[
name|ZIO_CHILD_TYPES
index|]
decl_stmt|;
name|uint64_t
name|io_children
index|[
name|ZIO_CHILD_TYPES
index|]
index|[
name|ZIO_WAIT_TYPES
index|]
decl_stmt|;
name|uint64_t
name|io_child_count
decl_stmt|;
name|uint64_t
name|io_phys_children
decl_stmt|;
name|uint64_t
name|io_parent_count
decl_stmt|;
name|uint64_t
modifier|*
name|io_stall
decl_stmt|;
name|zio_t
modifier|*
name|io_gang_leader
decl_stmt|;
name|zio_gang_node_t
modifier|*
name|io_gang_tree
decl_stmt|;
name|void
modifier|*
name|io_executor
decl_stmt|;
name|void
modifier|*
name|io_waiter
decl_stmt|;
name|kmutex_t
name|io_lock
decl_stmt|;
name|kcondvar_t
name|io_cv
decl_stmt|;
comment|/* FMA state */
name|zio_cksum_report_t
modifier|*
name|io_cksum_report
decl_stmt|;
name|uint64_t
name|io_ena
decl_stmt|;
comment|/* Taskq dispatching state */
name|taskq_ent_t
name|io_tqent
decl_stmt|;
name|avl_node_t
name|io_trim_node
decl_stmt|;
name|list_node_t
name|io_trim_link
decl_stmt|;
block|}
struct|;
specifier|extern
name|int
name|zio_bookmark_compare
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_null
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_root
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_read
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|,
specifier|const
name|zbookmark_phys_t
modifier|*
name|zb
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_write
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|uint64_t
name|psize
parameter_list|,
specifier|const
name|zio_prop_t
modifier|*
name|zp
parameter_list|,
name|zio_done_func_t
modifier|*
name|ready
parameter_list|,
name|zio_done_func_t
modifier|*
name|children_ready
parameter_list|,
name|zio_done_func_t
modifier|*
name|physdone
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|,
specifier|const
name|zbookmark_phys_t
modifier|*
name|zb
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_rewrite
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|,
name|zbookmark_phys_t
modifier|*
name|zb
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_write_override
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|int
name|copies
parameter_list|,
name|boolean_t
name|nopwrite
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_free
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_claim
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_ioctl
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|int
name|cmd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_read_phys
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|int
name|checksum
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|,
name|boolean_t
name|labels
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_write_phys
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|int
name|checksum
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|,
name|boolean_t
name|labels
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_free_sync
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_alloc_zil
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|blkptr_t
modifier|*
name|new_bp
parameter_list|,
name|blkptr_t
modifier|*
name|old_bp
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|boolean_t
modifier|*
name|slog
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_free_zil
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|uint64_t
name|txg
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_flush
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_trim
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|spa_t
modifier|*
name|spa
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_shrink
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_wait
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_nowait
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_execute
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_interrupt
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_delay_init
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_delay_interrupt
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_walk_parents
parameter_list|(
name|zio_t
modifier|*
name|cio
parameter_list|,
name|zio_link_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_walk_children
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|zio_link_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_unique_parent
parameter_list|(
name|zio_t
modifier|*
name|cio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_add_child
parameter_list|(
name|zio_t
modifier|*
name|pio
parameter_list|,
name|zio_t
modifier|*
name|cio
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|zio_buf_alloc
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|zio_buf_alloc_nowait
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_buf_free
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|zio_data_buf_alloc
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_data_buf_free
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_push_transform
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|uint64_t
name|bufsize
parameter_list|,
name|zio_transform_func_t
modifier|*
name|transform
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_pop_transforms
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_resubmit_stage_async
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_vdev_child_io
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|int
name|type
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
specifier|extern
name|zio_t
modifier|*
name|zio_vdev_delegated_io
parameter_list|(
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|int
name|type
parameter_list|,
name|zio_priority_t
name|priority
parameter_list|,
name|enum
name|zio_flag
name|flags
parameter_list|,
name|zio_done_func_t
modifier|*
name|done
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_vdev_io_bypass
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_vdev_io_reissue
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_vdev_io_redone
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_checksum_verified
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_worst_error
parameter_list|(
name|int
name|e1
parameter_list|,
name|int
name|e2
parameter_list|)
function_decl|;
specifier|extern
name|enum
name|zio_checksum
name|zio_checksum_select
parameter_list|(
name|enum
name|zio_checksum
name|child
parameter_list|,
name|enum
name|zio_checksum
name|parent
parameter_list|)
function_decl|;
specifier|extern
name|enum
name|zio_checksum
name|zio_checksum_dedup_select
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|enum
name|zio_checksum
name|child
parameter_list|,
name|enum
name|zio_checksum
name|parent
parameter_list|)
function_decl|;
specifier|extern
name|enum
name|zio_compress
name|zio_compress_select
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|enum
name|zio_compress
name|child
parameter_list|,
name|enum
name|zio_compress
name|parent
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_suspend
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_resume
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_resume_wait
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
comment|/*  * Initial setup and teardown.  */
specifier|extern
name|void
name|zio_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_fini
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * Fault injection  */
struct_decl|struct
name|zinject_record
struct_decl|;
specifier|extern
name|uint32_t
name|zio_injection_enabled
decl_stmt|;
specifier|extern
name|int
name|zio_inject_fault
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
modifier|*
name|id
parameter_list|,
name|struct
name|zinject_record
modifier|*
name|record
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_inject_list_next
parameter_list|(
name|int
modifier|*
name|id
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|size_t
name|buflen
parameter_list|,
name|struct
name|zinject_record
modifier|*
name|record
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_clear_fault
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_handle_panic_injection
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|char
modifier|*
name|tag
parameter_list|,
name|uint64_t
name|type
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_handle_fault_injection
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_handle_device_injection
parameter_list|(
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|zio_t
modifier|*
name|zio
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zio_handle_label_injection
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zio_handle_ignored_writes
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
specifier|extern
name|hrtime_t
name|zio_handle_io_delay
parameter_list|(
name|zio_t
modifier|*
name|zio
parameter_list|)
function_decl|;
comment|/*  * Checksum ereport functions  */
specifier|extern
name|void
name|zfs_ereport_start_checksum
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|struct
name|zio
modifier|*
name|zio
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|uint64_t
name|length
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|struct
name|zio_bad_cksum
modifier|*
name|info
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_ereport_finish_checksum
parameter_list|(
name|zio_cksum_report_t
modifier|*
name|report
parameter_list|,
specifier|const
name|void
modifier|*
name|good_data
parameter_list|,
specifier|const
name|void
modifier|*
name|bad_data
parameter_list|,
name|boolean_t
name|drop_if_identical
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_ereport_send_interim_checksum
parameter_list|(
name|zio_cksum_report_t
modifier|*
name|report
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_ereport_free_checksum
parameter_list|(
name|zio_cksum_report_t
modifier|*
name|report
parameter_list|)
function_decl|;
comment|/* If we have the good data in hand, this function can be used */
specifier|extern
name|void
name|zfs_ereport_post_checksum
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
name|vdev_t
modifier|*
name|vd
parameter_list|,
name|struct
name|zio
modifier|*
name|zio
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|uint64_t
name|length
parameter_list|,
specifier|const
name|void
modifier|*
name|good_data
parameter_list|,
specifier|const
name|void
modifier|*
name|bad_data
parameter_list|,
name|struct
name|zio_bad_cksum
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* Called from spa_sync(), but primarily an injection handler */
specifier|extern
name|void
name|spa_handle_ignored_writes
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|)
function_decl|;
comment|/* zbookmark_phys functions */
name|boolean_t
name|zbookmark_subtree_completed
parameter_list|(
specifier|const
name|struct
name|dnode_phys
modifier|*
name|dnp
parameter_list|,
specifier|const
name|zbookmark_phys_t
modifier|*
name|subtree_root
parameter_list|,
specifier|const
name|zbookmark_phys_t
modifier|*
name|last_block
parameter_list|)
function_decl|;
name|int
name|zbookmark_compare
parameter_list|(
name|uint16_t
name|dbss1
parameter_list|,
name|uint8_t
name|ibs1
parameter_list|,
name|uint16_t
name|dbss2
parameter_list|,
name|uint8_t
name|ibs2
parameter_list|,
specifier|const
name|zbookmark_phys_t
modifier|*
name|zb1
parameter_list|,
specifier|const
name|zbookmark_phys_t
modifier|*
name|zb2
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ZIO_H */
end_comment

end_unit

