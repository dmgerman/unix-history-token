begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_SPACE_MAP_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_SPACE_MAP_H
end_define

begin_include
include|#
directive|include
file|<sys/avl.h>
end_include

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|struct
name|space_map_ops
name|space_map_ops_t
typedef|;
typedef|typedef
struct|struct
name|space_map
block|{
name|avl_tree_t
name|sm_root
decl_stmt|;
comment|/* AVL tree of map segments */
name|uint64_t
name|sm_space
decl_stmt|;
comment|/* sum of all segments in the map */
name|uint64_t
name|sm_start
decl_stmt|;
comment|/* start of map */
name|uint64_t
name|sm_size
decl_stmt|;
comment|/* size of map */
name|uint8_t
name|sm_shift
decl_stmt|;
comment|/* unit shift */
name|uint8_t
name|sm_pad
index|[
literal|3
index|]
decl_stmt|;
comment|/* unused */
name|uint8_t
name|sm_loaded
decl_stmt|;
comment|/* map loaded? */
name|uint8_t
name|sm_loading
decl_stmt|;
comment|/* map loading? */
name|kcondvar_t
name|sm_load_cv
decl_stmt|;
comment|/* map load completion */
name|space_map_ops_t
modifier|*
name|sm_ops
decl_stmt|;
comment|/* space map block picker ops vector */
name|avl_tree_t
modifier|*
name|sm_pp_root
decl_stmt|;
comment|/* picker-private AVL tree */
name|void
modifier|*
name|sm_ppd
decl_stmt|;
comment|/* picker-private data */
name|kmutex_t
modifier|*
name|sm_lock
decl_stmt|;
comment|/* pointer to lock that protects map */
block|}
name|space_map_t
typedef|;
typedef|typedef
struct|struct
name|space_seg
block|{
name|avl_node_t
name|ss_node
decl_stmt|;
comment|/* AVL node */
name|avl_node_t
name|ss_pp_node
decl_stmt|;
comment|/* AVL picker-private node */
name|uint64_t
name|ss_start
decl_stmt|;
comment|/* starting offset of this segment */
name|uint64_t
name|ss_end
decl_stmt|;
comment|/* ending offset (non-inclusive) */
block|}
name|space_seg_t
typedef|;
typedef|typedef
struct|struct
name|space_ref
block|{
name|avl_node_t
name|sr_node
decl_stmt|;
comment|/* AVL node */
name|uint64_t
name|sr_offset
decl_stmt|;
comment|/* offset (start or end) */
name|int64_t
name|sr_refcnt
decl_stmt|;
comment|/* associated reference count */
block|}
name|space_ref_t
typedef|;
typedef|typedef
struct|struct
name|space_map_obj
block|{
name|uint64_t
name|smo_object
decl_stmt|;
comment|/* on-disk space map object */
name|uint64_t
name|smo_objsize
decl_stmt|;
comment|/* size of the object */
name|uint64_t
name|smo_alloc
decl_stmt|;
comment|/* space allocated from the map */
block|}
name|space_map_obj_t
typedef|;
struct|struct
name|space_map_ops
block|{
name|void
function_decl|(
modifier|*
name|smop_load
function_decl|)
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|smop_unload
function_decl|)
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|)
function_decl|;
name|uint64_t
function_decl|(
modifier|*
name|smop_alloc
function_decl|)
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|smop_claim
function_decl|)
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|smop_free
function_decl|)
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
name|uint64_t
function_decl|(
modifier|*
name|smop_max
function_decl|)
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|)
function_decl|;
block|}
struct|;
comment|/*  * debug entry  *  *    1      3         10                     50  *  ,---+--------+------------+---------------------------------.  *  | 1 | action |  syncpass  |        txg (lower bits)         |  *  `---+--------+------------+---------------------------------'  *   63  62    60 59        50 49                               0  *  *  *  * non-debug entry  *  *    1               47                   1           15  *  ,-----------------------------------------------------------.  *  | 0 |   offset (sm_shift units)    | type |       run       |  *  `-----------------------------------------------------------'  *   63  62                          17   16   15               0  */
comment|/* All this stuff takes and returns bytes */
define|#
directive|define
name|SM_RUN_DECODE
parameter_list|(
name|x
parameter_list|)
value|(BF64_DECODE(x, 0, 15) + 1)
define|#
directive|define
name|SM_RUN_ENCODE
parameter_list|(
name|x
parameter_list|)
value|BF64_ENCODE((x) - 1, 0, 15)
define|#
directive|define
name|SM_TYPE_DECODE
parameter_list|(
name|x
parameter_list|)
value|BF64_DECODE(x, 15, 1)
define|#
directive|define
name|SM_TYPE_ENCODE
parameter_list|(
name|x
parameter_list|)
value|BF64_ENCODE(x, 15, 1)
define|#
directive|define
name|SM_OFFSET_DECODE
parameter_list|(
name|x
parameter_list|)
value|BF64_DECODE(x, 16, 47)
define|#
directive|define
name|SM_OFFSET_ENCODE
parameter_list|(
name|x
parameter_list|)
value|BF64_ENCODE(x, 16, 47)
define|#
directive|define
name|SM_DEBUG_DECODE
parameter_list|(
name|x
parameter_list|)
value|BF64_DECODE(x, 63, 1)
define|#
directive|define
name|SM_DEBUG_ENCODE
parameter_list|(
name|x
parameter_list|)
value|BF64_ENCODE(x, 63, 1)
define|#
directive|define
name|SM_DEBUG_ACTION_DECODE
parameter_list|(
name|x
parameter_list|)
value|BF64_DECODE(x, 60, 3)
define|#
directive|define
name|SM_DEBUG_ACTION_ENCODE
parameter_list|(
name|x
parameter_list|)
value|BF64_ENCODE(x, 60, 3)
define|#
directive|define
name|SM_DEBUG_SYNCPASS_DECODE
parameter_list|(
name|x
parameter_list|)
value|BF64_DECODE(x, 50, 10)
define|#
directive|define
name|SM_DEBUG_SYNCPASS_ENCODE
parameter_list|(
name|x
parameter_list|)
value|BF64_ENCODE(x, 50, 10)
define|#
directive|define
name|SM_DEBUG_TXG_DECODE
parameter_list|(
name|x
parameter_list|)
value|BF64_DECODE(x, 0, 50)
define|#
directive|define
name|SM_DEBUG_TXG_ENCODE
parameter_list|(
name|x
parameter_list|)
value|BF64_ENCODE(x, 0, 50)
define|#
directive|define
name|SM_RUN_MAX
value|SM_RUN_DECODE(~0ULL)
define|#
directive|define
name|SM_ALLOC
value|0x0
define|#
directive|define
name|SM_FREE
value|0x1
comment|/*  * The data for a given space map can be kept on blocks of any size.  * Larger blocks entail fewer i/o operations, but they also cause the  * DMU to keep more data in-core, and also to waste more i/o bandwidth  * when only a few blocks have changed since the last transaction group.  * This could use a lot more research, but for now, set the freelist  * block size to 4k (2^12).  */
define|#
directive|define
name|SPACE_MAP_BLOCKSHIFT
value|12
typedef|typedef
name|void
name|space_map_func_t
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_create
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|uint8_t
name|shift
parameter_list|,
name|kmutex_t
modifier|*
name|lp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_destroy
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_add
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_remove
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|space_map_contains
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_vacate
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|space_map_func_t
modifier|*
name|func
parameter_list|,
name|space_map_t
modifier|*
name|mdest
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_walk
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|space_map_func_t
modifier|*
name|func
parameter_list|,
name|space_map_t
modifier|*
name|mdest
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_load_wait
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|)
function_decl|;
specifier|extern
name|int
name|space_map_load
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|space_map_ops_t
modifier|*
name|ops
parameter_list|,
name|uint8_t
name|maptype
parameter_list|,
name|space_map_obj_t
modifier|*
name|smo
parameter_list|,
name|objset_t
modifier|*
name|os
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_unload
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|space_map_alloc
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_claim
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_free
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|space_map_maxsize
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_sync
parameter_list|(
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|uint8_t
name|maptype
parameter_list|,
name|space_map_obj_t
modifier|*
name|smo
parameter_list|,
name|objset_t
modifier|*
name|os
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_truncate
parameter_list|(
name|space_map_obj_t
modifier|*
name|smo
parameter_list|,
name|objset_t
modifier|*
name|os
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_ref_create
parameter_list|(
name|avl_tree_t
modifier|*
name|t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_ref_destroy
parameter_list|(
name|avl_tree_t
modifier|*
name|t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_ref_add_seg
parameter_list|(
name|avl_tree_t
modifier|*
name|t
parameter_list|,
name|uint64_t
name|start
parameter_list|,
name|uint64_t
name|end
parameter_list|,
name|int64_t
name|refcnt
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_ref_add_map
parameter_list|(
name|avl_tree_t
modifier|*
name|t
parameter_list|,
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|int64_t
name|refcnt
parameter_list|)
function_decl|;
specifier|extern
name|void
name|space_map_ref_generate_map
parameter_list|(
name|avl_tree_t
modifier|*
name|t
parameter_list|,
name|space_map_t
modifier|*
name|sm
parameter_list|,
name|int64_t
name|minref
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_SPACE_MAP_H */
end_comment

end_unit

