begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2011, 2015 by Delphix. All rights reserved.  * Copyright (c) 2013, Joyent, Inc. All rights reserved.  * Copyright (c) 2013 Steven Hartland. All rights reserved.  * Copyright (c) 2014 Spectra Logic Corporation, All rights reserved.  * Copyright (c) 2014 Integros [integros.com]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_DSL_DATASET_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_DSL_DATASET_H
end_define

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/spa.h>
end_include

begin_include
include|#
directive|include
file|<sys/txg.h>
end_include

begin_include
include|#
directive|include
file|<sys/zio.h>
end_include

begin_include
include|#
directive|include
file|<sys/bplist.h>
end_include

begin_include
include|#
directive|include
file|<sys/dsl_synctask.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_include
include|#
directive|include
file|<sys/dsl_deadlist.h>
end_include

begin_include
include|#
directive|include
file|<sys/refcount.h>
end_include

begin_include
include|#
directive|include
file|<sys/rrwlock.h>
end_include

begin_include
include|#
directive|include
file|<zfeature_common.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|dsl_dataset
struct_decl|;
struct_decl|struct
name|dsl_dir
struct_decl|;
struct_decl|struct
name|dsl_pool
struct_decl|;
define|#
directive|define
name|DS_FLAG_INCONSISTENT
value|(1ULL<<0)
define|#
directive|define
name|DS_IS_INCONSISTENT
parameter_list|(
name|ds
parameter_list|)
define|\
value|(dsl_dataset_phys(ds)->ds_flags& DS_FLAG_INCONSISTENT)
comment|/*  * Do not allow this dataset to be promoted.  */
define|#
directive|define
name|DS_FLAG_NOPROMOTE
value|(1ULL<<1)
comment|/*  * DS_FLAG_UNIQUE_ACCURATE is set if ds_unique_bytes has been correctly  * calculated for head datasets (starting with SPA_VERSION_UNIQUE_ACCURATE,  * refquota/refreservations).  */
define|#
directive|define
name|DS_FLAG_UNIQUE_ACCURATE
value|(1ULL<<2)
comment|/*  * DS_FLAG_DEFER_DESTROY is set after 'zfs destroy -d' has been called  * on a dataset. This allows the dataset to be destroyed using 'zfs release'.  */
define|#
directive|define
name|DS_FLAG_DEFER_DESTROY
value|(1ULL<<3)
define|#
directive|define
name|DS_IS_DEFER_DESTROY
parameter_list|(
name|ds
parameter_list|)
define|\
value|(dsl_dataset_phys(ds)->ds_flags& DS_FLAG_DEFER_DESTROY)
comment|/*  * DS_FIELD_* are strings that are used in the "extensified" dataset zap object.  * They should be of the format<reverse-dns>:<field>.  */
comment|/*  * This field's value is the object ID of a zap object which contains the  * bookmarks of this dataset.  If it is present, then this dataset is counted  * in the refcount of the SPA_FEATURES_BOOKMARKS feature.  */
define|#
directive|define
name|DS_FIELD_BOOKMARK_NAMES
value|"com.delphix:bookmarks"
comment|/*  * These fields are set on datasets that are in the middle of a resumable  * receive, and allow the sender to resume the send if it is interrupted.  */
define|#
directive|define
name|DS_FIELD_RESUME_FROMGUID
value|"com.delphix:resume_fromguid"
define|#
directive|define
name|DS_FIELD_RESUME_TONAME
value|"com.delphix:resume_toname"
define|#
directive|define
name|DS_FIELD_RESUME_TOGUID
value|"com.delphix:resume_toguid"
define|#
directive|define
name|DS_FIELD_RESUME_OBJECT
value|"com.delphix:resume_object"
define|#
directive|define
name|DS_FIELD_RESUME_OFFSET
value|"com.delphix:resume_offset"
define|#
directive|define
name|DS_FIELD_RESUME_BYTES
value|"com.delphix:resume_bytes"
define|#
directive|define
name|DS_FIELD_RESUME_LARGEBLOCK
value|"com.delphix:resume_largeblockok"
define|#
directive|define
name|DS_FIELD_RESUME_EMBEDOK
value|"com.delphix:resume_embedok"
define|#
directive|define
name|DS_FIELD_RESUME_COMPRESSOK
value|"com.delphix:resume_compressok"
comment|/*  * DS_FLAG_CI_DATASET is set if the dataset contains a file system whose  * name lookups should be performed case-insensitively.  */
define|#
directive|define
name|DS_FLAG_CI_DATASET
value|(1ULL<<16)
define|#
directive|define
name|DS_CREATE_FLAG_NODIRTY
value|(1ULL<<24)
typedef|typedef
struct|struct
name|dsl_dataset_phys
block|{
name|uint64_t
name|ds_dir_obj
decl_stmt|;
comment|/* DMU_OT_DSL_DIR */
name|uint64_t
name|ds_prev_snap_obj
decl_stmt|;
comment|/* DMU_OT_DSL_DATASET */
name|uint64_t
name|ds_prev_snap_txg
decl_stmt|;
name|uint64_t
name|ds_next_snap_obj
decl_stmt|;
comment|/* DMU_OT_DSL_DATASET */
name|uint64_t
name|ds_snapnames_zapobj
decl_stmt|;
comment|/* DMU_OT_DSL_DS_SNAP_MAP 0 for snaps */
name|uint64_t
name|ds_num_children
decl_stmt|;
comment|/* clone/snap children; ==0 for head */
name|uint64_t
name|ds_creation_time
decl_stmt|;
comment|/* seconds since 1970 */
name|uint64_t
name|ds_creation_txg
decl_stmt|;
name|uint64_t
name|ds_deadlist_obj
decl_stmt|;
comment|/* DMU_OT_DEADLIST */
comment|/* 	 * ds_referenced_bytes, ds_compressed_bytes, and ds_uncompressed_bytes 	 * include all blocks referenced by this dataset, including those 	 * shared with any other datasets. 	 */
name|uint64_t
name|ds_referenced_bytes
decl_stmt|;
name|uint64_t
name|ds_compressed_bytes
decl_stmt|;
name|uint64_t
name|ds_uncompressed_bytes
decl_stmt|;
name|uint64_t
name|ds_unique_bytes
decl_stmt|;
comment|/* only relevant to snapshots */
comment|/* 	 * The ds_fsid_guid is a 56-bit ID that can change to avoid 	 * collisions.  The ds_guid is a 64-bit ID that will never 	 * change, so there is a small probability that it will collide. 	 */
name|uint64_t
name|ds_fsid_guid
decl_stmt|;
name|uint64_t
name|ds_guid
decl_stmt|;
name|uint64_t
name|ds_flags
decl_stmt|;
comment|/* DS_FLAG_* */
name|blkptr_t
name|ds_bp
decl_stmt|;
name|uint64_t
name|ds_next_clones_obj
decl_stmt|;
comment|/* DMU_OT_DSL_CLONES */
name|uint64_t
name|ds_props_obj
decl_stmt|;
comment|/* DMU_OT_DSL_PROPS for snaps */
name|uint64_t
name|ds_userrefs_obj
decl_stmt|;
comment|/* DMU_OT_USERREFS */
name|uint64_t
name|ds_pad
index|[
literal|5
index|]
decl_stmt|;
comment|/* pad out to 320 bytes for good measure */
block|}
name|dsl_dataset_phys_t
typedef|;
typedef|typedef
struct|struct
name|dsl_dataset
block|{
name|dmu_buf_user_t
name|ds_dbu
decl_stmt|;
name|rrwlock_t
name|ds_bp_rwlock
decl_stmt|;
comment|/* Protects ds_phys->ds_bp */
comment|/* Immutable: */
name|struct
name|dsl_dir
modifier|*
name|ds_dir
decl_stmt|;
name|dmu_buf_t
modifier|*
name|ds_dbuf
decl_stmt|;
name|uint64_t
name|ds_object
decl_stmt|;
name|uint64_t
name|ds_fsid_guid
decl_stmt|;
name|boolean_t
name|ds_is_snapshot
decl_stmt|;
comment|/* only used in syncing context, only valid for non-snapshots: */
name|struct
name|dsl_dataset
modifier|*
name|ds_prev
decl_stmt|;
name|uint64_t
name|ds_bookmarks
decl_stmt|;
comment|/* DMU_OTN_ZAP_METADATA */
comment|/* has internal locking: */
name|dsl_deadlist_t
name|ds_deadlist
decl_stmt|;
name|bplist_t
name|ds_pending_deadlist
decl_stmt|;
comment|/* protected by lock on pool's dp_dirty_datasets list */
name|txg_node_t
name|ds_dirty_link
decl_stmt|;
name|list_node_t
name|ds_synced_link
decl_stmt|;
comment|/* 	 * ds_phys->ds_<accounting> is also protected by ds_lock. 	 * Protected by ds_lock: 	 */
name|kmutex_t
name|ds_lock
decl_stmt|;
name|objset_t
modifier|*
name|ds_objset
decl_stmt|;
name|uint64_t
name|ds_userrefs
decl_stmt|;
name|void
modifier|*
name|ds_owner
decl_stmt|;
comment|/* 	 * Long holds prevent the ds from being destroyed; they allow the 	 * ds to remain held even after dropping the dp_config_rwlock. 	 * Owning counts as a long hold.  See the comments above 	 * dsl_pool_hold() for details. 	 */
name|refcount_t
name|ds_longholds
decl_stmt|;
comment|/* no locking; only for making guesses */
name|uint64_t
name|ds_trysnap_txg
decl_stmt|;
comment|/* for objset_open() */
name|kmutex_t
name|ds_opening_lock
decl_stmt|;
name|uint64_t
name|ds_reserved
decl_stmt|;
comment|/* cached refreservation */
name|uint64_t
name|ds_quota
decl_stmt|;
comment|/* cached refquota */
name|kmutex_t
name|ds_sendstream_lock
decl_stmt|;
name|list_t
name|ds_sendstreams
decl_stmt|;
comment|/* 	 * When in the middle of a resumable receive, tracks how much 	 * progress we have made. 	 */
name|uint64_t
name|ds_resume_object
index|[
name|TXG_SIZE
index|]
decl_stmt|;
name|uint64_t
name|ds_resume_offset
index|[
name|TXG_SIZE
index|]
decl_stmt|;
name|uint64_t
name|ds_resume_bytes
index|[
name|TXG_SIZE
index|]
decl_stmt|;
comment|/* Protected by our dsl_dir's dd_lock */
name|list_t
name|ds_prop_cbs
decl_stmt|;
comment|/* 	 * For ZFEATURE_FLAG_PER_DATASET features, set if this dataset 	 * uses this feature. 	 */
name|uint8_t
name|ds_feature_inuse
index|[
name|SPA_FEATURES
index|]
decl_stmt|;
comment|/* 	 * Set if we need to activate the feature on this dataset this txg 	 * (used only in syncing context). 	 */
name|uint8_t
name|ds_feature_activation_needed
index|[
name|SPA_FEATURES
index|]
decl_stmt|;
comment|/* Protected by ds_lock; keep at end of struct for better locality */
name|char
name|ds_snapname
index|[
name|ZFS_MAX_DATASET_NAME_LEN
index|]
decl_stmt|;
block|}
name|dsl_dataset_t
typedef|;
specifier|inline
name|dsl_dataset_phys_t
modifier|*
name|dsl_dataset_phys
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
block|{
return|return
operator|(
name|ds
operator|->
name|ds_dbuf
operator|->
name|db_data
operator|)
return|;
block|}
comment|/*  * The max length of a temporary tag prefix is the number of hex digits  * required to express UINT64_MAX plus one for the hyphen.  */
define|#
directive|define
name|MAX_TAG_PREFIX_LEN
value|17
define|#
directive|define
name|dsl_dataset_is_snapshot
parameter_list|(
name|ds
parameter_list|)
define|\
value|(dsl_dataset_phys(ds)->ds_num_children != 0)
define|#
directive|define
name|DS_UNIQUE_IS_ACCURATE
parameter_list|(
name|ds
parameter_list|)
define|\
value|((dsl_dataset_phys(ds)->ds_flags& DS_FLAG_UNIQUE_ACCURATE) != 0)
name|int
name|dsl_dataset_hold
parameter_list|(
name|struct
name|dsl_pool
modifier|*
name|dp
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_dataset_t
modifier|*
modifier|*
name|dsp
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dataset_try_add_ref
parameter_list|(
name|struct
name|dsl_pool
modifier|*
name|dp
parameter_list|,
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_hold_obj
parameter_list|(
name|struct
name|dsl_pool
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|dsobj
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_dataset_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_rele
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_own
parameter_list|(
name|struct
name|dsl_pool
modifier|*
name|dp
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_dataset_t
modifier|*
modifier|*
name|dsp
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_own_obj
parameter_list|(
name|struct
name|dsl_pool
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|dsobj
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_dataset_t
modifier|*
modifier|*
name|dsp
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_disown
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_name
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dataset_tryown
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_namelen
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dataset_has_owner
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_dataset_create_sync
parameter_list|(
name|dsl_dir_t
modifier|*
name|pds
parameter_list|,
specifier|const
name|char
modifier|*
name|lastname
parameter_list|,
name|dsl_dataset_t
modifier|*
name|origin
parameter_list|,
name|uint64_t
name|flags
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_dataset_create_sync_dd
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|,
name|dsl_dataset_t
modifier|*
name|origin
parameter_list|,
name|uint64_t
name|flags
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_snapshot
parameter_list|(
name|nvlist_t
modifier|*
name|snaps
parameter_list|,
name|nvlist_t
modifier|*
name|props
parameter_list|,
name|nvlist_t
modifier|*
name|errors
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_promote
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|conflsnap
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_clone_swap
parameter_list|(
name|dsl_dataset_t
modifier|*
name|clone
parameter_list|,
name|dsl_dataset_t
modifier|*
name|origin_head
parameter_list|,
name|boolean_t
name|force
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_rename_snapshot
parameter_list|(
specifier|const
name|char
modifier|*
name|fsname
parameter_list|,
specifier|const
name|char
modifier|*
name|oldsnapname
parameter_list|,
specifier|const
name|char
modifier|*
name|newsnapname
parameter_list|,
name|boolean_t
name|recursive
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_snapshot_tmp
parameter_list|(
specifier|const
name|char
modifier|*
name|fsname
parameter_list|,
specifier|const
name|char
modifier|*
name|snapname
parameter_list|,
name|minor_t
name|cleanup_minor
parameter_list|,
specifier|const
name|char
modifier|*
name|htag
parameter_list|)
function_decl|;
name|blkptr_t
modifier|*
name|dsl_dataset_get_blkptr
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|spa_t
modifier|*
name|dsl_dataset_get_spa
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dataset_modified_since_snap
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|dsl_dataset_t
modifier|*
name|snap
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_sync
parameter_list|(
name|dsl_dataset_t
modifier|*
name|os
parameter_list|,
name|zio_t
modifier|*
name|zio
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_sync_done
parameter_list|(
name|dsl_dataset_t
modifier|*
name|os
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_block_born
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_block_kill
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|boolean_t
name|async
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_dirty
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_stats
parameter_list|(
name|dsl_dataset_t
modifier|*
name|os
parameter_list|,
name|nvlist_t
modifier|*
name|nv
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_fast_stat
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|dmu_objset_stats_t
modifier|*
name|stat
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_space
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|uint64_t
modifier|*
name|refdbytesp
parameter_list|,
name|uint64_t
modifier|*
name|availbytesp
parameter_list|,
name|uint64_t
modifier|*
name|usedobjsp
parameter_list|,
name|uint64_t
modifier|*
name|availobjsp
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_dataset_fsid_guid
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_space_written
parameter_list|(
name|dsl_dataset_t
modifier|*
name|oldsnap
parameter_list|,
name|dsl_dataset_t
modifier|*
name|new
parameter_list|,
name|uint64_t
modifier|*
name|usedp
parameter_list|,
name|uint64_t
modifier|*
name|compp
parameter_list|,
name|uint64_t
modifier|*
name|uncompp
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_space_wouldfree
parameter_list|(
name|dsl_dataset_t
modifier|*
name|firstsnap
parameter_list|,
name|dsl_dataset_t
modifier|*
name|last
parameter_list|,
name|uint64_t
modifier|*
name|usedp
parameter_list|,
name|uint64_t
modifier|*
name|compp
parameter_list|,
name|uint64_t
modifier|*
name|uncompp
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dataset_is_dirty
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|int
name|dsl_dsobj_to_dsname
parameter_list|(
name|char
modifier|*
name|pname
parameter_list|,
name|uint64_t
name|obj
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_check_quota
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|boolean_t
name|check_quota
parameter_list|,
name|uint64_t
name|asize
parameter_list|,
name|uint64_t
name|inflight
parameter_list|,
name|uint64_t
modifier|*
name|used
parameter_list|,
name|uint64_t
modifier|*
name|ref_rsrv
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_set_refquota
parameter_list|(
specifier|const
name|char
modifier|*
name|dsname
parameter_list|,
name|zprop_source_t
name|source
parameter_list|,
name|uint64_t
name|quota
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_set_refreservation
parameter_list|(
specifier|const
name|char
modifier|*
name|dsname
parameter_list|,
name|zprop_source_t
name|source
parameter_list|,
name|uint64_t
name|reservation
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dataset_is_before
parameter_list|(
name|dsl_dataset_t
modifier|*
name|later
parameter_list|,
name|dsl_dataset_t
modifier|*
name|earlier
parameter_list|,
name|uint64_t
name|earlier_txg
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_long_hold
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_long_rele
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dataset_long_held
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_clone_swap_check_impl
parameter_list|(
name|dsl_dataset_t
modifier|*
name|clone
parameter_list|,
name|dsl_dataset_t
modifier|*
name|origin_head
parameter_list|,
name|boolean_t
name|force
parameter_list|,
name|void
modifier|*
name|owner
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_clone_swap_sync_impl
parameter_list|(
name|dsl_dataset_t
modifier|*
name|clone
parameter_list|,
name|dsl_dataset_t
modifier|*
name|origin_head
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_snapshot_check_impl
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
specifier|const
name|char
modifier|*
name|snapname
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|boolean_t
name|recv
parameter_list|,
name|uint64_t
name|cnt
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_snapshot_sync_impl
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
specifier|const
name|char
modifier|*
name|snapname
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_remove_from_next_clones
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|uint64_t
name|obj
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_recalc_head_uniq
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_get_snapname
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_snap_lookup
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|uint64_t
modifier|*
name|value
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_snap_remove
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|boolean_t
name|adj_cnt
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_set_refreservation_sync_impl
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|zprop_source_t
name|source
parameter_list|,
name|uint64_t
name|value
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_zapify
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dataset_is_zapified
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|boolean_t
name|dsl_dataset_has_resume_receive_state
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_rollback
parameter_list|(
specifier|const
name|char
modifier|*
name|fsname
parameter_list|,
name|void
modifier|*
name|owner
parameter_list|,
name|nvlist_t
modifier|*
name|result
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_deactivate_feature
parameter_list|(
name|uint64_t
name|dsobj
parameter_list|,
name|spa_feature_t
name|f
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|ZFS_DEBUG
define|#
directive|define
name|dprintf_ds
parameter_list|(
name|ds
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|do { \ 	if (zfs_flags& ZFS_DEBUG_DPRINTF) { \ 	char *__ds_name = kmem_alloc(ZFS_MAX_DATASET_NAME_LEN, KM_SLEEP); \ 	dsl_dataset_name(ds, __ds_name); \ 	dprintf("ds=%s " fmt, __ds_name, __VA_ARGS__); \ 	kmem_free(__ds_name, ZFS_MAX_DATASET_NAME_LEN); \ 	} \ _NOTE(CONSTCOND) } while (0)
else|#
directive|else
define|#
directive|define
name|dprintf_ds
parameter_list|(
name|dd
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_DSL_DATASET_H */
end_comment

end_unit

