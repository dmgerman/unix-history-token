begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2012, 2014 by Delphix. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_BPOBJ_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_BPOBJ_H
end_define

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/spa.h>
end_include

begin_include
include|#
directive|include
file|<sys/txg.h>
end_include

begin_include
include|#
directive|include
file|<sys/zio.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
struct|struct
name|bpobj_phys
block|{
comment|/* 	 * This is the bonus buffer for the dead lists.  The object's 	 * contents is an array of bpo_entries blkptr_t's, representing 	 * a total of bpo_bytes physical space. 	 */
name|uint64_t
name|bpo_num_blkptrs
decl_stmt|;
name|uint64_t
name|bpo_bytes
decl_stmt|;
name|uint64_t
name|bpo_comp
decl_stmt|;
name|uint64_t
name|bpo_uncomp
decl_stmt|;
name|uint64_t
name|bpo_subobjs
decl_stmt|;
name|uint64_t
name|bpo_num_subobjs
decl_stmt|;
block|}
name|bpobj_phys_t
typedef|;
define|#
directive|define
name|BPOBJ_SIZE_V0
value|(2 * sizeof (uint64_t))
define|#
directive|define
name|BPOBJ_SIZE_V1
value|(4 * sizeof (uint64_t))
typedef|typedef
struct|struct
name|bpobj
block|{
name|kmutex_t
name|bpo_lock
decl_stmt|;
name|objset_t
modifier|*
name|bpo_os
decl_stmt|;
name|uint64_t
name|bpo_object
decl_stmt|;
name|int
name|bpo_epb
decl_stmt|;
name|uint8_t
name|bpo_havecomp
decl_stmt|;
name|uint8_t
name|bpo_havesubobj
decl_stmt|;
name|bpobj_phys_t
modifier|*
name|bpo_phys
decl_stmt|;
name|dmu_buf_t
modifier|*
name|bpo_dbuf
decl_stmt|;
name|dmu_buf_t
modifier|*
name|bpo_cached_dbuf
decl_stmt|;
block|}
name|bpobj_t
typedef|;
typedef|typedef
name|int
name|bpobj_itor_t
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|uint64_t
name|bpobj_alloc
parameter_list|(
name|objset_t
modifier|*
name|mos
parameter_list|,
name|int
name|blocksize
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|uint64_t
name|bpobj_alloc_empty
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|int
name|blocksize
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|bpobj_free
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
name|obj
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|bpobj_decr_empty
parameter_list|(
name|objset_t
modifier|*
name|os
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|bpobj_open
parameter_list|(
name|bpobj_t
modifier|*
name|bpo
parameter_list|,
name|objset_t
modifier|*
name|mos
parameter_list|,
name|uint64_t
name|object
parameter_list|)
function_decl|;
name|void
name|bpobj_close
parameter_list|(
name|bpobj_t
modifier|*
name|bpo
parameter_list|)
function_decl|;
name|int
name|bpobj_iterate
parameter_list|(
name|bpobj_t
modifier|*
name|bpo
parameter_list|,
name|bpobj_itor_t
name|func
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|bpobj_iterate_nofree
parameter_list|(
name|bpobj_t
modifier|*
name|bpo
parameter_list|,
name|bpobj_itor_t
name|func
parameter_list|,
name|void
modifier|*
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|bpobj_enqueue_subobj
parameter_list|(
name|bpobj_t
modifier|*
name|bpo
parameter_list|,
name|uint64_t
name|subobj
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|bpobj_enqueue
parameter_list|(
name|bpobj_t
modifier|*
name|bpo
parameter_list|,
specifier|const
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|bpobj_space
parameter_list|(
name|bpobj_t
modifier|*
name|bpo
parameter_list|,
name|uint64_t
modifier|*
name|usedp
parameter_list|,
name|uint64_t
modifier|*
name|compp
parameter_list|,
name|uint64_t
modifier|*
name|uncompp
parameter_list|)
function_decl|;
name|int
name|bpobj_space_range
parameter_list|(
name|bpobj_t
modifier|*
name|bpo
parameter_list|,
name|uint64_t
name|mintxg
parameter_list|,
name|uint64_t
name|maxtxg
parameter_list|,
name|uint64_t
modifier|*
name|usedp
parameter_list|,
name|uint64_t
modifier|*
name|compp
parameter_list|,
name|uint64_t
modifier|*
name|uncompp
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_BPOBJ_H */
end_comment

end_unit

