begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_SA_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_SA_H
end_define

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/uio.h>
end_include

begin_comment
comment|/*  * Currently available byteswap functions.  * If it all possible new attributes should used  * one of the already defined byteswap functions.  * If a new byteswap function is added then the  * ZPL/Pool version will need to be bumped.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|sa_bswap_type
block|{
name|SA_UINT64_ARRAY
block|,
name|SA_UINT32_ARRAY
block|,
name|SA_UINT16_ARRAY
block|,
name|SA_UINT8_ARRAY
block|,
name|SA_ACL
block|, }
name|sa_bswap_type_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|sa_attr_type_t
typedef|;
end_typedef

begin_comment
comment|/*  * Attribute to register support for.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|sa_attr_reg
block|{
name|char
modifier|*
name|sa_name
decl_stmt|;
comment|/* attribute name */
name|uint16_t
name|sa_length
decl_stmt|;
name|sa_bswap_type_t
name|sa_byteswap
decl_stmt|;
comment|/* bswap functon enum */
name|sa_attr_type_t
name|sa_attr
decl_stmt|;
comment|/* filled in during registration */
block|}
name|sa_attr_reg_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|sa_data_locator_t
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
parameter_list|,
name|uint32_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|boolean_t
parameter_list|,
name|void
modifier|*
name|userptr
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * array of attributes to store.  *  * This array should be treated as opaque/private data.  * The SA_BULK_ADD_ATTR() macro should be used for manipulating  * the array.  *  * When sa_replace_all_by_template() is used the attributes  * will be stored in the order defined in the array, except that  * the attributes may be split between the bonus and the spill buffer  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|sa_bulk_attr
block|{
name|void
modifier|*
name|sa_data
decl_stmt|;
name|sa_data_locator_t
modifier|*
name|sa_data_func
decl_stmt|;
name|uint16_t
name|sa_length
decl_stmt|;
name|sa_attr_type_t
name|sa_attr
decl_stmt|;
comment|/* the following are private to the sa framework */
name|void
modifier|*
name|sa_addr
decl_stmt|;
name|uint16_t
name|sa_buftype
decl_stmt|;
name|uint16_t
name|sa_size
decl_stmt|;
block|}
name|sa_bulk_attr_t
typedef|;
end_typedef

begin_comment
comment|/*  * special macro for adding entries for bulk attr support  * bulk - sa_bulk_attr_t  * count - integer that will be incremented during each add  * attr - attribute to manipulate  * func - function for accessing data.  * data - pointer to data.  * len - length of data  */
end_comment

begin_define
define|#
directive|define
name|SA_ADD_BULK_ATTR
parameter_list|(
name|b
parameter_list|,
name|idx
parameter_list|,
name|attr
parameter_list|,
name|func
parameter_list|,
name|data
parameter_list|,
name|len
parameter_list|)
define|\
value|{ \ 	b[idx].sa_attr = attr;\ 	b[idx].sa_data_func = func; \ 	b[idx].sa_data = data; \ 	b[idx++].sa_length = len; \ }
end_define

begin_typedef
typedef|typedef
name|struct
name|sa_os
name|sa_os_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|sa_handle_type
block|{
name|SA_HDL_SHARED
block|,
name|SA_HDL_PRIVATE
block|}
name|sa_handle_type_t
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|sa_handle
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|void
modifier|*
name|sa_lookup_tab_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|sa_handle
name|sa_handle_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|sa_update_cb_t
function_decl|)
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|int
name|sa_handle_get
parameter_list|(
name|objset_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|void
modifier|*
name|userp
parameter_list|,
name|sa_handle_type_t
parameter_list|,
name|sa_handle_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_handle_get_from_db
parameter_list|(
name|objset_t
modifier|*
parameter_list|,
name|dmu_buf_t
modifier|*
parameter_list|,
name|void
modifier|*
name|userp
parameter_list|,
name|sa_handle_type_t
parameter_list|,
name|sa_handle_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_handle_destroy
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_buf_hold
parameter_list|(
name|objset_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|dmu_buf_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_buf_rele
parameter_list|(
name|dmu_buf_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_lookup
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_attr_type_t
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|uint32_t
name|buflen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_update
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_attr_type_t
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|uint32_t
name|buflen
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_remove
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_attr_type_t
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_bulk_lookup
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_bulk_attr_t
modifier|*
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_bulk_lookup_locked
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_bulk_attr_t
modifier|*
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_bulk_update
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_bulk_attr_t
modifier|*
parameter_list|,
name|int
name|count
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_size
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_attr_type_t
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_update_from_cb
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_attr_type_t
parameter_list|,
name|uint32_t
name|buflen
parameter_list|,
name|sa_data_locator_t
modifier|*
parameter_list|,
name|void
modifier|*
name|userdata
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_object_info
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|dmu_object_info_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_object_size
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|uint32_t
modifier|*
parameter_list|,
name|u_longlong_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|sa_get_userdata
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_set_userp
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|dmu_buf_t
modifier|*
name|sa_get_db
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|sa_handle_object
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|boolean_t
name|sa_attr_would_spill
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_attr_type_t
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_register_update_callback
parameter_list|(
name|objset_t
modifier|*
parameter_list|,
name|sa_update_cb_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_setup
parameter_list|(
name|objset_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|sa_attr_reg_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sa_attr_type_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_tear_down
parameter_list|(
name|objset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_replace_all_by_template
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_bulk_attr_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_replace_all_by_template_locked
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_bulk_attr_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|boolean_t
name|sa_enabled
parameter_list|(
name|objset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_cache_init
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_cache_fini
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_set_sa_object
parameter_list|(
name|objset_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sa_hdrsize
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_handle_lock
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sa_handle_unlock
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function_decl
name|int
name|sa_lookup_uio
parameter_list|(
name|sa_handle_t
modifier|*
parameter_list|,
name|sa_attr_type_t
parameter_list|,
name|uio_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_SA_H */
end_comment

end_unit

