begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ** $Id: lcode.h,v 1.58.1.1 2013/04/12 18:48:47 roberto Exp $ ** Code generator for Lua ** See Copyright Notice in lua.h */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lcode_h
end_ifndef

begin_define
define|#
directive|define
name|lcode_h
end_define

begin_include
include|#
directive|include
file|"llex.h"
end_include

begin_include
include|#
directive|include
file|"lobject.h"
end_include

begin_include
include|#
directive|include
file|"lopcodes.h"
end_include

begin_include
include|#
directive|include
file|"lparser.h"
end_include

begin_comment
comment|/* ** Marks the end of a patch list. It is an invalid value both as an absolute ** address, and as a list link (would link an element to itself). */
end_comment

begin_define
define|#
directive|define
name|NO_JUMP
value|(-1)
end_define

begin_comment
comment|/* ** grep "ORDER OPR" if you change these enums  (ORDER OP) */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|BinOpr
block|{
name|OPR_ADD
block|,
name|OPR_SUB
block|,
name|OPR_MUL
block|,
name|OPR_DIV
block|,
name|OPR_MOD
block|,
name|OPR_POW
block|,
name|OPR_CONCAT
block|,
name|OPR_EQ
block|,
name|OPR_LT
block|,
name|OPR_LE
block|,
name|OPR_NE
block|,
name|OPR_GT
block|,
name|OPR_GE
block|,
name|OPR_AND
block|,
name|OPR_OR
block|,
name|OPR_NOBINOPR
block|}
name|BinOpr
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|UnOpr
block|{
name|OPR_MINUS
block|,
name|OPR_NOT
block|,
name|OPR_LEN
block|,
name|OPR_NOUNOPR
block|}
name|UnOpr
typedef|;
end_typedef

begin_define
define|#
directive|define
name|getcode
parameter_list|(
name|fs
parameter_list|,
name|e
parameter_list|)
value|((fs)->f->code[(e)->u.info])
end_define

begin_define
define|#
directive|define
name|luaK_codeAsBx
parameter_list|(
name|fs
parameter_list|,
name|o
parameter_list|,
name|A
parameter_list|,
name|sBx
parameter_list|)
value|luaK_codeABx(fs,o,A,(sBx)+MAXARG_sBx)
end_define

begin_define
define|#
directive|define
name|luaK_setmultret
parameter_list|(
name|fs
parameter_list|,
name|e
parameter_list|)
value|luaK_setreturns(fs, e, LUA_MULTRET)
end_define

begin_define
define|#
directive|define
name|luaK_jumpto
parameter_list|(
name|fs
parameter_list|,
name|t
parameter_list|)
value|luaK_patchlist(fs, luaK_jump(fs), t)
end_define

begin_function_decl
name|LUAI_FUNC
name|int
name|luaK_codeABx
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|OpCode
name|o
parameter_list|,
name|int
name|A
parameter_list|,
name|unsigned
name|int
name|Bx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|int
name|luaK_codeABC
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|OpCode
name|o
parameter_list|,
name|int
name|A
parameter_list|,
name|int
name|B
parameter_list|,
name|int
name|C
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|int
name|luaK_codek
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|reg
parameter_list|,
name|int
name|k
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_fixline
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_nil
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_reserveregs
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_checkstack
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|int
name|luaK_stringK
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|TString
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|int
name|luaK_numberK
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|lua_Number
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_dischargevars
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|int
name|luaK_exp2anyreg
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_exp2anyregup
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_exp2nextreg
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_exp2val
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|int
name|luaK_exp2RK
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_self
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|,
name|expdesc
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_indexed
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|t
parameter_list|,
name|expdesc
modifier|*
name|k
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_goiftrue
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_goiffalse
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_storevar
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|var
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_setreturns
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|,
name|int
name|nresults
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_setoneret
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|expdesc
modifier|*
name|e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|int
name|luaK_jump
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_ret
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|nret
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_patchlist
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|list
parameter_list|,
name|int
name|target
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_patchtohere
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_patchclose
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|list
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_concat
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
modifier|*
name|l1
parameter_list|,
name|int
name|l2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|int
name|luaK_getlabel
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_prefix
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|UnOpr
name|op
parameter_list|,
name|expdesc
modifier|*
name|v
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_infix
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|BinOpr
name|op
parameter_list|,
name|expdesc
modifier|*
name|v
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_posfix
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|BinOpr
name|op
parameter_list|,
name|expdesc
modifier|*
name|v1
parameter_list|,
name|expdesc
modifier|*
name|v2
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LUAI_FUNC
name|void
name|luaK_setlist
parameter_list|(
name|FuncState
modifier|*
name|fs
parameter_list|,
name|int
name|base
parameter_list|,
name|int
name|nelems
parameter_list|,
name|int
name|tostore
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

