begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_FS_ZFS_ACL_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_FS_ZFS_ACL_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/cred.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<sys/acl.h>
end_include

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|znode_phys
struct_decl|;
define|#
directive|define
name|ACCESS_UNDETERMINED
value|-1
define|#
directive|define
name|ACE_SLOT_CNT
value|6
typedef|typedef
struct|struct
name|zfs_znode_acl
block|{
name|uint64_t
name|z_acl_extern_obj
decl_stmt|;
comment|/* ext acl pieces */
name|uint32_t
name|z_acl_count
decl_stmt|;
comment|/* Number of ACEs */
name|uint16_t
name|z_acl_version
decl_stmt|;
comment|/* acl version */
name|uint16_t
name|z_acl_pad
decl_stmt|;
comment|/* pad */
name|ace_t
name|z_ace_data
index|[
name|ACE_SLOT_CNT
index|]
decl_stmt|;
comment|/* 6 standard ACEs */
block|}
name|zfs_znode_acl_t
typedef|;
define|#
directive|define
name|ACL_DATA_ALLOCED
value|0x1
comment|/*  * Max ACL size is prepended deny for all entries + the  * canonical six tacked on * the end.  */
define|#
directive|define
name|MAX_ACL_SIZE
value|(MAX_ACL_ENTRIES * 2 + 6)
typedef|typedef
struct|struct
name|zfs_acl
block|{
name|int
name|z_slots
decl_stmt|;
comment|/* number of allocated slots for ACEs */
name|int
name|z_acl_count
decl_stmt|;
name|uint_t
name|z_state
decl_stmt|;
name|ace_t
modifier|*
name|z_acl
decl_stmt|;
block|}
name|zfs_acl_t
typedef|;
define|#
directive|define
name|ZFS_ACL_SIZE
parameter_list|(
name|aclcnt
parameter_list|)
value|(sizeof (ace_t) * (aclcnt))
comment|/*  * Property values for acl_mode and acl_inherit.  *  * acl_mode can take discard, noallow, groupmask and passthrough.  * whereas acl_inherit has secure instead of groupmask.  */
define|#
directive|define
name|ZFS_ACL_DISCARD
value|0
define|#
directive|define
name|ZFS_ACL_NOALLOW
value|1
define|#
directive|define
name|ZFS_ACL_GROUPMASK
value|2
define|#
directive|define
name|ZFS_ACL_PASSTHROUGH
value|3
define|#
directive|define
name|ZFS_ACL_SECURE
value|4
struct_decl|struct
name|znode
struct_decl|;
ifdef|#
directive|ifdef
name|_KERNEL
name|void
name|zfs_perm_init
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|struct
name|znode
modifier|*
parameter_list|,
name|int
parameter_list|,
name|vattr_t
modifier|*
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|TODO
name|int
name|zfs_getacl
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|vsecattr_t
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|zfs_mode_update
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|TODO
name|int
name|zfs_setacl
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|vsecattr_t
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|zfs_acl_rele
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|zfs_ace_byteswap
parameter_list|(
name|ace_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_zaccess
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|int
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_zaccess_rwx
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|mode_t
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_acl_access
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|int
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zfs_acl_chmod_setattr
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|dmu_tx_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zfs_zaccess_delete
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|struct
name|znode
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zfs_zaccess_rename
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|struct
name|znode
modifier|*
parameter_list|,
name|struct
name|znode
modifier|*
parameter_list|,
name|struct
name|znode
modifier|*
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
name|int
name|zfs_zaccess_v4_perm
parameter_list|(
name|struct
name|znode
modifier|*
parameter_list|,
name|int
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|zfs_acl_free
parameter_list|(
name|zfs_acl_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !ZFS_NO_ACL */
end_comment

end_unit

