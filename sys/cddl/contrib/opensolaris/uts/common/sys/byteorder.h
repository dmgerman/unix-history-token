begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_comment
comment|/*	Copyright (c) 1983, 1984, 1985, 1986, 1987, 1988, 1989 AT&T	*/
end_comment

begin_comment
comment|/*	  All Rights Reserved  	*/
end_comment

begin_comment
comment|/*  * University Copyright- Copyright (c) 1982, 1986, 1988  * The Regents of the University of California  * All Rights Reserved  *  * University Acknowledgment- Portions of this document are derived from  * software developed by the University of California, Berkeley, and its  * contributors.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_BYTEORDER_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_BYTEORDER_H
end_define

begin_include
include|#
directive|include
file|<sys/isa_defs.h>
end_include

begin_include
include|#
directive|include
file|<sys/int_types.h>
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|defined
argument_list|(
name|_ASM_INLINES
argument_list|)
operator|&&
expr|\
operator|(
name|defined
argument_list|(
name|__i386
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64
argument_list|)
operator|)
end_if

begin_include
include|#
directive|include
file|<asm/byteorder.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * macros for conversion between host and (internet) network byte order  */
if|#
directive|if
name|BYTE_ORDER
operator|==
name|_BIG_ENDIAN
operator|&&
operator|!
name|defined
argument_list|(
name|ntohl
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__lint
argument_list|)
comment|/* big-endian */
define|#
directive|define
name|ntohl
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|ntohs
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|htonl
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|htons
parameter_list|(
name|x
parameter_list|)
value|(x)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_XPG4_2
argument_list|)
operator|||
name|defined
argument_list|(
name|__EXTENSIONS__
argument_list|)
define|#
directive|define
name|ntohll
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|htonll
parameter_list|(
name|x
parameter_list|)
value|(x)
endif|#
directive|endif
comment|/* !_XPG4_2 || __EXTENSIONS__ */
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|ntohl
argument_list|)
comment|/* little-endian */
ifndef|#
directive|ifndef
name|_IN_PORT_T
define|#
directive|define
name|_IN_PORT_T
typedef|typedef
name|uint16_t
name|in_port_t
typedef|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_IN_ADDR_T
define|#
directive|define
name|_IN_ADDR_T
typedef|typedef
name|uint32_t
name|in_addr_t
typedef|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_XPG4_2
argument_list|)
operator|||
name|defined
argument_list|(
name|__EXTENSIONS__
argument_list|)
operator|||
name|defined
argument_list|(
name|_XPG5
argument_list|)
specifier|extern
name|uint32_t
name|htonl
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint16_t
name|htons
parameter_list|(
name|uint16_t
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|ntohl
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint16_t
name|ntohs
parameter_list|(
name|uint16_t
parameter_list|)
function_decl|;
else|#
directive|else
specifier|extern
name|in_addr_t
name|htonl
parameter_list|(
name|in_addr_t
parameter_list|)
function_decl|;
specifier|extern
name|in_port_t
name|htons
parameter_list|(
name|in_port_t
parameter_list|)
function_decl|;
specifier|extern
name|in_addr_t
name|ntohl
parameter_list|(
name|in_addr_t
parameter_list|)
function_decl|;
specifier|extern
name|in_port_t
name|ntohs
parameter_list|(
name|in_port_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* !_XPG4_2 || __EXTENSIONS__ || _XPG5 */
if|#
directive|if
name|defined
argument_list|(
name|_LP64
argument_list|)
operator|||
name|defined
argument_list|(
name|_LONGLONG_TYPE
argument_list|)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_XPG4_2
argument_list|)
operator|||
name|defined
argument_list|(
name|__EXTENSIONS__
argument_list|)
specifier|extern
name|uint64_t
name|htonll
parameter_list|(
name|uint64_t
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|ntohll
parameter_list|(
name|uint64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* !_XPG4_2 || __EXTENSIONS__ */
endif|#
directive|endif
comment|/* _LP64 || _LONGLONG_TYPE  */
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_XPG4_2
argument_list|)
operator|||
name|defined
argument_list|(
name|__EXTENSIONS__
argument_list|)
comment|/*  * Macros to reverse byte order  */
define|#
directive|define
name|BSWAP_8
parameter_list|(
name|x
parameter_list|)
value|((x)& 0xff)
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__i386
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__amd64
argument_list|)
define|#
directive|define
name|BSWAP_16
parameter_list|(
name|x
parameter_list|)
value|((BSWAP_8(x)<< 8) | BSWAP_8((x)>> 8))
define|#
directive|define
name|BSWAP_32
parameter_list|(
name|x
parameter_list|)
value|(((uint32_t)(x)<< 24) | \ 			(((uint32_t)(x)<< 8)& 0xff0000) | \ 			(((uint32_t)(x)>> 8)& 0xff00) | \ 			((uint32_t)(x)>> 24))
else|#
directive|else
comment|/* x86 */
define|#
directive|define
name|BSWAP_16
parameter_list|(
name|x
parameter_list|)
value|htons(x)
define|#
directive|define
name|BSWAP_32
parameter_list|(
name|x
parameter_list|)
value|htonl(x)
endif|#
directive|endif
comment|/* !__i386&& !__amd64 */
if|#
directive|if
name|defined
argument_list|(
name|_LP64
argument_list|)
operator|||
name|defined
argument_list|(
name|_LONGLONG_TYPE
argument_list|)
if|#
directive|if
operator|(
operator|!
name|defined
argument_list|(
name|__i386
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__amd64
argument_list|)
operator|)
define|#
directive|define
name|BSWAP_64
parameter_list|(
name|x
parameter_list|)
value|(((uint64_t)(x)<< 56) | \ 			(((uint64_t)(x)<< 40)& 0xff000000000000ULL) | \ 			(((uint64_t)(x)<< 24)& 0xff0000000000ULL) | \ 			(((uint64_t)(x)<< 8)& 0xff00000000ULL) | \ 			(((uint64_t)(x)>> 8)& 0xff000000ULL) | \ 			(((uint64_t)(x)>> 24)& 0xff0000ULL) | \ 			(((uint64_t)(x)>> 40)& 0xff00ULL) | \ 			((uint64_t)(x)>> 56))
else|#
directive|else
comment|/* x86 */
define|#
directive|define
name|BSWAP_64
parameter_list|(
name|x
parameter_list|)
value|htonll(x)
endif|#
directive|endif
comment|/* !__i386&& !__amd64 */
else|#
directive|else
comment|/* no uint64_t */
define|#
directive|define
name|BSWAP_64
parameter_list|(
name|x
parameter_list|)
value|((BSWAP_32(x)<< 32) | BSWAP_32((x)>> 32))
endif|#
directive|endif
comment|/* _LP64 || _LONGLONG_TYPE  */
define|#
directive|define
name|BMASK_8
parameter_list|(
name|x
parameter_list|)
value|((x)& 0xff)
define|#
directive|define
name|BMASK_16
parameter_list|(
name|x
parameter_list|)
value|((x)& 0xffff)
define|#
directive|define
name|BMASK_32
parameter_list|(
name|x
parameter_list|)
value|((x)& 0xffffffff)
define|#
directive|define
name|BMASK_64
parameter_list|(
name|x
parameter_list|)
value|(x)
comment|/*  * Macros to convert from a specific byte order to/from native byte order  */
if|#
directive|if
name|BYTE_ORDER
operator|==
name|_BIG_ENDIAN
define|#
directive|define
name|BE_8
parameter_list|(
name|x
parameter_list|)
value|BMASK_8(x)
define|#
directive|define
name|BE_16
parameter_list|(
name|x
parameter_list|)
value|BMASK_16(x)
define|#
directive|define
name|BE_32
parameter_list|(
name|x
parameter_list|)
value|BMASK_32(x)
define|#
directive|define
name|BE_64
parameter_list|(
name|x
parameter_list|)
value|BMASK_64(x)
define|#
directive|define
name|LE_8
parameter_list|(
name|x
parameter_list|)
value|BSWAP_8(x)
define|#
directive|define
name|LE_16
parameter_list|(
name|x
parameter_list|)
value|BSWAP_16(x)
define|#
directive|define
name|LE_32
parameter_list|(
name|x
parameter_list|)
value|BSWAP_32(x)
define|#
directive|define
name|LE_64
parameter_list|(
name|x
parameter_list|)
value|BSWAP_64(x)
else|#
directive|else
define|#
directive|define
name|LE_8
parameter_list|(
name|x
parameter_list|)
value|BMASK_8(x)
define|#
directive|define
name|LE_16
parameter_list|(
name|x
parameter_list|)
value|BMASK_16(x)
define|#
directive|define
name|LE_32
parameter_list|(
name|x
parameter_list|)
value|BMASK_32(x)
define|#
directive|define
name|LE_64
parameter_list|(
name|x
parameter_list|)
value|BMASK_64(x)
define|#
directive|define
name|BE_8
parameter_list|(
name|x
parameter_list|)
value|BSWAP_8(x)
define|#
directive|define
name|BE_16
parameter_list|(
name|x
parameter_list|)
value|BSWAP_16(x)
define|#
directive|define
name|BE_32
parameter_list|(
name|x
parameter_list|)
value|BSWAP_32(x)
define|#
directive|define
name|BE_64
parameter_list|(
name|x
parameter_list|)
value|BSWAP_64(x)
endif|#
directive|endif
endif|#
directive|endif
comment|/* !_XPG4_2 || __EXTENSIONS__ */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_BYTEORDER_H */
end_comment

end_unit

