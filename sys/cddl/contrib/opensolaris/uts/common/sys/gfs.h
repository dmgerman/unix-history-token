begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2004, 2010, Oracle and/or its affiliates. All rights reserved.  */
end_comment

begin_comment
comment|/*  * These are Consolidation Private interfaces and are subject to change.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_GFS_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_GFS_H
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/vnode.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/dirent.h>
end_include

begin_include
include|#
directive|include
file|<sys/extdirent.h>
end_include

begin_include
include|#
directive|include
file|<sys/uio.h>
end_include

begin_include
include|#
directive|include
file|<sys/list.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|GFS_CACHE_VNODE
value|0x1
typedef|typedef
struct|struct
name|gfs_dirent
block|{
name|char
modifier|*
name|gfse_name
decl_stmt|;
comment|/* entry name */
name|vnode_t
modifier|*
function_decl|(
modifier|*
name|gfse_ctor
function_decl|)
parameter_list|(
name|vnode_t
modifier|*
parameter_list|)
function_decl|;
comment|/* constructor */
name|int
name|gfse_flags
decl_stmt|;
comment|/* flags */
name|list_node_t
name|gfse_link
decl_stmt|;
comment|/* dynamic list */
name|vnode_t
modifier|*
name|gfse_vnode
decl_stmt|;
comment|/* cached vnode */
block|}
name|gfs_dirent_t
typedef|;
typedef|typedef
enum|enum
name|gfs_type
block|{
name|GFS_DIR
block|,
name|GFS_FILE
block|}
name|gfs_type_t
typedef|;
typedef|typedef
struct|struct
name|gfs_file
block|{
name|vnode_t
modifier|*
name|gfs_vnode
decl_stmt|;
comment|/* current vnode */
name|vnode_t
modifier|*
name|gfs_parent
decl_stmt|;
comment|/* parent vnode */
name|size_t
name|gfs_size
decl_stmt|;
comment|/* size of private data structure */
name|gfs_type_t
name|gfs_type
decl_stmt|;
comment|/* type of vnode */
name|int
name|gfs_index
decl_stmt|;
comment|/* index in parent dir */
name|ino64_t
name|gfs_ino
decl_stmt|;
comment|/* inode for this vnode */
block|}
name|gfs_file_t
typedef|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|gfs_readdir_cb
function_decl|)
parameter_list|(
name|vnode_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|offset_t
modifier|*
parameter_list|,
name|offset_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|gfs_lookup_cb
function_decl|)
parameter_list|(
name|vnode_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|vnode_t
modifier|*
modifier|*
parameter_list|,
name|ino64_t
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|pathname_t
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|ino64_t
function_decl|(
modifier|*
name|gfs_inode_cb
function_decl|)
parameter_list|(
name|vnode_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|gfs_dir
block|{
name|gfs_file_t
name|gfsd_file
decl_stmt|;
comment|/* generic file attributes */
name|gfs_dirent_t
modifier|*
name|gfsd_static
decl_stmt|;
comment|/* statically defined entries */
name|int
name|gfsd_nstatic
decl_stmt|;
comment|/* # static entries */
name|kmutex_t
name|gfsd_lock
decl_stmt|;
comment|/* protects entries */
name|int
name|gfsd_maxlen
decl_stmt|;
comment|/* maximum name length */
name|gfs_readdir_cb
name|gfsd_readdir
decl_stmt|;
comment|/* readdir() callback */
name|gfs_lookup_cb
name|gfsd_lookup
decl_stmt|;
comment|/* lookup() callback */
name|gfs_inode_cb
name|gfsd_inode
decl_stmt|;
comment|/* get an inode number */
block|}
name|gfs_dir_t
typedef|;
struct_decl|struct
name|vfs
struct_decl|;
specifier|extern
name|vnode_t
modifier|*
name|gfs_file_create
parameter_list|(
name|size_t
parameter_list|,
name|vnode_t
modifier|*
parameter_list|,
name|vfs_t
modifier|*
parameter_list|,
name|vnodeops_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|vnode_t
modifier|*
name|gfs_dir_create
parameter_list|(
name|size_t
parameter_list|,
name|vnode_t
modifier|*
parameter_list|,
name|vfs_t
modifier|*
parameter_list|,
name|vnodeops_t
modifier|*
parameter_list|,
name|gfs_dirent_t
modifier|*
parameter_list|,
name|gfs_inode_cb
parameter_list|,
name|int
parameter_list|,
name|gfs_readdir_cb
parameter_list|,
name|gfs_lookup_cb
parameter_list|)
function_decl|;
specifier|extern
name|vnode_t
modifier|*
name|gfs_root_create
parameter_list|(
name|size_t
parameter_list|,
name|vfs_t
modifier|*
parameter_list|,
name|vnodeops_t
modifier|*
parameter_list|,
name|ino64_t
parameter_list|,
name|gfs_dirent_t
modifier|*
parameter_list|,
name|gfs_inode_cb
parameter_list|,
name|int
parameter_list|,
name|gfs_readdir_cb
parameter_list|,
name|gfs_lookup_cb
parameter_list|)
function_decl|;
specifier|extern
name|vnode_t
modifier|*
name|gfs_root_create_file
parameter_list|(
name|size_t
parameter_list|,
name|struct
name|vfs
modifier|*
parameter_list|,
name|vnodeops_t
modifier|*
parameter_list|,
name|ino64_t
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|gfs_file_inactive
parameter_list|(
name|vnode_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|gfs_dir_inactive
parameter_list|(
name|vnode_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_dir_case_lookup
parameter_list|(
name|vnode_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|vnode_t
modifier|*
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|pathname_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_dir_lookup
parameter_list|(
name|vnode_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|vnode_t
modifier|*
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|pathname_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_vop_lookup
parameter_list|(
name|vnode_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|vnode_t
modifier|*
modifier|*
parameter_list|,
name|pathname_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|vnode_t
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|caller_context_t
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|pathname_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_dir_readdir
parameter_list|(
name|vnode_t
modifier|*
parameter_list|,
name|uio_t
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|u_long
modifier|*
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
define|#
directive|define
name|gfs_dir_lock
parameter_list|(
name|gd
parameter_list|)
value|mutex_enter(&(gd)->gfsd_lock)
define|#
directive|define
name|gfs_dir_unlock
parameter_list|(
name|gd
parameter_list|)
value|mutex_exit(&(gd)->gfsd_lock)
define|#
directive|define
name|GFS_DIR_LOCKED
parameter_list|(
name|gd
parameter_list|)
value|MUTEX_HELD(&(gd)->gfsd_lock)
define|#
directive|define
name|gfs_file_parent
parameter_list|(
name|vp
parameter_list|)
value|(((gfs_file_t *)(vp)->v_data)->gfs_parent)
define|#
directive|define
name|gfs_file_index
parameter_list|(
name|vp
parameter_list|)
value|(((gfs_file_t *)(vp)->v_data)->gfs_index)
define|#
directive|define
name|gfs_file_set_index
parameter_list|(
name|vp
parameter_list|,
name|idx
parameter_list|)
define|\
value|(((gfs_file_t *)(vp)->v_data)->gfs_index = (idx))
define|#
directive|define
name|gfs_file_inode
parameter_list|(
name|vp
parameter_list|)
value|(((gfs_file_t *)(vp)->v_data)->gfs_ino)
define|#
directive|define
name|gfs_file_set_inode
parameter_list|(
name|vp
parameter_list|,
name|ino
parameter_list|)
define|\
value|(((gfs_file_t *)(vp)->v_data)->gfs_ino = (ino))
typedef|typedef
struct|struct
name|gfs_readdir_state
block|{
name|void
modifier|*
name|grd_dirent
decl_stmt|;
comment|/* directory entry buffer */
name|size_t
name|grd_namlen
decl_stmt|;
comment|/* max file name length */
name|size_t
name|grd_ureclen
decl_stmt|;
comment|/* exported record size */
name|ssize_t
name|grd_oresid
decl_stmt|;
comment|/* original uio_resid */
name|ino64_t
name|grd_parent
decl_stmt|;
comment|/* inode of parent */
name|ino64_t
name|grd_self
decl_stmt|;
comment|/* inode of self */
name|int
name|grd_flags
decl_stmt|;
comment|/* flags from VOP_READDIR */
block|}
name|gfs_readdir_state_t
typedef|;
specifier|extern
name|int
name|gfs_readdir_init
parameter_list|(
name|gfs_readdir_state_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|uio_t
modifier|*
parameter_list|,
name|ino64_t
parameter_list|,
name|ino64_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_readdir_emit
parameter_list|(
name|gfs_readdir_state_t
modifier|*
parameter_list|,
name|uio_t
modifier|*
parameter_list|,
name|offset_t
parameter_list|,
name|ino64_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|u_long
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_readdir_pred
parameter_list|(
name|gfs_readdir_state_t
modifier|*
parameter_list|,
name|uio_t
modifier|*
parameter_list|,
name|offset_t
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|u_long
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_readdir_fini
parameter_list|(
name|gfs_readdir_state_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_get_parent_ino
parameter_list|(
name|vnode_t
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|,
name|caller_context_t
modifier|*
parameter_list|,
name|ino64_t
modifier|*
parameter_list|,
name|ino64_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Objects with real extended attributes will get their . and ..  * readdir entries from the real xattr directory. GFS_STATIC_ENTRY_OFFSET  * lets us skip right to the static entries in the GFS directory.  */
define|#
directive|define
name|GFS_STATIC_ENTRY_OFFSET
value|((offset_t)2)
specifier|extern
name|int
name|gfs_lookup_dot
parameter_list|(
name|vnode_t
modifier|*
modifier|*
parameter_list|,
name|vnode_t
modifier|*
parameter_list|,
name|vnode_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_vop_readdir
parameter_list|(
name|struct
name|vop_readdir_args
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|gfs_vop_reclaim
parameter_list|(
name|struct
name|vop_reclaim_args
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_GFS_H */
end_comment

end_unit

