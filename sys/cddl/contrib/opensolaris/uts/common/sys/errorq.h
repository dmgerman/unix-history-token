begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License, Version 1.0 only  * (the "License").  You may not use this file except in compliance  * with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ERRORQ_H
end_ifndef

begin_define
define|#
directive|define
name|_ERRORQ_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<sys/nvpair.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|struct
name|errorq
name|errorq_t
typedef|;
typedef|typedef
name|struct
name|errorq_elem
name|errorq_elem_t
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|errorq_func_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|errorq_elem_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Public flags for errorq_create(): bit range 0-15  */
define|#
directive|define
name|ERRORQ_VITAL
value|0x0001
comment|/* drain queue automatically on system reset */
comment|/*  * Public flags for errorq_dispatch():  */
define|#
directive|define
name|ERRORQ_ASYNC
value|0
comment|/* schedule async queue drain for caller */
define|#
directive|define
name|ERRORQ_SYNC
value|1
comment|/* do not schedule drain; caller will drain */
ifdef|#
directive|ifdef
name|_KERNEL
specifier|extern
name|errorq_t
modifier|*
name|errorq_create
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|errorq_func_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|ulong_t
parameter_list|,
name|size_t
parameter_list|,
name|uint_t
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|errorq_t
modifier|*
name|errorq_nvcreate
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|errorq_func_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|ulong_t
parameter_list|,
name|size_t
parameter_list|,
name|uint_t
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|errorq_destroy
parameter_list|(
name|errorq_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|errorq_dispatch
parameter_list|(
name|errorq_t
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|errorq_drain
parameter_list|(
name|errorq_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|errorq_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|errorq_panic
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|errorq_elem_t
modifier|*
name|errorq_reserve
parameter_list|(
name|errorq_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|errorq_commit
parameter_list|(
name|errorq_t
modifier|*
parameter_list|,
name|errorq_elem_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|errorq_cancel
parameter_list|(
name|errorq_t
modifier|*
parameter_list|,
name|errorq_elem_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|errorq_elem_nvl
parameter_list|(
name|errorq_t
modifier|*
parameter_list|,
specifier|const
name|errorq_elem_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|nv_alloc_t
modifier|*
name|errorq_elem_nva
parameter_list|(
name|errorq_t
modifier|*
parameter_list|,
specifier|const
name|errorq_elem_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|errorq_elem_dup
parameter_list|(
name|errorq_t
modifier|*
parameter_list|,
specifier|const
name|errorq_elem_t
modifier|*
parameter_list|,
name|errorq_elem_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|errorq_dump
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* _KERNEL */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ERRORQ_H */
end_comment

end_unit

