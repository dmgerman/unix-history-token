begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_SYSEVENT_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_SYSEVENT_H
end_define

begin_include
include|#
directive|include
file|<sys/nvpair.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NULL
if|#
directive|if
name|defined
argument_list|(
name|_LP64
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__cplusplus
argument_list|)
define|#
directive|define
name|NULL
value|0L
else|#
directive|else
define|#
directive|define
name|NULL
value|0
endif|#
directive|endif
endif|#
directive|endif
comment|/* Internal registration class and subclass */
define|#
directive|define
name|EC_ALL
value|"register_all_classes"
define|#
directive|define
name|EC_SUB_ALL
value|"register_all_subclasses"
comment|/*  * Event allocation/enqueuing sleep/nosleep flags  */
define|#
directive|define
name|SE_SLEEP
value|0
define|#
directive|define
name|SE_NOSLEEP
value|1
comment|/* Framework error codes */
define|#
directive|define
name|SE_EINVAL
value|1
comment|/* Invalid argument */
define|#
directive|define
name|SE_ENOMEM
value|2
comment|/* Unable to allocate memory */
define|#
directive|define
name|SE_EQSIZE
value|3
comment|/* Maximum event q size exceeded */
define|#
directive|define
name|SE_EFAULT
value|4
comment|/* Copy fault */
define|#
directive|define
name|SE_NOTFOUND
value|5
comment|/* Attribute not found */
define|#
directive|define
name|SE_NO_TRANSPORT
value|6
comment|/* sysevent transport down */
comment|/* Internal data types */
define|#
directive|define
name|SE_DATA_TYPE_BYTE
value|DATA_TYPE_BYTE
define|#
directive|define
name|SE_DATA_TYPE_INT16
value|DATA_TYPE_INT16
define|#
directive|define
name|SE_DATA_TYPE_UINT16
value|DATA_TYPE_UINT16
define|#
directive|define
name|SE_DATA_TYPE_INT32
value|DATA_TYPE_INT32
define|#
directive|define
name|SE_DATA_TYPE_UINT32
value|DATA_TYPE_UINT32
define|#
directive|define
name|SE_DATA_TYPE_INT64
value|DATA_TYPE_INT64
define|#
directive|define
name|SE_DATA_TYPE_UINT64
value|DATA_TYPE_UINT64
define|#
directive|define
name|SE_DATA_TYPE_STRING
value|DATA_TYPE_STRING
define|#
directive|define
name|SE_DATA_TYPE_BYTES
value|DATA_TYPE_BYTE_ARRAY
define|#
directive|define
name|SE_DATA_TYPE_TIME
value|DATA_TYPE_HRTIME
define|#
directive|define
name|SE_KERN_PID
value|0
define|#
directive|define
name|SUNW_VENDOR
value|"SUNW"
define|#
directive|define
name|SE_USR_PUB
value|"usr:"
define|#
directive|define
name|SE_KERN_PUB
value|"kern:"
define|#
directive|define
name|SUNW_KERN_PUB
value|SUNW_VENDOR ":" SE_KERN_PUB
define|#
directive|define
name|SUNW_USR_PUB
value|SUNW_VENDOR ":" SE_USR_PUB
comment|/*  * Event header and attribute value limits  */
define|#
directive|define
name|MAX_ATTR_NAME
value|1024
define|#
directive|define
name|MAX_STRING_SZ
value|1024
define|#
directive|define
name|MAX_BYTE_ARRAY
value|1024
define|#
directive|define
name|MAX_CLASS_LEN
value|64
define|#
directive|define
name|MAX_SUBCLASS_LEN
value|64
define|#
directive|define
name|MAX_PUB_LEN
value|128
define|#
directive|define
name|MAX_CHNAME_LEN
value|128
define|#
directive|define
name|MAX_SUBID_LEN
value|16
comment|/*  * Limit for the event payload size  */
define|#
directive|define
name|MAX_EV_SIZE_LEN
value|(SHRT_MAX/4)
comment|/* Opaque sysevent_t data type */
typedef|typedef
name|void
modifier|*
name|sysevent_t
typedef|;
comment|/* Opaque channel bind data type */
typedef|typedef
name|void
name|evchan_t
typedef|;
comment|/* sysevent attribute list */
typedef|typedef
name|nvlist_t
name|sysevent_attr_list_t
typedef|;
comment|/* sysevent attribute name-value pair */
typedef|typedef
name|nvpair_t
name|sysevent_attr_t
typedef|;
comment|/* Unique event identifier */
typedef|typedef
struct|struct
name|sysevent_id
block|{
name|uint64_t
name|eid_seq
decl_stmt|;
name|hrtime_t
name|eid_ts
decl_stmt|;
block|}
name|sysevent_id_t
typedef|;
comment|/* Event attribute value structures */
typedef|typedef
struct|struct
name|sysevent_bytes
block|{
name|int32_t
name|size
decl_stmt|;
name|uchar_t
modifier|*
name|data
decl_stmt|;
block|}
name|sysevent_bytes_t
typedef|;
typedef|typedef
struct|struct
name|sysevent_value
block|{
name|int32_t
name|value_type
decl_stmt|;
comment|/* data type */
union|union
block|{
name|uchar_t
name|sv_byte
decl_stmt|;
name|int16_t
name|sv_int16
decl_stmt|;
name|uint16_t
name|sv_uint16
decl_stmt|;
name|int32_t
name|sv_int32
decl_stmt|;
name|uint32_t
name|sv_uint32
decl_stmt|;
name|int64_t
name|sv_int64
decl_stmt|;
name|uint64_t
name|sv_uint64
decl_stmt|;
name|hrtime_t
name|sv_time
decl_stmt|;
name|char
modifier|*
name|sv_string
decl_stmt|;
name|sysevent_bytes_t
name|sv_bytes
decl_stmt|;
block|}
name|value
union|;
block|}
name|sysevent_value_t
typedef|;
comment|/*  * The following flags determine the memory allocation semantics to use for  * kernel event buffer allocation by userland and kernel versions of  * sysevent_evc_publish().  *  * EVCH_SLEEP and EVCH_NOSLEEP respectively map to KM_SLEEP and KM_NOSLEEP.  * EVCH_TRYHARD is a kernel-only publish flag that allow event allocation  * routines to use use alternate kmem caches in situations where free memory  * may be low.  Kernel callers of sysevent_evc_publish() must set flags to  * one of EVCH_SLEEP, EVCH_NOSLEEP or EVCH_TRYHARD.  Userland callers of  * sysevent_evc_publish() must set flags to one of EVCH_SLEEP or EVCH_NOSLEEP.  *  * EVCH_QWAIT determines whether or not we should wait for slots in the event  * queue at publication time.  EVCH_QWAIT may be used by kernel and userland  * publishers and must be used in conjunction with any of one of EVCH_SLEEP,  * EVCH_NOSLEEP or EVCH_TRYHARD (kernel-only).  */
define|#
directive|define
name|EVCH_NOSLEEP
value|0x0001
comment|/* No sleep on kmem_alloc() */
define|#
directive|define
name|EVCH_SLEEP
value|0x0002
comment|/* Sleep on kmem_alloc() */
define|#
directive|define
name|EVCH_TRYHARD
value|0x0004
comment|/* May use alternate kmem cache for alloc */
define|#
directive|define
name|EVCH_QWAIT
value|0x0008
comment|/* Wait for slot in event queue */
comment|/*  * Meaning of flags for subscribe. Bits 8 to 15 are dedicated to  * the consolidation private interface, so flags defined here are restricted  * to the LSB.  *  * EVCH_SUB_KEEP indicates that this subscription should persist even if  * this subscriber id should die unexpectedly; matching events will be  * queued (up to a limit) and will be delivered if/when we restart again  * with the same subscriber id.  */
define|#
directive|define
name|EVCH_SUB_KEEP
value|0x01
comment|/*  * Subscriptions may be wildcarded, but we limit the number of  * wildcards permitted.  */
define|#
directive|define
name|EVCH_WILDCARD_MAX
value|10
comment|/*  * Used in unsubscribe to indicate all subscriber ids for a channel.  */
define|#
directive|define
name|EVCH_ALLSUB
value|"all_subs"
comment|/*  * Meaning of flags parameter of channel bind function  *  * EVCH_CREAT indicates to create a channel if not already present.  *  * EVCH_HOLD_PEND indicates that events should be published to this  * channel even if there are no matching subscribers present; when  * a subscriber belatedly binds to the channel and registers their  * subscriptions they will receive events that predate their bind.  * If the channel is closed, however, with no remaining bindings then  * the channel is destroyed.  *  * EVCH_HOLD_PEND_INDEF is a stronger version of EVCH_HOLD_PEND -  * even if the channel has no remaining bindings it will not be  * destroyed so long as events remain unconsumed.  This is suitable for  * use with short-lived event producers that may bind to (create) the  * channel and exit before the intended consumer has started.  */
define|#
directive|define
name|EVCH_CREAT
value|0x0001
define|#
directive|define
name|EVCH_HOLD_PEND
value|0x0002
define|#
directive|define
name|EVCH_HOLD_PEND_INDEF
value|0x0004
define|#
directive|define
name|EVCH_B_FLAGS
value|0x0007
comment|/* All valid bits */
comment|/*  * Meaning of commands of evc_control function  */
define|#
directive|define
name|EVCH_GET_CHAN_LEN_MAX
value|1
comment|/* Get event queue length limit */
define|#
directive|define
name|EVCH_GET_CHAN_LEN
value|2
comment|/* Get event queue length */
define|#
directive|define
name|EVCH_SET_CHAN_LEN
value|3
comment|/* Set event queue length */
define|#
directive|define
name|EVCH_CMD_LAST
value|EVCH_SET_CHAN_LEN
comment|/* Last command */
ifdef|#
directive|ifdef
name|illumos
comment|/*  * Shared user/kernel event channel interface definitions  */
specifier|extern
name|int
name|sysevent_evc_bind
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|evchan_t
modifier|*
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_evc_unbind
parameter_list|(
name|evchan_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_evc_subscribe
parameter_list|(
name|evchan_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_evc_unsubscribe
parameter_list|(
name|evchan_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_evc_publish
parameter_list|(
name|evchan_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_evc_control
parameter_list|(
name|evchan_t
modifier|*
parameter_list|,
name|int
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_evc_setpropnvl
parameter_list|(
name|evchan_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_evc_getpropnvl
parameter_list|(
name|evchan_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* illumos */
ifndef|#
directive|ifndef
name|_KERNEL
ifdef|#
directive|ifdef
name|illumos
comment|/*  * Userland-only event channel interfaces  */
include|#
directive|include
file|<door.h>
typedef|typedef
name|struct
name|sysevent_subattr
name|sysevent_subattr_t
typedef|;
specifier|extern
name|sysevent_subattr_t
modifier|*
name|sysevent_subattr_alloc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|sysevent_subattr_free
parameter_list|(
name|sysevent_subattr_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|sysevent_subattr_thrattr
parameter_list|(
name|sysevent_subattr_t
modifier|*
parameter_list|,
name|pthread_attr_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|sysevent_subattr_sigmask
parameter_list|(
name|sysevent_subattr_t
modifier|*
parameter_list|,
name|sigset_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|sysevent_subattr_thrcreate
parameter_list|(
name|sysevent_subattr_t
modifier|*
parameter_list|,
name|door_xcreate_server_func_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|sysevent_subattr_thrsetup
parameter_list|(
name|sysevent_subattr_t
modifier|*
parameter_list|,
name|door_xcreate_thrsetup_func_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_evc_xsubscribe
parameter_list|(
name|evchan_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|sysevent_subattr_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* illumos */
else|#
directive|else
comment|/*  * Kernel log_event interfaces.  */
specifier|extern
name|int
name|log_sysevent
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|sysevent_id_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|sysevent_t
modifier|*
name|sysevent_alloc
parameter_list|(
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|sysevent_free
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_add_attr
parameter_list|(
name|sysevent_attr_list_t
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|sysevent_value_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|sysevent_free_attr
parameter_list|(
name|sysevent_attr_list_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_attach_attributes
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|,
name|sysevent_attr_list_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|sysevent_detach_attributes
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|illumos
specifier|extern
name|char
modifier|*
name|sysevent_get_class_name
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
name|sysevent_get_subclass_name
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|sysevent_get_seq
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|sysevent_get_time
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|,
name|hrtime_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|size_t
name|sysevent_get_size
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
name|sysevent_get_pub
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|sysevent_get_attr_list
parameter_list|(
name|sysevent_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* illumos */
endif|#
directive|endif
comment|/* _KERNEL */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_SYSEVENT_H */
end_comment

end_unit

