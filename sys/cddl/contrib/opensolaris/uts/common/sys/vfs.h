begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_comment
comment|/*	Copyright (c) 1983, 1984, 1985, 1986, 1987, 1988, 1989 AT&T	*/
end_comment

begin_comment
comment|/*	  All Rights Reserved  	*/
end_comment

begin_comment
comment|/*  * Portions of this source code were derived from Berkeley 4.3 BSD  * under license from the Regents of the University of California.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_VFS_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_VFS_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/t_lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/cred.h>
end_include

begin_include
include|#
directive|include
file|<sys/vnode.h>
end_include

begin_include
include|#
directive|include
file|<sys/statvfs.h>
end_include

begin_include
include|#
directive|include
file|<sys/refstr.h>
end_include

begin_include
include|#
directive|include
file|<sys/avl.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Data associated with mounted file systems.  */
comment|/*  * Operations vector.  This is used internal to the kernel; file systems  * supply their list of operations via vfs_setfsops().  */
typedef|typedef
name|struct
name|vfsops
name|vfsops_t
typedef|;
comment|/*  * File system identifier. Should be unique (at least per machine).  */
typedef|typedef
struct|struct
block|{
name|int
name|val
index|[
literal|2
index|]
decl_stmt|;
comment|/* file system id type */
block|}
name|fsid_t
typedef|;
comment|/*  * File identifier.  Should be unique per filesystem on a single  * machine.  This is typically called by a stateless file server  * in order to generate "file handles".  *  * Do not change the definition of struct fid ... fid_t without  * letting the CacheFS group know about it!  They will have to do at  * least two things, in the same change that changes this structure:  *   1. change CFSVERSION in usr/src/uts/common/sys/fs/cachefs_fs.h  *   2. put the old version # in the canupgrade array  *	in cachfs_upgrade() in usr/src/cmd/fs.d/cachefs/fsck/fsck.c  * This is necessary because CacheFS stores FIDs on disk.  *  * Many underlying file systems cast a struct fid into other  * file system dependent structures which may require 4 byte alignment.  * Because a fid starts with a short it may not be 4 byte aligned, the  * fid_pad will force the alignment.  */
define|#
directive|define
name|MAXFIDSZ
value|64
define|#
directive|define
name|OLD_MAXFIDSZ
value|16
typedef|typedef
struct|struct
name|fid
block|{
union|union
block|{
name|long
name|fid_pad
decl_stmt|;
struct|struct
block|{
name|ushort_t
name|len
decl_stmt|;
comment|/* length of data in bytes */
name|char
name|data
index|[
name|MAXFIDSZ
index|]
decl_stmt|;
comment|/* data (variable len) */
block|}
name|_fid
struct|;
block|}
name|un
union|;
block|}
name|fid_t
typedef|;
ifdef|#
directive|ifdef
name|_SYSCALL32
comment|/*  * Solaris 64 - use old-style cache format with 32-bit aligned fid for on-disk  * struct compatibility.  */
typedef|typedef
struct|struct
name|fid32
block|{
union|union
block|{
name|int32_t
name|fid_pad
decl_stmt|;
struct|struct
block|{
name|uint16_t
name|len
decl_stmt|;
comment|/* length of data in bytes */
name|char
name|data
index|[
name|MAXFIDSZ
index|]
decl_stmt|;
comment|/* data (variable len) */
block|}
name|_fid
struct|;
block|}
name|un
union|;
block|}
name|fid32_t
typedef|;
else|#
directive|else
comment|/* not _SYSCALL32 */
define|#
directive|define
name|fid32
value|fid
typedef|typedef
name|fid_t
name|fid32_t
typedef|;
endif|#
directive|endif
comment|/* _SYSCALL32 */
define|#
directive|define
name|fid_len
value|un._fid.len
define|#
directive|define
name|fid_data
value|un._fid.data
comment|/*  * Structure defining a mount option for a filesystem.  * option names are found in mntent.h  */
typedef|typedef
struct|struct
name|mntopt
block|{
name|char
modifier|*
name|mo_name
decl_stmt|;
comment|/* option name */
name|char
modifier|*
modifier|*
name|mo_cancel
decl_stmt|;
comment|/* list of options cancelled by this one */
name|char
modifier|*
name|mo_arg
decl_stmt|;
comment|/* argument string for this option */
name|int
name|mo_flags
decl_stmt|;
comment|/* flags for this mount option */
name|void
modifier|*
name|mo_data
decl_stmt|;
comment|/* filesystem specific data */
block|}
name|mntopt_t
typedef|;
comment|/*  * Flags that apply to mount options  */
define|#
directive|define
name|MO_SET
value|0x01
comment|/* option is set */
define|#
directive|define
name|MO_NODISPLAY
value|0x02
comment|/* option not listed in mnttab */
define|#
directive|define
name|MO_HASVALUE
value|0x04
comment|/* option takes a value */
define|#
directive|define
name|MO_IGNORE
value|0x08
comment|/* option ignored by parser */
define|#
directive|define
name|MO_DEFAULT
value|MO_SET
comment|/* option is on by default */
define|#
directive|define
name|MO_TAG
value|0x10
comment|/* flags a tag set by user program */
define|#
directive|define
name|MO_EMPTY
value|0x20
comment|/* empty space in option table */
define|#
directive|define
name|VFS_NOFORCEOPT
value|0x01
comment|/* honor MO_IGNORE (don't set option) */
define|#
directive|define
name|VFS_DISPLAY
value|0x02
comment|/* Turn off MO_NODISPLAY bit for opt */
define|#
directive|define
name|VFS_NODISPLAY
value|0x04
comment|/* Turn on MO_NODISPLAY bit for opt */
define|#
directive|define
name|VFS_CREATEOPT
value|0x08
comment|/* Create the opt if it's not there */
comment|/*  * Structure holding mount option strings for the mounted file system.  */
typedef|typedef
struct|struct
name|mntopts
block|{
name|uint_t
name|mo_count
decl_stmt|;
comment|/* number of entries in table */
name|mntopt_t
modifier|*
name|mo_list
decl_stmt|;
comment|/* list of mount options */
block|}
name|mntopts_t
typedef|;
comment|/*  * The kstat structures associated with the vopstats are kept in an  * AVL tree.  This is to avoid the case where a file system does not  * use a unique fsid_t for each vfs (e.g., namefs).  In order to do  * this, we need a structure that the AVL tree can use that also  * references the kstat.  * Note that the vks_fsid is generated from the value reported by  * VFS_STATVFS().  */
typedef|typedef
struct|struct
name|vskstat_anchor
block|{
name|avl_node_t
name|vsk_node
decl_stmt|;
comment|/* Required for use by AVL routines */
name|kstat_t
modifier|*
name|vsk_ksp
decl_stmt|;
comment|/* kstat structure for vopstats */
name|ulong_t
name|vsk_fsid
decl_stmt|;
comment|/* fsid associated w/this FS */
block|}
name|vsk_anchor_t
typedef|;
specifier|extern
name|avl_tree_t
name|vskstat_tree
decl_stmt|;
specifier|extern
name|kmutex_t
name|vskstat_tree_lock
decl_stmt|;
comment|/*  * Structure per mounted file system.  Each mounted file system has  * an array of operations and an instance record.  *  * The file systems are kept on a doubly linked circular list headed by  * "rootvfs".  * File system implementations should not access this list;  * it's intended for use only in the kernel's vfs layer.  *  * Each zone also has its own list of mounts, containing filesystems mounted  * somewhere within the filesystem tree rooted at the zone's rootpath.  The  * list is doubly linked to match the global list.  *  * mnttab locking: the in-kernel mnttab uses the vfs_mntpt, vfs_resource and  * vfs_mntopts fields in the vfs_t. mntpt and resource are refstr_ts that  * are set at mount time and can only be modified during a remount.  * It is safe to read these fields if you can prevent a remount on the vfs,  * or through the convenience funcs vfs_getmntpoint() and vfs_getresource().  * The mntopts field may only be accessed through the provided convenience  * functions, as it is protected by the vfs list lock. Modifying a mount  * option requires grabbing the vfs list write lock, which can be a very  * high latency lock.  */
struct_decl|struct
name|zone
struct_decl|;
comment|/* from zone.h */
struct_decl|struct
name|fem_head
struct_decl|;
comment|/* from fem.h */
comment|/*  * Private vfs data, NOT to be used by a file system implementation.  */
typedef|typedef
struct|struct
name|vfs_impl
block|{
name|struct
name|fem_head
modifier|*
name|vi_femhead
decl_stmt|;
comment|/* fs monitoring */
comment|/* 	 * Support for statistics on the vnode operations 	 */
name|vsk_anchor_t
modifier|*
name|vi_vskap
decl_stmt|;
comment|/* anchor for vopstats' kstat */
name|vopstats_t
modifier|*
name|vi_fstypevsp
decl_stmt|;
comment|/* ptr to per-fstype vopstats */
name|vopstats_t
name|vi_vopstats
decl_stmt|;
comment|/* per-mount vnode op stats */
block|}
name|vfs_impl_t
typedef|;
typedef|typedef
struct|struct
name|vfs
block|{
name|struct
name|vfs
modifier|*
name|vfs_next
decl_stmt|;
comment|/* next VFS in VFS list */
name|struct
name|vfs
modifier|*
name|vfs_prev
decl_stmt|;
comment|/* prev VFS in VFS list */
comment|/* vfs_op should not be used directly.  Accessor functions are provided */
name|vfsops_t
modifier|*
name|vfs_op
decl_stmt|;
comment|/* operations on VFS */
name|struct
name|vnode
modifier|*
name|vfs_vnodecovered
decl_stmt|;
comment|/* vnode mounted on */
name|uint_t
name|vfs_flag
decl_stmt|;
comment|/* flags */
name|uint_t
name|vfs_bsize
decl_stmt|;
comment|/* native block size */
name|int
name|vfs_fstype
decl_stmt|;
comment|/* file system type index */
name|fsid_t
name|vfs_fsid
decl_stmt|;
comment|/* file system id */
name|void
modifier|*
name|vfs_data
decl_stmt|;
comment|/* private data */
name|dev_t
name|vfs_dev
decl_stmt|;
comment|/* device of mounted VFS */
name|ulong_t
name|vfs_bcount
decl_stmt|;
comment|/* I/O count (accounting) */
name|struct
name|vfs
modifier|*
name|vfs_list
decl_stmt|;
comment|/* sync list pointer */
name|struct
name|vfs
modifier|*
name|vfs_hash
decl_stmt|;
comment|/* hash list pointer */
name|ksema_t
name|vfs_reflock
decl_stmt|;
comment|/* mount/unmount/sync lock */
name|uint_t
name|vfs_count
decl_stmt|;
comment|/* vfs reference count */
name|mntopts_t
name|vfs_mntopts
decl_stmt|;
comment|/* options mounted with */
name|refstr_t
modifier|*
name|vfs_resource
decl_stmt|;
comment|/* mounted resource name */
name|refstr_t
modifier|*
name|vfs_mntpt
decl_stmt|;
comment|/* mount point name */
name|time_t
name|vfs_mtime
decl_stmt|;
comment|/* time we were mounted */
name|vfs_impl_t
modifier|*
name|vfs_implp
decl_stmt|;
comment|/* impl specific data */
comment|/* 	 * Zones support.  Note that the zone that "owns" the mount isn't 	 * necessarily the same as the zone in which the zone is visible. 	 * That is, vfs_zone and (vfs_zone_next|vfs_zone_prev) may refer to 	 * different zones. 	 */
name|struct
name|zone
modifier|*
name|vfs_zone
decl_stmt|;
comment|/* zone that owns the mount */
name|struct
name|vfs
modifier|*
name|vfs_zone_next
decl_stmt|;
comment|/* next VFS visible in zone */
name|struct
name|vfs
modifier|*
name|vfs_zone_prev
decl_stmt|;
comment|/* prev VFS visible in zone */
block|}
name|vfs_t
typedef|;
define|#
directive|define
name|vfs_femhead
value|vfs_implp->vi_femhead
define|#
directive|define
name|vfs_vskap
value|vfs_implp->vi_vskap
define|#
directive|define
name|vfs_fstypevsp
value|vfs_implp->vi_fstypevsp
define|#
directive|define
name|vfs_vopstats
value|vfs_implp->vi_vopstats
comment|/*  * VFS flags.  */
define|#
directive|define
name|VFS_RDONLY
value|0x01
comment|/* read-only vfs */
define|#
directive|define
name|VFS_NOMNTTAB
value|0x02
comment|/* vfs not seen in mnttab */
define|#
directive|define
name|VFS_NOSETUID
value|0x08
comment|/* setuid disallowed */
define|#
directive|define
name|VFS_REMOUNT
value|0x10
comment|/* modify mount options only */
define|#
directive|define
name|VFS_NOTRUNC
value|0x20
comment|/* does not truncate long file names */
define|#
directive|define
name|VFS_UNLINKABLE
value|0x40
comment|/* unlink(2) can be applied to root */
define|#
directive|define
name|VFS_PXFS
value|0x80
comment|/* clustering: global fs proxy vfs */
define|#
directive|define
name|VFS_UNMOUNTED
value|0x100
comment|/* file system has been unmounted */
define|#
directive|define
name|VFS_NBMAND
value|0x200
comment|/* allow non-blocking mandatory locks */
define|#
directive|define
name|VFS_XATTR
value|0x400
comment|/* fs supports extended attributes */
define|#
directive|define
name|VFS_NODEVICES
value|0x800
comment|/* device-special files disallowed */
define|#
directive|define
name|VFS_NOEXEC
value|0x1000
comment|/* executables disallowed */
define|#
directive|define
name|VFS_STATS
value|0x2000
comment|/* file system can collect stats */
define|#
directive|define
name|VFS_NORESOURCE
value|"unspecified_resource"
define|#
directive|define
name|VFS_NOMNTPT
value|"unspecified_mountpoint"
comment|/*  * Argument structure for mount(2).  *  * Flags are defined in<sys/mount.h>.  *  * Note that if the MS_SYSSPACE bit is set in flags, the pointer fields in  * this structure are to be interpreted as kernel addresses.  File systems  * should be prepared for this possibility.  */
struct|struct
name|mounta
block|{
name|char
modifier|*
name|spec
decl_stmt|;
name|char
modifier|*
name|dir
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|char
modifier|*
name|fstype
decl_stmt|;
name|char
modifier|*
name|dataptr
decl_stmt|;
name|int
name|datalen
decl_stmt|;
name|char
modifier|*
name|optptr
decl_stmt|;
name|int
name|optlen
decl_stmt|;
block|}
struct|;
comment|/*  * Reasons for calling the vfs_mountroot() operation.  */
enum|enum
name|whymountroot
block|{
name|ROOT_INIT
block|,
name|ROOT_REMOUNT
block|,
name|ROOT_UNMOUNT
block|}
enum|;
typedef|typedef
name|enum
name|whymountroot
name|whymountroot_t
typedef|;
comment|/*  * Reasons for calling the VFS_VNSTATE():  */
enum|enum
name|vntrans
block|{
name|VNTRANS_EXISTS
block|,
name|VNTRANS_IDLED
block|,
name|VNTRANS_RECLAIMED
block|,
name|VNTRANS_DESTROYED
block|}
enum|;
typedef|typedef
name|enum
name|vntrans
name|vntrans_t
typedef|;
comment|/*  * VFS_OPS defines all the vfs operations.  It is used to define  * the vfsops structure (below) and the fs_func_p union (vfs_opreg.h).  */
define|#
directive|define
name|VFS_OPS
define|\
value|int	(*vfs_mount)(vfs_t *, vnode_t *, struct mounta *, cred_t *); \ 	int	(*vfs_unmount)(vfs_t *, int, cred_t *);			\ 	int	(*vfs_root)(vfs_t *, vnode_t **);			\ 	int	(*vfs_statvfs)(vfs_t *, statvfs64_t *);			\ 	int	(*vfs_sync)(vfs_t *, short, cred_t *);			\ 	int	(*vfs_vget)(vfs_t *, vnode_t **, fid_t *);		\ 	int	(*vfs_mountroot)(vfs_t *, enum whymountroot);		\ 	void	(*vfs_freevfs)(vfs_t *);				\ 	int	(*vfs_vnstate)(vfs_t *, vnode_t *, vntrans_t)
comment|/* NB: No ";" */
comment|/*  * Operations supported on virtual file system.  */
struct|struct
name|vfsops
block|{
name|VFS_OPS
expr_stmt|;
comment|/* Signature of all vfs operations (vfsops) */
block|}
struct|;
specifier|extern
name|int
name|fsop_mount
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|vnode_t
modifier|*
parameter_list|,
name|struct
name|mounta
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|fsop_unmount
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|fsop_root
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|vnode_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|fsop_statfs
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|statvfs64_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|fsop_sync
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|short
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|fsop_vget
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|vnode_t
modifier|*
modifier|*
parameter_list|,
name|fid_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|fsop_mountroot
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|enum
name|whymountroot
parameter_list|)
function_decl|;
specifier|extern
name|void
name|fsop_freefs
parameter_list|(
name|vfs_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|fsop_sync_by_kind
parameter_list|(
name|int
parameter_list|,
name|short
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|fsop_vnstate
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|vnode_t
modifier|*
parameter_list|,
name|vntrans_t
parameter_list|)
function_decl|;
define|#
directive|define
name|VFS_MOUNT
parameter_list|(
name|vfsp
parameter_list|,
name|mvp
parameter_list|,
name|uap
parameter_list|,
name|cr
parameter_list|)
value|fsop_mount(vfsp, mvp, uap, cr)
define|#
directive|define
name|VFS_UNMOUNT
parameter_list|(
name|vfsp
parameter_list|,
name|flag
parameter_list|,
name|cr
parameter_list|)
value|fsop_unmount(vfsp, flag, cr)
define|#
directive|define
name|VFS_ROOT
parameter_list|(
name|vfsp
parameter_list|,
name|vpp
parameter_list|)
value|fsop_root(vfsp, vpp)
define|#
directive|define
name|VFS_STATVFS
parameter_list|(
name|vfsp
parameter_list|,
name|sp
parameter_list|)
value|fsop_statfs(vfsp, sp)
define|#
directive|define
name|VFS_SYNC
parameter_list|(
name|vfsp
parameter_list|,
name|flag
parameter_list|,
name|cr
parameter_list|)
value|fsop_sync(vfsp, flag, cr)
define|#
directive|define
name|VFS_VGET
parameter_list|(
name|vfsp
parameter_list|,
name|vpp
parameter_list|,
name|fidp
parameter_list|)
value|fsop_vget(vfsp, vpp, fidp)
define|#
directive|define
name|VFS_MOUNTROOT
parameter_list|(
name|vfsp
parameter_list|,
name|init
parameter_list|)
value|fsop_mountroot(vfsp, init)
define|#
directive|define
name|VFS_FREEVFS
parameter_list|(
name|vfsp
parameter_list|)
value|fsop_freefs(vfsp)
define|#
directive|define
name|VFS_VNSTATE
parameter_list|(
name|vfsp
parameter_list|,
name|vn
parameter_list|,
name|ns
parameter_list|)
value|fsop_vnstate(vfsp, vn, ns)
define|#
directive|define
name|VFSNAME_MOUNT
value|"mount"
define|#
directive|define
name|VFSNAME_UNMOUNT
value|"unmount"
define|#
directive|define
name|VFSNAME_ROOT
value|"root"
define|#
directive|define
name|VFSNAME_STATVFS
value|"statvfs"
define|#
directive|define
name|VFSNAME_SYNC
value|"sync"
define|#
directive|define
name|VFSNAME_VGET
value|"vget"
define|#
directive|define
name|VFSNAME_MOUNTROOT
value|"mountroot"
define|#
directive|define
name|VFSNAME_FREEVFS
value|"freevfs"
define|#
directive|define
name|VFSNAME_VNSTATE
value|"vnstate"
comment|/*  * Filesystem type switch table.  */
typedef|typedef
struct|struct
name|vfssw
block|{
name|char
modifier|*
name|vsw_name
decl_stmt|;
comment|/* type name -- max len _ST_FSTYPSZ */
name|int
function_decl|(
modifier|*
name|vsw_init
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* init routine (for non-loadable fs only) */
name|int
name|vsw_flag
decl_stmt|;
comment|/* flags */
name|mntopts_t
name|vsw_optproto
decl_stmt|;
comment|/* mount options table prototype */
name|uint_t
name|vsw_count
decl_stmt|;
comment|/* count of references */
name|kmutex_t
name|vsw_lock
decl_stmt|;
comment|/* lock to protect vsw_count */
name|vfsops_t
name|vsw_vfsops
decl_stmt|;
comment|/* filesystem operations vector */
block|}
name|vfssw_t
typedef|;
comment|/*  * Filesystem type definition record.  All file systems must export a record  * of this type through their modlfs structure.  */
typedef|typedef
struct|struct
name|vfsdef_v3
block|{
name|int
name|def_version
decl_stmt|;
comment|/* structure version, must be first */
name|char
modifier|*
name|name
decl_stmt|;
comment|/* filesystem type name */
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* init routine */
name|int
name|flags
decl_stmt|;
comment|/* filesystem flags */
name|mntopts_t
modifier|*
name|optproto
decl_stmt|;
comment|/* mount options table prototype */
block|}
name|vfsdef_v3
typedef|;
typedef|typedef
name|struct
name|vfsdef_v3
name|vfsdef_t
typedef|;
enum|enum
block|{
name|VFSDEF_VERSION
init|=
literal|3
block|}
enum|;
comment|/*  * flags for vfssw and vfsdef  */
define|#
directive|define
name|VSW_HASPROTO
value|0x01
comment|/* struct has a mount options prototype */
define|#
directive|define
name|VSW_CANRWRO
value|0x02
comment|/* file system can transition from rw to ro */
define|#
directive|define
name|VSW_CANREMOUNT
value|0x04
comment|/* file system supports remounts */
define|#
directive|define
name|VSW_NOTZONESAFE
value|0x08
comment|/* zone_enter(2) should fail for these files */
define|#
directive|define
name|VSW_VOLATILEDEV
value|0x10
comment|/* vfs_dev can change each time fs is mounted */
define|#
directive|define
name|VSW_STATS
value|0x20
comment|/* file system can collect stats */
define|#
directive|define
name|VSW_INSTALLED
value|0x8000
comment|/* this vsw is associated with a file system */
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
comment|/*  * Public operations.  */
struct_decl|struct
name|umounta
struct_decl|;
struct_decl|struct
name|statvfsa
struct_decl|;
struct_decl|struct
name|fstatvfsa
struct_decl|;
name|void
name|vfs_freevfsops
parameter_list|(
name|vfsops_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_freevfsops_by_type
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|vfs_setops
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|vfsops_t
modifier|*
parameter_list|)
function_decl|;
name|vfsops_t
modifier|*
name|vfs_getops
parameter_list|(
name|vfs_t
modifier|*
name|vfsp
parameter_list|)
function_decl|;
name|int
name|vfs_matchops
parameter_list|(
name|vfs_t
modifier|*
parameter_list|,
name|vfsops_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_can_sync
parameter_list|(
name|vfs_t
modifier|*
name|vfsp
parameter_list|)
function_decl|;
name|void
name|vfs_init
parameter_list|(
name|vfs_t
modifier|*
name|vfsp
parameter_list|,
name|vfsops_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfsimpl_setup
parameter_list|(
name|vfs_t
modifier|*
name|vfsp
parameter_list|)
function_decl|;
name|void
name|vfsimpl_teardown
parameter_list|(
name|vfs_t
modifier|*
name|vfsp
parameter_list|)
function_decl|;
name|void
name|vn_exists
parameter_list|(
name|vnode_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vn_idle
parameter_list|(
name|vnode_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vn_reclaim
parameter_list|(
name|vnode_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vn_invalid
parameter_list|(
name|vnode_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|rootconf
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|svm_rootconf
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|domount
parameter_list|(
name|char
modifier|*
parameter_list|,
name|struct
name|mounta
modifier|*
parameter_list|,
name|vnode_t
modifier|*
parameter_list|,
name|struct
name|cred
modifier|*
parameter_list|,
name|struct
name|vfs
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
name|dounmount
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|,
name|int
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_lock
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_rlock
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_lock_wait
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_rlock_wait
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_unlock
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_lock_held
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|struct
name|_kthread
modifier|*
name|vfs_lock_owner
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|void
name|sync
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfs_sync
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|vfs_mountroot
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfs_add
parameter_list|(
name|vnode_t
modifier|*
parameter_list|,
name|struct
name|vfs
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|vfs_remove
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
comment|/* The following functions are not for general use by filesystems */
name|void
name|vfs_createopttbl
parameter_list|(
name|mntopts_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_copyopttbl
parameter_list|(
specifier|const
name|mntopts_t
modifier|*
parameter_list|,
name|mntopts_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_mergeopttbl
parameter_list|(
specifier|const
name|mntopts_t
modifier|*
parameter_list|,
specifier|const
name|mntopts_t
modifier|*
parameter_list|,
name|mntopts_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_freeopttbl
parameter_list|(
name|mntopts_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_parsemntopts
parameter_list|(
name|mntopts_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|vfs_buildoptionstr
parameter_list|(
specifier|const
name|mntopts_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|struct
name|mntopt
modifier|*
name|vfs_hasopt
parameter_list|(
specifier|const
name|mntopts_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_mnttab_modtimeupd
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfs_clearmntopt
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_setmntopt
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|vfs_setresource
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_setmntpoint
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|refstr_t
modifier|*
name|vfs_getresource
parameter_list|(
specifier|const
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|refstr_t
modifier|*
name|vfs_getmntpoint
parameter_list|(
specifier|const
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_optionisset
parameter_list|(
specifier|const
name|struct
name|vfs
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_settag
parameter_list|(
name|uint_t
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_clrtag
parameter_list|(
name|uint_t
parameter_list|,
name|uint_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|cred_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_syncall
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfs_syncprogress
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfsinit
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfs_unmountall
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfs_make_fsid
parameter_list|(
name|fsid_t
modifier|*
parameter_list|,
name|dev_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|vfs_addmip
parameter_list|(
name|dev_t
parameter_list|,
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_delmip
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_devismounted
parameter_list|(
name|dev_t
parameter_list|)
function_decl|;
name|int
name|vfs_devmounting
parameter_list|(
name|dev_t
parameter_list|,
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfs_opsinuse
parameter_list|(
name|vfsops_t
modifier|*
parameter_list|)
function_decl|;
name|struct
name|vfs
modifier|*
name|getvfs
parameter_list|(
name|fsid_t
modifier|*
parameter_list|)
function_decl|;
name|struct
name|vfs
modifier|*
name|vfs_dev2vfsp
parameter_list|(
name|dev_t
parameter_list|)
function_decl|;
name|struct
name|vfs
modifier|*
name|vfs_mntpoint2vfsp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|struct
name|vfssw
modifier|*
name|allocate_vfssw
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
name|struct
name|vfssw
modifier|*
name|vfs_getvfssw
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
name|struct
name|vfssw
modifier|*
name|vfs_getvfsswbyname
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
name|struct
name|vfssw
modifier|*
name|vfs_getvfsswbyvfsops
parameter_list|(
name|vfsops_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_refvfssw
parameter_list|(
name|struct
name|vfssw
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_unrefvfssw
parameter_list|(
name|struct
name|vfssw
modifier|*
parameter_list|)
function_decl|;
name|uint_t
name|vf_to_stf
parameter_list|(
name|uint_t
parameter_list|)
function_decl|;
name|void
name|vfs_mnttab_modtime
parameter_list|(
name|timespec_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_mnttab_poll
parameter_list|(
name|timespec_t
modifier|*
parameter_list|,
name|struct
name|pollhead
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_list_lock
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfs_list_read_lock
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfs_list_unlock
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|vfs_list_add
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_list_remove
parameter_list|(
name|struct
name|vfs
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_hold
parameter_list|(
name|vfs_t
modifier|*
name|vfsp
parameter_list|)
function_decl|;
name|void
name|vfs_rele
parameter_list|(
name|vfs_t
modifier|*
name|vfsp
parameter_list|)
function_decl|;
name|void
name|fs_freevfs
parameter_list|(
name|vfs_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|vfs_root_redev
parameter_list|(
name|vfs_t
modifier|*
name|vfsp
parameter_list|,
name|dev_t
name|ndev
parameter_list|,
name|int
name|fstype
parameter_list|)
function_decl|;
name|int
name|vfs_zone_change_safe
parameter_list|(
name|vfs_t
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|VFSHASH
parameter_list|(
name|maj
parameter_list|,
name|min
parameter_list|)
value|(((int)((maj)+(min)))& (vfshsz - 1))
define|#
directive|define
name|VFS_ON_LIST
parameter_list|(
name|vfsp
parameter_list|)
define|\
value|((vfsp)->vfs_next != (vfsp)&& (vfsp)->vfs_next != NULL)
comment|/*  * Globals.  */
specifier|extern
name|struct
name|vfssw
name|vfssw
index|[]
decl_stmt|;
comment|/* table of filesystem types */
specifier|extern
name|krwlock_t
name|vfssw_lock
decl_stmt|;
specifier|extern
name|char
name|rootfstype
index|[]
decl_stmt|;
comment|/* name of root fstype */
specifier|extern
specifier|const
name|int
name|nfstype
decl_stmt|;
comment|/* # of elements in vfssw array */
specifier|extern
name|vfsops_t
modifier|*
name|EIO_vfsops
decl_stmt|;
comment|/* operations for vfs being torn-down */
comment|/*  * The following variables are private to the the kernel's vfs layer.  File  * system implementations should not access them.  */
specifier|extern
name|struct
name|vfs
modifier|*
name|rootvfs
decl_stmt|;
comment|/* ptr to root vfs structure */
typedef|typedef
struct|struct
block|{
name|struct
name|vfs
modifier|*
name|rvfs_head
decl_stmt|;
comment|/* head vfs in chain */
name|kmutex_t
name|rvfs_lock
decl_stmt|;
comment|/* mutex protecting this chain */
name|uint32_t
name|rvfs_len
decl_stmt|;
comment|/* length of this chain */
block|}
name|rvfs_t
typedef|;
specifier|extern
name|rvfs_t
modifier|*
name|rvfs_list
decl_stmt|;
specifier|extern
name|int
name|vfshsz
decl_stmt|;
comment|/* # of elements in rvfs_head array */
specifier|extern
specifier|const
name|mntopts_t
name|vfs_mntopts
decl_stmt|;
comment|/* globally recognized options */
endif|#
directive|endif
comment|/* defined(_KERNEL) */
define|#
directive|define
name|VFS_HOLD
parameter_list|(
name|vfsp
parameter_list|)
value|{ \ 	vfs_hold(vfsp); \ }
define|#
directive|define
name|VFS_RELE
parameter_list|(
name|vfsp
parameter_list|)
value|{ \ 	vfs_rele(vfsp); \ }
define|#
directive|define
name|VFS_INIT
parameter_list|(
name|vfsp
parameter_list|,
name|op
parameter_list|,
name|data
parameter_list|)
value|{ \ 	vfs_init((vfsp), (op), (data)); \ 	vfsimpl_setup((vfsp)); \ }
define|#
directive|define
name|VFS_INSTALLED
parameter_list|(
name|vfsswp
parameter_list|)
value|(((vfsswp)->vsw_flag& VSW_INSTALLED) != 0)
define|#
directive|define
name|ALLOCATED_VFSSW
parameter_list|(
name|vswp
parameter_list|)
value|((vswp)->vsw_name[0] != '\0')
define|#
directive|define
name|RLOCK_VFSSW
parameter_list|()
value|(rw_enter(&vfssw_lock, RW_READER))
define|#
directive|define
name|RUNLOCK_VFSSW
parameter_list|()
value|(rw_exit(&vfssw_lock))
define|#
directive|define
name|WLOCK_VFSSW
parameter_list|()
value|(rw_enter(&vfssw_lock, RW_WRITER))
define|#
directive|define
name|WUNLOCK_VFSSW
parameter_list|()
value|(rw_exit(&vfssw_lock))
define|#
directive|define
name|VFSSW_LOCKED
parameter_list|()
value|(RW_LOCK_HELD(&vfssw_lock))
define|#
directive|define
name|VFSSW_WRITE_LOCKED
parameter_list|()
value|(RW_WRITE_HELD(&vfssw_lock))
comment|/*  * VFS_SYNC flags.  */
define|#
directive|define
name|SYNC_ATTR
value|0x01
comment|/* sync attributes only */
define|#
directive|define
name|SYNC_CLOSE
value|0x02
comment|/* close open file */
define|#
directive|define
name|SYNC_ALL
value|0x04
comment|/* force to sync all fs */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_VFS_H */
end_comment

end_unit

