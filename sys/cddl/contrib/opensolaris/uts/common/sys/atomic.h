begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_ATOMIC_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_ATOMIC_H
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|&&
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|defined
argument_list|(
name|_ASM_INLINES
argument_list|)
operator|&&
expr|\
operator|(
name|defined
argument_list|(
name|__i386
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64
argument_list|)
operator|)
include|#
directive|include
file|<asm/atomic.h>
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|__STDC__
argument_list|)
comment|/*  * Increment target.  */
specifier|extern
name|void
name|atomic_inc_8
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_inc_uchar
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_inc_16
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_inc_ushort
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_inc_32
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_inc_uint
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_inc_ulong
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_inc_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * Decrement target  */
specifier|extern
name|void
name|atomic_dec_8
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_dec_uchar
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_dec_16
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_dec_ushort
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_dec_32
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_dec_uint
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_dec_ulong
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_dec_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * Add delta to target  */
ifdef|#
directive|ifdef
name|__i386__
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_add_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|,
name|int64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
endif|#
directive|endif
comment|/*  * logical OR bits with target  */
specifier|extern
name|void
name|atomic_or_8
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_or_uchar
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|,
name|uchar_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_or_16
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_or_ushort
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|,
name|ushort_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_or_32
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_or_uint
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_or_ulong
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_or_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * logical AND bits with target  */
specifier|extern
name|void
name|atomic_and_8
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_and_uchar
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|,
name|uchar_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_and_16
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_and_ushort
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|,
name|ushort_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_and_32
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_and_uint
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_and_ulong
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_and_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * As above, but return the new value.  Note that these _nv() variants are  * substantially more expensive on some platforms than the no-return-value  * versions above, so don't use them unless you really need to know the  * new value *atomically* (e.g. when decrementing a reference count and  * checking whether it went to zero).  */
comment|/*  * Increment target and return new value.  */
specifier|extern
name|uint8_t
name|atomic_inc_8_nv
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uchar_t
name|atomic_inc_uchar_nv
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint16_t
name|atomic_inc_16_nv
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ushort_t
name|atomic_inc_ushort_nv
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|atomic_inc_32_nv
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint_t
name|atomic_inc_uint_nv
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ulong_t
name|atomic_inc_ulong_nv
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_inc_64_nv
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * Decrement target and return new value.  */
specifier|extern
name|uint8_t
name|atomic_dec_8_nv
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uchar_t
name|atomic_dec_uchar_nv
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint16_t
name|atomic_dec_16_nv
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ushort_t
name|atomic_dec_ushort_nv
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|atomic_dec_32_nv
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint_t
name|atomic_dec_uint_nv
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ulong_t
name|atomic_dec_ulong_nv
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_dec_64_nv
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * Add delta to target  */
specifier|extern
name|uint8_t
name|atomic_add_8_nv
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|,
name|int8_t
parameter_list|)
function_decl|;
specifier|extern
name|uchar_t
name|atomic_add_char_nv
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|,
name|signed
name|char
parameter_list|)
function_decl|;
specifier|extern
name|uint16_t
name|atomic_add_16_nv
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|,
name|int16_t
parameter_list|)
function_decl|;
specifier|extern
name|ushort_t
name|atomic_add_short_nv
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|,
name|short
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|atomic_add_32_nv
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|,
name|int32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint_t
name|atomic_add_int_nv
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|atomic_add_ptr_nv
parameter_list|(
specifier|volatile
name|void
modifier|*
parameter_list|,
name|ssize_t
parameter_list|)
function_decl|;
specifier|extern
name|ulong_t
name|atomic_add_long_nv
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_add_64_nv
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|,
name|int64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * logical OR bits with target and return new value.  */
specifier|extern
name|uint8_t
name|atomic_or_8_nv
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
specifier|extern
name|uchar_t
name|atomic_or_uchar_nv
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|,
name|uchar_t
parameter_list|)
function_decl|;
specifier|extern
name|uint16_t
name|atomic_or_16_nv
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
specifier|extern
name|ushort_t
name|atomic_or_ushort_nv
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|,
name|ushort_t
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|atomic_or_32_nv
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint_t
name|atomic_or_uint_nv
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|ulong_t
name|atomic_or_ulong_nv
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_or_64_nv
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * logical AND bits with target and return new value.  */
specifier|extern
name|uint8_t
name|atomic_and_8_nv
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
specifier|extern
name|uchar_t
name|atomic_and_uchar_nv
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|,
name|uchar_t
parameter_list|)
function_decl|;
specifier|extern
name|uint16_t
name|atomic_and_16_nv
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
specifier|extern
name|ushort_t
name|atomic_and_ushort_nv
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|,
name|ushort_t
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|atomic_and_32_nv
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint_t
name|atomic_and_uint_nv
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|ulong_t
name|atomic_and_ulong_nv
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_and_64_nv
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * If *arg1 == arg2, set *arg1 = arg3; return old value  */
specifier|extern
name|uint8_t
name|atomic_cas_8
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|,
name|uint8_t
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
specifier|extern
name|uchar_t
name|atomic_cas_uchar
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|,
name|uchar_t
parameter_list|,
name|uchar_t
parameter_list|)
function_decl|;
specifier|extern
name|uint16_t
name|atomic_cas_16
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
specifier|extern
name|ushort_t
name|atomic_cas_ushort
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|,
name|ushort_t
parameter_list|,
name|ushort_t
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|atomic_cas_32
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint_t
name|atomic_cas_uint
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|atomic_cas_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ulong_t
name|atomic_cas_ulong
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_cas_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * Swap target and return old value  */
specifier|extern
name|uint8_t
name|atomic_swap_8
parameter_list|(
specifier|volatile
name|uint8_t
modifier|*
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
specifier|extern
name|uchar_t
name|atomic_swap_uchar
parameter_list|(
specifier|volatile
name|uchar_t
modifier|*
parameter_list|,
name|uchar_t
parameter_list|)
function_decl|;
specifier|extern
name|uint16_t
name|atomic_swap_16
parameter_list|(
specifier|volatile
name|uint16_t
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
specifier|extern
name|ushort_t
name|atomic_swap_ushort
parameter_list|(
specifier|volatile
name|ushort_t
modifier|*
parameter_list|,
name|ushort_t
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|atomic_swap_32
parameter_list|(
specifier|volatile
name|uint32_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint_t
name|atomic_swap_uint
parameter_list|(
specifier|volatile
name|uint_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|atomic_swap_ptr
parameter_list|(
specifier|volatile
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|ulong_t
name|atomic_swap_ulong
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|||
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_swap_64
parameter_list|(
specifier|volatile
name|uint64_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * Perform an exclusive atomic bit set/clear on a target.  * Returns 0 if bit was sucessfully set/cleared, or -1  * if the bit was already set/cleared.  */
specifier|extern
name|int
name|atomic_set_long_excl
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|atomic_clear_long_excl
parameter_list|(
specifier|volatile
name|ulong_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
comment|/*  * Generic memory barrier used during lock entry, placed after the  * memory operation that acquires the lock to guarantee that the lock  * protects its data.  No stores from after the memory barrier will  * reach visibility, and no loads from after the barrier will be  * resolved, before the lock acquisition reaches global visibility.  */
specifier|extern
name|void
name|membar_enter
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * Generic memory barrier used during lock exit, placed before the  * memory operation that releases the lock to guarantee that the lock  * protects its data.  All loads and stores issued before the barrier  * will be resolved before the subsequent lock update reaches visibility.  */
specifier|extern
name|void
name|membar_exit
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * Arrange that all stores issued before this point in the code reach  * global visibility before any stores that follow; useful in producer  * modules that update a data item, then set a flag that it is available.  * The memory barrier guarantees that the available flag is not visible  * earlier than the updated data, i.e. it imposes store ordering.  */
specifier|extern
name|void
name|membar_producer
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * Arrange that all loads issued before this point in the code are  * completed before any subsequent loads; useful in consumer modules  * that check to see if data is available and read the data.  * The memory barrier guarantees that the data is not sampled until  * after the available flag has been seen, i.e. it imposes load ordering.  */
specifier|extern
name|void
name|membar_consumer
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__STDC__
argument_list|)
specifier|extern
name|void
name|atomic_inc_8
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_inc_uchar
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_inc_16
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_inc_ushort
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_inc_32
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_inc_uint
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_inc_ulong
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_inc_64
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|void
name|atomic_dec_8
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_dec_uchar
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_dec_16
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_dec_ushort
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_dec_32
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_dec_uint
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_dec_ulong
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_dec_64
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|void
name|atomic_add_8
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_add_char
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_add_16
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_add_short
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_add_32
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_add_int
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_add_ptr
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_add_long
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_add_64
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|void
name|atomic_or_8
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_or_uchar
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_or_16
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_or_ushort
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_or_32
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_or_uint
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_or_ulong
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_or_64
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|void
name|atomic_and_8
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_and_uchar
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_and_16
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_and_ushort
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_and_32
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_and_uint
parameter_list|()
function_decl|;
specifier|extern
name|void
name|atomic_and_ulong
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|void
name|atomic_and_64
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|uint8_t
name|atomic_inc_8_nv
parameter_list|()
function_decl|;
specifier|extern
name|uchar_t
name|atomic_inc_uchar_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint16_t
name|atomic_inc_16_nv
parameter_list|()
function_decl|;
specifier|extern
name|ushort_t
name|atomic_inc_ushort_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint32_t
name|atomic_inc_32_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint_t
name|atomic_inc_uint_nv
parameter_list|()
function_decl|;
specifier|extern
name|ulong_t
name|atomic_inc_ulong_nv
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_inc_64_nv
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|uint8_t
name|atomic_dec_8_nv
parameter_list|()
function_decl|;
specifier|extern
name|uchar_t
name|atomic_dec_uchar_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint16_t
name|atomic_dec_16_nv
parameter_list|()
function_decl|;
specifier|extern
name|ushort_t
name|atomic_dec_ushort_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint32_t
name|atomic_dec_32_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint_t
name|atomic_dec_uint_nv
parameter_list|()
function_decl|;
specifier|extern
name|ulong_t
name|atomic_dec_ulong_nv
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_dec_64_nv
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|uint8_t
name|atomic_add_8_nv
parameter_list|()
function_decl|;
specifier|extern
name|uchar_t
name|atomic_add_char_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint16_t
name|atomic_add_16_nv
parameter_list|()
function_decl|;
specifier|extern
name|ushort_t
name|atomic_add_short_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint32_t
name|atomic_add_32_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint_t
name|atomic_add_int_nv
parameter_list|()
function_decl|;
specifier|extern
name|void
modifier|*
name|atomic_add_ptr_nv
parameter_list|()
function_decl|;
specifier|extern
name|ulong_t
name|atomic_add_long_nv
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_add_64_nv
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|uint8_t
name|atomic_or_8_nv
parameter_list|()
function_decl|;
specifier|extern
name|uchar_t
name|atomic_or_uchar_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint16_t
name|atomic_or_16_nv
parameter_list|()
function_decl|;
specifier|extern
name|ushort_t
name|atomic_or_ushort_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint32_t
name|atomic_or_32_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint_t
name|atomic_or_uint_nv
parameter_list|()
function_decl|;
specifier|extern
name|ulong_t
name|atomic_or_ulong_nv
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_or_64_nv
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|uint8_t
name|atomic_and_8_nv
parameter_list|()
function_decl|;
specifier|extern
name|uchar_t
name|atomic_and_uchar_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint16_t
name|atomic_and_16_nv
parameter_list|()
function_decl|;
specifier|extern
name|ushort_t
name|atomic_and_ushort_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint32_t
name|atomic_and_32_nv
parameter_list|()
function_decl|;
specifier|extern
name|uint_t
name|atomic_and_uint_nv
parameter_list|()
function_decl|;
specifier|extern
name|ulong_t
name|atomic_and_ulong_nv
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_and_64_nv
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|uint8_t
name|atomic_cas_8
parameter_list|()
function_decl|;
specifier|extern
name|uchar_t
name|atomic_cas_uchar
parameter_list|()
function_decl|;
specifier|extern
name|uint16_t
name|atomic_cas_16
parameter_list|()
function_decl|;
specifier|extern
name|ushort_t
name|atomic_cas_ushort
parameter_list|()
function_decl|;
specifier|extern
name|uint32_t
name|atomic_cas_32
parameter_list|()
function_decl|;
specifier|extern
name|uint_t
name|atomic_cas_uint
parameter_list|()
function_decl|;
specifier|extern
name|void
modifier|*
name|atomic_cas_ptr
parameter_list|()
function_decl|;
specifier|extern
name|ulong_t
name|atomic_cas_ulong
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_cas_64
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|uint8_t
name|atomic_swap_8
parameter_list|()
function_decl|;
specifier|extern
name|uchar_t
name|atomic_swap_uchar
parameter_list|()
function_decl|;
specifier|extern
name|uint16_t
name|atomic_swap_16
parameter_list|()
function_decl|;
specifier|extern
name|ushort_t
name|atomic_swap_ushort
parameter_list|()
function_decl|;
specifier|extern
name|uint32_t
name|atomic_swap_32
parameter_list|()
function_decl|;
specifier|extern
name|uint_t
name|atomic_swap_uint
parameter_list|()
function_decl|;
specifier|extern
name|void
modifier|*
name|atomic_swap_ptr
parameter_list|()
function_decl|;
specifier|extern
name|ulong_t
name|atomic_swap_ulong
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|_INT64_TYPE
argument_list|)
specifier|extern
name|uint64_t
name|atomic_swap_64
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* defined(_INT64_TYPE) */
specifier|extern
name|int
name|atomic_set_long_excl
parameter_list|()
function_decl|;
specifier|extern
name|int
name|atomic_clear_long_excl
parameter_list|()
function_decl|;
specifier|extern
name|void
name|membar_enter
parameter_list|()
function_decl|;
specifier|extern
name|void
name|membar_exit
parameter_list|()
function_decl|;
specifier|extern
name|void
name|membar_producer
parameter_list|()
function_decl|;
specifier|extern
name|void
name|membar_consumer
parameter_list|()
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|_LP64
argument_list|)
operator|||
name|defined
argument_list|(
name|_ILP32
argument_list|)
define|#
directive|define
name|atomic_add_ip
value|atomic_add_long
define|#
directive|define
name|atomic_add_ip_nv
value|atomic_add_long_nv
define|#
directive|define
name|casip
value|atomic_cas_ulong
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__sparc
argument_list|)
specifier|extern
name|uint8_t
name|ldstub
parameter_list|(
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * Legacy kernel interfaces; they will go away (eventually).  */
specifier|extern
name|uint8_t
name|cas8
parameter_list|(
name|uint8_t
modifier|*
parameter_list|,
name|uint8_t
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|cas32
parameter_list|(
name|uint32_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|cas64
parameter_list|(
name|uint64_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
specifier|extern
name|ulong_t
name|caslong
parameter_list|(
name|ulong_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|casptr
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_and_long
parameter_list|(
name|ulong_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|atomic_or_long
parameter_list|(
name|ulong_t
modifier|*
parameter_list|,
name|ulong_t
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|__sparc
argument_list|)
specifier|extern
name|uint32_t
name|swapl
parameter_list|(
name|uint32_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
endif|#
directive|endif
endif|#
directive|endif
comment|/* _KERNEL */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_ATOMIC_H */
end_comment

end_unit

