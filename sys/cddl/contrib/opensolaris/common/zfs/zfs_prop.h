begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2010 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ZFS_PROP_H
end_ifndef

begin_define
define|#
directive|define
name|_ZFS_PROP_H
end_define

begin_include
include|#
directive|include
file|<sys/fs/zfs.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * For index types (e.g. compression and checksum), we want the numeric value  * in the kernel, but the string value in userland.  */
typedef|typedef
enum|enum
block|{
name|PROP_TYPE_NUMBER
block|,
comment|/* numeric value */
name|PROP_TYPE_STRING
block|,
comment|/* string value */
name|PROP_TYPE_INDEX
comment|/* numeric value indexed by string */
block|}
name|zprop_type_t
typedef|;
typedef|typedef
enum|enum
block|{
name|PROP_DEFAULT
block|,
name|PROP_READONLY
block|,
name|PROP_INHERIT
block|,
comment|/* 	 * ONETIME properties are a sort of conglomeration of READONLY 	 * and INHERIT.  They can be set only during object creation, 	 * after that they are READONLY.  If not explicitly set during 	 * creation, they can be inherited. 	 */
name|PROP_ONETIME
block|}
name|zprop_attr_t
typedef|;
typedef|typedef
struct|struct
name|zfs_index
block|{
specifier|const
name|char
modifier|*
name|pi_name
decl_stmt|;
name|uint64_t
name|pi_value
decl_stmt|;
block|}
name|zprop_index_t
typedef|;
typedef|typedef
struct|struct
block|{
specifier|const
name|char
modifier|*
name|pd_name
decl_stmt|;
comment|/* human-readable property name */
name|int
name|pd_propnum
decl_stmt|;
comment|/* property number */
name|zprop_type_t
name|pd_proptype
decl_stmt|;
comment|/* string, boolean, index, number */
specifier|const
name|char
modifier|*
name|pd_strdefault
decl_stmt|;
comment|/* default for strings */
name|uint64_t
name|pd_numdefault
decl_stmt|;
comment|/* for boolean / index / number */
name|zprop_attr_t
name|pd_attr
decl_stmt|;
comment|/* default, readonly, inherit */
name|int
name|pd_types
decl_stmt|;
comment|/* bitfield of valid dataset types */
comment|/* fs | vol | snap; or pool */
specifier|const
name|char
modifier|*
name|pd_values
decl_stmt|;
comment|/* string telling acceptable values */
specifier|const
name|char
modifier|*
name|pd_colname
decl_stmt|;
comment|/* column header for "zfs list" */
name|boolean_t
name|pd_rightalign
decl_stmt|;
comment|/* column alignment for "zfs list" */
name|boolean_t
name|pd_visible
decl_stmt|;
comment|/* do we list this property with the */
comment|/* "zfs get" help message */
specifier|const
name|zprop_index_t
modifier|*
name|pd_table
decl_stmt|;
comment|/* for index properties, a table */
comment|/* defining the possible values */
name|size_t
name|pd_table_size
decl_stmt|;
comment|/* number of entries in pd_table[] */
block|}
name|zprop_desc_t
typedef|;
comment|/*  * zfs dataset property functions  */
name|void
name|zfs_prop_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|zprop_type_t
name|zfs_prop_get_type
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
name|boolean_t
name|zfs_prop_delegatable
parameter_list|(
name|zfs_prop_t
name|prop
parameter_list|)
function_decl|;
name|zprop_desc_t
modifier|*
name|zfs_prop_get_table
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * zpool property functions  */
name|void
name|zpool_prop_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|zprop_type_t
name|zpool_prop_get_type
parameter_list|(
name|zpool_prop_t
parameter_list|)
function_decl|;
name|zprop_desc_t
modifier|*
name|zpool_prop_get_table
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * Common routines to initialize property tables  */
name|void
name|zprop_register_impl
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zprop_type_t
parameter_list|,
name|uint64_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zprop_attr_t
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
name|boolean_t
parameter_list|,
specifier|const
name|zprop_index_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|zprop_register_string
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zprop_attr_t
name|attr
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|zprop_register_number
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|zprop_attr_t
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|zprop_register_index
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|zprop_attr_t
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|zprop_index_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|zprop_register_hidden
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zprop_type_t
parameter_list|,
name|zprop_attr_t
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Common routines for zfs and zpool property management  */
name|int
name|zprop_iter_common
parameter_list|(
name|zprop_func
parameter_list|,
name|void
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
name|boolean_t
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
name|int
name|zprop_name_to_prop
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
name|int
name|zprop_string_to_index
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint64_t
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
name|int
name|zprop_index_to_string
parameter_list|(
name|int
parameter_list|,
name|uint64_t
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
name|uint64_t
name|zprop_random_value
parameter_list|(
name|int
parameter_list|,
name|uint64_t
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|zprop_values
parameter_list|(
name|int
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
name|size_t
name|zprop_width
parameter_list|(
name|int
parameter_list|,
name|boolean_t
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
name|boolean_t
name|zprop_valid_for_type
parameter_list|(
name|int
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
name|boolean_t
name|zfs_prop_written
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ZFS_PROP_H */
end_comment

end_unit

