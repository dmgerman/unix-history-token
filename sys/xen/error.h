begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2014 Roger Pau MonnÃ©<royger@FreeBSD.org>.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__XEN_ERROR_H__
end_ifndef

begin_define
define|#
directive|define
name|__XEN_ERROR_H__
end_define

begin_include
include|#
directive|include
file|<xen/interface/errno.h>
end_include

begin_comment
comment|/* Translation table */
end_comment

begin_decl_stmt
specifier|static
name|int
name|xen_errors
index|[]
init|=
block|{
index|[
name|XEN_EPERM
index|]
operator|=
name|EPERM
block|,
index|[
name|XEN_ENOENT
index|]
operator|=
name|ENOENT
block|,
index|[
name|XEN_ESRCH
index|]
operator|=
name|ESRCH
block|,
index|[
name|XEN_EIO
index|]
operator|=
name|EIO
block|,
index|[
name|XEN_ENXIO
index|]
operator|=
name|ENXIO
block|,
index|[
name|XEN_E2BIG
index|]
operator|=
name|E2BIG
block|,
index|[
name|XEN_ENOEXEC
index|]
operator|=
name|ENOEXEC
block|,
index|[
name|XEN_EBADF
index|]
operator|=
name|EBADF
block|,
index|[
name|XEN_ECHILD
index|]
operator|=
name|ECHILD
block|,
index|[
name|XEN_EAGAIN
index|]
operator|=
name|EAGAIN
block|,
index|[
name|XEN_ENOMEM
index|]
operator|=
name|ENOMEM
block|,
index|[
name|XEN_EACCES
index|]
operator|=
name|EACCES
block|,
index|[
name|XEN_EFAULT
index|]
operator|=
name|EFAULT
block|,
index|[
name|XEN_EBUSY
index|]
operator|=
name|EBUSY
block|,
index|[
name|XEN_EEXIST
index|]
operator|=
name|EEXIST
block|,
index|[
name|XEN_EXDEV
index|]
operator|=
name|EXDEV
block|,
index|[
name|XEN_ENODEV
index|]
operator|=
name|ENODEV
block|,
index|[
name|XEN_EINVAL
index|]
operator|=
name|EINVAL
block|,
index|[
name|XEN_ENFILE
index|]
operator|=
name|ENFILE
block|,
index|[
name|XEN_EMFILE
index|]
operator|=
name|EMFILE
block|,
index|[
name|XEN_ENOSPC
index|]
operator|=
name|ENOSPC
block|,
index|[
name|XEN_EMLINK
index|]
operator|=
name|EMLINK
block|,
index|[
name|XEN_EDOM
index|]
operator|=
name|EDOM
block|,
index|[
name|XEN_ERANGE
index|]
operator|=
name|ERANGE
block|,
index|[
name|XEN_EDEADLK
index|]
operator|=
name|EDEADLK
block|,
index|[
name|XEN_ENAMETOOLONG
index|]
operator|=
name|ENAMETOOLONG
block|,
index|[
name|XEN_ENOLCK
index|]
operator|=
name|ENOLCK
block|,
index|[
name|XEN_ENOSYS
index|]
operator|=
name|ENOSYS
block|,
index|[
name|XEN_ENODATA
index|]
operator|=
name|ENOENT
block|,
index|[
name|XEN_ETIME
index|]
operator|=
name|ETIMEDOUT
block|,
index|[
name|XEN_EBADMSG
index|]
operator|=
name|EBADMSG
block|,
index|[
name|XEN_EOVERFLOW
index|]
operator|=
name|EOVERFLOW
block|,
index|[
name|XEN_EILSEQ
index|]
operator|=
name|EILSEQ
block|,
index|[
name|XEN_ENOTSOCK
index|]
operator|=
name|ENOTSOCK
block|,
index|[
name|XEN_EOPNOTSUPP
index|]
operator|=
name|EOPNOTSUPP
block|,
index|[
name|XEN_EADDRINUSE
index|]
operator|=
name|EADDRINUSE
block|,
index|[
name|XEN_EADDRNOTAVAIL
index|]
operator|=
name|EADDRNOTAVAIL
block|,
index|[
name|XEN_ENOBUFS
index|]
operator|=
name|ENOBUFS
block|,
index|[
name|XEN_EISCONN
index|]
operator|=
name|EISCONN
block|,
index|[
name|XEN_ENOTCONN
index|]
operator|=
name|ENOTCONN
block|,
index|[
name|XEN_ETIMEDOUT
index|]
operator|=
name|ETIMEDOUT
block|, }
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|xen_translate_error
parameter_list|(
name|int
name|error
parameter_list|)
block|{
name|int
name|bsd_error
decl_stmt|;
name|KASSERT
argument_list|(
operator|(
name|error
operator|<
literal|0
operator|)
argument_list|,
operator|(
literal|"Value is not a valid Xen error code"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|-
name|error
operator|>=
name|nitems
argument_list|(
name|xen_errors
argument_list|)
condition|)
block|{
comment|/* 		 * We received an error value that cannot be translated, 		 * return EINVAL. 		 */
return|return
operator|(
name|EINVAL
operator|)
return|;
block|}
name|bsd_error
operator|=
name|xen_errors
index|[
operator|-
name|error
index|]
expr_stmt|;
name|KASSERT
argument_list|(
operator|(
name|bsd_error
operator|!=
literal|0
operator|)
argument_list|,
operator|(
literal|"Unknown Xen error code"
operator|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|bsd_error
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !__XEN_ERROR_H__ */
end_comment

end_unit

