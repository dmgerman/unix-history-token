begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************  * libelf.h  *   * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to  * deal in the Software without restriction, including without limitation the  * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or  * sell copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER  * DEALINGS IN THE SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__XC_LIBELF__
end_ifndef

begin_define
define|#
directive|define
name|__XC_LIBELF__
value|1
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__ia64__
argument_list|)
end_if

begin_define
define|#
directive|define
name|XEN_ELF_LITTLE_ENDIAN
end_define

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
error|define architectural endianness
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_undef
undef|#
directive|undef
name|ELFSIZE
end_undef

begin_include
include|#
directive|include
file|"elfnote.h"
end_include

begin_include
include|#
directive|include
file|"elfstructs.h"
end_include

begin_include
include|#
directive|include
file|"features.h"
end_include

begin_comment
comment|/* ------------------------------------------------------------------------ */
end_comment

begin_typedef
typedef|typedef
union|union
block|{
name|Elf32_Ehdr
name|e32
decl_stmt|;
name|Elf64_Ehdr
name|e64
decl_stmt|;
block|}
name|elf_ehdr
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|Elf32_Phdr
name|e32
decl_stmt|;
name|Elf64_Phdr
name|e64
decl_stmt|;
block|}
name|elf_phdr
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|Elf32_Shdr
name|e32
decl_stmt|;
name|Elf64_Shdr
name|e64
decl_stmt|;
block|}
name|elf_shdr
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|Elf32_Sym
name|e32
decl_stmt|;
name|Elf64_Sym
name|e64
decl_stmt|;
block|}
name|elf_sym
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|Elf32_Rel
name|e32
decl_stmt|;
name|Elf64_Rel
name|e64
decl_stmt|;
block|}
name|elf_rel
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|Elf32_Rela
name|e32
decl_stmt|;
name|Elf64_Rela
name|e64
decl_stmt|;
block|}
name|elf_rela
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|Elf32_Note
name|e32
decl_stmt|;
name|Elf64_Note
name|e64
decl_stmt|;
block|}
name|elf_note
typedef|;
end_typedef

begin_struct
struct|struct
name|elf_binary
block|{
comment|/* elf binary */
specifier|const
name|char
modifier|*
name|image
decl_stmt|;
name|size_t
name|size
decl_stmt|;
name|char
name|class
decl_stmt|;
name|char
name|data
decl_stmt|;
specifier|const
name|elf_ehdr
modifier|*
name|ehdr
decl_stmt|;
specifier|const
name|char
modifier|*
name|sec_strtab
decl_stmt|;
specifier|const
name|elf_shdr
modifier|*
name|sym_tab
decl_stmt|;
specifier|const
name|char
modifier|*
name|sym_strtab
decl_stmt|;
comment|/* loaded to */
name|char
modifier|*
name|dest
decl_stmt|;
name|uint64_t
name|pstart
decl_stmt|;
name|uint64_t
name|pend
decl_stmt|;
name|uint64_t
name|reloc_offset
decl_stmt|;
name|uint64_t
name|bsd_symtab_pstart
decl_stmt|;
name|uint64_t
name|bsd_symtab_pend
decl_stmt|;
ifndef|#
directive|ifndef
name|__XEN__
comment|/* misc */
name|FILE
modifier|*
name|log
decl_stmt|;
endif|#
directive|endif
name|int
name|verbose
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* ------------------------------------------------------------------------ */
end_comment

begin_comment
comment|/* accessing elf header fields                                              */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|XEN_ELF_BIG_ENDIAN
end_ifdef

begin_define
define|#
directive|define
name|NATIVE_ELFDATA
value|ELFDATA2MSB
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|NATIVE_ELFDATA
value|ELFDATA2LSB
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|elf_32bit
parameter_list|(
name|elf
parameter_list|)
value|(ELFCLASS32 == (elf)->class)
end_define

begin_define
define|#
directive|define
name|elf_64bit
parameter_list|(
name|elf
parameter_list|)
value|(ELFCLASS64 == (elf)->class)
end_define

begin_define
define|#
directive|define
name|elf_msb
parameter_list|(
name|elf
parameter_list|)
value|(ELFDATA2MSB == (elf)->data)
end_define

begin_define
define|#
directive|define
name|elf_lsb
parameter_list|(
name|elf
parameter_list|)
value|(ELFDATA2LSB == (elf)->data)
end_define

begin_define
define|#
directive|define
name|elf_swap
parameter_list|(
name|elf
parameter_list|)
value|(NATIVE_ELFDATA != (elf)->data)
end_define

begin_define
define|#
directive|define
name|elf_uval
parameter_list|(
name|elf
parameter_list|,
name|str
parameter_list|,
name|elem
parameter_list|)
define|\
value|((ELFCLASS64 == (elf)->class)                                       \      ? elf_access_unsigned((elf), (str),                                \                            offsetof(typeof(*(str)),e64.elem),           \                            sizeof((str)->e64.elem))                     \      : elf_access_unsigned((elf), (str),                                \                            offsetof(typeof(*(str)),e32.elem),           \                            sizeof((str)->e32.elem)))
end_define

begin_define
define|#
directive|define
name|elf_sval
parameter_list|(
name|elf
parameter_list|,
name|str
parameter_list|,
name|elem
parameter_list|)
define|\
value|((ELFCLASS64 == (elf)->class)                                       \      ? elf_access_signed((elf), (str),                                  \                          offsetof(typeof(*(str)),e64.elem),             \                          sizeof((str)->e64.elem))                       \      : elf_access_signed((elf), (str),                                  \                          offsetof(typeof(*(str)),e32.elem),             \                          sizeof((str)->e32.elem)))
end_define

begin_define
define|#
directive|define
name|elf_size
parameter_list|(
name|elf
parameter_list|,
name|str
parameter_list|)
define|\
value|((ELFCLASS64 == (elf)->class)                       \      ? sizeof((str)->e64) : sizeof((str)->e32))
end_define

begin_function_decl
name|uint64_t
name|elf_access_unsigned
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int64_t
name|elf_access_signed
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|elf_round_up
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|uint64_t
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ------------------------------------------------------------------------ */
end_comment

begin_comment
comment|/* xc_libelf_tools.c                                                        */
end_comment

begin_function_decl
name|int
name|elf_shdr_count
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|elf_phdr_count
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|elf_shdr
modifier|*
name|elf_shdr_by_name
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|elf_shdr
modifier|*
name|elf_shdr_by_index
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|elf_phdr
modifier|*
name|elf_phdr_by_index
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|elf_section_name
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_shdr
modifier|*
name|shdr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|elf_section_start
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_shdr
modifier|*
name|shdr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|elf_section_end
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_shdr
modifier|*
name|shdr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|elf_segment_start
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_phdr
modifier|*
name|phdr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|elf_segment_end
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_phdr
modifier|*
name|phdr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|elf_sym
modifier|*
name|elf_sym_by_name
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|char
modifier|*
name|symbol
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|elf_sym
modifier|*
name|elf_sym_by_index
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|elf_note_name
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_note
modifier|*
name|note
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|elf_note_desc
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_note
modifier|*
name|note
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|elf_note_numeric
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_note
modifier|*
name|note
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|elf_note
modifier|*
name|elf_note_next
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_note
modifier|*
name|note
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|elf_is_elfbinary
parameter_list|(
specifier|const
name|void
modifier|*
name|image
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|elf_phdr_is_loadable
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|elf_phdr
modifier|*
name|phdr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ------------------------------------------------------------------------ */
end_comment

begin_comment
comment|/* xc_libelf_loader.c                                                       */
end_comment

begin_function_decl
name|int
name|elf_init
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|char
modifier|*
name|image
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__XEN__
end_ifdef

begin_function_decl
name|void
name|elf_set_verbose
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_function_decl
name|void
name|elf_set_logfile
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|FILE
modifier|*
name|log
parameter_list|,
name|int
name|verbose
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|elf_parse_binary
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|elf_load_binary
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|elf_get_ptr
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|unsigned
name|long
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|elf_lookup_addr
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
specifier|const
name|char
modifier|*
name|symbol
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|elf_parse_bsdsyms
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|uint64_t
name|pstart
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* private */
end_comment

begin_comment
comment|/* ------------------------------------------------------------------------ */
end_comment

begin_comment
comment|/* xc_libelf_relocate.c                                                     */
end_comment

begin_function_decl
name|int
name|elf_reloc
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ------------------------------------------------------------------------ */
end_comment

begin_comment
comment|/* xc_libelf_dominfo.c                                                      */
end_comment

begin_define
define|#
directive|define
name|UNSET_ADDR
value|((uint64_t)-1)
end_define

begin_enum
enum|enum
name|xen_elfnote_type
block|{
name|XEN_ENT_NONE
init|=
literal|0
block|,
name|XEN_ENT_LONG
init|=
literal|1
block|,
name|XEN_ENT_STR
init|=
literal|2
block|}
enum|;
end_enum

begin_struct
struct|struct
name|xen_elfnote
block|{
name|enum
name|xen_elfnote_type
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
union|union
block|{
specifier|const
name|char
modifier|*
name|str
decl_stmt|;
name|uint64_t
name|num
decl_stmt|;
block|}
name|data
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|elf_dom_parms
block|{
comment|/* raw */
specifier|const
name|char
modifier|*
name|guest_info
decl_stmt|;
specifier|const
name|void
modifier|*
name|elf_note_start
decl_stmt|;
specifier|const
name|void
modifier|*
name|elf_note_end
decl_stmt|;
name|struct
name|xen_elfnote
name|elf_notes
index|[
name|XEN_ELFNOTE_MAX
operator|+
literal|1
index|]
decl_stmt|;
comment|/* parsed */
name|char
name|guest_os
index|[
literal|16
index|]
decl_stmt|;
name|char
name|guest_ver
index|[
literal|16
index|]
decl_stmt|;
name|char
name|xen_ver
index|[
literal|16
index|]
decl_stmt|;
name|char
name|loader
index|[
literal|16
index|]
decl_stmt|;
name|int
name|pae
decl_stmt|;
name|int
name|bsd_symtab
decl_stmt|;
name|uint64_t
name|virt_base
decl_stmt|;
name|uint64_t
name|virt_entry
decl_stmt|;
name|uint64_t
name|virt_hypercall
decl_stmt|;
name|uint64_t
name|virt_hv_start_low
decl_stmt|;
name|uint64_t
name|elf_paddr_offset
decl_stmt|;
name|uint32_t
name|f_supported
index|[
name|XENFEAT_NR_SUBMAPS
index|]
decl_stmt|;
name|uint32_t
name|f_required
index|[
name|XENFEAT_NR_SUBMAPS
index|]
decl_stmt|;
comment|/* calculated */
name|uint64_t
name|virt_offset
decl_stmt|;
name|uint64_t
name|virt_kstart
decl_stmt|;
name|uint64_t
name|virt_kend
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|void
name|elf_xen_feature_set
parameter_list|(
name|int
name|nr
parameter_list|,
name|uint32_t
modifier|*
name|addr
parameter_list|)
block|{
name|addr
index|[
name|nr
operator|>>
literal|5
index|]
operator||=
literal|1
operator|<<
operator|(
name|nr
operator|&
literal|31
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|elf_xen_feature_get
parameter_list|(
name|int
name|nr
parameter_list|,
name|uint32_t
modifier|*
name|addr
parameter_list|)
block|{
return|return
operator|!
operator|!
operator|(
name|addr
index|[
name|nr
operator|>>
literal|5
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|nr
operator|&
literal|31
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_function_decl
name|int
name|elf_xen_parse_features
parameter_list|(
specifier|const
name|char
modifier|*
name|features
parameter_list|,
name|uint32_t
modifier|*
name|supported
parameter_list|,
name|uint32_t
modifier|*
name|required
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|elf_xen_parse_note
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|struct
name|elf_dom_parms
modifier|*
name|parms
parameter_list|,
specifier|const
name|elf_note
modifier|*
name|note
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|elf_xen_parse_guest_info
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|struct
name|elf_dom_parms
modifier|*
name|parms
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|elf_xen_parse
parameter_list|(
name|struct
name|elf_binary
modifier|*
name|elf
parameter_list|,
name|struct
name|elf_dom_parms
modifier|*
name|parms
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __XC_LIBELF__ */
end_comment

end_unit

