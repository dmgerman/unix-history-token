begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2012 Broadcom Corporation  * All Rights Reserved  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE  * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__NLM_UCORE_LOADER_H__
end_ifndef

begin_define
define|#
directive|define
name|__NLM_UCORE_LOADER_H__
end_define

begin_comment
comment|/** * @file_name ucore_loader.h * @author Netlogic Microsystems * @brief Ucore loader API header */
end_comment

begin_define
define|#
directive|define
name|CODE_SIZE_PER_UCORE
value|(4<< 10)
end_define

begin_function
specifier|static
name|__inline__
name|void
name|nlm_ucore_load_image
parameter_list|(
name|uint64_t
name|nae_base
parameter_list|,
name|int
name|ucore
parameter_list|)
block|{
name|uint64_t
name|addr
init|=
name|nae_base
operator|+
name|NAE_UCORE_SHARED_RAM_OFFSET
operator|+
operator|(
name|ucore
operator|*
name|CODE_SIZE_PER_UCORE
operator|)
decl_stmt|;
name|uint32_t
modifier|*
name|p
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|ucore_app_bin
decl_stmt|;
name|int
name|i
decl_stmt|,
name|size
decl_stmt|;
name|size
operator|=
sizeof|sizeof
argument_list|(
name|ucore_app_bin
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
operator|,
name|addr
operator|+=
literal|4
control|)
name|nlm_store_word_daddr
argument_list|(
name|addr
argument_list|,
name|htobe32
argument_list|(
name|p
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|/* add a 'nop' if number of instructions are odd */
if|if
condition|(
name|size
operator|&
literal|0x1
condition|)
name|nlm_store_word_daddr
argument_list|(
name|addr
argument_list|,
literal|0x0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|nlm_ucore_write_sharedmem
parameter_list|(
name|uint64_t
name|nae_base
parameter_list|,
name|int
name|index
parameter_list|,
name|uint32_t
name|data
parameter_list|)
block|{
name|uint32_t
name|ucore_cfg
decl_stmt|;
name|uint64_t
name|addr
init|=
name|nae_base
operator|+
name|NAE_UCORE_SHARED_RAM_OFFSET
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|128
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|ucore_cfg
operator|=
name|nlm_read_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|)
expr_stmt|;
comment|/* set iram to zero */
name|nlm_write_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|,
operator|(
name|ucore_cfg
operator|&
operator|~
operator|(
literal|0x1
operator|<<
literal|7
operator|)
operator|)
argument_list|)
expr_stmt|;
name|nlm_store_word_daddr
argument_list|(
name|addr
operator|+
operator|(
name|index
operator|*
literal|4
operator|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|/* restore ucore config */
name|nlm_write_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|,
name|ucore_cfg
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|nlm_ucore_read_sharedmem
parameter_list|(
name|uint64_t
name|nae_base
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|uint64_t
name|addr
init|=
name|nae_base
operator|+
name|NAE_UCORE_SHARED_RAM_OFFSET
decl_stmt|;
name|uint32_t
name|ucore_cfg
decl_stmt|,
name|val
decl_stmt|;
name|ucore_cfg
operator|=
name|nlm_read_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|)
expr_stmt|;
comment|/* set iram to zero */
name|nlm_write_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|,
operator|(
name|ucore_cfg
operator|&
operator|~
operator|(
literal|0x1
operator|<<
literal|7
operator|)
operator|)
argument_list|)
expr_stmt|;
name|val
operator|=
name|nlm_load_word_daddr
argument_list|(
name|addr
operator|+
operator|(
name|index
operator|*
literal|4
operator|)
argument_list|)
expr_stmt|;
comment|/* restore ucore config */
name|nlm_write_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|,
name|ucore_cfg
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_load_all
parameter_list|(
name|uint64_t
name|nae_base
parameter_list|,
name|uint32_t
name|ucore_mask
parameter_list|,
name|int
name|nae_reset_done
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
name|count
init|=
literal|0
decl_stmt|;
name|uint32_t
name|mask
decl_stmt|;
name|uint32_t
name|ucore_cfg
init|=
literal|0
decl_stmt|;
name|mask
operator|=
name|ucore_mask
operator|&
literal|0xffff
expr_stmt|;
comment|/* Stop all ucores */
if|if
condition|(
name|nae_reset_done
operator|==
literal|0
condition|)
block|{
comment|/* Skip the Ucore reset if NAE reset is done */
name|ucore_cfg
operator|=
name|nlm_read_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|)
expr_stmt|;
name|nlm_write_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|,
name|ucore_cfg
operator||
operator|(
literal|1
operator|<<
literal|24
operator|)
argument_list|)
expr_stmt|;
comment|/* poll for ucore to get in to a wait state */
do|do
block|{
name|ucore_cfg
operator|=
name|nlm_read_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|ucore_cfg
operator|&
operator|(
literal|1
operator|<<
literal|25
operator|)
operator|)
operator|==
literal|0
condition|)
do|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|ucore_mask
argument_list|)
operator|*
name|NBBY
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|mask
operator|&
operator|(
literal|1
operator|<<
name|i
operator|)
operator|)
operator|==
literal|0
condition|)
continue|continue;
name|nlm_ucore_load_image
argument_list|(
name|nae_base
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|/* Enable per-domain ucores */
name|ucore_cfg
operator|=
name|nlm_read_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|)
expr_stmt|;
comment|/* write one to reset bits to put the ucores in reset */
name|ucore_cfg
operator|=
name|ucore_cfg
operator||
operator|(
operator|(
operator|(
name|mask
operator|)
operator|&
literal|0xffff
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
name|nlm_write_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|,
name|ucore_cfg
argument_list|)
expr_stmt|;
comment|/* write zero to reset bits to pull them out of reset */
name|ucore_cfg
operator|=
name|ucore_cfg
operator|&
operator|(
operator|~
operator|(
operator|(
operator|(
name|mask
operator|)
operator|&
literal|0xffff
operator|)
operator|<<
literal|8
operator|)
operator|)
operator|&
operator|~
operator|(
literal|1
operator|<<
literal|24
operator|)
expr_stmt|;
name|nlm_write_nae_reg
argument_list|(
name|nae_base
argument_list|,
name|NAE_RX_UCORE_CFG
argument_list|,
name|ucore_cfg
argument_list|)
expr_stmt|;
return|return
operator|(
name|count
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

