begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright 2003-2011 Netlogic Microsystems (Netlogic). All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * THIS SOFTWARE IS PROVIDED BY Netlogic Microsystems ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL NETLOGIC OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF  * THE POSSIBILITY OF SUCH DAMAGE.  *  * NETLOGIC_BSD  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__NLM_HAL_COP2_H__
end_ifndef

begin_define
define|#
directive|define
name|__NLM_HAL_COP2_H__
end_define

begin_define
define|#
directive|define
name|COP2_TX_BUF
value|0
end_define

begin_define
define|#
directive|define
name|COP2_RX_BUF
value|1
end_define

begin_define
define|#
directive|define
name|COP2_TXMSGSTATUS
value|2
end_define

begin_define
define|#
directive|define
name|COP2_RXMSGSTATUS
value|3
end_define

begin_define
define|#
directive|define
name|COP2_MSGSTATUS1
value|4
end_define

begin_define
define|#
directive|define
name|COP2_MSGCONFIG
value|5
end_define

begin_define
define|#
directive|define
name|COP2_MSGCONFIG1
value|6
end_define

begin_define
define|#
directive|define
name|CROSSTHR_POPQ_EN
value|0x01
end_define

begin_define
define|#
directive|define
name|VC0_POPQ_EN
value|0x02
end_define

begin_define
define|#
directive|define
name|VC1_POPQ_EN
value|0x04
end_define

begin_define
define|#
directive|define
name|VC2_POPQ_EN
value|0x08
end_define

begin_define
define|#
directive|define
name|VC3_POPQ_EN
value|0x10
end_define

begin_define
define|#
directive|define
name|ALL_VC_POPQ_EN
value|0x1E
end_define

begin_define
define|#
directive|define
name|ALL_VC_CT_POPQ_EN
value|0x1F
end_define

begin_struct
struct|struct
name|nlm_fmn_msg
block|{
name|uint64_t
name|msg
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|NLM_DEFINE_COP2_ACCESSORS32
parameter_list|(
name|name
parameter_list|,
name|reg
parameter_list|,
name|sel
parameter_list|)
define|\
value|static inline uint32_t nlm_read_c2_##name(void)			\ {								\ 	uint32_t __rv;						\ 	__asm__ __volatile__ (					\ 	".set	push\n"						\ 	".set	noreorder\n"					\ 	".set	mips64\n"					\ 	"mfc2	%0, $%1, %2\n"					\ 	".set	pop\n"						\ 	: "=r" (__rv)						\ 	: "i" (reg), "i" (sel));				\ 	return __rv;						\ }								\ 								\ static inline void nlm_write_c2_##name(uint32_t val)		\ {								\ 	__asm__ __volatile__(					\ 	".set	push\n"						\ 	".set	noreorder\n"					\ 	".set	mips64\n"					\ 	"mtc2	%0, $%1, %2\n"					\ 	".set	pop\n"						\ 	: : "r" (val), "i" (reg), "i" (sel));			\ } struct __hack
end_define

begin_if
if|#
directive|if
operator|(
name|__mips
operator|==
literal|64
operator|)
end_if

begin_define
define|#
directive|define
name|NLM_DEFINE_COP2_ACCESSORS64
parameter_list|(
name|name
parameter_list|,
name|reg
parameter_list|,
name|sel
parameter_list|)
define|\
value|static inline uint64_t nlm_read_c2_##name(void)			\ {								\ 	uint64_t __rv;						\ 	__asm__ __volatile__ (					\ 	".set	push\n"						\ 	".set	noreorder\n"					\ 	".set	mips64\n"					\ 	"dmfc2	%0, $%1, %2\n"					\ 	".set	pop\n"						\ 	: "=r" (__rv)						\ 	: "i" (reg), "i" (sel));				\ 	return __rv;						\ }								\ 								\ static inline void nlm_write_c2_##name(uint64_t val)		\ {								\ 	__asm__ __volatile__ (					\ 	".set	push\n"						\ 	".set	noreorder\n"					\ 	".set	mips64\n"					\ 	"dmtc2	%0, $%1, %2\n"					\ 	".set	pop\n"						\ 	: : "r" (val), "i" (reg), "i" (sel));			\ } struct __hack
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|NLM_DEFINE_COP2_ACCESSORS64
parameter_list|(
name|name
parameter_list|,
name|reg
parameter_list|,
name|sel
parameter_list|)
define|\
value|static inline uint64_t nlm_read_c2_##name(void)			\ {								\ 	uint32_t __high, __low;					\ 	__asm__ __volatile__ (					\ 	".set	push\n"						\ 	".set	noreorder\n"					\ 	".set	mips64\n"					\ 	"dmfc2	$8, $%2, %3\n"					\ 	"dsra32	%0, $8, 0\n"					\ 	"sll	%1, $8, 0\n"					\ 	".set	pop\n"						\ 	: "=r"(__high), "=r"(__low)				\ 	: "i"(reg), "i"(sel)					\ 	: "$8");						\ 								\ 	return ((uint64_t)__high<< 32) | __low;		\ }								\ 								\ static inline void nlm_write_c2_##name(uint64_t val)		\ {								\ 	uint32_t __high = val>> 32;				\ 	uint32_t __low = val& 0xffffffff;			\ 	__asm__ __volatile__ (					\ 	".set	push\n"						\ 	".set	noreorder\n"					\ 	".set	mips64\n"					\ 	"dsll32	$8, %1, 0\n"					\ 	"dsll32	$9, %0, 0\n"					\ 	"dsrl32	$8, $8, 0\n"					\ 	"or	$8, $8, $9\n"					\ 	"dmtc2	$8, $%2, %3\n"					\ 	".set	pop\n"						\ 	: : "r"(__high), "r"(__low),  "i"(reg), "i"(sel)	\ 	: "$8", "$9");						\ } struct __hack
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS64
argument_list|(
name|txbuf0
argument_list|,
name|COP2_TX_BUF
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS64
argument_list|(
name|txbuf1
argument_list|,
name|COP2_TX_BUF
argument_list|,
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS64
argument_list|(
name|txbuf2
argument_list|,
name|COP2_TX_BUF
argument_list|,
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS64
argument_list|(
name|txbuf3
argument_list|,
name|COP2_TX_BUF
argument_list|,
literal|3
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS64
argument_list|(
name|rxbuf0
argument_list|,
name|COP2_RX_BUF
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS64
argument_list|(
name|rxbuf1
argument_list|,
name|COP2_RX_BUF
argument_list|,
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS64
argument_list|(
name|rxbuf2
argument_list|,
name|COP2_RX_BUF
argument_list|,
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS64
argument_list|(
name|rxbuf3
argument_list|,
name|COP2_RX_BUF
argument_list|,
literal|3
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS32
argument_list|(
name|txmsgstatus
argument_list|,
name|COP2_TXMSGSTATUS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS32
argument_list|(
name|rxmsgstatus
argument_list|,
name|COP2_RXMSGSTATUS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS32
argument_list|(
name|msgstatus1
argument_list|,
name|COP2_MSGSTATUS1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS32
argument_list|(
name|msgconfig
argument_list|,
name|COP2_MSGCONFIG
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_COP2_ACCESSORS32
argument_list|(
name|msgconfig1
argument_list|,
name|COP2_MSGCONFIG1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/* successful completion returns 1, else 0 */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|nlm_msgsend
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|int
name|result
decl_stmt|;
asm|__asm__
specifier|volatile
asm|( 		".set push\n" 		".set noreorder\n" 		".set mips64\n" 		"move	$8, %1\n" 		"sync\n" 		"/* msgsnds	$9, $8 */\n" 		".word	0x4a084801\n" 		"move	%0, $9\n" 		".set pop\n" 		: "=r" (result) 		: "r" (val) 		: "$8", "$9");
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|nlm_msgld
parameter_list|(
name|int
name|vc
parameter_list|)
block|{
name|int
name|val
decl_stmt|;
asm|__asm__
specifier|volatile
asm|( 		".set push\n" 		".set noreorder\n" 		".set mips64\n" 		"move	$8, %1\n" 		"/* msgld	$9, $8 */\n" 		".word 0x4a084802\n" 		"move	%0, $9\n" 		".set pop\n" 		: "=r" (val) 		: "r" (vc) 		: "$8", "$9");
return|return
name|val
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|nlm_msgwait
parameter_list|(
name|int
name|vc
parameter_list|)
block|{
asm|__asm__
specifier|volatile
asm|( 		".set push\n" 		".set noreorder\n" 		".set mips64\n" 		"move	$8, %0\n" 		"/* msgwait	$8 */\n" 		".word 0x4a080003\n" 		".set pop\n" 		: : "r" (vc) 		: "$8");
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|nlm_fmn_msgsend
parameter_list|(
name|int
name|dstid
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|swcode
parameter_list|,
name|struct
name|nlm_fmn_msg
modifier|*
name|m
parameter_list|)
block|{
name|uint32_t
name|flags
decl_stmt|,
name|status
decl_stmt|;
name|int
name|rv
decl_stmt|;
name|size
operator|-=
literal|1
expr_stmt|;
name|flags
operator|=
name|nlm_save_flags_cop2
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|size
condition|)
block|{
case|case
literal|3
case|:
name|nlm_write_c2_txbuf3
argument_list|(
name|m
operator|->
name|msg
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
case|case
literal|2
case|:
name|nlm_write_c2_txbuf2
argument_list|(
name|m
operator|->
name|msg
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
case|case
literal|1
case|:
name|nlm_write_c2_txbuf1
argument_list|(
name|m
operator|->
name|msg
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
case|case
literal|0
case|:
name|nlm_write_c2_txbuf0
argument_list|(
name|m
operator|->
name|msg
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|dstid
operator||=
operator|(
operator|(
name|swcode
operator|<<
literal|24
operator|)
operator||
operator|(
name|size
operator|<<
literal|16
operator|)
operator|)
expr_stmt|;
name|status
operator|=
name|nlm_msgsend
argument_list|(
name|dstid
argument_list|)
expr_stmt|;
name|rv
operator|=
operator|!
name|status
expr_stmt|;
if|if
condition|(
name|rv
operator|!=
literal|0
condition|)
name|rv
operator|=
name|nlm_read_c2_txmsgstatus
argument_list|()
expr_stmt|;
name|nlm_restore_flags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
return|return
name|rv
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|nlm_fmn_msgrcv
parameter_list|(
name|int
name|vc
parameter_list|,
name|int
modifier|*
name|srcid
parameter_list|,
name|int
modifier|*
name|size
parameter_list|,
name|int
modifier|*
name|code
parameter_list|,
name|struct
name|nlm_fmn_msg
modifier|*
name|m
parameter_list|)
block|{
name|uint32_t
name|status
decl_stmt|;
name|uint32_t
name|msg_status
decl_stmt|,
name|flags
decl_stmt|;
name|int
name|tmp_sz
decl_stmt|,
name|rv
decl_stmt|;
name|flags
operator|=
name|nlm_save_flags_cop2
argument_list|()
expr_stmt|;
name|status
operator|=
name|nlm_msgld
argument_list|(
name|vc
argument_list|)
expr_stmt|;
comment|/* will return 0, if error */
name|rv
operator|=
operator|!
name|status
expr_stmt|;
if|if
condition|(
name|rv
operator|==
literal|0
condition|)
block|{
name|msg_status
operator|=
name|nlm_read_c2_rxmsgstatus
argument_list|()
expr_stmt|;
operator|*
name|size
operator|=
operator|(
operator|(
name|msg_status
operator|>>
literal|26
operator|)
operator|&
literal|0x3
operator|)
operator|+
literal|1
expr_stmt|;
operator|*
name|code
operator|=
operator|(
name|msg_status
operator|>>
literal|18
operator|)
operator|&
literal|0xff
expr_stmt|;
operator|*
name|srcid
operator|=
operator|(
name|msg_status
operator|>>
literal|4
operator|)
operator|&
literal|0xfff
expr_stmt|;
name|tmp_sz
operator|=
operator|*
name|size
operator|-
literal|1
expr_stmt|;
switch|switch
condition|(
name|tmp_sz
condition|)
block|{
case|case
literal|3
case|:
name|m
operator|->
name|msg
index|[
literal|3
index|]
operator|=
name|nlm_read_c2_rxbuf3
argument_list|()
expr_stmt|;
case|case
literal|2
case|:
name|m
operator|->
name|msg
index|[
literal|2
index|]
operator|=
name|nlm_read_c2_rxbuf2
argument_list|()
expr_stmt|;
case|case
literal|1
case|:
name|m
operator|->
name|msg
index|[
literal|1
index|]
operator|=
name|nlm_read_c2_rxbuf1
argument_list|()
expr_stmt|;
case|case
literal|0
case|:
name|m
operator|->
name|msg
index|[
literal|0
index|]
operator|=
name|nlm_read_c2_rxbuf0
argument_list|()
expr_stmt|;
block|}
block|}
name|nlm_restore_flags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
return|return
name|rv
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|nlm_fmn_cpu_init
parameter_list|(
name|int
name|int_vec
parameter_list|,
name|int
name|ctpe
parameter_list|,
name|int
name|v0pe
parameter_list|,
name|int
name|v1pe
parameter_list|,
name|int
name|v2pe
parameter_list|,
name|int
name|v3pe
parameter_list|)
block|{
name|uint32_t
name|val
init|=
name|nlm_read_c2_msgconfig
argument_list|()
decl_stmt|;
comment|/* Note: in XLP PRM 0.8.1, the int_vec bits are un-documented 	 * in msgconfig register of cop2. 	 * As per chip/cpu RTL, [16:20] bits consist of int_vec. 	 */
name|val
operator||=
operator|(
operator|(
name|int_vec
operator|&
literal|0x1f
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|v3pe
operator|&
literal|0x1
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|v2pe
operator|&
literal|0x1
operator|)
operator|<<
literal|3
operator|)
operator||
operator|(
operator|(
name|v1pe
operator|&
literal|0x1
operator|)
operator|<<
literal|2
operator|)
operator||
operator|(
operator|(
name|v0pe
operator|&
literal|0x1
operator|)
operator|<<
literal|1
operator|)
operator||
operator|(
name|ctpe
operator|&
literal|0x1
operator|)
expr_stmt|;
name|nlm_write_c2_msgconfig
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

