begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2012 Broadcom Corporation  * All Rights Reserved  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *   * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE  * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NLM_HAL_CRYPTO_H_
end_ifndef

begin_define
define|#
directive|define
name|_NLM_HAL_CRYPTO_H_
end_define

begin_define
define|#
directive|define
name|SAE_CFG_REG
value|0x00
end_define

begin_define
define|#
directive|define
name|SAE_ENG_SEL_0
value|0x01
end_define

begin_define
define|#
directive|define
name|SAE_ENG_SEL_1
value|0x02
end_define

begin_define
define|#
directive|define
name|SAE_ENG_SEL_2
value|0x03
end_define

begin_define
define|#
directive|define
name|SAE_ENG_SEL_3
value|0x04
end_define

begin_define
define|#
directive|define
name|SAE_ENG_SEL_4
value|0x05
end_define

begin_define
define|#
directive|define
name|SAE_ENG_SEL_5
value|0x06
end_define

begin_define
define|#
directive|define
name|SAE_ENG_SEL_6
value|0x07
end_define

begin_define
define|#
directive|define
name|SAE_ENG_SEL_7
value|0x08
end_define

begin_define
define|#
directive|define
name|RSA_CFG_REG
value|0x00
end_define

begin_define
define|#
directive|define
name|RSA_ENG_SEL_0
value|0x01
end_define

begin_define
define|#
directive|define
name|RSA_ENG_SEL_1
value|0x02
end_define

begin_define
define|#
directive|define
name|RSA_ENG_SEL_2
value|0x03
end_define

begin_define
define|#
directive|define
name|nlm_read_sec_reg
parameter_list|(
name|b
parameter_list|,
name|r
parameter_list|)
value|nlm_read_reg(b, r)
end_define

begin_define
define|#
directive|define
name|nlm_write_sec_reg
parameter_list|(
name|b
parameter_list|,
name|r
parameter_list|,
name|v
parameter_list|)
value|nlm_write_reg(b, r, v)
end_define

begin_define
define|#
directive|define
name|nlm_get_sec_pcibase
parameter_list|(
name|node
parameter_list|)
value|nlm_pcicfg_base(XLP_IO_SEC_OFFSET(node))
end_define

begin_define
define|#
directive|define
name|nlm_get_sec_regbase
parameter_list|(
name|node
parameter_list|)
define|\
value|(nlm_get_sec_pcibase(node) + XLP_IO_PCI_HDRSZ)
end_define

begin_define
define|#
directive|define
name|nlm_read_rsa_reg
parameter_list|(
name|b
parameter_list|,
name|r
parameter_list|)
value|nlm_read_reg(b, r)
end_define

begin_define
define|#
directive|define
name|nlm_write_rsa_reg
parameter_list|(
name|b
parameter_list|,
name|r
parameter_list|,
name|v
parameter_list|)
value|nlm_write_reg(b, r, v)
end_define

begin_define
define|#
directive|define
name|nlm_get_rsa_pcibase
parameter_list|(
name|node
parameter_list|)
value|nlm_pcicfg_base(XLP_IO_RSA_OFFSET(node))
end_define

begin_define
define|#
directive|define
name|nlm_get_rsa_regbase
parameter_list|(
name|node
parameter_list|)
define|\
value|(nlm_get_rsa_pcibase(node) + XLP_IO_PCI_HDRSZ)
end_define

begin_define
define|#
directive|define
name|nlm_pcibase_sec
parameter_list|(
name|node
parameter_list|)
value|nlm_pcicfg_base(XLP_IO_SEC_OFFSET(node))
end_define

begin_define
define|#
directive|define
name|nlm_qidstart_sec
parameter_list|(
name|node
parameter_list|)
value|nlm_qidstart_kseg(nlm_pcibase_sec(node))
end_define

begin_define
define|#
directive|define
name|nlm_qnum_sec
parameter_list|(
name|node
parameter_list|)
value|nlm_qnum_kseg(nlm_pcibase_sec(node))
end_define

begin_comment
comment|/*  * Since buffer allocation for crypto at kernel is done as malloc, each  * segment size is given as page size which is 4K by default  */
end_comment

begin_define
define|#
directive|define
name|NLM_CRYPTO_MAX_SEG_LEN
value|PAGE_SIZE
end_define

begin_define
define|#
directive|define
name|MAX_KEY_LEN_IN_DW
value|20
end_define

begin_define
define|#
directive|define
name|left_shift64
parameter_list|(
name|x
parameter_list|,
name|bitshift
parameter_list|,
name|numofbits
parameter_list|)
define|\
value|((uint64_t)(x)<< (bitshift))
end_define

begin_define
define|#
directive|define
name|left_shift64_mask
parameter_list|(
name|x
parameter_list|,
name|bitshift
parameter_list|,
name|numofbits
parameter_list|)
define|\
value|(((uint64_t)(x)& ((1ULL<< (numofbits)) - 1))<< (bitshift))
end_define

begin_comment
comment|/** * @brief cipher algorithms * @ingroup crypto */
end_comment

begin_enum
enum|enum
name|nlm_cipher_algo
block|{
name|NLM_CIPHER_BYPASS
init|=
literal|0
block|,
name|NLM_CIPHER_DES
init|=
literal|1
block|,
name|NLM_CIPHER_3DES
init|=
literal|2
block|,
name|NLM_CIPHER_AES128
init|=
literal|3
block|,
name|NLM_CIPHER_AES192
init|=
literal|4
block|,
name|NLM_CIPHER_AES256
init|=
literal|5
block|,
name|NLM_CIPHER_ARC4
init|=
literal|6
block|,
name|NLM_CIPHER_KASUMI_F8
init|=
literal|7
block|,
name|NLM_CIPHER_SNOW3G_F8
init|=
literal|8
block|,
name|NLM_CIPHER_CAMELLIA128
init|=
literal|9
block|,
name|NLM_CIPHER_CAMELLIA192
init|=
literal|0xA
block|,
name|NLM_CIPHER_CAMELLIA256
init|=
literal|0xB
block|,
name|NLM_CIPHER_MAX
init|=
literal|0xC
block|, }
enum|;
end_enum

begin_comment
comment|/** * @brief cipher modes * @ingroup crypto */
end_comment

begin_enum
enum|enum
name|nlm_cipher_mode
block|{
name|NLM_CIPHER_MODE_ECB
init|=
literal|0
block|,
name|NLM_CIPHER_MODE_CBC
init|=
literal|1
block|,
name|NLM_CIPHER_MODE_CFB
init|=
literal|2
block|,
name|NLM_CIPHER_MODE_OFB
init|=
literal|3
block|,
name|NLM_CIPHER_MODE_CTR
init|=
literal|4
block|,
name|NLM_CIPHER_MODE_AES_F8
init|=
literal|5
block|,
name|NLM_CIPHER_MODE_GCM
init|=
literal|6
block|,
name|NLM_CIPHER_MODE_CCM
init|=
literal|7
block|,
name|NLM_CIPHER_MODE_UNDEFINED1
init|=
literal|8
block|,
name|NLM_CIPHER_MODE_UNDEFINED2
init|=
literal|9
block|,
name|NLM_CIPHER_MODE_LRW
init|=
literal|0xA
block|,
name|NLM_CIPHER_MODE_XTS
init|=
literal|0xB
block|,
name|NLM_CIPHER_MODE_MAX
init|=
literal|0xC
block|, }
enum|;
end_enum

begin_comment
comment|/** * @brief hash algorithms * @ingroup crypto */
end_comment

begin_enum
enum|enum
name|nlm_hash_algo
block|{
name|NLM_HASH_BYPASS
init|=
literal|0
block|,
name|NLM_HASH_MD5
init|=
literal|1
block|,
name|NLM_HASH_SHA
init|=
literal|2
block|,
name|NLM_HASH_UNDEFINED
init|=
literal|3
block|,
name|NLM_HASH_AES128
init|=
literal|4
block|,
name|NLM_HASH_AES192
init|=
literal|5
block|,
name|NLM_HASH_AES256
init|=
literal|6
block|,
name|NLM_HASH_KASUMI_F9
init|=
literal|7
block|,
name|NLM_HASH_SNOW3G_F9
init|=
literal|8
block|,
name|NLM_HASH_CAMELLIA128
init|=
literal|9
block|,
name|NLM_HASH_CAMELLIA192
init|=
literal|0xA
block|,
name|NLM_HASH_CAMELLIA256
init|=
literal|0xB
block|,
name|NLM_HASH_GHASH
init|=
literal|0xC
block|,
name|NLM_HASH_MAX
init|=
literal|0xD
block|}
enum|;
end_enum

begin_comment
comment|/** * @brief hash modes * @ingroup crypto */
end_comment

begin_enum
enum|enum
name|nlm_hash_mode
block|{
name|NLM_HASH_MODE_SHA1
init|=
literal|0
block|,
comment|/* Only SHA */
name|NLM_HASH_MODE_SHA224
init|=
literal|1
block|,
comment|/* Only SHA */
name|NLM_HASH_MODE_SHA256
init|=
literal|2
block|,
comment|/* Only SHA */
name|NLM_HASH_MODE_SHA384
init|=
literal|3
block|,
comment|/* Only SHA */
name|NLM_HASH_MODE_SHA512
init|=
literal|4
block|,
comment|/* Only SHA */
name|NLM_HASH_MODE_CMAC
init|=
literal|5
block|,
comment|/* AES and Camellia */
name|NLM_HASH_MODE_XCBC
init|=
literal|6
block|,
comment|/* AES and Camellia */
name|NLM_HASH_MODE_CBC_MAC
init|=
literal|7
block|,
comment|/* AES and Camellia */
name|NLM_HASH_MODE_CCM
init|=
literal|8
block|,
comment|/* AES */
name|NLM_HASH_MODE_GCM
init|=
literal|9
block|,
comment|/* AES */
name|NLM_HASH_MODE_MAX
init|=
literal|0xA
block|, }
enum|;
end_enum

begin_comment
comment|/** * @brief crypto control descriptor, should be cache aligned * @ingroup crypto */
end_comment

begin_struct
struct|struct
name|nlm_crypto_pkt_ctrl
block|{
name|uint64_t
name|desc0
decl_stmt|;
comment|/* combination of cipher and hash keys */
name|uint64_t
name|key
index|[
name|MAX_KEY_LEN_IN_DW
index|]
decl_stmt|;
name|uint32_t
name|cipherkeylen
decl_stmt|;
name|uint32_t
name|hashkeylen
decl_stmt|;
name|uint32_t
name|taglen
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/** * @brief crypto packet descriptor, should be cache aligned   * @ingroup crypto */
end_comment

begin_struct
struct|struct
name|nlm_crypto_pkt_param
block|{
name|uint64_t
name|desc0
decl_stmt|;
name|uint64_t
name|desc1
decl_stmt|;
name|uint64_t
name|desc2
decl_stmt|;
name|uint64_t
name|desc3
decl_stmt|;
name|uint64_t
name|segment
index|[
literal|1
index|]
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_rsa_ecc_fmn_entry0
parameter_list|(
name|unsigned
name|int
name|l3alloc
parameter_list|,
name|unsigned
name|int
name|type
parameter_list|,
name|unsigned
name|int
name|func
parameter_list|,
name|uint64_t
name|srcaddr
parameter_list|)
block|{
return|return
operator|(
name|left_shift64
argument_list|(
name|l3alloc
argument_list|,
literal|61
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|type
argument_list|,
literal|46
argument_list|,
literal|7
argument_list|)
operator||
name|left_shift64
argument_list|(
name|func
argument_list|,
literal|40
argument_list|,
literal|6
argument_list|)
operator||
name|left_shift64
argument_list|(
name|srcaddr
argument_list|,
literal|0
argument_list|,
literal|40
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_rsa_ecc_fmn_entry1
parameter_list|(
name|unsigned
name|int
name|dstclobber
parameter_list|,
name|unsigned
name|int
name|l3alloc
parameter_list|,
name|unsigned
name|int
name|fbvc
parameter_list|,
name|uint64_t
name|dstaddr
parameter_list|)
block|{
return|return
operator|(
name|left_shift64
argument_list|(
name|dstclobber
argument_list|,
literal|62
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|l3alloc
argument_list|,
literal|61
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|fbvc
argument_list|,
literal|40
argument_list|,
literal|12
argument_list|)
operator||
name|left_shift64
argument_list|(
name|dstaddr
argument_list|,
literal|0
argument_list|,
literal|40
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/** * @brief Generate cypto control descriptor * @ingroup crypto * hmac : 1 for hash with hmac  * hashalg, see hash_alg enums * hashmode, see hash_mode enums * cipherhalg, see  cipher_alg enums * ciphermode, see  cipher_mode enums * arc4_cipherkeylen : length of arc4 cipher key, 0 is interpreted as 32  * arc4_keyinit :  * cfbmask : cipher text for feedback,  *           0(1 bit), 1(2 bits), 2(4 bits), 3(8 bits), 4(16bits), 5(32 bits), *           6(64 bits), 7(128 bits) */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_pkt_ctrl_desc
parameter_list|(
name|unsigned
name|int
name|hmac
parameter_list|,
name|unsigned
name|int
name|hashalg
parameter_list|,
name|unsigned
name|int
name|hashmode
parameter_list|,
name|unsigned
name|int
name|cipheralg
parameter_list|,
name|unsigned
name|int
name|ciphermode
parameter_list|,
name|unsigned
name|int
name|arc4_cipherkeylen
parameter_list|,
name|unsigned
name|int
name|arc4_keyinit
parameter_list|,
name|unsigned
name|int
name|cfbmask
parameter_list|)
block|{
return|return
operator|(
name|left_shift64
argument_list|(
name|hmac
argument_list|,
literal|61
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|hashalg
argument_list|,
literal|52
argument_list|,
literal|8
argument_list|)
operator||
name|left_shift64
argument_list|(
name|hashmode
argument_list|,
literal|43
argument_list|,
literal|8
argument_list|)
operator||
name|left_shift64
argument_list|(
name|cipheralg
argument_list|,
literal|34
argument_list|,
literal|8
argument_list|)
operator||
name|left_shift64
argument_list|(
name|ciphermode
argument_list|,
literal|25
argument_list|,
literal|8
argument_list|)
operator||
name|left_shift64
argument_list|(
name|arc4_cipherkeylen
argument_list|,
literal|18
argument_list|,
literal|5
argument_list|)
operator||
name|left_shift64
argument_list|(
name|arc4_keyinit
argument_list|,
literal|17
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|cfbmask
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/** * @brief Generate cypto packet descriptor 0 * @ingroup crypto * tls : 1 (tls enabled) 0(tls disabled) * hash_source : 1 (encrypted data is sent to the auth engine) *               0 (plain data is sent to the auth engine) * hashout_l3alloc : 1 (auth output is transited through l3 cache) * encrypt : 1 (for encrypt) 0 (for decrypt) * ivlen : iv length in bytes * hashdst_addr : hash out physical address, byte aligned */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_pkt_desc0
parameter_list|(
name|unsigned
name|int
name|tls
parameter_list|,
name|unsigned
name|int
name|hash_source
parameter_list|,
name|unsigned
name|int
name|hashout_l3alloc
parameter_list|,
name|unsigned
name|int
name|encrypt
parameter_list|,
name|unsigned
name|int
name|ivlen
parameter_list|,
name|uint64_t
name|hashdst_addr
parameter_list|)
block|{
return|return
operator|(
name|left_shift64
argument_list|(
name|tls
argument_list|,
literal|63
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|hash_source
argument_list|,
literal|62
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|hashout_l3alloc
argument_list|,
literal|60
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|encrypt
argument_list|,
literal|59
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64_mask
argument_list|(
operator|(
name|ivlen
operator|-
literal|1
operator|)
argument_list|,
literal|41
argument_list|,
literal|16
argument_list|)
operator||
name|left_shift64
argument_list|(
name|hashdst_addr
argument_list|,
literal|0
argument_list|,
literal|40
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/** * @brief Generate cypto packet descriptor 1 * @ingroup crypto * cipherlen : cipher length in bytes * hashlen : hash length in bytes */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_pkt_desc1
parameter_list|(
name|unsigned
name|int
name|cipherlen
parameter_list|,
name|unsigned
name|int
name|hashlen
parameter_list|)
block|{
return|return
operator|(
name|left_shift64_mask
argument_list|(
operator|(
name|cipherlen
operator|-
literal|1
operator|)
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|)
operator||
name|left_shift64_mask
argument_list|(
operator|(
name|hashlen
operator|-
literal|1
operator|)
argument_list|,
literal|0
argument_list|,
literal|32
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/** * @brief Generate cypto packet descriptor 2 * @ingroup crypto * ivoff : iv offset, offset from start of src data addr * ciperbit_cnt : number of valid bits in the last input byte to the cipher, *                0 (8 bits), 1 (1 bit)..7 (7 bits) * cipheroff : cipher offset, offset from start of src data addr * hashbit_cnt : number of valid bits in the last input byte to the auth *              0 (8 bits), 1 (1 bit)..7 (7 bits) * hashclobber : 1 (hash output will be written as multiples of cachelines, no *              read modify write) * hashoff : hash offset, offset from start of src data addr */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_pkt_desc2
parameter_list|(
name|unsigned
name|int
name|ivoff
parameter_list|,
name|unsigned
name|int
name|cipherbit_cnt
parameter_list|,
name|unsigned
name|int
name|cipheroff
parameter_list|,
name|unsigned
name|int
name|hashbit_cnt
parameter_list|,
name|unsigned
name|int
name|hashclobber
parameter_list|,
name|unsigned
name|int
name|hashoff
parameter_list|)
block|{
return|return
operator|(
name|left_shift64
argument_list|(
name|ivoff
argument_list|,
literal|45
argument_list|,
literal|16
argument_list|)
operator||
name|left_shift64
argument_list|(
name|cipherbit_cnt
argument_list|,
literal|42
argument_list|,
literal|3
argument_list|)
operator||
name|left_shift64
argument_list|(
name|cipheroff
argument_list|,
literal|22
argument_list|,
literal|16
argument_list|)
operator||
name|left_shift64
argument_list|(
name|hashbit_cnt
argument_list|,
literal|19
argument_list|,
literal|3
argument_list|)
operator||
name|left_shift64
argument_list|(
name|hashclobber
argument_list|,
literal|18
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|hashoff
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/** * @brief Generate cypto packet descriptor 3 * @ingroup crypto * designer_vc : designer freeback fmn destination id * taglen : length in bits of the tag generated by the auth engine *          md5 (128 bits), sha1 (160), sha224 (224), sha384 (384), *          sha512 (512), Kasumi (32), snow3g (32), gcm (128) * hmacpad : 1 if hmac padding is already done  */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_pkt_desc3
parameter_list|(
name|unsigned
name|int
name|designer_vc
parameter_list|,
name|unsigned
name|int
name|taglen
parameter_list|,
name|unsigned
name|int
name|arc4_state_save_l3
parameter_list|,
name|unsigned
name|int
name|arc4_save_state
parameter_list|,
name|unsigned
name|int
name|hmacpad
parameter_list|)
block|{
return|return
operator|(
name|left_shift64
argument_list|(
name|designer_vc
argument_list|,
literal|48
argument_list|,
literal|16
argument_list|)
operator||
name|left_shift64
argument_list|(
name|taglen
argument_list|,
literal|11
argument_list|,
literal|16
argument_list|)
operator||
name|left_shift64
argument_list|(
name|arc4_state_save_l3
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|arc4_save_state
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|hmacpad
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/** * @brief Generate cypto packet descriptor 4 * @ingroup crypto * srcfraglen : length of the source fragment(header + data + tail) in bytes * srcfragaddr : physical address of the srouce fragment */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_pkt_desc4
parameter_list|(
name|uint64_t
name|srcfraglen
parameter_list|,
name|unsigned
name|int
name|srcfragaddr
parameter_list|)
block|{
return|return
operator|(
name|left_shift64_mask
argument_list|(
operator|(
name|srcfraglen
operator|-
literal|1
operator|)
argument_list|,
literal|48
argument_list|,
literal|16
argument_list|)
operator||
name|left_shift64
argument_list|(
name|srcfragaddr
argument_list|,
literal|0
argument_list|,
literal|40
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/** * @brief Generate cypto packet descriptor 5 * @ingroup crypto * dstfraglen : length of the dst fragment(header + data + tail) in bytes * chipherout_l3alloc : 1(cipher output is transited through l3 cache) * cipherclobber : 1 (cipher output will be written as multiples of cachelines, *                 no read modify write) * chiperdst_addr : physical address of the cipher destination address */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_pkt_desc5
parameter_list|(
name|unsigned
name|int
name|dstfraglen
parameter_list|,
name|unsigned
name|int
name|cipherout_l3alloc
parameter_list|,
name|unsigned
name|int
name|cipherclobber
parameter_list|,
name|uint64_t
name|cipherdst_addr
parameter_list|)
block|{
return|return
operator|(
name|left_shift64_mask
argument_list|(
operator|(
name|dstfraglen
operator|-
literal|1
operator|)
argument_list|,
literal|48
argument_list|,
literal|16
argument_list|)
operator||
name|left_shift64
argument_list|(
name|cipherout_l3alloc
argument_list|,
literal|46
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|cipherclobber
argument_list|,
literal|41
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64
argument_list|(
name|cipherdst_addr
argument_list|,
literal|0
argument_list|,
literal|40
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/**   * @brief Generate crypto packet fmn message entry 0   * @ingroup crypto   * freeback_vc: freeback response destination address   * designer_fblen : Designer freeback length, 1 - 4   * designerdesc_valid : designer desc valid or not   * cipher_keylen : cipher key length in bytes   * ctrldesc_addr : physicall address of the control descriptor   */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_pkt_fmn_entry0
parameter_list|(
name|unsigned
name|int
name|freeback_vc
parameter_list|,
name|unsigned
name|int
name|designer_fblen
parameter_list|,
name|unsigned
name|int
name|designerdesc_valid
parameter_list|,
name|unsigned
name|int
name|cipher_keylen
parameter_list|,
name|uint64_t
name|cntldesc_addr
parameter_list|)
block|{
return|return
operator|(
name|left_shift64
argument_list|(
name|freeback_vc
argument_list|,
literal|48
argument_list|,
literal|16
argument_list|)
operator||
name|left_shift64_mask
argument_list|(
name|designer_fblen
operator|-
literal|1
argument_list|,
literal|46
argument_list|,
literal|2
argument_list|)
operator||
name|left_shift64
argument_list|(
name|designerdesc_valid
argument_list|,
literal|45
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64_mask
argument_list|(
operator|(
operator|(
name|cipher_keylen
operator|+
literal|7
operator|)
operator|>>
literal|3
operator|)
argument_list|,
literal|40
argument_list|,
literal|5
argument_list|)
operator||
name|left_shift64
argument_list|(
name|cntldesc_addr
operator|>>
literal|6
argument_list|,
literal|0
argument_list|,
literal|34
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/**   * @brief Generate crypto packet fmn message entry 1   * @ingroup crypto   * arc4load_state : 1 if load state required 0 otherwise   * hash_keylen : hash key length in bytes   * pktdesc_size : packet descriptor size in bytes   * pktdesc_addr : physicall address of the packet descriptor   */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|nlm_crypto_form_pkt_fmn_entry1
parameter_list|(
name|unsigned
name|int
name|arc4load_state
parameter_list|,
name|unsigned
name|int
name|hash_keylen
parameter_list|,
name|unsigned
name|int
name|pktdesc_size
parameter_list|,
name|uint64_t
name|pktdesc_addr
parameter_list|)
block|{
return|return
operator|(
name|left_shift64
argument_list|(
name|arc4load_state
argument_list|,
literal|63
argument_list|,
literal|1
argument_list|)
operator||
name|left_shift64_mask
argument_list|(
operator|(
operator|(
name|hash_keylen
operator|+
literal|7
operator|)
operator|>>
literal|3
operator|)
argument_list|,
literal|56
argument_list|,
literal|5
argument_list|)
operator||
name|left_shift64_mask
argument_list|(
operator|(
operator|(
name|pktdesc_size
operator|>>
literal|4
operator|)
operator|-
literal|1
operator|)
argument_list|,
literal|43
argument_list|,
literal|12
argument_list|)
operator||
name|left_shift64
argument_list|(
name|pktdesc_addr
operator|>>
literal|6
argument_list|,
literal|0
argument_list|,
literal|34
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|int
name|nlm_crypto_get_hklen_taglen
parameter_list|(
name|enum
name|nlm_hash_algo
name|hashalg
parameter_list|,
name|enum
name|nlm_hash_mode
name|hashmode
parameter_list|,
name|unsigned
name|int
modifier|*
name|taglen
parameter_list|,
name|unsigned
name|int
modifier|*
name|hklen
parameter_list|)
block|{
if|if
condition|(
name|hashalg
operator|==
name|NLM_HASH_MD5
condition|)
block|{
operator|*
name|taglen
operator|=
literal|128
expr_stmt|;
operator|*
name|hklen
operator|=
literal|64
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hashalg
operator|==
name|NLM_HASH_SHA
condition|)
block|{
switch|switch
condition|(
name|hashmode
condition|)
block|{
case|case
name|NLM_HASH_MODE_SHA1
case|:
operator|*
name|taglen
operator|=
literal|160
expr_stmt|;
operator|*
name|hklen
operator|=
literal|64
expr_stmt|;
break|break;
case|case
name|NLM_HASH_MODE_SHA224
case|:
operator|*
name|taglen
operator|=
literal|224
expr_stmt|;
operator|*
name|hklen
operator|=
literal|64
expr_stmt|;
break|break;
case|case
name|NLM_HASH_MODE_SHA256
case|:
operator|*
name|taglen
operator|=
literal|256
expr_stmt|;
operator|*
name|hklen
operator|=
literal|64
expr_stmt|;
break|break;
case|case
name|NLM_HASH_MODE_SHA384
case|:
operator|*
name|taglen
operator|=
literal|384
expr_stmt|;
operator|*
name|hklen
operator|=
literal|128
expr_stmt|;
break|break;
case|case
name|NLM_HASH_MODE_SHA512
case|:
operator|*
name|taglen
operator|=
literal|512
expr_stmt|;
operator|*
name|hklen
operator|=
literal|128
expr_stmt|;
break|break;
default|default:
name|printf
argument_list|(
literal|"Error : invalid shaid (%s)\n"
argument_list|,
name|__func__
argument_list|)
expr_stmt|;
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|hashalg
operator|==
name|NLM_HASH_KASUMI_F9
condition|)
block|{
operator|*
name|taglen
operator|=
literal|32
expr_stmt|;
operator|*
name|hklen
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hashalg
operator|==
name|NLM_HASH_SNOW3G_F9
condition|)
block|{
operator|*
name|taglen
operator|=
literal|32
expr_stmt|;
operator|*
name|hklen
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hashmode
operator|==
name|NLM_HASH_MODE_XCBC
condition|)
block|{
operator|*
name|taglen
operator|=
literal|128
expr_stmt|;
operator|*
name|hklen
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hashmode
operator|==
name|NLM_HASH_MODE_GCM
condition|)
block|{
operator|*
name|taglen
operator|=
literal|128
expr_stmt|;
operator|*
name|hklen
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hashalg
operator|==
name|NLM_HASH_BYPASS
condition|)
block|{
operator|*
name|taglen
operator|=
literal|0
expr_stmt|;
operator|*
name|hklen
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|printf
argument_list|(
literal|"Error:Hash alg/mode not found\n"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
comment|/* TODO : Add remaining cases */
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/** * @brief Generate fill cryto control info structure * @ingroup crypto * hmac : 1 for hash with hmac  * hashalg: see above,  hash_alg enums * hashmode: see above, hash_mode enums * cipherhalg: see above,  cipher_alg enums * ciphermode: see above, cipher_mode enums * */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_crypto_fill_pkt_ctrl
parameter_list|(
name|struct
name|nlm_crypto_pkt_ctrl
modifier|*
name|ctrl
parameter_list|,
name|unsigned
name|int
name|hmac
parameter_list|,
name|enum
name|nlm_hash_algo
name|hashalg
parameter_list|,
name|enum
name|nlm_hash_mode
name|hashmode
parameter_list|,
name|enum
name|nlm_cipher_algo
name|cipheralg
parameter_list|,
name|enum
name|nlm_cipher_mode
name|ciphermode
parameter_list|,
name|unsigned
name|char
modifier|*
name|cipherkey
parameter_list|,
name|unsigned
name|int
name|cipherkeylen
parameter_list|,
name|unsigned
name|char
modifier|*
name|hashkey
parameter_list|,
name|unsigned
name|int
name|hashkeylen
parameter_list|)
block|{
name|unsigned
name|int
name|taglen
init|=
literal|0
decl_stmt|,
name|hklen
init|=
literal|0
decl_stmt|;
name|ctrl
operator|->
name|desc0
operator|=
name|nlm_crypto_form_pkt_ctrl_desc
argument_list|(
name|hmac
argument_list|,
name|hashalg
argument_list|,
name|hashmode
argument_list|,
name|cipheralg
argument_list|,
name|ciphermode
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|ctrl
operator|->
name|key
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|ctrl
operator|->
name|key
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cipherkey
condition|)
name|memcpy
argument_list|(
name|ctrl
operator|->
name|key
argument_list|,
name|cipherkey
argument_list|,
name|cipherkeylen
argument_list|)
expr_stmt|;
if|if
condition|(
name|hashkey
condition|)
name|memcpy
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|ctrl
operator|->
name|key
index|[
operator|(
name|cipherkeylen
operator|+
literal|7
operator|)
operator|/
literal|8
index|]
argument_list|,
name|hashkey
argument_list|,
name|hashkeylen
argument_list|)
expr_stmt|;
if|if
condition|(
name|nlm_crypto_get_hklen_taglen
argument_list|(
name|hashalg
argument_list|,
name|hashmode
argument_list|,
operator|&
name|taglen
argument_list|,
operator|&
name|hklen
argument_list|)
operator|<
literal|0
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|ctrl
operator|->
name|cipherkeylen
operator|=
name|cipherkeylen
expr_stmt|;
name|ctrl
operator|->
name|hashkeylen
operator|=
name|hklen
expr_stmt|;
name|ctrl
operator|->
name|taglen
operator|=
name|taglen
expr_stmt|;
comment|/* TODO : add the invalid checks and return error */
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/** * @brief Top level function for generation pkt desc 0 to 3 for cipher auth * @ingroup crypto * ctrl : pointer to control structure * param : pointer to the param structure * encrypt : 1(for encrypt) 0(for decrypt) * hash_source : 1(encrypted data is sent to the auth engine) 0(plain data is *		sent to the auth engine) * ivoff : iv offset from start of data * ivlen : iv length in bytes * hashoff : hash offset from start of data * hashlen : hash length in bytes * hmacpad : hmac padding required or not, 1 if already padded * cipheroff : cipher offset from start of data * cipherlen : cipher length in bytes * hashdst_addr : hash destination physical address */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|nlm_crypto_fill_cipher_auth_pkt_param
parameter_list|(
name|struct
name|nlm_crypto_pkt_ctrl
modifier|*
name|ctrl
parameter_list|,
name|struct
name|nlm_crypto_pkt_param
modifier|*
name|param
parameter_list|,
name|unsigned
name|int
name|encrypt
parameter_list|,
name|unsigned
name|int
name|hash_source
parameter_list|,
name|unsigned
name|int
name|ivoff
parameter_list|,
name|unsigned
name|int
name|ivlen
parameter_list|,
name|unsigned
name|int
name|hashoff
parameter_list|,
name|unsigned
name|int
name|hashlen
parameter_list|,
name|unsigned
name|int
name|hmacpad
parameter_list|,
name|unsigned
name|int
name|cipheroff
parameter_list|,
name|unsigned
name|int
name|cipherlen
parameter_list|,
name|unsigned
name|char
modifier|*
name|hashdst_addr
parameter_list|)
block|{
name|param
operator|->
name|desc0
operator|=
name|nlm_crypto_form_pkt_desc0
argument_list|(
literal|0
argument_list|,
name|hash_source
argument_list|,
literal|1
argument_list|,
name|encrypt
argument_list|,
name|ivlen
argument_list|,
name|vtophys
argument_list|(
name|hashdst_addr
argument_list|)
argument_list|)
expr_stmt|;
name|param
operator|->
name|desc1
operator|=
name|nlm_crypto_form_pkt_desc1
argument_list|(
name|cipherlen
argument_list|,
name|hashlen
argument_list|)
expr_stmt|;
name|param
operator|->
name|desc2
operator|=
name|nlm_crypto_form_pkt_desc2
argument_list|(
name|ivoff
argument_list|,
literal|0
argument_list|,
name|cipheroff
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|hashoff
argument_list|)
expr_stmt|;
name|param
operator|->
name|desc3
operator|=
name|nlm_crypto_form_pkt_desc3
argument_list|(
literal|0
argument_list|,
name|ctrl
operator|->
name|taglen
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|hmacpad
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** * @brief Top level function for generation pkt desc 0 to 3 for cipher operation * @ingroup crypto * ctrl : pointer to control structure * param : pointer to the param structure * encrypt : 1(for encrypt) 0(for decrypt) * ivoff : iv offset from start of data * ivlen : iv length in bytes * cipheroff : cipher offset from start of data * cipherlen : cipher length in bytes */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|nlm_crypto_fill_cipher_pkt_param
parameter_list|(
name|struct
name|nlm_crypto_pkt_ctrl
modifier|*
name|ctrl
parameter_list|,
name|struct
name|nlm_crypto_pkt_param
modifier|*
name|param
parameter_list|,
name|unsigned
name|int
name|encrypt
parameter_list|,
name|unsigned
name|int
name|ivoff
parameter_list|,
name|unsigned
name|int
name|ivlen
parameter_list|,
name|unsigned
name|int
name|cipheroff
parameter_list|,
name|unsigned
name|int
name|cipherlen
parameter_list|)
block|{
name|param
operator|->
name|desc0
operator|=
name|nlm_crypto_form_pkt_desc0
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|encrypt
argument_list|,
name|ivlen
argument_list|,
literal|0ULL
argument_list|)
expr_stmt|;
name|param
operator|->
name|desc1
operator|=
name|nlm_crypto_form_pkt_desc1
argument_list|(
name|cipherlen
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|param
operator|->
name|desc2
operator|=
name|nlm_crypto_form_pkt_desc2
argument_list|(
name|ivoff
argument_list|,
literal|0
argument_list|,
name|cipheroff
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|param
operator|->
name|desc3
operator|=
name|nlm_crypto_form_pkt_desc3
argument_list|(
literal|0
argument_list|,
name|ctrl
operator|->
name|taglen
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** * @brief Top level function for generation pkt desc 0 to 3 for auth operation * @ingroup crypto * ctrl : pointer to control structure * param : pointer to the param structure * hashoff : hash offset from start of data * hashlen : hash length in bytes * hmacpad : hmac padding required or not, 1 if already padded * hashdst_addr : hash destination physical address */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|nlm_crypto_fill_auth_pkt_param
parameter_list|(
name|struct
name|nlm_crypto_pkt_ctrl
modifier|*
name|ctrl
parameter_list|,
name|struct
name|nlm_crypto_pkt_param
modifier|*
name|param
parameter_list|,
name|unsigned
name|int
name|hashoff
parameter_list|,
name|unsigned
name|int
name|hashlen
parameter_list|,
name|unsigned
name|int
name|hmacpad
parameter_list|,
name|unsigned
name|char
modifier|*
name|hashdst_addr
parameter_list|)
block|{
name|param
operator|->
name|desc0
operator|=
name|nlm_crypto_form_pkt_desc0
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|vtophys
argument_list|(
name|hashdst_addr
argument_list|)
argument_list|)
expr_stmt|;
name|param
operator|->
name|desc1
operator|=
name|nlm_crypto_form_pkt_desc1
argument_list|(
literal|1
argument_list|,
name|hashlen
argument_list|)
expr_stmt|;
name|param
operator|->
name|desc2
operator|=
name|nlm_crypto_form_pkt_desc2
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|hashoff
argument_list|)
expr_stmt|;
name|param
operator|->
name|desc3
operator|=
name|nlm_crypto_form_pkt_desc3
argument_list|(
literal|0
argument_list|,
name|ctrl
operator|->
name|taglen
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|hmacpad
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|unsigned
name|int
name|nlm_crypto_fill_src_seg
parameter_list|(
name|struct
name|nlm_crypto_pkt_param
modifier|*
name|param
parameter_list|,
name|int
name|seg
parameter_list|,
name|unsigned
name|char
modifier|*
name|input
parameter_list|,
name|unsigned
name|int
name|inlen
parameter_list|)
block|{
name|unsigned
name|off
init|=
literal|0
decl_stmt|,
name|len
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|remlen
init|=
name|inlen
decl_stmt|;
for|for
control|(
init|;
name|remlen
operator|>
literal|0
condition|;
control|)
block|{
name|len
operator|=
name|remlen
operator|>
name|NLM_CRYPTO_MAX_SEG_LEN
condition|?
name|NLM_CRYPTO_MAX_SEG_LEN
else|:
name|remlen
expr_stmt|;
name|param
operator|->
name|segment
index|[
name|seg
index|]
index|[
literal|0
index|]
operator|=
name|nlm_crypto_form_pkt_desc4
argument_list|(
name|len
argument_list|,
name|vtophys
argument_list|(
name|input
operator|+
name|off
argument_list|)
argument_list|)
expr_stmt|;
name|remlen
operator|-=
name|len
expr_stmt|;
name|off
operator|+=
name|len
expr_stmt|;
name|seg
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|seg
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|unsigned
name|int
name|nlm_crypto_fill_dst_seg
parameter_list|(
name|struct
name|nlm_crypto_pkt_param
modifier|*
name|param
parameter_list|,
name|int
name|seg
parameter_list|,
name|unsigned
name|char
modifier|*
name|output
parameter_list|,
name|unsigned
name|int
name|outlen
parameter_list|)
block|{
name|unsigned
name|off
init|=
literal|0
decl_stmt|,
name|len
init|=
literal|0
decl_stmt|;
name|unsigned
name|int
name|remlen
init|=
name|outlen
decl_stmt|;
for|for
control|(
init|;
name|remlen
operator|>
literal|0
condition|;
control|)
block|{
name|len
operator|=
name|remlen
operator|>
name|NLM_CRYPTO_MAX_SEG_LEN
condition|?
name|NLM_CRYPTO_MAX_SEG_LEN
else|:
name|remlen
expr_stmt|;
name|param
operator|->
name|segment
index|[
name|seg
index|]
index|[
literal|1
index|]
operator|=
name|nlm_crypto_form_pkt_desc5
argument_list|(
name|len
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|vtophys
argument_list|(
name|output
operator|+
name|off
argument_list|)
argument_list|)
expr_stmt|;
name|remlen
operator|-=
name|len
expr_stmt|;
name|off
operator|+=
name|len
expr_stmt|;
name|seg
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|seg
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

