begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2012 Broadcom Corporation  * All Rights Reserved  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *   * THIS SOFTWARE IS PROVIDED BY BROADCOM ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL BROADCOM OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR  * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE  * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN  * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__NLM_UCORE_H__
end_ifndef

begin_define
define|#
directive|define
name|__NLM_UCORE_H__
end_define

begin_comment
comment|/* Microcode registers */
end_comment

begin_define
define|#
directive|define
name|UCORE_OUTBUF_DONE
value|0x8000
end_define

begin_define
define|#
directive|define
name|UCORE_RX_PKT_RDY
value|0x8004
end_define

begin_define
define|#
directive|define
name|UCORE_RX_PKT_INFO
value|0x8008
end_define

begin_define
define|#
directive|define
name|UCORE_CAM0
value|0x800c
end_define

begin_define
define|#
directive|define
name|UCORE_CAM1
value|0x8010
end_define

begin_define
define|#
directive|define
name|UCORE_CAM2
value|0x8014
end_define

begin_define
define|#
directive|define
name|UCORE_CAM3
value|0x8018
end_define

begin_define
define|#
directive|define
name|UCORE_CAM_RESULT
value|0x801c
end_define

begin_define
define|#
directive|define
name|UCORE_CSUMINFO
value|0x8020
end_define

begin_define
define|#
directive|define
name|UCORE_CRCINFO
value|0x8024
end_define

begin_define
define|#
directive|define
name|UCORE_CRCPOS
value|0x8028
end_define

begin_define
define|#
directive|define
name|UCORE_FR_FIFOEMPTY
value|0x802c
end_define

begin_define
define|#
directive|define
name|UCORE_PKT_DISTR
value|0x8030
end_define

begin_define
define|#
directive|define
name|PACKET_MEMORY
value|(0xFFE00)
end_define

begin_define
define|#
directive|define
name|PACKET_DATA_OFFSET
value|(64)
end_define

begin_define
define|#
directive|define
name|SHARED_SCRATCH_MEM
value|0x18000
end_define

begin_comment
comment|/* Distribution mode */
end_comment

begin_define
define|#
directive|define
name|VAL_PDM
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0x7)<< 0)
end_define

begin_comment
comment|/* Dest distribution or distribution list */
end_comment

begin_define
define|#
directive|define
name|VAL_DEST
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0x3ff)<< 8)
end_define

begin_define
define|#
directive|define
name|VAL_PDL
parameter_list|(
name|x
parameter_list|)
value|(((x)& 0xf)<< 4)
end_define

begin_comment
comment|/*output buffer done*/
end_comment

begin_define
define|#
directive|define
name|VAL_FSV
parameter_list|(
name|x
parameter_list|)
value|(x<<19)
end_define

begin_define
define|#
directive|define
name|VAL_FFS
parameter_list|(
name|x
parameter_list|)
value|(x<<14)
end_define

begin_define
define|#
directive|define
name|FWD_DEST_ONLY
value|1
end_define

begin_define
define|#
directive|define
name|FWD_ENQ_DIST_VEC
value|2
end_define

begin_define
define|#
directive|define
name|FWD_ENQ_DEST
value|3
end_define

begin_define
define|#
directive|define
name|FWD_DIST_VEC
value|4
end_define

begin_define
define|#
directive|define
name|FWD_ENQ_DIST_VEC_SER
value|6
end_define

begin_define
define|#
directive|define
name|FWD_ENQ_DEST_SER
value|7
end_define

begin_define
define|#
directive|define
name|USE_HASH_DST
value|(1<< 20)
end_define

begin_define
define|#
directive|define
name|NLM_DEFINE_UCORE
parameter_list|(
name|name
parameter_list|,
name|reg
parameter_list|)
define|\
value|static __inline__ unsigned int nlm_read_ucore_##name(void)	\ {								\ 	unsigned int __rv;                                      \ 	__asm__ __volatile__ (                                  \ 	".set	push\n"                                         \ 	".set	noreorder\n"                                    \ 	".set	mips32\n"                                       \ 	"li	$8, %1\n"					\ 	"lw	%0, ($8)\n"					\ 	".set	pop\n"                                          \ 	: "=r" (__rv)						\ 	: "i" (reg)						\ 	: "$8"							\ 	); 		                			\         return __rv;						\ }								\ 								\ static __inline__ void nlm_write_ucore_##name(unsigned int val)	\ {								\ 	__asm__ __volatile__(                                   \ 	".set	push\n"                                         \ 	".set	noreorder\n"                                    \ 	".set	mips32\n"                                       \ 	"li	$8, %1\n"					\ 	"sw	%0, ($8)\n"					\ 	".set	pop\n"                                          \ 	:: "r" (val), "i" (reg)					\ 	: "$8"							\ 	);							\ } struct __hack
end_define

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|obufdone
argument_list|,
name|UCORE_OUTBUF_DONE
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|rxpktrdy
argument_list|,
name|UCORE_RX_PKT_RDY
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|rxpktinfo
argument_list|,
name|UCORE_RX_PKT_INFO
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|cam0
argument_list|,
name|UCORE_CAM0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|cam1
argument_list|,
name|UCORE_CAM1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|cam2
argument_list|,
name|UCORE_CAM2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|cam3
argument_list|,
name|UCORE_CAM3
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|camresult
argument_list|,
name|UCORE_CAM_RESULT
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|csuminfo
argument_list|,
name|UCORE_CSUMINFO
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|crcinfo
argument_list|,
name|UCORE_CRCINFO
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|crcpos
argument_list|,
name|UCORE_CRCPOS
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|freefifo_empty
argument_list|,
name|UCORE_FR_FIFOEMPTY
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|NLM_DEFINE_UCORE
argument_list|(
name|pktdistr
argument_list|,
name|UCORE_PKT_DISTR
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * l3cachelines - number of cache lines to allocate into l3  * fsv - 0 : use interface-id for selecting the free fifo pool  *       1 : use free fifo pool selected by FFS field  * ffs - selects which free fifo pool to use to take a free fifo  * prepad_en - If this field is set to 1, part or all of the   *             64 byte prepad seen by micro engines, is written  *             infront of every packet.  * prepad_ovride - If this field is 1, the ucore system uses   *                 prepad configuration defined in this register,  *                 0 means that it uses the configuration defined  *                 in NAE RX_CONFIG register  * prepad_size - number of 16 byte words in the 64-byte prepad  *               seen by micro engines and dma'ed to memory as  *               pkt prepad. This field is meaningful only if  *               prepad_en and prepad_ovride is set.  *               0 : 1 word  *               1 : 2 words  *               2 : 3 words  *               3 : 4 words  * prepad[0-3]: writing 0 to this means that the 1st 16 byte offset  *              of prepad in micro engine, gets setup as prepad0/1/2/3.  *              prepad word.  *              1 : means 2nd 16 byte chunk in prepad0/1/2/3  *              2 : means 3rd 16 byte chunk in prepad0/1/2/3  *              3 : means 4rth 16 byte chunk in prepad0/1/2/3  * pkt_discard - packet will be discarded if this is set to 1  * rd5 - value (single bit) to be inserted in bit 5, the unclassified  *       pkt bit of receive descriptor. If this bit is set, HPRE bit  *       should also be set in ucore_rxpktready register  */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|nlm_ucore_pkt_done
parameter_list|(
name|int
name|l3cachelines
parameter_list|,
name|int
name|fsv
parameter_list|,
name|int
name|ffs
parameter_list|,
name|int
name|prepad_en
parameter_list|,
name|int
name|prepad_ovride
parameter_list|,
name|int
name|prepad_size
parameter_list|,
name|int
name|prepad0
parameter_list|,
name|int
name|prepad1
parameter_list|,
name|int
name|prepad2
parameter_list|,
name|int
name|prepad3
parameter_list|,
name|int
name|pkt_discard
parameter_list|,
name|int
name|rd5
parameter_list|)
block|{
name|unsigned
name|int
name|val
init|=
literal|0
decl_stmt|;
name|val
operator||=
operator|(
operator|(
name|l3cachelines
operator|&
literal|0xfff
operator|)
operator|<<
literal|20
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|fsv
operator|&
literal|0x1
operator|)
operator|<<
literal|19
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|ffs
operator|&
literal|0x1f
operator|)
operator|<<
literal|14
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|prepad_en
operator|&
literal|0x1
operator|)
operator|<<
literal|3
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|prepad_ovride
operator|&
literal|0x1
operator|)
operator|<<
literal|2
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|prepad_size
operator|&
literal|0x3
operator|)
operator|<<
literal|12
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|prepad0
operator|&
literal|0x3
operator|)
operator|<<
literal|4
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|prepad1
operator|&
literal|0x3
operator|)
operator|<<
literal|6
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|prepad2
operator|&
literal|0x3
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|prepad3
operator|&
literal|0x3
operator|)
operator|<<
literal|10
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|pkt_discard
operator|&
literal|0x1
operator|)
operator|<<
literal|1
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|rd5
operator|&
literal|0x1
operator|)
operator|<<
literal|0
operator|)
expr_stmt|;
name|nlm_write_ucore_obufdone
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Get the class full vector field from POE.   * The POE maintains a threshold for each class.  * A bit in this field will be set corresponding to the class approaching  * class full status.  */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_get_rxpkt_poeclassfullvec
parameter_list|(
name|unsigned
name|int
name|pktrdy
parameter_list|)
block|{
return|return
operator|(
operator|(
name|pktrdy
operator|>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
return|;
block|}
end_function

begin_comment
comment|/* This function returns 1 if the hardware parser extraction process  * resulted in an error. Else, returns 0.  */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_get_rxpkt_hwparsererr
parameter_list|(
name|unsigned
name|int
name|pktrdy
parameter_list|)
block|{
return|return
operator|(
operator|(
name|pktrdy
operator|>>
literal|23
operator|)
operator|&
literal|0x1
operator|)
return|;
block|}
end_function

begin_comment
comment|/* This function returns the context number assigned to incoming  * packet   */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_get_rxpkt_context
parameter_list|(
name|unsigned
name|int
name|pktrdy
parameter_list|)
block|{
return|return
operator|(
operator|(
name|pktrdy
operator|>>
literal|13
operator|)
operator|&
literal|0x3ff
operator|)
return|;
block|}
end_function

begin_comment
comment|/* this function returns the channel number of incoming packet,  * and applies only to interlaken.  */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_get_rxpkt_channel
parameter_list|(
name|unsigned
name|int
name|pktrdy
parameter_list|)
block|{
return|return
operator|(
operator|(
name|pktrdy
operator|>>
literal|5
operator|)
operator|&
literal|0xff
operator|)
return|;
block|}
end_function

begin_comment
comment|/* This function returns the interface number on which the pkt  * was received  */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_get_rxpkt_interface
parameter_list|(
name|unsigned
name|int
name|pktrdy
parameter_list|)
block|{
return|return
operator|(
name|pktrdy
operator|&
literal|0x1f
operator|)
return|;
block|}
end_function

begin_comment
comment|/* This function returns 1 if end of packet (EOP) is set in   * packet data.   */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_get_rxpkt_eop
parameter_list|(
name|unsigned
name|int
name|rxpkt_info
parameter_list|)
block|{
return|return
operator|(
operator|(
name|rxpkt_info
operator|>>
literal|9
operator|)
operator|&
literal|0x1
operator|)
return|;
block|}
end_function

begin_comment
comment|/* This function returns packet length of received pkt */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_get_rxpktlen
parameter_list|(
name|unsigned
name|int
name|rxpkt_info
parameter_list|)
block|{
return|return
operator|(
name|rxpkt_info
operator|&
literal|0x1ff
operator|)
return|;
block|}
end_function

begin_comment
comment|/* this function sets up the ucore TCAM keys. */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|nlm_ucore_setup_camkey
parameter_list|(
name|unsigned
name|int
name|cam_key0
parameter_list|,
name|unsigned
name|int
name|cam_key1
parameter_list|,
name|unsigned
name|int
name|cam_key2
parameter_list|,
name|unsigned
name|int
name|cam_key3
parameter_list|)
block|{
name|nlm_write_ucore_cam0
argument_list|(
name|cam_key0
argument_list|)
expr_stmt|;
name|nlm_write_ucore_cam1
argument_list|(
name|cam_key1
argument_list|)
expr_stmt|;
name|nlm_write_ucore_cam2
argument_list|(
name|cam_key2
argument_list|)
expr_stmt|;
name|nlm_write_ucore_cam3
argument_list|(
name|cam_key3
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* This function checks if the cam result is valid or not.  * If valid, it returns the result, else it returns 0.  */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_get_cam_result
parameter_list|(
name|unsigned
name|int
name|cam_result
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|cam_result
operator|>>
literal|15
operator|)
operator|&
literal|0x1
operator|)
operator|==
literal|1
condition|)
comment|/* valid result */
return|return
operator|(
name|cam_result
operator|&
literal|0x3fff
operator|)
return|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* This function sets up the csum in ucore.  * iphdr_start - defines the start of ip header (to check - is this byte  * position???)  * iphdr_len - This field is auto filled by h/w parser if zero, else   * the value defined will be used.  */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|nlm_ucore_csum_setup
parameter_list|(
name|int
name|iphdr_start
parameter_list|,
name|int
name|iphdr_len
parameter_list|)
block|{
name|unsigned
name|int
name|val
init|=
literal|0
decl_stmt|;
name|val
operator||=
operator|(
operator|(
name|iphdr_len
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
name|val
operator||=
operator|(
name|iphdr_len
operator|&
literal|0xff
operator|)
expr_stmt|;
name|nlm_write_ucore_csuminfo
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* crcpos - position of crc in pkt. If crc position is within startcrc and  * endcrc, zero out these bytes in the packet before computing crc. This   * field is not needed for FCoE.  * cps - If 1, uses the polynomial in RX_CRC_POLY1 of NAE register.  *       if 0, uses the polynomial in RX_CRC_POLY0 of NAE register.  * fcoe - If this is 1, crc calculation starts from 'startCRC' and the CRC  * engine ends calculation before the last byte.  * cbm - if 1, enables crc byte mirroring, where bits within a byte will get  * reversed (mirrored) during calculation of crc.  * cfi - If 1, performs a final inversion of crc before comarison is done during  * pkt reception.  * startcrc - This field is always required for both FCoE and SCTP crc.  * endcrc - This information needs to be setup only for SCTP. For FCoE this   * information is provided by hardware.  * valid - if set to 1, CRC status is placed into bit 2 of rx descriptor  *         if set to 0, TCP checksum status is placed into bit 2 of rx descriptor  * keysize - defines the number of bytes in the pre-pad that contains the key  */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|nlm_ucore_crc_setup
parameter_list|(
name|int
name|crcpos
parameter_list|,
name|int
name|cps
parameter_list|,
name|int
name|cfi
parameter_list|,
name|int
name|cbm
parameter_list|,
name|int
name|fcoe
parameter_list|,
name|int
name|keysize
parameter_list|,
name|int
name|valid
parameter_list|,
name|int
name|startcrc
parameter_list|,
name|int
name|endcrc
parameter_list|)
block|{
name|unsigned
name|int
name|val
init|=
literal|0
decl_stmt|;
name|val
operator||=
operator|(
operator|(
name|cfi
operator|&
literal|0x1
operator|)
operator|<<
literal|20
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|cbm
operator|&
literal|0x1
operator|)
operator|<<
literal|19
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|fcoe
operator|&
literal|0x1
operator|)
operator|<<
literal|18
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|cps
operator|&
literal|0x1
operator|)
operator|<<
literal|16
operator|)
expr_stmt|;
name|val
operator||=
operator|(
name|crcpos
operator|&
literal|0xffff
operator|)
expr_stmt|;
name|nlm_write_ucore_crcpos
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|val
operator|=
literal|0
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|keysize
operator|&
literal|0x3f
operator|)
operator|<<
literal|25
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|valid
operator|&
literal|0x1
operator|)
operator|<<
literal|24
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|endcrc
operator|&
literal|0xffff
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
name|val
operator||=
operator|(
name|startcrc
operator|&
literal|0xff
operator|)
expr_stmt|;
name|nlm_write_ucore_crcinfo
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* This function returns a fifo empty vector, where each bit provides   * the status of a fifo pool, where if the pool is empty the bit gets  * set to 1.  */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|nlm_ucore_get_fifoempty
parameter_list|(
name|unsigned
name|int
name|fifoempty
parameter_list|)
block|{
return|return
operator|(
name|fifoempty
operator|&
literal|0xfffff
operator|)
return|;
block|}
end_function

begin_comment
comment|/* This function controls how POE will distribute the packet.  * pdm - is the packet distribution mode, where  *       0x0 - means packet distribution mode is not used  *       0x1 - means forwarding based on destination only (no enqueue)  *       0x2 - means forwarding based on FID and distr vector (enqueue)  *       0x3 - means forwarding based on dest and FID (enqueue)  *       0x4 - means forwarding based on distr vec (no enqueue)  *       0x6 - means forward based on FID (enqueue), distr vec and serial mode  *       0x7 - means forward based on FID (enqueue), dest and serial mode  * mc3 - If 1, then the 3 most significant bits of distribution list are taken  * from context->class_table  * pdl - poe distribution list  * dest - fixed destination setup  * hash - if 1, use hash based destination   */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|nlm_ucore_setup_poepktdistr
parameter_list|(
name|int
name|pdm
parameter_list|,
name|int
name|mc3
parameter_list|,
name|int
name|pdl
parameter_list|,
name|int
name|dest
parameter_list|,
name|int
name|hash
parameter_list|)
block|{
name|unsigned
name|int
name|val
init|=
literal|0
decl_stmt|;
name|val
operator||=
operator|(
operator|(
name|hash
operator|&
literal|0x1
operator|)
operator|<<
literal|20
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|dest
operator|&
literal|0xfff
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|pdl
operator|&
literal|0xf
operator|)
operator|<<
literal|4
operator|)
expr_stmt|;
name|val
operator||=
operator|(
operator|(
name|mc3
operator|&
literal|0x1
operator|)
operator|<<
literal|3
operator|)
expr_stmt|;
name|val
operator||=
operator|(
name|pdm
operator|&
literal|0x7
operator|)
expr_stmt|;
name|nlm_write_ucore_pktdistr
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

