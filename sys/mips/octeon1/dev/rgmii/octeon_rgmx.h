begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*------------------------------------------------------------------  * octeon_rgmx.h      RGMII Ethernet Interfaces  *  *------------------------------------------------------------------  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|___OCTEON_RGMX__H___
end_ifndef

begin_define
define|#
directive|define
name|___OCTEON_RGMX__H___
end_define

begin_define
define|#
directive|define
name|OCTEON_FPA_PACKET_POOL
value|0
end_define

begin_define
define|#
directive|define
name|OCTEON_FPA_WQE_RX_POOL
value|1
end_define

begin_define
define|#
directive|define
name|OCTEON_FPA_OUTPUT_BUFFER_POOL
value|2
end_define

begin_define
define|#
directive|define
name|OCTEON_FPA_WQE_POOL_SIZE
value|(1 *  OCTEON_CACHE_LINE_SIZE)
end_define

begin_define
define|#
directive|define
name|OCTEON_FPA_OUTPUT_BUFFER_POOL_SIZE
value|(8 *  OCTEON_CACHE_LINE_SIZE)
end_define

begin_define
define|#
directive|define
name|OCTEON_FPA_PACKET_POOL_SIZE
value|(16 * OCTEON_CACHE_LINE_SIZE)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_WORK_REQUEST
parameter_list|(
name|wait
parameter_list|)
value|(0x8001600000000000ull | (wait<<3))
end_define

begin_typedef
typedef|typedef
union|union
block|{
name|void
modifier|*
name|ptr
decl_stmt|;
name|uint64_t
name|word64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|addr
range|:
literal|40
decl_stmt|;
block|}
name|bits
struct|;
block|}
name|octeon_buf_ptr_t
typedef|;
end_typedef

begin_comment
comment|/**  * Work queue entry format  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint16_t
name|hw_chksum
decl_stmt|;
name|uint8_t
name|unused
decl_stmt|;
name|uint64_t
name|next_ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|len
range|:
literal|16
decl_stmt|;
name|uint64_t
name|ipprt
range|:
literal|6
decl_stmt|;
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|grp
range|:
literal|4
decl_stmt|;
name|uint64_t
name|tag_type
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tag
range|:
literal|32
decl_stmt|;
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|bufs
range|:
literal|8
decl_stmt|;
name|uint64_t
name|ip_offset
range|:
literal|8
decl_stmt|;
name|uint64_t
name|vlan_valid
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unassigned
range|:
literal|2
decl_stmt|;
name|uint64_t
name|vlan_cfi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|vlan_id
range|:
literal|12
decl_stmt|;
name|uint64_t
name|unassigned2
range|:
literal|12
decl_stmt|;
name|uint64_t
name|dec_ipcomp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tcp_or_udp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dec_ipsec
range|:
literal|1
decl_stmt|;
name|uint64_t
name|is_v6
range|:
literal|1
decl_stmt|;
name|uint64_t
name|software
range|:
literal|1
decl_stmt|;
name|uint64_t
name|L4_error
range|:
literal|1
decl_stmt|;
name|uint64_t
name|is_frag
range|:
literal|1
decl_stmt|;
name|uint64_t
name|IP_exc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|is_bcast
range|:
literal|1
decl_stmt|;
name|uint64_t
name|is_mcast
range|:
literal|1
decl_stmt|;
name|uint64_t
name|not_IP
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rcv_error
range|:
literal|1
decl_stmt|;
name|uint64_t
name|err_code
range|:
literal|8
decl_stmt|;
block|}
name|bits
struct|;
struct|struct
block|{
name|uint64_t
name|bufs
range|:
literal|8
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|8
decl_stmt|;
name|uint64_t
name|vlan_valid
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unassigned
range|:
literal|2
decl_stmt|;
name|uint64_t
name|vlan_cfi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|vlan_id
range|:
literal|12
decl_stmt|;
name|uint64_t
name|unassigned2
range|:
literal|16
decl_stmt|;
name|uint64_t
name|software
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unassigned3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|is_rarp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|is_arp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|is_bcast
range|:
literal|1
decl_stmt|;
name|uint64_t
name|is_mcast
range|:
literal|1
decl_stmt|;
name|uint64_t
name|not_IP
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rcv_error
range|:
literal|1
decl_stmt|;
name|uint64_t
name|err_code
range|:
literal|8
decl_stmt|;
block|}
name|snoip
struct|;
block|}
name|word2
union|;
name|octeon_buf_ptr_t
name|packet_ptr
decl_stmt|;
name|uint8_t
name|packet_data
index|[
literal|96
index|]
decl_stmt|;
block|}
name|octeon_wqe_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|scraddr
range|:
literal|8
decl_stmt|;
comment|/**< the (64-bit word) location in scratchpad to write to (if len != 0) */
name|uint64_t
name|len
range|:
literal|8
decl_stmt|;
comment|/**< the number of words in the response (0 => no response) */
name|uint64_t
name|did
range|:
literal|8
decl_stmt|;
comment|/**< the ID of the device on the non-coherent bus */
name|uint64_t
name|unused
range|:
literal|36
decl_stmt|;
name|uint64_t
name|wait
range|:
literal|1
decl_stmt|;
comment|/**< if set, don't return load response until work is available */
name|uint64_t
name|unused2
range|:
literal|3
decl_stmt|;
block|}
name|bits
struct|;
block|}
name|octeon_pow_iobdma_store_t
typedef|;
end_typedef

begin_comment
comment|/**  * Wait flag values for pow functions.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|OCTEON_POW_WAIT
init|=
literal|1
block|,
name|OCTEON_POW_NO_WAIT
init|=
literal|0
block|, }
name|octeon_pow_wait_t
typedef|;
end_typedef

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|phys_to_virt
parameter_list|(
name|unsigned
name|long
name|address
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|address
operator|+
literal|0x80000000UL
operator|)
return|;
block|}
end_function

begin_comment
comment|// decode within DMA space
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|OCTEON_ADD_WIN_DMA_ADD
init|=
literal|0L
block|,
comment|// add store data to the write buffer entry, allocating it if necessary
name|OCTEON_ADD_WIN_DMA_SENDMEM
init|=
literal|1L
block|,
comment|// send out the write buffer entry to DRAM
comment|// store data must be normal DRAM memory space address in this case
name|OCTEON_ADD_WIN_DMA_SENDDMA
init|=
literal|2L
block|,
comment|// send out the write buffer entry as an IOBDMA command
comment|// see OCTEON_ADD_WIN_DMA_SEND_DEC for data contents
name|OCTEON_ADD_WIN_DMA_SENDIO
init|=
literal|3L
block|,
comment|// send out the write buffer entry as an IO write
comment|// store data must be normal IO space address in this case
name|OCTEON_ADD_WIN_DMA_SENDSINGLE
init|=
literal|4L
block|,
comment|// send out a single-tick command on the NCB bus
comment|// no write buffer data needed/used
block|}
name|octeon_add_win_dma_dec_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|OCTEON_OCT_DID_FPA
value|5ULL
end_define

begin_define
define|#
directive|define
name|OCTEON_OCT_DID_TAG
value|12ULL
end_define

begin_define
define|#
directive|define
name|OCTEON_OCT_DID_TAG_SWTAG
value|OCTEON_ADDR_FULL_DID(OCTEON_OCT_DID_TAG, 0ULL)
end_define

begin_define
define|#
directive|define
name|OCTEON_IOBDMA_OFFSET
value|(-3*1024ll)
end_define

begin_define
define|#
directive|define
name|OCTEON_IOBDMA_SEP
value|16
end_define

begin_define
define|#
directive|define
name|OCTEON_IOBDMA_SENDSINGLE
value|(OCTEON_IOBDMA_OFFSET +         \                                         (OCTEON_ADD_WIN_DMA_SENDSINGLE *\                                         OCTEON_IOBDMA_SEP))
end_define

begin_function
specifier|static
specifier|inline
name|void
name|octeon_send_single
parameter_list|(
name|uint64_t
name|data
parameter_list|)
block|{
name|oct_write64
argument_list|(
call|(
name|uint64_t
call|)
argument_list|(
name|OCTEON_IOBDMA_SENDSINGLE
operator|*
operator|(
name|long
name|long
operator|)
literal|8
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|octeon_pow_work_request_async_nocheck
parameter_list|(
name|int
name|scratch_addr
parameter_list|,
name|octeon_pow_wait_t
name|wait
parameter_list|)
block|{
name|octeon_pow_iobdma_store_t
name|data
decl_stmt|;
comment|/* scratch_addr must be 8 byte aligned */
name|data
operator|.
name|bits
operator|.
name|scraddr
operator|=
name|scratch_addr
operator|>>
literal|3
expr_stmt|;
name|data
operator|.
name|bits
operator|.
name|len
operator|=
literal|1
expr_stmt|;
name|data
operator|.
name|bits
operator|.
name|did
operator|=
name|OCTEON_OCT_DID_TAG_SWTAG
expr_stmt|;
name|data
operator|.
name|bits
operator|.
name|wait
operator|=
name|wait
expr_stmt|;
name|octeon_send_single
argument_list|(
name|data
operator|.
name|word64
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**  * octeon_gmx_inf_mode  *  * GMX_INF_MODE = Interface Mode  *  */
end_comment

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
struct|struct
name|gmxx_inf_mode_s
block|{
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
name|uint64_t
name|p0mii
range|:
literal|1
decl_stmt|;
comment|/**< Port 0 Interface Mode                                                          0: Port 0 is RGMII                                                          1: Port 0 is MII */
name|uint64_t
name|en
range|:
literal|1
decl_stmt|;
comment|/**< Interface Enable */
name|uint64_t
name|type
range|:
literal|1
decl_stmt|;
comment|/**< Interface Mode                                                          0: RGMII Mode                                                          1: Spi4 Mode */
block|}
name|bits
struct|;
struct|struct
name|gmxx_inf_mode_cn3020
block|{
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|en
range|:
literal|1
decl_stmt|;
comment|/**< Interface Enable */
name|uint64_t
name|type
range|:
literal|1
decl_stmt|;
comment|/**< Interface Mode                                                          0: All three ports are RGMII ports                                                          1: prt0 is RGMII, prt1 is GMII, and prt2 is unused */
block|}
name|cn3020
struct|;
name|struct
name|gmxx_inf_mode_s
name|cn30xx
decl_stmt|;
name|struct
name|gmxx_inf_mode_cn3020
name|cn31xx
decl_stmt|;
name|struct
name|gmxx_inf_mode_cn3020
name|cn36xx
decl_stmt|;
name|struct
name|gmxx_inf_mode_cn3020
name|cn38xx
decl_stmt|;
name|struct
name|gmxx_inf_mode_cn3020
name|cn38xxp2
decl_stmt|;
name|struct
name|gmxx_inf_mode_cn3020
name|cn56xx
decl_stmt|;
name|struct
name|gmxx_inf_mode_cn3020
name|cn58xx
decl_stmt|;
block|}
name|octeon_gmxx_inf_mode_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|reserved
range|:
literal|60
decl_stmt|;
comment|/* Reserved */
name|uint64_t
name|slottime
range|:
literal|1
decl_stmt|;
comment|/* Slot Time for Half-Duplex */
comment|/* operation - 0 = 512 bitimes (10/100Mbs operation) */
comment|/* - 1 = 4096 bitimes (1000Mbs operation) */
name|uint64_t
name|duplex
range|:
literal|1
decl_stmt|;
comment|/* Duplex - 0 = Half Duplex */
comment|/* (collisions/extentions/bursts)            - 1 = Full Duplex */
name|uint64_t
name|speed
range|:
literal|1
decl_stmt|;
comment|/* Link Speed - 0 = 10/100Mbs */
comment|/* operation - 1 = 1000Mbs operation */
name|uint64_t
name|en
range|:
literal|1
decl_stmt|;
comment|/* Link Enable */
block|}
name|bits
struct|;
block|}
name|octeon_rgmx_prtx_cfg_t
typedef|;
end_typedef

begin_comment
comment|/*  * GMX_RX_INBND = RGMX InBand Link Status  *  */
end_comment

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|reserved
range|:
literal|60
decl_stmt|;
comment|/* Reserved */
name|uint64_t
name|duplex
range|:
literal|1
decl_stmt|;
comment|/* 0 = Half, 1 = Full */
name|uint64_t
name|speed
range|:
literal|2
decl_stmt|;
comment|/* Inbound Link Speed */
comment|/* 00 = 2.5Mhz, 01 = 25Mhz */
comment|/* 10 = 125MHz, 11 = Reserved */
name|uint64_t
name|status
range|:
literal|1
decl_stmt|;
comment|/* Inbound Status Up/Down */
block|}
name|bits
struct|;
block|}
name|octeon_rgmx_rxx_rx_inbnd_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|all_drop
range|:
literal|32
decl_stmt|;
name|uint64_t
name|slow_drop
range|:
literal|32
decl_stmt|;
block|}
name|bits
struct|;
block|}
name|octeon_rgmx_ipd_queue_red_marks_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|reserved
range|:
literal|15
decl_stmt|;
name|uint64_t
name|use_pagecount
range|:
literal|1
decl_stmt|;
name|uint64_t
name|new_con
range|:
literal|8
decl_stmt|;
name|uint64_t
name|avg_con
range|:
literal|8
decl_stmt|;
name|uint64_t
name|prb_con
range|:
literal|32
decl_stmt|;
block|}
name|bits
struct|;
block|}
name|octeon_rgmx_ipd_red_q_param_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|reserved
range|:
literal|46
decl_stmt|;
name|uint64_t
name|bp_enable
range|:
literal|1
decl_stmt|;
name|uint64_t
name|page_count
range|:
literal|17
decl_stmt|;
block|}
name|bits
struct|;
block|}
name|octeon_ipd_port_bp_page_count_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|prb_dly
range|:
literal|14
decl_stmt|;
name|uint64_t
name|avg_dly
range|:
literal|14
decl_stmt|;
name|uint64_t
name|port_enable
range|:
literal|36
decl_stmt|;
block|}
name|bits
struct|;
block|}
name|octeon_ipd_red_port_enable_t
typedef|;
end_typedef

begin_comment
comment|/**  * Tag type definitions  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|OCTEON_POW_TAG_TYPE_ORDERED
init|=
literal|0L
block|,
comment|/**< Tag ordering is maintained */
name|OCTEON_POW_TAG_TYPE_ATOMIC
init|=
literal|1L
block|,
comment|/**< Tag ordering is maintained, and at most one PP has the tag */
name|OCTEON_POW_TAG_TYPE_NULL
init|=
literal|2L
block|,
comment|/**< The work queue entry from the order                                             - NEVER tag switch from NULL to NULL */
name|OCTEON_POW_TAG_TYPE_NULL_NULL
init|=
literal|3L
comment|/**< A tag switch to NULL, and there is no space reserved in POW                                             - NEVER tag switch to NULL_NULL                                             - NEVER tag switch from NULL_NULL                                             - NULL_NULL is entered at the beginning of time and on a deschedule.                                             - NULL_NULL can be exited by a new work request. A NULL_SWITCH load can also switch the state to NULL */
block|}
name|octeon_pow_tag_type_t
typedef|;
end_typedef

begin_comment
comment|/**  * This structure defines the response to a load/SENDSINGLE to POW (except CSR reads)  */
end_comment

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
name|octeon_wqe_t
modifier|*
name|wqp
decl_stmt|;
comment|// response to new work request loads
struct|struct
block|{
name|uint64_t
name|no_work
range|:
literal|1
decl_stmt|;
comment|// set when no new work queue entry was returned
comment|// If there was de-scheduled work, the HW will definitely
comment|// return it. When this bit is set, it could mean
comment|// either mean:
comment|//   - There was no work, or
comment|//   - There was no work that the HW could find. This
comment|//     case can happen, regardless of the wait bit value
comment|//     in the original request, when there is work
comment|//     in the IQ's that is too deep down the list.
name|uint64_t
name|unused
range|:
literal|23
decl_stmt|;
name|uint64_t
name|addr
range|:
literal|40
decl_stmt|;
comment|// 36 in O1 -- the work queue pointer
block|}
name|s_work
struct|;
comment|// response to NULL_RD request loads
struct|struct
block|{
name|uint64_t
name|unused
range|:
literal|62
decl_stmt|;
name|uint64_t
name|state
range|:
literal|2
decl_stmt|;
comment|// of type octeon_pow_tag_type_t
comment|// state is one of the following:
comment|//       OCTEON_POW_TAG_TYPE_ORDERED
comment|//       OCTEON_POW_TAG_TYPE_ATOMIC
comment|//       OCTEON_POW_TAG_TYPE_NULL
comment|//       OCTEON_POW_TAG_TYPE_NULL_NULL
block|}
name|s_null_rd
struct|;
block|}
name|octeon_pow_tag_load_resp_t
typedef|;
end_typedef

begin_comment
comment|/*  * This structure describes the address to load stuff from POW  */
end_comment

begin_typedef
typedef|typedef
union|union
block|{
name|uint64_t
name|word64
decl_stmt|;
comment|// address for new work request loads (did<2:0> == 0)
struct|struct
block|{
name|uint64_t
name|mem_region
range|:
literal|2
decl_stmt|;
name|uint64_t
name|mbz
range|:
literal|13
decl_stmt|;
name|uint64_t
name|is_io
range|:
literal|1
decl_stmt|;
comment|// must be one
name|uint64_t
name|did
range|:
literal|8
decl_stmt|;
comment|// the ID of POW -- did<2:0> == 0 in this case
name|uint64_t
name|unaddr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wait
range|:
literal|1
decl_stmt|;
comment|// if set, don't return load response until work is available
name|uint64_t
name|mbzl
range|:
literal|3
decl_stmt|;
comment|// must be zero
block|}
name|swork
struct|;
comment|// physical address
comment|// address for NULL_RD request (did<2:0> == 4)
comment|// when this is read, HW attempts to change the state to NULL if it is NULL_NULL
comment|// (the hardware cannot switch from NULL_NULL to NULL if a POW entry is not available -
comment|// software may need to recover by finishing another piece of work before a POW
comment|// entry can ever become available.)
struct|struct
block|{
name|uint64_t
name|mem_region
range|:
literal|2
decl_stmt|;
name|uint64_t
name|mbz
range|:
literal|13
decl_stmt|;
name|uint64_t
name|is_io
range|:
literal|1
decl_stmt|;
comment|// must be one
name|uint64_t
name|did
range|:
literal|8
decl_stmt|;
comment|// the ID of POW -- did<2:0> == 4 in this case
name|uint64_t
name|unaddr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|33
decl_stmt|;
name|uint64_t
name|mbzl
range|:
literal|3
decl_stmt|;
comment|// must be zero
block|}
name|snull_rd
struct|;
comment|// physical address
comment|// address for CSR accesses
struct|struct
block|{
name|uint64_t
name|mem_region
range|:
literal|2
decl_stmt|;
name|uint64_t
name|mbz
range|:
literal|13
decl_stmt|;
name|uint64_t
name|is_io
range|:
literal|1
decl_stmt|;
comment|// must be one
name|uint64_t
name|did
range|:
literal|8
decl_stmt|;
comment|// the ID of POW -- did<2:0> == 7 in this case
name|uint64_t
name|unaddr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|csraddr
range|:
literal|36
decl_stmt|;
comment|// only 36 bits in O1, addr<2:0> must be zero
block|}
name|stagcsr
struct|;
comment|// physical address
block|}
name|octeon_pow_load_addr_t
typedef|;
end_typedef

begin_function
specifier|static
specifier|inline
name|void
name|octeon_pow_tag_switch_wait
parameter_list|(
name|void
parameter_list|)
block|{
name|uint64_t
name|switch_complete
decl_stmt|;
do|do
block|{
name|OCTEON_CHORD_HEX
argument_list|(
operator|&
name|switch_complete
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|switch_complete
condition|)
do|;
return|return;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|octeon_wqe_t
modifier|*
name|octeon_pow_work_request_sync_nocheck
parameter_list|(
name|octeon_pow_wait_t
name|wait
parameter_list|)
block|{
name|octeon_pow_load_addr_t
name|ptr
decl_stmt|;
name|octeon_pow_tag_load_resp_t
name|result
decl_stmt|;
name|ptr
operator|.
name|word64
operator|=
literal|0
expr_stmt|;
name|ptr
operator|.
name|swork
operator|.
name|mem_region
operator|=
name|OCTEON_IO_SEG
expr_stmt|;
name|ptr
operator|.
name|swork
operator|.
name|is_io
operator|=
literal|1
expr_stmt|;
name|ptr
operator|.
name|swork
operator|.
name|did
operator|=
name|OCTEON_OCT_DID_TAG_SWTAG
expr_stmt|;
name|ptr
operator|.
name|swork
operator|.
name|wait
operator|=
name|wait
expr_stmt|;
name|result
operator|.
name|word64
operator|=
name|oct_read64
argument_list|(
name|ptr
operator|.
name|word64
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|s_work
operator|.
name|no_work
operator|||
operator|!
name|result
operator|.
name|s_work
operator|.
name|addr
condition|)
block|{
return|return
name|NULL
return|;
block|}
return|return
operator|(
name|octeon_wqe_t
operator|*
operator|)
name|OCTEON_PHYS2PTR
argument_list|(
name|result
operator|.
name|s_work
operator|.
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|octeon_wqe_t
modifier|*
name|octeon_pow_work_request_sync_nocheck_debug
parameter_list|(
name|octeon_pow_wait_t
name|wait
parameter_list|)
block|{
name|octeon_pow_load_addr_t
name|ptr
decl_stmt|;
name|octeon_pow_tag_load_resp_t
name|result
decl_stmt|;
name|ptr
operator|.
name|word64
operator|=
literal|0
expr_stmt|;
name|ptr
operator|.
name|swork
operator|.
name|mem_region
operator|=
name|OCTEON_IO_SEG
expr_stmt|;
name|ptr
operator|.
name|swork
operator|.
name|is_io
operator|=
literal|1
expr_stmt|;
name|ptr
operator|.
name|swork
operator|.
name|did
operator|=
name|OCTEON_OCT_DID_TAG_SWTAG
expr_stmt|;
name|ptr
operator|.
name|swork
operator|.
name|wait
operator|=
name|wait
expr_stmt|;
name|result
operator|.
name|word64
operator|=
name|oct_read64
argument_list|(
name|ptr
operator|.
name|word64
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"WQE Result: 0x%llX  No-work %X   Addr %llX  Ptr: %p\n"
argument_list|,
name|result
operator|.
name|word64
argument_list|,
name|result
operator|.
name|s_work
operator|.
name|no_work
argument_list|,
operator|(
name|uint64_t
operator|)
name|result
operator|.
name|s_work
operator|.
name|addr
argument_list|,
name|OCTEON_PHYS2PTR
argument_list|(
name|result
operator|.
name|s_work
operator|.
name|addr
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|s_work
operator|.
name|no_work
operator|||
operator|!
name|result
operator|.
name|s_work
operator|.
name|addr
condition|)
block|{
return|return
name|NULL
return|;
block|}
return|return
operator|(
name|octeon_wqe_t
operator|*
operator|)
name|OCTEON_PHYS2PTR
argument_list|(
name|result
operator|.
name|s_work
operator|.
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|octeon_wqe_t
modifier|*
name|octeon_pow_work_request_sync
parameter_list|(
name|octeon_pow_wait_t
name|wait
parameter_list|)
block|{
name|octeon_pow_tag_switch_wait
argument_list|()
expr_stmt|;
return|return
operator|(
name|octeon_pow_work_request_sync_nocheck
argument_list|(
name|wait
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|octeon_wqe_t
modifier|*
name|octeon_pow_work_request_sync_debug
parameter_list|(
name|octeon_pow_wait_t
name|wait
parameter_list|)
block|{
name|octeon_pow_tag_switch_wait
argument_list|()
expr_stmt|;
return|return
operator|(
name|octeon_pow_work_request_sync_nocheck_debug
argument_list|(
name|wait
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/**  * Gets result of asynchronous work request.  Performs a IOBDMA sync  * to wait for the response.  *  * @param scratch_addr Scratch memory address to get result from  *                  Byte address, must be 8 byte aligned.  * @return Returns the WQE from the scratch register, or NULL if no work was available.  */
end_comment

begin_function
specifier|static
specifier|inline
name|octeon_wqe_t
modifier|*
name|octeon_pow_work_response_async
parameter_list|(
name|int
name|scratch_addr
parameter_list|)
block|{
name|octeon_pow_tag_load_resp_t
name|result
decl_stmt|;
name|OCTEON_SYNCIOBDMA
expr_stmt|;
name|result
operator|.
name|word64
operator|=
name|oct_scratch_read64
argument_list|(
name|scratch_addr
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|s_work
operator|.
name|no_work
condition|)
block|{
return|return
name|NULL
return|;
block|}
return|return
operator|(
name|octeon_wqe_t
operator|*
operator|)
name|OCTEON_PHYS2PTR
argument_list|(
name|result
operator|.
name|s_work
operator|.
name|addr
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/*  * The address from POW is a physical address. Adjust for back ptr, as well as  * make it accessible using  KSEG0.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|octeon_pow_pktptr_to_kbuffer
parameter_list|(
name|octeon_buf_ptr_t
name|pkt_ptr
parameter_list|)
block|{
return|return
operator|(
name|OCTEON_PHYS2PTR
argument_list|(
operator|(
operator|(
name|pkt_ptr
operator|.
name|bits
operator|.
name|addr
operator|>>
literal|7
operator|)
operator|-
name|pkt_ptr
operator|.
name|bits
operator|.
name|back
operator|)
operator|<<
literal|7
argument_list|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|INTERFACE
parameter_list|(
name|port
parameter_list|)
value|(port>> 4)
end_define

begin_comment
comment|/* Ports 0-15 are interface 0, 16-31 are interface 1 */
end_comment

begin_define
define|#
directive|define
name|INDEX
parameter_list|(
name|port
parameter_list|)
value|(port& 0xf)
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_PRTX_CFG
parameter_list|(
name|index
parameter_list|,
name|interface
parameter_list|)
value|(0x8001180008000010ull+((index)*2048)+((interface)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_SMACX
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000230ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_RXX_ADR_CAM0
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000180ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_RXX_ADR_CAM1
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000188ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_RXX_ADR_CAM2
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000190ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_RXX_ADR_CAM3
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000198ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_RXX_ADR_CAM4
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x80011800080001A0ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_RXX_ADR_CAM5
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x80011800080001A8ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_RXX_ADR_CTL
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000100ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_RXX_ADR_CAM_EN
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000108ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_INF_MODE
parameter_list|(
name|block_id
parameter_list|)
value|(0x80011800080007F8ull+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_TX_PRTS
parameter_list|(
name|block_id
parameter_list|)
value|(0x8001180008000480ull+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_ASXX_RX_PRT_EN
parameter_list|(
name|block_id
parameter_list|)
value|(0x80011800B0000000ull+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_ASXX_TX_PRT_EN
parameter_list|(
name|block_id
parameter_list|)
value|(0x80011800B0000008ull+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_TXX_THRESH
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000210ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_ASXX_TX_HI_WATERX
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x80011800B0000080ull+((offset)*8)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_ASXX_RX_CLK_SETX
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x80011800B0000020ull+((offset)*8)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_ASXX_TX_CLK_SETX
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x80011800B0000048ull+((offset)*8)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_RXX_RX_INBND
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000060ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_TXX_CLK
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000208ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_TXX_SLOT
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000220ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_TXX_BURST
parameter_list|(
name|offset
parameter_list|,
name|block_id
parameter_list|)
value|(0x8001180008000228ull+((offset)*2048)+((block_id)*0x8000000ull))
end_define

begin_define
define|#
directive|define
name|OCTEON_PIP_GBL_CTL
value|(0x80011800A0000020ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_PIP_GBL_CFG
value|(0x80011800A0000028ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_PIP_PRT_CFGX
parameter_list|(
name|offset
parameter_list|)
value|(0x80011800A0000200ull+((offset)*8))
end_define

begin_define
define|#
directive|define
name|OCTEON_PIP_PRT_TAGX
parameter_list|(
name|offset
parameter_list|)
value|(0x80011800A0000400ull+((offset)*8))
end_define

begin_define
define|#
directive|define
name|OUR_CORE
value|0
end_define

begin_define
define|#
directive|define
name|IP2
value|0
end_define

begin_define
define|#
directive|define
name|IP3
value|1
end_define

begin_define
define|#
directive|define
name|CIU_TIMERS
value|4
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_CORE_GROUP_MASK
parameter_list|(
name|core
parameter_list|)
value|(0x8001670000000000ull + (8 * core))
end_define

begin_define
define|#
directive|define
name|OCTEON_CIU_INT_EN0
parameter_list|(
name|CORE
parameter_list|,
name|IP
parameter_list|)
value|(0x8001070000000200ull + (IP * 16) + \ 					((CORE) * 32))
end_define

begin_define
define|#
directive|define
name|OCTEON_CIU_INT_SUM0
parameter_list|(
name|CORE
parameter_list|,
name|IP
parameter_list|)
value|(0x8001070000000000ull + (IP * 8) + \ 					((CORE) * 32))
end_define

begin_define
define|#
directive|define
name|OCTEON_CIU_TIMX
parameter_list|(
name|offset
parameter_list|)
value|(0x8001070000000480ull+((offset)*8))
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_WQ_INT_THRX
parameter_list|(
name|offset
parameter_list|)
value|((0x8001670000000080ull+((offset)*8)))
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_WQ_INT_CNTX
parameter_list|(
name|offset
parameter_list|)
value|((0x8001670000000100ull+((offset)*8)))
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_QOS_THRX
parameter_list|(
name|offset
parameter_list|)
value|((0x8001670000000180ull+((offset)*8)))
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_QOS_RNDX
parameter_list|(
name|offset
parameter_list|)
value|((0x80016700000001C0ull+((offset)*8)))
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_WQ_INT_PC
value|(0x8001670000000208ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_NW_TIM
value|(0x8001670000000210ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_ECC_ERR
value|(0x8001670000000218ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_INT_CTL
value|(0x8001670000000220ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_NOS_CNT
value|(0x8001670000000228ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_WS_PCX
parameter_list|(
name|offset
parameter_list|)
value|((0x8001670000000280ull+((offset)*8)))
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_WA_PCX
parameter_list|(
name|offset
parameter_list|)
value|((0x8001670000000300ull+((offset)*8)))
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_IQ_CNTX
parameter_list|(
name|offset
parameter_list|)
value|((0x8001670000000340ull+((offset)*8)))
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_WA_COM_PC
value|(0x8001670000000380ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_IQ_COM_CNT
value|(0x8001670000000388ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_TS_PC
value|(0x8001670000000390ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_DS_PC
value|(0x8001670000000398ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_BIST_STAT
value|(0x80016700000003F8ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_POW_WQ_INT
value|(0x8001670000000200ull)
end_define

begin_define
define|#
directive|define
name|OCTEON_IPD_PORT_BP_COUNTERS_PAIRX
parameter_list|(
name|offset
parameter_list|)
value|(0x80014F00000001B8ull+((offset)*8))
end_define

begin_comment
comment|/*  * Current Counts that triggered interrupt  */
end_comment

begin_define
define|#
directive|define
name|OCTEON_POW_WQ_INT_CNTX
parameter_list|(
name|offset
parameter_list|)
value|((0x8001670000000100ull+((offset)*8)))
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_ADRCTL_CAM_MODE_REJECT_DMAC
value|0
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_ADRCTL_ACCEPT_BROADCAST
value|1
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_ADRCTL_REJECT_ALL_MULTICAST
value|2
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_ADRCTL_ACCEPT_ALL_MULTICAST
value|4
end_define

begin_define
define|#
directive|define
name|OCTEON_RGMX_ADRCTL_CAM_MODE_ACCEPT_DMAC
value|8
end_define

begin_define
define|#
directive|define
name|RGMX_LOCK_INIT
parameter_list|(
name|_sc
parameter_list|,
name|_name
parameter_list|)
define|\
value|mtx_init(&(_sc)->mtx, _name, MTX_NETWORK_LOCK, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|RGMX_LOCK_DESTROY
parameter_list|(
name|_sc
parameter_list|)
value|mtx_destroy(&(_sc)->mtx)
end_define

begin_define
define|#
directive|define
name|RGMX_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->mtx)
end_define

begin_define
define|#
directive|define
name|RGMX_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->mtx)
end_define

begin_define
define|#
directive|define
name|RGMX_LOCK_ASSERT
parameter_list|(
name|_sc
parameter_list|)
value|mtx_assert(&(_sc)->mtx, MA_OWNED)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ___OCTEON_RGMX__H___ */
end_comment

end_unit

