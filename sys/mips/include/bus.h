begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*      $NetBSD: bus.h,v 1.12 1997/10/01 08:25:15 fvdl Exp $    */
end_comment

begin_comment
comment|/*-  * $Id: bus.h,v 1.6 2007/08/09 11:23:32 katta Exp $  *  * Copyright (c) 1996, 1997 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,  * NASA Ames Research Center.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the NetBSD  *	Foundation, Inc. and its contributors.  * 4. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * Copyright (c) 1996 Charles M. Hannum.  All rights reserved.  * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *      This product includes software developed by Christopher G. Demetriou  *	for the NetBSD Project.  * 4. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  *	from: src/sys/alpha/include/bus.h,v 1.5 1999/08/28 00:38:40 peter  * $FreeBSD$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_BUS_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_BUS_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|TARGET_OCTEON
end_ifdef

begin_include
include|#
directive|include
file|<machine/bus_octeon.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<machine/_bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/cpufunc.h>
end_include

begin_comment
comment|/*  * Values for the mips bus space tag, not to be used directly by MI code.  */
end_comment

begin_define
define|#
directive|define
name|MIPS_BUS_SPACE_IO
value|0
end_define

begin_comment
comment|/* space is i/o space */
end_comment

begin_define
define|#
directive|define
name|MIPS_BUS_SPACE_MEM
value|1
end_define

begin_comment
comment|/* space is mem space */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE_24BIT
value|0xFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE_32BIT
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE
value|0xFFFFFFFF
end_define

begin_comment
comment|/* Maximum supported size */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR_24BIT
value|0xFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR_32BIT
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_UNRESTRICTED
value|(~0)
end_define

begin_comment
comment|/*  * Map a region of device bus space into CPU virtual address space.  */
end_comment

begin_function_decl
name|__inline
name|int
name|bus_space_map
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_addr_t
name|addr
parameter_list|,
name|bus_size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|,
name|bus_space_handle_t
modifier|*
name|bshp
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|bus_space_map
parameter_list|(
name|bus_space_tag_t
name|t
name|__unused
parameter_list|,
name|bus_addr_t
name|addr
parameter_list|,
name|bus_size_t
name|size
name|__unused
parameter_list|,
name|int
name|flags
name|__unused
parameter_list|,
name|bus_space_handle_t
modifier|*
name|bshp
parameter_list|)
block|{
operator|*
name|bshp
operator|=
name|addr
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Unmap a region of device bus space.  */
end_comment

begin_function_decl
name|void
name|bus_space_unmap
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Get a new handle for a subregion of an already-mapped area of bus space.  */
end_comment

begin_function_decl
name|int
name|bus_space_subregion
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|bus_size_t
name|size
parameter_list|,
name|bus_space_handle_t
modifier|*
name|nbshp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Allocate a region of memory that is accessible to devices in bus space.  */
end_comment

begin_function_decl
name|int
name|bus_space_alloc
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_addr_t
name|rstart
parameter_list|,
name|bus_addr_t
name|rend
parameter_list|,
name|bus_size_t
name|size
parameter_list|,
name|bus_size_t
name|align
parameter_list|,
name|bus_size_t
name|boundary
parameter_list|,
name|int
name|flags
parameter_list|,
name|bus_addr_t
modifier|*
name|addrp
parameter_list|,
name|bus_space_handle_t
modifier|*
name|bshp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Free a region of bus space accessible memory.  */
end_comment

begin_function_decl
name|void
name|bus_space_free
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Read a 1, 2, 4, or 8 byte quantity from bus space  * described by tag/handle/offset.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|u_int8_t
name|bus_space_read_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|handle
parameter_list|,
name|bus_size_t
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|u_int16_t
name|bus_space_read_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|handle
parameter_list|,
name|bus_size_t
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|u_int32_t
name|bus_space_read_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|handle
parameter_list|,
name|bus_size_t
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|u_int8_t
name|bus_space_read_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|handle
parameter_list|,
name|bus_size_t
name|offset
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
return|return
operator|(
name|inb
argument_list|(
name|handle
operator|+
name|offset
argument_list|)
operator|)
return|;
return|return
operator|(
name|readb
argument_list|(
name|handle
operator|+
name|offset
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int16_t
name|bus_space_read_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|handle
parameter_list|,
name|bus_size_t
name|offset
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
return|return
operator|(
name|inw
argument_list|(
name|handle
operator|+
name|offset
argument_list|)
operator|)
return|;
return|return
operator|(
name|readw
argument_list|(
name|handle
operator|+
name|offset
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int32_t
name|bus_space_read_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|handle
parameter_list|,
name|bus_size_t
name|offset
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
return|return
operator|(
name|inl
argument_list|(
name|handle
operator|+
name|offset
argument_list|)
operator|)
return|;
return|return
operator|(
name|readl
argument_list|(
name|handle
operator|+
name|offset
argument_list|)
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Cause a link error for bus_space_read_8 */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|!!! bus_space_read_8 unimplemented !!!
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Read `count' 1, 2, 4, or 8 byte quantities from bus space  * described by tag/handle/offset and copy into buffer provided.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_read_multi_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_read_multi_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_read_multi_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|addr
operator|++
operator|=
name|inb
argument_list|(
name|bsh
operator|+
name|offset
argument_list|)
expr_stmt|;
else|else
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|addr
operator|++
operator|=
name|readb
argument_list|(
name|bsh
operator|+
name|offset
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|addr
operator|++
operator|=
name|inw
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
else|else
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|addr
operator|++
operator|=
name|readw
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|addr
operator|++
operator|=
name|inl
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
else|else
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|addr
operator|++
operator|=
name|readl
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Cause a link error for bus_space_read_multi_8 */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_multi_8
value|!!! bus_space_read_multi_8 unimplemented !!!
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Read `count' 1, 2, 4, or 8 byte quantities from bus space  * described by tag/handle and starting at `offset' and copy into  * buffer provided.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_read_region_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_read_region_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_read_region_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
block|{
operator|*
name|addr
operator|++
operator|=
name|inb
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|1
expr_stmt|;
block|}
else|else
while|while
condition|(
name|count
operator|--
condition|)
block|{
operator|*
name|addr
operator|++
operator|=
name|readb
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|1
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
block|{
operator|*
name|addr
operator|++
operator|=
name|inw
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|2
expr_stmt|;
block|}
else|else
while|while
condition|(
name|count
operator|--
condition|)
block|{
operator|*
name|addr
operator|++
operator|=
name|readw
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
block|{
operator|*
name|addr
operator|++
operator|=
name|inl
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|4
expr_stmt|;
block|}
else|else
while|while
condition|(
name|count
operator|--
condition|)
block|{
operator|*
name|addr
operator|++
operator|=
name|readb
argument_list|(
name|baddr
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Cause a link error for bus_space_read_region_8 */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_region_8
value|!!! bus_space_read_region_8 unimplemented !!!
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Write the 1, 2, 4, or 8 byte value `value' to bus space  * described by tag/handle/offset.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_write_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_write_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_write_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
name|value
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
name|outb
argument_list|(
name|bsh
operator|+
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|writeb
argument_list|(
name|bsh
operator|+
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
name|value
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
name|outw
argument_list|(
name|bsh
operator|+
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|writew
argument_list|(
name|bsh
operator|+
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
name|value
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
name|outl
argument_list|(
name|bsh
operator|+
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|writel
argument_list|(
name|bsh
operator|+
name|offset
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Cause a link error for bus_space_write_8 */
end_comment

begin_define
define|#
directive|define
name|bus_space_write_8
value|!!! bus_space_write_8 not implemented !!!
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Write `count' 1, 2, 4, or 8 byte quantities from the buffer  * provided to bus space described by tag/handle/offset.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_write_multi_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_write_multi_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int16_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_write_multi_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int32_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
name|outb
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
else|else
while|while
condition|(
name|count
operator|--
condition|)
name|writeb
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int16_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
name|outw
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
else|else
while|while
condition|(
name|count
operator|--
condition|)
name|writew
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int32_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
name|outl
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
else|else
while|while
condition|(
name|count
operator|--
condition|)
name|writel
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Cause a link error for bus_space_write_multi_8 */
end_comment

begin_define
define|#
directive|define
name|bus_space_write_multi_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|!!! bus_space_write_multi_8 unimplemented !!!
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Write `count' 1, 2, 4, or 8 byte quantities from the buffer provided  * to bus space described by tag/handle starting at `offset'.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_write_region_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_write_region_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int16_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_write_region_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int32_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|outb
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|1
expr_stmt|;
block|}
else|else
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|writeb
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|1
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int16_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|outw
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|2
expr_stmt|;
block|}
else|else
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|writew
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
specifier|const
name|u_int32_t
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|baddr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|outl
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|4
expr_stmt|;
block|}
else|else
while|while
condition|(
name|count
operator|--
condition|)
block|{
name|writel
argument_list|(
name|baddr
argument_list|,
operator|*
name|addr
operator|++
argument_list|)
expr_stmt|;
name|baddr
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Cause a link error for bus_space_write_region_8 */
end_comment

begin_define
define|#
directive|define
name|bus_space_write_region_8
define|\
value|!!! bus_space_write_region_8 unimplemented !!!
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Write the 1, 2, 4, or 8 byte value `val' to bus space described  * by tag/handle/offset `count' times.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_set_multi_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_set_multi_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_set_multi_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|addr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
name|outb
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
while|while
condition|(
name|count
operator|--
condition|)
name|writeb
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|addr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
name|outw
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
while|while
condition|(
name|count
operator|--
condition|)
name|writew
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|addr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
while|while
condition|(
name|count
operator|--
condition|)
name|outl
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
while|while
condition|(
name|count
operator|--
condition|)
name|writel
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Cause a link error for bus_space_set_multi_8 */
end_comment

begin_define
define|#
directive|define
name|bus_space_set_multi_8
value|!!! bus_space_set_multi_8 unimplemented !!!
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Write `count' 1, 2, 4, or 8 byte value `val' to bus space described  * by tag/handle starting at `offset'.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_set_region_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_set_region_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_set_region_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int8_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|addr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr
operator|++
control|)
name|outb
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr
operator|++
control|)
name|writeb
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int16_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|addr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr
operator|+=
literal|2
control|)
name|outw
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr
operator|+=
literal|2
control|)
name|writew
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|offset
parameter_list|,
name|u_int32_t
name|value
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|addr
init|=
name|bsh
operator|+
name|offset
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr
operator|+=
literal|4
control|)
name|outl
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr
operator|+=
literal|4
control|)
name|writel
argument_list|(
name|addr
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Cause a link error for bus_space_set_region_8 */
end_comment

begin_define
define|#
directive|define
name|bus_space_set_region_8
value|!!! bus_space_set_region_8 unimplemented !!!
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Copy `count' 1, 2, 4, or 8 byte values from bus space starting  * at tag/bsh1/off1 to bus space starting at tag/bsh2/off2.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_copy_region_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|off1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|off2
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_copy_region_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|off1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|off2
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_copy_region_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|off1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|off2
parameter_list|,
name|size_t
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_1
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|off1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|off2
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|addr1
init|=
name|bsh1
operator|+
name|off1
decl_stmt|;
name|bus_addr_t
name|addr2
init|=
name|bsh2
operator|+
name|off2
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
block|{
if|if
condition|(
name|addr1
operator|>=
name|addr2
condition|)
block|{
comment|/* src after dest: copy forward */
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|++
operator|,
name|addr2
operator|++
control|)
name|outb
argument_list|(
name|addr2
argument_list|,
name|inb
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* dest after src: copy backwards */
for|for
control|(
name|addr1
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
operator|,
name|addr2
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|--
operator|,
name|addr2
operator|--
control|)
name|outb
argument_list|(
name|addr2
argument_list|,
name|inb
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|addr1
operator|>=
name|addr2
condition|)
block|{
comment|/* src after dest: copy forward */
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|++
operator|,
name|addr2
operator|++
control|)
name|writeb
argument_list|(
name|addr2
argument_list|,
name|readb
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* dest after src: copy backwards */
for|for
control|(
name|addr1
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
operator|,
name|addr2
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|--
operator|,
name|addr2
operator|--
control|)
name|writeb
argument_list|(
name|addr2
argument_list|,
name|readb
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_2
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|off1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|off2
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|addr1
init|=
name|bsh1
operator|+
name|off1
decl_stmt|;
name|bus_addr_t
name|addr2
init|=
name|bsh2
operator|+
name|off2
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
block|{
if|if
condition|(
name|addr1
operator|>=
name|addr2
condition|)
block|{
comment|/* src after dest: copy forward */
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|+=
literal|2
operator|,
name|addr2
operator|+=
literal|2
control|)
name|outw
argument_list|(
name|addr2
argument_list|,
name|inw
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* dest after src: copy backwards */
for|for
control|(
name|addr1
operator|+=
literal|2
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
operator|,
name|addr2
operator|+=
literal|2
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|-=
literal|2
operator|,
name|addr2
operator|-=
literal|2
control|)
name|outw
argument_list|(
name|addr2
argument_list|,
name|inw
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|addr1
operator|>=
name|addr2
condition|)
block|{
comment|/* src after dest: copy forward */
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|+=
literal|2
operator|,
name|addr2
operator|+=
literal|2
control|)
name|writew
argument_list|(
name|addr2
argument_list|,
name|readw
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* dest after src: copy backwards */
for|for
control|(
name|addr1
operator|+=
literal|2
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
operator|,
name|addr2
operator|+=
literal|2
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|-=
literal|2
operator|,
name|addr2
operator|-=
literal|2
control|)
name|writew
argument_list|(
name|addr2
argument_list|,
name|readw
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_4
parameter_list|(
name|bus_space_tag_t
name|tag
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|off1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|off2
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|addr1
init|=
name|bsh1
operator|+
name|off1
decl_stmt|;
name|bus_addr_t
name|addr2
init|=
name|bsh2
operator|+
name|off2
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|MIPS_BUS_SPACE_IO
condition|)
block|{
if|if
condition|(
name|addr1
operator|>=
name|addr2
condition|)
block|{
comment|/* src after dest: copy forward */
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|+=
literal|4
operator|,
name|addr2
operator|+=
literal|4
control|)
name|outl
argument_list|(
name|addr2
argument_list|,
name|inl
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* dest after src: copy backwards */
for|for
control|(
name|addr1
operator|+=
literal|4
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
operator|,
name|addr2
operator|+=
literal|4
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|-=
literal|4
operator|,
name|addr2
operator|-=
literal|4
control|)
name|outl
argument_list|(
name|addr2
argument_list|,
name|inl
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|addr1
operator|>=
name|addr2
condition|)
block|{
comment|/* src after dest: copy forward */
for|for
control|(
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|+=
literal|4
operator|,
name|addr2
operator|+=
literal|4
control|)
name|writel
argument_list|(
name|addr2
argument_list|,
name|readl
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* dest after src: copy backwards */
for|for
control|(
name|addr1
operator|+=
literal|4
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
operator|,
name|addr2
operator|+=
literal|4
operator|*
operator|(
name|count
operator|-
literal|1
operator|)
init|;
name|count
operator|!=
literal|0
condition|;
name|count
operator|--
operator|,
name|addr1
operator|-=
literal|4
operator|,
name|addr2
operator|-=
literal|4
control|)
name|writel
argument_list|(
name|addr2
argument_list|,
name|readl
argument_list|(
name|addr1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Cause a link error for bus_space_copy_8 */
end_comment

begin_define
define|#
directive|define
name|bus_space_copy_region_8
value|!!! bus_space_copy_region_8 unimplemented !!!
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Bus read/write barrier methods.  *  *	void bus_space_barrier(bus_space_tag_t tag, bus_space_handle_t bsh,  *			       bus_size_t offset, bus_size_t len, int flags);  *  *  * Note that BUS_SPACE_BARRIER_WRITE doesn't do anything other than  * prevent reordering by the compiler; all Intel x86 processors currently  * retire operations outside the CPU in program order.  */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_READ
value|0x01
end_define

begin_comment
comment|/* force read barrier */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_WRITE
value|0x02
end_define

begin_comment
comment|/* force write barrier */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_barrier
parameter_list|(
name|bus_space_tag_t
name|tag
name|__unused
parameter_list|,
name|bus_space_handle_t
name|bsh
name|__unused
parameter_list|,
name|bus_size_t
name|offset
name|__unused
parameter_list|,
name|bus_size_t
name|len
name|__unused
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
if|#
directive|if
literal|0
ifdef|#
directive|ifdef
name|__GNUCLIKE_ASM
block|if (flags& BUS_SPACE_BARRIER_READ) 		__asm __volatile("lock; addl $0,0(%%rsp)" : : : "memory"); 	else 		__asm __volatile("" : : : "memory");
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|BUS_SPACE_NO_LEGACY
end_ifdef

begin_undef
undef|#
directive|undef
name|inb
end_undef

begin_undef
undef|#
directive|undef
name|outb
end_undef

begin_define
define|#
directive|define
name|inb
parameter_list|(
name|a
parameter_list|)
value|compiler_error
end_define

begin_define
define|#
directive|define
name|inw
parameter_list|(
name|a
parameter_list|)
value|compiler_error
end_define

begin_define
define|#
directive|define
name|inl
parameter_list|(
name|a
parameter_list|)
value|compiler_error
end_define

begin_define
define|#
directive|define
name|outb
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|compiler_error
end_define

begin_define
define|#
directive|define
name|outw
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|compiler_error
end_define

begin_define
define|#
directive|define
name|outl
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|compiler_error
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<machine/bus_dma.h>
end_include

begin_comment
comment|/*  * Stream accesses are the same as normal accesses on amd64; there are no  * supported bus systems with an endianess different from the host one.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|bus_space_read_1((t), (h), (o))
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|bus_space_read_2((t), (h), (o))
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|bus_space_read_4((t), (h), (o))
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_1((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_2((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_4((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|bus_space_write_1((t), (h), (o), (v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|bus_space_write_2((t), (h), (o), (v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|bus_space_write_4((t), (h), (o), (v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_1((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_2((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_4((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_multi_1((t), (h), (o), (v), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_multi_2((t), (h), (o), (v), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_multi_4((t), (h), (o), (v), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_region_1((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_region_2((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_region_4((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_region_1((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_region_2((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_region_4((t), (h), (o), (a), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_1((t), (h), (o), (v), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_2((t), (h), (o), (v), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_4((t), (h), (o), (v), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_1((t), (h1), (o1), (h2), (o2), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_2((t), (h1), (o1), (h2), (o2), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_4((t), (h1), (o1), (h2), (o2), (c))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !TARGET_OCTEON */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_BUS_H_ */
end_comment

end_unit

