begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2009 RMI Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of RMI Corporation, nor the names of its contributors,  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * RMI_BSD */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_STATS_H_
end_ifndef

begin_define
define|#
directive|define
name|_STATS_H_
end_define

begin_typedef
typedef|typedef
struct|struct
name|hmac_stats
block|{
name|unsigned
name|long
name|md5_count
decl_stmt|;
name|unsigned
name|long
name|long
name|md5_bytes
decl_stmt|;
name|unsigned
name|long
name|sha1_count
decl_stmt|;
name|unsigned
name|long
name|long
name|sha1_bytes
decl_stmt|;
name|unsigned
name|long
name|sha256_count
decl_stmt|;
name|unsigned
name|long
name|long
name|sha256_bytes
decl_stmt|;
name|unsigned
name|long
name|sha384_count
decl_stmt|;
name|unsigned
name|long
name|long
name|sha384_bytes
decl_stmt|;
name|unsigned
name|long
name|sha512_count
decl_stmt|;
name|unsigned
name|long
name|long
name|sha512_bytes
decl_stmt|;
name|unsigned
name|long
name|gcm_count
decl_stmt|;
name|unsigned
name|long
name|long
name|gcm_bytes
decl_stmt|;
name|unsigned
name|long
name|kasumi_f9_count
decl_stmt|;
name|unsigned
name|long
name|long
name|kasumi_f9_bytes
decl_stmt|;
name|unsigned
name|long
name|reverts
decl_stmt|;
name|unsigned
name|long
name|long
name|reverts_bytes
decl_stmt|;
block|}
name|hmac_stats_t
operator|,
typedef|*
name|hmac_stats_pt
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|cipher_stats
block|{
name|unsigned
name|long
name|des_encrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|des_encrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|des_decrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|des_decrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|des3_encrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|des3_encrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|des3_decrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|des3_decrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|aes_encrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|aes_encrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|aes_decrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|aes_decrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|arc4_encrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|arc4_encrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|arc4_decrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|arc4_decrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|kasumi_f8_encrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|kasumi_f8_encrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|kasumi_f8_decrypts
decl_stmt|;
name|unsigned
name|long
name|long
name|kasumi_f8_decrypt_bytes
decl_stmt|;
name|unsigned
name|long
name|reverts
decl_stmt|;
name|unsigned
name|long
name|long
name|reverts_bytes
decl_stmt|;
block|}
name|cipher_stats_t
operator|,
typedef|*
name|cipher_stats_pt
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|modexp_stats
block|{
name|unsigned
name|long
name|modexp_512s
decl_stmt|;
name|unsigned
name|long
name|modexp_1024s
decl_stmt|;
block|}
name|modexp_stats_t
operator|,
typedef|*
name|modexp_stats_pt
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ecc_stats
block|{
name|unsigned
name|long
name|ecc_mul
decl_stmt|;
name|unsigned
name|long
name|ecc_add
decl_stmt|;
name|unsigned
name|long
name|ecc_dbl
decl_stmt|;
name|unsigned
name|long
name|ecc_vfy
decl_stmt|;
name|unsigned
name|long
name|ecc_bin_mul
decl_stmt|;
name|unsigned
name|long
name|ecc_field_bin_inv
decl_stmt|;
name|unsigned
name|long
name|ecc_field_bin_mul
decl_stmt|;
name|unsigned
name|long
name|ecc_field_bin_add
decl_stmt|;
name|unsigned
name|long
name|ecc_field_add
decl_stmt|;
name|unsigned
name|long
name|ecc_field_sub
decl_stmt|;
name|unsigned
name|long
name|ecc_field_mul
decl_stmt|;
name|unsigned
name|long
name|ecc_field_inv
decl_stmt|;
name|unsigned
name|long
name|ecc_field_div
decl_stmt|;
name|unsigned
name|long
name|ecc_field_red
decl_stmt|;
block|}
name|ecc_stats_t
operator|,
typedef|*
name|ecc_stats_pt
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|opt_stats
block|{
name|unsigned
name|long
name|combined
decl_stmt|;
name|unsigned
name|long
name|unaligned_auth_dest
decl_stmt|;
name|unsigned
name|long
name|sym_failed
decl_stmt|;
name|unsigned
name|long
name|modexp_failed
decl_stmt|;
name|unsigned
name|long
name|ecc_failed
decl_stmt|;
block|}
name|opt_stats_t
operator|,
typedef|*
name|opt_stats_pt
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|rmisec_stats
block|{
name|uint32_t
name|sent
decl_stmt|;
name|uint32_t
name|received
decl_stmt|;
name|uint32_t
name|stats_mask
decl_stmt|;
name|uint32_t
name|control_mask
decl_stmt|;
name|rwlock_t
name|rmisec_control_lock
decl_stmt|;
name|rwlock_t
name|rmisec_stats_lock
decl_stmt|;
name|char
name|clear_start
index|[
literal|0
index|]
decl_stmt|;
name|uint64_t
name|wait_time
decl_stmt|;
name|uint32_t
name|max_wait_time
decl_stmt|;
name|uint32_t
name|maxsnd_wait_time
decl_stmt|;
name|uint32_t
name|wait_count
decl_stmt|;
name|hmac_stats_t
name|hmac
decl_stmt|;
name|cipher_stats_t
name|cipher
decl_stmt|;
name|modexp_stats_t
name|modexp
decl_stmt|;
name|ecc_stats_t
name|ecc
decl_stmt|;
name|opt_stats_t
name|opt
decl_stmt|;
block|}
name|rmisec_stats_t
operator|,
typedef|*
name|rmisec_stats_pt
typedef|;
end_typedef

begin_comment
comment|/* stats routines */
end_comment

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_sent
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|sent
operator|++
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_received
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|received
operator|++
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_des
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|enc
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_DES
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|enc
condition|)
block|{
name|stats
operator|->
name|cipher
operator|.
name|des_encrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|des_encrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|->
name|cipher
operator|.
name|des_decrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|des_decrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_3des
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|enc
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_3DES
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|enc
condition|)
block|{
name|stats
operator|->
name|cipher
operator|.
name|des3_encrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|des3_encrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|->
name|cipher
operator|.
name|des3_decrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|des3_decrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_aes
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|enc
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_AES
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|enc
condition|)
block|{
name|stats
operator|->
name|cipher
operator|.
name|aes_encrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|aes_encrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|->
name|cipher
operator|.
name|aes_decrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|aes_decrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_arc4
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|enc
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_ARC4
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|enc
condition|)
block|{
name|stats
operator|->
name|cipher
operator|.
name|arc4_encrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|arc4_encrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|->
name|cipher
operator|.
name|arc4_decrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|arc4_decrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_kasumi_f8
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|enc
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_KASUMI_F8
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|enc
condition|)
block|{
name|stats
operator|->
name|cipher
operator|.
name|kasumi_f8_encrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|kasumi_f8_encrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|->
name|cipher
operator|.
name|kasumi_f8_decrypts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|kasumi_f8_decrypt_bytes
operator|+=
name|nbytes
expr_stmt|;
block|}
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_modexp
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|blksize
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_MODEXP
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|blksize
operator|==
literal|512
condition|)
block|{
name|stats
operator|->
name|modexp
operator|.
name|modexp_512s
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|blksize
operator|==
literal|1024
condition|)
block|{
name|stats
operator|->
name|modexp
operator|.
name|modexp_1024s
operator|++
expr_stmt|;
block|}
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_ecc
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|PHX_ECC_OP
name|op
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_ECC
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|PHX_ECC_NOP
case|:
break|break;
case|case
name|PHX_ECC_MUL
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_mul
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_BIN_MUL
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_bin_mul
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_ADD
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_add
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_DBL
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_dbl
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_VFY
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_vfy
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD_BIN_INV
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_field_bin_inv
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD_BIN_MUL
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_field_bin_mul
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD_BIN_ADD
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_field_bin_add
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD_ADD
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_field_add
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD_SUB
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_field_sub
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD_MUL
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_field_mul
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD_INV
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_field_inv
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD_DIV
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_field_div
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD_RED
case|:
name|stats
operator|->
name|ecc
operator|.
name|ecc_field_red
operator|++
expr_stmt|;
break|break;
case|case
name|PHX_ECC_FIELD
case|:
case|case
name|PHX_ECC_BIN
case|:
break|break;
block|}
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_cipher_revert
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_CPHR_REVERTS
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|reverts
operator|++
expr_stmt|;
name|stats
operator|->
name|cipher
operator|.
name|reverts_bytes
operator|+=
name|nbytes
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_hmac_revert
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_HMAC_REVERTS
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|reverts
operator|++
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|reverts_bytes
operator|+=
name|nbytes
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_md5
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_MD5
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|md5_count
operator|++
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|md5_bytes
operator|+=
name|nbytes
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_sha1
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_SHA1
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|sha1_count
operator|++
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|sha1_bytes
operator|+=
name|nbytes
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_sha256
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_SHA256
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|sha256_count
operator|++
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|sha256_bytes
operator|+=
name|nbytes
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_sha384
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_SHA384
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|sha384_count
operator|++
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|sha384_bytes
operator|+=
name|nbytes
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_sha512
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_SHA512
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|sha512_count
operator|++
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|sha512_bytes
operator|+=
name|nbytes
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_gcm
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_GCM
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|gcm_count
operator|++
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|gcm_bytes
operator|+=
name|nbytes
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_kasumi_f9
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_KASUMI_F9
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|kasumi_f9_count
operator|++
expr_stmt|;
name|stats
operator|->
name|hmac
operator|.
name|kasumi_f9_bytes
operator|+=
name|nbytes
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_unaligned_auth_dest
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_UNALIGNED_AUTH_DEST
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|opt
operator|.
name|unaligned_auth_dest
operator|++
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_combined
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_COMBINED
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|opt
operator|.
name|combined
operator|++
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_sym_failed
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_COMBINED
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|opt
operator|.
name|sym_failed
operator|++
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_modexp_failed
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_COMBINED
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|opt
operator|.
name|modexp_failed
operator|++
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
specifier|inline
name|phxdrv_record_ecc_failed
parameter_list|(
name|rmisec_stats_pt
name|stats
parameter_list|,
name|int
name|nbytes
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|->
name|stats_mask
operator|&
name|PHXDRV_PROFILE_COMBINED
condition|)
block|{
name|write_lock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
name|stats
operator|->
name|opt
operator|.
name|ecc_failed
operator|++
expr_stmt|;
name|write_unlock
argument_list|(
operator|&
name|stats
operator|->
name|rmisec_stats_lock
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

