begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-3-Clause  *  * Copyright (c) 2003-2009 RMI Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of RMI Corporation, nor the names of its contributors,  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  * RMI_BSD */
end_comment

begin_comment
comment|/* MDIO Low level Access routines */
end_comment

begin_comment
comment|/* All Phy's accessed from GMAC0 base */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_XGMAC_MDIO_H_
end_ifndef

begin_define
define|#
directive|define
name|_XGMAC_MDIO_H_
end_define

begin_function_decl
specifier|static
specifier|inline
name|int
name|xmdio_read
parameter_list|(
specifier|volatile
name|unsigned
name|int
modifier|*
name|_mmio
parameter_list|,
name|uint32_t
name|phy_addr
parameter_list|,
name|uint32_t
name|address
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
specifier|inline
name|void
name|xmdio_write
parameter_list|(
specifier|volatile
name|unsigned
name|int
modifier|*
name|_mmio
parameter_list|,
name|uint32_t
name|phy_addr
parameter_list|,
name|uint32_t
name|address
parameter_list|,
name|uint32_t
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
specifier|inline
name|void
name|xmdio_address
parameter_list|(
specifier|volatile
name|unsigned
name|int
modifier|*
name|_mmio
parameter_list|,
name|uint32_t
name|phy_addr
parameter_list|,
name|uint32_t
name|dev_ad
parameter_list|,
name|uint32_t
name|address
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|xmdio_address
parameter_list|(
specifier|volatile
name|unsigned
name|int
modifier|*
name|_mmio
parameter_list|,
name|uint32_t
name|phy_addr
parameter_list|,
name|uint32_t
name|dev_ad
parameter_list|,
name|uint32_t
name|address
parameter_list|)
block|{
name|uint32_t
name|st_field
init|=
literal|0x0
decl_stmt|;
name|uint32_t
name|op_type
init|=
literal|0x0
decl_stmt|;
comment|/* address operation */
name|uint32_t
name|ta_field
init|=
literal|0x2
decl_stmt|;
comment|/* ta field */
name|_mmio
index|[
literal|0x11
index|]
operator|=
operator|(
operator|(
name|st_field
operator|&
literal|0x3
operator|)
operator|<<
literal|30
operator|)
operator||
operator|(
operator|(
name|op_type
operator|&
literal|0x3
operator|)
operator|<<
literal|28
operator|)
operator||
operator|(
operator|(
name|phy_addr
operator|&
literal|0x1F
operator|)
operator|<<
literal|23
operator|)
operator||
operator|(
operator|(
name|dev_ad
operator|&
literal|0x1F
operator|)
operator|<<
literal|18
operator|)
operator||
operator|(
operator|(
name|ta_field
operator|&
literal|0x3
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|address
operator|&
literal|0xffff
operator|)
operator|<<
literal|0
operator|)
expr_stmt|;
name|_mmio
index|[
literal|0x10
index|]
operator|=
operator|(
literal|0x0
operator|<<
literal|3
operator|)
operator||
literal|0x5
expr_stmt|;
name|_mmio
index|[
literal|0x10
index|]
operator|=
operator|(
literal|0x1
operator|<<
literal|3
operator|)
operator||
literal|0x5
expr_stmt|;
name|_mmio
index|[
literal|0x10
index|]
operator|=
operator|(
literal|0x0
operator|<<
literal|3
operator|)
operator||
literal|0x5
expr_stmt|;
comment|/* wait for dev_ad cycle to complete */
while|while
condition|(
name|_mmio
index|[
literal|0x14
index|]
operator|&
literal|0x1
condition|)
block|{ 	}
empty_stmt|;
block|}
end_function

begin_comment
comment|/* function prototypes */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|xmdio_read
parameter_list|(
specifier|volatile
name|unsigned
name|int
modifier|*
name|_mmio
parameter_list|,
name|uint32_t
name|phy_addr
parameter_list|,
name|uint32_t
name|address
parameter_list|)
block|{
name|uint32_t
name|st_field
init|=
literal|0x0
decl_stmt|;
name|uint32_t
name|op_type
init|=
literal|0x3
decl_stmt|;
comment|/* read operation */
name|uint32_t
name|ta_field
init|=
literal|0x2
decl_stmt|;
comment|/* ta field */
name|uint32_t
name|data
init|=
literal|0
decl_stmt|;
name|xmdio_address
argument_list|(
name|_mmio
argument_list|,
name|phy_addr
argument_list|,
literal|5
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|_mmio
index|[
literal|0x11
index|]
operator|=
operator|(
operator|(
name|st_field
operator|&
literal|0x3
operator|)
operator|<<
literal|30
operator|)
operator||
operator|(
operator|(
name|op_type
operator|&
literal|0x3
operator|)
operator|<<
literal|28
operator|)
operator||
operator|(
operator|(
name|phy_addr
operator|&
literal|0x1F
operator|)
operator|<<
literal|23
operator|)
operator||
operator|(
operator|(
literal|5
operator|&
literal|0x1F
operator|)
operator|<<
literal|18
operator|)
operator||
operator|(
operator|(
name|ta_field
operator|&
literal|0x3
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|data
operator|&
literal|0xffff
operator|)
operator|<<
literal|0
operator|)
expr_stmt|;
name|_mmio
index|[
literal|0x10
index|]
operator|=
operator|(
literal|0x0
operator|<<
literal|3
operator|)
operator||
literal|0x5
expr_stmt|;
name|_mmio
index|[
literal|0x10
index|]
operator|=
operator|(
literal|0x1
operator|<<
literal|3
operator|)
operator||
literal|0x5
expr_stmt|;
name|_mmio
index|[
literal|0x10
index|]
operator|=
operator|(
literal|0x0
operator|<<
literal|3
operator|)
operator||
literal|0x5
expr_stmt|;
comment|/* wait for write cycle to complete */
while|while
condition|(
name|_mmio
index|[
literal|0x14
index|]
operator|&
literal|0x1
condition|)
block|{ 	}
empty_stmt|;
name|data
operator|=
name|_mmio
index|[
literal|0x11
index|]
operator|&
literal|0xffff
expr_stmt|;
return|return
operator|(
name|data
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|xmdio_write
parameter_list|(
specifier|volatile
name|unsigned
name|int
modifier|*
name|_mmio
parameter_list|,
name|uint32_t
name|phy_addr
parameter_list|,
name|uint32_t
name|address
parameter_list|,
name|uint32_t
name|data
parameter_list|)
block|{
name|uint32_t
name|st_field
init|=
literal|0x0
decl_stmt|;
name|uint32_t
name|op_type
init|=
literal|0x1
decl_stmt|;
comment|/* write operation */
name|uint32_t
name|ta_field
init|=
literal|0x2
decl_stmt|;
comment|/* ta field */
name|xmdio_address
argument_list|(
name|_mmio
argument_list|,
name|phy_addr
argument_list|,
literal|5
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|_mmio
index|[
literal|0x11
index|]
operator|=
operator|(
operator|(
name|st_field
operator|&
literal|0x3
operator|)
operator|<<
literal|30
operator|)
operator||
operator|(
operator|(
name|op_type
operator|&
literal|0x3
operator|)
operator|<<
literal|28
operator|)
operator||
operator|(
operator|(
name|phy_addr
operator|&
literal|0x1F
operator|)
operator|<<
literal|23
operator|)
operator||
operator|(
operator|(
literal|5
operator|&
literal|0x1F
operator|)
operator|<<
literal|18
operator|)
operator||
operator|(
operator|(
name|ta_field
operator|&
literal|0x3
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|data
operator|&
literal|0xffff
operator|)
operator|<<
literal|0
operator|)
expr_stmt|;
name|_mmio
index|[
literal|0x10
index|]
operator|=
operator|(
literal|0x0
operator|<<
literal|3
operator|)
operator||
literal|0x5
expr_stmt|;
name|_mmio
index|[
literal|0x10
index|]
operator|=
operator|(
literal|0x1
operator|<<
literal|3
operator|)
operator||
literal|0x5
expr_stmt|;
name|_mmio
index|[
literal|0x10
index|]
operator|=
operator|(
literal|0x0
operator|<<
literal|3
operator|)
operator||
literal|0x5
expr_stmt|;
comment|/* wait for write cycle to complete */
while|while
condition|(
name|_mmio
index|[
literal|0x14
index|]
operator|&
literal|0x1
condition|)
block|{ 	}
empty_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

