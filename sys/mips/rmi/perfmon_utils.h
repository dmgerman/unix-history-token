begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2009 RMI Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of RMI Corporation, nor the names of its contributors,  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * RMI_BSD */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|UTILS_H
end_ifndef

begin_define
define|#
directive|define
name|UTILS_H
end_define

begin_include
include|#
directive|include
file|<machine/stdarg.h>
end_include

begin_comment
comment|/* variable args */
end_comment

begin_comment
comment|/* TODO optimize of mips, even i& (i-1) is better */
end_comment

begin_function
specifier|static
name|int
name|__inline__
name|get_set_bit_count64
parameter_list|(
name|uint64_t
name|value
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|value
argument_list|)
operator|*
literal|8
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|value
operator|&
operator|(
literal|1ULL
operator|<<
name|i
operator|)
condition|)
name|result
operator|++
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__inline__
name|find_first_set_bit64
parameter_list|(
name|uint64_t
name|value
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|value
argument_list|)
operator|*
literal|8
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|value
operator|&
operator|(
literal|1ULL
operator|<<
name|i
operator|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__inline__
name|find_next_set_bit64
parameter_list|(
name|uint64_t
name|value
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|pos
operator|+
literal|1
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|value
argument_list|)
operator|*
literal|8
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|value
operator|&
operator|(
literal|1ULL
operator|<<
name|i
operator|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/** ---  **/
end_comment

begin_function
specifier|static
name|int
name|__inline__
name|get_set_bit_count
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|value
argument_list|)
operator|*
literal|8
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|value
operator|&
operator|(
literal|1U
operator|<<
name|i
operator|)
condition|)
name|result
operator|++
expr_stmt|;
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__inline__
name|find_first_set_bit
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|value
argument_list|)
operator|*
literal|8
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|value
operator|&
operator|(
literal|1U
operator|<<
name|i
operator|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|__inline__
name|find_next_set_bit
parameter_list|(
name|uint32_t
name|value
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|pos
operator|+
literal|1
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|value
argument_list|)
operator|*
literal|8
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|value
operator|&
operator|(
literal|1U
operator|<<
name|i
operator|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG
end_ifdef

begin_function_decl
name|void
name|abort
parameter_list|()
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|DPUTC
parameter_list|(
name|c
parameter_list|)
value|(putchar(c)&& fflush(stdout))
end_define

begin_define
define|#
directive|define
name|DPRINT
parameter_list|(
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|printf(fmt "\n", __VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|ASSERT
parameter_list|(
name|x
parameter_list|)
value|((x) || ({ printf("%s failed at (%s:%d)", #x, __FILE__, __LINE__) ; abort(); 0; }) )
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DPUTC
parameter_list|(
name|c
parameter_list|)
end_define

begin_define
define|#
directive|define
name|DPRINT
parameter_list|(
name|fmt
parameter_list|,
modifier|...
parameter_list|)
end_define

begin_define
define|#
directive|define
name|ASSERT
parameter_list|(
name|x
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|xlr_send_sample
parameter_list|(
name|uint32_t
name|tag
parameter_list|,
name|uint32_t
name|value
parameter_list|,
name|uint32_t
name|ts
parameter_list|,
name|uint32_t
name|td
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

