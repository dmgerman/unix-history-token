begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2009 RMI Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of RMI Corporation, nor the names of its contributors,  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * RMI_BSD */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|PERFMON_H
end_ifndef

begin_define
define|#
directive|define
name|PERFMON_H
end_define

begin_include
include|#
directive|include
file|<mips/xlr/perfmon_xlrconfig.h>
end_include

begin_comment
comment|/*   * category events reported by the perfmon library  */
end_comment

begin_enum
enum|enum
name|event_category_t
block|{
name|PERF_CP0_COUNTER
init|=
literal|1
block|,
name|PERF_CP2_CREDITS
block|,
name|PERF_L2_COUNTER
block|,
name|PERF_SBC_COUNTER
block|,
name|PERF_SBC_CREDITS
block|,
name|PERF_GMAC0_COUNTER
block|,
name|PERF_GMAC1_COUNTER
block|,
name|PERF_GMAC2_COUNTER
block|,
name|PERF_GMAC_STAT_COM
block|,
name|PERF_GMAC_STAT_TX
block|,
name|PERF_GMAC_STAT_RX
block|,
name|PERF_DRAM_COUNTER
block|,
name|PERF_PARAMETER_CONF
init|=
literal|127
block|}
enum|;
end_enum

begin_enum
enum|enum
name|perf_param_t
block|{
name|PERF_CPU_SAMPLING_INTERVAL
block|,
name|PERF_SYS_SAMPLING_INTERVAL
block|,
name|PERF_CC_SAMPLE_RATE
block|,
name|PERF_CP0_FLAGS
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|CPO_EVENTS_TEMPLATE
value|0x06
end_define

begin_comment
comment|/* enable kernel and user events */
end_comment

begin_define
define|#
directive|define
name|PERFMON_ACTIVE_MAGIC
value|0xc001
end_define

begin_define
define|#
directive|define
name|PERFMON_ENABLED_MAGIC
value|0xb007
end_define

begin_define
define|#
directive|define
name|PERFMON_INITIAL_GENERATION
value|0x0101
end_define

begin_define
define|#
directive|define
name|PERFMON_SERVER_PORT
value|7007
end_define

begin_enum
enum|enum
name|system_bridge_credits_t
block|{
name|PCIX_CREDITS
block|,
name|HT_CREDITS
block|,
name|GIO_CREDITS
block|,
name|OTHER_CREDITS
block|}
enum|;
end_enum

begin_struct
struct|struct
name|perf_config_data
block|{
name|uint16_t
name|magic
decl_stmt|;
comment|/* monitor start when this is initialized */
name|uint16_t
name|generation
decl_stmt|;
comment|/* incremented when the config changes */
name|uint16_t
name|flags
decl_stmt|;
name|uint16_t
name|cc_sample_rate
decl_stmt|;
comment|/* rate at which credit counters are sampled                                       relative to sampling_rate */
name|uint32_t
name|sampling_rate
decl_stmt|;
comment|/* rate at which events are sampled */
name|uint32_t
name|cc_register_mask
decl_stmt|;
comment|/* credit counters registers to be sampled */
name|uint64_t
name|events
index|[
name|NTHREADS
index|]
decl_stmt|;
comment|/* events bitmap for each thread */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|perf_sample
block|{
name|uint32_t
name|counter
decl_stmt|;
name|uint32_t
name|timestamp
decl_stmt|;
name|uint32_t
name|sample_tag
decl_stmt|;
name|uint32_t
name|duration
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sample_q
block|{
name|int32_t
name|head
decl_stmt|,
name|tail
decl_stmt|;
name|struct
name|perf_sample
name|samples
index|[
name|PERF_SAMPLE_BUFSZ
index|]
decl_stmt|;
name|uint32_t
name|overflows
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|perf_area
block|{
name|struct
name|perf_config_data
name|perf_config
decl_stmt|;
name|struct
name|sample_q
name|sample_fifo
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * We have a shared location to keep a global tick counter for all the   * CPUS  - TODO is this optimal? effect on cache?  */
end_comment

begin_decl_stmt
specifier|extern
name|uint32_t
modifier|*
name|xlr_perfmon_timer_loc
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|PERFMON_TIMESTAMP_LOC
value|(xlr_perfmon_timer_loc)
end_define

begin_function
specifier|static
name|__inline__
name|uint32_t
name|perfmon_timestamp_get
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|*
name|PERFMON_TIMESTAMP_LOC
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|perfmon_timestamp_set
parameter_list|(
name|uint32_t
name|val
parameter_list|)
block|{
operator|*
name|PERFMON_TIMESTAMP_LOC
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|perfmon_timestamp_incr
parameter_list|(
name|int
name|val
parameter_list|)
block|{
operator|(
operator|*
name|PERFMON_TIMESTAMP_LOC
operator|)
operator|+=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|send_sample_gts
parameter_list|(
name|uint32_t
name|tag
parameter_list|,
name|uint32_t
name|value
parameter_list|,
name|uint32_t
name|td
parameter_list|)
block|{
name|xlr_send_sample
argument_list|(
name|tag
argument_list|,
name|value
argument_list|,
name|perfmon_timestamp_get
argument_list|()
argument_list|,
name|td
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Simple FIFO, one producer - one consumer - circlar queue - no locking  */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|init_fifo
parameter_list|(
name|struct
name|sample_q
modifier|*
name|q
parameter_list|)
block|{
name|q
operator|->
name|head
operator|=
name|q
operator|->
name|tail
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|put_sample
parameter_list|(
name|struct
name|sample_q
modifier|*
name|q
parameter_list|,
name|uint32_t
name|sample_tag
parameter_list|,
name|uint32_t
name|counter
parameter_list|,
name|uint32_t
name|duration
parameter_list|)
block|{
name|uint32_t
name|timestamp
init|=
name|perfmon_timestamp_get
argument_list|()
decl_stmt|;
name|int
name|new_tail
init|=
operator|(
name|q
operator|->
name|tail
operator|+
literal|1
operator|)
operator|%
name|PERF_SAMPLE_BUFSZ
decl_stmt|;
if|if
condition|(
name|q
operator|->
name|head
operator|==
name|new_tail
condition|)
block|{
name|q
operator|->
name|overflows
operator|++
expr_stmt|;
return|return;
block|}
name|q
operator|->
name|samples
index|[
name|new_tail
index|]
operator|.
name|sample_tag
operator|=
name|sample_tag
expr_stmt|;
name|q
operator|->
name|samples
index|[
name|new_tail
index|]
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
name|q
operator|->
name|samples
index|[
name|new_tail
index|]
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|q
operator|->
name|samples
index|[
name|new_tail
index|]
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
name|q
operator|->
name|tail
operator|=
name|new_tail
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|int
name|get_sample
parameter_list|(
name|struct
name|sample_q
modifier|*
name|q
parameter_list|,
name|uint32_t
modifier|*
name|sample_tag
parameter_list|,
name|uint32_t
modifier|*
name|counter
parameter_list|,
name|uint32_t
modifier|*
name|timestamp
parameter_list|,
name|uint32_t
modifier|*
name|duration
parameter_list|)
block|{
name|int
name|head
init|=
name|q
operator|->
name|head
decl_stmt|;
if|if
condition|(
name|head
operator|==
name|q
operator|->
name|tail
condition|)
return|return
literal|0
return|;
operator|*
name|sample_tag
operator|=
name|q
operator|->
name|samples
index|[
name|head
index|]
operator|.
name|sample_tag
expr_stmt|;
operator|*
name|counter
operator|=
name|q
operator|->
name|samples
index|[
name|head
index|]
operator|.
name|counter
expr_stmt|;
operator|*
name|timestamp
operator|=
name|q
operator|->
name|samples
index|[
name|head
index|]
operator|.
name|timestamp
expr_stmt|;
operator|*
name|duration
operator|=
name|q
operator|->
name|samples
index|[
name|head
index|]
operator|.
name|duration
expr_stmt|;
name|q
operator|->
name|head
operator|=
operator|(
name|head
operator|+
literal|1
operator|)
operator|%
name|PERF_SAMPLE_BUFSZ
expr_stmt|;
return|return
literal|1
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|clear_queue
parameter_list|(
name|struct
name|sample_q
modifier|*
name|q
parameter_list|)
block|{
name|q
operator|->
name|head
operator|=
name|q
operator|->
name|tail
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|xlr_perfmon_init_cpu
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xlr_perfmon_sampler
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|log_active_core
parameter_list|(
name|int
name|core
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|get_start_generation
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xlr_perfmon_clockhandler
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|int
name|xlr_perfmon_started
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* PERFMON_H */
end_comment

end_unit

