begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2001 Cubical Solutions Ltd. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * capi/iavc/iavc.h	The AVM ISDN controllers' common declarations.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CAPI_IAVC_H_
end_ifndef

begin_define
define|#
directive|define
name|_CAPI_IAVC_H_
end_define

begin_comment
comment|/* max 4 units supported per machine */
end_comment

begin_define
define|#
directive|define
name|IAVC_MAXUNIT
value|4
end_define

begin_comment
comment|/* //  iavc_softc_t //      The software context of one AVM T1 controller. */
end_comment

begin_define
define|#
directive|define
name|IAVC_IO_BASES
value|1
end_define

begin_typedef
typedef|typedef
struct|struct
name|i4b_info
block|{
name|struct
name|resource
modifier|*
name|io_base
index|[
name|IAVC_IO_BASES
index|]
decl_stmt|;
name|int
name|io_rid
index|[
name|IAVC_IO_BASES
index|]
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq
decl_stmt|;
name|int
name|irq_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|mem
decl_stmt|;
name|int
name|mem_rid
decl_stmt|;
block|}
name|i4b_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|iavc_softc
block|{
name|capi_softc_t
name|sc_capi
decl_stmt|;
name|int
name|sc_unit
decl_stmt|;
name|int
name|sc_cardtyp
decl_stmt|;
name|u_int32_t
name|sc_membase
decl_stmt|;
name|bus_space_handle_t
name|sc_mem_bh
decl_stmt|;
name|bus_space_tag_t
name|sc_mem_bt
decl_stmt|;
name|u_int32_t
name|sc_iobase
decl_stmt|;
name|bus_space_handle_t
name|sc_io_bh
decl_stmt|;
name|bus_space_tag_t
name|sc_io_bt
decl_stmt|;
name|int
name|sc_state
decl_stmt|;
define|#
directive|define
name|IAVC_DOWN
value|0
define|#
directive|define
name|IAVC_POLL
value|1
define|#
directive|define
name|IAVC_INIT
value|2
define|#
directive|define
name|IAVC_UP
value|3
name|int
name|sc_blocked
decl_stmt|;
name|int
name|sc_dma
decl_stmt|;
name|int
name|sc_t1
decl_stmt|;
name|int
name|sc_intr
decl_stmt|;
name|u_int32_t
name|sc_csr
decl_stmt|;
name|char
name|sc_sendbuf
index|[
literal|128
operator|+
literal|2048
index|]
decl_stmt|;
name|char
name|sc_recvbuf
index|[
literal|128
operator|+
literal|2048
index|]
decl_stmt|;
name|int
name|sc_recvlen
decl_stmt|;
name|struct
name|ifqueue
name|sc_txq
decl_stmt|;
name|i4b_info_t
name|sc_resources
decl_stmt|;
block|}
name|iavc_softc_t
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|iavc_softc_t
name|iavc_sc
index|[]
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|iavc_find_sc
parameter_list|(
name|unit
parameter_list|)
value|(&iavc_sc[(unit)])
end_define

begin_comment
comment|/* //  {b1,b1dma,t1}_{detect,reset} //      Routines to detect and manage the specific type of card. */
end_comment

begin_function_decl
specifier|extern
name|int
name|b1_detect
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|b1_disable_irq
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|b1_reset
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|b1dma_detect
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|b1dma_reset
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|t1_detect
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|t1_disable_irq
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|t1_reset
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* //  AMCC_{READ,WRITE} //      Routines to access the memory mapped registers of the //      S5933 DMA controller. */
end_comment

begin_function
specifier|static
name|__inline
name|u_int32_t
name|AMCC_READ
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|int
name|off
parameter_list|)
block|{
return|return
name|bus_space_read_4
argument_list|(
name|sc
operator|->
name|sc_mem_bt
argument_list|,
name|sc
operator|->
name|sc_mem_bh
argument_list|,
name|off
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|AMCC_WRITE
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|int
name|off
parameter_list|,
name|u_int32_t
name|value
parameter_list|)
block|{
name|bus_space_write_4
argument_list|(
name|sc
operator|->
name|sc_mem_bt
argument_list|,
name|sc
operator|->
name|sc_mem_bh
argument_list|,
name|off
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* //  amcc_{put,get}_{byte,word} //      Routines to access the DMA buffers byte- or wordwise. */
end_comment

begin_function
specifier|static
name|__inline
name|u_int8_t
modifier|*
name|amcc_put_byte
parameter_list|(
name|u_int8_t
modifier|*
name|buf
parameter_list|,
name|u_int8_t
name|value
parameter_list|)
block|{
operator|*
name|buf
operator|++
operator|=
name|value
expr_stmt|;
return|return
name|buf
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int8_t
modifier|*
name|amcc_get_byte
parameter_list|(
name|u_int8_t
modifier|*
name|buf
parameter_list|,
name|u_int8_t
modifier|*
name|value
parameter_list|)
block|{
operator|*
name|value
operator|=
operator|*
name|buf
operator|++
expr_stmt|;
return|return
name|buf
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int8_t
modifier|*
name|amcc_put_word
parameter_list|(
name|u_int8_t
modifier|*
name|buf
parameter_list|,
name|u_int32_t
name|value
parameter_list|)
block|{
operator|*
name|buf
operator|++
operator|=
operator|(
name|value
operator|&
literal|0xff
operator|)
expr_stmt|;
operator|*
name|buf
operator|++
operator|=
operator|(
name|value
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
operator|*
name|buf
operator|++
operator|=
operator|(
name|value
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
operator|*
name|buf
operator|++
operator|=
operator|(
name|value
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
return|return
name|buf
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int8_t
modifier|*
name|amcc_get_word
parameter_list|(
name|u_int8_t
modifier|*
name|buf
parameter_list|,
name|u_int32_t
modifier|*
name|value
parameter_list|)
block|{
operator|*
name|value
operator|=
operator|*
name|buf
operator|++
expr_stmt|;
operator|*
name|value
operator||=
operator|(
operator|*
name|buf
operator|++
operator|<<
literal|8
operator|)
expr_stmt|;
operator|*
name|value
operator||=
operator|(
operator|*
name|buf
operator|++
operator|<<
literal|16
operator|)
expr_stmt|;
operator|*
name|value
operator||=
operator|(
operator|*
name|buf
operator|++
operator|<<
literal|24
operator|)
expr_stmt|;
return|return
name|buf
return|;
block|}
end_function

begin_comment
comment|/* //  Controller LLI message numbers. */
end_comment

begin_define
define|#
directive|define
name|SEND_POLL
value|0x72
end_define

begin_define
define|#
directive|define
name|SEND_INIT
value|0x11
end_define

begin_define
define|#
directive|define
name|SEND_REGISTER
value|0x12
end_define

begin_define
define|#
directive|define
name|SEND_DATA_B3_REQ
value|0x13
end_define

begin_define
define|#
directive|define
name|SEND_RELEASE
value|0x14
end_define

begin_define
define|#
directive|define
name|SEND_MESSAGE
value|0x15
end_define

begin_define
define|#
directive|define
name|SEND_CONFIG
value|0x71
end_define

begin_define
define|#
directive|define
name|SEND_POLLACK
value|0x73
end_define

begin_define
define|#
directive|define
name|RECEIVE_POLL
value|0x32
end_define

begin_define
define|#
directive|define
name|RECEIVE_INIT
value|0x27
end_define

begin_define
define|#
directive|define
name|RECEIVE_MESSAGE
value|0x21
end_define

begin_define
define|#
directive|define
name|RECEIVE_DATA_B3_IND
value|0x22
end_define

begin_define
define|#
directive|define
name|RECEIVE_START
value|0x23
end_define

begin_define
define|#
directive|define
name|RECEIVE_STOP
value|0x24
end_define

begin_define
define|#
directive|define
name|RECEIVE_NEW_NCCI
value|0x25
end_define

begin_define
define|#
directive|define
name|RECEIVE_FREE_NCCI
value|0x26
end_define

begin_define
define|#
directive|define
name|RECEIVE_RELEASE
value|0x26
end_define

begin_define
define|#
directive|define
name|RECEIVE_TASK_READY
value|0x31
end_define

begin_define
define|#
directive|define
name|RECEIVE_DEBUGMSG
value|0x71
end_define

begin_define
define|#
directive|define
name|RECEIVE_POLLDWORD
value|0x75
end_define

begin_comment
comment|/* Operation constants */
end_comment

begin_define
define|#
directive|define
name|WRITE_REGISTER
value|0x00
end_define

begin_define
define|#
directive|define
name|READ_REGISTER
value|0x01
end_define

begin_comment
comment|/* Port offsets in I/O space */
end_comment

begin_define
define|#
directive|define
name|B1_READ
value|0x00
end_define

begin_define
define|#
directive|define
name|B1_WRITE
value|0x01
end_define

begin_define
define|#
directive|define
name|B1_INSTAT
value|0x02
end_define

begin_define
define|#
directive|define
name|B1_OUTSTAT
value|0x03
end_define

begin_define
define|#
directive|define
name|B1_ANALYSE
value|0x04
end_define

begin_define
define|#
directive|define
name|B1_REVISION
value|0x05
end_define

begin_define
define|#
directive|define
name|B1_RESET
value|0x10
end_define

begin_define
define|#
directive|define
name|T1_FASTLINK
value|0x00
end_define

begin_define
define|#
directive|define
name|T1_SLOWLINK
value|0x08
end_define

begin_define
define|#
directive|define
name|T1_READ
value|B1_READ
end_define

begin_define
define|#
directive|define
name|T1_WRITE
value|B1_WRITE
end_define

begin_define
define|#
directive|define
name|T1_INSTAT
value|B1_INSTAT
end_define

begin_define
define|#
directive|define
name|T1_OUTSTAT
value|B1_OUTSTAT
end_define

begin_define
define|#
directive|define
name|T1_IRQENABLE
value|0x05
end_define

begin_define
define|#
directive|define
name|T1_FIFOSTAT
value|0x06
end_define

begin_define
define|#
directive|define
name|T1_RESETLINK
value|0x10
end_define

begin_define
define|#
directive|define
name|T1_ANALYSE
value|0x11
end_define

begin_define
define|#
directive|define
name|T1_IRQMASTER
value|0x12
end_define

begin_define
define|#
directive|define
name|T1_IDENT
value|0x17
end_define

begin_define
define|#
directive|define
name|T1_RESETBOARD
value|0x1f
end_define

begin_define
define|#
directive|define
name|T1F_IREADY
value|0x01
end_define

begin_define
define|#
directive|define
name|T1F_IHALF
value|0x02
end_define

begin_define
define|#
directive|define
name|T1F_IFULL
value|0x04
end_define

begin_define
define|#
directive|define
name|T1F_IEMPTY
value|0x08
end_define

begin_define
define|#
directive|define
name|T1F_IFLAGS
value|0xf0
end_define

begin_define
define|#
directive|define
name|T1F_OREADY
value|0x10
end_define

begin_define
define|#
directive|define
name|T1F_OHALF
value|0x20
end_define

begin_define
define|#
directive|define
name|T1F_OEMPTY
value|0x40
end_define

begin_define
define|#
directive|define
name|T1F_OFULL
value|0x80
end_define

begin_define
define|#
directive|define
name|T1F_OFLAGS
value|0xf0
end_define

begin_define
define|#
directive|define
name|FIFO_OUTBSIZE
value|256
end_define

begin_define
define|#
directive|define
name|FIFO_INPBSIZE
value|512
end_define

begin_define
define|#
directive|define
name|HEMA_VERSION_ID
value|0
end_define

begin_define
define|#
directive|define
name|HEMA_PAL_ID
value|0
end_define

begin_comment
comment|/* //  S5933 DMA controller register offsets in memory, and bitmasks. */
end_comment

begin_define
define|#
directive|define
name|AMCC_RXPTR
value|0x24
end_define

begin_define
define|#
directive|define
name|AMCC_RXLEN
value|0x28
end_define

begin_define
define|#
directive|define
name|AMCC_TXPTR
value|0x2c
end_define

begin_define
define|#
directive|define
name|AMCC_TXLEN
value|0x30
end_define

begin_define
define|#
directive|define
name|AMCC_INTCSR
value|0x38
end_define

begin_define
define|#
directive|define
name|EN_READ_TC_INT
value|0x00008000
end_define

begin_define
define|#
directive|define
name|EN_WRITE_TC_INT
value|0x00004000
end_define

begin_define
define|#
directive|define
name|EN_TX_TC_INT
value|EN_READ_TC_INT
end_define

begin_define
define|#
directive|define
name|EN_RX_TC_INT
value|EN_WRITE_TC_INT
end_define

begin_define
define|#
directive|define
name|AVM_FLAG
value|0x30000000
end_define

begin_define
define|#
directive|define
name|ANY_S5933_INT
value|0x00800000
end_define

begin_define
define|#
directive|define
name|READ_TC_INT
value|0x00080000
end_define

begin_define
define|#
directive|define
name|WRITE_TC_INT
value|0x00040000
end_define

begin_define
define|#
directive|define
name|TX_TC_INT
value|READ_TC_INT
end_define

begin_define
define|#
directive|define
name|RX_TC_INT
value|WRITE_TC_INT
end_define

begin_define
define|#
directive|define
name|MASTER_ABORT_INT
value|0x00100000
end_define

begin_define
define|#
directive|define
name|TARGET_ABORT_INT
value|0x00200000
end_define

begin_define
define|#
directive|define
name|BUS_MASTER_INT
value|0x00200000
end_define

begin_define
define|#
directive|define
name|ALL_INT
value|0x000c0000
end_define

begin_define
define|#
directive|define
name|AMCC_MCSR
value|0x3c
end_define

begin_define
define|#
directive|define
name|A2P_HI_PRIORITY
value|0x00000100
end_define

begin_define
define|#
directive|define
name|EN_A2P_TRANSFERS
value|0x00000400
end_define

begin_define
define|#
directive|define
name|P2A_HI_PRIORITY
value|0x00001000
end_define

begin_define
define|#
directive|define
name|EN_P2A_TRANSFERS
value|0x00004000
end_define

begin_define
define|#
directive|define
name|RESET_A2P_FLAGS
value|0x04000000
end_define

begin_define
define|#
directive|define
name|RESET_P2A_FLAGS
value|0x02000000
end_define

begin_comment
comment|/* //  (B1IO_WAIT_MAX * B1IO_WAIT_DLY) is the max wait in us for the card //  to become ready after an I/O operation. The default is 1 ms. */
end_comment

begin_define
define|#
directive|define
name|B1IO_WAIT_MAX
value|1000
end_define

begin_define
define|#
directive|define
name|B1IO_WAIT_DLY
value|1
end_define

begin_comment
comment|/* //  b1io_outp //      Diagnostic output routine, returns the written value via //      the device's analysis register. // //  b1io_rx_full //      Returns nonzero if data is readable from the card via the //      I/O ports. // //  b1io_tx_empty //      Returns nonzero if data can be written to the card via the //      I/O ports. */
end_comment

begin_function
specifier|static
name|__inline
name|u_int8_t
name|b1io_outp
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|int
name|off
parameter_list|,
name|u_int8_t
name|val
parameter_list|)
block|{
name|bus_space_write_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|off
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|DELAY
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|bus_space_read_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|B1_ANALYSE
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|b1io_rx_full
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
block|{
name|u_int8_t
name|val
init|=
name|bus_space_read_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|B1_INSTAT
argument_list|)
decl_stmt|;
return|return
operator|(
name|val
operator|&
literal|0x01
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|b1io_tx_empty
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
block|{
name|u_int8_t
name|val
init|=
name|bus_space_read_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|B1_OUTSTAT
argument_list|)
decl_stmt|;
return|return
operator|(
name|val
operator|&
literal|0x01
operator|)
return|;
block|}
end_function

begin_comment
comment|/* //  b1io_{get,put}_{byte,word} //      Routines to read and write the device I/O registers byte- or //      wordwise. // //  b1io_{get,put}_slice //      Routines to read and write sequential bytes to the device //      I/O registers. */
end_comment

begin_function
specifier|static
name|__inline
name|u_int8_t
name|b1io_get_byte
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
block|{
name|int
name|spin
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|b1io_rx_full
argument_list|(
name|sc
argument_list|)
operator|&&
name|spin
operator|<
name|B1IO_WAIT_MAX
condition|)
block|{
name|spin
operator|++
expr_stmt|;
name|DELAY
argument_list|(
name|B1IO_WAIT_DLY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b1io_rx_full
argument_list|(
name|sc
argument_list|)
condition|)
return|return
name|bus_space_read_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|B1_READ
argument_list|)
return|;
name|printf
argument_list|(
literal|"iavc%d: rx not completed\n"
argument_list|,
name|sc
operator|->
name|sc_unit
argument_list|)
expr_stmt|;
return|return
literal|0xff
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|b1io_put_byte
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|u_int8_t
name|val
parameter_list|)
block|{
name|int
name|spin
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|b1io_tx_empty
argument_list|(
name|sc
argument_list|)
operator|&&
name|spin
operator|<
name|B1IO_WAIT_MAX
condition|)
block|{
name|spin
operator|++
expr_stmt|;
name|DELAY
argument_list|(
name|B1IO_WAIT_DLY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b1io_tx_empty
argument_list|(
name|sc
argument_list|)
condition|)
block|{
name|bus_space_write_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|B1_WRITE
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|printf
argument_list|(
literal|"iavc%d: tx not emptied\n"
argument_list|,
name|sc
operator|->
name|sc_unit
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|b1io_save_put_byte
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|u_int8_t
name|val
parameter_list|)
block|{
name|int
name|spin
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|b1io_tx_empty
argument_list|(
name|sc
argument_list|)
operator|&&
name|spin
operator|<
name|B1IO_WAIT_MAX
condition|)
block|{
name|spin
operator|++
expr_stmt|;
name|DELAY
argument_list|(
name|B1IO_WAIT_DLY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|b1io_tx_empty
argument_list|(
name|sc
argument_list|)
condition|)
block|{
name|b1io_outp
argument_list|(
name|sc
argument_list|,
name|B1_WRITE
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|printf
argument_list|(
literal|"iavc%d: tx not emptied\n"
argument_list|,
name|sc
operator|->
name|sc_unit
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int32_t
name|b1io_get_word
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
block|{
name|u_int32_t
name|val
init|=
literal|0
decl_stmt|;
name|val
operator||=
name|b1io_get_byte
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|val
operator||=
operator|(
name|b1io_get_byte
argument_list|(
name|sc
argument_list|)
operator|<<
literal|8
operator|)
expr_stmt|;
name|val
operator||=
operator|(
name|b1io_get_byte
argument_list|(
name|sc
argument_list|)
operator|<<
literal|16
operator|)
expr_stmt|;
name|val
operator||=
operator|(
name|b1io_get_byte
argument_list|(
name|sc
argument_list|)
operator|<<
literal|24
operator|)
expr_stmt|;
return|return
name|val
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|b1io_put_word
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|u_int32_t
name|val
parameter_list|)
block|{
name|b1io_put_byte
argument_list|(
name|sc
argument_list|,
operator|(
name|val
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|b1io_put_byte
argument_list|(
name|sc
argument_list|,
operator|(
name|val
operator|>>
literal|8
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|b1io_put_byte
argument_list|(
name|sc
argument_list|,
operator|(
name|val
operator|>>
literal|16
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|b1io_put_byte
argument_list|(
name|sc
argument_list|,
operator|(
name|val
operator|>>
literal|24
operator|)
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|b1io_get_slice
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|u_int8_t
modifier|*
name|dp
parameter_list|)
block|{
name|int
name|len
decl_stmt|,
name|i
decl_stmt|;
name|len
operator|=
name|i
operator|=
name|b1io_get_word
argument_list|(
name|sc
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|--
condition|)
operator|*
name|dp
operator|++
operator|=
name|b1io_get_byte
argument_list|(
name|sc
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|b1io_put_slice
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|u_int8_t
modifier|*
name|dp
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|b1io_put_word
argument_list|(
name|sc
argument_list|,
name|len
argument_list|)
expr_stmt|;
while|while
condition|(
name|len
operator|--
condition|)
name|b1io_put_byte
argument_list|(
name|sc
argument_list|,
operator|*
name|dp
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* //  b1io_{read,write}_reg //      Routines to read and write the device registers via the I/O //      ports. */
end_comment

begin_function
specifier|static
name|__inline
name|u_int32_t
name|b1io_read_reg
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|int
name|reg
parameter_list|)
block|{
name|b1io_put_byte
argument_list|(
name|sc
argument_list|,
name|READ_REGISTER
argument_list|)
expr_stmt|;
name|b1io_put_word
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|)
expr_stmt|;
return|return
name|b1io_get_word
argument_list|(
name|sc
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int32_t
name|b1io_write_reg
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|int
name|reg
parameter_list|,
name|u_int32_t
name|val
parameter_list|)
block|{
name|b1io_put_byte
argument_list|(
name|sc
argument_list|,
name|WRITE_REGISTER
argument_list|)
expr_stmt|;
name|b1io_put_word
argument_list|(
name|sc
argument_list|,
name|reg
argument_list|)
expr_stmt|;
name|b1io_put_word
argument_list|(
name|sc
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
name|b1io_get_word
argument_list|(
name|sc
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* //  t1io_outp //      I/O port write operation for the T1, which does not seem //      to have the analysis port. */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|t1io_outp
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|int
name|off
parameter_list|,
name|u_int8_t
name|val
parameter_list|)
block|{
name|bus_space_write_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|off
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int8_t
name|t1io_inp
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|int
name|off
parameter_list|)
block|{
return|return
name|bus_space_read_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|off
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|t1io_isfastlink
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
block|{
return|return
operator|(
operator|(
name|bus_space_read_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|T1_IDENT
argument_list|)
operator|&
operator|~
literal|0x82
operator|)
operator|==
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int8_t
name|t1io_fifostatus
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|)
block|{
return|return
name|bus_space_read_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|T1_FIFOSTAT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|t1io_get_slice
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|u_int8_t
modifier|*
name|dp
parameter_list|)
block|{
name|int
name|len
decl_stmt|,
name|i
decl_stmt|;
name|len
operator|=
name|i
operator|=
name|b1io_get_word
argument_list|(
name|sc
argument_list|)
expr_stmt|;
if|if
condition|(
name|t1io_isfastlink
argument_list|(
name|sc
argument_list|)
condition|)
block|{
name|int
name|status
decl_stmt|;
while|while
condition|(
name|i
condition|)
block|{
name|status
operator|=
name|t1io_fifostatus
argument_list|(
name|sc
argument_list|)
operator|&
operator|(
name|T1F_IREADY
operator||
name|T1F_IHALF
operator|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|FIFO_INPBSIZE
condition|)
name|status
operator||=
name|T1F_IFULL
expr_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|T1F_IREADY
operator||
name|T1F_IHALF
operator||
name|T1F_IFULL
case|:
name|bus_space_read_multi_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|T1_READ
argument_list|,
name|dp
argument_list|,
name|FIFO_INPBSIZE
argument_list|)
expr_stmt|;
name|dp
operator|+=
name|FIFO_INPBSIZE
expr_stmt|;
name|i
operator|-=
name|FIFO_INPBSIZE
expr_stmt|;
break|break;
case|case
name|T1F_IREADY
operator||
name|T1F_IHALF
case|:
name|bus_space_read_multi_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|T1_READ
argument_list|,
name|dp
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|dp
operator|+=
name|i
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
operator|*
name|dp
operator|++
operator|=
name|b1io_get_byte
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|/* not fastlink */
if|if
condition|(
name|i
operator|--
condition|)
operator|*
name|dp
operator|++
operator|=
name|b1io_get_byte
argument_list|(
name|sc
argument_list|)
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|t1io_put_slice
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|u_int8_t
modifier|*
name|dp
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|int
name|i
init|=
name|len
decl_stmt|;
name|b1io_put_word
argument_list|(
name|sc
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|t1io_isfastlink
argument_list|(
name|sc
argument_list|)
condition|)
block|{
name|int
name|status
decl_stmt|;
while|while
condition|(
name|i
condition|)
block|{
name|status
operator|=
name|t1io_fifostatus
argument_list|(
name|sc
argument_list|)
operator|&
operator|(
name|T1F_OREADY
operator||
name|T1F_OHALF
operator|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|FIFO_OUTBSIZE
condition|)
name|status
operator||=
name|T1F_OFULL
expr_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|T1F_OREADY
operator||
name|T1F_OHALF
operator||
name|T1F_OFULL
case|:
name|bus_space_write_multi_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|T1_WRITE
argument_list|,
name|dp
argument_list|,
name|FIFO_OUTBSIZE
argument_list|)
expr_stmt|;
name|dp
operator|+=
name|FIFO_OUTBSIZE
expr_stmt|;
name|i
operator|-=
name|FIFO_OUTBSIZE
expr_stmt|;
break|break;
case|case
name|T1F_OREADY
operator||
name|T1F_OHALF
case|:
name|bus_space_write_multi_1
argument_list|(
name|sc
operator|->
name|sc_io_bt
argument_list|,
name|sc
operator|->
name|sc_io_bh
argument_list|,
name|T1_WRITE
argument_list|,
name|dp
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|dp
operator|+=
name|i
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
break|break;
default|default:
name|b1io_put_byte
argument_list|(
name|sc
argument_list|,
operator|*
name|dp
operator|++
argument_list|)
expr_stmt|;
name|i
operator|--
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
while|while
condition|(
name|i
operator|--
condition|)
name|b1io_put_byte
argument_list|(
name|sc
argument_list|,
operator|*
name|dp
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* //  An attempt to bring it all together: //  ------------------------------------ // //  iavc_{read,write}_reg //      Routines to access the device registers via the I/O port. // //  iavc_{read,write}_port //      Routines to access the device I/O ports. // //  iavc_tx_empty, iavc_rx_full //      Routines to check when the device has drained the last written //      byte, or produced a full byte to read. // //  iavc_{get,put}_byte //      Routines to read/write byte values to the device via the I/O port. // //  iavc_{get,put}_word //      Routines to read/write 32-bit words to the device via the I/O port. // //  iavc_{get,put}_slice //      Routines to read/write {length, data} pairs to the device via the //      ubiquituous I/O port. Uses the HEMA FIFO on a T1. */
end_comment

begin_define
define|#
directive|define
name|iavc_read_reg
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|)
value|b1io_read_reg(sc, reg)
end_define

begin_define
define|#
directive|define
name|iavc_write_reg
parameter_list|(
name|sc
parameter_list|,
name|reg
parameter_list|,
name|val
parameter_list|)
value|b1io_write_reg(sc, reg, val)
end_define

begin_define
define|#
directive|define
name|iavc_read_port
parameter_list|(
name|sc
parameter_list|,
name|port
parameter_list|)
define|\
value|bus_space_read_1(sc->sc_io_bt, sc->sc_io_bh, (port))
end_define

begin_define
define|#
directive|define
name|iavc_write_port
parameter_list|(
name|sc
parameter_list|,
name|port
parameter_list|,
name|val
parameter_list|)
define|\
value|bus_space_write_1(sc->sc_io_bt, sc->sc_io_bh, (port), (val))
end_define

begin_define
define|#
directive|define
name|iavc_tx_empty
parameter_list|(
name|sc
parameter_list|)
value|b1io_tx_empty(sc)
end_define

begin_define
define|#
directive|define
name|iavc_rx_full
parameter_list|(
name|sc
parameter_list|)
value|b1io_rx_full(sc)
end_define

begin_define
define|#
directive|define
name|iavc_get_byte
parameter_list|(
name|sc
parameter_list|)
value|b1io_get_byte(sc)
end_define

begin_define
define|#
directive|define
name|iavc_put_byte
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|b1io_put_byte(sc, val)
end_define

begin_define
define|#
directive|define
name|iavc_get_word
parameter_list|(
name|sc
parameter_list|)
value|b1io_get_word(sc)
end_define

begin_define
define|#
directive|define
name|iavc_put_word
parameter_list|(
name|sc
parameter_list|,
name|val
parameter_list|)
value|b1io_put_word(sc, val)
end_define

begin_function
specifier|static
name|__inline
name|u_int32_t
name|iavc_get_slice
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|u_int8_t
modifier|*
name|dp
parameter_list|)
block|{
if|if
condition|(
name|sc
operator|->
name|sc_t1
condition|)
return|return
name|t1io_get_slice
argument_list|(
name|sc
argument_list|,
name|dp
argument_list|)
return|;
else|else
return|return
name|b1io_get_slice
argument_list|(
name|sc
argument_list|,
name|dp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|iavc_put_slice
parameter_list|(
name|iavc_softc_t
modifier|*
name|sc
parameter_list|,
name|u_int8_t
modifier|*
name|dp
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|sc
operator|->
name|sc_t1
condition|)
name|t1io_put_slice
argument_list|(
name|sc
argument_list|,
name|dp
argument_list|,
name|len
argument_list|)
expr_stmt|;
else|else
name|b1io_put_slice
argument_list|(
name|sc
argument_list|,
name|dp
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* //  iavc_handle_intr //      Interrupt handler, called by the bus specific interrupt routine //      in iavc_<bustype>.c module. // //  iavc_load //      CAPI callback. Resets device and loads firmware. // //  iavc_register //      CAPI callback. Registers an application id. // //  iavc_release //      CAPI callback. Releases an application id. // //  iavc_send //      CAPI callback. Sends a CAPI message. A B3_DATA_REQ message has //      m_next point to a data mbuf. */
end_comment

begin_function_decl
specifier|extern
name|void
name|iavc_handle_intr
parameter_list|(
name|iavc_softc_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|iavc_load
parameter_list|(
name|capi_softc_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|iavc_register
parameter_list|(
name|capi_softc_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|iavc_release
parameter_list|(
name|capi_softc_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|iavc_send
parameter_list|(
name|capi_softc_t
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|b1isa_setup_irq
parameter_list|(
name|struct
name|iavc_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CAPI_IAVC_H_ */
end_comment

end_unit

