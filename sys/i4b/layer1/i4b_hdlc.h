begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2000 Hans Petter Selasky. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *---------------------------------------------------------------------------  *  *	i4b_hdlc.h - software-HDLC header file  *	--------------------------------------  *  *	$Id: i4b_hdlc.h,v 1.5 2000/08/28 07:41:19 hm Exp $  *  * $FreeBSD$  *  *	last edit-date: [Thu Oct 26 08:29:06 2000]  *  *	NOTE:  *	- October 19th: made minor changes to HDLC_ENCODE macro  *	  Please conform "ihfc/i4b_ihfc_drv.c" (ihfc_hdlc_Bwrite)  *	  for correct usage! (-hp)  *  *---------------------------------------------------------------------------*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_I4B_HDLC_H_
end_ifndef

begin_define
define|#
directive|define
name|_I4B_HDLC_H_
end_define

begin_comment
comment|/*---------------------------------------------------------------------------*  *	HDLC CRC table  *  * Usage:  *	crc = (HDLC_FCS_TAB[(u_char)(crc ^ byte of data)] ^ (u_char)(crc>> 8));  *  *	For more information see RFC 1662 (p. 10)  *---------------------------------------------------------------------------*/
end_comment

begin_decl_stmt
specifier|const
name|u_short
name|HDLC_FCS_TAB
index|[
literal|256
index|]
init|=
block|{
literal|0x0000
block|,
literal|0x1189
block|,
literal|0x2312
block|,
literal|0x329b
block|,
literal|0x4624
block|,
literal|0x57ad
block|,
literal|0x6536
block|,
literal|0x74bf
block|,
literal|0x8c48
block|,
literal|0x9dc1
block|,
literal|0xaf5a
block|,
literal|0xbed3
block|,
literal|0xca6c
block|,
literal|0xdbe5
block|,
literal|0xe97e
block|,
literal|0xf8f7
block|,
literal|0x1081
block|,
literal|0x0108
block|,
literal|0x3393
block|,
literal|0x221a
block|,
literal|0x56a5
block|,
literal|0x472c
block|,
literal|0x75b7
block|,
literal|0x643e
block|,
literal|0x9cc9
block|,
literal|0x8d40
block|,
literal|0xbfdb
block|,
literal|0xae52
block|,
literal|0xdaed
block|,
literal|0xcb64
block|,
literal|0xf9ff
block|,
literal|0xe876
block|,
literal|0x2102
block|,
literal|0x308b
block|,
literal|0x0210
block|,
literal|0x1399
block|,
literal|0x6726
block|,
literal|0x76af
block|,
literal|0x4434
block|,
literal|0x55bd
block|,
literal|0xad4a
block|,
literal|0xbcc3
block|,
literal|0x8e58
block|,
literal|0x9fd1
block|,
literal|0xeb6e
block|,
literal|0xfae7
block|,
literal|0xc87c
block|,
literal|0xd9f5
block|,
literal|0x3183
block|,
literal|0x200a
block|,
literal|0x1291
block|,
literal|0x0318
block|,
literal|0x77a7
block|,
literal|0x662e
block|,
literal|0x54b5
block|,
literal|0x453c
block|,
literal|0xbdcb
block|,
literal|0xac42
block|,
literal|0x9ed9
block|,
literal|0x8f50
block|,
literal|0xfbef
block|,
literal|0xea66
block|,
literal|0xd8fd
block|,
literal|0xc974
block|,
literal|0x4204
block|,
literal|0x538d
block|,
literal|0x6116
block|,
literal|0x709f
block|,
literal|0x0420
block|,
literal|0x15a9
block|,
literal|0x2732
block|,
literal|0x36bb
block|,
literal|0xce4c
block|,
literal|0xdfc5
block|,
literal|0xed5e
block|,
literal|0xfcd7
block|,
literal|0x8868
block|,
literal|0x99e1
block|,
literal|0xab7a
block|,
literal|0xbaf3
block|,
literal|0x5285
block|,
literal|0x430c
block|,
literal|0x7197
block|,
literal|0x601e
block|,
literal|0x14a1
block|,
literal|0x0528
block|,
literal|0x37b3
block|,
literal|0x263a
block|,
literal|0xdecd
block|,
literal|0xcf44
block|,
literal|0xfddf
block|,
literal|0xec56
block|,
literal|0x98e9
block|,
literal|0x8960
block|,
literal|0xbbfb
block|,
literal|0xaa72
block|,
literal|0x6306
block|,
literal|0x728f
block|,
literal|0x4014
block|,
literal|0x519d
block|,
literal|0x2522
block|,
literal|0x34ab
block|,
literal|0x0630
block|,
literal|0x17b9
block|,
literal|0xef4e
block|,
literal|0xfec7
block|,
literal|0xcc5c
block|,
literal|0xddd5
block|,
literal|0xa96a
block|,
literal|0xb8e3
block|,
literal|0x8a78
block|,
literal|0x9bf1
block|,
literal|0x7387
block|,
literal|0x620e
block|,
literal|0x5095
block|,
literal|0x411c
block|,
literal|0x35a3
block|,
literal|0x242a
block|,
literal|0x16b1
block|,
literal|0x0738
block|,
literal|0xffcf
block|,
literal|0xee46
block|,
literal|0xdcdd
block|,
literal|0xcd54
block|,
literal|0xb9eb
block|,
literal|0xa862
block|,
literal|0x9af9
block|,
literal|0x8b70
block|,
literal|0x8408
block|,
literal|0x9581
block|,
literal|0xa71a
block|,
literal|0xb693
block|,
literal|0xc22c
block|,
literal|0xd3a5
block|,
literal|0xe13e
block|,
literal|0xf0b7
block|,
literal|0x0840
block|,
literal|0x19c9
block|,
literal|0x2b52
block|,
literal|0x3adb
block|,
literal|0x4e64
block|,
literal|0x5fed
block|,
literal|0x6d76
block|,
literal|0x7cff
block|,
literal|0x9489
block|,
literal|0x8500
block|,
literal|0xb79b
block|,
literal|0xa612
block|,
literal|0xd2ad
block|,
literal|0xc324
block|,
literal|0xf1bf
block|,
literal|0xe036
block|,
literal|0x18c1
block|,
literal|0x0948
block|,
literal|0x3bd3
block|,
literal|0x2a5a
block|,
literal|0x5ee5
block|,
literal|0x4f6c
block|,
literal|0x7df7
block|,
literal|0x6c7e
block|,
literal|0xa50a
block|,
literal|0xb483
block|,
literal|0x8618
block|,
literal|0x9791
block|,
literal|0xe32e
block|,
literal|0xf2a7
block|,
literal|0xc03c
block|,
literal|0xd1b5
block|,
literal|0x2942
block|,
literal|0x38cb
block|,
literal|0x0a50
block|,
literal|0x1bd9
block|,
literal|0x6f66
block|,
literal|0x7eef
block|,
literal|0x4c74
block|,
literal|0x5dfd
block|,
literal|0xb58b
block|,
literal|0xa402
block|,
literal|0x9699
block|,
literal|0x8710
block|,
literal|0xf3af
block|,
literal|0xe226
block|,
literal|0xd0bd
block|,
literal|0xc134
block|,
literal|0x39c3
block|,
literal|0x284a
block|,
literal|0x1ad1
block|,
literal|0x0b58
block|,
literal|0x7fe7
block|,
literal|0x6e6e
block|,
literal|0x5cf5
block|,
literal|0x4d7c
block|,
literal|0xc60c
block|,
literal|0xd785
block|,
literal|0xe51e
block|,
literal|0xf497
block|,
literal|0x8028
block|,
literal|0x91a1
block|,
literal|0xa33a
block|,
literal|0xb2b3
block|,
literal|0x4a44
block|,
literal|0x5bcd
block|,
literal|0x6956
block|,
literal|0x78df
block|,
literal|0x0c60
block|,
literal|0x1de9
block|,
literal|0x2f72
block|,
literal|0x3efb
block|,
literal|0xd68d
block|,
literal|0xc704
block|,
literal|0xf59f
block|,
literal|0xe416
block|,
literal|0x90a9
block|,
literal|0x8120
block|,
literal|0xb3bb
block|,
literal|0xa232
block|,
literal|0x5ac5
block|,
literal|0x4b4c
block|,
literal|0x79d7
block|,
literal|0x685e
block|,
literal|0x1ce1
block|,
literal|0x0d68
block|,
literal|0x3ff3
block|,
literal|0x2e7a
block|,
literal|0xe70e
block|,
literal|0xf687
block|,
literal|0xc41c
block|,
literal|0xd595
block|,
literal|0xa12a
block|,
literal|0xb0a3
block|,
literal|0x8238
block|,
literal|0x93b1
block|,
literal|0x6b46
block|,
literal|0x7acf
block|,
literal|0x4854
block|,
literal|0x59dd
block|,
literal|0x2d62
block|,
literal|0x3ceb
block|,
literal|0x0e70
block|,
literal|0x1ff9
block|,
literal|0xf78f
block|,
literal|0xe606
block|,
literal|0xd49d
block|,
literal|0xc514
block|,
literal|0xb1ab
block|,
literal|0xa022
block|,
literal|0x92b9
block|,
literal|0x8330
block|,
literal|0x7bc7
block|,
literal|0x6a4e
block|,
literal|0x58d5
block|,
literal|0x495c
block|,
literal|0x3de3
block|,
literal|0x2c6a
block|,
literal|0x1ef1
block|,
literal|0x0f78
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*---------------------------------------------------------------------------*  *	HDLC bit table  *	==============	  *  *	bits[0..3]:	A value which tells how many set bits there are at the  *		   	beginning of the byte.  *  *	bits[4..7]:	Special bytes like 0x7e, 0x7d, 0xfd ... are flagged here  *			NOTE: Special bytes also means 'abort' bytes (7 or more  *			      continious set bits)  *  *	bits[8..11]:	A copy of bits[0..3] but only incremented by one.  *		     	NOTE: 0x7e has value '8' instead of '0'. Internal reasons.  *  *	bits[12..15]: 	A value which tells how many set bits there are at the  *		      	end of the byte.  *			NOTE: 0xff has both '8' incoming and '8' outgoing bits.  *  *---------------------------------------------------------------------------*/
end_comment

begin_decl_stmt
specifier|const
name|u_short
name|HDLC_BIT_TAB
index|[
literal|256
index|]
init|=
block|{
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0403
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0504
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0403
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0605
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0403
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0504
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0403
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0160
block|,
literal|0x0706
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0403
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0504
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0403
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0605
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0403
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0504
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0403
block|,
literal|0x0100
block|,
literal|0x0201
block|,
literal|0x0100
block|,
literal|0x0302
block|,
literal|0x01a0
block|,
literal|0x02a1
block|,
literal|0x0860
block|,
literal|0x0807
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1302
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1403
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1302
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1504
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1302
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1403
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1302
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1605
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1302
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1403
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1302
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1504
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1302
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1403
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1100
block|,
literal|0x1302
block|,
literal|0x1100
block|,
literal|0x1201
block|,
literal|0x1160
block|,
literal|0x1706
block|,
literal|0x2100
block|,
literal|0x2201
block|,
literal|0x2100
block|,
literal|0x2302
block|,
literal|0x2100
block|,
literal|0x2201
block|,
literal|0x2100
block|,
literal|0x2403
block|,
literal|0x2100
block|,
literal|0x2201
block|,
literal|0x2100
block|,
literal|0x2302
block|,
literal|0x2100
block|,
literal|0x2201
block|,
literal|0x2100
block|,
literal|0x2504
block|,
literal|0x2100
block|,
literal|0x2201
block|,
literal|0x2100
block|,
literal|0x2302
block|,
literal|0x2100
block|,
literal|0x2201
block|,
literal|0x2100
block|,
literal|0x2403
block|,
literal|0x2100
block|,
literal|0x2201
block|,
literal|0x2100
block|,
literal|0x2302
block|,
literal|0x2100
block|,
literal|0x2201
block|,
literal|0x2100
block|,
literal|0x2605
block|,
literal|0x3100
block|,
literal|0x3201
block|,
literal|0x3100
block|,
literal|0x3302
block|,
literal|0x3100
block|,
literal|0x3201
block|,
literal|0x3100
block|,
literal|0x3403
block|,
literal|0x3100
block|,
literal|0x3201
block|,
literal|0x3100
block|,
literal|0x3302
block|,
literal|0x3100
block|,
literal|0x3201
block|,
literal|0x3100
block|,
literal|0x3504
block|,
literal|0x4100
block|,
literal|0x4201
block|,
literal|0x4100
block|,
literal|0x4302
block|,
literal|0x4100
block|,
literal|0x4201
block|,
literal|0x4100
block|,
literal|0x4403
block|,
literal|0x5100
block|,
literal|0x5201
block|,
literal|0x5100
block|,
literal|0x5302
block|,
literal|0x6180
block|,
literal|0x6281
block|,
literal|0x7150
block|,
literal|0x8908
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*---------------------------------------------------------------------------*  *	HDLC_DECODE  *	===========  *  *	u_char:  flag, blevel  *	u_short: crc, ib, tmp, tmp2, len  *  *	next: 'continue' or 'goto xxx'  *  *	cfr: complet frame  *	nfr: new frame  *	     NOTE: must setup 'len' and 'dst', so that 'dst' may be written  *		   at most 'len' times.  *  *	rab: abort  *	rdd: read data (read byte is stored in 'tmp2')  *	rdo: overflow  *  *	d: dummy  *  *	NOTE: setting flag to '0' and len to '0' => recover from rdu  *	NOTE: bits[8 .. ] of tmp2 may be used to store custom data/flags  *	NOTE: these variables have to be 'suspended' / 'resumed' somehow:  *		flag, blevel, crc, ib, tmp, len  *	NOTE: zero is default value for all variables.  *	NOTE: each time 'dst' is written, 'len' is decremented by one.  *---------------------------------------------------------------------------*/
end_comment

begin_define
define|#
directive|define
name|HDLC_DECODE
parameter_list|(
name|dst
parameter_list|,
name|len
parameter_list|,
name|tmp
parameter_list|,
name|tmp2
parameter_list|,
name|blevel
parameter_list|,
name|ib
parameter_list|,
name|crc
parameter_list|,
name|flag
parameter_list|,
name|rddcmd
parameter_list|,
name|nfrcmd
parameter_list|,	\
name|cfrcmd
parameter_list|,
name|rabcmd
parameter_list|,
name|rdocmd
parameter_list|,
name|nextcmd
parameter_list|,
name|d
parameter_list|)
define|\ 										\
value|rddcmd;									\ 										\ 	ib  += HDLC_BIT_TAB[(u_char)tmp2];					\ 										\ 	if ((u_char)ib>= 5)							\ 	{									\ 		if (ib& 0x20)
comment|/* de-stuff (msb) */
value|\ 		{								\ 			if ((u_char)tmp2 == 0x7e) goto j0##d;			\ 			tmp2 += tmp2& 0x7f;					\ 			blevel--;						\ 										\ 			if ((ib += 0x100)& 0xc) tmp2 |= 1;
comment|/* */
value|\ 		}								\ 										\ 		ib&= ~0xe0;							\ 										\ 		if ((u_char)ib == 6)
comment|/* flag seq (lsb) */
value|\ 		{								\ 		 j0##d:	if (flag>= 2)						\ 			{							\ 				len += (4 - flag)& 3;
comment|/* remove CRC bytes */
value|\ 				crc ^= 0xf0b8;					\ 				cfrcmd;						\ 				len = 0;					\ 			}							\ 										\ 			flag   = 1;						\ 										\ 			blevel = (ib>> 8)& 0xf;				\ 			tmp    = ((u_char)tmp2)>> blevel;			\ 			blevel = 8 - blevel;					\ 										\ 			ib>>= 12;						\ 										\ 			nextcmd;						\ 		}								\ 		if ((u_char)ib>= 7)
comment|/* abort (msb& lsb) */
value|\ 		{								\ 			if (flag>= 2)						\ 			{							\ 				rabcmd;						\ 				len = 0;					\ 			}							\ 										\ 			flag = 0;						\ 										\ 			ib>>= 12;						\ 										\ 			nextcmd;						\ 		}								\ 		if ((u_char)ib == 5)
comment|/* de-stuff (lsb) */
value|\ 		{								\ 			tmp2 = (tmp2 | (tmp2 + 1))& ~0x1;			\ 			blevel--;						\ 		}								\ 		if (blevel> 7)
comment|/* EO - bits */
value|\ 		{								\ 			tmp |= (u_char)tmp2>> (8 - (blevel&= 7));		\ 										\ 			ib>>= 12;						\ 										\ 			nextcmd;						\ 		}								\ 	}									\ 										\ 	tmp |= (u_char)tmp2<< blevel;						\ 										\ 	if (!len--)								\ 	{									\ 		len++;								\ 										\ 		if (!flag++) { flag--; goto j5##d;}
comment|/* hunt mode */
value|\ 										\ 		switch (flag)							\ 		{   case 2:
comment|/* new frame */
value|\ 			nfrcmd;							\ 			crc = -1;						\ 			if (!len--) { len++; flag++; goto j4##d; }		\ 			goto j3##d;						\ 		    case 3:
comment|/* CRC (lsb's) */
value|\ 		    case 4:
comment|/* CRC (msb's) */
value|\ 			goto j4##d;						\ 		    case 5:
comment|/* RDO */
value|\ 			rdocmd;							\ 			flag = 0;						\ 			break;							\ 		}								\ 	}									\ 	else									\ 	{ 									\ 	 j3##d:	dst = (u_char)tmp;						\ 	 j4##d: crc = (HDLC_FCS_TAB[(u_char)(tmp ^ crc)] ^ (u_char)(crc>> 8));	\ 	}									\ 										\  j5##d:	ib>>= 12;								\ 	tmp>>= 8;
end_define

begin_comment
unit|\
comment|/*------ end of HDLC_DECODE -------------------------------------------------*/
end_comment

begin_comment
comment|/*---------------------------------------------------------------------------*  *	HDLC_ENCODE  *	===========  *  *	u_char:  flag, src  *	u_short: tmp2, blevel, ib, crc, len  *	u_int:   tmp  *  *	gfr: get new frame, free old, and exit if no frame	  *	     NOTE: must setup 'len' and 'src', so that 'src' can be read  *		   'len' times.  *  *	wrd: write data (output = (u_char)tmp)  *  *	d: dummy  *  *	NOTE: setting flag to '-1' and len to '0' => abort byte will be sent  *	NOTE: these variables have to be 'suspended' / 'resumed' somehow:  *		flag, blevel, crc, ib, tmp, len  *	NOTE: zero is default value for all variables.  *	NOTE: each time 'src' is read, 'len' is decremented by one.  *	NOTE: gfr must setup 'len'.  *---------------------------------------------------------------------------*/
end_comment

begin_define
define|#
directive|define
name|HDLC_ENCODE
parameter_list|(
name|src
parameter_list|,
name|len
parameter_list|,
name|tmp
parameter_list|,
name|tmp2
parameter_list|,
name|blevel
parameter_list|,
name|ib
parameter_list|,
name|crc
parameter_list|,
name|flag
parameter_list|,
name|gfrcmd
parameter_list|,
name|wrdcmd
parameter_list|,
name|d
parameter_list|)
define|\ 										\
value|if (blevel>= 0x800) { blevel -= 0x800; goto j4##d; }			\ 										\ 	if (!len--)								\ 	{									\ 		len++;								\ 										\ 		switch(++flag)							\ 		{ case 0:
comment|/* abort */
value|\ 			tmp  = blevel = 0;
comment|/* zero is default */
value|\ 			tmp2 = 0xff;						\ 			goto j3##d;						\ 		  case 1:
comment|/* 1st time FS */
value|\ 		  case 2:
comment|/* 2nd time FS */
value|\ 			tmp2 = 0x7e;						\ 			goto j3##d;						\ 		  case 3:
comment|/* get new frame  */
value|\ 			gfrcmd;							\ 			if (!len--)						\ 			{							\ 				len++;						\ 				flag--;
comment|/* don't proceed */
value|\ 				tmp2 = 0x7e;					\ 				goto j3##d;
comment|/* final FS */
value|\ 			}							\ 			else							\ 			{							\ 				crc = -1;					\ 				ib  = 0;					\ 				goto j1##d;
comment|/* first byte */
value|\ 			}							\ 		  case 4:
comment|/* CRC (lsb's) */
value|\ 			crc  ^= -1;						\ 			tmp2  = (u_char)crc;					\ 			crc>>= 8;						\ 			goto j2##d;						\ 		  case 5:
comment|/* CRC (msb's) */
value|\ 			tmp2  = (u_char)crc;					\ 			flag  = 1;						\ 			goto j2##d;
comment|/* CRC stuff */
value|\ 		}								\ 	}									\  	else									\   	{ j1##d	:								\ 		tmp2 = (u_char)src;						\ 		crc =(HDLC_FCS_TAB[(u_char)(crc ^ tmp2)] ^ (u_char)(crc>> 8));	\ 	  j2##d:								\ 										\ 		ib>>= 12;							\ 		ib  += HDLC_BIT_TAB[(u_char)tmp2];				\ 										\ 		if ((u_char)ib>= 5)
comment|/* stuffing */
value|\ 		{								\ 			blevel&= ~0xff;					\ 										\ 			if (ib& 0xc0)
comment|/* bit stuff (msb) */
value|\ 			{							\ 				tmp2 += tmp2& (0xff * (ib& 0xc0));		\ 				ib %= 0x5000;					\ 				blevel++;					\ 			}							\ 										\ 			ib&= ~0xf0;						\ 										\ 			if ((u_char)ib>= 5)
comment|/* bit stuff (lsb) */
value|\ 			{							\ 				tmp2 += tmp2& ~0x1f>> ((ib - (ib>> 8) + 1)	\& 7);		\ 				blevel++;					\ 										\ 				if ((u_char)ib>= 10)
comment|/* bit stuff (msb) */
value|\ 				{						\ 					tmp2 += tmp2& ~0x7ff>> ((ib - 	\ 							(ib>> 8) + 1)& 7);	\ 					blevel++;				\ 				}						\ 				if (ib& 0x8000)
comment|/* bit walk */
value|\ 				{						\ 					ib = ((u_char)ib % 5)<< 12;		\ 				}						\ 			}							\ 										\ 			tmp    |= tmp2<< (u_char)(blevel>> 8);		\ 			blevel += (u_char)blevel<< 8;				\ 		}								\ 		else
comment|/* no stuffing */
value|\ 		{								\ 		  j3##d:tmp    |= tmp2<< (u_char)(blevel>> 8);		\ 		}								\ 	}									\ 										\  j4##d:	wrdcmd;									\ 	tmp>>= 8;
end_define

begin_comment
unit|\
comment|/*------ end of HDLC_ENCODE -------------------------------------------------*/
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _I4B_HDLC_H_ */
end_comment

end_unit

