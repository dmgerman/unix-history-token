begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2016-2017 Ruslan Bukin<br@bsdpad.com>  * All rights reserved.  *  * Portions of this software were developed by SRI International and the  * University of Cambridge Computer Laboratory under DARPA/AFRL contract  * FA8750-10-C-0237 ("CTSRD"), as part of the DARPA CRASH research programme.  *  * Portions of this software were developed by the University of Cambridge  * Computer Laboratory as part of the CTSRD Project, with support from the  * UK Higher Education Innovation Fund (HEIF).  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_SBI_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_SBI_H_
end_define

begin_define
define|#
directive|define
name|SBI_SET_TIMER
value|0
end_define

begin_define
define|#
directive|define
name|SBI_CONSOLE_PUTCHAR
value|1
end_define

begin_define
define|#
directive|define
name|SBI_CONSOLE_GETCHAR
value|2
end_define

begin_define
define|#
directive|define
name|SBI_CLEAR_IPI
value|3
end_define

begin_define
define|#
directive|define
name|SBI_SEND_IPI
value|4
end_define

begin_define
define|#
directive|define
name|SBI_REMOTE_FENCE_I
value|5
end_define

begin_define
define|#
directive|define
name|SBI_REMOTE_SFENCE_VMA
value|6
end_define

begin_define
define|#
directive|define
name|SBI_REMOTE_SFENCE_VMA_ASID
value|7
end_define

begin_define
define|#
directive|define
name|SBI_SHUTDOWN
value|8
end_define

begin_function
specifier|static
name|__inline
name|uint64_t
name|sbi_call
parameter_list|(
name|uint64_t
name|arg7
parameter_list|,
name|uint64_t
name|arg0
parameter_list|,
name|uint64_t
name|arg1
parameter_list|,
name|uint64_t
name|arg2
parameter_list|)
block|{
specifier|register
name|uintptr_t
name|a0
asm|__asm ("a0") = (uintptr_t)(arg0);
specifier|register
name|uintptr_t
name|a1
asm|__asm ("a1") = (uintptr_t)(arg1);
specifier|register
name|uintptr_t
name|a2
asm|__asm ("a2") = (uintptr_t)(arg2);
specifier|register
name|uintptr_t
name|a7
asm|__asm ("a7") = (uintptr_t)(arg7);
asm|__asm __volatile(			\ 		"ecall"				\ 		:"+r"(a0)			\ 		:"r"(a1), "r"(a2), "r"(a7)	\ 		:"memory");
return|return
operator|(
name|a0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sbi_console_putchar
parameter_list|(
name|int
name|ch
parameter_list|)
block|{
name|sbi_call
argument_list|(
name|SBI_CONSOLE_PUTCHAR
argument_list|,
name|ch
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|sbi_console_getchar
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
name|sbi_call
argument_list|(
name|SBI_CONSOLE_GETCHAR
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sbi_set_timer
parameter_list|(
name|uint64_t
name|val
parameter_list|)
block|{
name|sbi_call
argument_list|(
name|SBI_SET_TIMER
argument_list|,
name|val
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sbi_shutdown
parameter_list|(
name|void
parameter_list|)
block|{
name|sbi_call
argument_list|(
name|SBI_SHUTDOWN
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sbi_clear_ipi
parameter_list|(
name|void
parameter_list|)
block|{
name|sbi_call
argument_list|(
name|SBI_CLEAR_IPI
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sbi_send_ipi
parameter_list|(
specifier|const
name|unsigned
name|long
modifier|*
name|hart_mask
parameter_list|)
block|{
name|sbi_call
argument_list|(
name|SBI_SEND_IPI
argument_list|,
operator|(
name|uint64_t
operator|)
name|hart_mask
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sbi_remote_fence_i
parameter_list|(
specifier|const
name|unsigned
name|long
modifier|*
name|hart_mask
parameter_list|)
block|{
name|sbi_call
argument_list|(
name|SBI_REMOTE_FENCE_I
argument_list|,
operator|(
name|uint64_t
operator|)
name|hart_mask
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sbi_remote_sfence_vma
parameter_list|(
specifier|const
name|unsigned
name|long
modifier|*
name|hart_mask
parameter_list|,
name|unsigned
name|long
name|start
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
block|{
name|sbi_call
argument_list|(
name|SBI_REMOTE_SFENCE_VMA
argument_list|,
operator|(
name|uint64_t
operator|)
name|hart_mask
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|sbi_remote_sfence_vma_asid
parameter_list|(
specifier|const
name|unsigned
name|long
modifier|*
name|hart_mask
parameter_list|,
name|unsigned
name|long
name|start
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|,
name|unsigned
name|long
name|asid
parameter_list|)
block|{
name|sbi_call
argument_list|(
name|SBI_REMOTE_SFENCE_VMA_ASID
argument_list|,
operator|(
name|uint64_t
operator|)
name|hart_mask
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_SBI_H_ */
end_comment

end_unit

