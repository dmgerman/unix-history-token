begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2008-2009 Ed Schouten<ed@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_function_decl
specifier|static
name|void
name|teken_subr_cursor_up
parameter_list|(
name|teken_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|teken_subr_erase_line
parameter_list|(
name|teken_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|teken_subr_regular_character
parameter_list|(
name|teken_t
modifier|*
parameter_list|,
name|teken_char_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|teken_subr_reset_to_initial_state
parameter_list|(
name|teken_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|teken_subr_save_cursor
parameter_list|(
name|teken_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|teken_tab_isset
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|col
parameter_list|)
block|{
name|unsigned
name|int
name|b
decl_stmt|,
name|o
decl_stmt|;
if|if
condition|(
name|col
operator|>=
name|T_NUMCOL
condition|)
return|return
operator|(
operator|(
name|col
operator|%
literal|8
operator|)
operator|==
literal|0
operator|)
return|;
name|b
operator|=
name|col
operator|/
operator|(
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|8
operator|)
expr_stmt|;
name|o
operator|=
name|col
operator|%
operator|(
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|8
operator|)
expr_stmt|;
return|return
operator|(
name|t
operator|->
name|t_tabstops
index|[
name|b
index|]
operator|&
operator|(
literal|1
operator|<<
name|o
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|teken_tab_clear
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|col
parameter_list|)
block|{
name|unsigned
name|int
name|b
decl_stmt|,
name|o
decl_stmt|;
if|if
condition|(
name|col
operator|>=
name|T_NUMCOL
condition|)
return|return;
name|b
operator|=
name|col
operator|/
operator|(
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|8
operator|)
expr_stmt|;
name|o
operator|=
name|col
operator|%
operator|(
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|8
operator|)
expr_stmt|;
name|t
operator|->
name|t_tabstops
index|[
name|b
index|]
operator|&=
operator|~
operator|(
literal|1
operator|<<
name|o
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|teken_tab_set
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|col
parameter_list|)
block|{
name|unsigned
name|int
name|b
decl_stmt|,
name|o
decl_stmt|;
if|if
condition|(
name|col
operator|>=
name|T_NUMCOL
condition|)
return|return;
name|b
operator|=
name|col
operator|/
operator|(
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|8
operator|)
expr_stmt|;
name|o
operator|=
name|col
operator|%
operator|(
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|8
operator|)
expr_stmt|;
name|t
operator|->
name|t_tabstops
index|[
name|b
index|]
operator||=
literal|1
operator|<<
name|o
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_tab_default
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|unsigned
name|int
name|i
decl_stmt|;
name|memset
argument_list|(
operator|&
name|t
operator|->
name|t_tabstops
argument_list|,
literal|0
argument_list|,
name|T_NUMCOL
operator|/
literal|8
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|8
init|;
name|i
operator|<
name|T_NUMCOL
condition|;
name|i
operator|+=
literal|8
control|)
name|teken_tab_set
argument_list|(
name|t
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_do_scroll
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|int
name|amount
parameter_list|)
block|{
name|teken_rect_t
name|tr
decl_stmt|;
name|teken_pos_t
name|tp
decl_stmt|;
name|teken_assert
argument_list|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|<=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
argument_list|)
expr_stmt|;
name|teken_assert
argument_list|(
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|<=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
argument_list|)
expr_stmt|;
name|teken_assert
argument_list|(
name|amount
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|/* Copy existing data 1 line up. */
if|if
condition|(
name|amount
operator|>
literal|0
condition|)
block|{
comment|/* Scroll down. */
comment|/* Copy existing data up. */
if|if
condition|(
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|+
name|amount
operator|<
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
condition|)
block|{
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|+
name|amount
expr_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
name|tp
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
expr_stmt|;
name|tp
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|teken_funcs_copy
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
operator|&
name|tp
argument_list|)
expr_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
name|amount
expr_stmt|;
block|}
else|else
block|{
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
expr_stmt|;
block|}
comment|/* Clear the last lines. */
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* Scroll up. */
name|amount
operator|=
operator|-
name|amount
expr_stmt|;
comment|/* Copy existing data down. */
if|if
condition|(
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|+
name|amount
operator|<
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
condition|)
block|{
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
expr_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
name|amount
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
name|tp
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|+
name|amount
expr_stmt|;
name|tp
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|teken_funcs_copy
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
operator|&
name|tp
argument_list|)
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|+
name|amount
expr_stmt|;
block|}
else|else
block|{
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
expr_stmt|;
block|}
comment|/* Clear the first lines. */
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
expr_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|ssize_t
name|teken_subr_do_cpr
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|,
name|char
name|response
index|[
literal|16
index|]
parameter_list|)
block|{
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
literal|5
case|:
comment|/* Operating status. */
name|strcpy
argument_list|(
name|response
argument_list|,
literal|"0n"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|2
operator|)
return|;
case|case
literal|6
case|:
block|{
comment|/* Cursor position. */
name|int
name|len
decl_stmt|;
name|len
operator|=
name|snprintf
argument_list|(
name|response
argument_list|,
literal|16
argument_list|,
literal|"%u;%uR"
argument_list|,
operator|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|-
name|t
operator|->
name|t_originreg
operator|.
name|ts_begin
operator|)
operator|+
literal|1
argument_list|,
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|>=
literal|16
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
return|return
operator|(
name|len
operator|)
return|;
block|}
case|case
literal|15
case|:
comment|/* Printer status. */
name|strcpy
argument_list|(
name|response
argument_list|,
literal|"13n"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|3
operator|)
return|;
case|case
literal|25
case|:
comment|/* UDK status. */
name|strcpy
argument_list|(
name|response
argument_list|,
literal|"20n"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|3
operator|)
return|;
case|case
literal|26
case|:
comment|/* Keyboard status. */
name|strcpy
argument_list|(
name|response
argument_list|,
literal|"27;1n"
argument_list|)
expr_stmt|;
return|return
operator|(
literal|5
operator|)
return|;
default|default:
name|teken_printf
argument_list|(
literal|"Unknown DSR\n"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_alignment_test
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|teken_rect_t
name|tr
decl_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
expr_stmt|;
name|t
operator|->
name|t_originreg
operator|=
name|t
operator|->
name|t_scrollreg
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
operator|(
name|TS_WRAPPED
operator||
name|TS_ORIGIN
operator|)
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
literal|0
expr_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|=
name|t
operator|->
name|t_winsize
expr_stmt|;
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
literal|'E'
argument_list|,
operator|&
name|t
operator|->
name|t_defattr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_backspace
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|->
name|t_stateflags
operator|&
name|TS_CONS25
condition|)
block|{
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|==
name|t
operator|->
name|t_originreg
operator|.
name|ts_begin
condition|)
return|return;
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|--
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|--
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|==
literal|0
condition|)
return|return;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|--
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
block|}
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_bell
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|teken_funcs_bell
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_carriage_return
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_backward
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ncols
parameter_list|)
block|{
if|if
condition|(
name|ncols
operator|>
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
condition|)
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
else|else
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|-=
name|ncols
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_backward_tabulation
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ntabs
parameter_list|)
block|{
do|do
block|{
comment|/* Stop when we've reached the beginning of the line. */
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|==
literal|0
condition|)
break|break;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|--
expr_stmt|;
comment|/* Tab marker set. */
if|if
condition|(
name|teken_tab_isset
argument_list|(
name|t
argument_list|,
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
argument_list|)
condition|)
name|ntabs
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|ntabs
operator|>
literal|0
condition|)
do|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_down
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|nrows
parameter_list|)
block|{
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
name|nrows
operator|>=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
condition|)
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
literal|1
expr_stmt|;
else|else
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+=
name|nrows
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_forward
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ncols
parameter_list|)
block|{
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
name|ncols
operator|>=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
condition|)
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
literal|1
expr_stmt|;
else|else
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+=
name|ncols
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_forward_tabulation
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ntabs
parameter_list|)
block|{
do|do
block|{
comment|/* Stop when we've reached the end of the line. */
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|==
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
literal|1
condition|)
break|break;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|++
expr_stmt|;
comment|/* Tab marker set. */
if|if
condition|(
name|teken_tab_isset
argument_list|(
name|t
argument_list|,
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
argument_list|)
condition|)
name|ntabs
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|ntabs
operator|>
literal|0
condition|)
do|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_next_line
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ncols
parameter_list|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|teken_subr_cursor_down
argument_list|(
name|t
argument_list|,
name|ncols
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_position
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|row
parameter_list|,
name|unsigned
name|int
name|col
parameter_list|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_originreg
operator|.
name|ts_begin
operator|+
name|row
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|row
operator|>=
name|t
operator|->
name|t_originreg
operator|.
name|ts_end
condition|)
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_originreg
operator|.
name|ts_end
operator|-
literal|1
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
name|col
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|>=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
condition|)
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
literal|1
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_position_report
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|)
block|{
name|char
name|response
index|[
literal|18
index|]
init|=
literal|"\x1B["
decl_stmt|;
name|ssize_t
name|len
decl_stmt|;
name|len
operator|=
name|teken_subr_do_cpr
argument_list|(
name|t
argument_list|,
name|cmd
argument_list|,
name|response
operator|+
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
return|return;
name|teken_funcs_respond
argument_list|(
name|t
argument_list|,
name|response
argument_list|,
name|len
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_previous_line
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ncols
parameter_list|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|teken_subr_cursor_up
argument_list|(
name|t
argument_list|,
name|ncols
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_cursor_up
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|nrows
parameter_list|)
block|{
if|if
condition|(
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|+
name|nrows
operator|>=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
condition|)
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
expr_stmt|;
else|else
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|-=
name|nrows
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_delete_character
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ncols
parameter_list|)
block|{
name|teken_rect_t
name|tr
decl_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
literal|1
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
name|ncols
operator|>=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
condition|)
block|{
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
expr_stmt|;
block|}
else|else
block|{
comment|/* Copy characters to the left. */
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
name|ncols
expr_stmt|;
name|teken_funcs_copy
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
operator|&
name|t
operator|->
name|t_cursor
argument_list|)
expr_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
name|ncols
expr_stmt|;
block|}
comment|/* Blank trailing columns. */
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_delete_line
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|nrows
parameter_list|)
block|{
name|teken_rect_t
name|tr
decl_stmt|;
comment|/* Ignore if outside scrolling region. */
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|<
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|||
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|>=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
condition|)
return|return;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
name|nrows
operator|>=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
condition|)
block|{
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
expr_stmt|;
block|}
else|else
block|{
name|teken_pos_t
name|tp
decl_stmt|;
comment|/* Copy rows up. */
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
name|nrows
expr_stmt|;
name|tp
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
expr_stmt|;
name|tp
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|teken_funcs_copy
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
operator|&
name|tp
argument_list|)
expr_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
name|nrows
expr_stmt|;
block|}
comment|/* Blank trailing rows. */
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_device_control_string
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|teken_printf
argument_list|(
literal|"Unsupported device control string\n"
argument_list|)
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator||=
name|TS_INSTRING
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_device_status_report
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|)
block|{
name|char
name|response
index|[
literal|19
index|]
init|=
literal|"\x1B[?"
decl_stmt|;
name|ssize_t
name|len
decl_stmt|;
name|len
operator|=
name|teken_subr_do_cpr
argument_list|(
name|t
argument_list|,
name|cmd
argument_list|,
name|response
operator|+
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|0
condition|)
return|return;
name|teken_funcs_respond
argument_list|(
name|t
argument_list|,
name|response
argument_list|,
name|len
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_double_height_double_width_line_top
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|teken_printf
argument_list|(
literal|"double height double width top\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_double_height_double_width_line_bottom
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|teken_printf
argument_list|(
literal|"double height double width bottom\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_erase_character
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ncols
parameter_list|)
block|{
name|teken_rect_t
name|tr
decl_stmt|;
name|tr
operator|.
name|tr_begin
operator|=
name|t
operator|->
name|t_cursor
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
name|ncols
operator|>=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
condition|)
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
else|else
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
name|ncols
expr_stmt|;
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_erase_display
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|mode
parameter_list|)
block|{
name|teken_rect_t
name|r
decl_stmt|;
name|r
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|r
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
literal|1
case|:
comment|/* Erase from the top to the cursor. */
name|teken_subr_erase_line
argument_list|(
name|t
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/* Erase lines above. */
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|==
literal|0
condition|)
return|return;
name|r
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
literal|0
expr_stmt|;
name|r
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* Erase entire display. */
name|r
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
literal|0
expr_stmt|;
name|r
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
expr_stmt|;
break|break;
default|default:
comment|/* Erase from cursor to the bottom. */
name|teken_subr_erase_line
argument_list|(
name|t
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/* Erase lines below. */
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|==
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
operator|-
literal|1
condition|)
return|return;
name|r
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
literal|1
expr_stmt|;
name|r
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
expr_stmt|;
break|break;
block|}
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|r
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_erase_line
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|mode
parameter_list|)
block|{
name|teken_rect_t
name|r
decl_stmt|;
name|r
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
expr_stmt|;
name|r
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
literal|1
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
literal|1
case|:
comment|/* Erase from the beginning of the line to the cursor. */
name|r
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|r
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
literal|1
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* Erase entire line. */
name|r
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|r
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
break|break;
default|default:
comment|/* Erase from cursor to the end of the line. */
name|r
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
expr_stmt|;
name|r
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
break|break;
block|}
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|r
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_g0_scs_special_graphics
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|t
operator|->
name|t_scs
index|[
literal|0
index|]
operator|=
name|teken_scs_special_graphics
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_g0_scs_uk_national
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|t
operator|->
name|t_scs
index|[
literal|0
index|]
operator|=
name|teken_scs_uk_national
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_g0_scs_us_ascii
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|t
operator|->
name|t_scs
index|[
literal|0
index|]
operator|=
name|teken_scs_us_ascii
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_g1_scs_special_graphics
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|t
operator|->
name|t_scs
index|[
literal|1
index|]
operator|=
name|teken_scs_special_graphics
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_g1_scs_uk_national
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|t
operator|->
name|t_scs
index|[
literal|1
index|]
operator|=
name|teken_scs_uk_national
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_g1_scs_us_ascii
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|t
operator|->
name|t_scs
index|[
literal|1
index|]
operator|=
name|teken_scs_us_ascii
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_horizontal_position_absolute
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|col
parameter_list|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
name|col
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|>=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
condition|)
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
literal|1
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_horizontal_tab
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|->
name|t_stateflags
operator|&
name|TS_CONS25
condition|)
block|{
name|teken_subr_cursor_forward_tabulation
argument_list|(
name|t
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|teken_rect_t
name|tr
decl_stmt|;
name|tr
operator|.
name|tr_begin
operator|=
name|t
operator|->
name|t_cursor
expr_stmt|;
name|teken_subr_cursor_forward_tabulation
argument_list|(
name|t
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|+
literal|1
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
expr_stmt|;
comment|/* Blank region that we skipped. */
if|if
condition|(
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|>
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
condition|)
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_horizontal_tab_set
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|teken_tab_set
argument_list|(
name|t
argument_list|,
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_index
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|<
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
literal|1
condition|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|++
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|teken_subr_do_scroll
argument_list|(
name|t
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_insert_character
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ncols
parameter_list|)
block|{
name|teken_rect_t
name|tr
decl_stmt|;
name|tr
operator|.
name|tr_begin
operator|=
name|t
operator|->
name|t_cursor
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
name|ncols
operator|>=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
condition|)
block|{
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
block|}
else|else
block|{
name|teken_pos_t
name|tp
decl_stmt|;
comment|/* Copy characters to the right. */
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
name|ncols
expr_stmt|;
name|tp
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
expr_stmt|;
name|tp
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
name|ncols
expr_stmt|;
name|teken_funcs_copy
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
operator|&
name|tp
argument_list|)
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+
name|ncols
expr_stmt|;
block|}
comment|/* Blank current location. */
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_insert_line
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|nrows
parameter_list|)
block|{
name|teken_rect_t
name|tr
decl_stmt|;
comment|/* Ignore if outside scrolling region. */
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|<
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|||
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|>=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
condition|)
return|return;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
expr_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
name|nrows
operator|>=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
condition|)
block|{
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
expr_stmt|;
block|}
else|else
block|{
name|teken_pos_t
name|tp
decl_stmt|;
comment|/* Copy lines down. */
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
name|nrows
expr_stmt|;
name|tp
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
name|nrows
expr_stmt|;
name|tp
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|teken_funcs_copy
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
operator|&
name|tp
argument_list|)
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
name|nrows
expr_stmt|;
block|}
comment|/* Blank current location. */
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_keypad_application_mode
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_KEYPADAPP
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_keypad_numeric_mode
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_KEYPADAPP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_newline
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|++
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|>=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
condition|)
block|{
name|teken_subr_do_scroll
argument_list|(
name|t
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
literal|1
expr_stmt|;
block|}
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_newpage
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|->
name|t_stateflags
operator|&
name|TS_CONS25
condition|)
block|{
name|teken_rect_t
name|tr
decl_stmt|;
name|tr
operator|.
name|tr_begin
operator|.
name|tp_row
operator|=
name|tr
operator|.
name|tr_begin
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|tr
operator|.
name|tr_end
operator|=
name|t
operator|->
name|t_winsize
expr_stmt|;
name|teken_funcs_fill
argument_list|(
name|t
argument_list|,
operator|&
name|tr
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|teken_subr_newline
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_next_line
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|teken_subr_newline
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_operating_system_command
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|teken_printf
argument_list|(
literal|"Unsupported operating system command\n"
argument_list|)
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator||=
name|TS_INSTRING
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_pan_down
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|nrows
parameter_list|)
block|{
name|teken_subr_do_scroll
argument_list|(
name|t
argument_list|,
operator|(
name|int
operator|)
name|nrows
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_pan_up
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|nrows
parameter_list|)
block|{
name|teken_subr_do_scroll
argument_list|(
name|t
argument_list|,
operator|-
operator|(
name|int
operator|)
name|nrows
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_primary_device_attributes
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|==
literal|0
condition|)
block|{
specifier|const
name|char
name|response
index|[]
init|=
literal|"\x1B[?1;2c"
decl_stmt|;
name|teken_funcs_respond
argument_list|(
name|t
argument_list|,
name|response
argument_list|,
sizeof|sizeof
name|response
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|teken_printf
argument_list|(
literal|"Unknown DA1\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_do_putchar
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
specifier|const
name|teken_pos_t
modifier|*
name|tp
parameter_list|,
name|teken_char_t
name|c
parameter_list|,
name|int
name|width
parameter_list|)
block|{
if|if
condition|(
name|t
operator|->
name|t_stateflags
operator|&
name|TS_INSERT
operator|&&
name|tp
operator|->
name|tp_col
operator|<
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
name|width
condition|)
block|{
name|teken_rect_t
name|ctr
decl_stmt|;
name|teken_pos_t
name|ctp
decl_stmt|;
comment|/* Insert mode. Move existing characters to the right. */
name|ctr
operator|.
name|tr_begin
operator|=
operator|*
name|tp
expr_stmt|;
name|ctr
operator|.
name|tr_end
operator|.
name|tp_row
operator|=
name|tp
operator|->
name|tp_row
operator|+
literal|1
expr_stmt|;
name|ctr
operator|.
name|tr_end
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
name|width
expr_stmt|;
name|ctp
operator|.
name|tp_row
operator|=
name|tp
operator|->
name|tp_row
expr_stmt|;
name|ctp
operator|.
name|tp_col
operator|=
name|tp
operator|->
name|tp_col
operator|+
name|width
expr_stmt|;
name|teken_funcs_copy
argument_list|(
name|t
argument_list|,
operator|&
name|ctr
argument_list|,
operator|&
name|ctp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|width
operator|==
literal|2
operator|&&
name|tp
operator|->
name|tp_col
operator|+
literal|1
operator|<
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
condition|)
block|{
name|teken_pos_t
name|tp2
decl_stmt|;
comment|/* 		 * Store a space behind double width characters before 		 * actually printing them. This prevents artifacts when 		 * the consumer doesn't render it using double width 		 * glyphs. 		 */
name|tp2
operator|.
name|tp_row
operator|=
name|tp
operator|->
name|tp_row
expr_stmt|;
name|tp2
operator|.
name|tp_col
operator|=
name|tp
operator|->
name|tp_col
operator|+
literal|1
expr_stmt|;
name|teken_funcs_putchar
argument_list|(
name|t
argument_list|,
operator|&
name|tp2
argument_list|,
name|BLANK
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
name|teken_funcs_putchar
argument_list|(
name|t
argument_list|,
name|tp
argument_list|,
name|c
argument_list|,
operator|&
name|t
operator|->
name|t_curattr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_regular_character
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|teken_char_t
name|c
parameter_list|)
block|{
name|int
name|width
decl_stmt|;
if|if
condition|(
name|t
operator|->
name|t_stateflags
operator|&
name|TS_8BIT
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|t
operator|->
name|t_stateflags
operator|&
name|TS_CONS25
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|0x1b
operator|||
name|c
operator|==
literal|0x7f
operator|)
condition|)
return|return;
name|c
operator|=
name|teken_scs_process
argument_list|(
name|t
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|width
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|teken_scs_process
argument_list|(
name|t
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|width
operator|=
name|teken_wcwidth
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|/* XXX: Don't process zero-width characters yet. */
if|if
condition|(
name|width
operator|<=
literal|0
condition|)
return|return;
block|}
if|if
condition|(
name|t
operator|->
name|t_stateflags
operator|&
name|TS_CONS25
condition|)
block|{
name|teken_subr_do_putchar
argument_list|(
name|t
argument_list|,
operator|&
name|t
operator|->
name|t_cursor
argument_list|,
name|c
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+=
name|width
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|>=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
condition|)
block|{
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|==
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
literal|1
condition|)
block|{
comment|/* Perform scrolling. */
name|teken_subr_do_scroll
argument_list|(
name|t
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* No scrolling needed. */
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|<
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
operator|-
literal|1
condition|)
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|++
expr_stmt|;
block|}
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|==
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
literal|1
operator|&&
operator|(
name|t
operator|->
name|t_stateflags
operator|&
operator|(
name|TS_WRAPPED
operator||
name|TS_AUTOWRAP
operator|)
operator|)
operator|==
operator|(
name|TS_WRAPPED
operator||
name|TS_AUTOWRAP
operator|)
condition|)
block|{
name|teken_pos_t
name|tp
decl_stmt|;
comment|/* Perform line wrapping. */
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|==
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
literal|1
condition|)
block|{
comment|/* Perform scrolling. */
name|teken_subr_do_scroll
argument_list|(
name|t
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tp
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|/* No scrolling needed. */
name|tp
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|tp
operator|.
name|tp_row
operator|==
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
condition|)
block|{
comment|/* 				 * Corner case: regular character 				 * outside scrolling region, but at the 				 * bottom of the screen. 				 */
name|teken_subr_do_putchar
argument_list|(
name|t
argument_list|,
operator|&
name|t
operator|->
name|t_cursor
argument_list|,
name|c
argument_list|,
name|width
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|tp
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|teken_subr_do_putchar
argument_list|(
name|t
argument_list|,
operator|&
name|tp
argument_list|,
name|c
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|tp
operator|.
name|tp_row
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
name|width
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
block|}
else|else
block|{
comment|/* No line wrapping needed. */
name|teken_subr_do_putchar
argument_list|(
name|t
argument_list|,
operator|&
name|t
operator|->
name|t_cursor
argument_list|,
name|c
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|+=
name|width
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|>=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
condition|)
block|{
name|t
operator|->
name|t_stateflags
operator||=
name|TS_WRAPPED
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_col
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
block|}
block|}
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_reset_dec_mode
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|)
block|{
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
literal|1
case|:
comment|/* Cursor keys mode. */
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_CURSORKEYS
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* DECANM: ANSI/VT52 mode. */
name|teken_printf
argument_list|(
literal|"DECRST VT52\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|/* 132 column mode. */
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_132COLS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|teken_subr_reset_to_initial_state
argument_list|(
name|t
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|/* Inverse video. */
name|teken_printf
argument_list|(
literal|"DECRST inverse video\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|/* Origin mode. */
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_ORIGIN
expr_stmt|;
name|t
operator|->
name|t_originreg
operator|.
name|ts_begin
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_originreg
operator|.
name|ts_end
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|/* Autowrap mode. */
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_AUTOWRAP
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|/* Autorepeat mode. */
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_AUTOREPEAT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|25
case|:
comment|/* Hide cursor. */
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_SHOWCURSOR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
literal|40
case|:
comment|/* Disallow 132 columns. */
name|teken_printf
argument_list|(
literal|"DECRST allow 132\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|45
case|:
comment|/* Disable reverse wraparound. */
name|teken_printf
argument_list|(
literal|"DECRST reverse wraparound\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|47
case|:
comment|/* Switch to alternate buffer. */
name|teken_printf
argument_list|(
literal|"Switch to alternate buffer\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1000
case|:
comment|/* Mouse input. */
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_MOUSE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
default|default:
name|teken_printf
argument_list|(
literal|"Unknown DECRST: %u\n"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_reset_mode
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|)
block|{
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
literal|4
case|:
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_INSERT
expr_stmt|;
break|break;
default|default:
name|teken_printf
argument_list|(
literal|"Unknown reset mode: %u\n"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_do_reset
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|t
operator|->
name|t_curattr
operator|=
name|t
operator|->
name|t_defattr
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
expr_stmt|;
name|t
operator|->
name|t_originreg
operator|=
name|t
operator|->
name|t_scrollreg
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
name|TS_8BIT
operator||
name|TS_CONS25
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator||=
name|TS_AUTOWRAP
expr_stmt|;
name|t
operator|->
name|t_scs
index|[
literal|0
index|]
operator|=
name|teken_scs_us_ascii
expr_stmt|;
name|t
operator|->
name|t_scs
index|[
literal|1
index|]
operator|=
name|teken_scs_us_ascii
expr_stmt|;
name|t
operator|->
name|t_curscs
operator|=
literal|0
expr_stmt|;
name|teken_subr_save_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|teken_tab_default
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_reset_to_initial_state
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|teken_subr_do_reset
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|teken_subr_erase_display
argument_list|(
name|t
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_SHOWCURSOR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_restore_cursor
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|t
operator|->
name|t_cursor
operator|=
name|t
operator|->
name|t_saved_cursor
expr_stmt|;
name|t
operator|->
name|t_curattr
operator|=
name|t
operator|->
name|t_saved_curattr
expr_stmt|;
name|t
operator|->
name|t_scs
index|[
name|t
operator|->
name|t_curscs
index|]
operator|=
name|t
operator|->
name|t_saved_curscs
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
comment|/* Get out of origin mode when the cursor is moved outside. */
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|<
name|t
operator|->
name|t_originreg
operator|.
name|ts_begin
operator|||
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|>=
name|t
operator|->
name|t_originreg
operator|.
name|ts_end
condition|)
block|{
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_ORIGIN
expr_stmt|;
name|t
operator|->
name|t_originreg
operator|.
name|ts_begin
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_originreg
operator|.
name|ts_end
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
expr_stmt|;
block|}
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_reverse_index
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|>
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
condition|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|--
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|teken_subr_do_scroll
argument_list|(
name|t
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_save_cursor
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|)
block|{
name|t
operator|->
name|t_saved_cursor
operator|=
name|t
operator|->
name|t_cursor
expr_stmt|;
name|t
operator|->
name|t_saved_curattr
operator|=
name|t
operator|->
name|t_curattr
expr_stmt|;
name|t
operator|->
name|t_saved_curscs
operator|=
name|t
operator|->
name|t_scs
index|[
name|t
operator|->
name|t_curscs
index|]
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_secondary_device_attributes
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|==
literal|0
condition|)
block|{
specifier|const
name|char
name|response
index|[]
init|=
literal|"\x1B[>0;10;0c"
decl_stmt|;
name|teken_funcs_respond
argument_list|(
name|t
argument_list|,
name|response
argument_list|,
sizeof|sizeof
name|response
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|teken_printf
argument_list|(
literal|"Unknown DA2\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_set_dec_mode
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|)
block|{
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
literal|1
case|:
comment|/* Cursor keys mode. */
name|t
operator|->
name|t_stateflags
operator||=
name|TS_CURSORKEYS
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|/* DECANM: ANSI/VT52 mode. */
name|teken_printf
argument_list|(
literal|"DECSET VT52\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|/* 132 column mode. */
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_132COLS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|teken_subr_reset_to_initial_state
argument_list|(
name|t
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|/* Inverse video. */
name|teken_printf
argument_list|(
literal|"DECSET inverse video\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|6
case|:
comment|/* Origin mode. */
name|t
operator|->
name|t_stateflags
operator||=
name|TS_ORIGIN
expr_stmt|;
name|t
operator|->
name|t_originreg
operator|=
name|t
operator|->
name|t_scrollreg
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|/* Autowrap mode. */
name|t
operator|->
name|t_stateflags
operator||=
name|TS_AUTOWRAP
expr_stmt|;
break|break;
case|case
literal|8
case|:
comment|/* Autorepeat mode. */
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_AUTOREPEAT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|25
case|:
comment|/* Display cursor. */
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_SHOWCURSOR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|40
case|:
comment|/* Allow 132 columns. */
name|teken_printf
argument_list|(
literal|"DECSET allow 132\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|45
case|:
comment|/* Enable reverse wraparound. */
name|teken_printf
argument_list|(
literal|"DECSET reverse wraparound\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|47
case|:
comment|/* Switch to alternate buffer. */
name|teken_printf
argument_list|(
literal|"Switch away from alternate buffer\n"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1000
case|:
comment|/* Mouse input. */
name|teken_funcs_param
argument_list|(
name|t
argument_list|,
name|TP_MOUSE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default:
name|teken_printf
argument_list|(
literal|"Unknown DECSET: %u\n"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_set_mode
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|)
block|{
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
literal|4
case|:
name|teken_printf
argument_list|(
literal|"Insert mode\n"
argument_list|)
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator||=
name|TS_INSERT
expr_stmt|;
break|break;
default|default:
name|teken_printf
argument_list|(
literal|"Unknown set mode: %u\n"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_set_graphic_rendition
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|ncmds
parameter_list|,
name|unsigned
name|int
name|cmds
index|[]
parameter_list|)
block|{
name|unsigned
name|int
name|i
decl_stmt|,
name|n
decl_stmt|;
comment|/* No attributes means reset. */
if|if
condition|(
name|ncmds
operator|==
literal|0
condition|)
block|{
name|t
operator|->
name|t_curattr
operator|=
name|t
operator|->
name|t_defattr
expr_stmt|;
return|return;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ncmds
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|=
name|cmds
index|[
name|i
index|]
expr_stmt|;
switch|switch
condition|(
name|n
condition|)
block|{
case|case
literal|0
case|:
comment|/* Reset. */
name|t
operator|->
name|t_curattr
operator|=
name|t
operator|->
name|t_defattr
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|/* Bold. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator||=
name|TF_BOLD
expr_stmt|;
break|break;
case|case
literal|4
case|:
comment|/* Underline. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator||=
name|TF_UNDERLINE
expr_stmt|;
break|break;
case|case
literal|5
case|:
comment|/* Blink. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator||=
name|TF_BLINK
expr_stmt|;
break|break;
case|case
literal|7
case|:
comment|/* Reverse. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator||=
name|TF_REVERSE
expr_stmt|;
break|break;
case|case
literal|22
case|:
comment|/* Remove bold. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator|&=
operator|~
name|TF_BOLD
expr_stmt|;
break|break;
case|case
literal|24
case|:
comment|/* Remove underline. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator|&=
operator|~
name|TF_UNDERLINE
expr_stmt|;
break|break;
case|case
literal|25
case|:
comment|/* Remove blink. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator|&=
operator|~
name|TF_BLINK
expr_stmt|;
break|break;
case|case
literal|27
case|:
comment|/* Remove reverse. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_format
operator|&=
operator|~
name|TF_REVERSE
expr_stmt|;
break|break;
case|case
literal|30
case|:
comment|/* Set foreground color: black */
case|case
literal|31
case|:
comment|/* Set foreground color: red */
case|case
literal|32
case|:
comment|/* Set foreground color: green */
case|case
literal|33
case|:
comment|/* Set foreground color: brown */
case|case
literal|34
case|:
comment|/* Set foreground color: blue */
case|case
literal|35
case|:
comment|/* Set foreground color: magenta */
case|case
literal|36
case|:
comment|/* Set foreground color: cyan */
case|case
literal|37
case|:
comment|/* Set foreground color: white */
name|t
operator|->
name|t_curattr
operator|.
name|ta_fgcolor
operator|=
name|n
operator|-
literal|30
expr_stmt|;
break|break;
case|case
literal|38
case|:
comment|/* Set foreground color: 256 color mode */
if|if
condition|(
name|i
operator|+
literal|2
operator|>=
name|ncmds
operator|||
name|cmds
index|[
name|i
operator|+
literal|1
index|]
operator|!=
literal|5
condition|)
continue|continue;
name|t
operator|->
name|t_curattr
operator|.
name|ta_fgcolor
operator|=
name|cmds
index|[
name|i
operator|+
literal|2
index|]
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|39
case|:
comment|/* Set default foreground color. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_fgcolor
operator|=
name|t
operator|->
name|t_defattr
operator|.
name|ta_fgcolor
expr_stmt|;
break|break;
case|case
literal|40
case|:
comment|/* Set background color: black */
case|case
literal|41
case|:
comment|/* Set background color: red */
case|case
literal|42
case|:
comment|/* Set background color: green */
case|case
literal|43
case|:
comment|/* Set background color: brown */
case|case
literal|44
case|:
comment|/* Set background color: blue */
case|case
literal|45
case|:
comment|/* Set background color: magenta */
case|case
literal|46
case|:
comment|/* Set background color: cyan */
case|case
literal|47
case|:
comment|/* Set background color: white */
name|t
operator|->
name|t_curattr
operator|.
name|ta_bgcolor
operator|=
name|n
operator|-
literal|40
expr_stmt|;
break|break;
case|case
literal|48
case|:
comment|/* Set background color: 256 color mode */
if|if
condition|(
name|i
operator|+
literal|2
operator|>=
name|ncmds
operator|||
name|cmds
index|[
name|i
operator|+
literal|1
index|]
operator|!=
literal|5
condition|)
continue|continue;
name|t
operator|->
name|t_curattr
operator|.
name|ta_bgcolor
operator|=
name|cmds
index|[
name|i
operator|+
literal|2
index|]
expr_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
literal|49
case|:
comment|/* Set default background color. */
name|t
operator|->
name|t_curattr
operator|.
name|ta_bgcolor
operator|=
name|t
operator|->
name|t_defattr
operator|.
name|ta_bgcolor
expr_stmt|;
break|break;
case|case
literal|90
case|:
comment|/* Set bright foreground color: black */
case|case
literal|91
case|:
comment|/* Set bright foreground color: red */
case|case
literal|92
case|:
comment|/* Set bright foreground color: green */
case|case
literal|93
case|:
comment|/* Set bright foreground color: brown */
case|case
literal|94
case|:
comment|/* Set bright foreground color: blue */
case|case
literal|95
case|:
comment|/* Set bright foreground color: magenta */
case|case
literal|96
case|:
comment|/* Set bright foreground color: cyan */
case|case
literal|97
case|:
comment|/* Set bright foreground color: white */
name|t
operator|->
name|t_curattr
operator|.
name|ta_fgcolor
operator|=
name|n
operator|-
literal|90
operator|+
literal|8
expr_stmt|;
break|break;
case|case
literal|100
case|:
comment|/* Set bright background color: black */
case|case
literal|101
case|:
comment|/* Set bright background color: red */
case|case
literal|102
case|:
comment|/* Set bright background color: green */
case|case
literal|103
case|:
comment|/* Set bright background color: brown */
case|case
literal|104
case|:
comment|/* Set bright background color: blue */
case|case
literal|105
case|:
comment|/* Set bright background color: magenta */
case|case
literal|106
case|:
comment|/* Set bright background color: cyan */
case|case
literal|107
case|:
comment|/* Set bright background color: white */
name|t
operator|->
name|t_curattr
operator|.
name|ta_bgcolor
operator|=
name|n
operator|-
literal|100
operator|+
literal|8
expr_stmt|;
break|break;
default|default:
name|teken_printf
argument_list|(
literal|"unsupported attribute %u\n"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_set_top_and_bottom_margins
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|top
parameter_list|,
name|unsigned
name|int
name|bottom
parameter_list|)
block|{
comment|/* Adjust top row number. */
if|if
condition|(
name|top
operator|>
literal|0
condition|)
name|top
operator|--
expr_stmt|;
comment|/* Adjust bottom row number. */
if|if
condition|(
name|bottom
operator|==
literal|0
operator|||
name|bottom
operator|>
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
condition|)
name|bottom
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
expr_stmt|;
comment|/* Invalid arguments. */
if|if
condition|(
name|top
operator|>=
name|bottom
operator|-
literal|1
condition|)
block|{
name|top
operator|=
literal|0
expr_stmt|;
name|bottom
operator|=
name|t
operator|->
name|t_winsize
operator|.
name|tp_row
expr_stmt|;
block|}
comment|/* Apply scrolling region. */
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_begin
operator|=
name|top
expr_stmt|;
name|t
operator|->
name|t_scrollreg
operator|.
name|ts_end
operator|=
name|bottom
expr_stmt|;
if|if
condition|(
name|t
operator|->
name|t_stateflags
operator|&
name|TS_ORIGIN
condition|)
name|t
operator|->
name|t_originreg
operator|=
name|t
operator|->
name|t_scrollreg
expr_stmt|;
comment|/* Home cursor to the top left of the scrolling region. */
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_originreg
operator|.
name|ts_begin
expr_stmt|;
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
operator|=
literal|0
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_single_height_double_width_line
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|teken_printf
argument_list|(
literal|"single height double width???\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_single_height_single_width_line
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
name|teken_printf
argument_list|(
literal|"single height single width???\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_string_terminator
parameter_list|(
name|teken_t
modifier|*
name|t
name|__unused
parameter_list|)
block|{
comment|/* 	 * Strings are already terminated in teken_input_char() when ^[ 	 * is inserted. 	 */
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_tab_clear
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|cmd
parameter_list|)
block|{
switch|switch
condition|(
name|cmd
condition|)
block|{
case|case
literal|0
case|:
name|teken_tab_clear
argument_list|(
name|t
argument_list|,
name|t
operator|->
name|t_cursor
operator|.
name|tp_col
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|memset
argument_list|(
operator|&
name|t
operator|->
name|t_tabstops
argument_list|,
literal|0
argument_list|,
name|T_NUMCOL
operator|/
literal|8
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_function
specifier|static
name|void
name|teken_subr_vertical_position_absolute
parameter_list|(
name|teken_t
modifier|*
name|t
parameter_list|,
name|unsigned
name|int
name|row
parameter_list|)
block|{
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_originreg
operator|.
name|ts_begin
operator|+
name|row
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|row
operator|>=
name|t
operator|->
name|t_originreg
operator|.
name|ts_end
condition|)
name|t
operator|->
name|t_cursor
operator|.
name|tp_row
operator|=
name|t
operator|->
name|t_originreg
operator|.
name|ts_end
operator|-
literal|1
expr_stmt|;
name|t
operator|->
name|t_stateflags
operator|&=
operator|~
name|TS_WRAPPED
expr_stmt|;
name|teken_funcs_cursor
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

end_unit

