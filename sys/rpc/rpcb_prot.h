begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Please do not edit this file.  * It was generated using rpcgen.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_RPCB_PROT_H_RPCGEN
end_ifndef

begin_define
define|#
directive|define
name|_RPCB_PROT_H_RPCGEN
end_define

begin_include
include|#
directive|include
file|<rpc/rpc.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*-  * Copyright (c) 2009, Sun Microsystems, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  * - Redistributions of source code must retain the above copyright notice,  *   this list of conditions and the following disclaimer.  * - Redistributions in binary form must reproduce the above copyright notice,  *   this list of conditions and the following disclaimer in the documentation  *   and/or other materials provided with the distribution.  * - Neither the name of Sun Microsystems, Inc. nor the names of its  *   contributors may be used to endorse or promote products derived  *   from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
comment|/*  * Copyright (c) 1988 by Sun Microsystems, Inc.  */
comment|/* from rpcb_prot.x */
comment|/* #pragma ident	"@(#)rpcb_prot.x	1.5	94/04/29 SMI" */
ifndef|#
directive|ifndef
name|_KERNEL
comment|/*  * The following procedures are supported by the protocol in version 3:  *  * RPCBPROC_NULL() returns ()  * 	takes nothing, returns nothing  *  * RPCBPROC_SET(rpcb) returns (bool_t)  * 	TRUE is success, FALSE is failure.  Registers the tuple  *	[prog, vers, address, owner, netid].  *	Finds out owner and netid information on its own.  *  * RPCBPROC_UNSET(rpcb) returns (bool_t)  *	TRUE is success, FALSE is failure.  Un-registers tuple  *	[prog, vers, netid].  addresses is ignored.  *	If netid is NULL, unregister all.  *  * RPCBPROC_GETADDR(rpcb) returns (string).  *	0 is failure.  Otherwise returns the universal address where the  *	triple [prog, vers, netid] is registered.  Ignore address and owner.  *  * RPCBPROC_DUMP() RETURNS (rpcblist_ptr)  *	used to dump the entire rpcbind maps  *  * RPCBPROC_CALLIT(rpcb_rmtcallargs)  * 	RETURNS (rpcb_rmtcallres);  * 	Calls the procedure on the remote machine.  If it is not registered,  *	this procedure is quiet; i.e. it does not return error information!!!  *	This routine only passes null authentication parameters.  *	It has no interface to xdr routines for RPCBPROC_CALLIT.  *  * RPCBPROC_GETTIME() returns (int).  *	Gets the remote machines time  *  * RPCBPROC_UADDR2TADDR(strint) RETURNS (struct netbuf)  *	Returns the netbuf address from universal address.  *  * RPCBPROC_TADDR2UADDR(struct netbuf) RETURNS (string)  *	Returns the universal address from netbuf address.  *  * END OF RPCBIND VERSION 3 PROCEDURES  */
comment|/*  * Except for RPCBPROC_CALLIT, the procedures above are carried over to  * rpcbind version 4.  Those below are added or modified for version 4.  * NOTE: RPCBPROC_BCAST HAS THE SAME FUNCTIONALITY AND PROCEDURE NUMBER  * AS RPCBPROC_CALLIT.  *  * RPCBPROC_BCAST(rpcb_rmtcallargs)  * 	RETURNS (rpcb_rmtcallres);  * 	Calls the procedure on the remote machine.  If it is not registered,  *	this procedure IS quiet; i.e. it DOES NOT return error information!!!  *	This routine should be used for broadcasting and nothing else.  *  * RPCBPROC_GETVERSADDR(rpcb) returns (string).  *	0 is failure.  Otherwise returns the universal address where the  *	triple [prog, vers, netid] is registered.  Ignore address and owner.  *	Same as RPCBPROC_GETADDR except that if the given version number  *	is not available, the address is not returned.  *  * RPCBPROC_INDIRECT(rpcb_rmtcallargs)  * 	RETURNS (rpcb_rmtcallres);  * 	Calls the procedure on the remote machine.  If it is not registered,  *	this procedure is NOT quiet; i.e. it DOES return error information!!!  * 	as any normal application would expect.  *  * RPCBPROC_GETADDRLIST(rpcb) returns (rpcb_entry_list_ptr).  *	Same as RPCBPROC_GETADDR except that it returns a list of all the  *	addresses registered for the combination (prog, vers) (for all  *	transports).  *  * RPCBPROC_GETSTAT(void) returns (rpcb_stat_byvers)  *	Returns the statistics about the kind of requests received by rpcbind.  */
comment|/*  * A mapping of (program, version, network ID) to address  */
struct|struct
name|rpcb
block|{
name|rpcprog_t
name|r_prog
decl_stmt|;
name|rpcvers_t
name|r_vers
decl_stmt|;
name|char
modifier|*
name|r_netid
decl_stmt|;
name|char
modifier|*
name|r_addr
decl_stmt|;
name|char
modifier|*
name|r_owner
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcb
name|rpcb
typedef|;
typedef|typedef
name|rpcb
name|RPCB
typedef|;
comment|/*  * A list of mappings  *  * Below are two definitions for the rpcblist structure.  This is done because  * xdr_rpcblist() is specified to take a struct rpcblist **, rather than a  * struct rpcblist * that rpcgen would produce.  One version of the rpcblist  * structure (actually called rp__list) is used with rpcgen, and the other is  * defined only in the header file for compatibility with the specified  * interface.  */
struct|struct
name|rp__list
block|{
name|rpcb
name|rpcb_map
decl_stmt|;
name|struct
name|rp__list
modifier|*
name|rpcb_next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rp__list
name|rp__list
typedef|;
typedef|typedef
name|rp__list
modifier|*
name|rpcblist_ptr
typedef|;
typedef|typedef
name|struct
name|rp__list
name|rpcblist
typedef|;
typedef|typedef
name|struct
name|rp__list
name|RPCBLIST
typedef|;
ifndef|#
directive|ifndef
name|__cplusplus
struct|struct
name|rpcblist
block|{
name|RPCB
name|rpcb_map
decl_stmt|;
name|struct
name|rpcblist
modifier|*
name|rpcb_next
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
extern|extern
literal|"C"
block|{
endif|#
directive|endif
specifier|extern
name|bool_t
name|xdr_rpcblist
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcblist
modifier|*
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
endif|#
directive|endif
comment|/*  * Arguments of remote calls  */
struct|struct
name|rpcb_rmtcallargs
block|{
name|rpcprog_t
name|prog
decl_stmt|;
name|rpcvers_t
name|vers
decl_stmt|;
name|rpcproc_t
name|proc
decl_stmt|;
struct|struct
block|{
name|u_int
name|args_len
decl_stmt|;
name|char
modifier|*
name|args_val
decl_stmt|;
block|}
name|args
struct|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_rmtcallargs
name|rpcb_rmtcallargs
typedef|;
comment|/*  * Client-side only representation of rpcb_rmtcallargs structure.  *  * The routine that XDRs the rpcb_rmtcallargs structure must deal with the  * opaque arguments in the "args" structure.  xdr_rpcb_rmtcallargs() needs to  * be passed the XDR routine that knows the args' structure.  This routine  * doesn't need to go over-the-wire (and it wouldn't make sense anyway) since  * the application being called already knows the args structure.  So we use a  * different "XDR" structure on the client side, r_rpcb_rmtcallargs, which  * includes the args' XDR routine.  */
struct|struct
name|r_rpcb_rmtcallargs
block|{
name|rpcprog_t
name|prog
decl_stmt|;
name|rpcvers_t
name|vers
decl_stmt|;
name|rpcproc_t
name|proc
decl_stmt|;
struct|struct
block|{
name|u_int
name|args_len
decl_stmt|;
name|char
modifier|*
name|args_val
decl_stmt|;
block|}
name|args
struct|;
name|xdrproc_t
name|xdr_args
decl_stmt|;
comment|/* encodes args */
block|}
struct|;
comment|/*  * Results of the remote call  */
struct|struct
name|rpcb_rmtcallres
block|{
name|char
modifier|*
name|addr
decl_stmt|;
struct|struct
block|{
name|u_int
name|results_len
decl_stmt|;
name|char
modifier|*
name|results_val
decl_stmt|;
block|}
name|results
struct|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_rmtcallres
name|rpcb_rmtcallres
typedef|;
comment|/*  * Client-side only representation of rpcb_rmtcallres structure.  */
struct|struct
name|r_rpcb_rmtcallres
block|{
name|char
modifier|*
name|addr
decl_stmt|;
struct|struct
block|{
name|uint32_t
name|results_len
decl_stmt|;
name|char
modifier|*
name|results_val
decl_stmt|;
block|}
name|results
struct|;
name|xdrproc_t
name|xdr_res
decl_stmt|;
comment|/* decodes results */
block|}
struct|;
comment|/*  * rpcb_entry contains a merged address of a service on a particular  * transport, plus associated netconfig information.  A list of rpcb_entrys  * is returned by RPCBPROC_GETADDRLIST.  See netconfig.h for values used  * in r_nc_* fields.  */
struct|struct
name|rpcb_entry
block|{
name|char
modifier|*
name|r_maddr
decl_stmt|;
name|char
modifier|*
name|r_nc_netid
decl_stmt|;
name|u_int
name|r_nc_semantics
decl_stmt|;
name|char
modifier|*
name|r_nc_protofmly
decl_stmt|;
name|char
modifier|*
name|r_nc_proto
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_entry
name|rpcb_entry
typedef|;
comment|/*  * A list of addresses supported by a service.  */
struct|struct
name|rpcb_entry_list
block|{
name|rpcb_entry
name|rpcb_entry_map
decl_stmt|;
name|struct
name|rpcb_entry_list
modifier|*
name|rpcb_entry_next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_entry_list
name|rpcb_entry_list
typedef|;
typedef|typedef
name|rpcb_entry_list
modifier|*
name|rpcb_entry_list_ptr
typedef|;
comment|/*  * rpcbind statistics  */
define|#
directive|define
name|rpcb_highproc_2
value|RPCBPROC_CALLIT
define|#
directive|define
name|rpcb_highproc_3
value|RPCBPROC_TADDR2UADDR
define|#
directive|define
name|rpcb_highproc_4
value|RPCBPROC_GETSTAT
define|#
directive|define
name|RPCBSTAT_HIGHPROC
value|13
define|#
directive|define
name|RPCBVERS_STAT
value|3
define|#
directive|define
name|RPCBVERS_4_STAT
value|2
define|#
directive|define
name|RPCBVERS_3_STAT
value|1
define|#
directive|define
name|RPCBVERS_2_STAT
value|0
comment|/* Link list of all the stats about getport and getaddr */
struct|struct
name|rpcbs_addrlist
block|{
name|rpcprog_t
name|prog
decl_stmt|;
name|rpcvers_t
name|vers
decl_stmt|;
name|int
name|success
decl_stmt|;
name|int
name|failure
decl_stmt|;
name|char
modifier|*
name|netid
decl_stmt|;
name|struct
name|rpcbs_addrlist
modifier|*
name|next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcbs_addrlist
name|rpcbs_addrlist
typedef|;
comment|/* Link list of all the stats about rmtcall */
struct|struct
name|rpcbs_rmtcalllist
block|{
name|rpcprog_t
name|prog
decl_stmt|;
name|rpcvers_t
name|vers
decl_stmt|;
name|rpcproc_t
name|proc
decl_stmt|;
name|int
name|success
decl_stmt|;
name|int
name|failure
decl_stmt|;
name|int
name|indirect
decl_stmt|;
name|char
modifier|*
name|netid
decl_stmt|;
name|struct
name|rpcbs_rmtcalllist
modifier|*
name|next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcbs_rmtcalllist
name|rpcbs_rmtcalllist
typedef|;
typedef|typedef
name|int
name|rpcbs_proc
index|[
name|RPCBSTAT_HIGHPROC
index|]
typedef|;
typedef|typedef
name|rpcbs_addrlist
modifier|*
name|rpcbs_addrlist_ptr
typedef|;
typedef|typedef
name|rpcbs_rmtcalllist
modifier|*
name|rpcbs_rmtcalllist_ptr
typedef|;
struct|struct
name|rpcb_stat
block|{
name|rpcbs_proc
name|info
decl_stmt|;
name|int
name|setinfo
decl_stmt|;
name|int
name|unsetinfo
decl_stmt|;
name|rpcbs_addrlist_ptr
name|addrinfo
decl_stmt|;
name|rpcbs_rmtcalllist_ptr
name|rmtinfo
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_stat
name|rpcb_stat
typedef|;
comment|/*  * One rpcb_stat structure is returned for each version of rpcbind  * being monitored.  */
typedef|typedef
name|rpcb_stat
name|rpcb_stat_byvers
index|[
name|RPCBVERS_STAT
index|]
typedef|;
comment|/*  * We don't define netbuf in RPCL, since it would contain structure member  * names that would conflict with the definition of struct netbuf in  *<tiuser.h>.  Instead we merely declare the XDR routine xdr_netbuf() here,  * and implement it ourselves in rpc/rpcb_prot.c.  */
ifdef|#
directive|ifdef
name|__cplusplus
extern|extern
literal|"C"
name|bool_t
name|xdr_netbuf
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|struct
name|netbuf
modifier|*
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* __STDC__ */
specifier|extern
name|bool_t
name|xdr_netbuf
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|struct
name|netbuf
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
define|#
directive|define
name|RPCBVERS_3
value|RPCBVERS
define|#
directive|define
name|RPCBVERS_4
value|RPCBVERS4
else|#
directive|else
comment|/* ndef _KERNEL */
ifdef|#
directive|ifdef
name|__cplusplus
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * A mapping of (program, version, network ID) to address  */
struct|struct
name|rpcb
block|{
name|rpcprog_t
name|r_prog
decl_stmt|;
comment|/* program number */
name|rpcvers_t
name|r_vers
decl_stmt|;
comment|/* version number */
name|char
modifier|*
name|r_netid
decl_stmt|;
comment|/* network id */
name|char
modifier|*
name|r_addr
decl_stmt|;
comment|/* universal address */
name|char
modifier|*
name|r_owner
decl_stmt|;
comment|/* owner of the mapping */
block|}
struct|;
typedef|typedef
name|struct
name|rpcb
name|RPCB
typedef|;
comment|/*  * A list of mappings  */
struct|struct
name|rpcblist
block|{
name|RPCB
name|rpcb_map
decl_stmt|;
name|struct
name|rpcblist
modifier|*
name|rpcb_next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcblist
name|RPCBLIST
typedef|;
typedef|typedef
name|struct
name|rpcblist
modifier|*
name|rpcblist_ptr
typedef|;
comment|/*  * Remote calls arguments  */
struct|struct
name|rpcb_rmtcallargs
block|{
name|rpcprog_t
name|prog
decl_stmt|;
comment|/* program number */
name|rpcvers_t
name|vers
decl_stmt|;
comment|/* version number */
name|rpcproc_t
name|proc
decl_stmt|;
comment|/* procedure number */
name|uint32_t
name|arglen
decl_stmt|;
comment|/* arg len */
name|caddr_t
name|args_ptr
decl_stmt|;
comment|/* argument */
name|xdrproc_t
name|xdr_args
decl_stmt|;
comment|/* XDR routine for argument */
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_rmtcallargs
name|rpcb_rmtcallargs
typedef|;
comment|/*  * Remote calls results  */
struct|struct
name|rpcb_rmtcallres
block|{
name|char
modifier|*
name|addr_ptr
decl_stmt|;
comment|/* remote universal address */
name|uint32_t
name|resultslen
decl_stmt|;
comment|/* results length */
name|caddr_t
name|results_ptr
decl_stmt|;
comment|/* results */
name|xdrproc_t
name|xdr_results
decl_stmt|;
comment|/* XDR routine for result */
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_rmtcallres
name|rpcb_rmtcallres
typedef|;
struct|struct
name|rpcb_entry
block|{
name|char
modifier|*
name|r_maddr
decl_stmt|;
name|char
modifier|*
name|r_nc_netid
decl_stmt|;
name|unsigned
name|int
name|r_nc_semantics
decl_stmt|;
name|char
modifier|*
name|r_nc_protofmly
decl_stmt|;
name|char
modifier|*
name|r_nc_proto
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_entry
name|rpcb_entry
typedef|;
comment|/*  * A list of addresses supported by a service.  */
struct|struct
name|rpcb_entry_list
block|{
name|rpcb_entry
name|rpcb_entry_map
decl_stmt|;
name|struct
name|rpcb_entry_list
modifier|*
name|rpcb_entry_next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_entry_list
name|rpcb_entry_list
typedef|;
typedef|typedef
name|rpcb_entry_list
modifier|*
name|rpcb_entry_list_ptr
typedef|;
comment|/*  * rpcbind statistics  */
define|#
directive|define
name|rpcb_highproc_2
value|RPCBPROC_CALLIT
define|#
directive|define
name|rpcb_highproc_3
value|RPCBPROC_TADDR2UADDR
define|#
directive|define
name|rpcb_highproc_4
value|RPCBPROC_GETSTAT
define|#
directive|define
name|RPCBSTAT_HIGHPROC
value|13
define|#
directive|define
name|RPCBVERS_STAT
value|3
define|#
directive|define
name|RPCBVERS_4_STAT
value|2
define|#
directive|define
name|RPCBVERS_3_STAT
value|1
define|#
directive|define
name|RPCBVERS_2_STAT
value|0
comment|/* Link list of all the stats about getport and getaddr */
struct|struct
name|rpcbs_addrlist
block|{
name|rpcprog_t
name|prog
decl_stmt|;
name|rpcvers_t
name|vers
decl_stmt|;
name|int
name|success
decl_stmt|;
name|int
name|failure
decl_stmt|;
name|char
modifier|*
name|netid
decl_stmt|;
name|struct
name|rpcbs_addrlist
modifier|*
name|next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcbs_addrlist
name|rpcbs_addrlist
typedef|;
comment|/* Link list of all the stats about rmtcall */
struct|struct
name|rpcbs_rmtcalllist
block|{
name|rpcprog_t
name|prog
decl_stmt|;
name|rpcvers_t
name|vers
decl_stmt|;
name|rpcproc_t
name|proc
decl_stmt|;
name|int
name|success
decl_stmt|;
name|int
name|failure
decl_stmt|;
name|int
name|indirect
decl_stmt|;
name|char
modifier|*
name|netid
decl_stmt|;
name|struct
name|rpcbs_rmtcalllist
modifier|*
name|next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcbs_rmtcalllist
name|rpcbs_rmtcalllist
typedef|;
typedef|typedef
name|int
name|rpcbs_proc
index|[
name|RPCBSTAT_HIGHPROC
index|]
typedef|;
typedef|typedef
name|rpcbs_addrlist
modifier|*
name|rpcbs_addrlist_ptr
typedef|;
typedef|typedef
name|rpcbs_rmtcalllist
modifier|*
name|rpcbs_rmtcalllist_ptr
typedef|;
struct|struct
name|rpcb_stat
block|{
name|rpcbs_proc
name|info
decl_stmt|;
name|int
name|setinfo
decl_stmt|;
name|int
name|unsetinfo
decl_stmt|;
name|rpcbs_addrlist_ptr
name|addrinfo
decl_stmt|;
name|rpcbs_rmtcalllist_ptr
name|rmtinfo
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|rpcb_stat
name|rpcb_stat
typedef|;
comment|/*  * One rpcb_stat structure is returned for each version of rpcbind  * being monitored.  */
typedef|typedef
name|rpcb_stat
name|rpcb_stat_byvers
index|[
name|RPCBVERS_STAT
index|]
typedef|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
endif|#
directive|endif
endif|#
directive|endif
comment|/* ndef _KERNEL */
define|#
directive|define
name|_PATH_RPCBINDSOCK
value|"/var/run/rpcbind.sock"
define|#
directive|define
name|RPCBPROG
value|((unsigned long)(100000))
define|#
directive|define
name|RPCBVERS
value|((unsigned long)(3))
specifier|extern
name|void
name|rpcbprog_3
parameter_list|(
name|struct
name|svc_req
modifier|*
name|rqstp
parameter_list|,
name|SVCXPRT
modifier|*
name|transp
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_SET
value|((unsigned long)(1))
specifier|extern
name|bool_t
modifier|*
name|rpcbproc_set_3
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
modifier|*
name|rpcbproc_set_3_svc
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_UNSET
value|((unsigned long)(2))
specifier|extern
name|bool_t
modifier|*
name|rpcbproc_unset_3
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
modifier|*
name|rpcbproc_unset_3_svc
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_GETADDR
value|((unsigned long)(3))
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_getaddr_3
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_getaddr_3_svc
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_DUMP
value|((unsigned long)(4))
specifier|extern
name|rpcblist_ptr
modifier|*
name|rpcbproc_dump_3
parameter_list|(
name|void
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|rpcblist_ptr
modifier|*
name|rpcbproc_dump_3_svc
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_CALLIT
value|((unsigned long)(5))
specifier|extern
name|rpcb_rmtcallres
modifier|*
name|rpcbproc_callit_3
parameter_list|(
name|rpcb_rmtcallargs
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|rpcb_rmtcallres
modifier|*
name|rpcbproc_callit_3_svc
parameter_list|(
name|rpcb_rmtcallargs
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_GETTIME
value|((unsigned long)(6))
specifier|extern
name|u_int
modifier|*
name|rpcbproc_gettime_3
parameter_list|(
name|void
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|u_int
modifier|*
name|rpcbproc_gettime_3_svc
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_UADDR2TADDR
value|((unsigned long)(7))
specifier|extern
name|struct
name|netbuf
modifier|*
name|rpcbproc_uaddr2taddr_3
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|netbuf
modifier|*
name|rpcbproc_uaddr2taddr_3_svc
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_TADDR2UADDR
value|((unsigned long)(8))
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_taddr2uaddr_3
parameter_list|(
name|struct
name|netbuf
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_taddr2uaddr_3_svc
parameter_list|(
name|struct
name|netbuf
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|rpcbprog_3_freeresult
parameter_list|(
name|SVCXPRT
modifier|*
parameter_list|,
name|xdrproc_t
parameter_list|,
name|caddr_t
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBVERS4
value|((unsigned long)(4))
specifier|extern
name|void
name|rpcbprog_4
parameter_list|(
name|struct
name|svc_req
modifier|*
name|rqstp
parameter_list|,
name|SVCXPRT
modifier|*
name|transp
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
modifier|*
name|rpcbproc_set_4
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
modifier|*
name|rpcbproc_set_4_svc
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
modifier|*
name|rpcbproc_unset_4
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
modifier|*
name|rpcbproc_unset_4_svc
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_getaddr_4
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_getaddr_4_svc
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|rpcblist_ptr
modifier|*
name|rpcbproc_dump_4
parameter_list|(
name|void
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|rpcblist_ptr
modifier|*
name|rpcbproc_dump_4_svc
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_BCAST
value|((unsigned long)(RPCBPROC_CALLIT))
specifier|extern
name|rpcb_rmtcallres
modifier|*
name|rpcbproc_bcast_4
parameter_list|(
name|rpcb_rmtcallargs
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|rpcb_rmtcallres
modifier|*
name|rpcbproc_bcast_4_svc
parameter_list|(
name|rpcb_rmtcallargs
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|u_int
modifier|*
name|rpcbproc_gettime_4
parameter_list|(
name|void
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|u_int
modifier|*
name|rpcbproc_gettime_4_svc
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|netbuf
modifier|*
name|rpcbproc_uaddr2taddr_4
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|netbuf
modifier|*
name|rpcbproc_uaddr2taddr_4_svc
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_taddr2uaddr_4
parameter_list|(
name|struct
name|netbuf
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_taddr2uaddr_4_svc
parameter_list|(
name|struct
name|netbuf
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_GETVERSADDR
value|((unsigned long)(9))
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_getversaddr_4
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
modifier|*
name|rpcbproc_getversaddr_4_svc
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_INDIRECT
value|((unsigned long)(10))
specifier|extern
name|rpcb_rmtcallres
modifier|*
name|rpcbproc_indirect_4
parameter_list|(
name|rpcb_rmtcallargs
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|rpcb_rmtcallres
modifier|*
name|rpcbproc_indirect_4_svc
parameter_list|(
name|rpcb_rmtcallargs
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_GETADDRLIST
value|((unsigned long)(11))
specifier|extern
name|rpcb_entry_list_ptr
modifier|*
name|rpcbproc_getaddrlist_4
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|rpcb_entry_list_ptr
modifier|*
name|rpcbproc_getaddrlist_4_svc
parameter_list|(
name|RPCB
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|RPCBPROC_GETSTAT
value|((unsigned long)(12))
specifier|extern
name|rpcb_stat
modifier|*
name|rpcbproc_getstat_4
parameter_list|(
name|void
modifier|*
parameter_list|,
name|CLIENT
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|rpcb_stat
modifier|*
name|rpcbproc_getstat_4_svc
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|rpcbprog_4_freeresult
parameter_list|(
name|SVCXPRT
modifier|*
parameter_list|,
name|xdrproc_t
parameter_list|,
name|caddr_t
parameter_list|)
function_decl|;
comment|/* the xdr functions */
specifier|extern
name|bool_t
name|xdr_rpcb
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|RPCB
modifier|*
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|_KERNEL
specifier|extern
name|bool_t
name|xdr_rp__list
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rp__list
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|extern
name|bool_t
name|xdr_rpcblist_ptr
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcblist_ptr
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcb_rmtcallargs
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcb_rmtcallargs
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcb_rmtcallres
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcb_rmtcallres
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcb_entry
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcb_entry
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcb_entry_list
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcb_entry_list
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcb_entry_list_ptr
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcb_entry_list_ptr
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcbs_addrlist
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcbs_addrlist
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcbs_rmtcalllist
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcbs_rmtcalllist
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcbs_proc
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcbs_proc
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcbs_addrlist_ptr
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcbs_addrlist_ptr
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcbs_rmtcalllist_ptr
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcbs_rmtcalllist_ptr
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcb_stat
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcb_stat
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bool_t
name|xdr_rpcb_stat_byvers
parameter_list|(
name|XDR
modifier|*
parameter_list|,
name|rpcb_stat_byvers
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_RPCB_PROT_H_RPCGEN */
end_comment

end_unit

