begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $NetBSD: bus.h,v 1.22 1998/05/13 21:21:16 thorpej Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,  * NASA Ames Research Center.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the NetBSD  *	Foundation, Inc. and its contributors.  * 4. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * Copyright (c) 1996 Carnegie-Mellon University.  * All rights reserved.  *  * Author: Chris G. Demetriou  *  * Permission to use, copy, modify and distribute this software and  * its documentation is hereby granted, provided that both the copyright  * notice and this permission notice appear in all copies of the  * software, derivative works or modified versions, and any portions  * thereof, and that both notices appear in supporting documentation.  *  * CARNEGIE MELLON ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS"  * CONDITION.  CARNEGIE MELLON DISCLAIMS ANY LIABILITY OF ANY KIND  * FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.  *  * Carnegie Mellon requests users of this software to return to  *  *  Software Distribution Coordinator  or  Software.Distribution@CS.CMU.EDU  *  School of Computer Science  *  Carnegie Mellon University  *  Pittsburgh PA 15213-3890  *  * any improvements or extensions that they make and grant Carnegie the  * rights to redistribute these changes.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ALPHA_BUS_H_
end_ifndef

begin_define
define|#
directive|define
name|_ALPHA_BUS_H_
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__BUS_SPACE_COMPAT_OLDDEFS
end_ifndef

begin_define
define|#
directive|define
name|__BUS_SPACE_COMPAT_OLDDEFS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Addresses (in bus space).  */
end_comment

begin_typedef
typedef|typedef
name|u_long
name|bus_addr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_long
name|bus_size_t
typedef|;
end_typedef

begin_comment
comment|/*  * Access methods for bus space.  */
end_comment

begin_typedef
typedef|typedef
name|struct
name|alpha_bus_space
modifier|*
name|bus_space_tag_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_long
name|bus_space_handle_t
typedef|;
end_typedef

begin_struct
struct|struct
name|alpha_bus_space
block|{
comment|/* cookie */
name|void
modifier|*
name|abs_cookie
decl_stmt|;
comment|/* mapping/unmapping */
name|int
argument_list|(
argument|*abs_map
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_addr_t
operator|,
name|bus_size_t
operator|,
name|int
operator|,
name|bus_space_handle_t
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_unmap
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*abs_subregion
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* allocation/deallocation */
name|int
argument_list|(
argument|*abs_alloc
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_addr_t
operator|,
name|bus_addr_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
name|int
operator|,
name|bus_addr_t
operator|*
operator|,
name|bus_space_handle_t
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_free
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
comment|/* barrier */
name|void
argument_list|(
argument|*abs_barrier
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
comment|/* read (single) */
name|u_int8_t
argument_list|(
argument|*abs_r_1
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|u_int16_t
argument_list|(
argument|*abs_r_2
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|u_int32_t
argument_list|(
argument|*abs_r_4
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|u_int64_t
argument_list|(
argument|*abs_r_8
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
comment|/* read multiple */
name|void
argument_list|(
argument|*abs_rm_1
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int8_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_rm_2
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int16_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_rm_4
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int32_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_rm_8
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int64_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
comment|/* read region */
name|void
argument_list|(
argument|*abs_rr_1
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int8_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_rr_2
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int16_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_rr_4
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int32_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_rr_8
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int64_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
comment|/* write (single) */
name|void
argument_list|(
argument|*abs_w_1
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int8_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_w_2
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int16_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_w_4
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int32_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_w_8
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int64_t
operator|)
argument_list|)
expr_stmt|;
comment|/* write multiple */
name|void
argument_list|(
argument|*abs_wm_1
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int8_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_wm_2
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int16_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_wm_4
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int32_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_wm_8
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int64_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
comment|/* write region */
name|void
argument_list|(
argument|*abs_wr_1
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int8_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_wr_2
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int16_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_wr_4
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int32_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_wr_8
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int64_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
comment|/* set multiple */
name|void
argument_list|(
argument|*abs_sm_1
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int8_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_sm_2
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int16_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_sm_4
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int32_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_sm_8
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int64_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
comment|/* set region */
name|void
argument_list|(
argument|*abs_sr_1
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int8_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_sr_2
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int16_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_sr_4
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int32_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_sr_8
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int64_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
comment|/* copy */
name|void
argument_list|(
argument|*abs_c_1
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_c_2
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_c_4
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*abs_c_8
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Utility macros; INTERNAL USE ONLY.  */
end_comment

begin_define
define|#
directive|define
name|__abs_c
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|__CONCAT(a,b)
end_define

begin_define
define|#
directive|define
name|__abs_opname
parameter_list|(
name|op
parameter_list|,
name|size
parameter_list|)
value|__abs_c(__abs_c(__abs_c(abs_,op),_),size)
end_define

begin_define
define|#
directive|define
name|__abs_rs
parameter_list|(
name|sz
parameter_list|,
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|(*(t)->__abs_opname(r,sz))((t)->abs_cookie, h, o)
end_define

begin_define
define|#
directive|define
name|__abs_ws
parameter_list|(
name|sz
parameter_list|,
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|(*(t)->__abs_opname(w,sz))((t)->abs_cookie, h, o, v)
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|DEBUG
end_ifndef

begin_define
define|#
directive|define
name|__abs_nonsingle
parameter_list|(
name|type
parameter_list|,
name|sz
parameter_list|,
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|(*(t)->__abs_opname(type,sz))((t)->abs_cookie, h, o, a, c)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__abs_nonsingle
parameter_list|(
name|type
parameter_list|,
name|sz
parameter_list|,
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|do {								\ 	if (((unsigned long)a& (sz - 1)) != 0)				\ 		panic("bus non-single %d-byte unaligned (to %p) at %s:%d", \ 		    sz, a, __FILE__, __LINE__);				\ 	(*(t)->__abs_opname(type,sz))((t)->abs_cookie, h, o, a, c);	\     } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|__abs_set
parameter_list|(
name|type
parameter_list|,
name|sz
parameter_list|,
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|(*(t)->__abs_opname(type,sz))((t)->abs_cookie, h, o, v, c)
end_define

begin_define
define|#
directive|define
name|__abs_copy
parameter_list|(
name|sz
parameter_list|,
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|cnt
parameter_list|)
define|\
value|(*(t)->__abs_opname(c,sz))((t)->abs_cookie, h1, o1, h2, o2, cnt)
end_define

begin_comment
comment|/*  * Mapping and unmapping operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_map
parameter_list|(
name|t
parameter_list|,
name|a
parameter_list|,
name|s
parameter_list|,
name|f
parameter_list|,
name|hp
parameter_list|)
define|\
value|(*(t)->abs_map)((t)->abs_cookie, (a), (s), (f), (hp))
end_define

begin_define
define|#
directive|define
name|bus_space_unmap
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|s
parameter_list|)
define|\
value|(*(t)->abs_unmap)((t)->abs_cookie, (h), (s))
end_define

begin_define
define|#
directive|define
name|bus_space_subregion
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|s
parameter_list|,
name|hp
parameter_list|)
define|\
value|(*(t)->abs_subregion)((t)->abs_cookie, (h), (o), (s), (hp))
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_CACHEABLE
value|0x01
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_LINEAR
value|0x02
end_define

begin_comment
comment|/*  * Allocation and deallocation operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_alloc
parameter_list|(
name|t
parameter_list|,
name|rs
parameter_list|,
name|re
parameter_list|,
name|s
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|f
parameter_list|,
name|ap
parameter_list|,
name|hp
parameter_list|)
define|\
value|(*(t)->abs_alloc)((t)->abs_cookie, (rs), (re), (s), (a), (b),	\ 	    (f), (ap), (hp))
end_define

begin_define
define|#
directive|define
name|bus_space_free
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|s
parameter_list|)
define|\
value|(*(t)->abs_free)((t)->abs_cookie, (h), (s))
end_define

begin_comment
comment|/*  * Bus barrier operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_barrier
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|l
parameter_list|,
name|f
parameter_list|)
define|\
value|(*(t)->abs_barrier)((t)->abs_cookie, (h), (o), (l), (f))
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_READ
value|0x01
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_WRITE
value|0x02
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__BUS_SPACE_COMPAT_OLDDEFS
end_ifdef

begin_comment
comment|/* compatibility definitions; deprecated */
end_comment

begin_define
define|#
directive|define
name|BUS_BARRIER_READ
value|BUS_SPACE_BARRIER_READ
end_define

begin_define
define|#
directive|define
name|BUS_BARRIER_WRITE
value|BUS_SPACE_BARRIER_WRITE
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Bus read (single) operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|__abs_rs(1,(t),(h),(o))
end_define

begin_define
define|#
directive|define
name|bus_space_read_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|__abs_rs(2,(t),(h),(o))
end_define

begin_define
define|#
directive|define
name|bus_space_read_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|__abs_rs(4,(t),(h),(o))
end_define

begin_define
define|#
directive|define
name|bus_space_read_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|__abs_rs(8,(t),(h),(o))
end_define

begin_comment
comment|/*  * Bus read multiple operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_multi_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(rm,1,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(rm,2,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(rm,4,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(rm,8,(t),(h),(o),(a),(c))
end_define

begin_comment
comment|/*  * Bus read region operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_region_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(rr,1,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(rr,2,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(rr,4,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(rr,8,(t),(h),(o),(a),(c))
end_define

begin_comment
comment|/*  * Bus write (single) operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_write_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|__abs_ws(1,(t),(h),(o),(v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|__abs_ws(2,(t),(h),(o),(v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|__abs_ws(4,(t),(h),(o),(v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|__abs_ws(8,(t),(h),(o),(v))
end_define

begin_comment
comment|/*  * Bus write multiple operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_write_multi_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(wm,1,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(wm,2,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(wm,4,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(wm,8,(t),(h),(o),(a),(c))
end_define

begin_comment
comment|/*  * Bus write region operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_write_region_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(wr,1,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(wr,2,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(wr,4,(t),(h),(o),(a),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_nonsingle(wr,8,(t),(h),(o),(a),(c))
end_define

begin_comment
comment|/*  * Set multiple operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_set_multi_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_set(sm,1,(t),(h),(o),(v),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_set(sm,2,(t),(h),(o),(v),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_set(sm,4,(t),(h),(o),(v),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_set(sm,8,(t),(h),(o),(v),(c))
end_define

begin_comment
comment|/*  * Set region operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_set_region_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_set(sr,1,(t),(h),(o),(v),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_set(sr,2,(t),(h),(o),(v),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_set(sr,4,(t),(h),(o),(v),(c))
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_set(sr,8,(t),(h),(o),(v),(c))
end_define

begin_comment
comment|/*  * Copy region operations.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_copy_region_1
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_copy(1, (t), (h1), (o1), (h2), (o2), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_2
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_copy(2, (t), (h1), (o1), (h2), (o2), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_4
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_copy(4, (t), (h1), (o1), (h2), (o2), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_8
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|__abs_copy(8, (t), (h1), (o1), (h2), (o2), (c))
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__BUS_SPACE_COMPAT_OLDDEFS
end_ifdef

begin_comment
comment|/* compatibility definitions; deprecated */
end_comment

begin_define
define|#
directive|define
name|bus_space_copy_1
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_1((t), (h1), (o1), (h2), (o2), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_copy_2
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_1((t), (h1), (o1), (h2), (o2), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_copy_4
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_1((t), (h1), (o1), (h2), (o2), (c))
end_define

begin_define
define|#
directive|define
name|bus_space_copy_8
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_1((t), (h1), (o1), (h2), (o2), (c))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Bus DMA methods.  */
end_comment

begin_comment
comment|/*  * Flags used in various bus DMA methods.  */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_WAITOK
value|0x00
end_define

begin_comment
comment|/* safe to sleep (pseudo-flag) */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_NOWAIT
value|0x01
end_define

begin_comment
comment|/* not safe to sleep */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_ALLOCNOW
value|0x02
end_define

begin_comment
comment|/* perform resource allocation now */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_COHERENT
value|0x04
end_define

begin_comment
comment|/* hint: map memory DMA coherent */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_BUS1
value|0x10
end_define

begin_comment
comment|/* placeholders for bus functions... */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_BUS2
value|0x20
end_define

begin_define
define|#
directive|define
name|BUS_DMA_BUS3
value|0x40
end_define

begin_define
define|#
directive|define
name|BUS_DMA_BUS4
value|0x80
end_define

begin_comment
comment|/*  * Private flags stored in the DMA map.  */
end_comment

begin_define
define|#
directive|define
name|DMAMAP_HAS_SGMAP
value|0x80000000
end_define

begin_comment
comment|/* sgva/len are valid */
end_comment

begin_comment
comment|/* Forwards needed by prototypes below. */
end_comment

begin_struct_decl
struct_decl|struct
name|mbuf
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|uio
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|alpha_sgmap
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * Operations performed by bus_dmamap_sync().  */
end_comment

begin_define
define|#
directive|define
name|BUS_DMASYNC_PREREAD
value|0x01
end_define

begin_comment
comment|/* pre-read synchronization */
end_comment

begin_define
define|#
directive|define
name|BUS_DMASYNC_POSTREAD
value|0x02
end_define

begin_comment
comment|/* post-read synchronization */
end_comment

begin_define
define|#
directive|define
name|BUS_DMASYNC_PREWRITE
value|0x04
end_define

begin_comment
comment|/* pre-write synchronization */
end_comment

begin_define
define|#
directive|define
name|BUS_DMASYNC_POSTWRITE
value|0x08
end_define

begin_comment
comment|/* post-write synchronization */
end_comment

begin_comment
comment|/*  *	alpha_bus_t  *  *	Busses supported by NetBSD/alpha, used by internal  *	utility functions.  NOT TO BE USED BY MACHINE-INDEPENDENT  *	CODE!  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|ALPHA_BUS_TURBOCHANNEL
block|,
name|ALPHA_BUS_PCI
block|,
name|ALPHA_BUS_EISA
block|,
name|ALPHA_BUS_ISA
block|,
name|ALPHA_BUS_TLSB
block|, }
name|alpha_bus_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|alpha_bus_dma_tag
modifier|*
name|bus_dma_tag_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|alpha_bus_dmamap
modifier|*
name|bus_dmamap_t
typedef|;
end_typedef

begin_comment
comment|/*  *	bus_dma_segment_t  *  *	Describes a single contiguous DMA transaction.  Values  *	are suitable for programming into DMA registers.  */
end_comment

begin_struct
struct|struct
name|alpha_bus_dma_segment
block|{
name|bus_addr_t
name|ds_addr
decl_stmt|;
comment|/* DMA address */
name|bus_size_t
name|ds_len
decl_stmt|;
comment|/* length of transfer */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|alpha_bus_dma_segment
name|bus_dma_segment_t
typedef|;
end_typedef

begin_comment
comment|/*  *	bus_dma_tag_t  *  *	A machine-dependent opaque type describing the implementation of  *	DMA for a given bus.  */
end_comment

begin_struct
struct|struct
name|alpha_bus_dma_tag
block|{
name|void
modifier|*
name|_cookie
decl_stmt|;
comment|/* cookie used in the guts */
name|bus_addr_t
name|_wbase
decl_stmt|;
comment|/* DMA window base */
comment|/* 	 * The following two members are used to chain DMA windows 	 * together.  If, during the course of a map load, the 	 * resulting physical memory address is too large to 	 * be addressed by the window, the next window will be 	 * attempted.  These would be chained together like so: 	 * 	 *	direct -> sgmap -> NULL 	 *  or 	 *	sgmap -> NULL 	 *  or 	 *	direct -> NULL 	 * 	 * If the window size is 0, it will not be checked (e.g. 	 * TurboChannel DMA). 	 */
name|bus_size_t
name|_wsize
decl_stmt|;
name|struct
name|alpha_bus_dma_tag
modifier|*
name|_next_window
decl_stmt|;
comment|/* 	 * A chipset may have more than one SGMAP window, so SGMAP 	 * windows also get a pointer to their SGMAP state. 	 */
name|struct
name|alpha_sgmap
modifier|*
name|_sgmap
decl_stmt|;
comment|/* 	 * Internal-use only utility methods.  NOT TO BE USED BY 	 * MACHINE-INDEPENDENT CODE! 	 */
name|bus_dma_tag_t
argument_list|(
argument|*_get_tag
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|alpha_bus_t
operator|)
argument_list|)
expr_stmt|;
comment|/* 	 * DMA mapping methods. 	 */
name|int
argument_list|(
argument|*_dmamap_create
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_size_t
operator|,
name|int
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
name|int
operator|,
name|bus_dmamap_t
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*_dmamap_destroy
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*_dmamap_load
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
name|void
operator|*
operator|,
name|bus_size_t
operator|,
expr|struct
name|proc
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*_dmamap_load_mbuf
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
expr|struct
name|mbuf
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*_dmamap_load_uio
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
expr|struct
name|uio
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*_dmamap_load_raw
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
name|bus_dma_segment_t
operator|*
operator|,
name|int
operator|,
name|bus_size_t
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*_dmamap_unload
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*_dmamap_sync
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
name|bus_addr_t
operator|,
name|bus_size_t
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
comment|/* 	 * DMA memory utility functions. 	 */
name|int
argument_list|(
argument|*_dmamem_alloc
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
name|bus_dma_segment_t
operator|*
operator|,
name|int
operator|,
name|int
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*_dmamem_free
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dma_segment_t
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*_dmamem_map
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dma_segment_t
operator|*
operator|,
name|int
operator|,
name|size_t
operator|,
name|caddr_t
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*_dmamem_unmap
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|caddr_t
operator|,
name|size_t
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*_dmamem_mmap
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dma_segment_t
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|alphabus_dma_get_tag
parameter_list|(
name|t
parameter_list|,
name|b
parameter_list|)
define|\
value|(*(t)->_get_tag)(t, b)
end_define

begin_define
define|#
directive|define
name|bus_dmamap_create
parameter_list|(
name|t
parameter_list|,
name|s
parameter_list|,
name|n
parameter_list|,
name|m
parameter_list|,
name|b
parameter_list|,
name|f
parameter_list|,
name|p
parameter_list|)
define|\
value|(*(t)->_dmamap_create)((t), (s), (n), (m), (b), (f), (p))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_destroy
parameter_list|(
name|t
parameter_list|,
name|p
parameter_list|)
define|\
value|(*(t)->_dmamap_destroy)((t), (p))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_load
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|b
parameter_list|,
name|s
parameter_list|,
name|p
parameter_list|,
name|f
parameter_list|)
define|\
value|(*(t)->_dmamap_load)((t), (m), (b), (s), (p), (f))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_load_mbuf
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|b
parameter_list|,
name|f
parameter_list|)
define|\
value|(*(t)->_dmamap_load_mbuf)((t), (m), (b), (f))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_load_uio
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|u
parameter_list|,
name|f
parameter_list|)
define|\
value|(*(t)->_dmamap_load_uio)((t), (m), (u), (f))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_load_raw
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|sg
parameter_list|,
name|n
parameter_list|,
name|s
parameter_list|,
name|f
parameter_list|)
define|\
value|(*(t)->_dmamap_load_raw)((t), (m), (sg), (n), (s), (f))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_unload
parameter_list|(
name|t
parameter_list|,
name|p
parameter_list|)
define|\
value|(*(t)->_dmamap_unload)((t), (p))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_sync
parameter_list|(
name|t
parameter_list|,
name|p
parameter_list|,
name|o
parameter_list|,
name|l
parameter_list|,
name|ops
parameter_list|)
define|\
value|(*(t)->_dmamap_sync)((t), (p), (o), (l), (ops))
end_define

begin_define
define|#
directive|define
name|bus_dmamem_alloc
parameter_list|(
name|t
parameter_list|,
name|s
parameter_list|,
name|a
parameter_list|,
name|b
parameter_list|,
name|sg
parameter_list|,
name|n
parameter_list|,
name|r
parameter_list|,
name|f
parameter_list|)
define|\
value|(*(t)->_dmamem_alloc)((t), (s), (a), (b), (sg), (n), (r), (f))
end_define

begin_define
define|#
directive|define
name|bus_dmamem_free
parameter_list|(
name|t
parameter_list|,
name|sg
parameter_list|,
name|n
parameter_list|)
define|\
value|(*(t)->_dmamem_free)((t), (sg), (n))
end_define

begin_define
define|#
directive|define
name|bus_dmamem_map
parameter_list|(
name|t
parameter_list|,
name|sg
parameter_list|,
name|n
parameter_list|,
name|s
parameter_list|,
name|k
parameter_list|,
name|f
parameter_list|)
define|\
value|(*(t)->_dmamem_map)((t), (sg), (n), (s), (k), (f))
end_define

begin_define
define|#
directive|define
name|bus_dmamem_unmap
parameter_list|(
name|t
parameter_list|,
name|k
parameter_list|,
name|s
parameter_list|)
define|\
value|(*(t)->_dmamem_unmap)((t), (k), (s))
end_define

begin_define
define|#
directive|define
name|bus_dmamem_mmap
parameter_list|(
name|t
parameter_list|,
name|sg
parameter_list|,
name|n
parameter_list|,
name|o
parameter_list|,
name|p
parameter_list|,
name|f
parameter_list|)
define|\
value|(*(t)->_dmamem_mmap)((t), (sg), (n), (o), (p), (f))
end_define

begin_comment
comment|/*  *	bus_dmamap_t  *  *	Describes a DMA mapping.  */
end_comment

begin_struct
struct|struct
name|alpha_bus_dmamap
block|{
comment|/* 	 * PRIVATE MEMBERS: not for use my machine-independent code. 	 */
name|vm_object_t
name|_dm_obj
decl_stmt|;
comment|/* for allocating pages */
name|bus_size_t
name|_dm_size
decl_stmt|;
comment|/* largest DMA transfer mappable */
name|int
name|_dm_segcnt
decl_stmt|;
comment|/* number of segs this map can map */
name|bus_size_t
name|_dm_maxsegsz
decl_stmt|;
comment|/* largest possible segment */
name|bus_size_t
name|_dm_boundary
decl_stmt|;
comment|/* don't cross this */
name|int
name|_dm_flags
decl_stmt|;
comment|/* misc. flags */
comment|/* 	 * This is used only for SGMAP-mapped DMA, but we keep it 	 * here to avoid pointless indirection. 	 */
name|int
name|_dm_pteidx
decl_stmt|;
comment|/* PTE index */
name|int
name|_dm_ptecnt
decl_stmt|;
comment|/* PTE count */
name|u_long
name|_dm_sgva
decl_stmt|;
comment|/* allocated sgva */
name|bus_size_t
name|_dm_sgvalen
decl_stmt|;
comment|/* svga length */
comment|/* 	 * PUBLIC MEMBERS: these are used by machine-independent code. 	 */
name|bus_size_t
name|dm_mapsize
decl_stmt|;
comment|/* size of the mapping */
name|int
name|dm_nsegs
decl_stmt|;
comment|/* # valid segments in mapping */
name|bus_dma_segment_t
name|dm_segs
index|[
literal|1
index|]
decl_stmt|;
comment|/* segments; variable length */
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_ALPHA_BUS_DMA_PRIVATE
end_ifdef

begin_decl_stmt
name|int
name|_bus_dmamap_create
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_size_t
operator|,
name|int
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
name|int
operator|,
name|bus_dmamap_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_bus_dmamap_destroy
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_bus_dmamap_load_direct
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
name|void
operator|*
operator|,
name|bus_size_t
operator|,
expr|struct
name|proc
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_bus_dmamap_load_mbuf_direct
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
expr|struct
name|mbuf
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_bus_dmamap_load_uio_direct
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
expr|struct
name|uio
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_bus_dmamap_load_raw_direct
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
name|bus_dma_segment_t
operator|*
operator|,
name|int
operator|,
name|bus_size_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_bus_dmamap_unload
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_bus_dmamap_sync
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
name|bus_addr_t
operator|,
name|bus_size_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_bus_dmamem_alloc
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
name|tag
operator|,
name|bus_dmamap_t
operator|,
name|bus_size_t
name|size
operator|,
name|bus_size_t
name|alignment
operator|,
name|bus_size_t
name|boundary
operator|,
name|bus_dma_segment_t
operator|*
name|segs
operator|,
name|int
name|nsegs
operator|,
name|int
operator|*
name|rsegs
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_bus_dmamem_free
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
name|tag
operator|,
name|bus_dma_segment_t
operator|*
name|segs
operator|,
name|int
name|nsegs
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_bus_dmamem_map
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
name|tag
operator|,
name|bus_dma_segment_t
operator|*
name|segs
operator|,
name|int
name|nsegs
operator|,
name|size_t
name|size
operator|,
name|caddr_t
operator|*
name|kvap
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_bus_dmamem_unmap
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
name|tag
operator|,
name|caddr_t
name|kva
operator|,
name|size_t
name|size
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_bus_dmamem_mmap
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
name|tag
operator|,
name|bus_dma_segment_t
operator|*
name|segs
operator|,
name|int
name|nsegs
operator|,
name|int
name|off
operator|,
name|int
name|prot
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ALPHA_BUS_DMA_PRIVATE */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ALPHA_BUS_H_ */
end_comment

end_unit

