begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1998 Doug Rabson  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_CPUFUNC_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_CPUFUNC_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<machine/chipset.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_function
specifier|static
name|__inline
name|void
name|breakpoint
parameter_list|(
name|void
parameter_list|)
block|{
asm|__asm __volatile("call_pal 0x81");
comment|/* XXX bugchk */
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|inb
parameter_list|(
name|port
parameter_list|)
value|chipset.inb(port)
end_define

begin_define
define|#
directive|define
name|inw
parameter_list|(
name|port
parameter_list|)
value|chipset.inw(port)
end_define

begin_define
define|#
directive|define
name|inl
parameter_list|(
name|port
parameter_list|)
value|chipset.inl(port)
end_define

begin_define
define|#
directive|define
name|outb
parameter_list|(
name|port
parameter_list|,
name|data
parameter_list|)
value|chipset.outb(port, data)
end_define

begin_define
define|#
directive|define
name|outw
parameter_list|(
name|port
parameter_list|,
name|data
parameter_list|)
value|chipset.outw(port, data)
end_define

begin_define
define|#
directive|define
name|outl
parameter_list|(
name|port
parameter_list|,
name|data
parameter_list|)
value|chipset.outl(port, data)
end_define

begin_define
define|#
directive|define
name|readb
parameter_list|(
name|pa
parameter_list|)
value|chipset.readb(pa)
end_define

begin_define
define|#
directive|define
name|readw
parameter_list|(
name|pa
parameter_list|)
value|chipset.readw(pa)
end_define

begin_define
define|#
directive|define
name|readl
parameter_list|(
name|pa
parameter_list|)
value|chipset.readl(pa)
end_define

begin_define
define|#
directive|define
name|writeb
parameter_list|(
name|pa
parameter_list|,
name|v
parameter_list|)
value|chipset.writeb(pa,v)
end_define

begin_define
define|#
directive|define
name|writew
parameter_list|(
name|pa
parameter_list|,
name|v
parameter_list|)
value|chipset.writew(pa,v)
end_define

begin_define
define|#
directive|define
name|writel
parameter_list|(
name|pa
parameter_list|,
name|v
parameter_list|)
value|chipset.writel(pa,v)
end_define

begin_comment
comment|/*  * Bulk i/o (for IDE driver).  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|insb
parameter_list|(
name|u_int32_t
name|port
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|u_int8_t
modifier|*
name|p
init|=
operator|(
name|u_int8_t
operator|*
operator|)
name|buffer
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|p
operator|++
operator|=
name|inb
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|insw
parameter_list|(
name|u_int32_t
name|port
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|u_int16_t
modifier|*
name|p
init|=
operator|(
name|u_int16_t
operator|*
operator|)
name|buffer
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|p
operator|++
operator|=
name|inw
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|insl
parameter_list|(
name|u_int32_t
name|port
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|u_int32_t
modifier|*
name|p
init|=
operator|(
name|u_int32_t
operator|*
operator|)
name|buffer
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|p
operator|++
operator|=
name|inl
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outsb
parameter_list|(
name|u_int32_t
name|port
parameter_list|,
specifier|const
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
specifier|const
name|u_int8_t
modifier|*
name|p
init|=
operator|(
specifier|const
name|u_int8_t
operator|*
operator|)
name|buffer
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
name|outb
argument_list|(
name|port
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outsw
parameter_list|(
name|u_int32_t
name|port
parameter_list|,
specifier|const
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
specifier|const
name|u_int16_t
modifier|*
name|p
init|=
operator|(
specifier|const
name|u_int16_t
operator|*
operator|)
name|buffer
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
name|outw
argument_list|(
name|port
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outsl
parameter_list|(
name|u_int32_t
name|port
parameter_list|,
specifier|const
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
specifier|const
name|u_int32_t
modifier|*
name|p
init|=
operator|(
specifier|const
name|u_int32_t
operator|*
operator|)
name|buffer
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
name|outl
argument_list|(
name|port
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * String version of IO memory access ops:  */
end_comment

begin_function_decl
specifier|extern
name|void
name|memcpy_fromio
parameter_list|(
name|void
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|memcpy_toio
parameter_list|(
name|u_int32_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|memcpy_io
parameter_list|(
name|u_int32_t
parameter_list|,
name|u_int32_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|memset_io
parameter_list|(
name|u_int32_t
parameter_list|,
name|int
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|memsetw
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|memsetw_io
parameter_list|(
name|u_int32_t
parameter_list|,
name|int
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_CPUFUNC_H_ */
end_comment

end_unit

