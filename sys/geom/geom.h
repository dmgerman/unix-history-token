begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002 Poul-Henning Kamp  * Copyright (c) 2002 Networks Associates Technology, Inc.  * All rights reserved.  *  * This software was developed for the FreeBSD Project by Poul-Henning Kamp  * and NAI Labs, the Security Research Division of Network Associates, Inc.  * under DARPA/SPAWAR contract N66001-01-C-8035 ("CBOSS"), as part of the  * DARPA CHATS research program.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The names of the authors may not be used to endorse or promote  *    products derived from this software without specific prior written  *    permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GEOM_GEOM_H_
end_ifndef

begin_define
define|#
directive|define
name|_GEOM_GEOM_H_
end_define

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/sx.h>
end_include

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<sys/ioccom.h>
end_include

begin_include
include|#
directive|include
file|<sys/sbuf.h>
end_include

begin_include
include|#
directive|include
file|<sys/module.h>
end_include

begin_struct_decl
struct_decl|struct
name|g_class
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|g_geom
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|g_consumer
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|g_provider
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|g_stat
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|thread
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|bio
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|sbuf
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|gctl_req
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|g_configargs
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|int
name|g_config_t
parameter_list|(
name|struct
name|g_configargs
modifier|*
name|ca
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|g_ctl_req_t
parameter_list|(
name|struct
name|gctl_req
modifier|*
parameter_list|,
name|struct
name|g_class
modifier|*
name|cp
parameter_list|,
name|char
specifier|const
modifier|*
name|verb
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|g_ctl_create_geom_t
parameter_list|(
name|struct
name|gctl_req
modifier|*
parameter_list|,
name|struct
name|g_class
modifier|*
name|cp
parameter_list|,
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|g_ctl_destroy_geom_t
parameter_list|(
name|struct
name|gctl_req
modifier|*
parameter_list|,
name|struct
name|g_class
modifier|*
name|cp
parameter_list|,
name|struct
name|g_geom
modifier|*
name|gp
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|g_ctl_config_geom_t
parameter_list|(
name|struct
name|gctl_req
modifier|*
parameter_list|,
name|struct
name|g_geom
modifier|*
name|gp
parameter_list|,
specifier|const
name|char
modifier|*
name|verb
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|g_init_t
parameter_list|(
name|struct
name|g_class
modifier|*
name|mp
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|g_fini_t
parameter_list|(
name|struct
name|g_class
modifier|*
name|mp
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|g_geom
modifier|*
name|g_taste_t
parameter_list|(
name|struct
name|g_class
modifier|*
parameter_list|,
name|struct
name|g_provider
modifier|*
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|g_ioctl_t
parameter_list|(
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|,
name|u_long
name|cmd
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|int
name|fflag
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|G_TF_NORMAL
value|0
end_define

begin_define
define|#
directive|define
name|G_TF_INSIST
value|1
end_define

begin_define
define|#
directive|define
name|G_TF_TRANSPARENT
value|2
end_define

begin_typedef
typedef|typedef
name|int
name|g_access_t
parameter_list|(
name|struct
name|g_provider
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/* XXX: not sure about the thread arg */
end_comment

begin_typedef
typedef|typedef
name|void
name|g_orphan_t
parameter_list|(
name|struct
name|g_consumer
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|g_start_t
parameter_list|(
name|struct
name|bio
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|g_spoiled_t
parameter_list|(
name|struct
name|g_consumer
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|g_dumpconf_t
parameter_list|(
name|struct
name|sbuf
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|indent
parameter_list|,
name|struct
name|g_geom
modifier|*
parameter_list|,
name|struct
name|g_consumer
modifier|*
parameter_list|,
name|struct
name|g_provider
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * The g_class structure describes a transformation class.  In other words  * all BSD disklabel handlers share one g_class, all MBR handlers share  * one common g_class and so on.  * Certain operations are instantiated on the class, most notably the  * taste and config_geom functions.  */
end_comment

begin_struct
struct|struct
name|g_class
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|u_int
name|version
decl_stmt|;
name|g_taste_t
modifier|*
name|taste
decl_stmt|;
name|g_config_t
modifier|*
name|config
decl_stmt|;
name|g_ctl_req_t
modifier|*
name|ctlreq
decl_stmt|;
name|g_init_t
modifier|*
name|init
decl_stmt|;
name|g_fini_t
modifier|*
name|fini
decl_stmt|;
name|g_ctl_destroy_geom_t
modifier|*
name|destroy_geom
decl_stmt|;
comment|/* 	 * Defaults values for geom methods 	 */
name|g_start_t
modifier|*
name|start
decl_stmt|;
name|g_spoiled_t
modifier|*
name|spoiled
decl_stmt|;
name|g_dumpconf_t
modifier|*
name|dumpconf
decl_stmt|;
name|g_access_t
modifier|*
name|access
decl_stmt|;
name|g_orphan_t
modifier|*
name|orphan
decl_stmt|;
name|g_ioctl_t
modifier|*
name|ioctl
decl_stmt|;
comment|/* 	 * The remaining elements are private 	 */
name|LIST_ENTRY
argument_list|(
argument|g_class
argument_list|)
name|class
expr_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|g_geom
argument_list|)
name|geom
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|G_VERSION_00
value|0x19950323
end_define

begin_define
define|#
directive|define
name|G_VERSION_01
value|0x20041207
end_define

begin_comment
comment|/* add fflag to g_ioctl_t */
end_comment

begin_define
define|#
directive|define
name|G_VERSION
value|G_VERSION_01
end_define

begin_comment
comment|/*  * The g_geom is an instance of a g_class.  */
end_comment

begin_struct
struct|struct
name|g_geom
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|g_class
modifier|*
name|class
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|g_geom
argument_list|)
name|geom
expr_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|g_consumer
argument_list|)
name|consumer
expr_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|g_provider
argument_list|)
name|provider
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|g_geom
argument_list|)
name|geoms
expr_stmt|;
comment|/* XXX: better name */
name|int
name|rank
decl_stmt|;
name|g_start_t
modifier|*
name|start
decl_stmt|;
name|g_spoiled_t
modifier|*
name|spoiled
decl_stmt|;
name|g_dumpconf_t
modifier|*
name|dumpconf
decl_stmt|;
name|g_access_t
modifier|*
name|access
decl_stmt|;
name|g_orphan_t
modifier|*
name|orphan
decl_stmt|;
name|g_ioctl_t
modifier|*
name|ioctl
decl_stmt|;
name|void
modifier|*
name|softc
decl_stmt|;
name|unsigned
name|flags
decl_stmt|;
define|#
directive|define
name|G_GEOM_WITHER
value|1
block|}
struct|;
end_struct

begin_comment
comment|/*  * The g_bioq is a queue of struct bio's.  * XXX: possibly collection point for statistics.  * XXX: should (possibly) be collapsed with sys/bio.h::bio_queue_head.  */
end_comment

begin_struct
struct|struct
name|g_bioq
block|{
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|bio
argument_list|)
name|bio_queue
expr_stmt|;
name|struct
name|mtx
name|bio_queue_lock
decl_stmt|;
name|int
name|bio_queue_length
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * A g_consumer is an attachment point for a g_provider.  One g_consumer  * can only be attached to one g_provider, but multiple g_consumers  * can be attached to one g_provider.  */
end_comment

begin_struct
struct|struct
name|g_consumer
block|{
name|struct
name|g_geom
modifier|*
name|geom
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|g_consumer
argument_list|)
name|consumer
expr_stmt|;
name|struct
name|g_provider
modifier|*
name|provider
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|g_consumer
argument_list|)
name|consumers
expr_stmt|;
comment|/* XXX: better name */
name|int
name|acr
decl_stmt|,
name|acw
decl_stmt|,
name|ace
decl_stmt|;
name|int
name|spoiled
decl_stmt|;
name|struct
name|devstat
modifier|*
name|stat
decl_stmt|;
name|u_int
name|nstart
decl_stmt|,
name|nend
decl_stmt|;
comment|/* Two fields for the implementing class to use */
name|void
modifier|*
name|private
decl_stmt|;
name|u_int
name|index
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * A g_provider is a "logical disk".  */
end_comment

begin_struct
struct|struct
name|g_provider
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|g_provider
argument_list|)
name|provider
expr_stmt|;
name|struct
name|g_geom
modifier|*
name|geom
decl_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|g_consumer
argument_list|)
name|consumers
expr_stmt|;
name|int
name|acr
decl_stmt|,
name|acw
decl_stmt|,
name|ace
decl_stmt|;
name|int
name|error
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|g_provider
argument_list|)
name|orphan
expr_stmt|;
name|off_t
name|mediasize
decl_stmt|;
name|u_int
name|sectorsize
decl_stmt|;
name|u_int
name|stripesize
decl_stmt|;
name|u_int
name|stripeoffset
decl_stmt|;
name|struct
name|devstat
modifier|*
name|stat
decl_stmt|;
name|u_int
name|nstart
decl_stmt|,
name|nend
decl_stmt|;
name|u_int
name|flags
decl_stmt|;
define|#
directive|define
name|G_PF_CANDELETE
value|0x1
define|#
directive|define
name|G_PF_WITHER
value|0x2
define|#
directive|define
name|G_PF_ORPHAN
value|0x4
comment|/* Two fields for the implementing class to use */
name|void
modifier|*
name|private
decl_stmt|;
name|u_int
name|index
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* geom_dev.c */
end_comment

begin_struct_decl
struct_decl|struct
name|cdev
struct_decl|;
end_struct_decl

begin_function_decl
name|void
name|g_dev_print
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|g_provider
modifier|*
name|g_dev_getprovider
parameter_list|(
name|struct
name|cdev
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* geom_dump.c */
end_comment

begin_function_decl
name|void
name|g_trace
parameter_list|(
name|int
name|level
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|G_T_TOPOLOGY
value|1
end_define

begin_define
define|#
directive|define
name|G_T_BIO
value|2
end_define

begin_define
define|#
directive|define
name|G_T_ACCESS
value|4
end_define

begin_comment
comment|/* geom_event.c */
end_comment

begin_typedef
typedef|typedef
name|void
name|g_event_t
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
name|flag
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|EV_CANCEL
value|1
end_define

begin_function_decl
name|int
name|g_post_event
parameter_list|(
name|g_event_t
modifier|*
name|func
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|flag
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_waitfor_event
parameter_list|(
name|g_event_t
modifier|*
name|func
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|flag
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_cancel_event
parameter_list|(
name|void
modifier|*
name|ref
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_orphan_provider
parameter_list|(
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_waitidlelock
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* geom_subr.c */
end_comment

begin_function_decl
name|int
name|g_access
parameter_list|(
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|,
name|int
name|nread
parameter_list|,
name|int
name|nwrite
parameter_list|,
name|int
name|nexcl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_attach
parameter_list|(
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|,
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_destroy_consumer
parameter_list|(
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_destroy_geom
parameter_list|(
name|struct
name|g_geom
modifier|*
name|pp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_destroy_provider
parameter_list|(
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_detach
parameter_list|(
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_error_provider
parameter_list|(
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|g_provider
modifier|*
name|g_provider_by_name
parameter_list|(
name|char
specifier|const
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_getattr__
parameter_list|(
specifier|const
name|char
modifier|*
name|attr
parameter_list|,
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|,
name|void
modifier|*
name|var
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|g_getattr
parameter_list|(
name|a
parameter_list|,
name|c
parameter_list|,
name|v
parameter_list|)
value|g_getattr__((a), (c), (v), sizeof *(v))
end_define

begin_function_decl
name|int
name|g_handleattr
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|,
specifier|const
name|char
modifier|*
name|attribute
parameter_list|,
name|void
modifier|*
name|val
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_handleattr_int
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|,
specifier|const
name|char
modifier|*
name|attribute
parameter_list|,
name|int
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_handleattr_off_t
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|,
specifier|const
name|char
modifier|*
name|attribute
parameter_list|,
name|off_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|g_consumer
modifier|*
name|g_new_consumer
parameter_list|(
name|struct
name|g_geom
modifier|*
name|gp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|g_geom
modifier|*
name|g_new_geomf
parameter_list|(
name|struct
name|g_class
modifier|*
name|mp
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|g_provider
modifier|*
name|g_new_providerf
parameter_list|(
name|struct
name|g_geom
modifier|*
name|gp
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_spoil
parameter_list|(
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|,
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_std_access
parameter_list|(
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|,
name|int
name|dr
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|de
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_std_done
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_std_spoiled
parameter_list|(
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_wither_geom
parameter_list|(
name|struct
name|g_geom
modifier|*
name|gp
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_wither_geom_close
parameter_list|(
name|struct
name|g_geom
modifier|*
name|gp
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|DIAGNOSTIC
end_ifdef

begin_function_decl
name|int
name|g_valid_obj
parameter_list|(
name|void
specifier|const
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|G_VALID_CLASS
parameter_list|(
name|foo
parameter_list|)
define|\
value|KASSERT(g_valid_obj(foo) == 1, ("%p is not a g_class", foo))
end_define

begin_define
define|#
directive|define
name|G_VALID_GEOM
parameter_list|(
name|foo
parameter_list|)
define|\
value|KASSERT(g_valid_obj(foo) == 2, ("%p is not a g_geom", foo))
end_define

begin_define
define|#
directive|define
name|G_VALID_CONSUMER
parameter_list|(
name|foo
parameter_list|)
define|\
value|KASSERT(g_valid_obj(foo) == 3, ("%p is not a g_consumer", foo))
end_define

begin_define
define|#
directive|define
name|G_VALID_PROVIDER
parameter_list|(
name|foo
parameter_list|)
define|\
value|KASSERT(g_valid_obj(foo) == 4, ("%p is not a g_provider", foo))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|G_VALID_CLASS
parameter_list|(
name|foo
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|G_VALID_GEOM
parameter_list|(
name|foo
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|G_VALID_CONSUMER
parameter_list|(
name|foo
parameter_list|)
value|do { } while (0)
end_define

begin_define
define|#
directive|define
name|G_VALID_PROVIDER
parameter_list|(
name|foo
parameter_list|)
value|do { } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|g_modevent
parameter_list|(
name|module_t
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* geom_io.c */
end_comment

begin_function_decl
name|struct
name|bio
modifier|*
name|g_clone_bio
parameter_list|(
name|struct
name|bio
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_destroy_bio
parameter_list|(
name|struct
name|bio
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_io_deliver
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_io_getattr
parameter_list|(
specifier|const
name|char
modifier|*
name|attr
parameter_list|,
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|,
name|int
modifier|*
name|len
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_io_request
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|,
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bio
modifier|*
name|g_new_bio
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|bio
modifier|*
name|g_alloc_bio
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|g_read_data
parameter_list|(
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|,
name|off_t
name|offset
parameter_list|,
name|off_t
name|length
parameter_list|,
name|int
modifier|*
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_write_data
parameter_list|(
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|,
name|off_t
name|offset
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|off_t
name|length
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_print_bio
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* geom_kern.c / geom_kernsim.c */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|sx
name|topology_lock
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|g_kerneldump
block|{
name|off_t
name|offset
decl_stmt|;
name|off_t
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_GEOM
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|g_malloc
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|void
modifier|*
name|p
decl_stmt|;
name|p
operator|=
name|malloc
argument_list|(
name|size
argument_list|,
name|M_GEOM
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
operator|(
name|p
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|g_free
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|DIAGNOSTIC
if|if
condition|(
name|sx_xlocked
argument_list|(
operator|&
name|topology_lock
argument_list|)
condition|)
block|{
name|KASSERT
argument_list|(
name|g_valid_obj
argument_list|(
name|ptr
argument_list|)
operator|==
literal|0
argument_list|,
operator|(
literal|"g_free(%p) of live object, type %d"
operator|,
name|ptr
operator|,
name|g_valid_obj
argument_list|(
name|ptr
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|free
argument_list|(
name|ptr
argument_list|,
name|M_GEOM
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|g_topology_lock
parameter_list|()
define|\
value|do {							\ 		mtx_assert(&Giant, MA_NOTOWNED);		\ 		sx_xlock(&topology_lock);			\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|g_topology_try_lock
parameter_list|()
value|sx_try_xlock(&topology_lock)
end_define

begin_define
define|#
directive|define
name|g_topology_unlock
parameter_list|()
define|\
value|do {							\ 		sx_xunlock(&topology_lock);			\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|g_topology_assert
parameter_list|()
define|\
value|do {							\ 		sx_assert(&topology_lock, SX_XLOCKED);		\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|g_topology_assert_not
parameter_list|()
define|\
value|do {							\ 		sx_assert(&topology_lock, SX_UNLOCKED);		\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|DECLARE_GEOM_CLASS
parameter_list|(
name|class
parameter_list|,
name|name
parameter_list|)
define|\
value|static moduledata_t name##_mod = {			\ 		#name, g_modevent,&class			\ 	};							\ 	DECLARE_MODULE(name, name##_mod, SI_SUB_DRIVERS, SI_ORDER_FIRST);
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_comment
comment|/* geom_ctl.c */
end_comment

begin_function_decl
name|void
name|gctl_set_param
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
specifier|const
name|char
modifier|*
name|param
parameter_list|,
name|void
specifier|const
modifier|*
name|ptr
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|gctl_get_param
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
specifier|const
name|char
modifier|*
name|param
parameter_list|,
name|int
modifier|*
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
specifier|const
modifier|*
name|gctl_get_asciiparam
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
specifier|const
name|char
modifier|*
name|param
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|gctl_get_paraml
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
specifier|const
name|char
modifier|*
name|param
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|gctl_error
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|g_class
modifier|*
name|gctl_get_class
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
name|char
specifier|const
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|g_geom
modifier|*
name|gctl_get_geom
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
name|struct
name|g_class
modifier|*
name|mpr
parameter_list|,
name|char
specifier|const
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|g_provider
modifier|*
name|gctl_get_provider
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
name|char
specifier|const
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _GEOM_GEOM_H_ */
end_comment

end_unit

