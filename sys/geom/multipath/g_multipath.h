begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2006-2007 Matthew Jacob<mjacob@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * Based upon work by Pawel Jakub Dawidek<pjd@FreeBSD.org> for all of the  * fine geom examples, and by Poul Henning Kamp<phk@FreeBSD.org> for GEOM  * itself, all of which is most gratefully acknowledged.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_G_MULTIPATH_H_
end_ifndef

begin_define
define|#
directive|define
name|_G_MULTIPATH_H_
end_define

begin_define
define|#
directive|define
name|G_MULTIPATH_CLASS_NAME
value|"MULTIPATH"
end_define

begin_define
define|#
directive|define
name|G_MULTIPATH_VERSION
value|1
end_define

begin_define
define|#
directive|define
name|G_MULTIPATH_MAGIC
value|"GEOM::MULTIPATH"
end_define

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_struct
struct|struct
name|g_multipath_softc
block|{
name|struct
name|g_provider
modifier|*
name|sc_pp
decl_stmt|;
name|struct
name|g_consumer
modifier|*
name|sc_active
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|char
name|sc_name
index|[
literal|16
index|]
decl_stmt|;
name|char
name|sc_uuid
index|[
literal|40
index|]
decl_stmt|;
name|int
name|sc_opened
decl_stmt|;
name|int
name|sc_stopping
decl_stmt|;
name|int
name|sc_ndisks
decl_stmt|;
name|int
name|sc_active_active
decl_stmt|;
comment|/* Active/Active mode */
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_struct
struct|struct
name|g_multipath_metadata
block|{
name|char
name|md_magic
index|[
literal|16
index|]
decl_stmt|;
comment|/* Magic Value */
name|char
name|md_uuid
index|[
literal|40
index|]
decl_stmt|;
comment|/* more magic */
name|char
name|md_name
index|[
literal|16
index|]
decl_stmt|;
comment|/* a friendly name */
name|uint32_t
name|md_version
decl_stmt|;
comment|/* version */
name|uint32_t
name|md_sectorsize
decl_stmt|;
comment|/* sectorsize of provider */
name|uint64_t
name|md_size
decl_stmt|;
comment|/* absolute size of provider */
name|uint8_t
name|md_active_active
decl_stmt|;
comment|/* Active/Active mode */
block|}
struct|;
end_struct

begin_function_decl
specifier|static
name|__inline
name|void
name|multipath_metadata_encode
parameter_list|(
specifier|const
name|struct
name|g_multipath_metadata
modifier|*
parameter_list|,
name|u_char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|multipath_metadata_decode
parameter_list|(
name|u_char
modifier|*
parameter_list|,
name|struct
name|g_multipath_metadata
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|multipath_metadata_encode
parameter_list|(
specifier|const
name|struct
name|g_multipath_metadata
modifier|*
name|md
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|)
block|{
name|bcopy
argument_list|(
name|md
operator|->
name|md_magic
argument_list|,
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_uuid
argument_list|,
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_uuid
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_uuid
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_name
argument_list|,
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_name
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_name
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|data
argument_list|,
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|data
argument_list|,
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
name|le64enc
argument_list|(
name|data
argument_list|,
name|md
operator|->
name|md_size
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_size
argument_list|)
expr_stmt|;
operator|*
name|data
operator|=
name|md
operator|->
name|md_active_active
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|multipath_metadata_decode
parameter_list|(
name|u_char
modifier|*
name|data
parameter_list|,
name|struct
name|g_multipath_metadata
modifier|*
name|md
parameter_list|)
block|{
name|bcopy
argument_list|(
name|data
argument_list|,
name|md
operator|->
name|md_magic
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|data
argument_list|,
name|md
operator|->
name|md_uuid
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_uuid
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_uuid
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|data
argument_list|,
name|md
operator|->
name|md_name
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_name
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_name
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_version
operator|=
name|le32dec
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_sectorsize
operator|=
name|le32dec
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_size
operator|=
name|le64dec
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|data
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_size
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_active_active
operator|=
operator|*
name|data
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _G_MULTIPATH_H_ */
end_comment

end_unit

