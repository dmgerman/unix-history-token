begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002 Poul-Henning Kamp  * Copyright (c) 2002 Networks Associates Technology, Inc.  * All rights reserved.  *  * This software was developed for the FreeBSD Project by Poul-Henning Kamp  * and NAI Labs, the Security Research Division of Network Associates, Inc.  * under DARPA/SPAWAR contract N66001-01-C-8035 ("CBOSS"), as part of the  * DARPA CHATS research program.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_GEOM_BDE_G_BDE_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_GEOM_BDE_G_BDE_H_
value|1
end_define

begin_comment
comment|/*  * These are quite, but not entirely unlike constants.  *  * They are not commented in details here, to prevent unadvisable  * experimentation. Please consult the code where they are used before you  * even think about modifying these.  */
end_comment

begin_define
define|#
directive|define
name|G_BDE_MKEYLEN
value|(2048/8)
end_define

begin_define
define|#
directive|define
name|G_BDE_SKEYBITS
value|128
end_define

begin_define
define|#
directive|define
name|G_BDE_SKEYLEN
value|(G_BDE_SKEYBITS/8)
end_define

begin_define
define|#
directive|define
name|G_BDE_KKEYBITS
value|128
end_define

begin_define
define|#
directive|define
name|G_BDE_KKEYLEN
value|(G_BDE_KKEYBITS/8)
end_define

begin_define
define|#
directive|define
name|G_BDE_MAXKEYS
value|4
end_define

begin_define
define|#
directive|define
name|G_BDE_LOCKSIZE
value|384
end_define

begin_define
define|#
directive|define
name|NLOCK_FIELDS
value|13
end_define

begin_comment
comment|/* This just needs to be "large enough" */
end_comment

begin_define
define|#
directive|define
name|G_BDE_KEYBYTES
value|304
end_define

begin_struct_decl
struct_decl|struct
name|g_bde_work
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|g_bde_softc
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|g_bde_sector
block|{
name|struct
name|g_bde_work
modifier|*
name|owner
decl_stmt|;
name|struct
name|g_bde_softc
modifier|*
name|softc
decl_stmt|;
name|off_t
name|offset
decl_stmt|;
name|u_int
name|size
decl_stmt|;
name|u_int
name|ref
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|g_bde_sector
argument_list|)
name|list
expr_stmt|;
name|u_char
name|valid
decl_stmt|;
name|u_char
name|malloc
decl_stmt|;
enum|enum
block|{
name|JUNK
block|,
name|IO
block|,
name|VALID
block|}
name|state
enum|;
name|int
name|error
decl_stmt|;
name|time_t
name|used
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|g_bde_work
block|{
name|struct
name|mtx
name|mutex
decl_stmt|;
name|off_t
name|offset
decl_stmt|;
name|off_t
name|length
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
name|struct
name|bio
modifier|*
name|bp
decl_stmt|;
name|struct
name|g_bde_softc
modifier|*
name|softc
decl_stmt|;
name|off_t
name|so
decl_stmt|;
name|off_t
name|kso
decl_stmt|;
name|u_int
name|ko
decl_stmt|;
name|struct
name|g_bde_sector
modifier|*
name|sp
decl_stmt|;
name|struct
name|g_bde_sector
modifier|*
name|ksp
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|g_bde_work
argument_list|)
name|list
expr_stmt|;
enum|enum
block|{
name|SETUP
block|,
name|WAIT
block|,
name|FINISH
block|}
name|state
enum|;
name|int
name|error
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The decrypted contents of the lock sectors.  Notice that this is not  * the same as the on-disk layout.  The on-disk layout is dynamic and  * dependent on the pass-phrase.  */
end_comment

begin_struct
struct|struct
name|g_bde_key
block|{
name|uint64_t
name|sector0
decl_stmt|;
comment|/* Physical byte offset of 1st byte used */
name|uint64_t
name|sectorN
decl_stmt|;
comment|/* Physical byte offset of 1st byte not used */
name|uint64_t
name|keyoffset
decl_stmt|;
comment|/* Number of bytes the disk image is skewed. */
name|uint64_t
name|lsector
index|[
name|G_BDE_MAXKEYS
index|]
decl_stmt|;
comment|/* Physical byte offsets of lock sectors */
name|uint32_t
name|sectorsize
decl_stmt|;
comment|/* Our "logical" sector size */
name|uint32_t
name|flags
decl_stmt|;
comment|/* 1 = lockfile in sector 0 */
name|uint8_t
name|salt
index|[
literal|16
index|]
decl_stmt|;
comment|/* Used to frustate the kkey generation */
name|uint8_t
name|spare
index|[
literal|32
index|]
decl_stmt|;
comment|/* For future use, random contents */
name|uint8_t
name|mkey
index|[
name|G_BDE_MKEYLEN
index|]
decl_stmt|;
comment|/* Our masterkey. */
comment|/* Non-stored help-fields */
name|uint64_t
name|zone_width
decl_stmt|;
comment|/* On-disk width of zone */
name|uint64_t
name|zone_cont
decl_stmt|;
comment|/* Payload width of zone */
name|uint64_t
name|media_width
decl_stmt|;
comment|/* Non-magic width of zone */
name|u_int
name|keys_per_sector
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|g_bde_softc
block|{
name|off_t
name|mediasize
decl_stmt|;
name|u_int
name|sectorsize
decl_stmt|;
name|uint64_t
name|zone_cont
decl_stmt|;
name|struct
name|g_geom
modifier|*
name|geom
decl_stmt|;
name|struct
name|g_consumer
modifier|*
name|consumer
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|g_bde_sector
argument_list|)
name|freelist
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|g_bde_work
argument_list|)
name|worklist
expr_stmt|;
name|struct
name|mtx
name|worklist_mutex
decl_stmt|;
name|struct
name|proc
modifier|*
name|thread
decl_stmt|;
name|struct
name|g_bde_key
name|key
decl_stmt|;
name|int
name|dead
decl_stmt|;
name|u_int
name|nwork
decl_stmt|;
name|u_int
name|nsect
decl_stmt|;
name|u_int
name|ncache
decl_stmt|;
name|u_char
name|sha2
index|[
name|SHA512_DIGEST_LENGTH
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* g_bde_crypt.c */
end_comment

begin_function_decl
name|void
name|g_bde_crypt_delete
parameter_list|(
name|struct
name|g_bde_work
modifier|*
name|wp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_bde_crypt_read
parameter_list|(
name|struct
name|g_bde_work
modifier|*
name|wp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_bde_crypt_write
parameter_list|(
name|struct
name|g_bde_work
modifier|*
name|wp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* g_bde_key.c */
end_comment

begin_function_decl
name|void
name|g_bde_zap_key
parameter_list|(
name|struct
name|g_bde_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_bde_get_key
parameter_list|(
name|struct
name|g_bde_softc
modifier|*
name|sc
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_bde_init_keybytes
parameter_list|(
name|struct
name|g_bde_softc
modifier|*
name|sc
parameter_list|,
name|char
modifier|*
name|passp
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* g_bde_lock .c */
end_comment

begin_function_decl
name|int
name|g_bde_encode_lock
parameter_list|(
name|struct
name|g_bde_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|g_bde_key
modifier|*
name|gl
parameter_list|,
name|u_char
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_bde_decode_lock
parameter_list|(
name|struct
name|g_bde_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|g_bde_key
modifier|*
name|gl
parameter_list|,
name|u_char
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_bde_keyloc_encrypt
parameter_list|(
name|struct
name|g_bde_softc
modifier|*
name|sc
parameter_list|,
name|uint64_t
modifier|*
name|input
parameter_list|,
name|void
modifier|*
name|output
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_bde_keyloc_decrypt
parameter_list|(
name|struct
name|g_bde_softc
modifier|*
name|sc
parameter_list|,
name|void
modifier|*
name|input
parameter_list|,
name|uint64_t
modifier|*
name|output
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_bde_decrypt_lock
parameter_list|(
name|struct
name|g_bde_softc
modifier|*
name|sc
parameter_list|,
name|u_char
modifier|*
name|keymat
parameter_list|,
name|u_char
modifier|*
name|meta
parameter_list|,
name|off_t
name|mediasize
parameter_list|,
name|u_int
name|sectorsize
parameter_list|,
name|u_int
modifier|*
name|nkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_bde_hash_pass
parameter_list|(
name|struct
name|g_bde_softc
modifier|*
name|sc
parameter_list|,
specifier|const
name|void
modifier|*
name|input
parameter_list|,
name|u_int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* g_bde_math .c */
end_comment

begin_function_decl
name|uint64_t
name|g_bde_max_sector
parameter_list|(
name|struct
name|g_bde_key
modifier|*
name|lp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_bde_map_sector
parameter_list|(
name|struct
name|g_bde_work
modifier|*
name|wp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* g_bde_work.c */
end_comment

begin_function_decl
name|void
name|g_bde_start1
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_bde_worker
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * These four functions wrap the raw Rijndael functions and make sure we  * explode if something fails which shouldn't.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|AES_init
parameter_list|(
name|cipherInstance
modifier|*
name|ci
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|rijndael_cipherInit
argument_list|(
name|ci
argument_list|,
name|MODE_CBC
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|error
operator|>
literal|0
argument_list|,
operator|(
literal|"rijndael_cipherInit %d"
operator|,
name|error
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|AES_makekey
parameter_list|(
name|keyInstance
modifier|*
name|ki
parameter_list|,
name|int
name|dir
parameter_list|,
name|u_int
name|len
parameter_list|,
name|void
modifier|*
name|key
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|rijndael_makeKey
argument_list|(
name|ki
argument_list|,
name|dir
argument_list|,
name|len
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|error
operator|>
literal|0
argument_list|,
operator|(
literal|"rijndael_makeKey %d"
operator|,
name|error
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|AES_encrypt
parameter_list|(
name|cipherInstance
modifier|*
name|ci
parameter_list|,
name|keyInstance
modifier|*
name|ki
parameter_list|,
name|void
modifier|*
name|in
parameter_list|,
name|void
modifier|*
name|out
parameter_list|,
name|u_int
name|len
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|rijndael_blockEncrypt
argument_list|(
name|ci
argument_list|,
name|ki
argument_list|,
name|in
argument_list|,
name|len
operator|*
literal|8
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|error
operator|>
literal|0
argument_list|,
operator|(
literal|"rijndael_blockEncrypt %d"
operator|,
name|error
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|AES_decrypt
parameter_list|(
name|cipherInstance
modifier|*
name|ci
parameter_list|,
name|keyInstance
modifier|*
name|ki
parameter_list|,
name|void
modifier|*
name|in
parameter_list|,
name|void
modifier|*
name|out
parameter_list|,
name|u_int
name|len
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|rijndael_blockDecrypt
argument_list|(
name|ci
argument_list|,
name|ki
argument_list|,
name|in
argument_list|,
name|len
operator|*
literal|8
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|error
operator|>
literal|0
argument_list|,
operator|(
literal|"rijndael_blockDecrypt %d"
operator|,
name|error
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_GEOM_BDE_G_BDE_H_ */
end_comment

end_unit

