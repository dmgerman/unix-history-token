begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004-2005 Pawel Jakub Dawidek<pjd@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_G_MIRROR_H_
end_ifndef

begin_define
define|#
directive|define
name|_G_MIRROR_H_
end_define

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_include
include|#
directive|include
file|<sys/md5.h>
end_include

begin_define
define|#
directive|define
name|G_MIRROR_CLASS_NAME
value|"MIRROR"
end_define

begin_define
define|#
directive|define
name|G_MIRROR_MAGIC
value|"GEOM::MIRROR"
end_define

begin_comment
comment|/*  * Version history:  * 0 - Initial version number.  * 1 - Added 'prefer' balance algorithm.  * 2 - Added md_genid field to metadata.  * 3 - Added md_provsize field to metadata.  */
end_comment

begin_define
define|#
directive|define
name|G_MIRROR_VERSION
value|3
end_define

begin_define
define|#
directive|define
name|G_MIRROR_BALANCE_NONE
value|0
end_define

begin_define
define|#
directive|define
name|G_MIRROR_BALANCE_ROUND_ROBIN
value|1
end_define

begin_define
define|#
directive|define
name|G_MIRROR_BALANCE_LOAD
value|2
end_define

begin_define
define|#
directive|define
name|G_MIRROR_BALANCE_SPLIT
value|3
end_define

begin_define
define|#
directive|define
name|G_MIRROR_BALANCE_PREFER
value|4
end_define

begin_define
define|#
directive|define
name|G_MIRROR_BALANCE_MIN
value|G_MIRROR_BALANCE_NONE
end_define

begin_define
define|#
directive|define
name|G_MIRROR_BALANCE_MAX
value|G_MIRROR_BALANCE_PREFER
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_FLAG_DIRTY
value|0x0000000000000001ULL
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_FLAG_SYNCHRONIZING
value|0x0000000000000002ULL
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_FLAG_FORCE_SYNC
value|0x0000000000000004ULL
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_FLAG_INACTIVE
value|0x0000000000000008ULL
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_FLAG_HARDCODED
value|0x0000000000000010ULL
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_FLAG_MASK
value|(G_MIRROR_DISK_FLAG_DIRTY |	\ 					 G_MIRROR_DISK_FLAG_SYNCHRONIZING | \ 					 G_MIRROR_DISK_FLAG_FORCE_SYNC | \ 					 G_MIRROR_DISK_FLAG_INACTIVE)
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DEVICE_FLAG_NOAUTOSYNC
value|0x0000000000000001ULL
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DEVICE_FLAG_MASK
value|(G_MIRROR_DEVICE_FLAG_NOAUTOSYNC)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|u_int
name|g_mirror_debug
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|G_MIRROR_DEBUG
parameter_list|(
name|lvl
parameter_list|,
modifier|...
parameter_list|)
value|do {				\ 	if (g_mirror_debug>= (lvl)) {					\ 		printf("GEOM_MIRROR");					\ 		if (g_mirror_debug> 0)					\ 			printf("[%u]", lvl);				\ 		printf(": ");						\ 		printf(__VA_ARGS__);					\ 		printf("\n");						\ 	}								\ } while (0)
end_define

begin_define
define|#
directive|define
name|G_MIRROR_LOGREQ
parameter_list|(
name|lvl
parameter_list|,
name|bp
parameter_list|,
modifier|...
parameter_list|)
value|do {				\ 	if (g_mirror_debug>= (lvl)) {					\ 		printf("GEOM_MIRROR");					\ 		if (g_mirror_debug> 0)					\ 			printf("[%u]", lvl);				\ 		printf(": ");						\ 		printf(__VA_ARGS__);					\ 		printf(" ");						\ 		g_print_bio(bp);					\ 		printf("\n");						\ 	}								\ } while (0)
end_define

begin_define
define|#
directive|define
name|G_MIRROR_BIO_FLAG_REGULAR
value|0x01
end_define

begin_define
define|#
directive|define
name|G_MIRROR_BIO_FLAG_SYNC
value|0x02
end_define

begin_comment
comment|/*  * Informations needed for synchronization.  */
end_comment

begin_struct
struct|struct
name|g_mirror_disk_sync
block|{
name|struct
name|g_consumer
modifier|*
name|ds_consumer
decl_stmt|;
comment|/* Consumer connected to our mirror. */
name|off_t
name|ds_offset
decl_stmt|;
comment|/* Offset of next request to send. */
name|off_t
name|ds_offset_done
decl_stmt|;
comment|/* Offset of already synchronized 					   region. */
name|off_t
name|ds_resync
decl_stmt|;
comment|/* Resynchronize from this offset. */
name|u_int
name|ds_syncid
decl_stmt|;
comment|/* Disk's synchronization ID. */
name|u_char
modifier|*
name|ds_data
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Informations needed for synchronization.  */
end_comment

begin_struct
struct|struct
name|g_mirror_device_sync
block|{
name|struct
name|g_geom
modifier|*
name|ds_geom
decl_stmt|;
comment|/* Synchronization geom. */
name|u_int
name|ds_ndisks
decl_stmt|;
comment|/* Number of disks in SYNCHRONIZING 					   state. */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|G_MIRROR_DISK_STATE_NONE
value|0
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_STATE_NEW
value|1
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_STATE_ACTIVE
value|2
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_STATE_STALE
value|3
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_STATE_SYNCHRONIZING
value|4
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_STATE_DISCONNECTED
value|5
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DISK_STATE_DESTROY
value|6
end_define

begin_struct
struct|struct
name|g_mirror_disk
block|{
name|uint32_t
name|d_id
decl_stmt|;
comment|/* Disk ID. */
name|struct
name|g_consumer
modifier|*
name|d_consumer
decl_stmt|;
comment|/* Consumer. */
name|struct
name|g_mirror_softc
modifier|*
name|d_softc
decl_stmt|;
comment|/* Back-pointer to softc. */
name|int
name|d_state
decl_stmt|;
comment|/* Disk state. */
name|u_int
name|d_priority
decl_stmt|;
comment|/* Disk priority. */
name|struct
name|bintime
name|d_delay
decl_stmt|;
comment|/* Disk delay. */
name|struct
name|bintime
name|d_last_used
decl_stmt|;
comment|/* When disk was last used. */
name|uint64_t
name|d_flags
decl_stmt|;
comment|/* Additional flags. */
name|u_int
name|d_genid
decl_stmt|;
comment|/* Disk's generation ID. */
name|struct
name|g_mirror_disk_sync
name|d_sync
decl_stmt|;
comment|/* Sync information. */
name|LIST_ENTRY
argument_list|(
argument|g_mirror_disk
argument_list|)
name|d_next
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|d_name
value|d_consumer->provider->name
end_define

begin_define
define|#
directive|define
name|G_MIRROR_EVENT_DONTWAIT
value|0x1
end_define

begin_define
define|#
directive|define
name|G_MIRROR_EVENT_WAIT
value|0x2
end_define

begin_define
define|#
directive|define
name|G_MIRROR_EVENT_DEVICE
value|0x4
end_define

begin_define
define|#
directive|define
name|G_MIRROR_EVENT_DONE
value|0x8
end_define

begin_struct
struct|struct
name|g_mirror_event
block|{
name|struct
name|g_mirror_disk
modifier|*
name|e_disk
decl_stmt|;
name|int
name|e_state
decl_stmt|;
name|int
name|e_flags
decl_stmt|;
name|int
name|e_error
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|g_mirror_event
argument_list|)
name|e_next
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|G_MIRROR_DEVICE_FLAG_DESTROY
value|0x0100000000000000ULL
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DEVICE_FLAG_WAIT
value|0x0200000000000000ULL
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DEVICE_STATE_STARTING
value|0
end_define

begin_define
define|#
directive|define
name|G_MIRROR_DEVICE_STATE_RUNNING
value|1
end_define

begin_comment
comment|/* Bump syncid on first write. */
end_comment

begin_define
define|#
directive|define
name|G_MIRROR_BUMP_SYNCID
value|0x1
end_define

begin_comment
comment|/* Bump genid immediately. */
end_comment

begin_define
define|#
directive|define
name|G_MIRROR_BUMP_GENID
value|0x2
end_define

begin_struct
struct|struct
name|g_mirror_softc
block|{
name|u_int
name|sc_state
decl_stmt|;
comment|/* Device state. */
name|uint32_t
name|sc_slice
decl_stmt|;
comment|/* Slice size. */
name|uint8_t
name|sc_balance
decl_stmt|;
comment|/* Balance algorithm. */
name|uint64_t
name|sc_mediasize
decl_stmt|;
comment|/* Device size. */
name|uint32_t
name|sc_sectorsize
decl_stmt|;
comment|/* Sector size. */
name|uint64_t
name|sc_flags
decl_stmt|;
comment|/* Additional flags. */
name|struct
name|g_geom
modifier|*
name|sc_geom
decl_stmt|;
name|struct
name|g_provider
modifier|*
name|sc_provider
decl_stmt|;
name|uint32_t
name|sc_id
decl_stmt|;
comment|/* Mirror unique ID. */
name|struct
name|bio_queue_head
name|sc_queue
decl_stmt|;
name|struct
name|mtx
name|sc_queue_mtx
decl_stmt|;
name|struct
name|proc
modifier|*
name|sc_worker
decl_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|g_mirror_disk
argument_list|)
name|sc_disks
expr_stmt|;
name|u_int
name|sc_ndisks
decl_stmt|;
comment|/* Number of disks. */
name|struct
name|g_mirror_disk
modifier|*
name|sc_hint
decl_stmt|;
name|u_int
name|sc_genid
decl_stmt|;
comment|/* Generation ID. */
name|u_int
name|sc_syncid
decl_stmt|;
comment|/* Synchronization ID. */
name|int
name|sc_bump_id
decl_stmt|;
name|struct
name|g_mirror_device_sync
name|sc_sync
decl_stmt|;
name|int
name|sc_idle
decl_stmt|;
comment|/* DIRTY flags removed. */
name|time_t
name|sc_last_write
decl_stmt|;
name|u_int
name|sc_writes
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|g_mirror_event
argument_list|)
name|sc_events
expr_stmt|;
name|struct
name|mtx
name|sc_events_mtx
decl_stmt|;
name|struct
name|callout
name|sc_callout
decl_stmt|;
name|struct
name|root_hold_token
modifier|*
name|sc_rootmount
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|sc_name
value|sc_geom->name
end_define

begin_function_decl
name|u_int
name|g_mirror_ndisks
parameter_list|(
name|struct
name|g_mirror_softc
modifier|*
name|sc
parameter_list|,
name|int
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_mirror_destroy
parameter_list|(
name|struct
name|g_mirror_softc
modifier|*
name|sc
parameter_list|,
name|boolean_t
name|force
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_mirror_event_send
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
name|int
name|state
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_struct_decl
struct_decl|struct
name|g_mirror_metadata
struct_decl|;
end_struct_decl

begin_function_decl
name|int
name|g_mirror_add_disk
parameter_list|(
name|struct
name|g_mirror_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|,
name|struct
name|g_mirror_metadata
modifier|*
name|md
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_mirror_read_metadata
parameter_list|(
name|struct
name|g_consumer
modifier|*
name|cp
parameter_list|,
name|struct
name|g_mirror_metadata
modifier|*
name|md
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_mirror_fill_metadata
parameter_list|(
name|struct
name|g_mirror_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|g_mirror_disk
modifier|*
name|disk
parameter_list|,
name|struct
name|g_mirror_metadata
modifier|*
name|md
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_mirror_update_metadata
parameter_list|(
name|struct
name|g_mirror_disk
modifier|*
name|disk
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|g_ctl_req_t
name|g_mirror_config
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_struct
struct|struct
name|g_mirror_metadata
block|{
name|char
name|md_magic
index|[
literal|16
index|]
decl_stmt|;
comment|/* Magic value. */
name|uint32_t
name|md_version
decl_stmt|;
comment|/* Version number. */
name|char
name|md_name
index|[
literal|16
index|]
decl_stmt|;
comment|/* Mirror name. */
name|uint32_t
name|md_mid
decl_stmt|;
comment|/* Mirror unique ID. */
name|uint32_t
name|md_did
decl_stmt|;
comment|/* Disk unique ID. */
name|uint8_t
name|md_all
decl_stmt|;
comment|/* Number of disks in mirror. */
name|uint32_t
name|md_genid
decl_stmt|;
comment|/* Generation ID. */
name|uint32_t
name|md_syncid
decl_stmt|;
comment|/* Synchronization ID. */
name|uint8_t
name|md_priority
decl_stmt|;
comment|/* Disk priority. */
name|uint32_t
name|md_slice
decl_stmt|;
comment|/* Slice size. */
name|uint8_t
name|md_balance
decl_stmt|;
comment|/* Balance type. */
name|uint64_t
name|md_mediasize
decl_stmt|;
comment|/* Size of the smallest 					   disk in mirror. */
name|uint32_t
name|md_sectorsize
decl_stmt|;
comment|/* Sector size. */
name|uint64_t
name|md_sync_offset
decl_stmt|;
comment|/* Synchronized offset. */
name|uint64_t
name|md_mflags
decl_stmt|;
comment|/* Additional mirror flags. */
name|uint64_t
name|md_dflags
decl_stmt|;
comment|/* Additional disk flags. */
name|char
name|md_provider
index|[
literal|16
index|]
decl_stmt|;
comment|/* Hardcoded provider. */
name|uint64_t
name|md_provsize
decl_stmt|;
comment|/* Provider's size. */
name|u_char
name|md_hash
index|[
literal|16
index|]
decl_stmt|;
comment|/* MD5 hash. */
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|void
name|mirror_metadata_encode
parameter_list|(
name|struct
name|g_mirror_metadata
modifier|*
name|md
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|)
block|{
name|MD5_CTX
name|ctx
decl_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_magic
argument_list|,
name|data
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|data
operator|+
literal|16
argument_list|,
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_name
argument_list|,
name|data
operator|+
literal|20
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|data
operator|+
literal|36
argument_list|,
name|md
operator|->
name|md_mid
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|data
operator|+
literal|40
argument_list|,
name|md
operator|->
name|md_did
argument_list|)
expr_stmt|;
operator|*
operator|(
name|data
operator|+
literal|44
operator|)
operator|=
name|md
operator|->
name|md_all
expr_stmt|;
name|le32enc
argument_list|(
name|data
operator|+
literal|45
argument_list|,
name|md
operator|->
name|md_genid
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|data
operator|+
literal|49
argument_list|,
name|md
operator|->
name|md_syncid
argument_list|)
expr_stmt|;
operator|*
operator|(
name|data
operator|+
literal|53
operator|)
operator|=
name|md
operator|->
name|md_priority
expr_stmt|;
name|le32enc
argument_list|(
name|data
operator|+
literal|54
argument_list|,
name|md
operator|->
name|md_slice
argument_list|)
expr_stmt|;
operator|*
operator|(
name|data
operator|+
literal|58
operator|)
operator|=
name|md
operator|->
name|md_balance
expr_stmt|;
name|le64enc
argument_list|(
name|data
operator|+
literal|59
argument_list|,
name|md
operator|->
name|md_mediasize
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|data
operator|+
literal|67
argument_list|,
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
name|le64enc
argument_list|(
name|data
operator|+
literal|71
argument_list|,
name|md
operator|->
name|md_sync_offset
argument_list|)
expr_stmt|;
name|le64enc
argument_list|(
name|data
operator|+
literal|79
argument_list|,
name|md
operator|->
name|md_mflags
argument_list|)
expr_stmt|;
name|le64enc
argument_list|(
name|data
operator|+
literal|87
argument_list|,
name|md
operator|->
name|md_dflags
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_provider
argument_list|,
name|data
operator|+
literal|95
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|le64enc
argument_list|(
name|data
operator|+
literal|111
argument_list|,
name|md
operator|->
name|md_provsize
argument_list|)
expr_stmt|;
name|MD5Init
argument_list|(
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|MD5Update
argument_list|(
operator|&
name|ctx
argument_list|,
name|data
argument_list|,
literal|119
argument_list|)
expr_stmt|;
name|MD5Final
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
name|data
operator|+
literal|119
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|mirror_metadata_decode_v0v1
parameter_list|(
specifier|const
name|u_char
modifier|*
name|data
parameter_list|,
name|struct
name|g_mirror_metadata
modifier|*
name|md
parameter_list|)
block|{
name|MD5_CTX
name|ctx
decl_stmt|;
name|bcopy
argument_list|(
name|data
operator|+
literal|20
argument_list|,
name|md
operator|->
name|md_name
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_mid
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|36
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_did
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|40
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_all
operator|=
operator|*
operator|(
name|data
operator|+
literal|44
operator|)
expr_stmt|;
name|md
operator|->
name|md_syncid
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|45
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_priority
operator|=
operator|*
operator|(
name|data
operator|+
literal|49
operator|)
expr_stmt|;
name|md
operator|->
name|md_slice
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|50
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_balance
operator|=
operator|*
operator|(
name|data
operator|+
literal|54
operator|)
expr_stmt|;
name|md
operator|->
name|md_mediasize
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|55
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_sectorsize
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|63
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_sync_offset
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|67
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_mflags
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|75
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_dflags
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|83
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|data
operator|+
literal|91
argument_list|,
name|md
operator|->
name|md_provider
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|data
operator|+
literal|107
argument_list|,
name|md
operator|->
name|md_hash
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|MD5Init
argument_list|(
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|MD5Update
argument_list|(
operator|&
name|ctx
argument_list|,
name|data
argument_list|,
literal|107
argument_list|)
expr_stmt|;
name|MD5Final
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
operator|&
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|bcmp
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
name|data
operator|+
literal|107
argument_list|,
literal|16
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|(
name|EINVAL
operator|)
return|;
comment|/* New fields. */
name|md
operator|->
name|md_genid
operator|=
literal|0
expr_stmt|;
name|md
operator|->
name|md_provsize
operator|=
literal|0
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|mirror_metadata_decode_v2
parameter_list|(
specifier|const
name|u_char
modifier|*
name|data
parameter_list|,
name|struct
name|g_mirror_metadata
modifier|*
name|md
parameter_list|)
block|{
name|MD5_CTX
name|ctx
decl_stmt|;
name|bcopy
argument_list|(
name|data
operator|+
literal|20
argument_list|,
name|md
operator|->
name|md_name
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_mid
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|36
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_did
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|40
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_all
operator|=
operator|*
operator|(
name|data
operator|+
literal|44
operator|)
expr_stmt|;
name|md
operator|->
name|md_genid
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|45
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_syncid
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|49
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_priority
operator|=
operator|*
operator|(
name|data
operator|+
literal|53
operator|)
expr_stmt|;
name|md
operator|->
name|md_slice
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|54
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_balance
operator|=
operator|*
operator|(
name|data
operator|+
literal|58
operator|)
expr_stmt|;
name|md
operator|->
name|md_mediasize
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|59
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_sectorsize
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|67
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_sync_offset
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|71
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_mflags
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|79
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_dflags
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|87
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|data
operator|+
literal|95
argument_list|,
name|md
operator|->
name|md_provider
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|data
operator|+
literal|111
argument_list|,
name|md
operator|->
name|md_hash
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|MD5Init
argument_list|(
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|MD5Update
argument_list|(
operator|&
name|ctx
argument_list|,
name|data
argument_list|,
literal|111
argument_list|)
expr_stmt|;
name|MD5Final
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
operator|&
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|bcmp
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
name|data
operator|+
literal|111
argument_list|,
literal|16
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|(
name|EINVAL
operator|)
return|;
comment|/* New fields. */
name|md
operator|->
name|md_provsize
operator|=
literal|0
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|mirror_metadata_decode_v3
parameter_list|(
specifier|const
name|u_char
modifier|*
name|data
parameter_list|,
name|struct
name|g_mirror_metadata
modifier|*
name|md
parameter_list|)
block|{
name|MD5_CTX
name|ctx
decl_stmt|;
name|bcopy
argument_list|(
name|data
operator|+
literal|20
argument_list|,
name|md
operator|->
name|md_name
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_mid
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|36
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_did
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|40
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_all
operator|=
operator|*
operator|(
name|data
operator|+
literal|44
operator|)
expr_stmt|;
name|md
operator|->
name|md_genid
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|45
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_syncid
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|49
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_priority
operator|=
operator|*
operator|(
name|data
operator|+
literal|53
operator|)
expr_stmt|;
name|md
operator|->
name|md_slice
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|54
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_balance
operator|=
operator|*
operator|(
name|data
operator|+
literal|58
operator|)
expr_stmt|;
name|md
operator|->
name|md_mediasize
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|59
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_sectorsize
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|67
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_sync_offset
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|71
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_mflags
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|79
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_dflags
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|87
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|data
operator|+
literal|95
argument_list|,
name|md
operator|->
name|md_provider
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_provsize
operator|=
name|le64dec
argument_list|(
name|data
operator|+
literal|111
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|data
operator|+
literal|119
argument_list|,
name|md
operator|->
name|md_hash
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|MD5Init
argument_list|(
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|MD5Update
argument_list|(
operator|&
name|ctx
argument_list|,
name|data
argument_list|,
literal|119
argument_list|)
expr_stmt|;
name|MD5Final
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
operator|&
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|bcmp
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
name|data
operator|+
literal|119
argument_list|,
literal|16
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|(
name|EINVAL
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|mirror_metadata_decode
parameter_list|(
specifier|const
name|u_char
modifier|*
name|data
parameter_list|,
name|struct
name|g_mirror_metadata
modifier|*
name|md
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|bcopy
argument_list|(
name|data
argument_list|,
name|md
operator|->
name|md_magic
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_version
operator|=
name|le32dec
argument_list|(
name|data
operator|+
literal|16
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|md
operator|->
name|md_version
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
name|error
operator|=
name|mirror_metadata_decode_v0v1
argument_list|(
name|data
argument_list|,
name|md
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|error
operator|=
name|mirror_metadata_decode_v2
argument_list|(
name|data
argument_list|,
name|md
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|error
operator|=
name|mirror_metadata_decode_v3
argument_list|(
name|data
argument_list|,
name|md
argument_list|)
expr_stmt|;
break|break;
default|default:
name|error
operator|=
name|EINVAL
expr_stmt|;
break|break;
block|}
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
specifier|const
name|char
modifier|*
name|balance_name
parameter_list|(
name|u_int
name|balance
parameter_list|)
block|{
specifier|static
specifier|const
name|char
modifier|*
name|algorithms
index|[]
init|=
block|{
index|[
name|G_MIRROR_BALANCE_NONE
index|]
operator|=
literal|"none"
block|,
index|[
name|G_MIRROR_BALANCE_ROUND_ROBIN
index|]
operator|=
literal|"round-robin"
block|,
index|[
name|G_MIRROR_BALANCE_LOAD
index|]
operator|=
literal|"load"
block|,
index|[
name|G_MIRROR_BALANCE_SPLIT
index|]
operator|=
literal|"split"
block|,
index|[
name|G_MIRROR_BALANCE_PREFER
index|]
operator|=
literal|"prefer"
block|,
index|[
name|G_MIRROR_BALANCE_MAX
operator|+
literal|1
index|]
operator|=
literal|"unknown"
block|}
decl_stmt|;
if|if
condition|(
name|balance
operator|>
name|G_MIRROR_BALANCE_MAX
condition|)
name|balance
operator|=
name|G_MIRROR_BALANCE_MAX
operator|+
literal|1
expr_stmt|;
return|return
operator|(
name|algorithms
index|[
name|balance
index|]
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|balance_id
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
specifier|static
specifier|const
name|char
modifier|*
name|algorithms
index|[]
init|=
block|{
index|[
name|G_MIRROR_BALANCE_NONE
index|]
operator|=
literal|"none"
block|,
index|[
name|G_MIRROR_BALANCE_ROUND_ROBIN
index|]
operator|=
literal|"round-robin"
block|,
index|[
name|G_MIRROR_BALANCE_LOAD
index|]
operator|=
literal|"load"
block|,
index|[
name|G_MIRROR_BALANCE_SPLIT
index|]
operator|=
literal|"split"
block|,
index|[
name|G_MIRROR_BALANCE_PREFER
index|]
operator|=
literal|"prefer"
block|}
decl_stmt|;
name|int
name|n
decl_stmt|;
for|for
control|(
name|n
operator|=
name|G_MIRROR_BALANCE_MIN
init|;
name|n
operator|<=
name|G_MIRROR_BALANCE_MAX
condition|;
name|n
operator|++
control|)
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|name
argument_list|,
name|algorithms
index|[
name|n
index|]
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|n
operator|)
return|;
block|}
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mirror_metadata_dump
parameter_list|(
specifier|const
name|struct
name|g_mirror_metadata
modifier|*
name|md
parameter_list|)
block|{
specifier|static
specifier|const
name|char
name|hex
index|[]
init|=
literal|"0123456789abcdef"
decl_stmt|;
name|char
name|hash
index|[
literal|16
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|u_int
name|i
decl_stmt|;
name|printf
argument_list|(
literal|"     magic: %s\n"
argument_list|,
name|md
operator|->
name|md_magic
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"   version: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"      name: %s\n"
argument_list|,
name|md
operator|->
name|md_name
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"       mid: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_mid
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"       did: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_did
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"       all: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_all
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"     genid: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_genid
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"    syncid: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_syncid
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  priority: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_priority
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"     slice: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_slice
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"   balance: %s\n"
argument_list|,
name|balance_name
argument_list|(
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_balance
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|" mediasize: %jd\n"
argument_list|,
operator|(
name|intmax_t
operator|)
name|md
operator|->
name|md_mediasize
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"sectorsize: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"syncoffset: %jd\n"
argument_list|,
operator|(
name|intmax_t
operator|)
name|md
operator|->
name|md_sync_offset
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"    mflags:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|->
name|md_mflags
operator|==
literal|0
condition|)
name|printf
argument_list|(
literal|" NONE"
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
operator|(
name|md
operator|->
name|md_mflags
operator|&
name|G_MIRROR_DEVICE_FLAG_NOAUTOSYNC
operator|)
operator|!=
literal|0
condition|)
name|printf
argument_list|(
literal|" NOAUTOSYNC"
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"    dflags:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|->
name|md_dflags
operator|==
literal|0
condition|)
name|printf
argument_list|(
literal|" NONE"
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
operator|(
name|md
operator|->
name|md_dflags
operator|&
name|G_MIRROR_DISK_FLAG_DIRTY
operator|)
operator|!=
literal|0
condition|)
name|printf
argument_list|(
literal|" DIRTY"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|md
operator|->
name|md_dflags
operator|&
name|G_MIRROR_DISK_FLAG_SYNCHRONIZING
operator|)
operator|!=
literal|0
condition|)
name|printf
argument_list|(
literal|" SYNCHRONIZING"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|md
operator|->
name|md_dflags
operator|&
name|G_MIRROR_DISK_FLAG_FORCE_SYNC
operator|)
operator|!=
literal|0
condition|)
name|printf
argument_list|(
literal|" FORCE_SYNC"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|md
operator|->
name|md_dflags
operator|&
name|G_MIRROR_DISK_FLAG_INACTIVE
operator|)
operator|!=
literal|0
condition|)
name|printf
argument_list|(
literal|" INACTIVE"
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"hcprovider: %s\n"
argument_list|,
name|md
operator|->
name|md_provider
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  provsize: %ju\n"
argument_list|,
operator|(
name|uintmax_t
operator|)
name|md
operator|->
name|md_provsize
argument_list|)
expr_stmt|;
name|bzero
argument_list|(
name|hash
argument_list|,
sizeof|sizeof
argument_list|(
name|hash
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|hash
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|hex
index|[
name|md
operator|->
name|md_hash
index|[
name|i
index|]
operator|>>
literal|4
index|]
expr_stmt|;
name|hash
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|hex
index|[
name|md
operator|->
name|md_hash
index|[
name|i
index|]
operator|&
literal|0x0f
index|]
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"  MD5 hash: %s\n"
argument_list|,
name|hash
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_G_MIRROR_H_ */
end_comment

end_unit

