begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005-2011 Pawel Jakub Dawidek<pawel@dawidek.net>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_G_ELI_H_
end_ifndef

begin_define
define|#
directive|define
name|_G_ELI_H_
end_define

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_include
include|#
directive|include
file|<sys/errno.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_include
include|#
directive|include
file|<crypto/sha2/sha2.h>
end_include

begin_include
include|#
directive|include
file|<opencrypto/cryptodev.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/bio.h>
end_include

begin_include
include|#
directive|include
file|<sys/libkern.h>
end_include

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<sys/tree.h>
end_include

begin_include
include|#
directive|include
file|<geom/geom.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<strings.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_OpenSSL_
end_ifndef

begin_include
include|#
directive|include
file|<sys/md5.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|G_ELI_CLASS_NAME
value|"ELI"
end_define

begin_define
define|#
directive|define
name|G_ELI_MAGIC
value|"GEOM::ELI"
end_define

begin_define
define|#
directive|define
name|G_ELI_SUFFIX
value|".eli"
end_define

begin_comment
comment|/*  * Version history:  * 0 - Initial version number.  * 1 - Added data authentication support (md_aalgo field and  *     G_ELI_FLAG_AUTH flag).  * 2 - Added G_ELI_FLAG_READONLY.  * 3 - Added 'configure' subcommand.  * 4 - IV is generated from offset converted to little-endian  *     (flag G_ELI_FLAG_NATIVE_BYTE_ORDER will be set for older versions).  * 5 - Added multiple encrypton keys and AES-XTS support.  */
end_comment

begin_define
define|#
directive|define
name|G_ELI_VERSION
value|5
end_define

begin_comment
comment|/* ON DISK FLAGS. */
end_comment

begin_comment
comment|/* Use random, onetime keys. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_ONETIME
value|0x00000001
end_define

begin_comment
comment|/* Ask for the passphrase from the kernel, before mounting root. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_BOOT
value|0x00000002
end_define

begin_comment
comment|/* Detach on last close, if we were open for writing. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_WO_DETACH
value|0x00000004
end_define

begin_comment
comment|/* Detach on last close. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_RW_DETACH
value|0x00000008
end_define

begin_comment
comment|/* Provide data authentication. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_AUTH
value|0x00000010
end_define

begin_comment
comment|/* Provider is read-only, we should deny all write attempts. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_RO
value|0x00000020
end_define

begin_comment
comment|/* RUNTIME FLAGS. */
end_comment

begin_comment
comment|/* Provider was open for writing. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_WOPEN
value|0x00010000
end_define

begin_comment
comment|/* Destroy device. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_DESTROY
value|0x00020000
end_define

begin_comment
comment|/* Provider uses native byte-order for IV generation. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_NATIVE_BYTE_ORDER
value|0x00040000
end_define

begin_comment
comment|/* Provider uses single encryption key. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_SINGLE_KEY
value|0x00080000
end_define

begin_comment
comment|/* Device suspended. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_FLAG_SUSPEND
value|0x00100000
end_define

begin_define
define|#
directive|define
name|G_ELI_NEW_BIO
value|255
end_define

begin_define
define|#
directive|define
name|SHA512_MDLEN
value|64
end_define

begin_define
define|#
directive|define
name|G_ELI_AUTH_SECKEYLEN
value|SHA256_DIGEST_LENGTH
end_define

begin_define
define|#
directive|define
name|G_ELI_MAXMKEYS
value|2
end_define

begin_define
define|#
directive|define
name|G_ELI_MAXKEYLEN
value|64
end_define

begin_define
define|#
directive|define
name|G_ELI_USERKEYLEN
value|G_ELI_MAXKEYLEN
end_define

begin_define
define|#
directive|define
name|G_ELI_DATAKEYLEN
value|G_ELI_MAXKEYLEN
end_define

begin_define
define|#
directive|define
name|G_ELI_AUTHKEYLEN
value|G_ELI_MAXKEYLEN
end_define

begin_define
define|#
directive|define
name|G_ELI_IVKEYLEN
value|G_ELI_MAXKEYLEN
end_define

begin_define
define|#
directive|define
name|G_ELI_SALTLEN
value|64
end_define

begin_define
define|#
directive|define
name|G_ELI_DATAIVKEYLEN
value|(G_ELI_DATAKEYLEN + G_ELI_IVKEYLEN)
end_define

begin_comment
comment|/* Data-Key, IV-Key, HMAC_SHA512(Derived-Key, Data-Key+IV-Key) */
end_comment

begin_define
define|#
directive|define
name|G_ELI_MKEYLEN
value|(G_ELI_DATAIVKEYLEN + SHA512_MDLEN)
end_define

begin_define
define|#
directive|define
name|G_ELI_OVERWRITES
value|5
end_define

begin_comment
comment|/* Switch data encryption key every 2^20 blocks. */
end_comment

begin_define
define|#
directive|define
name|G_ELI_KEY_SHIFT
value|20
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|int
name|g_eli_debug
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int
name|g_eli_overwrites
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int
name|g_eli_batch
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|G_ELI_CRYPTO_UNKNOWN
value|0
end_define

begin_define
define|#
directive|define
name|G_ELI_CRYPTO_HW
value|1
end_define

begin_define
define|#
directive|define
name|G_ELI_CRYPTO_SW
value|2
end_define

begin_define
define|#
directive|define
name|G_ELI_DEBUG
parameter_list|(
name|lvl
parameter_list|,
modifier|...
parameter_list|)
value|do {					\ 	if (g_eli_debug>= (lvl)) {					\ 		printf("GEOM_ELI");					\ 		if (g_eli_debug> 0)					\ 			printf("[%u]", lvl);				\ 		printf(": ");						\ 		printf(__VA_ARGS__);					\ 		printf("\n");						\ 	}								\ } while (0)
end_define

begin_define
define|#
directive|define
name|G_ELI_LOGREQ
parameter_list|(
name|lvl
parameter_list|,
name|bp
parameter_list|,
modifier|...
parameter_list|)
value|do {				\ 	if (g_eli_debug>= (lvl)) {					\ 		printf("GEOM_ELI");					\ 		if (g_eli_debug> 0)					\ 			printf("[%u]", lvl);				\ 		printf(": ");						\ 		printf(__VA_ARGS__);					\ 		printf(" ");						\ 		g_print_bio(bp);					\ 		printf("\n");						\ 	}								\ } while (0)
end_define

begin_struct
struct|struct
name|g_eli_worker
block|{
name|struct
name|g_eli_softc
modifier|*
name|w_softc
decl_stmt|;
name|struct
name|proc
modifier|*
name|w_proc
decl_stmt|;
name|u_int
name|w_number
decl_stmt|;
name|uint64_t
name|w_sid
decl_stmt|;
name|boolean_t
name|w_active
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|g_eli_worker
argument_list|)
name|w_next
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|g_eli_softc
block|{
name|struct
name|g_geom
modifier|*
name|sc_geom
decl_stmt|;
name|u_int
name|sc_crypto
decl_stmt|;
name|uint8_t
name|sc_mkey
index|[
name|G_ELI_DATAIVKEYLEN
index|]
decl_stmt|;
name|uint8_t
name|sc_ekey
index|[
name|G_ELI_DATAKEYLEN
index|]
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|g_eli_key
argument_list|)
name|sc_ekeys_queue
expr_stmt|;
name|RB_HEAD
argument_list|(
argument|g_eli_key_tree
argument_list|,
argument|g_eli_key
argument_list|)
name|sc_ekeys_tree
expr_stmt|;
name|struct
name|mtx
name|sc_ekeys_lock
decl_stmt|;
name|uint64_t
name|sc_ekeys_total
decl_stmt|;
name|uint64_t
name|sc_ekeys_allocated
decl_stmt|;
name|u_int
name|sc_ealgo
decl_stmt|;
name|u_int
name|sc_ekeylen
decl_stmt|;
name|uint8_t
name|sc_akey
index|[
name|G_ELI_AUTHKEYLEN
index|]
decl_stmt|;
name|u_int
name|sc_aalgo
decl_stmt|;
name|u_int
name|sc_akeylen
decl_stmt|;
name|u_int
name|sc_alen
decl_stmt|;
name|SHA256_CTX
name|sc_akeyctx
decl_stmt|;
name|uint8_t
name|sc_ivkey
index|[
name|G_ELI_IVKEYLEN
index|]
decl_stmt|;
name|SHA256_CTX
name|sc_ivctx
decl_stmt|;
name|int
name|sc_nkey
decl_stmt|;
name|uint32_t
name|sc_flags
decl_stmt|;
name|int
name|sc_inflight
decl_stmt|;
name|off_t
name|sc_mediasize
decl_stmt|;
name|size_t
name|sc_sectorsize
decl_stmt|;
name|u_int
name|sc_bytes_per_sector
decl_stmt|;
name|u_int
name|sc_data_per_sector
decl_stmt|;
comment|/* Only for software cryptography. */
name|struct
name|bio_queue_head
name|sc_queue
decl_stmt|;
name|struct
name|mtx
name|sc_queue_mtx
decl_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|g_eli_worker
argument_list|)
name|sc_workers
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|sc_name
value|sc_geom->name
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_struct
struct|struct
name|g_eli_metadata
block|{
name|char
name|md_magic
index|[
literal|16
index|]
decl_stmt|;
comment|/* Magic value. */
name|uint32_t
name|md_version
decl_stmt|;
comment|/* Version number. */
name|uint32_t
name|md_flags
decl_stmt|;
comment|/* Additional flags. */
name|uint16_t
name|md_ealgo
decl_stmt|;
comment|/* Encryption algorithm. */
name|uint16_t
name|md_keylen
decl_stmt|;
comment|/* Key length. */
name|uint16_t
name|md_aalgo
decl_stmt|;
comment|/* Authentication algorithm. */
name|uint64_t
name|md_provsize
decl_stmt|;
comment|/* Provider's size. */
name|uint32_t
name|md_sectorsize
decl_stmt|;
comment|/* Sector size. */
name|uint8_t
name|md_keys
decl_stmt|;
comment|/* Available keys. */
name|int32_t
name|md_iterations
decl_stmt|;
comment|/* Number of iterations for PKCS#5v2. */
name|uint8_t
name|md_salt
index|[
name|G_ELI_SALTLEN
index|]
decl_stmt|;
comment|/* Salt. */
comment|/* Encrypted master key (IV-key, Data-key, HMAC). */
name|uint8_t
name|md_mkeys
index|[
name|G_ELI_MAXMKEYS
operator|*
name|G_ELI_MKEYLEN
index|]
decl_stmt|;
name|u_char
name|md_hash
index|[
literal|16
index|]
decl_stmt|;
comment|/* MD5 hash. */
block|}
name|__packed
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|_OpenSSL_
end_ifndef

begin_function
specifier|static
name|__inline
name|void
name|eli_metadata_encode
parameter_list|(
name|struct
name|g_eli_metadata
modifier|*
name|md
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|)
block|{
name|MD5_CTX
name|ctx
decl_stmt|;
name|u_char
modifier|*
name|p
decl_stmt|;
name|p
operator|=
name|data
expr_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_magic
argument_list|,
name|p
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_flags
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_flags
argument_list|)
expr_stmt|;
name|le16enc
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_ealgo
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_ealgo
argument_list|)
expr_stmt|;
name|le16enc
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_keylen
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_keylen
argument_list|)
expr_stmt|;
name|le16enc
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_aalgo
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_aalgo
argument_list|)
expr_stmt|;
name|le64enc
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_provsize
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_provsize
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
operator|*
name|p
operator|=
name|md
operator|->
name|md_keys
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_keys
argument_list|)
expr_stmt|;
name|le32enc
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_iterations
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_iterations
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_salt
argument_list|,
name|p
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_salt
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_salt
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_mkeys
argument_list|,
name|p
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_mkeys
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_mkeys
argument_list|)
expr_stmt|;
name|MD5Init
argument_list|(
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|MD5Update
argument_list|(
operator|&
name|ctx
argument_list|,
name|data
argument_list|,
name|p
operator|-
name|data
argument_list|)
expr_stmt|;
name|MD5Final
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
name|p
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_hash
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|eli_metadata_decode_v0
parameter_list|(
specifier|const
name|u_char
modifier|*
name|data
parameter_list|,
name|struct
name|g_eli_metadata
modifier|*
name|md
parameter_list|)
block|{
name|MD5_CTX
name|ctx
decl_stmt|;
specifier|const
name|u_char
modifier|*
name|p
decl_stmt|;
name|p
operator|=
name|data
operator|+
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_flags
operator|=
name|le32dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_flags
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_ealgo
operator|=
name|le16dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_ealgo
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_keylen
operator|=
name|le16dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_keylen
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_provsize
operator|=
name|le64dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_provsize
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_sectorsize
operator|=
name|le32dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_keys
operator|=
operator|*
name|p
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_keys
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_iterations
operator|=
name|le32dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_iterations
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_salt
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_salt
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_salt
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_mkeys
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_mkeys
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_mkeys
argument_list|)
expr_stmt|;
name|MD5Init
argument_list|(
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|MD5Update
argument_list|(
operator|&
name|ctx
argument_list|,
name|data
argument_list|,
name|p
operator|-
name|data
argument_list|)
expr_stmt|;
name|MD5Final
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
operator|&
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|bcmp
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
name|p
argument_list|,
literal|16
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|(
name|EINVAL
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|eli_metadata_decode_v1v2v3v4v5
parameter_list|(
specifier|const
name|u_char
modifier|*
name|data
parameter_list|,
name|struct
name|g_eli_metadata
modifier|*
name|md
parameter_list|)
block|{
name|MD5_CTX
name|ctx
decl_stmt|;
specifier|const
name|u_char
modifier|*
name|p
decl_stmt|;
name|p
operator|=
name|data
operator|+
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_flags
operator|=
name|le32dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_flags
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_ealgo
operator|=
name|le16dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_ealgo
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_keylen
operator|=
name|le16dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_keylen
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_aalgo
operator|=
name|le16dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_aalgo
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_provsize
operator|=
name|le64dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_provsize
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_sectorsize
operator|=
name|le32dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_keys
operator|=
operator|*
name|p
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_keys
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_iterations
operator|=
name|le32dec
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_iterations
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_salt
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_salt
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_salt
argument_list|)
expr_stmt|;
name|bcopy
argument_list|(
name|p
argument_list|,
name|md
operator|->
name|md_mkeys
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_mkeys
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|+=
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_mkeys
argument_list|)
expr_stmt|;
name|MD5Init
argument_list|(
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|MD5Update
argument_list|(
operator|&
name|ctx
argument_list|,
name|data
argument_list|,
name|p
operator|-
name|data
argument_list|)
expr_stmt|;
name|MD5Final
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
operator|&
name|ctx
argument_list|)
expr_stmt|;
if|if
condition|(
name|bcmp
argument_list|(
name|md
operator|->
name|md_hash
argument_list|,
name|p
argument_list|,
literal|16
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|(
name|EINVAL
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|eli_metadata_decode
parameter_list|(
specifier|const
name|u_char
modifier|*
name|data
parameter_list|,
name|struct
name|g_eli_metadata
modifier|*
name|md
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|bcopy
argument_list|(
name|data
argument_list|,
name|md
operator|->
name|md_magic
argument_list|,
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|->
name|md_version
operator|=
name|le32dec
argument_list|(
name|data
operator|+
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_magic
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|md
operator|->
name|md_version
condition|)
block|{
case|case
literal|0
case|:
name|error
operator|=
name|eli_metadata_decode_v0
argument_list|(
name|data
argument_list|,
name|md
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
case|case
literal|2
case|:
case|case
literal|3
case|:
case|case
literal|4
case|:
case|case
literal|5
case|:
name|error
operator|=
name|eli_metadata_decode_v1v2v3v4v5
argument_list|(
name|data
argument_list|,
name|md
argument_list|)
expr_stmt|;
break|break;
default|default:
name|error
operator|=
name|EINVAL
expr_stmt|;
break|break;
block|}
return|return
operator|(
name|error
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_OpenSSL */
end_comment

begin_function
specifier|static
name|__inline
name|u_int
name|g_eli_str2ealgo
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"null"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_NULL_CBC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"null-cbc"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_NULL_CBC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"aes"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_AES_XTS
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"aes-cbc"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_AES_CBC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"aes-xts"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_AES_XTS
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"blowfish"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_BLF_CBC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"blowfish-cbc"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_BLF_CBC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"camellia"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_CAMELLIA_CBC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"camellia-cbc"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_CAMELLIA_CBC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"3des"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_3DES_CBC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"3des-cbc"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_3DES_CBC
operator|)
return|;
return|return
operator|(
name|CRYPTO_ALGORITHM_MIN
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int
name|g_eli_str2aalgo
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"hmac/md5"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_MD5_HMAC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"hmac/sha1"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_SHA1_HMAC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"hmac/ripemd160"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_RIPEMD160_HMAC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"hmac/sha256"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_SHA2_256_HMAC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"hmac/sha384"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_SHA2_384_HMAC
operator|)
return|;
elseif|else
if|if
condition|(
name|strcasecmp
argument_list|(
literal|"hmac/sha512"
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
name|CRYPTO_SHA2_512_HMAC
operator|)
return|;
return|return
operator|(
name|CRYPTO_ALGORITHM_MIN
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
specifier|const
name|char
modifier|*
name|g_eli_algo2str
parameter_list|(
name|u_int
name|algo
parameter_list|)
block|{
switch|switch
condition|(
name|algo
condition|)
block|{
case|case
name|CRYPTO_NULL_CBC
case|:
return|return
operator|(
literal|"NULL"
operator|)
return|;
case|case
name|CRYPTO_AES_CBC
case|:
return|return
operator|(
literal|"AES-CBC"
operator|)
return|;
case|case
name|CRYPTO_AES_XTS
case|:
return|return
operator|(
literal|"AES-XTS"
operator|)
return|;
case|case
name|CRYPTO_BLF_CBC
case|:
return|return
operator|(
literal|"Blowfish-CBC"
operator|)
return|;
case|case
name|CRYPTO_CAMELLIA_CBC
case|:
return|return
operator|(
literal|"CAMELLIA-CBC"
operator|)
return|;
case|case
name|CRYPTO_3DES_CBC
case|:
return|return
operator|(
literal|"3DES-CBC"
operator|)
return|;
case|case
name|CRYPTO_MD5_HMAC
case|:
return|return
operator|(
literal|"HMAC/MD5"
operator|)
return|;
case|case
name|CRYPTO_SHA1_HMAC
case|:
return|return
operator|(
literal|"HMAC/SHA1"
operator|)
return|;
case|case
name|CRYPTO_RIPEMD160_HMAC
case|:
return|return
operator|(
literal|"HMAC/RIPEMD160"
operator|)
return|;
case|case
name|CRYPTO_SHA2_256_HMAC
case|:
return|return
operator|(
literal|"HMAC/SHA256"
operator|)
return|;
case|case
name|CRYPTO_SHA2_384_HMAC
case|:
return|return
operator|(
literal|"HMAC/SHA384"
operator|)
return|;
case|case
name|CRYPTO_SHA2_512_HMAC
case|:
return|return
operator|(
literal|"HMAC/SHA512"
operator|)
return|;
block|}
return|return
operator|(
literal|"unknown"
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|eli_metadata_dump
parameter_list|(
specifier|const
name|struct
name|g_eli_metadata
modifier|*
name|md
parameter_list|)
block|{
specifier|static
specifier|const
name|char
name|hex
index|[]
init|=
literal|"0123456789abcdef"
decl_stmt|;
name|char
name|str
index|[
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_mkeys
argument_list|)
operator|*
literal|2
operator|+
literal|1
index|]
decl_stmt|;
name|u_int
name|i
decl_stmt|;
name|printf
argument_list|(
literal|"     magic: %s\n"
argument_list|,
name|md
operator|->
name|md_magic
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"   version: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_version
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"     flags: 0x%x\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_flags
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"     ealgo: %s\n"
argument_list|,
name|g_eli_algo2str
argument_list|(
name|md
operator|->
name|md_ealgo
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"    keylen: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_keylen
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|->
name|md_flags
operator|&
name|G_ELI_FLAG_AUTH
condition|)
name|printf
argument_list|(
literal|"     aalgo: %s\n"
argument_list|,
name|g_eli_algo2str
argument_list|(
name|md
operator|->
name|md_aalgo
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"  provsize: %ju\n"
argument_list|,
operator|(
name|uintmax_t
operator|)
name|md
operator|->
name|md_provsize
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"sectorsize: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_sectorsize
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"      keys: 0x%02x\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_keys
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"iterations: %u\n"
argument_list|,
operator|(
name|u_int
operator|)
name|md
operator|->
name|md_iterations
argument_list|)
expr_stmt|;
name|bzero
argument_list|(
name|str
argument_list|,
sizeof|sizeof
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_salt
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|str
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|hex
index|[
name|md
operator|->
name|md_salt
index|[
name|i
index|]
operator|>>
literal|4
index|]
expr_stmt|;
name|str
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|hex
index|[
name|md
operator|->
name|md_salt
index|[
name|i
index|]
operator|&
literal|0x0f
index|]
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"      Salt: %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|bzero
argument_list|(
name|str
argument_list|,
sizeof|sizeof
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|md
operator|->
name|md_mkeys
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|str
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|hex
index|[
name|md
operator|->
name|md_mkeys
index|[
name|i
index|]
operator|>>
literal|4
index|]
expr_stmt|;
name|str
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|hex
index|[
name|md
operator|->
name|md_mkeys
index|[
name|i
index|]
operator|&
literal|0x0f
index|]
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"Master Key: %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|bzero
argument_list|(
name|str
argument_list|,
sizeof|sizeof
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|str
index|[
name|i
operator|*
literal|2
index|]
operator|=
name|hex
index|[
name|md
operator|->
name|md_hash
index|[
name|i
index|]
operator|>>
literal|4
index|]
expr_stmt|;
name|str
index|[
name|i
operator|*
literal|2
operator|+
literal|1
index|]
operator|=
name|hex
index|[
name|md
operator|->
name|md_hash
index|[
name|i
index|]
operator|&
literal|0x0f
index|]
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"  MD5 hash: %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int
name|g_eli_keylen
parameter_list|(
name|u_int
name|algo
parameter_list|,
name|u_int
name|keylen
parameter_list|)
block|{
switch|switch
condition|(
name|algo
condition|)
block|{
case|case
name|CRYPTO_NULL_CBC
case|:
if|if
condition|(
name|keylen
operator|==
literal|0
condition|)
name|keylen
operator|=
literal|64
operator|*
literal|8
expr_stmt|;
else|else
block|{
if|if
condition|(
name|keylen
operator|>
literal|64
operator|*
literal|8
condition|)
name|keylen
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|(
name|keylen
operator|)
return|;
case|case
name|CRYPTO_AES_CBC
case|:
case|case
name|CRYPTO_CAMELLIA_CBC
case|:
switch|switch
condition|(
name|keylen
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|(
literal|128
operator|)
return|;
case|case
literal|128
case|:
case|case
literal|192
case|:
case|case
literal|256
case|:
return|return
operator|(
name|keylen
operator|)
return|;
default|default:
return|return
operator|(
literal|0
operator|)
return|;
block|}
case|case
name|CRYPTO_AES_XTS
case|:
switch|switch
condition|(
name|keylen
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|(
literal|128
operator|)
return|;
case|case
literal|128
case|:
case|case
literal|256
case|:
return|return
operator|(
name|keylen
operator|)
return|;
default|default:
return|return
operator|(
literal|0
operator|)
return|;
block|}
case|case
name|CRYPTO_BLF_CBC
case|:
if|if
condition|(
name|keylen
operator|==
literal|0
condition|)
return|return
operator|(
literal|128
operator|)
return|;
if|if
condition|(
name|keylen
operator|<
literal|128
operator|||
name|keylen
operator|>
literal|448
condition|)
return|return
operator|(
literal|0
operator|)
return|;
if|if
condition|(
operator|(
name|keylen
operator|%
literal|32
operator|)
operator|!=
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|keylen
operator|)
return|;
case|case
name|CRYPTO_3DES_CBC
case|:
if|if
condition|(
name|keylen
operator|==
literal|0
operator|||
name|keylen
operator|==
literal|192
condition|)
return|return
operator|(
literal|192
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
default|default:
return|return
operator|(
literal|0
operator|)
return|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int
name|g_eli_hashlen
parameter_list|(
name|u_int
name|algo
parameter_list|)
block|{
switch|switch
condition|(
name|algo
condition|)
block|{
case|case
name|CRYPTO_MD5_HMAC
case|:
return|return
operator|(
literal|16
operator|)
return|;
case|case
name|CRYPTO_SHA1_HMAC
case|:
return|return
operator|(
literal|20
operator|)
return|;
case|case
name|CRYPTO_RIPEMD160_HMAC
case|:
return|return
operator|(
literal|20
operator|)
return|;
case|case
name|CRYPTO_SHA2_256_HMAC
case|:
return|return
operator|(
literal|32
operator|)
return|;
case|case
name|CRYPTO_SHA2_384_HMAC
case|:
return|return
operator|(
literal|48
operator|)
return|;
case|case
name|CRYPTO_SHA2_512_HMAC
case|:
return|return
operator|(
literal|64
operator|)
return|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function_decl
name|int
name|g_eli_read_metadata
parameter_list|(
name|struct
name|g_class
modifier|*
name|mp
parameter_list|,
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|,
name|struct
name|g_eli_metadata
modifier|*
name|md
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|g_geom
modifier|*
name|g_eli_create
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
name|struct
name|g_class
modifier|*
name|mp
parameter_list|,
name|struct
name|g_provider
modifier|*
name|bpp
parameter_list|,
specifier|const
name|struct
name|g_eli_metadata
modifier|*
name|md
parameter_list|,
specifier|const
name|u_char
modifier|*
name|mkey
parameter_list|,
name|int
name|nkey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_eli_destroy
parameter_list|(
name|struct
name|g_eli_softc
modifier|*
name|sc
parameter_list|,
name|boolean_t
name|force
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_eli_access
parameter_list|(
name|struct
name|g_provider
modifier|*
name|pp
parameter_list|,
name|int
name|dr
parameter_list|,
name|int
name|dw
parameter_list|,
name|int
name|de
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_config
parameter_list|(
name|struct
name|gctl_req
modifier|*
name|req
parameter_list|,
name|struct
name|g_class
modifier|*
name|mp
parameter_list|,
specifier|const
name|char
modifier|*
name|verb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_read_done
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_write_done
parameter_list|(
name|struct
name|bio
modifier|*
name|bp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_eli_crypto_rerun
parameter_list|(
name|struct
name|cryptop
modifier|*
name|crp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_crypto_ivgen
parameter_list|(
name|struct
name|g_eli_softc
modifier|*
name|sc
parameter_list|,
name|off_t
name|offset
parameter_list|,
name|u_char
modifier|*
name|iv
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_crypto_read
parameter_list|(
name|struct
name|g_eli_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|bio
modifier|*
name|bp
parameter_list|,
name|boolean_t
name|fromworker
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_crypto_run
parameter_list|(
name|struct
name|g_eli_worker
modifier|*
name|wr
parameter_list|,
name|struct
name|bio
modifier|*
name|bp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_auth_read
parameter_list|(
name|struct
name|g_eli_softc
modifier|*
name|sc
parameter_list|,
name|struct
name|bio
modifier|*
name|bp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_auth_run
parameter_list|(
name|struct
name|g_eli_worker
modifier|*
name|wr
parameter_list|,
name|struct
name|bio
modifier|*
name|bp
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|g_eli_mkey_hmac
parameter_list|(
name|unsigned
name|char
modifier|*
name|mkey
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_eli_mkey_decrypt
parameter_list|(
specifier|const
name|struct
name|g_eli_metadata
modifier|*
name|md
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|unsigned
name|char
modifier|*
name|mkey
parameter_list|,
name|unsigned
modifier|*
name|nkeyp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_eli_mkey_encrypt
parameter_list|(
name|unsigned
name|algo
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|key
parameter_list|,
name|unsigned
name|keylen
parameter_list|,
name|unsigned
name|char
modifier|*
name|mkey
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function_decl
name|void
name|g_eli_mkey_propagate
parameter_list|(
name|struct
name|g_eli_softc
modifier|*
name|sc
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|mkey
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|g_eli_crypto_encrypt
parameter_list|(
name|u_int
name|algo
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|,
name|size_t
name|datasize
parameter_list|,
specifier|const
name|u_char
modifier|*
name|key
parameter_list|,
name|size_t
name|keysize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|g_eli_crypto_decrypt
parameter_list|(
name|u_int
name|algo
parameter_list|,
name|u_char
modifier|*
name|data
parameter_list|,
name|size_t
name|datasize
parameter_list|,
specifier|const
name|u_char
modifier|*
name|key
parameter_list|,
name|size_t
name|keysize
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|hmac_ctx
block|{
name|SHA512_CTX
name|shactx
decl_stmt|;
name|u_char
name|k_opad
index|[
literal|128
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|g_eli_crypto_hmac_init
parameter_list|(
name|struct
name|hmac_ctx
modifier|*
name|ctx
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|hkey
parameter_list|,
name|size_t
name|hkeylen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_crypto_hmac_update
parameter_list|(
name|struct
name|hmac_ctx
modifier|*
name|ctx
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|data
parameter_list|,
name|size_t
name|datasize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_crypto_hmac_final
parameter_list|(
name|struct
name|hmac_ctx
modifier|*
name|ctx
parameter_list|,
name|uint8_t
modifier|*
name|md
parameter_list|,
name|size_t
name|mdsize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_crypto_hmac
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|hkey
parameter_list|,
name|size_t
name|hkeysize
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|data
parameter_list|,
name|size_t
name|datasize
parameter_list|,
name|uint8_t
modifier|*
name|md
parameter_list|,
name|size_t
name|mdsize
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function_decl
name|void
name|g_eli_key_init
parameter_list|(
name|struct
name|g_eli_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_key_destroy
parameter_list|(
name|struct
name|g_eli_softc
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|g_eli_key_hold
parameter_list|(
name|struct
name|g_eli_softc
modifier|*
name|sc
parameter_list|,
name|off_t
name|offset
parameter_list|,
name|size_t
name|blocksize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|g_eli_key_drop
parameter_list|(
name|struct
name|g_eli_softc
modifier|*
name|sc
parameter_list|,
name|uint8_t
modifier|*
name|rawkey
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_G_ELI_H_ */
end_comment

end_unit

