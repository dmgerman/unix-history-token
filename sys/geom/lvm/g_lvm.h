begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2008 Andrew Thompson<thompsa@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|G_LVM_DEBUG
parameter_list|(
name|lvl
parameter_list|,
modifier|...
parameter_list|)
value|do {					\ 	if (g_lvm_debug>= (lvl)) {					\ 		printf("GEOM_LVM");					\ 		if (g_lvm_debug> 0)					\ 			printf("[%u]", lvl);				\ 		printf(": ");						\ 		printf(__VA_ARGS__);					\ 		printf("\n");						\ 	}								\ } while (0)
end_define

begin_define
define|#
directive|define
name|G_LVM_CLASS_NAME
value|"LVM"
end_define

begin_define
define|#
directive|define
name|G_LVM_NAMELEN
value|128
end_define

begin_define
define|#
directive|define
name|G_LVM_UUIDLEN
value|40
end_define

begin_define
define|#
directive|define
name|G_LVM_MAGIC
value|"\040\114\126\115\062\040\170\133" \ 				"\065\101\045\162\060\116\052\076"
end_define

begin_struct
struct|struct
name|g_lvm_label
block|{
name|uint64_t
name|ll_sector
decl_stmt|;
name|uint32_t
name|ll_crc
decl_stmt|;
name|uint32_t
name|ll_offset
decl_stmt|;
name|char
name|ll_uuid
index|[
name|G_LVM_UUIDLEN
index|]
decl_stmt|;
name|uint64_t
name|ll_size
decl_stmt|;
name|uint64_t
name|ll_pestart
decl_stmt|;
name|uint64_t
name|ll_md_offset
decl_stmt|;
name|uint64_t
name|ll_md_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|g_lvm_metadata
block|{
name|uint32_t
name|md_csum
decl_stmt|;
name|uint32_t
name|md_version
decl_stmt|;
name|uint64_t
name|md_start
decl_stmt|;
name|uint64_t
name|md_size
decl_stmt|;
name|uint64_t
name|md_reloffset
decl_stmt|;
name|uint64_t
name|md_relsize
decl_stmt|;
name|struct
name|g_lvm_vg
modifier|*
name|md_vg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|g_lvm_lv
block|{
name|LIST_ENTRY
argument_list|(
argument|g_lvm_lv
argument_list|)
name|lv_next
expr_stmt|;
name|struct
name|g_lvm_vg
modifier|*
name|lv_vg
decl_stmt|;
name|char
name|lv_name
index|[
name|G_LVM_NAMELEN
index|]
decl_stmt|;
name|char
name|lv_uuid
index|[
name|G_LVM_UUIDLEN
index|]
decl_stmt|;
name|int
name|lv_sgcount
decl_stmt|;
name|int
name|lv_sgactive
decl_stmt|;
name|struct
name|g_provider
modifier|*
name|lv_gprov
decl_stmt|;
name|int
name|lv_extentcount
decl_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|g_lvm_segment
argument_list|)
name|lv_segs
expr_stmt|;
name|int
name|lv_numsegs
decl_stmt|;
name|struct
name|g_lvm_segment
modifier|*
name|lv_firstsg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|g_lvm_pv
block|{
name|LIST_ENTRY
argument_list|(
argument|g_lvm_pv
argument_list|)
name|pv_next
expr_stmt|;
name|struct
name|g_lvm_vg
modifier|*
name|pv_vg
decl_stmt|;
name|char
name|pv_name
index|[
name|G_LVM_NAMELEN
index|]
decl_stmt|;
name|char
name|pv_uuid
index|[
name|G_LVM_UUIDLEN
index|]
decl_stmt|;
name|size_t
name|pv_size
decl_stmt|;
name|off_t
name|pv_start
decl_stmt|;
name|int
name|pv_count
decl_stmt|;
name|struct
name|g_provider
modifier|*
name|pv_gprov
decl_stmt|;
name|struct
name|g_consumer
modifier|*
name|pv_gcons
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|g_lvm_segment
block|{
name|LIST_ENTRY
argument_list|(
argument|g_lvm_segment
argument_list|)
name|sg_next
expr_stmt|;
name|int
name|sg_start
decl_stmt|;
name|int
name|sg_end
decl_stmt|;
name|int
name|sg_count
decl_stmt|;
name|char
name|sg_pvname
index|[
name|G_LVM_NAMELEN
index|]
decl_stmt|;
name|struct
name|g_lvm_pv
modifier|*
name|sg_pv
decl_stmt|;
name|int
name|sg_pvstart
decl_stmt|;
name|off_t
name|sg_pvoffset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|g_lvm_vg
block|{
name|LIST_ENTRY
argument_list|(
argument|g_lvm_vg
argument_list|)
name|vg_next
expr_stmt|;
name|char
name|vg_name
index|[
name|G_LVM_NAMELEN
index|]
decl_stmt|;
name|char
name|vg_uuid
index|[
name|G_LVM_UUIDLEN
index|]
decl_stmt|;
name|size_t
name|vg_extentsize
decl_stmt|;
name|int
name|vg_sectorsize
decl_stmt|;
name|struct
name|g_geom
modifier|*
name|vg_geom
decl_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|g_lvm_pv
argument_list|)
name|vg_pvs
expr_stmt|;
name|LIST_HEAD
argument_list|(
argument_list|,
argument|g_lvm_lv
argument_list|)
name|vg_lvs
expr_stmt|;
block|}
struct|;
end_struct

end_unit

