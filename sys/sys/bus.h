begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1997,1998 Doug Rabson  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_BUS_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_BUS_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_comment
comment|/*  * Forward declarations  */
end_comment

begin_typedef
typedef|typedef
name|struct
name|device
modifier|*
name|device_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|driver
name|driver_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|device_method
name|device_method_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|devclass
modifier|*
name|devclass_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|device_ops
modifier|*
name|device_ops_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|device_op_desc
modifier|*
name|device_op_desc_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|driver_intr_t
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * We define this in terms of bits because some devices may belong  * to multiple classes (and therefore need to be included in  * multiple interrupt masks, which is what this really serves to  * indicate.  Buses which do interrupt remapping will want to  * change their type to reflect what sort of devices are underneath.  */
end_comment

begin_enum
enum|enum
name|intr_type
block|{
name|INTR_TYPE_TTY
init|=
literal|1
block|,
name|INTR_TYPE_BIO
init|=
literal|2
block|,
name|INTR_TYPE_NET
init|=
literal|4
block|,
name|INTR_TYPE_CAM
init|=
literal|8
block|,
name|INTR_TYPE_MISC
init|=
literal|16
block|,
name|INTR_TYPE_FAST
init|=
literal|128
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|INTR_TYPE_AV
value|INTR_TYPE_TTY
end_define

begin_comment
comment|/* for source compatability with 5.x */
end_comment

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|devop_t
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|device_method
block|{
name|device_op_desc_t
name|desc
decl_stmt|;
name|devop_t
name|func
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|driver
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* driver name */
name|device_method_t
modifier|*
name|methods
decl_stmt|;
comment|/* method table */
name|size_t
name|softc
decl_stmt|;
comment|/* size of device softc struct */
name|void
modifier|*
name|priv
decl_stmt|;
comment|/* driver private data */
name|device_ops_t
name|ops
decl_stmt|;
comment|/* compiled method table */
name|int
name|refs
decl_stmt|;
comment|/* # devclasses containing driver */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
name|device_state
block|{
name|DS_NOTPRESENT
block|,
comment|/* not probed or probe failed */
name|DS_ALIVE
block|,
comment|/* probe succeeded */
name|DS_ATTACHED
block|,
comment|/* attach method called */
name|DS_BUSY
comment|/* device is open */
block|}
name|device_state_t
typedef|;
end_typedef

begin_comment
comment|/*  * Definitions for drivers which need to keep simple lists of resources  * for their child devices.  */
end_comment

begin_struct_decl
struct_decl|struct
name|resource
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|resource_list_entry
block|{
name|SLIST_ENTRY
argument_list|(
argument|resource_list_entry
argument_list|)
name|link
expr_stmt|;
name|int
name|type
decl_stmt|;
comment|/* type argument to alloc_resource */
name|int
name|rid
decl_stmt|;
comment|/* resource identifier */
name|struct
name|resource
modifier|*
name|res
decl_stmt|;
comment|/* the real resource when allocated */
name|u_long
name|start
decl_stmt|;
comment|/* start of resource range */
name|u_long
name|end
decl_stmt|;
comment|/* end of resource range */
name|u_long
name|count
decl_stmt|;
comment|/* count within range */
block|}
struct|;
end_struct

begin_expr_stmt
name|SLIST_HEAD
argument_list|(
name|resource_list
argument_list|,
name|resource_list_entry
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * Initialise a resource list.  */
end_comment

begin_function_decl
name|void
name|resource_list_init
parameter_list|(
name|struct
name|resource_list
modifier|*
name|rl
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Reclaim memory used by a resource list.  */
end_comment

begin_function_decl
name|void
name|resource_list_free
parameter_list|(
name|struct
name|resource_list
modifier|*
name|rl
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Add a resource entry or modify an existing entry if one exists with   * the same type and rid.  */
end_comment

begin_function_decl
name|void
name|resource_list_add
parameter_list|(
name|struct
name|resource_list
modifier|*
name|rl
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|u_long
name|start
parameter_list|,
name|u_long
name|end
parameter_list|,
name|u_long
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Find a resource entry by type and rid.  */
end_comment

begin_function_decl
name|struct
name|resource_list_entry
modifier|*
name|resource_list_find
parameter_list|(
name|struct
name|resource_list
modifier|*
name|rl
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Delete a resource entry.  */
end_comment

begin_function_decl
name|void
name|resource_list_delete
parameter_list|(
name|struct
name|resource_list
modifier|*
name|rl
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Implement BUS_ALLOC_RESOURCE by looking up a resource from the list   * and passing the allocation up to the parent of bus. This assumes  * that the first entry of device_get_ivars(child) is a struct  * resource_list. This also handles 'passthrough' allocations where a  * child is a remote descendant of bus by passing the allocation up to   * the parent of bus.  */
end_comment

begin_function_decl
name|struct
name|resource
modifier|*
name|resource_list_alloc
parameter_list|(
name|struct
name|resource_list
modifier|*
name|rl
parameter_list|,
name|device_t
name|bus
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|type
parameter_list|,
name|int
modifier|*
name|rid
parameter_list|,
name|u_long
name|start
parameter_list|,
name|u_long
name|end
parameter_list|,
name|u_long
name|count
parameter_list|,
name|u_int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Implement BUS_RELEASE_RESOURCE.  */
end_comment

begin_function_decl
name|int
name|resource_list_release
parameter_list|(
name|struct
name|resource_list
modifier|*
name|rl
parameter_list|,
name|device_t
name|bus
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|struct
name|resource
modifier|*
name|res
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Print all resources of a specified type, for use in bus_print_child.  * The name is printed if at least one resource of the given type is available.  * The format ist used to print resource start and end.  */
end_comment

begin_function_decl
name|int
name|resource_list_print_type
parameter_list|(
name|struct
name|resource_list
modifier|*
name|rl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The root bus, to which all top-level busses are attached.  */
end_comment

begin_decl_stmt
specifier|extern
name|device_t
name|root_bus
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|devclass_t
name|root_devclass
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|root_bus_configure
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Useful functions for implementing busses.  */
end_comment

begin_function_decl
name|int
name|bus_generic_activate_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|resource
modifier|*
name|bus_generic_alloc_resource
parameter_list|(
name|device_t
name|bus
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|type
parameter_list|,
name|int
modifier|*
name|rid
parameter_list|,
name|u_long
name|start
parameter_list|,
name|u_long
name|end
parameter_list|,
name|u_long
name|count
parameter_list|,
name|u_int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_attach
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_deactivate_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_detach
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bus_generic_driver_added
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|driver_t
modifier|*
name|driver
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_print_child_header
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_print_child_footer
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_print_child
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_probe
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_read_ivar
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|which
parameter_list|,
name|uintptr_t
modifier|*
name|result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_release_resource
parameter_list|(
name|device_t
name|bus
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_resume
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_setup_intr
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|struct
name|resource
modifier|*
name|irq
parameter_list|,
name|int
name|flags
parameter_list|,
name|driver_intr_t
modifier|*
name|intr
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_shutdown
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_suspend
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_teardown_intr
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|struct
name|resource
modifier|*
name|irq
parameter_list|,
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_generic_write_ivar
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|,
name|int
name|which
parameter_list|,
name|uintptr_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Wrapper functions for the BUS_*_RESOURCE methods to make client code  * a little simpler.  */
end_comment

begin_function_decl
name|struct
name|resource
modifier|*
name|bus_alloc_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|type
parameter_list|,
name|int
modifier|*
name|rid
parameter_list|,
name|u_long
name|start
parameter_list|,
name|u_long
name|end
parameter_list|,
name|u_long
name|count
parameter_list|,
name|u_int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_activate_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_deactivate_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_release_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_setup_intr
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|,
name|int
name|flags
parameter_list|,
name|driver_intr_t
name|handler
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|void
modifier|*
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_teardown_intr
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|struct
name|resource
modifier|*
name|r
parameter_list|,
name|void
modifier|*
name|cookie
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_set_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|u_long
name|start
parameter_list|,
name|u_long
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_get_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|,
name|u_long
modifier|*
name|startp
parameter_list|,
name|u_long
modifier|*
name|countp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_long
name|bus_get_resource_start
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_long
name|bus_get_resource_count
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bus_delete_resource
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|rid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Access functions for device.  */
end_comment

begin_function_decl
name|device_t
name|device_add_child
parameter_list|(
name|device_t
name|dev
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|device_t
name|device_add_child_ordered
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|order
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_busy
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_delete_child
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
name|child
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_detach
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_disable
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_enable
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|device_t
name|device_find_child
parameter_list|(
name|device_t
name|dev
parameter_list|,
specifier|const
name|char
modifier|*
name|classname
parameter_list|,
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|device_get_desc
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|devclass_t
name|device_get_devclass
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|driver_t
modifier|*
name|device_get_driver
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int32_t
name|device_get_flags
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|device_t
name|device_get_parent
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_get_children
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|device_t
modifier|*
modifier|*
name|listp
parameter_list|,
name|int
modifier|*
name|countp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|device_get_ivars
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_set_ivars
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|ivars
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|device_get_name
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|device_get_nameunit
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|device_get_softc
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|device_state_t
name|device_get_state
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_get_unit
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_is_alive
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* did probe succeed? */
end_comment

begin_function_decl
name|int
name|device_is_enabled
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_is_quiet
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_print_prettyname
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_printf
parameter_list|(
name|device_t
name|dev
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|2
operator|,
function_decl|3
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|device_probe_and_attach
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_quiet
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_set_desc
parameter_list|(
name|device_t
name|dev
parameter_list|,
specifier|const
name|char
modifier|*
name|desc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_set_desc_copy
parameter_list|(
name|device_t
name|dev
parameter_list|,
specifier|const
name|char
modifier|*
name|desc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_set_devclass
parameter_list|(
name|device_t
name|dev
parameter_list|,
specifier|const
name|char
modifier|*
name|classname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_set_driver
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|driver_t
modifier|*
name|driver
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_set_flags
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|u_int32_t
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_set_softc
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|void
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|device_set_unit
parameter_list|(
name|device_t
name|dev
parameter_list|,
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* XXX DONT USE XXX */
end_comment

begin_function_decl
name|int
name|device_shutdown
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_unbusy
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|device_verbose
parameter_list|(
name|device_t
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Access functions for devclass.  */
end_comment

begin_function_decl
name|int
name|devclass_add_driver
parameter_list|(
name|devclass_t
name|dc
parameter_list|,
name|driver_t
modifier|*
name|driver
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|devclass_delete_driver
parameter_list|(
name|devclass_t
name|dc
parameter_list|,
name|driver_t
modifier|*
name|driver
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|devclass_t
name|devclass_create
parameter_list|(
specifier|const
name|char
modifier|*
name|classname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|devclass_t
name|devclass_find
parameter_list|(
specifier|const
name|char
modifier|*
name|classname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|driver_t
modifier|*
name|devclass_find_driver
parameter_list|(
name|devclass_t
name|dc
parameter_list|,
specifier|const
name|char
modifier|*
name|classname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|devclass_get_name
parameter_list|(
name|devclass_t
name|dc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|device_t
name|devclass_get_device
parameter_list|(
name|devclass_t
name|dc
parameter_list|,
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|devclass_get_softc
parameter_list|(
name|devclass_t
name|dc
parameter_list|,
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|devclass_get_devices
parameter_list|(
name|devclass_t
name|dc
parameter_list|,
name|device_t
modifier|*
modifier|*
name|listp
parameter_list|,
name|int
modifier|*
name|countp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|devclass_get_maxunit
parameter_list|(
name|devclass_t
name|dc
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Access functions for device resources.  */
end_comment

begin_function_decl
name|int
name|resource_int_value
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|unit
parameter_list|,
specifier|const
name|char
modifier|*
name|resname
parameter_list|,
name|int
modifier|*
name|result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|resource_long_value
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|unit
parameter_list|,
specifier|const
name|char
modifier|*
name|resname
parameter_list|,
name|long
modifier|*
name|result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|resource_string_value
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|unit
parameter_list|,
specifier|const
name|char
modifier|*
name|resname
parameter_list|,
name|char
modifier|*
modifier|*
name|result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|resource_query_string
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|char
modifier|*
name|resname
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|resource_query_name
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|resource_query_unit
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|resource_locate
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|char
modifier|*
name|resname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|resource_set_int
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|unit
parameter_list|,
specifier|const
name|char
modifier|*
name|resname
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|resource_set_long
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|unit
parameter_list|,
specifier|const
name|char
modifier|*
name|resname
parameter_list|,
name|long
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|resource_set_string
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|unit
parameter_list|,
specifier|const
name|char
modifier|*
name|resname
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|resource_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Shorthand for constructing method tables.  */
end_comment

begin_define
define|#
directive|define
name|DEVMETHOD
parameter_list|(
name|NAME
parameter_list|,
name|FUNC
parameter_list|)
value|{&NAME##_desc, (devop_t) FUNC }
end_define

begin_comment
comment|/*  * Some common device interfaces.  */
end_comment

begin_include
include|#
directive|include
file|"device_if.h"
end_include

begin_include
include|#
directive|include
file|"bus_if.h"
end_include

begin_struct_decl
struct_decl|struct
name|module
struct_decl|;
end_struct_decl

begin_function_decl
name|int
name|driver_module_handler
parameter_list|(
name|struct
name|module
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Module support for automatically adding drivers to busses.  */
end_comment

begin_struct
struct|struct
name|driver_module_data
block|{
name|int
function_decl|(
modifier|*
name|dmd_chainevh
function_decl|)
parameter_list|(
name|struct
name|module
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|dmd_chainarg
decl_stmt|;
specifier|const
name|char
modifier|*
name|dmd_busname
decl_stmt|;
name|driver_t
modifier|*
modifier|*
name|dmd_drivers
decl_stmt|;
name|int
name|dmd_ndrivers
decl_stmt|;
name|devclass_t
modifier|*
name|dmd_devclass
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DRIVER_MODULE
parameter_list|(
name|name
parameter_list|,
name|busname
parameter_list|,
name|driver
parameter_list|,
name|devclass
parameter_list|,
name|evh
parameter_list|,
name|arg
parameter_list|)
define|\ 									\
value|static driver_t *name##_##busname##_driver_list[] = {&driver };	\ static struct driver_module_data name##_##busname##_driver_mod = {	\ 	evh, arg,							\ 	#busname,							\ 	name##_##busname##_driver_list,					\ 	(sizeof name##_##busname##_driver_list) /			\ 		(sizeof name##_##busname##_driver_list[0]),		\&devclass							\ };									\ 									\ static moduledata_t name##_##busname##_mod = {				\ 	#busname "/" #name,						\ 	driver_module_handler,						\&name##_##busname##_driver_mod					\ };									\ DECLARE_MODULE(name##_##busname, name##_##busname##_mod,		\ 	       SI_SUB_DRIVERS, SI_ORDER_MIDDLE)
end_define

begin_define
define|#
directive|define
name|MULTI_DRIVER_MODULE
parameter_list|(
name|name
parameter_list|,
name|busname
parameter_list|,
name|drivers
parameter_list|,
name|devclass
parameter_list|,
name|evh
parameter_list|,
name|arg
parameter_list|)
define|\ 									\
value|static driver_t name##_##busname##_driver_list[] = drivers;		\ static struct driver_module_data name##_##busname##_driver_mod = {	\ 	evh, arg,							\ 	#busname,							\ 	name##_##busname##_driver_list,					\ 	(sizeof name##_##busname##_driver_list) /			\ 		(sizeof name##_##busname##_driver_list[0]),		\&devclass							\ };									\ 									\ static moduledata_t name##_##busname##_mod = {				\ 	#busname "/" #name,						\ 	driver_module_handler,						\&name##_##busname##_driver_mod					\ };									\ DECLARE_MODULE(name##_##busname, name##_##busname##_mod,		\ 	       SI_SUB_DRIVERS, SI_ORDER_MIDDLE)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_SYS_BUS_H_ */
end_comment

end_unit

