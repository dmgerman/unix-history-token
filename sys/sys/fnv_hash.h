begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Fowler / Noll / Vo Hash (FNV Hash)  * http://www.isthe.com/chongo/tech/comp/fnv/  *  * This is an implementation of the algorithms posted above.  * This file is placed in the public domain by Peter Wemm.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_FNV_HASH_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_FNV_HASH_H_
end_define

begin_typedef
typedef|typedef
name|u_int32_t
name|Fnv32_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int64_t
name|Fnv64_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|FNV1_32_INIT
value|((Fnv32_t) 33554467UL)
end_define

begin_define
define|#
directive|define
name|FNV1_64_INIT
value|((Fnv64_t) 0xcbf29ce484222325ULL)
end_define

begin_define
define|#
directive|define
name|FNV_32_PRIME
value|((Fnv32_t) 0x01000193UL)
end_define

begin_define
define|#
directive|define
name|FNV_64_PRIME
value|((Fnv64_t) 0x100000001b3ULL)
end_define

begin_function
specifier|static
name|__inline
name|Fnv32_t
name|fnv_32_buf
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|Fnv32_t
name|hval
parameter_list|)
block|{
specifier|const
name|u_int8_t
modifier|*
name|s
init|=
operator|(
specifier|const
name|u_int8_t
operator|*
operator|)
name|buf
decl_stmt|;
while|while
condition|(
name|len
operator|--
operator|!=
literal|0
condition|)
block|{
name|hval
operator|*=
name|FNV_32_PRIME
expr_stmt|;
name|hval
operator|^=
operator|*
name|s
operator|++
expr_stmt|;
block|}
return|return
name|hval
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|Fnv32_t
name|fnv_32_str
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|Fnv32_t
name|hval
parameter_list|)
block|{
specifier|const
name|u_int8_t
modifier|*
name|s
init|=
operator|(
specifier|const
name|u_int8_t
operator|*
operator|)
name|str
decl_stmt|;
name|Fnv32_t
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
operator|*
name|s
operator|++
operator|)
operator|!=
literal|0
condition|)
block|{
name|hval
operator|*=
name|FNV_32_PRIME
expr_stmt|;
name|hval
operator|^=
name|c
expr_stmt|;
block|}
return|return
name|hval
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|Fnv64_t
name|fnv_64_buf
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|Fnv64_t
name|hval
parameter_list|)
block|{
specifier|const
name|u_int8_t
modifier|*
name|s
init|=
operator|(
specifier|const
name|u_int8_t
operator|*
operator|)
name|buf
decl_stmt|;
while|while
condition|(
name|len
operator|--
operator|!=
literal|0
condition|)
block|{
name|hval
operator|*=
name|FNV_64_PRIME
expr_stmt|;
name|hval
operator|^=
operator|*
name|s
operator|++
expr_stmt|;
block|}
return|return
name|hval
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|Fnv64_t
name|fnv_64_str
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|Fnv64_t
name|hval
parameter_list|)
block|{
specifier|const
name|u_int8_t
modifier|*
name|s
init|=
operator|(
specifier|const
name|u_int8_t
operator|*
operator|)
name|str
decl_stmt|;
name|u_register_t
name|c
decl_stmt|;
comment|/* 32 bit on i386, 64 bit on alpha */
while|while
condition|(
operator|(
name|c
operator|=
operator|*
name|s
operator|++
operator|)
operator|!=
literal|0
condition|)
block|{
name|hval
operator|*=
name|FNV_64_PRIME
expr_stmt|;
name|hval
operator|^=
name|c
expr_stmt|;
block|}
return|return
name|hval
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_FNV_HASH_H_ */
end_comment

end_unit

