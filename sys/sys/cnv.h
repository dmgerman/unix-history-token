begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2016 Adam Starak<starak.adam@gmail.com>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CNV_H_
end_ifndef

begin_define
define|#
directive|define
name|_CNV_H_
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_NVLIST_T_DECLARED
end_ifndef

begin_define
define|#
directive|define
name|_NVLIST_T_DECLARED
end_define

begin_struct_decl
struct_decl|struct
name|nvlist
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|struct
name|nvlist
name|nvlist_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|__BEGIN_DECLS
comment|/*  * Functions which returns information about the given cookie.  */
specifier|const
name|char
modifier|*
name|cnvlist_name
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cnvlist_type
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The cnvlist_get functions returns value associated with the given cookie.  * If it returns a pointer, the pointer represents internal buffer and should  * not be freed by the caller.  */
end_comment

begin_function_decl
name|bool
name|cnvlist_get_bool
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|cnvlist_get_number
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|cnvlist_get_string
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|nvlist_t
modifier|*
name|cnvlist_get_nvlist
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|cnvlist_get_binary
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|bool
modifier|*
name|cnvlist_get_bool_array
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|uint64_t
modifier|*
name|cnvlist_get_number_array
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|cnvlist_get_string_array
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|nvlist_t
modifier|*
specifier|const
modifier|*
name|cnvlist_get_nvlist_array
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|int
name|cnvlist_get_descriptor
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|int
modifier|*
name|cnvlist_get_descriptor_array
parameter_list|(
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * The cnvlist_take functions returns value associated with the given cookie and  * remove the given entry from the nvlist.  * The caller is responsible for freeing received data.  */
end_comment

begin_function_decl
name|bool
name|cnvlist_take_bool
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|cnvlist_take_number
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|cnvlist_take_string
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|nvlist_t
modifier|*
name|cnvlist_take_nvlist
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|cnvlist_take_binary
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
modifier|*
name|cnvlist_take_bool_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
modifier|*
name|cnvlist_take_number_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
modifier|*
name|cnvlist_take_string_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|nvlist_t
modifier|*
modifier|*
name|cnvlist_take_nvlist_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|int
name|cnvlist_take_descriptor
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
modifier|*
name|cnvlist_take_descriptor_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|,
name|size_t
modifier|*
name|nitemsp
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * The cnvlist_free functions removes the given name/value pair from the nvlist based on cookie  * and frees memory associated with it.  */
end_comment

begin_function_decl
name|void
name|cnvlist_free_bool
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cnvlist_free_number
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cnvlist_free_string
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cnvlist_free_nvlist
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cnvlist_free_binary
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cnvlist_free_bool_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cnvlist_free_number_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cnvlist_free_string_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cnvlist_free_nvlist_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|void
name|cnvlist_free_descriptor
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cnvlist_free_descriptor_array
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_CNV_H_ */
end_comment

end_unit

