begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Pawel Jakub Dawidek under sponsorship from  * the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DNV_H_
end_ifndef

begin_define
define|#
directive|define
name|_DNV_H_
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_NVLIST_T_DECLARED
end_ifndef

begin_define
define|#
directive|define
name|_NVLIST_T_DECLARED
end_define

begin_struct_decl
struct_decl|struct
name|nvlist
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|struct
name|nvlist
name|nvlist_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|__BEGIN_DECLS
comment|/*  * The dnvlist_get functions returns value associated with the given name.  * If it returns a pointer, the pointer represents internal buffer and should  * not be freed by the caller.  * If no element of the given name and type exists, the function will return  * provided default value.  */
name|bool
name|dnvlist_get_bool
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|bool
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|dnvlist_get_number
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|uint64_t
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|dnvlist_get_string
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|nvlist_t
modifier|*
name|dnvlist_get_nvlist
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|nvlist_t
modifier|*
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dnvlist_get_descriptor
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|dnvlist_get_binary
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|,
specifier|const
name|void
modifier|*
name|defval
parameter_list|,
name|size_t
name|defsize
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|bool
name|dnvlist_getf_bool
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|bool
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|uint64_t
name|dnvlist_getf_number
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|uint64_t
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
specifier|const
name|char
modifier|*
name|dnvlist_getf_string
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
specifier|const
name|nvlist_t
modifier|*
name|dnvlist_getf_nvlist
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|nvlist_t
modifier|*
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|dnvlist_getf_descriptor
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|int
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
specifier|const
name|void
modifier|*
name|dnvlist_getf_binary
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|,
specifier|const
name|void
modifier|*
name|defval
parameter_list|,
name|size_t
name|defsize
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|5
operator|,
function_decl|6
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|bool
name|dnvlist_getv_bool
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|bool
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|uint64_t
name|dnvlist_getv_number
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|uint64_t
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
specifier|const
name|char
modifier|*
name|dnvlist_getv_string
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
specifier|const
name|nvlist_t
modifier|*
name|dnvlist_getv_nvlist
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|nvlist_t
modifier|*
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|dnvlist_getv_descriptor
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|int
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
specifier|const
name|void
modifier|*
name|dnvlist_getv_binary
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|,
specifier|const
name|void
modifier|*
name|defval
parameter_list|,
name|size_t
name|defsize
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|5
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * The dnvlist_take functions returns value associated with the given name and  * remove corresponding nvpair.  * If it returns a pointer, the caller has to free it.  * If no element of the given name and type exists, the function will return  * provided default value.  */
end_comment

begin_function_decl
name|bool
name|dnvlist_take_bool
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|bool
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|dnvlist_take_number
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|uint64_t
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|dnvlist_take_string
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|nvlist_t
modifier|*
name|dnvlist_take_nvlist
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|nvlist_t
modifier|*
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dnvlist_take_descriptor
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|defval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|dnvlist_take_binary
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|,
name|void
modifier|*
name|defval
parameter_list|,
name|size_t
name|defsize
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|bool
name|dnvlist_takef_bool
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|bool
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|uint64_t
name|dnvlist_takef_number
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|uint64_t
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|char
modifier|*
name|dnvlist_takef_string
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|char
modifier|*
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|nvlist_t
modifier|*
name|dnvlist_takef_nvlist
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|nvlist_t
modifier|*
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|dnvlist_takef_descriptor
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|int
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
modifier|*
name|dnvlist_takef_binary
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|,
name|void
modifier|*
name|defval
parameter_list|,
name|size_t
name|defsize
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|5
operator|,
function_decl|6
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|bool
name|dnvlist_takev_bool
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|bool
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|uint64_t
name|dnvlist_takev_number
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|uint64_t
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|char
modifier|*
name|dnvlist_takev_string
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|char
modifier|*
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|nvlist_t
modifier|*
name|dnvlist_takev_nvlist
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|nvlist_t
modifier|*
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|dnvlist_takev_descriptor
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|int
name|defval
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
modifier|*
name|dnvlist_takev_binary
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|,
name|void
modifier|*
name|defval
parameter_list|,
name|size_t
name|defsize
parameter_list|,
specifier|const
name|char
modifier|*
name|namefmt
parameter_list|,
name|va_list
name|nameap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|5
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_DNV_H_ */
end_comment

end_unit

