begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1992, 1993  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	@(#)libkern.h	8.1 (Berkeley) 6/10/93  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_LIBKERN_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_LIBKERN_H_
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|LIBKERN_INLINE
end_ifndef

begin_define
define|#
directive|define
name|LIBKERN_INLINE
value|static __inline
end_define

begin_define
define|#
directive|define
name|LIBKERN_BODY
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* BCD conversions. */
end_comment

begin_decl_stmt
specifier|extern
name|u_char
specifier|const
name|bcd2bin_data
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
specifier|const
name|bin2bcd_data
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
specifier|const
name|hex2ascii_data
index|[]
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|bcd2bin
parameter_list|(
name|bcd
parameter_list|)
value|(bcd2bin_data[bcd])
end_define

begin_define
define|#
directive|define
name|bin2bcd
parameter_list|(
name|bin
parameter_list|)
value|(bin2bcd_data[bin])
end_define

begin_define
define|#
directive|define
name|hex2ascii
parameter_list|(
name|hex
parameter_list|)
value|(hex2ascii_data[hex])
end_define

begin_function
specifier|static
name|__inline
name|int
name|imax
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|imin
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|long
name|lmax
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|long
name|lmin
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int
name|max
parameter_list|(
name|u_int
name|a
parameter_list|,
name|u_int
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int
name|min
parameter_list|(
name|u_int
name|a
parameter_list|,
name|u_int
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|quad_t
name|qmax
parameter_list|(
name|quad_t
name|a
parameter_list|,
name|quad_t
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|quad_t
name|qmin
parameter_list|(
name|quad_t
name|a
parameter_list|,
name|quad_t
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|ulmax
parameter_list|(
name|u_long
name|a
parameter_list|,
name|u_long
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|ulmin
parameter_list|(
name|u_long
name|a
parameter_list|,
name|u_long
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|off_t
name|omax
parameter_list|(
name|off_t
name|a
parameter_list|,
name|off_t
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|off_t
name|omin
parameter_list|(
name|off_t
name|a
parameter_list|,
name|off_t
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|abs
parameter_list|(
name|int
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
literal|0
condition|?
operator|-
name|a
else|:
name|a
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|long
name|labs
parameter_list|(
name|long
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
literal|0
condition|?
operator|-
name|a
else|:
name|a
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|quad_t
name|qabs
parameter_list|(
name|quad_t
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
literal|0
condition|?
operator|-
name|a
else|:
name|a
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|ARC4_ENTR_NONE
value|0
end_define

begin_comment
comment|/* Don't have entropy yet. */
end_comment

begin_define
define|#
directive|define
name|ARC4_ENTR_HAVE
value|1
end_define

begin_comment
comment|/* Have entropy. */
end_comment

begin_define
define|#
directive|define
name|ARC4_ENTR_SEED
value|2
end_define

begin_comment
comment|/* Reseeding. */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|arc4rand_iniseed_state
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Prototypes for non-quad routines. */
end_comment

begin_struct_decl
struct_decl|struct
name|malloc_type
struct_decl|;
end_struct_decl

begin_function_decl
name|uint32_t
name|arc4random
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arc4rand
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|u_int
name|len
parameter_list|,
name|int
name|reseed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bcmp
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|timingsafe_bcmp
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|bsearch
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|HAVE_INLINE_FFS
end_ifndef

begin_function_decl
name|int
name|ffs
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|HAVE_INLINE_FFSL
end_ifndef

begin_function_decl
name|int
name|ffsl
parameter_list|(
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|HAVE_INLINE_FLS
end_ifndef

begin_function_decl
name|int
name|fls
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|HAVE_INLINE_FLSL
end_ifndef

begin_function_decl
name|int
name|flsl
parameter_list|(
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|HAVE_INLINE_FLSLL
end_ifndef

begin_function_decl
name|int
name|flsll
parameter_list|(
name|long
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|bitcount64
parameter_list|(
name|x
parameter_list|)
value|__bitcount64((uint64_t)(x))
end_define

begin_define
define|#
directive|define
name|bitcount32
parameter_list|(
name|x
parameter_list|)
value|__bitcount32((uint32_t)(x))
end_define

begin_define
define|#
directive|define
name|bitcount16
parameter_list|(
name|x
parameter_list|)
value|__bitcount16((uint16_t)(x))
end_define

begin_define
define|#
directive|define
name|bitcountl
parameter_list|(
name|x
parameter_list|)
value|__bitcountl((u_long)(x))
end_define

begin_define
define|#
directive|define
name|bitcount
parameter_list|(
name|x
parameter_list|)
value|__bitcount((u_int)(x))
end_define

begin_function_decl
name|int
name|fnmatch
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|locc
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|memchr
parameter_list|(
specifier|const
name|void
modifier|*
name|s
parameter_list|,
name|int
name|c
parameter_list|,
name|size_t
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|memcchr
parameter_list|(
specifier|const
name|void
modifier|*
name|s
parameter_list|,
name|int
name|c
parameter_list|,
name|size_t
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|memcmp
parameter_list|(
specifier|const
name|void
modifier|*
name|b1
parameter_list|,
specifier|const
name|void
modifier|*
name|b2
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|memmem
parameter_list|(
specifier|const
name|void
modifier|*
name|l
parameter_list|,
name|size_t
name|l_len
parameter_list|,
specifier|const
name|void
modifier|*
name|s
parameter_list|,
name|size_t
name|s_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|qsort
parameter_list|(
name|void
modifier|*
name|base
parameter_list|,
name|size_t
name|nmemb
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
function_decl|(
modifier|*
name|compar
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|qsort_r
parameter_list|(
name|void
modifier|*
name|base
parameter_list|,
name|size_t
name|nmemb
parameter_list|,
name|size_t
name|size
parameter_list|,
name|void
modifier|*
name|thunk
parameter_list|,
name|int
function_decl|(
modifier|*
name|compar
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_long
name|random
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scanc
parameter_list|(
name|u_int
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|srandom
parameter_list|(
name|u_long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|strcasecmp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|strcat
parameter_list|(
name|char
modifier|*
name|__restrict
parameter_list|,
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|strchr
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|strcmp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|strcpy
parameter_list|(
name|char
modifier|*
name|__restrict
parameter_list|,
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|size_t
name|strcspn
argument_list|(
specifier|const
name|char
operator|*
name|__restrict
argument_list|,
specifier|const
name|char
operator|*
name|__restrict
argument_list|)
name|__pure
decl_stmt|;
end_decl_stmt

begin_function_decl
name|char
modifier|*
name|strdup
parameter_list|(
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|,
name|struct
name|malloc_type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|strndup
parameter_list|(
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|malloc_type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|strlcat
parameter_list|(
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|strlcpy
parameter_list|(
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|strlen
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|strncasecmp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|strncmp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|strncpy
parameter_list|(
name|char
modifier|*
name|__restrict
parameter_list|,
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|strnlen
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|strrchr
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|strsep
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|delim
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|strspn
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|strstr
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|strvalid
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
specifier|const
name|uint32_t
name|crc32_tab
index|[]
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline
name|uint32_t
name|crc32_raw
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|,
name|uint32_t
name|crc
parameter_list|)
block|{
specifier|const
name|uint8_t
modifier|*
name|p
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|buf
decl_stmt|;
while|while
condition|(
name|size
operator|--
condition|)
name|crc
operator|=
name|crc32_tab
index|[
operator|(
name|crc
operator|^
operator|*
name|p
operator|++
operator|)
operator|&
literal|0xFF
index|]
operator|^
operator|(
name|crc
operator|>>
literal|8
operator|)
expr_stmt|;
return|return
operator|(
name|crc
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|crc32
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|uint32_t
name|crc
decl_stmt|;
name|crc
operator|=
name|crc32_raw
argument_list|(
name|buf
argument_list|,
name|size
argument_list|,
operator|~
literal|0U
argument_list|)
expr_stmt|;
return|return
operator|(
name|crc
operator|^
operator|~
literal|0U
operator|)
return|;
block|}
end_function

begin_function_decl
name|uint32_t
name|calculate_crc32c
parameter_list|(
name|uint32_t
name|crc32c
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|buffer
parameter_list|,
name|unsigned
name|int
name|length
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|LIBKERN_INLINE
name|void
modifier|*
name|memset
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|LIBKERN_BODY
end_ifdef

begin_function
name|LIBKERN_INLINE
name|void
modifier|*
name|memset
parameter_list|(
name|void
modifier|*
name|b
parameter_list|,
name|int
name|c
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|char
modifier|*
name|bb
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
name|bzero
argument_list|(
name|b
argument_list|,
name|len
argument_list|)
expr_stmt|;
else|else
for|for
control|(
name|bb
operator|=
operator|(
name|char
operator|*
operator|)
name|b
init|;
name|len
operator|--
condition|;
control|)
operator|*
name|bb
operator|++
operator|=
name|c
expr_stmt|;
return|return
operator|(
name|b
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|char
modifier|*
name|index
parameter_list|(
specifier|const
name|char
modifier|*
name|p
parameter_list|,
name|int
name|ch
parameter_list|)
block|{
return|return
operator|(
name|strchr
argument_list|(
name|p
argument_list|,
name|ch
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|char
modifier|*
name|rindex
parameter_list|(
specifier|const
name|char
modifier|*
name|p
parameter_list|,
name|int
name|ch
parameter_list|)
block|{
return|return
operator|(
name|strrchr
argument_list|(
name|p
argument_list|,
name|ch
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/* fnmatch() return values. */
end_comment

begin_define
define|#
directive|define
name|FNM_NOMATCH
value|1
end_define

begin_comment
comment|/* Match failed. */
end_comment

begin_comment
comment|/* fnmatch() flags. */
end_comment

begin_define
define|#
directive|define
name|FNM_NOESCAPE
value|0x01
end_define

begin_comment
comment|/* Disable backslash escaping. */
end_comment

begin_define
define|#
directive|define
name|FNM_PATHNAME
value|0x02
end_define

begin_comment
comment|/* Slash must be matched by slash. */
end_comment

begin_define
define|#
directive|define
name|FNM_PERIOD
value|0x04
end_define

begin_comment
comment|/* Period must be matched by period. */
end_comment

begin_define
define|#
directive|define
name|FNM_LEADING_DIR
value|0x08
end_define

begin_comment
comment|/* Ignore /<tail> after Imatch. */
end_comment

begin_define
define|#
directive|define
name|FNM_CASEFOLD
value|0x10
end_define

begin_comment
comment|/* Case insensitive search. */
end_comment

begin_define
define|#
directive|define
name|FNM_IGNORECASE
value|FNM_CASEFOLD
end_define

begin_define
define|#
directive|define
name|FNM_FILE_NAME
value|FNM_PATHNAME
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_SYS_LIBKERN_H_ */
end_comment

end_unit

