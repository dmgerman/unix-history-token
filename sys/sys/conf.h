begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1990 The Regents of the University of California.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the University of  *	California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	from: @(#)conf.h	7.9 (Berkeley) 5/5/91  *	$Id: conf.h,v 1.3 1993/11/07 17:52:26 wollman Exp $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_CONF_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_CONF_H_
value|1
end_define

begin_comment
comment|/*  * Definitions of device driver entry switches  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STDC__
end_ifdef

begin_struct_decl
struct_decl|struct
name|tty
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|buf
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|uio
struct_decl|;
end_struct_decl

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|int
name|d_open_t
name|__P
typedef|((
name|int
comment|/*dev_t*/
typedef|,
name|int
typedef|,
name|int
typedef|, struct
name|proc
modifier|*
typedef|));
end_typedef

begin_typedef
typedef|typedef
name|int
name|d_close_t
name|__P
typedef|((
name|int
comment|/*dev_t*/
typedef|,
name|int
typedef|,
name|int
typedef|, struct
name|proc
modifier|*
typedef|));
end_typedef

begin_typedef
typedef|typedef
name|void
name|d_strategy_t
name|__P
typedef|((struct
name|buf
modifier|*
typedef|));
end_typedef

begin_typedef
typedef|typedef
name|int
name|d_ioctl_t
name|__P
typedef|((
name|int
comment|/*dev_t*/
typedef|,
name|int
typedef|,
name|caddr_t
typedef|,
name|int
typedef|, struct
name|proc
modifier|*
typedef|));
end_typedef

begin_typedef
typedef|typedef
name|int
name|d_dump_t
name|__P
typedef|((
name|int
comment|/*dev_t*/
typedef|));
end_typedef

begin_typedef
typedef|typedef
name|int
name|d_psize_t
name|__P
typedef|((
name|int
comment|/*dev_t*/
typedef|));
end_typedef

begin_struct
struct|struct
name|bdevsw
block|{
name|d_open_t
modifier|*
name|d_open
decl_stmt|;
name|d_close_t
modifier|*
name|d_close
decl_stmt|;
name|d_strategy_t
modifier|*
name|d_strategy
decl_stmt|;
name|d_ioctl_t
modifier|*
name|d_ioctl
decl_stmt|;
name|d_dump_t
modifier|*
name|d_dump
decl_stmt|;
name|d_psize_t
modifier|*
name|d_psize
decl_stmt|;
name|int
name|d_flags
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|bdevsw
name|bdevsw
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|int
name|d_rdwr_t
name|__P
typedef|((
name|int
comment|/*dev_t*/
typedef|, struct
name|uio
modifier|*
typedef|,
name|int
typedef|));
end_typedef

begin_typedef
typedef|typedef
name|int
name|d_stop_t
name|__P
typedef|((struct
name|tty
modifier|*
typedef|,
name|int
typedef|));
end_typedef

begin_typedef
typedef|typedef
name|int
name|d_reset_t
name|__P
typedef|((
name|int
typedef|));
end_typedef

begin_typedef
typedef|typedef
name|int
name|d_select_t
name|__P
typedef|((
name|int
comment|/*dev_t*/
typedef|,
name|int
typedef|, struct
name|proc
modifier|*
typedef|));
end_typedef

begin_typedef
typedef|typedef
name|int
name|d_mmap_t
name|__P
typedef|((
comment|/* XXX */
typedef|));
end_typedef

begin_struct
struct|struct
name|cdevsw
block|{
name|d_open_t
modifier|*
name|d_open
decl_stmt|;
name|d_close_t
modifier|*
name|d_close
decl_stmt|;
name|d_rdwr_t
modifier|*
name|d_read
decl_stmt|;
name|d_rdwr_t
modifier|*
name|d_write
decl_stmt|;
name|d_ioctl_t
modifier|*
name|d_ioctl
decl_stmt|;
name|d_stop_t
modifier|*
name|d_stop
decl_stmt|;
name|d_reset_t
modifier|*
name|d_reset
decl_stmt|;
name|struct
name|tty
modifier|*
name|d_ttys
decl_stmt|;
name|d_select_t
modifier|*
name|d_select
decl_stmt|;
name|d_mmap_t
modifier|*
name|d_mmap
decl_stmt|;
name|d_strategy_t
modifier|*
name|d_strategy
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|cdevsw
name|cdevsw
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* symbolic sleep message strings */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|char
name|devopn
index|[]
decl_stmt|,
name|devio
index|[]
decl_stmt|,
name|devwait
index|[]
decl_stmt|,
name|devin
index|[]
decl_stmt|,
name|devout
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
name|devioc
index|[]
decl_stmt|,
name|devcls
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|linesw
block|{
name|int
function_decl|(
modifier|*
name|l_open
function_decl|)
parameter_list|(
name|int
comment|/*dev_t*/
parameter_list|,
name|struct
name|tty
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|l_close
function_decl|)
parameter_list|(
name|struct
name|tty
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|l_read
function_decl|)
parameter_list|(
name|struct
name|tty
modifier|*
parameter_list|,
name|struct
name|uio
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|l_write
function_decl|)
parameter_list|(
name|struct
name|tty
modifier|*
parameter_list|,
name|struct
name|uio
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|l_ioctl
function_decl|)
parameter_list|(
name|struct
name|tty
modifier|*
parameter_list|,
name|int
parameter_list|,
name|caddr_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|l_rint
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|struct
name|tty
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|l_rend
function_decl|)
parameter_list|()
function_decl|;
comment|/* XXX - to be deleted */
name|int
function_decl|(
modifier|*
name|l_meta
function_decl|)
parameter_list|()
function_decl|;
comment|/* XXX - to be deleted */
name|void
function_decl|(
modifier|*
name|l_start
function_decl|)
parameter_list|(
name|struct
name|tty
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|l_modem
function_decl|)
parameter_list|(
name|struct
name|tty
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|linesw
name|linesw
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|swdevt
block|{
name|dev_t
name|sw_dev
decl_stmt|;
name|int
name|sw_freed
decl_stmt|;
name|int
name|sw_nblks
decl_stmt|;
name|struct
name|vnode
modifier|*
name|sw_vp
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|swdevt
name|swdevt
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_CONF_H_ */
end_comment

end_unit

