begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2012 EMC Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_MEMDESC_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_MEMDESC_H_
end_define

begin_struct_decl
struct_decl|struct
name|bio
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|bus_dma_segment
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|uio
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mbuf
struct_decl|;
end_struct_decl

begin_union_decl
union_decl|union
name|ccb
union_decl|;
end_union_decl

begin_comment
comment|/*  * struct memdesc encapsulates various memory descriptors and provides  * abstract access to them.  */
end_comment

begin_struct
struct|struct
name|memdesc
block|{
union|union
block|{
name|void
modifier|*
name|md_vaddr
decl_stmt|;
name|vm_paddr_t
name|md_paddr
decl_stmt|;
name|struct
name|bus_dma_segment
modifier|*
name|md_list
decl_stmt|;
name|struct
name|bio
modifier|*
name|md_bio
decl_stmt|;
name|struct
name|uio
modifier|*
name|md_uio
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|md_mbuf
decl_stmt|;
name|union
name|ccb
modifier|*
name|md_ccb
decl_stmt|;
block|}
name|u
union|;
name|size_t
name|md_opaque
decl_stmt|;
comment|/* type specific data. */
name|uint32_t
name|md_type
decl_stmt|;
comment|/* Type of memory. */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MEMDESC_VADDR
value|1
end_define

begin_comment
comment|/* Contiguous virtual address. */
end_comment

begin_define
define|#
directive|define
name|MEMDESC_PADDR
value|2
end_define

begin_comment
comment|/* Contiguous physical address. */
end_comment

begin_define
define|#
directive|define
name|MEMDESC_VLIST
value|3
end_define

begin_comment
comment|/* scatter/gather list of kva addresses. */
end_comment

begin_define
define|#
directive|define
name|MEMDESC_PLIST
value|4
end_define

begin_comment
comment|/* scatter/gather list of physical addresses. */
end_comment

begin_define
define|#
directive|define
name|MEMDESC_BIO
value|5
end_define

begin_comment
comment|/* Pointer to a bio (block io). */
end_comment

begin_define
define|#
directive|define
name|MEMDESC_UIO
value|6
end_define

begin_comment
comment|/* Pointer to a uio (any io). */
end_comment

begin_define
define|#
directive|define
name|MEMDESC_MBUF
value|7
end_define

begin_comment
comment|/* Pointer to a mbuf (network io). */
end_comment

begin_define
define|#
directive|define
name|MEMDESC_CCB
value|8
end_define

begin_comment
comment|/* Cam control block. (scsi/ata io). */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|memdesc
name|memdesc_vaddr
parameter_list|(
name|void
modifier|*
name|vaddr
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|struct
name|memdesc
name|mem
decl_stmt|;
name|mem
operator|.
name|u
operator|.
name|md_vaddr
operator|=
name|vaddr
expr_stmt|;
name|mem
operator|.
name|md_opaque
operator|=
name|len
expr_stmt|;
name|mem
operator|.
name|md_type
operator|=
name|MEMDESC_VADDR
expr_stmt|;
return|return
operator|(
name|mem
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|memdesc
name|memdesc_paddr
parameter_list|(
name|vm_paddr_t
name|paddr
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|struct
name|memdesc
name|mem
decl_stmt|;
name|mem
operator|.
name|u
operator|.
name|md_paddr
operator|=
name|paddr
expr_stmt|;
name|mem
operator|.
name|md_opaque
operator|=
name|len
expr_stmt|;
name|mem
operator|.
name|md_type
operator|=
name|MEMDESC_PADDR
expr_stmt|;
return|return
operator|(
name|mem
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|memdesc
name|memdesc_vlist
parameter_list|(
name|struct
name|bus_dma_segment
modifier|*
name|vlist
parameter_list|,
name|int
name|sglist_cnt
parameter_list|)
block|{
name|struct
name|memdesc
name|mem
decl_stmt|;
name|mem
operator|.
name|u
operator|.
name|md_list
operator|=
name|vlist
expr_stmt|;
name|mem
operator|.
name|md_opaque
operator|=
name|sglist_cnt
expr_stmt|;
name|mem
operator|.
name|md_type
operator|=
name|MEMDESC_VLIST
expr_stmt|;
return|return
operator|(
name|mem
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|memdesc
name|memdesc_plist
parameter_list|(
name|struct
name|bus_dma_segment
modifier|*
name|plist
parameter_list|,
name|int
name|sglist_cnt
parameter_list|)
block|{
name|struct
name|memdesc
name|mem
decl_stmt|;
name|mem
operator|.
name|u
operator|.
name|md_list
operator|=
name|plist
expr_stmt|;
name|mem
operator|.
name|md_opaque
operator|=
name|sglist_cnt
expr_stmt|;
name|mem
operator|.
name|md_type
operator|=
name|MEMDESC_PLIST
expr_stmt|;
return|return
operator|(
name|mem
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|memdesc
name|memdesc_bio
parameter_list|(
name|struct
name|bio
modifier|*
name|bio
parameter_list|)
block|{
name|struct
name|memdesc
name|mem
decl_stmt|;
name|mem
operator|.
name|u
operator|.
name|md_bio
operator|=
name|bio
expr_stmt|;
name|mem
operator|.
name|md_type
operator|=
name|MEMDESC_BIO
expr_stmt|;
return|return
operator|(
name|mem
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|memdesc
name|memdesc_uio
parameter_list|(
name|struct
name|uio
modifier|*
name|uio
parameter_list|)
block|{
name|struct
name|memdesc
name|mem
decl_stmt|;
name|mem
operator|.
name|u
operator|.
name|md_uio
operator|=
name|uio
expr_stmt|;
name|mem
operator|.
name|md_type
operator|=
name|MEMDESC_UIO
expr_stmt|;
return|return
operator|(
name|mem
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|memdesc
name|memdesc_mbuf
parameter_list|(
name|struct
name|mbuf
modifier|*
name|mbuf
parameter_list|)
block|{
name|struct
name|memdesc
name|mem
decl_stmt|;
name|mem
operator|.
name|u
operator|.
name|md_mbuf
operator|=
name|mbuf
expr_stmt|;
name|mem
operator|.
name|md_type
operator|=
name|MEMDESC_MBUF
expr_stmt|;
return|return
operator|(
name|mem
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|memdesc
name|memdesc_ccb
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
block|{
name|struct
name|memdesc
name|mem
decl_stmt|;
name|mem
operator|.
name|u
operator|.
name|md_ccb
operator|=
name|ccb
expr_stmt|;
name|mem
operator|.
name|md_type
operator|=
name|MEMDESC_CCB
expr_stmt|;
return|return
operator|(
name|mem
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_MEMDESC_H_ */
end_comment

end_unit

