begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005 David Xu<davidxu@freebsd.org>  * Copyright (c) 1994 by Chris Provenzano, proven@mit.edu  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *  This product includes software developed by Chris Provenzano.  * 4. The name of Chris Provenzano may not be used to endorse or promote  *    products derived from this software without specific prior written  *    permission.  *  * THIS SOFTWARE IS PROVIDED BY CHRIS PROVENZANO ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL CHRIS PROVENZANO BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  *  * Description : Basic timers header.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_TIMERS_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_TIMERS_H_
end_define

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_comment
comment|/*  * Structures used to manage POSIX timers in a process.  */
end_comment

begin_struct
struct|struct
name|itimer
block|{
name|struct
name|mtx
name|it_mtx
decl_stmt|;
name|struct
name|sigevent
name|it_sigev
decl_stmt|;
name|struct
name|itimerval
name|it_time
decl_stmt|;
name|struct
name|proc
modifier|*
name|it_proc
decl_stmt|;
name|int
name|it_flags
decl_stmt|;
name|int
name|it_usecount
decl_stmt|;
name|int
name|it_overrun
decl_stmt|;
comment|/* Overruns currently accumulating */
name|int
name|it_overrun_last
decl_stmt|;
comment|/* Overruns associated w/ a delivery */
name|int
name|it_clockid
decl_stmt|;
name|int
name|it_timerid
decl_stmt|;
name|ksiginfo_t
name|it_ksi
decl_stmt|;
union|union
block|{
comment|/* realtime */
struct|struct
block|{
name|struct
name|callout
name|it_callout
decl_stmt|;
block|}
name|_rt
struct|;
comment|/* cpu timer */
struct|struct
block|{
name|LIST_ENTRY
argument_list|(
argument|itimer
argument_list|)
name|it_link
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|itimer
argument_list|)
name|it_worklink
expr_stmt|;
name|int
name|it_active
decl_stmt|;
name|int
name|it_cflags
decl_stmt|;
block|}
name|_cpu
struct|;
block|}
name|_data
union|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|it_callout
value|_data._rt.it_callout
end_define

begin_define
define|#
directive|define
name|it_link
value|_data._cpu.it_link
end_define

begin_define
define|#
directive|define
name|it_active
value|_data._cpu.it_active
end_define

begin_define
define|#
directive|define
name|it_worklink
value|_data._cpu.it_worklink
end_define

begin_define
define|#
directive|define
name|it_cflags
value|_data._cpu.it_cflags
end_define

begin_define
define|#
directive|define
name|ITF_DELETING
value|0x01
end_define

begin_define
define|#
directive|define
name|ITF_WANTED
value|0x02
end_define

begin_define
define|#
directive|define
name|ITCF_ONWORKLIST
value|0x01
end_define

begin_define
define|#
directive|define
name|TIMER_MAX
value|32
end_define

begin_define
define|#
directive|define
name|ITIMER_LOCK
parameter_list|(
name|it
parameter_list|)
value|mtx_lock(&(it)->it_mtx)
end_define

begin_define
define|#
directive|define
name|ITIMER_UNLOCK
parameter_list|(
name|it
parameter_list|)
value|mtx_unlock(&(it)->it_mtx)
end_define

begin_expr_stmt
name|LIST_HEAD
argument_list|(
name|itimerlist
argument_list|,
name|itimer
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|itimers
block|{
name|struct
name|itimerlist
name|its_virtual
decl_stmt|;
name|struct
name|itimerlist
name|its_prof
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|itimer
argument_list|)
name|its_worklist
expr_stmt|;
name|struct
name|itimer
modifier|*
modifier|*
name|its_timers
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|kclock
block|{
name|int
function_decl|(
modifier|*
name|timer_create
function_decl|)
parameter_list|(
name|struct
name|itimer
modifier|*
name|timer
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|timer_settime
function_decl|)
parameter_list|(
name|struct
name|itimer
modifier|*
name|timer
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|itimerspec
modifier|*
name|new_value
parameter_list|,
name|struct
name|itimerspec
modifier|*
name|old_value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|timer_delete
function_decl|)
parameter_list|(
name|struct
name|itimer
modifier|*
name|timer
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|timer_gettime
function_decl|)
parameter_list|(
name|struct
name|itimer
modifier|*
name|timer
parameter_list|,
name|struct
name|itimerspec
modifier|*
name|cur_value
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|event_hook
function_decl|)
parameter_list|(
name|struct
name|proc
modifier|*
name|p
parameter_list|,
name|clockid_t
name|clock_id
parameter_list|,
name|int
name|event
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/* Event values for event_hook() */
end_comment

begin_define
define|#
directive|define
name|ITIMER_EV_EXEC
value|0
end_define

begin_define
define|#
directive|define
name|ITIMER_EV_EXIT
value|1
end_define

begin_function_decl
name|void
name|itimers_init
parameter_list|(
name|struct
name|itimers
modifier|*
name|its
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|itimers_event_hook
parameter_list|(
name|struct
name|proc
modifier|*
name|p
parameter_list|,
name|int
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_SYS_TIMERS_H_ */
end_comment

end_unit

