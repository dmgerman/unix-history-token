begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007-2009 Kip Macy<kmacy@freebsd.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_BUF_RING_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_BUF_RING_H_
end_define

begin_include
include|#
directive|include
file|<machine/cpu.h>
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|INVARIANTS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|DEBUG_BUFRING
argument_list|)
end_if

begin_define
define|#
directive|define
name|DEBUG_BUFRING
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG_BUFRING
end_ifdef

begin_include
include|#
directive|include
file|<sys/lock.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|buf_ring
block|{
specifier|volatile
name|uint32_t
name|br_prod_head
decl_stmt|;
specifier|volatile
name|uint32_t
name|br_prod_tail
decl_stmt|;
name|int
name|br_prod_size
decl_stmt|;
name|int
name|br_prod_mask
decl_stmt|;
name|uint64_t
name|br_drops
decl_stmt|;
specifier|volatile
name|uint32_t
name|br_cons_head
name|__aligned
parameter_list|(
name|CACHE_LINE_SIZE
parameter_list|)
function_decl|;
specifier|volatile
name|uint32_t
name|br_cons_tail
decl_stmt|;
name|int
name|br_cons_size
decl_stmt|;
name|int
name|br_cons_mask
decl_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_BUFRING
name|struct
name|mtx
modifier|*
name|br_lock
decl_stmt|;
endif|#
directive|endif
name|void
modifier|*
name|br_ring
index|[
literal|0
index|]
name|__aligned
parameter_list|(
name|CACHE_LINE_SIZE
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * multi-producer safe lock-free ring buffer enqueue  *  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|buf_ring_enqueue
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
block|{
name|uint32_t
name|prod_head
decl_stmt|,
name|prod_next
decl_stmt|,
name|cons_tail
decl_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_BUFRING
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|br
operator|->
name|br_cons_head
init|;
name|i
operator|!=
name|br
operator|->
name|br_prod_head
condition|;
name|i
operator|=
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|&
name|br
operator|->
name|br_cons_mask
operator|)
control|)
if|if
condition|(
name|br
operator|->
name|br_ring
index|[
name|i
index|]
operator|==
name|buf
condition|)
name|panic
argument_list|(
literal|"buf=%p already enqueue at %d prod=%d cons=%d"
argument_list|,
name|buf
argument_list|,
name|i
argument_list|,
name|br
operator|->
name|br_prod_tail
argument_list|,
name|br
operator|->
name|br_cons_tail
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|critical_enter
argument_list|()
expr_stmt|;
do|do
block|{
name|prod_head
operator|=
name|br
operator|->
name|br_prod_head
expr_stmt|;
name|prod_next
operator|=
operator|(
name|prod_head
operator|+
literal|1
operator|)
operator|&
name|br
operator|->
name|br_prod_mask
expr_stmt|;
name|cons_tail
operator|=
name|br
operator|->
name|br_cons_tail
expr_stmt|;
if|if
condition|(
name|prod_next
operator|==
name|cons_tail
condition|)
block|{
name|rmb
argument_list|()
expr_stmt|;
if|if
condition|(
name|prod_head
operator|==
name|br
operator|->
name|br_prod_head
operator|&&
name|cons_tail
operator|==
name|br
operator|->
name|br_cons_tail
condition|)
block|{
name|br
operator|->
name|br_drops
operator|++
expr_stmt|;
name|critical_exit
argument_list|()
expr_stmt|;
return|return
operator|(
name|ENOBUFS
operator|)
return|;
block|}
continue|continue;
block|}
block|}
do|while
condition|(
operator|!
name|atomic_cmpset_acq_int
argument_list|(
operator|&
name|br
operator|->
name|br_prod_head
argument_list|,
name|prod_head
argument_list|,
name|prod_next
argument_list|)
condition|)
do|;
ifdef|#
directive|ifdef
name|DEBUG_BUFRING
if|if
condition|(
name|br
operator|->
name|br_ring
index|[
name|prod_head
index|]
operator|!=
name|NULL
condition|)
name|panic
argument_list|(
literal|"dangling value in enqueue"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|br
operator|->
name|br_ring
index|[
name|prod_head
index|]
operator|=
name|buf
expr_stmt|;
comment|/* 	 * If there are other enqueues in progress 	 * that preceeded us, we need to wait for them 	 * to complete  	 */
while|while
condition|(
name|br
operator|->
name|br_prod_tail
operator|!=
name|prod_head
condition|)
name|cpu_spinwait
argument_list|()
expr_stmt|;
name|atomic_store_rel_int
argument_list|(
operator|&
name|br
operator|->
name|br_prod_tail
argument_list|,
name|prod_next
argument_list|)
expr_stmt|;
name|critical_exit
argument_list|()
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * multi-consumer safe dequeue   *  */
end_comment

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|buf_ring_dequeue_mc
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|)
block|{
name|uint32_t
name|cons_head
decl_stmt|,
name|cons_next
decl_stmt|;
name|void
modifier|*
name|buf
decl_stmt|;
name|critical_enter
argument_list|()
expr_stmt|;
do|do
block|{
name|cons_head
operator|=
name|br
operator|->
name|br_cons_head
expr_stmt|;
name|cons_next
operator|=
operator|(
name|cons_head
operator|+
literal|1
operator|)
operator|&
name|br
operator|->
name|br_cons_mask
expr_stmt|;
if|if
condition|(
name|cons_head
operator|==
name|br
operator|->
name|br_prod_tail
condition|)
block|{
name|critical_exit
argument_list|()
expr_stmt|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
block|}
do|while
condition|(
operator|!
name|atomic_cmpset_acq_int
argument_list|(
operator|&
name|br
operator|->
name|br_cons_head
argument_list|,
name|cons_head
argument_list|,
name|cons_next
argument_list|)
condition|)
do|;
name|buf
operator|=
name|br
operator|->
name|br_ring
index|[
name|cons_head
index|]
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_BUFRING
name|br
operator|->
name|br_ring
index|[
name|cons_head
index|]
operator|=
name|NULL
expr_stmt|;
endif|#
directive|endif
comment|/* 	 * If there are other dequeues in progress 	 * that preceeded us, we need to wait for them 	 * to complete  	 */
while|while
condition|(
name|br
operator|->
name|br_cons_tail
operator|!=
name|cons_head
condition|)
name|cpu_spinwait
argument_list|()
expr_stmt|;
name|atomic_store_rel_int
argument_list|(
operator|&
name|br
operator|->
name|br_cons_tail
argument_list|,
name|cons_next
argument_list|)
expr_stmt|;
name|critical_exit
argument_list|()
expr_stmt|;
return|return
operator|(
name|buf
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * single-consumer dequeue   * use where dequeue is protected by a lock  * e.g. a network driver's tx queue lock  */
end_comment

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|buf_ring_dequeue_sc
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|)
block|{
name|uint32_t
name|cons_head
decl_stmt|,
name|cons_next
decl_stmt|,
name|cons_next_next
decl_stmt|;
name|uint32_t
name|prod_tail
decl_stmt|;
name|void
modifier|*
name|buf
decl_stmt|;
name|cons_head
operator|=
name|br
operator|->
name|br_cons_head
expr_stmt|;
name|prod_tail
operator|=
name|br
operator|->
name|br_prod_tail
expr_stmt|;
name|cons_next
operator|=
operator|(
name|cons_head
operator|+
literal|1
operator|)
operator|&
name|br
operator|->
name|br_cons_mask
expr_stmt|;
name|cons_next_next
operator|=
operator|(
name|cons_head
operator|+
literal|2
operator|)
operator|&
name|br
operator|->
name|br_cons_mask
expr_stmt|;
if|if
condition|(
name|cons_head
operator|==
name|prod_tail
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
ifdef|#
directive|ifdef
name|PREFETCH_DEFINED
if|if
condition|(
name|cons_next
operator|!=
name|prod_tail
condition|)
block|{
name|prefetch
argument_list|(
name|br
operator|->
name|br_ring
index|[
name|cons_next
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cons_next_next
operator|!=
name|prod_tail
condition|)
name|prefetch
argument_list|(
name|br
operator|->
name|br_ring
index|[
name|cons_next_next
index|]
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|br
operator|->
name|br_cons_head
operator|=
name|cons_next
expr_stmt|;
name|buf
operator|=
name|br
operator|->
name|br_ring
index|[
name|cons_head
index|]
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_BUFRING
name|br
operator|->
name|br_ring
index|[
name|cons_head
index|]
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
operator|!
name|mtx_owned
argument_list|(
name|br
operator|->
name|br_lock
argument_list|)
condition|)
name|panic
argument_list|(
literal|"lock not held on single consumer dequeue"
argument_list|)
expr_stmt|;
if|if
condition|(
name|br
operator|->
name|br_cons_tail
operator|!=
name|cons_head
condition|)
name|panic
argument_list|(
literal|"inconsistent list cons_tail=%d cons_head=%d"
argument_list|,
name|br
operator|->
name|br_cons_tail
argument_list|,
name|cons_head
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|br
operator|->
name|br_cons_tail
operator|=
name|cons_next
expr_stmt|;
return|return
operator|(
name|buf
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * single-consumer advance after a peek  * use where it is protected by a lock  * e.g. a network driver's tx queue lock  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|buf_ring_advance_sc
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|)
block|{
name|uint32_t
name|cons_head
decl_stmt|,
name|cons_next
decl_stmt|;
name|uint32_t
name|prod_tail
decl_stmt|;
name|cons_head
operator|=
name|br
operator|->
name|br_cons_head
expr_stmt|;
name|prod_tail
operator|=
name|br
operator|->
name|br_prod_tail
expr_stmt|;
name|cons_next
operator|=
operator|(
name|cons_head
operator|+
literal|1
operator|)
operator|&
name|br
operator|->
name|br_cons_mask
expr_stmt|;
if|if
condition|(
name|cons_head
operator|==
name|prod_tail
condition|)
return|return;
name|br
operator|->
name|br_cons_head
operator|=
name|cons_next
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_BUFRING
name|br
operator|->
name|br_ring
index|[
name|cons_head
index|]
operator|=
name|NULL
expr_stmt|;
endif|#
directive|endif
name|br
operator|->
name|br_cons_tail
operator|=
name|cons_next
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Used to return a buffer (most likely already there)  * to the top od the ring. The caller should *not*  * have used any dequeue to pull it out of the ring  * but instead should have used the peek() function.  * This is normally used where the transmit queue  * of a driver is full, and an mubf must be returned.  * Most likely whats in the ring-buffer is what  * is being put back (since it was not removed), but  * sometimes the lower transmit function may have  * done a pullup or other function that will have  * changed it. As an optimzation we always put it  * back (since jhb says the store is probably cheaper),  * if we have to do a multi-queue version we will need  * the compare and an atomic.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|buf_ring_putback_sc
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|,
name|void
modifier|*
name|new
parameter_list|)
block|{
name|KASSERT
argument_list|(
name|br
operator|->
name|br_cons_head
operator|!=
name|br
operator|->
name|br_prod_tail
argument_list|,
operator|(
literal|"Buf-Ring has none in putback"
operator|)
argument_list|)
expr_stmt|;
name|br
operator|->
name|br_ring
index|[
name|br
operator|->
name|br_cons_head
index|]
operator|=
name|new
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * return a pointer to the first entry in the ring  * without modifying it, or NULL if the ring is empty  * race-prone if not protected by a lock  */
end_comment

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|buf_ring_peek
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|DEBUG_BUFRING
if|if
condition|(
operator|(
name|br
operator|->
name|br_lock
operator|!=
name|NULL
operator|)
operator|&&
operator|!
name|mtx_owned
argument_list|(
name|br
operator|->
name|br_lock
argument_list|)
condition|)
name|panic
argument_list|(
literal|"lock not held on single consumer dequeue"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* 	 * I believe it is safe to not have a memory barrier 	 * here because we control cons and tail is worst case 	 * a lagging indicator so we worst case we might 	 * return NULL immediately after a buffer has been enqueued 	 */
if|if
condition|(
name|br
operator|->
name|br_cons_head
operator|==
name|br
operator|->
name|br_prod_tail
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
return|return
operator|(
name|br
operator|->
name|br_ring
index|[
name|br
operator|->
name|br_cons_head
index|]
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|buf_ring_full
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|br
operator|->
name|br_prod_head
operator|+
literal|1
operator|)
operator|&
name|br
operator|->
name|br_prod_mask
operator|)
operator|==
name|br
operator|->
name|br_cons_tail
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|buf_ring_empty
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|)
block|{
return|return
operator|(
name|br
operator|->
name|br_cons_head
operator|==
name|br
operator|->
name|br_prod_tail
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|buf_ring_count
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|)
block|{
return|return
operator|(
operator|(
name|br
operator|->
name|br_prod_size
operator|+
name|br
operator|->
name|br_prod_tail
operator|-
name|br
operator|->
name|br_cons_tail
operator|)
operator|&
name|br
operator|->
name|br_prod_mask
operator|)
return|;
block|}
end_function

begin_function_decl
name|struct
name|buf_ring
modifier|*
name|buf_ring_alloc
parameter_list|(
name|int
name|count
parameter_list|,
name|struct
name|malloc_type
modifier|*
name|type
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|mtx
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|buf_ring_free
parameter_list|(
name|struct
name|buf_ring
modifier|*
name|br
parameter_list|,
name|struct
name|malloc_type
modifier|*
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

