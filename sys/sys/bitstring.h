begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-3-Clause  *  * Copyright (c) 1989, 1993  *	The Regents of the University of California.  All rights reserved.  *  * This code is derived from software contributed to Berkeley by  * Paul Vixie.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * Copyright (c) 2014 Spectra Logic Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    substantially similar to the "NO WARRANTY" disclaimer below  *    ("Disclaimer") and any redistribution must be conditioned upon  *    including a substantially similar Disclaimer requirement for further  *    binary redistribution.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_BITSTRING_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_BITSTRING_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/libkern.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_typedef
typedef|typedef
name|unsigned
name|long
name|bitstr_t
typedef|;
end_typedef

begin_comment
comment|/*---------------------- Private Implementation Details ----------------------*/
end_comment

begin_define
define|#
directive|define
name|_BITSTR_MASK
value|(~0UL)
end_define

begin_define
define|#
directive|define
name|_BITSTR_BITS
value|(sizeof(bitstr_t) * 8)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|roundup2
end_ifdef

begin_define
define|#
directive|define
name|_bit_roundup2
value|roundup2
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_bit_roundup2
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|(((x)+((y)-1))&(~((y)-1)))
end_define

begin_comment
comment|/* if y is powers of two */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* bitstr_t in bit string containing the bit. */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|_bit_idx
parameter_list|(
name|int
name|_bit
parameter_list|)
block|{
return|return
operator|(
name|_bit
operator|/
name|_BITSTR_BITS
operator|)
return|;
block|}
end_function

begin_comment
comment|/* bit number within bitstr_t at _bit_idx(_bit). */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|_bit_offset
parameter_list|(
name|int
name|_bit
parameter_list|)
block|{
return|return
operator|(
name|_bit
operator|%
name|_BITSTR_BITS
operator|)
return|;
block|}
end_function

begin_comment
comment|/* Mask for the bit within its long. */
end_comment

begin_function
specifier|static
specifier|inline
name|bitstr_t
name|_bit_mask
parameter_list|(
name|int
name|_bit
parameter_list|)
block|{
return|return
operator|(
literal|1UL
operator|<<
name|_bit_offset
argument_list|(
name|_bit
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bitstr_t
name|_bit_make_mask
parameter_list|(
name|int
name|_start
parameter_list|,
name|int
name|_stop
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_BITSTR_MASK
operator|<<
name|_bit_offset
argument_list|(
name|_start
argument_list|)
operator|)
operator|&
operator|(
name|_BITSTR_MASK
operator|>>
operator|(
name|_BITSTR_BITS
operator|-
name|_bit_offset
argument_list|(
name|_stop
argument_list|)
operator|-
literal|1
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*----------------------------- Public Interface -----------------------------*/
end_comment

begin_comment
comment|/* Number of bytes allocated for a bit string of nbits bits */
end_comment

begin_define
define|#
directive|define
name|bitstr_size
parameter_list|(
name|_nbits
parameter_list|)
value|(_bit_roundup2(_nbits, _BITSTR_BITS) / 8)
end_define

begin_comment
comment|/* Allocate a bit string initialized with no bits set. */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function
specifier|static
specifier|inline
name|bitstr_t
modifier|*
name|bit_alloc
parameter_list|(
name|int
name|_nbits
parameter_list|,
name|struct
name|malloc_type
modifier|*
name|type
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
return|return
operator|(
operator|(
name|bitstr_t
operator|*
operator|)
name|malloc
argument_list|(
name|bitstr_size
argument_list|(
name|_nbits
argument_list|)
argument_list|,
name|type
argument_list|,
name|flags
operator||
name|M_ZERO
argument_list|)
operator|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
specifier|inline
name|bitstr_t
modifier|*
name|bit_alloc
parameter_list|(
name|int
name|_nbits
parameter_list|)
block|{
return|return
operator|(
operator|(
name|bitstr_t
operator|*
operator|)
name|calloc
argument_list|(
name|bitstr_size
argument_list|(
name|_nbits
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Allocate a bit string on the stack */
end_comment

begin_define
define|#
directive|define
name|bit_decl
parameter_list|(
name|name
parameter_list|,
name|nbits
parameter_list|)
define|\
value|((name)[bitstr_size(nbits) / sizeof(bitstr_t)])
end_define

begin_comment
comment|/* Is bit N of bit string set? */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|bit_test
parameter_list|(
specifier|const
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_bit
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_bitstr
index|[
name|_bit_idx
argument_list|(
name|_bit
argument_list|)
index|]
operator|&
name|_bit_mask
argument_list|(
name|_bit
argument_list|)
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/* Set bit N of bit string. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|bit_set
parameter_list|(
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_bit
parameter_list|)
block|{
name|_bitstr
index|[
name|_bit_idx
argument_list|(
name|_bit
argument_list|)
index|]
operator||=
name|_bit_mask
argument_list|(
name|_bit
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* clear bit N of bit string name */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|bit_clear
parameter_list|(
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_bit
parameter_list|)
block|{
name|_bitstr
index|[
name|_bit_idx
argument_list|(
name|_bit
argument_list|)
index|]
operator|&=
operator|~
name|_bit_mask
argument_list|(
name|_bit
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Set bits start ... stop inclusive in bit string. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|bit_nset
parameter_list|(
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_start
parameter_list|,
name|int
name|_stop
parameter_list|)
block|{
name|bitstr_t
modifier|*
name|_stopbitstr
decl_stmt|;
name|_stopbitstr
operator|=
name|_bitstr
operator|+
name|_bit_idx
argument_list|(
name|_stop
argument_list|)
expr_stmt|;
name|_bitstr
operator|+=
name|_bit_idx
argument_list|(
name|_start
argument_list|)
expr_stmt|;
if|if
condition|(
name|_bitstr
operator|==
name|_stopbitstr
condition|)
block|{
operator|*
name|_bitstr
operator||=
name|_bit_make_mask
argument_list|(
name|_start
argument_list|,
name|_stop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|_bitstr
operator||=
name|_bit_make_mask
argument_list|(
name|_start
argument_list|,
name|_BITSTR_BITS
operator|-
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
operator|++
name|_bitstr
operator|<
name|_stopbitstr
condition|)
operator|*
name|_bitstr
operator|=
name|_BITSTR_MASK
expr_stmt|;
operator|*
name|_stopbitstr
operator||=
name|_bit_make_mask
argument_list|(
literal|0
argument_list|,
name|_stop
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* Clear bits start ... stop inclusive in bit string. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|bit_nclear
parameter_list|(
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_start
parameter_list|,
name|int
name|_stop
parameter_list|)
block|{
name|bitstr_t
modifier|*
name|_stopbitstr
decl_stmt|;
name|_stopbitstr
operator|=
name|_bitstr
operator|+
name|_bit_idx
argument_list|(
name|_stop
argument_list|)
expr_stmt|;
name|_bitstr
operator|+=
name|_bit_idx
argument_list|(
name|_start
argument_list|)
expr_stmt|;
if|if
condition|(
name|_bitstr
operator|==
name|_stopbitstr
condition|)
block|{
operator|*
name|_bitstr
operator|&=
operator|~
name|_bit_make_mask
argument_list|(
name|_start
argument_list|,
name|_stop
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|_bitstr
operator|&=
operator|~
name|_bit_make_mask
argument_list|(
name|_start
argument_list|,
name|_BITSTR_BITS
operator|-
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
operator|++
name|_bitstr
operator|<
name|_stopbitstr
condition|)
operator|*
name|_bitstr
operator|=
literal|0
expr_stmt|;
operator|*
name|_stopbitstr
operator|&=
operator|~
name|_bit_make_mask
argument_list|(
literal|0
argument_list|,
name|_stop
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* Find the first bit set in bit string at or after bit start. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|bit_ffs_at
parameter_list|(
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_start
parameter_list|,
name|int
name|_nbits
parameter_list|,
name|int
modifier|*
name|_result
parameter_list|)
block|{
name|bitstr_t
modifier|*
name|_curbitstr
decl_stmt|;
name|bitstr_t
modifier|*
name|_stopbitstr
decl_stmt|;
name|bitstr_t
name|_test
decl_stmt|;
name|int
name|_value
decl_stmt|,
name|_offset
decl_stmt|;
if|if
condition|(
name|_nbits
operator|>
literal|0
condition|)
block|{
name|_curbitstr
operator|=
name|_bitstr
operator|+
name|_bit_idx
argument_list|(
name|_start
argument_list|)
expr_stmt|;
name|_stopbitstr
operator|=
name|_bitstr
operator|+
name|_bit_idx
argument_list|(
name|_nbits
operator|-
literal|1
argument_list|)
expr_stmt|;
name|_test
operator|=
operator|*
name|_curbitstr
expr_stmt|;
if|if
condition|(
name|_bit_offset
argument_list|(
name|_start
argument_list|)
operator|!=
literal|0
condition|)
name|_test
operator|&=
name|_bit_make_mask
argument_list|(
name|_start
argument_list|,
name|_BITSTR_BITS
operator|-
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_test
operator|==
literal|0
operator|&&
name|_curbitstr
operator|<
name|_stopbitstr
condition|)
name|_test
operator|=
operator|*
operator|(
operator|++
name|_curbitstr
operator|)
expr_stmt|;
name|_offset
operator|=
name|ffsl
argument_list|(
name|_test
argument_list|)
expr_stmt|;
name|_value
operator|=
operator|(
operator|(
name|_curbitstr
operator|-
name|_bitstr
operator|)
operator|*
name|_BITSTR_BITS
operator|)
operator|+
name|_offset
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|_offset
operator|==
literal|0
operator|||
name|_value
operator|>=
name|_nbits
condition|)
name|_value
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|_value
operator|=
operator|-
literal|1
expr_stmt|;
block|}
operator|*
name|_result
operator|=
name|_value
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Find the first bit clear in bit string at or after bit start. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|bit_ffc_at
parameter_list|(
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_start
parameter_list|,
name|int
name|_nbits
parameter_list|,
name|int
modifier|*
name|_result
parameter_list|)
block|{
name|bitstr_t
modifier|*
name|_curbitstr
decl_stmt|;
name|bitstr_t
modifier|*
name|_stopbitstr
decl_stmt|;
name|bitstr_t
name|_test
decl_stmt|;
name|int
name|_value
decl_stmt|,
name|_offset
decl_stmt|;
if|if
condition|(
name|_nbits
operator|>
literal|0
condition|)
block|{
name|_curbitstr
operator|=
name|_bitstr
operator|+
name|_bit_idx
argument_list|(
name|_start
argument_list|)
expr_stmt|;
name|_stopbitstr
operator|=
name|_bitstr
operator|+
name|_bit_idx
argument_list|(
name|_nbits
operator|-
literal|1
argument_list|)
expr_stmt|;
name|_test
operator|=
operator|*
name|_curbitstr
expr_stmt|;
if|if
condition|(
name|_bit_offset
argument_list|(
name|_start
argument_list|)
operator|!=
literal|0
condition|)
name|_test
operator||=
name|_bit_make_mask
argument_list|(
literal|0
argument_list|,
name|_start
operator|-
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|_test
operator|==
name|_BITSTR_MASK
operator|&&
name|_curbitstr
operator|<
name|_stopbitstr
condition|)
name|_test
operator|=
operator|*
operator|(
operator|++
name|_curbitstr
operator|)
expr_stmt|;
name|_offset
operator|=
name|ffsl
argument_list|(
operator|~
name|_test
argument_list|)
expr_stmt|;
name|_value
operator|=
operator|(
operator|(
name|_curbitstr
operator|-
name|_bitstr
operator|)
operator|*
name|_BITSTR_BITS
operator|)
operator|+
name|_offset
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|_offset
operator|==
literal|0
operator|||
name|_value
operator|>=
name|_nbits
condition|)
name|_value
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|_value
operator|=
operator|-
literal|1
expr_stmt|;
block|}
operator|*
name|_result
operator|=
name|_value
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Find the first bit set in bit string. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|bit_ffs
parameter_list|(
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_nbits
parameter_list|,
name|int
modifier|*
name|_result
parameter_list|)
block|{
name|bit_ffs_at
argument_list|(
name|_bitstr
argument_list|,
comment|/*start*/
literal|0
argument_list|,
name|_nbits
argument_list|,
name|_result
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Find the first bit clear in bit string. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|bit_ffc
parameter_list|(
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_nbits
parameter_list|,
name|int
modifier|*
name|_result
parameter_list|)
block|{
name|bit_ffc_at
argument_list|(
name|_bitstr
argument_list|,
comment|/*start*/
literal|0
argument_list|,
name|_nbits
argument_list|,
name|_result
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Count the number of bits set in a bitstr of size _nbits at or after _start */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|bit_count
parameter_list|(
name|bitstr_t
modifier|*
name|_bitstr
parameter_list|,
name|int
name|_start
parameter_list|,
name|int
name|_nbits
parameter_list|,
name|int
modifier|*
name|_result
parameter_list|)
block|{
name|bitstr_t
modifier|*
name|_curbitstr
decl_stmt|,
name|mask
decl_stmt|;
name|int
name|_value
init|=
literal|0
decl_stmt|,
name|curbitstr_len
decl_stmt|;
if|if
condition|(
name|_start
operator|>=
name|_nbits
condition|)
goto|goto
name|out
goto|;
name|_curbitstr
operator|=
name|_bitstr
operator|+
name|_bit_idx
argument_list|(
name|_start
argument_list|)
expr_stmt|;
name|_nbits
operator|-=
name|_BITSTR_BITS
operator|*
name|_bit_idx
argument_list|(
name|_start
argument_list|)
expr_stmt|;
name|_start
operator|-=
name|_BITSTR_BITS
operator|*
name|_bit_idx
argument_list|(
name|_start
argument_list|)
expr_stmt|;
if|if
condition|(
name|_start
operator|>
literal|0
condition|)
block|{
name|curbitstr_len
operator|=
operator|(
name|int
operator|)
name|_BITSTR_BITS
operator|<
name|_nbits
condition|?
operator|(
name|int
operator|)
name|_BITSTR_BITS
else|:
name|_nbits
expr_stmt|;
name|mask
operator|=
name|_bit_make_mask
argument_list|(
name|_start
argument_list|,
name|_bit_offset
argument_list|(
name|curbitstr_len
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|_value
operator|+=
name|__bitcountl
argument_list|(
operator|*
name|_curbitstr
operator|&
name|mask
argument_list|)
expr_stmt|;
name|_curbitstr
operator|++
expr_stmt|;
name|_nbits
operator|-=
name|_BITSTR_BITS
expr_stmt|;
block|}
while|while
condition|(
name|_nbits
operator|>=
operator|(
name|int
operator|)
name|_BITSTR_BITS
condition|)
block|{
name|_value
operator|+=
name|__bitcountl
argument_list|(
operator|*
name|_curbitstr
argument_list|)
expr_stmt|;
name|_curbitstr
operator|++
expr_stmt|;
name|_nbits
operator|-=
name|_BITSTR_BITS
expr_stmt|;
block|}
if|if
condition|(
name|_nbits
operator|>
literal|0
condition|)
block|{
name|mask
operator|=
name|_bit_make_mask
argument_list|(
literal|0
argument_list|,
name|_bit_offset
argument_list|(
name|_nbits
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|_value
operator|+=
name|__bitcountl
argument_list|(
operator|*
name|_curbitstr
operator|&
name|mask
argument_list|)
expr_stmt|;
block|}
name|out
label|:
operator|*
name|_result
operator|=
name|_value
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_BITSTRING_H_ */
end_comment

end_unit

