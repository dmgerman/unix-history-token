begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2006 Kip Macy kmacy@FreeBSD.org  * Copyright (c) 2006 Kris Kennaway kris@FreeBSD.org  * Copyright (c) 2006 Dag-Erling Smorgrav des@des.no  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR   * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHAL THE AUTHORS BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_LOCK_PROFILE_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_LOCK_PROFILE_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|LOCK_PROFILING
end_ifdef

begin_include
include|#
directive|include
file|<sys/stdint.h>
end_include

begin_include
include|#
directive|include
file|<sys/ktr.h>
end_include

begin_include
include|#
directive|include
file|<sys/mutex.h>
end_include

begin_include
include|#
directive|include
file|<machine/atomic.h>
end_include

begin_include
include|#
directive|include
file|<machine/cpufunc.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|LPROF_HASH_SIZE
end_ifndef

begin_define
define|#
directive|define
name|LPROF_HASH_SIZE
value|4096
end_define

begin_define
define|#
directive|define
name|LPROF_HASH_MASK
value|(LPROF_HASH_SIZE - 1)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|USE_CPU_NANOSECONDS
end_ifndef

begin_function_decl
name|u_int64_t
name|nanoseconds
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|lock_prof
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
specifier|const
name|char
modifier|*
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|file
decl_stmt|;
name|u_int
name|namehash
decl_stmt|;
name|int
name|line
decl_stmt|;
name|uintmax_t
name|cnt_max
decl_stmt|;
name|uintmax_t
name|cnt_tot
decl_stmt|;
name|uintmax_t
name|cnt_wait
decl_stmt|;
name|uintmax_t
name|cnt_cur
decl_stmt|;
name|uintmax_t
name|cnt_contest_holding
decl_stmt|;
name|uintmax_t
name|cnt_contest_locking
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|lock_prof
name|lprof_buf
index|[
name|LPROF_HASH_SIZE
index|]
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|LPROF_SBUF_SIZE
value|256 * 400
end_define

begin_comment
comment|/* We keep a smaller pool of spin mutexes for protecting the lprof hash entries */
end_comment

begin_define
define|#
directive|define
name|LPROF_LOCK_SIZE
value|16
end_define

begin_define
define|#
directive|define
name|LPROF_LOCK_MASK
value|(LPROF_LOCK_SIZE - 1)
end_define

begin_define
define|#
directive|define
name|LPROF_LHASH
parameter_list|(
name|hash
parameter_list|)
value|((hash)& LPROF_LOCK_MASK)
end_define

begin_define
define|#
directive|define
name|LPROF_LOCK
parameter_list|(
name|hash
parameter_list|)
value|mtx_lock_spin(&lprof_locks[LPROF_LHASH(hash)])
end_define

begin_define
define|#
directive|define
name|LPROF_UNLOCK
parameter_list|(
name|hash
parameter_list|)
value|mtx_unlock_spin(&lprof_locks[LPROF_LHASH(hash)])
end_define

begin_decl_stmt
specifier|extern
name|struct
name|mtx
name|lprof_locks
index|[
name|LPROF_LOCK_SIZE
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|lock_prof_enable
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|_lock_profile_obtain_lock_success
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|int
name|contested
parameter_list|,
name|uint64_t
name|waittime
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_lock_profile_update_wait
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|uint64_t
name|waitstart
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_lock_profile_release_lock
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_object_init
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|struct
name|lock_class
modifier|*
name|class
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|p
decl_stmt|;
name|u_int
name|hash
init|=
literal|0
decl_stmt|;
name|struct
name|lock_profile_object
modifier|*
name|l
init|=
operator|&
name|lo
operator|->
name|lo_profile_obj
decl_stmt|;
name|l
operator|->
name|lpo_acqtime
operator|=
literal|0
expr_stmt|;
name|l
operator|->
name|lpo_waittime
operator|=
literal|0
expr_stmt|;
name|l
operator|->
name|lpo_filename
operator|=
name|NULL
expr_stmt|;
name|l
operator|->
name|lpo_lineno
operator|=
literal|0
expr_stmt|;
name|l
operator|->
name|lpo_contest_holding
operator|=
literal|0
expr_stmt|;
name|l
operator|->
name|lpo_contest_locking
operator|=
literal|0
expr_stmt|;
name|l
operator|->
name|lpo_type
operator|=
name|class
operator|->
name|lc_name
expr_stmt|;
comment|/* Hash the mutex name to an int so we don't have to strcmp() it repeatedly */
for|for
control|(
name|p
operator|=
name|name
init|;
operator|*
name|p
operator|!=
literal|'\0'
condition|;
name|p
operator|++
control|)
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
operator|*
name|p
expr_stmt|;
name|l
operator|->
name|lpo_namehash
operator|=
name|hash
expr_stmt|;
if|#
directive|if
literal|0
block|if (opts& MTX_PROFILE) 		l->lpo_stack = stack_create();
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_object_destroy
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|)
block|{
if|#
directive|if
literal|0
block|struct lock_profile_object *l =&lo->lo_profile_obj; 	if (lo->lo_flags& LO_PROFILE) 		stack_destroy(l->lpo_stack);
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_obtain_lock_failed
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|int
modifier|*
name|contested
parameter_list|,
name|uint64_t
modifier|*
name|waittime
parameter_list|)
block|{
name|struct
name|lock_profile_object
modifier|*
name|l
init|=
operator|&
name|lo
operator|->
name|lo_profile_obj
decl_stmt|;
if|if
condition|(
name|lock_prof_enable
operator|&&
operator|*
name|contested
operator|==
literal|0
condition|)
block|{
operator|*
name|waittime
operator|=
name|nanoseconds
argument_list|()
expr_stmt|;
name|atomic_add_int
argument_list|(
operator|&
name|l
operator|->
name|lpo_contest_holding
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|*
name|contested
operator|=
literal|1
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_obtain_lock_success
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|int
name|contested
parameter_list|,
name|uint64_t
name|waittime
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
comment|/* don't reset the timer when/if recursing */
if|if
condition|(
name|lock_prof_enable
operator|&&
name|lo
operator|->
name|lo_profile_obj
operator|.
name|lpo_acqtime
operator|==
literal|0
condition|)
block|{
ifdef|#
directive|ifdef
name|LOCK_PROFILING_FAST
if|if
condition|(
name|contested
operator|==
literal|0
condition|)
return|return;
endif|#
directive|endif
name|_lock_profile_obtain_lock_success
argument_list|(
name|lo
argument_list|,
name|contested
argument_list|,
name|waittime
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_release_lock
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|)
block|{
name|struct
name|lock_profile_object
modifier|*
name|l
init|=
operator|&
name|lo
operator|->
name|lo_profile_obj
decl_stmt|;
if|if
condition|(
name|l
operator|->
name|lpo_acqtime
condition|)
name|_lock_profile_release_lock
argument_list|(
name|lo
argument_list|)
expr_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !LOCK_PROFILING */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_update_wait
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|uint64_t
name|waitstart
parameter_list|)
block|{
empty_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_update_contest_locking
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|int
name|contested
parameter_list|)
block|{
empty_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_release_lock
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|)
block|{
empty_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_obtain_lock_failed
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|int
modifier|*
name|contested
parameter_list|,
name|uint64_t
modifier|*
name|waittime
parameter_list|)
block|{
empty_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_obtain_lock_success
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|int
name|contested
parameter_list|,
name|uint64_t
name|waittime
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
empty_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_object_destroy
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|)
block|{
empty_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|lock_profile_object_init
parameter_list|(
name|struct
name|lock_object
modifier|*
name|lo
parameter_list|,
name|struct
name|lock_class
modifier|*
name|class
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
empty_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !LOCK_PROFILING */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_LOCK_PROFILE_H_ */
end_comment

end_unit

