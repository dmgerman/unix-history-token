begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2009-2013 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Pawel Jakub Dawidek under sponsorship from  * the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NV_H_
end_ifndef

begin_define
define|#
directive|define
name|_NV_H_
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_NVLIST_T_DECLARED
end_ifndef

begin_define
define|#
directive|define
name|_NVLIST_T_DECLARED
end_define

begin_struct_decl
struct_decl|struct
name|nvlist
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|struct
name|nvlist
name|nvlist_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|NV_NAME_MAX
value|2048
end_define

begin_define
define|#
directive|define
name|NV_TYPE_NONE
value|0
end_define

begin_define
define|#
directive|define
name|NV_TYPE_NULL
value|1
end_define

begin_define
define|#
directive|define
name|NV_TYPE_BOOL
value|2
end_define

begin_define
define|#
directive|define
name|NV_TYPE_NUMBER
value|3
end_define

begin_define
define|#
directive|define
name|NV_TYPE_STRING
value|4
end_define

begin_define
define|#
directive|define
name|NV_TYPE_NVLIST
value|5
end_define

begin_define
define|#
directive|define
name|NV_TYPE_DESCRIPTOR
value|6
end_define

begin_define
define|#
directive|define
name|NV_TYPE_BINARY
value|7
end_define

begin_comment
comment|/*  * Perform case-insensitive lookups of provided names.  */
end_comment

begin_define
define|#
directive|define
name|NV_FLAG_IGNORE_CASE
value|0x01
end_define

begin_comment
comment|/*  * Names don't have to be unique.  */
end_comment

begin_define
define|#
directive|define
name|NV_FLAG_NO_UNIQUE
value|0x02
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|&&
name|defined
argument_list|(
name|MALLOC_DECLARE
argument_list|)
end_if

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_NVLIST
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|__BEGIN_DECLS
name|nvlist_t
modifier|*
name|nvlist_create
parameter_list|(
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_destroy
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nvlist_error
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|nvlist_empty
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nvlist_flags
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_set_error
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|nvlist_t
modifier|*
name|nvlist_clone
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|void
name|nvlist_dump
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|int
name|fd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_fdump
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|size_t
name|nvlist_size
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|nvlist_pack
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|nvlist_t
modifier|*
name|nvlist_unpack
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nvlist_send
parameter_list|(
name|int
name|sock
parameter_list|,
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|nvlist_t
modifier|*
name|nvlist_recv
parameter_list|(
name|int
name|sock
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|nvlist_t
modifier|*
name|nvlist_xfer
parameter_list|(
name|int
name|sock
parameter_list|,
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|nvlist_next
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|int
modifier|*
name|typep
parameter_list|,
name|void
modifier|*
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|nvlist_t
modifier|*
name|nvlist_get_parent
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
name|void
modifier|*
modifier|*
name|cookiep
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The nvlist_exists functions check if the given name (optionally of the given  * type) exists on nvlist.  */
end_comment

begin_function_decl
name|bool
name|nvlist_exists
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|nvlist_exists_type
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|nvlist_exists_null
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|nvlist_exists_bool
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|nvlist_exists_number
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|nvlist_exists_string
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|nvlist_exists_nvlist
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|bool
name|nvlist_exists_descriptor
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|bool
name|nvlist_exists_binary
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The nvlist_add functions add the given name/value pair.  * If a pointer is provided, nvlist_add will internally allocate memory for the  * given data (in other words it won't consume provided buffer).  */
end_comment

begin_function_decl
name|void
name|nvlist_add_null
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_add_bool
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|bool
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_add_number
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|uint64_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_add_string
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_add_stringf
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|valuefmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|_VA_LIST_DECLARED
end_ifdef

begin_function_decl
name|void
name|nvlist_add_stringv
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|valuefmt
parameter_list|,
name|va_list
name|valueap
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|0
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|nvlist_add_nvlist
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|nvlist_t
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|void
name|nvlist_add_descriptor
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|nvlist_add_binary
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|void
modifier|*
name|value
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The nvlist_move functions add the given name/value pair.  * The functions consumes provided buffer.  */
end_comment

begin_function_decl
name|void
name|nvlist_move_string
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_move_nvlist
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|nvlist_t
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|void
name|nvlist_move_descriptor
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|nvlist_move_binary
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|value
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The nvlist_get functions returns value associated with the given name.  * If it returns a pointer, the pointer represents internal buffer and should  * not be freed by the caller.  */
end_comment

begin_function_decl
name|bool
name|nvlist_get_bool
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|nvlist_get_number
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|nvlist_get_string
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|nvlist_t
modifier|*
name|nvlist_get_nvlist
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|int
name|nvlist_get_descriptor
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|const
name|void
modifier|*
name|nvlist_get_binary
parameter_list|(
specifier|const
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The nvlist_take functions returns value associated with the given name and  * remove the given entry from the nvlist.  * The caller is responsible for freeing received data.  */
end_comment

begin_function_decl
name|bool
name|nvlist_take_bool
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|nvlist_take_number
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|nvlist_take_string
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|nvlist_t
modifier|*
name|nvlist_take_nvlist
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|int
name|nvlist_take_descriptor
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
modifier|*
name|nvlist_take_binary
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|size_t
modifier|*
name|sizep
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The nvlist_free functions removes the given name/value pair from the nvlist  * and frees memory associated with it.  */
end_comment

begin_function_decl
name|void
name|nvlist_free
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_free_type
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_free_null
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_free_bool
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_free_number
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_free_string
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nvlist_free_nvlist
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_function_decl
name|void
name|nvlist_free_descriptor
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|nvlist_free_binary
parameter_list|(
name|nvlist_t
modifier|*
name|nvl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_NV_H_ */
end_comment

end_unit

