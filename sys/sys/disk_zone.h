begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2015 Spectra Logic Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    substantially similar to the "NO WARRANTY" disclaimer below  *    ("Disclaimer") and any redistribution must be conditioned upon  *    including a substantially similar Disclaimer requirement for further  *    binary redistribution.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  *  * Authors: Ken Merry           (Spectra Logic Corporation)  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_DISK_ZONE_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_DISK_ZONE_H_
end_define

begin_comment
comment|/*  * Interface for Zone-based disks.  This allows managing devices that  * conform to the SCSI Zoned Block Commands (ZBC) and ATA Zoned ATA Command  * Set (ZAC) specifications.  Devices using these command sets are  * currently (October 2015) hard drives using Shingled Magnetic Recording  * (SMR).  */
end_comment

begin_comment
comment|/*  * There are currently three types of zoned devices:  *   * Drive Managed:  * Drive Managed drives look and act just like a standard random access   * block device, but underneath, the drive reads and writes the bulk of  * its capacity using SMR zones.  Sequential writes will yield better  * performance, but writing sequentially is not required.  *  * Host Aware:  * Host Aware drives expose the underlying zone layout via SCSI or ATA  * commands and allow the host to manage the zone conditions.  The host  * is not required to manage the zones on the drive, though.  Sequential  * writes will yield better performance in Sequential Write Preferred  * zones, but the host can write randomly in those zones.  *   * Host Managed:  * Host Managed drives expose the underlying zone layout via SCSI or ATA  * commands.  The host is required to access the zones according to the  * rules described by the zone layout.  Any commands that violate the  * rules will be returned with an error.  */
end_comment

begin_struct
struct|struct
name|disk_zone_disk_params
block|{
name|uint32_t
name|zone_mode
decl_stmt|;
define|#
directive|define
name|DISK_ZONE_MODE_NONE
value|0x00
define|#
directive|define
name|DISK_ZONE_MODE_HOST_AWARE
value|0x01
define|#
directive|define
name|DISK_ZONE_MODE_DRIVE_MANAGED
value|0x02
define|#
directive|define
name|DISK_ZONE_MODE_HOST_MANAGED
value|0x04
name|uint64_t
name|flags
decl_stmt|;
define|#
directive|define
name|DISK_ZONE_DISK_URSWRZ
value|0x001
define|#
directive|define
name|DISK_ZONE_OPT_SEQ_SET
value|0x002
define|#
directive|define
name|DISK_ZONE_OPT_NONSEQ_SET
value|0x004
define|#
directive|define
name|DISK_ZONE_MAX_SEQ_SET
value|0x008
define|#
directive|define
name|DISK_ZONE_RZ_SUP
value|0x010
define|#
directive|define
name|DISK_ZONE_OPEN_SUP
value|0x020
define|#
directive|define
name|DISK_ZONE_CLOSE_SUP
value|0x040
define|#
directive|define
name|DISK_ZONE_FINISH_SUP
value|0x080
define|#
directive|define
name|DISK_ZONE_RWP_SUP
value|0x100
define|#
directive|define
name|DISK_ZONE_CMD_SUP_MASK
value|0x1f0
name|uint64_t
name|optimal_seq_zones
decl_stmt|;
name|uint64_t
name|optimal_nonseq_zones
decl_stmt|;
name|uint64_t
name|max_seq_zones
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used for reset write pointer, open, close and finish.  */
end_comment

begin_struct
struct|struct
name|disk_zone_rwp
block|{
name|uint64_t
name|id
decl_stmt|;
name|uint8_t
name|flags
decl_stmt|;
define|#
directive|define
name|DISK_ZONE_RWP_FLAG_NONE
value|0x00
define|#
directive|define
name|DISK_ZONE_RWP_FLAG_ALL
value|0x01
block|}
struct|;
end_struct

begin_comment
comment|/*  * Report Zones header.  All of these values are passed out.  */
end_comment

begin_struct
struct|struct
name|disk_zone_rep_header
block|{
name|uint8_t
name|same
decl_stmt|;
define|#
directive|define
name|DISK_ZONE_SAME_ALL_DIFFERENT
value|0x0
comment|/* Lengths and types vary */
define|#
directive|define
name|DISK_ZONE_SAME_ALL_SAME
value|0x1
comment|/* Lengths and types the same */
define|#
directive|define
name|DISK_ZONE_SAME_LAST_DIFFERENT
value|0x2
comment|/* Types same, last len varies */
define|#
directive|define
name|DISK_ZONE_SAME_TYPES_DIFFERENT
value|0x3
comment|/* Types vary, length the same */
name|uint64_t
name|maximum_lba
decl_stmt|;
comment|/* 	 * XXX KDM padding space may not be a good idea inside the bio. 	 */
name|uint8_t
name|reserved
index|[
literal|64
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Report Zones entry.  Note that the zone types, conditions, and flags  * are mapped directly from the SCSI/ATA flag values.  Any additional  * SCSI/ATA zone types or conditions or flags that are defined in the  * future could result in additional values that are not yet defined here.  */
end_comment

begin_struct
struct|struct
name|disk_zone_rep_entry
block|{
name|uint8_t
name|zone_type
decl_stmt|;
define|#
directive|define
name|DISK_ZONE_TYPE_CONVENTIONAL
value|0x01
define|#
directive|define
name|DISK_ZONE_TYPE_SEQ_REQUIRED
value|0x02
comment|/* Host Managed */
define|#
directive|define
name|DISK_ZONE_TYPE_SEQ_PREFERRED
value|0x03
comment|/* Host Aware */
name|uint8_t
name|zone_condition
decl_stmt|;
define|#
directive|define
name|DISK_ZONE_COND_NOT_WP
value|0x00
define|#
directive|define
name|DISK_ZONE_COND_EMPTY
value|0x01
define|#
directive|define
name|DISK_ZONE_COND_IMPLICIT_OPEN
value|0x02
define|#
directive|define
name|DISK_ZONE_COND_EXPLICIT_OPEN
value|0x03
define|#
directive|define
name|DISK_ZONE_COND_CLOSED
value|0x04
define|#
directive|define
name|DISK_ZONE_COND_READONLY
value|0x0D
define|#
directive|define
name|DISK_ZONE_COND_FULL
value|0x0E
define|#
directive|define
name|DISK_ZONE_COND_OFFLINE
value|0x0F
name|uint8_t
name|zone_flags
decl_stmt|;
define|#
directive|define
name|DISK_ZONE_FLAG_RESET
value|0x01
comment|/* Zone needs RWP */
define|#
directive|define
name|DISK_ZONE_FLAG_NON_SEQ
value|0x02
comment|/* Zone accssessed nonseq */
name|uint64_t
name|zone_length
decl_stmt|;
name|uint64_t
name|zone_start_lba
decl_stmt|;
name|uint64_t
name|write_pointer_lba
decl_stmt|;
comment|/* XXX KDM padding space may not be a good idea inside the bio */
name|uint8_t
name|reserved
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|disk_zone_report
block|{
name|uint64_t
name|starting_id
decl_stmt|;
comment|/* Passed In */
name|uint8_t
name|rep_options
decl_stmt|;
comment|/* Passed In */
define|#
directive|define
name|DISK_ZONE_REP_ALL
value|0x00
define|#
directive|define
name|DISK_ZONE_REP_EMPTY
value|0x01
define|#
directive|define
name|DISK_ZONE_REP_IMP_OPEN
value|0x02
define|#
directive|define
name|DISK_ZONE_REP_EXP_OPEN
value|0x03
define|#
directive|define
name|DISK_ZONE_REP_CLOSED
value|0x04
define|#
directive|define
name|DISK_ZONE_REP_FULL
value|0x05
define|#
directive|define
name|DISK_ZONE_REP_READONLY
value|0x06
define|#
directive|define
name|DISK_ZONE_REP_OFFLINE
value|0x07
define|#
directive|define
name|DISK_ZONE_REP_RWP
value|0x10
define|#
directive|define
name|DISK_ZONE_REP_NON_SEQ
value|0x11
define|#
directive|define
name|DISK_ZONE_REP_NON_WP
value|0x3F
name|struct
name|disk_zone_rep_header
name|header
decl_stmt|;
name|uint32_t
name|entries_allocated
decl_stmt|;
comment|/* Passed In */
name|uint32_t
name|entries_filled
decl_stmt|;
comment|/* Passed Out */
name|uint32_t
name|entries_available
decl_stmt|;
comment|/* Passed Out */
name|struct
name|disk_zone_rep_entry
modifier|*
name|entries
decl_stmt|;
block|}
struct|;
end_struct

begin_union
union|union
name|disk_zone_params
block|{
name|struct
name|disk_zone_disk_params
name|disk_params
decl_stmt|;
name|struct
name|disk_zone_rwp
name|rwp
decl_stmt|;
name|struct
name|disk_zone_report
name|report
decl_stmt|;
block|}
union|;
end_union

begin_struct
struct|struct
name|disk_zone_args
block|{
name|uint8_t
name|zone_cmd
decl_stmt|;
define|#
directive|define
name|DISK_ZONE_OPEN
value|0x00
define|#
directive|define
name|DISK_ZONE_CLOSE
value|0x01
define|#
directive|define
name|DISK_ZONE_FINISH
value|0x02
define|#
directive|define
name|DISK_ZONE_REPORT_ZONES
value|0x03
define|#
directive|define
name|DISK_ZONE_RWP
value|0x04
define|#
directive|define
name|DISK_ZONE_GET_PARAMS
value|0x05
name|union
name|disk_zone_params
name|zone_params
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_DISK_ZONE_H_ */
end_comment

end_unit

