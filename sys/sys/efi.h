begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004 Marcel Moolenaar  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_EFI_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYS_EFI_H_
end_define

begin_include
include|#
directive|include
file|<sys/uuid.h>
end_include

begin_include
include|#
directive|include
file|<machine/efi.h>
end_include

begin_define
define|#
directive|define
name|EFI_PAGE_SHIFT
value|12
end_define

begin_define
define|#
directive|define
name|EFI_PAGE_SIZE
value|(1<< EFI_PAGE_SHIFT)
end_define

begin_define
define|#
directive|define
name|EFI_PAGE_MASK
value|(EFI_PAGE_SIZE - 1)
end_define

begin_define
define|#
directive|define
name|EFI_TABLE_ACPI20
define|\
value|{0x8868e871,0xe4f1,0x11d3,0xbc,0x22,{0x00,0x80,0xc7,0x3c,0x88,0x81}}
end_define

begin_define
define|#
directive|define
name|EFI_TABLE_SAL
define|\
value|{0xeb9d2d32,0x2d88,0x11d3,0x9a,0x16,{0x00,0x90,0x27,0x3f,0xc1,0x4d}}
end_define

begin_enum
enum|enum
name|efi_reset
block|{
name|EFI_RESET_COLD
block|,
name|EFI_RESET_WARM
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|uint16_t
name|efi_char
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|efi_status
typedef|;
end_typedef

begin_struct
struct|struct
name|efi_cfgtbl
block|{
name|struct
name|uuid
name|ct_uuid
decl_stmt|;
name|uint64_t
name|ct_data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|efi_md
block|{
name|uint32_t
name|md_type
decl_stmt|;
define|#
directive|define
name|EFI_MD_TYPE_NULL
value|0
define|#
directive|define
name|EFI_MD_TYPE_CODE
value|1
comment|/* Loader text. */
define|#
directive|define
name|EFI_MD_TYPE_DATA
value|2
comment|/* Loader data. */
define|#
directive|define
name|EFI_MD_TYPE_BS_CODE
value|3
comment|/* Boot services text. */
define|#
directive|define
name|EFI_MD_TYPE_BS_DATA
value|4
comment|/* Boot services data. */
define|#
directive|define
name|EFI_MD_TYPE_RT_CODE
value|5
comment|/* Runtime services text. */
define|#
directive|define
name|EFI_MD_TYPE_RT_DATA
value|6
comment|/* Runtime services data. */
define|#
directive|define
name|EFI_MD_TYPE_FREE
value|7
comment|/* Unused/free memory. */
define|#
directive|define
name|EFI_MD_TYPE_BAD
value|8
comment|/* Bad memory */
define|#
directive|define
name|EFI_MD_TYPE_RECLAIM
value|9
comment|/* ACPI reclaimable memory. */
define|#
directive|define
name|EFI_MD_TYPE_FIRMWARE
value|10
comment|/* ACPI NV memory */
define|#
directive|define
name|EFI_MD_TYPE_IOMEM
value|11
comment|/* Memory-mapped I/O. */
define|#
directive|define
name|EFI_MD_TYPE_IOPORT
value|12
comment|/* I/O port space. */
define|#
directive|define
name|EFI_MD_TYPE_PALCODE
value|13
comment|/* PAL */
define|#
directive|define
name|EFI_MD_TYPE_PERSISTENT
value|14
comment|/* Persistent memory. */
name|uint32_t
name|__pad
decl_stmt|;
name|uint64_t
name|md_phys
decl_stmt|;
name|void
modifier|*
name|md_virt
decl_stmt|;
name|uint64_t
name|md_pages
decl_stmt|;
name|uint64_t
name|md_attr
decl_stmt|;
define|#
directive|define
name|EFI_MD_ATTR_UC
value|0x0000000000000001UL
define|#
directive|define
name|EFI_MD_ATTR_WC
value|0x0000000000000002UL
define|#
directive|define
name|EFI_MD_ATTR_WT
value|0x0000000000000004UL
define|#
directive|define
name|EFI_MD_ATTR_WB
value|0x0000000000000008UL
define|#
directive|define
name|EFI_MD_ATTR_UCE
value|0x0000000000000010UL
define|#
directive|define
name|EFI_MD_ATTR_WP
value|0x0000000000001000UL
define|#
directive|define
name|EFI_MD_ATTR_RP
value|0x0000000000002000UL
define|#
directive|define
name|EFI_MD_ATTR_XP
value|0x0000000000004000UL
define|#
directive|define
name|EFI_MD_ATTR_NV
value|0x0000000000008000UL
define|#
directive|define
name|EFI_MD_ATTR_MORE_RELIABLE
define|\
value|0x0000000000010000UL
define|#
directive|define
name|EFI_MD_ATTR_RO
value|0x0000000000020000UL
define|#
directive|define
name|EFI_MD_ATTR_RT
value|0x8000000000000000UL
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|efi_next_descriptor
parameter_list|(
name|ptr
parameter_list|,
name|size
parameter_list|)
define|\
value|((struct efi_md *)(((uint8_t *)(ptr)) + (size)))
end_define

begin_struct
struct|struct
name|efi_tm
block|{
name|uint16_t
name|tm_year
decl_stmt|;
comment|/* 1998 - 20XX */
name|uint8_t
name|tm_mon
decl_stmt|;
comment|/* 1 - 12 */
name|uint8_t
name|tm_mday
decl_stmt|;
comment|/* 1 - 31 */
name|uint8_t
name|tm_hour
decl_stmt|;
comment|/* 0 - 23 */
name|uint8_t
name|tm_min
decl_stmt|;
comment|/* 0 - 59 */
name|uint8_t
name|tm_sec
decl_stmt|;
comment|/* 0 - 59 */
name|uint8_t
name|__pad1
decl_stmt|;
name|uint32_t
name|tm_nsec
decl_stmt|;
comment|/* 0 - 999,999,999 */
name|int16_t
name|tm_tz
decl_stmt|;
comment|/* -1440 to 1440 or 2047 */
name|uint8_t
name|tm_dst
decl_stmt|;
name|uint8_t
name|__pad2
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|efi_tmcap
block|{
name|uint32_t
name|tc_res
decl_stmt|;
comment|/* 1e-6 parts per million */
name|uint32_t
name|tc_prec
decl_stmt|;
comment|/* hertz */
name|uint8_t
name|tc_stz
decl_stmt|;
comment|/* Set clears sub-second time */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|efi_tblhdr
block|{
name|uint64_t
name|th_sig
decl_stmt|;
name|uint32_t
name|th_rev
decl_stmt|;
name|uint32_t
name|th_hdrsz
decl_stmt|;
name|uint32_t
name|th_crc32
decl_stmt|;
name|uint32_t
name|__res
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|efi_rt
block|{
name|struct
name|efi_tblhdr
name|rt_hdr
decl_stmt|;
name|efi_status
argument_list|(
argument|*rt_gettime
argument_list|)
operator|(
expr|struct
name|efi_tm
operator|*
operator|,
expr|struct
name|efi_tmcap
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_settime
argument_list|)
operator|(
expr|struct
name|efi_tm
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_getwaketime
argument_list|)
operator|(
name|uint8_t
operator|*
operator|,
name|uint8_t
operator|*
operator|,
expr|struct
name|efi_tm
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_setwaketime
argument_list|)
operator|(
name|uint8_t
operator|,
expr|struct
name|efi_tm
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_setvirtual
argument_list|)
operator|(
name|u_long
operator|,
name|u_long
operator|,
name|uint32_t
operator|,
expr|struct
name|efi_md
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_cvtptr
argument_list|)
operator|(
name|u_long
operator|,
name|void
operator|*
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_getvar
argument_list|)
operator|(
name|efi_char
operator|*
operator|,
expr|struct
name|uuid
operator|*
operator|,
name|uint32_t
operator|*
operator|,
name|u_long
operator|*
operator|,
name|void
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_scanvar
argument_list|)
operator|(
name|u_long
operator|*
operator|,
name|efi_char
operator|*
operator|,
expr|struct
name|uuid
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_setvar
argument_list|)
operator|(
name|efi_char
operator|*
operator|,
expr|struct
name|uuid
operator|*
operator|,
name|uint32_t
operator|,
name|u_long
operator|,
name|void
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_gethicnt
argument_list|)
operator|(
name|uint32_t
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
name|efi_status
argument_list|(
argument|*rt_reset
argument_list|)
operator|(
expr|enum
name|efi_reset
operator|,
name|efi_status
operator|,
name|u_long
operator|,
name|efi_char
operator|*
operator|)
name|EFIABI_ATTR
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|efi_systbl
block|{
name|struct
name|efi_tblhdr
name|st_hdr
decl_stmt|;
define|#
directive|define
name|EFI_SYSTBL_SIG
value|0x5453595320494249UL
name|efi_char
modifier|*
name|st_fwvendor
decl_stmt|;
name|uint32_t
name|st_fwrev
decl_stmt|;
name|uint32_t
name|__pad
decl_stmt|;
name|void
modifier|*
name|st_cin
decl_stmt|;
name|void
modifier|*
name|st_cinif
decl_stmt|;
name|void
modifier|*
name|st_cout
decl_stmt|;
name|void
modifier|*
name|st_coutif
decl_stmt|;
name|void
modifier|*
name|st_cerr
decl_stmt|;
name|void
modifier|*
name|st_cerrif
decl_stmt|;
name|uint64_t
name|st_rt
decl_stmt|;
name|void
modifier|*
name|st_bs
decl_stmt|;
name|u_long
name|st_entries
decl_stmt|;
name|uint64_t
name|st_cfgtbl
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|vm_paddr_t
name|efi_systbl_phys
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_EFI_H_ */
end_comment

end_unit

