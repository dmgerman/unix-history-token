begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1996, 1997, 1998, 2001 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,  * NASA Ames Research Center.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * Copyright (c) 1997-1999 Eduardo E. Horvath. All rights reserved.  * Copyright (c) 1996 Charles M. Hannum.  All rights reserved.  * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *      This product includes software developed by Christopher G. Demetriou  *	for the NetBSD Project.  * 4. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * 	from: NetBSD: bus.h,v 1.58 2008/04/28 20:23:36 martin Exp  *	and  *	from: FreeBSD: src/sys/alpha/include/bus.h,v 1.9 2001/01/09  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SPARC64_BUS_DMA_H
end_ifndef

begin_define
define|#
directive|define
name|_SPARC64_BUS_DMA_H
end_define

begin_include
include|#
directive|include
file|<sys/bus_dma.h>
end_include

begin_comment
comment|/* DMA support */
end_comment

begin_comment
comment|/*  * Method table for a bus_dma_tag.  */
end_comment

begin_struct
struct|struct
name|bus_dma_methods
block|{
name|int
function_decl|(
modifier|*
name|dm_dmamap_create
function_decl|)
parameter_list|(
name|bus_dma_tag_t
parameter_list|,
name|int
parameter_list|,
name|bus_dmamap_t
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dm_dmamap_destroy
function_decl|)
parameter_list|(
name|bus_dma_tag_t
parameter_list|,
name|bus_dmamap_t
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dm_dmamap_load_phys
function_decl|)
parameter_list|(
name|bus_dma_tag_t
name|dmat
parameter_list|,
name|bus_dmamap_t
name|map
parameter_list|,
name|vm_paddr_t
name|buf
parameter_list|,
name|bus_size_t
name|buflen
parameter_list|,
name|int
name|flags
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|segs
parameter_list|,
name|int
modifier|*
name|segp
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dm_dmamap_load_buffer
function_decl|)
parameter_list|(
name|bus_dma_tag_t
name|dmat
parameter_list|,
name|bus_dmamap_t
name|map
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|bus_size_t
name|buflen
parameter_list|,
name|struct
name|pmap
modifier|*
name|pmap
parameter_list|,
name|int
name|flags
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|segs
parameter_list|,
name|int
modifier|*
name|segp
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|dm_dmamap_waitok
function_decl|)
parameter_list|(
name|bus_dma_tag_t
name|dmat
parameter_list|,
name|bus_dmamap_t
name|map
parameter_list|,
name|struct
name|memdesc
modifier|*
name|mem
parameter_list|,
name|bus_dmamap_callback_t
modifier|*
name|callback
parameter_list|,
name|void
modifier|*
name|callback_arg
parameter_list|)
function_decl|;
name|bus_dma_segment_t
modifier|*
function_decl|(
modifier|*
name|dm_dmamap_complete
function_decl|)
parameter_list|(
name|bus_dma_tag_t
name|dmat
parameter_list|,
name|bus_dmamap_t
name|map
parameter_list|,
name|bus_dma_segment_t
modifier|*
name|segs
parameter_list|,
name|int
name|nsegs
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|dm_dmamap_unload
function_decl|)
parameter_list|(
name|bus_dma_tag_t
parameter_list|,
name|bus_dmamap_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|dm_dmamap_sync
function_decl|)
parameter_list|(
name|bus_dma_tag_t
parameter_list|,
name|bus_dmamap_t
parameter_list|,
name|bus_dmasync_op_t
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dm_dmamem_alloc
function_decl|)
parameter_list|(
name|bus_dma_tag_t
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|bus_dmamap_t
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|dm_dmamem_free
function_decl|)
parameter_list|(
name|bus_dma_tag_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|bus_dmamap_t
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * bus_dma_tag_t  *  * A machine-dependent opaque type describing the implementation of  * DMA for a given bus.  */
end_comment

begin_struct
struct|struct
name|bus_dma_tag
block|{
name|void
modifier|*
name|dt_cookie
decl_stmt|;
comment|/* cookie used in the guts */
name|bus_dma_tag_t
name|dt_parent
decl_stmt|;
name|bus_size_t
name|dt_alignment
decl_stmt|;
name|bus_addr_t
name|dt_boundary
decl_stmt|;
name|bus_addr_t
name|dt_lowaddr
decl_stmt|;
name|bus_addr_t
name|dt_highaddr
decl_stmt|;
name|bus_dma_filter_t
modifier|*
name|dt_filter
decl_stmt|;
name|void
modifier|*
name|dt_filterarg
decl_stmt|;
name|bus_size_t
name|dt_maxsize
decl_stmt|;
name|int
name|dt_nsegments
decl_stmt|;
name|bus_size_t
name|dt_maxsegsz
decl_stmt|;
name|int
name|dt_flags
decl_stmt|;
name|int
name|dt_ref_count
decl_stmt|;
name|int
name|dt_map_count
decl_stmt|;
name|bus_dma_lock_t
modifier|*
name|dt_lockfunc
decl_stmt|;
name|void
modifier|*
modifier|*
name|dt_lockfuncarg
decl_stmt|;
name|bus_dma_segment_t
modifier|*
name|dt_segments
decl_stmt|;
name|struct
name|bus_dma_methods
modifier|*
name|dt_mt
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|bus_dmamap_create
parameter_list|(
name|t
parameter_list|,
name|f
parameter_list|,
name|p
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamap_create((t), (f), (p)))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_destroy
parameter_list|(
name|t
parameter_list|,
name|p
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamap_destroy((t), (p)))
end_define

begin_define
define|#
directive|define
name|_bus_dmamap_load_phys
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|b
parameter_list|,
name|l
parameter_list|,
name|f
parameter_list|,
name|s
parameter_list|,
name|sp
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamap_load_phys((t), (m), (b), (l),		\ 	    (f), (s), (sp)))
end_define

begin_define
define|#
directive|define
name|_bus_dmamap_load_buffer
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|b
parameter_list|,
name|l
parameter_list|,
name|p
parameter_list|,
name|f
parameter_list|,
name|s
parameter_list|,
name|sp
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamap_load_buffer((t), (m), (b), (l), (p),	\ 	    (f), (s), (sp)))
end_define

begin_define
define|#
directive|define
name|_bus_dmamap_waitok
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|mem
parameter_list|,
name|c
parameter_list|,
name|ca
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamap_waitok((t), (m), (mem), (c), (ca)))
end_define

begin_define
define|#
directive|define
name|_bus_dmamap_complete
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|s
parameter_list|,
name|n
parameter_list|,
name|e
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamap_complete((t), (m), (s), (n), (e)))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_unload
parameter_list|(
name|t
parameter_list|,
name|p
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamap_unload((t), (p)))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_sync
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|op
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamap_sync((t), (m), (op)))
end_define

begin_define
define|#
directive|define
name|bus_dmamem_alloc
parameter_list|(
name|t
parameter_list|,
name|v
parameter_list|,
name|f
parameter_list|,
name|m
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamem_alloc((t), (v), (f), (m)))
end_define

begin_define
define|#
directive|define
name|bus_dmamem_free
parameter_list|(
name|t
parameter_list|,
name|v
parameter_list|,
name|m
parameter_list|)
define|\
value|((t)->dt_mt->dm_dmamem_free((t), (v), (m)))
end_define

begin_define
define|#
directive|define
name|_bus_dmamap_load_ma
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|a
parameter_list|,
name|tt
parameter_list|,
name|o
parameter_list|,
name|f
parameter_list|,
name|s
parameter_list|,
name|p
parameter_list|)
define|\
value|bus_dmamap_load_ma_triv((t), (m), (a), (tt), (o), (f), (s), (p))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_SPARC64_BUS_DMA_H_ */
end_comment

end_unit

