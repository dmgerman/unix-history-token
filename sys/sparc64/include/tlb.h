begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2001 Jake Burkholder.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_TLB_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_TLB_H_
end_define

begin_define
define|#
directive|define
name|TLB_SLOT_COUNT
value|64
end_define

begin_comment
comment|/* XXX */
end_comment

begin_define
define|#
directive|define
name|TLB_SLOT_TSB_KERNEL_MIN
value|62
end_define

begin_comment
comment|/* XXX */
end_comment

begin_define
define|#
directive|define
name|TLB_SLOT_KERNEL
value|63
end_define

begin_comment
comment|/* XXX */
end_comment

begin_define
define|#
directive|define
name|TLB_DAR_SLOT_SHIFT
value|(3)
end_define

begin_define
define|#
directive|define
name|TLB_DAR_SLOT
parameter_list|(
name|slot
parameter_list|)
value|((slot)<< TLB_DAR_SLOT_SHIFT)
end_define

begin_define
define|#
directive|define
name|TAR_VPN_SHIFT
value|(13)
end_define

begin_define
define|#
directive|define
name|TAR_CTX_MASK
value|((1<< TAR_VPN_SHIFT) - 1)
end_define

begin_define
define|#
directive|define
name|TLB_TAR_VA
parameter_list|(
name|va
parameter_list|)
value|((va)& ~TAR_CTX_MASK)
end_define

begin_define
define|#
directive|define
name|TLB_TAR_CTX
parameter_list|(
name|ctx
parameter_list|)
value|((ctx)& TAR_CTX_MASK)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID_SHIFT
value|(4)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID_PRIMARY
value|(0)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID_SECONDARY
value|(1)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID_NUCLEUS
value|(2)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_TYPE_SHIFT
value|(6)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_TYPE_PAGE
value|(0)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_TYPE_CONTEXT
value|(1)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_VA
parameter_list|(
name|va
parameter_list|)
value|((va)& ~PAGE_MASK)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID
parameter_list|(
name|id
parameter_list|)
value|((id)<< TLB_DEMAP_ID_SHIFT)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_TYPE
parameter_list|(
name|type
parameter_list|)
value|((type)<< TLB_DEMAP_TYPE_SHIFT)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_PAGE
value|(TLB_DEMAP_TYPE(TLB_DEMAP_TYPE_PAGE))
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_CONTEXT
value|(TLB_DEMAP_TYPE(TLB_DEMAP_TYPE_CONTEXT))
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_PRIMARY
value|(TLB_DEMAP_ID(TLB_DEMAP_ID_PRIMARY))
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_SECONDARY
value|(TLB_DEMAP_ID(TLB_DEMAP_ID_SECONDARY))
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_NUCLEUS
value|(TLB_DEMAP_ID(TLB_DEMAP_ID_NUCLEUS))
end_define

begin_define
define|#
directive|define
name|TLB_CTX_KERNEL
value|(0)
end_define

begin_define
define|#
directive|define
name|TLB_CTX_USER_MIN
value|(1)
end_define

begin_define
define|#
directive|define
name|TLB_CTX_USER_MAX
value|(8192)
end_define

begin_define
define|#
directive|define
name|TLB_DTLB
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|TLB_ITLB
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_ASI_SHIFT
value|(16)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_FT_SHIFT
value|(7)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_E_SHIFT
value|(6)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_CT_SHIFT
value|(4)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_PR_SHIFT
value|(3)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_W_SHIFT
value|(2)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_OW_SHIFT
value|(1)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_FV_SHIFT
value|(0)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_ASI_SIZE
value|(8)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_FT_SIZE
value|(6)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_CT_SIZE
value|(2)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_W
value|(1L<< MMU_SFSR_W_SHIFT)
end_define

begin_decl_stmt
specifier|extern
name|int
name|kernel_tlb_slots
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|tte
modifier|*
name|kernel_ttes
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Some tlb operations must be atomic, so no interrupt or trap can be allowed  * while they are in progress. Traps should not happen, but interrupts need to  * be explicitely disabled. critical_enter() cannot be used here, since it only  * disables soft interrupts.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|tlb_context_demap
parameter_list|(
name|struct
name|pmap
modifier|*
name|pm
parameter_list|)
block|{
name|void
modifier|*
name|cookie
decl_stmt|;
name|u_long
name|s
decl_stmt|;
comment|/* 	 * It is important that we are not interrupted or preempted while 	 * doing the IPIs. The interrupted CPU may hold locks, and since 	 * it will wait for the CPU that sent the IPI, this can lead 	 * to a deadlock when an interrupt comes in on that CPU and it's 	 * handler tries to grab one of that locks. This will only happen for 	 * spin locks, but these IPI types are delivered even if normal 	 * interrupts are disabled, so the lock critical section will not 	 * protect the target processor from entering the IPI handler with 	 * the lock held. 	 */
name|critical_enter
argument_list|()
expr_stmt|;
name|cookie
operator|=
name|ipi_tlb_context_demap
argument_list|(
name|pm
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|->
name|pm_active
operator|&
name|PCPU_GET
argument_list|(
name|cpumask
argument_list|)
condition|)
block|{
name|KASSERT
argument_list|(
name|pm
operator|->
name|pm_context
index|[
name|PCPU_GET
argument_list|(
name|cpuid
argument_list|)
index|]
operator|!=
operator|-
literal|1
argument_list|,
operator|(
literal|"tlb_context_demap: inactive pmap?"
operator|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|intr_disable
argument_list|()
expr_stmt|;
name|stxa
argument_list|(
name|TLB_DEMAP_PRIMARY
operator||
name|TLB_DEMAP_CONTEXT
argument_list|,
name|ASI_DMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
name|TLB_DEMAP_PRIMARY
operator||
name|TLB_DEMAP_CONTEXT
argument_list|,
name|ASI_IMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
name|intr_restore
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|ipi_wait
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
name|critical_exit
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_page_demap
parameter_list|(
name|u_int
name|tlb
parameter_list|,
name|struct
name|pmap
modifier|*
name|pm
parameter_list|,
name|vm_offset_t
name|va
parameter_list|)
block|{
name|u_long
name|flags
decl_stmt|;
name|void
modifier|*
name|cookie
decl_stmt|;
name|u_long
name|s
decl_stmt|;
name|critical_enter
argument_list|()
expr_stmt|;
name|cookie
operator|=
name|ipi_tlb_page_demap
argument_list|(
name|tlb
argument_list|,
name|pm
argument_list|,
name|va
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|->
name|pm_active
operator|&
name|PCPU_GET
argument_list|(
name|cpumask
argument_list|)
condition|)
block|{
name|KASSERT
argument_list|(
name|pm
operator|->
name|pm_context
index|[
name|PCPU_GET
argument_list|(
name|cpuid
argument_list|)
index|]
operator|!=
operator|-
literal|1
argument_list|,
operator|(
literal|"tlb_page_demap: inactive pmap?"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|==
name|kernel_pmap
condition|)
name|flags
operator|=
name|TLB_DEMAP_NUCLEUS
operator||
name|TLB_DEMAP_PAGE
expr_stmt|;
else|else
name|flags
operator|=
name|TLB_DEMAP_PRIMARY
operator||
name|TLB_DEMAP_PAGE
expr_stmt|;
name|s
operator|=
name|intr_disable
argument_list|()
expr_stmt|;
if|if
condition|(
name|tlb
operator|&
name|TLB_DTLB
condition|)
block|{
name|stxa
argument_list|(
name|TLB_DEMAP_VA
argument_list|(
name|va
argument_list|)
operator||
name|flags
argument_list|,
name|ASI_DMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tlb
operator|&
name|TLB_ITLB
condition|)
block|{
name|stxa
argument_list|(
name|TLB_DEMAP_VA
argument_list|(
name|va
argument_list|)
operator||
name|flags
argument_list|,
name|ASI_IMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
block|}
name|intr_restore
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|ipi_wait
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
name|critical_exit
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_range_demap
parameter_list|(
name|struct
name|pmap
modifier|*
name|pm
parameter_list|,
name|vm_offset_t
name|start
parameter_list|,
name|vm_offset_t
name|end
parameter_list|)
block|{
name|vm_offset_t
name|va
decl_stmt|;
name|void
modifier|*
name|cookie
decl_stmt|;
name|u_long
name|flags
decl_stmt|;
name|u_long
name|s
decl_stmt|;
name|critical_enter
argument_list|()
expr_stmt|;
name|cookie
operator|=
name|ipi_tlb_range_demap
argument_list|(
name|pm
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|->
name|pm_active
operator|&
name|PCPU_GET
argument_list|(
name|cpumask
argument_list|)
condition|)
block|{
name|KASSERT
argument_list|(
name|pm
operator|->
name|pm_context
index|[
name|PCPU_GET
argument_list|(
name|cpuid
argument_list|)
index|]
operator|!=
operator|-
literal|1
argument_list|,
operator|(
literal|"tlb_range_demap: inactive pmap?"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|==
name|kernel_pmap
condition|)
name|flags
operator|=
name|TLB_DEMAP_NUCLEUS
operator||
name|TLB_DEMAP_PAGE
expr_stmt|;
else|else
name|flags
operator|=
name|TLB_DEMAP_PRIMARY
operator||
name|TLB_DEMAP_PAGE
expr_stmt|;
name|s
operator|=
name|intr_disable
argument_list|()
expr_stmt|;
for|for
control|(
name|va
operator|=
name|start
init|;
name|va
operator|<
name|end
condition|;
name|va
operator|+=
name|PAGE_SIZE
control|)
block|{
name|stxa
argument_list|(
name|TLB_DEMAP_VA
argument_list|(
name|va
argument_list|)
operator||
name|flags
argument_list|,
name|ASI_DMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
name|TLB_DEMAP_VA
argument_list|(
name|va
argument_list|)
operator||
name|flags
argument_list|,
name|ASI_IMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
block|}
name|intr_restore
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|ipi_wait
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
name|critical_exit
argument_list|()
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|tlb_tte_demap
parameter_list|(
name|tte
parameter_list|,
name|pm
parameter_list|)
define|\
value|tlb_page_demap(TD_GET_TLB((tte).tte_data), pm, \ 	    TV_GET_VA((tte).tte_vpn));
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_TLB_H_ */
end_comment

end_unit

