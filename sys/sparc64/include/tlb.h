begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2001 Jake Burkholder.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_TLB_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_TLB_H_
end_define

begin_define
define|#
directive|define
name|TLB_SLOT_COUNT
value|64
end_define

begin_define
define|#
directive|define
name|TLB_SLOT_TSB_KERNEL_MIN
value|60
end_define

begin_comment
comment|/* XXX */
end_comment

begin_define
define|#
directive|define
name|TLB_SLOT_TSB_USER_PRIMARY
value|61
end_define

begin_define
define|#
directive|define
name|TLB_SLOT_TSB_USER_SECONDARY
value|62
end_define

begin_define
define|#
directive|define
name|TLB_SLOT_KERNEL
value|63
end_define

begin_define
define|#
directive|define
name|TLB_DAR_SLOT_SHIFT
value|(3)
end_define

begin_define
define|#
directive|define
name|TLB_DAR_SLOT
parameter_list|(
name|slot
parameter_list|)
value|((slot)<< TLB_DAR_SLOT_SHIFT)
end_define

begin_define
define|#
directive|define
name|TLB_TAR_VA
parameter_list|(
name|va
parameter_list|)
value|((va)& ~PAGE_MASK)
end_define

begin_define
define|#
directive|define
name|TLB_TAR_CTX
parameter_list|(
name|ctx
parameter_list|)
value|((ctx)& PAGE_MASK)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID_SHIFT
value|(4)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID_PRIMARY
value|(0)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID_SECONDARY
value|(1)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID_NUCLEUS
value|(2)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_TYPE_SHIFT
value|(6)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_TYPE_PAGE
value|(0)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_TYPE_CONTEXT
value|(1)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_VA
parameter_list|(
name|va
parameter_list|)
value|((va)& ~PAGE_MASK)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_ID
parameter_list|(
name|id
parameter_list|)
value|((id)<< TLB_DEMAP_ID_SHIFT)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_TYPE
parameter_list|(
name|type
parameter_list|)
value|((type)<< TLB_DEMAP_TYPE_SHIFT)
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_PAGE
value|(TLB_DEMAP_TYPE(TLB_DEMAP_TYPE_PAGE))
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_CONTEXT
value|(TLB_DEMAP_TYPE(TLB_DEMAP_TYPE_CONTEXT))
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_PRIMARY
value|(TLB_DEMAP_ID(TLB_DEMAP_ID_PRIMARY))
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_SECONDARY
value|(TLB_DEMAP_ID(TLB_DEMAP_ID_SECONDARY))
end_define

begin_define
define|#
directive|define
name|TLB_DEMAP_NUCLEUS
value|(TLB_DEMAP_ID(TLB_DEMAP_ID_NUCLEUS))
end_define

begin_define
define|#
directive|define
name|TLB_CTX_KERNEL
value|(0)
end_define

begin_define
define|#
directive|define
name|TLB_DTLB
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|TLB_ITLB
value|(1<< 1)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_ASI_SHIFT
value|(16)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_FT_SHIFT
value|(7)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_E_SHIFT
value|(6)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_CT_SHIFT
value|(4)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_PR_SHIFT
value|(3)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_W_SHIFT
value|(2)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_OW_SHIFT
value|(1)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_FV_SHIFT
value|(0)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_ASI_SIZE
value|(8)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_FT_SIZE
value|(6)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_CT_SIZE
value|(2)
end_define

begin_define
define|#
directive|define
name|MMU_SFSR_W
value|(1L<< MMU_SFSR_W_SHIFT)
end_define

begin_comment
comment|/*  * Some tlb operations must be atomical, so no interrupt or trap can be allowed  * while they are in progress. Traps should not happen, but interrupts need to  * be explicitely disabled. critical_enter() cannot be used here, since it only  * disables soft interrupts.  * XXX: is something like this needed elsewhere, too?  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|tlb_dtlb_context_primary_demap
parameter_list|(
name|void
parameter_list|)
block|{
name|stxa
argument_list|(
name|TLB_DEMAP_PRIMARY
operator||
name|TLB_DEMAP_CONTEXT
argument_list|,
name|ASI_DMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_dtlb_page_demap
parameter_list|(
name|u_long
name|ctx
parameter_list|,
name|vm_offset_t
name|va
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|==
name|TLB_CTX_KERNEL
condition|)
block|{
name|stxa
argument_list|(
name|TLB_DEMAP_VA
argument_list|(
name|va
argument_list|)
operator||
name|TLB_DEMAP_NUCLEUS
operator||
name|TLB_DEMAP_PAGE
argument_list|,
name|ASI_DMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stxa
argument_list|(
name|AA_DMMU_SCXR
argument_list|,
name|ASI_DMMU
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
name|TLB_DEMAP_VA
argument_list|(
name|va
argument_list|)
operator||
name|TLB_DEMAP_SECONDARY
operator||
name|TLB_DEMAP_PAGE
argument_list|,
name|ASI_DMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
name|AA_DMMU_SCXR
argument_list|,
name|ASI_DMMU
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_dtlb_store
parameter_list|(
name|vm_offset_t
name|va
parameter_list|,
name|u_long
name|ctx
parameter_list|,
name|struct
name|tte
name|tte
parameter_list|)
block|{
name|u_long
name|pst
decl_stmt|;
name|pst
operator|=
name|intr_disable
argument_list|()
expr_stmt|;
name|stxa
argument_list|(
name|AA_DMMU_TAR
argument_list|,
name|ASI_DMMU
argument_list|,
name|TLB_TAR_VA
argument_list|(
name|va
argument_list|)
operator||
name|TLB_TAR_CTX
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
literal|0
argument_list|,
name|ASI_DTLB_DATA_IN_REG
argument_list|,
name|tte
operator|.
name|tte_data
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
name|intr_restore
argument_list|(
name|pst
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_dtlb_store_slot
parameter_list|(
name|vm_offset_t
name|va
parameter_list|,
name|u_long
name|ctx
parameter_list|,
name|struct
name|tte
name|tte
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
name|u_long
name|pst
decl_stmt|;
name|pst
operator|=
name|intr_disable
argument_list|()
expr_stmt|;
name|stxa
argument_list|(
name|AA_DMMU_TAR
argument_list|,
name|ASI_DMMU
argument_list|,
name|TLB_TAR_VA
argument_list|(
name|va
argument_list|)
operator||
name|TLB_TAR_CTX
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
name|TLB_DAR_SLOT
argument_list|(
name|slot
argument_list|)
argument_list|,
name|ASI_DTLB_DATA_ACCESS_REG
argument_list|,
name|tte
operator|.
name|tte_data
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
name|intr_restore
argument_list|(
name|pst
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_itlb_context_primary_demap
parameter_list|(
name|void
parameter_list|)
block|{
name|stxa
argument_list|(
name|TLB_DEMAP_PRIMARY
operator||
name|TLB_DEMAP_CONTEXT
argument_list|,
name|ASI_IMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_itlb_page_demap
parameter_list|(
name|u_long
name|ctx
parameter_list|,
name|vm_offset_t
name|va
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|==
name|TLB_CTX_KERNEL
condition|)
block|{
name|stxa
argument_list|(
name|TLB_DEMAP_VA
argument_list|(
name|va
argument_list|)
operator||
name|TLB_DEMAP_NUCLEUS
operator||
name|TLB_DEMAP_PAGE
argument_list|,
name|ASI_IMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|KERNBASE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stxa
argument_list|(
name|AA_DMMU_SCXR
argument_list|,
name|ASI_DMMU
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
name|TLB_DEMAP_VA
argument_list|(
name|va
argument_list|)
operator||
name|TLB_DEMAP_SECONDARY
operator||
name|TLB_DEMAP_PAGE
argument_list|,
name|ASI_IMMU_DEMAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
name|AA_DMMU_SCXR
argument_list|,
name|ASI_DMMU
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/* flush probably not needed. */
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_itlb_store
parameter_list|(
name|vm_offset_t
name|va
parameter_list|,
name|u_long
name|ctx
parameter_list|,
name|struct
name|tte
name|tte
parameter_list|)
block|{
name|u_long
name|pst
decl_stmt|;
name|pst
operator|=
name|intr_disable
argument_list|()
expr_stmt|;
name|stxa
argument_list|(
name|AA_IMMU_TAR
argument_list|,
name|ASI_IMMU
argument_list|,
name|TLB_TAR_VA
argument_list|(
name|va
argument_list|)
operator||
name|TLB_TAR_CTX
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
literal|0
argument_list|,
name|ASI_ITLB_DATA_IN_REG
argument_list|,
name|tte
operator|.
name|tte_data
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|==
name|TLB_CTX_KERNEL
condition|)
name|flush
argument_list|(
name|va
argument_list|)
expr_stmt|;
else|else
block|{
comment|/* 		 * flush probably not needed and impossible here, no access to 		 * user page. 		 */
name|membar
argument_list|(
name|Sync
argument_list|)
expr_stmt|;
block|}
name|intr_restore
argument_list|(
name|pst
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_context_primary_demap
parameter_list|(
name|u_int
name|tlb
parameter_list|)
block|{
if|if
condition|(
name|tlb
operator|&
name|TLB_DTLB
condition|)
name|tlb_dtlb_context_primary_demap
argument_list|()
expr_stmt|;
if|if
condition|(
name|tlb
operator|&
name|TLB_ITLB
condition|)
name|tlb_itlb_context_primary_demap
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_itlb_store_slot
parameter_list|(
name|vm_offset_t
name|va
parameter_list|,
name|u_long
name|ctx
parameter_list|,
name|struct
name|tte
name|tte
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
name|u_long
name|pst
decl_stmt|;
name|pst
operator|=
name|intr_disable
argument_list|()
expr_stmt|;
name|stxa
argument_list|(
name|AA_IMMU_TAR
argument_list|,
name|ASI_IMMU
argument_list|,
name|TLB_TAR_VA
argument_list|(
name|va
argument_list|)
operator||
name|TLB_TAR_CTX
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
name|stxa
argument_list|(
name|TLB_DAR_SLOT
argument_list|(
name|slot
argument_list|)
argument_list|,
name|ASI_ITLB_DATA_ACCESS_REG
argument_list|,
name|tte
operator|.
name|tte_data
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|va
argument_list|)
expr_stmt|;
name|intr_restore
argument_list|(
name|pst
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_page_demap
parameter_list|(
name|u_int
name|tlb
parameter_list|,
name|u_int
name|ctx
parameter_list|,
name|vm_offset_t
name|va
parameter_list|)
block|{
if|if
condition|(
name|tlb
operator|&
name|TLB_DTLB
condition|)
name|tlb_dtlb_page_demap
argument_list|(
name|ctx
argument_list|,
name|va
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlb
operator|&
name|TLB_ITLB
condition|)
name|tlb_itlb_page_demap
argument_list|(
name|ctx
argument_list|,
name|va
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_store
parameter_list|(
name|u_int
name|tlb
parameter_list|,
name|vm_offset_t
name|va
parameter_list|,
name|u_long
name|ctx
parameter_list|,
name|struct
name|tte
name|tte
parameter_list|)
block|{
if|if
condition|(
name|tlb
operator|&
name|TLB_DTLB
condition|)
name|tlb_dtlb_store
argument_list|(
name|va
argument_list|,
name|ctx
argument_list|,
name|tte
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlb
operator|&
name|TLB_ITLB
condition|)
name|tlb_itlb_store
argument_list|(
name|va
argument_list|,
name|ctx
argument_list|,
name|tte
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tlb_store_slot
parameter_list|(
name|u_int
name|tlb
parameter_list|,
name|vm_offset_t
name|va
parameter_list|,
name|u_long
name|ctx
parameter_list|,
name|struct
name|tte
name|tte
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
if|if
condition|(
name|tlb
operator|&
name|TLB_DTLB
condition|)
name|tlb_dtlb_store_slot
argument_list|(
name|va
argument_list|,
name|ctx
argument_list|,
name|tte
argument_list|,
name|slot
argument_list|)
expr_stmt|;
if|if
condition|(
name|tlb
operator|&
name|TLB_ITLB
condition|)
name|tlb_itlb_store_slot
argument_list|(
name|va
argument_list|,
name|ctx
argument_list|,
name|tte
argument_list|,
name|slot
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_TLB_H_ */
end_comment

end_unit

