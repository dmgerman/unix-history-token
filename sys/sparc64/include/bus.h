begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1996, 1997, 1998, 2001 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,  * NASA Ames Research Center.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the NetBSD  *	Foundation, Inc. and its contributors.  * 4. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * Copyright (c) 1997-1999 Eduardo E. Horvath. All rights reserved.  * Copyright (c) 1996 Charles M. Hannum.  All rights reserved.  * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *      This product includes software developed by Christopher G. Demetriou  *	for the NetBSD Project.  * 4. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * 	from: NetBSD: bus.h,v 1.28 2001/07/19 15:32:19 thorpej Exp  *	and  *	from: FreeBSD: src/sys/alpha/include/bus.h,v 1.9 2001/01/09  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_BUS_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_BUS_H_
end_define

begin_include
include|#
directive|include
file|<machine/types.h>
end_include

begin_include
include|#
directive|include
file|<machine/cpufunc.h>
end_include

begin_comment
comment|/*  * Debug hooks  */
end_comment

begin_define
define|#
directive|define
name|BSDB_ACCESS
value|0x01
end_define

begin_decl_stmt
specifier|extern
name|int
name|bus_space_debug
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * UPA and SBUS spaces are non-cached and big endian  * (except for RAM and PROM)  *  * PCI spaces are non-cached and little endian  */
end_comment

begin_define
define|#
directive|define
name|UPA_BUS_SPACE
value|0
end_define

begin_define
define|#
directive|define
name|SBUS_BUS_SPACE
value|1
end_define

begin_define
define|#
directive|define
name|PCI_CONFIG_BUS_SPACE
value|2
end_define

begin_define
define|#
directive|define
name|PCI_IO_BUS_SPACE
value|3
end_define

begin_define
define|#
directive|define
name|PCI_MEMORY_BUS_SPACE
value|4
end_define

begin_define
define|#
directive|define
name|LAST_BUS_SPACE
value|5
end_define

begin_decl_stmt
specifier|extern
name|int
name|bus_type_asi
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bus_stream_asi
index|[]
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|__BUS_SPACE_HAS_STREAM_METHODS
value|1
end_define

begin_comment
comment|/*  * Bus address and size types  */
end_comment

begin_typedef
typedef|typedef
name|u_long
name|bus_space_handle_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|bus_type_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_long
name|bus_addr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_long
name|bus_size_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE_24BIT
value|0xFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE_32BIT
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE
value|(128 * 1024)
end_define

begin_comment
comment|/* Maximum supported size */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR_24BIT
value|0xFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR_32BIT
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_UNRESTRICTED
value|(~0UL)
end_define

begin_comment
comment|/*  * Access methods for bus resources and address space.  */
end_comment

begin_typedef
typedef|typedef
name|struct
name|bus_space_tag
modifier|*
name|bus_space_tag_t
typedef|;
end_typedef

begin_struct
struct|struct
name|bus_space_tag
block|{
name|void
modifier|*
name|cookie
decl_stmt|;
name|bus_space_tag_t
name|parent
decl_stmt|;
name|int
name|type
decl_stmt|;
name|void
argument_list|(
argument|*bus_barrier
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
comment|/*offset*/
name|bus_size_t
operator|,
comment|/*size*/
name|int
operator|)
argument_list|)
expr_stmt|;
comment|/*flags*/
block|}
struct|;
end_struct

begin_comment
comment|/*  * Helpers  */
end_comment

begin_decl_stmt
name|int
name|sparc64_bus_mem_map
name|__P
argument_list|(
operator|(
name|bus_type_t
operator|,
name|bus_addr_t
operator|,
name|bus_size_t
operator|,
name|int
operator|,
comment|/*flags*/
name|vm_offset_t
operator|,
comment|/*preferred vaddr*/
name|void
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|sparc64_bus_mem_unmap
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bus_space_handle_t
name|sparc64_fake_bustag
name|__P
argument_list|(
operator|(
name|int
operator|,
name|bus_addr_t
operator|,
expr|struct
name|bus_space_tag
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Bus space function prototypes.  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|bus_space_barrier
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* This macro finds the first "upstream" implementation of method `f' */
end_comment

begin_define
define|#
directive|define
name|_BS_CALL
parameter_list|(
name|t
parameter_list|,
name|f
parameter_list|)
define|\
value|while (t->f == NULL)		\ 		t = t->parent;		\ 	return (*(t)->f)
end_define

begin_function
name|__inline__
name|void
name|bus_space_barrier
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|s
parameter_list|,
name|f
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|;
name|bus_size_t
name|s
decl_stmt|;
name|int
name|f
decl_stmt|;
block|{
name|_BS_CALL
argument_list|(
name|t
argument_list|,
name|bus_barrier
argument_list|)
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|s
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* flags for bus space map functions */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_CACHEABLE
value|0x0001
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_LINEAR
value|0x0002
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_READONLY
value|0x0004
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_PREFETCHABLE
value|0x0008
end_define

begin_comment
comment|/* placeholders for bus functions... */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_BUS1
value|0x0100
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_BUS2
value|0x0200
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_BUS3
value|0x0400
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_BUS4
value|0x0800
end_define

begin_comment
comment|/* flags for bus_space_barrier() */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_READ
value|0x01
end_define

begin_comment
comment|/* force read barrier */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_WRITE
value|0x02
end_define

begin_comment
comment|/* force write barrier */
end_comment

begin_comment
comment|/*  *	u_intN_t bus_space_read_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset));  *  * Read a 1, 2, 4, or 8 byte quantity from bus space  * described by tag/handle/offset.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|BUS_SPACE_DEBUG
end_ifndef

begin_define
define|#
directive|define
name|bus_space_read_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|lduba_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type])
end_define

begin_define
define|#
directive|define
name|bus_space_read_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|lduha_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type])
end_define

begin_define
define|#
directive|define
name|bus_space_read_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|lduwa_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type])
end_define

begin_define
define|#
directive|define
name|bus_space_read_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|ldxa_nc((caddr_t)(h) + (o), bus_type_asi[(t)->type])
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|bus_space_read_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|({					\ 	unsigned char __bv =				      		\ 	    lduba_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type]);	\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsr1(%llx + %llx, %x) -> %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_type_asi[(t)->type], (unsigned int) __bv);		\ 	__bv; })
end_define

begin_define
define|#
directive|define
name|bus_space_read_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|({					\ 	unsigned short __bv =				      		\ 	    lduha_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type]);	\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsr2(%llx + %llx, %x) -> %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_type_asi[(t)->type], (unsigned int)__bv);		\ 	__bv; })
end_define

begin_define
define|#
directive|define
name|bus_space_read_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|({					\ 	unsigned int __bv =				      		\ 	    lduwa_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type]);	\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsr4(%llx + %llx, %x) -> %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_type_asi[(t)->type], __bv);				\ 	__bv; })
end_define

begin_define
define|#
directive|define
name|bus_space_read_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|({					\ 	u_int64_t __bv =				      		\ 	    ldxa_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type]);	\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsr8(%llx + %llx, %x) -> %llx\n", (u_int64_t)(h),	\ 		(u_int64_t)(o),						\ 		bus_type_asi[(t)->type], __bv);				\ 	__bv; })
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  *	void bus_space_read_multi_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset,  *	    u_intN_t *addr, size_t count));  *  * Read `count' 1, 2, 4, or 8 byte quantities from bus space  * described by tag/handle/offset and copy into buffer provided.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_multi_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	u_int8_t *p = (u_int8_t *)a;					\ 	while (i--> 0)							\ 		*p++ = bus_space_read_1(t, h, o);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	u_int16_t *p = (u_int16_t *)a;					\ 	while (i--> 0)							\ 		*p++ = bus_space_read_2(t, h, o);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	u_int32_t *p = (u_int32_t *)a;					\ 	while (i--> 0)							\ 		*p++ = bus_space_read_4(t, h, o);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	u_int64_t *p = (u_int64_t *)a;					\ 	while (i--> 0)							\ 		*p++ = bus_space_read_8(t, h, o);			\ } while (0)
end_define

begin_comment
comment|/*  *	void bus_space_write_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset,  *	    u_intN_t value));  *  * Write the 1, 2, 4, or 8 byte value `value' to bus space  * described by tag/handle/offset.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|BUS_SPACE_DEBUG
end_ifndef

begin_define
define|#
directive|define
name|bus_space_write_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|stba_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type], (v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|stha_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type], (v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|stwa_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type], (v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|stxa_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type], (v))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|bus_space_write_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|do {				\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsw1(%llx + %llx, %x)<- %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_type_asi[(t)->type], (unsigned int) v);		\ 	stba_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type], (v));	\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|do {				\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsw2(%llx + %llx, %x)<- %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_type_asi[(t)->type], (unsigned int) v);		\ 	stha_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type], (v));	\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|do {				\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsw4(%llx + %llx, %x)<- %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_type_asi[(t)->type], (unsigned int) v);		\ 	stwa_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type], (v));	\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|do {				\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsw8(%llx + %llx, %x)<- %llx\n", (u_int64_t)(h),	\ 		(u_int64_t)(o),						\ 		bus_type_asi[(t)->type], (u_int64_t) v);		\ 	stxa_nc((caddr_t)((h) + (o)), bus_type_asi[(t)->type], (v));	\ } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  *	void bus_space_write_multi_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset,  *	    const u_intN_t *addr, size_t count));  *  * Write `count' 1, 2, 4, or 8 byte quantities from the buffer  * provided to bus space described by tag/handle/offset.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_write_multi_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	u_int8_t *p = (u_int8_t *)a;					\ 	while (i--> 0)							\ 		bus_space_write_1(t, h, o, *p++);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	u_int16_t *p = (u_int16_t *)a;					\ 	while (i--> 0)							\ 		bus_space_write_2(t, h, o, *p++);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	u_int32_t *p = (u_int32_t *)a;					\ 	while (i--> 0)							\ 		bus_space_write_4(t, h, o, *p++);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	u_int64_t *p = (u_int64_t *)a;					\ 	while (i--> 0)							\ 		bus_space_write_8(t, h, o, *p++);			\ } while (0)
end_define

begin_comment
comment|/*  *	void bus_space_set_multi_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset, u_intN_t val,  *	    size_t count));  *  * Write the 1, 2, 4, or 8 byte value `val' to bus space described  * by tag/handle/offset `count' times.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_set_multi_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	while (i--> 0)							\ 		bus_space_write_1(t, h, o, v);				\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	while (i--> 0)							\ 		bus_space_write_2(t, h, o, v);				\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	while (i--> 0)							\ 		bus_space_write_4(t, h, o, v);				\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
value|do {			\ 	int i = c;							\ 	while (i--> 0)							\ 		bus_space_write_8(t, h, o, v);				\ } while (0)
end_define

begin_comment
comment|/*  *	void bus_space_read_region_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t off,  *	    u_intN_t *addr, bus_size_t count));  *  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|bus_space_read_region_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int8_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_read_region_2
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int16_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_read_region_4
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int32_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_read_region_8
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int64_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_read_region_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
name|u_int8_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|++
control|)
operator|*
name|a
operator|=
name|bus_space_read_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_read_region_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
name|u_int16_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
operator|*
name|a
operator|=
name|bus_space_read_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_read_region_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
name|u_int32_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
operator|*
name|a
operator|=
name|bus_space_read_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_read_region_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
name|u_int64_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
operator|*
name|a
operator|=
name|bus_space_read_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  *	void bus_space_write_region_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t off,  *	    u_intN_t *addr, bus_size_t count));  *  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|bus_space_write_region_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int8_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_write_region_2
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int16_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_write_region_4
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int32_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_write_region_8
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int64_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_write_region_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int8_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|++
control|)
name|bus_space_write_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_write_region_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int16_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
name|bus_space_write_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_write_region_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int32_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
name|bus_space_write_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_write_region_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int64_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
name|bus_space_write_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  *	void bus_space_set_region_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t off,  *	    u_intN_t *addr, bus_size_t count));  *  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|bus_space_set_region_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int8_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_set_region_2
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int16_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_set_region_4
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int32_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_set_region_8
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int64_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_set_region_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int8_t
name|v
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|++
control|)
name|bus_space_write_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_set_region_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int16_t
name|v
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
name|bus_space_write_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_set_region_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int32_t
name|v
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
name|bus_space_write_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_set_region_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int64_t
name|v
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
name|bus_space_write_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  *	void bus_space_copy_region_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh1, bus_size_t off1,  *	    bus_space_handle_t bsh2, bus_size_t off2,  *	    bus_size_t count));  *  * Copy `count' 1, 2, 4, or 8 byte values from bus space starting  * at tag/bsh1/off1 to bus space starting at tag/bsh2/off2.  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|bus_space_copy_region_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_copy_region_2
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_copy_region_4
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_copy_region_8
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_copy_region_1
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h1
decl_stmt|,
name|h2
decl_stmt|;
name|bus_size_t
name|o1
decl_stmt|,
name|o2
decl_stmt|;
name|bus_size_t
name|c
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|++
operator|,
name|o2
operator|++
control|)
name|bus_space_write_1
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_1
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_copy_region_2
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h1
decl_stmt|,
name|h2
decl_stmt|;
name|bus_size_t
name|o1
decl_stmt|,
name|o2
decl_stmt|;
name|bus_size_t
name|c
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|2
operator|,
name|o2
operator|+=
literal|2
control|)
name|bus_space_write_2
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_2
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_copy_region_4
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h1
decl_stmt|,
name|h2
decl_stmt|;
name|bus_size_t
name|o1
decl_stmt|,
name|o2
decl_stmt|;
name|bus_size_t
name|c
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|4
operator|,
name|o2
operator|+=
literal|4
control|)
name|bus_space_write_4
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_4
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_copy_region_8
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h1
decl_stmt|,
name|h2
decl_stmt|;
name|bus_size_t
name|o1
decl_stmt|,
name|o2
decl_stmt|;
name|bus_size_t
name|c
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|8
operator|,
name|o2
operator|+=
literal|8
control|)
name|bus_space_write_8
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_8
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  *	u_intN_t bus_space_read_stream_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset));  *  * Read a 1, 2, 4, or 8 byte quantity from bus space  * described by tag/handle/offset.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|BUS_SPACE_DEBUG
end_ifndef

begin_define
define|#
directive|define
name|bus_space_read_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|lduba_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type])
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|lduha_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type])
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|lduwa_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type])
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|ldxa_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type])
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|bus_space_read_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|({				\ 	unsigned char __bv =				      		\ 	    lduba_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type]);	\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsr1(%llx + %llx, %x) -> %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_stream_asi[(t)->type], (unsigned int) __bv);	\ 	__bv; })
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|({				\ 	unsigned short __bv =				      		\ 	    lduha_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type]);	\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsr2(%llx + %llx, %x) -> %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_stream_asi[(t)->type], (unsigned int)__bv);		\ 	__bv; })
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|({				\ 	unsigned int __bv =				      		\ 	    lduwa_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type]);	\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsr4(%llx + %llx, %x) -> %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_stream_asi[(t)->type], __bv);			\ 	__bv; })
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
value|({				\ 	u_int64_t __bv =				      		\ 	    ldxa_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type]);	\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsr8(%llx + %llx, %x) -> %llx\n", (u_int64_t)(h),	\ 		(u_int64_t)(o),						\ 		bus_stream_asi[(t)->type], __bv);			\ 	__bv; })
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  *	void bus_space_read_multi_stream_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset,  *	    u_intN_t *addr, size_t count));  *  * Read `count' 1, 2, 4, or 8 byte quantities from bus space  * described by tag/handle/offset and copy into buffer provided.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	u_int8_t *p = (u_int8_t *)a;					\ 	while (i--> 0)							\ 		*p++ = bus_space_read_stream_1(t, h, o);		\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	u_int16_t *p = (u_int16_t *)a;					\ 	while (i--> 0)							\ 		*p++ = bus_space_read_stream_2(t, h, o);		\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	u_int32_t *p = (u_int32_t *)a;					\ 	while (i--> 0)							\ 		*p++ = bus_space_read_stream_4(t, h, o);		\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	u_int64_t *p = (u_int64_t *)a;					\ 	while (i--> 0)							\ 		*p++ = bus_space_read_stream_8(t, h, o);		\ } while (0)
end_define

begin_comment
comment|/*  *	void bus_space_write_stream_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset,  *	    u_intN_t value));  *  * Write the 1, 2, 4, or 8 byte value `value' to bus space  * described by tag/handle/offset.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|BUS_SPACE_DEBUG
end_ifndef

begin_define
define|#
directive|define
name|bus_space_write_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|stba_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type], (v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|stha_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type], (v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|stwa_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type], (v))
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|stxa_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type], (v))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|bus_space_write_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|do {			\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsw1(%llx + %llx, %x)<- %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_stream_asi[(t)->type], (unsigned int) v);		\ 	stba_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type], (v));	\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|do {			\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsw2(%llx + %llx, %x)<- %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_stream_asi[(t)->type], (unsigned int) v);		\ 	stha_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type], (v));	\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|({				\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsw4(%llx + %llx, %x)<- %x\n", (u_int64_t)(h),		\ 		(u_int64_t)(o),						\ 		bus_stream_asi[(t)->type], (unsigned int) v);		\ 	stwa_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type], (v));	\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
value|({				\ 	if (bus_space_debug& BSDB_ACCESS)				\ 	printf("bsw8(%llx + %llx, %x)<- %llx\n", (u_int64_t)(h),	\ 		(u_int64_t)(o),						\ 		bus_stream_asi[(t)->type], (u_int64_t) v);		\ 	stxa_nc((caddr_t)((h) + (o)), bus_stream_asi[(t)->type], (v));	\ } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  *	void bus_space_write_multi_stream_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset,  *	    const u_intN_t *addr, size_t count));  *  * Write `count' 1, 2, 4, or 8 byte quantities from the buffer  * provided to bus space described by tag/handle/offset.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	u_int8_t *p = (u_int8_t *)a;					\ 	while (i--> 0)							\ 		bus_space_write_stream_1(t, h, o, *p++);		\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	u_int16_t *p = (u_int16_t *)a;					\ 	while (i--> 0)							\ 		bus_space_write_stream_2(t, h, o, *p++);		\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	u_int32_t *p = (u_int32_t *)a;					\ 	while (i--> 0)							\ 		bus_space_write_stream_4(t, h, o, *p++);		\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	u_int64_t *p = (u_int64_t *)a;					\ 	while (i--> 0)							\ 		bus_space_write_stream_8(t, h, o, *p++);		\ } while (0)
end_define

begin_comment
comment|/*  *	void bus_space_set_multi_stream_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t offset, u_intN_t val,  *	    size_t count));  *  * Write the 1, 2, 4, or 8 byte value `val' to bus space described  * by tag/handle/offset `count' times.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	while (i--> 0)							\ 		bus_space_write_stream_1(t, h, o, v);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	while (i--> 0)							\ 		bus_space_write_stream_2(t, h, o, v);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	while (i--> 0)							\ 		bus_space_write_stream_4(t, h, o, v);			\ } while (0)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
value|do {		\ 	int i = c;							\ 	while (i--> 0)							\ 		bus_space_write_stream_8(t, h, o, v);			\ } while (0)
end_define

begin_comment
comment|/*  *	void bus_space_read_region_stream_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t off,  *	    u_intN_t *addr, bus_size_t count));  *  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|bus_space_read_region_stream_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int8_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_read_region_stream_2
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int16_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_read_region_stream_4
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int32_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_read_region_stream_8
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|u_int64_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_read_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
name|u_int8_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|++
control|)
operator|*
name|a
operator|=
name|bus_space_read_stream_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_read_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
name|u_int16_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
operator|*
name|a
operator|=
name|bus_space_read_stream_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_read_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
name|u_int32_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
operator|*
name|a
operator|=
name|bus_space_read_stream_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_read_region_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
name|u_int64_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
operator|*
name|a
operator|=
name|bus_space_read_stream_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  *	void bus_space_write_region_stream_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t off,  *	    u_intN_t *addr, bus_size_t count));  *  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|bus_space_write_region_stream_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int8_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_write_region_stream_2
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int16_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_write_region_stream_4
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int32_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_write_region_stream_8
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int64_t
operator|*
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_write_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int8_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|++
control|)
name|bus_space_write_stream_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_write_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int16_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
name|bus_space_write_stream_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_write_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int32_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
name|bus_space_write_stream_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_write_region_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int64_t
modifier|*
name|a
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
name|bus_space_write_stream_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  *	void bus_space_set_region_stream_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh, bus_size_t off,  *	    u_intN_t *addr, bus_size_t count));  *  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|bus_space_set_region_stream_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int8_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_set_region_stream_2
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int16_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_set_region_stream_4
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int32_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_set_region_stream_8
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
specifier|const
name|u_int64_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_set_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int8_t
name|v
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|++
control|)
name|bus_space_write_stream_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_set_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int16_t
name|v
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
name|bus_space_write_stream_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_set_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int32_t
name|v
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
name|bus_space_write_stream_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_set_region_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h
decl_stmt|;
name|bus_size_t
name|o
decl_stmt|,
name|c
decl_stmt|;
specifier|const
name|u_int64_t
name|v
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
name|bus_space_write_stream_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  *	void bus_space_copy_region_stream_N __P((bus_space_tag_t tag,  *	    bus_space_handle_t bsh1, bus_size_t off1,  *	    bus_space_handle_t bsh2, bus_size_t off2,  *	    bus_size_t count));  *  * Copy `count' 1, 2, 4, or 8 byte values from bus space starting  * at tag/bsh1/off1 to bus space starting at tag/bsh2/off2.  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|bus_space_copy_region_stream_1
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_copy_region_stream_2
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_copy_region_stream_4
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|bus_space_copy_region_stream_8
name|__P
argument_list|(
operator|(
name|bus_space_tag_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_space_handle_t
operator|,
name|bus_size_t
operator|,
name|bus_size_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_copy_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h1
decl_stmt|,
name|h2
decl_stmt|;
name|bus_size_t
name|o1
decl_stmt|,
name|o2
decl_stmt|;
name|bus_size_t
name|c
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|++
operator|,
name|o2
operator|++
control|)
name|bus_space_write_stream_1
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_stream_1
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_copy_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h1
decl_stmt|,
name|h2
decl_stmt|;
name|bus_size_t
name|o1
decl_stmt|,
name|o2
decl_stmt|;
name|bus_size_t
name|c
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|2
operator|,
name|o2
operator|+=
literal|2
control|)
name|bus_space_write_stream_2
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_stream_2
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_copy_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h1
decl_stmt|,
name|h2
decl_stmt|;
name|bus_size_t
name|o1
decl_stmt|,
name|o2
decl_stmt|;
name|bus_size_t
name|c
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|4
operator|,
name|o2
operator|+=
literal|4
control|)
name|bus_space_write_stream_4
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_stream_4
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|bus_space_copy_region_stream_8
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
name|bus_space_tag_t
name|t
decl_stmt|;
name|bus_space_handle_t
name|h1
decl_stmt|,
name|h2
decl_stmt|;
name|bus_size_t
name|o1
decl_stmt|,
name|o2
decl_stmt|;
name|bus_size_t
name|c
decl_stmt|;
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|8
operator|,
name|o2
operator|+=
literal|8
control|)
name|bus_space_write_stream_8
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_8
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|BUS_SPACE_ALIGNED_POINTER
parameter_list|(
name|p
parameter_list|,
name|t
parameter_list|)
value|ALIGNED_POINTER(p, t)
end_define

begin_comment
comment|/* Back-compat functions for old ISA drivers */
end_comment

begin_decl_stmt
specifier|extern
name|bus_space_tag_t
name|isa_io_bt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bus_space_handle_t
name|isa_io_hdl
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bus_space_tag_t
name|isa_mem_bt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bus_space_handle_t
name|isa_mem_hdl
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|inb
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_1(isa_io_bt, isa_io_hdl, o)
end_define

begin_define
define|#
directive|define
name|inw
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_2(isa_io_bt, isa_io_hdl, o)
end_define

begin_define
define|#
directive|define
name|inl
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_4(isa_io_bt, isa_io_hdl, o)
end_define

begin_if
if|#
directive|if
literal|0
end_if

begin_define
define|#
directive|define
name|outb
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|do {							\ 	printf("outb used at %s:%d, address 0x%x -> 0x%lx\n",		\ 	    __func__, __LINE__, o, (unsigned long)isa_io_hdl + o);	\ 	bus_space_write_1(isa_io_bt, isa_io_hdl, o, v);			\ } while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|outb
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_1(isa_io_bt, isa_io_hdl, o, v)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|outw
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_2(isa_io_bt, isa_io_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|outl
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_4(isa_io_bt, isa_io_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|readb
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_1(isa_mem_bt, isa_mem_hdl, o)
end_define

begin_define
define|#
directive|define
name|readw
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_2(isa_mem_bt, isa_mem_hdl, o)
end_define

begin_define
define|#
directive|define
name|readl
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_4(isa_mem_bt, isa_mem_hdl, o)
end_define

begin_define
define|#
directive|define
name|writeb
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_1(isa_mem_bt, isa_mem_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|writew
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_2(isa_mem_bt, isa_mem_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|writel
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_4(isa_mem_bt, isa_mem_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|insb
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_1(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|insw
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_2(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|insl
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_4(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|outsb
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_1(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|outsw
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_2(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|outsl
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_4(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|memcpy_fromio
parameter_list|(
name|d
parameter_list|,
name|s
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_region_1(isa_mem_bt, isa_mem_hdl, s, d, c)
end_define

begin_define
define|#
directive|define
name|memcpy_toio
parameter_list|(
name|d
parameter_list|,
name|s
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_region_1(isa_mem_bt, isa_mem_hdl, d, s, c)
end_define

begin_define
define|#
directive|define
name|memcpy_io
parameter_list|(
name|d
parameter_list|,
name|s
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_1(isa_mem_bt, isa_mem_hdl, s, isa_mem_hdl, d, c)
end_define

begin_define
define|#
directive|define
name|memset_io
parameter_list|(
name|d
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_1(isa_mem_bt, isa_mem_hdl, d, v, c)
end_define

begin_define
define|#
directive|define
name|memsetw_io
parameter_list|(
name|d
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_2(isa_mem_bt, isa_mem_hdl, d, v, c)
end_define

begin_function
specifier|static
name|__inline
name|void
name|memsetw
parameter_list|(
name|void
modifier|*
name|d
parameter_list|,
name|int
name|val
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|u_int16_t
modifier|*
name|sp
init|=
name|d
decl_stmt|;
while|while
condition|(
name|size
operator|--
condition|)
operator|*
name|sp
operator|++
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_comment
comment|/* DMA support */
end_comment

begin_comment
comment|/*  * Flags used in various bus DMA methods.  */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_WAITOK
value|0x000
end_define

begin_comment
comment|/* safe to sleep (pseudo-flag) */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_NOWAIT
value|0x001
end_define

begin_comment
comment|/* not safe to sleep */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_ALLOCNOW
value|0x002
end_define

begin_comment
comment|/* perform resource allocation now */
end_comment

begin_define
define|#
directive|define
name|BUS_DMAMEM_NOSYNC
value|0x004
end_define

begin_comment
comment|/* map memory to not require sync */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_NOWRITE
value|0x008
end_define

begin_define
define|#
directive|define
name|BUS_DMA_BUS1
value|0x010
end_define

begin_define
define|#
directive|define
name|BUS_DMA_BUS2
value|0x020
end_define

begin_define
define|#
directive|define
name|BUS_DMA_BUS3
value|0x040
end_define

begin_define
define|#
directive|define
name|BUS_DMA_BUS4
value|0x080
end_define

begin_comment
comment|/*  * The following flags are from NetBSD, but are not implemented for all  * architetures, and should therefore not be used in MI code.  * Some have different values than under NetBSD.  */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_STREAMING
value|0x100
end_define

begin_comment
comment|/* hint: sequential, unidirectional */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_READ
value|0x200
end_define

begin_comment
comment|/* mapping is device -> memory only */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_WRITE
value|0x400
end_define

begin_comment
comment|/* mapping is memory -> device only */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_COHERENT
value|0x800
end_define

begin_comment
comment|/* hint: map memory DMA coherent */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_NOCACHE
value|BUS_DMA_BUS1
end_define

begin_comment
comment|/* Don't bother with alignment */
end_comment

begin_define
define|#
directive|define
name|BUS_DMA_DVMA
value|BUS_DMA_BUS2
end_define

begin_comment
comment|/* Forwards needed by prototypes below. */
end_comment

begin_struct_decl
struct_decl|struct
name|mbuf
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|uio
struct_decl|;
end_struct_decl

begin_comment
comment|/*  *	bus_dmasync_op_t  *  *	Operations performed by bus_dmamap_sync().  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|BUS_DMASYNC_PREREAD
block|,
name|BUS_DMASYNC_POSTREAD
block|,
name|BUS_DMASYNC_PREWRITE
block|,
name|BUS_DMASYNC_POSTWRITE
block|, }
name|bus_dmasync_op_t
typedef|;
end_typedef

begin_comment
comment|/*  * A function that returns 1 if the address cannot be accessed by  * a device and 0 if it can be.  */
end_comment

begin_typedef
typedef|typedef
name|int
name|bus_dma_filter_t
parameter_list|(
name|void
modifier|*
parameter_list|,
name|bus_addr_t
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|bus_dma_tag
modifier|*
name|bus_dma_tag_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|bus_dmamap
modifier|*
name|bus_dmamap_t
typedef|;
end_typedef

begin_comment
comment|/*  *	bus_dma_segment_t  *  *	Describes a single contiguous DMA transaction.  Values  *	are suitable for programming into DMA registers.  */
end_comment

begin_struct
struct|struct
name|bus_dma_segment
block|{
name|bus_addr_t
name|ds_addr
decl_stmt|;
comment|/* DVMA address */
name|bus_size_t
name|ds_len
decl_stmt|;
comment|/* length of transfer */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|bus_dma_segment
name|bus_dma_segment_t
typedef|;
end_typedef

begin_comment
comment|/*  * A function that processes a successfully loaded dma map or an error  * from a delayed load map.  */
end_comment

begin_typedef
typedef|typedef
name|void
name|bus_dmamap_callback_t
parameter_list|(
name|void
modifier|*
parameter_list|,
name|bus_dma_segment_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  *	bus_dma_tag_t  *  *	A machine-dependent opaque type describing the implementation of  *	DMA for a given bus.  */
end_comment

begin_struct
struct|struct
name|bus_dma_tag
block|{
name|void
modifier|*
name|cookie
decl_stmt|;
comment|/* cookie used in the guts */
name|bus_dma_tag_t
name|parent
decl_stmt|;
name|bus_size_t
name|alignment
decl_stmt|;
name|bus_size_t
name|boundary
decl_stmt|;
name|bus_addr_t
name|lowaddr
decl_stmt|;
name|bus_addr_t
name|highaddr
decl_stmt|;
name|bus_dma_filter_t
modifier|*
name|filter
decl_stmt|;
name|void
modifier|*
name|filterarg
decl_stmt|;
name|bus_size_t
name|maxsize
decl_stmt|;
name|u_int
name|nsegments
decl_stmt|;
name|bus_size_t
name|maxsegsz
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|ref_count
decl_stmt|;
name|int
name|map_count
decl_stmt|;
comment|/* 	 * DMA mapping methods. 	 */
name|int
argument_list|(
argument|*dmamap_create
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|int
operator|,
name|bus_dmamap_t
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*dmamap_destroy
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*dmamap_load
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
name|void
operator|*
operator|,
name|bus_size_t
operator|,
name|bus_dmamap_callback_t
operator|*
operator|,
name|void
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*dmamap_unload
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*dmamap_sync
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|bus_dmamap_t
operator|,
name|bus_dmasync_op_t
operator|)
argument_list|)
expr_stmt|;
comment|/* 	 * DMA memory utility functions. 	 */
name|int
argument_list|(
argument|*dmamem_alloc
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|void
operator|*
operator|*
operator|,
name|int
operator|,
name|bus_dmamap_t
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*dmamem_free
argument_list|)
name|__P
argument_list|(
operator|(
name|bus_dma_tag_t
operator|,
name|void
operator|*
operator|,
name|bus_dmamap_t
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * XXX: This is a kluge. It would be better to handle dma tags in a hierarchical  * way, and have a BUS_GET_DMA_TAG(); however, since this is not currently the  * case, save a root tag in the relevant bus attach function and use that.  * Keep the hierarchical structure, it might become needed in the future.  */
end_comment

begin_decl_stmt
specifier|extern
name|bus_dma_tag_t
name|sparc64_root_dma_tag
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|bus_dma_tag_create
parameter_list|(
name|bus_dma_tag_t
parameter_list|,
name|bus_size_t
parameter_list|,
name|bus_size_t
parameter_list|,
name|bus_addr_t
parameter_list|,
name|bus_addr_t
parameter_list|,
name|bus_dma_filter_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|bus_size_t
parameter_list|,
name|int
parameter_list|,
name|bus_size_t
parameter_list|,
name|int
parameter_list|,
name|bus_dma_tag_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bus_dma_tag_destroy
parameter_list|(
name|bus_dma_tag_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|sparc64_dmamem_alloc_map
parameter_list|(
name|bus_dma_tag_t
name|dmat
parameter_list|,
name|bus_dmamap_t
modifier|*
name|mapp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sparc64_dmamem_free_map
parameter_list|(
name|bus_dma_tag_t
name|dmat
parameter_list|,
name|bus_dmamap_t
name|map
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|bus_dmamap_create
parameter_list|(
name|t
parameter_list|,
name|f
parameter_list|,
name|p
parameter_list|)
define|\
value|(*(t)->dmamap_create)((t), (f), (p))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_destroy
parameter_list|(
name|t
parameter_list|,
name|p
parameter_list|)
define|\
value|(*(t)->dmamap_destroy)((t), (p))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_load
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|p
parameter_list|,
name|s
parameter_list|,
name|cb
parameter_list|,
name|cba
parameter_list|,
name|f
parameter_list|)
define|\
value|(*(t)->dmamap_load)((t), (m), (p), (s), (cb), (cba), (f))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_unload
parameter_list|(
name|t
parameter_list|,
name|p
parameter_list|)
define|\
value|(*(t)->dmamap_unload)((t), (p))
end_define

begin_define
define|#
directive|define
name|bus_dmamap_sync
parameter_list|(
name|t
parameter_list|,
name|m
parameter_list|,
name|op
parameter_list|)
define|\
value|(void)((t)->dmamap_sync ?					\ 	    (*(t)->dmamap_sync)((t), (m), (op)) : (void)0)
end_define

begin_define
define|#
directive|define
name|bus_dmamem_alloc
parameter_list|(
name|t
parameter_list|,
name|v
parameter_list|,
name|f
parameter_list|,
name|m
parameter_list|)
define|\
value|(*(t)->dmamem_alloc)((t), (v), (f), (m))
end_define

begin_define
define|#
directive|define
name|bus_dmamem_free
parameter_list|(
name|t
parameter_list|,
name|v
parameter_list|,
name|m
parameter_list|)
define|\
value|(*(t)->dmamem_free)((t), (v), (m))
end_define

begin_comment
comment|/*  *	bus_dmamap_t  *  *	Describes a DMA mapping.  */
end_comment

begin_struct
struct|struct
name|bus_dmamap
block|{
name|bus_dma_tag_t
name|dmat
decl_stmt|;
name|void
modifier|*
name|buf
decl_stmt|;
comment|/* unmapped buffer pointer */
name|bus_size_t
name|buflen
decl_stmt|;
comment|/* unmapped buffer length */
name|bus_addr_t
name|start
decl_stmt|;
comment|/* start of mapped region */
name|struct
name|resource
modifier|*
name|res
decl_stmt|;
comment|/* associated resource */
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_BUS_H_ */
end_comment

end_unit

