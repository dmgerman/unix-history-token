begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2001 Jake Burkholder.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_PV_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_PV_H_
end_define

begin_define
define|#
directive|define
name|PV_LOCK
parameter_list|()
end_define

begin_define
define|#
directive|define
name|PV_UNLOCK
parameter_list|()
end_define

begin_define
define|#
directive|define
name|ST_TTE
value|offsetof(struct stte, st_tte)
end_define

begin_define
define|#
directive|define
name|ST_NEXT
value|offsetof(struct stte, st_next)
end_define

begin_define
define|#
directive|define
name|ST_PREV
value|offsetof(struct stte, st_prev)
end_define

begin_define
define|#
directive|define
name|TTE_DATA
value|offsetof(struct tte, tte_data)
end_define

begin_define
define|#
directive|define
name|TTE_TAG
value|offsetof(struct tte, tte_tag)
end_define

begin_define
define|#
directive|define
name|PV_OFF
parameter_list|(
name|pa
parameter_list|)
value|((vm_offset_t)(pa) - avail_start)
end_define

begin_define
define|#
directive|define
name|PV_INDEX
parameter_list|(
name|pa
parameter_list|)
value|(PV_OFF(pa)>> PAGE_SHIFT)
end_define

begin_define
define|#
directive|define
name|PV_SHIFT
value|(3)
end_define

begin_define
define|#
directive|define
name|casxp
parameter_list|(
name|pa
parameter_list|,
name|exp
parameter_list|,
name|src
parameter_list|)
define|\
value|casxa((vm_offset_t *)pa, exp, src, ASI_PHYS_USE_EC)
end_define

begin_define
define|#
directive|define
name|ldxp
parameter_list|(
name|pa
parameter_list|)
value|ldxa(pa, ASI_PHYS_USE_EC)
end_define

begin_define
define|#
directive|define
name|stxp
parameter_list|(
name|pa
parameter_list|,
name|val
parameter_list|)
value|stxa(pa, ASI_PHYS_USE_EC, val)
end_define

begin_decl_stmt
specifier|extern
name|vm_offset_t
name|pv_table
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_long
name|pv_generation
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline
name|vm_offset_t
name|pv_lookup
parameter_list|(
name|vm_offset_t
name|pa
parameter_list|)
block|{
return|return
operator|(
name|pv_table
operator|+
operator|(
name|PV_INDEX
argument_list|(
name|pa
argument_list|)
operator|<<
name|PV_SHIFT
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|vm_offset_t
name|pv_get_first
parameter_list|(
name|vm_offset_t
name|pvh
parameter_list|)
block|{
return|return
operator|(
name|ldxp
argument_list|(
name|pvh
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|vm_offset_t
name|pv_get_next
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|)
block|{
return|return
operator|(
name|ldxp
argument_list|(
name|pstp
operator|+
name|ST_NEXT
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|vm_offset_t
name|pv_get_prev
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|)
block|{
return|return
operator|(
name|ldxp
argument_list|(
name|pstp
operator|+
name|ST_PREV
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|pv_get_tte_data
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|)
block|{
return|return
operator|(
name|ldxp
argument_list|(
name|pstp
operator|+
name|ST_TTE
operator|+
name|TTE_DATA
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|pv_get_tte_tag
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|)
block|{
return|return
operator|(
name|ldxp
argument_list|(
name|pstp
operator|+
name|ST_TTE
operator|+
name|TTE_TAG
argument_list|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|pv_get_tte
parameter_list|(
name|pstp
parameter_list|)
value|({ \ 	struct tte __tte; \ 	__tte.tte_tag = pv_get_tte_tag(pstp); \ 	__tte.tte_data = pv_get_tte_data(pstp); \ 	__tte; \ })
end_define

begin_function
specifier|static
name|__inline
name|void
name|pv_set_first
parameter_list|(
name|vm_offset_t
name|pvh
parameter_list|,
name|vm_offset_t
name|first
parameter_list|)
block|{
name|stxp
argument_list|(
name|pvh
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|pv_set_next
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|,
name|vm_offset_t
name|next
parameter_list|)
block|{
name|stxp
argument_list|(
name|pstp
operator|+
name|ST_NEXT
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|pv_set_prev
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|,
name|vm_offset_t
name|prev
parameter_list|)
block|{
name|stxp
argument_list|(
name|pstp
operator|+
name|ST_PREV
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|pv_remove_phys
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|)
block|{
name|vm_offset_t
name|pv_next
decl_stmt|;
name|vm_offset_t
name|pv_prev
decl_stmt|;
name|pv_next
operator|=
name|pv_get_next
argument_list|(
name|pstp
argument_list|)
expr_stmt|;
name|pv_prev
operator|=
name|pv_get_prev
argument_list|(
name|pstp
argument_list|)
expr_stmt|;
if|if
condition|(
name|pv_next
operator|!=
literal|0
condition|)
name|pv_set_prev
argument_list|(
name|pv_next
argument_list|,
name|pv_prev
argument_list|)
expr_stmt|;
name|stxp
argument_list|(
name|pv_prev
argument_list|,
name|pv_next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|pv_bit_clear
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|,
name|u_long
name|bits
parameter_list|)
block|{
name|vm_offset_t
name|dp
decl_stmt|;
name|vm_offset_t
name|d1
decl_stmt|;
name|vm_offset_t
name|d2
decl_stmt|;
name|vm_offset_t
name|d3
decl_stmt|;
name|dp
operator|=
name|pstp
operator|+
name|ST_TTE
operator|+
name|TTE_DATA
expr_stmt|;
for|for
control|(
name|d1
operator|=
name|ldxp
argument_list|(
name|dp
argument_list|)
init|;
condition|;
name|d1
operator|=
name|d3
control|)
block|{
name|d2
operator|=
name|d1
operator|&
operator|~
name|bits
expr_stmt|;
name|d3
operator|=
name|casxp
argument_list|(
name|dp
argument_list|,
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
if|if
condition|(
name|d1
operator|==
name|d3
condition|)
break|break;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|pv_bit_set
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|,
name|u_long
name|bits
parameter_list|)
block|{
name|vm_offset_t
name|dp
decl_stmt|;
name|vm_offset_t
name|d1
decl_stmt|;
name|vm_offset_t
name|d2
decl_stmt|;
name|vm_offset_t
name|d3
decl_stmt|;
name|dp
operator|=
name|pstp
operator|+
name|ST_TTE
operator|+
name|TTE_DATA
expr_stmt|;
for|for
control|(
name|d1
operator|=
name|ldxp
argument_list|(
name|dp
argument_list|)
init|;
condition|;
name|d1
operator|=
name|d3
control|)
block|{
name|d2
operator|=
name|d1
operator||
name|bits
expr_stmt|;
name|d3
operator|=
name|casxp
argument_list|(
name|dp
argument_list|,
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
if|if
condition|(
name|d1
operator|==
name|d3
condition|)
break|break;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|pv_bit_test
parameter_list|(
name|vm_offset_t
name|pstp
parameter_list|,
name|u_long
name|bits
parameter_list|)
block|{
name|vm_offset_t
name|dp
decl_stmt|;
name|dp
operator|=
name|pstp
operator|+
name|ST_TTE
operator|+
name|TTE_DATA
expr_stmt|;
return|return
operator|(
operator|(
name|casxp
argument_list|(
name|dp
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|&
name|bits
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
end_function

begin_function_decl
name|void
name|pv_dump
parameter_list|(
name|vm_offset_t
name|pvh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pv_insert
parameter_list|(
name|pmap_t
name|pm
parameter_list|,
name|vm_offset_t
name|pa
parameter_list|,
name|vm_offset_t
name|va
parameter_list|,
name|struct
name|stte
modifier|*
name|stp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pv_remove_virt
parameter_list|(
name|struct
name|stte
modifier|*
name|stp
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_PV_H_ */
end_comment

end_unit

