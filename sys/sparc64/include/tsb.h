begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1997 Berkeley Software Design, Inc. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Berkeley Software Design Inc's name may not be used to endorse or  *    promote products derived from this software without specific prior  *    written permission.  *  * THIS SOFTWARE IS PROVIDED BY BERKELEY SOFTWARE DESIGN INC ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL BERKELEY SOFTWARE DESIGN INC BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	from: BSDI: pmap.v9.h,v 1.10.2.6 1999/08/23 22:18:44 cp Exp  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_TSB_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_TSB_H_
end_define

begin_define
define|#
directive|define
name|TSB_KERNEL_MIN_ADDRESS
value|(0xa0000000)
end_define

begin_define
define|#
directive|define
name|TSB_USER_MIN_ADDRESS
value|(0xb0000000)
end_define

begin_define
define|#
directive|define
name|TSB_MASK_WIDTH
value|(6)
end_define

begin_define
define|#
directive|define
name|TSB_PRIMARY_BUCKET_SHIFT
value|(2)
end_define

begin_define
define|#
directive|define
name|TSB_PRIMARY_BUCKET_SIZE
value|(1<< TSB_PRIMARY_BUCKET_SHIFT)
end_define

begin_define
define|#
directive|define
name|TSB_PRIMARY_BUCKET_MASK
value|(TSB_PRIMARY_BUCKET_SIZE - 1)
end_define

begin_define
define|#
directive|define
name|TSB_SECONDARY_BUCKET_SHIFT
value|(3)
end_define

begin_define
define|#
directive|define
name|TSB_SECONDARY_BUCKET_SIZE
value|(1<< TSB_SECONDARY_BUCKET_SHIFT)
end_define

begin_define
define|#
directive|define
name|TSB_SECONDARY_BUCKET_MASK
value|(TSB_SECONDARY_BUCKET_SIZE - 1)
end_define

begin_define
define|#
directive|define
name|TSB_PRIMARY_STTE_SHIFT
define|\
value|(STTE_SHIFT + TSB_PRIMARY_BUCKET_SHIFT)
end_define

begin_define
define|#
directive|define
name|TSB_PRIMARY_STTE_MASK
value|((1<< TSB_PRIMARY_STTE_SHIFT) - 1)
end_define

begin_define
define|#
directive|define
name|TSB_LEVEL1_BUCKET_MASK
define|\
value|((TSB_SECONDARY_BUCKET_MASK& ~TSB_PRIMARY_BUCKET_MASK)<< \ 	    (PAGE_SHIFT - TSB_PRIMARY_BUCKET_SHIFT))
end_define

begin_define
define|#
directive|define
name|TSB_LEVEL1_BUCKET_SHIFT
define|\
value|(TSB_BUCKET_SPREAD_SHIFT + \ 	    (TSB_SECONDARY_BUCKET_SHIFT - TSB_PRIMARY_BUCKET_SHIFT))
end_define

begin_define
define|#
directive|define
name|TSB_BUCKET_SPREAD_SHIFT
value|(2)
end_define

begin_define
define|#
directive|define
name|TSB_DEPTH
value|(7)
end_define

begin_define
define|#
directive|define
name|TSB_KERNEL_PAGES
value|(1)
end_define

begin_define
define|#
directive|define
name|TSB_KERNEL_SIZE
value|(TSB_KERNEL_PAGES * PAGE_SIZE_4M)
end_define

begin_define
define|#
directive|define
name|TSB_KERNEL_MASK
value|((TSB_KERNEL_SIZE>> STTE_SHIFT) - 1)
end_define

begin_decl_stmt
specifier|extern
name|vm_offset_t
name|tsb_kernel_phys
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|stte
operator|*
name|tsb_base
argument_list|(
argument|u_int level
argument_list|)
block|{
name|vm_offset_t
name|base
block|;
name|size_t
name|len
block|;
if|if
condition|(
name|level
operator|==
literal|0
condition|)
name|base
operator|=
name|TSB_USER_MIN_ADDRESS
expr_stmt|;
else|else
block|{
name|len
operator|=
literal|1UL
operator|<<
operator|(
operator|(
name|level
operator|*
name|TSB_BUCKET_SPREAD_SHIFT
operator|)
operator|+
name|TSB_MASK_WIDTH
operator|+
name|TSB_SECONDARY_BUCKET_SHIFT
operator|+
name|STTE_SHIFT
operator|)
expr_stmt|;
name|base
operator|=
name|TSB_USER_MIN_ADDRESS
operator|+
name|len
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|(
expr|struct
name|stte
operator|*
operator|)
name|base
return|;
end_return

begin_function
unit|}  static
name|__inline
name|u_long
name|tsb_bucket_shift
parameter_list|(
name|u_int
name|level
parameter_list|)
block|{
return|return
operator|(
name|level
operator|==
literal|0
condition|?
name|TSB_PRIMARY_BUCKET_SHIFT
else|:
name|TSB_SECONDARY_BUCKET_SHIFT
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|tsb_bucket_size
parameter_list|(
name|u_int
name|level
parameter_list|)
block|{
return|return
operator|(
literal|1UL
operator|<<
name|tsb_bucket_shift
argument_list|(
name|level
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|tsb_bucket_mask
parameter_list|(
name|u_int
name|level
parameter_list|)
block|{
return|return
operator|(
name|tsb_bucket_size
argument_list|(
name|level
argument_list|)
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|tsb_mask_width
parameter_list|(
name|u_int
name|level
parameter_list|)
block|{
return|return
operator|(
operator|(
name|level
operator|*
name|TSB_BUCKET_SPREAD_SHIFT
operator|)
operator|+
name|TSB_MASK_WIDTH
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_long
name|tsb_mask
parameter_list|(
name|u_int
name|level
parameter_list|)
block|{
return|return
operator|(
operator|(
literal|1UL
operator|<<
name|tsb_mask_width
argument_list|(
name|level
argument_list|)
operator|)
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int
name|tsb_tlb_slot
parameter_list|(
name|u_int
name|level
parameter_list|)
block|{
return|return
operator|(
name|level
operator|==
literal|0
condition|?
name|TLB_SLOT_TSB_USER_PRIMARY
else|:
name|TLB_SLOT_TSB_USER_SECONDARY
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|vm_offset_t
name|tsb_stte_vtophys
parameter_list|(
name|pmap_t
name|pm
parameter_list|,
name|struct
name|stte
modifier|*
name|stp
parameter_list|)
block|{
name|vm_offset_t
name|va
decl_stmt|;
name|u_long
name|data
decl_stmt|;
name|va
operator|=
operator|(
name|vm_offset_t
operator|)
name|stp
expr_stmt|;
if|if
condition|(
name|pm
operator|==
name|kernel_pmap
condition|)
return|return
operator|(
name|tsb_kernel_phys
operator|+
operator|(
name|va
operator|-
name|TSB_KERNEL_MIN_ADDRESS
operator|)
operator|)
return|;
if|if
condition|(
name|trunc_page
argument_list|(
name|va
argument_list|)
operator|==
name|TSB_USER_MIN_ADDRESS
condition|)
name|data
operator|=
name|pm
operator|->
name|pm_stte
operator|.
name|st_tte
operator|.
name|tte_data
expr_stmt|;
else|else
name|data
operator|=
name|ldxa
argument_list|(
name|TLB_DAR_SLOT
argument_list|(
name|tsb_tlb_slot
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|ASI_DTLB_DATA_ACCESS_REG
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|vm_offset_t
call|)
argument_list|(
operator|(
name|TD_PA
argument_list|(
name|data
argument_list|)
operator|)
operator|+
operator|(
name|va
operator|&
name|PAGE_MASK
operator|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|stte
operator|*
name|tsb_vpntobucket
argument_list|(
argument|vm_offset_t vpn
argument_list|,
argument|u_int level
argument_list|)
block|{
return|return
operator|(
name|tsb_base
argument_list|(
name|level
argument_list|)
operator|+
operator|(
operator|(
name|vpn
operator|&
name|tsb_mask
argument_list|(
name|level
argument_list|)
operator|)
operator|<<
name|tsb_bucket_shift
argument_list|(
name|level
argument_list|)
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|stte
operator|*
name|tsb_vtobucket
argument_list|(
argument|vm_offset_t va
argument_list|,
argument|u_int level
argument_list|)
block|{
return|return
operator|(
name|tsb_vpntobucket
argument_list|(
name|va
operator|>>
name|PAGE_SHIFT
argument_list|,
name|level
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|stte
operator|*
name|tsb_kvpntostte
argument_list|(
argument|vm_offset_t vpn
argument_list|)
block|{ 	struct
name|stte
operator|*
name|stp
block|;
name|stp
operator|=
operator|(
expr|struct
name|stte
operator|*
operator|)
operator|(
name|TSB_KERNEL_MIN_ADDRESS
operator|+
operator|(
operator|(
name|vpn
operator|&
name|TSB_KERNEL_MASK
operator|)
operator|<<
name|STTE_SHIFT
operator|)
operator|)
block|;
return|return
operator|(
name|stp
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|stte
operator|*
name|tsb_kvtostte
argument_list|(
argument|vm_offset_t va
argument_list|)
block|{
return|return
operator|(
name|tsb_kvpntostte
argument_list|(
name|va
operator|>>
name|PAGE_SHIFT
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_function_decl
name|struct
name|stte
modifier|*
name|tsb_get_bucket
parameter_list|(
name|pmap_t
name|pm
parameter_list|,
name|u_int
name|level
parameter_list|,
name|vm_offset_t
name|va
parameter_list|,
name|int
name|allocate
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|tsb_miss
parameter_list|(
name|pmap_t
name|pm
parameter_list|,
name|u_int
name|type
parameter_list|,
name|struct
name|mmuframe
modifier|*
name|mf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|tte
name|tsb_page_alloc
parameter_list|(
name|pmap_t
name|pm
parameter_list|,
name|vm_offset_t
name|va
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tsb_page_fault
parameter_list|(
name|pmap_t
name|pm
parameter_list|,
name|int
name|level
parameter_list|,
name|vm_offset_t
name|va
parameter_list|,
name|struct
name|stte
modifier|*
name|stp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tsb_page_init
parameter_list|(
name|void
modifier|*
name|va
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|stte
modifier|*
name|tsb_stte_lookup
parameter_list|(
name|pmap_t
name|pm
parameter_list|,
name|vm_offset_t
name|va
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|stte
modifier|*
name|tsb_stte_promote
parameter_list|(
name|pmap_t
name|pm
parameter_list|,
name|vm_offset_t
name|va
parameter_list|,
name|struct
name|stte
modifier|*
name|stp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tsb_stte_remove
parameter_list|(
name|struct
name|stte
modifier|*
name|stp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|stte
modifier|*
name|tsb_tte_enter
parameter_list|(
name|pmap_t
name|pm
parameter_list|,
name|vm_offset_t
name|va
parameter_list|,
name|struct
name|tte
name|tte
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tsb_tte_local_remove
parameter_list|(
name|struct
name|tte
modifier|*
name|tp
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|vm_offset_t
name|tsb_bootstrap_pages
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|tsb_bootstrap_index
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_TSB_H_ */
end_comment

end_unit

