begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2001, 2002 Scott Long<scottl@freebsd.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|UDF_HASHTBLSIZE
value|100
end_define

begin_struct
struct|struct
name|udf_node
block|{
name|LIST_ENTRY
argument_list|(
argument|udf_node
argument_list|)
name|le
expr_stmt|;
name|struct
name|vnode
modifier|*
name|i_vnode
decl_stmt|;
name|struct
name|vnode
modifier|*
name|i_devvp
decl_stmt|;
name|struct
name|udf_mnt
modifier|*
name|udfmp
decl_stmt|;
name|struct
name|cdev
modifier|*
name|i_dev
decl_stmt|;
name|ino_t
name|hash_id
decl_stmt|;
name|long
name|diroff
decl_stmt|;
name|struct
name|file_entry
modifier|*
name|fentry
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|udf_mnt
block|{
name|int
name|im_flags
decl_stmt|;
name|struct
name|mount
modifier|*
name|im_mountp
decl_stmt|;
name|struct
name|g_consumer
modifier|*
name|im_cp
decl_stmt|;
name|struct
name|bufobj
modifier|*
name|im_bo
decl_stmt|;
name|struct
name|cdev
modifier|*
name|im_dev
decl_stmt|;
name|struct
name|vnode
modifier|*
name|im_devvp
decl_stmt|;
name|int
name|bsize
decl_stmt|;
name|int
name|bshift
decl_stmt|;
name|int
name|bmask
decl_stmt|;
name|uint32_t
name|part_start
decl_stmt|;
name|uint32_t
name|part_len
decl_stmt|;
name|uint64_t
name|root_id
decl_stmt|;
name|struct
name|long_ad
name|root_icb
decl_stmt|;
name|LIST_HEAD
argument_list|(
name|udf_hash_lh
argument_list|,
name|udf_node
argument_list|)
operator|*
name|hashtbl
expr_stmt|;
name|u_long
name|hashsz
decl_stmt|;
name|struct
name|mtx
name|hash_mtx
decl_stmt|;
name|int
name|p_sectors
decl_stmt|;
name|int
name|s_table_entries
decl_stmt|;
name|struct
name|udf_sparing_table
modifier|*
name|s_table
decl_stmt|;
name|void
modifier|*
name|im_d2l
decl_stmt|;
comment|/* disk->local iconv handle */
if|#
directive|if
literal|0
block|void			*im_l2d;
comment|/* local->disk iconv handle */
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|udf_dirstream
block|{
name|struct
name|udf_node
modifier|*
name|node
decl_stmt|;
name|struct
name|udf_mnt
modifier|*
name|udfmp
decl_stmt|;
name|struct
name|buf
modifier|*
name|bp
decl_stmt|;
name|uint8_t
modifier|*
name|data
decl_stmt|;
name|uint8_t
modifier|*
name|buf
decl_stmt|;
name|int
name|fsize
decl_stmt|;
name|int
name|off
decl_stmt|;
name|int
name|this_off
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|size
decl_stmt|;
name|int
name|error
decl_stmt|;
name|int
name|fid_fragment
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|VFSTOUDFFS
parameter_list|(
name|mp
parameter_list|)
value|((struct udf_mnt *)((mp)->mnt_data))
end_define

begin_define
define|#
directive|define
name|VTON
parameter_list|(
name|vp
parameter_list|)
value|((struct udf_node *)((vp)->v_data))
end_define

begin_comment
comment|/*  * The block layer refers to things in terms of 512 byte blocks by default.  * btodb() is expensive, so speed things up.  * XXX Can the block layer be forced to use a different block size?  */
end_comment

begin_define
define|#
directive|define
name|RDSECTOR
parameter_list|(
name|devvp
parameter_list|,
name|sector
parameter_list|,
name|size
parameter_list|,
name|bp
parameter_list|)
define|\
value|bread(devvp, sector<< (udfmp->bshift - DEV_BSHIFT), size, NOCRED, bp)
end_define

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_UDFFENTRY
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
specifier|static
name|__inline
name|int
name|udf_readlblks
parameter_list|(
name|struct
name|udf_mnt
modifier|*
name|udfmp
parameter_list|,
name|int
name|sector
parameter_list|,
name|int
name|size
parameter_list|,
name|struct
name|buf
modifier|*
modifier|*
name|bp
parameter_list|)
block|{
return|return
operator|(
name|RDSECTOR
argument_list|(
name|udfmp
operator|->
name|im_devvp
argument_list|,
name|sector
argument_list|,
operator|(
name|size
operator|+
name|udfmp
operator|->
name|bmask
operator|)
operator|&
operator|~
name|udfmp
operator|->
name|bmask
argument_list|,
name|bp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|udf_readalblks
parameter_list|(
name|struct
name|udf_mnt
modifier|*
name|udfmp
parameter_list|,
name|int
name|lsector
parameter_list|,
name|int
name|size
parameter_list|,
name|struct
name|buf
modifier|*
modifier|*
name|bp
parameter_list|)
block|{
name|daddr_t
name|rablock
decl_stmt|,
name|lblk
decl_stmt|;
name|int
name|rasize
decl_stmt|;
name|lblk
operator|=
operator|(
name|lsector
operator|+
name|udfmp
operator|->
name|part_start
operator|)
operator|<<
operator|(
name|udfmp
operator|->
name|bshift
operator|-
name|DEV_BSHIFT
operator|)
expr_stmt|;
name|rablock
operator|=
operator|(
name|lblk
operator|+
literal|1
operator|)
operator|<<
name|udfmp
operator|->
name|bshift
expr_stmt|;
name|rasize
operator|=
name|size
expr_stmt|;
return|return
operator|(
name|breadn
argument_list|(
name|udfmp
operator|->
name|im_devvp
argument_list|,
name|lblk
argument_list|,
operator|(
name|size
operator|+
name|udfmp
operator|->
name|bmask
operator|)
operator|&
operator|~
name|udfmp
operator|->
name|bmask
argument_list|,
operator|&
name|rablock
argument_list|,
operator|&
name|rasize
argument_list|,
literal|1
argument_list|,
name|NOCRED
argument_list|,
name|bp
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Produce a suitable file number from an ICB.  The passed in ICB is expected  * to be in little endian (meaning that it hasn't been swapped for big  * endian machines yet).  * XXX If the fileno resolves to 0, we might be in big trouble.  * XXX Assumes the ICB is a long_ad.  This struct is compatible with short_ad,  *     but not ext_ad.  */
end_comment

begin_function
specifier|static
name|__inline
name|ino_t
name|udf_getid
parameter_list|(
name|struct
name|long_ad
modifier|*
name|icb
parameter_list|)
block|{
return|return
operator|(
name|le32toh
argument_list|(
name|icb
operator|->
name|loc
operator|.
name|lb_num
argument_list|)
operator|)
return|;
block|}
end_function

begin_function_decl
name|int
name|udf_allocv
parameter_list|(
name|struct
name|mount
modifier|*
parameter_list|,
name|struct
name|vnode
modifier|*
modifier|*
parameter_list|,
name|struct
name|thread
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|udf_hashlookup
parameter_list|(
name|struct
name|udf_mnt
modifier|*
parameter_list|,
name|ino_t
parameter_list|,
name|int
parameter_list|,
name|struct
name|vnode
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|udf_hashins
parameter_list|(
name|struct
name|udf_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|udf_hashrem
parameter_list|(
name|struct
name|udf_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|udf_checktag
parameter_list|(
name|struct
name|desc_tag
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|udf_vget
parameter_list|(
name|struct
name|mount
modifier|*
parameter_list|,
name|ino_t
parameter_list|,
name|int
parameter_list|,
name|struct
name|vnode
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|uma_zone_t
name|udf_zone_trans
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|uma_zone_t
name|udf_zone_node
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|uma_zone_t
name|udf_zone_ds
decl_stmt|;
end_decl_stmt

end_unit

