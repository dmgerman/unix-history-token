begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007 Rohit Jalan (rohitj@purpe.com)   * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_TMPFS_UMA_H
end_ifndef

begin_define
define|#
directive|define
name|_TMPFS_UMA_H
end_define

begin_include
include|#
directive|include
file|<vm/uma.h>
end_include

begin_define
define|#
directive|define
name|TMPFS_STRZONE_ZONECOUNT
value|7
end_define

begin_define
define|#
directive|define
name|TMPFS_STRZONE_STARTLEN
value|(1<< 4)
end_define

begin_struct_decl
struct_decl|struct
name|tmpfs_mount
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|tmpfs_str_zone
block|{
name|uma_zone_t
name|tsz_zone
index|[
name|TMPFS_STRZONE_ZONECOUNT
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|tmpfs_str_zone_create
parameter_list|(
name|struct
name|tmpfs_str_zone
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tmpfs_str_zone_destroy
parameter_list|(
name|struct
name|tmpfs_str_zone
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|char
modifier|*
name|tmpfs_str_zone_alloc
parameter_list|(
name|struct
name|tmpfs_str_zone
modifier|*
name|tsz
parameter_list|,
name|int
name|flags
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|size_t
name|i
decl_stmt|,
name|zlen
decl_stmt|;
name|char
modifier|*
name|ptr
decl_stmt|;
name|MPASS
argument_list|(
name|len
operator|<=
operator|(
name|TMPFS_STRZONE_STARTLEN
operator|<<
operator|(
name|TMPFS_STRZONE_ZONECOUNT
operator|-
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
name|zlen
operator|=
name|TMPFS_STRZONE_STARTLEN
expr_stmt|;
while|while
condition|(
name|len
operator|>
name|zlen
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|zlen
operator|<<=
literal|1
expr_stmt|;
block|}
name|ptr
operator|=
operator|(
name|char
operator|*
operator|)
name|uma_zalloc
argument_list|(
name|tsz
operator|->
name|tsz_zone
index|[
name|i
index|]
argument_list|,
name|flags
argument_list|)
expr_stmt|;
return|return
name|ptr
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|tmpfs_str_zone_free
parameter_list|(
name|struct
name|tmpfs_str_zone
modifier|*
name|tsz
parameter_list|,
name|char
modifier|*
name|item
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
name|size_t
name|i
decl_stmt|,
name|zlen
decl_stmt|;
name|MPASS
argument_list|(
name|len
operator|<=
operator|(
name|TMPFS_STRZONE_STARTLEN
operator|<<
operator|(
name|TMPFS_STRZONE_ZONECOUNT
operator|-
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
name|zlen
operator|=
name|TMPFS_STRZONE_STARTLEN
expr_stmt|;
while|while
condition|(
name|len
operator|>
name|zlen
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|zlen
operator|<<=
literal|1
expr_stmt|;
block|}
name|uma_zfree
argument_list|(
name|tsz
operator|->
name|tsz_zone
index|[
name|i
index|]
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

