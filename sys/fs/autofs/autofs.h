begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2014 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Edward Tomasz Napierala under sponsorship  * from the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|AUTOFS_H
end_ifndef

begin_define
define|#
directive|define
name|AUTOFS_H
end_define

begin_define
define|#
directive|define
name|VFSTOAUTOFS
parameter_list|(
name|mp
parameter_list|)
value|((struct autofs_mount *)((mp)->mnt_data))
end_define

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_AUTOFS
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|extern
name|uma_zone_t
name|autofs_request_zone
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|uma_zone_t
name|autofs_node_zone
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|autofs_debug
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|autofs_mount_on_stat
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|AUTOFS_DEBUG
parameter_list|(
name|X
parameter_list|,
modifier|...
parameter_list|)
define|\
value|do {								\ 		if (autofs_debug> 1)					\ 			printf("%s: " X "\n", __func__, ## __VA_ARGS__);\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|AUTOFS_WARN
parameter_list|(
name|X
parameter_list|,
modifier|...
parameter_list|)
define|\
value|do {								\ 		if (autofs_debug> 0) {					\ 			printf("WARNING: %s: " X "\n",			\ 		    	    __func__, ## __VA_ARGS__);			\ 		}							\ 	} while (0)
end_define

begin_define
define|#
directive|define
name|AUTOFS_SLOCK
parameter_list|(
name|X
parameter_list|)
value|sx_slock(&X->am_lock)
end_define

begin_define
define|#
directive|define
name|AUTOFS_XLOCK
parameter_list|(
name|X
parameter_list|)
value|sx_xlock(&X->am_lock)
end_define

begin_define
define|#
directive|define
name|AUTOFS_SUNLOCK
parameter_list|(
name|X
parameter_list|)
value|sx_sunlock(&X->am_lock)
end_define

begin_define
define|#
directive|define
name|AUTOFS_XUNLOCK
parameter_list|(
name|X
parameter_list|)
value|sx_xunlock(&X->am_lock)
end_define

begin_define
define|#
directive|define
name|AUTOFS_ASSERT_LOCKED
parameter_list|(
name|X
parameter_list|)
value|sx_assert(&X->am_lock, SA_LOCKED)
end_define

begin_define
define|#
directive|define
name|AUTOFS_ASSERT_XLOCKED
parameter_list|(
name|X
parameter_list|)
value|sx_assert(&X->am_lock, SA_XLOCKED)
end_define

begin_define
define|#
directive|define
name|AUTOFS_ASSERT_UNLOCKED
parameter_list|(
name|X
parameter_list|)
value|sx_assert(&X->am_lock, SA_UNLOCKED)
end_define

begin_struct
struct|struct
name|autofs_node
block|{
name|RB_ENTRY
argument_list|(
argument|autofs_node
argument_list|)
name|an_link
expr_stmt|;
name|char
modifier|*
name|an_name
decl_stmt|;
name|int
name|an_fileno
decl_stmt|;
name|struct
name|autofs_node
modifier|*
name|an_parent
decl_stmt|;
name|RB_HEAD
argument_list|(
argument|autofs_node_tree
argument_list|,
argument|autofs_node
argument_list|)
name|an_children
expr_stmt|;
name|struct
name|autofs_mount
modifier|*
name|an_mount
decl_stmt|;
name|struct
name|vnode
modifier|*
name|an_vnode
decl_stmt|;
name|struct
name|sx
name|an_vnode_lock
decl_stmt|;
name|bool
name|an_cached
decl_stmt|;
name|bool
name|an_wildcards
decl_stmt|;
name|struct
name|callout
name|an_callout
decl_stmt|;
name|int
name|an_retries
decl_stmt|;
name|struct
name|timespec
name|an_ctime
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|autofs_mount
block|{
name|TAILQ_ENTRY
argument_list|(
argument|autofs_mount
argument_list|)
name|am_next
expr_stmt|;
name|struct
name|autofs_node
modifier|*
name|am_root
decl_stmt|;
name|struct
name|mount
modifier|*
name|am_mp
decl_stmt|;
name|struct
name|sx
name|am_lock
decl_stmt|;
name|char
name|am_from
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|char
name|am_mountpoint
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|char
name|am_options
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|char
name|am_prefix
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|int
name|am_last_fileno
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|autofs_request
block|{
name|TAILQ_ENTRY
argument_list|(
argument|autofs_request
argument_list|)
name|ar_next
expr_stmt|;
name|struct
name|autofs_mount
modifier|*
name|ar_mount
decl_stmt|;
name|int
name|ar_id
decl_stmt|;
name|bool
name|ar_done
decl_stmt|;
name|int
name|ar_error
decl_stmt|;
name|bool
name|ar_wildcards
decl_stmt|;
name|bool
name|ar_in_progress
decl_stmt|;
name|char
name|ar_from
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|char
name|ar_path
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|char
name|ar_prefix
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|char
name|ar_key
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|char
name|ar_options
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|struct
name|timeout_task
name|ar_task
decl_stmt|;
specifier|volatile
name|u_int
name|ar_refcount
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|autofs_softc
block|{
name|device_t
name|sc_dev
decl_stmt|;
name|struct
name|cdev
modifier|*
name|sc_cdev
decl_stmt|;
name|struct
name|cv
name|sc_cv
decl_stmt|;
name|struct
name|sx
name|sc_lock
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|autofs_request
argument_list|)
name|sc_requests
expr_stmt|;
name|bool
name|sc_dev_opened
decl_stmt|;
name|pid_t
name|sc_dev_sid
decl_stmt|;
name|int
name|sc_last_request_id
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|autofs_init
parameter_list|(
name|struct
name|vfsconf
modifier|*
name|vfsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|autofs_uninit
parameter_list|(
name|struct
name|vfsconf
modifier|*
name|vfsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|autofs_trigger
parameter_list|(
name|struct
name|autofs_node
modifier|*
name|anp
parameter_list|,
specifier|const
name|char
modifier|*
name|component
parameter_list|,
name|int
name|componentlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|autofs_cached
parameter_list|(
name|struct
name|autofs_node
modifier|*
name|anp
parameter_list|,
specifier|const
name|char
modifier|*
name|component
parameter_list|,
name|int
name|componentlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|autofs_flush
parameter_list|(
name|struct
name|autofs_mount
modifier|*
name|amp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|autofs_ignore_thread
parameter_list|(
specifier|const
name|struct
name|thread
modifier|*
name|td
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|autofs_node_new
parameter_list|(
name|struct
name|autofs_node
modifier|*
name|parent
parameter_list|,
name|struct
name|autofs_mount
modifier|*
name|amp
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|namelen
parameter_list|,
name|struct
name|autofs_node
modifier|*
modifier|*
name|anpp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|autofs_node_find
parameter_list|(
name|struct
name|autofs_node
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|namelen
parameter_list|,
name|struct
name|autofs_node
modifier|*
modifier|*
name|anpp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|autofs_node_delete
parameter_list|(
name|struct
name|autofs_node
modifier|*
name|anp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|autofs_node_vn
parameter_list|(
name|struct
name|autofs_node
modifier|*
name|anp
parameter_list|,
name|struct
name|mount
modifier|*
name|mp
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|RB_PROTOTYPE
argument_list|(
name|autofs_node_tree
argument_list|,
name|autofs_node
argument_list|,
name|an_link
argument_list|,
name|autofs_node_cmp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !AUTOFS_H */
end_comment

end_unit

