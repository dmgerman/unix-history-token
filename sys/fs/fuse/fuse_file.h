begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-3-Clause  *  * Copyright (c) 2007-2009 Google Inc. and Amit Singh  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *   * * Redistributions of source code must retain the above copyright  *   notice, this list of conditions and the following disclaimer.  * * Redistributions in binary form must reproduce the above  *   copyright notice, this list of conditions and the following disclaimer  *   in the documentation and/or other materials provided with the  *   distribution.  * * Neither the name of Google Inc. nor the names of its  *   contributors may be used to endorse or promote products derived from  *   this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   * Copyright (C) 2005 Csaba Henk.  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *   * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_FUSE_FILE_H_
end_ifndef

begin_define
define|#
directive|define
name|_FUSE_FILE_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/fcntl.h>
end_include

begin_include
include|#
directive|include
file|<sys/stat.h>
end_include

begin_include
include|#
directive|include
file|<sys/mman.h>
end_include

begin_include
include|#
directive|include
file|<sys/vnode.h>
end_include

begin_typedef
typedef|typedef
enum|enum
name|fufh_type
block|{
name|FUFH_INVALID
init|=
operator|-
literal|1
block|,
name|FUFH_RDONLY
init|=
literal|0
block|,
name|FUFH_WRONLY
init|=
literal|1
block|,
name|FUFH_RDWR
init|=
literal|2
block|,
name|FUFH_MAXTYPE
init|=
literal|3
block|, }
name|fufh_type_t
typedef|;
end_typedef

begin_struct
struct|struct
name|fuse_filehandle
block|{
name|uint64_t
name|fh_id
decl_stmt|;
name|fufh_type_t
name|fh_type
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|FUFH_IS_VALID
parameter_list|(
name|f
parameter_list|)
value|((f)->fh_type != FUFH_INVALID)
end_define

begin_function
specifier|static
name|__inline__
name|fufh_type_t
name|fuse_filehandle_xlate_from_mmap
parameter_list|(
name|int
name|fflags
parameter_list|)
block|{
if|if
condition|(
name|fflags
operator|&
operator|(
name|PROT_READ
operator||
name|PROT_WRITE
operator|)
condition|)
block|{
return|return
name|FUFH_RDWR
return|;
block|}
elseif|else
if|if
condition|(
name|fflags
operator|&
operator|(
name|PROT_WRITE
operator|)
condition|)
block|{
return|return
name|FUFH_WRONLY
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|fflags
operator|&
name|PROT_READ
operator|)
operator|||
operator|(
name|fflags
operator|&
name|PROT_EXEC
operator|)
condition|)
block|{
return|return
name|FUFH_RDONLY
return|;
block|}
else|else
block|{
return|return
name|FUFH_INVALID
return|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline__
name|fufh_type_t
name|fuse_filehandle_xlate_from_fflags
parameter_list|(
name|int
name|fflags
parameter_list|)
block|{
if|if
condition|(
operator|(
name|fflags
operator|&
name|FREAD
operator|)
operator|&&
operator|(
name|fflags
operator|&
name|FWRITE
operator|)
condition|)
block|{
return|return
name|FUFH_RDWR
return|;
block|}
elseif|else
if|if
condition|(
name|fflags
operator|&
operator|(
name|FWRITE
operator|)
condition|)
block|{
return|return
name|FUFH_WRONLY
return|;
block|}
elseif|else
if|if
condition|(
name|fflags
operator|&
operator|(
name|FREAD
operator|)
condition|)
block|{
return|return
name|FUFH_RDONLY
return|;
block|}
else|else
block|{
name|panic
argument_list|(
literal|"FUSE: What kind of a flag is this (%x)?"
argument_list|,
name|fflags
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline__
name|int
name|fuse_filehandle_xlate_to_oflags
parameter_list|(
name|fufh_type_t
name|type
parameter_list|)
block|{
name|int
name|oflags
init|=
operator|-
literal|1
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|FUFH_RDONLY
case|:
name|oflags
operator|=
name|O_RDONLY
expr_stmt|;
break|break;
case|case
name|FUFH_WRONLY
case|:
name|oflags
operator|=
name|O_WRONLY
expr_stmt|;
break|break;
case|case
name|FUFH_RDWR
case|:
name|oflags
operator|=
name|O_RDWR
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|oflags
return|;
block|}
end_function

begin_function_decl
name|int
name|fuse_filehandle_valid
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|fufh_type_t
name|fufh_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|fufh_type_t
name|fuse_filehandle_validrw
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|fufh_type_t
name|fufh_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fuse_filehandle_get
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|fufh_type_t
name|fufh_type
parameter_list|,
name|struct
name|fuse_filehandle
modifier|*
modifier|*
name|fufhp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fuse_filehandle_getrw
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|fufh_type_t
name|fufh_type
parameter_list|,
name|struct
name|fuse_filehandle
modifier|*
modifier|*
name|fufhp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fuse_filehandle_init
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|fufh_type_t
name|fufh_type
parameter_list|,
name|struct
name|fuse_filehandle
modifier|*
modifier|*
name|fufhp
parameter_list|,
name|uint64_t
name|fh_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fuse_filehandle_open
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|fufh_type_t
name|fufh_type
parameter_list|,
name|struct
name|fuse_filehandle
modifier|*
modifier|*
name|fufhp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fuse_filehandle_close
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|fufh_type_t
name|fufh_type
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _FUSE_FILE_H_ */
end_comment

end_unit

