begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-3-Clause  *  * Copyright (c) 2007-2009 Google Inc. and Amit Singh  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *   * * Redistributions of source code must retain the above copyright  *   notice, this list of conditions and the following disclaimer.  * * Redistributions in binary form must reproduce the above  *   copyright notice, this list of conditions and the following disclaimer  *   in the documentation and/or other materials provided with the  *   distribution.  * * Neither the name of Google Inc. nor the names of its  *   contributors may be used to endorse or promote products derived from  *   this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   * Copyright (C) 2005 Csaba Henk.  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *   * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_FUSE_INTERNAL_H_
end_ifndef

begin_define
define|#
directive|define
name|_FUSE_INTERNAL_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/uio.h>
end_include

begin_include
include|#
directive|include
file|<sys/stat.h>
end_include

begin_include
include|#
directive|include
file|<sys/vnode.h>
end_include

begin_include
include|#
directive|include
file|"fuse_ipc.h"
end_include

begin_include
include|#
directive|include
file|"fuse_node.h"
end_include

begin_function
specifier|static
name|__inline
name|int
name|vfs_isrdonly
parameter_list|(
name|struct
name|mount
modifier|*
name|mp
parameter_list|)
block|{
return|return
operator|(
operator|(
name|mp
operator|->
name|mnt_flag
operator|&
name|MNT_RDONLY
operator|)
operator|!=
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mount
operator|*
name|vnode_mount
argument_list|(
argument|struct vnode *vp
argument_list|)
block|{
return|return
operator|(
name|vp
operator|->
name|v_mount
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|__inline
name|int
name|vnode_mountedhere
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|)
block|{
return|return
operator|(
name|vp
operator|->
name|v_mountedhere
operator|!=
name|NULL
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|enum
name|vtype
name|vnode_vtype
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|)
block|{
return|return
operator|(
name|vp
operator|->
name|v_type
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|vnode_isvroot
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|)
block|{
return|return
operator|(
operator|(
name|vp
operator|->
name|v_vflag
operator|&
name|VV_ROOT
operator|)
operator|!=
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|vnode_isreg
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|)
block|{
return|return
operator|(
name|vp
operator|->
name|v_type
operator|==
name|VREG
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|vnode_isdir
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|)
block|{
return|return
operator|(
name|vp
operator|->
name|v_type
operator|==
name|VDIR
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|vnode_islnk
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|)
block|{
return|return
operator|(
name|vp
operator|->
name|v_type
operator|==
name|VLNK
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|ssize_t
name|uio_resid
parameter_list|(
name|struct
name|uio
modifier|*
name|uio
parameter_list|)
block|{
return|return
operator|(
name|uio
operator|->
name|uio_resid
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|off_t
name|uio_offset
parameter_list|(
name|struct
name|uio
modifier|*
name|uio
parameter_list|)
block|{
return|return
operator|(
name|uio
operator|->
name|uio_offset
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|uio_setoffset
parameter_list|(
name|struct
name|uio
modifier|*
name|uio
parameter_list|,
name|off_t
name|offset
parameter_list|)
block|{
name|uio
operator|->
name|uio_offset
operator|=
name|offset
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|uio_setresid
parameter_list|(
name|struct
name|uio
modifier|*
name|uio
parameter_list|,
name|ssize_t
name|resid
parameter_list|)
block|{
name|uio
operator|->
name|uio_resid
operator|=
name|resid
expr_stmt|;
block|}
end_function

begin_comment
comment|/* miscellaneous */
end_comment

begin_function
specifier|static
name|__inline__
name|int
name|fuse_isdeadfs
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|)
block|{
name|struct
name|fuse_data
modifier|*
name|data
init|=
name|fuse_get_mpdata
argument_list|(
name|vnode_mount
argument_list|(
name|vp
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|data
operator|->
name|dataflags
operator|&
name|FSESS_DEAD
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|int
name|fuse_iosize
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|)
block|{
return|return
name|vp
operator|->
name|v_mount
operator|->
name|mnt_stat
operator|.
name|f_iosize
return|;
block|}
end_function

begin_comment
comment|/* access */
end_comment

begin_define
define|#
directive|define
name|FVP_ACCESS_NOOP
value|0x01
end_define

begin_define
define|#
directive|define
name|FACCESS_VA_VALID
value|0x01
end_define

begin_define
define|#
directive|define
name|FACCESS_DO_ACCESS
value|0x02
end_define

begin_define
define|#
directive|define
name|FACCESS_STICKY
value|0x04
end_define

begin_define
define|#
directive|define
name|FACCESS_CHOWN
value|0x08
end_define

begin_define
define|#
directive|define
name|FACCESS_NOCHECKSPY
value|0x10
end_define

begin_define
define|#
directive|define
name|FACCESS_SETGID
value|0x12
end_define

begin_define
define|#
directive|define
name|FACCESS_XQUERIES
value|FACCESS_STICKY | FACCESS_CHOWN | FACCESS_SETGID
end_define

begin_struct
struct|struct
name|fuse_access_param
block|{
name|uid_t
name|xuid
decl_stmt|;
name|gid_t
name|xgid
decl_stmt|;
name|uint32_t
name|facc_flags
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|int
name|fuse_match_cred
parameter_list|(
name|struct
name|ucred
modifier|*
name|basecred
parameter_list|,
name|struct
name|ucred
modifier|*
name|usercred
parameter_list|)
block|{
if|if
condition|(
name|basecred
operator|->
name|cr_uid
operator|==
name|usercred
operator|->
name|cr_uid
operator|&&
name|basecred
operator|->
name|cr_uid
operator|==
name|usercred
operator|->
name|cr_ruid
operator|&&
name|basecred
operator|->
name|cr_uid
operator|==
name|usercred
operator|->
name|cr_svuid
operator|&&
name|basecred
operator|->
name|cr_groups
index|[
literal|0
index|]
operator|==
name|usercred
operator|->
name|cr_groups
index|[
literal|0
index|]
operator|&&
name|basecred
operator|->
name|cr_groups
index|[
literal|0
index|]
operator|==
name|usercred
operator|->
name|cr_rgid
operator|&&
name|basecred
operator|->
name|cr_groups
index|[
literal|0
index|]
operator|==
name|usercred
operator|->
name|cr_svgid
condition|)
return|return
literal|0
return|;
return|return
name|EPERM
return|;
block|}
end_function

begin_function_decl
name|int
name|fuse_internal_access
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|mode_t
name|mode
parameter_list|,
name|struct
name|fuse_access_param
modifier|*
name|facp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* attributes */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|fuse_internal_attr_fat2vat
parameter_list|(
name|struct
name|mount
modifier|*
name|mp
parameter_list|,
name|struct
name|fuse_attr
modifier|*
name|fat
parameter_list|,
name|struct
name|vattr
modifier|*
name|vap
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_INTERNAL
argument_list|,
literal|"node #%ju, mode 0%o\n"
argument_list|,
operator|(
name|uintmax_t
operator|)
name|fat
operator|->
name|ino
argument_list|,
name|fat
operator|->
name|mode
argument_list|)
expr_stmt|;
name|vattr_null
argument_list|(
name|vap
argument_list|)
expr_stmt|;
name|vap
operator|->
name|va_fsid
operator|=
name|mp
operator|->
name|mnt_stat
operator|.
name|f_fsid
operator|.
name|val
index|[
literal|0
index|]
expr_stmt|;
name|vap
operator|->
name|va_fileid
operator|=
name|fat
operator|->
name|ino
expr_stmt|;
comment|/* XXX cast from 64 bits to 32 */
name|vap
operator|->
name|va_mode
operator|=
name|fat
operator|->
name|mode
operator|&
operator|~
name|S_IFMT
expr_stmt|;
name|vap
operator|->
name|va_nlink
operator|=
name|fat
operator|->
name|nlink
expr_stmt|;
name|vap
operator|->
name|va_uid
operator|=
name|fat
operator|->
name|uid
expr_stmt|;
name|vap
operator|->
name|va_gid
operator|=
name|fat
operator|->
name|gid
expr_stmt|;
name|vap
operator|->
name|va_rdev
operator|=
name|fat
operator|->
name|rdev
expr_stmt|;
name|vap
operator|->
name|va_size
operator|=
name|fat
operator|->
name|size
expr_stmt|;
name|vap
operator|->
name|va_atime
operator|.
name|tv_sec
operator|=
name|fat
operator|->
name|atime
expr_stmt|;
comment|/* XXX on some platforms cast from 64 bits to 32 */
name|vap
operator|->
name|va_atime
operator|.
name|tv_nsec
operator|=
name|fat
operator|->
name|atimensec
expr_stmt|;
name|vap
operator|->
name|va_mtime
operator|.
name|tv_sec
operator|=
name|fat
operator|->
name|mtime
expr_stmt|;
name|vap
operator|->
name|va_mtime
operator|.
name|tv_nsec
operator|=
name|fat
operator|->
name|mtimensec
expr_stmt|;
name|vap
operator|->
name|va_ctime
operator|.
name|tv_sec
operator|=
name|fat
operator|->
name|ctime
expr_stmt|;
name|vap
operator|->
name|va_ctime
operator|.
name|tv_nsec
operator|=
name|fat
operator|->
name|ctimensec
expr_stmt|;
name|vap
operator|->
name|va_blocksize
operator|=
name|PAGE_SIZE
expr_stmt|;
name|vap
operator|->
name|va_type
operator|=
name|IFTOVT
argument_list|(
name|fat
operator|->
name|mode
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|S_BLKSIZE
operator|==
literal|512
operator|)
comment|/* Optimize this case */
name|vap
operator|->
name|va_bytes
operator|=
name|fat
operator|->
name|blocks
operator|<<
literal|9
expr_stmt|;
else|#
directive|else
name|vap
operator|->
name|va_bytes
operator|=
name|fat
operator|->
name|blocks
operator|*
name|S_BLKSIZE
expr_stmt|;
endif|#
directive|endif
name|vap
operator|->
name|va_flags
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|cache_attrs
parameter_list|(
name|vp
parameter_list|,
name|fuse_out
parameter_list|)
define|\
value|fuse_internal_attr_fat2vat(vnode_mount(vp),&(fuse_out)->attr,	\ 	    VTOVA(vp));
end_define

begin_comment
comment|/* fsync */
end_comment

begin_function_decl
name|int
name|fuse_internal_fsync
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|,
name|struct
name|fuse_filehandle
modifier|*
name|fufh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fuse_internal_fsync_callback
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|tick
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* readdir */
end_comment

begin_struct
struct|struct
name|pseudo_dirent
block|{
name|uint32_t
name|d_namlen
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|fuse_internal_readdir
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|,
name|struct
name|fuse_filehandle
modifier|*
name|fufh
parameter_list|,
name|struct
name|fuse_iov
modifier|*
name|cookediov
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fuse_internal_readdir_processdata
parameter_list|(
name|struct
name|uio
modifier|*
name|uio
parameter_list|,
name|size_t
name|reqsize
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|bufsize
parameter_list|,
name|void
modifier|*
name|param
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* remove */
end_comment

begin_function_decl
name|int
name|fuse_internal_remove
parameter_list|(
name|struct
name|vnode
modifier|*
name|dvp
parameter_list|,
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|struct
name|componentname
modifier|*
name|cnp
parameter_list|,
name|enum
name|fuse_opcode
name|op
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* rename */
end_comment

begin_function_decl
name|int
name|fuse_internal_rename
parameter_list|(
name|struct
name|vnode
modifier|*
name|fdvp
parameter_list|,
name|struct
name|componentname
modifier|*
name|fcnp
parameter_list|,
name|struct
name|vnode
modifier|*
name|tdvp
parameter_list|,
name|struct
name|componentname
modifier|*
name|tcnp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* revoke */
end_comment

begin_function_decl
name|void
name|fuse_internal_vnode_disappear
parameter_list|(
name|struct
name|vnode
modifier|*
name|vp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* strategy */
end_comment

begin_comment
comment|/* entity creation */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|fuse_internal_checkentry
parameter_list|(
name|struct
name|fuse_entry_out
modifier|*
name|feo
parameter_list|,
name|enum
name|vtype
name|vtyp
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_INTERNAL
argument_list|,
literal|"feo=%p, vtype=%d\n"
argument_list|,
name|feo
argument_list|,
name|vtyp
argument_list|)
expr_stmt|;
if|if
condition|(
name|vtyp
operator|!=
name|IFTOVT
argument_list|(
name|feo
operator|->
name|attr
operator|.
name|mode
argument_list|)
condition|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_INTERNAL
argument_list|,
literal|"EINVAL -- %x != %x\n"
argument_list|,
name|vtyp
argument_list|,
name|IFTOVT
argument_list|(
name|feo
operator|->
name|attr
operator|.
name|mode
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EINVAL
return|;
block|}
if|if
condition|(
name|feo
operator|->
name|nodeid
operator|==
name|FUSE_NULL_ID
condition|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_INTERNAL
argument_list|,
literal|"EINVAL -- feo->nodeid is NULL\n"
argument_list|)
expr_stmt|;
return|return
name|EINVAL
return|;
block|}
if|if
condition|(
name|feo
operator|->
name|nodeid
operator|==
name|FUSE_ROOT_ID
condition|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_INTERNAL
argument_list|,
literal|"EINVAL -- feo->nodeid is FUSE_ROOT_ID\n"
argument_list|)
expr_stmt|;
return|return
name|EINVAL
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function_decl
name|int
name|fuse_internal_newentry
parameter_list|(
name|struct
name|vnode
modifier|*
name|dvp
parameter_list|,
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
parameter_list|,
name|struct
name|componentname
modifier|*
name|cnp
parameter_list|,
name|enum
name|fuse_opcode
name|op
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|bufsize
parameter_list|,
name|enum
name|vtype
name|vtyp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fuse_internal_newentry_makerequest
parameter_list|(
name|struct
name|mount
modifier|*
name|mp
parameter_list|,
name|uint64_t
name|dnid
parameter_list|,
name|struct
name|componentname
modifier|*
name|cnp
parameter_list|,
name|enum
name|fuse_opcode
name|op
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|bufsize
parameter_list|,
name|struct
name|fuse_dispatcher
modifier|*
name|fdip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fuse_internal_newentry_core
parameter_list|(
name|struct
name|vnode
modifier|*
name|dvp
parameter_list|,
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
parameter_list|,
name|struct
name|componentname
modifier|*
name|cnp
parameter_list|,
name|enum
name|vtype
name|vtyp
parameter_list|,
name|struct
name|fuse_dispatcher
modifier|*
name|fdip
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* entity destruction */
end_comment

begin_function_decl
name|int
name|fuse_internal_forget_callback
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|tick
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fuse_internal_forget_send
parameter_list|(
name|struct
name|mount
modifier|*
name|mp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|,
name|uint64_t
name|nodeid
parameter_list|,
name|uint64_t
name|nlookup
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* fuse start/stop */
end_comment

begin_function_decl
name|int
name|fuse_internal_init_callback
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|tick
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fuse_internal_send_init
parameter_list|(
name|struct
name|fuse_data
modifier|*
name|data
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _FUSE_INTERNAL_H_ */
end_comment

end_unit

