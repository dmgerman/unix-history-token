begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2007-2009 Google Inc. and Amit Singh  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *   * * Redistributions of source code must retain the above copyright  *   notice, this list of conditions and the following disclaimer.  * * Redistributions in binary form must reproduce the above  *   copyright notice, this list of conditions and the following disclaimer  *   in the documentation and/or other materials provided with the  *   distribution.  * * Neither the name of Google Inc. nor the names of its  *   contributors may be used to endorse or promote products derived from  *   this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   * Copyright (C) 2005 Csaba Henk.  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *   * THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_FUSE_IPC_H_
end_ifndef

begin_define
define|#
directive|define
name|_FUSE_IPC_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/refcount.h>
end_include

begin_struct
struct|struct
name|fuse_iov
block|{
name|void
modifier|*
name|base
decl_stmt|;
name|size_t
name|len
decl_stmt|;
name|size_t
name|allocated_size
decl_stmt|;
name|int
name|credit
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|fiov_init
parameter_list|(
name|struct
name|fuse_iov
modifier|*
name|fiov
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fiov_teardown
parameter_list|(
name|struct
name|fuse_iov
modifier|*
name|fiov
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fiov_refresh
parameter_list|(
name|struct
name|fuse_iov
modifier|*
name|fiov
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fiov_adjust
parameter_list|(
name|struct
name|fuse_iov
modifier|*
name|fiov
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|FUSE_DIMALLOC
parameter_list|(
name|fiov
parameter_list|,
name|spc1
parameter_list|,
name|spc2
parameter_list|,
name|amnt
parameter_list|)
define|\
value|do {                                                   \     fiov_adjust(fiov, (sizeof(*(spc1)) + (amnt)));     \     (spc1) = (fiov)->base;                             \     (spc2) = (char *)(fiov)->base + (sizeof(*(spc1))); \ } while (0)
end_define

begin_define
define|#
directive|define
name|FU_AT_LEAST
parameter_list|(
name|siz
parameter_list|)
value|max((siz), 160)
end_define

begin_define
define|#
directive|define
name|FUSE_ASSERT_AW_DONE
parameter_list|(
name|ftick
parameter_list|)
define|\
value|KASSERT((ftick)->tk_aw_link.tqe_next == NULL&&                     \         (ftick)->tk_aw_link.tqe_prev == NULL,                           \         ("FUSE: ticket still on answer delivery list %p", (ftick)))     \  #define FUSE_ASSERT_MS_DONE(ftick)                                      \     KASSERT((ftick)->tk_ms_link.stqe_next == NULL,                      \         ("FUSE: ticket still on message list %p", (ftick)))
end_define

begin_struct_decl
struct_decl|struct
name|fuse_ticket
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|fuse_data
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|int
name|fuse_handler_t
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|fuse_ticket
block|{
comment|/* fields giving the identity of the ticket */
name|uint64_t
name|tk_unique
decl_stmt|;
name|struct
name|fuse_data
modifier|*
name|tk_data
decl_stmt|;
name|int
name|tk_flag
decl_stmt|;
name|u_int
name|tk_refcount
decl_stmt|;
comment|/* fields for initiating an upgoing message */
name|struct
name|fuse_iov
name|tk_ms_fiov
decl_stmt|;
name|void
modifier|*
name|tk_ms_bufdata
decl_stmt|;
name|size_t
name|tk_ms_bufsize
decl_stmt|;
enum|enum
block|{
name|FT_M_FIOV
block|,
name|FT_M_BUF
block|}
name|tk_ms_type
enum|;
name|STAILQ_ENTRY
argument_list|(
argument|fuse_ticket
argument_list|)
name|tk_ms_link
expr_stmt|;
comment|/* fields for handling answers coming from userspace */
name|struct
name|fuse_iov
name|tk_aw_fiov
decl_stmt|;
name|void
modifier|*
name|tk_aw_bufdata
decl_stmt|;
name|size_t
name|tk_aw_bufsize
decl_stmt|;
enum|enum
block|{
name|FT_A_FIOV
block|,
name|FT_A_BUF
block|}
name|tk_aw_type
enum|;
name|struct
name|fuse_out_header
name|tk_aw_ohead
decl_stmt|;
name|int
name|tk_aw_errno
decl_stmt|;
name|struct
name|mtx
name|tk_aw_mtx
decl_stmt|;
name|fuse_handler_t
modifier|*
name|tk_aw_handler
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|fuse_ticket
argument_list|)
name|tk_aw_link
expr_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|FT_ANSW
value|0x01
end_define

begin_comment
comment|/* request of ticket has already been answered */
end_comment

begin_define
define|#
directive|define
name|FT_DIRTY
value|0x04
end_define

begin_comment
comment|/* ticket has been used */
end_comment

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|fuse_iov
operator|*
name|fticket_resp
argument_list|(
argument|struct fuse_ticket *ftick
argument_list|)
block|{
return|return
operator|(
operator|&
name|ftick
operator|->
name|tk_aw_fiov
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|__inline__
name|int
name|fticket_answered
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"-> ftick=%p\n"
argument_list|,
name|ftick
argument_list|)
expr_stmt|;
name|mtx_assert
argument_list|(
operator|&
name|ftick
operator|->
name|tk_aw_mtx
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
return|return
operator|(
name|ftick
operator|->
name|tk_flag
operator|&
name|FT_ANSW
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|fticket_set_answered
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"-> ftick=%p\n"
argument_list|,
name|ftick
argument_list|)
expr_stmt|;
name|mtx_assert
argument_list|(
operator|&
name|ftick
operator|->
name|tk_aw_mtx
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|ftick
operator|->
name|tk_flag
operator||=
name|FT_ANSW
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|enum
name|fuse_opcode
name|fticket_opcode
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"-> ftick=%p\n"
argument_list|,
name|ftick
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
operator|(
expr|struct
name|fuse_in_header
operator|*
operator|)
operator|(
name|ftick
operator|->
name|tk_ms_fiov
operator|.
name|base
operator|)
operator|)
operator|->
name|opcode
operator|)
return|;
block|}
end_function

begin_function_decl
name|int
name|fticket_pull
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|,
name|struct
name|uio
modifier|*
name|uio
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
name|mountpri
block|{
name|FM_NOMOUNTED
block|,
name|FM_PRIMARY
block|,
name|FM_SECONDARY
block|}
enum|;
end_enum

begin_comment
comment|/*  * The data representing a FUSE session.  */
end_comment

begin_struct
struct|struct
name|fuse_data
block|{
name|struct
name|cdev
modifier|*
name|fdev
decl_stmt|;
name|struct
name|mount
modifier|*
name|mp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|vroot
decl_stmt|;
name|struct
name|ucred
modifier|*
name|daemoncred
decl_stmt|;
name|int
name|dataflags
decl_stmt|;
name|int
name|ref
decl_stmt|;
name|struct
name|mtx
name|ms_mtx
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|fuse_ticket
argument_list|)
name|ms_head
expr_stmt|;
name|struct
name|mtx
name|aw_mtx
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|fuse_ticket
argument_list|)
name|aw_head
expr_stmt|;
name|u_long
name|ticketer
decl_stmt|;
name|struct
name|sx
name|rename_lock
decl_stmt|;
name|uint32_t
name|fuse_libabi_major
decl_stmt|;
name|uint32_t
name|fuse_libabi_minor
decl_stmt|;
name|uint32_t
name|max_write
decl_stmt|;
name|uint32_t
name|max_read
decl_stmt|;
name|uint32_t
name|subtype
decl_stmt|;
name|char
name|volname
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|struct
name|selinfo
name|ks_rsel
decl_stmt|;
name|int
name|daemon_timeout
decl_stmt|;
name|uint64_t
name|notimpl
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|FSESS_DEAD
value|0x0001
end_define

begin_comment
comment|/* session is to be closed */
end_comment

begin_define
define|#
directive|define
name|FSESS_UNUSED0
value|0x0002
end_define

begin_comment
comment|/* unused */
end_comment

begin_define
define|#
directive|define
name|FSESS_INITED
value|0x0004
end_define

begin_comment
comment|/* session has been inited */
end_comment

begin_define
define|#
directive|define
name|FSESS_DAEMON_CAN_SPY
value|0x0010
end_define

begin_comment
comment|/* let non-owners access this fs */
end_comment

begin_comment
comment|/* (and being observed by the daemon) */
end_comment

begin_define
define|#
directive|define
name|FSESS_PUSH_SYMLINKS_IN
value|0x0020
end_define

begin_comment
comment|/* prefix absolute symlinks with mp */
end_comment

begin_define
define|#
directive|define
name|FSESS_DEFAULT_PERMISSIONS
value|0x0040
end_define

begin_comment
comment|/* kernel does permission checking */
end_comment

begin_define
define|#
directive|define
name|FSESS_NO_ATTRCACHE
value|0x0080
end_define

begin_comment
comment|/* no attribute caching */
end_comment

begin_define
define|#
directive|define
name|FSESS_NO_READAHEAD
value|0x0100
end_define

begin_comment
comment|/* no readaheads */
end_comment

begin_define
define|#
directive|define
name|FSESS_NO_DATACACHE
value|0x0200
end_define

begin_comment
comment|/* disable buffer cache */
end_comment

begin_define
define|#
directive|define
name|FSESS_NO_NAMECACHE
value|0x0400
end_define

begin_comment
comment|/* disable name cache */
end_comment

begin_define
define|#
directive|define
name|FSESS_NO_MMAP
value|0x0800
end_define

begin_comment
comment|/* disable mmap */
end_comment

begin_define
define|#
directive|define
name|FSESS_BROKENIO
value|0x1000
end_define

begin_comment
comment|/* fix broken io */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|fuse_data_cache_enable
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fuse_data_cache_invalidate
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fuse_mmap_enable
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fuse_sync_resize
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fuse_fix_broken_io
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|fuse_data
operator|*
name|fuse_get_mpdata
argument_list|(
argument|struct mount *mp
argument_list|)
block|{
return|return
name|mp
operator|->
name|mnt_data
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|__inline
name|int
name|fsess_isimpl
parameter_list|(
name|struct
name|mount
modifier|*
name|mp
parameter_list|,
name|int
name|opcode
parameter_list|)
block|{
name|struct
name|fuse_data
modifier|*
name|data
init|=
name|fuse_get_mpdata
argument_list|(
name|mp
argument_list|)
decl_stmt|;
return|return
operator|(
name|data
operator|->
name|notimpl
operator|&
operator|(
literal|1ULL
operator|<<
name|opcode
operator|)
operator|)
operator|==
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|fsess_set_notimpl
parameter_list|(
name|struct
name|mount
modifier|*
name|mp
parameter_list|,
name|int
name|opcode
parameter_list|)
block|{
name|struct
name|fuse_data
modifier|*
name|data
init|=
name|fuse_get_mpdata
argument_list|(
name|mp
argument_list|)
decl_stmt|;
name|data
operator|->
name|notimpl
operator||=
operator|(
literal|1ULL
operator|<<
name|opcode
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|fsess_opt_datacache
parameter_list|(
name|struct
name|mount
modifier|*
name|mp
parameter_list|)
block|{
name|struct
name|fuse_data
modifier|*
name|data
init|=
name|fuse_get_mpdata
argument_list|(
name|mp
argument_list|)
decl_stmt|;
return|return
operator|(
name|fuse_data_cache_enable
operator|||
operator|(
name|data
operator|->
name|dataflags
operator|&
name|FSESS_NO_DATACACHE
operator|)
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|fsess_opt_mmap
parameter_list|(
name|struct
name|mount
modifier|*
name|mp
parameter_list|)
block|{
name|struct
name|fuse_data
modifier|*
name|data
init|=
name|fuse_get_mpdata
argument_list|(
name|mp
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fuse_mmap_enable
operator|&&
name|fuse_data_cache_enable
operator|)
condition|)
return|return
literal|0
return|;
return|return
operator|(
operator|(
name|data
operator|->
name|dataflags
operator|&
operator|(
name|FSESS_NO_DATACACHE
operator||
name|FSESS_NO_MMAP
operator|)
operator|)
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|fsess_opt_brokenio
parameter_list|(
name|struct
name|mount
modifier|*
name|mp
parameter_list|)
block|{
name|struct
name|fuse_data
modifier|*
name|data
init|=
name|fuse_get_mpdata
argument_list|(
name|mp
argument_list|)
decl_stmt|;
return|return
operator|(
name|fuse_fix_broken_io
operator|||
operator|(
name|data
operator|->
name|dataflags
operator|&
name|FSESS_BROKENIO
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|fuse_ms_push
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"ftick=%p refcount=%d\n"
argument_list|,
name|ftick
argument_list|,
name|ftick
operator|->
name|tk_refcount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mtx_assert
argument_list|(
operator|&
name|ftick
operator|->
name|tk_data
operator|->
name|ms_mtx
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|refcount_acquire
argument_list|(
operator|&
name|ftick
operator|->
name|tk_refcount
argument_list|)
expr_stmt|;
name|STAILQ_INSERT_TAIL
argument_list|(
operator|&
name|ftick
operator|->
name|tk_data
operator|->
name|ms_head
argument_list|,
name|ftick
argument_list|,
name|tk_ms_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|fuse_ticket
operator|*
name|fuse_ms_pop
argument_list|(
argument|struct fuse_data *data
argument_list|)
block|{     struct
name|fuse_ticket
operator|*
name|ftick
operator|=
name|NULL
block|;
name|mtx_assert
argument_list|(
operator|&
name|data
operator|->
name|ms_mtx
argument_list|,
name|MA_OWNED
argument_list|)
block|;
if|if
condition|(
operator|(
name|ftick
operator|=
name|STAILQ_FIRST
argument_list|(
operator|&
name|data
operator|->
name|ms_head
argument_list|)
operator|)
condition|)
block|{
name|STAILQ_REMOVE_HEAD
argument_list|(
operator|&
name|data
operator|->
name|ms_head
argument_list|,
name|tk_ms_link
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|INVARIANTS
name|ftick
operator|->
name|tk_ms_link
operator|.
name|stqe_next
operator|=
name|NULL
expr_stmt|;
endif|#
directive|endif
block|}
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"ftick=%p refcount=%d\n"
argument_list|,
name|ftick
argument_list|,
name|ftick
condition|?
name|ftick
operator|->
name|tk_refcount
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|ftick
return|;
end_return

begin_function
unit|}  static
name|__inline__
name|void
name|fuse_aw_push
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"ftick=%p refcount=%d\n"
argument_list|,
name|ftick
argument_list|,
name|ftick
operator|->
name|tk_refcount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mtx_assert
argument_list|(
operator|&
name|ftick
operator|->
name|tk_data
operator|->
name|aw_mtx
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|refcount_acquire
argument_list|(
operator|&
name|ftick
operator|->
name|tk_refcount
argument_list|)
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|ftick
operator|->
name|tk_data
operator|->
name|aw_head
argument_list|,
name|ftick
argument_list|,
name|tk_aw_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|fuse_aw_remove
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"ftick=%p refcount=%d\n"
argument_list|,
name|ftick
argument_list|,
name|ftick
operator|->
name|tk_refcount
argument_list|)
expr_stmt|;
name|mtx_assert
argument_list|(
operator|&
name|ftick
operator|->
name|tk_data
operator|->
name|aw_mtx
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|ftick
operator|->
name|tk_data
operator|->
name|aw_head
argument_list|,
name|ftick
argument_list|,
name|tk_aw_link
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|INVARIANTS
name|ftick
operator|->
name|tk_aw_link
operator|.
name|tqe_next
operator|=
name|NULL
expr_stmt|;
name|ftick
operator|->
name|tk_aw_link
operator|.
name|tqe_prev
operator|=
name|NULL
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|fuse_ticket
operator|*
name|fuse_aw_pop
argument_list|(
argument|struct fuse_data *data
argument_list|)
block|{     struct
name|fuse_ticket
operator|*
name|ftick
operator|=
name|NULL
block|;
name|mtx_assert
argument_list|(
operator|&
name|data
operator|->
name|aw_mtx
argument_list|,
name|MA_OWNED
argument_list|)
block|;
if|if
condition|(
operator|(
name|ftick
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|data
operator|->
name|aw_head
argument_list|)
operator|)
condition|)
block|{
name|fuse_aw_remove
argument_list|(
name|ftick
argument_list|)
expr_stmt|;
block|}
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"ftick=%p refcount=%d\n"
argument_list|,
name|ftick
argument_list|,
name|ftick
condition|?
name|ftick
operator|->
name|tk_refcount
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|ftick
return|;
end_return

begin_function_decl
unit|}  struct
name|fuse_ticket
modifier|*
name|fuse_ticket_fetch
parameter_list|(
name|struct
name|fuse_data
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fuse_ticket_drop
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fuse_insert_callback
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|,
name|fuse_handler_t
modifier|*
name|handler
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fuse_insert_message
parameter_list|(
name|struct
name|fuse_ticket
modifier|*
name|ftick
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline__
name|int
name|fuse_libabi_geq
parameter_list|(
name|struct
name|fuse_data
modifier|*
name|data
parameter_list|,
name|uint32_t
name|abi_maj
parameter_list|,
name|uint32_t
name|abi_min
parameter_list|)
block|{
return|return
operator|(
name|data
operator|->
name|fuse_libabi_major
operator|>
name|abi_maj
operator|||
operator|(
name|data
operator|->
name|fuse_libabi_major
operator|==
name|abi_maj
operator|&&
name|data
operator|->
name|fuse_libabi_minor
operator|>=
name|abi_min
operator|)
operator|)
return|;
block|}
end_function

begin_function_decl
name|struct
name|fuse_data
modifier|*
name|fdata_alloc
parameter_list|(
name|struct
name|cdev
modifier|*
name|dev
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fdata_trydestroy
parameter_list|(
name|struct
name|fuse_data
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fdata_set_dead
parameter_list|(
name|struct
name|fuse_data
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline__
name|int
name|fdata_get_dead
parameter_list|(
name|struct
name|fuse_data
modifier|*
name|data
parameter_list|)
block|{
return|return
operator|(
name|data
operator|->
name|dataflags
operator|&
name|FSESS_DEAD
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|fuse_dispatcher
block|{
name|struct
name|fuse_ticket
modifier|*
name|tick
decl_stmt|;
name|struct
name|fuse_in_header
modifier|*
name|finh
decl_stmt|;
name|void
modifier|*
name|indata
decl_stmt|;
name|size_t
name|iosize
decl_stmt|;
name|uint64_t
name|nodeid
decl_stmt|;
name|int
name|answ_stat
decl_stmt|;
name|void
modifier|*
name|answ
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline__
name|void
name|fdisp_init
parameter_list|(
name|struct
name|fuse_dispatcher
modifier|*
name|fdisp
parameter_list|,
name|size_t
name|iosize
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"-> fdisp=%p, iosize=%zx\n"
argument_list|,
name|fdisp
argument_list|,
name|iosize
argument_list|)
expr_stmt|;
name|fdisp
operator|->
name|iosize
operator|=
name|iosize
expr_stmt|;
name|fdisp
operator|->
name|tick
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|fdisp_destroy
parameter_list|(
name|struct
name|fuse_dispatcher
modifier|*
name|fdisp
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"-> fdisp=%p, ftick=%p\n"
argument_list|,
name|fdisp
argument_list|,
name|fdisp
operator|->
name|tick
argument_list|)
expr_stmt|;
name|fuse_ticket_drop
argument_list|(
name|fdisp
operator|->
name|tick
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|INVARIANTS
name|fdisp
operator|->
name|tick
operator|=
name|NULL
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function_decl
name|void
name|fdisp_make
parameter_list|(
name|struct
name|fuse_dispatcher
modifier|*
name|fdip
parameter_list|,
name|enum
name|fuse_opcode
name|op
parameter_list|,
name|struct
name|mount
modifier|*
name|mp
parameter_list|,
name|uint64_t
name|nid
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fdisp_make_pid
parameter_list|(
name|struct
name|fuse_dispatcher
modifier|*
name|fdip
parameter_list|,
name|enum
name|fuse_opcode
name|op
parameter_list|,
name|struct
name|mount
modifier|*
name|mp
parameter_list|,
name|uint64_t
name|nid
parameter_list|,
name|pid_t
name|pid
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fdisp_make_vp
parameter_list|(
name|struct
name|fuse_dispatcher
modifier|*
name|fdip
parameter_list|,
name|enum
name|fuse_opcode
name|op
parameter_list|,
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fdisp_wait_answ
parameter_list|(
name|struct
name|fuse_dispatcher
modifier|*
name|fdip
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline__
name|int
name|fdisp_simple_putget_vp
parameter_list|(
name|struct
name|fuse_dispatcher
modifier|*
name|fdip
parameter_list|,
name|enum
name|fuse_opcode
name|op
parameter_list|,
name|struct
name|vnode
modifier|*
name|vp
parameter_list|,
name|struct
name|thread
modifier|*
name|td
parameter_list|,
name|struct
name|ucred
modifier|*
name|cred
parameter_list|)
block|{
name|DEBUGX
argument_list|(
name|FUSE_DEBUG_IPC
argument_list|,
literal|"-> fdip=%p, opcode=%d, vp=%p\n"
argument_list|,
name|fdip
argument_list|,
name|op
argument_list|,
name|vp
argument_list|)
expr_stmt|;
name|fdisp_make_vp
argument_list|(
name|fdip
argument_list|,
name|op
argument_list|,
name|vp
argument_list|,
name|td
argument_list|,
name|cred
argument_list|)
expr_stmt|;
return|return
name|fdisp_wait_answ
argument_list|(
name|fdip
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _FUSE_IPC_H_ */
end_comment

end_unit

