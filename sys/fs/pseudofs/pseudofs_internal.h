begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2001 Dag-Erling CoÃ¯dan SmÃ¸rgrav  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer  *    in this position and unchanged.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  *      $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PSEUDOFS_INTERNAL_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|_PSEUDOFS_INTERNAL_H_INCLUDED
end_define

begin_comment
comment|/*  * Sysctl subtree  */
end_comment

begin_expr_stmt
name|SYSCTL_DECL
argument_list|(
name|_vfs_pfs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * Vnode data  */
end_comment

begin_struct
struct|struct
name|pfs_vdata
block|{
name|struct
name|pfs_node
modifier|*
name|pvd_pn
decl_stmt|;
name|pid_t
name|pvd_pid
decl_stmt|;
name|struct
name|vnode
modifier|*
name|pvd_vnode
decl_stmt|;
name|struct
name|pfs_vdata
modifier|*
name|pvd_prev
decl_stmt|,
modifier|*
name|pvd_next
decl_stmt|;
name|int
name|pvd_dead
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Vnode cache  */
end_comment

begin_function_decl
name|void
name|pfs_vncache_load
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfs_vncache_unload
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfs_vncache_alloc
parameter_list|(
name|struct
name|mount
modifier|*
parameter_list|,
name|struct
name|vnode
modifier|*
modifier|*
parameter_list|,
name|struct
name|pfs_node
modifier|*
parameter_list|,
name|pid_t
name|pid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfs_vncache_free
parameter_list|(
name|struct
name|vnode
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * File number bitmap  */
end_comment

begin_function_decl
name|void
name|pfs_fileno_init
parameter_list|(
name|struct
name|pfs_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfs_fileno_uninit
parameter_list|(
name|struct
name|pfs_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfs_fileno_alloc
parameter_list|(
name|struct
name|pfs_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfs_fileno_free
parameter_list|(
name|struct
name|pfs_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Debugging  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|PSEUDOFS_TRACE
end_ifdef

begin_decl_stmt
specifier|extern
name|int
name|pfs_trace
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|PFS_TRACE
parameter_list|(
name|foo
parameter_list|)
define|\
value|do { \ 		if (pfs_trace) { \ 			printf("%s(): line %d: ", __func__, __LINE__); \ 			printf foo ; \ 			printf("\n"); \ 		} \ 	} while (0)
end_define

begin_define
define|#
directive|define
name|PFS_RETURN
parameter_list|(
name|err
parameter_list|)
define|\
value|do { \ 		if (pfs_trace) { \ 			printf("%s(): line %d: returning %d\n", \ 			    __func__, __LINE__, err); \ 		} \ 		return (err); \ 	} while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|PFS_TRACE
parameter_list|(
name|foo
parameter_list|)
define|\
value|do {
comment|/* nothing */
value|} while (0)
end_define

begin_define
define|#
directive|define
name|PFS_RETURN
parameter_list|(
name|err
parameter_list|)
define|\
value|return (err)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Inline helpers for locking  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|pfs_lock
parameter_list|(
name|struct
name|pfs_node
modifier|*
name|pn
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|pn
operator|->
name|pn_mutex
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|pfs_unlock
parameter_list|(
name|struct
name|pfs_node
modifier|*
name|pn
parameter_list|)
block|{
name|mtx_unlock
argument_list|(
operator|&
name|pn
operator|->
name|pn_mutex
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|pfs_assert_owned
parameter_list|(
name|struct
name|pfs_node
modifier|*
name|pn
parameter_list|)
block|{
name|mtx_assert
argument_list|(
operator|&
name|pn
operator|->
name|pn_mutex
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|pfs_assert_not_owned
parameter_list|(
name|struct
name|pfs_node
modifier|*
name|pn
parameter_list|)
block|{
name|mtx_assert
argument_list|(
operator|&
name|pn
operator|->
name|pn_mutex
argument_list|,
name|MA_NOTOWNED
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|pn_fill
parameter_list|(
name|PFS_FILL_ARGS
parameter_list|)
block|{
name|PFS_TRACE
argument_list|(
operator|(
literal|"%s"
operator|,
name|pn
operator|->
name|pn_name
operator|)
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|pn
operator|->
name|pn_fill
operator|!=
name|NULL
argument_list|,
operator|(
literal|"%s(): no callback"
operator|,
name|__func__
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
name|NULL
condition|)
block|{
name|PROC_LOCK_ASSERT
argument_list|(
name|p
argument_list|,
name|MA_NOTOWNED
argument_list|)
expr_stmt|;
name|PROC_ASSERT_HELD
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|pfs_assert_not_owned
argument_list|(
name|pn
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|pn
operator|->
name|pn_fill
call|)
argument_list|(
name|PFS_FILL_ARGNAMES
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|pn_attr
parameter_list|(
name|PFS_ATTR_ARGS
parameter_list|)
block|{
name|PFS_TRACE
argument_list|(
operator|(
literal|"%s"
operator|,
name|pn
operator|->
name|pn_name
operator|)
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|pn
operator|->
name|pn_attr
operator|!=
name|NULL
argument_list|,
operator|(
literal|"%s(): no callback"
operator|,
name|__func__
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
name|NULL
condition|)
name|PROC_LOCK_ASSERT
argument_list|(
name|p
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|pfs_assert_not_owned
argument_list|(
name|pn
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|pn
operator|->
name|pn_attr
call|)
argument_list|(
name|PFS_ATTR_ARGNAMES
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|pn_vis
parameter_list|(
name|PFS_VIS_ARGS
parameter_list|)
block|{
name|PFS_TRACE
argument_list|(
operator|(
literal|"%s"
operator|,
name|pn
operator|->
name|pn_name
operator|)
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|pn
operator|->
name|pn_vis
operator|!=
name|NULL
argument_list|,
operator|(
literal|"%s(): no callback"
operator|,
name|__func__
operator|)
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|p
operator|!=
name|NULL
argument_list|,
operator|(
literal|"%s(): no process"
operator|,
name|__func__
operator|)
argument_list|)
expr_stmt|;
name|PROC_LOCK_ASSERT
argument_list|(
name|p
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|pfs_assert_not_owned
argument_list|(
name|pn
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|pn
operator|->
name|pn_vis
call|)
argument_list|(
name|PFS_VIS_ARGNAMES
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|pn_ioctl
parameter_list|(
name|PFS_IOCTL_ARGS
parameter_list|)
block|{
name|PFS_TRACE
argument_list|(
operator|(
literal|"%s"
operator|,
name|pn
operator|->
name|pn_name
operator|)
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|pn
operator|->
name|pn_ioctl
operator|!=
name|NULL
argument_list|,
operator|(
literal|"%s(): no callback"
operator|,
name|__func__
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
name|NULL
condition|)
name|PROC_LOCK_ASSERT
argument_list|(
name|p
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|pfs_assert_not_owned
argument_list|(
name|pn
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|pn
operator|->
name|pn_ioctl
call|)
argument_list|(
name|PFS_IOCTL_ARGNAMES
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|pn_getextattr
parameter_list|(
name|PFS_GETEXTATTR_ARGS
parameter_list|)
block|{
name|PFS_TRACE
argument_list|(
operator|(
literal|"%s"
operator|,
name|pn
operator|->
name|pn_name
operator|)
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|pn
operator|->
name|pn_getextattr
operator|!=
name|NULL
argument_list|,
operator|(
literal|"%s(): no callback"
operator|,
name|__func__
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
name|NULL
condition|)
name|PROC_LOCK_ASSERT
argument_list|(
name|p
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|pfs_assert_not_owned
argument_list|(
name|pn
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|pn
operator|->
name|pn_getextattr
call|)
argument_list|(
name|PFS_GETEXTATTR_ARGNAMES
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|pn_close
parameter_list|(
name|PFS_CLOSE_ARGS
parameter_list|)
block|{
name|PFS_TRACE
argument_list|(
operator|(
literal|"%s"
operator|,
name|pn
operator|->
name|pn_name
operator|)
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|pn
operator|->
name|pn_close
operator|!=
name|NULL
argument_list|,
operator|(
literal|"%s(): no callback"
operator|,
name|__func__
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
name|NULL
condition|)
name|PROC_LOCK_ASSERT
argument_list|(
name|p
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|pfs_assert_not_owned
argument_list|(
name|pn
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|pn
operator|->
name|pn_close
call|)
argument_list|(
name|PFS_CLOSE_ARGNAMES
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|pn_destroy
parameter_list|(
name|PFS_DESTROY_ARGS
parameter_list|)
block|{
name|PFS_TRACE
argument_list|(
operator|(
literal|"%s"
operator|,
name|pn
operator|->
name|pn_name
operator|)
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|pn
operator|->
name|pn_destroy
operator|!=
name|NULL
argument_list|,
operator|(
literal|"%s(): no callback"
operator|,
name|__func__
operator|)
argument_list|)
expr_stmt|;
name|pfs_assert_not_owned
argument_list|(
name|pn
argument_list|)
expr_stmt|;
return|return
operator|(
call|(
name|pn
operator|->
name|pn_destroy
call|)
argument_list|(
name|PFS_DESTROY_ARGNAMES
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

