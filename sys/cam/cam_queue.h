begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * CAM request queue management definitions.  *  * Copyright (c) 1997 Justin T. Gibbs.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification, immediately at the beginning of the file.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CAM_CAM_QUEUE_H
end_ifndef

begin_define
define|#
directive|define
name|_CAM_CAM_QUEUE_H
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<cam/cam.h>
end_include

begin_comment
comment|/*  * This structure implements a heap based priority queue.  The queue  * assumes that the objects stored in it begin with a cam_qentry  * structure holding the priority information used to sort the objects.  * This structure is opaque to clients (outside of the XPT layer) to allow  * the implementation to change without affecting them.  */
end_comment

begin_struct
struct|struct
name|camq
block|{
name|cam_pinfo
modifier|*
modifier|*
name|queue_array
decl_stmt|;
name|int
name|array_size
decl_stmt|;
name|int
name|entries
decl_stmt|;
name|u_int32_t
name|generation
decl_stmt|;
name|u_int32_t
name|qfrozen_cnt
index|[
name|CAM_RL_VALUES
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|TAILQ_HEAD
argument_list|(
name|ccb_hdr_tailq
argument_list|,
name|ccb_hdr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|LIST_HEAD
argument_list|(
name|ccb_hdr_list
argument_list|,
name|ccb_hdr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SLIST_HEAD
argument_list|(
name|ccb_hdr_slist
argument_list|,
name|ccb_hdr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|cam_ccbq
block|{
name|struct
name|camq
name|queue
decl_stmt|;
name|int
name|devq_openings
decl_stmt|;
name|int
name|dev_openings
decl_stmt|;
name|int
name|dev_active
decl_stmt|;
name|int
name|held
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|cam_ed
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|cam_devq
block|{
name|struct
name|camq
name|alloc_queue
decl_stmt|;
name|struct
name|camq
name|send_queue
decl_stmt|;
name|struct
name|cam_ed
modifier|*
name|active_dev
decl_stmt|;
name|int
name|alloc_openings
decl_stmt|;
name|int
name|alloc_active
decl_stmt|;
name|int
name|send_openings
decl_stmt|;
name|int
name|send_active
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|cam_devq
modifier|*
name|cam_devq_alloc
parameter_list|(
name|int
name|devices
parameter_list|,
name|int
name|openings
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_devq_init
parameter_list|(
name|struct
name|cam_devq
modifier|*
name|devq
parameter_list|,
name|int
name|devices
parameter_list|,
name|int
name|openings
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_devq_free
parameter_list|(
name|struct
name|cam_devq
modifier|*
name|devq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int32_t
name|cam_devq_resize
parameter_list|(
name|struct
name|cam_devq
modifier|*
name|camq
parameter_list|,
name|int
name|openings
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Allocate a cam_ccb_queue structure and initialize it.  */
end_comment

begin_function_decl
name|struct
name|cam_ccbq
modifier|*
name|cam_ccbq_alloc
parameter_list|(
name|int
name|openings
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int32_t
name|cam_ccbq_resize
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|int
name|devices
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_ccbq_init
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|int
name|openings
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_ccbq_free
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_ccbq_fini
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Allocate and initialize a cam_queue structure.  */
end_comment

begin_function_decl
name|struct
name|camq
modifier|*
name|camq_alloc
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Resize a cam queue  */
end_comment

begin_function_decl
name|u_int32_t
name|camq_resize
parameter_list|(
name|struct
name|camq
modifier|*
name|queue
parameter_list|,
name|int
name|new_size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*   * Initialize a camq structure.  Return 0 on success, 1 on failure.  */
end_comment

begin_function_decl
name|int
name|camq_init
parameter_list|(
name|struct
name|camq
modifier|*
name|camq
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Free a cam_queue structure.  This should only be called if a controller  * driver failes somehow during its attach routine or is unloaded and has  * obtained a cam_queue structure.  */
end_comment

begin_function_decl
name|void
name|camq_free
parameter_list|(
name|struct
name|camq
modifier|*
name|queue
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Finialize any internal storage or state of a cam_queue.  */
end_comment

begin_function_decl
name|void
name|camq_fini
parameter_list|(
name|struct
name|camq
modifier|*
name|queue
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * cam_queue_insert: Given a CAM queue with at least one open spot,  * insert the new entry maintaining order.  */
end_comment

begin_function_decl
name|void
name|camq_insert
parameter_list|(
name|struct
name|camq
modifier|*
name|queue
parameter_list|,
name|cam_pinfo
modifier|*
name|new_entry
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * camq_remove: Remove and arbitrary entry from the queue maintaining  * queue order.  */
end_comment

begin_function_decl
name|cam_pinfo
modifier|*
name|camq_remove
parameter_list|(
name|struct
name|camq
modifier|*
name|queue
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|CAMQ_HEAD
value|1
end_define

begin_comment
comment|/* Head of queue index */
end_comment

begin_comment
comment|/* Index the first element in the heap */
end_comment

begin_define
define|#
directive|define
name|CAMQ_GET_HEAD
parameter_list|(
name|camq
parameter_list|)
value|((camq)->queue_array[CAMQ_HEAD])
end_define

begin_comment
comment|/* Get the first element priority. */
end_comment

begin_define
define|#
directive|define
name|CAMQ_GET_PRIO
parameter_list|(
name|camq
parameter_list|)
value|(((camq)->entries> 0) ?			\ 			    ((camq)->queue_array[CAMQ_HEAD]->priority) : 0)
end_define

begin_comment
comment|/*  * camq_change_priority: Raise or lower the priority of an entry  * maintaining queue order.  */
end_comment

begin_function_decl
name|void
name|camq_change_priority
parameter_list|(
name|struct
name|camq
modifier|*
name|queue
parameter_list|,
name|int
name|index
parameter_list|,
name|u_int32_t
name|new_priority
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|cam_ccbq_pending_ccb_count
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|cam_ccbq_take_opening
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|cam_ccbq_insert_ccb
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|union
name|ccb
modifier|*
name|new_ccb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|cam_ccbq_remove_ccb
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|static
name|__inline
expr|union
name|ccb
operator|*
name|cam_ccbq_peek_ccb
argument_list|(
argument|struct cam_ccbq *ccbq
argument_list|,
argument|int index
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
specifier|static
name|__inline
name|void
name|cam_ccbq_send_ccb
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|queue
parameter_list|,
name|union
name|ccb
modifier|*
name|send_ccb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|cam_ccbq_ccb_done
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|union
name|ccb
modifier|*
name|done_ccb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|cam_ccbq_release_opening
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|cam_ccbq_pending_ccb_count
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|)
block|{
return|return
operator|(
name|ccbq
operator|->
name|queue
operator|.
name|entries
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|cam_ccbq_take_opening
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|)
block|{
name|ccbq
operator|->
name|devq_openings
operator|--
expr_stmt|;
name|ccbq
operator|->
name|held
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|cam_ccbq_insert_ccb
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|union
name|ccb
modifier|*
name|new_ccb
parameter_list|)
block|{
name|ccbq
operator|->
name|held
operator|--
expr_stmt|;
name|camq_insert
argument_list|(
operator|&
name|ccbq
operator|->
name|queue
argument_list|,
operator|&
name|new_ccb
operator|->
name|ccb_h
operator|.
name|pinfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|ccbq
operator|->
name|queue
operator|.
name|qfrozen_cnt
index|[
name|CAM_PRIORITY_TO_RL
argument_list|(
name|new_ccb
operator|->
name|ccb_h
operator|.
name|pinfo
operator|.
name|priority
argument_list|)
index|]
operator|>
literal|0
condition|)
block|{
name|ccbq
operator|->
name|devq_openings
operator|++
expr_stmt|;
name|ccbq
operator|->
name|held
operator|++
expr_stmt|;
return|return
operator|(
literal|1
operator|)
return|;
block|}
else|else
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|cam_ccbq_remove_ccb
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
block|{
name|camq_remove
argument_list|(
operator|&
name|ccbq
operator|->
name|queue
argument_list|,
name|ccb
operator|->
name|ccb_h
operator|.
name|pinfo
operator|.
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|ccbq
operator|->
name|queue
operator|.
name|qfrozen_cnt
index|[
name|CAM_PRIORITY_TO_RL
argument_list|(
name|ccb
operator|->
name|ccb_h
operator|.
name|pinfo
operator|.
name|priority
argument_list|)
index|]
operator|>
literal|0
condition|)
block|{
name|ccbq
operator|->
name|devq_openings
operator|--
expr_stmt|;
name|ccbq
operator|->
name|held
operator|--
expr_stmt|;
return|return
operator|(
literal|1
operator|)
return|;
block|}
else|else
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|union
name|ccb
operator|*
name|cam_ccbq_peek_ccb
argument_list|(
argument|struct cam_ccbq *ccbq
argument_list|,
argument|int index
argument_list|)
block|{
return|return
operator|(
operator|(
expr|union
name|ccb
operator|*
operator|)
name|ccbq
operator|->
name|queue
operator|.
name|queue_array
index|[
name|index
index|]
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|__inline
name|void
name|cam_ccbq_send_ccb
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|union
name|ccb
modifier|*
name|send_ccb
parameter_list|)
block|{
name|send_ccb
operator|->
name|ccb_h
operator|.
name|pinfo
operator|.
name|index
operator|=
name|CAM_ACTIVE_INDEX
expr_stmt|;
name|ccbq
operator|->
name|dev_active
operator|++
expr_stmt|;
name|ccbq
operator|->
name|dev_openings
operator|--
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|cam_ccbq_ccb_done
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|union
name|ccb
modifier|*
name|done_ccb
parameter_list|)
block|{
name|ccbq
operator|->
name|dev_active
operator|--
expr_stmt|;
name|ccbq
operator|->
name|dev_openings
operator|++
expr_stmt|;
name|ccbq
operator|->
name|held
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|cam_ccbq_release_opening
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|)
block|{
name|ccbq
operator|->
name|held
operator|--
expr_stmt|;
name|ccbq
operator|->
name|devq_openings
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|cam_ccbq_freeze
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|cam_rl
name|rl
parameter_list|,
name|u_int32_t
name|cnt
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
name|frozen
init|=
literal|0
decl_stmt|;
name|cam_rl
name|p
decl_stmt|,
name|n
decl_stmt|;
comment|/* Find pevious run level. */
for|for
control|(
name|p
operator|=
literal|0
init|;
name|p
operator|<
name|CAM_RL_VALUES
operator|&&
name|ccbq
operator|->
name|queue
operator|.
name|qfrozen_cnt
index|[
name|p
index|]
operator|==
literal|0
condition|;
name|p
operator|++
control|)
empty_stmt|;
comment|/* Find new run level. */
name|n
operator|=
name|min
argument_list|(
name|rl
argument_list|,
name|p
argument_list|)
expr_stmt|;
comment|/* Apply new run level. */
for|for
control|(
name|i
operator|=
name|rl
init|;
name|i
operator|<
name|CAM_RL_VALUES
condition|;
name|i
operator|++
control|)
name|ccbq
operator|->
name|queue
operator|.
name|qfrozen_cnt
index|[
name|i
index|]
operator|+=
name|cnt
expr_stmt|;
comment|/* Update ccbq statistics. */
if|if
condition|(
name|n
operator|==
name|p
condition|)
return|return
operator|(
literal|0
operator|)
return|;
for|for
control|(
name|i
operator|=
name|CAMQ_HEAD
init|;
name|i
operator|<=
name|ccbq
operator|->
name|queue
operator|.
name|entries
condition|;
name|i
operator|++
control|)
block|{
name|cam_rl
name|rrl
init|=
name|CAM_PRIORITY_TO_RL
argument_list|(
name|ccbq
operator|->
name|queue
operator|.
name|queue_array
index|[
name|i
index|]
operator|->
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|rrl
operator|<
name|n
condition|)
continue|continue;
if|if
condition|(
name|rrl
operator|>=
name|p
condition|)
break|break;
name|ccbq
operator|->
name|devq_openings
operator|++
expr_stmt|;
name|ccbq
operator|->
name|held
operator|++
expr_stmt|;
name|frozen
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|frozen
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|cam_ccbq_release
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|cam_rl
name|rl
parameter_list|,
name|u_int32_t
name|cnt
parameter_list|)
block|{
name|int
name|i
decl_stmt|,
name|released
init|=
literal|0
decl_stmt|;
name|cam_rl
name|p
decl_stmt|,
name|n
decl_stmt|;
comment|/* Apply new run level. */
for|for
control|(
name|i
operator|=
name|rl
init|;
name|i
operator|<
name|CAM_RL_VALUES
condition|;
name|i
operator|++
control|)
name|ccbq
operator|->
name|queue
operator|.
name|qfrozen_cnt
index|[
name|i
index|]
operator|-=
name|cnt
expr_stmt|;
comment|/* Find new run level. */
for|for
control|(
name|n
operator|=
literal|0
init|;
name|n
operator|<
name|CAM_RL_VALUES
operator|&&
name|ccbq
operator|->
name|queue
operator|.
name|qfrozen_cnt
index|[
name|n
index|]
operator|==
literal|0
condition|;
name|n
operator|++
control|)
empty_stmt|;
comment|/* Find previous run level. */
name|p
operator|=
name|min
argument_list|(
name|rl
argument_list|,
name|n
argument_list|)
expr_stmt|;
comment|/* Update ccbq statistics. */
if|if
condition|(
name|n
operator|==
name|p
condition|)
return|return
operator|(
literal|0
operator|)
return|;
for|for
control|(
name|i
operator|=
name|CAMQ_HEAD
init|;
name|i
operator|<=
name|ccbq
operator|->
name|queue
operator|.
name|entries
condition|;
name|i
operator|++
control|)
block|{
name|cam_rl
name|rrl
init|=
name|CAM_PRIORITY_TO_RL
argument_list|(
name|ccbq
operator|->
name|queue
operator|.
name|queue_array
index|[
name|i
index|]
operator|->
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|rrl
operator|<
name|p
condition|)
continue|continue;
if|if
condition|(
name|rrl
operator|>=
name|n
condition|)
break|break;
name|ccbq
operator|->
name|devq_openings
operator|--
expr_stmt|;
name|ccbq
operator|->
name|held
operator|--
expr_stmt|;
name|released
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|released
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int32_t
name|cam_ccbq_frozen
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|,
name|cam_rl
name|rl
parameter_list|)
block|{
return|return
operator|(
name|ccbq
operator|->
name|queue
operator|.
name|qfrozen_cnt
index|[
name|rl
index|]
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int32_t
name|cam_ccbq_frozen_top
parameter_list|(
name|struct
name|cam_ccbq
modifier|*
name|ccbq
parameter_list|)
block|{
name|cam_rl
name|rl
decl_stmt|;
name|rl
operator|=
name|CAM_PRIORITY_TO_RL
argument_list|(
name|CAMQ_GET_PRIO
argument_list|(
operator|&
name|ccbq
operator|->
name|queue
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|ccbq
operator|->
name|queue
operator|.
name|qfrozen_cnt
index|[
name|rl
index|]
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CAM_CAM_QUEUE_H */
end_comment

end_unit

