begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright 2009 Scott Long  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification, immediately at the beginning of the file.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CAM_CAM_XPT_INTERNAL_H
end_ifndef

begin_define
define|#
directive|define
name|_CAM_CAM_XPT_INTERNAL_H
value|1
end_define

begin_comment
comment|/* Forward Declarations */
end_comment

begin_struct_decl
struct_decl|struct
name|cam_eb
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|cam_et
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|cam_ed
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|struct
name|cam_ed
modifier|*
function_decl|(
modifier|*
name|xpt_alloc_device_func
function_decl|)
parameter_list|(
name|struct
name|cam_eb
modifier|*
name|bus
parameter_list|,
name|struct
name|cam_et
modifier|*
name|target
parameter_list|,
name|lun_id_t
name|lun_id
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|xpt_release_device_func
function_decl|)
parameter_list|(
name|struct
name|cam_ed
modifier|*
name|device
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|xpt_action_func
function_decl|)
parameter_list|(
name|union
name|ccb
modifier|*
name|start_ccb
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|xpt_dev_async_func
function_decl|)
parameter_list|(
name|u_int32_t
name|async_code
parameter_list|,
name|struct
name|cam_eb
modifier|*
name|bus
parameter_list|,
name|struct
name|cam_et
modifier|*
name|target
parameter_list|,
name|struct
name|cam_ed
modifier|*
name|device
parameter_list|,
name|void
modifier|*
name|async_arg
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|xpt_announce_periph_func
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|xpt_xport
block|{
name|xpt_alloc_device_func
name|alloc_device
decl_stmt|;
name|xpt_release_device_func
name|reldev
decl_stmt|;
name|xpt_action_func
name|action
decl_stmt|;
name|xpt_dev_async_func
name|async
decl_stmt|;
name|xpt_announce_periph_func
name|announce
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Structure for queueing a device in a run queue.  * There is one run queue for allocating new ccbs,  * and another for sending ccbs to the controller.  */
end_comment

begin_struct
struct|struct
name|cam_ed_qinfo
block|{
name|cam_pinfo
name|pinfo
decl_stmt|;
name|struct
name|cam_ed
modifier|*
name|device
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The CAM EDT (Existing Device Table) contains the device information for  * all devices for all busses in the system.  The table contains a  * cam_ed structure for each device on the bus.  */
end_comment

begin_struct
struct|struct
name|cam_ed
block|{
name|TAILQ_ENTRY
argument_list|(
argument|cam_ed
argument_list|)
name|links
expr_stmt|;
name|struct
name|cam_ed_qinfo
name|devq_entry
decl_stmt|;
name|struct
name|cam_et
modifier|*
name|target
decl_stmt|;
name|struct
name|cam_sim
modifier|*
name|sim
decl_stmt|;
name|lun_id_t
name|lun_id
decl_stmt|;
name|struct
name|camq
name|drvq
decl_stmt|;
comment|/* 					 * Queue of type drivers wanting to do 					 * work on this device. 					 */
name|struct
name|cam_ccbq
name|ccbq
decl_stmt|;
comment|/* Queue of pending ccbs */
name|struct
name|async_list
name|asyncs
decl_stmt|;
comment|/* Async callback info for this B/T/L */
name|struct
name|periph_list
name|periphs
decl_stmt|;
comment|/* All attached devices */
name|u_int
name|generation
decl_stmt|;
comment|/* Generation number */
name|struct
name|cam_periph
modifier|*
name|owner
decl_stmt|;
comment|/* Peripheral driver's ownership tag */
name|void
modifier|*
name|quirk
decl_stmt|;
comment|/* Oddities about this device */
name|u_int
name|maxtags
decl_stmt|;
name|u_int
name|mintags
decl_stmt|;
name|cam_proto
name|protocol
decl_stmt|;
name|u_int
name|protocol_version
decl_stmt|;
name|cam_xport
name|transport
decl_stmt|;
name|u_int
name|transport_version
decl_stmt|;
name|struct
name|scsi_inquiry_data
name|inq_data
decl_stmt|;
name|uint8_t
modifier|*
name|supported_vpds
decl_stmt|;
name|uint8_t
name|supported_vpds_len
decl_stmt|;
name|struct
name|ata_params
name|ident_data
decl_stmt|;
name|u_int8_t
name|inq_flags
decl_stmt|;
comment|/* 					 * Current settings for inquiry flags. 					 * This allows us to override settings 					 * like disconnection and tagged 					 * queuing for a device. 					 */
name|u_int8_t
name|queue_flags
decl_stmt|;
comment|/* Queue flags from the control page */
name|u_int8_t
name|serial_num_len
decl_stmt|;
name|u_int8_t
modifier|*
name|serial_num
decl_stmt|;
name|u_int32_t
name|flags
decl_stmt|;
define|#
directive|define
name|CAM_DEV_UNCONFIGURED
value|0x01
define|#
directive|define
name|CAM_DEV_REL_TIMEOUT_PENDING
value|0x02
define|#
directive|define
name|CAM_DEV_REL_ON_COMPLETE
value|0x04
define|#
directive|define
name|CAM_DEV_REL_ON_QUEUE_EMPTY
value|0x08
define|#
directive|define
name|CAM_DEV_TAG_AFTER_COUNT
value|0x20
define|#
directive|define
name|CAM_DEV_INQUIRY_DATA_VALID
value|0x40
define|#
directive|define
name|CAM_DEV_IN_DV
value|0x80
define|#
directive|define
name|CAM_DEV_DV_HIT_BOTTOM
value|0x100
define|#
directive|define
name|CAM_DEV_IDENTIFY_DATA_VALID
value|0x200
name|u_int32_t
name|tag_delay_count
decl_stmt|;
define|#
directive|define
name|CAM_TAG_DELAY_COUNT
value|5
name|u_int32_t
name|tag_saved_openings
decl_stmt|;
name|u_int32_t
name|refcount
decl_stmt|;
name|struct
name|callout
name|callout
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|cam_ed
argument_list|)
name|highpowerq_entry
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Each target is represented by an ET (Existing Target).  These  * entries are created when a target is successfully probed with an  * identify, and removed when a device fails to respond after a number  * of retries, or a bus rescan finds the device missing.  */
end_comment

begin_struct
struct|struct
name|cam_et
block|{
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|cam_ed
argument_list|)
name|ed_entries
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|cam_et
argument_list|)
name|links
expr_stmt|;
name|struct
name|cam_eb
modifier|*
name|bus
decl_stmt|;
name|target_id_t
name|target_id
decl_stmt|;
name|u_int32_t
name|refcount
decl_stmt|;
name|u_int
name|generation
decl_stmt|;
name|struct
name|timeval
name|last_reset
decl_stmt|;
name|u_int
name|rpl_size
decl_stmt|;
name|struct
name|scsi_report_luns_data
modifier|*
name|luns
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Each bus is represented by an EB (Existing Bus).  These entries  * are created by calls to xpt_bus_register and deleted by calls to  * xpt_bus_deregister.  */
end_comment

begin_struct
struct|struct
name|cam_eb
block|{
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|cam_et
argument_list|)
name|et_entries
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|cam_eb
argument_list|)
name|links
expr_stmt|;
name|path_id_t
name|path_id
decl_stmt|;
name|struct
name|cam_sim
modifier|*
name|sim
decl_stmt|;
name|struct
name|timeval
name|last_reset
decl_stmt|;
name|u_int32_t
name|flags
decl_stmt|;
define|#
directive|define
name|CAM_EB_RUNQ_SCHEDULED
value|0x01
name|u_int32_t
name|refcount
decl_stmt|;
name|u_int
name|generation
decl_stmt|;
name|device_t
name|parent_dev
decl_stmt|;
name|struct
name|xpt_xport
modifier|*
name|xport
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cam_path
block|{
name|struct
name|cam_periph
modifier|*
name|periph
decl_stmt|;
name|struct
name|cam_eb
modifier|*
name|bus
decl_stmt|;
name|struct
name|cam_et
modifier|*
name|target
decl_stmt|;
name|struct
name|cam_ed
modifier|*
name|device
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|xpt_xport
modifier|*
name|scsi_get_xport
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|xpt_xport
modifier|*
name|ata_get_xport
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|cam_ed
modifier|*
name|xpt_alloc_device
parameter_list|(
name|struct
name|cam_eb
modifier|*
name|bus
parameter_list|,
name|struct
name|cam_et
modifier|*
name|target
parameter_list|,
name|lun_id_t
name|lun_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xpt_acquire_device
parameter_list|(
name|struct
name|cam_ed
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xpt_release_device
parameter_list|(
name|struct
name|cam_ed
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|xpt_schedule_dev
parameter_list|(
name|struct
name|camq
modifier|*
name|queue
parameter_list|,
name|cam_pinfo
modifier|*
name|dev_pinfo
parameter_list|,
name|u_int32_t
name|new_priority
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int32_t
name|xpt_dev_ccbq_resize
parameter_list|(
name|struct
name|cam_path
modifier|*
name|path
parameter_list|,
name|int
name|newopenings
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xpt_start_tags
parameter_list|(
name|struct
name|cam_path
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xpt_stop_tags
parameter_list|(
name|struct
name|cam_path
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_CAMXPT
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

