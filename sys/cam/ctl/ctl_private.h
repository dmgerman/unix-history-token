begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003, 2004, 2005, 2008 Silicon Graphics International Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    substantially similar to the "NO WARRANTY" disclaimer below  *    ("Disclaimer") and any redistribution must be conditioned upon  *    including a substantially similar Disclaimer requirement for further  *    binary redistribution.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  *  * $Id: //depot/users/kenm/FreeBSD-test2/sys/cam/ctl/ctl_private.h#7 $  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * CAM Target Layer driver private data structures/definitions.  *  * Author: Ken Merry<ken@FreeBSD.org>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CTL_PRIVATE_H_
end_ifndef

begin_define
define|#
directive|define
name|_CTL_PRIVATE_H_
end_define

begin_comment
comment|/*  * SCSI vendor and product names.  */
end_comment

begin_define
define|#
directive|define
name|CTL_VENDOR
value|"FREEBSD "
end_define

begin_define
define|#
directive|define
name|CTL_DIRECT_PRODUCT
value|"CTLDISK         "
end_define

begin_define
define|#
directive|define
name|CTL_PROCESSOR_PRODUCT
value|"CTLPROCESSOR    "
end_define

begin_define
define|#
directive|define
name|CTL_UNKNOWN_PRODUCT
value|"CTLDEVICE       "
end_define

begin_struct
struct|struct
name|ctl_fe_ioctl_startstop_info
block|{
name|struct
name|cv
name|sem
decl_stmt|;
name|struct
name|ctl_hard_startstop_info
name|hs_info
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ctl_fe_ioctl_bbrread_info
block|{
name|struct
name|cv
name|sem
decl_stmt|;
name|struct
name|ctl_bbrread_info
modifier|*
name|bbr_info
decl_stmt|;
name|int
name|wakeup_done
decl_stmt|;
name|struct
name|mtx
modifier|*
name|lock
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_IOCTL_INPROG
block|,
name|CTL_IOCTL_DATAMOVE
block|,
name|CTL_IOCTL_DONE
block|}
name|ctl_fe_ioctl_state
typedef|;
end_typedef

begin_struct
struct|struct
name|ctl_fe_ioctl_params
block|{
name|struct
name|cv
name|sem
decl_stmt|;
name|struct
name|mtx
name|ioctl_mtx
decl_stmt|;
name|ctl_fe_ioctl_state
name|state
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|CTL_POOL_ENTRIES_INTERNAL
value|200
end_define

begin_define
define|#
directive|define
name|CTL_POOL_ENTRIES_EMERGENCY
value|300
end_define

begin_define
define|#
directive|define
name|CTL_POOL_ENTRIES_OTHER_SC
value|200
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_POOL_INTERNAL
block|,
name|CTL_POOL_FETD
block|,
name|CTL_POOL_EMERGENCY
block|,
name|CTL_POOL_4OTHERSC
block|}
name|ctl_pool_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_POOL_FLAG_NONE
init|=
literal|0x00
block|,
name|CTL_POOL_FLAG_INVALID
init|=
literal|0x01
block|}
name|ctl_pool_flags
typedef|;
end_typedef

begin_struct
struct|struct
name|ctl_io_pool
block|{
name|ctl_pool_type
name|type
decl_stmt|;
name|ctl_pool_flags
name|flags
decl_stmt|;
name|uint32_t
name|id
decl_stmt|;
name|struct
name|ctl_softc
modifier|*
name|ctl_softc
decl_stmt|;
name|uint32_t
name|refcount
decl_stmt|;
name|uint64_t
name|total_allocated
decl_stmt|;
name|uint64_t
name|total_freed
decl_stmt|;
name|int32_t
name|total_ctl_io
decl_stmt|;
name|int32_t
name|free_ctl_io
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_io_hdr
argument_list|)
name|free_queue
expr_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|ctl_io_pool
argument_list|)
name|links
expr_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_IOCTL_FLAG_NONE
init|=
literal|0x00
block|,
name|CTL_IOCTL_FLAG_ENABLED
init|=
literal|0x01
block|}
name|ctl_ioctl_flags
typedef|;
end_typedef

begin_struct
struct|struct
name|ctl_ioctl_info
block|{
name|ctl_ioctl_flags
name|flags
decl_stmt|;
name|uint32_t
name|cur_tag_num
decl_stmt|;
name|struct
name|ctl_port
name|port
decl_stmt|;
name|char
name|port_name
index|[
literal|24
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_SER_BLOCK
block|,
name|CTL_SER_BLOCKOPT
block|,
name|CTL_SER_EXTENT
block|,
name|CTL_SER_EXTENTOPT
block|,
name|CTL_SER_PASS
block|,
name|CTL_SER_SKIP
block|}
name|ctl_serialize_action
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_ACTION_BLOCK
block|,
name|CTL_ACTION_OVERLAP
block|,
name|CTL_ACTION_OVERLAP_TAG
block|,
name|CTL_ACTION_PASS
block|,
name|CTL_ACTION_SKIP
block|,
name|CTL_ACTION_ERROR
block|}
name|ctl_action
typedef|;
end_typedef

begin_comment
comment|/*  * WARNING:  Keep the bottom nibble here free, we OR in the data direction  * flags for each command.  *  * Note:  "OK_ON_ALL_LUNS" == we don't have to have a lun configured  *        "OK_ON_BOTH"     == we have to have a lun configured  *        "SA5"            == command has 5-bit service action at byte 1  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_CMD_FLAG_NONE
init|=
literal|0x0000
block|,
name|CTL_CMD_FLAG_NO_SENSE
init|=
literal|0x0010
block|,
name|CTL_CMD_FLAG_OK_ON_ALL_LUNS
init|=
literal|0x0020
block|,
name|CTL_CMD_FLAG_ALLOW_ON_RESV
init|=
literal|0x0040
block|,
name|CTL_CMD_FLAG_OK_ON_PROC
init|=
literal|0x0100
block|,
name|CTL_CMD_FLAG_OK_ON_SLUN
init|=
literal|0x0200
block|,
name|CTL_CMD_FLAG_OK_ON_BOTH
init|=
literal|0x0300
block|,
name|CTL_CMD_FLAG_OK_ON_STOPPED
init|=
literal|0x0400
block|,
name|CTL_CMD_FLAG_OK_ON_INOPERABLE
init|=
literal|0x0800
block|,
name|CTL_CMD_FLAG_OK_ON_OFFLINE
init|=
literal|0x1000
block|,
name|CTL_CMD_FLAG_OK_ON_SECONDARY
init|=
literal|0x2000
block|,
name|CTL_CMD_FLAG_ALLOW_ON_PR_RESV
init|=
literal|0x4000
block|,
name|CTL_CMD_FLAG_SA5
init|=
literal|0x8000
block|}
name|ctl_cmd_flags
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_SERIDX_TUR
init|=
literal|0
block|,
name|CTL_SERIDX_READ
block|,
name|CTL_SERIDX_WRITE
block|,
name|CTL_SERIDX_UNMAP
block|,
name|CTL_SERIDX_MD_SNS
block|,
name|CTL_SERIDX_MD_SEL
block|,
name|CTL_SERIDX_RQ_SNS
block|,
name|CTL_SERIDX_INQ
block|,
name|CTL_SERIDX_RD_CAP
block|,
name|CTL_SERIDX_RES
block|,
name|CTL_SERIDX_LOG_SNS
block|,
name|CTL_SERIDX_FORMAT
block|,
name|CTL_SERIDX_START
block|,
comment|/* TBD: others to be filled in as needed */
name|CTL_SERIDX_COUNT
block|,
comment|/* LAST, not a normal code, provides # codes */
name|CTL_SERIDX_INVLD
init|=
name|CTL_SERIDX_COUNT
block|}
name|ctl_seridx
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|ctl_opfunc
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|ctl_cmd_entry
block|{
name|ctl_opfunc
modifier|*
name|execute
decl_stmt|;
name|ctl_seridx
name|seridx
decl_stmt|;
name|ctl_cmd_flags
name|flags
decl_stmt|;
name|ctl_lun_error_pattern
name|pattern
decl_stmt|;
name|uint8_t
name|length
decl_stmt|;
comment|/* CDB length */
name|uint8_t
name|usage
index|[
literal|15
index|]
decl_stmt|;
comment|/* Mask of allowed CDB bits 						 * after the opcode byte. */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_LUN_NONE
init|=
literal|0x000
block|,
name|CTL_LUN_CONTROL
init|=
literal|0x001
block|,
name|CTL_LUN_RESERVED
init|=
literal|0x002
block|,
name|CTL_LUN_INVALID
init|=
literal|0x004
block|,
name|CTL_LUN_DISABLED
init|=
literal|0x008
block|,
name|CTL_LUN_MALLOCED
init|=
literal|0x010
block|,
name|CTL_LUN_STOPPED
init|=
literal|0x020
block|,
name|CTL_LUN_INOPERABLE
init|=
literal|0x040
block|,
name|CTL_LUN_OFFLINE
init|=
literal|0x080
block|,
name|CTL_LUN_PR_RESERVED
init|=
literal|0x100
block|,
name|CTL_LUN_PRIMARY_SC
init|=
literal|0x200
block|,
name|CTL_LUN_SENSE_DESC
init|=
literal|0x400
block|,
name|CTL_LUN_READONLY
init|=
literal|0x800
block|}
name|ctl_lun_flags
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTLBLOCK_FLAG_NONE
init|=
literal|0x00
block|,
name|CTLBLOCK_FLAG_INVALID
init|=
literal|0x01
block|}
name|ctlblock_flags
typedef|;
end_typedef

begin_union
union|union
name|ctl_softcs
block|{
name|struct
name|ctl_softc
modifier|*
name|ctl_softc
decl_stmt|;
name|struct
name|ctlblock_softc
modifier|*
name|ctlblock_softc
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*  * Mode page defaults.  */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/*  * These values make Solaris trim off some of the capacity.  */
end_comment

begin_define
define|#
directive|define
name|CTL_DEFAULT_SECTORS_PER_TRACK
value|63
end_define

begin_define
define|#
directive|define
name|CTL_DEFAULT_HEADS
value|255
end_define

begin_comment
comment|/*  * These values seem to work okay.  */
end_comment

begin_define
define|#
directive|define
name|CTL_DEFAULT_SECTORS_PER_TRACK
value|63
end_define

begin_define
define|#
directive|define
name|CTL_DEFAULT_HEADS
value|16
end_define

begin_comment
comment|/*  * These values work reasonably well.  */
end_comment

begin_define
define|#
directive|define
name|CTL_DEFAULT_SECTORS_PER_TRACK
value|512
end_define

begin_define
define|#
directive|define
name|CTL_DEFAULT_HEADS
value|64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Solaris is somewhat picky about how many heads and sectors per track you  * have defined in mode pages 3 and 4.  These values seem to cause Solaris  * to get the capacity more or less right when you run the format tool.  * They still have problems when dealing with devices larger than 1TB,  * but there isn't anything we can do about that.  *  * For smaller LUN sizes, this ends up causing the number of cylinders to  * work out to 0.  Solaris actually recognizes that and comes up with its  * own bogus geometry to fit the actual capacity of the drive.  They really  * should just give up on geometry and stick to the read capacity  * information alone for modern disk drives.  *  * One thing worth mentioning about Solaris' mkfs command is that it  * doesn't like sectors per track values larger than 256.  512 seems to  * work okay for format, but causes problems when you try to make a  * filesystem.  *  * Another caveat about these values:  the product of these two values  * really should be a power of 2.  This is because of the simplistic  * shift-based calculation that we have to use on the i386 platform to  * calculate the number of cylinders here.  (If you use a divide, you end  * up calling __udivdi3(), which is a hardware FP call on the PC.  On the  * XScale, it is done in software, so you can do that from inside the  * kernel.)  *  * So for the current values (256 S/T, 128 H), we get 32768, which works  * very nicely for calculating cylinders.  *  * If you want to change these values so that their product is no longer a  * power of 2, re-visit the calculation in ctl_init_page_index().  You may  * need to make it a bit more complicated to get the number of cylinders  * right.  */
end_comment

begin_define
define|#
directive|define
name|CTL_DEFAULT_SECTORS_PER_TRACK
value|256
end_define

begin_define
define|#
directive|define
name|CTL_DEFAULT_HEADS
value|128
end_define

begin_define
define|#
directive|define
name|CTL_DEFAULT_ROTATION_RATE
value|10000
end_define

begin_struct_decl
struct_decl|struct
name|ctl_page_index
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|int
name|ctl_modesen_handler
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|,
name|struct
name|ctl_page_index
modifier|*
name|page_index
parameter_list|,
name|int
name|pc
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|ctl_modesel_handler
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|,
name|struct
name|ctl_page_index
modifier|*
name|page_index
parameter_list|,
name|uint8_t
modifier|*
name|page_ptr
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_PAGE_FLAG_NONE
init|=
literal|0x00
block|,
name|CTL_PAGE_FLAG_DISK_ONLY
init|=
literal|0x01
block|}
name|ctl_page_flags
typedef|;
end_typedef

begin_struct
struct|struct
name|ctl_page_index
block|{
name|uint8_t
name|page_code
decl_stmt|;
name|uint8_t
name|subpage
decl_stmt|;
name|uint16_t
name|page_len
decl_stmt|;
name|uint8_t
modifier|*
name|page_data
decl_stmt|;
name|ctl_page_flags
name|page_flags
decl_stmt|;
name|ctl_modesen_handler
modifier|*
name|sense_handler
decl_stmt|;
name|ctl_modesel_handler
modifier|*
name|select_handler
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|CTL_PAGE_CURRENT
value|0x00
end_define

begin_define
define|#
directive|define
name|CTL_PAGE_CHANGEABLE
value|0x01
end_define

begin_define
define|#
directive|define
name|CTL_PAGE_DEFAULT
value|0x02
end_define

begin_define
define|#
directive|define
name|CTL_PAGE_SAVED
value|0x03
end_define

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|ctl_page_index
name|page_index_template
index|[]
init|=
block|{
block|{
name|SMS_RW_ERROR_RECOVERY_PAGE
block|,
literal|0
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|scsi_da_rw_recovery_page
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_DISK_ONLY
block|,
name|NULL
block|,
name|NULL
block|}
block|,
block|{
name|SMS_FORMAT_DEVICE_PAGE
block|,
literal|0
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|scsi_format_page
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_DISK_ONLY
block|,
name|NULL
block|,
name|NULL
block|}
block|,
block|{
name|SMS_RIGID_DISK_PAGE
block|,
literal|0
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|scsi_rigid_disk_page
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_DISK_ONLY
block|,
name|NULL
block|,
name|NULL
block|}
block|,
block|{
name|SMS_CACHING_PAGE
block|,
literal|0
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|scsi_caching_page
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_DISK_ONLY
block|,
name|NULL
block|,
name|ctl_caching_sp_handler
block|}
block|,
block|{
name|SMS_CONTROL_MODE_PAGE
block|,
literal|0
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|scsi_control_page
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_NONE
block|,
name|NULL
block|,
name|ctl_control_page_handler
block|}
block|,
block|{
name|SMS_INFO_EXCEPTIONS_PAGE
block|,
literal|0
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|scsi_info_exceptions_page
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_NONE
block|,
name|NULL
block|,
name|NULL
block|}
block|,
block|{
name|SMS_INFO_EXCEPTIONS_PAGE
operator||
name|SMPH_SPF
block|,
literal|0x02
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|scsi_logical_block_provisioning_page
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_DISK_ONLY
block|,
name|NULL
block|,
name|NULL
block|}
block|,
block|{
name|SMS_VENDOR_SPECIFIC_PAGE
operator||
name|SMPH_SPF
block|,
name|PWR_SUBPAGE_CODE
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|copan_power_subpage
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_NONE
block|,
name|ctl_power_sp_sense_handler
block|,
name|ctl_power_sp_handler
block|}
block|,
block|{
name|SMS_VENDOR_SPECIFIC_PAGE
operator||
name|SMPH_SPF
block|,
name|APS_SUBPAGE_CODE
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|copan_aps_subpage
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_NONE
block|,
name|NULL
block|,
name|ctl_aps_sp_handler
block|}
block|,
block|{
name|SMS_VENDOR_SPECIFIC_PAGE
operator||
name|SMPH_SPF
block|,
name|DBGCNF_SUBPAGE_CODE
block|,
sizeof|sizeof
argument_list|(
expr|struct
name|copan_debugconf_subpage
argument_list|)
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_NONE
block|,
name|ctl_debugconf_sp_sense_handler
block|,
name|ctl_debugconf_sp_select_handler
block|}
block|, }
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|CTL_NUM_MODE_PAGES
value|sizeof(page_index_template)/   \ 			   sizeof(page_index_template[0])
end_define

begin_struct
struct|struct
name|ctl_mode_pages
block|{
name|struct
name|scsi_da_rw_recovery_page
name|rw_er_page
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|scsi_format_page
name|format_page
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|scsi_rigid_disk_page
name|rigid_disk_page
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|scsi_caching_page
name|caching_page
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|scsi_control_page
name|control_page
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|scsi_info_exceptions_page
name|ie_page
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|scsi_logical_block_provisioning_page
name|lbp_page
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|copan_power_subpage
name|power_subpage
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|copan_aps_subpage
name|aps_subpage
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|copan_debugconf_subpage
name|debugconf_subpage
index|[
literal|4
index|]
decl_stmt|;
name|struct
name|ctl_page_index
name|index
index|[
name|CTL_NUM_MODE_PAGES
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|static
specifier|const
name|struct
name|ctl_page_index
name|log_page_index_template
index|[]
init|=
block|{
block|{
name|SLS_SUPPORTED_PAGES_PAGE
block|,
literal|0
block|,
literal|0
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_NONE
block|,
name|NULL
block|,
name|NULL
block|}
block|,
block|{
name|SLS_SUPPORTED_PAGES_PAGE
block|,
name|SLS_SUPPORTED_SUBPAGES_SUBPAGE
block|,
literal|0
block|,
name|NULL
block|,
name|CTL_PAGE_FLAG_NONE
block|,
name|NULL
block|,
name|NULL
block|}
block|, }
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|CTL_NUM_LOG_PAGES
value|sizeof(log_page_index_template)/   \ 			  sizeof(log_page_index_template[0])
end_define

begin_struct
struct|struct
name|ctl_log_pages
block|{
name|uint8_t
name|pages_page
index|[
name|CTL_NUM_LOG_PAGES
index|]
decl_stmt|;
name|uint8_t
name|subpages_page
index|[
name|CTL_NUM_LOG_PAGES
operator|*
literal|2
index|]
decl_stmt|;
name|struct
name|ctl_page_index
name|index
index|[
name|CTL_NUM_LOG_PAGES
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ctl_lun_delay_info
block|{
name|ctl_delay_type
name|datamove_type
decl_stmt|;
name|uint32_t
name|datamove_delay
decl_stmt|;
name|ctl_delay_type
name|done_type
decl_stmt|;
name|uint32_t
name|done_delay
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_ERR_INJ_NONE
init|=
literal|0x00
block|,
name|CTL_ERR_INJ_ABORTED
init|=
literal|0x01
block|}
name|ctl_err_inject_flags
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_PR_FLAG_NONE
init|=
literal|0x00
block|,
name|CTL_PR_FLAG_REGISTERED
init|=
literal|0x01
block|,
name|CTL_PR_FLAG_ACTIVE_RES
init|=
literal|0x02
block|}
name|ctl_per_res_flags
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CTL_PR_ALL_REGISTRANTS
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|CTL_PR_NO_RESERVATION
value|0xFFFFFFF0
end_define

begin_struct
struct|struct
name|ctl_devid
block|{
name|int
name|len
decl_stmt|;
name|uint8_t
name|data
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * For report target port groups.  */
end_comment

begin_define
define|#
directive|define
name|NUM_TARGET_PORT_GROUPS
value|2
end_define

begin_struct_decl
struct_decl|struct
name|tpc_list
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ctl_lun
block|{
name|struct
name|mtx
name|lun_lock
decl_stmt|;
name|struct
name|ctl_id
name|target
decl_stmt|;
name|uint64_t
name|lun
decl_stmt|;
name|ctl_lun_flags
name|flags
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_error_desc
argument_list|)
name|error_list
expr_stmt|;
name|uint64_t
name|error_serial
decl_stmt|;
name|struct
name|ctl_softc
modifier|*
name|ctl_softc
decl_stmt|;
name|struct
name|ctl_be_lun
modifier|*
name|be_lun
decl_stmt|;
name|struct
name|ctl_backend_driver
modifier|*
name|backend
decl_stmt|;
name|int
name|io_count
decl_stmt|;
name|struct
name|ctl_lun_delay_info
name|delay_info
decl_stmt|;
name|int
name|sync_interval
decl_stmt|;
name|int
name|sync_count
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument|ctl_ooaq
argument_list|,
argument|ctl_io_hdr
argument_list|)
name|ooa_queue
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument|ctl_blockq
argument_list|,
argument|ctl_io_hdr
argument_list|)
name|blocked_queue
expr_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|ctl_lun
argument_list|)
name|links
expr_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|ctl_lun
argument_list|)
name|run_links
expr_stmt|;
ifdef|#
directive|ifdef
name|CTL_WITH_CA
name|uint32_t
name|have_ca
index|[
name|CTL_MAX_INITIATORS
operator|>>
literal|5
index|]
expr_stmt|;
name|struct
name|scsi_sense_data
name|pending_sense
index|[
name|CTL_MAX_INITIATORS
index|]
decl_stmt|;
endif|#
directive|endif
name|ctl_ua_type
name|pending_ua
index|[
name|CTL_MAX_INITIATORS
index|]
decl_stmt|;
name|struct
name|ctl_mode_pages
name|mode_pages
decl_stmt|;
name|struct
name|ctl_log_pages
name|log_pages
decl_stmt|;
name|struct
name|ctl_lun_io_stats
name|stats
decl_stmt|;
name|uint32_t
name|res_idx
decl_stmt|;
name|unsigned
name|int
name|PRGeneration
decl_stmt|;
name|uint64_t
name|pr_keys
index|[
literal|2
operator|*
name|CTL_MAX_INITIATORS
index|]
decl_stmt|;
name|int
name|pr_key_count
decl_stmt|;
name|uint32_t
name|pr_res_idx
decl_stmt|;
name|uint8_t
name|res_type
decl_stmt|;
name|uint8_t
name|write_buffer
index|[
literal|262144
index|]
decl_stmt|;
name|struct
name|ctl_devid
modifier|*
name|lun_devid
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument|tpc_lists
argument_list|,
argument|tpc_list
argument_list|)
name|tpc_lists
expr_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_FLAG_REAL_SYNC
init|=
literal|0x02
block|,
name|CTL_FLAG_MASTER_SHELF
init|=
literal|0x04
block|}
name|ctl_gen_flags
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CTL_MAX_THREADS
value|16
end_define

begin_struct
struct|struct
name|ctl_thread
block|{
name|struct
name|mtx_padalign
name|queue_lock
decl_stmt|;
name|struct
name|ctl_softc
modifier|*
name|ctl_softc
decl_stmt|;
name|struct
name|thread
modifier|*
name|thread
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_io_hdr
argument_list|)
name|incoming_queue
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_io_hdr
argument_list|)
name|rtr_queue
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_io_hdr
argument_list|)
name|done_queue
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_io_hdr
argument_list|)
name|isc_queue
expr_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|tpc_token
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ctl_softc
block|{
name|struct
name|mtx
name|ctl_lock
decl_stmt|;
name|struct
name|cdev
modifier|*
name|dev
decl_stmt|;
name|int
name|open_count
decl_stmt|;
name|struct
name|ctl_id
name|target
decl_stmt|;
name|int
name|num_disks
decl_stmt|;
name|int
name|num_luns
decl_stmt|;
name|ctl_gen_flags
name|flags
decl_stmt|;
name|ctl_ha_mode
name|ha_mode
decl_stmt|;
name|int
name|inquiry_pq_no_lun
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|sysctl_ctx
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|sysctl_tree
decl_stmt|;
name|struct
name|ctl_ioctl_info
name|ioctl_info
decl_stmt|;
name|struct
name|ctl_io_pool
modifier|*
name|internal_pool
decl_stmt|;
name|struct
name|ctl_io_pool
modifier|*
name|emergency_pool
decl_stmt|;
name|struct
name|ctl_io_pool
modifier|*
name|othersc_pool
decl_stmt|;
name|struct
name|proc
modifier|*
name|ctl_proc
decl_stmt|;
name|int
name|targ_online
decl_stmt|;
name|uint32_t
name|ctl_lun_mask
index|[
operator|(
name|CTL_MAX_LUNS
operator|+
literal|31
operator|)
operator|/
literal|32
index|]
decl_stmt|;
name|struct
name|ctl_lun
modifier|*
name|ctl_luns
index|[
name|CTL_MAX_LUNS
index|]
decl_stmt|;
name|uint32_t
name|ctl_port_mask
index|[
operator|(
name|CTL_MAX_PORTS
operator|+
literal|31
operator|)
operator|/
literal|32
index|]
decl_stmt|;
name|uint64_t
name|aps_locked_lun
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_lun
argument_list|)
name|lun_list
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_be_lun
argument_list|)
name|pending_lun_queue
expr_stmt|;
name|uint32_t
name|num_frontends
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_frontend
argument_list|)
name|fe_list
expr_stmt|;
name|uint32_t
name|num_ports
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_port
argument_list|)
name|port_list
expr_stmt|;
name|struct
name|ctl_port
modifier|*
name|ctl_ports
index|[
name|CTL_MAX_PORTS
index|]
decl_stmt|;
name|uint32_t
name|num_backends
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_backend_driver
argument_list|)
name|be_list
expr_stmt|;
name|struct
name|mtx
name|pool_lock
decl_stmt|;
name|uint32_t
name|num_pools
decl_stmt|;
name|uint32_t
name|cur_pool_id
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|ctl_io_pool
argument_list|)
name|io_pools
expr_stmt|;
name|struct
name|ctl_thread
name|threads
index|[
name|CTL_MAX_THREADS
index|]
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument|tpc_tokens
argument_list|,
argument|tpc_token
argument_list|)
name|tpc_tokens
expr_stmt|;
name|struct
name|callout
name|tpc_timeout
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|ctl_cmd_entry
name|ctl_cmd_table
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_function_decl
name|uint32_t
name|ctl_get_initindex
parameter_list|(
name|struct
name|ctl_nexus
modifier|*
name|nexus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|ctl_get_resindex
parameter_list|(
name|struct
name|ctl_nexus
modifier|*
name|nexus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|ctl_port_idx
parameter_list|(
name|int
name|port_num
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_pool_create
parameter_list|(
name|struct
name|ctl_softc
modifier|*
name|ctl_softc
parameter_list|,
name|ctl_pool_type
name|pool_type
parameter_list|,
name|uint32_t
name|total_ctl_io
parameter_list|,
name|struct
name|ctl_io_pool
modifier|*
modifier|*
name|npool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_pool_free
parameter_list|(
name|struct
name|ctl_io_pool
modifier|*
name|pool
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_scsi_release
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_scsi_reserve
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_start_stop
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_sync_cache
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_format
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_read_buffer
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_write_buffer
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_write_same
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_unmap
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_mode_select
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_mode_sense
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_log_sense
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_read_capacity
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_read_capacity_16
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_read_defect
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_read_write
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_cnw
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_report_luns
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_request_sense
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_tur
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_verify
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_inquiry
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_persistent_reserve_in
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_persistent_reserve_out
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_report_tagret_port_groups
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_report_supported_opcodes
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_report_supported_tmf
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_report_timestamp
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_isc
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_tpc_init
parameter_list|(
name|struct
name|ctl_softc
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_tpc_shutdown
parameter_list|(
name|struct
name|ctl_softc
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_tpc_lun_init
parameter_list|(
name|struct
name|ctl_lun
modifier|*
name|lun
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_tpc_lun_shutdown
parameter_list|(
name|struct
name|ctl_lun
modifier|*
name|lun
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_inquiry_evpd_tpc
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|,
name|int
name|alloc_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_receive_copy_status_lid1
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_receive_copy_failure_details
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_receive_copy_status_lid4
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_receive_copy_operating_parameters
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_extended_copy_lid1
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_extended_copy_lid4
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_copy_operation_abort
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_populate_token
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_write_using_token
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_receive_rod_token_information
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_report_all_rod_tokens
parameter_list|(
name|struct
name|ctl_scsiio
modifier|*
name|ctsio
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CTL_PRIVATE_H_ */
end_comment

begin_comment
comment|/*  * vim: ts=8  */
end_comment

end_unit

