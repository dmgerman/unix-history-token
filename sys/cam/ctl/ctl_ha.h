begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2009 Silicon Graphics International Corp.  * Copyright (c) 2011 Spectra Logic Corporation  * Copyright (c) 2015 Alexander Motin<mav@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    substantially similar to the "NO WARRANTY" disclaimer below  *    ("Disclaimer") and any redistribution must be conditioned upon  *    including a substantially similar Disclaimer requirement for further  *    binary redistribution.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  *  * $Id: //depot/users/kenm/FreeBSD-test2/sys/cam/ctl/ctl_ha.h#1 $  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CTL_HA_H_
end_ifndef

begin_define
define|#
directive|define
name|_CTL_HA_H_
end_define

begin_comment
comment|/*  * CTL High Availability Modes:  *  * CTL_HA_MODE_ACT_STBY:  Commands are serialized to the master side.  *			  No media access commands on slave side (Standby).  * CTL_HA_MODE_SER_ONLY:  Commands are serialized to the master side.  *			  Media can be accessed on both sides.  * CTL_HA_MODE_XFER:	  Commands and data are forwarded to the  *			  master side for execution.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_HA_MODE_ACT_STBY
block|,
name|CTL_HA_MODE_SER_ONLY
block|,
name|CTL_HA_MODE_XFER
block|}
name|ctl_ha_mode
typedef|;
end_typedef

begin_comment
comment|/*  * Communication channel IDs for various system components.  This is to  * make sure one CTL instance talks with another, one ZFS instance talks  * with another, etc.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_HA_CHAN_CTL
block|,
name|CTL_HA_CHAN_DATA
block|,
name|CTL_HA_CHAN_MAX
block|}
name|ctl_ha_channel
typedef|;
end_typedef

begin_comment
comment|/*  * HA communication event notification.  These are events generated by the  * HA communication subsystem.  *  * CTL_HA_EVT_MSG_RECV:		Message received by the other node.  * CTL_HA_EVT_LINK_CHANGE:	Communication channel status changed.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_HA_EVT_NONE
block|,
name|CTL_HA_EVT_MSG_RECV
block|,
name|CTL_HA_EVT_LINK_CHANGE
block|,
name|CTL_HA_EVT_MAX
block|}
name|ctl_ha_event
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_HA_STATUS_WAIT
block|,
name|CTL_HA_STATUS_SUCCESS
block|,
name|CTL_HA_STATUS_ERROR
block|,
name|CTL_HA_STATUS_INVALID
block|,
name|CTL_HA_STATUS_DISCONNECT
block|,
name|CTL_HA_STATUS_BUSY
block|,
name|CTL_HA_STATUS_MAX
block|}
name|ctl_ha_status
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_HA_DT_CMD_READ
block|,
name|CTL_HA_DT_CMD_WRITE
block|, }
name|ctl_ha_dt_cmd
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|ctl_ha_dt_req
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|ctl_ha_dt_cb
function_decl|)
parameter_list|(
name|struct
name|ctl_ha_dt_req
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|ctl_ha_dt_req
block|{
name|ctl_ha_dt_cmd
name|command
decl_stmt|;
name|void
modifier|*
name|context
decl_stmt|;
name|ctl_ha_dt_cb
name|callback
decl_stmt|;
name|int
name|ret
decl_stmt|;
name|uint32_t
name|size
decl_stmt|;
name|uint8_t
modifier|*
name|local
decl_stmt|;
name|uint8_t
modifier|*
name|remote
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|ctl_ha_dt_req
argument_list|)
name|links
expr_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|ctl_softc
struct_decl|;
end_struct_decl

begin_function_decl
name|ctl_ha_status
name|ctl_ha_msg_init
parameter_list|(
name|struct
name|ctl_softc
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_ha_msg_shutdown
parameter_list|(
name|struct
name|ctl_softc
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ctl_ha_status
name|ctl_ha_msg_destroy
parameter_list|(
name|struct
name|ctl_softc
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|ctl_evt_handler
function_decl|)
parameter_list|(
name|ctl_ha_channel
name|channel
parameter_list|,
name|ctl_ha_event
name|event
parameter_list|,
name|int
name|param
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|void
name|ctl_ha_register_evthandler
parameter_list|(
name|ctl_ha_channel
name|channel
parameter_list|,
name|ctl_evt_handler
name|handler
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ctl_ha_status
name|ctl_ha_msg_register
parameter_list|(
name|ctl_ha_channel
name|channel
parameter_list|,
name|ctl_evt_handler
name|handler
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ctl_ha_status
name|ctl_ha_msg_recv
parameter_list|(
name|ctl_ha_channel
name|channel
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|wait
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ctl_ha_status
name|ctl_ha_msg_send
parameter_list|(
name|ctl_ha_channel
name|channel
parameter_list|,
specifier|const
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|wait
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ctl_ha_status
name|ctl_ha_msg_send2
parameter_list|(
name|ctl_ha_channel
name|channel
parameter_list|,
specifier|const
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|void
modifier|*
name|addr2
parameter_list|,
name|size_t
name|len2
parameter_list|,
name|int
name|wait
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ctl_ha_status
name|ctl_ha_msg_abort
parameter_list|(
name|ctl_ha_channel
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ctl_ha_status
name|ctl_ha_msg_deregister
parameter_list|(
name|ctl_ha_channel
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ctl_ha_dt_req
modifier|*
name|ctl_dt_req_alloc
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_dt_req_free
parameter_list|(
name|struct
name|ctl_ha_dt_req
modifier|*
name|req
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ctl_ha_status
name|ctl_dt_single
parameter_list|(
name|struct
name|ctl_ha_dt_req
modifier|*
name|req
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
enum|enum
block|{
name|CTL_HA_LINK_OFFLINE
init|=
literal|0x00
block|,
name|CTL_HA_LINK_UNKNOWN
init|=
literal|0x01
block|,
name|CTL_HA_LINK_ONLINE
init|=
literal|0x02
block|}
name|ctl_ha_link_state
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CTL_HA_H_ */
end_comment

end_unit

