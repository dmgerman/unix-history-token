begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2000 by Matthew Jacob  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification, immediately at the beginning of the file.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * Alternatively, this software may be distributed under the terms of the  * the GNU Public License ("GPL").  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCSI_SES_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCSI_SES_H_
end_define

begin_include
include|#
directive|include
file|<cam/scsi/scsi_all.h>
end_include

begin_comment
comment|/*========================== Field Extraction Macros =========================*/
end_comment

begin_define
define|#
directive|define
name|MK_ENUM
parameter_list|(
name|S
parameter_list|,
name|F
parameter_list|,
name|SUFFIX
parameter_list|)
value|S ## _ ## F ## SUFFIX
end_define

begin_define
define|#
directive|define
name|GEN_GETTER
parameter_list|(
name|LS
parameter_list|,
name|US
parameter_list|,
name|LF
parameter_list|,
name|UF
parameter_list|)
define|\
value|static inline int							    \ LS ## _get_ ## LF(struct LS *elem) {					    \ 	return ((elem->bytes[MK_ENUM(US,UF,_BYTE)]& MK_ENUM(US,UF,_MASK))  \>> MK_ENUM(US,UF,_SHIFT));					    \ }
end_define

begin_define
define|#
directive|define
name|GEN_SETTER
parameter_list|(
name|LS
parameter_list|,
name|US
parameter_list|,
name|LF
parameter_list|,
name|UF
parameter_list|)
define|\
value|static inline void							    \ LS ## _set_ ## LF(struct LS *elem, int val) {				    \ 	elem->bytes[MK_ENUM(US,UF,_BYTE)]&= ~MK_ENUM(US,UF,_MASK);	    \ 	elem->bytes[MK_ENUM(US,UF,_BYTE)] |=				    \ 	    (val<< MK_ENUM(US,UF,_SHIFT))& MK_ENUM(US,UF,_MASK);	    \ }
end_define

begin_define
define|#
directive|define
name|GEN_HDR_GETTER
parameter_list|(
name|LS
parameter_list|,
name|US
parameter_list|,
name|LF
parameter_list|,
name|UF
parameter_list|)
define|\
value|static inline int							    \ LS ## _get_ ## LF(struct LS *page) {					    \ 	return ((page->hdr.page_specific_flags& MK_ENUM(US,UF,_MASK))	    \>> MK_ENUM(US,UF,_SHIFT));					    \ }
end_define

begin_define
define|#
directive|define
name|GEN_HDR_SETTER
parameter_list|(
name|LS
parameter_list|,
name|US
parameter_list|,
name|LF
parameter_list|,
name|UF
parameter_list|)
define|\
value|static inline void							    \ LS ## _set_ ## LF(struct LS *page, int val) {				    \ 	page->hdr.page_specific_flags&= ~MK_ENUM(US,UF,_MASK);		    \ 	page->hdr.page_specific_flags |=				    \ 	    (val<< MK_ENUM(US,UF,_SHIFT))& MK_ENUM(US,UF,_MASK);	    \ }
end_define

begin_define
define|#
directive|define
name|GEN_ACCESSORS
parameter_list|(
name|LS
parameter_list|,
name|US
parameter_list|,
name|LF
parameter_list|,
name|UF
parameter_list|)
define|\
value|GEN_GETTER(LS, US, LF, UF)						    \ GEN_SETTER(LS, US, LF, UF)
end_define

begin_define
define|#
directive|define
name|GEN_HDR_ACCESSORS
parameter_list|(
name|LS
parameter_list|,
name|US
parameter_list|,
name|LF
parameter_list|,
name|UF
parameter_list|)
define|\
value|GEN_HDR_GETTER(LS, US, LF, UF)						    \ GEN_HDR_SETTER(LS, US, LF, UF)
end_define

begin_comment
comment|/*===============  Common SCSI ENC Diagnostic Page Structures ===============*/
end_comment

begin_struct
struct|struct
name|ses_page_hdr
block|{
name|uint8_t
name|page_code
decl_stmt|;
name|uint8_t
name|page_specific_flags
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|gen_code
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|size_t
name|ses_page_length
parameter_list|(
specifier|const
name|struct
name|ses_page_hdr
modifier|*
name|hdr
parameter_list|)
block|{
comment|/* 	 * The page length as received only accounts for bytes that 	 * follow the length field, namely starting with the generation 	 * code field. 	 */
return|return
operator|(
name|scsi_2btoul
argument_list|(
name|hdr
operator|->
name|length
argument_list|)
operator|+
name|offsetof
argument_list|(
expr|struct
name|ses_page_hdr
argument_list|,
name|gen_code
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*============= SCSI ENC Configuration Diagnostic Page Structures ============*/
end_comment

begin_struct
struct|struct
name|ses_enc_desc
block|{
name|uint8_t
name|byte0
decl_stmt|;
comment|/* 	 * reserved0	: 1, 	 * rel_id	: 3,	relative enclosure process id 	 * reserved1	: 1, 	 * num_procs	: 3;	number of enclosure procesenc 	 */
name|uint8_t
name|subenc_id
decl_stmt|;
comment|/* Sub-enclosure Identifier */
name|uint8_t
name|num_types
decl_stmt|;
comment|/* # of supported types */
name|uint8_t
name|length
decl_stmt|;
comment|/* Enclosure Descriptor Length */
name|uint8_t
name|logical_id
index|[
literal|8
index|]
decl_stmt|;
comment|/* formerly wwn */
name|uint8_t
name|vendor_id
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|product_id
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|product_rev
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|vendor_bytes
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|uint8_t
modifier|*
name|ses_enc_desc_last_byte
parameter_list|(
name|struct
name|ses_enc_desc
modifier|*
name|encdesc
parameter_list|)
block|{
return|return
operator|(
operator|&
name|encdesc
operator|->
name|length
operator|+
name|encdesc
operator|->
name|length
operator|+
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|ses_enc_desc
modifier|*
name|ses_enc_desc_next
parameter_list|(
name|struct
name|ses_enc_desc
modifier|*
name|encdesc
parameter_list|)
block|{
return|return
operator|(
operator|(
expr|struct
name|ses_enc_desc
operator|*
operator|)
operator|(
name|ses_enc_desc_last_byte
argument_list|(
name|encdesc
argument_list|)
operator|+
literal|1
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|ses_enc_desc_is_complete
parameter_list|(
name|struct
name|ses_enc_desc
modifier|*
name|encdesc
parameter_list|,
name|uint8_t
modifier|*
name|last_buf_byte
parameter_list|)
block|{
return|return
operator|(
operator|&
name|encdesc
operator|->
name|length
operator|<=
name|last_buf_byte
operator|&&
name|ses_enc_desc_last_byte
argument_list|(
name|encdesc
argument_list|)
operator|<=
name|last_buf_byte
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|ses_elm_type_desc
block|{
name|uint8_t
name|etype_elm_type
decl_stmt|;
comment|/* type of element */
name|uint8_t
name|etype_maxelt
decl_stmt|;
comment|/* maximum supported */
name|uint8_t
name|etype_subenc
decl_stmt|;
comment|/* in sub-enclosure #n */
name|uint8_t
name|etype_txt_len
decl_stmt|;
comment|/* Type Descriptor Text Length */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_cfg_page
block|{
name|struct
name|ses_page_hdr
name|hdr
decl_stmt|;
name|struct
name|ses_enc_desc
name|subencs
index|[]
decl_stmt|;
comment|/* type descriptors */
comment|/* type text */
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|ses_cfg_page_get_num_subenc
parameter_list|(
name|struct
name|ses_cfg_page
modifier|*
name|page
parameter_list|)
block|{
return|return
operator|(
name|page
operator|->
name|hdr
operator|.
name|page_specific_flags
operator|+
literal|1
operator|)
return|;
block|}
end_function

begin_comment
comment|/*================ SCSI SES Control Diagnostic Page Structures ==============*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_common
block|{
name|uint8_t
name|bytes
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_common_field_data
block|{
name|SES_CTRL_COMMON_SELECT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_COMMON_SELECT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_COMMON_SELECT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_COMMON_PRDFAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_COMMON_PRDFAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_COMMON_PRDFAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_COMMON_DISABLE_BYTE
init|=
literal|0
block|,
name|SES_CTRL_COMMON_DISABLE_MASK
init|=
literal|0x20
block|,
name|SES_CTRL_COMMON_DISABLE_SHIFT
init|=
literal|5
block|,
name|SES_CTRL_COMMON_RST_SWAP_BYTE
init|=
literal|0
block|,
name|SES_CTRL_COMMON_RST_SWAP_MASK
init|=
literal|0x10
block|,
name|SES_CTRL_COMMON_RST_SWAP_SHIFT
init|=
literal|4
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_COMMON_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_common, SES_CTRL_COMMON, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_COMMON_ACCESSORS
argument_list|(
argument|select
argument_list|,
argument|SELECT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_COMMON_ACCESSORS
argument_list|(
argument|prdfail
argument_list|,
argument|PRDFAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_COMMON_ACCESSORS
argument_list|(
argument|disable
argument_list|,
argument|DISABLE
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_COMMON_ACCESSORS
argument_list|(
argument|rst_swap
argument_list|,
argument|RST_SWAP
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_COMMON_ACCESSORS
end_undef

begin_comment
comment|/*------------------------ Device Slot Control Element ----------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_dev_slot
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_dev_slot_field_data
block|{
name|SES_CTRL_DEV_SLOT_RQST_ACTIVE_BYTE
init|=
literal|1
block|,
name|SES_CTRL_DEV_SLOT_RQST_ACTIVE_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_DEV_SLOT_RQST_ACTIVE_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_DEV_SLOT_DO_NOT_REMOVE_BYTE
init|=
literal|1
block|,
name|SES_CTRL_DEV_SLOT_DO_NOT_REMOVE_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_DEV_SLOT_DO_NOT_REMOVE_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_DEV_SLOT_RQST_MISSING_BYTE
init|=
literal|1
block|,
name|SES_CTRL_DEV_SLOT_RQST_MISSING_MASK
init|=
literal|0x10
block|,
name|SES_CTRL_DEV_SLOT_RQST_MISSING_SHIFT
init|=
literal|4
block|,
name|SES_CTRL_DEV_SLOT_RQST_INSERT_BYTE
init|=
literal|1
block|,
name|SES_CTRL_DEV_SLOT_RQST_INSERT_MASK
init|=
literal|0x08
block|,
name|SES_CTRL_DEV_SLOT_RQST_INSERT_SHIFT
init|=
literal|3
block|,
name|SES_CTRL_DEV_SLOT_RQST_REMOVE_BYTE
init|=
literal|1
block|,
name|SES_CTRL_DEV_SLOT_RQST_REMOVE_MASK
init|=
literal|0x04
block|,
name|SES_CTRL_DEV_SLOT_RQST_REMOVE_SHIFT
init|=
literal|2
block|,
name|SES_CTRL_DEV_SLOT_RQST_IDENT_BYTE
init|=
literal|1
block|,
name|SES_CTRL_DEV_SLOT_RQST_IDENT_MASK
init|=
literal|0x02
block|,
name|SES_CTRL_DEV_SLOT_RQST_IDENT_SHIFT
init|=
literal|1
block|,
name|SES_CTRL_DEV_SLOT_RQST_FAULT_BYTE
init|=
literal|2
block|,
name|SES_CTRL_DEV_SLOT_RQST_FAULT_MASK
init|=
literal|0x20
block|,
name|SES_CTRL_DEV_SLOT_RQST_FAULT_SHIFT
init|=
literal|5
block|,
name|SES_CTRL_DEV_SLOT_DEVICE_OFF_BYTE
init|=
literal|2
block|,
name|SES_CTRL_DEV_SLOT_DEVICE_OFF_MASK
init|=
literal|0x10
block|,
name|SES_CTRL_DEV_SLOT_DEVICE_OFF_SHIFT
init|=
literal|4
block|,
name|SES_CTRL_DEV_SLOT_ENABLE_BYP_A_BYTE
init|=
literal|2
block|,
name|SES_CTRL_DEV_SLOT_ENABLE_BYP_A_MASK
init|=
literal|0x08
block|,
name|SES_CTRL_DEV_SLOT_ENABLE_BYP_A_SHIFT
init|=
literal|3
block|,
name|SES_CTRL_DEV_SLOT_ENABLE_BYP_B_BYTE
init|=
literal|2
block|,
name|SES_CTRL_DEV_SLOT_ENABLE_BYP_B_MASK
init|=
literal|0x04
block|,
name|SES_CTRL_DEV_SLOT_ENABLE_BYP_B_SHIFT
init|=
literal|2
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_dev_slot, SES_CTRL_DEV_SLOT, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_active
argument_list|,
argument|RQST_ACTIVE
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|do_not_remove
argument_list|,
argument|DO_NOT_REMOVE
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_missing
argument_list|,
argument|RQST_MISSING
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_insert
argument_list|,
argument|RQST_INSERT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_remove
argument_list|,
argument|RQST_REMOVE
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_fault
argument_list|,
argument|RQST_FAULT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|device_off
argument_list|,
argument|DEVICE_OFF
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|enable_byp_a
argument_list|,
argument|ENABLE_BYP_A
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
argument_list|(
argument|enable_byp_b
argument_list|,
argument|ENABLE_BYP_B
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_DEV_SLOT_ACCESSORS
end_undef

begin_comment
comment|/*--------------------- Array Device Slot Control Element --------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_array_dev_slot
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_array_dev_slot_field_data
block|{
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_OK_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_OK_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_OK_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_RSVD_DEVICE_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_RSVD_DEVICE_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_RSVD_DEVICE_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_HOT_SPARE_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_HOT_SPARE_MASK
init|=
literal|0x20
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_HOT_SPARE_SHIFT
init|=
literal|5
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_CONS_CHECK_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_CONS_CHECK_MASK
init|=
literal|0x10
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_CONS_CHECK_SHIFT
init|=
literal|4
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_IN_CRIT_ARRAY_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_IN_CRIT_ARRAY_MASK
init|=
literal|0x08
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_IN_CRIT_ARRAY_SHIFT
init|=
literal|3
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_IN_FAILED_ARRAY_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_IN_FAILED_ARRAY_MASK
init|=
literal|0x04
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_IN_FAILED_ARRAY_SHIFT
init|=
literal|2
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_REBUILD_REMAP_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_REBUILD_REMAP_MASK
init|=
literal|0x02
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_REBUILD_REMAP_SHIFT
init|=
literal|1
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_REBUILD_REMAP_ABORT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_REBUILD_REMAP_ABORT_MASK
init|=
literal|0x01
block|,
name|SES_CTRL_ARRAY_DEV_SLOT_RQST_REBUILD_REMAP_ABORT_SHIFT
init|=
literal|0
comment|/* 	 * The remaining fields are identical to the device 	 * slot element type.  Access them through the device slot 	 * element type and its accessors. 	 */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_array_dev_slot, SES_CTRL_ARRAY_DEV_SLOT,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_ok
argument_list|,
argument|RQST_OK
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_rsvd_device
argument_list|,
argument|RQST_RSVD_DEVICE
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_hot_spare
argument_list|,
argument|RQST_HOT_SPARE
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_cons_check
argument_list|,
argument|RQST_CONS_CHECK
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_in_crit_array
argument_list|,
argument|RQST_IN_CRIT_ARRAY
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_in_failed_array
argument_list|,
argument|RQST_IN_FAILED_ARRAY
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_rebuild_remap
argument_list|,
argument|RQST_REBUILD_REMAP
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rqst_rebuild_remap_abort
argument_list|,
argument|RQST_REBUILD_REMAP_ABORT
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_ARRAY_DEV_SLOT_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- Power Supply Control Element -----------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_power_supply
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_power_supply_field_data
block|{
name|SES_CTRL_POWER_SUPPLY_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_POWER_SUPPLY_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_POWER_SUPPLY_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_POWER_SUPPLY_RQST_FAIL_BYTE
init|=
literal|2
block|,
name|SES_CTRL_POWER_SUPPLY_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_POWER_SUPPLY_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_POWER_SUPPLY_RQST_ON_BYTE
init|=
literal|2
block|,
name|SES_CTRL_POWER_SUPPLY_RQST_ON_MASK
init|=
literal|0x20
block|,
name|SES_CTRL_POWER_SUPPLY_RQST_ON_SHIFT
init|=
literal|5
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_POWER_SUPPLY_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_power_supply, SES_CTRL_POWER_SUPPLY, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|rqst_on
argument_list|,
argument|RQST_ON
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_POWER_SUPPLY_ACCESSORS
end_undef

begin_comment
comment|/*-------------------------- Cooling Control Element -------------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_cooling
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_cooling_field_data
block|{
name|SES_CTRL_COOLING_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_COOLING_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_COOLING_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_COOLING_RQST_FAIL_BYTE
init|=
literal|2
block|,
name|SES_CTRL_COOLING_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_COOLING_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_COOLING_RQST_ON_BYTE
init|=
literal|2
block|,
name|SES_CTRL_COOLING_RQST_ON_MASK
init|=
literal|0x20
block|,
name|SES_CTRL_COOLING_RQST_ON_SHIFT
init|=
literal|5
block|,
name|SES_CTRL_COOLING_RQSTED_SPEED_CODE_BYTE
init|=
literal|2
block|,
name|SES_CTRL_COOLING_RQSTED_SPEED_CODE_MASK
init|=
literal|0x07
block|,
name|SES_CTRL_COOLING_RQSTED_SPEED_CODE_SHIFT
init|=
literal|2
block|,
name|SES_CTRL_COOLING_RQSTED_SPEED_CODE_UNCHANGED
init|=
literal|0x00
block|,
name|SES_CTRL_COOLING_RQSTED_SPEED_CODE_LOWEST
init|=
literal|0x01
block|,
name|SES_CTRL_COOLING_RQSTED_SPEED_CODE_HIGHEST
init|=
literal|0x07
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_COOLING_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_cooling, SES_CTRL_COOLING, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_COOLING_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_COOLING_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_COOLING_ACCESSORS
argument_list|(
argument|rqst_on
argument_list|,
argument|RQST_ON
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_COOLING_ACCESSORS
argument_list|(
argument|rqsted_speed_code
argument_list|,
argument|RQSTED_SPEED_CODE
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_COOLING_ACCESSORS
end_undef

begin_comment
comment|/*-------------------- Temperature Sensor Control Element --------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_temp_sensor
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_temp_sensor_field_data
block|{
name|SES_CTRL_TEMP_SENSOR_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_TEMP_SENSOR_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_TEMP_SENSOR_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_TEMP_SENSOR_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_TEMP_SENSOR_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_TEMP_SENSOR_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_TEMP_SENSOR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_temp_sensor, SES_CTRL_TEMP_SENSOR, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_TEMP_SENSOR_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_TEMP_SENSOR_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_TEMP_SENSOR_ACCESSORS
end_undef

begin_comment
comment|/*------------------------- Door Lock Control Element ------------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_door_lock
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_door_lock_field_data
block|{
name|SES_CTRL_DOOR_LOCK_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_DOOR_LOCK_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_DOOR_LOCK_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_DOOR_LOCK_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_DOOR_LOCK_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_DOOR_LOCK_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_DOOR_LOCK_UNLOCK_BYTE
init|=
literal|2
block|,
name|SES_CTRL_DOOR_LOCK_UNLOCK_MASK
init|=
literal|0x01
block|,
name|SES_CTRL_DOOR_LOCK_UNLOCK_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_DOOR_LOCK_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_door_lock, SES_CTRL_DOOR_LOCK, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_DOOR_LOCK_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DOOR_LOCK_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DOOR_LOCK_ACCESSORS
argument_list|(
argument|unlock
argument_list|,
argument|UNLOCK
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_DOOR_LOCK_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- Audible Alarm Control Element ----------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_audible_alarm
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_audible_alarm_field_data
block|{
name|SES_CTRL_AUDIBLE_ALARM_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_AUDIBLE_ALARM_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_AUDIBLE_ALARM_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_AUDIBLE_ALARM_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_AUDIBLE_ALARM_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_AUDIBLE_ALARM_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_AUDIBLE_ALARM_SET_MUTE_BYTE
init|=
literal|2
block|,
name|SES_CTRL_AUDIBLE_ALARM_SET_MUTE_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_AUDIBLE_ALARM_SET_MUTE_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_AUDIBLE_ALARM_SET_REMIND_BYTE
init|=
literal|2
block|,
name|SES_CTRL_AUDIBLE_ALARM_SET_REMIND_MASK
init|=
literal|0x10
block|,
name|SES_CTRL_AUDIBLE_ALARM_SET_REMIND_SHIFT
init|=
literal|4
block|,
name|SES_CTRL_AUDIBLE_ALARM_TONE_CONTROL_BYTE
init|=
literal|2
block|,
name|SES_CTRL_AUDIBLE_ALARM_TONE_CONTROL_MASK
init|=
literal|0x0F
block|,
name|SES_CTRL_AUDIBLE_ALARM_TONE_CONTROL_SHIFT
init|=
literal|0
block|,
name|SES_CTRL_AUDIBLE_ALARM_TONE_CONTROL_INFO
init|=
literal|0x08
block|,
name|SES_CTRL_AUDIBLE_ALARM_TONE_CONTROL_NON_CRIT
init|=
literal|0x04
block|,
name|SES_CTRL_AUDIBLE_ALARM_TONE_CONTROL_CRIT
init|=
literal|0x02
block|,
name|SES_CTRL_AUDIBLE_ALARM_TONE_CONTROL_UNRECOV
init|=
literal|0x01
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_AUDIBLE_ALARM_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_audible_alarm, SES_CTRL_AUDIBLE_ALARM, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|set_mute
argument_list|,
argument|SET_MUTE
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|set_remind
argument_list|,
argument|SET_REMIND
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|tone_control
argument_list|,
argument|TONE_CONTROL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_AUDIBLE_ALARM_ACCESSORS
end_undef

begin_comment
comment|/*--------- Enclosure Services Controller Electronics Control Element --------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_ecc_electronics
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_ecc_electronics_field_data
block|{
name|SES_CTRL_ECC_ELECTRONICS_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ECC_ELECTRONICS_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_ECC_ELECTRONICS_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_ECC_ELECTRONICS_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ECC_ELECTRONICS_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_ECC_ELECTRONICS_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_ECC_ELECTRONICS_SELECT_ELEMENT_BYTE
init|=
literal|1
block|,
name|SES_CTRL_ECC_ELECTRONICS_SELECT_ELEMENT_MASK
init|=
literal|0x01
block|,
name|SES_CTRL_ECC_ELECTRONICS_SELECT_ELEMENT_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_ECC_ELECTRONICS_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_ecc_electronics, SES_CTRL_ECC_ELECTRONICS,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_ECC_ELECTRONICS_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ECC_ELECTRONICS_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ECC_ELECTRONICS_ACCESSORS
argument_list|(
argument|select_element
argument_list|,
argument|SELECT_ELEMENT
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_ECC_ELECTRONICS_ACCESSORS
end_undef

begin_comment
comment|/*----------- SCSI Services Controller Electronics Control Element -----------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_scc_electronics
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_scc_electronics_field_data
block|{
name|SES_CTRL_SCC_ELECTRONICS_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_SCC_ELECTRONICS_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_SCC_ELECTRONICS_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_SCC_ELECTRONICS_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_SCC_ELECTRONICS_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_SCC_ELECTRONICS_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_SCC_ELECTRONICS_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_scc_electronics, SES_CTRL_SCC_ELECTRONICS,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_SCC_ELECTRONICS_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_SCC_ELECTRONICS_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_SCC_ELECTRONICS_ACCESSORS
end_undef

begin_comment
comment|/*--------------------- Nonvolatile Cache Control Element --------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_nv_cache
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_nv_cache_field_data
block|{
name|SES_CTRL_NV_CACHE_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_NV_CACHE_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_NV_CACHE_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_NV_CACHE_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_NV_CACHE_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_NV_CACHE_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_NV_CACHE_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_nv_cache, SES_CTRL_NV_CACHE,	LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_NV_CACHE_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_NV_CACHE_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_NV_CACHE_ACCESSORS
end_undef

begin_comment
comment|/*----------------- Invalid Operation Reason Control Element -----------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_invalid_op_reason
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* There are no element specific fields currently defined in the spec. */
end_comment

begin_comment
comment|/*--------------- Uninterruptible Power Supply Control Element ---------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_ups
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_ups_field_data
block|{
name|SES_CTRL_UPS_RQST_IDENT_BYTE
init|=
literal|2
block|,
name|SES_CTRL_UPS_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_UPS_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_UPS_RQST_FAIL_BYTE
init|=
literal|2
block|,
name|SES_CTRL_UPS_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_UPS_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_UPS_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_ups, SES_CTRL_UPS, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_UPS_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_UPS_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_UPS_ACCESSORS
end_undef

begin_comment
comment|/*-------------------------- Display Control Element -------------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_display
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|1
index|]
decl_stmt|;
name|uint8_t
name|display_character
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_display_field_data
block|{
name|SES_CTRL_DISPLAY_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_DISPLAY_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_DISPLAY_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_DISPLAY_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_DISPLAY_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_DISPLAY_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_DISPLAY_DISPLAY_MODE_BYTE
init|=
literal|0
block|,
name|SES_CTRL_DISPLAY_DISPLAY_MODE_MASK
init|=
literal|0x03
block|,
name|SES_CTRL_DISPLAY_DISPLAY_MODE_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_DISPLAY_DISPLAY_MODE_UNCHANGED
init|=
literal|0x0
block|,
name|SES_CTRL_DISPLAY_DISPLAY_MODE_ESP
init|=
literal|0x1
block|,
name|SES_CTRL_DISPLAY_DISPLAY_MODE_DC_FIELD
init|=
literal|0x2
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_DISPLAY_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_display, SES_CTRL_DISPLAY, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_DISPLAY_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DISPLAY_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_DISPLAY_ACCESSORS
argument_list|(
argument|display_mode
argument_list|,
argument|DISPLAY_MODE
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_DISPLAY_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- Key Pad Entry Control Element ----------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_key_pad_entry
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_key_pad_entry_field_data
block|{
name|SES_CTRL_KEY_PAD_ENTRY_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_KEY_PAD_ENTRY_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_KEY_PAD_ENTRY_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_KEY_PAD_ENTRY_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_KEY_PAD_ENTRY_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_KEY_PAD_ENTRY_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_KEY_PAD_ENTRY_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_key_pad_entry, SES_CTRL_KEY_PAD_ENTRY, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_KEY_PAD_ENTRY_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_KEY_PAD_ENTRY_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_KEY_PAD_ENTRY_ACCESSORS
end_undef

begin_comment
comment|/*------------------------- Enclosure Control Element ------------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_enclosure
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_enclosure_field_data
block|{
name|SES_CTRL_ENCLOSURE_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_ENCLOSURE_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_ENCLOSURE_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_RQST_BYTE
init|=
literal|1
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_RQST_MASK
init|=
literal|0xC0
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_RQST_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_RQST_NONE
init|=
literal|0x0
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_RQST_AFTER_DELAY
init|=
literal|0x1
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_RQST_CANCEL
init|=
literal|0x2
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_DELAY_BYTE
init|=
literal|1
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_DELAY_MASK
init|=
literal|0x3F
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_DELAY_SHIFT
init|=
literal|0
block|,
name|SES_CTRL_ENCLOSURE_POWER_CYCLE_DELAY_MAX
init|=
literal|60
block|,
comment|/*minutes*/
name|SES_CTRL_ENCLOSURE_POWER_OFF_DURATION_BYTE
init|=
literal|2
block|,
name|SES_CTRL_ENCLOSURE_POWER_OFF_DURATION_MASK
init|=
literal|0xFC
block|,
name|SES_CTRL_ENCLOSURE_POWER_OFF_DURATION_SHIFT
init|=
literal|2
block|,
name|SES_CTRL_ENCLOSURE_POWER_OFF_DURATION_MAX_AUTO
init|=
literal|60
block|,
name|SES_CTRL_ENCLOSURE_POWER_OFF_DURATION_MANUAL
init|=
literal|63
block|,
name|SES_CTRL_ENCLOSURE_RQST_FAIL_BYTE
init|=
literal|2
block|,
name|SES_CTRL_ENCLOSURE_RQST_FAIL_MASK
init|=
literal|0x02
block|,
name|SES_CTRL_ENCLOSURE_RQST_FAIL_SHIFT
init|=
literal|1
block|,
name|SES_CTRL_ENCLOSURE_RQST_WARN_BYTE
init|=
literal|2
block|,
name|SES_CTRL_ENCLOSURE_RQST_WARN_MASK
init|=
literal|0x01
block|,
name|SES_CTRL_ENCLOSURE_RQST_WARN_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_ENCLOSURE_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_enclosure, SES_CTRL_ENCLOSURE, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_ENCLOSURE_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ENCLOSURE_ACCESSORS
argument_list|(
argument|power_cycle_rqst
argument_list|,
argument|POWER_CYCLE_RQST
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ENCLOSURE_ACCESSORS
argument_list|(
argument|power_cycle_delay
argument_list|,
argument|POWER_CYCLE_DELAY
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ENCLOSURE_ACCESSORS
argument_list|(
argument|power_off_duration
argument_list|,
argument|POWER_OFF_DURATION
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ENCLOSURE_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_ENCLOSURE_ACCESSORS
argument_list|(
argument|rqst_warn
argument_list|,
argument|RQST_WARN
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_ENCLOSURE_ACCESSORS
end_undef

begin_comment
comment|/*------------------- SCSI Port/Transceiver Control Element ------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_scsi_port_or_xcvr
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_scsi_port_or_xcvr_field_data
block|{
name|SES_CTRL_SCSI_PORT_OR_XCVR_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_SCSI_PORT_OR_XCVR_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_SCSI_PORT_OR_XCVR_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_SCSI_PORT_OR_XCVR_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_SCSI_PORT_OR_XCVR_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_SCSI_PORT_OR_XCVR_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_SCSI_PORT_OR_XCVR_DISABLE_BYTE
init|=
literal|2
block|,
name|SES_CTRL_SCSI_PORT_OR_XCVR_DISABLE_MASK
init|=
literal|0x10
block|,
name|SES_CTRL_SCSI_PORT_OR_XCVR_DISABLE_SHIFT
init|=
literal|4
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_SCSI_PORT_OR_XCVR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_scsi_port_or_xcvr, SES_CTRL_SCSI_PORT_OR_XCVR,\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_SCSI_PORT_OR_XCVR_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_SCSI_PORT_OR_XCVR_ACCESSORS
argument_list|(
argument|disable
argument_list|,
argument|DISABLE
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_SCSI_PORT_OR_XCVR_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_SCSI_PORT_OR_XCVR_ACCESSORS
end_undef

begin_comment
comment|/*------------------------- Language Control Element -------------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_language
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|1
index|]
decl_stmt|;
name|uint8_t
name|language_code
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_language_field_data
block|{
name|SES_CTRL_LANGUAGE_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_LANGUAGE_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_LANGUAGE_RQST_IDENT_SHIFT
init|=
literal|7
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_LANGUAGE_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_language, SES_CTRL_LANGUAGE, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_LANGUAGE_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_LANGUAGE_ACCESSORS
end_undef

begin_comment
comment|/*-------------------- Communication Port Control Element --------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_comm_port
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_comm_port_field_data
block|{
name|SES_CTRL_COMM_PORT_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_COMM_PORT_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_COMM_PORT_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_COMM_PORT_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_COMM_PORT_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_COMM_PORT_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_COMM_PORT_DISABLE_BYTE
init|=
literal|2
block|,
name|SES_CTRL_COMM_PORT_DISABLE_MASK
init|=
literal|0x01
block|,
name|SES_CTRL_COMM_PORT_DISABLE_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_COMM_PORT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_comm_port, SES_CTRL_COMM_PORT, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_COMM_PORT_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_COMM_PORT_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_COMM_PORT_ACCESSORS
argument_list|(
argument|disable
argument_list|,
argument|DISABLE
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_COMM_PORT_ACCESSORS
end_undef

begin_comment
comment|/*---------------------- Voltage Sensor Control Element ----------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_voltage_sensor
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_voltage_sensor_field_data
block|{
name|SES_CTRL_VOLTAGE_SENSOR_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_VOLTAGE_SENSOR_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_VOLTAGE_SENSOR_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_VOLTAGE_SENSOR_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_VOLTAGE_SENSOR_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_VOLTAGE_SENSOR_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_VOLTAGE_SENSOR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_voltage_sensor, SES_CTRL_VOLTAGE_SENSOR,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_VOLTAGE_SENSOR_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_VOLTAGE_SENSOR_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_VOLTAGE_SENSOR_ACCESSORS
end_undef

begin_comment
comment|/*---------------------- Current Sensor Control Element ----------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_current_sensor
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_current_sensor_field_data
block|{
name|SES_CTRL_CURRENT_SENSOR_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_CURRENT_SENSOR_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_CURRENT_SENSOR_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_CURRENT_SENSOR_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_CURRENT_SENSOR_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_CURRENT_SENSOR_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_CURRENT_SENSOR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_current_sensor, SES_CTRL_CURRENT_SENSOR,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_CURRENT_SENSOR_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_CURRENT_SENSOR_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_CURRENT_SENSOR_ACCESSORS
end_undef

begin_comment
comment|/*--------------------- SCSI Target Port Control Element ---------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_target_port
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_scsi_target_port_field_data
block|{
name|SES_CTRL_TARGET_PORT_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_TARGET_PORT_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_TARGET_PORT_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_TARGET_PORT_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_TARGET_PORT_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_TARGET_PORT_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_TARGET_PORT_ENABLE_BYTE
init|=
literal|2
block|,
name|SES_CTRL_TARGET_PORT_ENABLE_MASK
init|=
literal|0x01
block|,
name|SES_CTRL_TARGET_PORT_ENABLE_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_TARGET_PORT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_target_port, SES_CTRL_TARGET_PORT, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_TARGET_PORT_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_TARGET_PORT_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_TARGET_PORT_ACCESSORS
argument_list|(
argument|enable
argument_list|,
argument|ENABLE
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_TARGET_PORT_ACCESSORS
end_undef

begin_comment
comment|/*-------------------- SCSI Initiator Port Control Element -------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_initiator_port
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_initiator_port_field_data
block|{
name|SES_CTRL_INITIATOR_PORT_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_INITIATOR_PORT_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_INITIATOR_PORT_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_INITIATOR_PORT_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_INITIATOR_PORT_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_INITIATOR_PORT_RQST_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_CTRL_INITIATOR_PORT_ENABLE_BYTE
init|=
literal|2
block|,
name|SES_CTRL_INITIATOR_PORT_ENABLE_MASK
init|=
literal|0x01
block|,
name|SES_CTRL_INITIATOR_PORT_ENABLE_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_INITIATOR_PORT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_initiator_port, SES_CTRL_INITIATOR_PORT,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_INITIATOR_PORT_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_INITIATOR_PORT_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_INITIATOR_PORT_ACCESSORS
argument_list|(
argument|enable
argument_list|,
argument|ENABLE
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_INITIATOR_PORT_ACCESSORS
end_undef

begin_comment
comment|/*-------------------- Simple Subenclosure Control Element -------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_simple_subenc
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_simple_subenc_field_data
block|{
name|SES_CTRL_SIMPlE_SUBSES_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_SIMPlE_SUBSES_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_SIMPlE_SUBSES_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_SIMPlE_SUBSES_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_SIMPlE_SUBSES_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_SIMPlE_SUBSES_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_SIMPlE_SUBSES_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_simple_subenc, SES_CTRL_SIMPlE_SUBSES,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_SIMPlE_SUBSES_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_SIMPlE_SUBSES_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_SIMPlE_SUBSES_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- SAS Expander Control Element -----------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_sas_expander
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_sas_expander_field_data
block|{
name|SES_CTRL_SAS_EXPANDER_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_SAS_EXPANDER_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_SAS_EXPANDER_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_SAS_EXPANDER_RQST_FAIL_BYTE
init|=
literal|0
block|,
name|SES_CTRL_SAS_EXPANDER_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_SAS_EXPANDER_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_SAS_EXPANDER_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_sas_expander, SES_CTRL_SAS_EXPANDER,	LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_SAS_EXPANDER_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_SAS_EXPANDER_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_SAS_EXPANDER_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- SAS Connector Control Element ----------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_sas_connector
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_sas_connector_field_data
block|{
name|SES_CTRL_SAS_CONNECTOR_RQST_IDENT_BYTE
init|=
literal|0
block|,
name|SES_CTRL_SAS_CONNECTOR_RQST_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_CTRL_SAS_CONNECTOR_RQST_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_CTRL_SAS_CONNECTOR_RQST_FAIL_BYTE
init|=
literal|2
block|,
name|SES_CTRL_SAS_CONNECTOR_RQST_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_CTRL_SAS_CONNECTOR_RQST_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_SAS_CONNECTOR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_ACCESSORS(ses_ctrl_sas_connector, SES_CTRL_SAS_CONNECTOR,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_SAS_CONNECTOR_ACCESSORS
argument_list|(
argument|rqst_ident
argument_list|,
argument|RQST_IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_SAS_CONNECTOR_ACCESSORS
argument_list|(
argument|rqst_fail
argument_list|,
argument|RQST_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_SAS_CONNECTOR_ACCESSORS
end_undef

begin_comment
comment|/*------------------------- Universal Control Element ------------------------*/
end_comment

begin_union
union|union
name|ses_ctrl_element
block|{
name|struct
name|ses_ctrl_common
name|common
decl_stmt|;
name|struct
name|ses_ctrl_dev_slot
name|dev_slot
decl_stmt|;
name|struct
name|ses_ctrl_array_dev_slot
name|array_dev_slot
decl_stmt|;
name|struct
name|ses_ctrl_power_supply
name|power_supply
decl_stmt|;
name|struct
name|ses_ctrl_cooling
name|cooling
decl_stmt|;
name|struct
name|ses_ctrl_temp_sensor
name|temp_sensor
decl_stmt|;
name|struct
name|ses_ctrl_door_lock
name|door_lock
decl_stmt|;
name|struct
name|ses_ctrl_audible_alarm
name|audible_alarm
decl_stmt|;
name|struct
name|ses_ctrl_ecc_electronics
name|ecc_electronics
decl_stmt|;
name|struct
name|ses_ctrl_scc_electronics
name|scc_electronics
decl_stmt|;
name|struct
name|ses_ctrl_nv_cache
name|nv_cache
decl_stmt|;
name|struct
name|ses_ctrl_invalid_op_reason
name|invalid_op_reason
decl_stmt|;
name|struct
name|ses_ctrl_ups
name|ups
decl_stmt|;
name|struct
name|ses_ctrl_display
name|display
decl_stmt|;
name|struct
name|ses_ctrl_key_pad_entry
name|key_pad_entry
decl_stmt|;
name|struct
name|ses_ctrl_scsi_port_or_xcvr
name|scsi_port_or_xcvr
decl_stmt|;
name|struct
name|ses_ctrl_language
name|language
decl_stmt|;
name|struct
name|ses_ctrl_comm_port
name|comm_port
decl_stmt|;
name|struct
name|ses_ctrl_voltage_sensor
name|voltage_sensor
decl_stmt|;
name|struct
name|ses_ctrl_current_sensor
name|current_sensor
decl_stmt|;
name|struct
name|ses_ctrl_target_port
name|target_port
decl_stmt|;
name|struct
name|ses_ctrl_initiator_port
name|initiator_port
decl_stmt|;
name|struct
name|ses_ctrl_simple_subenc
name|simple_subenc
decl_stmt|;
name|struct
name|ses_ctrl_sas_expander
name|sas_expander
decl_stmt|;
name|struct
name|ses_ctrl_sas_connector
name|sas_connector
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*--------------------- SCSI SES Control Diagnostic Page ---------------------*/
end_comment

begin_struct
struct|struct
name|ses_ctrl_page
block|{
name|struct
name|ses_page_hdr
name|hdr
decl_stmt|;
name|union
name|ses_ctrl_element
name|elements
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_ctrl_page_field_data
block|{
name|SES_CTRL_PAGE_INFO_MASK
init|=
literal|0x08
block|,
name|SES_CTRL_PAGE_INFO_SHIFT
init|=
literal|3
block|,
name|SES_CTRL_PAGE_NON_CRIT_MASK
init|=
literal|0x04
block|,
name|SES_CTRL_PAGE_NON_CRIT_SHIFT
init|=
literal|2
block|,
name|SES_CTRL_PAGE_CRIT_MASK
init|=
literal|0x02
block|,
name|SES_CTRL_PAGE_CRIT_SHIFT
init|=
literal|1
block|,
name|SES_CTRL_PAGE_UNRECOV_MASK
init|=
literal|0x01
block|,
name|SES_CTRL_PAGE_UNRECOV_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_CTRL_PAGE_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_HDR_ACCESSORS(ses_ctrl_page, SES_CTRL_PAGE, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_CTRL_PAGE_ACCESSORS
argument_list|(
argument|info
argument_list|,
argument|INFO
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_PAGE_ACCESSORS
argument_list|(
argument|non_crit
argument_list|,
argument|NON_CRIT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_PAGE_ACCESSORS
argument_list|(
argument|crit
argument_list|,
argument|CRIT
argument_list|)
end_macro

begin_macro
name|GEN_SES_CTRL_PAGE_ACCESSORS
argument_list|(
argument|unrecov
argument_list|,
argument|UNRECOV
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_CTRL_PAGE_ACCESSORS
end_undef

begin_comment
comment|/*================= SCSI SES Status Diagnostic Page Structures ===============*/
end_comment

begin_struct
struct|struct
name|ses_status_common
block|{
name|uint8_t
name|bytes
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_common_field_data
block|{
name|SES_STATUS_COMMON_PRDFAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_COMMON_PRDFAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_COMMON_PRDFAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_COMMON_DISABLED_BYTE
init|=
literal|0
block|,
name|SES_STATUS_COMMON_DISABLED_MASK
init|=
literal|0x20
block|,
name|SES_STATUS_COMMON_DISABLED_SHIFT
init|=
literal|5
block|,
name|SES_STATUS_COMMON_SWAP_BYTE
init|=
literal|0
block|,
name|SES_STATUS_COMMON_SWAP_MASK
init|=
literal|0x10
block|,
name|SES_STATUS_COMMON_SWAP_SHIFT
init|=
literal|4
block|,
name|SES_STATUS_COMMON_ELEMENT_STATUS_CODE_BYTE
init|=
literal|0
block|,
name|SES_STATUS_COMMON_ELEMENT_STATUS_CODE_MASK
init|=
literal|0x0F
block|,
name|SES_STATUS_COMMON_ELEMENT_STATUS_CODE_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_COMMON_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_common, SES_STATUS_COMMON, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_COMMON_ACCESSORS
argument_list|(
argument|prdfail
argument_list|,
argument|PRDFAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COMMON_ACCESSORS
argument_list|(
argument|disabled
argument_list|,
argument|DISABLED
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COMMON_ACCESSORS
argument_list|(
argument|swap
argument_list|,
argument|SWAP
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COMMON_ACCESSORS
argument_list|(
argument|element_status_code
argument_list|,
argument|ELEMENT_STATUS_CODE
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_COMMON_ACCESSORS
end_undef

begin_comment
comment|/*------------------------- Device Slot Status Element -----------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_dev_slot
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|slot_address
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_dev_slot_field_data
block|{
name|SES_STATUS_DEV_SLOT_APP_CLIENT_BYPED_A_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DEV_SLOT_APP_CLIENT_BYPED_A_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_DEV_SLOT_APP_CLIENT_BYPED_A_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_DEV_SLOT_DO_NOT_REMOVE_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DEV_SLOT_DO_NOT_REMOVE_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_DEV_SLOT_DO_NOT_REMOVE_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_DEV_SLOT_ENCLOSURE_BYPED_A_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DEV_SLOT_ENCLOSURE_BYPED_A_MASK
init|=
literal|0x20
block|,
name|SES_STATUS_DEV_SLOT_ENCLOSURE_BYPED_A_SHIFT
init|=
literal|5
block|,
name|SES_STATUS_DEV_SLOT_ENCLOSURE_BYPED_B_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DEV_SLOT_ENCLOSURE_BYPED_B_MASK
init|=
literal|0x10
block|,
name|SES_STATUS_DEV_SLOT_ENCLOSURE_BYPED_B_SHIFT
init|=
literal|4
block|,
name|SES_STATUS_DEV_SLOT_INSERT_READY_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DEV_SLOT_INSERT_READY_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_DEV_SLOT_INSERT_READY_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_DEV_SLOT_REMOVE_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DEV_SLOT_REMOVE_MASK
init|=
literal|0x04
block|,
name|SES_STATUS_DEV_SLOT_REMOVE_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_DEV_SLOT_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DEV_SLOT_IDENT_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_DEV_SLOT_IDENT_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_REPORT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DEV_SLOT_REPORT_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_DEV_SLOT_REPORT_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_DEV_SLOT_APP_CLIENT_BYPED_B_BYTE
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_APP_CLIENT_BYPED_B_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_DEV_SLOT_APP_CLIENT_BYPED_B_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_DEV_SLOT_FAULT_SENSED_BYTE
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_FAULT_SENSED_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_DEV_SLOT_FAULT_SENSED_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_DEV_SLOT_FAULT_REQUESTED_BYTE
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_FAULT_REQUESTED_MASK
init|=
literal|0x20
block|,
name|SES_STATUS_DEV_SLOT_FAULT_REQUESTED_SHIFT
init|=
literal|5
block|,
name|SES_STATUS_DEV_SLOT_DEVICE_OFF_BYTE
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_DEVICE_OFF_MASK
init|=
literal|0x10
block|,
name|SES_STATUS_DEV_SLOT_DEVICE_OFF_SHIFT
init|=
literal|4
block|,
name|SES_STATUS_DEV_SLOT_BYPED_A_BYTE
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_BYPED_A_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_DEV_SLOT_BYPED_A_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_DEV_SLOT_BYPED_B_BYTE
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_BYPED_B_MASK
init|=
literal|0x04
block|,
name|SES_STATUS_DEV_SLOT_BYPED_B_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_DEV_SLOT_DEVICE_BYPED_A_BYTE
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_DEVICE_BYPED_A_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_DEV_SLOT_DEVICE_BYPED_A_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_DEVICE_BYPED_B_BYTE
init|=
literal|1
block|,
name|SES_STATUS_DEV_SLOT_DEVICE_BYPED_B_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_DEV_SLOT_DEVICE_BYPED_B_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_dev_slot, SES_STATUS_DEV_SLOT, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|app_client_byped_a
argument_list|,
argument|APP_CLIENT_BYPED_A
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|do_not_remove
argument_list|,
argument|DO_NOT_REMOVE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|enclosure_byped_a
argument_list|,
argument|ENCLOSURE_BYPED_A
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|enclosure_byped_b
argument_list|,
argument|ENCLOSURE_BYPED_B
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|insert_ready
argument_list|,
argument|INSERT_READY
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|remove
argument_list|,
argument|REMOVE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|report
argument_list|,
argument|REPORT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|app_client_byped_b
argument_list|,
argument|APP_CLIENT_BYPED_B
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|fault_sensed
argument_list|,
argument|FAULT_SENSED
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|fault_requested
argument_list|,
argument|FAULT_REQUESTED
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|device_off
argument_list|,
argument|DEVICE_OFF
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|byped_a
argument_list|,
argument|BYPED_A
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|byped_b
argument_list|,
argument|BYPED_B
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|device_byped_a
argument_list|,
argument|DEVICE_BYPED_A
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
argument_list|(
argument|device_byped_b
argument_list|,
argument|DEVICE_BYPED_B
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_DEV_SLOT_ACCESSORS
end_undef

begin_comment
comment|/*---------------------- Array Device Slot Status Element --------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_array_dev_slot
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_array_dev_slot_field_data
block|{
name|SES_STATUS_ARRAY_DEV_SLOT_OK_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_OK_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_OK_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_RSVD_DEVICE_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_RSVD_DEVICE_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_RSVD_DEVICE_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_HOT_SPARE_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_HOT_SPARE_MASK
init|=
literal|0x20
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_HOT_SPARE_SHIFT
init|=
literal|5
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_CONS_CHECK_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_CONS_CHECK_MASK
init|=
literal|0x10
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_CONS_CHECK_SHIFT
init|=
literal|4
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_IN_CRIT_ARRAY_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_IN_CRIT_ARRAY_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_IN_CRIT_ARRAY_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_IN_FAILED_ARRAY_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_IN_FAILED_ARRAY_MASK
init|=
literal|0x04
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_IN_FAILED_ARRAY_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_REBUILD_REMAP_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_REBUILD_REMAP_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_REBUILD_REMAP_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_REBUILD_REMAP_ABORT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_REBUILD_REMAP_ABORT_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_ARRAY_DEV_SLOT_REBUILD_REMAP_ABORT_SHIFT
init|=
literal|0
comment|/* 	 * The remaining fields are identical to the device 	 * slot element type.  Access them through the device slot 	 * element type and its accessors. 	 */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_array_dev_slot, SES_STATUS_ARRAY_DEV_SLOT,	\ 	       LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|ok
argument_list|,
argument|OK
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rsvd_device
argument_list|,
argument|RSVD_DEVICE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|hot_spare
argument_list|,
argument|HOT_SPARE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|cons_check
argument_list|,
argument|CONS_CHECK
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|in_crit_array
argument_list|,
argument|IN_CRIT_ARRAY
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|in_failed_array
argument_list|,
argument|IN_FAILED_ARRAY
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rebuild_remap
argument_list|,
argument|REBUILD_REMAP
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
argument_list|(
argument|rebuild_remap_abort
argument_list|,
argument|REBUILD_REMAP_ABORT
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_ARRAY_DEV_SLOT_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- Power Supply Status Element ------------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_power_supply
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_power_supply_field_data
block|{
name|SES_STATUS_POWER_SUPPLY_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_POWER_SUPPLY_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_POWER_SUPPLY_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_POWER_SUPPLY_DC_OVER_VOLTAGE_BYTE
init|=
literal|1
block|,
name|SES_STATUS_POWER_SUPPLY_DC_OVER_VOLTAGE_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_POWER_SUPPLY_DC_OVER_VOLTAGE_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_POWER_SUPPLY_DC_UNDER_VOLTAGE_BYTE
init|=
literal|1
block|,
name|SES_STATUS_POWER_SUPPLY_DC_UNDER_VOLTAGE_MASK
init|=
literal|0x04
block|,
name|SES_STATUS_POWER_SUPPLY_DC_UNDER_VOLTAGE_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_DC_OVER_CURRENT_BYTE
init|=
literal|1
block|,
name|SES_STATUS_POWER_SUPPLY_DC_OVER_CURRENT_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_POWER_SUPPLY_DC_OVER_CURRENT_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_POWER_SUPPLY_HOT_SWAP_BYTE
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_HOT_SWAP_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_POWER_SUPPLY_HOT_SWAP_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_POWER_SUPPLY_FAIL_BYTE
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_POWER_SUPPLY_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_POWER_SUPPLY_REQUESTED_ON_BYTE
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_REQUESTED_ON_MASK
init|=
literal|0x20
block|,
name|SES_STATUS_POWER_SUPPLY_REQUESTED_ON_SHIFT
init|=
literal|5
block|,
name|SES_STATUS_POWER_SUPPLY_OFF_BYTE
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_OFF_MASK
init|=
literal|0x10
block|,
name|SES_STATUS_POWER_SUPPLY_OFF_SHIFT
init|=
literal|4
block|,
name|SES_STATUS_POWER_SUPPLY_OVERTMP_FAIL_BYTE
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_OVERTMP_FAIL_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_POWER_SUPPLY_OVERTMP_FAIL_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_POWER_SUPPLY_TEMP_WARN_BYTE
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_TEMP_WARN_MASK
init|=
literal|0x04
block|,
name|SES_STATUS_POWER_SUPPLY_TEMP_WARN_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_AC_FAIL_BYTE
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_AC_FAIL_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_POWER_SUPPLY_AC_FAIL_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_POWER_SUPPLY_DC_FAIL_BYTE
init|=
literal|2
block|,
name|SES_STATUS_POWER_SUPPLY_DC_FAIL_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_POWER_SUPPLY_DC_FAIL_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_power_supply, SES_STATUS_POWER_SUPPLY, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|dc_over_voltage
argument_list|,
argument|DC_OVER_VOLTAGE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|dc_under_voltage
argument_list|,
argument|DC_UNDER_VOLTAGE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|dc_over_current
argument_list|,
argument|DC_OVER_CURRENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|hot_swap
argument_list|,
argument|HOT_SWAP
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|requested_on
argument_list|,
argument|REQUESTED_ON
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|off
argument_list|,
argument|OFF
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|overtmp_fail
argument_list|,
argument|OVERTMP_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|temp_warn
argument_list|,
argument|TEMP_WARN
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|ac_fail
argument_list|,
argument|AC_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
argument_list|(
argument|dc_fail
argument_list|,
argument|DC_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_POWER_SUPPLY_ACCESSORS
end_undef

begin_comment
comment|/*-------------------------- Cooling Status Element --------------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_cooling
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_cooling_field_data
block|{
name|SES_STATUS_COOLING_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_COOLING_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_COOLING_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_COOLING_ACTUAL_FAN_SPEED_MSB_BYTE
init|=
literal|0
block|,
name|SES_STATUS_COOLING_ACTUAL_FAN_SPEED_MSB_MASK
init|=
literal|0x07
block|,
name|SES_STATUS_COOLING_ACTUAL_FAN_SPEED_MSB_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_COOLING_ACTUAL_FAN_SPEED_LSB_BYTE
init|=
literal|1
block|,
name|SES_STATUS_COOLING_ACTUAL_FAN_SPEED_LSB_MASK
init|=
literal|0xFF
block|,
name|SES_STATUS_COOLING_ACTUAL_FAN_SPEED_LSB_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_COOLING_HOT_SWAP_BYTE
init|=
literal|2
block|,
name|SES_STATUS_COOLING_HOT_SWAP_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_COOLING_HOT_SWAP_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_COOLING_FAIL_BYTE
init|=
literal|2
block|,
name|SES_STATUS_COOLING_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_COOLING_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_COOLING_REQUESTED_ON_BYTE
init|=
literal|2
block|,
name|SES_STATUS_COOLING_REQUESTED_ON_MASK
init|=
literal|0x20
block|,
name|SES_STATUS_COOLING_REQUESTED_ON_SHIFT
init|=
literal|5
block|,
name|SES_STATUS_COOLING_OFF_BYTE
init|=
literal|2
block|,
name|SES_STATUS_COOLING_OFF_MASK
init|=
literal|0x20
block|,
name|SES_STATUS_COOLING_OFF_SHIFT
init|=
literal|5
block|,
name|SES_STATUS_COOLING_ACTUAL_SPEED_CODE_BYTE
init|=
literal|2
block|,
name|SES_STATUS_COOLING_ACTUAL_SPEED_CODE_MASK
init|=
literal|0x07
block|,
name|SES_STATUS_COOLING_ACTUAL_SPEED_CODE_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_COOLING_ACTUAL_SPEED_CODE_STOPPED
init|=
literal|0x00
block|,
name|SES_STATUS_COOLING_ACTUAL_SPEED_CODE_LOWEST
init|=
literal|0x01
block|,
name|SES_STATUS_COOLING_ACTUAL_SPEED_CODE_HIGHEST
init|=
literal|0x07
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_COOLING_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_cooling, SES_STATUS_COOLING, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_COOLING_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COOLING_ACCESSORS
argument_list|(
argument|actual_fan_speed_msb
argument_list|,
argument|ACTUAL_FAN_SPEED_MSB
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COOLING_ACCESSORS
argument_list|(
argument|actual_fan_speed_lsb
argument_list|,
argument|ACTUAL_FAN_SPEED_LSB
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COOLING_ACCESSORS
argument_list|(
argument|hot_swap
argument_list|,
argument|HOT_SWAP
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COOLING_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COOLING_ACCESSORS
argument_list|(
argument|requested_on
argument_list|,
argument|REQUESTED_ON
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COOLING_ACCESSORS
argument_list|(
argument|off
argument_list|,
argument|OFF
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COOLING_ACCESSORS
argument_list|(
argument|actual_speed_code
argument_list|,
argument|ACTUAL_SPEED_CODE
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_COOLING_ACCESSORS
end_undef

begin_function
specifier|static
specifier|inline
name|int
name|ses_status_cooling_get_actual_fan_speed
parameter_list|(
name|struct
name|ses_status_cooling
modifier|*
name|elem
parameter_list|)
block|{
return|return
operator|(
name|ses_status_cooling_get_actual_fan_speed_msb
argument_list|(
name|elem
argument_list|)
operator|<<
literal|8
operator||
name|ses_status_cooling_get_actual_fan_speed_lsb
argument_list|(
name|elem
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*-------------------- Temperature Sensor Status Element ---------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_temp_sensor
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_temp_sensor_field_data
block|{
name|SES_STATUS_TEMP_SENSOR_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_TEMP_SENSOR_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_TEMP_SENSOR_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_TEMP_SENSOR_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_TEMP_SENSOR_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_TEMP_SENSOR_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_TEMP_SENSOR_TEMPERATURE_BYTE
init|=
literal|1
block|,
name|SES_STATUS_TEMP_SENSOR_TEMPERATURE_MASK
init|=
literal|0xFF
block|,
name|SES_STATUS_TEMP_SENSOR_TEMPERATURE_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_TEMP_SENSOR_OT_FAILURE_BYTE
init|=
literal|2
block|,
name|SES_STATUS_TEMP_SENSOR_OT_FAILURE_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_TEMP_SENSOR_OT_FAILURE_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_TEMP_SENSOR_OT_WARNING_BYTE
init|=
literal|2
block|,
name|SES_STATUS_TEMP_SENSOR_OT_WARNING_MASK
init|=
literal|0x04
block|,
name|SES_STATUS_TEMP_SENSOR_OT_WARNING_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_TEMP_SENSOR_UT_FAILURE_BYTE
init|=
literal|2
block|,
name|SES_STATUS_TEMP_SENSOR_UT_FAILURE_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_TEMP_SENSOR_UT_FAILURE_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_TEMP_SENSOR_UT_WARNING_BYTE
init|=
literal|2
block|,
name|SES_STATUS_TEMP_SENSOR_UT_WARNING_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_TEMP_SENSOR_UT_WARNING_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_TEMP_SENSOR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_temp_sensor, SES_STATUS_TEMP_SENSOR, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_TEMP_SENSOR_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_TEMP_SENSOR_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_TEMP_SENSOR_ACCESSORS
argument_list|(
argument|temperature
argument_list|,
argument|TEMPERATURE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_TEMP_SENSOR_ACCESSORS
argument_list|(
argument|ot_failure
argument_list|,
argument|OT_FAILURE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_TEMP_SENSOR_ACCESSORS
argument_list|(
argument|ot_warning
argument_list|,
argument|OT_WARNING
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_TEMP_SENSOR_ACCESSORS
argument_list|(
argument|ut_failure
argument_list|,
argument|UT_FAILURE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_TEMP_SENSOR_ACCESSORS
argument_list|(
argument|ut_warning
argument_list|,
argument|UT_WARNING
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_TEMP_SENSOR_ACCESSORS
end_undef

begin_comment
comment|/*------------------------- Door Lock Status Element -------------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_door_lock
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_door_lock_field_data
block|{
name|SES_STATUS_DOOR_LOCK_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DOOR_LOCK_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_DOOR_LOCK_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_DOOR_LOCK_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DOOR_LOCK_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_DOOR_LOCK_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_DOOR_LOCK_UNLOCKED_BYTE
init|=
literal|2
block|,
name|SES_STATUS_DOOR_LOCK_UNLOCKED_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_DOOR_LOCK_UNLOCKED_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_DOOR_LOCK_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_door_lock, SES_STATUS_DOOR_LOCK, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_DOOR_LOCK_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DOOR_LOCK_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DOOR_LOCK_ACCESSORS
argument_list|(
argument|unlocked
argument_list|,
argument|UNLOCKED
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_DOOR_LOCK_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- Audible Alarm Status Element -----------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_audible_alarm
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_audible_alarm_field_data
block|{
name|SES_STATUS_AUDIBLE_ALARM_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_AUDIBLE_ALARM_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_AUDIBLE_ALARM_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_AUDIBLE_ALARM_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_AUDIBLE_ALARM_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_AUDIBLE_ALARM_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_AUDIBLE_ALARM_RQST_MUTE_BYTE
init|=
literal|2
block|,
name|SES_STATUS_AUDIBLE_ALARM_RQST_MUTE_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_AUDIBLE_ALARM_RQST_MUTE_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_AUDIBLE_ALARM_MUTED_BYTE
init|=
literal|2
block|,
name|SES_STATUS_AUDIBLE_ALARM_MUTED_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_AUDIBLE_ALARM_MUTED_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_AUDIBLE_ALARM_REMIND_BYTE
init|=
literal|2
block|,
name|SES_STATUS_AUDIBLE_ALARM_REMIND_MASK
init|=
literal|0x10
block|,
name|SES_STATUS_AUDIBLE_ALARM_REMIND_SHIFT
init|=
literal|4
block|,
name|SES_STATUS_AUDIBLE_ALARM_TONE_INDICATOR_BYTE
init|=
literal|2
block|,
name|SES_STATUS_AUDIBLE_ALARM_TONE_INDICATOR_MASK
init|=
literal|0x0F
block|,
name|SES_STATUS_AUDIBLE_ALARM_TONE_INDICATOR_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_AUDIBLE_ALARM_TONE_INDICATOR_INFO
init|=
literal|0x08
block|,
name|SES_STATUS_AUDIBLE_ALARM_TONE_INDICATOR_NON_CRIT
init|=
literal|0x04
block|,
name|SES_STATUS_AUDIBLE_ALARM_TONE_INDICATOR_CRIT
init|=
literal|0x02
block|,
name|SES_STATUS_AUDIBLE_ALARM_TONE_INDICATOR_UNRECOV
init|=
literal|0x01
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_AUDIBLE_ALARM_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_audible_alarm, SES_STATUS_AUDIBLE_ALARM, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|rqst_mute
argument_list|,
argument|RQST_MUTE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|muted
argument_list|,
argument|MUTED
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|remind
argument_list|,
argument|REMIND
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_AUDIBLE_ALARM_ACCESSORS
argument_list|(
argument|tone_indicator
argument_list|,
argument|TONE_INDICATOR
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_AUDIBLE_ALARM_ACCESSORS
end_undef

begin_comment
comment|/*---------- Enclosure Services Statusler Electronics Status Element ---------*/
end_comment

begin_struct
struct|struct
name|ses_status_ecc_electronics
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_ecc_electronics_field_data
block|{
name|SES_STATUS_ECC_ELECTRONICS_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ECC_ELECTRONICS_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_ECC_ELECTRONICS_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_ECC_ELECTRONICS_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ECC_ELECTRONICS_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_ECC_ELECTRONICS_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_ECC_ELECTRONICS_REPORT_BYTE
init|=
literal|1
block|,
name|SES_STATUS_ECC_ELECTRONICS_REPORT_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_ECC_ELECTRONICS_REPORT_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_ECC_ELECTRONICS_HOT_SWAP_BYTE
init|=
literal|2
block|,
name|SES_STATUS_ECC_ELECTRONICS_HOT_SWAP_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_ECC_ELECTRONICS_HOT_SWAP_SHIFT
init|=
literal|7
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_ECC_ELECTRONICS_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_ecc_electronics, SES_STATUS_ECC_ELECTRONICS,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_ECC_ELECTRONICS_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ECC_ELECTRONICS_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ECC_ELECTRONICS_ACCESSORS
argument_list|(
argument|report
argument_list|,
argument|REPORT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ECC_ELECTRONICS_ACCESSORS
argument_list|(
argument|hot_swap
argument_list|,
argument|HOT_SWAP
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_ECC_ELECTRONICS_ACCESSORS
end_undef

begin_comment
comment|/*------------ SCSI Services Statusler Electronics Status Element ------------*/
end_comment

begin_struct
struct|struct
name|ses_status_scc_electronics
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_scc_electronics_field_data
block|{
name|SES_STATUS_SCC_ELECTRONICS_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SCC_ELECTRONICS_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_SCC_ELECTRONICS_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_SCC_ELECTRONICS_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SCC_ELECTRONICS_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_SCC_ELECTRONICS_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_SCC_ELECTRONICS_REPORT_BYTE
init|=
literal|1
block|,
name|SES_STATUS_SCC_ELECTRONICS_REPORT_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_SCC_ELECTRONICS_REPORT_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_SCC_ELECTRONICS_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_scc_electronics, SES_STATUS_SCC_ELECTRONICS,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_SCC_ELECTRONICS_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SCC_ELECTRONICS_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SCC_ELECTRONICS_ACCESSORS
argument_list|(
argument|report
argument_list|,
argument|REPORT
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_SCC_ELECTRONICS_ACCESSORS
end_undef

begin_comment
comment|/*--------------------- Nonvolatile Cache Status Element ---------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_nv_cache
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|1
index|]
decl_stmt|;
name|uint8_t
name|cache_size
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_nv_cache_field_data
block|{
name|SES_STATUS_NV_CACHE_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_NV_CACHE_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_NV_CACHE_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_NV_CACHE_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_NV_CACHE_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_NV_CACHE_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_NV_CACHE_SIZE_MULTIPLIER_BYTE
init|=
literal|0
block|,
name|SES_STATUS_NV_CACHE_SIZE_MULTIPLIER_MASK
init|=
literal|0x03
block|,
name|SES_STATUS_NV_CACHE_SIZE_MULTIPLIER_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_NV_CACHE_SIZE_MULTIPLIER_BYTES
init|=
literal|0x0
block|,
name|SES_STATUS_NV_CACHE_SIZE_MULTIPLIER_KBYTES
init|=
literal|0x1
block|,
name|SES_STATUS_NV_CACHE_SIZE_MULTIPLIER_MBYTES
init|=
literal|0x2
block|,
name|SES_STATUS_NV_CACHE_SIZE_MULTIPLIER_GBYTES
init|=
literal|0x3
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_NV_CACHE_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_nv_cache, SES_STATUS_NV_CACHE, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_NV_CACHE_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_NV_CACHE_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_NV_CACHE_ACCESSORS
argument_list|(
argument|size_multiplier
argument_list|,
argument|SIZE_MULTIPLIER
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_NV_CACHE_ACCESSORS
end_undef

begin_function
specifier|static
specifier|inline
name|uintmax_t
name|ses_status_nv_cache_get_cache_size
parameter_list|(
name|struct
name|ses_status_nv_cache
modifier|*
name|elem
parameter_list|)
block|{
name|uintmax_t
name|cache_size
decl_stmt|;
name|int
name|multiplier
decl_stmt|;
comment|/* Multiplier is in units of 2^10 */
name|cache_size
operator|=
name|scsi_2btoul
argument_list|(
name|elem
operator|->
name|cache_size
argument_list|)
expr_stmt|;
name|multiplier
operator|=
literal|10
operator|*
name|ses_status_nv_cache_get_size_multiplier
argument_list|(
name|elem
argument_list|)
expr_stmt|;
return|return
operator|(
name|cache_size
operator|<<
name|multiplier
operator|)
return|;
block|}
end_function

begin_comment
comment|/*----------------- Invalid Operation Reason Status Element ------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_invalid_op_reason
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_invalid_op_field_data
block|{
name|SES_STATUS_INVALID_OP_REASON_TYPE_BYTE
init|=
literal|0
block|,
name|SES_STATUS_INVALID_OP_REASON_TYPE_MASK
init|=
literal|0xC0
block|,
name|SES_STATUS_INVALID_OP_REASON_TYPE_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_INVALID_OP_REASON_TYPE_PC_ERROR
init|=
literal|0x00
block|,
name|SES_STATUS_INVALID_OP_REASON_TYPE_PF_ERROR
init|=
literal|0x01
block|,
name|SES_STATUS_INVALID_OP_REASON_TYPE_VS_ERROR
init|=
literal|0x03
block|,
name|SES_STATUS_INVALID_OP_REASON_PC_ERROR_PC_NOT_SUPPORTED_BYTE
init|=
literal|0
block|,
name|SES_STATUS_INVALID_OP_REASON_PC_ERROR_PC_NOT_SUPPORTED_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_INVALID_OP_REASON_PC_ERROR_PC_NOT_SUPPORTED_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_INVALID_OP_REASON_PF_ERROR_BIT_NUMBER_BYTE
init|=
literal|0
block|,
name|SES_STATUS_INVALID_OP_REASON_PF_ERROR_BIT_NUMBER_MASK
init|=
literal|0x03
block|,
name|SES_STATUS_INVALID_OP_REASON_PF_ERROR_BIT_NUMBER_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_INVALID_OP_REASON_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_invalid_op_reason, SES_STATUS_INVALID_OP_REASON, \ 	       LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_INVALID_OP_REASON_ACCESSORS
argument_list|(
argument|type
argument_list|,
argument|TYPE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_INVALID_OP_REASON_ACCESSORS
argument_list|(
argument|pc_error_pc_not_supported
argument_list|,
argument|PC_ERROR_PC_NOT_SUPPORTED
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_INVALID_OP_REASON_ACCESSORS
argument_list|(
argument|pf_error_bit_number
argument_list|,
argument|PF_ERROR_BIT_NUMBER
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_INVALID_OP_ACCESSORS
end_undef

begin_comment
comment|/*--------------- Uninterruptible Power Supply Status Element ----------------*/
end_comment

begin_struct
struct|struct
name|ses_status_ups
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
comment|/* Minutes of remaining capacity. */
name|uint8_t
name|battery_status
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_ups_field_data
block|{
name|SES_STATUS_UPS_AC_LO_BYTE
init|=
literal|0
block|,
name|SES_STATUS_UPS_AC_LO_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_UPS_AC_LO_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_UPS_AC_HI_BYTE
init|=
literal|0
block|,
name|SES_STATUS_UPS_AC_HI_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_UPS_AC_HI_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_UPS_AC_QUAL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_UPS_AC_QUAL_MASK
init|=
literal|0x20
block|,
name|SES_STATUS_UPS_AC_QUAL_SHIFT
init|=
literal|5
block|,
name|SES_STATUS_UPS_AC_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_UPS_AC_FAIL_MASK
init|=
literal|0x10
block|,
name|SES_STATUS_UPS_AC_FAIL_SHIFT
init|=
literal|4
block|,
name|SES_STATUS_UPS_DC_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_UPS_DC_FAIL_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_UPS_DC_FAIL_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_UPS_UPS_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_UPS_UPS_FAIL_MASK
init|=
literal|0x04
block|,
name|SES_STATUS_UPS_UPS_FAIL_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_UPS_WARN_BYTE
init|=
literal|0
block|,
name|SES_STATUS_UPS_WARN_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_UPS_WARN_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_UPS_INTF_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_UPS_INTF_FAIL_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_UPS_INTF_FAIL_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_UPS_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_UPS_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_UPS_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_UPS_FAIL_BYTE
init|=
literal|1
block|,
name|SES_STATUS_UPS_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_UPS_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_UPS_BATT_FAIL_BYTE
init|=
literal|1
block|,
name|SES_STATUS_UPS_BATT_FAIL_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_UPS_BATT_FAIL_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_UPS_BPF_BYTE
init|=
literal|1
block|,
name|SES_STATUS_UPS_BPF_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_UPS_BPF_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_UPS_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_ups, SES_STATUS_UPS, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|ac_lo
argument_list|,
argument|AC_LO
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|ac_hi
argument_list|,
argument|AC_HI
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|ac_qual
argument_list|,
argument|AC_QUAL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|ac_fail
argument_list|,
argument|AC_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|dc_fail
argument_list|,
argument|DC_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|ups_fail
argument_list|,
argument|UPS_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|warn
argument_list|,
argument|WARN
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|intf_fail
argument_list|,
argument|INTF_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|batt_fail
argument_list|,
argument|BATT_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_UPS_ACCESSORS
argument_list|(
argument|bpf
argument_list|,
argument|BPF
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_UPS_ACCESSORS
end_undef

begin_comment
comment|/*-------------------------- Display Status Element --------------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_display
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|1
index|]
decl_stmt|;
name|uint8_t
name|display_character
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_display_field_data
block|{
name|SES_STATUS_DISPLAY_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DISPLAY_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_DISPLAY_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_DISPLAY_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DISPLAY_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_DISPLAY_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_DISPLAY_DISPLAY_MODE_BYTE
init|=
literal|0
block|,
name|SES_STATUS_DISPLAY_DISPLAY_MODE_MASK
init|=
literal|0x03
block|,
name|SES_STATUS_DISPLAY_DISPLAY_MODE_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_DISPLAY_DISPLAY_MODE_DC_FIELD_UNSUPP
init|=
literal|0x0
block|,
name|SES_STATUS_DISPLAY_DISPLAY_MODE_DC_FIELD_SUPP
init|=
literal|0x1
block|,
name|SES_STATUS_DISPLAY_DISPLAY_MODE_DC_FIELD
init|=
literal|0x2
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_DISPLAY_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_display, SES_STATUS_DISPLAY, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_DISPLAY_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DISPLAY_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_DISPLAY_ACCESSORS
argument_list|(
argument|display_mode
argument_list|,
argument|DISPLAY_MODE
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_DISPLAY_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- Key Pad Entry Status Element -----------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_key_pad_entry
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_key_pad_entry_field_data
block|{
name|SES_STATUS_KEY_PAD_ENTRY_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_KEY_PAD_ENTRY_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_KEY_PAD_ENTRY_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_KEY_PAD_ENTRY_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_KEY_PAD_ENTRY_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_KEY_PAD_ENTRY_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_KEY_PAD_ENTRY_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_key_pad_entry, SES_STATUS_KEY_PAD_ENTRY, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_KEY_PAD_ENTRY_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_KEY_PAD_ENTRY_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_KEY_PAD_ENTRY_ACCESSORS
end_undef

begin_comment
comment|/*------------------------- Enclosure Status Element -------------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_enclosure
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_enclosure_field_data
block|{
name|SES_STATUS_ENCLOSURE_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_ENCLOSURE_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_ENCLOSURE_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_ENCLOSURE_TIME_UNTIL_POWER_CYCLE_BYTE
init|=
literal|1
block|,
name|SES_STATUS_ENCLOSURE_TIME_UNTIL_POWER_CYCLE_MASK
init|=
literal|0xFC
block|,
name|SES_STATUS_ENCLOSURE_TIME_UNTIL_POWER_CYCLE_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_ENCLOSURE_FAIL_BYTE
init|=
literal|1
block|,
name|SES_STATUS_ENCLOSURE_FAIL_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_ENCLOSURE_FAIL_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_ENCLOSURE_WARN_BYTE
init|=
literal|1
block|,
name|SES_STATUS_ENCLOSURE_WARN_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_ENCLOSURE_WARN_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_POWER_OFF_DURATION_BYTE
init|=
literal|2
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_POWER_OFF_DURATION_MASK
init|=
literal|0xFC
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_POWER_OFF_DURATION_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_POWER_OFF_DURATION_MAX_AUTO
init|=
literal|60
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_POWER_OFF_DURATION_MANUAL
init|=
literal|63
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_FAIL_BYTE
init|=
literal|2
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_FAIL_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_FAIL_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_WARN_BYTE
init|=
literal|2
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_WARN_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_ENCLOSURE_REQUESTED_WARN_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_ENCLOSURE_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_enclosure, SES_STATUS_ENCLOSURE, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_ENCLOSURE_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ENCLOSURE_ACCESSORS
argument_list|(
argument|time_until_power_cycle
argument_list|,
argument|TIME_UNTIL_POWER_CYCLE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ENCLOSURE_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ENCLOSURE_ACCESSORS
argument_list|(
argument|warn
argument_list|,
argument|WARN
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ENCLOSURE_ACCESSORS
argument_list|(
argument|requested_power_off_duration
argument_list|,
argument|REQUESTED_POWER_OFF_DURATION
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ENCLOSURE_ACCESSORS
argument_list|(
argument|requested_fail
argument_list|,
argument|REQUESTED_FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_ENCLOSURE_ACCESSORS
argument_list|(
argument|requested_warn
argument_list|,
argument|REQUESTED_WARN
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_ENCLOSURE_ACCESSORS
end_undef

begin_comment
comment|/*------------------- SCSI Port/Transceiver Status Element -------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_scsi_port_or_xcvr
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_scsi_port_or_xcvr_field_data
block|{
name|SES_STATUS_SCSI_PORT_OR_XCVR_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_REPORT_BYTE
init|=
literal|1
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_REPORT_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_REPORT_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_DISABLED_BYTE
init|=
literal|2
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_DISABLED_MASK
init|=
literal|0x10
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_DISABLED_SHIFT
init|=
literal|4
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_LOL_BYTE
init|=
literal|2
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_LOL_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_LOL_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_XMIT_FAIL_BYTE
init|=
literal|2
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_XMIT_FAIL_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_SCSI_PORT_OR_XCVR_XMIT_FAIL_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_SCSI_PORT_OR_XCVR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_scsi_port_or_xcvr, SES_STATUS_SCSI_PORT_OR_XCVR,\ 	       LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_SCSI_PORT_OR_XCVR_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SCSI_PORT_OR_XCVR_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SCSI_PORT_OR_XCVR_ACCESSORS
argument_list|(
argument|report
argument_list|,
argument|REPORT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SCSI_PORT_OR_XCVR_ACCESSORS
argument_list|(
argument|disable
argument_list|,
argument|DISABLED
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SCSI_PORT_OR_XCVR_ACCESSORS
argument_list|(
argument|lol
argument_list|,
argument|LOL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SCSI_PORT_OR_XCVR_ACCESSORS
argument_list|(
argument|xmit_fail
argument_list|,
argument|XMIT_FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_SCSI_PORT_OR_XCVR_ACCESSORS
end_undef

begin_comment
comment|/*------------------------- Language Status Element --------------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_language
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|1
index|]
decl_stmt|;
name|uint8_t
name|language_code
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_language_field_data
block|{
name|SES_STATUS_LANGUAGE_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_LANGUAGE_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_LANGUAGE_IDENT_SHIFT
init|=
literal|7
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_LANGUAGE_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_language, SES_STATUS_LANGUAGE, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_LANGUAGE_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_LANGUAGE_ACCESSORS
end_undef

begin_comment
comment|/*-------------------- Communication Port Status Element ---------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_comm_port
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_comm_port_field_data
block|{
name|SES_STATUS_COMM_PORT_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_COMM_PORT_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_COMM_PORT_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_COMM_PORT_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_COMM_PORT_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_COMM_PORT_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_COMM_PORT_DISABLED_BYTE
init|=
literal|2
block|,
name|SES_STATUS_COMM_PORT_DISABLED_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_COMM_PORT_DISABLED_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_COMM_PORT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_comm_port, SES_STATUS_COMM_PORT, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_COMM_PORT_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COMM_PORT_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_COMM_PORT_ACCESSORS
argument_list|(
argument|disabled
argument_list|,
argument|DISABLED
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_COMM_PORT_ACCESSORS
end_undef

begin_comment
comment|/*---------------------- Voltage Sensor Status Element -----------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_voltage_sensor
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|1
index|]
decl_stmt|;
name|uint8_t
name|voltage
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_voltage_sensor_field_data
block|{
name|SES_STATUS_VOLTAGE_SENSOR_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_VOLTAGE_SENSOR_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_VOLTAGE_SENSOR_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_VOLTAGE_SENSOR_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_VOLTAGE_SENSOR_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_VOLTAGE_SENSOR_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_VOLTAGE_SENSOR_WARN_OVER_BYTE
init|=
literal|0
block|,
name|SES_STATUS_VOLTAGE_SENSOR_WARN_OVER_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_VOLTAGE_SENSOR_WARN_OVER_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_VOLTAGE_SENSOR_WARN_UNDER_BYTE
init|=
literal|0
block|,
name|SES_STATUS_VOLTAGE_SENSOR_WARN_UNDER_MASK
init|=
literal|0x04
block|,
name|SES_STATUS_VOLTAGE_SENSOR_WARN_UNDER_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_VOLTAGE_SENSOR_CRIT_OVER_BYTE
init|=
literal|0
block|,
name|SES_STATUS_VOLTAGE_SENSOR_CRIT_OVER_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_VOLTAGE_SENSOR_CRIT_OVER_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_VOLTAGE_SENSOR_CRIT_UNDER_BYTE
init|=
literal|0
block|,
name|SES_STATUS_VOLTAGE_SENSOR_CRIT_UNDER_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_VOLTAGE_SENSOR_CRIT_UNDER_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_VOLTAGE_SENSOR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_voltage_sensor, SES_STATUS_VOLTAGE_SENSOR,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_VOLTAGE_SENSOR_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_VOLTAGE_SENSOR_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_VOLTAGE_SENSOR_ACCESSORS
argument_list|(
argument|warn_over
argument_list|,
argument|WARN_OVER
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_VOLTAGE_SENSOR_ACCESSORS
argument_list|(
argument|warn_under
argument_list|,
argument|WARN_UNDER
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_VOLTAGE_SENSOR_ACCESSORS
argument_list|(
argument|crit_over
argument_list|,
argument|CRIT_OVER
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_VOLTAGE_SENSOR_ACCESSORS
argument_list|(
argument|crit_under
argument_list|,
argument|CRIT_UNDER
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_VOLTAGE_SENSOR_ACCESSORS
end_undef

begin_comment
comment|/*---------------------- Current Sensor Status Element -----------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_current_sensor
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_current_sensor_field_data
block|{
name|SES_STATUS_CURRENT_SENSOR_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_CURRENT_SENSOR_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_CURRENT_SENSOR_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_CURRENT_SENSOR_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_CURRENT_SENSOR_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_CURRENT_SENSOR_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_CURRENT_SENSOR_WARN_OVER_BYTE
init|=
literal|0
block|,
name|SES_STATUS_CURRENT_SENSOR_WARN_OVER_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_CURRENT_SENSOR_WARN_OVER_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_CURRENT_SENSOR_CRIT_OVER_BYTE
init|=
literal|0
block|,
name|SES_STATUS_CURRENT_SENSOR_CRIT_OVER_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_CURRENT_SENSOR_CRIT_OVER_SHIFT
init|=
literal|1
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_CURRENT_SENSOR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_current_sensor, SES_STATUS_CURRENT_SENSOR,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_CURRENT_SENSOR_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_CURRENT_SENSOR_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_CURRENT_SENSOR_ACCESSORS
argument_list|(
argument|warn_over
argument_list|,
argument|WARN_OVER
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_CURRENT_SENSOR_ACCESSORS
argument_list|(
argument|crit_over
argument_list|,
argument|CRIT_OVER
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_CURRENT_SENSOR_ACCESSORS
end_undef

begin_comment
comment|/*--------------------- SCSI Target Port Status Element ----------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_target_port
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_scsi_target_port_field_data
block|{
name|SES_STATUS_TARGET_PORT_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_TARGET_PORT_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_TARGET_PORT_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_TARGET_PORT_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_TARGET_PORT_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_TARGET_PORT_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_TARGET_PORT_REPORT_BYTE
init|=
literal|1
block|,
name|SES_STATUS_TARGET_PORT_REPORT_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_TARGET_PORT_REPORT_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_TARGET_PORT_ENABLED_BYTE
init|=
literal|2
block|,
name|SES_STATUS_TARGET_PORT_ENABLED_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_TARGET_PORT_ENABLED_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_TARGET_PORT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_target_port, SES_STATUS_TARGET_PORT, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_TARGET_PORT_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_TARGET_PORT_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_TARGET_PORT_ACCESSORS
argument_list|(
argument|report
argument_list|,
argument|REPORT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_TARGET_PORT_ACCESSORS
argument_list|(
argument|enabled
argument_list|,
argument|ENABLED
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_TARGET_PORT_ACCESSORS
end_undef

begin_comment
comment|/*-------------------- SCSI Initiator Port Status Element --------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_initiator_port
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_scsi_initiator_port_field_data
block|{
name|SES_STATUS_INITIATOR_PORT_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_INITIATOR_PORT_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_INITIATOR_PORT_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_INITIATOR_PORT_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_INITIATOR_PORT_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_INITIATOR_PORT_FAIL_SHIFT
init|=
literal|6
block|,
name|SES_STATUS_INITIATOR_PORT_REPORT_BYTE
init|=
literal|1
block|,
name|SES_STATUS_INITIATOR_PORT_REPORT_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_INITIATOR_PORT_REPORT_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_INITIATOR_PORT_ENABLED_BYTE
init|=
literal|2
block|,
name|SES_STATUS_INITIATOR_PORT_ENABLED_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_INITIATOR_PORT_ENABLED_SHIFT
init|=
literal|0
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_INITIATOR_PORT_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_initiator_port, SES_STATUS_INITIATOR_PORT,	\ 	       LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_INITIATOR_PORT_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_INITIATOR_PORT_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_INITIATOR_PORT_ACCESSORS
argument_list|(
argument|report
argument_list|,
argument|REPORT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_INITIATOR_PORT_ACCESSORS
argument_list|(
argument|enabled
argument_list|,
argument|ENABLED
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_INITIATOR_PORT_ACCESSORS
end_undef

begin_comment
comment|/*-------------------- Simple Subenclosure Status Element --------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_simple_subses
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|short_enclosure_status
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_simple_subses_field_data
block|{
name|SES_STATUS_SIMPlE_SUBSES_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SIMPlE_SUBSES_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_SIMPlE_SUBSES_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_SIMPlE_SUBSES_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SIMPlE_SUBSES_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_SIMPlE_SUBSES_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_SIMPlE_SUBSES_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_simple_subses, SES_STATUS_SIMPlE_SUBSES,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_SIMPlE_SUBSES_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SIMPlE_SUBSES_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_SIMPlE_SUBSES_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- SAS Expander Status Element ------------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_sas_expander
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_sas_expander_field_data
block|{
name|SES_STATUS_SAS_EXPANDER_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SAS_EXPANDER_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_SAS_EXPANDER_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_SAS_EXPANDER_FAIL_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SAS_EXPANDER_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_SAS_EXPANDER_FAIL_SHIFT
init|=
literal|6
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_SAS_EXPANDER_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_sas_expander, SES_STATUS_SAS_EXPANDER,	LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_SAS_EXPANDER_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SAS_EXPANDER_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_SAS_EXPANDER_ACCESSORS
end_undef

begin_comment
comment|/*----------------------- SAS Connector Status Element -----------------------*/
end_comment

begin_struct
struct|struct
name|ses_status_sas_connector
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_sas_connector_field_data
block|{
name|SES_STATUS_SAS_CONNECTOR_IDENT_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SAS_CONNECTOR_IDENT_MASK
init|=
literal|0x80
block|,
name|SES_STATUS_SAS_CONNECTOR_IDENT_SHIFT
init|=
literal|7
block|,
name|SES_STATUS_SAS_CONNECTOR_TYPE_BYTE
init|=
literal|0
block|,
name|SES_STATUS_SAS_CONNECTOR_TYPE_MASK
init|=
literal|0x7F
block|,
name|SES_STATUS_SAS_CONNECTOR_TYPE_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_SAS_CONNECTOR_PHYS_LINK_BYTE
init|=
literal|1
block|,
name|SES_STATUS_SAS_CONNECTOR_PHYS_LINK_MASK
init|=
literal|0xFF
block|,
name|SES_STATUS_SAS_CONNECTOR_PHYS_LINK_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_SAS_CONNECTOR_PHYS_LINK_ALL
init|=
literal|0xFF
block|,
name|SES_STATUS_SAS_CONNECTOR_FAIL_BYTE
init|=
literal|2
block|,
name|SES_STATUS_SAS_CONNECTOR_FAIL_MASK
init|=
literal|0x40
block|,
name|SES_STATUS_SAS_CONNECTOR_FAIL_SHIFT
init|=
literal|6
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_SAS_CONNECTOR_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_GETTER(ses_status_sas_connector, SES_STATUS_SAS_CONNECTOR,	\ 		  LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_SAS_CONNECTOR_ACCESSORS
argument_list|(
argument|ident
argument_list|,
argument|IDENT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SAS_CONNECTOR_ACCESSORS
argument_list|(
argument|type
argument_list|,
argument|TYPE
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SAS_CONNECTOR_ACCESSORS
argument_list|(
argument|phys_link
argument_list|,
argument|PHYS_LINK
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_SAS_CONNECTOR_ACCESSORS
argument_list|(
argument|fail
argument_list|,
argument|FAIL
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_SAS_CONNECTOR_ACCESSORS
end_undef

begin_comment
comment|/*------------------------- Universal Status Element -------------------------*/
end_comment

begin_union
union|union
name|ses_status_element
block|{
name|struct
name|ses_status_common
name|common
decl_stmt|;
name|struct
name|ses_status_dev_slot
name|dev_slot
decl_stmt|;
name|struct
name|ses_status_array_dev_slot
name|array_dev_slot
decl_stmt|;
name|struct
name|ses_status_power_supply
name|power_supply
decl_stmt|;
name|struct
name|ses_status_cooling
name|cooling
decl_stmt|;
name|struct
name|ses_status_temp_sensor
name|temp_sensor
decl_stmt|;
name|struct
name|ses_status_door_lock
name|door_lock
decl_stmt|;
name|struct
name|ses_status_audible_alarm
name|audible_alarm
decl_stmt|;
name|struct
name|ses_status_ecc_electronics
name|ecc_electronics
decl_stmt|;
name|struct
name|ses_status_scc_electronics
name|scc_electronics
decl_stmt|;
name|struct
name|ses_status_nv_cache
name|nv_cache
decl_stmt|;
name|struct
name|ses_status_invalid_op_reason
name|invalid_op_reason
decl_stmt|;
name|struct
name|ses_status_ups
name|ups
decl_stmt|;
name|struct
name|ses_status_display
name|display
decl_stmt|;
name|struct
name|ses_status_key_pad_entry
name|key_pad_entry
decl_stmt|;
name|struct
name|ses_status_scsi_port_or_xcvr
name|scsi_port_or_xcvr
decl_stmt|;
name|struct
name|ses_status_language
name|language
decl_stmt|;
name|struct
name|ses_status_comm_port
name|comm_port
decl_stmt|;
name|struct
name|ses_status_voltage_sensor
name|voltage_sensor
decl_stmt|;
name|struct
name|ses_status_current_sensor
name|current_sensor
decl_stmt|;
name|struct
name|ses_status_target_port
name|target_port
decl_stmt|;
name|struct
name|ses_status_initiator_port
name|initiator_port
decl_stmt|;
name|struct
name|ses_status_simple_subses
name|simple_subses
decl_stmt|;
name|struct
name|ses_status_sas_expander
name|sas_expander
decl_stmt|;
name|struct
name|ses_status_sas_connector
name|sas_connector
decl_stmt|;
name|uint8_t
name|bytes
index|[
literal|4
index|]
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*===================== SCSI SES Status Diagnostic Page =====================*/
end_comment

begin_struct
struct|struct
name|ses_status_page
block|{
name|struct
name|ses_page_hdr
name|hdr
decl_stmt|;
name|union
name|ses_status_element
name|elements
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ses_status_page_field_data
block|{
name|SES_STATUS_PAGE_INVOP_MASK
init|=
literal|0x10
block|,
name|SES_STATUS_PAGE_INVOP_SHIFT
init|=
literal|4
block|,
name|SES_STATUS_PAGE_INFO_MASK
init|=
literal|0x08
block|,
name|SES_STATUS_PAGE_INFO_SHIFT
init|=
literal|3
block|,
name|SES_STATUS_PAGE_NON_CRIT_MASK
init|=
literal|0x04
block|,
name|SES_STATUS_PAGE_NON_CRIT_SHIFT
init|=
literal|2
block|,
name|SES_STATUS_PAGE_CRIT_MASK
init|=
literal|0x02
block|,
name|SES_STATUS_PAGE_CRIT_SHIFT
init|=
literal|1
block|,
name|SES_STATUS_PAGE_UNRECOV_MASK
init|=
literal|0x01
block|,
name|SES_STATUS_PAGE_UNRECOV_SHIFT
init|=
literal|0
block|,
name|SES_STATUS_PAGE_CHANGED_MASK
init|=
name|SES_STATUS_PAGE_INVOP_MASK
operator||
name|SES_STATUS_PAGE_INFO_MASK
operator||
name|SES_STATUS_PAGE_NON_CRIT_MASK
operator||
name|SES_STATUS_PAGE_CRIT_MASK
operator||
name|SES_STATUS_PAGE_UNRECOV_MASK
block|,
name|SES_STATUS_PAGE_CHANGED_SHIFT
init|=
literal|0
block|, }
enum|;
end_enum

begin_define
define|#
directive|define
name|GEN_SES_STATUS_PAGE_ACCESSORS
parameter_list|(
name|LCASE
parameter_list|,
name|UCASE
parameter_list|)
define|\
value|GEN_HDR_ACCESSORS(ses_status_page, SES_STATUS_PAGE, LCASE, UCASE)
end_define

begin_macro
name|GEN_SES_STATUS_PAGE_ACCESSORS
argument_list|(
argument|invop
argument_list|,
argument|INVOP
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_PAGE_ACCESSORS
argument_list|(
argument|info
argument_list|,
argument|INFO
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_PAGE_ACCESSORS
argument_list|(
argument|non_crit
argument_list|,
argument|NON_CRIT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_PAGE_ACCESSORS
argument_list|(
argument|crit
argument_list|,
argument|CRIT
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_PAGE_ACCESSORS
argument_list|(
argument|unrecov
argument_list|,
argument|UNRECOV
argument_list|)
end_macro

begin_macro
name|GEN_SES_STATUS_PAGE_ACCESSORS
argument_list|(
argument|changed
argument_list|,
argument|CHANGED
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|GEN_SES_STATUS_PAGE_ACCESSORS
end_undef

begin_comment
comment|/*================ SCSI SES Element Descriptor Diagnostic Page ===============*/
end_comment

begin_struct
struct|struct
name|ses_elem_descr
block|{
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|char
name|description
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_elem_descr_page
block|{
name|struct
name|ses_page_hdr
name|hdr
decl_stmt|;
name|struct
name|ses_elem_descr
name|descrs
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*============ SCSI SES Additional Element Status Diagnostic Page ============*/
end_comment

begin_struct
struct|struct
name|ses_addl_elem_status_page
block|{
name|struct
name|ses_page_hdr
name|hdr
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*====================== Legacy (Deprecated) Structures ======================*/
end_comment

begin_struct
struct|struct
name|ses_control_page_hdr
block|{
name|uint8_t
name|page_code
decl_stmt|;
name|uint8_t
name|control_flags
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|gen_code
index|[
literal|4
index|]
decl_stmt|;
comment|/* Followed by variable length array of descriptors. */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_status_page_hdr
block|{
name|uint8_t
name|page_code
decl_stmt|;
name|uint8_t
name|status_flags
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|gen_code
index|[
literal|4
index|]
decl_stmt|;
comment|/* Followed by variable length array of descriptors. */
block|}
struct|;
end_struct

begin_comment
comment|/* ses_page_hdr.reserved values */
end_comment

begin_comment
comment|/*  * Enclosure Status Diagnostic Page:  * uint8_t	reserved : 3,  * 		invop : 1,  * 		info : 1,  * 		noncritical : 1,  * 		critical : 1,  * 		unrecov : 1;  */
end_comment

begin_define
define|#
directive|define
name|SES_ENCSTAT_UNRECOV
value|0x01
end_define

begin_define
define|#
directive|define
name|SES_ENCSTAT_CRITICAL
value|0x02
end_define

begin_define
define|#
directive|define
name|SES_ENCSTAT_NONCRITICAL
value|0x04
end_define

begin_define
define|#
directive|define
name|SES_ENCSTAT_INFO
value|0x08
end_define

begin_define
define|#
directive|define
name|SES_ENCSTAT_INVOP
value|0x10
end_define

begin_comment
comment|/* Status mask: All of the above OR'd together */
end_comment

begin_define
define|#
directive|define
name|SES_STATUS_MASK
value|0x1f
end_define

begin_define
define|#
directive|define
name|SES_SET_STATUS_MASK
value|0xf
end_define

begin_comment
comment|/* Element Descriptor Diagnostic Page: unused */
end_comment

begin_comment
comment|/* Additional Element Status Diagnostic Page: unused */
end_comment

begin_comment
comment|/* Summary SES Status Defines, Common Status Codes */
end_comment

begin_define
define|#
directive|define
name|SES_OBJSTAT_UNSUPPORTED
value|0
end_define

begin_define
define|#
directive|define
name|SES_OBJSTAT_OK
value|1
end_define

begin_define
define|#
directive|define
name|SES_OBJSTAT_CRIT
value|2
end_define

begin_define
define|#
directive|define
name|SES_OBJSTAT_NONCRIT
value|3
end_define

begin_define
define|#
directive|define
name|SES_OBJSTAT_UNRECOV
value|4
end_define

begin_define
define|#
directive|define
name|SES_OBJSTAT_NOTINSTALLED
value|5
end_define

begin_define
define|#
directive|define
name|SES_OBJSTAT_UNKNOWN
value|6
end_define

begin_define
define|#
directive|define
name|SES_OBJSTAT_NOTAVAIL
value|7
end_define

begin_define
define|#
directive|define
name|SES_OBJSTAT_NOACCESS
value|8
end_define

begin_comment
comment|/*  * For control pages, cstat[0] is the same for the  * enclosure and is common across all device types.  *  * If SESCTL_CSEL is set, then PRDFAIL, DISABLE and RSTSWAP  * are checked, otherwise bits that are specific to the device  * type in the other 3 bytes of cstat or checked.  */
end_comment

begin_define
define|#
directive|define
name|SESCTL_CSEL
value|0x80
end_define

begin_define
define|#
directive|define
name|SESCTL_PRDFAIL
value|0x40
end_define

begin_define
define|#
directive|define
name|SESCTL_DISABLE
value|0x20
end_define

begin_define
define|#
directive|define
name|SESCTL_RSTSWAP
value|0x10
end_define

begin_comment
comment|/* Control bits, Device Elements, byte 2 */
end_comment

begin_define
define|#
directive|define
name|SESCTL_DRVLCK
value|0x40
end_define

begin_comment
comment|/* "DO NOT REMOVE" */
end_comment

begin_define
define|#
directive|define
name|SESCTL_RQSINS
value|0x08
end_define

begin_comment
comment|/* RQST INSERT */
end_comment

begin_define
define|#
directive|define
name|SESCTL_RQSRMV
value|0x04
end_define

begin_comment
comment|/* RQST REMOVE */
end_comment

begin_define
define|#
directive|define
name|SESCTL_RQSID
value|0x02
end_define

begin_comment
comment|/* RQST IDENT */
end_comment

begin_comment
comment|/* Control bits, Device Elements, byte 3 */
end_comment

begin_define
define|#
directive|define
name|SESCTL_RQSFLT
value|0x20
end_define

begin_comment
comment|/* RQST FAULT */
end_comment

begin_define
define|#
directive|define
name|SESCTL_DEVOFF
value|0x10
end_define

begin_comment
comment|/* DEVICE OFF */
end_comment

begin_comment
comment|/* Control bits, Generic, byte 3 */
end_comment

begin_define
define|#
directive|define
name|SESCTL_RQSTFAIL
value|0x40
end_define

begin_define
define|#
directive|define
name|SESCTL_RQSTON
value|0x20
end_define

begin_comment
comment|/*  * Getting text for an object type is a little  * trickier because it's string data that can  * go up to 64 KBytes. Build this union and  * fill the obj_id with the id of the object who's  * help text you want, and if text is available,  * obj_text will be filled in, null terminated.  */
end_comment

begin_typedef
typedef|typedef
union|union
block|{
name|unsigned
name|int
name|obj_id
decl_stmt|;
name|char
name|obj_text
index|[
literal|1
index|]
decl_stmt|;
block|}
name|ses_hlptxt
typedef|;
end_typedef

begin_comment
comment|/*============================================================================*/
end_comment

begin_struct
struct|struct
name|ses_elm_desc_hdr
block|{
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * SES v2 r20 6.1.13 - Element Additional Status diagnostic page  * Tables 26-28 (general), 29-32 (FC), 33-41 (SAS)  *  * Protocol identifier uses definitions in scsi_all.h;  * SPSP_PROTO_FC, SPSP_PROTO_SAS are the only ones used here.  */
end_comment

begin_struct
struct|struct
name|ses_elm_fc_eip_hdr
block|{
name|uint8_t
name|num_phys
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|dev_slot_num
decl_stmt|;
name|uint8_t
name|node_name
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_elm_fc_noneip_hdr
block|{
name|uint8_t
name|num_phys
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|node_name
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_elm_fc_base_hdr
block|{
name|uint8_t
name|num_phys
decl_stmt|;
block|}
struct|;
end_struct

begin_union
union|union
name|ses_elm_fc_hdr
block|{
name|struct
name|ses_elm_fc_base_hdr
name|base_hdr
decl_stmt|;
name|struct
name|ses_elm_fc_eip_hdr
name|eip_hdr
decl_stmt|;
name|struct
name|ses_elm_fc_noneip_hdr
name|noneip_hdr
decl_stmt|;
block|}
union|;
end_union

begin_struct
struct|struct
name|ses_elm_fc_port
block|{
name|uint8_t
name|port_loop_position
decl_stmt|;
name|uint8_t
name|bypass_reason
decl_stmt|;
define|#
directive|define
name|SES_FC_PORT_BYPASS_UNBYPASSED
value|0x00
define|#
directive|define
name|SES_FC_PORT_BYPASS_LINKFAIL_RATE_TOO_HIGH
value|0x10
define|#
directive|define
name|SES_FC_PORT_BYPASS_SYNC_LOSS_RATE_TOO_HIGH
value|0x11
define|#
directive|define
name|SES_FC_PORT_BYPASS_SIGNAL_LOSS_RATE_TOO_HIGH
value|0x12
define|#
directive|define
name|SES_FC_PORT_BYPASS_SEQPROTO_ERR_RATE_TOO_HIGH
value|0x13
define|#
directive|define
name|SES_FC_PORT_BYPASS_INVAL_XMIT_RATE_TOO_HIGH
value|0x14
define|#
directive|define
name|SES_FC_PORT_BYPASS_CRC_ERR_RATE_TOO_HIGH
value|0x15
define|#
directive|define
name|SES_FC_PORT_BYPASS_ERR_RATE_RESERVED_BEGIN
value|0x16
define|#
directive|define
name|SES_FC_PORT_BYPASS_ERR_RATE_RESERVED_END
value|0x1F
define|#
directive|define
name|SES_FC_PORT_BYPASS_LINKFAIL_COUNT_TOO_HIGH
value|0x20
define|#
directive|define
name|SES_FC_PORT_BYPASS_SYNC_LOSS_COUNT_TOO_HIGH
value|0x21
define|#
directive|define
name|SES_FC_PORT_BYPASS_SIGNAL_LOSS_COUNT_TOO_HIGH
value|0x22
define|#
directive|define
name|SES_FC_PORT_BYPASS_SEQPROTO_ERR_COUNT_TOO_HIGH
value|0x23
define|#
directive|define
name|SES_FC_PORT_BYPASS_INVAL_XMIT_COUNT_TOO_HIGH
value|0x24
define|#
directive|define
name|SES_FC_PORT_BYPASS_CRC_ERR_COUNT_TOO_HIGH
value|0x25
define|#
directive|define
name|SES_FC_PORT_BYPASS_ERR_COUNT_RESERVED_BEGIN
value|0x26
define|#
directive|define
name|SES_FC_PORT_BYPASS_ERR_COUNT_RESERVED_END
value|0x2F
define|#
directive|define
name|SES_FC_PORT_BYPASS_RESERVED_BEGIN
value|0x30
define|#
directive|define
name|SES_FC_PORT_BYPASS_RESERVED_END
value|0xBF
define|#
directive|define
name|SES_FC_PORT_BYPASS_VENDOR_SPECIFIC_BEGIN
value|0xC0
define|#
directive|define
name|SES_FC_PORT_BYPASS_VENDOR_SPECIFIC_END
value|0xFF
name|uint8_t
name|port_req_hard_addr
decl_stmt|;
name|uint8_t
name|n_port_id
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|n_port_name
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_elm_sas_device_phy
block|{
name|uint8_t
name|byte0
decl_stmt|;
comment|/* 	 * uint8_t reserved0 : 1, 	 * uint8_t device_type : 3, 	 * uint8_t reserved1 : 4; 	 */
name|uint8_t
name|reserved0
decl_stmt|;
comment|/* Bit positions for initiator and target port protocols */
define|#
directive|define
name|SES_SASOBJ_DEV_PHY_SMP
value|0x2
define|#
directive|define
name|SES_SASOBJ_DEV_PHY_STP
value|0x4
define|#
directive|define
name|SES_SASOBJ_DEV_PHY_SSP
value|0x8
comment|/* Select all of the above protocols */
define|#
directive|define
name|SES_SASOBJ_DEV_PHY_PROTOMASK
value|0xe
name|uint8_t
name|initiator_ports
decl_stmt|;
comment|/* 	 * uint8_t reserved0 : 4, 	 * uint8_t ssp : 1, 	 * uint8_t stp : 1, 	 * uint8_t smp : 1, 	 * uint8_t reserved1 : 3; 	 */
name|uint8_t
name|target_ports
decl_stmt|;
comment|/* 	 * uint8_t sata_port_selector : 1, 	 * uint8_t reserved : 3, 	 * uint8_t ssp : 1, 	 * uint8_t stp : 1, 	 * uint8_t smp : 1, 	 * uint8_t sata_device : 1; 	 */
name|uint8_t
name|parent_addr
index|[
literal|8
index|]
decl_stmt|;
comment|/* SAS address of parent */
name|uint8_t
name|phy_addr
index|[
literal|8
index|]
decl_stmt|;
comment|/* SAS address of this phy */
name|uint8_t
name|phy_id
decl_stmt|;
name|uint8_t
name|reserved1
index|[
literal|7
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function_decl
name|int
name|ses_elm_sas_dev_phy_sata_dev
parameter_list|(
name|struct
name|ses_elm_sas_device_phy
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ses_elm_sas_dev_phy_sata_port
parameter_list|(
name|struct
name|ses_elm_sas_device_phy
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ses_elm_sas_dev_phy_dev_type
parameter_list|(
name|struct
name|ses_elm_sas_device_phy
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_struct
struct|struct
name|ses_elm_sas_expander_phy
block|{
name|uint8_t
name|connector_index
decl_stmt|;
name|uint8_t
name|other_index
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_elm_sas_port_phy
block|{
name|uint8_t
name|phy_id
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|connector_index
decl_stmt|;
name|uint8_t
name|other_index
decl_stmt|;
name|uint8_t
name|phy_addr
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_elm_sas_type0_base_hdr
block|{
name|uint8_t
name|num_phys
decl_stmt|;
name|uint8_t
name|byte1
decl_stmt|;
comment|/* 	 * uint8_t descriptor_type : 2, 	 * uint8_t reserved : 5, 	 * uint8_t not_all_phys : 1; 	 */
define|#
directive|define
name|SES_SASOBJ_TYPE0_NOT_ALL_PHYS
parameter_list|(
name|obj
parameter_list|)
define|\
value|((obj)->byte1& 0x1)
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_elm_sas_type0_eip_hdr
block|{
name|struct
name|ses_elm_sas_type0_base_hdr
name|base
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|dev_slot_num
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_elm_sas_type1_expander_hdr
block|{
name|uint8_t
name|num_phys
decl_stmt|;
name|uint8_t
name|byte1
decl_stmt|;
comment|/* 	 * uint8_t descriptor_type : 2, 	 * uint8_t reserved : 6; 	 */
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|sas_addr
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ses_elm_sas_type1_nonexpander_hdr
block|{
name|uint8_t
name|num_phys
decl_stmt|;
name|uint8_t
name|byte1
decl_stmt|;
comment|/* 	 * uint8_t descriptor_type : 2, 	 * uint8_t reserved : 6; 	 */
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* NB: This is only usable for as long as the headers happen to match */
end_comment

begin_struct
struct|struct
name|ses_elm_sas_base_hdr
block|{
name|uint8_t
name|num_phys
decl_stmt|;
name|uint8_t
name|byte1
decl_stmt|;
comment|/* 	 * uint8_t descriptor_type : 2, 	 * uint8_t descr_specific : 6; 	 */
define|#
directive|define
name|SES_SASOBJ_TYPE_SLOT
value|0
define|#
directive|define
name|SES_SASOBJ_TYPE_OTHER
value|1
block|}
struct|;
end_struct

begin_union
union|union
name|ses_elm_sas_hdr
block|{
name|struct
name|ses_elm_sas_base_hdr
name|base_hdr
decl_stmt|;
name|struct
name|ses_elm_sas_type0_base_hdr
name|type0_noneip
decl_stmt|;
name|struct
name|ses_elm_sas_type0_eip_hdr
name|type0_eip
decl_stmt|;
name|struct
name|ses_elm_sas_type1_expander_hdr
name|type1_exp
decl_stmt|;
name|struct
name|ses_elm_sas_type1_nonexpander_hdr
name|type1_nonexp
decl_stmt|;
block|}
union|;
end_union

begin_function_decl
name|int
name|ses_elm_sas_type0_not_all_phys
parameter_list|(
name|union
name|ses_elm_sas_hdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ses_elm_sas_descr_type
parameter_list|(
name|union
name|ses_elm_sas_hdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ses_elm_addlstatus_base_hdr
block|{
name|uint8_t
name|byte0
decl_stmt|;
comment|/* 	 * uint8_t invalid : 1, 	 * uint8_t reserved : 2, 	 * uint8_t eip : 1, 	 * uint8_t proto_id : 4; 	 */
name|uint8_t
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|ses_elm_addlstatus_proto
parameter_list|(
name|struct
name|ses_elm_addlstatus_base_hdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ses_elm_addlstatus_eip
parameter_list|(
name|struct
name|ses_elm_addlstatus_base_hdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ses_elm_addlstatus_invalid
parameter_list|(
name|struct
name|ses_elm_addlstatus_base_hdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ses_elm_addlstatus_eip_hdr
block|{
name|struct
name|ses_elm_addlstatus_base_hdr
name|base
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|element_index
decl_stmt|;
comment|/* NB: This define (currently) applies to all eip=1 headers */
define|#
directive|define
name|SES_EIP_HDR_EXTRA_LEN
value|2
block|}
struct|;
end_struct

begin_union
union|union
name|ses_elm_addlstatus_descr_hdr
block|{
name|struct
name|ses_elm_addlstatus_base_hdr
name|base
decl_stmt|;
name|struct
name|ses_elm_addlstatus_eip_hdr
name|eip
decl_stmt|;
block|}
union|;
end_union

begin_union
union|union
name|ses_elm_addlstatus_proto_hdr
block|{
name|union
name|ses_elm_fc_hdr
name|fc
decl_stmt|;
name|union
name|ses_elm_sas_hdr
name|sas
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|/*============================= Namespace Cleanup ============================*/
end_comment

begin_undef
undef|#
directive|undef
name|GEN_HDR_ACCESSORS
end_undef

begin_undef
undef|#
directive|undef
name|GEN_ACCESSORS
end_undef

begin_undef
undef|#
directive|undef
name|GEN_HDR_SETTER
end_undef

begin_undef
undef|#
directive|undef
name|GEN_HDR_GETTER
end_undef

begin_undef
undef|#
directive|undef
name|GEN_SETTER
end_undef

begin_undef
undef|#
directive|undef
name|GEN_GETTER
end_undef

begin_undef
undef|#
directive|undef
name|MK_ENUM
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SCSI_SES_H_ */
end_comment

end_unit

