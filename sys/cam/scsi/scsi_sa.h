begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Structure and function declarations for the  * SCSI Sequential Access Peripheral driver for CAM.  *  * Copyright (c) 1999, 2000 Matthew Jacob  * Copyright (c) 2013, 2014, 2015 Spectra Logic Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification, immediately at the beginning of the file.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCSI_SCSI_SA_H
end_ifndef

begin_define
define|#
directive|define
name|_SCSI_SCSI_SA_H
value|1
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_struct
struct|struct
name|scsi_read_block_limits
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_read_block_limits_data
block|{
name|u_int8_t
name|gran
decl_stmt|;
define|#
directive|define
name|RBL_GRAN_MASK
value|0x1F
define|#
directive|define
name|RBL_GRAN
parameter_list|(
name|rblim
parameter_list|)
value|((rblim)->gran& RBL_GRAN_MASK)
name|u_int8_t
name|maximum
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|minimum
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_sa_rw
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|sli_fixed
decl_stmt|;
define|#
directive|define
name|SAR_SLI
value|0x02
define|#
directive|define
name|SARW_FIXED
value|0x01
name|u_int8_t
name|length
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_load_unload
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|immediate
decl_stmt|;
define|#
directive|define
name|SLU_IMMED
value|0x01
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|eot_reten_load
decl_stmt|;
define|#
directive|define
name|SLU_EOT
value|0x04
define|#
directive|define
name|SLU_RETEN
value|0x02
define|#
directive|define
name|SLU_LOAD
value|0x01
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_rewind
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|immediate
decl_stmt|;
define|#
directive|define
name|SREW_IMMED
value|0x01
name|u_int8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|SS_BLOCKS
block|,
name|SS_FILEMARKS
block|,
name|SS_SEQFILEMARKS
block|,
name|SS_EOD
block|,
name|SS_SETMARKS
block|,
name|SS_SEQSETMARKS
block|}
name|scsi_space_code
typedef|;
end_typedef

begin_struct
struct|struct
name|scsi_space
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|code
decl_stmt|;
define|#
directive|define
name|SREW_IMMED
value|0x01
name|u_int8_t
name|count
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_write_filemarks
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SWFMRK_IMMED
value|0x01
define|#
directive|define
name|SWFMRK_WSMK
value|0x02
name|u_int8_t
name|num_marks
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Reserve and release unit have the same exact cdb format, but different  * opcodes.  */
end_comment

begin_struct
struct|struct
name|scsi_reserve_release_unit
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|lun_thirdparty
decl_stmt|;
define|#
directive|define
name|SRRU_LUN_MASK
value|0xE0
define|#
directive|define
name|SRRU_3RD_PARTY
value|0x10
define|#
directive|define
name|SRRU_3RD_SHAMT
value|1
define|#
directive|define
name|SRRU_3RD_MASK
value|0xE
name|u_int8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Erase a tape  */
end_comment

begin_struct
struct|struct
name|scsi_erase
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|lun_imm_long
decl_stmt|;
define|#
directive|define
name|SE_LUN_MASK
value|0xE0
define|#
directive|define
name|SE_LONG
value|0x1
define|#
directive|define
name|SE_IMMED
value|0x2
name|u_int8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Set tape capacity.  */
end_comment

begin_struct
struct|struct
name|scsi_set_capacity
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte1
decl_stmt|;
define|#
directive|define
name|SA_SSC_IMMED
value|0x01
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|cap_proportion
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Format tape media.  The CDB opcode is the same as the disk-specific  * FORMAT UNIT command, but the fields are different inside the CDB.  Thus  * the reason for a separate definition here.  */
end_comment

begin_struct
struct|struct
name|scsi_format_medium
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte1
decl_stmt|;
define|#
directive|define
name|SFM_IMMED
value|0x01
define|#
directive|define
name|SFM_VERIFY
value|0x02
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SFM_FORMAT_DEFAULT
value|0x00
define|#
directive|define
name|SFM_FORMAT_PARTITION
value|0x01
define|#
directive|define
name|SFM_FORMAT_DEF_PART
value|0x02
define|#
directive|define
name|SFM_FORMAT_MASK
value|0x0f
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_allow_overwrite
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|reserved1
decl_stmt|;
name|u_int8_t
name|allow_overwrite
decl_stmt|;
define|#
directive|define
name|SAO_ALLOW_OVERWRITE_DISABLED
value|0x00
define|#
directive|define
name|SAO_ALLOW_OVERWRITE_CUR_POS
value|0x01
define|#
directive|define
name|SAO_ALLOW_OVERWRITE_FORMAT
value|0x02
name|u_int8_t
name|partition
decl_stmt|;
name|u_int8_t
name|logical_id
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|reserved2
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Dev specific mode page masks.  */
end_comment

begin_define
define|#
directive|define
name|SMH_SA_WP
value|0x80
end_define

begin_define
define|#
directive|define
name|SMH_SA_BUF_MODE_MASK
value|0x70
end_define

begin_define
define|#
directive|define
name|SMH_SA_BUF_MODE_NOBUF
value|0x00
end_define

begin_define
define|#
directive|define
name|SMH_SA_BUF_MODE_SIBUF
value|0x10
end_define

begin_comment
comment|/* Single-Initiator buffering */
end_comment

begin_define
define|#
directive|define
name|SMH_SA_BUF_MODE_MIBUF
value|0x20
end_define

begin_comment
comment|/* Multi-Initiator buffering */
end_comment

begin_define
define|#
directive|define
name|SMH_SA_SPEED_MASK
value|0x0F
end_define

begin_define
define|#
directive|define
name|SMH_SA_SPEED_DEFAULT
value|0x00
end_define

begin_comment
comment|/*  * Sequential-access specific mode page numbers.  */
end_comment

begin_define
define|#
directive|define
name|SA_DEVICE_CONFIGURATION_PAGE
value|0x10
end_define

begin_define
define|#
directive|define
name|SA_MEDIUM_PARTITION_PAGE_1
value|0x11
end_define

begin_define
define|#
directive|define
name|SA_MEDIUM_PARTITION_PAGE_2
value|0x12
end_define

begin_define
define|#
directive|define
name|SA_MEDIUM_PARTITION_PAGE_3
value|0x13
end_define

begin_define
define|#
directive|define
name|SA_MEDIUM_PARTITION_PAGE_4
value|0x14
end_define

begin_define
define|#
directive|define
name|SA_DATA_COMPRESSION_PAGE
value|0x0f
end_define

begin_comment
comment|/* SCSI-3 */
end_comment

begin_comment
comment|/*  * Mode page definitions.  */
end_comment

begin_comment
comment|/* See SCSI-II spec 9.3.3.1 */
end_comment

begin_struct
struct|struct
name|scsi_dev_conf_page
block|{
name|u_int8_t
name|pagecode
decl_stmt|;
comment|/* 0x10 */
name|u_int8_t
name|pagelength
decl_stmt|;
comment|/* 0x0e */
name|u_int8_t
name|byte2
decl_stmt|;
comment|/* CAP, CAF, Active Format */
name|u_int8_t
name|active_partition
decl_stmt|;
name|u_int8_t
name|wb_full_ratio
decl_stmt|;
name|u_int8_t
name|rb_empty_ratio
decl_stmt|;
name|u_int8_t
name|wrdelay_time
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|byte8
decl_stmt|;
define|#
directive|define
name|SA_DBR
value|0x80
comment|/* data buffer recovery */
define|#
directive|define
name|SA_BIS
value|0x40
comment|/* block identifiers supported */
define|#
directive|define
name|SA_RSMK
value|0x20
comment|/* report setmarks */
define|#
directive|define
name|SA_AVC
value|0x10
comment|/* automatic velocity control */
define|#
directive|define
name|SA_SOCF_MASK
value|0x0c
comment|/* stop on consecutive formats */
define|#
directive|define
name|SA_RBO
value|0x02
comment|/* recover buffer order */
define|#
directive|define
name|SA_REW
value|0x01
comment|/* report early warning */
name|u_int8_t
name|gap_size
decl_stmt|;
name|u_int8_t
name|byte10
decl_stmt|;
comment|/* from SCSI-3: SSC-4 Working draft (2/14) 8.3.3 */
define|#
directive|define
name|SA_EOD_DEF_MASK
value|0xe0
comment|/* EOD defined */
define|#
directive|define
name|SA_EEG
value|0x10
comment|/* Enable EOD Generation */
define|#
directive|define
name|SA_SEW
value|0x08
comment|/* Synchronize at Early Warning */
define|#
directive|define
name|SA_SOFT_WP
value|0x04
comment|/* Software Write Protect */
define|#
directive|define
name|SA_BAML
value|0x02
comment|/* Block Address Mode Lock */
define|#
directive|define
name|SA_BAM
value|0x01
comment|/* Block Address Mode */
name|u_int8_t
name|ew_bufsize
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|sel_comp_alg
decl_stmt|;
define|#
directive|define
name|SA_COMP_NONE
value|0x00
define|#
directive|define
name|SA_COMP_DEFAULT
value|0x01
comment|/* the following is 'reserved' in SCSI-2 but is defined in SSC-r22 */
name|u_int8_t
name|extra_wp
decl_stmt|;
define|#
directive|define
name|SA_ASOC_WP
value|0x04
comment|/* Associated Write Protect */
define|#
directive|define
name|SA_PERS_WP
value|0x02
comment|/* Persistent Write Protect */
define|#
directive|define
name|SA_PERM_WP
value|0x01
comment|/* Permanent Write Protect */
block|}
struct|;
end_struct

begin_comment
comment|/* from SCSI-3: SSC-Rev10 (6/97) */
end_comment

begin_struct
struct|struct
name|scsi_data_compression_page
block|{
name|u_int8_t
name|page_code
decl_stmt|;
comment|/* 0x0f */
name|u_int8_t
name|page_length
decl_stmt|;
comment|/* 0x0e */
name|u_int8_t
name|dce_and_dcc
decl_stmt|;
define|#
directive|define
name|SA_DCP_DCE
value|0x80
comment|/* Data compression enable */
define|#
directive|define
name|SA_DCP_DCC
value|0x40
comment|/* Data compression capable */
name|u_int8_t
name|dde_and_red
decl_stmt|;
define|#
directive|define
name|SA_DCP_DDE
value|0x80
comment|/* Data decompression enable */
define|#
directive|define
name|SA_DCP_RED_MASK
value|0x60
comment|/* Report Exception on Decomp. */
define|#
directive|define
name|SA_DCP_RED_SHAMT
value|5
define|#
directive|define
name|SA_DCP_RED_0
value|0x00
define|#
directive|define
name|SA_DCP_RED_1
value|0x20
define|#
directive|define
name|SA_DCP_RED_2
value|0x40
name|u_int8_t
name|comp_algorithm
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|decomp_algorithm
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
union|union
block|{
struct|struct
block|{
name|u_int8_t
name|pagecode
decl_stmt|,
name|pagelength
decl_stmt|;
block|}
name|hdr
struct|;
name|struct
name|scsi_dev_conf_page
name|dconf
decl_stmt|;
name|struct
name|scsi_data_compression_page
name|dcomp
decl_stmt|;
block|}
name|sa_comp_t
typedef|;
end_typedef

begin_comment
comment|/*  * Control Data Protection subpage.  This is as defined in SSC3r03.  */
end_comment

begin_struct
struct|struct
name|scsi_control_data_prot_subpage
block|{
name|uint8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SA_CTRL_DP_PAGE_CODE
value|0x0a
name|uint8_t
name|subpage_code
decl_stmt|;
define|#
directive|define
name|SA_CTRL_DP_SUBPAGE_CODE
value|0xf0
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|prot_method
decl_stmt|;
define|#
directive|define
name|SA_CTRL_DP_NO_LBP
value|0x00
define|#
directive|define
name|SA_CTRL_DP_REED_SOLOMON
value|0x01
define|#
directive|define
name|SA_CTRL_DP_METHOD_MAX
value|0xff
name|uint8_t
name|pi_length
decl_stmt|;
define|#
directive|define
name|SA_CTRL_DP_PI_LENGTH_MASK
value|0x3f
define|#
directive|define
name|SA_CTRL_DP_RS_LENGTH
value|4
name|uint8_t
name|prot_bits
decl_stmt|;
define|#
directive|define
name|SA_CTRL_DP_LBP_W
value|0x80
define|#
directive|define
name|SA_CTRL_DP_LBP_R
value|0x40
define|#
directive|define
name|SA_CTRL_DP_RBDP
value|0x20
name|uint8_t
name|reserved
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is the Read/Write Control mode page used on IBM Enterprise Tape  * Drives.  They are known as 3592, TS, or Jaguar drives.  The SCSI inquiry  * data will show a Product ID "03592XXX", where XXX is 'J1A', 'E05' (TS1120),  * 'E06' (TS1130), 'E07' (TS1140) or 'E08' (TS1150).  *  * This page definition is current as of the 3592 SCSI Reference v6,  * released on December 16th, 2014.  */
end_comment

begin_struct
struct|struct
name|scsi_tape_ibm_rw_control
block|{
name|uint8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SA_IBM_RW_CTRL_PAGE_CODE
value|0x25
name|uint8_t
name|page_length
decl_stmt|;
name|uint8_t
name|ignore_seq_checks
decl_stmt|;
define|#
directive|define
name|SA_IBM_RW_CTRL_LOC_IGNORE_SEQ
value|0x04
define|#
directive|define
name|SA_IBM_RW_CTRL_SPC_BLK_IGNORE_SEQ
value|0x02
define|#
directive|define
name|SA_IBM_RW_CTRL_SPC_FM_IGNORE_SEQ
value|0x01
name|uint8_t
name|ignore_data_checks
decl_stmt|;
define|#
directive|define
name|SA_IBM_RW_CTRL_LOC_IGNORE_DATA
value|0x04
define|#
directive|define
name|SA_IBM_RW_CTRL_SPC_BLK_IGNORE_DATA
value|0x02
define|#
directive|define
name|SA_IBM_RW_CTRL_SPC_FM_IGNORE_DATA
value|0x01
name|uint8_t
name|reserved1
decl_stmt|;
name|uint8_t
name|leop_method
decl_stmt|;
define|#
directive|define
name|SA_IBM_RW_CTRL_LEOP_DEFAULT
value|0x00
define|#
directive|define
name|SA_IBM_RW_CTRL_LEOP_MAX_CAP
value|0x01
define|#
directive|define
name|SA_IBM_RW_CTRL_LEOP_CONST_CAP
value|0x02
name|uint8_t
name|leop_ew
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|byte8
decl_stmt|;
define|#
directive|define
name|SA_IBM_RW_CTRL_DISABLE_FASTSYNC
value|0x80
define|#
directive|define
name|SA_IBM_RW_CTRL_DISABLE_SKIPSYNC
value|0x40
define|#
directive|define
name|SA_IBM_RW_CTRL_DISABLE_CROSS_EOD
value|0x08
define|#
directive|define
name|SA_IBM_RW_CTRL_DISABLE_CROSS_PERM_ERR
value|0x04
define|#
directive|define
name|SA_IBM_RW_CTRL_REPORT_SEG_EW
value|0x02
define|#
directive|define
name|SA_IBM_RW_CTRL_REPORT_HOUSEKEEPING_ERR
value|0x01
name|uint8_t
name|default_write_dens_bop_0
decl_stmt|;
name|uint8_t
name|pending_write_dens_bop_0
decl_stmt|;
name|uint8_t
name|reserved2
index|[
literal|21
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_tape_read_position
block|{
name|u_int8_t
name|opcode
decl_stmt|;
comment|/* READ_POSITION */
name|u_int8_t
name|byte1
decl_stmt|;
comment|/* set LSB to read hardware block pos */
define|#
directive|define
name|SA_RPOS_SHORT_FORM
value|0x00
define|#
directive|define
name|SA_RPOS_SHORT_VENDOR
value|0x01
define|#
directive|define
name|SA_RPOS_LONG_FORM
value|0x06
define|#
directive|define
name|SA_RPOS_EXTENDED_FORM
value|0x08
name|u_int8_t
name|reserved
index|[
literal|5
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_tape_position_data
block|{
comment|/* Short Form */
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|SA_RPOS_BOP
value|0x80
comment|/* Beginning of Partition */
define|#
directive|define
name|SA_RPOS_EOP
value|0x40
comment|/* End of Partition */
define|#
directive|define
name|SA_RPOS_BCU
value|0x20
comment|/* Block Count Unknown (SCSI3) */
define|#
directive|define
name|SA_RPOS_BYCU
value|0x10
comment|/* Byte Count Unknown (SCSI3) */
define|#
directive|define
name|SA_RPOS_BPU
value|0x04
comment|/* Block Position Unknown */
define|#
directive|define
name|SA_RPOS_PERR
value|0x02
comment|/* Position Error (SCSI3) */
define|#
directive|define
name|SA_RPOS_BPEW
value|0x01
comment|/* Beyond Programmable Early Warning */
define|#
directive|define
name|SA_RPOS_UNCERTAIN
value|SA_RPOS_BPU
name|u_int8_t
name|partition
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|firstblk
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|lastblk
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|reserved2
decl_stmt|;
name|u_int8_t
name|nbufblk
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|nbufbyte
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_tape_position_long_data
block|{
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|SA_RPOS_LONG_BOP
value|0x80
comment|/* Beginning of Partition */
define|#
directive|define
name|SA_RPOS_LONG_EOP
value|0x40
comment|/* End of Partition */
define|#
directive|define
name|SA_RPOS_LONG_MPU
value|0x08
comment|/* Mark Position Unknown */
define|#
directive|define
name|SA_RPOS_LONG_LONU
value|0x04
comment|/* Logical Object Number Unknown */
define|#
directive|define
name|SA_RPOS_LONG_BPEW
value|0x01
comment|/* Beyond Programmable Early Warning */
name|u_int8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|partition
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|logical_object_num
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|logical_file_num
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|set_id
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_tape_position_ext_data
block|{
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|SA_RPOS_EXT_BOP
value|0x80
comment|/* Beginning of Partition */
define|#
directive|define
name|SA_RPOS_EXT_EOP
value|0x40
comment|/* End of Partition */
define|#
directive|define
name|SA_RPOS_EXT_LOCU
value|0x20
comment|/* Logical Object Count Unknown */
define|#
directive|define
name|SA_RPOS_EXT_BYCU
value|0x10
comment|/* Byte Count Unknown */
define|#
directive|define
name|SA_RPOS_EXT_LOLU
value|0x04
comment|/* Logical Object Location Unknown */
define|#
directive|define
name|SA_RPOS_EXT_PERR
value|0x02
comment|/* Position Error */
define|#
directive|define
name|SA_RPOS_EXT_BPEW
value|0x01
comment|/* Beyond Programmable Early Warning */
name|u_int8_t
name|partition
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|num_objects
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|first_object
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|last_object
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|bytes_in_buffer
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_tape_locate
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte1
decl_stmt|;
define|#
directive|define
name|SA_SPOS_IMMED
value|0x01
define|#
directive|define
name|SA_SPOS_CP
value|0x02
define|#
directive|define
name|SA_SPOS_BT
value|0x04
name|u_int8_t
name|reserved1
decl_stmt|;
name|u_int8_t
name|blkaddr
index|[
literal|4
index|]
decl_stmt|;
define|#
directive|define
name|SA_SPOS_MAX_BLK
value|0xffffffff
name|u_int8_t
name|reserved2
decl_stmt|;
name|u_int8_t
name|partition
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_locate_16
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte1
decl_stmt|;
define|#
directive|define
name|SA_LC_IMMEDIATE
value|0x01
define|#
directive|define
name|SA_LC_CP
value|0x02
define|#
directive|define
name|SA_LC_DEST_TYPE_MASK
value|0x38
define|#
directive|define
name|SA_LC_DEST_TYPE_SHIFT
value|3
define|#
directive|define
name|SA_LC_DEST_OBJECT
value|0x00
define|#
directive|define
name|SA_LC_DEST_FILE
value|0x01
define|#
directive|define
name|SA_LC_DEST_SET
value|0x02
define|#
directive|define
name|SA_LC_DEST_EOD
value|0x03
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SA_LC_BAM_IMPLICIT
value|0x00
define|#
directive|define
name|SA_LC_BAM_EXPLICIT
value|0x01
name|u_int8_t
name|partition
decl_stmt|;
name|u_int8_t
name|logical_id
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_report_density_support
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte1
decl_stmt|;
define|#
directive|define
name|SRDS_MEDIA
value|0x01
define|#
directive|define
name|SRDS_MEDIUM_TYPE
value|0x02
name|u_int8_t
name|reserved
index|[
literal|5
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|SRDS_MAX_LENGTH
value|0xffff
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_density_hdr
block|{
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|descriptor
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_density_data
block|{
name|u_int8_t
name|primary_density_code
decl_stmt|;
name|u_int8_t
name|secondary_density_code
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SDD_DLV
value|0x01
define|#
directive|define
name|SDD_DEFLT
value|0x20
define|#
directive|define
name|SDD_DUP
value|0x40
define|#
directive|define
name|SDD_WRTOK
value|0x80
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|SDD_DEFAULT_LENGTH
value|52
name|u_int8_t
name|bits_per_mm
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|media_width
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|tracks
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|capacity
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|assigning_org
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|density_name
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|description
index|[
literal|20
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_medium_type_data
block|{
name|u_int8_t
name|medium_type
decl_stmt|;
name|u_int8_t
name|reserved1
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|SMTD_DEFAULT_LENGTH
value|52
name|u_int8_t
name|num_density_codes
decl_stmt|;
name|u_int8_t
name|primary_density_codes
index|[
literal|9
index|]
decl_stmt|;
name|u_int8_t
name|media_width
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|medium_length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|reserved2
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|assigning_org
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|medium_type_name
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|description
index|[
literal|20
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Manufacturer-assigned Serial Number VPD page.  * Current as of SSC-5r03, 28 September 2016.  */
end_comment

begin_struct
struct|struct
name|scsi_vpd_mfg_serial_number
block|{
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SVPD_MFG_SERIAL_NUMBER_PAGE_CODE
value|0xB1
name|u_int8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|mfg_serial_num
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Security Protocol Specific values for the Tape Data Encryption protocol  * (0x20) used with SECURITY PROTOCOL IN.  See below for values used with  * SECURITY PROTOCOL OUT.  Current as of SSC4r03.  */
end_comment

begin_define
define|#
directive|define
name|TDE_IN_SUPPORT_PAGE
value|0x0000
end_define

begin_define
define|#
directive|define
name|TDE_OUT_SUPPORT_PAGE
value|0x0001
end_define

begin_define
define|#
directive|define
name|TDE_DATA_ENC_CAP_PAGE
value|0x0010
end_define

begin_define
define|#
directive|define
name|TDE_SUPPORTED_KEY_FORMATS_PAGE
value|0x0011
end_define

begin_define
define|#
directive|define
name|TDE_DATA_ENC_MAN_CAP_PAGE
value|0x0012
end_define

begin_define
define|#
directive|define
name|TDE_DATA_ENC_STATUS_PAGE
value|0x0020
end_define

begin_define
define|#
directive|define
name|TDE_NEXT_BLOCK_ENC_STATUS_PAGE
value|0x0021
end_define

begin_define
define|#
directive|define
name|TDE_GET_ENC_MAN_ATTR_PAGE
value|0x0022
end_define

begin_define
define|#
directive|define
name|TDE_RANDOM_NUM_PAGE
value|0x0030
end_define

begin_define
define|#
directive|define
name|TDE_KEY_WRAP_PK_PAGE
value|0x0031
end_define

begin_comment
comment|/*  * Tape Data Encryption protocol pages used with SECURITY PROTOCOL IN and  * SECURITY PROTOCOL OUT.  */
end_comment

begin_comment
comment|/*  * Tape Data Encryption In Support page (0x0000).  */
end_comment

begin_struct
struct|struct
name|tde_in_support_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_codes
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption Out Support page (0x0001).  */
end_comment

begin_struct
struct|struct
name|tde_out_support_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_codes
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Logical block encryption algorithm descriptor.  This is reported in the  * Data Encryption Capabilities page.  */
end_comment

begin_struct
struct|struct
name|tde_block_enc_alg_desc
block|{
name|uint8_t
name|alg_index
decl_stmt|;
name|uint8_t
name|reserved1
decl_stmt|;
name|uint8_t
name|desc_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|byte4
decl_stmt|;
define|#
directive|define
name|TDE_BEA_AVFMV
value|0x80
define|#
directive|define
name|TDE_BEA_SDK_C
value|0x40
define|#
directive|define
name|TDE_BEA_MAC_C
value|0x20
define|#
directive|define
name|TDE_BEA_DELB_C
value|0x10
define|#
directive|define
name|TDE_BEA_DECRYPT_C_MASK
value|0x0c
define|#
directive|define
name|TDE_BEA_DECRYPT_C_EXT
value|0x0c
define|#
directive|define
name|TDE_BEA_DECRYPT_C_HARD
value|0x08
define|#
directive|define
name|TDE_BEA_DECRYPT_C_SOFT
value|0x04
define|#
directive|define
name|TDE_BEA_DECRYPT_C_NO_CAP
value|0x00
define|#
directive|define
name|TDE_BEA_ENCRYPT_C_MASK
value|0x03
define|#
directive|define
name|TDE_BEA_ENCRYPT_C_EXT
value|0x03
define|#
directive|define
name|TDE_BEA_ENCRYPT_C_HARD
value|0x02
define|#
directive|define
name|TDE_BEA_ENCRYPT_C_SOFT
value|0x01
define|#
directive|define
name|TDE_BEA_ENCRYPT_C_NO_CAP
value|0x00
name|uint8_t
name|byte5
decl_stmt|;
define|#
directive|define
name|TDE_BEA_AVFCLP_MASK
value|0xc0
define|#
directive|define
name|TDE_BEA_AVFCLP_VALID
value|0x80
define|#
directive|define
name|TDE_BEA_AVFCLP_NOT_VALID
value|0x40
define|#
directive|define
name|TDE_BEA_AVFCLP_NOT_APP
value|0x00
define|#
directive|define
name|TDE_BEA_NONCE_C_MASK
value|0x30
define|#
directive|define
name|TDE_BEA_NONCE_C_SUPPORTED
value|0x30
define|#
directive|define
name|TDE_BEA_NONCE_C_PROVIDED
value|0x20
define|#
directive|define
name|TDE_BEA_NONCE_C_GENERATED
value|0x10
define|#
directive|define
name|TDE_BEA_NONCE_C_NOT_REQUIRED
value|0x00
define|#
directive|define
name|TDE_BEA_KADF_C
value|0x08
define|#
directive|define
name|TDE_BEA_VCELB_C
value|0x04
define|#
directive|define
name|TDE_BEA_UKADF
value|0x02
define|#
directive|define
name|TDE_BEA_AKADF
value|0x01
name|uint8_t
name|max_unauth_key_bytes
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|max_auth_key_bytes
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|lbe_key_size
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|byte12
decl_stmt|;
define|#
directive|define
name|TDE_BEA_DKAD_C_MASK
value|0xc0
define|#
directive|define
name|TDE_BEA_DKAD_C_CAPABLE
value|0xc0
define|#
directive|define
name|TDE_BEA_DKAD_C_NOT_ALLOWED
value|0x80
define|#
directive|define
name|TDE_BEA_DKAD_C_REQUIRED
value|0x40
define|#
directive|define
name|TDE_BEA_EEMC_C_MASK
value|0x30
define|#
directive|define
name|TDE_BEA_EEMC_C_ALLOWED
value|0x20
define|#
directive|define
name|TDE_BEA_EEMC_C_NOT_ALLOWED
value|0x10
define|#
directive|define
name|TDE_BEA_EEMC_C_NOT_SPECIFIED
value|0x00
comment|/* 	 * Raw Decryption Mode Control Capabilities (RDMC_C) field.  The 	 * descriptions are too complex to represent as a simple name. 	 */
define|#
directive|define
name|TDE_BEA_RDMC_C_MASK
value|0x0e
define|#
directive|define
name|TDE_BEA_RDMC_C_MODE_7
value|0x0e
define|#
directive|define
name|TDE_BEA_RDMC_C_MODE_6
value|0x0c
define|#
directive|define
name|TDE_BEA_RDMC_C_MODE_5
value|0x0a
define|#
directive|define
name|TDE_BEA_RDMC_C_MODE_4
value|0x08
define|#
directive|define
name|TDE_BEA_RDMC_C_MODE_1
value|0x02
define|#
directive|define
name|TDE_BEA_EAREM
value|0x01
name|uint8_t
name|byte13
decl_stmt|;
define|#
directive|define
name|TDE_BEA_MAX_EEDKS_MASK
value|0x0f
name|uint8_t
name|msdk_count
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|max_eedk_size
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|reserved2
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|security_algo_code
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Data Encryption Capabilities page (0x0010).  */
end_comment

begin_struct
struct|struct
name|tde_data_enc_cap_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
decl_stmt|;
name|uint8_t
name|byte4
decl_stmt|;
define|#
directive|define
name|DATA_ENC_CAP_EXTDECC_MASK
value|0x0c
define|#
directive|define
name|DATA_ENC_CAP_EXTDECC_NOT_REPORTED
value|0x00
define|#
directive|define
name|DATA_ENC_CAP_EXTDECC_NOT_CAPABLE
value|0x04
define|#
directive|define
name|DATA_ENC_CAP_EXTDECC_CAPABLE
value|0x08
define|#
directive|define
name|DATA_ENC_CAP_CFG_P_MASK
value|0x03
define|#
directive|define
name|DATA_ENC_CAP_CFG_P_NOT_REPORTED
value|0x00
define|#
directive|define
name|DATA_ENC_CAP_CFG_P_ALLOWED
value|0x01
define|#
directive|define
name|DATA_ENC_CAP_CFG_P_NOT_ALLOWED
value|0x02
name|uint8_t
name|reserved
index|[
literal|15
index|]
decl_stmt|;
name|struct
name|tde_block_enc_alg_desc
name|alg_descs
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption Supported Key Formats page (0x0011).  */
end_comment

begin_struct
struct|struct
name|tde_supported_key_formats_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|key_formats_list
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption Management Capabilities page (0x0012).  */
end_comment

begin_struct
struct|struct
name|tde_data_enc_man_cap_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|byte4
decl_stmt|;
define|#
directive|define
name|TDE_DEMC_LOCK_C
value|0x01
name|uint8_t
name|byte5
decl_stmt|;
define|#
directive|define
name|TDE_DEMC_CKOD_C
value|0x04
define|#
directive|define
name|TDE_DEMC_CKORP_C
value|0x02
define|#
directive|define
name|TDE_DEMC_CKORL_C
value|0x01
name|uint8_t
name|reserved1
decl_stmt|;
name|uint8_t
name|byte7
decl_stmt|;
define|#
directive|define
name|TDE_DEMC_AITN_C
value|0x04
define|#
directive|define
name|TDE_DEMC_LOCAL_C
value|0x02
define|#
directive|define
name|TDE_DEMC_PUBLIC_C
value|0x01
name|uint8_t
name|reserved2
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption Status Page (0x0020).  */
end_comment

begin_struct
struct|struct
name|tde_data_enc_status_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|scope
decl_stmt|;
define|#
directive|define
name|TDE_DES_IT_NEXUS_SCOPE_MASK
value|0xe0
define|#
directive|define
name|TDE_DES_LBE_SCOPE_MASK
value|0x07
name|uint8_t
name|encryption_mode
decl_stmt|;
name|uint8_t
name|decryption_mode
decl_stmt|;
name|uint8_t
name|algo_index
decl_stmt|;
name|uint8_t
name|key_instance_counter
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|byte12
decl_stmt|;
define|#
directive|define
name|TDE_DES_PARAM_CTRL_MASK
value|0x70
define|#
directive|define
name|TDE_DES_PARAM_CTRL_MGMT
value|0x40
define|#
directive|define
name|TDE_DES_PARAM_CTRL_CHANGER
value|0x30
define|#
directive|define
name|TDE_DES_PARAM_CTRL_DRIVE
value|0x20
define|#
directive|define
name|TDE_DES_PARAM_CTRL_EXT
value|0x10
define|#
directive|define
name|TDE_DES_PARAM_CTRL_NOT_REPORTED
value|0x00
define|#
directive|define
name|TDE_DES_VCELB
value|0x08
define|#
directive|define
name|TDE_DES_CEEMS_MASK
value|0x06
define|#
directive|define
name|TDE_DES_RDMD
value|0x01
name|uint8_t
name|enc_params_kad_format
decl_stmt|;
name|uint8_t
name|asdk_count
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|key_assoc_data_desc
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption Next Block Encryption Status page (0x0021).  */
end_comment

begin_struct
struct|struct
name|tde_next_block_enc_status_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|logical_obj_number
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|status
decl_stmt|;
define|#
directive|define
name|TDE_NBES_COMP_STATUS_MASK
value|0xf0
define|#
directive|define
name|TDE_NBES_COMP_INCAPABLE
value|0x00
define|#
directive|define
name|TDE_NBES_COMP_NOT_YET
value|0x10
define|#
directive|define
name|TDE_NBES_COMP_NOT_A_BLOCK
value|0x20
define|#
directive|define
name|TDE_NBES_COMP_NOT_COMPRESSED
value|0x30
define|#
directive|define
name|TDE_NBES_COMP_COMPRESSED
value|0x40
define|#
directive|define
name|TDE_NBES_ENC_STATUS_MASK
value|0x0f
define|#
directive|define
name|TDE_NBES_ENC_INCAPABLE
value|0x00
define|#
directive|define
name|TDE_NBES_ENC_NOT_YET
value|0x01
define|#
directive|define
name|TDE_NBES_ENC_NOT_A_BLOCK
value|0x02
define|#
directive|define
name|TDE_NBES_ENC_NOT_ENCRYPTED
value|0x03
define|#
directive|define
name|TDE_NBES_ENC_ALG_NOT_SUPPORTED
value|0x04
define|#
directive|define
name|TDE_NBES_ENC_SUPPORTED_ALG
value|0x05
define|#
directive|define
name|TDE_NBES_ENC_NO_KEY
value|0x06
name|uint8_t
name|algo_index
decl_stmt|;
name|uint8_t
name|byte14
decl_stmt|;
define|#
directive|define
name|TDE_NBES_EMES
value|0x02
define|#
directive|define
name|TDE_NBES_RDMDS
value|0x01
name|uint8_t
name|next_block_kad_format
decl_stmt|;
name|uint8_t
name|key_assoc_data_desc
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption Get Encryption Management Attributes page (0x0022).  */
end_comment

begin_struct
struct|struct
name|tde_get_enc_man_attr_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|byte5
decl_stmt|;
define|#
directive|define
name|TDE_GEMA_CAOD
value|0x01
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|enc_mgmt_attr_desc
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption Random Number page (0x0030).  */
end_comment

begin_struct
struct|struct
name|tde_random_num_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|random_number
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption Device Server Key Wrapping Public Key page (0x0031).  */
end_comment

begin_struct
struct|struct
name|tde_key_wrap_pk_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|public_key_type
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|public_key_format
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|public_key_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|public_key
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Security Protocol Specific values for the Tape Data Encryption protocol  * (0x20) used with SECURITY PROTOCOL OUT.  See above for values used with  * SECURITY PROTOCOL IN.  Current as of SSCr03.  */
end_comment

begin_define
define|#
directive|define
name|TDE_SET_DATA_ENC_PAGE
value|0x0010
end_define

begin_define
define|#
directive|define
name|TDE_SA_ENCAP_PAGE
value|0x0011
end_define

begin_define
define|#
directive|define
name|TDE_SET_ENC_MGMT_ATTR_PAGE
value|0x0022
end_define

begin_comment
comment|/*  * Tape Data Encryption Set Data Encryption page (0x0010).  */
end_comment

begin_struct
struct|struct
name|tde_set_data_enc_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|byte4
decl_stmt|;
define|#
directive|define
name|TDE_SDE_SCOPE_MASK
value|0xe0
define|#
directive|define
name|TDE_SDE_SCOPE_ALL_IT_NEXUS
value|0x80
define|#
directive|define
name|TDE_SDE_SCOPE_LOCAL
value|0x40
define|#
directive|define
name|TDE_SDE_SCOPE_PUBLIC
value|0x00
define|#
directive|define
name|TDE_SDE_LOCK
value|0x01
name|uint8_t
name|byte5
decl_stmt|;
define|#
directive|define
name|TDE_SDE_CEEM_MASK
value|0xc0
define|#
directive|define
name|TDE_SDE_CEEM_ENCRYPT
value|0xc0
define|#
directive|define
name|TDE_SDE_CEEM_EXTERNAL
value|0x80
define|#
directive|define
name|TDE_SDE_CEEM_NO_CHECK
value|0x40
define|#
directive|define
name|TDE_SDE_RDMC_MASK
value|0x30
define|#
directive|define
name|TDE_SDE_RDMC_DISABLED
value|0x30
define|#
directive|define
name|TDE_SDE_RDMC_ENABLED
value|0x20
define|#
directive|define
name|TDE_SDE_RDMC_DEFAULT
value|0x00
define|#
directive|define
name|TDE_SDE_SDK
value|0x08
define|#
directive|define
name|TDE_SDE_CKOD
value|0x04
define|#
directive|define
name|TDE_SDE_CKORP
value|0x02
define|#
directive|define
name|TDE_SDE_CKORL
value|0x01
name|uint8_t
name|encryption_mode
decl_stmt|;
define|#
directive|define
name|TDE_SDE_ENC_MODE_DISABLE
value|0x00
define|#
directive|define
name|TDE_SDE_ENC_MODE_EXTERNAL
value|0x01
define|#
directive|define
name|TDE_SDE_ENC_MODE_ENCRYPT
value|0x02
name|uint8_t
name|decryption_mode
decl_stmt|;
define|#
directive|define
name|TDE_SDE_DEC_MODE_DISABLE
value|0x00
define|#
directive|define
name|TDE_SDE_DEC_MODE_RAW
value|0x01
define|#
directive|define
name|TDE_SDE_DEC_MODE_DECRYPT
value|0x02
define|#
directive|define
name|TDE_SDE_DEC_MODE_MIXED
value|0x03
name|uint8_t
name|algo_index
decl_stmt|;
name|uint8_t
name|lbe_key_format
decl_stmt|;
define|#
directive|define
name|TDE_SDE_KEY_PLAINTEXT
value|0x00
define|#
directive|define
name|TDE_SDE_KEY_VENDOR_SPEC
value|0x01
define|#
directive|define
name|TDE_SDE_KEY_PUBLIC_WRAP
value|0x02
define|#
directive|define
name|TDE_SDE_KEY_ESP_SCSI
value|0x03
name|uint8_t
name|kad_format
decl_stmt|;
define|#
directive|define
name|TDE_SDE_KAD_ASCII
value|0x02
define|#
directive|define
name|TDE_SDE_KAD_BINARY
value|0x01
define|#
directive|define
name|TDE_SDE_KAD_UNSPECIFIED
value|0x00
name|uint8_t
name|reserved
index|[
literal|7
index|]
decl_stmt|;
name|uint8_t
name|lbe_key_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|lbe_key
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used for the Vendor Specific key format (0x01).  */
end_comment

begin_struct
struct|struct
name|tde_key_format_vendor
block|{
name|uint8_t
name|t10_vendor_id
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|vendor_key
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used for the public key wrapped format (0x02).  */
end_comment

begin_struct
struct|struct
name|tde_key_format_public_wrap
block|{
name|uint8_t
name|parameter_set
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|TDE_PARAM_SET_RSA2048
value|0x0000
define|#
directive|define
name|TDE_PARAM_SET_ECC521
value|0x0010
name|uint8_t
name|label_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|label
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption SA Encapsulation page (0x0011).  */
end_comment

begin_struct
struct|struct
name|tde_sa_encap_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|data_desc
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption Set Encryption Management Attributes page (0x0022).  */
end_comment

begin_struct
struct|struct
name|tde_set_enc_mgmt_attr_page
block|{
name|uint8_t
name|page_code
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|byte5
decl_stmt|;
define|#
directive|define
name|TDE_SEMA_CAOD
value|0x01
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|attr_desc
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Tape Data Encryption descriptor format.  * SSC4r03 Section 8.5.4.2.1 Table 197  */
end_comment

begin_struct
struct|struct
name|tde_data_enc_desc
block|{
name|uint8_t
name|key_desc_type
decl_stmt|;
define|#
directive|define
name|TDE_KEY_DESC_WK_KAD
value|0x04
define|#
directive|define
name|TDE_KEY_DESC_M_KAD
value|0x03
define|#
directive|define
name|TDE_KEY_DESC_NONCE_VALUE
value|0x02
define|#
directive|define
name|TDE_KEY_DESC_A_KAD
value|0x01
define|#
directive|define
name|TDE_KEY_DESC_U_KAD
value|0x00
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|TDE_KEY_DESC_AUTH_MASK
value|0x07
define|#
directive|define
name|TDE_KEY_DESC_AUTH_FAILED
value|0x04
define|#
directive|define
name|TDE_KEY_DESC_AUTH_SUCCESS
value|0x03
define|#
directive|define
name|TDE_KEY_DESC_AUTH_NO_ATTEMPT
value|0x02
define|#
directive|define
name|TDE_KEY_DESC_AUTH_U_KAD
value|0x01
name|uint8_t
name|key_desc_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|key_desc
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Wrapped Key descriptor format.  * SSC4r03 Section 8.5.4.3.1 Table 200  */
end_comment

begin_struct
struct|struct
name|tde_wrapped_key_desc
block|{
name|uint8_t
name|wrapped_key_type
decl_stmt|;
define|#
directive|define
name|TDE_WRAP_KEY_DESC_LENGTH
value|0x04
define|#
directive|define
name|TDE_WRAP_KEY_DESC_IDENT
value|0x03
define|#
directive|define
name|TDE_WRAP_KEY_DESC_INFO
value|0x02
define|#
directive|define
name|TDE_WRAP_KEY_DESC_ENTITY_ID
value|0x01
define|#
directive|define
name|TDE_WRAP_KEY_DESC_DEVICE_ID
value|0x00
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|wrapped_desc_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|wrapped_desc
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Encryption management attributes descriptor format.  * SSC4r03 Section 8.5.4.4.1 Table 202  */
end_comment

begin_struct
struct|struct
name|tde_enc_mgmt_attr_desc
block|{
name|uint8_t
name|enc_mgmt_attr_type
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|TDE_EMAD_DESIRED_KEY_MGR_OP
value|0x0000
define|#
directive|define
name|TDE_EMAD_LOG_BLOCK_ENC_KEY_CRIT
value|0x0001
define|#
directive|define
name|TDE_EMAD_LOG_BLOCK_ENC_KEY_WRAP
value|0x0002
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|TDE_EMAD_CRIT
value|0x80
name|uint8_t
name|attr_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|attributes
index|[]
decl_stmt|;
define|#
directive|define
name|TDE_EMAD_DESIRED_KEY_CREATE
value|0x0001
define|#
directive|define
name|TDE_EMAD_DESIRED_KEY_RESOLVE
value|0x0002
block|}
struct|;
end_struct

begin_comment
comment|/*  * Logical block encryption key selection criteria descriptor format.  * SSC4r03 Section 8.5.4.4.3.1 Table 206  */
end_comment

begin_struct
struct|struct
name|tde_lb_enc_key_sel_desc
block|{
name|uint8_t
name|lbe_key_sel_crit_type
index|[
literal|2
index|]
decl_stmt|;
comment|/* 	 * The CRIT bit is the top bit of the first byte of the type. 	 */
define|#
directive|define
name|TDE_LBE_KEY_SEL_CRIT
value|0x80
define|#
directive|define
name|TDE_LBE_KEY_SEL_ALGO
value|0x0001
define|#
directive|define
name|TDE_LBE_KEY_SEL_ID
value|0x0002
name|uint8_t
name|lbe_key_sel_crit_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|lbe_key_sel_crit
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Logical block encryption key wrapping attribute descriptor format.  * SSC4r03 Section 8.5.4.4.4.1 Table 209  */
end_comment

begin_struct
struct|struct
name|tde_lb_enc_key_wrap_desc
block|{
name|uint8_t
name|lbe_key_wrap_type
index|[
literal|2
index|]
decl_stmt|;
comment|/* 	 * The CRIT bit is the top bit of the first byte of the type. 	 */
define|#
directive|define
name|TDE_LBE_KEY_WRAP_CRIT
value|0x80
define|#
directive|define
name|TDE_LBE_KEY_WRAP_KEKS
value|0x0001
name|uint8_t
name|lbe_key_wrap_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|lbe_key_wrap_attr
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Opcodes  */
end_comment

begin_define
define|#
directive|define
name|REWIND
value|0x01
end_define

begin_define
define|#
directive|define
name|FORMAT_MEDIUM
value|0x04
end_define

begin_define
define|#
directive|define
name|READ_BLOCK_LIMITS
value|0x05
end_define

begin_define
define|#
directive|define
name|SA_READ
value|0x08
end_define

begin_define
define|#
directive|define
name|SA_WRITE
value|0x0A
end_define

begin_define
define|#
directive|define
name|SET_CAPACITY
value|0x0B
end_define

begin_define
define|#
directive|define
name|WRITE_FILEMARKS
value|0x10
end_define

begin_define
define|#
directive|define
name|SPACE
value|0x11
end_define

begin_define
define|#
directive|define
name|RESERVE_UNIT
value|0x16
end_define

begin_define
define|#
directive|define
name|RELEASE_UNIT
value|0x17
end_define

begin_define
define|#
directive|define
name|ERASE
value|0x19
end_define

begin_define
define|#
directive|define
name|LOAD_UNLOAD
value|0x1B
end_define

begin_define
define|#
directive|define
name|LOCATE
value|0x2B
end_define

begin_define
define|#
directive|define
name|READ_POSITION
value|0x34
end_define

begin_define
define|#
directive|define
name|REPORT_DENSITY_SUPPORT
value|0x44
end_define

begin_define
define|#
directive|define
name|ALLOW_OVERWRITE
value|0x82
end_define

begin_define
define|#
directive|define
name|LOCATE_16
value|0x92
end_define

begin_comment
comment|/*  * Tape specific density codes- only enough of them here to recognize  * some specific older units so we can choose 2FM@EOD or FIXED blocksize  * quirks.  */
end_comment

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_800
value|0x01
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_1600
value|0x02
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_6250
value|0x03
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_6250C
value|0xC3
end_define

begin_comment
comment|/* HP Compressed 6250 */
end_comment

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_11_4TRK
value|0x04
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_11_9TRK
value|0x84
end_define

begin_comment
comment|/* Vendor Unique Emulex */
end_comment

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_24
value|0x05
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_PE
value|0x06
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_120
value|0x0f
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_150
value|0x10
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_525_320
value|0x11
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_1320
value|0x12
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_2GB
value|0x22
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_4GB
value|0x26
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_3080
value|0x29
end_define

begin_function_decl
name|__BEGIN_DECLS
name|void
name|scsi_read_block_limits
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
parameter_list|,
name|struct
name|scsi_read_block_limits_data
modifier|*
parameter_list|,
name|u_int8_t
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sa_read_write
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|readop
parameter_list|,
name|int
name|sli
parameter_list|,
name|int
name|fixed
parameter_list|,
name|u_int32_t
name|length
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int32_t
name|dxfer_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_rewind
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immediate
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_space
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|scsi_space_code
name|code
parameter_list|,
name|u_int32_t
name|count
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_load_unload
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immediate
parameter_list|,
name|int
name|eot
parameter_list|,
name|int
name|reten
parameter_list|,
name|int
name|load
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_write_filemarks
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immediate
parameter_list|,
name|int
name|setmark
parameter_list|,
name|u_int32_t
name|num_marks
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_reserve_release_unit
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|third_party
parameter_list|,
name|int
name|third_party_id
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|,
name|int
name|reserve
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_erase
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immediate
parameter_list|,
name|int
name|long_erase
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_data_comp_page
parameter_list|(
name|struct
name|scsi_data_compression_page
modifier|*
name|page
parameter_list|,
name|u_int8_t
name|dce
parameter_list|,
name|u_int8_t
name|dde
parameter_list|,
name|u_int8_t
name|red
parameter_list|,
name|u_int32_t
name|comp_algorithm
parameter_list|,
name|u_int32_t
name|decomp_algorithm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_read_position
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|hardsoft
parameter_list|,
name|struct
name|scsi_tape_position_data
modifier|*
name|sbp
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_read_position_10
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|service_action
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int32_t
name|length
parameter_list|,
name|u_int32_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_set_position
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|hardsoft
parameter_list|,
name|u_int32_t
name|blkno
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_locate_10
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immed
parameter_list|,
name|int
name|cp
parameter_list|,
name|int
name|hard
parameter_list|,
name|int64_t
name|partition
parameter_list|,
name|u_int32_t
name|block_address
parameter_list|,
name|int
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_locate_16
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immed
parameter_list|,
name|int
name|cp
parameter_list|,
name|u_int8_t
name|dest_type
parameter_list|,
name|int
name|bam
parameter_list|,
name|int64_t
name|partition
parameter_list|,
name|u_int64_t
name|logical_id
parameter_list|,
name|int
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_report_density_support
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|media
parameter_list|,
name|int
name|medium_type
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int32_t
name|length
parameter_list|,
name|u_int32_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_set_capacity
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|byte1
parameter_list|,
name|u_int32_t
name|proportion
parameter_list|,
name|u_int32_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_format_medium
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|byte1
parameter_list|,
name|int
name|byte2
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int32_t
name|length
parameter_list|,
name|u_int32_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_allow_overwrite
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|allow_overwrite
parameter_list|,
name|int
name|partition
parameter_list|,
name|u_int64_t
name|logical_id
parameter_list|,
name|u_int32_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SCSI_SCSI_SA_H */
end_comment

end_unit

