begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Structure and function declartaions for the  * SCSI Sequential Access Peripheral driver for CAM.  *  * Copyright (c) 1997 Justin T. Gibbs  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification, immediately at the beginning of the file.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *      $Id: scsi_sa.h,v 1.4 1999/02/05 07:19:23 mjacob Exp $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCSI_SCSI_SA_H
end_ifndef

begin_define
define|#
directive|define
name|_SCSI_SCSI_SA_H
value|1
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_struct
struct|struct
name|scsi_read_block_limits
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_read_block_limits_data
block|{
name|u_int8_t
name|gran
decl_stmt|;
define|#
directive|define
name|RBL_GRAN_MASK
value|0x1F
define|#
directive|define
name|RBL_GRAN
parameter_list|(
name|rblim
parameter_list|)
value|((rblim)->gran& RBL_GRAN_MASK)
name|u_int8_t
name|maximum
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|minimum
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_sa_rw
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|sli_fixed
decl_stmt|;
define|#
directive|define
name|SAR_SLI
value|0x02
define|#
directive|define
name|SARW_FIXED
value|0x01
name|u_int8_t
name|length
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_load_unload
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|immediate
decl_stmt|;
define|#
directive|define
name|SLU_IMMED
value|0x01
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|eot_reten_load
decl_stmt|;
define|#
directive|define
name|SLU_EOT
value|0x04
define|#
directive|define
name|SLU_RETEN
value|0x02
define|#
directive|define
name|SLU_LOAD
value|0x01
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_rewind
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|immediate
decl_stmt|;
define|#
directive|define
name|SREW_IMMED
value|0x01
name|u_int8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|SS_BLOCKS
block|,
name|SS_FILEMARKS
block|,
name|SS_SEQFILEMARKS
block|,
name|SS_EOD
block|,
name|SS_SETMARKS
block|,
name|SS_SEQSETMARKS
block|}
name|scsi_space_code
typedef|;
end_typedef

begin_struct
struct|struct
name|scsi_space
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|code
decl_stmt|;
define|#
directive|define
name|SREW_IMMED
value|0x01
name|u_int8_t
name|count
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_write_filemarks
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SWFMRK_IMMED
value|0x01
define|#
directive|define
name|SWFMRK_WSMK
value|0x02
name|u_int8_t
name|num_marks
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Reserve and release unit have the same exact cdb format, but different  * opcodes.  */
end_comment

begin_struct
struct|struct
name|scsi_reserve_release_unit
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|lun_thirdparty
decl_stmt|;
define|#
directive|define
name|SRRU_LUN_MASK
value|0xE0
define|#
directive|define
name|SRRU_3RD_PARTY
value|0x10
define|#
directive|define
name|SRRU_3RD_SHAMT
value|1
define|#
directive|define
name|SRRU_3RD_MASK
value|0xE
name|u_int8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Erase a tape  */
end_comment

begin_struct
struct|struct
name|scsi_erase
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|lun_imm_long
decl_stmt|;
define|#
directive|define
name|SE_LUN_MASK
value|0xE0
define|#
directive|define
name|SE_LONG
value|0x1
define|#
directive|define
name|SE_IMMED
value|0x2
name|u_int8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Dev specific mode page masks.  */
end_comment

begin_define
define|#
directive|define
name|SMH_SA_WP
value|0x80
end_define

begin_define
define|#
directive|define
name|SMH_SA_BUF_MODE_MASK
value|0x70
end_define

begin_define
define|#
directive|define
name|SMH_SA_BUF_MODE_NOBUF
value|0x00
end_define

begin_define
define|#
directive|define
name|SMH_SA_BUF_MODE_SIBUF
value|0x10
end_define

begin_comment
comment|/* Single-Initiator buffering */
end_comment

begin_define
define|#
directive|define
name|SMH_SA_BUF_MODE_MIBUF
value|0x20
end_define

begin_comment
comment|/* Multi-Initiator buffering */
end_comment

begin_define
define|#
directive|define
name|SMH_SA_SPEED_MASK
value|0x0F
end_define

begin_define
define|#
directive|define
name|SMH_SA_SPEED_DEFAULT
value|0x00
end_define

begin_comment
comment|/*  * Sequential-access specific mode page numbers.  */
end_comment

begin_define
define|#
directive|define
name|SA_DATA_COMPRESSION_PAGE
value|0x0f
end_define

begin_define
define|#
directive|define
name|SA_DEVICE_CONFIGURATION_PAGE
value|0x10
end_define

begin_define
define|#
directive|define
name|SA_MEDIUM_PARTITION_PAGE_1
value|0x11
end_define

begin_define
define|#
directive|define
name|SA_MEDIUM_PARTITION_PAGE_2
value|0x12
end_define

begin_define
define|#
directive|define
name|SA_MEDIUM_PARTITION_PAGE_3
value|0x13
end_define

begin_define
define|#
directive|define
name|SA_MEDIUM_PARTITION_PAGE_4
value|0x14
end_define

begin_comment
comment|/*  * Mode page definitions.  */
end_comment

begin_struct
struct|struct
name|scsi_data_compression_page
block|{
name|u_int8_t
name|page_code
decl_stmt|;
name|u_int8_t
name|page_length
decl_stmt|;
define|#
directive|define
name|SA_DCP_DCE
value|0x80
comment|/* Data compression enable */
define|#
directive|define
name|SA_DCP_DCC
value|0x40
comment|/* Data compression capable */
name|u_int8_t
name|dce_and_dcc
decl_stmt|;
define|#
directive|define
name|SA_DCP_DDE
value|0x80
comment|/* Data decompression enable */
define|#
directive|define
name|SA_DCP_RED_MASK
value|0x60
comment|/* Report Exception on Decomp. */
define|#
directive|define
name|SA_DCP_RED_SHAMT
value|5
define|#
directive|define
name|SA_DCP_RED_0
value|0x00
define|#
directive|define
name|SA_DCP_RED_1
value|0x20
define|#
directive|define
name|SA_DCP_RED_2
value|0x40
name|u_int8_t
name|dde_and_red
decl_stmt|;
name|u_int8_t
name|comp_algorithm
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|decomp_algorithm
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_tape_read_position
block|{
name|u_int8_t
name|opcode
decl_stmt|;
comment|/* READ_POSITION */
name|u_int8_t
name|byte1
decl_stmt|;
comment|/* set LSB to read hardware block pos */
name|u_int8_t
name|reserved
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_tape_position_data
block|{
comment|/* Short Form */
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|SA_RPOS_BOP
value|0x80
comment|/* Beginning of Partition */
define|#
directive|define
name|SA_RPOS_EOP
value|0x40
comment|/* End of Partition */
define|#
directive|define
name|SA_RPOS_BCU
value|0x20
comment|/* Block Count Unknown (SCSI3) */
define|#
directive|define
name|SA_RPOS_BYCU
value|0x10
comment|/* Byte Count Unknown (SCSI3) */
define|#
directive|define
name|SA_RPOS_BPU
value|0x04
comment|/* Block Position Unknown */
define|#
directive|define
name|SA_RPOS_PERR
value|0x02
comment|/* Position Error (SCSI3) */
define|#
directive|define
name|SA_RPOS_UNCERTAIN
value|SA_RPOS_BPU
name|u_int8_t
name|partition
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|firstblk
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|lastblk
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|reserved2
decl_stmt|;
name|u_int8_t
name|nbufblk
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|nbufbyte
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_tape_locate
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte1
decl_stmt|;
define|#
directive|define
name|SA_SPOS_IMMED
value|0x01
define|#
directive|define
name|SA_SPOS_CP
value|0x02
define|#
directive|define
name|SA_SPOS_BT
value|0x04
name|u_int8_t
name|reserved1
decl_stmt|;
name|u_int8_t
name|blkaddr
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|reserved2
decl_stmt|;
name|u_int8_t
name|partition
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Opcodes  */
end_comment

begin_define
define|#
directive|define
name|REWIND
value|0x01
end_define

begin_define
define|#
directive|define
name|READ_BLOCK_LIMITS
value|0x05
end_define

begin_define
define|#
directive|define
name|SA_READ
value|0x08
end_define

begin_define
define|#
directive|define
name|SA_WRITE
value|0x0A
end_define

begin_define
define|#
directive|define
name|WRITE_FILEMARKS
value|0x10
end_define

begin_define
define|#
directive|define
name|SPACE
value|0x11
end_define

begin_define
define|#
directive|define
name|RESERVE_UNIT
value|0x16
end_define

begin_define
define|#
directive|define
name|RELEASE_UNIT
value|0x17
end_define

begin_define
define|#
directive|define
name|ERASE
value|0x19
end_define

begin_define
define|#
directive|define
name|LOAD_UNLOAD
value|0x1B
end_define

begin_define
define|#
directive|define
name|LOCATE
value|0x2B
end_define

begin_define
define|#
directive|define
name|READ_POSITION
value|0x34
end_define

begin_comment
comment|/*  * Tape specific density codes- only enough of them here to recognize  * some specific older units so we can choose 2FM@EOD or FIXED blocksize  * quirks.  */
end_comment

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_800
value|0x01
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_1600
value|0x02
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_6250
value|0x03
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_6250C
value|0xC3
end_define

begin_comment
comment|/* HP Compressed 6250 */
end_comment

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_11_4TRK
value|0x04
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_11_9TRK
value|0x84
end_define

begin_comment
comment|/* Vendor Unique Emulex */
end_comment

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_24
value|0x05
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_HALFINCH_PE
value|0x06
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_120
value|0x0f
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_150
value|0x10
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_525_320
value|0x11
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_1320
value|0x12
end_define

begin_define
define|#
directive|define
name|SCSI_DENSITY_QIC_3080
value|0x29
end_define

begin_function_decl
name|__BEGIN_DECLS
name|void
name|scsi_read_block_limits
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
parameter_list|,
name|struct
name|scsi_read_block_limits_data
modifier|*
parameter_list|,
name|u_int8_t
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sa_read_write
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|readop
parameter_list|,
name|int
name|sli
parameter_list|,
name|int
name|fixed
parameter_list|,
name|u_int32_t
name|length
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int32_t
name|dxfer_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_rewind
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immediate
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_space
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|scsi_space_code
name|code
parameter_list|,
name|u_int32_t
name|count
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_load_unload
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immediate
parameter_list|,
name|int
name|eot
parameter_list|,
name|int
name|reten
parameter_list|,
name|int
name|load
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_write_filemarks
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immediate
parameter_list|,
name|int
name|setmark
parameter_list|,
name|u_int32_t
name|num_marks
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_reserve_release_unit
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|third_party
parameter_list|,
name|int
name|third_party_id
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|,
name|int
name|reserve
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_erase
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|immediate
parameter_list|,
name|int
name|long_erase
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_data_comp_page
parameter_list|(
name|struct
name|scsi_data_compression_page
modifier|*
name|page
parameter_list|,
name|u_int8_t
name|dce
parameter_list|,
name|u_int8_t
name|dde
parameter_list|,
name|u_int8_t
name|red
parameter_list|,
name|u_int32_t
name|comp_algorithm
parameter_list|,
name|u_int32_t
name|decomp_algorithm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_read_position
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|hardsoft
parameter_list|,
name|struct
name|scsi_tape_position_data
modifier|*
name|sbp
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_set_position
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|hardsoft
parameter_list|,
name|u_int32_t
name|blkno
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SCSI_SCSI_SA_H */
end_comment

end_unit

