begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Largely written by Julian Elischer (julian@tfs.com)  * for TRW Financial Systems.  *  * TRW Financial Systems, in accordance with their agreement with Carnegie  * Mellon University, makes this software available to CMU to distribute  * or use in any manner that they see fit as long as this message is kept with  * the software. For this reason TFS also grants any other persons or  * organisations permission to use or modify this software.  *  * TFS supplies this software to be publicly redistributed  * on the understanding that TFS is not responsible for the correct  * functioning of this software in any circumstances.  *  * Ported to run under 386BSD by Julian Elischer (julian@tfs.com) Sept 1992  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * SCSI general  interface description  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCSI_SCSI_ALL_H
end_ifndef

begin_define
define|#
directive|define
name|_SCSI_SCSI_ALL_H
value|1
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<machine/stdarg.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_comment
comment|/*  * This is the number of seconds we wait for devices to settle after a SCSI  * bus reset.  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|scsi_delay
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_comment
comment|/*  * SCSI command format  */
end_comment

begin_comment
comment|/*  * Define dome bits that are in ALL (or a lot of) scsi commands  */
end_comment

begin_define
define|#
directive|define
name|SCSI_CTL_LINK
value|0x01
end_define

begin_define
define|#
directive|define
name|SCSI_CTL_FLAG
value|0x02
end_define

begin_define
define|#
directive|define
name|SCSI_CTL_VENDOR
value|0xC0
end_define

begin_define
define|#
directive|define
name|SCSI_CMD_LUN
value|0xA0
end_define

begin_comment
comment|/* these two should not be needed */
end_comment

begin_define
define|#
directive|define
name|SCSI_CMD_LUN_SHIFT
value|5
end_define

begin_comment
comment|/* LUN in the cmd is no longer SCSI */
end_comment

begin_define
define|#
directive|define
name|SCSI_MAX_CDBLEN
value|16
end_define

begin_comment
comment|/*  					 * 16 byte commands are in the  					 * SCSI-3 spec  					 */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|CAM_MAX_CDBLEN
argument_list|)
operator|&&
operator|(
name|CAM_MAX_CDBLEN
operator|<
name|SCSI_MAX_CDBLEN
operator|)
end_if

begin_error
error|#
directive|error
literal|"CAM_MAX_CDBLEN cannot be less than SCSI_MAX_CDBLEN"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* 6byte CDBs special case 0 length to be 256 */
end_comment

begin_define
define|#
directive|define
name|SCSI_CDB6_LEN
parameter_list|(
name|len
parameter_list|)
value|((len) == 0 ? 256 : len)
end_define

begin_comment
comment|/*  * This type defines actions to be taken when a particular sense code is  * received.  Right now, these flags are only defined to take up 16 bits,  * but can be expanded in the future if necessary.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|SS_NOP
init|=
literal|0x000000
block|,
comment|/* Do nothing */
name|SS_RETRY
init|=
literal|0x010000
block|,
comment|/* Retry the command */
name|SS_FAIL
init|=
literal|0x020000
block|,
comment|/* Bail out */
name|SS_START
init|=
literal|0x030000
block|,
comment|/* Send a Start Unit command to the device, 				 * then retry the original command. 				 */
name|SS_TUR
init|=
literal|0x040000
block|,
comment|/* Send a Test Unit Ready command to the 				 * device, then retry the original command. 				 */
name|SS_MASK
init|=
literal|0xff0000
block|}
name|scsi_sense_action
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|SSQ_NONE
init|=
literal|0x0000
block|,
name|SSQ_DECREMENT_COUNT
init|=
literal|0x0100
block|,
comment|/* Decrement the retry count */
name|SSQ_MANY
init|=
literal|0x0200
block|,
comment|/* send lots of recovery commands */
name|SSQ_RANGE
init|=
literal|0x0400
block|,
comment|/* 					    * This table entry represents the 					    * end of a range of ASCQs that 					    * have identical error actions 					    * and text. 					    */
name|SSQ_PRINT_SENSE
init|=
literal|0x0800
block|,
name|SSQ_UA
init|=
literal|0x1000
block|,
comment|/* Broadcast UA. */
name|SSQ_RESCAN
init|=
literal|0x2000
block|,
comment|/* Rescan target for LUNs. */
name|SSQ_LOST
init|=
literal|0x4000
block|,
comment|/* Destroy the LUNs. */
name|SSQ_MASK
init|=
literal|0xff00
block|}
name|scsi_sense_action_qualifier
typedef|;
end_typedef

begin_comment
comment|/* Mask for error status values */
end_comment

begin_define
define|#
directive|define
name|SS_ERRMASK
value|0xff
end_define

begin_comment
comment|/* The default, retyable, error action */
end_comment

begin_define
define|#
directive|define
name|SS_RDEF
value|SS_RETRY|SSQ_DECREMENT_COUNT|SSQ_PRINT_SENSE|EIO
end_define

begin_comment
comment|/* The retyable, error action, with table specified error code */
end_comment

begin_define
define|#
directive|define
name|SS_RET
value|SS_RETRY|SSQ_DECREMENT_COUNT|SSQ_PRINT_SENSE
end_define

begin_comment
comment|/* Fatal error action, with table specified error code */
end_comment

begin_define
define|#
directive|define
name|SS_FATAL
value|SS_FAIL|SSQ_PRINT_SENSE
end_define

begin_struct
struct|struct
name|scsi_generic
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|bytes
index|[
literal|11
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_request_sense
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SRS_DESC
value|0x01
name|u_int8_t
name|unused
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|length
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_test_unit_ready
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_receive_diag
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SRD_PCV
value|0x01
name|uint8_t
name|page_code
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_send_diag
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SSD_UNITOFFL
value|0x01
define|#
directive|define
name|SSD_DEVOFFL
value|0x02
define|#
directive|define
name|SSD_SELFTEST
value|0x04
define|#
directive|define
name|SSD_PF
value|0x10
define|#
directive|define
name|SSD_SELF_TEST_CODE_MASK
value|0xE0
define|#
directive|define
name|SSD_SELF_TEST_CODE_SHIFT
value|5
define|#
directive|define
name|SSD_SELF_TEST_CODE_NONE
value|0x00
define|#
directive|define
name|SSD_SELF_TEST_CODE_BG_SHORT
value|0x01
define|#
directive|define
name|SSD_SELF_TEST_CODE_BG_EXTENDED
value|0x02
define|#
directive|define
name|SSD_SELF_TEST_CODE_BG_ABORT
value|0x04
define|#
directive|define
name|SSD_SELF_TEST_CODE_FG_SHORT
value|0x05
define|#
directive|define
name|SSD_SELF_TEST_CODE_FG_EXTENDED
value|0x06
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_sense
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|length
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_inquiry
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SI_EVPD
value|0x01
define|#
directive|define
name|SI_CMDDT
value|0x02
name|u_int8_t
name|page_code
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_sense_6
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SMS_DBD
value|0x08
name|u_int8_t
name|page
decl_stmt|;
define|#
directive|define
name|SMS_PAGE_CODE
value|0x3F
define|#
directive|define
name|SMS_VENDOR_SPECIFIC_PAGE
value|0x00
define|#
directive|define
name|SMS_DISCONNECT_RECONNECT_PAGE
value|0x02
define|#
directive|define
name|SMS_FORMAT_DEVICE_PAGE
value|0x03
define|#
directive|define
name|SMS_GEOMETRY_PAGE
value|0x04
define|#
directive|define
name|SMS_CACHE_PAGE
value|0x08
define|#
directive|define
name|SMS_PERIPHERAL_DEVICE_PAGE
value|0x09
define|#
directive|define
name|SMS_CONTROL_MODE_PAGE
value|0x0A
define|#
directive|define
name|SMS_PROTO_SPECIFIC_PAGE
value|0x19
define|#
directive|define
name|SMS_INFO_EXCEPTIONS_PAGE
value|0x1C
define|#
directive|define
name|SMS_ALL_PAGES_PAGE
value|0x3F
define|#
directive|define
name|SMS_PAGE_CTRL_MASK
value|0xC0
define|#
directive|define
name|SMS_PAGE_CTRL_CURRENT
value|0x00
define|#
directive|define
name|SMS_PAGE_CTRL_CHANGEABLE
value|0x40
define|#
directive|define
name|SMS_PAGE_CTRL_DEFAULT
value|0x80
define|#
directive|define
name|SMS_PAGE_CTRL_SAVED
value|0xC0
name|u_int8_t
name|subpage
decl_stmt|;
define|#
directive|define
name|SMS_SUBPAGE_PAGE_0
value|0x00
define|#
directive|define
name|SMS_SUBPAGE_ALL
value|0xff
name|u_int8_t
name|length
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_sense_10
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
comment|/* same bits as small version */
define|#
directive|define
name|SMS10_LLBAA
value|0x10
name|u_int8_t
name|page
decl_stmt|;
comment|/* same bits as small version */
name|u_int8_t
name|subpage
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_select_6
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SMS_SP
value|0x01
define|#
directive|define
name|SMS_PF
value|0x10
name|u_int8_t
name|unused
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|length
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_select_10
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
comment|/* same bits as small version */
name|u_int8_t
name|unused
index|[
literal|5
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * When sending a mode select to a tape drive, the medium type must be 0.  */
end_comment

begin_struct
struct|struct
name|scsi_mode_hdr_6
block|{
name|u_int8_t
name|datalen
decl_stmt|;
name|u_int8_t
name|medium_type
decl_stmt|;
name|u_int8_t
name|dev_specific
decl_stmt|;
name|u_int8_t
name|block_descr_len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_hdr_10
block|{
name|u_int8_t
name|datalen
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|medium_type
decl_stmt|;
name|u_int8_t
name|dev_specific
decl_stmt|;
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|block_descr_len
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_block_descr
block|{
name|u_int8_t
name|density_code
decl_stmt|;
name|u_int8_t
name|num_blocks
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|block_len
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_per_res_in
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|action
decl_stmt|;
define|#
directive|define
name|SPRI_RK
value|0x00
define|#
directive|define
name|SPRI_RR
value|0x01
define|#
directive|define
name|SPRI_RC
value|0x02
define|#
directive|define
name|SPRI_RS
value|0x03
name|u_int8_t
name|reserved
index|[
literal|5
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_per_res_in_header
block|{
name|u_int8_t
name|generation
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_per_res_key
block|{
name|u_int8_t
name|key
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_per_res_in_keys
block|{
name|struct
name|scsi_per_res_in_header
name|header
decl_stmt|;
name|struct
name|scsi_per_res_key
name|keys
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_per_res_cap
block|{
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|flags1
decl_stmt|;
define|#
directive|define
name|SPRI_CRH
value|0x10
define|#
directive|define
name|SPRI_SIP_C
value|0x08
define|#
directive|define
name|SPRI_ATP_C
value|0x04
define|#
directive|define
name|SPRI_PTPL_C
value|0x01
name|uint8_t
name|flags2
decl_stmt|;
define|#
directive|define
name|SPRI_TMV
value|0x80
define|#
directive|define
name|SPRI_PTPL_A
value|0x01
name|uint8_t
name|type_mask
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|SPRI_TM_WR_EX_AR
value|0x8000
define|#
directive|define
name|SPRI_TM_EX_AC_RO
value|0x4000
define|#
directive|define
name|SPRI_TM_WR_EX_RO
value|0x2000
define|#
directive|define
name|SPRI_TM_EX_AC
value|0x0800
define|#
directive|define
name|SPRI_TM_WR_EX
value|0x0200
define|#
directive|define
name|SPRI_TM_EX_AC_AR
value|0x0001
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_per_res_in_rsrv_data
block|{
name|uint8_t
name|reservation
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|obsolete1
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|scopetype
decl_stmt|;
define|#
directive|define
name|SPRT_WE
value|0x01
define|#
directive|define
name|SPRT_EA
value|0x03
define|#
directive|define
name|SPRT_WERO
value|0x05
define|#
directive|define
name|SPRT_EARO
value|0x06
define|#
directive|define
name|SPRT_WEAR
value|0x07
define|#
directive|define
name|SPRT_EAAR
value|0x08
name|uint8_t
name|obsolete2
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_per_res_in_rsrv
block|{
name|struct
name|scsi_per_res_in_header
name|header
decl_stmt|;
name|struct
name|scsi_per_res_in_rsrv_data
name|data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_per_res_out
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|action
decl_stmt|;
define|#
directive|define
name|SPRO_REGISTER
value|0x00
define|#
directive|define
name|SPRO_RESERVE
value|0x01
define|#
directive|define
name|SPRO_RELEASE
value|0x02
define|#
directive|define
name|SPRO_CLEAR
value|0x03
define|#
directive|define
name|SPRO_PREEMPT
value|0x04
define|#
directive|define
name|SPRO_PRE_ABO
value|0x05
define|#
directive|define
name|SPRO_REG_IGNO
value|0x06
define|#
directive|define
name|SPRO_REG_MOVE
value|0x07
define|#
directive|define
name|SPRO_ACTION_MASK
value|0x1f
name|u_int8_t
name|scope_type
decl_stmt|;
define|#
directive|define
name|SPR_SCOPE_MASK
value|0xf0
define|#
directive|define
name|SPR_LU_SCOPE
value|0x00
define|#
directive|define
name|SPR_TYPE_MASK
value|0x0f
define|#
directive|define
name|SPR_TYPE_WR_EX
value|0x01
define|#
directive|define
name|SPR_TYPE_EX_AC
value|0x03
define|#
directive|define
name|SPR_TYPE_WR_EX_RO
value|0x05
define|#
directive|define
name|SPR_TYPE_EX_AC_RO
value|0x06
define|#
directive|define
name|SPR_TYPE_WR_EX_AR
value|0x07
define|#
directive|define
name|SPR_TYPE_EX_AC_AR
value|0x08
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_per_res_out_parms
block|{
name|struct
name|scsi_per_res_key
name|res_key
decl_stmt|;
name|u_int8_t
name|serv_act_res_key
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|obsolete1
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|SPR_SPEC_I_PT
value|0x08
define|#
directive|define
name|SPR_ALL_TG_PT
value|0x04
define|#
directive|define
name|SPR_APTPL
value|0x01
name|u_int8_t
name|reserved1
decl_stmt|;
name|u_int8_t
name|obsolete2
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_log_sense
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SLS_SP
value|0x01
define|#
directive|define
name|SLS_PPC
value|0x02
name|u_int8_t
name|page
decl_stmt|;
define|#
directive|define
name|SLS_PAGE_CODE
value|0x3F
define|#
directive|define
name|SLS_ALL_PAGES_PAGE
value|0x00
define|#
directive|define
name|SLS_OVERRUN_PAGE
value|0x01
define|#
directive|define
name|SLS_ERROR_WRITE_PAGE
value|0x02
define|#
directive|define
name|SLS_ERROR_READ_PAGE
value|0x03
define|#
directive|define
name|SLS_ERROR_READREVERSE_PAGE
value|0x04
define|#
directive|define
name|SLS_ERROR_VERIFY_PAGE
value|0x05
define|#
directive|define
name|SLS_ERROR_NONMEDIUM_PAGE
value|0x06
define|#
directive|define
name|SLS_ERROR_LASTN_PAGE
value|0x07
define|#
directive|define
name|SLS_SELF_TEST_PAGE
value|0x10
define|#
directive|define
name|SLS_IE_PAGE
value|0x2f
define|#
directive|define
name|SLS_PAGE_CTRL_MASK
value|0xC0
define|#
directive|define
name|SLS_PAGE_CTRL_THRESHOLD
value|0x00
define|#
directive|define
name|SLS_PAGE_CTRL_CUMULATIVE
value|0x40
define|#
directive|define
name|SLS_PAGE_CTRL_THRESH_DEFAULT
value|0x80
define|#
directive|define
name|SLS_PAGE_CTRL_CUMUL_DEFAULT
value|0xC0
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|paramptr
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_log_select
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
comment|/*	SLS_SP				0x01 */
define|#
directive|define
name|SLS_PCR
value|0x02
name|u_int8_t
name|page
decl_stmt|;
comment|/*	SLS_PAGE_CTRL_MASK		0xC0 */
comment|/*	SLS_PAGE_CTRL_THRESHOLD		0x00 */
comment|/*	SLS_PAGE_CTRL_CUMULATIVE	0x40 */
comment|/*	SLS_PAGE_CTRL_THRESH_DEFAULT	0x80 */
comment|/*	SLS_PAGE_CTRL_CUMUL_DEFAULT	0xC0 */
name|u_int8_t
name|reserved
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_log_header
block|{
name|u_int8_t
name|page
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|datalen
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_log_param_header
block|{
name|u_int8_t
name|param_code
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|param_control
decl_stmt|;
define|#
directive|define
name|SLP_LP
value|0x01
define|#
directive|define
name|SLP_LBIN
value|0x02
define|#
directive|define
name|SLP_TMC_MASK
value|0x0C
define|#
directive|define
name|SLP_TMC_ALWAYS
value|0x00
define|#
directive|define
name|SLP_TMC_EQUAL
value|0x04
define|#
directive|define
name|SLP_TMC_NOTEQUAL
value|0x08
define|#
directive|define
name|SLP_TMC_GREATER
value|0x0C
define|#
directive|define
name|SLP_ETC
value|0x10
define|#
directive|define
name|SLP_TSD
value|0x20
define|#
directive|define
name|SLP_DS
value|0x40
define|#
directive|define
name|SLP_DU
value|0x80
name|u_int8_t
name|param_len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_control_page
block|{
name|u_int8_t
name|page_code
decl_stmt|;
name|u_int8_t
name|page_length
decl_stmt|;
name|u_int8_t
name|rlec
decl_stmt|;
define|#
directive|define
name|SCP_RLEC
value|0x01
comment|/*Report Log Exception Cond*/
define|#
directive|define
name|SCP_GLTSD
value|0x02
comment|/*Global Logging target 						  save disable */
define|#
directive|define
name|SCP_DSENSE
value|0x04
comment|/*Descriptor Sense */
define|#
directive|define
name|SCP_DPICZ
value|0x08
comment|/*Disable Prot. Info Check 						  if Prot. Field is Zero */
define|#
directive|define
name|SCP_TMF_ONLY
value|0x10
comment|/*TM Functions Only*/
define|#
directive|define
name|SCP_TST_MASK
value|0xE0
comment|/*Task Set Type Mask*/
define|#
directive|define
name|SCP_TST_ONE
value|0x00
comment|/*One Task Set*/
define|#
directive|define
name|SCP_TST_SEPARATE
value|0x20
comment|/*Separate Task Sets*/
name|u_int8_t
name|queue_flags
decl_stmt|;
define|#
directive|define
name|SCP_QUEUE_ALG_MASK
value|0xF0
define|#
directive|define
name|SCP_QUEUE_ALG_RESTRICTED
value|0x00
define|#
directive|define
name|SCP_QUEUE_ALG_UNRESTRICTED
value|0x10
define|#
directive|define
name|SCP_QUEUE_ERR
value|0x02
comment|/*Queued I/O aborted for CACs*/
define|#
directive|define
name|SCP_QUEUE_DQUE
value|0x01
comment|/*Queued I/O disabled*/
name|u_int8_t
name|eca_and_aen
decl_stmt|;
define|#
directive|define
name|SCP_EECA
value|0x80
comment|/*Enable Extended CA*/
define|#
directive|define
name|SCP_RAENP
value|0x04
comment|/*Ready AEN Permission*/
define|#
directive|define
name|SCP_UAAENP
value|0x02
comment|/*UA AEN Permission*/
define|#
directive|define
name|SCP_EAENP
value|0x01
comment|/*Error AEN Permission*/
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|aen_holdoff_period
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_cache_page
block|{
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SCHP_PAGE_SAVABLE
value|0x80
comment|/* Page is savable */
name|u_int8_t
name|page_length
decl_stmt|;
name|u_int8_t
name|cache_flags
decl_stmt|;
define|#
directive|define
name|SCHP_FLAGS_WCE
value|0x04
comment|/* Write Cache Enable */
define|#
directive|define
name|SCHP_FLAGS_MF
value|0x02
comment|/* Multiplication factor */
define|#
directive|define
name|SCHP_FLAGS_RCD
value|0x01
comment|/* Read Cache Disable */
name|u_int8_t
name|rw_cache_policy
decl_stmt|;
name|u_int8_t
name|dis_prefetch
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|min_prefetch
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|max_prefetch
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|max_prefetch_ceil
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * XXX KDM  * Updated version of the cache page, as of SBC.  Update this to SBC-3 and  * rationalize the two.  */
end_comment

begin_struct
struct|struct
name|scsi_caching_page
block|{
name|uint8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SMS_CACHING_PAGE
value|0x08
name|uint8_t
name|page_length
decl_stmt|;
name|uint8_t
name|flags1
decl_stmt|;
define|#
directive|define
name|SCP_IC
value|0x80
define|#
directive|define
name|SCP_ABPF
value|0x40
define|#
directive|define
name|SCP_CAP
value|0x20
define|#
directive|define
name|SCP_DISC
value|0x10
define|#
directive|define
name|SCP_SIZE
value|0x08
define|#
directive|define
name|SCP_WCE
value|0x04
define|#
directive|define
name|SCP_MF
value|0x02
define|#
directive|define
name|SCP_RCD
value|0x01
name|uint8_t
name|ret_priority
decl_stmt|;
name|uint8_t
name|disable_pf_transfer_len
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|min_prefetch
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|max_prefetch
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|max_pf_ceiling
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|flags2
decl_stmt|;
define|#
directive|define
name|SCP_FSW
value|0x80
define|#
directive|define
name|SCP_LBCSS
value|0x40
define|#
directive|define
name|SCP_DRA
value|0x20
define|#
directive|define
name|SCP_VS1
value|0x10
define|#
directive|define
name|SCP_VS2
value|0x08
name|uint8_t
name|cache_segments
decl_stmt|;
name|uint8_t
name|cache_seg_size
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|non_cache_seg_size
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * XXX KDM move this off to a vendor shim.  */
end_comment

begin_struct
struct|struct
name|copan_power_subpage
block|{
name|uint8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|PWR_PAGE_CODE
value|0x00
name|uint8_t
name|subpage
decl_stmt|;
define|#
directive|define
name|PWR_SUBPAGE_CODE
value|0x02
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_version
decl_stmt|;
define|#
directive|define
name|PWR_VERSION
value|0x01
name|uint8_t
name|total_luns
decl_stmt|;
name|uint8_t
name|max_active_luns
decl_stmt|;
define|#
directive|define
name|PWR_DFLT_MAX_LUNS
value|0x07
name|uint8_t
name|reserved
index|[
literal|25
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * XXX KDM move this off to a vendor shim.  */
end_comment

begin_struct
struct|struct
name|copan_aps_subpage
block|{
name|uint8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|APS_PAGE_CODE
value|0x00
name|uint8_t
name|subpage
decl_stmt|;
define|#
directive|define
name|APS_SUBPAGE_CODE
value|0x03
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_version
decl_stmt|;
define|#
directive|define
name|APS_VERSION
value|0x00
name|uint8_t
name|lock_active
decl_stmt|;
define|#
directive|define
name|APS_LOCK_ACTIVE
value|0x01
define|#
directive|define
name|APS_LOCK_INACTIVE
value|0x00
name|uint8_t
name|reserved
index|[
literal|26
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * XXX KDM move this off to a vendor shim.  */
end_comment

begin_struct
struct|struct
name|copan_debugconf_subpage
block|{
name|uint8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|DBGCNF_PAGE_CODE
value|0x00
name|uint8_t
name|subpage
decl_stmt|;
define|#
directive|define
name|DBGCNF_SUBPAGE_CODE
value|0xF0
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|page_version
decl_stmt|;
define|#
directive|define
name|DBGCNF_VERSION
value|0x00
name|uint8_t
name|ctl_time_io_secs
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_info_exceptions_page
block|{
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SIEP_PAGE_SAVABLE
value|0x80
comment|/* Page is savable */
name|u_int8_t
name|page_length
decl_stmt|;
name|u_int8_t
name|info_flags
decl_stmt|;
define|#
directive|define
name|SIEP_FLAGS_PERF
value|0x80
define|#
directive|define
name|SIEP_FLAGS_EBF
value|0x20
define|#
directive|define
name|SIEP_FLAGS_EWASC
value|0x10
define|#
directive|define
name|SIEP_FLAGS_DEXCPT
value|0x08
define|#
directive|define
name|SIEP_FLAGS_TEST
value|0x04
define|#
directive|define
name|SIEP_FLAGS_EBACKERR
value|0x02
define|#
directive|define
name|SIEP_FLAGS_LOGERR
value|0x01
name|u_int8_t
name|mrie
decl_stmt|;
name|u_int8_t
name|interval_timer
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|report_count
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_proto_specific_page
block|{
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SPSP_PAGE_SAVABLE
value|0x80
comment|/* Page is savable */
name|u_int8_t
name|page_length
decl_stmt|;
name|u_int8_t
name|protocol
decl_stmt|;
define|#
directive|define
name|SPSP_PROTO_FC
value|0x00
define|#
directive|define
name|SPSP_PROTO_SPI
value|0x01
define|#
directive|define
name|SPSP_PROTO_SSA
value|0x02
define|#
directive|define
name|SPSP_PROTO_1394
value|0x03
define|#
directive|define
name|SPSP_PROTO_RDMA
value|0x04
define|#
directive|define
name|SPSP_PROTO_ISCSI
value|0x05
define|#
directive|define
name|SPSP_PROTO_SAS
value|0x06
define|#
directive|define
name|SPSP_PROTO_ADT
value|0x07
define|#
directive|define
name|SPSP_PROTO_ATA
value|0x08
define|#
directive|define
name|SPSP_PROTO_NONE
value|0x0f
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_reserve
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SR_EXTENT
value|0x01
define|#
directive|define
name|SR_ID_MASK
value|0x0e
define|#
directive|define
name|SR_3RDPTY
value|0x10
define|#
directive|define
name|SR_LUN_MASK
value|0xe0
name|u_int8_t
name|resv_id
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_reserve_10
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SR10_3RDPTY
value|0x10
define|#
directive|define
name|SR10_LONGID
value|0x02
define|#
directive|define
name|SR10_EXTENT
value|0x01
name|uint8_t
name|resv_id
decl_stmt|;
name|uint8_t
name|thirdparty_id
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_release
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|resv_id
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|1
index|]
decl_stmt|;
name|u_int8_t
name|length
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_release_10
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
name|uint8_t
name|resv_id
decl_stmt|;
name|uint8_t
name|thirdparty_id
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_prevent
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|how
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PR_PREVENT
value|0x01
end_define

begin_define
define|#
directive|define
name|PR_ALLOW
value|0x00
end_define

begin_struct
struct|struct
name|scsi_sync_cache
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SSC_IMMED
value|0x02
define|#
directive|define
name|SSC_RELADR
value|0x01
name|u_int8_t
name|begin_lba
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|lb_count
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_sync_cache_16
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
name|uint8_t
name|begin_lba
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|lb_count
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_format
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SF_LONGLIST
value|0x20
define|#
directive|define
name|SF_FMTDATA
value|0x10
define|#
directive|define
name|SF_CMPLIST
value|0x08
define|#
directive|define
name|SF_FORMAT_MASK
value|0x07
define|#
directive|define
name|SF_FORMAT_BLOCK
value|0x00
define|#
directive|define
name|SF_FORMAT_LONG_BLOCK
value|0x03
define|#
directive|define
name|SF_FORMAT_BFI
value|0x04
define|#
directive|define
name|SF_FORMAT_PHYS
value|0x05
name|uint8_t
name|vendor
decl_stmt|;
name|uint8_t
name|interleave
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_format_header_short
block|{
name|uint8_t
name|reserved
decl_stmt|;
define|#
directive|define
name|SF_DATA_FOV
value|0x80
define|#
directive|define
name|SF_DATA_DPRY
value|0x40
define|#
directive|define
name|SF_DATA_DCRT
value|0x20
define|#
directive|define
name|SF_DATA_STPF
value|0x10
define|#
directive|define
name|SF_DATA_IP
value|0x08
define|#
directive|define
name|SF_DATA_DSP
value|0x04
define|#
directive|define
name|SF_DATA_IMMED
value|0x02
define|#
directive|define
name|SF_DATA_VS
value|0x01
name|uint8_t
name|byte2
decl_stmt|;
name|uint8_t
name|defect_list_len
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_format_header_long
block|{
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
name|uint8_t
name|reserved2
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|defect_list_len
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_changedef
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|unused1
decl_stmt|;
name|u_int8_t
name|how
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|datalen
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_read_buffer
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|RWB_MODE
value|0x07
define|#
directive|define
name|RWB_MODE_HDR_DATA
value|0x00
define|#
directive|define
name|RWB_MODE_VENDOR
value|0x01
define|#
directive|define
name|RWB_MODE_DATA
value|0x02
define|#
directive|define
name|RWB_MODE_DOWNLOAD
value|0x04
define|#
directive|define
name|RWB_MODE_DOWNLOAD_SAVE
value|0x05
name|u_int8_t
name|buffer_id
decl_stmt|;
name|u_int8_t
name|offset
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_write_buffer
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|buffer_id
decl_stmt|;
name|u_int8_t
name|offset
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_rw_6
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|addr
index|[
literal|3
index|]
decl_stmt|;
comment|/* only 5 bits are valid in the MSB address byte */
define|#
directive|define
name|SRW_TOPADDR
value|0x1F
name|u_int8_t
name|length
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_rw_10
block|{
name|u_int8_t
name|opcode
decl_stmt|;
define|#
directive|define
name|SRW10_RELADDR
value|0x01
comment|/* EBP defined for WRITE(10) only */
define|#
directive|define
name|SRW10_EBP
value|0x04
define|#
directive|define
name|SRW10_FUA
value|0x08
define|#
directive|define
name|SRW10_DPO
value|0x10
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|addr
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_rw_12
block|{
name|u_int8_t
name|opcode
decl_stmt|;
define|#
directive|define
name|SRW12_RELADDR
value|0x01
define|#
directive|define
name|SRW12_FUA
value|0x08
define|#
directive|define
name|SRW12_DPO
value|0x10
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|addr
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_rw_16
block|{
name|u_int8_t
name|opcode
decl_stmt|;
define|#
directive|define
name|SRW16_RELADDR
value|0x01
define|#
directive|define
name|SRW16_FUA
value|0x08
define|#
directive|define
name|SRW16_DPO
value|0x10
name|u_int8_t
name|byte2
decl_stmt|;
name|u_int8_t
name|addr
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_write_same_10
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SWS_LBDATA
value|0x02
define|#
directive|define
name|SWS_PBDATA
value|0x04
define|#
directive|define
name|SWS_UNMAP
value|0x08
define|#
directive|define
name|SWS_ANCHOR
value|0x10
name|uint8_t
name|addr
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|group
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_write_same_16
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
name|uint8_t
name|addr
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|group
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_unmap
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SU_ANCHOR
value|0x01
name|uint8_t
name|reserved
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|group
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_write_verify_10
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SWV_BYTCHK
value|0x02
define|#
directive|define
name|SWV_DPO
value|0x10
define|#
directive|define
name|SWV_WRPROECT_MASK
value|0xe0
name|uint8_t
name|addr
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|group
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_write_verify_12
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
name|uint8_t
name|addr
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|group
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_write_verify_16
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
name|uint8_t
name|addr
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|group
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_start_stop_unit
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SSS_IMMED
value|0x01
name|u_int8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|how
decl_stmt|;
define|#
directive|define
name|SSS_START
value|0x01
define|#
directive|define
name|SSS_LOEJ
value|0x02
define|#
directive|define
name|SSS_PC_MASK
value|0xf0
define|#
directive|define
name|SSS_PC_START_VALID
value|0x00
define|#
directive|define
name|SSS_PC_ACTIVE
value|0x10
define|#
directive|define
name|SSS_PC_IDLE
value|0x20
define|#
directive|define
name|SSS_PC_STANDBY
value|0x30
define|#
directive|define
name|SSS_PC_LU_CONTROL
value|0x70
define|#
directive|define
name|SSS_PC_FORCE_IDLE_0
value|0xa0
define|#
directive|define
name|SSS_PC_FORCE_STANDBY_0
value|0xb0
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ata_pass_12
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|protocol
decl_stmt|;
define|#
directive|define
name|AP_PROTO_HARD_RESET
value|(0x00<< 1)
define|#
directive|define
name|AP_PROTO_SRST
value|(0x01<< 1)
define|#
directive|define
name|AP_PROTO_NON_DATA
value|(0x03<< 1)
define|#
directive|define
name|AP_PROTO_PIO_IN
value|(0x04<< 1)
define|#
directive|define
name|AP_PROTO_PIO_OUT
value|(0x05<< 1)
define|#
directive|define
name|AP_PROTO_DMA
value|(0x06<< 1)
define|#
directive|define
name|AP_PROTO_DMA_QUEUED
value|(0x07<< 1)
define|#
directive|define
name|AP_PROTO_DEVICE_DIAG
value|(0x08<< 1)
define|#
directive|define
name|AP_PROTO_DEVICE_RESET
value|(0x09<< 1)
define|#
directive|define
name|AP_PROTO_UDMA_IN
value|(0x0a<< 1)
define|#
directive|define
name|AP_PROTO_UDMA_OUT
value|(0x0b<< 1)
define|#
directive|define
name|AP_PROTO_FPDMA
value|(0x0c<< 1)
define|#
directive|define
name|AP_PROTO_RESP_INFO
value|(0x0f<< 1)
define|#
directive|define
name|AP_MULTI
value|0xe0
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|AP_T_LEN
value|0x03
define|#
directive|define
name|AP_BB
value|0x04
define|#
directive|define
name|AP_T_DIR
value|0x08
define|#
directive|define
name|AP_CK_COND
value|0x20
define|#
directive|define
name|AP_OFFLINE
value|0x60
name|u_int8_t
name|features
decl_stmt|;
name|u_int8_t
name|sector_count
decl_stmt|;
name|u_int8_t
name|lba_low
decl_stmt|;
name|u_int8_t
name|lba_mid
decl_stmt|;
name|u_int8_t
name|lba_high
decl_stmt|;
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|command
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_maintenance_in
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SERVICE_ACTION_MASK
value|0x1f
define|#
directive|define
name|SA_RPRT_TRGT_GRP
value|0x0a
name|uint8_t
name|reserved
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|reserved1
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ata_pass_16
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|protocol
decl_stmt|;
define|#
directive|define
name|AP_EXTEND
value|0x01
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|AP_FLAG_TLEN_NO_DATA
value|(0<< 0)
define|#
directive|define
name|AP_FLAG_TLEN_FEAT
value|(1<< 0)
define|#
directive|define
name|AP_FLAG_TLEN_SECT_CNT
value|(2<< 0)
define|#
directive|define
name|AP_FLAG_TLEN_STPSIU
value|(3<< 0)
define|#
directive|define
name|AP_FLAG_BYT_BLOK_BYTES
value|(0<< 2)
define|#
directive|define
name|AP_FLAG_BYT_BLOK_BLOCKS
value|(1<< 2)
define|#
directive|define
name|AP_FLAG_TDIR_TO_DEV
value|(0<< 3)
define|#
directive|define
name|AP_FLAG_TDIR_FROM_DEV
value|(1<< 3)
define|#
directive|define
name|AP_FLAG_CHK_COND
value|(1<< 5)
name|u_int8_t
name|features_ext
decl_stmt|;
name|u_int8_t
name|features
decl_stmt|;
name|u_int8_t
name|sector_count_ext
decl_stmt|;
name|u_int8_t
name|sector_count
decl_stmt|;
name|u_int8_t
name|lba_low_ext
decl_stmt|;
name|u_int8_t
name|lba_low
decl_stmt|;
name|u_int8_t
name|lba_mid_ext
decl_stmt|;
name|u_int8_t
name|lba_mid
decl_stmt|;
name|u_int8_t
name|lba_high_ext
decl_stmt|;
name|u_int8_t
name|lba_high
decl_stmt|;
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|command
decl_stmt|;
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SC_SCSI_1
value|0x01
end_define

begin_define
define|#
directive|define
name|SC_SCSI_2
value|0x03
end_define

begin_comment
comment|/*  * Opcodes  */
end_comment

begin_define
define|#
directive|define
name|TEST_UNIT_READY
value|0x00
end_define

begin_define
define|#
directive|define
name|REQUEST_SENSE
value|0x03
end_define

begin_define
define|#
directive|define
name|READ_6
value|0x08
end_define

begin_define
define|#
directive|define
name|WRITE_6
value|0x0A
end_define

begin_define
define|#
directive|define
name|INQUIRY
value|0x12
end_define

begin_define
define|#
directive|define
name|MODE_SELECT_6
value|0x15
end_define

begin_define
define|#
directive|define
name|MODE_SENSE_6
value|0x1A
end_define

begin_define
define|#
directive|define
name|START_STOP_UNIT
value|0x1B
end_define

begin_define
define|#
directive|define
name|START_STOP
value|0x1B
end_define

begin_define
define|#
directive|define
name|RESERVE
value|0x16
end_define

begin_define
define|#
directive|define
name|RELEASE
value|0x17
end_define

begin_define
define|#
directive|define
name|RECEIVE_DIAGNOSTIC
value|0x1C
end_define

begin_define
define|#
directive|define
name|SEND_DIAGNOSTIC
value|0x1D
end_define

begin_define
define|#
directive|define
name|PREVENT_ALLOW
value|0x1E
end_define

begin_define
define|#
directive|define
name|READ_CAPACITY
value|0x25
end_define

begin_define
define|#
directive|define
name|READ_10
value|0x28
end_define

begin_define
define|#
directive|define
name|WRITE_10
value|0x2A
end_define

begin_define
define|#
directive|define
name|POSITION_TO_ELEMENT
value|0x2B
end_define

begin_define
define|#
directive|define
name|WRITE_VERIFY_10
value|0x2E
end_define

begin_define
define|#
directive|define
name|VERIFY_10
value|0x2F
end_define

begin_define
define|#
directive|define
name|SYNCHRONIZE_CACHE
value|0x35
end_define

begin_define
define|#
directive|define
name|READ_DEFECT_DATA_10
value|0x37
end_define

begin_define
define|#
directive|define
name|WRITE_BUFFER
value|0x3B
end_define

begin_define
define|#
directive|define
name|READ_BUFFER
value|0x3C
end_define

begin_define
define|#
directive|define
name|CHANGE_DEFINITION
value|0x40
end_define

begin_define
define|#
directive|define
name|WRITE_SAME_10
value|0x41
end_define

begin_define
define|#
directive|define
name|UNMAP
value|0x42
end_define

begin_define
define|#
directive|define
name|LOG_SELECT
value|0x4C
end_define

begin_define
define|#
directive|define
name|LOG_SENSE
value|0x4D
end_define

begin_define
define|#
directive|define
name|MODE_SELECT_10
value|0x55
end_define

begin_define
define|#
directive|define
name|RESERVE_10
value|0x56
end_define

begin_define
define|#
directive|define
name|RELEASE_10
value|0x57
end_define

begin_define
define|#
directive|define
name|MODE_SENSE_10
value|0x5A
end_define

begin_define
define|#
directive|define
name|PERSISTENT_RES_IN
value|0x5E
end_define

begin_define
define|#
directive|define
name|PERSISTENT_RES_OUT
value|0x5F
end_define

begin_define
define|#
directive|define
name|ATA_PASS_16
value|0x85
end_define

begin_define
define|#
directive|define
name|READ_16
value|0x88
end_define

begin_define
define|#
directive|define
name|WRITE_16
value|0x8A
end_define

begin_define
define|#
directive|define
name|WRITE_VERIFY_16
value|0x8E
end_define

begin_define
define|#
directive|define
name|SYNCHRONIZE_CACHE_16
value|0x91
end_define

begin_define
define|#
directive|define
name|WRITE_SAME_16
value|0x93
end_define

begin_define
define|#
directive|define
name|SERVICE_ACTION_IN
value|0x9E
end_define

begin_define
define|#
directive|define
name|REPORT_LUNS
value|0xA0
end_define

begin_define
define|#
directive|define
name|ATA_PASS_12
value|0xA1
end_define

begin_define
define|#
directive|define
name|MAINTENANCE_IN
value|0xA3
end_define

begin_define
define|#
directive|define
name|MAINTENANCE_OUT
value|0xA4
end_define

begin_define
define|#
directive|define
name|MOVE_MEDIUM
value|0xA5
end_define

begin_define
define|#
directive|define
name|READ_12
value|0xA8
end_define

begin_define
define|#
directive|define
name|WRITE_12
value|0xAA
end_define

begin_define
define|#
directive|define
name|WRITE_VERIFY_12
value|0xAE
end_define

begin_define
define|#
directive|define
name|READ_ELEMENT_STATUS
value|0xB8
end_define

begin_define
define|#
directive|define
name|READ_CD
value|0xBE
end_define

begin_comment
comment|/* Maintenance In Service Action Codes */
end_comment

begin_define
define|#
directive|define
name|REPORT_IDENTIFYING_INFRMATION
value|0x05
end_define

begin_define
define|#
directive|define
name|REPORT_TARGET_PORT_GROUPS
value|0x0A
end_define

begin_define
define|#
directive|define
name|REPORT_ALIASES
value|0x0B
end_define

begin_define
define|#
directive|define
name|REPORT_SUPPORTED_OPERATION_CODES
value|0x0C
end_define

begin_define
define|#
directive|define
name|REPORT_SUPPORTED_TASK_MANAGEMENT_FUNCTIONS
value|0x0D
end_define

begin_define
define|#
directive|define
name|REPORT_PRIORITY
value|0x0E
end_define

begin_define
define|#
directive|define
name|REPORT_TIMESTAMP
value|0x0F
end_define

begin_define
define|#
directive|define
name|MANAGEMENT_PROTOCOL_IN
value|0x10
end_define

begin_comment
comment|/* Maintenance Out Service Action Codes */
end_comment

begin_define
define|#
directive|define
name|SET_IDENTIFY_INFORMATION
value|0x06
end_define

begin_define
define|#
directive|define
name|SET_TARGET_PORT_GROUPS
value|0x0A
end_define

begin_define
define|#
directive|define
name|CHANGE_ALIASES
value|0x0B
end_define

begin_define
define|#
directive|define
name|SET_PRIORITY
value|0x0E
end_define

begin_define
define|#
directive|define
name|SET_TIMESTAMP
value|0x0F
end_define

begin_define
define|#
directive|define
name|MANGAEMENT_PROTOCOL_OUT
value|0x10
end_define

begin_comment
comment|/*  * Device Types  */
end_comment

begin_define
define|#
directive|define
name|T_DIRECT
value|0x00
end_define

begin_define
define|#
directive|define
name|T_SEQUENTIAL
value|0x01
end_define

begin_define
define|#
directive|define
name|T_PRINTER
value|0x02
end_define

begin_define
define|#
directive|define
name|T_PROCESSOR
value|0x03
end_define

begin_define
define|#
directive|define
name|T_WORM
value|0x04
end_define

begin_define
define|#
directive|define
name|T_CDROM
value|0x05
end_define

begin_define
define|#
directive|define
name|T_SCANNER
value|0x06
end_define

begin_define
define|#
directive|define
name|T_OPTICAL
value|0x07
end_define

begin_define
define|#
directive|define
name|T_CHANGER
value|0x08
end_define

begin_define
define|#
directive|define
name|T_COMM
value|0x09
end_define

begin_define
define|#
directive|define
name|T_ASC0
value|0x0a
end_define

begin_define
define|#
directive|define
name|T_ASC1
value|0x0b
end_define

begin_define
define|#
directive|define
name|T_STORARRAY
value|0x0c
end_define

begin_define
define|#
directive|define
name|T_ENCLOSURE
value|0x0d
end_define

begin_define
define|#
directive|define
name|T_RBC
value|0x0e
end_define

begin_define
define|#
directive|define
name|T_OCRW
value|0x0f
end_define

begin_define
define|#
directive|define
name|T_OSD
value|0x11
end_define

begin_define
define|#
directive|define
name|T_ADC
value|0x12
end_define

begin_define
define|#
directive|define
name|T_NODEVICE
value|0x1f
end_define

begin_define
define|#
directive|define
name|T_ANY
value|0xff
end_define

begin_comment
comment|/* Used in Quirk table matches */
end_comment

begin_define
define|#
directive|define
name|T_REMOV
value|1
end_define

begin_define
define|#
directive|define
name|T_FIXED
value|0
end_define

begin_comment
comment|/*  * This length is the initial inquiry length used by the probe code, as      * well as the length necessary for scsi_print_inquiry() to function   * correctly.  If either use requires a different length in the future,   * the two values should be de-coupled.  */
end_comment

begin_define
define|#
directive|define
name|SHORT_INQUIRY_LENGTH
value|36
end_define

begin_struct
struct|struct
name|scsi_inquiry_data
block|{
name|u_int8_t
name|device
decl_stmt|;
define|#
directive|define
name|SID_TYPE
parameter_list|(
name|inq_data
parameter_list|)
value|((inq_data)->device& 0x1f)
define|#
directive|define
name|SID_QUAL
parameter_list|(
name|inq_data
parameter_list|)
value|(((inq_data)->device& 0xE0)>> 5)
define|#
directive|define
name|SID_QUAL_LU_CONNECTED
value|0x00
comment|/* 					 * The specified peripheral device 					 * type is currently connected to 					 * logical unit.  If the target cannot 					 * determine whether or not a physical 					 * device is currently connected, it 					 * shall also use this peripheral 					 * qualifier when returning the INQUIRY 					 * data.  This peripheral qualifier 					 * does not mean that the device is 					 * ready for access by the initiator. 					 */
define|#
directive|define
name|SID_QUAL_LU_OFFLINE
value|0x01
comment|/* 					 * The target is capable of supporting 					 * the specified peripheral device type 					 * on this logical unit; however, the 					 * physical device is not currently 					 * connected to this logical unit. 					 */
define|#
directive|define
name|SID_QUAL_RSVD
value|0x02
define|#
directive|define
name|SID_QUAL_BAD_LU
value|0x03
comment|/* 					 * The target is not capable of 					 * supporting a physical device on 					 * this logical unit. For this 					 * peripheral qualifier the peripheral 					 * device type shall be set to 1Fh to 					 * provide compatibility with previous 					 * versions of SCSI. All other 					 * peripheral device type values are 					 * reserved for this peripheral 					 * qualifier. 					 */
define|#
directive|define
name|SID_QUAL_IS_VENDOR_UNIQUE
parameter_list|(
name|inq_data
parameter_list|)
value|((SID_QUAL(inq_data)& 0x08) != 0)
name|u_int8_t
name|dev_qual2
decl_stmt|;
define|#
directive|define
name|SID_QUAL2
value|0x7F
define|#
directive|define
name|SID_IS_REMOVABLE
parameter_list|(
name|inq_data
parameter_list|)
value|(((inq_data)->dev_qual2& 0x80) != 0)
name|u_int8_t
name|version
decl_stmt|;
define|#
directive|define
name|SID_ANSI_REV
parameter_list|(
name|inq_data
parameter_list|)
value|((inq_data)->version& 0x07)
define|#
directive|define
name|SCSI_REV_0
value|0
define|#
directive|define
name|SCSI_REV_CCS
value|1
define|#
directive|define
name|SCSI_REV_2
value|2
define|#
directive|define
name|SCSI_REV_SPC
value|3
define|#
directive|define
name|SCSI_REV_SPC2
value|4
define|#
directive|define
name|SCSI_REV_SPC3
value|5
define|#
directive|define
name|SCSI_REV_SPC4
value|6
define|#
directive|define
name|SID_ECMA
value|0x38
define|#
directive|define
name|SID_ISO
value|0xC0
name|u_int8_t
name|response_format
decl_stmt|;
define|#
directive|define
name|SID_AENC
value|0x80
define|#
directive|define
name|SID_TrmIOP
value|0x40
define|#
directive|define
name|SID_NormACA
value|0x20
define|#
directive|define
name|SID_HiSup
value|0x10
name|u_int8_t
name|additional_length
decl_stmt|;
define|#
directive|define
name|SID_ADDITIONAL_LENGTH
parameter_list|(
name|iqd
parameter_list|)
define|\
value|((iqd)->additional_length +					\ 	__offsetof(struct scsi_inquiry_data, additional_length) + 1)
name|u_int8_t
name|spc3_flags
decl_stmt|;
define|#
directive|define
name|SPC3_SID_PROTECT
value|0x01
define|#
directive|define
name|SPC3_SID_3PC
value|0x08
define|#
directive|define
name|SPC3_SID_TPGS_MASK
value|0x30
define|#
directive|define
name|SPC3_SID_TPGS_IMPLICIT
value|0x10
define|#
directive|define
name|SPC3_SID_TPGS_EXPLICIT
value|0x20
define|#
directive|define
name|SPC3_SID_ACC
value|0x40
define|#
directive|define
name|SPC3_SID_SCCS
value|0x80
name|u_int8_t
name|spc2_flags
decl_stmt|;
define|#
directive|define
name|SPC2_SID_ADDR16
value|0x01
define|#
directive|define
name|SPC2_SID_MChngr
value|0x08
define|#
directive|define
name|SPC2_SID_MultiP
value|0x10
define|#
directive|define
name|SPC2_SID_EncServ
value|0x40
define|#
directive|define
name|SPC2_SID_BQueue
value|0x80
define|#
directive|define
name|INQ_DATA_TQ_ENABLED
parameter_list|(
name|iqd
parameter_list|)
define|\
value|((SID_ANSI_REV(iqd)< SCSI_REV_SPC2)? ((iqd)->flags& SID_CmdQue) :	\     (((iqd)->flags& SID_CmdQue)&& !((iqd)->spc2_flags& SPC2_SID_BQueue)) || \     (!((iqd)->flags& SID_CmdQue)&& ((iqd)->spc2_flags& SPC2_SID_BQueue)))
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|SID_SftRe
value|0x01
define|#
directive|define
name|SID_CmdQue
value|0x02
define|#
directive|define
name|SID_Linked
value|0x08
define|#
directive|define
name|SID_Sync
value|0x10
define|#
directive|define
name|SID_WBus16
value|0x20
define|#
directive|define
name|SID_WBus32
value|0x40
define|#
directive|define
name|SID_RelAdr
value|0x80
define|#
directive|define
name|SID_VENDOR_SIZE
value|8
name|char
name|vendor
index|[
name|SID_VENDOR_SIZE
index|]
decl_stmt|;
define|#
directive|define
name|SID_PRODUCT_SIZE
value|16
name|char
name|product
index|[
name|SID_PRODUCT_SIZE
index|]
decl_stmt|;
define|#
directive|define
name|SID_REVISION_SIZE
value|4
name|char
name|revision
index|[
name|SID_REVISION_SIZE
index|]
decl_stmt|;
comment|/* 	 * The following fields were taken from SCSI Primary Commands - 2 	 * (SPC-2) Revision 14, Dated 11 November 1999 	 */
define|#
directive|define
name|SID_VENDOR_SPECIFIC_0_SIZE
value|20
name|u_int8_t
name|vendor_specific0
index|[
name|SID_VENDOR_SPECIFIC_0_SIZE
index|]
decl_stmt|;
comment|/* 	 * An extension of SCSI Parallel Specific Values 	 */
define|#
directive|define
name|SID_SPI_IUS
value|0x01
define|#
directive|define
name|SID_SPI_QAS
value|0x02
define|#
directive|define
name|SID_SPI_CLOCK_ST
value|0x00
define|#
directive|define
name|SID_SPI_CLOCK_DT
value|0x04
define|#
directive|define
name|SID_SPI_CLOCK_DT_ST
value|0x0C
define|#
directive|define
name|SID_SPI_MASK
value|0x0F
name|u_int8_t
name|spi3data
decl_stmt|;
name|u_int8_t
name|reserved2
decl_stmt|;
comment|/* 	 * Version Descriptors, stored 2 byte values. 	 */
name|u_int8_t
name|version1
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|version2
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|version3
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|version4
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|version5
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|version6
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|version7
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|version8
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|reserved3
index|[
literal|22
index|]
decl_stmt|;
define|#
directive|define
name|SID_VENDOR_SPECIFIC_1_SIZE
value|160
name|u_int8_t
name|vendor_specific1
index|[
name|SID_VENDOR_SPECIFIC_1_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This structure is more suited to initiator operation, because the  * maximum number of supported pages is already allocated.  */
end_comment

begin_struct
struct|struct
name|scsi_vpd_supported_page_list
block|{
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SVPD_SUPPORTED_PAGE_LIST
value|0x00
define|#
directive|define
name|SVPD_SUPPORTED_PAGES_HDR_LEN
value|4
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|length
decl_stmt|;
comment|/* number of VPD entries */
define|#
directive|define
name|SVPD_SUPPORTED_PAGES_SIZE
value|251
name|u_int8_t
name|list
index|[
name|SVPD_SUPPORTED_PAGES_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This structure is more suited to target operation, because the  * number of supported pages is left to the user to allocate.  */
end_comment

begin_struct
struct|struct
name|scsi_vpd_supported_pages
block|{
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|page_code
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
define|#
directive|define
name|SVPD_SUPPORTED_PAGES
value|0x00
name|u_int8_t
name|length
decl_stmt|;
name|u_int8_t
name|page_list
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_unit_serial_number
block|{
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SVPD_UNIT_SERIAL_NUMBER
value|0x80
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|length
decl_stmt|;
comment|/* serial number length */
define|#
directive|define
name|SVPD_SERIAL_NUM_SIZE
value|251
name|u_int8_t
name|serial_num
index|[
name|SVPD_SERIAL_NUM_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_device_id
block|{
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SVPD_DEVICE_ID
value|0x83
define|#
directive|define
name|SVPD_DEVICE_ID_MAX_SIZE
value|252
define|#
directive|define
name|SVPD_DEVICE_ID_HDR_LEN
define|\
value|__offsetof(struct scsi_vpd_device_id, desc_list)
name|u_int8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|desc_list
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_descriptor
block|{
name|u_int8_t
name|proto_codeset
decl_stmt|;
define|#
directive|define
name|SCSI_PROTO_FC
value|0x00
define|#
directive|define
name|SCSI_PROTO_SPI
value|0x01
define|#
directive|define
name|SCSI_PROTO_SSA
value|0x02
define|#
directive|define
name|SCSI_PROTO_1394
value|0x03
define|#
directive|define
name|SCSI_PROTO_RDMA
value|0x04
define|#
directive|define
name|SCSI_PROTO_iSCSI
value|0x05
define|#
directive|define
name|SCSI_PROTO_SAS
value|0x06
define|#
directive|define
name|SCSI_PROTO_ADT
value|0x07
define|#
directive|define
name|SCSI_PROTO_ATA
value|0x08
define|#
directive|define
name|SVPD_ID_PROTO_SHIFT
value|4
define|#
directive|define
name|SVPD_ID_CODESET_BINARY
value|0x01
define|#
directive|define
name|SVPD_ID_CODESET_ASCII
value|0x02
define|#
directive|define
name|SVPD_ID_CODESET_UTF8
value|0x03
define|#
directive|define
name|SVPD_ID_CODESET_MASK
value|0x0f
name|u_int8_t
name|id_type
decl_stmt|;
define|#
directive|define
name|SVPD_ID_PIV
value|0x80
define|#
directive|define
name|SVPD_ID_ASSOC_LUN
value|0x00
define|#
directive|define
name|SVPD_ID_ASSOC_PORT
value|0x10
define|#
directive|define
name|SVPD_ID_ASSOC_TARGET
value|0x20
define|#
directive|define
name|SVPD_ID_ASSOC_MASK
value|0x30
define|#
directive|define
name|SVPD_ID_TYPE_VENDOR
value|0x00
define|#
directive|define
name|SVPD_ID_TYPE_T10
value|0x01
define|#
directive|define
name|SVPD_ID_TYPE_EUI64
value|0x02
define|#
directive|define
name|SVPD_ID_TYPE_NAA
value|0x03
define|#
directive|define
name|SVPD_ID_TYPE_RELTARG
value|0x04
define|#
directive|define
name|SVPD_ID_TYPE_TPORTGRP
value|0x05
define|#
directive|define
name|SVPD_ID_TYPE_LUNGRP
value|0x06
define|#
directive|define
name|SVPD_ID_TYPE_MD5_LUN_ID
value|0x07
define|#
directive|define
name|SVPD_ID_TYPE_SCSI_NAME
value|0x08
define|#
directive|define
name|SVPD_ID_TYPE_MASK
value|0x0f
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|length
decl_stmt|;
define|#
directive|define
name|SVPD_DEVICE_ID_DESC_HDR_LEN
define|\
value|__offsetof(struct scsi_vpd_id_descriptor, identifier)
name|u_int8_t
name|identifier
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_t10
block|{
name|u_int8_t
name|vendor
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|vendor_spec_id
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_eui64
block|{
name|u_int8_t
name|ieee_company_id
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|extension_id
index|[
literal|5
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_naa_basic
block|{
name|uint8_t
name|naa
decl_stmt|;
comment|/* big endian, packed: 	uint8_t	naa : 4; 	uint8_t naa_desig : 4; 	*/
define|#
directive|define
name|SVPD_ID_NAA_NAA_SHIFT
value|4
define|#
directive|define
name|SVPD_ID_NAA_IEEE_EXT
value|0x02
define|#
directive|define
name|SVPD_ID_NAA_LOCAL_REG
value|0x03
define|#
directive|define
name|SVPD_ID_NAA_IEEE_REG
value|0x05
define|#
directive|define
name|SVPD_ID_NAA_IEEE_REG_EXT
value|0x06
name|uint8_t
name|naa_data
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_naa_ieee_extended_id
block|{
name|uint8_t
name|naa
decl_stmt|;
name|uint8_t
name|vendor_specific_id_a
decl_stmt|;
name|uint8_t
name|ieee_company_id
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|vendor_specific_id_b
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_naa_local_reg
block|{
name|uint8_t
name|naa
decl_stmt|;
name|uint8_t
name|local_value
index|[
literal|7
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_naa_ieee_reg
block|{
name|uint8_t
name|naa
decl_stmt|;
name|uint8_t
name|reg_value
index|[
literal|7
index|]
decl_stmt|;
comment|/* big endian, packed: 	uint8_t naa_basic : 4; 	uint8_t ieee_company_id_0 : 4; 	uint8_t ieee_company_id_1[2]; 	uint8_t ieee_company_id_2 : 4; 	uint8_t vendor_specific_id_0 : 4; 	uint8_t vendor_specific_id_1[4]; 	*/
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_naa_ieee_reg_extended
block|{
name|uint8_t
name|naa
decl_stmt|;
name|uint8_t
name|reg_value
index|[
literal|15
index|]
decl_stmt|;
comment|/* big endian, packed: 	uint8_t naa_basic : 4; 	uint8_t ieee_company_id_0 : 4; 	uint8_t ieee_company_id_1[2]; 	uint8_t ieee_company_id_2 : 4; 	uint8_t vendor_specific_id_0 : 4; 	uint8_t vendor_specific_id_1[4]; 	uint8_t vendor_specific_id_ext[8]; 	*/
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_rel_trgt_port_id
block|{
name|uint8_t
name|obsolete
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|rel_trgt_port_id
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_trgt_port_grp_id
block|{
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|trgt_port_grp
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_lun_grp_id
block|{
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|log_unit_grp
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_md5_lun_id
block|{
name|uint8_t
name|lun_id
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_vpd_id_scsi_name
block|{
name|uint8_t
name|name_string
index|[
literal|256
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_service_action_in
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|service_action
decl_stmt|;
name|uint8_t
name|action_dependent
index|[
literal|13
index|]
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_diag_page
block|{
name|uint8_t
name|page_code
decl_stmt|;
name|uint8_t
name|page_specific_flags
decl_stmt|;
name|uint8_t
name|length
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|params
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * ATA Information VPD Page based on  * T10/2126-D Revision 04  */
end_comment

begin_define
define|#
directive|define
name|SVPD_ATA_INFORMATION
value|0x89
end_define

begin_comment
comment|/*  * Block Device Characteristics VPD Page based on  * T10/1799-D Revision 31  */
end_comment

begin_struct
struct|struct
name|scsi_vpd_block_characteristics
block|{
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SVPD_BDC
value|0xB1
name|u_int8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|medium_rotation_rate
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|SVPD_BDC_RATE_NOT_REPORTED
value|0x00
define|#
directive|define
name|SVPD_BDC_RATE_NONE_ROTATING
value|0x01
name|u_int8_t
name|reserved1
decl_stmt|;
name|u_int8_t
name|nominal_form_factor
decl_stmt|;
define|#
directive|define
name|SVPD_BDC_FORM_NOT_REPORTED
value|0x00
define|#
directive|define
name|SVPD_BDC_FORM_5_25INCH
value|0x01
define|#
directive|define
name|SVPD_BDC_FORM_3_5INCH
value|0x02
define|#
directive|define
name|SVPD_BDC_FORM_2_5INCH
value|0x03
define|#
directive|define
name|SVPD_BDC_FORM_1_5INCH
value|0x04
define|#
directive|define
name|SVPD_BDC_FORM_LESSTHAN_1_5INCH
value|0x05
name|u_int8_t
name|reserved2
index|[
literal|56
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Logical Block Provisioning VPD Page based on  * T10/1799-D Revision 31  */
end_comment

begin_struct
struct|struct
name|scsi_vpd_logical_block_prov
block|{
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SVPD_LBP
value|0xB2
name|u_int8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|SVPD_LBP_PL_BASIC
value|0x04
name|u_int8_t
name|threshold_exponent
decl_stmt|;
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|SVPD_LBP_UNMAP
value|0x80
define|#
directive|define
name|SVPD_LBP_WS16
value|0x40
define|#
directive|define
name|SVPD_LBP_WS10
value|0x20
define|#
directive|define
name|SVPD_LBP_RZ
value|0x04
define|#
directive|define
name|SVPD_LBP_ANC_SUP
value|0x02
define|#
directive|define
name|SVPD_LBP_DP
value|0x01
name|u_int8_t
name|prov_type
decl_stmt|;
define|#
directive|define
name|SVPD_LBP_RESOURCE
value|0x01
define|#
directive|define
name|SVPD_LBP_THIN
value|0x02
name|u_int8_t
name|reserved
decl_stmt|;
comment|/* 	 * Provisioning Group Descriptor can be here if SVPD_LBP_DP is set 	 * Its size can be determined from page_length - 4 	 */
block|}
struct|;
end_struct

begin_comment
comment|/*  * Block Limits VDP Page based on  * T10/1799-D Revision 31  */
end_comment

begin_struct
struct|struct
name|scsi_vpd_block_limits
block|{
name|u_int8_t
name|device
decl_stmt|;
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SVPD_BLOCK_LIMITS
value|0xB0
name|u_int8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|SVPD_BL_PL_BASIC
value|0x10
define|#
directive|define
name|SVPD_BL_PL_TP
value|0x3C
name|u_int8_t
name|reserved1
decl_stmt|;
name|u_int8_t
name|max_cmp_write_len
decl_stmt|;
name|u_int8_t
name|opt_txfer_len_grain
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|max_txfer_len
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|opt_txfer_len
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|max_prefetch
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|max_unmap_lba_cnt
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|max_unmap_blk_cnt
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|opt_unmap_grain
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|unmap_grain_align
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|max_write_same_length
index|[
literal|8
index|]
decl_stmt|;
name|u_int8_t
name|reserved2
index|[
literal|20
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_read_capacity
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SRC_RELADR
value|0x01
name|u_int8_t
name|addr
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|pmi
decl_stmt|;
define|#
directive|define
name|SRC_PMI
value|0x01
name|u_int8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_read_capacity_16
block|{
name|uint8_t
name|opcode
decl_stmt|;
define|#
directive|define
name|SRC16_SERVICE_ACTION
value|0x10
name|uint8_t
name|service_action
decl_stmt|;
name|uint8_t
name|addr
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|alloc_len
index|[
literal|4
index|]
decl_stmt|;
define|#
directive|define
name|SRC16_PMI
value|0x01
define|#
directive|define
name|SRC16_RELADR
value|0x02
name|uint8_t
name|reladr
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_read_capacity_data
block|{
name|u_int8_t
name|addr
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_read_capacity_data_long
block|{
name|uint8_t
name|addr
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
define|#
directive|define
name|SRC16_PROT_EN
value|0x01
define|#
directive|define
name|SRC16_P_TYPE
value|0x0e
define|#
directive|define
name|SRC16_PTYPE_1
value|0x00
define|#
directive|define
name|SRC16_PTYPE_2
value|0x02
define|#
directive|define
name|SRC16_PTYPE_3
value|0x04
name|uint8_t
name|prot
decl_stmt|;
define|#
directive|define
name|SRC16_LBPPBE
value|0x0f
define|#
directive|define
name|SRC16_PI_EXPONENT
value|0xf0
define|#
directive|define
name|SRC16_PI_EXPONENT_SHIFT
value|4
name|uint8_t
name|prot_lbppbe
decl_stmt|;
define|#
directive|define
name|SRC16_LALBA
value|0x3f
define|#
directive|define
name|SRC16_LBPRZ
value|0x40
define|#
directive|define
name|SRC16_LBPME
value|0x80
comment|/*  * Alternate versions of these macros that are intended for use on a 16-bit  * version of the lalba_lbp field instead of the array of 2 8 bit numbers.  */
define|#
directive|define
name|SRC16_LALBA_A
value|0x3fff
define|#
directive|define
name|SRC16_LBPRZ_A
value|0x4000
define|#
directive|define
name|SRC16_LBPME_A
value|0x8000
name|uint8_t
name|lalba_lbp
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_report_luns
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|reserved1
decl_stmt|;
define|#
directive|define
name|RPL_REPORT_DEFAULT
value|0x00
define|#
directive|define
name|RPL_REPORT_WELLKNOWN
value|0x01
define|#
directive|define
name|RPL_REPORT_ALL
value|0x02
name|uint8_t
name|select_report
decl_stmt|;
name|uint8_t
name|reserved2
index|[
literal|3
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|reserved3
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_report_luns_lundata
block|{
name|uint8_t
name|lundata
index|[
literal|8
index|]
decl_stmt|;
define|#
directive|define
name|RPL_LUNDATA_PERIPH_BUS_MASK
value|0x3f
define|#
directive|define
name|RPL_LUNDATA_FLAT_LUN_MASK
value|0x3f
define|#
directive|define
name|RPL_LUNDATA_FLAT_LUN_BITS
value|0x06
define|#
directive|define
name|RPL_LUNDATA_LUN_TARG_MASK
value|0x3f
define|#
directive|define
name|RPL_LUNDATA_LUN_BUS_MASK
value|0xe0
define|#
directive|define
name|RPL_LUNDATA_LUN_LUN_MASK
value|0x1f
define|#
directive|define
name|RPL_LUNDATA_EXT_LEN_MASK
value|0x30
define|#
directive|define
name|RPL_LUNDATA_EXT_EAM_MASK
value|0x0f
define|#
directive|define
name|RPL_LUNDATA_EXT_EAM_WK
value|0x01
define|#
directive|define
name|RPL_LUNDATA_EXT_EAM_NOT_SPEC
value|0x0f
define|#
directive|define
name|RPL_LUNDATA_ATYP_MASK
value|0xc0
comment|/* MBZ for type 0 lun */
define|#
directive|define
name|RPL_LUNDATA_ATYP_PERIPH
value|0x00
define|#
directive|define
name|RPL_LUNDATA_ATYP_FLAT
value|0x40
define|#
directive|define
name|RPL_LUNDATA_ATYP_LUN
value|0x80
define|#
directive|define
name|RPL_LUNDATA_ATYP_EXTLUN
value|0xc0
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_report_luns_data
block|{
name|u_int8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
comment|/* length of LUN inventory, in bytes */
name|u_int8_t
name|reserved
index|[
literal|4
index|]
decl_stmt|;
comment|/* unused */
comment|/* 	 * LUN inventory- we only support the type zero form for now. 	 */
name|struct
name|scsi_report_luns_lundata
name|luns
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_target_group
block|{
name|uint8_t
name|opcode
decl_stmt|;
name|uint8_t
name|service_action
decl_stmt|;
define|#
directive|define
name|STG_PDF_LENGTH
value|0x00
define|#
directive|define
name|RPL_PDF_EXTENDED
value|0x20
name|uint8_t
name|reserved1
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|reserved2
decl_stmt|;
name|uint8_t
name|control
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_target_port_descriptor
block|{
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|relative_target_port_identifier
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|desc_list
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_target_port_group_descriptor
block|{
name|uint8_t
name|pref_state
decl_stmt|;
define|#
directive|define
name|TPG_PRIMARY
value|0x80
define|#
directive|define
name|TPG_ASYMMETRIC_ACCESS_STATE_MASK
value|0xf
define|#
directive|define
name|TPG_ASYMMETRIC_ACCESS_OPTIMIZED
value|0x0
define|#
directive|define
name|TPG_ASYMMETRIC_ACCESS_NONOPTIMIZED
value|0x1
define|#
directive|define
name|TPG_ASYMMETRIC_ACCESS_STANDBY
value|0x2
define|#
directive|define
name|TPG_ASYMMETRIC_ACCESS_UNAVAILABLE
value|0x3
define|#
directive|define
name|TPG_ASYMMETRIC_ACCESS_LBA_DEPENDENT
value|0x4
define|#
directive|define
name|TPG_ASYMMETRIC_ACCESS_OFFLINE
value|0xE
define|#
directive|define
name|TPG_ASYMMETRIC_ACCESS_TRANSITIONING
value|0xF
name|uint8_t
name|support
decl_stmt|;
define|#
directive|define
name|TPG_AO_SUP
value|0x01
define|#
directive|define
name|TPG_AN_SUP
value|0x02
define|#
directive|define
name|TPG_S_SUP
value|0x04
define|#
directive|define
name|TPG_U_SUP
value|0x08
define|#
directive|define
name|TPG_LBD_SUP
value|0x10
define|#
directive|define
name|TPG_O_SUP
value|0x40
define|#
directive|define
name|TPG_T_SUP
value|0x80
name|uint8_t
name|target_port_group
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|status
decl_stmt|;
define|#
directive|define
name|TPG_UNAVLBL
value|0
define|#
directive|define
name|TPG_SET_BY_STPG
value|0x01
define|#
directive|define
name|TPG_IMPLICIT
value|0x02
name|uint8_t
name|vendor_specific
decl_stmt|;
name|uint8_t
name|target_port_count
decl_stmt|;
name|struct
name|scsi_target_port_descriptor
name|descriptors
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_target_group_data
block|{
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
comment|/* length of returned data, in bytes */
name|struct
name|scsi_target_port_group_descriptor
name|groups
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_target_group_data_extended
block|{
name|uint8_t
name|length
index|[
literal|4
index|]
decl_stmt|;
comment|/* length of returned data, in bytes */
name|uint8_t
name|format_type
decl_stmt|;
comment|/* STG_PDF_LENGTH or RPL_PDF_EXTENDED */
name|uint8_t
name|implicit_transition_time
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|scsi_target_port_group_descriptor
name|groups
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|SSD_TYPE_NONE
block|,
name|SSD_TYPE_FIXED
block|,
name|SSD_TYPE_DESC
block|}
name|scsi_sense_data_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|SSD_ELEM_NONE
block|,
name|SSD_ELEM_SKIP
block|,
name|SSD_ELEM_DESC
block|,
name|SSD_ELEM_SKS
block|,
name|SSD_ELEM_COMMAND
block|,
name|SSD_ELEM_INFO
block|,
name|SSD_ELEM_FRU
block|,
name|SSD_ELEM_STREAM
block|,
name|SSD_ELEM_MAX
block|}
name|scsi_sense_elem_type
typedef|;
end_typedef

begin_struct
struct|struct
name|scsi_sense_data
block|{
name|uint8_t
name|error_code
decl_stmt|;
comment|/* 	 * SPC-4 says that the maximum length of sense data is 252 bytes. 	 * So this structure is exactly 252 bytes log. 	 */
define|#
directive|define
name|SSD_FULL_SIZE
value|252
name|uint8_t
name|sense_buf
index|[
name|SSD_FULL_SIZE
operator|-
literal|1
index|]
decl_stmt|;
comment|/* 	 * XXX KDM is this still a reasonable minimum size? 	 */
define|#
directive|define
name|SSD_MIN_SIZE
value|18
comment|/* 	 * Maximum value for the extra_len field in the sense data. 	 */
define|#
directive|define
name|SSD_EXTRA_MAX
value|244
block|}
struct|;
end_struct

begin_comment
comment|/*  * Fixed format sense data.  */
end_comment

begin_struct
struct|struct
name|scsi_sense_data_fixed
block|{
name|u_int8_t
name|error_code
decl_stmt|;
define|#
directive|define
name|SSD_ERRCODE
value|0x7F
define|#
directive|define
name|SSD_CURRENT_ERROR
value|0x70
define|#
directive|define
name|SSD_DEFERRED_ERROR
value|0x71
define|#
directive|define
name|SSD_ERRCODE_VALID
value|0x80
name|u_int8_t
name|segment
decl_stmt|;
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|SSD_KEY
value|0x0F
define|#
directive|define
name|SSD_KEY_NO_SENSE
value|0x00
define|#
directive|define
name|SSD_KEY_RECOVERED_ERROR
value|0x01
define|#
directive|define
name|SSD_KEY_NOT_READY
value|0x02
define|#
directive|define
name|SSD_KEY_MEDIUM_ERROR
value|0x03
define|#
directive|define
name|SSD_KEY_HARDWARE_ERROR
value|0x04
define|#
directive|define
name|SSD_KEY_ILLEGAL_REQUEST
value|0x05
define|#
directive|define
name|SSD_KEY_UNIT_ATTENTION
value|0x06
define|#
directive|define
name|SSD_KEY_DATA_PROTECT
value|0x07
define|#
directive|define
name|SSD_KEY_BLANK_CHECK
value|0x08
define|#
directive|define
name|SSD_KEY_Vendor_Specific
value|0x09
define|#
directive|define
name|SSD_KEY_COPY_ABORTED
value|0x0a
define|#
directive|define
name|SSD_KEY_ABORTED_COMMAND
value|0x0b
define|#
directive|define
name|SSD_KEY_EQUAL
value|0x0c
define|#
directive|define
name|SSD_KEY_VOLUME_OVERFLOW
value|0x0d
define|#
directive|define
name|SSD_KEY_MISCOMPARE
value|0x0e
define|#
directive|define
name|SSD_KEY_COMPLETED
value|0x0f
define|#
directive|define
name|SSD_ILI
value|0x20
define|#
directive|define
name|SSD_EOM
value|0x40
define|#
directive|define
name|SSD_FILEMARK
value|0x80
name|u_int8_t
name|info
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|extra_len
decl_stmt|;
name|u_int8_t
name|cmd_spec_info
index|[
literal|4
index|]
decl_stmt|;
name|u_int8_t
name|add_sense_code
decl_stmt|;
name|u_int8_t
name|add_sense_code_qual
decl_stmt|;
name|u_int8_t
name|fru
decl_stmt|;
name|u_int8_t
name|sense_key_spec
index|[
literal|3
index|]
decl_stmt|;
define|#
directive|define
name|SSD_SCS_VALID
value|0x80
define|#
directive|define
name|SSD_FIELDPTR_CMD
value|0x40
define|#
directive|define
name|SSD_BITPTR_VALID
value|0x08
define|#
directive|define
name|SSD_BITPTR_VALUE
value|0x07
name|u_int8_t
name|extra_bytes
index|[
literal|14
index|]
decl_stmt|;
define|#
directive|define
name|SSD_FIXED_IS_PRESENT
parameter_list|(
name|sense
parameter_list|,
name|length
parameter_list|,
name|field
parameter_list|)
define|\
value|((length>= (offsetof(struct scsi_sense_data_fixed, field) +	\ 	sizeof(sense->field))) ? 1 :0)
define|#
directive|define
name|SSD_FIXED_IS_FILLED
parameter_list|(
name|sense
parameter_list|,
name|field
parameter_list|)
define|\
value|((((offsetof(struct scsi_sense_data_fixed, field) +		\ 	sizeof(sense->field)) -						\ 	(offsetof(struct scsi_sense_data_fixed, extra_len) +		\ 	sizeof(sense->extra_len)))<= sense->extra_len) ? 1 : 0)
block|}
struct|;
end_struct

begin_comment
comment|/*  * Descriptor format sense data definitions.  * Introduced in SPC-3.  */
end_comment

begin_struct
struct|struct
name|scsi_sense_data_desc
block|{
name|uint8_t
name|error_code
decl_stmt|;
define|#
directive|define
name|SSD_DESC_CURRENT_ERROR
value|0x72
define|#
directive|define
name|SSD_DESC_DEFERRED_ERROR
value|0x73
name|uint8_t
name|sense_key
decl_stmt|;
name|uint8_t
name|add_sense_code
decl_stmt|;
name|uint8_t
name|add_sense_code_qual
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|3
index|]
decl_stmt|;
comment|/* 	 * Note that SPC-4, section 4.5.2.1 says that the extra_len field 	 * must be less than or equal to 244. 	 */
name|uint8_t
name|extra_len
decl_stmt|;
name|uint8_t
name|sense_desc
index|[
literal|0
index|]
decl_stmt|;
define|#
directive|define
name|SSD_DESC_IS_PRESENT
parameter_list|(
name|sense
parameter_list|,
name|length
parameter_list|,
name|field
parameter_list|)
define|\
value|((length>= (offsetof(struct scsi_sense_data_desc, field) +	\ 	sizeof(sense->field))) ? 1 :0)
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_sense_desc_header
block|{
name|uint8_t
name|desc_type
decl_stmt|;
name|uint8_t
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * The information provide in the Information descriptor is device type or  * command specific information, and defined in a command standard.  *  * Note that any changes to the field names or positions in this structure,  * even reserved fields, should be accompanied by an examination of the  * code in ctl_set_sense() that uses them.  *  * Maximum descriptors allowed: 1 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_info
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_INFO
value|0x00
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SSD_INFO_VALID
value|0x80
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|info
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Command-specific information depends on the command for which the  * reported condition occured.  *  * Note that any changes to the field names or positions in this structure,  * even reserved fields, should be accompanied by an examination of the  * code in ctl_set_sense() that uses them.  *  * Maximum descriptors allowed: 1 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_command
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_COMMAND
value|0x01
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|command_info
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Sense key specific descriptor.  The sense key specific data format  * depends on the sense key in question.  *  * Maximum descriptors allowed: 1 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_sks
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_SKS
value|0x02
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|reserved1
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|sense_key_spec
index|[
literal|3
index|]
decl_stmt|;
define|#
directive|define
name|SSD_SKS_VALID
value|0x80
name|uint8_t
name|reserved2
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is used for the Illegal Request sense key (0x05) only.  */
end_comment

begin_struct
struct|struct
name|scsi_sense_sks_field
block|{
name|uint8_t
name|byte0
decl_stmt|;
define|#
directive|define
name|SSD_SKS_FIELD_VALID
value|0x80
define|#
directive|define
name|SSD_SKS_FIELD_CMD
value|0x40
define|#
directive|define
name|SSD_SKS_BPV
value|0x08
define|#
directive|define
name|SSD_SKS_BIT_VALUE
value|0x07
name|uint8_t
name|field
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*   * This is used for the Hardware Error (0x04), Medium Error (0x03) and  * Recovered Error (0x01) sense keys.  */
end_comment

begin_struct
struct|struct
name|scsi_sense_sks_retry
block|{
name|uint8_t
name|byte0
decl_stmt|;
define|#
directive|define
name|SSD_SKS_RETRY_VALID
value|0x80
name|uint8_t
name|actual_retry_count
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used with the NO Sense (0x00) or Not Ready (0x02) sense keys.  */
end_comment

begin_struct
struct|struct
name|scsi_sense_sks_progress
block|{
name|uint8_t
name|byte0
decl_stmt|;
define|#
directive|define
name|SSD_SKS_PROGRESS_VALID
value|0x80
name|uint8_t
name|progress
index|[
literal|2
index|]
decl_stmt|;
define|#
directive|define
name|SSD_SKS_PROGRESS_DENOM
value|0x10000
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used with the Copy Aborted (0x0a) sense key.  */
end_comment

begin_struct
struct|struct
name|scsi_sense_sks_segment
block|{
name|uint8_t
name|byte0
decl_stmt|;
define|#
directive|define
name|SSD_SKS_SEGMENT_VALID
value|0x80
define|#
directive|define
name|SSD_SKS_SEGMENT_SD
value|0x20
define|#
directive|define
name|SSD_SKS_SEGMENT_BPV
value|0x08
define|#
directive|define
name|SSD_SKS_SEGMENT_BITPTR
value|0x07
name|uint8_t
name|field
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used with the Unit Attention (0x06) sense key.  *  * This is currently used to indicate that the unit attention condition  * queue has overflowed (when the overflow bit is set).  */
end_comment

begin_struct
struct|struct
name|scsi_sense_sks_overflow
block|{
name|uint8_t
name|byte0
decl_stmt|;
define|#
directive|define
name|SSD_SKS_OVERFLOW_VALID
value|0x80
define|#
directive|define
name|SSD_SKS_OVERFLOW_SET
value|0x01
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This specifies which component is associated with the sense data.  There  * is no standard meaning for the fru value.  *  * Maximum descriptors allowed: 1 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_fru
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_FRU
value|0x03
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|fru
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used for Stream commands, defined in SSC-4.  *  * Maximum descriptors allowed: 1 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_stream
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_STREAM
value|0x04
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|byte3
decl_stmt|;
define|#
directive|define
name|SSD_DESC_STREAM_FM
value|0x80
define|#
directive|define
name|SSD_DESC_STREAM_EOM
value|0x40
define|#
directive|define
name|SSD_DESC_STREAM_ILI
value|0x20
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used for Block commands, defined in SBC-3.  *  * This is currently (as of SBC-3) only used for the Incorrect Length  * Indication (ILI) bit, which says that the data length requested in the  * READ LONG or WRITE LONG command did not match the length of the logical  * block.  *  * Maximum descriptors allowed: 1 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_block
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_BLOCK
value|0x05
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|byte3
decl_stmt|;
define|#
directive|define
name|SSD_DESC_BLOCK_ILI
value|0x20
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used for Object-Based Storage Devices (OSD-3).  *  * Maximum descriptors allowed: 1 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_osd_objid
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_OSD_OBJID
value|0x06
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|6
index|]
decl_stmt|;
comment|/* 	 * XXX KDM provide the bit definitions here?  There are a lot of 	 * them, and we don't have an OSD driver yet. 	 */
name|uint8_t
name|not_init_cmds
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|completed_cmds
index|[
literal|4
index|]
decl_stmt|;
name|uint8_t
name|partition_id
index|[
literal|8
index|]
decl_stmt|;
name|uint8_t
name|object_id
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used for Object-Based Storage Devices (OSD-3).  *  * Maximum descriptors allowed: 1 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_osd_integrity
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_OSD_INTEGRITY
value|0x07
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|integ_check_val
index|[
literal|32
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used for Object-Based Storage Devices (OSD-3).  *  * Maximum descriptors allowed: 1 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_osd_attr_id
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_OSD_ATTR_ID
value|0x08
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|reserved
index|[
literal|2
index|]
decl_stmt|;
name|uint8_t
name|attr_desc
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Used with Sense keys No Sense (0x00) and Not Ready (0x02).  *  * Maximum descriptors allowed: 32 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_progress
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_PROGRESS
value|0x0a
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|sense_key
decl_stmt|;
name|uint8_t
name|add_sense_code
decl_stmt|;
name|uint8_t
name|add_sense_code_qual
decl_stmt|;
name|uint8_t
name|reserved
decl_stmt|;
name|uint8_t
name|progress
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is typically forwarded as the result of an EXTENDED COPY command.  *  * Maximum descriptors allowed: 2 (as of SPC-4)  */
end_comment

begin_struct
struct|struct
name|scsi_sense_forwarded
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_FORWARDED
value|0x0c
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|byte2
decl_stmt|;
define|#
directive|define
name|SSD_FORWARDED_FSDT
value|0x80
define|#
directive|define
name|SSD_FORWARDED_SDS_MASK
value|0x0f
define|#
directive|define
name|SSD_FORWARDED_SDS_UNK
value|0x00
define|#
directive|define
name|SSD_FORWARDED_SDS_EXSRC
value|0x01
define|#
directive|define
name|SSD_FORWARDED_SDS_EXDST
value|0x02
block|}
struct|;
end_struct

begin_comment
comment|/*  * Vendor-specific sense descriptor.  The desc_type field will be in the  * range bewteen MIN and MAX inclusive.  */
end_comment

begin_struct
struct|struct
name|scsi_sense_vendor
block|{
name|uint8_t
name|desc_type
decl_stmt|;
define|#
directive|define
name|SSD_DESC_VENDOR_MIN
value|0x80
define|#
directive|define
name|SSD_DESC_VENDOR_MAX
value|0xff
name|uint8_t
name|length
decl_stmt|;
name|uint8_t
name|data
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_header_6
block|{
name|u_int8_t
name|data_length
decl_stmt|;
comment|/* Sense data length */
name|u_int8_t
name|medium_type
decl_stmt|;
name|u_int8_t
name|dev_spec
decl_stmt|;
name|u_int8_t
name|blk_desc_len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_header_10
block|{
name|u_int8_t
name|data_length
index|[
literal|2
index|]
decl_stmt|;
comment|/* Sense data length */
name|u_int8_t
name|medium_type
decl_stmt|;
name|u_int8_t
name|dev_spec
decl_stmt|;
name|u_int8_t
name|unused
index|[
literal|2
index|]
decl_stmt|;
name|u_int8_t
name|blk_desc_len
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_page_header
block|{
name|u_int8_t
name|page_code
decl_stmt|;
define|#
directive|define
name|SMPH_PS
value|0x80
define|#
directive|define
name|SMPH_SPF
value|0x40
define|#
directive|define
name|SMPH_PC_MASK
value|0x3f
name|u_int8_t
name|page_length
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_page_header_sp
block|{
name|uint8_t
name|page_code
decl_stmt|;
name|uint8_t
name|subpage
decl_stmt|;
name|uint8_t
name|page_length
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_mode_blk_desc
block|{
name|u_int8_t
name|density
decl_stmt|;
name|u_int8_t
name|nblocks
index|[
literal|3
index|]
decl_stmt|;
name|u_int8_t
name|reserved
decl_stmt|;
name|u_int8_t
name|blklen
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SCSI_DEFAULT_DENSITY
value|0x00
end_define

begin_comment
comment|/* use 'default' density */
end_comment

begin_define
define|#
directive|define
name|SCSI_SAME_DENSITY
value|0x7f
end_define

begin_comment
comment|/* use 'same' density->= SCSI-2 only */
end_comment

begin_comment
comment|/*  * Status Byte  */
end_comment

begin_define
define|#
directive|define
name|SCSI_STATUS_OK
value|0x00
end_define

begin_define
define|#
directive|define
name|SCSI_STATUS_CHECK_COND
value|0x02
end_define

begin_define
define|#
directive|define
name|SCSI_STATUS_COND_MET
value|0x04
end_define

begin_define
define|#
directive|define
name|SCSI_STATUS_BUSY
value|0x08
end_define

begin_define
define|#
directive|define
name|SCSI_STATUS_INTERMED
value|0x10
end_define

begin_define
define|#
directive|define
name|SCSI_STATUS_INTERMED_COND_MET
value|0x14
end_define

begin_define
define|#
directive|define
name|SCSI_STATUS_RESERV_CONFLICT
value|0x18
end_define

begin_define
define|#
directive|define
name|SCSI_STATUS_CMD_TERMINATED
value|0x22
end_define

begin_comment
comment|/* Obsolete in SAM-2 */
end_comment

begin_define
define|#
directive|define
name|SCSI_STATUS_QUEUE_FULL
value|0x28
end_define

begin_define
define|#
directive|define
name|SCSI_STATUS_ACA_ACTIVE
value|0x30
end_define

begin_define
define|#
directive|define
name|SCSI_STATUS_TASK_ABORTED
value|0x40
end_define

begin_struct
struct|struct
name|scsi_inquiry_pattern
block|{
name|u_int8_t
name|type
decl_stmt|;
name|u_int8_t
name|media_type
decl_stmt|;
define|#
directive|define
name|SIP_MEDIA_REMOVABLE
value|0x01
define|#
directive|define
name|SIP_MEDIA_FIXED
value|0x02
specifier|const
name|char
modifier|*
name|vendor
decl_stmt|;
specifier|const
name|char
modifier|*
name|product
decl_stmt|;
specifier|const
name|char
modifier|*
name|revision
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_static_inquiry_pattern
block|{
name|u_int8_t
name|type
decl_stmt|;
name|u_int8_t
name|media_type
decl_stmt|;
name|char
name|vendor
index|[
name|SID_VENDOR_SIZE
operator|+
literal|1
index|]
decl_stmt|;
name|char
name|product
index|[
name|SID_PRODUCT_SIZE
operator|+
literal|1
index|]
decl_stmt|;
name|char
name|revision
index|[
name|SID_REVISION_SIZE
operator|+
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_sense_quirk_entry
block|{
name|struct
name|scsi_inquiry_pattern
name|inq_pat
decl_stmt|;
name|int
name|num_sense_keys
decl_stmt|;
name|int
name|num_ascs
decl_stmt|;
name|struct
name|sense_key_table_entry
modifier|*
name|sense_key_info
decl_stmt|;
name|struct
name|asc_table_entry
modifier|*
name|asc_info
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|sense_key_table_entry
block|{
name|u_int8_t
name|sense_key
decl_stmt|;
name|u_int32_t
name|action
decl_stmt|;
specifier|const
name|char
modifier|*
name|desc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|asc_table_entry
block|{
name|u_int8_t
name|asc
decl_stmt|;
name|u_int8_t
name|ascq
decl_stmt|;
name|u_int32_t
name|action
decl_stmt|;
specifier|const
name|char
modifier|*
name|desc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|op_table_entry
block|{
name|u_int8_t
name|opcode
decl_stmt|;
name|u_int32_t
name|opmask
decl_stmt|;
specifier|const
name|char
modifier|*
name|desc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|scsi_op_quirk_entry
block|{
name|struct
name|scsi_inquiry_pattern
name|inq_pat
decl_stmt|;
name|int
name|num_ops
decl_stmt|;
name|struct
name|op_table_entry
modifier|*
name|op_table
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|SSS_FLAG_NONE
init|=
literal|0x00
block|,
name|SSS_FLAG_PRINT_COMMAND
init|=
literal|0x01
block|}
name|scsi_sense_string_flags
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|ccb_scsiio
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|cam_periph
struct_decl|;
end_struct_decl

begin_union_decl
union_decl|union
name|ccb
union_decl|;
end_union_decl

begin_ifndef
ifndef|#
directive|ifndef
name|_KERNEL
end_ifndef

begin_struct_decl
struct_decl|struct
name|cam_device
struct_decl|;
end_struct_decl

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|scsi_sense_key_text
index|[]
decl_stmt|;
end_decl_stmt

begin_struct_decl
struct_decl|struct
name|sbuf
struct_decl|;
end_struct_decl

begin_function_decl
name|__BEGIN_DECLS
name|void
name|scsi_sense_desc
parameter_list|(
name|int
name|sense_key
parameter_list|,
name|int
name|asc
parameter_list|,
name|int
name|ascq
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|sense_key_desc
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|asc_desc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|scsi_sense_action
name|scsi_error_action
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|u_int32_t
name|sense_flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|scsi_status_string
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_desc_iterate
parameter_list|(
name|struct
name|scsi_sense_data_desc
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|int
function_decl|(
modifier|*
name|iter_func
function_decl|)
parameter_list|(
name|struct
name|scsi_sense_data_desc
modifier|*
name|sense
parameter_list|,
name|u_int
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|scsi_find_desc
parameter_list|(
name|struct
name|scsi_sense_data_desc
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
name|desc_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_set_sense_data
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense_data
parameter_list|,
name|scsi_sense_data_type
name|sense_format
parameter_list|,
name|int
name|current_error
parameter_list|,
name|int
name|sense_key
parameter_list|,
name|int
name|asc
parameter_list|,
name|int
name|ascq
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_set_sense_data_va
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense_data
parameter_list|,
name|scsi_sense_data_type
name|sense_format
parameter_list|,
name|int
name|current_error
parameter_list|,
name|int
name|sense_key
parameter_list|,
name|int
name|asc
parameter_list|,
name|int
name|ascq
parameter_list|,
name|va_list
name|ap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_get_sense_info
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense_data
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
name|info_type
parameter_list|,
name|uint64_t
modifier|*
name|info
parameter_list|,
name|int64_t
modifier|*
name|signed_info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_get_sks
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense_data
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|sks
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_get_block_info
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense_data
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|uint8_t
modifier|*
name|block_bits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_get_stream_info
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense_data
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|uint8_t
modifier|*
name|stream_bits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_info_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|uint64_t
name|info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_command_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|uint64_t
name|csi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_progress_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|uint16_t
name|progress
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_sks_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|int
name|sense_key
parameter_list|,
name|uint8_t
modifier|*
name|sks
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_fru_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|uint64_t
name|fru
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_stream_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|uint8_t
name|stream_bits
parameter_list|,
name|uint64_t
name|info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_block_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|uint8_t
name|block_bits
parameter_list|,
name|uint64_t
name|info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_info_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_command_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_sks_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_fru_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_stream_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_block_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_progress_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_generic_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_desc_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|struct
name|scsi_sense_desc_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|scsi_sense_data_type
name|scsi_sense_type
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_only_sbuf
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|char
modifier|*
name|path_str
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|,
name|uint8_t
modifier|*
name|cdb
parameter_list|,
name|int
name|cdb_len
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_function_decl
name|int
name|scsi_command_string
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_sense_sbuf
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|scsi_sense_string_flags
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|scsi_sense_string
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|char
modifier|*
name|str
parameter_list|,
name|int
name|str_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_print
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_vpd_supported_page
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|uint8_t
name|page_id
parameter_list|)
function_decl|;
end_function_decl

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* _KERNEL */
end_comment

begin_function_decl
name|int
name|scsi_command_string
parameter_list|(
name|struct
name|cam_device
modifier|*
name|device
parameter_list|,
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_sense_sbuf
parameter_list|(
name|struct
name|cam_device
modifier|*
name|device
parameter_list|,
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|scsi_sense_string_flags
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|scsi_sense_string
parameter_list|(
name|struct
name|cam_device
modifier|*
name|device
parameter_list|,
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|char
modifier|*
name|str
parameter_list|,
name|int
name|str_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_sense_print
parameter_list|(
name|struct
name|cam_device
modifier|*
name|device
parameter_list|,
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|FILE
modifier|*
name|ofile
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|scsi_op_desc
parameter_list|(
name|u_int16_t
name|opcode
parameter_list|,
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|scsi_cdb_string
parameter_list|(
name|u_int8_t
modifier|*
name|cdb_ptr
parameter_list|,
name|char
modifier|*
name|cdb_string
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_print_inquiry
parameter_list|(
name|struct
name|scsi_inquiry_data
modifier|*
name|inq_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int
name|scsi_calc_syncsrate
parameter_list|(
name|u_int
name|period_factor
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int
name|scsi_calc_syncparam
parameter_list|(
name|u_int
name|period
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|scsi_devid_checkfn_t
function_decl|)
parameter_list|(
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|int
name|scsi_devid_is_naa_ieee_reg
parameter_list|(
name|uint8_t
modifier|*
name|bufp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_devid_is_sas_target
parameter_list|(
name|uint8_t
modifier|*
name|bufp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_devid_is_lun_eui64
parameter_list|(
name|uint8_t
modifier|*
name|bufp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_devid_is_lun_naa
parameter_list|(
name|uint8_t
modifier|*
name|bufp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_devid_is_lun_name
parameter_list|(
name|uint8_t
modifier|*
name|bufp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_devid_is_lun_t10
parameter_list|(
name|uint8_t
modifier|*
name|bufp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|scsi_vpd_id_descriptor
modifier|*
name|scsi_get_devid
parameter_list|(
name|struct
name|scsi_vpd_device_id
modifier|*
name|id
parameter_list|,
name|uint32_t
name|len
parameter_list|,
name|scsi_devid_checkfn_t
name|ck_fn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_test_unit_ready
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_request_sense
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|data_ptr
parameter_list|,
name|u_int8_t
name|dxfer_len
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_inquiry
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
modifier|*
name|inq_buf
parameter_list|,
name|u_int32_t
name|inq_len
parameter_list|,
name|int
name|evpd
parameter_list|,
name|u_int8_t
name|page_code
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_mode_sense
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|dbd
parameter_list|,
name|u_int8_t
name|page_code
parameter_list|,
name|u_int8_t
name|page
parameter_list|,
name|u_int8_t
modifier|*
name|param_buf
parameter_list|,
name|u_int32_t
name|param_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_mode_sense_len
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|dbd
parameter_list|,
name|u_int8_t
name|page_code
parameter_list|,
name|u_int8_t
name|page
parameter_list|,
name|u_int8_t
modifier|*
name|param_buf
parameter_list|,
name|u_int32_t
name|param_len
parameter_list|,
name|int
name|minimum_cmd_size
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_mode_select
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|scsi_page_fmt
parameter_list|,
name|int
name|save_pages
parameter_list|,
name|u_int8_t
modifier|*
name|param_buf
parameter_list|,
name|u_int32_t
name|param_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_mode_select_len
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|scsi_page_fmt
parameter_list|,
name|int
name|save_pages
parameter_list|,
name|u_int8_t
modifier|*
name|param_buf
parameter_list|,
name|u_int32_t
name|param_len
parameter_list|,
name|int
name|minimum_cmd_size
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_log_sense
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|page_code
parameter_list|,
name|u_int8_t
name|page
parameter_list|,
name|int
name|save_pages
parameter_list|,
name|int
name|ppc
parameter_list|,
name|u_int32_t
name|paramptr
parameter_list|,
name|u_int8_t
modifier|*
name|param_buf
parameter_list|,
name|u_int32_t
name|param_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_log_select
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|page_code
parameter_list|,
name|int
name|save_pages
parameter_list|,
name|int
name|pc_reset
parameter_list|,
name|u_int8_t
modifier|*
name|param_buf
parameter_list|,
name|u_int32_t
name|param_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_prevent
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|action
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_read_capacity
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|struct
name|scsi_read_capacity_data
modifier|*
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_read_capacity_16
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|uint32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|uint8_t
name|tag_action
parameter_list|,
name|uint64_t
name|lba
parameter_list|,
name|int
name|reladr
parameter_list|,
name|int
name|pmi
parameter_list|,
name|uint8_t
modifier|*
name|rcap_buf
parameter_list|,
name|int
name|rcap_buf_len
parameter_list|,
name|uint8_t
name|sense_len
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_report_luns
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|select_report
parameter_list|,
name|struct
name|scsi_report_luns_data
modifier|*
name|rpl_buf
parameter_list|,
name|u_int32_t
name|alloc_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_report_target_group
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|pdf
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|u_int32_t
name|alloc_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_set_target_group
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|u_int32_t
name|alloc_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_synchronize_cache
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int32_t
name|begin_lba
parameter_list|,
name|u_int16_t
name|lb_count
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_receive_diagnostic_results
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|uint8_t
name|tag_action
parameter_list|,
name|int
name|pcv
parameter_list|,
name|uint8_t
name|page_code
parameter_list|,
name|uint8_t
modifier|*
name|data_ptr
parameter_list|,
name|uint16_t
name|allocation_length
parameter_list|,
name|uint8_t
name|sense_len
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_send_diagnostic
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|uint8_t
name|tag_action
parameter_list|,
name|int
name|unit_offline
parameter_list|,
name|int
name|device_offline
parameter_list|,
name|int
name|self_test
parameter_list|,
name|int
name|page_format
parameter_list|,
name|int
name|self_test_code
parameter_list|,
name|uint8_t
modifier|*
name|data_ptr
parameter_list|,
name|uint16_t
name|param_list_length
parameter_list|,
name|uint8_t
name|sense_len
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_read_buffer
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|uint8_t
name|tag_action
parameter_list|,
name|int
name|mode
parameter_list|,
name|uint8_t
name|buffer_id
parameter_list|,
name|u_int32_t
name|offset
parameter_list|,
name|uint8_t
modifier|*
name|data_ptr
parameter_list|,
name|uint32_t
name|allocation_length
parameter_list|,
name|uint8_t
name|sense_len
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_write_buffer
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|uint8_t
name|tag_action
parameter_list|,
name|int
name|mode
parameter_list|,
name|uint8_t
name|buffer_id
parameter_list|,
name|u_int32_t
name|offset
parameter_list|,
name|uint8_t
modifier|*
name|data_ptr
parameter_list|,
name|uint32_t
name|param_list_length
parameter_list|,
name|uint8_t
name|sense_len
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|SCSI_RW_READ
value|0x0001
end_define

begin_define
define|#
directive|define
name|SCSI_RW_WRITE
value|0x0002
end_define

begin_define
define|#
directive|define
name|SCSI_RW_DIRMASK
value|0x0003
end_define

begin_define
define|#
directive|define
name|SCSI_RW_BIO
value|0x1000
end_define

begin_function_decl
name|void
name|scsi_read_write
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|readop
parameter_list|,
name|u_int8_t
name|byte2
parameter_list|,
name|int
name|minimum_cmd_size
parameter_list|,
name|u_int64_t
name|lba
parameter_list|,
name|u_int32_t
name|block_count
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int32_t
name|dxfer_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_write_same
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|byte2
parameter_list|,
name|int
name|minimum_cmd_size
parameter_list|,
name|u_int64_t
name|lba
parameter_list|,
name|u_int32_t
name|block_count
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int32_t
name|dxfer_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_ata_identify
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int16_t
name|dxfer_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_ata_trim
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int16_t
name|block_count
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int16_t
name|dxfer_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_ata_pass_16
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int32_t
name|flags
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|protocol
parameter_list|,
name|u_int8_t
name|ata_flags
parameter_list|,
name|u_int16_t
name|features
parameter_list|,
name|u_int16_t
name|sector_count
parameter_list|,
name|uint64_t
name|lba
parameter_list|,
name|u_int8_t
name|command
parameter_list|,
name|u_int8_t
name|control
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int16_t
name|dxfer_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_unmap
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|u_int8_t
name|byte2
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int16_t
name|dxfer_len
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_start_stop
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int32_t
name|retries
parameter_list|,
name|void
function_decl|(
modifier|*
name|cbfcnp
function_decl|)
parameter_list|(
name|struct
name|cam_periph
modifier|*
parameter_list|,
name|union
name|ccb
modifier|*
parameter_list|)
parameter_list|,
name|u_int8_t
name|tag_action
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|load_eject
parameter_list|,
name|int
name|immediate
parameter_list|,
name|u_int8_t
name|sense_len
parameter_list|,
name|u_int32_t
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_inquiry_match
parameter_list|(
name|caddr_t
name|inqbuffer
parameter_list|,
name|caddr_t
name|table_entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_static_inquiry_match
parameter_list|(
name|caddr_t
name|inqbuffer
parameter_list|,
name|caddr_t
name|table_entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_devid_match
parameter_list|(
name|uint8_t
modifier|*
name|rhs
parameter_list|,
name|size_t
name|rhs_len
parameter_list|,
name|uint8_t
modifier|*
name|lhs
parameter_list|,
name|size_t
name|lhs_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_extract_sense
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|int
modifier|*
name|error_code
parameter_list|,
name|int
modifier|*
name|sense_key
parameter_list|,
name|int
modifier|*
name|asc
parameter_list|,
name|int
modifier|*
name|ascq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_extract_sense_ccb
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|,
name|int
modifier|*
name|error_code
parameter_list|,
name|int
modifier|*
name|sense_key
parameter_list|,
name|int
modifier|*
name|asc
parameter_list|,
name|int
modifier|*
name|ascq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|scsi_extract_sense_len
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|int
modifier|*
name|error_code
parameter_list|,
name|int
modifier|*
name|sense_key
parameter_list|,
name|int
modifier|*
name|asc
parameter_list|,
name|int
modifier|*
name|ascq
parameter_list|,
name|int
name|show_errors
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_get_sense_key
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|int
name|show_errors
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_get_asc
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|int
name|show_errors
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_get_ascq
parameter_list|(
name|struct
name|scsi_sense_data
modifier|*
name|sense
parameter_list|,
name|u_int
name|sense_len
parameter_list|,
name|int
name|show_errors
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|scsi_ulto2b
parameter_list|(
name|u_int32_t
name|val
parameter_list|,
name|u_int8_t
modifier|*
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|scsi_ulto3b
parameter_list|(
name|u_int32_t
name|val
parameter_list|,
name|u_int8_t
modifier|*
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|scsi_ulto4b
parameter_list|(
name|u_int32_t
name|val
parameter_list|,
name|u_int8_t
modifier|*
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
name|scsi_u64to8b
parameter_list|(
name|u_int64_t
name|val
parameter_list|,
name|u_int8_t
modifier|*
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|uint32_t
name|scsi_2btoul
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|uint32_t
name|scsi_3btoul
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int32_t
name|scsi_3btol
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|uint32_t
name|scsi_4btoul
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|uint64_t
name|scsi_8btou64
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
modifier|*
name|find_mode_page_6
parameter_list|(
name|struct
name|scsi_mode_header_6
modifier|*
name|mode_header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|void
modifier|*
name|find_mode_page_10
parameter_list|(
name|struct
name|scsi_mode_header_10
modifier|*
name|mode_header
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|scsi_ulto2b
parameter_list|(
name|u_int32_t
name|val
parameter_list|,
name|u_int8_t
modifier|*
name|bytes
parameter_list|)
block|{
name|bytes
index|[
literal|0
index|]
operator|=
operator|(
name|val
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|1
index|]
operator|=
name|val
operator|&
literal|0xff
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|scsi_ulto3b
parameter_list|(
name|u_int32_t
name|val
parameter_list|,
name|u_int8_t
modifier|*
name|bytes
parameter_list|)
block|{
name|bytes
index|[
literal|0
index|]
operator|=
operator|(
name|val
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|1
index|]
operator|=
operator|(
name|val
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|2
index|]
operator|=
name|val
operator|&
literal|0xff
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|scsi_ulto4b
parameter_list|(
name|u_int32_t
name|val
parameter_list|,
name|u_int8_t
modifier|*
name|bytes
parameter_list|)
block|{
name|bytes
index|[
literal|0
index|]
operator|=
operator|(
name|val
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|1
index|]
operator|=
operator|(
name|val
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|2
index|]
operator|=
operator|(
name|val
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|3
index|]
operator|=
name|val
operator|&
literal|0xff
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|scsi_u64to8b
parameter_list|(
name|u_int64_t
name|val
parameter_list|,
name|u_int8_t
modifier|*
name|bytes
parameter_list|)
block|{
name|bytes
index|[
literal|0
index|]
operator|=
operator|(
name|val
operator|>>
literal|56
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|1
index|]
operator|=
operator|(
name|val
operator|>>
literal|48
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|2
index|]
operator|=
operator|(
name|val
operator|>>
literal|40
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|3
index|]
operator|=
operator|(
name|val
operator|>>
literal|32
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|4
index|]
operator|=
operator|(
name|val
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|5
index|]
operator|=
operator|(
name|val
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|6
index|]
operator|=
operator|(
name|val
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|bytes
index|[
literal|7
index|]
operator|=
name|val
operator|&
literal|0xff
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|scsi_2btoul
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
block|{
name|uint32_t
name|rv
decl_stmt|;
name|rv
operator|=
operator|(
name|bytes
index|[
literal|0
index|]
operator|<<
literal|8
operator|)
operator||
name|bytes
index|[
literal|1
index|]
expr_stmt|;
return|return
operator|(
name|rv
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|scsi_3btoul
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
block|{
name|uint32_t
name|rv
decl_stmt|;
name|rv
operator|=
operator|(
name|bytes
index|[
literal|0
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|bytes
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|bytes
index|[
literal|2
index|]
expr_stmt|;
return|return
operator|(
name|rv
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int32_t
name|scsi_3btol
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
block|{
name|uint32_t
name|rc
init|=
name|scsi_3btoul
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|&
literal|0x00800000
condition|)
name|rc
operator||=
literal|0xff000000
expr_stmt|;
return|return
operator|(
name|int32_t
operator|)
name|rc
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|scsi_4btoul
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
block|{
name|uint32_t
name|rv
decl_stmt|;
name|rv
operator|=
operator|(
name|bytes
index|[
literal|0
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
name|bytes
index|[
literal|1
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|bytes
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|bytes
index|[
literal|3
index|]
expr_stmt|;
return|return
operator|(
name|rv
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint64_t
name|scsi_8btou64
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|bytes
parameter_list|)
block|{
name|uint64_t
name|rv
decl_stmt|;
name|rv
operator|=
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|bytes
index|[
literal|0
index|]
operator|)
operator|<<
literal|56
operator|)
operator||
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|bytes
index|[
literal|1
index|]
operator|)
operator|<<
literal|48
operator|)
operator||
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|bytes
index|[
literal|2
index|]
operator|)
operator|<<
literal|40
operator|)
operator||
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|bytes
index|[
literal|3
index|]
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|bytes
index|[
literal|4
index|]
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|bytes
index|[
literal|5
index|]
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|bytes
index|[
literal|6
index|]
operator|)
operator|<<
literal|8
operator|)
operator||
name|bytes
index|[
literal|7
index|]
expr_stmt|;
return|return
operator|(
name|rv
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Given the pointer to a returned mode sense buffer, return a pointer to  * the start of the first mode page.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|find_mode_page_6
parameter_list|(
name|struct
name|scsi_mode_header_6
modifier|*
name|mode_header
parameter_list|)
block|{
name|void
modifier|*
name|page_start
decl_stmt|;
name|page_start
operator|=
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|u_int8_t
operator|*
operator|)
operator|&
name|mode_header
index|[
literal|1
index|]
operator|+
name|mode_header
operator|->
name|blk_desc_len
operator|)
expr_stmt|;
return|return
operator|(
name|page_start
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|find_mode_page_10
parameter_list|(
name|struct
name|scsi_mode_header_10
modifier|*
name|mode_header
parameter_list|)
block|{
name|void
modifier|*
name|page_start
decl_stmt|;
name|page_start
operator|=
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|u_int8_t
operator|*
operator|)
operator|&
name|mode_header
index|[
literal|1
index|]
operator|+
name|scsi_2btoul
argument_list|(
name|mode_header
operator|->
name|blk_desc_len
argument_list|)
operator|)
expr_stmt|;
return|return
operator|(
name|page_start
operator|)
return|;
block|}
end_function

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*_SCSI_SCSI_ALL_H*/
end_comment

end_unit

