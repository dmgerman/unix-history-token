begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Data structures and definitions for CAM peripheral ("type") drivers.  *  * Copyright (c) 1997, 1998 Justin T. Gibbs.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification, immediately at the beginning of the file.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CAM_CAM_PERIPH_H
end_ifndef

begin_define
define|#
directive|define
name|_CAM_CAM_PERIPH_H
value|1
end_define

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<cam/cam_sim.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_struct_decl
struct_decl|struct
name|devstat
struct_decl|;
end_struct_decl

begin_decl_stmt
specifier|extern
name|struct
name|cam_periph
modifier|*
name|xpt_periph
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|periph_driver
modifier|*
modifier|*
name|periph_drivers
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|periphdriver_register
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|periphdriver_init
parameter_list|(
name|int
name|level
parameter_list|)
function_decl|;
end_function_decl

begin_include
include|#
directive|include
file|<sys/module.h>
end_include

begin_define
define|#
directive|define
name|PERIPHDRIVER_DECLARE
parameter_list|(
name|name
parameter_list|,
name|driver
parameter_list|)
define|\
value|static int name ## _modevent(module_t mod, int type, void *data) \ 	{ \ 		switch (type) { \ 		case MOD_LOAD: \ 			periphdriver_register(data); \ 			break; \ 		case MOD_UNLOAD: \ 			printf(#name " module unload - not possible for this module type\n"); \ 			return EINVAL; \ 		default: \ 			return EOPNOTSUPP; \ 		} \ 		return 0; \ 	} \ 	static moduledata_t name ## _mod = { \ 		#name, \ 		name ## _modevent, \ 		(void *)&driver \ 	}; \ 	DECLARE_MODULE(name, name ## _mod, SI_SUB_DRIVERS, SI_ORDER_ANY); \ 	MODULE_DEPEND(name, cam, 1, 1, 1)
end_define

begin_typedef
typedef|typedef
name|void
function_decl|(
name|periph_init_t
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/* 				     * Callback informing the peripheral driver 				     * it can perform it's initialization since 				     * the XPT is now fully initialized. 				     */
end_comment

begin_typedef
typedef|typedef
name|periph_init_t
modifier|*
name|periph_init_func_t
typedef|;
end_typedef

begin_struct
struct|struct
name|periph_driver
block|{
name|periph_init_func_t
name|init
decl_stmt|;
name|char
modifier|*
name|driver_name
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|cam_periph
argument_list|)
name|units
expr_stmt|;
name|u_int
name|generation
decl_stmt|;
name|u_int
name|flags
decl_stmt|;
define|#
directive|define
name|CAM_PERIPH_DRV_EARLY
value|0x01
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|CAM_PERIPH_BIO
block|}
name|cam_periph_type
typedef|;
end_typedef

begin_comment
comment|/* Generically usefull offsets into the peripheral private area */
end_comment

begin_define
define|#
directive|define
name|ppriv_ptr0
value|periph_priv.entries[0].ptr
end_define

begin_define
define|#
directive|define
name|ppriv_ptr1
value|periph_priv.entries[1].ptr
end_define

begin_define
define|#
directive|define
name|ppriv_field0
value|periph_priv.entries[0].field
end_define

begin_define
define|#
directive|define
name|ppriv_field1
value|periph_priv.entries[1].field
end_define

begin_typedef
typedef|typedef
name|void
name|periph_start_t
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|union
name|ccb
modifier|*
name|start_ccb
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|cam_status
name|periph_ctor_t
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|periph_oninv_t
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|periph_dtor_t
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|cam_periph
block|{
name|cam_pinfo
name|pinfo
decl_stmt|;
name|periph_start_t
modifier|*
name|periph_start
decl_stmt|;
name|periph_oninv_t
modifier|*
name|periph_oninval
decl_stmt|;
name|periph_dtor_t
modifier|*
name|periph_dtor
decl_stmt|;
name|char
modifier|*
name|periph_name
decl_stmt|;
name|struct
name|cam_path
modifier|*
name|path
decl_stmt|;
comment|/* Compiled path to device */
name|void
modifier|*
name|softc
decl_stmt|;
name|struct
name|cam_sim
modifier|*
name|sim
decl_stmt|;
name|u_int32_t
name|unit_number
decl_stmt|;
name|cam_periph_type
name|type
decl_stmt|;
name|u_int32_t
name|flags
decl_stmt|;
define|#
directive|define
name|CAM_PERIPH_RUNNING
value|0x01
define|#
directive|define
name|CAM_PERIPH_LOCKED
value|0x02
define|#
directive|define
name|CAM_PERIPH_LOCK_WANTED
value|0x04
define|#
directive|define
name|CAM_PERIPH_INVALID
value|0x08
define|#
directive|define
name|CAM_PERIPH_NEW_DEV_FOUND
value|0x10
define|#
directive|define
name|CAM_PERIPH_RECOVERY_INPROG
value|0x20
define|#
directive|define
name|CAM_PERIPH_FREE
value|0x80
name|u_int32_t
name|immediate_priority
decl_stmt|;
name|u_int32_t
name|refcount
decl_stmt|;
name|SLIST_HEAD
argument_list|(
argument_list|,
argument|ccb_hdr
argument_list|)
name|ccb_list
expr_stmt|;
comment|/* For "immediate" requests */
name|SLIST_ENTRY
argument_list|(
argument|cam_periph
argument_list|)
name|periph_links
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|cam_periph
argument_list|)
name|unit_links
expr_stmt|;
name|ac_callback_t
modifier|*
name|deferred_callback
decl_stmt|;
name|ac_code
name|deferred_ac
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|CAM_PERIPH_MAXMAPS
value|2
end_define

begin_struct
struct|struct
name|cam_periph_map_info
block|{
name|int
name|num_bufs_used
decl_stmt|;
name|struct
name|buf
modifier|*
name|bp
index|[
name|CAM_PERIPH_MAXMAPS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|cam_status
name|cam_periph_alloc
parameter_list|(
name|periph_ctor_t
modifier|*
name|periph_ctor
parameter_list|,
name|periph_oninv_t
modifier|*
name|periph_oninvalidate
parameter_list|,
name|periph_dtor_t
modifier|*
name|periph_dtor
parameter_list|,
name|periph_start_t
modifier|*
name|periph_start
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|cam_periph_type
name|type
parameter_list|,
name|struct
name|cam_path
modifier|*
parameter_list|,
name|ac_callback_t
modifier|*
parameter_list|,
name|ac_code
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|cam_periph
modifier|*
name|cam_periph_find
parameter_list|(
name|struct
name|cam_path
modifier|*
name|path
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_periph_list
parameter_list|(
name|struct
name|cam_path
modifier|*
parameter_list|,
name|struct
name|sbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|cam_status
name|cam_periph_acquire
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_release
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_release_locked
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_release_locked_buses
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_periph_hold
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|int
name|priority
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_unhold
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_invalidate
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_periph_mapmem
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|,
name|struct
name|cam_periph_map_info
modifier|*
name|mapinfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_unmapmem
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|,
name|struct
name|cam_periph_map_info
modifier|*
name|mapinfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|union
name|ccb
modifier|*
name|cam_periph_getccb
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|u_int32_t
name|priority
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_ccbwait
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_periph_runccb
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|,
name|int
function_decl|(
modifier|*
name|error_routine
function_decl|)
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|,
name|cam_flags
name|camflags
parameter_list|,
name|u_int32_t
name|sense_flags
parameter_list|)
parameter_list|,
name|cam_flags
name|camflags
parameter_list|,
name|u_int32_t
name|sense_flags
parameter_list|,
name|struct
name|devstat
modifier|*
name|ds
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_periph_ioctl
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|u_long
name|cmd
parameter_list|,
name|caddr_t
name|addr
parameter_list|,
name|int
function_decl|(
modifier|*
name|error_routine
function_decl|)
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|,
name|cam_flags
name|camflags
parameter_list|,
name|u_int32_t
name|sense_flags
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_freeze_devq
parameter_list|(
name|struct
name|cam_path
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_freeze_devq_arg
parameter_list|(
name|struct
name|cam_path
modifier|*
name|path
parameter_list|,
name|u_int32_t
name|flags
parameter_list|,
name|uint32_t
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int32_t
name|cam_release_devq
parameter_list|(
name|struct
name|cam_path
modifier|*
name|path
parameter_list|,
name|u_int32_t
name|relsim_flags
parameter_list|,
name|u_int32_t
name|opening_reduction
parameter_list|,
name|u_int32_t
name|arg
parameter_list|,
name|int
name|getcount_only
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_async
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|u_int32_t
name|code
parameter_list|,
name|struct
name|cam_path
modifier|*
name|path
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_bus_settle
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|u_int
name|bus_settle_ms
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_periph_freeze_after_event
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|struct
name|timeval
modifier|*
name|event_time
parameter_list|,
name|u_int
name|duration_ms
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_periph_error
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|,
name|cam_flags
name|camflags
parameter_list|,
name|u_int32_t
name|sense_flags
parameter_list|,
name|union
name|ccb
modifier|*
name|save_ccb
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|cam_periph_lock
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
block|{
name|mtx_lock
argument_list|(
name|periph
operator|->
name|sim
operator|->
name|mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|cam_periph_unlock
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
block|{
name|mtx_unlock
argument_list|(
name|periph
operator|->
name|sim
operator|->
name|mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|cam_periph_owned
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|)
block|{
return|return
operator|(
name|mtx_owned
argument_list|(
name|periph
operator|->
name|sim
operator|->
name|mtx
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|cam_periph_sleep
parameter_list|(
name|struct
name|cam_periph
modifier|*
name|periph
parameter_list|,
name|void
modifier|*
name|chan
parameter_list|,
name|int
name|priority
parameter_list|,
specifier|const
name|char
modifier|*
name|wmesg
parameter_list|,
name|int
name|timo
parameter_list|)
block|{
return|return
operator|(
name|msleep
argument_list|(
name|chan
argument_list|,
name|periph
operator|->
name|sim
operator|->
name|mtx
argument_list|,
name|priority
argument_list|,
name|wmesg
argument_list|,
name|timo
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CAM_CAM_PERIPH_H */
end_comment

end_unit

