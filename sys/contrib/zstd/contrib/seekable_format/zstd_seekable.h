begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|SEEKABLE_H
end_ifndef

begin_define
define|#
directive|define
name|SEEKABLE_H
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<stdio.h>
specifier|static
specifier|const
name|unsigned
name|ZSTD_seekTableFooterSize
init|=
literal|9
decl_stmt|;
define|#
directive|define
name|ZSTD_SEEKABLE_MAGICNUMBER
value|0x8F92EAB1
define|#
directive|define
name|ZSTD_SEEKABLE_MAXFRAMES
value|0x8000000U
comment|/* Limit the maximum size to avoid any potential issues storing the compressed size */
define|#
directive|define
name|ZSTD_SEEKABLE_MAX_FRAME_DECOMPRESSED_SIZE
value|0x80000000U
comment|/*-**************************************************************************** *  Seekable Format * *  The seekable format splits the compressed data into a series of "frames", *  each compressed individually so that decompression of a section in the *  middle of an archive only requires zstd to decompress at most a frame's *  worth of extra data, instead of the entire archive. ******************************************************************************/
typedef|typedef
name|struct
name|ZSTD_seekable_CStream_s
name|ZSTD_seekable_CStream
typedef|;
typedef|typedef
name|struct
name|ZSTD_seekable_s
name|ZSTD_seekable
typedef|;
comment|/*-**************************************************************************** *  Seekable compression - HowTo *  A ZSTD_seekable_CStream object is required to tracking streaming operation. *  Use ZSTD_seekable_createCStream() and ZSTD_seekable_freeCStream() to create/ *  release resources. * *  Streaming objects are reusable to avoid allocation and deallocation, *  to start a new compression operation call ZSTD_seekable_initCStream() on the *  compressor. * *  Data streamed to the seekable compressor will automatically be split into *  frames of size `maxFrameSize` (provided in ZSTD_seekable_initCStream()), *  or if none is provided, will be cut off whenever ZSTD_seekable_endFrame() is *  called or when the default maximum frame size (2GB) is reached. * *  Use ZSTD_seekable_initCStream() to initialize a ZSTD_seekable_CStream object *  for a new compression operation. *  `maxFrameSize` indicates the size at which to automatically start a new *  seekable frame.  `maxFrameSize == 0` implies the default maximum size. *  `checksumFlag` indicates whether or not the seek table should include frame *  checksums on the uncompressed data for verification. *  @return : a size hint for input to provide for compression, or an error code *            checkable with ZSTD_isError() * *  Use ZSTD_seekable_compressStream() repetitively to consume input stream. *  The function will automatically update both `pos` fields. *  Note that it may not consume the entire input, in which case `pos< size`, *  and it's up to the caller to present again remaining data. *  @return : a size hint, preferred nb of bytes to use as input for next *            function call or an error code, which can be tested using *            ZSTD_isError(). *            Note 1 : it's just a hint, to help latency a little, any other *                     value will work fine. * *  At any time, call ZSTD_seekable_endFrame() to end the current frame and *  start a new one. * *  ZSTD_seekable_endStream() will end the current frame, and then write the seek *  table so that decompressors can efficiently find compressed frames. *  ZSTD_seekable_endStream() may return a number> 0 if it was unable to flush *  all the necessary data to `output`.  In this case, it should be called again *  until all remaining data is flushed out and 0 is returned. ******************************************************************************/
comment|/*===== Seekable compressor management =====*/
name|ZSTDLIB_API
name|ZSTD_seekable_CStream
modifier|*
name|ZSTD_seekable_createCStream
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_freeCStream
parameter_list|(
name|ZSTD_seekable_CStream
modifier|*
name|zcs
parameter_list|)
function_decl|;
comment|/*===== Seekable compression functions =====*/
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_initCStream
parameter_list|(
name|ZSTD_seekable_CStream
modifier|*
name|zcs
parameter_list|,
name|int
name|compressionLevel
parameter_list|,
name|int
name|checksumFlag
parameter_list|,
name|unsigned
name|maxFrameSize
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_compressStream
parameter_list|(
name|ZSTD_seekable_CStream
modifier|*
name|zcs
parameter_list|,
name|ZSTD_outBuffer
modifier|*
name|output
parameter_list|,
name|ZSTD_inBuffer
modifier|*
name|input
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_endFrame
parameter_list|(
name|ZSTD_seekable_CStream
modifier|*
name|zcs
parameter_list|,
name|ZSTD_outBuffer
modifier|*
name|output
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_endStream
parameter_list|(
name|ZSTD_seekable_CStream
modifier|*
name|zcs
parameter_list|,
name|ZSTD_outBuffer
modifier|*
name|output
parameter_list|)
function_decl|;
comment|/*= Raw seek table API  *  These functions allow for the seek table to be constructed directly.  *  This table can then be appended to a file of concatenated frames.  *  This allows the frames to be compressed independently, even in parallel,  *  and compiled together afterward into a seekable archive.  *  *  Use ZSTD_seekable_createFrameLog() to allocate and initialize a tracking  *  structure.  *  *  Call ZSTD_seekable_logFrame() once for each frame in the archive.  *  checksum is optional, and will not be used if checksumFlag was 0 when the  *  frame log was created.  If present, it should be the least significant 32  *  bits of the XXH64 hash of the uncompressed data.  *  *  Call ZSTD_seekable_writeSeekTable to serialize the data into a seek table.  *  If the entire table was written, the return value will be 0.  Otherwise,  *  it will be equal to the number of bytes left to write. */
typedef|typedef
name|struct
name|ZSTD_frameLog_s
name|ZSTD_frameLog
typedef|;
name|ZSTDLIB_API
name|ZSTD_frameLog
modifier|*
name|ZSTD_seekable_createFrameLog
parameter_list|(
name|int
name|checksumFlag
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_freeFrameLog
parameter_list|(
name|ZSTD_frameLog
modifier|*
name|fl
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_logFrame
parameter_list|(
name|ZSTD_frameLog
modifier|*
name|fl
parameter_list|,
name|unsigned
name|compressedSize
parameter_list|,
name|unsigned
name|decompressedSize
parameter_list|,
name|unsigned
name|checksum
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_writeSeekTable
parameter_list|(
name|ZSTD_frameLog
modifier|*
name|fl
parameter_list|,
name|ZSTD_outBuffer
modifier|*
name|output
parameter_list|)
function_decl|;
comment|/*-**************************************************************************** *  Seekable decompression - HowTo *  A ZSTD_seekable object is required to tracking the seekTable. * *  Call ZSTD_seekable_init* to initialize a ZSTD_seekable object with the *  the seek table provided in the input. *  There are three modes for ZSTD_seekable_init: *    - ZSTD_seekable_initBuff() : An in-memory API.  The data contained in *      `src` should be the entire seekable file, including the seek table. *      `src` should be kept alive and unmodified until the ZSTD_seekable object *      is freed or reset. *    - ZSTD_seekable_initFile() : A simplified file API using stdio.  fread and *      fseek will be used to access the required data for building the seek *      table and doing decompression operations.  `src` should not be closed *      or modified until the ZSTD_seekable object is freed or reset. *    - ZSTD_seekable_initAdvanced() : A general API allowing the client to *      provide its own read and seek callbacks. *        + ZSTD_seekable_read() : read exactly `n` bytes into `buffer`. *                                 Premature EOF should be treated as an error. *        + ZSTD_seekable_seek() : seek the read head to `offset` from `origin`, *                                 where origin is either SEEK_SET (beginning of *                                 file), or SEEK_END (end of file). *  Both functions should return a non-negative value in case of success, and a *  negative value in case of failure.  If implementing using this API and *  stdio, be careful with files larger than 4GB and fseek.  All of these *  functions return an error code checkable with ZSTD_isError(). * *  Call ZSTD_seekable_decompress to decompress `dstSize` bytes at decompressed *  offset `offset`.  ZSTD_seekable_decompress may have to decompress the entire *  prefix of the frame before the desired data if it has not already processed *  this section. If ZSTD_seekable_decompress is called multiple times for a *  consecutive range of data, it will efficiently retain the decompressor object *  and avoid redecompressing frame prefixes.  The return value is the number of *  bytes decompressed, or an error code checkable with ZSTD_isError(). * *  The seek table access functions can be used to obtain the data contained *  in the seek table.  If frameIndex is larger than the value returned by *  ZSTD_seekable_getNumFrames(), they will return error codes checkable with *  ZSTD_isError().  Note that since the offset access functions return *  unsigned long long instead of size_t, in this case they will instead return *  the value ZSTD_SEEKABLE_FRAMEINDEX_TOOLARGE. ******************************************************************************/
comment|/*===== Seekable decompressor management =====*/
name|ZSTDLIB_API
name|ZSTD_seekable
modifier|*
name|ZSTD_seekable_create
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_free
parameter_list|(
name|ZSTD_seekable
modifier|*
name|zs
parameter_list|)
function_decl|;
comment|/*===== Seekable decompression functions =====*/
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_initBuff
parameter_list|(
name|ZSTD_seekable
modifier|*
name|zs
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_initFile
parameter_list|(
name|ZSTD_seekable
modifier|*
name|zs
parameter_list|,
name|FILE
modifier|*
name|src
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_decompress
parameter_list|(
name|ZSTD_seekable
modifier|*
name|zs
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstSize
parameter_list|,
name|unsigned
name|long
name|long
name|offset
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_decompressFrame
parameter_list|(
name|ZSTD_seekable
modifier|*
name|zs
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstSize
parameter_list|,
name|unsigned
name|frameIndex
parameter_list|)
function_decl|;
define|#
directive|define
name|ZSTD_SEEKABLE_FRAMEINDEX_TOOLARGE
value|(0ULL-2)
comment|/*===== Seek Table access functions =====*/
name|ZSTDLIB_API
name|unsigned
name|ZSTD_seekable_getNumFrames
parameter_list|(
name|ZSTD_seekable
modifier|*
specifier|const
name|zs
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|unsigned
name|long
name|long
name|ZSTD_seekable_getFrameCompressedOffset
parameter_list|(
name|ZSTD_seekable
modifier|*
specifier|const
name|zs
parameter_list|,
name|unsigned
name|frameIndex
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|unsigned
name|long
name|long
name|ZSTD_seekable_getFrameDecompressedOffset
parameter_list|(
name|ZSTD_seekable
modifier|*
specifier|const
name|zs
parameter_list|,
name|unsigned
name|frameIndex
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_getFrameCompressedSize
parameter_list|(
name|ZSTD_seekable
modifier|*
specifier|const
name|zs
parameter_list|,
name|unsigned
name|frameIndex
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_getFrameDecompressedSize
parameter_list|(
name|ZSTD_seekable
modifier|*
specifier|const
name|zs
parameter_list|,
name|unsigned
name|frameIndex
parameter_list|)
function_decl|;
name|ZSTDLIB_API
name|unsigned
name|ZSTD_seekable_offsetToFrameIndex
parameter_list|(
name|ZSTD_seekable
modifier|*
specifier|const
name|zs
parameter_list|,
name|unsigned
name|long
name|long
name|offset
parameter_list|)
function_decl|;
comment|/*===== Seekable advanced I/O API =====*/
typedef|typedef
name|int
function_decl|(
name|ZSTD_seekable_read
function_decl|)
parameter_list|(
name|void
modifier|*
name|opaque
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|size_t
name|n
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
name|ZSTD_seekable_seek
function_decl|)
parameter_list|(
name|void
modifier|*
name|opaque
parameter_list|,
name|long
name|long
name|offset
parameter_list|,
name|int
name|origin
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
block|{
name|void
modifier|*
name|opaque
decl_stmt|;
name|ZSTD_seekable_read
modifier|*
name|read
decl_stmt|;
name|ZSTD_seekable_seek
modifier|*
name|seek
decl_stmt|;
block|}
name|ZSTD_seekable_customFile
typedef|;
name|ZSTDLIB_API
name|size_t
name|ZSTD_seekable_initAdvanced
parameter_list|(
name|ZSTD_seekable
modifier|*
name|zs
parameter_list|,
name|ZSTD_seekable_customFile
name|src
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

