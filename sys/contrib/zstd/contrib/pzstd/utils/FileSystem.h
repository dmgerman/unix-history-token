begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_include
include|#
directive|include
file|"utils/Range.h"
end_include

begin_include
include|#
directive|include
file|<sys/stat.h>
end_include

begin_include
include|#
directive|include
file|<cerrno>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_comment
comment|// A small subset of `std::filesystem`.
end_comment

begin_comment
comment|// `std::filesystem` should be a drop in replacement.
end_comment

begin_comment
comment|// See http://en.cppreference.com/w/cpp/filesystem for documentation.
end_comment

begin_decl_stmt
name|namespace
name|pzstd
block|{
comment|// using file_status = ... causes gcc to emit a false positive warning
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
typedef|typedef
struct_decl|struct ::_stat64 file_status;
else|#
directive|else
typedef|typedef
struct_decl|struct ::stat file_status;
endif|#
directive|endif
comment|/// http://en.cppreference.com/w/cpp/filesystem/status
specifier|inline
name|file_status
name|status
argument_list|(
name|StringPiece
name|path
argument_list|,
name|std
operator|::
name|error_code
operator|&
name|ec
argument_list|)
name|noexcept
block|{
name|file_status
name|status
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
specifier|const
specifier|auto
name|error
init|=
operator|::
name|_stat64
argument_list|(
name|path
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|status
argument_list|)
decl_stmt|;
else|#
directive|else
specifier|const
specifier|auto
name|error
init|=
operator|::
name|stat
argument_list|(
name|path
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|status
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|error
condition|)
block|{
name|ec
operator|.
name|assign
argument_list|(
name|errno
argument_list|,
name|std
operator|::
name|generic_category
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ec
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
comment|/// http://en.cppreference.com/w/cpp/filesystem/is_regular_file
specifier|inline
name|bool
name|is_regular_file
parameter_list|(
name|file_status
name|status
parameter_list|)
function|noexcept
block|{
if|#
directive|if
name|defined
argument_list|(
name|S_ISREG
argument_list|)
return|return
name|S_ISREG
argument_list|(
name|status
operator|.
name|st_mode
argument_list|)
return|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|S_ISREG
argument_list|)
operator|&&
name|defined
argument_list|(
name|S_IFMT
argument_list|)
operator|&&
name|defined
argument_list|(
name|S_IFREG
argument_list|)
return|return
operator|(
name|status
operator|.
name|st_mode
operator|&
name|S_IFMT
operator|)
operator|==
name|S_IFREG
return|;
else|#
directive|else
name|static_assert
argument_list|(
name|false
argument_list|,
literal|"No POSIX stat() support."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|/// http://en.cppreference.com/w/cpp/filesystem/is_regular_file
specifier|inline
name|bool
name|is_regular_file
argument_list|(
name|StringPiece
name|path
argument_list|,
name|std
operator|::
name|error_code
operator|&
name|ec
argument_list|)
name|noexcept
block|{
return|return
name|is_regular_file
argument_list|(
name|status
argument_list|(
name|path
argument_list|,
name|ec
argument_list|)
argument_list|)
return|;
block|}
comment|/// http://en.cppreference.com/w/cpp/filesystem/is_directory
specifier|inline
name|bool
name|is_directory
parameter_list|(
name|file_status
name|status
parameter_list|)
function|noexcept
block|{
if|#
directive|if
name|defined
argument_list|(
name|S_ISDIR
argument_list|)
return|return
name|S_ISDIR
argument_list|(
name|status
operator|.
name|st_mode
argument_list|)
return|;
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|S_ISDIR
argument_list|)
operator|&&
name|defined
argument_list|(
name|S_IFMT
argument_list|)
operator|&&
name|defined
argument_list|(
name|S_IFDIR
argument_list|)
return|return
operator|(
name|status
operator|.
name|st_mode
operator|&
name|S_IFMT
operator|)
operator|==
name|S_IFDIR
return|;
else|#
directive|else
name|static_assert
argument_list|(
name|false
argument_list|,
literal|"NO POSIX stat() support."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|/// http://en.cppreference.com/w/cpp/filesystem/is_directory
specifier|inline
name|bool
name|is_directory
argument_list|(
name|StringPiece
name|path
argument_list|,
name|std
operator|::
name|error_code
operator|&
name|ec
argument_list|)
name|noexcept
block|{
return|return
name|is_directory
argument_list|(
name|status
argument_list|(
name|path
argument_list|,
name|ec
argument_list|)
argument_list|)
return|;
block|}
comment|/// http://en.cppreference.com/w/cpp/filesystem/file_size
specifier|inline
name|std
operator|::
name|uintmax_t
name|file_size
argument_list|(
argument|StringPiece path
argument_list|,
argument|std::error_code& ec
argument_list|)
name|noexcept
block|{
name|auto
name|stat
operator|=
name|status
argument_list|(
name|path
argument_list|,
name|ec
argument_list|)
block|;
if|if
condition|(
name|ec
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
operator|!
name|is_regular_file
argument_list|(
name|stat
argument_list|)
condition|)
block|{
name|ec
operator|.
name|assign
argument_list|(
name|ENOTSUP
argument_list|,
name|std
operator|::
name|generic_category
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|ec
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|stat
operator|.
name|st_size
return|;
block|}
end_decl_stmt

unit|}
end_unit

