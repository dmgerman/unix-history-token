begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|pzstd
block|{
comment|/**  * Dismissable scope guard.  * `Function` must be callable and take no parameters.  * Unless `dissmiss()` is called, the callable is executed upon destruction of  * `ScopeGuard`.  *  * Example:  *  *   auto guard = makeScopeGuard([&] { cleanup(); });  */
name|template
operator|<
name|typename
name|Function
operator|>
name|class
name|ScopeGuard
block|{
name|Function
name|function
block|;
name|bool
name|dismissed
block|;
name|public
operator|:
name|explicit
name|ScopeGuard
argument_list|(
name|Function
operator|&&
name|function
argument_list|)
operator|:
name|function
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|function
argument_list|)
argument_list|)
block|,
name|dismissed
argument_list|(
argument|false
argument_list|)
block|{}
name|void
name|dismiss
argument_list|()
block|{
name|dismissed
operator|=
name|true
block|;   }
operator|~
name|ScopeGuard
argument_list|()
name|noexcept
block|{
if|if
condition|(
operator|!
name|dismissed
condition|)
block|{
name|function
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
comment|/// Creates a scope guard from `function`.
name|template
operator|<
name|typename
name|Function
operator|>
name|ScopeGuard
operator|<
name|Function
operator|>
name|makeScopeGuard
argument_list|(
argument|Function&& function
argument_list|)
block|{
return|return
name|ScopeGuard
operator|<
name|Function
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|Function
operator|>
operator|(
name|function
operator|)
operator|)
return|;
block|}
block|}
end_decl_stmt

end_unit

