begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_include
include|#
directive|include
file|"Options.h"
end_include

begin_include
include|#
directive|include
file|"Pzstd.h"
end_include

begin_include
include|#
directive|include
file|"utils/ScopeGuard.h"
end_include

begin_include
include|#
directive|include
file|<cstdio>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_decl_stmt
name|namespace
name|pzstd
block|{
specifier|inline
name|bool
name|check
argument_list|(
name|std
operator|::
name|string
name|source
argument_list|,
name|std
operator|::
name|string
name|decompressed
argument_list|)
block|{
name|std
operator|::
name|unique_ptr
operator|<
name|std
operator|::
name|uint8_t
index|[]
operator|>
name|sBuf
argument_list|(
argument|new std::uint8_t[
literal|1024
argument|]
argument_list|)
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|std
operator|::
name|uint8_t
index|[]
operator|>
name|dBuf
argument_list|(
argument|new std::uint8_t[
literal|1024
argument|]
argument_list|)
expr_stmt|;
name|auto
name|sFd
init|=
name|std
operator|::
name|fopen
argument_list|(
name|source
operator|.
name|c_str
argument_list|()
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
name|auto
name|dFd
init|=
name|std
operator|::
name|fopen
argument_list|(
name|decompressed
operator|.
name|c_str
argument_list|()
argument_list|,
literal|"rb"
argument_list|)
decl_stmt|;
name|auto
name|guard
init|=
name|makeScopeGuard
argument_list|(
index|[
operator|&
index|]
block|{
name|std
operator|::
name|fclose
argument_list|(
name|sFd
argument_list|)
block|;
name|std
operator|::
name|fclose
argument_list|(
name|dFd
argument_list|)
block|;   }
argument_list|)
decl_stmt|;
name|size_t
name|sRead
decl_stmt|,
name|dRead
decl_stmt|;
do|do
block|{
name|sRead
operator|=
name|std
operator|::
name|fread
argument_list|(
name|sBuf
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|sFd
argument_list|)
expr_stmt|;
name|dRead
operator|=
name|std
operator|::
name|fread
argument_list|(
name|dBuf
operator|.
name|get
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|dFd
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|ferror
argument_list|(
name|sFd
argument_list|)
operator|||
name|std
operator|::
name|ferror
argument_list|(
name|dFd
argument_list|)
condition|)
block|{
return|return
name|false
return|;
block|}
if|if
condition|(
name|sRead
operator|!=
name|dRead
condition|)
block|{
return|return
name|false
return|;
block|}
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sRead
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|sBuf
operator|.
name|get
argument_list|()
index|[
name|i
index|]
operator|!=
name|dBuf
operator|.
name|get
argument_list|()
index|[
name|i
index|]
condition|)
block|{
return|return
name|false
return|;
block|}
block|}
block|}
do|while
condition|(
name|sRead
operator|==
literal|1024
condition|)
do|;
if|if
condition|(
operator|!
name|std
operator|::
name|feof
argument_list|(
name|sFd
argument_list|)
operator|||
operator|!
name|std
operator|::
name|feof
argument_list|(
name|dFd
argument_list|)
condition|)
block|{
return|return
name|false
return|;
block|}
return|return
name|true
return|;
block|}
specifier|inline
name|bool
name|roundTrip
parameter_list|(
name|Options
modifier|&
name|options
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|inputFiles
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
name|false
return|;
block|}
name|std
operator|::
name|string
name|source
operator|=
name|options
operator|.
name|inputFiles
operator|.
name|front
argument_list|()
expr_stmt|;
name|std
operator|::
name|string
name|compressedFile
operator|=
name|std
operator|::
name|tmpnam
argument_list|(
name|nullptr
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|decompressedFile
operator|=
name|std
operator|::
name|tmpnam
argument_list|(
name|nullptr
argument_list|)
expr_stmt|;
name|auto
name|guard
init|=
name|makeScopeGuard
argument_list|(
index|[
operator|&
index|]
block|{
name|std
operator|::
name|remove
argument_list|(
name|compressedFile
operator|.
name|c_str
argument_list|()
argument_list|)
block|;
name|std
operator|::
name|remove
argument_list|(
name|decompressedFile
operator|.
name|c_str
argument_list|()
argument_list|)
block|;   }
argument_list|)
decl_stmt|;
block|{
name|options
operator|.
name|outputFile
operator|=
name|compressedFile
expr_stmt|;
name|options
operator|.
name|decompress
operator|=
name|false
expr_stmt|;
if|if
condition|(
name|pzstdMain
argument_list|(
name|options
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
name|false
return|;
block|}
block|}
block|{
name|options
operator|.
name|decompress
operator|=
name|true
expr_stmt|;
name|options
operator|.
name|inputFiles
operator|.
name|front
argument_list|()
operator|=
name|compressedFile
expr_stmt|;
name|options
operator|.
name|outputFile
operator|=
name|decompressedFile
expr_stmt|;
if|if
condition|(
name|pzstdMain
argument_list|(
name|options
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
name|false
return|;
block|}
block|}
return|return
name|check
argument_list|(
name|source
argument_list|,
name|decompressedFile
argument_list|)
return|;
block|}
block|}
end_decl_stmt

end_unit

