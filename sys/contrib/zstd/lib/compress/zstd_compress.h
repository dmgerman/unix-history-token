begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Yann Collet, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  * You may select, at your option, one of the above-listed licenses.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ZSTD_COMPRESS_H
end_ifndef

begin_define
define|#
directive|define
name|ZSTD_COMPRESS_H
end_define

begin_comment
comment|/*-************************************* *  Dependencies ***************************************/
end_comment

begin_include
include|#
directive|include
file|"zstd_internal.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|ZSTD_MULTITHREAD
end_ifdef

begin_include
include|#
directive|include
file|"zstdmt_compress.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*-************************************* *  Constants ***************************************/
specifier|static
specifier|const
name|U32
name|g_searchStrength
init|=
literal|8
decl_stmt|;
define|#
directive|define
name|HASH_READ_SIZE
value|8
comment|/*-************************************* *  Context memory management ***************************************/
typedef|typedef
enum|enum
block|{
name|ZSTDcs_created
init|=
literal|0
block|,
name|ZSTDcs_init
block|,
name|ZSTDcs_ongoing
block|,
name|ZSTDcs_ending
block|}
name|ZSTD_compressionStage_e
typedef|;
typedef|typedef
enum|enum
block|{
name|zcss_init
init|=
literal|0
block|,
name|zcss_load
block|,
name|zcss_flush
block|}
name|ZSTD_cStreamStage
typedef|;
typedef|typedef
struct|struct
name|ZSTD_prefixDict_s
block|{
specifier|const
name|void
modifier|*
name|dict
decl_stmt|;
name|size_t
name|dictSize
decl_stmt|;
name|ZSTD_dictMode_e
name|dictMode
decl_stmt|;
block|}
name|ZSTD_prefixDict
typedef|;
struct|struct
name|ZSTD_CCtx_s
block|{
specifier|const
name|BYTE
modifier|*
name|nextSrc
decl_stmt|;
comment|/* next block here to continue on current prefix */
specifier|const
name|BYTE
modifier|*
name|base
decl_stmt|;
comment|/* All regular indexes relative to this position */
specifier|const
name|BYTE
modifier|*
name|dictBase
decl_stmt|;
comment|/* extDict indexes relative to this position */
name|U32
name|dictLimit
decl_stmt|;
comment|/* below that point, need extDict */
name|U32
name|lowLimit
decl_stmt|;
comment|/* below that point, no more data */
name|U32
name|nextToUpdate
decl_stmt|;
comment|/* index from which to continue dictionary update */
name|U32
name|nextToUpdate3
decl_stmt|;
comment|/* index from which to continue dictionary update */
name|U32
name|hashLog3
decl_stmt|;
comment|/* dispatch table : larger == faster, more memory */
name|U32
name|loadedDictEnd
decl_stmt|;
comment|/* index of end of dictionary */
name|ZSTD_compressionStage_e
name|stage
decl_stmt|;
name|U32
name|dictID
decl_stmt|;
name|ZSTD_CCtx_params
name|requestedParams
decl_stmt|;
name|ZSTD_CCtx_params
name|appliedParams
decl_stmt|;
name|void
modifier|*
name|workSpace
decl_stmt|;
name|size_t
name|workSpaceSize
decl_stmt|;
name|size_t
name|blockSize
decl_stmt|;
name|U64
name|pledgedSrcSizePlusOne
decl_stmt|;
comment|/* this way, 0 (default) == unknown */
name|U64
name|consumedSrcSize
decl_stmt|;
name|XXH64_state_t
name|xxhState
decl_stmt|;
name|ZSTD_customMem
name|customMem
decl_stmt|;
name|size_t
name|staticSize
decl_stmt|;
name|seqStore_t
name|seqStore
decl_stmt|;
comment|/* sequences storage ptrs */
name|optState_t
name|optState
decl_stmt|;
name|ldmState_t
name|ldmState
decl_stmt|;
comment|/* long distance matching state */
name|U32
modifier|*
name|hashTable
decl_stmt|;
name|U32
modifier|*
name|hashTable3
decl_stmt|;
name|U32
modifier|*
name|chainTable
decl_stmt|;
name|ZSTD_entropyCTables_t
modifier|*
name|entropy
decl_stmt|;
comment|/* streaming */
name|char
modifier|*
name|inBuff
decl_stmt|;
name|size_t
name|inBuffSize
decl_stmt|;
name|size_t
name|inToCompress
decl_stmt|;
name|size_t
name|inBuffPos
decl_stmt|;
name|size_t
name|inBuffTarget
decl_stmt|;
name|char
modifier|*
name|outBuff
decl_stmt|;
name|size_t
name|outBuffSize
decl_stmt|;
name|size_t
name|outBuffContentSize
decl_stmt|;
name|size_t
name|outBuffFlushedSize
decl_stmt|;
name|ZSTD_cStreamStage
name|streamStage
decl_stmt|;
name|U32
name|frameEnded
decl_stmt|;
comment|/* Dictionary */
name|ZSTD_CDict
modifier|*
name|cdictLocal
decl_stmt|;
specifier|const
name|ZSTD_CDict
modifier|*
name|cdict
decl_stmt|;
name|ZSTD_prefixDict
name|prefixDict
decl_stmt|;
comment|/* single-usage dictionary */
comment|/* Multi-threading */
ifdef|#
directive|ifdef
name|ZSTD_MULTITHREAD
name|ZSTDMT_CCtx
modifier|*
name|mtctx
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
specifier|static
specifier|const
name|BYTE
name|LL_Code
index|[
literal|64
index|]
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|16
block|,
literal|17
block|,
literal|17
block|,
literal|18
block|,
literal|18
block|,
literal|19
block|,
literal|19
block|,
literal|20
block|,
literal|20
block|,
literal|20
block|,
literal|20
block|,
literal|21
block|,
literal|21
block|,
literal|21
block|,
literal|21
block|,
literal|22
block|,
literal|22
block|,
literal|22
block|,
literal|22
block|,
literal|22
block|,
literal|22
block|,
literal|22
block|,
literal|22
block|,
literal|23
block|,
literal|23
block|,
literal|23
block|,
literal|23
block|,
literal|23
block|,
literal|23
block|,
literal|23
block|,
literal|23
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|,
literal|24
block|}
decl_stmt|;
specifier|static
specifier|const
name|BYTE
name|ML_Code
index|[
literal|128
index|]
init|=
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|,
literal|16
block|,
literal|17
block|,
literal|18
block|,
literal|19
block|,
literal|20
block|,
literal|21
block|,
literal|22
block|,
literal|23
block|,
literal|24
block|,
literal|25
block|,
literal|26
block|,
literal|27
block|,
literal|28
block|,
literal|29
block|,
literal|30
block|,
literal|31
block|,
literal|32
block|,
literal|32
block|,
literal|33
block|,
literal|33
block|,
literal|34
block|,
literal|34
block|,
literal|35
block|,
literal|35
block|,
literal|36
block|,
literal|36
block|,
literal|36
block|,
literal|36
block|,
literal|37
block|,
literal|37
block|,
literal|37
block|,
literal|37
block|,
literal|38
block|,
literal|38
block|,
literal|38
block|,
literal|38
block|,
literal|38
block|,
literal|38
block|,
literal|38
block|,
literal|38
block|,
literal|39
block|,
literal|39
block|,
literal|39
block|,
literal|39
block|,
literal|39
block|,
literal|39
block|,
literal|39
block|,
literal|39
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|40
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|41
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|,
literal|42
block|}
decl_stmt|;
comment|/*! ZSTD_storeSeq() :     Store a sequence (literal length, literals, offset code and match length code) into seqStore_t.     `offsetCode` : distance to match, or 0 == repCode.     `matchCode` : matchLength - MINMATCH */
name|MEM_STATIC
name|void
name|ZSTD_storeSeq
parameter_list|(
name|seqStore_t
modifier|*
name|seqStorePtr
parameter_list|,
name|size_t
name|litLength
parameter_list|,
specifier|const
name|void
modifier|*
name|literals
parameter_list|,
name|U32
name|offsetCode
parameter_list|,
name|size_t
name|matchCode
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ZSTD_DEBUG
argument_list|)
operator|&&
operator|(
name|ZSTD_DEBUG
operator|>=
literal|6
operator|)
specifier|static
specifier|const
name|BYTE
modifier|*
name|g_start
init|=
name|NULL
decl_stmt|;
name|U32
specifier|const
name|pos
init|=
call|(
name|U32
call|)
argument_list|(
operator|(
specifier|const
name|BYTE
operator|*
operator|)
name|literals
operator|-
name|g_start
argument_list|)
decl_stmt|;
if|if
condition|(
name|g_start
operator|==
name|NULL
condition|)
name|g_start
operator|=
operator|(
specifier|const
name|BYTE
operator|*
operator|)
name|literals
expr_stmt|;
if|if
condition|(
operator|(
name|pos
operator|>
literal|0
operator|)
operator|&&
operator|(
name|pos
operator|<
literal|1000000000
operator|)
condition|)
name|DEBUGLOG
argument_list|(
literal|6
argument_list|,
literal|"Cpos %6u :%5u literals& match %3u bytes at distance %6u"
argument_list|,
name|pos
argument_list|,
operator|(
name|U32
operator|)
name|litLength
argument_list|,
operator|(
name|U32
operator|)
name|matchCode
operator|+
name|MINMATCH
argument_list|,
operator|(
name|U32
operator|)
name|offsetCode
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* copy Literals */
name|assert
argument_list|(
name|seqStorePtr
operator|->
name|lit
operator|+
name|litLength
operator|<=
name|seqStorePtr
operator|->
name|litStart
operator|+
literal|128
name|KB
argument_list|)
expr_stmt|;
name|ZSTD_wildcopy
argument_list|(
name|seqStorePtr
operator|->
name|lit
argument_list|,
name|literals
argument_list|,
name|litLength
argument_list|)
expr_stmt|;
name|seqStorePtr
operator|->
name|lit
operator|+=
name|litLength
expr_stmt|;
comment|/* literal Length */
if|if
condition|(
name|litLength
operator|>
literal|0xFFFF
condition|)
block|{
name|seqStorePtr
operator|->
name|longLengthID
operator|=
literal|1
expr_stmt|;
name|seqStorePtr
operator|->
name|longLengthPos
operator|=
call|(
name|U32
call|)
argument_list|(
name|seqStorePtr
operator|->
name|sequences
operator|-
name|seqStorePtr
operator|->
name|sequencesStart
argument_list|)
expr_stmt|;
block|}
name|seqStorePtr
operator|->
name|sequences
index|[
literal|0
index|]
operator|.
name|litLength
operator|=
operator|(
name|U16
operator|)
name|litLength
expr_stmt|;
comment|/* match offset */
name|seqStorePtr
operator|->
name|sequences
index|[
literal|0
index|]
operator|.
name|offset
operator|=
name|offsetCode
operator|+
literal|1
expr_stmt|;
comment|/* match Length */
if|if
condition|(
name|matchCode
operator|>
literal|0xFFFF
condition|)
block|{
name|seqStorePtr
operator|->
name|longLengthID
operator|=
literal|2
expr_stmt|;
name|seqStorePtr
operator|->
name|longLengthPos
operator|=
call|(
name|U32
call|)
argument_list|(
name|seqStorePtr
operator|->
name|sequences
operator|-
name|seqStorePtr
operator|->
name|sequencesStart
argument_list|)
expr_stmt|;
block|}
name|seqStorePtr
operator|->
name|sequences
index|[
literal|0
index|]
operator|.
name|matchLength
operator|=
operator|(
name|U16
operator|)
name|matchCode
expr_stmt|;
name|seqStorePtr
operator|->
name|sequences
operator|++
expr_stmt|;
block|}
comment|/*-************************************* *  Match length counter ***************************************/
specifier|static
name|unsigned
name|ZSTD_NbCommonBytes
parameter_list|(
specifier|register
name|size_t
name|val
parameter_list|)
block|{
if|if
condition|(
name|MEM_isLittleEndian
argument_list|()
condition|)
block|{
if|if
condition|(
name|MEM_64bits
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|defined
argument_list|(
name|_WIN64
argument_list|)
name|unsigned
name|long
name|r
init|=
literal|0
decl_stmt|;
name|_BitScanForward64
argument_list|(
operator|&
name|r
argument_list|,
operator|(
name|U64
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
call|(
name|unsigned
call|)
argument_list|(
name|r
operator|>>
literal|3
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
return|return
operator|(
name|__builtin_ctzll
argument_list|(
operator|(
name|U64
operator|)
name|val
argument_list|)
operator|>>
literal|3
operator|)
return|;
else|#
directive|else
specifier|static
specifier|const
name|int
name|DeBruijnBytePos
index|[
literal|64
index|]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|0
block|,
literal|3
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|4
block|,
literal|2
block|,
literal|7
block|,
literal|0
block|,
literal|2
block|,
literal|3
block|,
literal|6
block|,
literal|1
block|,
literal|5
block|,
literal|3
block|,
literal|5
block|,
literal|1
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|2
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|7
block|,
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|,
literal|2
block|,
literal|6
block|,
literal|5
block|,
literal|5
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|1
block|,
literal|2
block|,
literal|4
block|,
literal|6
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|7
block|,
literal|2
block|,
literal|6
block|,
literal|5
block|,
literal|7
block|,
literal|6
block|,
literal|7
block|,
literal|7
block|}
decl_stmt|;
return|return
name|DeBruijnBytePos
index|[
operator|(
call|(
name|U64
call|)
argument_list|(
operator|(
name|val
operator|&
operator|-
operator|(
name|long
name|long
operator|)
name|val
operator|)
operator|*
literal|0x0218A392CDABBD3FULL
argument_list|)
operator|)
operator|>>
literal|58
index|]
return|;
endif|#
directive|endif
block|}
else|else
block|{
comment|/* 32 bits */
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
name|unsigned
name|long
name|r
init|=
literal|0
decl_stmt|;
name|_BitScanForward
argument_list|(
operator|&
name|r
argument_list|,
operator|(
name|U32
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
call|(
name|unsigned
call|)
argument_list|(
name|r
operator|>>
literal|3
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|>=
literal|3
operator|)
return|return
operator|(
name|__builtin_ctz
argument_list|(
operator|(
name|U32
operator|)
name|val
argument_list|)
operator|>>
literal|3
operator|)
return|;
else|#
directive|else
specifier|static
specifier|const
name|int
name|DeBruijnBytePos
index|[
literal|32
index|]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|3
block|,
literal|0
block|,
literal|3
block|,
literal|1
block|,
literal|3
block|,
literal|0
block|,
literal|3
block|,
literal|2
block|,
literal|2
block|,
literal|1
block|,
literal|3
block|,
literal|2
block|,
literal|0
block|,
literal|1
block|,
literal|3
block|,
literal|3
block|,
literal|1
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|0
block|,
literal|3
block|,
literal|1
block|,
literal|2
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
return|return
name|DeBruijnBytePos
index|[
operator|(
call|(
name|U32
call|)
argument_list|(
operator|(
name|val
operator|&
operator|-
operator|(
name|S32
operator|)
name|val
operator|)
operator|*
literal|0x077CB531U
argument_list|)
operator|)
operator|>>
literal|27
index|]
return|;
endif|#
directive|endif
block|}
block|}
else|else
block|{
comment|/* Big Endian CPU */
if|if
condition|(
name|MEM_64bits
argument_list|()
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|defined
argument_list|(
name|_WIN64
argument_list|)
name|unsigned
name|long
name|r
init|=
literal|0
decl_stmt|;
name|_BitScanReverse64
argument_list|(
operator|&
name|r
argument_list|,
name|val
argument_list|)
expr_stmt|;
return|return
call|(
name|unsigned
call|)
argument_list|(
name|r
operator|>>
literal|3
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|>=
literal|4
operator|)
return|return
operator|(
name|__builtin_clzll
argument_list|(
name|val
argument_list|)
operator|>>
literal|3
operator|)
return|;
else|#
directive|else
name|unsigned
name|r
decl_stmt|;
specifier|const
name|unsigned
name|n32
init|=
sizeof|sizeof
argument_list|(
name|size_t
argument_list|)
operator|*
literal|4
decl_stmt|;
comment|/* calculate this way due to compiler complaining in 32-bits mode */
if|if
condition|(
operator|!
operator|(
name|val
operator|>>
name|n32
operator|)
condition|)
block|{
name|r
operator|=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
literal|0
expr_stmt|;
name|val
operator|>>=
name|n32
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|val
operator|>>
literal|16
operator|)
condition|)
block|{
name|r
operator|+=
literal|2
expr_stmt|;
name|val
operator|>>=
literal|8
expr_stmt|;
block|}
else|else
block|{
name|val
operator|>>=
literal|24
expr_stmt|;
block|}
name|r
operator|+=
operator|(
operator|!
name|val
operator|)
expr_stmt|;
return|return
name|r
return|;
endif|#
directive|endif
block|}
else|else
block|{
comment|/* 32 bits */
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
name|unsigned
name|long
name|r
init|=
literal|0
decl_stmt|;
name|_BitScanReverse
argument_list|(
operator|&
name|r
argument_list|,
operator|(
name|unsigned
name|long
operator|)
name|val
argument_list|)
expr_stmt|;
return|return
call|(
name|unsigned
call|)
argument_list|(
name|r
operator|>>
literal|3
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|__GNUC__
operator|>=
literal|3
operator|)
return|return
operator|(
name|__builtin_clz
argument_list|(
operator|(
name|U32
operator|)
name|val
argument_list|)
operator|>>
literal|3
operator|)
return|;
else|#
directive|else
name|unsigned
name|r
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|val
operator|>>
literal|16
operator|)
condition|)
block|{
name|r
operator|=
literal|2
expr_stmt|;
name|val
operator|>>=
literal|8
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
literal|0
expr_stmt|;
name|val
operator|>>=
literal|24
expr_stmt|;
block|}
name|r
operator|+=
operator|(
operator|!
name|val
operator|)
expr_stmt|;
return|return
name|r
return|;
endif|#
directive|endif
block|}
block|}
block|}
name|MEM_STATIC
name|size_t
name|ZSTD_count
parameter_list|(
specifier|const
name|BYTE
modifier|*
name|pIn
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|pMatch
parameter_list|,
specifier|const
name|BYTE
modifier|*
specifier|const
name|pInLimit
parameter_list|)
block|{
specifier|const
name|BYTE
modifier|*
specifier|const
name|pStart
init|=
name|pIn
decl_stmt|;
specifier|const
name|BYTE
modifier|*
specifier|const
name|pInLoopLimit
init|=
name|pInLimit
operator|-
operator|(
sizeof|sizeof
argument_list|(
name|size_t
argument_list|)
operator|-
literal|1
operator|)
decl_stmt|;
while|while
condition|(
name|pIn
operator|<
name|pInLoopLimit
condition|)
block|{
name|size_t
specifier|const
name|diff
init|=
name|MEM_readST
argument_list|(
name|pMatch
argument_list|)
operator|^
name|MEM_readST
argument_list|(
name|pIn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|diff
condition|)
block|{
name|pIn
operator|+=
sizeof|sizeof
argument_list|(
name|size_t
argument_list|)
expr_stmt|;
name|pMatch
operator|+=
sizeof|sizeof
argument_list|(
name|size_t
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|pIn
operator|+=
name|ZSTD_NbCommonBytes
argument_list|(
name|diff
argument_list|)
expr_stmt|;
return|return
call|(
name|size_t
call|)
argument_list|(
name|pIn
operator|-
name|pStart
argument_list|)
return|;
block|}
if|if
condition|(
name|MEM_64bits
argument_list|()
condition|)
if|if
condition|(
operator|(
name|pIn
operator|<
operator|(
name|pInLimit
operator|-
literal|3
operator|)
operator|)
operator|&&
operator|(
name|MEM_read32
argument_list|(
name|pMatch
argument_list|)
operator|==
name|MEM_read32
argument_list|(
name|pIn
argument_list|)
operator|)
condition|)
block|{
name|pIn
operator|+=
literal|4
expr_stmt|;
name|pMatch
operator|+=
literal|4
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|pIn
operator|<
operator|(
name|pInLimit
operator|-
literal|1
operator|)
operator|)
operator|&&
operator|(
name|MEM_read16
argument_list|(
name|pMatch
argument_list|)
operator|==
name|MEM_read16
argument_list|(
name|pIn
argument_list|)
operator|)
condition|)
block|{
name|pIn
operator|+=
literal|2
expr_stmt|;
name|pMatch
operator|+=
literal|2
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|pIn
operator|<
name|pInLimit
operator|)
operator|&&
operator|(
operator|*
name|pMatch
operator|==
operator|*
name|pIn
operator|)
condition|)
name|pIn
operator|++
expr_stmt|;
return|return
call|(
name|size_t
call|)
argument_list|(
name|pIn
operator|-
name|pStart
argument_list|)
return|;
block|}
comment|/** ZSTD_count_2segments() : *   can count match length with `ip`& `match` in 2 different segments. *   convention : on reaching mEnd, match count continue starting from iStart */
name|MEM_STATIC
name|size_t
name|ZSTD_count_2segments
parameter_list|(
specifier|const
name|BYTE
modifier|*
name|ip
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|match
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|iEnd
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|mEnd
parameter_list|,
specifier|const
name|BYTE
modifier|*
name|iStart
parameter_list|)
block|{
specifier|const
name|BYTE
modifier|*
specifier|const
name|vEnd
init|=
name|MIN
argument_list|(
name|ip
operator|+
operator|(
name|mEnd
operator|-
name|match
operator|)
argument_list|,
name|iEnd
argument_list|)
decl_stmt|;
name|size_t
specifier|const
name|matchLength
init|=
name|ZSTD_count
argument_list|(
name|ip
argument_list|,
name|match
argument_list|,
name|vEnd
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|+
name|matchLength
operator|!=
name|mEnd
condition|)
return|return
name|matchLength
return|;
return|return
name|matchLength
operator|+
name|ZSTD_count
argument_list|(
name|ip
operator|+
name|matchLength
argument_list|,
name|iStart
argument_list|,
name|iEnd
argument_list|)
return|;
block|}
comment|/*-************************************* *  Hashes ***************************************/
specifier|static
specifier|const
name|U32
name|prime3bytes
init|=
literal|506832829U
decl_stmt|;
specifier|static
name|U32
name|ZSTD_hash3
parameter_list|(
name|U32
name|u
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
operator|(
operator|(
name|u
operator|<<
operator|(
literal|32
operator|-
literal|24
operator|)
operator|)
operator|*
name|prime3bytes
operator|)
operator|>>
operator|(
literal|32
operator|-
name|h
operator|)
return|;
block|}
name|MEM_STATIC
name|size_t
name|ZSTD_hash3Ptr
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
name|ZSTD_hash3
argument_list|(
name|MEM_readLE32
argument_list|(
name|ptr
argument_list|)
argument_list|,
name|h
argument_list|)
return|;
block|}
comment|/* only in zstd_opt.h */
specifier|static
specifier|const
name|U32
name|prime4bytes
init|=
literal|2654435761U
decl_stmt|;
specifier|static
name|U32
name|ZSTD_hash4
parameter_list|(
name|U32
name|u
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
operator|(
name|u
operator|*
name|prime4bytes
operator|)
operator|>>
operator|(
literal|32
operator|-
name|h
operator|)
return|;
block|}
specifier|static
name|size_t
name|ZSTD_hash4Ptr
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
name|ZSTD_hash4
argument_list|(
name|MEM_read32
argument_list|(
name|ptr
argument_list|)
argument_list|,
name|h
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|U64
name|prime5bytes
init|=
literal|889523592379ULL
decl_stmt|;
specifier|static
name|size_t
name|ZSTD_hash5
parameter_list|(
name|U64
name|u
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
call|(
name|size_t
call|)
argument_list|(
operator|(
operator|(
name|u
operator|<<
operator|(
literal|64
operator|-
literal|40
operator|)
operator|)
operator|*
name|prime5bytes
operator|)
operator|>>
operator|(
literal|64
operator|-
name|h
operator|)
argument_list|)
return|;
block|}
specifier|static
name|size_t
name|ZSTD_hash5Ptr
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
name|ZSTD_hash5
argument_list|(
name|MEM_readLE64
argument_list|(
name|p
argument_list|)
argument_list|,
name|h
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|U64
name|prime6bytes
init|=
literal|227718039650203ULL
decl_stmt|;
specifier|static
name|size_t
name|ZSTD_hash6
parameter_list|(
name|U64
name|u
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
call|(
name|size_t
call|)
argument_list|(
operator|(
operator|(
name|u
operator|<<
operator|(
literal|64
operator|-
literal|48
operator|)
operator|)
operator|*
name|prime6bytes
operator|)
operator|>>
operator|(
literal|64
operator|-
name|h
operator|)
argument_list|)
return|;
block|}
specifier|static
name|size_t
name|ZSTD_hash6Ptr
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
name|ZSTD_hash6
argument_list|(
name|MEM_readLE64
argument_list|(
name|p
argument_list|)
argument_list|,
name|h
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|U64
name|prime7bytes
init|=
literal|58295818150454627ULL
decl_stmt|;
specifier|static
name|size_t
name|ZSTD_hash7
parameter_list|(
name|U64
name|u
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
call|(
name|size_t
call|)
argument_list|(
operator|(
operator|(
name|u
operator|<<
operator|(
literal|64
operator|-
literal|56
operator|)
operator|)
operator|*
name|prime7bytes
operator|)
operator|>>
operator|(
literal|64
operator|-
name|h
operator|)
argument_list|)
return|;
block|}
specifier|static
name|size_t
name|ZSTD_hash7Ptr
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
name|ZSTD_hash7
argument_list|(
name|MEM_readLE64
argument_list|(
name|p
argument_list|)
argument_list|,
name|h
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|U64
name|prime8bytes
init|=
literal|0xCF1BBCDCB7A56463ULL
decl_stmt|;
specifier|static
name|size_t
name|ZSTD_hash8
parameter_list|(
name|U64
name|u
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
call|(
name|size_t
call|)
argument_list|(
operator|(
operator|(
name|u
operator|)
operator|*
name|prime8bytes
operator|)
operator|>>
operator|(
literal|64
operator|-
name|h
operator|)
argument_list|)
return|;
block|}
specifier|static
name|size_t
name|ZSTD_hash8Ptr
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|,
name|U32
name|h
parameter_list|)
block|{
return|return
name|ZSTD_hash8
argument_list|(
name|MEM_readLE64
argument_list|(
name|p
argument_list|)
argument_list|,
name|h
argument_list|)
return|;
block|}
name|MEM_STATIC
name|size_t
name|ZSTD_hashPtr
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|,
name|U32
name|hBits
parameter_list|,
name|U32
name|mls
parameter_list|)
block|{
switch|switch
condition|(
name|mls
condition|)
block|{
default|default:
case|case
literal|4
case|:
return|return
name|ZSTD_hash4Ptr
argument_list|(
name|p
argument_list|,
name|hBits
argument_list|)
return|;
case|case
literal|5
case|:
return|return
name|ZSTD_hash5Ptr
argument_list|(
name|p
argument_list|,
name|hBits
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|ZSTD_hash6Ptr
argument_list|(
name|p
argument_list|,
name|hBits
argument_list|)
return|;
case|case
literal|7
case|:
return|return
name|ZSTD_hash7Ptr
argument_list|(
name|p
argument_list|,
name|hBits
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|ZSTD_hash8Ptr
argument_list|(
name|p
argument_list|,
name|hBits
argument_list|)
return|;
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ZSTD_COMPRESS_H */
end_comment

end_unit

