begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Yann Collet, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  * You may select, at your option, one of the above-listed licenses.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ZSTDv06_H
end_ifndef

begin_define
define|#
directive|define
name|ZSTDv06_H
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*======  Dependency  ======*/
include|#
directive|include
file|<stddef.h>
comment|/* size_t */
comment|/*======  Export for Windows  ======*/
comment|/*! *  ZSTDv06_DLL_EXPORT : *  Enable exporting of functions when building a Windows DLL */
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
name|defined
argument_list|(
name|ZSTDv06_DLL_EXPORT
argument_list|)
operator|&&
operator|(
name|ZSTDv06_DLL_EXPORT
operator|==
literal|1
operator|)
define|#
directive|define
name|ZSTDLIBv06_API
value|__declspec(dllexport)
else|#
directive|else
define|#
directive|define
name|ZSTDLIBv06_API
endif|#
directive|endif
comment|/* ************************************* *  Simple functions ***************************************/
comment|/*! ZSTDv06_decompress() :     `compressedSize` : is the _exact_ size of the compressed blob, otherwise decompression will fail.     `dstCapacity` must be large enough, equal or larger than originalSize.     @return : the number of bytes decompressed into `dst` (<= `dstCapacity`),               or an errorCode if it fails (which can be tested using ZSTDv06_isError()) */
name|ZSTDLIBv06_API
name|size_t
name|ZSTDv06_decompress
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
function_decl|;
comment|/** ZSTDv06_getFrameSrcSize() : get the source length of a ZSTD frame     compressedSize : The size of the 'src' buffer, at least as large as the frame pointed to by 'src'     return : the number of bytes that would be read to decompress this frame              or an errorCode if it fails (which can be tested using ZSTDv06_isError()) */
name|size_t
name|ZSTDv06_findFrameCompressedSize
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
function_decl|;
comment|/* ************************************* *  Helper functions ***************************************/
name|ZSTDLIBv06_API
name|size_t
name|ZSTDv06_compressBound
parameter_list|(
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/*!< maximum compressed size (worst case scenario) */
comment|/* Error Management */
name|ZSTDLIBv06_API
name|unsigned
name|ZSTDv06_isError
parameter_list|(
name|size_t
name|code
parameter_list|)
function_decl|;
comment|/*!< tells if a `size_t` function result is an error code */
name|ZSTDLIBv06_API
specifier|const
name|char
modifier|*
name|ZSTDv06_getErrorName
parameter_list|(
name|size_t
name|code
parameter_list|)
function_decl|;
comment|/*!< provides readable string for an error code */
comment|/* ************************************* *  Explicit memory management ***************************************/
comment|/** Decompression context */
typedef|typedef
name|struct
name|ZSTDv06_DCtx_s
name|ZSTDv06_DCtx
typedef|;
name|ZSTDLIBv06_API
name|ZSTDv06_DCtx
modifier|*
name|ZSTDv06_createDCtx
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
name|size_t
name|ZSTDv06_freeDCtx
parameter_list|(
name|ZSTDv06_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
comment|/*!< @return : errorCode */
comment|/** ZSTDv06_decompressDCtx() : *   Same as ZSTDv06_decompress(), but requires an already allocated ZSTDv06_DCtx (see ZSTDv06_createDCtx()) */
name|ZSTDLIBv06_API
name|size_t
name|ZSTDv06_decompressDCtx
parameter_list|(
name|ZSTDv06_DCtx
modifier|*
name|ctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/*-*********************** *  Dictionary API *************************/
comment|/*! ZSTDv06_decompress_usingDict() : *   Decompression using a pre-defined Dictionary content (see dictBuilder). *   Dictionary must be identical to the one used during compression, otherwise regenerated data will be corrupted. *   Note : dict can be NULL, in which case, it's equivalent to ZSTDv06_decompressDCtx() */
name|ZSTDLIBv06_API
name|size_t
name|ZSTDv06_decompress_usingDict
parameter_list|(
name|ZSTDv06_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
comment|/*-************************ *  Advanced Streaming API ***************************/
struct|struct
name|ZSTDv06_frameParams_s
block|{
name|unsigned
name|long
name|long
name|frameContentSize
decl_stmt|;
name|unsigned
name|windowLog
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|ZSTDv06_frameParams_s
name|ZSTDv06_frameParams
typedef|;
name|ZSTDLIBv06_API
name|size_t
name|ZSTDv06_getFrameParams
parameter_list|(
name|ZSTDv06_frameParams
modifier|*
name|fparamsPtr
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/**< doesn't consume input */
name|ZSTDLIBv06_API
name|size_t
name|ZSTDv06_decompressBegin_usingDict
parameter_list|(
name|ZSTDv06_DCtx
modifier|*
name|dctx
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
name|void
name|ZSTDv06_copyDCtx
parameter_list|(
name|ZSTDv06_DCtx
modifier|*
name|dctx
parameter_list|,
specifier|const
name|ZSTDv06_DCtx
modifier|*
name|preparedDCtx
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
name|size_t
name|ZSTDv06_nextSrcSizeToDecompress
parameter_list|(
name|ZSTDv06_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
name|size_t
name|ZSTDv06_decompressContinue
parameter_list|(
name|ZSTDv06_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
function_decl|;
comment|/* ************************************* *  ZBUFF API ***************************************/
typedef|typedef
name|struct
name|ZBUFFv06_DCtx_s
name|ZBUFFv06_DCtx
typedef|;
name|ZSTDLIBv06_API
name|ZBUFFv06_DCtx
modifier|*
name|ZBUFFv06_createDCtx
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
name|size_t
name|ZBUFFv06_freeDCtx
parameter_list|(
name|ZBUFFv06_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
name|size_t
name|ZBUFFv06_decompressInit
parameter_list|(
name|ZBUFFv06_DCtx
modifier|*
name|dctx
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
name|size_t
name|ZBUFFv06_decompressInitDictionary
parameter_list|(
name|ZBUFFv06_DCtx
modifier|*
name|dctx
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
name|size_t
name|ZBUFFv06_decompressContinue
parameter_list|(
name|ZBUFFv06_DCtx
modifier|*
name|dctx
parameter_list|,
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
modifier|*
name|dstCapacityPtr
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
modifier|*
name|srcSizePtr
parameter_list|)
function_decl|;
comment|/*-*************************************************************************** *  Streaming decompression howto * *  A ZBUFFv06_DCtx object is required to track streaming operations. *  Use ZBUFFv06_createDCtx() and ZBUFFv06_freeDCtx() to create/release resources. *  Use ZBUFFv06_decompressInit() to start a new decompression operation, *   or ZBUFFv06_decompressInitDictionary() if decompression requires a dictionary. *  Note that ZBUFFv06_DCtx objects can be re-init multiple times. * *  Use ZBUFFv06_decompressContinue() repetitively to consume your input. *  *srcSizePtr and *dstCapacityPtr can be any size. *  The function will report how many bytes were read or written by modifying *srcSizePtr and *dstCapacityPtr. *  Note that it may not consume the entire input, in which case it's up to the caller to present remaining input again. *  The content of `dst` will be overwritten (up to *dstCapacityPtr) at each function call, so save its content if it matters, or change `dst`. *  @return : a hint to preferred nb of bytes to use as input for next function call (it's only a hint, to help latency), *            or 0 when a frame is completely decoded, *            or an error code, which can be tested using ZBUFFv06_isError(). * *  Hint : recommended buffer sizes (not compulsory) : ZBUFFv06_recommendedDInSize() and ZBUFFv06_recommendedDOutSize() *  output : ZBUFFv06_recommendedDOutSize== 128 KB block size is the internal unit, it ensures it's always possible to write a full block when decoded. *  input  : ZBUFFv06_recommendedDInSize == 128KB + 3; *           just follow indications from ZBUFFv06_decompressContinue() to minimize latency. It should always be<= 128 KB + 3 . * *******************************************************************************/
comment|/* ************************************* *  Tool functions ***************************************/
name|ZSTDLIBv06_API
name|unsigned
name|ZBUFFv06_isError
parameter_list|(
name|size_t
name|errorCode
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
specifier|const
name|char
modifier|*
name|ZBUFFv06_getErrorName
parameter_list|(
name|size_t
name|errorCode
parameter_list|)
function_decl|;
comment|/** Functions below provide recommended buffer sizes for Compression or Decompression operations. *   These sizes are just hints, they tend to offer better latency */
name|ZSTDLIBv06_API
name|size_t
name|ZBUFFv06_recommendedDInSize
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|ZSTDLIBv06_API
name|size_t
name|ZBUFFv06_recommendedDOutSize
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*-************************************* *  Constants ***************************************/
define|#
directive|define
name|ZSTDv06_MAGICNUMBER
value|0xFD2FB526
comment|/* v0.6 */
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ZSTDv06_BUFFERED_H */
end_comment

end_unit

