begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2016-present, Yann Collet, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under both the BSD-style license (found in the  * LICENSE file in the root directory of this source tree) and the GPLv2 (found  * in the COPYING file in the root directory of this source tree).  * You may select, at your option, one of the above-listed licenses.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ZSTD_LEGACY_H
end_ifndef

begin_define
define|#
directive|define
name|ZSTD_LEGACY_H
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* ************************************* *  Includes ***************************************/
include|#
directive|include
file|"mem.h"
comment|/* MEM_STATIC */
include|#
directive|include
file|"error_private.h"
comment|/* ERROR */
include|#
directive|include
file|"zstd.h"
comment|/* ZSTD_inBuffer, ZSTD_outBuffer */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ZSTD_LEGACY_SUPPORT
argument_list|)
operator|||
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|==
literal|0
operator|)
undef|#
directive|undef
name|ZSTD_LEGACY_SUPPORT
define|#
directive|define
name|ZSTD_LEGACY_SUPPORT
value|8
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|1
operator|)
include|#
directive|include
file|"zstd_v01.h"
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|2
operator|)
include|#
directive|include
file|"zstd_v02.h"
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|3
operator|)
include|#
directive|include
file|"zstd_v03.h"
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|4
operator|)
include|#
directive|include
file|"zstd_v04.h"
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|5
operator|)
include|#
directive|include
file|"zstd_v05.h"
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|6
operator|)
include|#
directive|include
file|"zstd_v06.h"
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|7
operator|)
include|#
directive|include
file|"zstd_v07.h"
endif|#
directive|endif
comment|/** ZSTD_isLegacy() :     @return :> 0 if supported by legacy decoder. 0 otherwise.               return value is the version. */
name|MEM_STATIC
name|unsigned
name|ZSTD_isLegacy
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
block|{
name|U32
name|magicNumberLE
decl_stmt|;
if|if
condition|(
name|srcSize
operator|<
literal|4
condition|)
return|return
literal|0
return|;
name|magicNumberLE
operator|=
name|MEM_readLE32
argument_list|(
name|src
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|magicNumberLE
condition|)
block|{
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|1
operator|)
case|case
name|ZSTDv01_magicNumberLE
case|:
return|return
literal|1
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|2
operator|)
case|case
name|ZSTDv02_magicNumber
case|:
return|return
literal|2
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|3
operator|)
case|case
name|ZSTDv03_magicNumber
case|:
return|return
literal|3
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|4
operator|)
case|case
name|ZSTDv04_magicNumber
case|:
return|return
literal|4
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|5
operator|)
case|case
name|ZSTDv05_MAGICNUMBER
case|:
return|return
literal|5
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|6
operator|)
case|case
name|ZSTDv06_MAGICNUMBER
case|:
return|return
literal|6
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|7
operator|)
case|case
name|ZSTDv07_MAGICNUMBER
case|:
return|return
literal|7
return|;
endif|#
directive|endif
default|default :
return|return
literal|0
return|;
block|}
block|}
name|MEM_STATIC
name|unsigned
name|long
name|long
name|ZSTD_getDecompressedSize_legacy
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|srcSize
parameter_list|)
block|{
name|U32
specifier|const
name|version
init|=
name|ZSTD_isLegacy
argument_list|(
name|src
argument_list|,
name|srcSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|<
literal|5
condition|)
return|return
literal|0
return|;
comment|/* no decompressed size in frame header, or not a legacy format */
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|5
operator|)
if|if
condition|(
name|version
operator|==
literal|5
condition|)
block|{
name|ZSTDv05_parameters
name|fParams
decl_stmt|;
name|size_t
specifier|const
name|frResult
init|=
name|ZSTDv05_getFrameParams
argument_list|(
operator|&
name|fParams
argument_list|,
name|src
argument_list|,
name|srcSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|frResult
operator|!=
literal|0
condition|)
return|return
literal|0
return|;
return|return
name|fParams
operator|.
name|srcSize
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|6
operator|)
if|if
condition|(
name|version
operator|==
literal|6
condition|)
block|{
name|ZSTDv06_frameParams
name|fParams
decl_stmt|;
name|size_t
specifier|const
name|frResult
init|=
name|ZSTDv06_getFrameParams
argument_list|(
operator|&
name|fParams
argument_list|,
name|src
argument_list|,
name|srcSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|frResult
operator|!=
literal|0
condition|)
return|return
literal|0
return|;
return|return
name|fParams
operator|.
name|frameContentSize
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|7
operator|)
if|if
condition|(
name|version
operator|==
literal|7
condition|)
block|{
name|ZSTDv07_frameParams
name|fParams
decl_stmt|;
name|size_t
specifier|const
name|frResult
init|=
name|ZSTDv07_getFrameParams
argument_list|(
operator|&
name|fParams
argument_list|,
name|src
argument_list|,
name|srcSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|frResult
operator|!=
literal|0
condition|)
return|return
literal|0
return|;
return|return
name|fParams
operator|.
name|frameContentSize
return|;
block|}
endif|#
directive|endif
return|return
literal|0
return|;
comment|/* should not be possible */
block|}
name|MEM_STATIC
name|size_t
name|ZSTD_decompressLegacy
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|size_t
name|dstCapacity
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
block|{
name|U32
specifier|const
name|version
init|=
name|ZSTD_isLegacy
argument_list|(
name|src
argument_list|,
name|compressedSize
argument_list|)
decl_stmt|;
operator|(
name|void
operator|)
name|dst
expr_stmt|;
operator|(
name|void
operator|)
name|dstCapacity
expr_stmt|;
operator|(
name|void
operator|)
name|dict
expr_stmt|;
operator|(
name|void
operator|)
name|dictSize
expr_stmt|;
comment|/* unused when ZSTD_LEGACY_SUPPORT>= 8 */
switch|switch
condition|(
name|version
condition|)
block|{
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|1
operator|)
case|case
literal|1
case|:
return|return
name|ZSTDv01_decompress
argument_list|(
name|dst
argument_list|,
name|dstCapacity
argument_list|,
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|2
operator|)
case|case
literal|2
case|:
return|return
name|ZSTDv02_decompress
argument_list|(
name|dst
argument_list|,
name|dstCapacity
argument_list|,
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|3
operator|)
case|case
literal|3
case|:
return|return
name|ZSTDv03_decompress
argument_list|(
name|dst
argument_list|,
name|dstCapacity
argument_list|,
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|4
operator|)
case|case
literal|4
case|:
return|return
name|ZSTDv04_decompress
argument_list|(
name|dst
argument_list|,
name|dstCapacity
argument_list|,
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|5
operator|)
case|case
literal|5
case|:
block|{
name|size_t
name|result
decl_stmt|;
name|ZSTDv05_DCtx
modifier|*
specifier|const
name|zd
init|=
name|ZSTDv05_createDCtx
argument_list|()
decl_stmt|;
if|if
condition|(
name|zd
operator|==
name|NULL
condition|)
return|return
name|ERROR
argument_list|(
name|memory_allocation
argument_list|)
return|;
name|result
operator|=
name|ZSTDv05_decompress_usingDict
argument_list|(
name|zd
argument_list|,
name|dst
argument_list|,
name|dstCapacity
argument_list|,
name|src
argument_list|,
name|compressedSize
argument_list|,
name|dict
argument_list|,
name|dictSize
argument_list|)
expr_stmt|;
name|ZSTDv05_freeDCtx
argument_list|(
name|zd
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|6
operator|)
case|case
literal|6
case|:
block|{
name|size_t
name|result
decl_stmt|;
name|ZSTDv06_DCtx
modifier|*
specifier|const
name|zd
init|=
name|ZSTDv06_createDCtx
argument_list|()
decl_stmt|;
if|if
condition|(
name|zd
operator|==
name|NULL
condition|)
return|return
name|ERROR
argument_list|(
name|memory_allocation
argument_list|)
return|;
name|result
operator|=
name|ZSTDv06_decompress_usingDict
argument_list|(
name|zd
argument_list|,
name|dst
argument_list|,
name|dstCapacity
argument_list|,
name|src
argument_list|,
name|compressedSize
argument_list|,
name|dict
argument_list|,
name|dictSize
argument_list|)
expr_stmt|;
name|ZSTDv06_freeDCtx
argument_list|(
name|zd
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|7
operator|)
case|case
literal|7
case|:
block|{
name|size_t
name|result
decl_stmt|;
name|ZSTDv07_DCtx
modifier|*
specifier|const
name|zd
init|=
name|ZSTDv07_createDCtx
argument_list|()
decl_stmt|;
if|if
condition|(
name|zd
operator|==
name|NULL
condition|)
return|return
name|ERROR
argument_list|(
name|memory_allocation
argument_list|)
return|;
name|result
operator|=
name|ZSTDv07_decompress_usingDict
argument_list|(
name|zd
argument_list|,
name|dst
argument_list|,
name|dstCapacity
argument_list|,
name|src
argument_list|,
name|compressedSize
argument_list|,
name|dict
argument_list|,
name|dictSize
argument_list|)
expr_stmt|;
name|ZSTDv07_freeDCtx
argument_list|(
name|zd
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
endif|#
directive|endif
default|default :
return|return
name|ERROR
argument_list|(
name|prefix_unknown
argument_list|)
return|;
block|}
block|}
name|MEM_STATIC
name|size_t
name|ZSTD_findFrameCompressedSizeLegacy
parameter_list|(
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|compressedSize
parameter_list|)
block|{
name|U32
specifier|const
name|version
init|=
name|ZSTD_isLegacy
argument_list|(
name|src
argument_list|,
name|compressedSize
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|version
condition|)
block|{
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|1
operator|)
case|case
literal|1
case|:
return|return
name|ZSTDv01_findFrameCompressedSize
argument_list|(
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|2
operator|)
case|case
literal|2
case|:
return|return
name|ZSTDv02_findFrameCompressedSize
argument_list|(
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|3
operator|)
case|case
literal|3
case|:
return|return
name|ZSTDv03_findFrameCompressedSize
argument_list|(
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|4
operator|)
case|case
literal|4
case|:
return|return
name|ZSTDv04_findFrameCompressedSize
argument_list|(
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|5
operator|)
case|case
literal|5
case|:
return|return
name|ZSTDv05_findFrameCompressedSize
argument_list|(
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|6
operator|)
case|case
literal|6
case|:
return|return
name|ZSTDv06_findFrameCompressedSize
argument_list|(
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|7
operator|)
case|case
literal|7
case|:
return|return
name|ZSTDv07_findFrameCompressedSize
argument_list|(
name|src
argument_list|,
name|compressedSize
argument_list|)
return|;
endif|#
directive|endif
default|default :
return|return
name|ERROR
argument_list|(
name|prefix_unknown
argument_list|)
return|;
block|}
block|}
name|MEM_STATIC
name|size_t
name|ZSTD_freeLegacyStreamContext
parameter_list|(
name|void
modifier|*
name|legacyContext
parameter_list|,
name|U32
name|version
parameter_list|)
block|{
switch|switch
condition|(
name|version
condition|)
block|{
default|default :
case|case
literal|1
case|:
case|case
literal|2
case|:
case|case
literal|3
case|:
operator|(
name|void
operator|)
name|legacyContext
expr_stmt|;
return|return
name|ERROR
argument_list|(
name|version_unsupported
argument_list|)
return|;
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|4
operator|)
case|case
literal|4
case|:
return|return
name|ZBUFFv04_freeDCtx
argument_list|(
operator|(
name|ZBUFFv04_DCtx
operator|*
operator|)
name|legacyContext
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|5
operator|)
case|case
literal|5
case|:
return|return
name|ZBUFFv05_freeDCtx
argument_list|(
operator|(
name|ZBUFFv05_DCtx
operator|*
operator|)
name|legacyContext
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|6
operator|)
case|case
literal|6
case|:
return|return
name|ZBUFFv06_freeDCtx
argument_list|(
operator|(
name|ZBUFFv06_DCtx
operator|*
operator|)
name|legacyContext
argument_list|)
return|;
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|7
operator|)
case|case
literal|7
case|:
return|return
name|ZBUFFv07_freeDCtx
argument_list|(
operator|(
name|ZBUFFv07_DCtx
operator|*
operator|)
name|legacyContext
argument_list|)
return|;
endif|#
directive|endif
block|}
block|}
name|MEM_STATIC
name|size_t
name|ZSTD_initLegacyStream
parameter_list|(
name|void
modifier|*
modifier|*
name|legacyContext
parameter_list|,
name|U32
name|prevVersion
parameter_list|,
name|U32
name|newVersion
parameter_list|,
specifier|const
name|void
modifier|*
name|dict
parameter_list|,
name|size_t
name|dictSize
parameter_list|)
block|{
if|if
condition|(
name|prevVersion
operator|!=
name|newVersion
condition|)
name|ZSTD_freeLegacyStreamContext
argument_list|(
operator|*
name|legacyContext
argument_list|,
name|prevVersion
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|newVersion
condition|)
block|{
default|default :
case|case
literal|1
case|:
case|case
literal|2
case|:
case|case
literal|3
case|:
operator|(
name|void
operator|)
name|dict
expr_stmt|;
operator|(
name|void
operator|)
name|dictSize
expr_stmt|;
return|return
literal|0
return|;
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|4
operator|)
case|case
literal|4
case|:
block|{
name|ZBUFFv04_DCtx
modifier|*
name|dctx
init|=
operator|(
name|prevVersion
operator|!=
name|newVersion
operator|)
condition|?
name|ZBUFFv04_createDCtx
argument_list|()
else|:
operator|(
name|ZBUFFv04_DCtx
operator|*
operator|)
operator|*
name|legacyContext
decl_stmt|;
if|if
condition|(
name|dctx
operator|==
name|NULL
condition|)
return|return
name|ERROR
argument_list|(
name|memory_allocation
argument_list|)
return|;
name|ZBUFFv04_decompressInit
argument_list|(
name|dctx
argument_list|)
expr_stmt|;
name|ZBUFFv04_decompressWithDictionary
argument_list|(
name|dctx
argument_list|,
name|dict
argument_list|,
name|dictSize
argument_list|)
expr_stmt|;
operator|*
name|legacyContext
operator|=
name|dctx
expr_stmt|;
return|return
literal|0
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|5
operator|)
case|case
literal|5
case|:
block|{
name|ZBUFFv05_DCtx
modifier|*
name|dctx
init|=
operator|(
name|prevVersion
operator|!=
name|newVersion
operator|)
condition|?
name|ZBUFFv05_createDCtx
argument_list|()
else|:
operator|(
name|ZBUFFv05_DCtx
operator|*
operator|)
operator|*
name|legacyContext
decl_stmt|;
if|if
condition|(
name|dctx
operator|==
name|NULL
condition|)
return|return
name|ERROR
argument_list|(
name|memory_allocation
argument_list|)
return|;
name|ZBUFFv05_decompressInitDictionary
argument_list|(
name|dctx
argument_list|,
name|dict
argument_list|,
name|dictSize
argument_list|)
expr_stmt|;
operator|*
name|legacyContext
operator|=
name|dctx
expr_stmt|;
return|return
literal|0
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|6
operator|)
case|case
literal|6
case|:
block|{
name|ZBUFFv06_DCtx
modifier|*
name|dctx
init|=
operator|(
name|prevVersion
operator|!=
name|newVersion
operator|)
condition|?
name|ZBUFFv06_createDCtx
argument_list|()
else|:
operator|(
name|ZBUFFv06_DCtx
operator|*
operator|)
operator|*
name|legacyContext
decl_stmt|;
if|if
condition|(
name|dctx
operator|==
name|NULL
condition|)
return|return
name|ERROR
argument_list|(
name|memory_allocation
argument_list|)
return|;
name|ZBUFFv06_decompressInitDictionary
argument_list|(
name|dctx
argument_list|,
name|dict
argument_list|,
name|dictSize
argument_list|)
expr_stmt|;
operator|*
name|legacyContext
operator|=
name|dctx
expr_stmt|;
return|return
literal|0
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|7
operator|)
case|case
literal|7
case|:
block|{
name|ZBUFFv07_DCtx
modifier|*
name|dctx
init|=
operator|(
name|prevVersion
operator|!=
name|newVersion
operator|)
condition|?
name|ZBUFFv07_createDCtx
argument_list|()
else|:
operator|(
name|ZBUFFv07_DCtx
operator|*
operator|)
operator|*
name|legacyContext
decl_stmt|;
if|if
condition|(
name|dctx
operator|==
name|NULL
condition|)
return|return
name|ERROR
argument_list|(
name|memory_allocation
argument_list|)
return|;
name|ZBUFFv07_decompressInitDictionary
argument_list|(
name|dctx
argument_list|,
name|dict
argument_list|,
name|dictSize
argument_list|)
expr_stmt|;
operator|*
name|legacyContext
operator|=
name|dctx
expr_stmt|;
return|return
literal|0
return|;
block|}
endif|#
directive|endif
block|}
block|}
name|MEM_STATIC
name|size_t
name|ZSTD_decompressLegacyStream
parameter_list|(
name|void
modifier|*
name|legacyContext
parameter_list|,
name|U32
name|version
parameter_list|,
name|ZSTD_outBuffer
modifier|*
name|output
parameter_list|,
name|ZSTD_inBuffer
modifier|*
name|input
parameter_list|)
block|{
switch|switch
condition|(
name|version
condition|)
block|{
default|default :
case|case
literal|1
case|:
case|case
literal|2
case|:
case|case
literal|3
case|:
operator|(
name|void
operator|)
name|legacyContext
expr_stmt|;
operator|(
name|void
operator|)
name|output
expr_stmt|;
operator|(
name|void
operator|)
name|input
expr_stmt|;
return|return
name|ERROR
argument_list|(
name|version_unsupported
argument_list|)
return|;
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|4
operator|)
case|case
literal|4
case|:
block|{
name|ZBUFFv04_DCtx
modifier|*
name|dctx
init|=
operator|(
name|ZBUFFv04_DCtx
operator|*
operator|)
name|legacyContext
decl_stmt|;
specifier|const
name|void
modifier|*
name|src
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|->
name|src
operator|+
name|input
operator|->
name|pos
decl_stmt|;
name|size_t
name|readSize
init|=
name|input
operator|->
name|size
operator|-
name|input
operator|->
name|pos
decl_stmt|;
name|void
modifier|*
name|dst
init|=
operator|(
name|char
operator|*
operator|)
name|output
operator|->
name|dst
operator|+
name|output
operator|->
name|pos
decl_stmt|;
name|size_t
name|decodedSize
init|=
name|output
operator|->
name|size
operator|-
name|output
operator|->
name|pos
decl_stmt|;
name|size_t
specifier|const
name|hintSize
init|=
name|ZBUFFv04_decompressContinue
argument_list|(
name|dctx
argument_list|,
name|dst
argument_list|,
operator|&
name|decodedSize
argument_list|,
name|src
argument_list|,
operator|&
name|readSize
argument_list|)
decl_stmt|;
name|output
operator|->
name|pos
operator|+=
name|decodedSize
expr_stmt|;
name|input
operator|->
name|pos
operator|+=
name|readSize
expr_stmt|;
return|return
name|hintSize
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|5
operator|)
case|case
literal|5
case|:
block|{
name|ZBUFFv05_DCtx
modifier|*
name|dctx
init|=
operator|(
name|ZBUFFv05_DCtx
operator|*
operator|)
name|legacyContext
decl_stmt|;
specifier|const
name|void
modifier|*
name|src
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|->
name|src
operator|+
name|input
operator|->
name|pos
decl_stmt|;
name|size_t
name|readSize
init|=
name|input
operator|->
name|size
operator|-
name|input
operator|->
name|pos
decl_stmt|;
name|void
modifier|*
name|dst
init|=
operator|(
name|char
operator|*
operator|)
name|output
operator|->
name|dst
operator|+
name|output
operator|->
name|pos
decl_stmt|;
name|size_t
name|decodedSize
init|=
name|output
operator|->
name|size
operator|-
name|output
operator|->
name|pos
decl_stmt|;
name|size_t
specifier|const
name|hintSize
init|=
name|ZBUFFv05_decompressContinue
argument_list|(
name|dctx
argument_list|,
name|dst
argument_list|,
operator|&
name|decodedSize
argument_list|,
name|src
argument_list|,
operator|&
name|readSize
argument_list|)
decl_stmt|;
name|output
operator|->
name|pos
operator|+=
name|decodedSize
expr_stmt|;
name|input
operator|->
name|pos
operator|+=
name|readSize
expr_stmt|;
return|return
name|hintSize
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|6
operator|)
case|case
literal|6
case|:
block|{
name|ZBUFFv06_DCtx
modifier|*
name|dctx
init|=
operator|(
name|ZBUFFv06_DCtx
operator|*
operator|)
name|legacyContext
decl_stmt|;
specifier|const
name|void
modifier|*
name|src
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|->
name|src
operator|+
name|input
operator|->
name|pos
decl_stmt|;
name|size_t
name|readSize
init|=
name|input
operator|->
name|size
operator|-
name|input
operator|->
name|pos
decl_stmt|;
name|void
modifier|*
name|dst
init|=
operator|(
name|char
operator|*
operator|)
name|output
operator|->
name|dst
operator|+
name|output
operator|->
name|pos
decl_stmt|;
name|size_t
name|decodedSize
init|=
name|output
operator|->
name|size
operator|-
name|output
operator|->
name|pos
decl_stmt|;
name|size_t
specifier|const
name|hintSize
init|=
name|ZBUFFv06_decompressContinue
argument_list|(
name|dctx
argument_list|,
name|dst
argument_list|,
operator|&
name|decodedSize
argument_list|,
name|src
argument_list|,
operator|&
name|readSize
argument_list|)
decl_stmt|;
name|output
operator|->
name|pos
operator|+=
name|decodedSize
expr_stmt|;
name|input
operator|->
name|pos
operator|+=
name|readSize
expr_stmt|;
return|return
name|hintSize
return|;
block|}
endif|#
directive|endif
if|#
directive|if
operator|(
name|ZSTD_LEGACY_SUPPORT
operator|<=
literal|7
operator|)
case|case
literal|7
case|:
block|{
name|ZBUFFv07_DCtx
modifier|*
name|dctx
init|=
operator|(
name|ZBUFFv07_DCtx
operator|*
operator|)
name|legacyContext
decl_stmt|;
specifier|const
name|void
modifier|*
name|src
init|=
operator|(
specifier|const
name|char
operator|*
operator|)
name|input
operator|->
name|src
operator|+
name|input
operator|->
name|pos
decl_stmt|;
name|size_t
name|readSize
init|=
name|input
operator|->
name|size
operator|-
name|input
operator|->
name|pos
decl_stmt|;
name|void
modifier|*
name|dst
init|=
operator|(
name|char
operator|*
operator|)
name|output
operator|->
name|dst
operator|+
name|output
operator|->
name|pos
decl_stmt|;
name|size_t
name|decodedSize
init|=
name|output
operator|->
name|size
operator|-
name|output
operator|->
name|pos
decl_stmt|;
name|size_t
specifier|const
name|hintSize
init|=
name|ZBUFFv07_decompressContinue
argument_list|(
name|dctx
argument_list|,
name|dst
argument_list|,
operator|&
name|decodedSize
argument_list|,
name|src
argument_list|,
operator|&
name|readSize
argument_list|)
decl_stmt|;
name|output
operator|->
name|pos
operator|+=
name|decodedSize
expr_stmt|;
name|input
operator|->
name|pos
operator|+=
name|readSize
expr_stmt|;
return|return
name|hintSize
return|;
block|}
endif|#
directive|endif
block|}
block|}
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ZSTD_LEGACY_H */
end_comment

end_unit

