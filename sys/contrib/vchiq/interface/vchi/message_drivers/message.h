begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2010-2012 Broadcom. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The names of the above-listed copyright holders may not be used  *    to endorse or promote products derived from this software without  *    specific prior written permission.  *  * ALTERNATIVELY, this software may be distributed under the terms of the  * GNU General Public License ("GPL") version 2, as published by the Free  * Software Foundation.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_VCHI_MESSAGE_H_
end_ifndef

begin_define
define|#
directive|define
name|_VCHI_MESSAGE_H_
end_define

begin_include
include|#
directive|include
file|"interface/vchi/vchi_cfg_internal.h"
end_include

begin_include
include|#
directive|include
file|"interface/vchi/vchi_common.h"
end_include

begin_typedef
typedef|typedef
enum|enum
name|message_event_type
block|{
name|MESSAGE_EVENT_NONE
block|,
name|MESSAGE_EVENT_NOP
block|,
name|MESSAGE_EVENT_MESSAGE
block|,
name|MESSAGE_EVENT_SLOT_COMPLETE
block|,
name|MESSAGE_EVENT_RX_BULK_PAUSED
block|,
name|MESSAGE_EVENT_RX_BULK_COMPLETE
block|,
name|MESSAGE_EVENT_TX_COMPLETE
block|,
name|MESSAGE_EVENT_MSG_DISCARDED
block|}
name|MESSAGE_EVENT_TYPE_T
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|vchi_msg_flags
block|{
name|VCHI_MSG_FLAGS_NONE
init|=
literal|0x0
block|,
name|VCHI_MSG_FLAGS_TERMINATE_DMA
init|=
literal|0x1
block|}
name|VCHI_MSG_FLAGS_T
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|message_tx_channel
block|{
name|MESSAGE_TX_CHANNEL_MESSAGE
init|=
literal|0
block|,
name|MESSAGE_TX_CHANNEL_BULK
init|=
literal|1
comment|// drivers may provide multiple bulk channels, from 1 upwards
block|}
name|MESSAGE_TX_CHANNEL_T
typedef|;
end_typedef

begin_comment
comment|// Macros used for cycling through bulk channels
end_comment

begin_define
define|#
directive|define
name|MESSAGE_TX_CHANNEL_BULK_PREV
parameter_list|(
name|c
parameter_list|)
value|(MESSAGE_TX_CHANNEL_BULK+((c)-MESSAGE_TX_CHANNEL_BULK+VCHI_MAX_BULK_TX_CHANNELS_PER_CONNECTION-1)%VCHI_MAX_BULK_TX_CHANNELS_PER_CONNECTION)
end_define

begin_define
define|#
directive|define
name|MESSAGE_TX_CHANNEL_BULK_NEXT
parameter_list|(
name|c
parameter_list|)
value|(MESSAGE_TX_CHANNEL_BULK+((c)-MESSAGE_TX_CHANNEL_BULK+1)%VCHI_MAX_BULK_TX_CHANNELS_PER_CONNECTION)
end_define

begin_typedef
typedef|typedef
enum|enum
name|message_rx_channel
block|{
name|MESSAGE_RX_CHANNEL_MESSAGE
init|=
literal|0
block|,
name|MESSAGE_RX_CHANNEL_BULK
init|=
literal|1
comment|// drivers may provide multiple bulk channels, from 1 upwards
block|}
name|MESSAGE_RX_CHANNEL_T
typedef|;
end_typedef

begin_comment
comment|// Message receive slot information
end_comment

begin_typedef
typedef|typedef
struct|struct
name|rx_msg_slot_info
block|{
name|struct
name|rx_msg_slot_info
modifier|*
name|next
decl_stmt|;
comment|//struct slot_info *prev;
if|#
directive|if
operator|!
name|defined
name|VCHI_COARSE_LOCKING
name|struct
name|semaphore
name|sem
decl_stmt|;
endif|#
directive|endif
name|uint8_t
modifier|*
name|addr
decl_stmt|;
comment|// base address of slot
name|uint32_t
name|len
decl_stmt|;
comment|// length of slot in bytes
name|uint32_t
name|write_ptr
decl_stmt|;
comment|// hardware causes this to advance
name|uint32_t
name|read_ptr
decl_stmt|;
comment|// this module does the reading
name|int
name|active
decl_stmt|;
comment|// is this slot in the hardware dma fifo?
name|uint32_t
name|msgs_parsed
decl_stmt|;
comment|// count how many messages are in this slot
name|uint32_t
name|msgs_released
decl_stmt|;
comment|// how many messages have been released
name|void
modifier|*
name|state
decl_stmt|;
comment|// connection state information
name|uint8_t
name|ref_count
index|[
name|VCHI_MAX_SERVICES_PER_CONNECTION
index|]
decl_stmt|;
comment|// reference count for slots held by services
block|}
name|RX_MSG_SLOTINFO_T
typedef|;
end_typedef

begin_comment
comment|// The message driver no longer needs to know about the fields of RX_BULK_SLOTINFO_T - sort this out.
end_comment

begin_comment
comment|// In particular, it mustn't use addr and len - they're the client buffer, but the message
end_comment

begin_comment
comment|// driver will be tasked with sending the aligned core section.
end_comment

begin_typedef
typedef|typedef
struct|struct
name|rx_bulk_slotinfo_t
block|{
name|struct
name|rx_bulk_slotinfo_t
modifier|*
name|next
decl_stmt|;
name|struct
name|semaphore
modifier|*
name|blocking
decl_stmt|;
comment|// needed by DMA
name|void
modifier|*
name|addr
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
comment|// needed for the callback
name|void
modifier|*
name|service
decl_stmt|;
name|void
modifier|*
name|handle
decl_stmt|;
name|VCHI_FLAGS_T
name|flags
decl_stmt|;
block|}
name|RX_BULK_SLOTINFO_T
typedef|;
end_typedef

begin_comment
comment|/* ----------------------------------------------------------------------  * each connection driver will have a pool of the following struct.  *  * the pool will be managed by vchi_qman_*  * this means there will be multiple queues (single linked lists)  * a given struct message_info will be on exactly one of these queues  * at any one time  * -------------------------------------------------------------------- */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|rx_message_info
block|{
name|struct
name|message_info
modifier|*
name|next
decl_stmt|;
comment|//struct message_info *prev;
name|uint8_t
modifier|*
name|addr
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
name|RX_MSG_SLOTINFO_T
modifier|*
name|slot
decl_stmt|;
comment|// points to whichever slot contains this message
name|uint32_t
name|tx_timestamp
decl_stmt|;
name|uint32_t
name|rx_timestamp
decl_stmt|;
block|}
name|RX_MESSAGE_INFO_T
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|MESSAGE_EVENT_TYPE_T
name|type
decl_stmt|;
struct|struct
block|{
comment|// for messages
name|void
modifier|*
name|addr
decl_stmt|;
comment|// address of message
name|uint16_t
name|slot_delta
decl_stmt|;
comment|// whether this message indicated slot delta
name|uint32_t
name|len
decl_stmt|;
comment|// length of message
name|RX_MSG_SLOTINFO_T
modifier|*
name|slot
decl_stmt|;
comment|// slot this message is in
name|int32_t
name|service
decl_stmt|;
comment|// service id this message is destined for
name|uint32_t
name|tx_timestamp
decl_stmt|;
comment|// timestamp from the header
name|uint32_t
name|rx_timestamp
decl_stmt|;
comment|// timestamp when we parsed it
block|}
name|message
struct|;
comment|// FIXME: cleanup slot reporting...
name|RX_MSG_SLOTINFO_T
modifier|*
name|rx_msg
decl_stmt|;
name|RX_BULK_SLOTINFO_T
modifier|*
name|rx_bulk
decl_stmt|;
name|void
modifier|*
name|tx_handle
decl_stmt|;
name|MESSAGE_TX_CHANNEL_T
name|tx_channel
decl_stmt|;
block|}
name|MESSAGE_EVENT_T
typedef|;
end_typedef

begin_comment
comment|// callbacks
end_comment

begin_typedef
typedef|typedef
name|void
name|VCHI_MESSAGE_DRIVER_EVENT_CALLBACK_T
parameter_list|(
name|void
modifier|*
name|state
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|VCHI_MESSAGE_DRIVER_EVENT_CALLBACK_T
modifier|*
name|event_callback
decl_stmt|;
block|}
name|VCHI_MESSAGE_DRIVER_OPEN_T
typedef|;
end_typedef

begin_comment
comment|// handle to this instance of message driver (as returned by ->open)
end_comment

begin_typedef
typedef|typedef
name|struct
name|opaque_mhandle_t
modifier|*
name|VCHI_MDRIVER_HANDLE_T
typedef|;
end_typedef

begin_struct
struct|struct
name|opaque_vchi_message_driver_t
block|{
name|VCHI_MDRIVER_HANDLE_T
modifier|*
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|VCHI_MESSAGE_DRIVER_OPEN_T
modifier|*
name|params
parameter_list|,
name|void
modifier|*
name|state
parameter_list|)
function_decl|;
name|int32_t
function_decl|(
modifier|*
name|suspending
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int32_t
function_decl|(
modifier|*
name|resumed
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int32_t
function_decl|(
modifier|*
name|power_control
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|MESSAGE_TX_CHANNEL_T
parameter_list|,
name|int32_t
name|enable
parameter_list|)
function_decl|;
name|int32_t
function_decl|(
modifier|*
name|add_msg_rx_slot
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|RX_MSG_SLOTINFO_T
modifier|*
name|slot
parameter_list|)
function_decl|;
comment|// rx message
name|int32_t
function_decl|(
modifier|*
name|add_bulk_rx
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|uint32_t
name|len
parameter_list|,
name|RX_BULK_SLOTINFO_T
modifier|*
name|slot
parameter_list|)
function_decl|;
comment|// rx data (bulk)
name|int32_t
function_decl|(
modifier|*
name|send
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|MESSAGE_TX_CHANNEL_T
name|channel
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|uint32_t
name|len
parameter_list|,
name|VCHI_MSG_FLAGS_T
name|flags
parameter_list|,
name|void
modifier|*
name|send_handle
parameter_list|)
function_decl|;
comment|// tx (message& bulk)
name|void
function_decl|(
modifier|*
name|next_event
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|MESSAGE_EVENT_T
modifier|*
name|event
parameter_list|)
function_decl|;
comment|// get the next event from message_driver
name|int32_t
function_decl|(
modifier|*
name|enable
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|)
function_decl|;
name|int32_t
function_decl|(
modifier|*
name|form_message
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|int32_t
name|service_id
parameter_list|,
name|VCHI_MSG_VECTOR_T
modifier|*
name|vector
parameter_list|,
name|uint32_t
name|count
parameter_list|,
name|void
modifier|*
name|address
parameter_list|,
name|uint32_t
name|length_avail
parameter_list|,
name|uint32_t
name|max_total_length
parameter_list|,
name|int32_t
name|pad_to_fill
parameter_list|,
name|int32_t
name|allow_partial
parameter_list|)
function_decl|;
name|int32_t
function_decl|(
modifier|*
name|update_message
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|void
modifier|*
name|dest
parameter_list|,
name|int16_t
modifier|*
name|slot_count
parameter_list|)
function_decl|;
name|int32_t
function_decl|(
modifier|*
name|buffer_aligned
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|int
name|tx
parameter_list|,
name|int
name|uncached
parameter_list|,
specifier|const
name|void
modifier|*
name|address
parameter_list|,
specifier|const
name|uint32_t
name|length
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|allocate_buffer
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|uint32_t
modifier|*
name|length
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|free_buffer
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|void
modifier|*
name|address
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|rx_slot_size
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|int
name|msg_size
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|tx_slot_size
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|int
name|msg_size
parameter_list|)
function_decl|;
name|int32_t
function_decl|(
modifier|*
name|tx_supports_terminate
function_decl|)
parameter_list|(
specifier|const
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|MESSAGE_TX_CHANNEL_T
name|channel
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|tx_bulk_chunk_size
function_decl|)
parameter_list|(
specifier|const
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|MESSAGE_TX_CHANNEL_T
name|channel
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|tx_alignment
function_decl|)
parameter_list|(
specifier|const
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|MESSAGE_TX_CHANNEL_T
name|channel
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|rx_alignment
function_decl|)
parameter_list|(
specifier|const
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|MESSAGE_RX_CHANNEL_T
name|channel
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|form_bulk_aux
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|,
name|MESSAGE_TX_CHANNEL_T
name|channel
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|uint32_t
name|len
parameter_list|,
name|uint32_t
name|chunk_size
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
name|aux_data
parameter_list|,
name|int32_t
modifier|*
name|aux_len
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|debug
function_decl|)
parameter_list|(
name|VCHI_MDRIVER_HANDLE_T
modifier|*
name|handle
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _VCHI_MESSAGE_H_
end_comment

begin_comment
comment|/****************************** End of file ***********************************/
end_comment

end_unit

