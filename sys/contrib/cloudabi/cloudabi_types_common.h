begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Copyright (c) 2016 Nuxi (https://nuxi.nl/) and contributors.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions
end_comment

begin_comment
comment|// are met:
end_comment

begin_comment
comment|// 1. Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|//    notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|// 2. Redistributions in binary form must reproduce the above copyright
end_comment

begin_comment
comment|//    notice, this list of conditions and the following disclaimer in the
end_comment

begin_comment
comment|//    documentation and/or other materials provided with the distribution.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
end_comment

begin_comment
comment|// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
end_comment

begin_comment
comment|// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
end_comment

begin_comment
comment|// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
end_comment

begin_comment
comment|// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
end_comment

begin_comment
comment|// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
end_comment

begin_comment
comment|// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
end_comment

begin_comment
comment|// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
end_comment

begin_comment
comment|// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
end_comment

begin_comment
comment|// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
end_comment

begin_comment
comment|// SUCH DAMAGE.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is automatically generated. Do not edit.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Source: https://github.com/NuxiNL/cloudabi
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLOUDABI_TYPES_COMMON_H
end_ifndef

begin_define
define|#
directive|define
name|CLOUDABI_TYPES_COMMON_H
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
operator|&&
name|defined
argument_list|(
name|_KERNEL
argument_list|)
end_if

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__linux__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__KERNEL__
argument_list|)
end_elif

begin_include
include|#
directive|include
file|<linux/types.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_advice_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_ADVICE_DONTNEED
value|1
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ADVICE_NOREUSE
value|2
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ADVICE_NORMAL
value|3
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ADVICE_RANDOM
value|4
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ADVICE_SEQUENTIAL
value|5
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ADVICE_WILLNEED
value|6
end_define

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_auxtype_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_AT_ARGDATA
value|256
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_ARGDATALEN
value|257
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_BASE
value|7
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_CANARY
value|258
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_CANARYLEN
value|259
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_NCPUS
value|260
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_NULL
value|0
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_PAGESZ
value|6
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_PHDR
value|3
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_PHNUM
value|4
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_PID
value|263
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_SYSINFO_EHDR
value|262
end_define

begin_define
define|#
directive|define
name|CLOUDABI_AT_TID
value|261
end_define

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_clockid_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_CLOCK_MONOTONIC
value|1
end_define

begin_define
define|#
directive|define
name|CLOUDABI_CLOCK_PROCESS_CPUTIME_ID
value|2
end_define

begin_define
define|#
directive|define
name|CLOUDABI_CLOCK_REALTIME
value|3
end_define

begin_define
define|#
directive|define
name|CLOUDABI_CLOCK_THREAD_CPUTIME_ID
value|4
end_define

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_condvar_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_CONDVAR_HAS_NO_WAITERS
value|0
end_define

begin_typedef
typedef|typedef
name|uint64_t
name|cloudabi_device_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|cloudabi_dircookie_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_DIRCOOKIE_START
value|0
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_errno_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_E2BIG
value|1
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EACCES
value|2
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EADDRINUSE
value|3
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EADDRNOTAVAIL
value|4
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EAFNOSUPPORT
value|5
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EAGAIN
value|6
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EALREADY
value|7
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EBADF
value|8
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EBADMSG
value|9
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EBUSY
value|10
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ECANCELED
value|11
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ECHILD
value|12
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ECONNABORTED
value|13
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ECONNREFUSED
value|14
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ECONNRESET
value|15
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EDEADLK
value|16
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EDESTADDRREQ
value|17
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EDOM
value|18
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EDQUOT
value|19
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EEXIST
value|20
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EFAULT
value|21
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EFBIG
value|22
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EHOSTUNREACH
value|23
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EIDRM
value|24
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EILSEQ
value|25
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EINPROGRESS
value|26
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EINTR
value|27
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EINVAL
value|28
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EIO
value|29
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EISCONN
value|30
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EISDIR
value|31
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ELOOP
value|32
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EMFILE
value|33
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EMLINK
value|34
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EMSGSIZE
value|35
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EMULTIHOP
value|36
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENAMETOOLONG
value|37
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENETDOWN
value|38
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENETRESET
value|39
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENETUNREACH
value|40
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENFILE
value|41
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOBUFS
value|42
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENODEV
value|43
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOENT
value|44
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOEXEC
value|45
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOLCK
value|46
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOLINK
value|47
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOMEM
value|48
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOMSG
value|49
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOPROTOOPT
value|50
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOSPC
value|51
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOSYS
value|52
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOTCONN
value|53
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOTDIR
value|54
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOTEMPTY
value|55
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOTRECOVERABLE
value|56
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOTSOCK
value|57
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOTSUP
value|58
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOTTY
value|59
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENXIO
value|60
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EOVERFLOW
value|61
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EOWNERDEAD
value|62
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EPERM
value|63
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EPIPE
value|64
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EPROTO
value|65
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EPROTONOSUPPORT
value|66
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EPROTOTYPE
value|67
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ERANGE
value|68
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EROFS
value|69
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ESPIPE
value|70
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ESRCH
value|71
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ESTALE
value|72
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ETIMEDOUT
value|73
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ETXTBSY
value|74
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EXDEV
value|75
end_define

begin_define
define|#
directive|define
name|CLOUDABI_ENOTCAPABLE
value|76
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_eventrwflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_EVENT_FD_READWRITE_HANGUP
value|0x0001
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_eventtype_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_EVENTTYPE_CLOCK
value|1
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EVENTTYPE_CONDVAR
value|2
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EVENTTYPE_FD_READ
value|3
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EVENTTYPE_FD_WRITE
value|4
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EVENTTYPE_LOCK_RDLOCK
value|5
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EVENTTYPE_LOCK_WRLOCK
value|6
end_define

begin_define
define|#
directive|define
name|CLOUDABI_EVENTTYPE_PROC_TERMINATE
value|7
end_define

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_exitcode_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_fd_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_PROCESS_CHILD
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|CLOUDABI_MAP_ANON_FD
value|0xffffffff
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_fdflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_FDFLAG_APPEND
value|0x0001
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FDFLAG_DSYNC
value|0x0002
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FDFLAG_NONBLOCK
value|0x0004
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FDFLAG_RSYNC
value|0x0008
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FDFLAG_SYNC
value|0x0010
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_fdsflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_FDSTAT_FLAGS
value|0x0001
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FDSTAT_RIGHTS
value|0x0002
end_define

begin_typedef
typedef|typedef
name|int64_t
name|cloudabi_filedelta_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|cloudabi_filesize_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_filetype_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_UNKNOWN
value|0
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_BLOCK_DEVICE
value|16
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_CHARACTER_DEVICE
value|17
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_DIRECTORY
value|32
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_PROCESS
value|80
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_REGULAR_FILE
value|96
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_SHARED_MEMORY
value|112
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_SOCKET_DGRAM
value|128
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_SOCKET_STREAM
value|130
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILETYPE_SYMBOLIC_LINK
value|144
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_fsflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_FILESTAT_ATIM
value|0x0001
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILESTAT_ATIM_NOW
value|0x0002
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILESTAT_MTIM
value|0x0004
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILESTAT_MTIM_NOW
value|0x0008
end_define

begin_define
define|#
directive|define
name|CLOUDABI_FILESTAT_SIZE
value|0x0010
end_define

begin_typedef
typedef|typedef
name|uint64_t
name|cloudabi_inode_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_linkcount_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_lock_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_LOCK_UNLOCKED
value|0x00000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_LOCK_WRLOCKED
value|0x40000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_LOCK_KERNEL_MANAGED
value|0x80000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_LOCK_BOGUS
value|0x80000000
end_define

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_lookupflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_LOOKUP_SYMLINK_FOLLOW
value|0x00000001
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_mflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_MAP_ANON
value|0x01
end_define

begin_define
define|#
directive|define
name|CLOUDABI_MAP_FIXED
value|0x02
end_define

begin_define
define|#
directive|define
name|CLOUDABI_MAP_PRIVATE
value|0x04
end_define

begin_define
define|#
directive|define
name|CLOUDABI_MAP_SHARED
value|0x08
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_mprot_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_PROT_EXEC
value|0x01
end_define

begin_define
define|#
directive|define
name|CLOUDABI_PROT_WRITE
value|0x02
end_define

begin_define
define|#
directive|define
name|CLOUDABI_PROT_READ
value|0x04
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_msflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_MS_ASYNC
value|0x01
end_define

begin_define
define|#
directive|define
name|CLOUDABI_MS_INVALIDATE
value|0x02
end_define

begin_define
define|#
directive|define
name|CLOUDABI_MS_SYNC
value|0x04
end_define

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_nthreads_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_oflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_O_CREAT
value|0x0001
end_define

begin_define
define|#
directive|define
name|CLOUDABI_O_DIRECTORY
value|0x0002
end_define

begin_define
define|#
directive|define
name|CLOUDABI_O_EXCL
value|0x0004
end_define

begin_define
define|#
directive|define
name|CLOUDABI_O_TRUNC
value|0x0008
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_riflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_SOCK_RECV_PEEK
value|0x0004
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SOCK_RECV_WAITALL
value|0x0010
end_define

begin_typedef
typedef|typedef
name|uint64_t
name|cloudabi_rights_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FD_DATASYNC
value|0x0000000000000001
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FD_READ
value|0x0000000000000002
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FD_SEEK
value|0x0000000000000004
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FD_STAT_PUT_FLAGS
value|0x0000000000000008
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FD_SYNC
value|0x0000000000000010
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FD_TELL
value|0x0000000000000020
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FD_WRITE
value|0x0000000000000040
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_ADVISE
value|0x0000000000000080
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_ALLOCATE
value|0x0000000000000100
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_CREATE_DIRECTORY
value|0x0000000000000200
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_CREATE_FILE
value|0x0000000000000400
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_LINK_SOURCE
value|0x0000000000001000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_LINK_TARGET
value|0x0000000000002000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_OPEN
value|0x0000000000004000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_READDIR
value|0x0000000000008000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_READLINK
value|0x0000000000010000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_RENAME_SOURCE
value|0x0000000000020000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_RENAME_TARGET
value|0x0000000000040000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_STAT_FGET
value|0x0000000000080000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_STAT_FPUT_SIZE
value|0x0000000000100000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_STAT_FPUT_TIMES
value|0x0000000000200000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_STAT_GET
value|0x0000000000400000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_STAT_PUT_TIMES
value|0x0000000000800000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_SYMLINK
value|0x0000000001000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_FILE_UNLINK
value|0x0000000002000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_MEM_MAP
value|0x0000000004000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_MEM_MAP_EXEC
value|0x0000000008000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_POLL_FD_READWRITE
value|0x0000000010000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_POLL_PROC_TERMINATE
value|0x0000000040000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_PROC_EXEC
value|0x0000000100000000
end_define

begin_define
define|#
directive|define
name|CLOUDABI_RIGHT_SOCK_SHUTDOWN
value|0x0000008000000000
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_roflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_SOCK_RECV_FDS_TRUNCATED
value|0x0001
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SOCK_RECV_DATA_TRUNCATED
value|0x0008
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_scope_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_SCOPE_PRIVATE
value|4
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SCOPE_SHARED
value|8
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_sdflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_SHUT_RD
value|0x01
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SHUT_WR
value|0x02
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_siflags_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_signal_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_SIGABRT
value|1
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGALRM
value|2
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGBUS
value|3
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGCHLD
value|4
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGCONT
value|5
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGFPE
value|6
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGHUP
value|7
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGILL
value|8
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGINT
value|9
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGKILL
value|10
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGPIPE
value|11
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGQUIT
value|12
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGSEGV
value|13
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGSTOP
value|14
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGSYS
value|15
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGTERM
value|16
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGTRAP
value|17
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGTSTP
value|18
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGTTIN
value|19
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGTTOU
value|20
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGURG
value|21
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGUSR1
value|22
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGUSR2
value|23
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGVTALRM
value|24
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGXCPU
value|25
end_define

begin_define
define|#
directive|define
name|CLOUDABI_SIGXFSZ
value|26
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_subclockflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_SUBSCRIPTION_CLOCK_ABSTIME
value|0x0001
end_define

begin_typedef
typedef|typedef
name|uint16_t
name|cloudabi_subrwflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_SUBSCRIPTION_FD_READWRITE_POLL
value|0x0001
end_define

begin_typedef
typedef|typedef
name|uint32_t
name|cloudabi_tid_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|cloudabi_timestamp_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_ulflags_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_UNLINK_REMOVEDIR
value|0x01
end_define

begin_typedef
typedef|typedef
name|uint64_t
name|cloudabi_userdata_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint8_t
name|cloudabi_whence_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CLOUDABI_WHENCE_CUR
value|1
end_define

begin_define
define|#
directive|define
name|CLOUDABI_WHENCE_END
value|2
end_define

begin_define
define|#
directive|define
name|CLOUDABI_WHENCE_SET
value|3
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_dircookie_t
name|d_next
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_inode_t
name|d_ino
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|uint32_t
name|d_namlen
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_filetype_t
name|d_type
decl_stmt|;
block|}
name|cloudabi_dirent_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_dirent_t
argument_list|,
name|d_next
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_dirent_t
argument_list|,
name|d_ino
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_dirent_t
argument_list|,
name|d_namlen
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_dirent_t
argument_list|,
name|d_type
argument_list|)
operator|==
literal|20
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi_dirent_t
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi_dirent_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_userdata_t
name|userdata
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_errno_t
name|error
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_eventtype_t
name|type
decl_stmt|;
union|union
block|{
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_filesize_t
name|nbytes
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|char
name|unused
index|[
literal|4
index|]
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_eventrwflags_t
name|flags
decl_stmt|;
block|}
name|fd_readwrite
struct|;
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|char
name|unused
index|[
literal|4
index|]
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_signal_t
name|signal
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_exitcode_t
name|exitcode
decl_stmt|;
block|}
name|proc_terminate
struct|;
block|}
union|;
block|}
name|cloudabi_event_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_event_t
argument_list|,
name|userdata
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_event_t
argument_list|,
name|error
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_event_t
argument_list|,
name|type
argument_list|)
operator|==
literal|10
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_event_t
argument_list|,
name|fd_readwrite
operator|.
name|nbytes
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_event_t
argument_list|,
name|fd_readwrite
operator|.
name|unused
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_event_t
argument_list|,
name|fd_readwrite
operator|.
name|flags
argument_list|)
operator|==
literal|28
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_event_t
argument_list|,
name|proc_terminate
operator|.
name|unused
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_event_t
argument_list|,
name|proc_terminate
operator|.
name|signal
argument_list|)
operator|==
literal|20
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_event_t
argument_list|,
name|proc_terminate
operator|.
name|exitcode
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi_event_t
argument_list|)
operator|==
literal|32
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi_event_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_filetype_t
name|fs_filetype
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_fdflags_t
name|fs_flags
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_rights_t
name|fs_rights_base
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_rights_t
name|fs_rights_inheriting
decl_stmt|;
block|}
name|cloudabi_fdstat_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_fdstat_t
argument_list|,
name|fs_filetype
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_fdstat_t
argument_list|,
name|fs_flags
argument_list|)
operator|==
literal|2
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_fdstat_t
argument_list|,
name|fs_rights_base
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_fdstat_t
argument_list|,
name|fs_rights_inheriting
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi_fdstat_t
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi_fdstat_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_device_t
name|st_dev
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_inode_t
name|st_ino
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_filetype_t
name|st_filetype
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_linkcount_t
name|st_nlink
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_filesize_t
name|st_size
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_timestamp_t
name|st_atim
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_timestamp_t
name|st_mtim
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_timestamp_t
name|st_ctim
decl_stmt|;
block|}
name|cloudabi_filestat_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_filestat_t
argument_list|,
name|st_dev
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_filestat_t
argument_list|,
name|st_ino
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_filestat_t
argument_list|,
name|st_filetype
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_filestat_t
argument_list|,
name|st_nlink
argument_list|)
operator|==
literal|20
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_filestat_t
argument_list|,
name|st_size
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_filestat_t
argument_list|,
name|st_atim
argument_list|)
operator|==
literal|32
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_filestat_t
argument_list|,
name|st_mtim
argument_list|)
operator|==
literal|40
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_filestat_t
argument_list|,
name|st_ctim
argument_list|)
operator|==
literal|48
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi_filestat_t
argument_list|)
operator|==
literal|56
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi_filestat_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_fd_t
name|fd
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_lookupflags_t
name|flags
decl_stmt|;
block|}
name|cloudabi_lookup_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_lookup_t
argument_list|,
name|fd
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi_lookup_t
argument_list|,
name|flags
argument_list|)
operator|==
literal|4
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi_lookup_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi_lookup_t
argument_list|)
operator|==
literal|4
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_endif
endif|#
directive|endif
end_endif

end_unit

