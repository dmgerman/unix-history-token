begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Copyright (c) 2016 Nuxi (https://nuxi.nl/) and contributors.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions
end_comment

begin_comment
comment|// are met:
end_comment

begin_comment
comment|// 1. Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|//    notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|// 2. Redistributions in binary form must reproduce the above copyright
end_comment

begin_comment
comment|//    notice, this list of conditions and the following disclaimer in the
end_comment

begin_comment
comment|//    documentation and/or other materials provided with the distribution.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
end_comment

begin_comment
comment|// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
end_comment

begin_comment
comment|// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
end_comment

begin_comment
comment|// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
end_comment

begin_comment
comment|// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
end_comment

begin_comment
comment|// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
end_comment

begin_comment
comment|// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
end_comment

begin_comment
comment|// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
end_comment

begin_comment
comment|// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
end_comment

begin_comment
comment|// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
end_comment

begin_comment
comment|// SUCH DAMAGE.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is automatically generated. Do not edit.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Source: https://github.com/NuxiNL/cloudabi
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLOUDABI64_TYPES_H
end_ifndef

begin_define
define|#
directive|define
name|CLOUDABI64_TYPES_H
end_define

begin_include
include|#
directive|include
file|"cloudabi_types_common.h"
end_include

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_auxtype_t
name|a_type
decl_stmt|;
union|union
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|a_val
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|a_ptr
decl_stmt|;
block|}
union|;
block|}
name|cloudabi64_auxv_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_auxv_t
argument_list|,
name|a_type
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_auxv_t
argument_list|,
name|a_val
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_auxv_t
argument_list|,
name|a_ptr
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_auxv_t
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_auxv_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|buf
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|buf_len
decl_stmt|;
block|}
name|cloudabi64_ciovec_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_ciovec_t
argument_list|,
name|buf
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_ciovec_t
argument_list|,
name|buf_len
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_ciovec_t
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_ciovec_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_userdata_t
name|userdata
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_errno_t
name|error
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_eventtype_t
name|type
decl_stmt|;
union|union
block|{
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_userdata_t
name|identifier
decl_stmt|;
block|}
name|clock
struct|;
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|condvar
decl_stmt|;
block|}
name|condvar
struct|;
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_filesize_t
name|nbytes
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_fd_t
name|fd
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_eventrwflags_t
name|flags
decl_stmt|;
block|}
name|fd_readwrite
struct|;
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|lock
decl_stmt|;
block|}
name|lock
struct|;
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_fd_t
name|fd
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_signal_t
name|signal
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_exitcode_t
name|exitcode
decl_stmt|;
block|}
name|proc_terminate
struct|;
block|}
union|;
block|}
name|cloudabi64_event_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|userdata
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|error
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|type
argument_list|)
operator|==
literal|10
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|clock
operator|.
name|identifier
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|condvar
operator|.
name|condvar
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|fd_readwrite
operator|.
name|nbytes
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|fd_readwrite
operator|.
name|fd
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|fd_readwrite
operator|.
name|flags
argument_list|)
operator|==
literal|28
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|lock
operator|.
name|lock
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|proc_terminate
operator|.
name|fd
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|proc_terminate
operator|.
name|signal
argument_list|)
operator|==
literal|20
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_event_t
argument_list|,
name|proc_terminate
operator|.
name|exitcode
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_event_t
argument_list|)
operator|==
literal|32
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_event_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|buf
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|buf_len
decl_stmt|;
block|}
name|cloudabi64_iovec_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_iovec_t
argument_list|,
name|buf
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_iovec_t
argument_list|,
name|buf_len
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_iovec_t
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_iovec_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
name|void
name|cloudabi64_processentry_t
parameter_list|(
name|uint64_t
name|auxv
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|ri_data
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|ri_data_len
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|ri_fds
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|ri_fds_len
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_msgflags_t
name|ri_flags
decl_stmt|;
block|}
name|cloudabi64_recv_in_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_in_t
argument_list|,
name|ri_data
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_in_t
argument_list|,
name|ri_data_len
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_in_t
argument_list|,
name|ri_fds
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_in_t
argument_list|,
name|ri_fds_len
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_in_t
argument_list|,
name|ri_flags
argument_list|)
operator|==
literal|32
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_recv_in_t
argument_list|)
operator|==
literal|40
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_recv_in_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|si_data
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|si_data_len
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|si_fds
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|si_fds_len
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_msgflags_t
name|si_flags
decl_stmt|;
block|}
name|cloudabi64_send_in_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_send_in_t
argument_list|,
name|si_data
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_send_in_t
argument_list|,
name|si_data_len
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_send_in_t
argument_list|,
name|si_fds
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_send_in_t
argument_list|,
name|si_fds_len
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_send_in_t
argument_list|,
name|si_flags
argument_list|)
operator|==
literal|32
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_send_in_t
argument_list|)
operator|==
literal|40
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_send_in_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|so_datalen
decl_stmt|;
block|}
name|cloudabi64_send_out_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_send_out_t
argument_list|,
name|so_datalen
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_send_out_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_send_out_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_userdata_t
name|userdata
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_subflags_t
name|flags
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_eventtype_t
name|type
decl_stmt|;
union|union
block|{
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_userdata_t
name|identifier
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_clockid_t
name|clock_id
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_timestamp_t
name|timeout
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|cloudabi_timestamp_t
name|precision
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_subclockflags_t
name|flags
decl_stmt|;
block|}
name|clock
struct|;
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|condvar
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|lock
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_scope_t
name|condvar_scope
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_scope_t
name|lock_scope
decl_stmt|;
block|}
name|condvar
struct|;
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_fd_t
name|fd
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_subrwflags_t
name|flags
decl_stmt|;
block|}
name|fd_readwrite
struct|;
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|lock
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|1
argument_list|)
name|cloudabi_scope_t
name|lock_scope
decl_stmt|;
block|}
name|lock
struct|;
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|4
argument_list|)
name|cloudabi_fd_t
name|fd
decl_stmt|;
block|}
name|proc_terminate
struct|;
block|}
union|;
block|}
name|cloudabi64_subscription_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|userdata
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|flags
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|type
argument_list|)
operator|==
literal|10
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|clock
operator|.
name|identifier
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|clock
operator|.
name|clock_id
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|clock
operator|.
name|timeout
argument_list|)
operator|==
literal|32
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|clock
operator|.
name|precision
argument_list|)
operator|==
literal|40
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|clock
operator|.
name|flags
argument_list|)
operator|==
literal|48
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|condvar
operator|.
name|condvar
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|condvar
operator|.
name|lock
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|condvar
operator|.
name|condvar_scope
argument_list|)
operator|==
literal|32
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|condvar
operator|.
name|lock_scope
argument_list|)
operator|==
literal|33
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|fd_readwrite
operator|.
name|fd
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|fd_readwrite
operator|.
name|flags
argument_list|)
operator|==
literal|20
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|lock
operator|.
name|lock
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|lock
operator|.
name|lock_scope
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_subscription_t
argument_list|,
name|proc_terminate
operator|.
name|fd
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_subscription_t
argument_list|)
operator|==
literal|56
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_subscription_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|parent
decl_stmt|;
block|}
name|cloudabi64_tcb_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_tcb_t
argument_list|,
name|parent
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_tcb_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_tcb_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
name|void
name|cloudabi64_threadentry_t
parameter_list|(
name|cloudabi_tid_t
name|tid
parameter_list|,
name|uint64_t
name|aux
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|ro_datalen
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|ro_fdslen
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_sockaddr_t
name|ro_sockname
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_sockaddr_t
name|ro_peername
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|2
argument_list|)
name|cloudabi_msgflags_t
name|ro_flags
decl_stmt|;
block|}
name|cloudabi64_recv_out_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_out_t
argument_list|,
name|ro_datalen
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_out_t
argument_list|,
name|ro_fdslen
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_out_t
argument_list|,
name|ro_sockname
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_out_t
argument_list|,
name|ro_peername
argument_list|)
operator|==
literal|36
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_recv_out_t
argument_list|,
name|ro_flags
argument_list|)
operator|==
literal|56
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_recv_out_t
argument_list|)
operator|==
literal|64
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_recv_out_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_typedef
typedef|typedef
struct|struct
block|{
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|entry_point
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|stack
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|stack_len
decl_stmt|;
alignas|_Alignas
argument_list|(
literal|8
argument_list|)
name|uint64_t
name|argument
decl_stmt|;
block|}
name|cloudabi64_threadattr_t
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_threadattr_t
argument_list|,
name|entry_point
argument_list|)
operator|==
literal|0
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_threadattr_t
argument_list|,
name|stack
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_threadattr_t
argument_list|,
name|stack_len
argument_list|)
operator|==
literal|16
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
name|offsetof
argument_list|(
name|cloudabi64_threadattr_t
argument_list|,
name|argument
argument_list|)
operator|==
literal|24
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|cloudabi64_threadattr_t
argument_list|)
operator|==
literal|32
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_assert
assert|_Static_assert
argument_list|(
alignof|_Alignof
argument_list|(
name|cloudabi64_threadattr_t
argument_list|)
operator|==
literal|8
argument_list|,
literal|"Incorrect layout"
argument_list|)
assert|;
end_assert

begin_endif
endif|#
directive|endif
end_endif

end_unit

