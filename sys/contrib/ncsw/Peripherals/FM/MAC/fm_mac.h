begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2008-2011 Freescale Semiconductor, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *     * Redistributions of source code must retain the above copyright  *       notice, this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *     * Neither the name of Freescale Semiconductor nor the  *       names of its contributors may be used to endorse or promote products  *       derived from this software without specific prior written permission.  *  *  * ALTERNATIVELY, this software may be distributed under the terms of the  * GNU General Public License ("GPL") as published by the Free Software  * Foundation, either version 2 of that License or (at your option) any  * later version.  *  * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/******************************************************************************  @File          fm_mac.h   @Description   FM MAC ... */
end_comment

begin_comment
comment|/***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__FM_MAC_H
end_ifndef

begin_define
define|#
directive|define
name|__FM_MAC_H
end_define

begin_include
include|#
directive|include
file|"std_ext.h"
end_include

begin_include
include|#
directive|include
file|"error_ext.h"
end_include

begin_include
include|#
directive|include
file|"list_ext.h"
end_include

begin_include
include|#
directive|include
file|"fm_mac_ext.h"
end_include

begin_define
define|#
directive|define
name|__ERR_MODULE__
value|MODULE_FM_MAC
end_define

begin_define
define|#
directive|define
name|DEFAULT_resetOnInit
value|FALSE
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint64_t
name|addr
decl_stmt|;
comment|/* Ethernet Address  */
name|t_List
name|node
decl_stmt|;
block|}
name|t_EthHashEntry
typedef|;
end_typedef

begin_define
define|#
directive|define
name|ETH_HASH_ENTRY_OBJ
parameter_list|(
name|ptr
parameter_list|)
value|LIST_OBJECT(ptr, t_EthHashEntry, node)
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint16_t
name|size
decl_stmt|;
name|t_List
modifier|*
name|p_Lsts
decl_stmt|;
block|}
name|t_EthHash
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_Init
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_Free
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_SetStatistics
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|e_FmMacStatisticsLevel
name|statisticsLevel
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ConfigLoopback
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|bool
name|newVal
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ConfigMaxFrameLength
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|uint16_t
name|newVal
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ConfigWan
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|bool
name|flag
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ConfigPadAndCrc
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|bool
name|newVal
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ConfigHalfDuplex
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|bool
name|newVal
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ConfigLengthCheck
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|bool
name|newVal
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ConfigException
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|e_FmMacExceptions
parameter_list|,
name|bool
name|enable
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|FM_TX_ECC_FRMS_ERRATA_10GMAC_A004
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ConfigSkipFman11Workaround
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* FM_TX_ECC_FRMS_ERRATA_10GMAC_A004 */
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_SetException
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|e_FmMacExceptions
name|ex
parameter_list|,
name|bool
name|enable
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_Enable
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|e_CommMode
name|mode
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_Disable
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|e_CommMode
name|mode
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_Enable1588TimeStamp
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_Disable1588TimeStamp
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_Reset
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|bool
name|wait
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_SetTxAutoPauseFrames
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|uint16_t
name|pauseTime
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_SetRxIgnorePauseFrames
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|bool
name|en
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ResetCounters
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_GetStatistics
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|t_FmMacStatistics
modifier|*
name|p_Statistics
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_ModifyMacAddr
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|t_EnetAddr
modifier|*
name|p_EnetAddr
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_AddHashMacAddr
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|t_EnetAddr
modifier|*
name|p_EnetAddr
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_RemoveHashMacAddr
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|t_EnetAddr
modifier|*
name|p_EnetAddr
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_AddExactMatchMacAddr
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|t_EnetAddr
modifier|*
name|p_EnetAddr
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_RemovelExactMatchMacAddr
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|t_EnetAddr
modifier|*
name|p_EnetAddr
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_SetPromiscuous
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|bool
name|newVal
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_AdjustLink
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|e_EnetSpeed
name|speed
parameter_list|,
name|bool
name|fullDuplex
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_GetId
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|uint32_t
modifier|*
name|macId
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_GetVersion
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|uint32_t
modifier|*
name|macVersion
parameter_list|)
function_decl|;
name|uint16_t
function_decl|(
modifier|*
name|f_FM_MAC_GetMaxFrameLength
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_MII_WritePhyReg
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|uint8_t
name|phyAddr
parameter_list|,
name|uint8_t
name|reg
parameter_list|,
name|uint16_t
name|data
parameter_list|)
function_decl|;
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_MII_ReadPhyReg
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|,
name|uint8_t
name|phyAddr
parameter_list|,
name|uint8_t
name|reg
parameter_list|,
name|uint16_t
modifier|*
name|p_Data
parameter_list|)
function_decl|;
if|#
directive|if
operator|(
name|defined
argument_list|(
name|DEBUG_ERRORS
argument_list|)
operator|&&
operator|(
name|DEBUG_ERRORS
operator|>
literal|0
operator|)
operator|)
name|t_Error
function_decl|(
modifier|*
name|f_FM_MAC_DumpRegs
function_decl|)
parameter_list|(
name|t_Handle
name|h_FmMac
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* (defined(DEBUG_ERRORS)&& ... */
name|t_Handle
name|h_Fm
decl_stmt|;
name|e_EnetMode
name|enetMode
decl_stmt|;
name|uint8_t
name|macId
decl_stmt|;
name|bool
name|resetOnInit
decl_stmt|;
name|uint16_t
name|clkFreq
decl_stmt|;
block|}
name|t_FmMacControllerDriver
typedef|;
end_typedef

begin_function_decl
name|t_Handle
name|DTSEC_Config
parameter_list|(
name|t_FmMacParams
modifier|*
name|p_FmMacParam
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Handle
name|TGEC_Config
parameter_list|(
name|t_FmMacParams
modifier|*
name|p_FmMacParams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint16_t
name|FM_MAC_GetMaxFrameLength
parameter_list|(
name|t_Handle
name|FmMac
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* ........................................................................... */
end_comment

begin_function
specifier|static
name|__inline__
name|t_EthHashEntry
modifier|*
name|DequeueAddrFromHashEntry
parameter_list|(
name|t_List
modifier|*
name|p_AddrLst
parameter_list|)
block|{
name|t_EthHashEntry
modifier|*
name|p_HashEntry
init|=
name|NULL
decl_stmt|;
if|if
condition|(
operator|!
name|LIST_IsEmpty
argument_list|(
name|p_AddrLst
argument_list|)
condition|)
block|{
name|p_HashEntry
operator|=
name|ETH_HASH_ENTRY_OBJ
argument_list|(
name|p_AddrLst
operator|->
name|p_Next
argument_list|)
expr_stmt|;
name|LIST_DelAndInit
argument_list|(
operator|&
name|p_HashEntry
operator|->
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|p_HashEntry
return|;
block|}
end_function

begin_comment
comment|/* ........................................................................... */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|FreeHashTable
parameter_list|(
name|t_EthHash
modifier|*
name|p_Hash
parameter_list|)
block|{
name|t_EthHashEntry
modifier|*
name|p_HashEntry
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|p_Hash
operator|||
operator|!
name|p_Hash
operator|->
name|p_Lsts
condition|)
return|return;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|p_Hash
operator|->
name|size
condition|;
name|i
operator|++
control|)
block|{
name|p_HashEntry
operator|=
name|DequeueAddrFromHashEntry
argument_list|(
operator|&
name|p_Hash
operator|->
name|p_Lsts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
while|while
condition|(
name|p_HashEntry
condition|)
block|{
name|XX_Free
argument_list|(
name|p_HashEntry
argument_list|)
expr_stmt|;
name|p_HashEntry
operator|=
name|DequeueAddrFromHashEntry
argument_list|(
operator|&
name|p_Hash
operator|->
name|p_Lsts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|XX_Free
argument_list|(
name|p_Hash
operator|->
name|p_Lsts
argument_list|)
expr_stmt|;
name|XX_Free
argument_list|(
name|p_Hash
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* ........................................................................... */
end_comment

begin_function
specifier|static
name|__inline__
name|t_EthHash
modifier|*
name|AllocHashTable
parameter_list|(
name|uint16_t
name|size
parameter_list|)
block|{
name|uint32_t
name|i
decl_stmt|;
name|t_EthHash
modifier|*
name|p_Hash
decl_stmt|;
comment|/* Allocate address hash table */
name|p_Hash
operator|=
operator|(
name|t_EthHash
operator|*
operator|)
name|XX_Malloc
argument_list|(
name|size
operator|*
sizeof|sizeof
argument_list|(
name|t_EthHash
operator|*
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|p_Hash
condition|)
block|{
name|REPORT_ERROR
argument_list|(
name|MAJOR
argument_list|,
name|E_NO_MEMORY
argument_list|,
operator|(
literal|"Address hash table"
operator|)
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|p_Hash
operator|->
name|size
operator|=
name|size
expr_stmt|;
name|p_Hash
operator|->
name|p_Lsts
operator|=
operator|(
name|t_List
operator|*
operator|)
name|XX_Malloc
argument_list|(
name|p_Hash
operator|->
name|size
operator|*
sizeof|sizeof
argument_list|(
name|t_List
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|p_Hash
operator|->
name|p_Lsts
condition|)
block|{
name|REPORT_ERROR
argument_list|(
name|MAJOR
argument_list|,
name|E_NO_MEMORY
argument_list|,
operator|(
literal|"Address hash table"
operator|)
argument_list|)
expr_stmt|;
name|XX_Free
argument_list|(
name|p_Hash
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|p_Hash
operator|->
name|size
condition|;
name|i
operator|++
control|)
name|INIT_LIST
argument_list|(
operator|&
name|p_Hash
operator|->
name|p_Lsts
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|p_Hash
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FM_MAC_H */
end_comment

end_unit

