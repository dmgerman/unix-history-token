begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2008-2012 Freescale Semiconductor Inc.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *     * Redistributions of source code must retain the above copyright  *       notice, this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *     * Neither the name of Freescale Semiconductor nor the  *       names of its contributors may be used to endorse or promote products  *       derived from this software without specific prior written permission.  *  *  * ALTERNATIVELY, this software may be distributed under the terms of the  * GNU General Public License ("GPL") as published by the Free Software  * Foundation, either version 2 of that License or (at your option) any  * later version.  *  * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/******************************************************************************  @File          fm_pcd.h   @Description   FM PCD ... */
end_comment

begin_comment
comment|/***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__FM_PCD_H
end_ifndef

begin_define
define|#
directive|define
name|__FM_PCD_H
end_define

begin_include
include|#
directive|include
file|"std_ext.h"
end_include

begin_include
include|#
directive|include
file|"error_ext.h"
end_include

begin_include
include|#
directive|include
file|"list_ext.h"
end_include

begin_include
include|#
directive|include
file|"fm_pcd_ext.h"
end_include

begin_include
include|#
directive|include
file|"fm_common.h"
end_include

begin_include
include|#
directive|include
file|"fsl_fman_prs.h"
end_include

begin_include
include|#
directive|include
file|"fsl_fman_kg.h"
end_include

begin_define
define|#
directive|define
name|__ERR_MODULE__
value|MODULE_FM_PCD
end_define

begin_comment
comment|/****************************/
end_comment

begin_comment
comment|/* Defaults                 */
end_comment

begin_comment
comment|/****************************/
end_comment

begin_define
define|#
directive|define
name|DEFAULT_plcrAutoRefresh
value|FALSE
end_define

begin_define
define|#
directive|define
name|DEFAULT_fmPcdKgErrorExceptions
value|(FM_EX_KG_DOUBLE_ECC | FM_EX_KG_KEYSIZE_OVERFLOW)
end_define

begin_define
define|#
directive|define
name|DEFAULT_fmPcdPlcrErrorExceptions
value|(FM_PCD_EX_PLCR_DOUBLE_ECC | FM_PCD_EX_PLCR_INIT_ENTRY_ERROR)
end_define

begin_define
define|#
directive|define
name|DEFAULT_fmPcdPlcrExceptions
value|0
end_define

begin_define
define|#
directive|define
name|DEFAULT_fmPcdPrsErrorExceptions
value|(FM_PCD_EX_PRS_DOUBLE_ECC)
end_define

begin_define
define|#
directive|define
name|DEFAULT_fmPcdPrsExceptions
value|FM_PCD_EX_PRS_SINGLE_ECC
end_define

begin_define
define|#
directive|define
name|DEFAULT_numOfUsedProfilesPerWindow
value|16
end_define

begin_define
define|#
directive|define
name|DEFAULT_numOfSharedPlcrProfiles
value|4
end_define

begin_comment
comment|/****************************/
end_comment

begin_comment
comment|/* Network defines          */
end_comment

begin_comment
comment|/****************************/
end_comment

begin_define
define|#
directive|define
name|UDP_HEADER_SIZE
value|8
end_define

begin_define
define|#
directive|define
name|ESP_SPI_OFFSET
value|0
end_define

begin_define
define|#
directive|define
name|ESP_SPI_SIZE
value|4
end_define

begin_define
define|#
directive|define
name|ESP_SEQ_NUM_OFFSET
value|ESP_SPI_SIZE
end_define

begin_define
define|#
directive|define
name|ESP_SEQ_NUM_SIZE
value|4
end_define

begin_comment
comment|/****************************/
end_comment

begin_comment
comment|/* General defines          */
end_comment

begin_comment
comment|/****************************/
end_comment

begin_define
define|#
directive|define
name|ILLEGAL_CLS_PLAN
value|0xff
end_define

begin_define
define|#
directive|define
name|ILLEGAL_NETENV
value|0xff
end_define

begin_define
define|#
directive|define
name|FM_PCD_MAX_NUM_OF_ALIAS_HDRS
value|3
end_define

begin_comment
comment|/****************************/
end_comment

begin_comment
comment|/* Error defines           */
end_comment

begin_comment
comment|/****************************/
end_comment

begin_define
define|#
directive|define
name|FM_PCD_EX_PLCR_DOUBLE_ECC
value|0x20000000
end_define

begin_define
define|#
directive|define
name|FM_PCD_EX_PLCR_INIT_ENTRY_ERROR
value|0x10000000
end_define

begin_define
define|#
directive|define
name|FM_PCD_EX_PLCR_PRAM_SELF_INIT_COMPLETE
value|0x08000000
end_define

begin_define
define|#
directive|define
name|FM_PCD_EX_PLCR_ATOMIC_ACTION_COMPLETE
value|0x04000000
end_define

begin_define
define|#
directive|define
name|GET_FM_PCD_EXCEPTION_FLAG
parameter_list|(
name|bitMask
parameter_list|,
name|exception
parameter_list|)
define|\
value|switch (exception){                                                 \     case e_FM_PCD_KG_EXCEPTION_DOUBLE_ECC:                          \         bitMask = FM_EX_KG_DOUBLE_ECC; break;                   \     case e_FM_PCD_PLCR_EXCEPTION_DOUBLE_ECC:                        \         bitMask = FM_PCD_EX_PLCR_DOUBLE_ECC; break;                 \     case e_FM_PCD_KG_EXCEPTION_KEYSIZE_OVERFLOW:                    \         bitMask = FM_EX_KG_KEYSIZE_OVERFLOW; break;             \     case e_FM_PCD_PLCR_EXCEPTION_INIT_ENTRY_ERROR:                  \         bitMask = FM_PCD_EX_PLCR_INIT_ENTRY_ERROR; break;           \     case e_FM_PCD_PLCR_EXCEPTION_PRAM_SELF_INIT_COMPLETE:           \         bitMask = FM_PCD_EX_PLCR_PRAM_SELF_INIT_COMPLETE; break;    \     case e_FM_PCD_PLCR_EXCEPTION_ATOMIC_ACTION_COMPLETE:            \         bitMask = FM_PCD_EX_PLCR_ATOMIC_ACTION_COMPLETE; break;     \     case e_FM_PCD_PRS_EXCEPTION_DOUBLE_ECC:                         \         bitMask = FM_PCD_EX_PRS_DOUBLE_ECC; break;                  \     case e_FM_PCD_PRS_EXCEPTION_SINGLE_ECC:                         \         bitMask = FM_PCD_EX_PRS_SINGLE_ECC; break;                  \     default: bitMask = 0;break;}
end_define

begin_comment
comment|/***********************************************************************/
end_comment

begin_comment
comment|/*          Policer defines                                            */
end_comment

begin_comment
comment|/***********************************************************************/
end_comment

begin_define
define|#
directive|define
name|FM_PCD_PLCR_GCR_STEN
value|0x40000000
end_define

begin_define
define|#
directive|define
name|FM_PCD_PLCR_DOUBLE_ECC
value|0x80000000
end_define

begin_define
define|#
directive|define
name|FM_PCD_PLCR_INIT_ENTRY_ERROR
value|0x40000000
end_define

begin_define
define|#
directive|define
name|FM_PCD_PLCR_PRAM_SELF_INIT_COMPLETE
value|0x80000000
end_define

begin_define
define|#
directive|define
name|FM_PCD_PLCR_ATOMIC_ACTION_COMPLETE
value|0x40000000
end_define

begin_comment
comment|/***********************************************************************/
end_comment

begin_comment
comment|/*          Memory map                                                 */
end_comment

begin_comment
comment|/***********************************************************************/
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__MWERKS__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
end_if

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|push
name|,
name|1
name|)
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined(__MWERKS__)&& ... */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|/* General Configuration and Status Registers */
specifier|volatile
name|uint32_t
name|fmpl_gcr
decl_stmt|;
comment|/* 0x000 FMPL_GCR  - FM Policer General Configuration */
specifier|volatile
name|uint32_t
name|fmpl_gsr
decl_stmt|;
comment|/* 0x004 FMPL_GSR  - FM Policer Global Status Register */
specifier|volatile
name|uint32_t
name|fmpl_evr
decl_stmt|;
comment|/* 0x008 FMPL_EVR  - FM Policer Event Register */
specifier|volatile
name|uint32_t
name|fmpl_ier
decl_stmt|;
comment|/* 0x00C FMPL_IER  - FM Policer Interrupt Enable Register */
specifier|volatile
name|uint32_t
name|fmpl_ifr
decl_stmt|;
comment|/* 0x010 FMPL_IFR  - FM Policer Interrupt Force Register */
specifier|volatile
name|uint32_t
name|fmpl_eevr
decl_stmt|;
comment|/* 0x014 FMPL_EEVR - FM Policer Error Event Register */
specifier|volatile
name|uint32_t
name|fmpl_eier
decl_stmt|;
comment|/* 0x018 FMPL_EIER - FM Policer Error Interrupt Enable Register */
specifier|volatile
name|uint32_t
name|fmpl_eifr
decl_stmt|;
comment|/* 0x01C FMPL_EIFR - FM Policer Error Interrupt Force Register */
comment|/* Global Statistic Counters */
specifier|volatile
name|uint32_t
name|fmpl_rpcnt
decl_stmt|;
comment|/* 0x020 FMPL_RPC  - FM Policer RED Packets Counter */
specifier|volatile
name|uint32_t
name|fmpl_ypcnt
decl_stmt|;
comment|/* 0x024 FMPL_YPC  - FM Policer YELLOW Packets Counter */
specifier|volatile
name|uint32_t
name|fmpl_rrpcnt
decl_stmt|;
comment|/* 0x028 FMPL_RRPC - FM Policer Recolored RED Packet Counter */
specifier|volatile
name|uint32_t
name|fmpl_rypcnt
decl_stmt|;
comment|/* 0x02C FMPL_RYPC - FM Policer Recolored YELLOW Packet Counter */
specifier|volatile
name|uint32_t
name|fmpl_tpcnt
decl_stmt|;
comment|/* 0x030 FMPL_TPC  - FM Policer Total Packet Counter */
specifier|volatile
name|uint32_t
name|fmpl_flmcnt
decl_stmt|;
comment|/* 0x034 FMPL_FLMC - FM Policer Frame Length Mismatch Counter */
specifier|volatile
name|uint32_t
name|fmpl_res0
index|[
literal|21
index|]
decl_stmt|;
comment|/* 0x038 - 0x08B Reserved */
comment|/* Profile RAM Access Registers */
specifier|volatile
name|uint32_t
name|fmpl_par
decl_stmt|;
comment|/* 0x08C FMPL_PAR    - FM Policer Profile Action Register*/
name|t_FmPcdPlcrProfileRegs
name|profileRegs
decl_stmt|;
comment|/* Error Capture Registers */
specifier|volatile
name|uint32_t
name|fmpl_serc
decl_stmt|;
comment|/* 0x100 FMPL_SERC - FM Policer Soft Error Capture */
specifier|volatile
name|uint32_t
name|fmpl_upcr
decl_stmt|;
comment|/* 0x104 FMPL_UPCR - FM Policer Uninitialized Profile Capture Register */
specifier|volatile
name|uint32_t
name|fmpl_res2
decl_stmt|;
comment|/* 0x108 Reserved */
comment|/* Debug Registers */
specifier|volatile
name|uint32_t
name|fmpl_res3
index|[
literal|61
index|]
decl_stmt|;
comment|/* 0x10C-0x200 Reserved Debug*/
comment|/* Profile Selection Mapping Registers Per Port-ID (n=1-11, 16) */
specifier|volatile
name|uint32_t
name|fmpl_dpmr
decl_stmt|;
comment|/* 0x200 FMPL_DPMR - FM Policer Default Mapping Register */
specifier|volatile
name|uint32_t
name|fmpl_pmr
index|[
literal|63
index|]
decl_stmt|;
comment|/*+default 0x204-0x2FF FMPL_PMR1 - FMPL_PMR63, - FM Policer Profile Mapping Registers.                                            (for port-ID 1-11, only for supported Port-ID registers) */
block|}
name|t_FmPcdPlcrRegs
typedef|;
end_typedef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__MWERKS__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
end_if

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|pop
name|)
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined(__MWERKS__)&& ... */
end_comment

begin_comment
comment|/***********************************************************************/
end_comment

begin_comment
comment|/*  Driver's internal structures                                       */
end_comment

begin_comment
comment|/***********************************************************************/
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|bool
name|known
decl_stmt|;
name|uint8_t
name|id
decl_stmt|;
block|}
name|t_FmPcdKgSchemesExtractsEntry
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|t_FmPcdKgSchemesExtractsEntry
name|extractsArray
index|[
name|FM_PCD_KG_MAX_NUM_OF_EXTRACTS_PER_KEY
index|]
decl_stmt|;
block|}
name|t_FmPcdKgSchemesExtracts
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|t_Handle
name|h_Manip
decl_stmt|;
name|bool
name|keepRes
decl_stmt|;
name|e_FmPcdEngine
name|nextEngine
decl_stmt|;
name|uint8_t
name|parseCode
decl_stmt|;
block|}
name|t_FmPcdInfoForManip
typedef|;
end_typedef

begin_comment
comment|/**************************************************************************/
end_comment

begin_comment
comment|/**  @Description   A structure of parameters to communicate                 between the port and PCD regarding the KG scheme. */
end_comment

begin_comment
comment|/***************************************************************************/
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint8_t
name|netEnvId
decl_stmt|;
comment|/* in */
name|uint8_t
name|numOfDistinctionUnits
decl_stmt|;
comment|/* in */
name|uint8_t
name|unitIds
index|[
name|FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS
index|]
decl_stmt|;
comment|/* in */
name|uint32_t
name|vector
decl_stmt|;
comment|/* out */
block|}
name|t_NetEnvParams
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|bool
name|allocated
decl_stmt|;
name|uint8_t
name|ownerId
decl_stmt|;
comment|/* guestId for KG in multi-partition only.                                 portId for PLCR in any environment */
block|}
name|t_FmPcdAllocMng
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
specifier|volatile
name|bool
name|lock
decl_stmt|;
name|bool
name|used
decl_stmt|;
name|uint8_t
name|owners
decl_stmt|;
name|uint8_t
name|netEnvId
decl_stmt|;
name|uint8_t
name|guestId
decl_stmt|;
name|uint8_t
name|baseEntry
decl_stmt|;
name|uint16_t
name|sizeOfGrp
decl_stmt|;
name|protocolOpt_t
name|optArray
index|[
name|FM_PCD_MAX_NUM_OF_OPTIONS
argument_list|(
name|FM_PCD_MAX_NUM_OF_CLS_PLANS
argument_list|)
index|]
decl_stmt|;
block|}
name|t_FmPcdKgClsPlanGrp
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|t_Handle
name|h_FmPcd
decl_stmt|;
name|uint8_t
name|schemeId
decl_stmt|;
name|t_FmPcdLock
modifier|*
name|p_Lock
decl_stmt|;
name|bool
name|valid
decl_stmt|;
name|uint8_t
name|netEnvId
decl_stmt|;
name|uint8_t
name|owners
decl_stmt|;
name|uint32_t
name|matchVector
decl_stmt|;
name|uint32_t
name|ccUnits
decl_stmt|;
name|bool
name|nextRelativePlcrProfile
decl_stmt|;
name|uint16_t
name|relativeProfileId
decl_stmt|;
name|uint16_t
name|numOfProfiles
decl_stmt|;
name|t_FmPcdKgKeyOrder
name|orderedArray
decl_stmt|;
name|e_FmPcdEngine
name|nextEngine
decl_stmt|;
name|e_FmPcdDoneAction
name|doneAction
decl_stmt|;
name|bool
name|requiredActionFlag
decl_stmt|;
name|uint32_t
name|requiredAction
decl_stmt|;
name|bool
name|extractedOrs
decl_stmt|;
name|uint8_t
name|bitOffsetInPlcrProfile
decl_stmt|;
name|bool
name|directPlcr
decl_stmt|;
if|#
directive|if
operator|(
name|DPAA_VERSION
operator|>=
literal|11
operator|)
name|bool
name|vspe
decl_stmt|;
endif|#
directive|endif
block|}
name|t_FmPcdKgScheme
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|struct
name|fman_kg_scheme_regs
name|schemeRegs
decl_stmt|;
name|struct
name|fman_kg_pe_regs
name|portRegs
decl_stmt|;
name|struct
name|fman_kg_cp_regs
name|clsPlanRegs
decl_stmt|;
block|}
name|u_FmPcdKgIndirectAccessRegs
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|struct
name|fman_kg_regs
modifier|*
name|p_FmPcdKgRegs
decl_stmt|;
name|uint32_t
name|schemeExceptionsBitMask
decl_stmt|;
name|uint8_t
name|numOfSchemes
decl_stmt|;
name|t_Handle
name|h_HwSpinlock
decl_stmt|;
name|uint8_t
name|schemesIds
index|[
name|FM_PCD_KG_NUM_OF_SCHEMES
index|]
decl_stmt|;
name|t_FmPcdKgScheme
name|schemes
index|[
name|FM_PCD_KG_NUM_OF_SCHEMES
index|]
decl_stmt|;
name|t_FmPcdKgClsPlanGrp
name|clsPlanGrps
index|[
name|FM_MAX_NUM_OF_PORTS
index|]
decl_stmt|;
name|uint8_t
name|emptyClsPlanGrpId
decl_stmt|;
name|t_FmPcdAllocMng
name|schemesMng
index|[
name|FM_PCD_KG_NUM_OF_SCHEMES
index|]
decl_stmt|;
comment|/* only for MASTER ! */
name|t_FmPcdAllocMng
name|clsPlanBlocksMng
index|[
name|FM_PCD_MAX_NUM_OF_CLS_PLANS
operator|/
name|CLS_PLAN_NUM_PER_GRP
index|]
decl_stmt|;
name|u_FmPcdKgIndirectAccessRegs
modifier|*
name|p_IndirectAccessRegs
decl_stmt|;
block|}
name|t_FmPcdKg
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint16_t
name|profilesBase
decl_stmt|;
name|uint16_t
name|numOfProfiles
decl_stmt|;
name|t_Handle
name|h_FmPort
decl_stmt|;
block|}
name|t_FmPcdPlcrMapParam
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint16_t
name|absoluteProfileId
decl_stmt|;
name|t_Handle
name|h_FmPcd
decl_stmt|;
name|bool
name|valid
decl_stmt|;
name|t_FmPcdLock
modifier|*
name|p_Lock
decl_stmt|;
name|t_FmPcdAllocMng
name|profilesMng
decl_stmt|;
name|bool
name|requiredActionFlag
decl_stmt|;
name|uint32_t
name|requiredAction
decl_stmt|;
name|e_FmPcdEngine
name|nextEngineOnGreen
decl_stmt|;
comment|/**< Green next engine type */
name|u_FmPcdPlcrNextEngineParams
name|paramsOnGreen
decl_stmt|;
comment|/**< Green next engine params */
name|e_FmPcdEngine
name|nextEngineOnYellow
decl_stmt|;
comment|/**< Yellow next engine type */
name|u_FmPcdPlcrNextEngineParams
name|paramsOnYellow
decl_stmt|;
comment|/**< Yellow next engine params */
name|e_FmPcdEngine
name|nextEngineOnRed
decl_stmt|;
comment|/**< Red next engine type */
name|u_FmPcdPlcrNextEngineParams
name|paramsOnRed
decl_stmt|;
comment|/**< Red next engine params */
block|}
name|t_FmPcdPlcrProfile
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|t_FmPcdPlcrRegs
modifier|*
name|p_FmPcdPlcrRegs
decl_stmt|;
name|uint16_t
name|partPlcrProfilesBase
decl_stmt|;
name|uint16_t
name|partNumOfPlcrProfiles
decl_stmt|;
name|t_FmPcdPlcrProfile
name|profiles
index|[
name|FM_PCD_PLCR_NUM_ENTRIES
index|]
decl_stmt|;
name|uint16_t
name|numOfSharedProfiles
decl_stmt|;
name|uint16_t
name|sharedProfilesIds
index|[
name|FM_PCD_PLCR_NUM_ENTRIES
index|]
decl_stmt|;
name|t_FmPcdPlcrMapParam
name|portsMapping
index|[
name|FM_MAX_NUM_OF_PORTS
index|]
decl_stmt|;
name|t_Handle
name|h_HwSpinlock
decl_stmt|;
name|t_Handle
name|h_SwSpinlock
decl_stmt|;
block|}
name|t_FmPcdPlcr
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint32_t
modifier|*
name|p_SwPrsCode
decl_stmt|;
name|uint32_t
modifier|*
name|p_CurrSwPrs
decl_stmt|;
name|uint8_t
name|currLabel
decl_stmt|;
name|struct
name|fman_prs_regs
modifier|*
name|p_FmPcdPrsRegs
decl_stmt|;
name|t_FmPcdPrsLabelParams
name|labelsTable
index|[
name|FM_PCD_PRS_NUM_OF_LABELS
index|]
decl_stmt|;
name|uint32_t
name|fmPcdPrsPortIdStatistics
decl_stmt|;
block|}
name|t_FmPcdPrs
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
struct|struct
block|{
name|e_NetHeaderType
name|hdr
decl_stmt|;
name|protocolOpt_t
name|opt
decl_stmt|;
comment|/* only one option !! */
block|}
name|hdrs
index|[
name|FM_PCD_MAX_NUM_OF_INTERCHANGEABLE_HDRS
index|]
struct|;
block|}
name|t_FmPcdIntDistinctionUnit
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|e_NetHeaderType
name|hdr
decl_stmt|;
name|protocolOpt_t
name|opt
decl_stmt|;
comment|/* only one option !! */
name|e_NetHeaderType
name|aliasHdr
decl_stmt|;
block|}
name|t_FmPcdNetEnvAliases
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|uint8_t
name|netEnvId
decl_stmt|;
name|t_Handle
name|h_FmPcd
decl_stmt|;
name|t_Handle
name|h_Spinlock
decl_stmt|;
name|bool
name|used
decl_stmt|;
name|uint8_t
name|owners
decl_stmt|;
name|uint8_t
name|clsPlanGrpId
decl_stmt|;
name|t_FmPcdIntDistinctionUnit
name|units
index|[
name|FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS
index|]
decl_stmt|;
name|uint32_t
name|unitsVectors
index|[
name|FM_PCD_MAX_NUM_OF_DISTINCTION_UNITS
index|]
decl_stmt|;
name|uint32_t
name|lcvs
index|[
name|FM_PCD_PRS_NUM_OF_HDRS
index|]
decl_stmt|;
name|uint32_t
name|macsecVector
decl_stmt|;
name|t_FmPcdNetEnvAliases
name|aliasHdrs
index|[
name|FM_PCD_MAX_NUM_OF_ALIAS_HDRS
index|]
decl_stmt|;
block|}
name|t_FmPcdNetEnv
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|struct
name|fman_prs_cfg
name|dfltCfg
decl_stmt|;
name|bool
name|plcrAutoRefresh
decl_stmt|;
name|uint16_t
name|prsMaxParseCycleLimit
decl_stmt|;
block|}
name|t_FmPcdDriverParam
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|t_Handle
name|h_Fm
decl_stmt|;
name|t_Handle
name|h_FmMuram
decl_stmt|;
name|t_FmRevisionInfo
name|fmRevInfo
decl_stmt|;
name|uint64_t
name|physicalMuramBase
decl_stmt|;
name|t_Handle
name|h_Spinlock
decl_stmt|;
name|t_List
name|freeLocksLst
decl_stmt|;
name|t_List
name|acquiredLocksLst
decl_stmt|;
name|t_Handle
name|h_IpcSession
decl_stmt|;
comment|/* relevant for guest only */
name|bool
name|enabled
decl_stmt|;
name|uint8_t
name|guestId
decl_stmt|;
comment|/**< Guest Partition Id */
name|uint8_t
name|numOfEnabledGuestPartitionsPcds
decl_stmt|;
name|char
name|fmPcdModuleName
index|[
name|MODULE_NAME_SIZE
index|]
decl_stmt|;
name|char
name|fmPcdIpcHandlerModuleName
index|[
name|MODULE_NAME_SIZE
index|]
decl_stmt|;
comment|/* relevant for guest only - this is the master's name */
name|t_FmPcdNetEnv
name|netEnvs
index|[
name|FM_MAX_NUM_OF_PORTS
index|]
decl_stmt|;
name|t_FmPcdKg
modifier|*
name|p_FmPcdKg
decl_stmt|;
name|t_FmPcdPlcr
modifier|*
name|p_FmPcdPlcr
decl_stmt|;
name|t_FmPcdPrs
modifier|*
name|p_FmPcdPrs
decl_stmt|;
name|void
modifier|*
name|p_CcShadow
decl_stmt|;
comment|/**< CC MURAM shadow */
name|uint32_t
name|ccShadowSize
decl_stmt|;
name|uint32_t
name|ccShadowAlign
decl_stmt|;
specifier|volatile
name|bool
name|shadowLock
decl_stmt|;
name|t_Handle
name|h_ShadowSpinlock
decl_stmt|;
name|t_Handle
name|h_Hc
decl_stmt|;
name|uint32_t
name|exceptions
decl_stmt|;
name|t_FmPcdExceptionCallback
modifier|*
name|f_Exception
decl_stmt|;
name|t_FmPcdIdExceptionCallback
modifier|*
name|f_FmPcdIndexedException
decl_stmt|;
name|t_Handle
name|h_App
decl_stmt|;
name|uintptr_t
name|ipv6FrameIdAddr
decl_stmt|;
name|uintptr_t
name|capwapFrameIdAddr
decl_stmt|;
name|bool
name|advancedOffloadSupport
decl_stmt|;
name|t_FmPcdDriverParam
modifier|*
name|p_FmPcdDriverParam
decl_stmt|;
block|}
name|t_FmPcd
typedef|;
end_typedef

begin_if
if|#
directive|if
operator|(
name|DPAA_VERSION
operator|>=
literal|11
operator|)
end_if

begin_typedef
typedef|typedef
name|uint8_t
name|t_FmPcdFrmReplicUpdateType
typedef|;
end_typedef

begin_define
define|#
directive|define
name|FRM_REPLIC_UPDATE_COUNTER
value|0x01
end_define

begin_define
define|#
directive|define
name|FRM_REPLIC_UPDATE_INFO
value|0x02
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* (DPAA_VERSION>= 11) */
end_comment

begin_comment
comment|/***********************************************************************/
end_comment

begin_comment
comment|/*  PCD internal routines                                              */
end_comment

begin_comment
comment|/***********************************************************************/
end_comment

begin_function_decl
name|t_Error
name|PcdGetVectorForOpt
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint8_t
name|netEnvId
parameter_list|,
name|protocolOpt_t
name|opt
parameter_list|,
name|uint32_t
modifier|*
name|p_Vector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|PcdGetUnitsVector
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|t_NetEnvParams
modifier|*
name|p_Params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|PcdNetEnvIsUnitWithoutOpts
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint8_t
name|netEnvId
parameter_list|,
name|uint32_t
name|unitVector
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|PcdGetClsPlanGrpParams
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|t_FmPcdKgInterModuleClsPlanGrpParams
modifier|*
name|p_GrpParams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FmPcdSetClsPlanGrpId
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint8_t
name|netEnvId
parameter_list|,
name|uint8_t
name|clsPlanGrpId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|e_NetHeaderType
name|FmPcdGetAliasHdr
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint8_t
name|netEnvId
parameter_list|,
name|e_NetHeaderType
name|hdr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
name|FmPcdNetEnvGetUnitIdForSingleHdr
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint8_t
name|netEnvId
parameter_list|,
name|e_NetHeaderType
name|hdr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
name|FmPcdNetEnvGetUnitId
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint8_t
name|netEnvId
parameter_list|,
name|e_NetHeaderType
name|hdr
parameter_list|,
name|bool
name|interchangeable
parameter_list|,
name|protocolOpt_t
name|opt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|FmPcdManipBuildIpReassmScheme
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|t_Handle
name|h_NetEnv
parameter_list|,
name|t_Handle
name|h_CcTree
parameter_list|,
name|t_Handle
name|h_Manip
parameter_list|,
name|bool
name|isIpv4
parameter_list|,
name|uint8_t
name|groupId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|FmPcdManipDeleteIpReassmSchemes
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|FmPcdManipBuildCapwapReassmScheme
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|t_Handle
name|h_NetEnv
parameter_list|,
name|t_Handle
name|h_CcTree
parameter_list|,
name|t_Handle
name|h_Manip
parameter_list|,
name|uint8_t
name|groupId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|FmPcdManipDeleteCapwapReassmSchemes
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|FmPcdManipIpReassmIsIpv6Hdr
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Handle
name|KgConfig
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|t_FmPcdParams
modifier|*
name|p_FmPcdParams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|KgInit
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|KgFree
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|KgSetClsPlan
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|,
name|t_FmPcdKgInterModuleClsPlanSet
modifier|*
name|p_Set
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|KgIsSchemeAlwaysDirect
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|,
name|uint8_t
name|schemeId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|KgEnable
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|KgDisable
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|KgAllocClsPlanEntries
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|,
name|uint16_t
name|numOfClsPlanEntries
parameter_list|,
name|uint8_t
name|guestId
parameter_list|,
name|uint8_t
modifier|*
name|p_First
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|KgFreeClsPlanEntries
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|,
name|uint16_t
name|numOfClsPlanEntries
parameter_list|,
name|uint8_t
name|guestId
parameter_list|,
name|uint8_t
name|base
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* only for MULTI partittion */
end_comment

begin_function_decl
name|t_Error
name|FmPcdKgAllocSchemes
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|,
name|uint8_t
name|numOfSchemes
parameter_list|,
name|uint8_t
name|guestId
parameter_list|,
name|uint8_t
modifier|*
name|p_SchemesIds
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|FmPcdKgFreeSchemes
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|,
name|uint8_t
name|numOfSchemes
parameter_list|,
name|uint8_t
name|guestId
parameter_list|,
name|uint8_t
modifier|*
name|p_SchemesIds
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* only for SINGLE partittion */
end_comment

begin_function_decl
name|t_Error
name|KgBindPortToSchemes
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|,
name|uint8_t
name|hardwarePortId
parameter_list|,
name|uint32_t
name|spReg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_FmPcdLock
modifier|*
name|FmPcdAcquireLock
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FmPcdReleaseLock
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|,
name|t_FmPcdLock
modifier|*
name|p_Lock
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Handle
name|PlcrConfig
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|t_FmPcdParams
modifier|*
name|p_FmPcdParams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|PlcrInit
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|PlcrFree
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PlcrEnable
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PlcrDisable
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint16_t
name|PlcrAllocProfilesForPartition
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint16_t
name|base
parameter_list|,
name|uint16_t
name|numOfProfiles
parameter_list|,
name|uint8_t
name|guestId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PlcrFreeProfilesForPartition
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint16_t
name|base
parameter_list|,
name|uint16_t
name|numOfProfiles
parameter_list|,
name|uint8_t
name|guestId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|PlcrSetPortProfiles
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint8_t
name|hardwarePortId
parameter_list|,
name|uint16_t
name|numOfProfiles
parameter_list|,
name|uint16_t
name|base
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|PlcrClearPortProfiles
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint8_t
name|hardwarePortId
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Handle
name|PrsConfig
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|t_FmPcdParams
modifier|*
name|p_FmPcdParams
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|PrsInit
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PrsEnable
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PrsDisable
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PrsFree
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|PrsIncludePortInStatistics
parameter_list|(
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|,
name|uint8_t
name|hardwarePortId
parameter_list|,
name|bool
name|include
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|FmPcdCcGetGrpParams
parameter_list|(
name|t_Handle
name|treeId
parameter_list|,
name|uint8_t
name|grpId
parameter_list|,
name|uint32_t
modifier|*
name|p_GrpBits
parameter_list|,
name|uint8_t
modifier|*
name|p_GrpBase
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
name|FmPcdCcGetOffset
parameter_list|(
name|t_Handle
name|h_CcNode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
name|FmPcdCcGetParseCode
parameter_list|(
name|t_Handle
name|h_CcNode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint16_t
name|FmPcdCcGetNumOfKeys
parameter_list|(
name|t_Handle
name|h_CcNode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|ValidateNextEngineParams
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|,
name|t_FmPcdCcNextEngineParams
modifier|*
name|p_FmPcdCcNextEngineParams
parameter_list|,
name|e_FmPcdCcStatsMode
name|supportedStatsMode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FmPcdManipUpdateOwner
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|,
name|bool
name|add
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|FmPcdManipCheckParamsForCcNextEngine
parameter_list|(
name|t_FmPcdCcNextEngineParams
modifier|*
name|p_InfoForManip
parameter_list|,
name|uint32_t
modifier|*
name|requiredAction
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FmPcdManipUpdateAdResultForCc
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|,
name|t_FmPcdCcNextEngineParams
modifier|*
name|p_CcNextEngineParams
parameter_list|,
name|t_Handle
name|p_Ad
parameter_list|,
name|t_Handle
modifier|*
name|p_AdNewPtr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FmPcdManipUpdateAdContLookupForCc
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|,
name|t_Handle
name|p_Ad
parameter_list|,
name|t_Handle
modifier|*
name|p_AdNew
parameter_list|,
name|uint32_t
name|adTableOffset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FmPcdManipUpdateOwner
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|,
name|bool
name|add
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_Error
name|FmPcdManipCheckParamsWithCcNodeParams
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|,
name|t_Handle
name|h_FmPcdCcNode
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|FM_CAPWAP_SUPPORT
end_ifdef

begin_function_decl
name|t_Handle
name|FmPcdManipApplSpecificBuild
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|FmPcdManipIsCapwapApplSpecific
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* FM_CAPWAP_SUPPORT */
end_comment

begin_if
if|#
directive|if
operator|(
name|DPAA_VERSION
operator|>=
literal|11
operator|)
end_if

begin_function_decl
name|void
modifier|*
name|FrmReplicGroupGetSourceTableDescriptor
parameter_list|(
name|t_Handle
name|h_ReplicGroup
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FrmReplicGroupUpdateOwner
parameter_list|(
name|t_Handle
name|h_ReplicGroup
parameter_list|,
name|bool
name|add
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FrmReplicGroupUpdateAd
parameter_list|(
name|t_Handle
name|h_ReplicGroup
parameter_list|,
name|void
modifier|*
name|p_Ad
parameter_list|,
name|t_Handle
modifier|*
name|h_AdNew
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FmPcdCcGetAdTablesThatPointOnReplicGroup
parameter_list|(
name|t_Handle
name|h_Node
parameter_list|,
name|t_Handle
name|h_ReplicGroup
parameter_list|,
name|t_List
modifier|*
name|p_AdTables
parameter_list|,
name|uint32_t
modifier|*
name|p_NumOfAdTables
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* (DPAA_VERSION>= 11) */
end_comment

begin_function_decl
name|void
name|EnqueueNodeInfoToRelevantLst
parameter_list|(
name|t_List
modifier|*
name|p_List
parameter_list|,
name|t_CcNodeInformation
modifier|*
name|p_CcInfo
parameter_list|,
name|t_Handle
name|h_Spinlock
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|DequeueNodeInfoFromRelevantLst
parameter_list|(
name|t_List
modifier|*
name|p_List
parameter_list|,
name|t_Handle
name|h_Info
parameter_list|,
name|t_Handle
name|h_Spinlock
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_CcNodeInformation
modifier|*
name|FindNodeInfoInReleventLst
parameter_list|(
name|t_List
modifier|*
name|p_List
parameter_list|,
name|t_Handle
name|h_Info
parameter_list|,
name|t_Handle
name|h_Spinlock
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_List
modifier|*
name|FmPcdManipGetSpinlock
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|t_List
modifier|*
name|FmPcdManipGetNodeLstPointedOnThisManip
parameter_list|(
name|t_Handle
name|h_Manip
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
struct|struct
block|{
name|t_Handle
name|h_StatsAd
decl_stmt|;
name|t_Handle
name|h_StatsCounters
decl_stmt|;
if|#
directive|if
operator|(
name|DPAA_VERSION
operator|>=
literal|11
operator|)
name|t_Handle
name|h_StatsFLRs
decl_stmt|;
endif|#
directive|endif
comment|/* (DPAA_VERSION>= 11) */
block|}
name|t_FmPcdCcStatsParams
typedef|;
end_typedef

begin_function_decl
name|void
name|NextStepAd
parameter_list|(
name|t_Handle
name|h_Ad
parameter_list|,
name|t_FmPcdCcStatsParams
modifier|*
name|p_FmPcdCcStatsParams
parameter_list|,
name|t_FmPcdCcNextEngineParams
modifier|*
name|p_FmPcdCcNextEngineParams
parameter_list|,
name|t_FmPcd
modifier|*
name|p_FmPcd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ReleaseLst
parameter_list|(
name|t_List
modifier|*
name|p_List
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline__
name|t_Handle
name|FmPcdGetMuramHandle
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|)
block|{
name|t_FmPcd
modifier|*
name|p_FmPcd
init|=
operator|(
name|t_FmPcd
operator|*
operator|)
name|h_FmPcd
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|p_FmPcd
argument_list|)
expr_stmt|;
return|return
name|p_FmPcd
operator|->
name|h_FmMuram
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint64_t
name|FmPcdGetMuramPhysBase
parameter_list|(
name|t_Handle
name|h_FmPcd
parameter_list|)
block|{
name|t_FmPcd
modifier|*
name|p_FmPcd
init|=
operator|(
name|t_FmPcd
operator|*
operator|)
name|h_FmPcd
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|p_FmPcd
argument_list|)
expr_stmt|;
return|return
name|p_FmPcd
operator|->
name|physicalMuramBase
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint32_t
name|FmPcdLockSpinlock
parameter_list|(
name|t_FmPcdLock
modifier|*
name|p_Lock
parameter_list|)
block|{
name|ASSERT_COND
argument_list|(
name|p_Lock
argument_list|)
expr_stmt|;
return|return
name|XX_LockIntrSpinlock
argument_list|(
name|p_Lock
operator|->
name|h_Spinlock
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|FmPcdUnlockSpinlock
parameter_list|(
name|t_FmPcdLock
modifier|*
name|p_Lock
parameter_list|,
name|uint32_t
name|flags
parameter_list|)
block|{
name|ASSERT_COND
argument_list|(
name|p_Lock
argument_list|)
expr_stmt|;
name|XX_UnlockIntrSpinlock
argument_list|(
name|p_Lock
operator|->
name|h_Spinlock
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|bool
name|FmPcdLockTryLock
parameter_list|(
name|t_FmPcdLock
modifier|*
name|p_Lock
parameter_list|)
block|{
name|uint32_t
name|intFlags
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|p_Lock
argument_list|)
expr_stmt|;
name|intFlags
operator|=
name|XX_LockIntrSpinlock
argument_list|(
name|p_Lock
operator|->
name|h_Spinlock
argument_list|)
expr_stmt|;
if|if
condition|(
name|p_Lock
operator|->
name|flag
condition|)
block|{
name|XX_UnlockIntrSpinlock
argument_list|(
name|p_Lock
operator|->
name|h_Spinlock
argument_list|,
name|intFlags
argument_list|)
expr_stmt|;
return|return
name|FALSE
return|;
block|}
name|p_Lock
operator|->
name|flag
operator|=
name|TRUE
expr_stmt|;
name|XX_UnlockIntrSpinlock
argument_list|(
name|p_Lock
operator|->
name|h_Spinlock
argument_list|,
name|intFlags
argument_list|)
expr_stmt|;
return|return
name|TRUE
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|FmPcdLockUnlock
parameter_list|(
name|t_FmPcdLock
modifier|*
name|p_Lock
parameter_list|)
block|{
name|ASSERT_COND
argument_list|(
name|p_Lock
argument_list|)
expr_stmt|;
name|p_Lock
operator|->
name|flag
operator|=
name|FALSE
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FM_PCD_H */
end_comment

end_unit

