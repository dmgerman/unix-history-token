begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2008-2012 Freescale Semiconductor Inc.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *     * Redistributions of source code must retain the above copyright  *       notice, this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *     * Neither the name of Freescale Semiconductor nor the  *       names of its contributors may be used to endorse or promote products  *       derived from this software without specific prior written permission.  *  *  * ALTERNATIVELY, this software may be distributed under the terms of the  * GNU General Public License ("GPL") as published by the Free Software  * Foundation, either version 2 of that License or (at your option) any  * later version.  *  * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/**************************************************************************/
end_comment

begin_comment
comment|/**  @File          crc64.h   @Description   brief This file contains the CRC64 Table, and __inline__                 functions used for calculating crc. */
end_comment

begin_comment
comment|/***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CRC64_H
end_ifndef

begin_define
define|#
directive|define
name|__CRC64_H
end_define

begin_include
include|#
directive|include
file|"std_ext.h"
end_include

begin_define
define|#
directive|define
name|BITS_PER_BYTE
value|8
end_define

begin_define
define|#
directive|define
name|CRC64_EXPON_ECMA_182
value|0xC96C5795D7870F42ULL
end_define

begin_define
define|#
directive|define
name|CRC64_DEFAULT_INITVAL
value|0xFFFFFFFFFFFFFFFFULL
end_define

begin_define
define|#
directive|define
name|CRC64_BYTE_MASK
value|0xFF
end_define

begin_define
define|#
directive|define
name|CRC64_TABLE_ENTRIES
value|( 1<< BITS_PER_BYTE )
end_define

begin_define
define|#
directive|define
name|CRC64_ODD_MASK
value|1
end_define

begin_comment
comment|/**  \brief '64 bit crc' Table  */
end_comment

begin_struct
struct|struct
name|crc64_t
block|{
name|uint64_t
name|initial
decl_stmt|;
comment|/**< Initial seed */
name|uint64_t
name|table
index|[
name|CRC64_TABLE_ENTRIES
index|]
decl_stmt|;
comment|/**< CRC table entries */
block|}
struct|;
end_struct

begin_decl_stmt
specifier|static
name|struct
name|crc64_t
name|CRC64_ECMA_182
init|=
block|{
name|CRC64_DEFAULT_INITVAL
block|,
block|{
literal|0x0000000000000000ULL
block|,
literal|0xb32e4cbe03a75f6fULL
block|,
literal|0xf4843657a840a05bULL
block|,
literal|0x47aa7ae9abe7ff34ULL
block|,
literal|0x7bd0c384ff8f5e33ULL
block|,
literal|0xc8fe8f3afc28015cULL
block|,
literal|0x8f54f5d357cffe68ULL
block|,
literal|0x3c7ab96d5468a107ULL
block|,
literal|0xf7a18709ff1ebc66ULL
block|,
literal|0x448fcbb7fcb9e309ULL
block|,
literal|0x0325b15e575e1c3dULL
block|,
literal|0xb00bfde054f94352ULL
block|,
literal|0x8c71448d0091e255ULL
block|,
literal|0x3f5f08330336bd3aULL
block|,
literal|0x78f572daa8d1420eULL
block|,
literal|0xcbdb3e64ab761d61ULL
block|,
literal|0x7d9ba13851336649ULL
block|,
literal|0xceb5ed8652943926ULL
block|,
literal|0x891f976ff973c612ULL
block|,
literal|0x3a31dbd1fad4997dULL
block|,
literal|0x064b62bcaebc387aULL
block|,
literal|0xb5652e02ad1b6715ULL
block|,
literal|0xf2cf54eb06fc9821ULL
block|,
literal|0x41e11855055bc74eULL
block|,
literal|0x8a3a2631ae2dda2fULL
block|,
literal|0x39146a8fad8a8540ULL
block|,
literal|0x7ebe1066066d7a74ULL
block|,
literal|0xcd905cd805ca251bULL
block|,
literal|0xf1eae5b551a2841cULL
block|,
literal|0x42c4a90b5205db73ULL
block|,
literal|0x056ed3e2f9e22447ULL
block|,
literal|0xb6409f5cfa457b28ULL
block|,
literal|0xfb374270a266cc92ULL
block|,
literal|0x48190ecea1c193fdULL
block|,
literal|0x0fb374270a266cc9ULL
block|,
literal|0xbc9d3899098133a6ULL
block|,
literal|0x80e781f45de992a1ULL
block|,
literal|0x33c9cd4a5e4ecdceULL
block|,
literal|0x7463b7a3f5a932faULL
block|,
literal|0xc74dfb1df60e6d95ULL
block|,
literal|0x0c96c5795d7870f4ULL
block|,
literal|0xbfb889c75edf2f9bULL
block|,
literal|0xf812f32ef538d0afULL
block|,
literal|0x4b3cbf90f69f8fc0ULL
block|,
literal|0x774606fda2f72ec7ULL
block|,
literal|0xc4684a43a15071a8ULL
block|,
literal|0x83c230aa0ab78e9cULL
block|,
literal|0x30ec7c140910d1f3ULL
block|,
literal|0x86ace348f355aadbULL
block|,
literal|0x3582aff6f0f2f5b4ULL
block|,
literal|0x7228d51f5b150a80ULL
block|,
literal|0xc10699a158b255efULL
block|,
literal|0xfd7c20cc0cdaf4e8ULL
block|,
literal|0x4e526c720f7dab87ULL
block|,
literal|0x09f8169ba49a54b3ULL
block|,
literal|0xbad65a25a73d0bdcULL
block|,
literal|0x710d64410c4b16bdULL
block|,
literal|0xc22328ff0fec49d2ULL
block|,
literal|0x85895216a40bb6e6ULL
block|,
literal|0x36a71ea8a7ace989ULL
block|,
literal|0x0adda7c5f3c4488eULL
block|,
literal|0xb9f3eb7bf06317e1ULL
block|,
literal|0xfe5991925b84e8d5ULL
block|,
literal|0x4d77dd2c5823b7baULL
block|,
literal|0x64b62bcaebc387a1ULL
block|,
literal|0xd7986774e864d8ceULL
block|,
literal|0x90321d9d438327faULL
block|,
literal|0x231c512340247895ULL
block|,
literal|0x1f66e84e144cd992ULL
block|,
literal|0xac48a4f017eb86fdULL
block|,
literal|0xebe2de19bc0c79c9ULL
block|,
literal|0x58cc92a7bfab26a6ULL
block|,
literal|0x9317acc314dd3bc7ULL
block|,
literal|0x2039e07d177a64a8ULL
block|,
literal|0x67939a94bc9d9b9cULL
block|,
literal|0xd4bdd62abf3ac4f3ULL
block|,
literal|0xe8c76f47eb5265f4ULL
block|,
literal|0x5be923f9e8f53a9bULL
block|,
literal|0x1c4359104312c5afULL
block|,
literal|0xaf6d15ae40b59ac0ULL
block|,
literal|0x192d8af2baf0e1e8ULL
block|,
literal|0xaa03c64cb957be87ULL
block|,
literal|0xeda9bca512b041b3ULL
block|,
literal|0x5e87f01b11171edcULL
block|,
literal|0x62fd4976457fbfdbULL
block|,
literal|0xd1d305c846d8e0b4ULL
block|,
literal|0x96797f21ed3f1f80ULL
block|,
literal|0x2557339fee9840efULL
block|,
literal|0xee8c0dfb45ee5d8eULL
block|,
literal|0x5da24145464902e1ULL
block|,
literal|0x1a083bacedaefdd5ULL
block|,
literal|0xa9267712ee09a2baULL
block|,
literal|0x955cce7fba6103bdULL
block|,
literal|0x267282c1b9c65cd2ULL
block|,
literal|0x61d8f8281221a3e6ULL
block|,
literal|0xd2f6b4961186fc89ULL
block|,
literal|0x9f8169ba49a54b33ULL
block|,
literal|0x2caf25044a02145cULL
block|,
literal|0x6b055fede1e5eb68ULL
block|,
literal|0xd82b1353e242b407ULL
block|,
literal|0xe451aa3eb62a1500ULL
block|,
literal|0x577fe680b58d4a6fULL
block|,
literal|0x10d59c691e6ab55bULL
block|,
literal|0xa3fbd0d71dcdea34ULL
block|,
literal|0x6820eeb3b6bbf755ULL
block|,
literal|0xdb0ea20db51ca83aULL
block|,
literal|0x9ca4d8e41efb570eULL
block|,
literal|0x2f8a945a1d5c0861ULL
block|,
literal|0x13f02d374934a966ULL
block|,
literal|0xa0de61894a93f609ULL
block|,
literal|0xe7741b60e174093dULL
block|,
literal|0x545a57dee2d35652ULL
block|,
literal|0xe21ac88218962d7aULL
block|,
literal|0x5134843c1b317215ULL
block|,
literal|0x169efed5b0d68d21ULL
block|,
literal|0xa5b0b26bb371d24eULL
block|,
literal|0x99ca0b06e7197349ULL
block|,
literal|0x2ae447b8e4be2c26ULL
block|,
literal|0x6d4e3d514f59d312ULL
block|,
literal|0xde6071ef4cfe8c7dULL
block|,
literal|0x15bb4f8be788911cULL
block|,
literal|0xa6950335e42fce73ULL
block|,
literal|0xe13f79dc4fc83147ULL
block|,
literal|0x521135624c6f6e28ULL
block|,
literal|0x6e6b8c0f1807cf2fULL
block|,
literal|0xdd45c0b11ba09040ULL
block|,
literal|0x9aefba58b0476f74ULL
block|,
literal|0x29c1f6e6b3e0301bULL
block|,
literal|0xc96c5795d7870f42ULL
block|,
literal|0x7a421b2bd420502dULL
block|,
literal|0x3de861c27fc7af19ULL
block|,
literal|0x8ec62d7c7c60f076ULL
block|,
literal|0xb2bc941128085171ULL
block|,
literal|0x0192d8af2baf0e1eULL
block|,
literal|0x4638a2468048f12aULL
block|,
literal|0xf516eef883efae45ULL
block|,
literal|0x3ecdd09c2899b324ULL
block|,
literal|0x8de39c222b3eec4bULL
block|,
literal|0xca49e6cb80d9137fULL
block|,
literal|0x7967aa75837e4c10ULL
block|,
literal|0x451d1318d716ed17ULL
block|,
literal|0xf6335fa6d4b1b278ULL
block|,
literal|0xb199254f7f564d4cULL
block|,
literal|0x02b769f17cf11223ULL
block|,
literal|0xb4f7f6ad86b4690bULL
block|,
literal|0x07d9ba1385133664ULL
block|,
literal|0x4073c0fa2ef4c950ULL
block|,
literal|0xf35d8c442d53963fULL
block|,
literal|0xcf273529793b3738ULL
block|,
literal|0x7c0979977a9c6857ULL
block|,
literal|0x3ba3037ed17b9763ULL
block|,
literal|0x888d4fc0d2dcc80cULL
block|,
literal|0x435671a479aad56dULL
block|,
literal|0xf0783d1a7a0d8a02ULL
block|,
literal|0xb7d247f3d1ea7536ULL
block|,
literal|0x04fc0b4dd24d2a59ULL
block|,
literal|0x3886b22086258b5eULL
block|,
literal|0x8ba8fe9e8582d431ULL
block|,
literal|0xcc0284772e652b05ULL
block|,
literal|0x7f2cc8c92dc2746aULL
block|,
literal|0x325b15e575e1c3d0ULL
block|,
literal|0x8175595b76469cbfULL
block|,
literal|0xc6df23b2dda1638bULL
block|,
literal|0x75f16f0cde063ce4ULL
block|,
literal|0x498bd6618a6e9de3ULL
block|,
literal|0xfaa59adf89c9c28cULL
block|,
literal|0xbd0fe036222e3db8ULL
block|,
literal|0x0e21ac88218962d7ULL
block|,
literal|0xc5fa92ec8aff7fb6ULL
block|,
literal|0x76d4de52895820d9ULL
block|,
literal|0x317ea4bb22bfdfedULL
block|,
literal|0x8250e80521188082ULL
block|,
literal|0xbe2a516875702185ULL
block|,
literal|0x0d041dd676d77eeaULL
block|,
literal|0x4aae673fdd3081deULL
block|,
literal|0xf9802b81de97deb1ULL
block|,
literal|0x4fc0b4dd24d2a599ULL
block|,
literal|0xfceef8632775faf6ULL
block|,
literal|0xbb44828a8c9205c2ULL
block|,
literal|0x086ace348f355aadULL
block|,
literal|0x34107759db5dfbaaULL
block|,
literal|0x873e3be7d8faa4c5ULL
block|,
literal|0xc094410e731d5bf1ULL
block|,
literal|0x73ba0db070ba049eULL
block|,
literal|0xb86133d4dbcc19ffULL
block|,
literal|0x0b4f7f6ad86b4690ULL
block|,
literal|0x4ce50583738cb9a4ULL
block|,
literal|0xffcb493d702be6cbULL
block|,
literal|0xc3b1f050244347ccULL
block|,
literal|0x709fbcee27e418a3ULL
block|,
literal|0x3735c6078c03e797ULL
block|,
literal|0x841b8ab98fa4b8f8ULL
block|,
literal|0xadda7c5f3c4488e3ULL
block|,
literal|0x1ef430e13fe3d78cULL
block|,
literal|0x595e4a08940428b8ULL
block|,
literal|0xea7006b697a377d7ULL
block|,
literal|0xd60abfdbc3cbd6d0ULL
block|,
literal|0x6524f365c06c89bfULL
block|,
literal|0x228e898c6b8b768bULL
block|,
literal|0x91a0c532682c29e4ULL
block|,
literal|0x5a7bfb56c35a3485ULL
block|,
literal|0xe955b7e8c0fd6beaULL
block|,
literal|0xaeffcd016b1a94deULL
block|,
literal|0x1dd181bf68bdcbb1ULL
block|,
literal|0x21ab38d23cd56ab6ULL
block|,
literal|0x9285746c3f7235d9ULL
block|,
literal|0xd52f0e859495caedULL
block|,
literal|0x6601423b97329582ULL
block|,
literal|0xd041dd676d77eeaaULL
block|,
literal|0x636f91d96ed0b1c5ULL
block|,
literal|0x24c5eb30c5374ef1ULL
block|,
literal|0x97eba78ec690119eULL
block|,
literal|0xab911ee392f8b099ULL
block|,
literal|0x18bf525d915feff6ULL
block|,
literal|0x5f1528b43ab810c2ULL
block|,
literal|0xec3b640a391f4fadULL
block|,
literal|0x27e05a6e926952ccULL
block|,
literal|0x94ce16d091ce0da3ULL
block|,
literal|0xd3646c393a29f297ULL
block|,
literal|0x604a2087398eadf8ULL
block|,
literal|0x5c3099ea6de60cffULL
block|,
literal|0xef1ed5546e415390ULL
block|,
literal|0xa8b4afbdc5a6aca4ULL
block|,
literal|0x1b9ae303c601f3cbULL
block|,
literal|0x56ed3e2f9e224471ULL
block|,
literal|0xe5c372919d851b1eULL
block|,
literal|0xa26908783662e42aULL
block|,
literal|0x114744c635c5bb45ULL
block|,
literal|0x2d3dfdab61ad1a42ULL
block|,
literal|0x9e13b115620a452dULL
block|,
literal|0xd9b9cbfcc9edba19ULL
block|,
literal|0x6a978742ca4ae576ULL
block|,
literal|0xa14cb926613cf817ULL
block|,
literal|0x1262f598629ba778ULL
block|,
literal|0x55c88f71c97c584cULL
block|,
literal|0xe6e6c3cfcadb0723ULL
block|,
literal|0xda9c7aa29eb3a624ULL
block|,
literal|0x69b2361c9d14f94bULL
block|,
literal|0x2e184cf536f3067fULL
block|,
literal|0x9d36004b35545910ULL
block|,
literal|0x2b769f17cf112238ULL
block|,
literal|0x9858d3a9ccb67d57ULL
block|,
literal|0xdff2a94067518263ULL
block|,
literal|0x6cdce5fe64f6dd0cULL
block|,
literal|0x50a65c93309e7c0bULL
block|,
literal|0xe388102d33392364ULL
block|,
literal|0xa4226ac498dedc50ULL
block|,
literal|0x170c267a9b79833fULL
block|,
literal|0xdcd7181e300f9e5eULL
block|,
literal|0x6ff954a033a8c131ULL
block|,
literal|0x28532e49984f3e05ULL
block|,
literal|0x9b7d62f79be8616aULL
block|,
literal|0xa707db9acf80c06dULL
block|,
literal|0x14299724cc279f02ULL
block|,
literal|0x5383edcd67c06036ULL
block|,
literal|0xe0ada17364673f59ULL
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**  \brief Initializes the crc seed  */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|crc64_init
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|CRC64_ECMA_182
operator|.
name|initial
return|;
block|}
end_function

begin_comment
comment|/**  \brief Computes 64 bit the crc  \param[in] data Pointer to the Data in the frame  \param[in] len Length of the Data  \param[in] crc seed  \return calculated crc  */
end_comment

begin_function
specifier|static
name|__inline__
name|uint64_t
name|crc64_compute
parameter_list|(
name|void
specifier|const
modifier|*
name|data
parameter_list|,
name|uint32_t
name|len
parameter_list|,
name|uint64_t
name|seed
parameter_list|)
block|{
name|uint32_t
name|i
decl_stmt|;
name|uint64_t
name|crc
init|=
name|seed
decl_stmt|;
name|uint8_t
modifier|*
name|bdata
init|=
operator|(
name|uint8_t
operator|*
operator|)
name|data
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
name|crc
operator|=
name|CRC64_ECMA_182
operator|.
name|table
index|[
operator|(
name|crc
operator|^
operator|*
name|bdata
operator|++
operator|)
operator|&
name|CRC64_BYTE_MASK
index|]
operator|^
operator|(
name|crc
operator|>>
literal|8
operator|)
expr_stmt|;
return|return
name|crc
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CRC64_H */
end_comment

end_unit

