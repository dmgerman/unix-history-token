begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************   Â© 1995-2003, 2004, 2005-2011 Freescale Semiconductor, Inc.  All rights reserved.   This is proprietary source code of Freescale Semiconductor Inc.,  and its use is subject to the NetComm Device Drivers EULA.  The copyright notice above does not evidence any actual or intended  publication of such source code.   ALTERNATIVELY, redistribution and use in source and binary forms, with  or without modification, are permitted provided that the following  conditions are met:      * Redistributions of source code must retain the above copyright        notice, this list of conditions and the following disclaimer.      * Redistributions in binary form must reproduce the above copyright        notice, this list of conditions and the following disclaimer in the        documentation and/or other materials provided with the distribution.      * Neither the name of Freescale Semiconductor nor the        names of its contributors may be used to endorse or promote products        derived from this software without specific prior written permission.   THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *   **************************************************************************/
end_comment

begin_comment
comment|/******************************************************************************  @File          qman_low.c   @Description   QM Low-level implementation */
end_comment

begin_comment
comment|/***************************************************************************/
end_comment

begin_include
include|#
directive|include
file|"std_ext.h"
end_include

begin_include
include|#
directive|include
file|"core_ext.h"
end_include

begin_include
include|#
directive|include
file|"xx_ext.h"
end_include

begin_include
include|#
directive|include
file|"error_ext.h"
end_include

begin_include
include|#
directive|include
file|"qman_private.h"
end_include

begin_comment
comment|/***************************/
end_comment

begin_comment
comment|/* Portal register assists */
end_comment

begin_comment
comment|/***************************/
end_comment

begin_comment
comment|/* Cache-inhibited register offsets */
end_comment

begin_define
define|#
directive|define
name|REG_EQCR_PI_CINH
value|(void *)0x0000
end_define

begin_define
define|#
directive|define
name|REG_EQCR_CI_CINH
value|(void *)0x0004
end_define

begin_define
define|#
directive|define
name|REG_EQCR_ITR
value|(void *)0x0008
end_define

begin_define
define|#
directive|define
name|REG_DQRR_PI_CINH
value|(void *)0x0040
end_define

begin_define
define|#
directive|define
name|REG_DQRR_CI_CINH
value|(void *)0x0044
end_define

begin_define
define|#
directive|define
name|REG_DQRR_ITR
value|(void *)0x0048
end_define

begin_define
define|#
directive|define
name|REG_DQRR_DCAP
value|(void *)0x0050
end_define

begin_define
define|#
directive|define
name|REG_DQRR_SDQCR
value|(void *)0x0054
end_define

begin_define
define|#
directive|define
name|REG_DQRR_VDQCR
value|(void *)0x0058
end_define

begin_define
define|#
directive|define
name|REG_DQRR_PDQCR
value|(void *)0x005c
end_define

begin_define
define|#
directive|define
name|REG_MR_PI_CINH
value|(void *)0x0080
end_define

begin_define
define|#
directive|define
name|REG_MR_CI_CINH
value|(void *)0x0084
end_define

begin_define
define|#
directive|define
name|REG_MR_ITR
value|(void *)0x0088
end_define

begin_define
define|#
directive|define
name|REG_CFG
value|(void *)0x0100
end_define

begin_define
define|#
directive|define
name|REG_ISR
value|(void *)0x0e00
end_define

begin_define
define|#
directive|define
name|REG_IER
value|(void *)0x0e04
end_define

begin_define
define|#
directive|define
name|REG_ISDR
value|(void *)0x0e08
end_define

begin_define
define|#
directive|define
name|REG_IIR
value|(void *)0x0e0c
end_define

begin_define
define|#
directive|define
name|REG_ITPR
value|(void *)0x0e14
end_define

begin_comment
comment|/* Cache-enabled register offsets */
end_comment

begin_define
define|#
directive|define
name|CL_EQCR
value|(void *)0x0000
end_define

begin_define
define|#
directive|define
name|CL_DQRR
value|(void *)0x1000
end_define

begin_define
define|#
directive|define
name|CL_MR
value|(void *)0x2000
end_define

begin_define
define|#
directive|define
name|CL_EQCR_PI_CENA
value|(void *)0x3000
end_define

begin_define
define|#
directive|define
name|CL_EQCR_CI_CENA
value|(void *)0x3100
end_define

begin_define
define|#
directive|define
name|CL_DQRR_PI_CENA
value|(void *)0x3200
end_define

begin_define
define|#
directive|define
name|CL_DQRR_CI_CENA
value|(void *)0x3300
end_define

begin_define
define|#
directive|define
name|CL_MR_PI_CENA
value|(void *)0x3400
end_define

begin_define
define|#
directive|define
name|CL_MR_CI_CENA
value|(void *)0x3500
end_define

begin_define
define|#
directive|define
name|CL_RORI_CENA
value|(void *)0x3600
end_define

begin_define
define|#
directive|define
name|CL_CR
value|(void *)0x3800
end_define

begin_define
define|#
directive|define
name|CL_RR0
value|(void *)0x3900
end_define

begin_define
define|#
directive|define
name|CL_RR1
value|(void *)0x3940
end_define

begin_function
specifier|static
name|__inline__
name|void
modifier|*
name|ptr_ADD
parameter_list|(
name|void
modifier|*
name|a
parameter_list|,
name|void
modifier|*
name|b
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|a
operator|+
operator|(
name|uintptr_t
operator|)
name|b
operator|)
return|;
block|}
end_function

begin_comment
comment|/* The h/w design requires mappings to be size-aligned so that "add"s can be  * reduced to "or"s. The primitives below do the same for s/w. */
end_comment

begin_comment
comment|/* Bitwise-OR two pointers */
end_comment

begin_function
specifier|static
name|__inline__
name|void
modifier|*
name|ptr_OR
parameter_list|(
name|void
modifier|*
name|a
parameter_list|,
name|void
modifier|*
name|b
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|a
operator|+
operator|(
name|uintptr_t
operator|)
name|b
operator|)
return|;
block|}
end_function

begin_comment
comment|/* Cache-inhibited register access */
end_comment

begin_function
specifier|static
name|__inline__
name|uint32_t
name|__qm_in
parameter_list|(
name|struct
name|qm_addr
modifier|*
name|qm
parameter_list|,
name|void
modifier|*
name|offset
parameter_list|)
block|{
name|uint32_t
modifier|*
name|tmp
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|ptr_ADD
argument_list|(
name|qm
operator|->
name|addr_ci
argument_list|,
name|offset
argument_list|)
decl_stmt|;
return|return
name|GET_UINT32
argument_list|(
operator|*
name|tmp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|__qm_out
parameter_list|(
name|struct
name|qm_addr
modifier|*
name|qm
parameter_list|,
name|void
modifier|*
name|offset
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|uint32_t
modifier|*
name|tmp
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|ptr_ADD
argument_list|(
name|qm
operator|->
name|addr_ci
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|WRITE_UINT32
argument_list|(
operator|*
name|tmp
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|qm_in
parameter_list|(
name|reg
parameter_list|)
value|__qm_in(&portal->addr, REG_##reg)
end_define

begin_define
define|#
directive|define
name|qm_out
parameter_list|(
name|reg
parameter_list|,
name|val
parameter_list|)
value|__qm_out(&portal->addr, REG_##reg, (uint32_t)val)
end_define

begin_comment
comment|/* Convert 'n' cachelines to a pointer value for bitwise OR */
end_comment

begin_define
define|#
directive|define
name|qm_cl
parameter_list|(
name|n
parameter_list|)
value|(void *)((n)<< 6)
end_define

begin_comment
comment|/* Cache-enabled (index) register access */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|__qm_cl_touch_ro
parameter_list|(
name|struct
name|qm_addr
modifier|*
name|qm
parameter_list|,
name|void
modifier|*
name|offset
parameter_list|)
block|{
name|dcbt_ro
argument_list|(
name|ptr_ADD
argument_list|(
name|qm
operator|->
name|addr_ce
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|__qm_cl_touch_rw
parameter_list|(
name|struct
name|qm_addr
modifier|*
name|qm
parameter_list|,
name|void
modifier|*
name|offset
parameter_list|)
block|{
name|dcbt_rw
argument_list|(
name|ptr_ADD
argument_list|(
name|qm
operator|->
name|addr_ce
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint32_t
name|__qm_cl_in
parameter_list|(
name|struct
name|qm_addr
modifier|*
name|qm
parameter_list|,
name|void
modifier|*
name|offset
parameter_list|)
block|{
name|uint32_t
modifier|*
name|tmp
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|ptr_ADD
argument_list|(
name|qm
operator|->
name|addr_ce
argument_list|,
name|offset
argument_list|)
decl_stmt|;
return|return
name|GET_UINT32
argument_list|(
operator|*
name|tmp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|__qm_cl_out
parameter_list|(
name|struct
name|qm_addr
modifier|*
name|qm
parameter_list|,
name|void
modifier|*
name|offset
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|uint32_t
modifier|*
name|tmp
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|ptr_ADD
argument_list|(
name|qm
operator|->
name|addr_ce
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|WRITE_UINT32
argument_list|(
operator|*
name|tmp
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|dcbf
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|__qm_cl_invalidate
parameter_list|(
name|struct
name|qm_addr
modifier|*
name|qm
parameter_list|,
name|void
modifier|*
name|offset
parameter_list|)
block|{
name|dcbi
argument_list|(
name|ptr_ADD
argument_list|(
name|qm
operator|->
name|addr_ce
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|qm_cl_touch_ro
parameter_list|(
name|reg
parameter_list|)
value|__qm_cl_touch_ro(&portal->addr, CL_##reg##_CENA)
end_define

begin_define
define|#
directive|define
name|qm_cl_touch_rw
parameter_list|(
name|reg
parameter_list|)
value|__qm_cl_touch_rw(&portal->addr, CL_##reg##_CENA)
end_define

begin_define
define|#
directive|define
name|qm_cl_in
parameter_list|(
name|reg
parameter_list|)
value|__qm_cl_in(&portal->addr, CL_##reg##_CENA)
end_define

begin_define
define|#
directive|define
name|qm_cl_out
parameter_list|(
name|reg
parameter_list|,
name|val
parameter_list|)
value|__qm_cl_out(&portal->addr, CL_##reg##_CENA, val)
end_define

begin_define
define|#
directive|define
name|qm_cl_invalidate
parameter_list|(
name|reg
parameter_list|)
value|__qm_cl_invalidate(&portal->addr, CL_##reg##_CENA)
end_define

begin_comment
comment|/* Cyclic helper for rings. TODO: once we are able to do fine-grain perf  * analysis, look at using the "extra" bit in the ring index registers to avoid  * cyclic issues. */
end_comment

begin_function
specifier|static
name|__inline__
name|uint8_t
name|cyc_diff
parameter_list|(
name|uint8_t
name|ringsize
parameter_list|,
name|uint8_t
name|first
parameter_list|,
name|uint8_t
name|last
parameter_list|)
block|{
comment|/* 'first' is included, 'last' is excluded */
if|if
condition|(
name|first
operator|<=
name|last
condition|)
return|return
call|(
name|uint8_t
call|)
argument_list|(
name|last
operator|-
name|first
argument_list|)
return|;
return|return
call|(
name|uint8_t
call|)
argument_list|(
name|ringsize
operator|+
name|last
operator|-
name|first
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|t_Error
name|__qm_portal_bind
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|iface
parameter_list|)
block|{
name|t_Error
name|ret
init|=
name|E_BUSY
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|portal
operator|->
name|config
operator|.
name|bound
operator|&
name|iface
operator|)
condition|)
block|{
name|portal
operator|->
name|config
operator|.
name|bound
operator||=
name|iface
expr_stmt|;
name|ret
operator|=
name|E_OK
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|__qm_portal_unbind
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|iface
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|portal
operator|->
name|config
operator|.
name|bound
operator|&
name|iface
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|portal
operator|->
name|config
operator|.
name|bound
operator|&=
operator|~
name|iface
expr_stmt|;
block|}
end_function

begin_comment
comment|/* ---------------- */
end_comment

begin_comment
comment|/* --- EQCR API --- */
end_comment

begin_comment
comment|/* It's safer to code in terms of the 'eqcr' object than the 'portal' object,  * because the latter runs the risk of copy-n-paste errors from other code where  * we could manipulate some other structure within 'portal'. */
end_comment

begin_comment
comment|/* #define EQCR_API_START()    register struct qm_eqcr *eqcr =&portal->eqcr */
end_comment

begin_comment
comment|/* Bit-wise logic to wrap a ring pointer by clearing the "carry bit" */
end_comment

begin_define
define|#
directive|define
name|EQCR_CARRYCLEAR
parameter_list|(
name|p
parameter_list|)
define|\
value|(void *)((uintptr_t)(p)& (~(uintptr_t)(QM_EQCR_SIZE<< 6)))
end_define

begin_comment
comment|/* Bit-wise logic to convert a ring pointer to a ring index */
end_comment

begin_function
specifier|static
name|__inline__
name|uint8_t
name|EQCR_PTR2IDX
parameter_list|(
name|struct
name|qm_eqcr_entry
modifier|*
name|e
parameter_list|)
block|{
return|return
call|(
name|uint8_t
call|)
argument_list|(
operator|(
operator|(
name|uint32_t
operator|)
name|e
operator|>>
literal|6
operator|)
operator|&
operator|(
name|QM_EQCR_SIZE
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Increment the 'cursor' ring pointer, taking 'vbit' into account */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|EQCR_INC
parameter_list|(
name|struct
name|qm_eqcr
modifier|*
name|eqcr
parameter_list|)
block|{
comment|/* NB: this is odd-looking, but experiments show that it generates fast      * code with essentially no branching overheads. We increment to the      * next EQCR pointer and handle overflow and 'vbit'. */
name|struct
name|qm_eqcr_entry
modifier|*
name|partial
init|=
name|eqcr
operator|->
name|cursor
operator|+
literal|1
decl_stmt|;
name|eqcr
operator|->
name|cursor
operator|=
name|EQCR_CARRYCLEAR
argument_list|(
name|partial
argument_list|)
expr_stmt|;
if|if
condition|(
name|partial
operator|!=
name|eqcr
operator|->
name|cursor
condition|)
name|eqcr
operator|->
name|vbit
operator|^=
name|QM_EQCR_VERB_VBIT
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|t_Error
name|qm_eqcr_init
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|e_QmPortalProduceMode
name|pmode
parameter_list|,
name|e_QmPortalEqcrConsumeMode
name|cmode
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
name|uint32_t
name|cfg
decl_stmt|;
name|uint8_t
name|pi
decl_stmt|;
if|if
condition|(
name|__qm_portal_bind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_EQCR
argument_list|)
condition|)
return|return
name|ERROR_CODE
argument_list|(
name|E_BUSY
argument_list|)
return|;
name|eqcr
operator|->
name|ring
operator|=
name|ptr_ADD
argument_list|(
name|portal
operator|->
name|addr
operator|.
name|addr_ce
argument_list|,
name|CL_EQCR
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|ci
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|EQCR_CI_CINH
argument_list|)
operator|&
operator|(
name|QM_EQCR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|qm_cl_invalidate
argument_list|(
name|EQCR_CI
argument_list|)
expr_stmt|;
name|pi
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|EQCR_PI_CINH
argument_list|)
operator|&
operator|(
name|QM_EQCR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|cursor
operator|=
name|eqcr
operator|->
name|ring
operator|+
name|pi
expr_stmt|;
name|eqcr
operator|->
name|vbit
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|qm_in
argument_list|(
name|EQCR_PI_CINH
argument_list|)
operator|&
name|QM_EQCR_SIZE
operator|)
condition|?
name|QM_EQCR_VERB_VBIT
else|:
literal|0
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|available
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|QM_EQCR_SIZE
operator|-
literal|1
operator|-
name|cyc_diff
argument_list|(
name|QM_EQCR_SIZE
argument_list|,
name|eqcr
operator|->
name|ci
argument_list|,
name|pi
argument_list|)
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|ithresh
operator|=
operator|(
name|uint8_t
operator|)
name|qm_in
argument_list|(
name|EQCR_ITR
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|eqcr
operator|->
name|busy
operator|=
literal|0
expr_stmt|;
name|eqcr
operator|->
name|pmode
operator|=
name|pmode
expr_stmt|;
name|eqcr
operator|->
name|cmode
operator|=
name|cmode
expr_stmt|;
else|#
directive|else
name|UNUSED
argument_list|(
name|cmode
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|cfg
operator|=
operator|(
name|qm_in
argument_list|(
name|CFG
argument_list|)
operator|&
literal|0x00ffffff
operator|)
operator||
operator|(
operator|(
name|pmode
operator|&
literal|0x3
operator|)
operator|<<
literal|24
operator|)
expr_stmt|;
comment|/* QCSP_CFG::EPM */
name|qm_out
argument_list|(
name|CFG
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_eqcr_finish
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
name|uint8_t
name|pi
init|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|EQCR_PI_CINH
argument_list|)
operator|&
operator|(
name|QM_EQCR_SIZE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
name|uint8_t
name|ci
init|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|EQCR_CI_CINH
argument_list|)
operator|&
operator|(
name|QM_EQCR_SIZE
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
operator|!
name|eqcr
operator|->
name|busy
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
if|if
condition|(
name|pi
operator|!=
name|EQCR_PTR2IDX
argument_list|(
name|eqcr
operator|->
name|cursor
argument_list|)
condition|)
name|REPORT_ERROR
argument_list|(
name|WARNING
argument_list|,
name|E_INVALID_STATE
argument_list|,
operator|(
literal|"losing uncommitted EQCR entries"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ci
operator|!=
name|eqcr
operator|->
name|ci
condition|)
name|REPORT_ERROR
argument_list|(
name|WARNING
argument_list|,
name|E_INVALID_STATE
argument_list|,
operator|(
literal|"missing existing EQCR completions"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|eqcr
operator|->
name|ci
operator|!=
name|EQCR_PTR2IDX
argument_list|(
name|eqcr
operator|->
name|cursor
argument_list|)
condition|)
name|REPORT_ERROR
argument_list|(
name|WARNING
argument_list|,
name|E_INVALID_STATE
argument_list|,
operator|(
literal|"EQCR destroyed unquiesced"
operator|)
argument_list|)
expr_stmt|;
name|__qm_portal_unbind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_EQCR
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|qm_eqcr_entry
operator|*
name|qm_eqcr_start
argument_list|(
argument|struct qm_portal *portal
argument_list|)
block|{
specifier|register
expr|struct
name|qm_eqcr
operator|*
name|eqcr
operator|=
operator|&
name|portal
operator|->
name|eqcr
block|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
operator|!
name|eqcr
operator|->
name|busy
argument_list|)
block|;
endif|#
directive|endif
comment|/* QM_CHECKING */
if|if
condition|(
operator|!
name|eqcr
operator|->
name|available
condition|)
return|return
name|NULL
return|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|eqcr
operator|->
name|busy
operator|=
literal|1
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* QM_CHECKING */
end_comment

begin_expr_stmt
name|dcbz_64
argument_list|(
name|eqcr
operator|->
name|cursor
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|eqcr
operator|->
name|cursor
return|;
end_return

begin_function
unit|}  static
name|__inline__
name|void
name|qm_eqcr_abort
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|busy
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|busy
operator|=
literal|0
expr_stmt|;
else|#
directive|else
name|UNUSED
argument_list|(
name|portal
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|qm_eqcr_entry
operator|*
name|qm_eqcr_pend_and_next
argument_list|(
argument|struct qm_portal *portal
argument_list|,
argument|uint8_t myverb
argument_list|)
block|{
specifier|register
expr|struct
name|qm_eqcr
operator|*
name|eqcr
operator|=
operator|&
name|portal
operator|->
name|eqcr
block|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|busy
argument_list|)
block|;
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|pmode
operator|!=
name|e_QmPortalPVB
argument_list|)
block|;
endif|#
directive|endif
comment|/* QM_CHECKING */
if|if
condition|(
name|eqcr
operator|->
name|available
operator|==
literal|1
condition|)
return|return
name|NULL
return|;
name|eqcr
operator|->
name|cursor
operator|->
name|__dont_write_directly__verb
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|myverb
operator||
name|eqcr
operator|->
name|vbit
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|dcbf_64
argument_list|(
name|eqcr
operator|->
name|cursor
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|EQCR_INC
argument_list|(
name|eqcr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|eqcr
operator|->
name|available
operator|--
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|dcbz_64
argument_list|(
name|eqcr
operator|->
name|cursor
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|eqcr
operator|->
name|cursor
return|;
end_return

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|QM_CHECKING
end_ifdef

begin_define
define|#
directive|define
name|EQCR_COMMIT_CHECKS
parameter_list|(
name|eqcr
parameter_list|)
define|\
value|do { \     ASSERT_COND(eqcr->busy); \     ASSERT_COND(eqcr->cursor->orp == (eqcr->cursor->orp& 0x00ffffff)); \     ASSERT_COND(eqcr->cursor->fqid == (eqcr->cursor->fqid& 0x00ffffff)); \ } while(0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|EQCR_COMMIT_CHECKS
parameter_list|(
name|eqcr
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* QM_CHECKING */
end_comment

begin_function
unit|static
name|__inline__
name|void
name|qmPortalEqcrPciCommit
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|myverb
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|EQCR_COMMIT_CHECKS
argument_list|(
name|eqcr
argument_list|)
expr_stmt|;
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|pmode
operator|==
name|e_QmPortalPCI
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|eqcr
operator|->
name|cursor
operator|->
name|__dont_write_directly__verb
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|myverb
operator||
name|eqcr
operator|->
name|vbit
argument_list|)
expr_stmt|;
name|EQCR_INC
argument_list|(
name|eqcr
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|available
operator|--
expr_stmt|;
name|dcbf_64
argument_list|(
name|eqcr
operator|->
name|cursor
argument_list|)
expr_stmt|;
name|hwsync
argument_list|()
expr_stmt|;
name|qm_out
argument_list|(
name|EQCR_PI_CINH
argument_list|,
name|EQCR_PTR2IDX
argument_list|(
name|eqcr
operator|->
name|cursor
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|eqcr
operator|->
name|busy
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalEqcrPcePrefetch
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|pmode
operator|==
name|e_QmPortalPCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_cl_invalidate
argument_list|(
name|EQCR_PI
argument_list|)
expr_stmt|;
name|qm_cl_touch_rw
argument_list|(
name|EQCR_PI
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalEqcrPceCommit
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|myverb
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|EQCR_COMMIT_CHECKS
argument_list|(
name|eqcr
argument_list|)
expr_stmt|;
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|pmode
operator|==
name|e_QmPortalPCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|eqcr
operator|->
name|cursor
operator|->
name|__dont_write_directly__verb
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|myverb
operator||
name|eqcr
operator|->
name|vbit
argument_list|)
expr_stmt|;
name|EQCR_INC
argument_list|(
name|eqcr
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|available
operator|--
expr_stmt|;
name|dcbf_64
argument_list|(
name|eqcr
operator|->
name|cursor
argument_list|)
expr_stmt|;
name|lwsync
argument_list|()
expr_stmt|;
name|qm_cl_out
argument_list|(
name|EQCR_PI
argument_list|,
name|EQCR_PTR2IDX
argument_list|(
name|eqcr
operator|->
name|cursor
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|eqcr
operator|->
name|busy
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalEqcrPvbCommit
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|myverb
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
name|struct
name|qm_eqcr_entry
modifier|*
name|eqcursor
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|EQCR_COMMIT_CHECKS
argument_list|(
name|eqcr
argument_list|)
expr_stmt|;
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|pmode
operator|==
name|e_QmPortalPVB
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|lwsync
argument_list|()
expr_stmt|;
name|eqcursor
operator|=
name|eqcr
operator|->
name|cursor
expr_stmt|;
name|eqcursor
operator|->
name|__dont_write_directly__verb
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|myverb
operator||
name|eqcr
operator|->
name|vbit
argument_list|)
expr_stmt|;
name|dcbf_64
argument_list|(
name|eqcursor
argument_list|)
expr_stmt|;
name|EQCR_INC
argument_list|(
name|eqcr
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|available
operator|--
expr_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|eqcr
operator|->
name|busy
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qmPortalEqcrCciUpdate
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
name|uint8_t
name|diff
decl_stmt|,
name|old_ci
init|=
name|eqcr
operator|->
name|ci
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|cmode
operator|==
name|e_QmPortalEqcrCCI
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|eqcr
operator|->
name|ci
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|EQCR_CI_CINH
argument_list|)
operator|&
operator|(
name|QM_EQCR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|diff
operator|=
name|cyc_diff
argument_list|(
name|QM_EQCR_SIZE
argument_list|,
name|old_ci
argument_list|,
name|eqcr
operator|->
name|ci
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|available
operator|+=
name|diff
expr_stmt|;
return|return
name|diff
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalEqcrCcePrefetch
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|cmode
operator|==
name|e_QmPortalEqcrCCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_cl_touch_ro
argument_list|(
name|EQCR_CI
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qmPortalEqcrCceUpdate
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
name|uint8_t
name|diff
decl_stmt|,
name|old_ci
init|=
name|eqcr
operator|->
name|ci
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|eqcr
operator|->
name|cmode
operator|==
name|e_QmPortalEqcrCCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|eqcr
operator|->
name|ci
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_cl_in
argument_list|(
name|EQCR_CI
argument_list|)
operator|&
operator|(
name|QM_EQCR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|qm_cl_invalidate
argument_list|(
name|EQCR_CI
argument_list|)
expr_stmt|;
name|diff
operator|=
name|cyc_diff
argument_list|(
name|QM_EQCR_SIZE
argument_list|,
name|old_ci
argument_list|,
name|eqcr
operator|->
name|ci
argument_list|)
expr_stmt|;
name|eqcr
operator|->
name|available
operator|+=
name|diff
expr_stmt|;
return|return
name|diff
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_eqcr_get_ithresh
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
return|return
name|eqcr
operator|->
name|ithresh
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_eqcr_set_ithresh
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|ithresh
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
name|eqcr
operator|->
name|ithresh
operator|=
name|ithresh
expr_stmt|;
name|qm_out
argument_list|(
name|EQCR_ITR
argument_list|,
name|ithresh
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_eqcr_get_avail
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
return|return
name|eqcr
operator|->
name|available
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_eqcr_get_fill
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_eqcr
modifier|*
name|eqcr
init|=
operator|&
name|portal
operator|->
name|eqcr
decl_stmt|;
return|return
call|(
name|uint8_t
call|)
argument_list|(
name|QM_EQCR_SIZE
operator|-
literal|1
operator|-
name|eqcr
operator|->
name|available
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* ---------------- */
end_comment

begin_comment
comment|/* --- DQRR API --- */
end_comment

begin_comment
comment|/* TODO: many possible improvements;  * - look at changing the API to use pointer rather than index parameters now  *   that 'cursor' is a pointer,  * - consider moving other parameters to pointer if it could help (ci)  */
end_comment

begin_comment
comment|/* It's safer to code in terms of the 'dqrr' object than the 'portal' object,  * because the latter runs the risk of copy-n-paste errors from other code where  * we could manipulate some other structure within 'portal'. */
end_comment

begin_comment
comment|/* #define DQRR_API_START()    register struct qm_dqrr *dqrr =&portal->dqrr */
end_comment

begin_define
define|#
directive|define
name|DQRR_CARRYCLEAR
parameter_list|(
name|p
parameter_list|)
define|\
value|(void *)((uintptr_t)(p)& (~(uintptr_t)(QM_DQRR_SIZE<< 6)))
end_define

begin_function
specifier|static
name|__inline__
name|uint8_t
name|DQRR_PTR2IDX
parameter_list|(
name|struct
name|qm_dqrr_entry
modifier|*
name|e
parameter_list|)
block|{
return|return
call|(
name|uint8_t
call|)
argument_list|(
operator|(
operator|(
name|uint32_t
operator|)
name|e
operator|>>
literal|6
operator|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|qm_dqrr_entry
operator|*
name|DQRR_INC
argument_list|(
argument|struct qm_dqrr_entry *e
argument_list|)
block|{
return|return
name|DQRR_CARRYCLEAR
argument_list|(
name|e
operator|+
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|__inline__
name|void
name|qm_dqrr_set_maxfill
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|mf
parameter_list|)
block|{
name|qm_out
argument_list|(
name|CFG
argument_list|,
operator|(
name|qm_in
argument_list|(
name|CFG
argument_list|)
operator|&
literal|0xff0fffff
operator|)
operator||
operator|(
operator|(
name|mf
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
operator|)
operator|<<
literal|20
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|t_Error
name|qm_dqrr_init
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|e_QmPortalDequeueMode
name|dmode
parameter_list|,
name|e_QmPortalProduceMode
name|pmode
parameter_list|,
name|e_QmPortalDqrrConsumeMode
name|cmode
parameter_list|,
name|uint8_t
name|max_fill
parameter_list|,
name|int
name|stash_ring
parameter_list|,
name|int
name|stash_data
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
specifier|const
name|struct
name|qm_portal_config
modifier|*
name|config
init|=
operator|&
name|portal
operator|->
name|config
decl_stmt|;
name|uint32_t
name|cfg
decl_stmt|;
if|if
condition|(
name|__qm_portal_bind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_DQRR
argument_list|)
condition|)
return|return
name|ERROR_CODE
argument_list|(
name|E_BUSY
argument_list|)
return|;
if|if
condition|(
operator|(
name|stash_ring
operator|||
name|stash_data
operator|)
operator|&&
operator|(
name|config
operator|->
name|cpu
operator|==
operator|-
literal|1
operator|)
condition|)
return|return
name|ERROR_CODE
argument_list|(
name|E_INVALID_STATE
argument_list|)
return|;
comment|/* Make sure the DQRR will be idle when we enable */
name|qm_out
argument_list|(
name|DQRR_SDQCR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qm_out
argument_list|(
name|DQRR_VDQCR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|qm_out
argument_list|(
name|DQRR_PDQCR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dqrr
operator|->
name|ring
operator|=
name|ptr_ADD
argument_list|(
name|portal
operator|->
name|addr
operator|.
name|addr_ce
argument_list|,
name|CL_DQRR
argument_list|)
expr_stmt|;
name|dqrr
operator|->
name|pi
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|DQRR_PI_CINH
argument_list|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|dqrr
operator|->
name|ci
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|DQRR_CI_CINH
argument_list|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|dqrr
operator|->
name|cursor
operator|=
name|dqrr
operator|->
name|ring
operator|+
name|dqrr
operator|->
name|ci
expr_stmt|;
name|dqrr
operator|->
name|fill
operator|=
name|cyc_diff
argument_list|(
name|QM_DQRR_SIZE
argument_list|,
name|dqrr
operator|->
name|ci
argument_list|,
name|dqrr
operator|->
name|pi
argument_list|)
expr_stmt|;
name|dqrr
operator|->
name|vbit
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|qm_in
argument_list|(
name|DQRR_PI_CINH
argument_list|)
operator|&
name|QM_DQRR_SIZE
operator|)
condition|?
name|QM_DQRR_VERB_VBIT
else|:
literal|0
argument_list|)
expr_stmt|;
name|dqrr
operator|->
name|ithresh
operator|=
operator|(
name|uint8_t
operator|)
name|qm_in
argument_list|(
name|DQRR_ITR
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|dqrr
operator|->
name|dmode
operator|=
name|dmode
expr_stmt|;
name|dqrr
operator|->
name|pmode
operator|=
name|pmode
expr_stmt|;
name|dqrr
operator|->
name|cmode
operator|=
name|cmode
expr_stmt|;
name|dqrr
operator|->
name|flags
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|stash_ring
condition|)
name|dqrr
operator|->
name|flags
operator||=
name|QM_DQRR_FLAG_RE
expr_stmt|;
if|if
condition|(
name|stash_data
condition|)
name|dqrr
operator|->
name|flags
operator||=
name|QM_DQRR_FLAG_SE
expr_stmt|;
else|#
directive|else
name|UNUSED
argument_list|(
name|pmode
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|cfg
operator|=
operator|(
name|qm_in
argument_list|(
name|CFG
argument_list|)
operator|&
literal|0xff000f00
operator|)
operator||
operator|(
operator|(
name|max_fill
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
operator|)
operator|<<
literal|20
operator|)
operator||
comment|/* DQRR_MF */
operator|(
operator|(
name|dmode
operator|&
literal|1
operator|)
operator|<<
literal|18
operator|)
operator||
comment|/* DP */
operator|(
operator|(
name|cmode
operator|&
literal|3
operator|)
operator|<<
literal|16
operator|)
operator||
comment|/* DCM */
operator|(
name|stash_ring
condition|?
literal|0x80
else|:
literal|0
operator|)
operator||
comment|/* RE */
operator|(
literal|0
condition|?
literal|0x40
else|:
literal|0
operator|)
operator||
comment|/* Ignore RP */
operator|(
name|stash_data
condition|?
literal|0x20
else|:
literal|0
operator|)
operator||
comment|/* SE */
operator|(
literal|0
condition|?
literal|0x10
else|:
literal|0
operator|)
expr_stmt|;
comment|/* Ignore SP */
name|qm_out
argument_list|(
name|CFG
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
return|return
name|E_OK
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_dqrr_finish
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
if|if
condition|(
name|dqrr
operator|->
name|ci
operator|!=
name|DQRR_PTR2IDX
argument_list|(
name|dqrr
operator|->
name|cursor
argument_list|)
condition|)
name|REPORT_ERROR
argument_list|(
name|WARNING
argument_list|,
name|E_INVALID_STATE
argument_list|,
operator|(
literal|"Ignoring completed DQRR entries"
operator|)
argument_list|)
expr_stmt|;
name|__qm_portal_unbind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_DQRR
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|qm_dqrr_entry
operator|*
name|qm_dqrr_current
argument_list|(
argument|struct qm_portal *portal
argument_list|)
block|{
specifier|register
expr|struct
name|qm_dqrr
operator|*
name|dqrr
operator|=
operator|&
name|portal
operator|->
name|dqrr
block|;
if|if
condition|(
operator|!
name|dqrr
operator|->
name|fill
condition|)
return|return
name|NULL
return|;
end_expr_stmt

begin_return
return|return
name|dqrr
operator|->
name|cursor
return|;
end_return

begin_function
unit|}  static
name|__inline__
name|uint8_t
name|qm_dqrr_cursor
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
return|return
name|DQRR_PTR2IDX
argument_list|(
name|dqrr
operator|->
name|cursor
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_dqrr_next
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|fill
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|dqrr
operator|->
name|cursor
operator|=
name|DQRR_INC
argument_list|(
name|dqrr
operator|->
name|cursor
argument_list|)
expr_stmt|;
return|return
operator|--
name|dqrr
operator|->
name|fill
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qmPortalDqrrPciUpdate
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|uint8_t
name|diff
decl_stmt|,
name|old_pi
init|=
name|dqrr
operator|->
name|pi
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|pmode
operator|==
name|e_QmPortalPCI
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|dqrr
operator|->
name|pi
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|DQRR_PI_CINH
argument_list|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|diff
operator|=
name|cyc_diff
argument_list|(
name|QM_DQRR_SIZE
argument_list|,
name|old_pi
argument_list|,
name|dqrr
operator|->
name|pi
argument_list|)
expr_stmt|;
name|dqrr
operator|->
name|fill
operator|+=
name|diff
expr_stmt|;
return|return
name|diff
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrPcePrefetch
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|pmode
operator|==
name|e_QmPortalPCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_cl_invalidate
argument_list|(
name|DQRR_PI
argument_list|)
expr_stmt|;
name|qm_cl_touch_ro
argument_list|(
name|DQRR_PI
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qmPortalDqrrPceUpdate
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|uint8_t
name|diff
decl_stmt|,
name|old_pi
init|=
name|dqrr
operator|->
name|pi
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|pmode
operator|==
name|e_QmPortalPCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|dqrr
operator|->
name|pi
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_cl_in
argument_list|(
name|DQRR_PI
argument_list|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|diff
operator|=
name|cyc_diff
argument_list|(
name|QM_DQRR_SIZE
argument_list|,
name|old_pi
argument_list|,
name|dqrr
operator|->
name|pi
argument_list|)
expr_stmt|;
name|dqrr
operator|->
name|fill
operator|+=
name|diff
expr_stmt|;
return|return
name|diff
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrPvbPrefetch
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|pmode
operator|==
name|e_QmPortalPVB
argument_list|)
expr_stmt|;
comment|/* If ring entries get stashed, don't invalidate/prefetch */
if|if
condition|(
operator|!
operator|(
name|dqrr
operator|->
name|flags
operator|&
name|QM_DQRR_FLAG_RE
operator|)
condition|)
endif|#
directive|endif
comment|/*QM_CHECKING */
name|dcbit_ro
argument_list|(
name|ptr_ADD
argument_list|(
name|dqrr
operator|->
name|ring
argument_list|,
name|qm_cl
argument_list|(
name|dqrr
operator|->
name|pi
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qmPortalDqrrPvbUpdate
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|struct
name|qm_dqrr_entry
modifier|*
name|res
init|=
name|ptr_ADD
argument_list|(
name|dqrr
operator|->
name|ring
argument_list|,
name|qm_cl
argument_list|(
name|dqrr
operator|->
name|pi
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|pmode
operator|==
name|e_QmPortalPVB
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
if|if
condition|(
operator|(
name|res
operator|->
name|verb
operator|&
name|QM_DQRR_VERB_VBIT
operator|)
operator|==
name|dqrr
operator|->
name|vbit
condition|)
block|{
name|dqrr
operator|->
name|pi
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|dqrr
operator|->
name|pi
operator|+
literal|1
operator|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dqrr
operator|->
name|pi
condition|)
name|dqrr
operator|->
name|vbit
operator|^=
name|QM_DQRR_VERB_VBIT
expr_stmt|;
name|dqrr
operator|->
name|fill
operator|++
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrCciConsume
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|num
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrCCI
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|dqrr
operator|->
name|ci
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|dqrr
operator|->
name|ci
operator|+
name|num
operator|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|qm_out
argument_list|(
name|DQRR_CI_CINH
argument_list|,
name|dqrr
operator|->
name|ci
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrCciConsumeToCurrent
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrCCI
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|dqrr
operator|->
name|ci
operator|=
name|DQRR_PTR2IDX
argument_list|(
name|dqrr
operator|->
name|cursor
argument_list|)
expr_stmt|;
name|qm_out
argument_list|(
name|DQRR_CI_CINH
argument_list|,
name|dqrr
operator|->
name|ci
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrCcePrefetch
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrCCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_cl_invalidate
argument_list|(
name|DQRR_CI
argument_list|)
expr_stmt|;
name|qm_cl_touch_rw
argument_list|(
name|DQRR_CI
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrCceConsume
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|num
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrCCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|dqrr
operator|->
name|ci
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|dqrr
operator|->
name|ci
operator|+
name|num
operator|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|qm_cl_out
argument_list|(
name|DQRR_CI
argument_list|,
name|dqrr
operator|->
name|ci
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrCceConsume_to_current
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrCCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|dqrr
operator|->
name|ci
operator|=
name|DQRR_PTR2IDX
argument_list|(
name|dqrr
operator|->
name|cursor
argument_list|)
expr_stmt|;
name|qm_cl_out
argument_list|(
name|DQRR_CI
argument_list|,
name|dqrr
operator|->
name|ci
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrDcaConsume1
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|idx
parameter_list|,
name|bool
name|park
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrDCA
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|ASSERT_COND
argument_list|(
name|idx
operator|<
name|QM_DQRR_SIZE
argument_list|)
expr_stmt|;
name|qm_out
argument_list|(
name|DQRR_DCAP
argument_list|,
operator|(
literal|0
operator|<<
literal|8
operator|)
operator||
comment|/* S */
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|park
condition|?
literal|1
else|:
literal|0
argument_list|)
operator|<<
literal|6
operator|)
operator||
comment|/* PK */
name|idx
argument_list|)
expr_stmt|;
comment|/* DCAP_CI */
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrDcaConsume1ptr
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|struct
name|qm_dqrr_entry
modifier|*
name|dq
parameter_list|,
name|bool
name|park
parameter_list|)
block|{
name|uint8_t
name|idx
init|=
name|DQRR_PTR2IDX
argument_list|(
name|dq
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrDCA
argument_list|)
expr_stmt|;
name|ASSERT_COND
argument_list|(
operator|(
name|dqrr
operator|->
name|ring
operator|+
name|idx
operator|)
operator|==
name|dq
argument_list|)
expr_stmt|;
name|ASSERT_COND
argument_list|(
name|idx
operator|<
name|QM_DQRR_SIZE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_out
argument_list|(
name|DQRR_DCAP
argument_list|,
operator|(
literal|0
operator|<<
literal|8
operator|)
operator||
comment|/* DQRR_DCAP::S */
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|park
condition|?
literal|1
else|:
literal|0
argument_list|)
operator|<<
literal|6
operator|)
operator||
comment|/* DQRR_DCAP::PK */
name|idx
argument_list|)
expr_stmt|;
comment|/* DQRR_DCAP::DCAP_CI */
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrDcaConsumeN
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint16_t
name|bitmask
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrDCA
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_out
argument_list|(
name|DQRR_DCAP
argument_list|,
operator|(
literal|1
operator|<<
literal|8
operator|)
operator||
comment|/* DQRR_DCAP::S */
operator|(
operator|(
name|uint32_t
operator|)
name|bitmask
operator|<<
literal|16
operator|)
argument_list|)
expr_stmt|;
comment|/* DQRR_DCAP::DCAP_CI */
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qmPortalDqrrDcaCci
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrDCA
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
return|return
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|DQRR_CI_CINH
argument_list|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalDqrrDcaCcePrefetch
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrDCA
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_cl_invalidate
argument_list|(
name|DQRR_CI
argument_list|)
expr_stmt|;
name|qm_cl_touch_ro
argument_list|(
name|DQRR_CI
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qmPortalDqrrDcaCce
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|==
name|e_QmPortalDqrrDCA
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
return|return
call|(
name|uint8_t
call|)
argument_list|(
name|qm_cl_in
argument_list|(
name|DQRR_CI
argument_list|)
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_dqrr_get_ci
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|!=
name|e_QmPortalDqrrDCA
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
return|return
name|dqrr
operator|->
name|ci
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_dqrr_park
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|idx
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|!=
name|e_QmPortalDqrrDCA
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_out
argument_list|(
name|DQRR_DCAP
argument_list|,
operator|(
literal|0
operator|<<
literal|8
operator|)
operator||
comment|/* S */
call|(
name|uint32_t
call|)
argument_list|(
literal|1
operator|<<
literal|6
argument_list|)
operator||
comment|/* PK */
operator|(
name|idx
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
comment|/* DCAP_CI */
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_dqrr_park_ci
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|dqrr
operator|->
name|cmode
operator|!=
name|e_QmPortalDqrrDCA
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_out
argument_list|(
name|DQRR_DCAP
argument_list|,
operator|(
literal|0
operator|<<
literal|8
operator|)
operator||
comment|/* S */
call|(
name|uint32_t
call|)
argument_list|(
literal|1
operator|<<
literal|6
argument_list|)
operator||
comment|/* PK */
operator|(
name|dqrr
operator|->
name|ci
operator|&
operator|(
name|QM_DQRR_SIZE
operator|-
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
comment|/* DCAP_CI */
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_dqrr_sdqcr_set
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint32_t
name|sdqcr
parameter_list|)
block|{
name|qm_out
argument_list|(
name|DQRR_SDQCR
argument_list|,
name|sdqcr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint32_t
name|qm_dqrr_sdqcr_get
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
return|return
name|qm_in
argument_list|(
name|DQRR_SDQCR
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_dqrr_vdqcr_set
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint32_t
name|vdqcr
parameter_list|)
block|{
name|qm_out
argument_list|(
name|DQRR_VDQCR
argument_list|,
name|vdqcr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint32_t
name|qm_dqrr_vdqcr_get
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
return|return
name|qm_in
argument_list|(
name|DQRR_VDQCR
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_dqrr_pdqcr_set
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint32_t
name|pdqcr
parameter_list|)
block|{
name|qm_out
argument_list|(
name|DQRR_PDQCR
argument_list|,
name|pdqcr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint32_t
name|qm_dqrr_pdqcr_get
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
return|return
name|qm_in
argument_list|(
name|DQRR_PDQCR
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_dqrr_get_ithresh
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_dqrr
modifier|*
name|dqrr
init|=
operator|&
name|portal
operator|->
name|dqrr
decl_stmt|;
return|return
name|dqrr
operator|->
name|ithresh
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_dqrr_set_ithresh
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|ithresh
parameter_list|)
block|{
name|qm_out
argument_list|(
name|DQRR_ITR
argument_list|,
name|ithresh
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_dqrr_get_maxfill
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
return|return
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|qm_in
argument_list|(
name|CFG
argument_list|)
operator|&
literal|0x00f00000
operator|)
operator|>>
literal|20
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* -------------- */
end_comment

begin_comment
comment|/* --- MR API --- */
end_comment

begin_comment
comment|/* It's safer to code in terms of the 'mr' object than the 'portal' object,  * because the latter runs the risk of copy-n-paste errors from other code where  * we could manipulate some other structure within 'portal'. */
end_comment

begin_comment
comment|/* #define MR_API_START()    register struct qm_mr *mr =&portal->mr */
end_comment

begin_define
define|#
directive|define
name|MR_CARRYCLEAR
parameter_list|(
name|p
parameter_list|)
define|\
value|(void *)((uintptr_t)(p)& (~(uintptr_t)(QM_MR_SIZE<< 6)))
end_define

begin_function
specifier|static
name|__inline__
name|uint8_t
name|MR_PTR2IDX
parameter_list|(
name|struct
name|qm_mr_entry
modifier|*
name|e
parameter_list|)
block|{
return|return
call|(
name|uint8_t
call|)
argument_list|(
operator|(
operator|(
name|uint32_t
operator|)
name|e
operator|>>
literal|6
operator|)
operator|&
operator|(
name|QM_MR_SIZE
operator|-
literal|1
operator|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|qm_mr_entry
operator|*
name|MR_INC
argument_list|(
argument|struct qm_mr_entry *e
argument_list|)
block|{
return|return
name|MR_CARRYCLEAR
argument_list|(
name|e
operator|+
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|__inline__
name|t_Error
name|qm_mr_init
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|e_QmPortalProduceMode
name|pmode
parameter_list|,
name|e_QmPortalMrConsumeMode
name|cmode
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
name|uint32_t
name|cfg
decl_stmt|;
if|if
condition|(
name|__qm_portal_bind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_MR
argument_list|)
condition|)
return|return
name|ERROR_CODE
argument_list|(
name|E_BUSY
argument_list|)
return|;
name|mr
operator|->
name|ring
operator|=
name|ptr_ADD
argument_list|(
name|portal
operator|->
name|addr
operator|.
name|addr_ce
argument_list|,
name|CL_MR
argument_list|)
expr_stmt|;
name|mr
operator|->
name|pi
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|MR_PI_CINH
argument_list|)
operator|&
operator|(
name|QM_MR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|mr
operator|->
name|ci
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_in
argument_list|(
name|MR_CI_CINH
argument_list|)
operator|&
operator|(
name|QM_MR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|mr
operator|->
name|cursor
operator|=
name|mr
operator|->
name|ring
operator|+
name|mr
operator|->
name|ci
expr_stmt|;
name|mr
operator|->
name|fill
operator|=
name|cyc_diff
argument_list|(
name|QM_MR_SIZE
argument_list|,
name|mr
operator|->
name|ci
argument_list|,
name|mr
operator|->
name|pi
argument_list|)
expr_stmt|;
name|mr
operator|->
name|vbit
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|qm_in
argument_list|(
name|MR_PI_CINH
argument_list|)
operator|&
name|QM_MR_SIZE
operator|)
condition|?
name|QM_MR_VERB_VBIT
else|:
literal|0
argument_list|)
expr_stmt|;
name|mr
operator|->
name|ithresh
operator|=
operator|(
name|uint8_t
operator|)
name|qm_in
argument_list|(
name|MR_ITR
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|mr
operator|->
name|pmode
operator|=
name|pmode
expr_stmt|;
name|mr
operator|->
name|cmode
operator|=
name|cmode
expr_stmt|;
else|#
directive|else
name|UNUSED
argument_list|(
name|pmode
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|cfg
operator|=
operator|(
name|qm_in
argument_list|(
name|CFG
argument_list|)
operator|&
literal|0xfffff0ff
operator|)
operator||
operator|(
operator|(
name|cmode
operator|&
literal|1
operator|)
operator|<<
literal|8
operator|)
expr_stmt|;
comment|/* QCSP_CFG:MM */
name|qm_out
argument_list|(
name|CFG
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
return|return
name|E_OK
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_mr_finish
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
if|if
condition|(
name|mr
operator|->
name|ci
operator|!=
name|MR_PTR2IDX
argument_list|(
name|mr
operator|->
name|cursor
argument_list|)
condition|)
name|REPORT_ERROR
argument_list|(
name|WARNING
argument_list|,
name|E_INVALID_STATE
argument_list|,
operator|(
literal|"Ignoring completed MR entries"
operator|)
argument_list|)
expr_stmt|;
name|__qm_portal_unbind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_MR
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_mr_current_prefetch
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
name|dcbt_ro
argument_list|(
name|mr
operator|->
name|cursor
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|qm_mr_entry
operator|*
name|qm_mr_current
argument_list|(
argument|struct qm_portal *portal
argument_list|)
block|{
specifier|register
expr|struct
name|qm_mr
operator|*
name|mr
operator|=
operator|&
name|portal
operator|->
name|mr
block|;
if|if
condition|(
operator|!
name|mr
operator|->
name|fill
condition|)
return|return
name|NULL
return|;
end_expr_stmt

begin_return
return|return
name|mr
operator|->
name|cursor
return|;
end_return

begin_function
unit|}  static
name|__inline__
name|uint8_t
name|qm_mr_cursor
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
return|return
name|MR_PTR2IDX
argument_list|(
name|mr
operator|->
name|cursor
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_mr_next
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|fill
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|mr
operator|->
name|cursor
operator|=
name|MR_INC
argument_list|(
name|mr
operator|->
name|cursor
argument_list|)
expr_stmt|;
return|return
operator|--
name|mr
operator|->
name|fill
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qmPortalMrPciUpdate
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
name|uint8_t
name|diff
decl_stmt|,
name|old_pi
init|=
name|mr
operator|->
name|pi
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|pmode
operator|==
name|e_QmPortalPCI
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|mr
operator|->
name|pi
operator|=
operator|(
name|uint8_t
operator|)
name|qm_in
argument_list|(
name|MR_PI_CINH
argument_list|)
expr_stmt|;
name|diff
operator|=
name|cyc_diff
argument_list|(
name|QM_MR_SIZE
argument_list|,
name|old_pi
argument_list|,
name|mr
operator|->
name|pi
argument_list|)
expr_stmt|;
name|mr
operator|->
name|fill
operator|+=
name|diff
expr_stmt|;
return|return
name|diff
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalMrPcePrefetch
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|pmode
operator|==
name|e_QmPortalPCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_cl_invalidate
argument_list|(
name|MR_PI
argument_list|)
expr_stmt|;
name|qm_cl_touch_ro
argument_list|(
name|MR_PI
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qmPortalMrPceUpdate
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
name|uint8_t
name|diff
decl_stmt|,
name|old_pi
init|=
name|mr
operator|->
name|pi
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|pmode
operator|==
name|e_QmPortalPCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|mr
operator|->
name|pi
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|qm_cl_in
argument_list|(
name|MR_PI
argument_list|)
operator|&
operator|(
name|QM_MR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|diff
operator|=
name|cyc_diff
argument_list|(
name|QM_MR_SIZE
argument_list|,
name|old_pi
argument_list|,
name|mr
operator|->
name|pi
argument_list|)
expr_stmt|;
name|mr
operator|->
name|fill
operator|+=
name|diff
expr_stmt|;
return|return
name|diff
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalMrPvbUpdate
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
name|struct
name|qm_mr_entry
modifier|*
name|res
init|=
name|ptr_ADD
argument_list|(
name|mr
operator|->
name|ring
argument_list|,
name|qm_cl
argument_list|(
name|mr
operator|->
name|pi
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|pmode
operator|==
name|e_QmPortalPVB
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|dcbit_ro
argument_list|(
name|ptr_ADD
argument_list|(
name|mr
operator|->
name|ring
argument_list|,
name|qm_cl
argument_list|(
name|mr
operator|->
name|pi
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|res
operator|->
name|verb
operator|&
name|QM_MR_VERB_VBIT
operator|)
operator|==
name|mr
operator|->
name|vbit
condition|)
block|{
name|mr
operator|->
name|pi
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|mr
operator|->
name|pi
operator|+
literal|1
operator|)
operator|&
operator|(
name|QM_MR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mr
operator|->
name|pi
condition|)
name|mr
operator|->
name|vbit
operator|^=
name|QM_MR_VERB_VBIT
expr_stmt|;
name|mr
operator|->
name|fill
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalMrCciConsume
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|num
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|cmode
operator|==
name|e_QmPortalMrCCI
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|mr
operator|->
name|ci
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|mr
operator|->
name|ci
operator|+
name|num
operator|)
operator|&
operator|(
name|QM_MR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|qm_out
argument_list|(
name|MR_CI_CINH
argument_list|,
name|mr
operator|->
name|ci
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalMrCciConsumeToCurrent
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|cmode
operator|==
name|e_QmPortalMrCCI
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|mr
operator|->
name|ci
operator|=
name|MR_PTR2IDX
argument_list|(
name|mr
operator|->
name|cursor
argument_list|)
expr_stmt|;
name|qm_out
argument_list|(
name|MR_CI_CINH
argument_list|,
name|mr
operator|->
name|ci
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalMrCcePrefetch
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|cmode
operator|==
name|e_QmPortalMrCCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|qm_cl_invalidate
argument_list|(
name|MR_CI
argument_list|)
expr_stmt|;
name|qm_cl_touch_rw
argument_list|(
name|MR_CI
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalMrCceConsume
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|num
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|cmode
operator|==
name|e_QmPortalMrCCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|mr
operator|->
name|ci
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|mr
operator|->
name|ci
operator|+
name|num
operator|)
operator|&
operator|(
name|QM_MR_SIZE
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|qm_cl_out
argument_list|(
name|MR_CI
argument_list|,
name|mr
operator|->
name|ci
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qmPortalMrCceConsumeToCurrent
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mr
operator|->
name|cmode
operator|==
name|e_QmPortalMrCCE
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|mr
operator|->
name|ci
operator|=
name|MR_PTR2IDX
argument_list|(
name|mr
operator|->
name|cursor
argument_list|)
expr_stmt|;
name|qm_cl_out
argument_list|(
name|MR_CI
argument_list|,
name|mr
operator|->
name|ci
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_mr_get_ci
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
return|return
name|mr
operator|->
name|ci
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint8_t
name|qm_mr_get_ithresh
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mr
modifier|*
name|mr
init|=
operator|&
name|portal
operator|->
name|mr
decl_stmt|;
return|return
name|mr
operator|->
name|ithresh
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_mr_set_ithresh
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|ithresh
parameter_list|)
block|{
name|qm_out
argument_list|(
name|MR_ITR
argument_list|,
name|ithresh
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* ------------------------------ */
end_comment

begin_comment
comment|/* --- Management command API --- */
end_comment

begin_comment
comment|/* It's safer to code in terms of the 'mc' object than the 'portal' object,  * because the latter runs the risk of copy-n-paste errors from other code where  * we could manipulate some other structure within 'portal'. */
end_comment

begin_comment
comment|/* #define MC_API_START()      register struct qm_mc *mc =&portal->mc */
end_comment

begin_function
specifier|static
name|__inline__
name|t_Error
name|qm_mc_init
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mc
modifier|*
name|mc
init|=
operator|&
name|portal
operator|->
name|mc
decl_stmt|;
if|if
condition|(
name|__qm_portal_bind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_MC
argument_list|)
condition|)
return|return
name|ERROR_CODE
argument_list|(
name|E_BUSY
argument_list|)
return|;
name|mc
operator|->
name|cr
operator|=
name|ptr_ADD
argument_list|(
name|portal
operator|->
name|addr
operator|.
name|addr_ce
argument_list|,
name|CL_CR
argument_list|)
expr_stmt|;
name|mc
operator|->
name|rr
operator|=
name|ptr_ADD
argument_list|(
name|portal
operator|->
name|addr
operator|.
name|addr_ce
argument_list|,
name|CL_RR0
argument_list|)
expr_stmt|;
name|mc
operator|->
name|rridx
operator|=
call|(
name|uint8_t
call|)
argument_list|(
operator|(
name|mc
operator|->
name|cr
operator|->
name|__dont_write_directly__verb
operator|&
name|QM_MCC_VERB_VBIT
operator|)
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
name|mc
operator|->
name|vbit
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|mc
operator|->
name|rridx
condition|?
name|QM_MCC_VERB_VBIT
else|:
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|mc
operator|->
name|state
operator|=
name|mc_idle
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
return|return
name|E_OK
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_mc_finish
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_mc
modifier|*
name|mc
init|=
operator|&
name|portal
operator|->
name|mc
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|mc
operator|->
name|state
operator|==
name|mc_idle
argument_list|)
expr_stmt|;
if|if
condition|(
name|mc
operator|->
name|state
operator|!=
name|mc_idle
condition|)
name|REPORT_ERROR
argument_list|(
name|WARNING
argument_list|,
name|E_INVALID_STATE
argument_list|,
operator|(
literal|"Losing incomplete MC command"
operator|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|__qm_portal_unbind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_MC
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|qm_mc_command
operator|*
name|qm_mc_start
argument_list|(
argument|struct qm_portal *portal
argument_list|)
block|{
specifier|register
expr|struct
name|qm_mc
operator|*
name|mc
operator|=
operator|&
name|portal
operator|->
name|mc
block|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mc
operator|->
name|state
operator|==
name|mc_idle
argument_list|)
block|;
name|mc
operator|->
name|state
operator|=
name|mc_user
block|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|dcbz_64
argument_list|(
name|mc
operator|->
name|cr
argument_list|)
block|;
return|return
name|mc
operator|->
name|cr
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|__inline__
name|void
name|qm_mc_abort
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QM_CHECKING
specifier|register
name|struct
name|qm_mc
modifier|*
name|mc
init|=
operator|&
name|portal
operator|->
name|mc
decl_stmt|;
name|ASSERT_COND
argument_list|(
name|mc
operator|->
name|state
operator|==
name|mc_user
argument_list|)
expr_stmt|;
name|mc
operator|->
name|state
operator|=
name|mc_idle
expr_stmt|;
else|#
directive|else
name|UNUSED
argument_list|(
name|portal
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_mc_commit
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint8_t
name|myverb
parameter_list|)
block|{
specifier|register
name|struct
name|qm_mc
modifier|*
name|mc
init|=
operator|&
name|portal
operator|->
name|mc
decl_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mc
operator|->
name|state
operator|==
name|mc_user
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
name|lwsync
argument_list|()
expr_stmt|;
name|mc
operator|->
name|cr
operator|->
name|__dont_write_directly__verb
operator|=
call|(
name|uint8_t
call|)
argument_list|(
name|myverb
operator||
name|mc
operator|->
name|vbit
argument_list|)
expr_stmt|;
name|dcbf_64
argument_list|(
name|mc
operator|->
name|cr
argument_list|)
expr_stmt|;
name|dcbit_ro
argument_list|(
name|mc
operator|->
name|rr
operator|+
name|mc
operator|->
name|rridx
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|mc
operator|->
name|state
operator|=
name|mc_hw
expr_stmt|;
endif|#
directive|endif
comment|/* QM_CHECKING */
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline__
expr|struct
name|qm_mc_result
operator|*
name|qm_mc_result
argument_list|(
argument|struct qm_portal *portal
argument_list|)
block|{
specifier|register
expr|struct
name|qm_mc
operator|*
name|mc
operator|=
operator|&
name|portal
operator|->
name|mc
block|;     struct
name|qm_mc_result
operator|*
name|rr
operator|=
name|mc
operator|->
name|rr
operator|+
name|mc
operator|->
name|rridx
block|;
ifdef|#
directive|ifdef
name|QM_CHECKING
name|ASSERT_COND
argument_list|(
name|mc
operator|->
name|state
operator|==
name|mc_hw
argument_list|)
block|;
endif|#
directive|endif
comment|/* QM_CHECKING */
comment|/* The inactive response register's verb byte always returns zero until      * its command is submitted and completed. This includes the valid-bit,      * in case you were wondering... */
if|if
condition|(
operator|!
name|rr
operator|->
name|verb
condition|)
block|{
name|dcbit_ro
argument_list|(
name|rr
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|mc
operator|->
name|rridx
operator|^=
literal|1
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|mc
operator|->
name|vbit
operator|^=
name|QM_MCC_VERB_VBIT
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|QM_CHECKING
end_ifdef

begin_expr_stmt
name|mc
operator|->
name|state
operator|=
name|mc_idle
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* QM_CHECKING */
end_comment

begin_return
return|return
name|rr
return|;
end_return

begin_comment
unit|}
comment|/* ------------------------------------- */
end_comment

begin_comment
comment|/* --- Portal interrupt register API --- */
end_comment

begin_function
unit|static
name|__inline__
name|t_Error
name|qm_isr_init
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
if|if
condition|(
name|__qm_portal_bind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_ISR
argument_list|)
condition|)
return|return
name|ERROR_CODE
argument_list|(
name|E_BUSY
argument_list|)
return|;
return|return
name|E_OK
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_isr_finish
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|)
block|{
name|__qm_portal_unbind
argument_list|(
name|portal
argument_list|,
name|QM_BIND_ISR
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|qm_isr_set_iperiod
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|uint16_t
name|iperiod
parameter_list|)
block|{
name|qm_out
argument_list|(
name|ITPR
argument_list|,
name|iperiod
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|uint32_t
name|__qm_isr_read
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|enum
name|qm_isr_reg
name|n
parameter_list|)
block|{
return|return
name|__qm_in
argument_list|(
operator|&
name|portal
operator|->
name|addr
argument_list|,
name|PTR_MOVE
argument_list|(
name|REG_ISR
argument_list|,
operator|(
name|n
operator|<<
literal|2
operator|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|__qm_isr_write
parameter_list|(
name|struct
name|qm_portal
modifier|*
name|portal
parameter_list|,
name|enum
name|qm_isr_reg
name|n
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|__qm_out
argument_list|(
operator|&
name|portal
operator|->
name|addr
argument_list|,
name|PTR_MOVE
argument_list|(
name|REG_ISR
argument_list|,
operator|(
name|n
operator|<<
literal|2
operator|)
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

end_unit

