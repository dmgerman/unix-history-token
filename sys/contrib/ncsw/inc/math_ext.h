begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2008-2011 Freescale Semiconductor, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *     * Redistributions of source code must retain the above copyright  *       notice, this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *     * Neither the name of Freescale Semiconductor nor the  *       names of its contributors may be used to endorse or promote products  *       derived from this software without specific prior written permission.  *  *  * ALTERNATIVELY, this software may be distributed under the terms of the  * GNU General Public License ("GPL") as published by the Free Software  * Foundation, either version 2 of that License or (at your option) any  * later version.  *  * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MATH_EXT_H
end_ifndef

begin_define
define|#
directive|define
name|__MATH_EXT_H
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|NCSW_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|__KERNEL__
argument_list|)
end_if

begin_include
include|#
directive|include
file|<linux/math.h>
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__MWERKS__
argument_list|)
end_elif

begin_define
define|#
directive|define
name|LOW
parameter_list|(
name|x
parameter_list|)
value|( sizeof(x)==8 ? *(1+(int32_t*)&x) : (*(int32_t*)&x))
end_define

begin_define
define|#
directive|define
name|HIGH
parameter_list|(
name|x
parameter_list|)
value|(*(int32_t*)&x)
end_define

begin_define
define|#
directive|define
name|ULOW
parameter_list|(
name|x
parameter_list|)
value|( sizeof(x)==8 ? *(1+(uint32_t*)&x) : (*(uint32_t*)&x))
end_define

begin_define
define|#
directive|define
name|UHIGH
parameter_list|(
name|x
parameter_list|)
value|(*(uint32_t*)&x)
end_define

begin_decl_stmt
specifier|static
specifier|const
name|double
name|big
init|=
literal|1.0e300
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Macro for checking if a number is a power of 2 */
end_comment

begin_function
specifier|static
name|__inline__
name|double
name|ceil
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|int32_t
name|i0
decl_stmt|,
name|i1
decl_stmt|,
name|j0
decl_stmt|;
comment|/*- cc 020130 -*/
name|uint32_t
name|i
decl_stmt|,
name|j
decl_stmt|;
comment|/*- cc 020130 -*/
name|i0
operator|=
name|HIGH
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|i1
operator|=
name|LOW
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|j0
operator|=
operator|(
operator|(
name|i0
operator|>>
literal|20
operator|)
operator|&
literal|0x7ff
operator|)
operator|-
literal|0x3ff
expr_stmt|;
if|if
condition|(
name|j0
operator|<
literal|20
condition|)
block|{
if|if
condition|(
name|j0
operator|<
literal|0
condition|)
block|{
comment|/* raise inexact if x != 0 */
if|if
condition|(
name|big
operator|+
name|x
operator|>
literal|0.0
condition|)
block|{
comment|/* return 0*sign(x) if |x|<1 */
if|if
condition|(
name|i0
operator|<
literal|0
condition|)
block|{
name|i0
operator|=
literal|0x80000000
expr_stmt|;
name|i1
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|i0
operator||
name|i1
operator|)
operator|!=
literal|0
condition|)
block|{
name|i0
operator|=
literal|0x3ff00000
expr_stmt|;
name|i1
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|i
operator|=
call|(
name|uint32_t
call|)
argument_list|(
literal|0x000fffff
argument_list|)
operator|>>
name|j0
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|i0
operator|&
name|i
operator|)
operator||
name|i1
operator|)
operator|==
literal|0
condition|)
return|return
name|x
return|;
comment|/* x is integral */
if|if
condition|(
name|big
operator|+
name|x
operator|>
literal|0.0
condition|)
block|{
comment|/* raise inexact flag */
if|if
condition|(
name|i0
operator|>
literal|0
condition|)
name|i0
operator|+=
operator|(
literal|0x00100000
operator|)
operator|>>
name|j0
expr_stmt|;
name|i0
operator|&=
operator|(
operator|~
name|i
operator|)
expr_stmt|;
name|i1
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|j0
operator|>
literal|51
condition|)
block|{
if|if
condition|(
name|j0
operator|==
literal|0x400
condition|)
return|return
name|x
operator|+
name|x
return|;
comment|/* inf or NaN */
else|else
return|return
name|x
return|;
comment|/* x is integral */
block|}
else|else
block|{
name|i
operator|=
operator|(
call|(
name|uint32_t
call|)
argument_list|(
literal|0xffffffff
argument_list|)
operator|)
operator|>>
operator|(
name|j0
operator|-
literal|20
operator|)
expr_stmt|;
comment|/*- cc 020130 -*/
if|if
condition|(
operator|(
name|i1
operator|&
name|i
operator|)
operator|==
literal|0
condition|)
return|return
name|x
return|;
comment|/* x is integral */
if|if
condition|(
name|big
operator|+
name|x
operator|>
literal|0.0
condition|)
block|{
comment|/* raise inexact flag */
if|if
condition|(
name|i0
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|j0
operator|==
literal|20
condition|)
name|i0
operator|+=
literal|1
expr_stmt|;
else|else
block|{
name|j
operator|=
call|(
name|uint32_t
call|)
argument_list|(
name|i1
operator|+
operator|(
literal|1
operator|<<
operator|(
literal|52
operator|-
name|j0
operator|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|<
name|i1
condition|)
name|i0
operator|+=
literal|1
expr_stmt|;
comment|/* got a carry */
name|i1
operator|=
operator|(
name|int32_t
operator|)
name|j
expr_stmt|;
block|}
block|}
name|i1
operator|&=
operator|(
operator|~
name|i
operator|)
expr_stmt|;
block|}
block|}
name|HIGH
argument_list|(
name|x
argument_list|)
operator|=
name|i0
expr_stmt|;
name|LOW
argument_list|(
name|x
argument_list|)
operator|=
name|i1
expr_stmt|;
return|return
name|x
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined(NCSW_LINUX)&& defined(__KERNEL__) */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __MATH_EXT_H */
end_comment

end_unit

