begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2008-2011 Freescale Semiconductor, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are met:  *     * Redistributions of source code must retain the above copyright  *       notice, this list of conditions and the following disclaimer.  *     * Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *     * Neither the name of Freescale Semiconductor nor the  *       names of its contributors may be used to endorse or promote products  *       derived from this software without specific prior written permission.  *  *  * ALTERNATIVELY, this software may be distributed under the terms of the  * GNU General Public License ("GPL") as published by the Free Software  * Foundation, either version 2 of that License or (at your option) any  * later version.  *  * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/**************************************************************************/
end_comment

begin_comment
comment|/**  @File          types_ext.h   @Description   General types Standard Definitions */
end_comment

begin_comment
comment|/***************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__TYPES_EXT_H
end_ifndef

begin_define
define|#
directive|define
name|__TYPES_EXT_H
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|NCSW_LINUX
argument_list|)
end_if

begin_include
include|#
directive|include
file|"types_linux.h"
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|NCSW_LINUX_USD
argument_list|)
end_elif

begin_include
include|#
directive|include
file|"types_linux_usd.h"
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|NCSW_VXWORKS
argument_list|)
end_elif

begin_include
include|#
directive|include
file|"types_vxworks.h"
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__MWERKS__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_elif

begin_include
include|#
directive|include
file|"types_bb_gpp.h"
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__MWERKS__
argument_list|)
operator|&&
name|defined
argument_list|(
name|__GNUC__
argument_list|)
end_elif

begin_include
include|#
directive|include
file|"types_bb_gcc.h"
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__ghs__
argument_list|)
end_elif

begin_include
include|#
directive|include
file|"types_ghs.h"
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|NCSW_FREEBSD
argument_list|)
end_elif

begin_include
include|#
directive|include
file|"types_freebsd.h"
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|"types_dflt.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined (__ROCOO__) */
end_comment

begin_function
specifier|static
name|__inline__
name|void
name|TypesChecker
parameter_list|(
name|void
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__MWERKS__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
pragma|#
directive|pragma
name|pack
name|(
name|push
name|,
name|1
name|)
endif|#
directive|endif
comment|/* defined(__MWERKS__)&& ... */
define|#
directive|define
name|MEM_MAP_START
name|_Packed
struct|struct
name|strct
block|{
specifier|__volatile__
name|int
name|vi
decl_stmt|;
block|}
name|_PackedType
struct|;
define|#
directive|define
name|MEM_MAP_END
if|#
directive|if
name|defined
argument_list|(
name|__MWERKS__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
pragma|#
directive|pragma
name|pack
name|(
name|pop
name|)
endif|#
directive|endif
comment|/* defined(__MWERKS__)&& ... */
name|size_t
name|size
init|=
literal|0
decl_stmt|;
name|bool
name|tr
init|=
name|TRUE
decl_stmt|,
name|fls
init|=
name|FALSE
decl_stmt|;
name|struct
name|strct
modifier|*
name|p_Strct
init|=
name|NULL
decl_stmt|;
name|physAddress_t
name|addr
init|=
literal|0x100
decl_stmt|;
name|tr
operator|=
name|fls
expr_stmt|;
name|p_Strct
operator|=
name|p_Strct
expr_stmt|;
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|tr
condition|)
name|size
operator|++
expr_stmt|;
name|WRITE_UINT8
argument_list|(
operator|*
operator|(
operator|(
name|uint8_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|addr
argument_list|)
operator|)
operator|)
argument_list|,
name|GET_UINT8
argument_list|(
operator|*
operator|(
operator|(
name|uint8_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|addr
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|WRITE_UINT8
argument_list|(
operator|*
operator|(
operator|(
name|uint8_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|UINT8_MAX
argument_list|)
operator|)
operator|)
argument_list|,
name|GET_UINT8
argument_list|(
operator|*
operator|(
operator|(
name|uint8_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|UINT8_MAX
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|WRITE_UINT16
argument_list|(
operator|*
operator|(
operator|(
name|uint16_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|UINT16_MAX
argument_list|)
operator|)
operator|)
argument_list|,
name|GET_UINT16
argument_list|(
operator|*
operator|(
operator|(
name|uint16_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|UINT16_MAX
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|WRITE_UINT32
argument_list|(
operator|*
operator|(
operator|(
name|uint32_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|UINT32_MAX
argument_list|)
operator|)
operator|)
argument_list|,
name|GET_UINT32
argument_list|(
operator|*
operator|(
operator|(
name|uint32_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|UINT32_MAX
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|WRITE_UINT64
argument_list|(
operator|*
operator|(
operator|(
name|uint64_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|UINT64_MAX
argument_list|)
operator|)
operator|)
argument_list|,
name|GET_UINT64
argument_list|(
operator|*
operator|(
operator|(
name|uint64_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|UINT64_MAX
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|WRITE_UINT8
argument_list|(
operator|*
operator|(
operator|(
name|uint8_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|INT8_MAX
argument_list|)
operator|)
operator|)
argument_list|,
name|GET_UINT8
argument_list|(
operator|*
operator|(
operator|(
name|uint8_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|INT8_MIN
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|WRITE_UINT16
argument_list|(
operator|*
operator|(
operator|(
name|uint16_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|INT16_MAX
argument_list|)
operator|)
operator|)
argument_list|,
name|GET_UINT16
argument_list|(
operator|*
operator|(
operator|(
name|uint16_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|INT16_MIN
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|WRITE_UINT32
argument_list|(
operator|*
operator|(
operator|(
name|uint32_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|INT32_MAX
argument_list|)
operator|)
operator|)
argument_list|,
name|GET_UINT32
argument_list|(
operator|*
operator|(
operator|(
name|uint32_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|INT32_MIN
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|WRITE_UINT64
argument_list|(
operator|*
operator|(
operator|(
name|uint64_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|INT64_MAX
argument_list|)
operator|)
operator|)
argument_list|,
name|GET_UINT64
argument_list|(
operator|*
operator|(
operator|(
name|uint64_t
operator|*
operator|)
operator|(
call|(
name|size_t
call|)
argument_list|(
name|INT64_MIN
argument_list|)
operator|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __TYPES_EXT_H */
end_comment

end_unit

