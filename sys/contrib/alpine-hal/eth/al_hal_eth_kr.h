begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*- ******************************************************************************* Copyright (C) 2015 Annapurna Labs Ltd.  This file may be licensed under the terms of the Annapurna Labs Commercial License Agreement.  Alternatively, this file can be distributed under the terms of the GNU General Public License V2 as published by the Free Software Foundation and can be found at http://www.gnu.org/licenses/gpl-2.0.html  Alternatively, redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:      *     Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.      *     Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *******************************************************************************/
end_comment

begin_comment
comment|/**  * @defgroup group_eth_kr_api API  * Ethernet KR auto-neg and link-training driver API  * @ingroup group_eth  * @{  * @file   al_hal_eth_kr.h  *  * @brief Header file for KR driver  *  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__AL_HAL_ETH_KR_H__
end_ifndef

begin_define
define|#
directive|define
name|__AL_HAL_ETH_KR_H__
end_define

begin_include
include|#
directive|include
file|"al_hal_eth.h"
end_include

begin_comment
comment|/* *INDENT-OFF* */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* *INDENT-ON* */
comment|/* AN (Auto-negotiation) Advertisement Registers */
struct|struct
name|al_eth_an_adv
block|{
comment|/* constant value defining 802.3ap support. 	 * The suggested value is 0x01.*/
name|uint8_t
name|selector_field
decl_stmt|;
comment|/* Contains arbitrary data. */
name|uint8_t
name|echoed_nonce
decl_stmt|;
comment|/* pause capability. */
name|uint8_t
name|capability
decl_stmt|;
comment|/* Set to 1 to indicate a Remote Fault condition. 	 * Set to 0 to indicate normal operation.*/
name|uint8_t
name|remote_fault
decl_stmt|;
comment|/* Should always be set to 0. */
name|uint8_t
name|acknowledge
decl_stmt|;
comment|/* Set to 1 to indicate that the device has next pages to send. 	 * Set to 0 to indicate that that device has no next pages to send. */
name|uint8_t
name|next_page
decl_stmt|;
comment|/* Must be set to an arbitrary value. 	 * Two devices must have a different nonce for autonegotiation to 	 * operate (a loopback will not allow autonegotiation to complete). */
name|uint8_t
name|transmitted_nonce
decl_stmt|;
name|uint32_t
name|technology
decl_stmt|;
define|#
directive|define
name|AL_ETH_AN_TECH_1000BASE_KX
value|AL_BIT(0)
define|#
directive|define
name|AL_ETH_AN_TECH_10GBASE_KX4
value|AL_BIT(1)
define|#
directive|define
name|AL_ETH_AN_TECH_10GBASE_KR
value|AL_BIT(2)
define|#
directive|define
name|AL_ETH_AN_TECH_40GBASE_KR4
value|AL_BIT(3)
define|#
directive|define
name|AL_ETH_AN_TECH_40GBASE_CR4
value|AL_BIT(4)
define|#
directive|define
name|AL_ETH_AN_TECH_100GBASE_CR
value|AL_BIT(5)
name|uint8_t
name|fec_capability
decl_stmt|;
block|}
struct|;
comment|/* AN next page fields */
struct|struct
name|al_eth_an_np
block|{
comment|/* These bits can be used as message code field or unformatted code field. 	 * When msg_page is true, these bits represent message code field. 	 * Predefined message code field Code Field should be used as specified in the standard 	 * 802.3ap. 	 * For the null message code the value is 0x01. 	 */
name|uint16_t
name|unformatted_code_field
decl_stmt|;
comment|/* Flag to keep track of the state of the local device's Toggle bit. 	 * Initial value is taken from base page. Set to 0. 	 */
name|al_bool
name|toggle
decl_stmt|;
comment|/* Acknowledge 2 is used to indicate that the receiver is able to act on the information 	 * (or perform the task) defined in the message. 	 */
name|al_bool
name|ack2
decl_stmt|;
name|al_bool
name|msg_page
decl_stmt|;
comment|/* If the device does not have any more Next Pages to send, set to AL_FALSE */
name|al_bool
name|next_page
decl_stmt|;
name|uint16_t
name|unformatted_code_field1
decl_stmt|;
name|uint16_t
name|unformatted_code_field2
decl_stmt|;
block|}
struct|;
enum|enum
name|al_eth_kr_cl72_cstate
block|{
name|C72_CSTATE_NOT_UPDATED
init|=
literal|0
block|,
name|C72_CSTATE_UPDATED
init|=
literal|1
block|,
name|C72_CSTATE_MIN
init|=
literal|2
block|,
name|C72_CSTATE_MAX
init|=
literal|3
block|, }
enum|;
enum|enum
name|al_eth_kr_cl72_coef_op
block|{
name|AL_PHY_KR_COEF_UP_HOLD
init|=
literal|0
block|,
name|AL_PHY_KR_COEF_UP_INC
init|=
literal|1
block|,
name|AL_PHY_KR_COEF_UP_DEC
init|=
literal|2
block|,
name|AL_PHY_KR_COEF_UP_RESERVED
init|=
literal|3
block|}
enum|;
struct|struct
name|al_eth_kr_coef_up_data
block|{
name|enum
name|al_eth_kr_cl72_coef_op
name|c_zero
decl_stmt|;
name|enum
name|al_eth_kr_cl72_coef_op
name|c_plus
decl_stmt|;
name|enum
name|al_eth_kr_cl72_coef_op
name|c_minus
decl_stmt|;
name|al_bool
name|preset
decl_stmt|;
name|al_bool
name|initialize
decl_stmt|;
block|}
struct|;
struct|struct
name|al_eth_kr_status_report_data
block|{
name|enum
name|al_eth_kr_cl72_cstate
name|c_zero
decl_stmt|;
name|enum
name|al_eth_kr_cl72_cstate
name|c_plus
decl_stmt|;
name|enum
name|al_eth_kr_cl72_cstate
name|c_minus
decl_stmt|;
name|al_bool
name|receiver_ready
decl_stmt|;
block|}
struct|;
enum|enum
name|al_eth_an_lt_lane
block|{
name|AL_ETH_AN__LT_LANE_0
block|,
name|AL_ETH_AN__LT_LANE_1
block|,
name|AL_ETH_AN__LT_LANE_2
block|,
name|AL_ETH_AN__LT_LANE_3
block|, }
enum|;
comment|/**  * get the last received coefficient update message from the link partner  *  * @param adapter pointer to the private structure  * @param lane lane number  * @param lpcoeff coeff update received  *  */
name|void
name|al_eth_lp_coeff_up_get
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|,
name|struct
name|al_eth_kr_coef_up_data
modifier|*
name|lpcoeff
parameter_list|)
function_decl|;
comment|/**  * get the last received status report message from the link partner  *  * @param adapter pointer to the private structure  * @param lane lane number  * @param status status report received  *  */
name|void
name|al_eth_lp_status_report_get
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|,
name|struct
name|al_eth_kr_status_report_data
modifier|*
name|status
parameter_list|)
function_decl|;
comment|/**  * set the coefficient data for the next message that will be sent to lp  *  * @param adapter pointer to the private structure  * @param lane lane number  * @param ldcoeff coeff update to send  *  */
name|void
name|al_eth_ld_coeff_up_set
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|,
name|struct
name|al_eth_kr_coef_up_data
modifier|*
name|ldcoeff
parameter_list|)
function_decl|;
comment|/**  * set the status report message for the next message that will be sent to lp  *  * @param adapter pointer to the private structure  * @param lane lane number  * @param status status report to send  *  */
name|void
name|al_eth_ld_status_report_set
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|,
name|struct
name|al_eth_kr_status_report_data
modifier|*
name|status
parameter_list|)
function_decl|;
comment|/**  * get the receiver frame lock status  *  * @param adapter pointer to the private structure  * @param lane lane number  *  * @return true if Training frame delineation is detected, otherwise false.  */
name|al_bool
name|al_eth_kr_receiver_frame_lock_get
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|)
function_decl|;
comment|/**  * get the start up protocol progress status  *  * @param adapter pointer to the private structure  * @param lane lane number  *  * @return true if the startup protocol is in progress.  */
name|al_bool
name|al_eth_kr_startup_proto_prog_get
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|)
function_decl|;
comment|/**  * indicate the receiver is ready (the link training is completed)  *  * @param adapter pointer to the private structure  * @param lane lane number  *  */
name|void
name|al_eth_receiver_ready_set
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|)
function_decl|;
comment|/**  * read Training failure status.  *  * @param adapter pointer to the private structure  * @param lane lane number  *  *@return true if Training failure has been detected.  */
name|al_bool
name|al_eth_kr_training_status_fail_get
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|)
function_decl|;
comment|/****************************** auto negotiation *******************************/
comment|/**  * Initialize Auto-negotiation  * - Program Ability Registers (Advertisement Registers)  * - Clear Status latches  * @param adapter pointer to the private structure  * @param an_adv pointer to the AN Advertisement Registers structure  *        when NULL, the registers will not be updated.  *  * @return 0 on success. otherwise on failure.  */
name|int
name|al_eth_kr_an_init
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|struct
name|al_eth_an_adv
modifier|*
name|an_adv
parameter_list|)
function_decl|;
comment|/**  * Enable/Restart Auto-negotiation  *  * @param adapter pointer to the private structure  * @param lane lane number  * @param lt_enable initialize link training as well  *  * @return 0 on success. otherwise on failure.  */
name|int
name|al_eth_kr_an_start
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|,
name|al_bool
name|next_page_enable
parameter_list|,
name|al_bool
name|lt_enable
parameter_list|)
function_decl|;
name|int
name|al_eth_kr_next_page_write
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|struct
name|al_eth_an_np
modifier|*
name|np
parameter_list|)
function_decl|;
name|int
name|al_eth_kr_next_page_read
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|struct
name|al_eth_an_np
modifier|*
name|np
parameter_list|)
function_decl|;
comment|/**  * Stop Auto-negotiation  *  * Stopping the auto-negotiation will prevent the mac from sending the last page  * to the link partner in case it start the AN again. It must be called after  * link training is completed or the software will lose sync with the HW state  * machine  *  * @param adapter pointer to the private structure  *  */
name|void
name|al_eth_kr_an_stop
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|)
function_decl|;
comment|/**  *  Check Auto-negotiation event done  *  * @param adapter pointer to the private structure  * @param page_received	Set to true if the AN page received indication is set.  *			Set to false otherwise.  * @param an_completed	Set to true of the AN completed indication is set.  *			Set to false otherwise.  * @param error	Set to true if any error encountered  *  */
name|void
name|al_eth_kr_an_status_check
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|al_bool
modifier|*
name|page_received
parameter_list|,
name|al_bool
modifier|*
name|an_completed
parameter_list|,
name|al_bool
modifier|*
name|error
parameter_list|)
function_decl|;
comment|/**  *  Read the remote auto-negotiation advertising.  *  This function is safe to called after al_eth_kr_an_status_check returned  *  with page_received set.  *  * @param adapter pointer to the private structure  * @param an_adv pointer to the AN Advertisement Registers structure  *  */
name|void
name|al_eth_kr_an_read_adv
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|struct
name|al_eth_an_adv
modifier|*
name|an_adv
parameter_list|)
function_decl|;
comment|/****************************** link training **********************************/
comment|/**  *  Initialize Link-training.  *  Clear the status register and set the local coefficient update and status  *  to zero.  *  * @param adapter pointer to the private structure  * @param lane lane number  *  */
name|void
name|al_eth_kr_lt_initialize
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|)
function_decl|;
comment|/**  * Wait for frame lock.  *  * @param adapter pointer to the private structure  * @param lane lane number  * @param timeout timeout in usec.  *  * @return true if frame lock received. false otherwise.  */
name|al_bool
name|al_eth_kr_lt_frame_lock_wait
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
comment|/**  * reset the 10GBase- KR startup protocol and begin its operation  *  * @param adapter pointer to the private structure  * @param lane lane number  *  */
name|void
name|al_eth_kr_lt_restart
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|)
function_decl|;
comment|/**  * reset the 10GBase- KR startup protocol and end its operation  *  * @param adapter pointer to the private structure  * @param lane lane number  *  */
name|void
name|al_eth_kr_lt_stop
parameter_list|(
name|struct
name|al_hal_eth_adapter
modifier|*
name|adapter
parameter_list|,
name|enum
name|al_eth_an_lt_lane
name|lane
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* *INDENT-ON* */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*__AL_HAL_ETH_KR_H__*/
end_comment

begin_comment
comment|/** @} end of Ethernet kr group */
end_comment

end_unit

