begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__RDMA_TYPES_H_
end_ifndef

begin_define
define|#
directive|define
name|__RDMA_TYPES_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/malloc.h>
end_include

begin_typedef
typedef|typedef
name|uint8_t
name|u8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|u16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|u32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|u64
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint8_t
name|__u8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|__u16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|__u32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|__u64
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint8_t
name|__be8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|__be16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|__be32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint64_t
name|__be64
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int32_t
name|__s32
typedef|;
end_typedef

begin_define
define|#
directive|define
name|LINUX_TYPES_DEFINED
end_define

begin_define
define|#
directive|define
name|ERR_PTR
parameter_list|(
name|err
parameter_list|)
value|((void *)((long)(err)))
end_define

begin_define
define|#
directive|define
name|IS_ERR
parameter_list|(
name|ptr
parameter_list|)
value|((unsigned long)(ptr)> (unsigned long)(-1000))
end_define

begin_define
define|#
directive|define
name|PTR_ERR
parameter_list|(
name|ptr
parameter_list|)
value|((long)(ptr))
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|PANIC_IF
end_ifndef

begin_define
define|#
directive|define
name|PANIC_IF
parameter_list|(
name|exp
parameter_list|)
value|do {                  \ 	if (exp)                            \ 		panic("BUG func %s line %u: %s", __FUNCTION__, __LINE__, #exp);      \ } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|container_of
parameter_list|(
name|p
parameter_list|,
name|stype
parameter_list|,
name|field
parameter_list|)
value|((stype *)(((uint8_t *)(p)) - offsetof(stype, field)))
end_define

begin_function
specifier|static
name|__inline
name|int
name|find_first_zero_bit
parameter_list|(
specifier|volatile
name|void
modifier|*
name|p
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|int
name|b
decl_stmt|;
specifier|volatile
name|int
modifier|*
name|ptr
init|=
operator|(
specifier|volatile
name|int
operator|*
operator|)
name|p
decl_stmt|;
for|for
control|(
name|b
operator|=
literal|0
init|;
name|b
operator|<
name|max
condition|;
name|b
operator|+=
literal|32
control|)
block|{
if|if
condition|(
name|ptr
index|[
name|b
operator|>>
literal|5
index|]
operator|!=
operator|~
literal|0
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|(
name|ptr
index|[
name|b
operator|>>
literal|5
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|b
operator|&
literal|0x1f
operator|)
operator|)
operator|)
operator|==
literal|0
condition|)
return|return
operator|(
name|b
operator|)
return|;
name|b
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|max
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|kvl
block|{
name|struct
name|kvl
modifier|*
name|next
decl_stmt|;
name|unsigned
name|int
name|key
decl_stmt|;
name|void
modifier|*
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DEFINE_KVL
parameter_list|(
name|x
parameter_list|)
value|struct kvl x;
end_define

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|kvl_lookup
parameter_list|(
name|struct
name|kvl
modifier|*
name|x
parameter_list|,
name|uint32_t
name|key
parameter_list|)
block|{
name|struct
name|kvl
modifier|*
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|x
operator|->
name|next
init|;
name|i
condition|;
name|i
operator|=
name|i
operator|->
name|next
control|)
if|if
condition|(
name|i
operator|->
name|key
operator|==
name|key
condition|)
return|return
operator|(
name|i
operator|->
name|value
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|kvl_alloc_above
parameter_list|(
name|struct
name|kvl
modifier|*
name|idp
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|int
name|starting_id
parameter_list|,
name|int
modifier|*
name|id
parameter_list|)
block|{
name|int
name|newid
init|=
name|starting_id
decl_stmt|;
name|struct
name|kvl
modifier|*
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|idp
operator|->
name|next
init|;
name|i
condition|;
name|i
operator|=
name|i
operator|->
name|next
control|)
if|if
condition|(
name|i
operator|->
name|key
operator|==
name|newid
condition|)
return|return
operator|-
name|EEXIST
return|;
name|i
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
expr|struct
name|kvl
argument_list|)
argument_list|,
name|M_TEMP
argument_list|,
name|M_NOWAIT
argument_list|)
expr_stmt|;
name|i
operator|->
name|key
operator|=
name|newid
expr_stmt|;
name|i
operator|->
name|value
operator|=
name|ptr
expr_stmt|;
name|i
operator|->
name|next
operator|=
name|idp
operator|->
name|next
expr_stmt|;
name|idp
operator|->
name|next
operator|=
name|i
expr_stmt|;
operator|*
name|id
operator|=
name|newid
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|kvl_delete
parameter_list|(
name|struct
name|kvl
modifier|*
name|idp
parameter_list|,
name|int
name|id
parameter_list|)
block|{
comment|/* leak */
name|struct
name|kvl
modifier|*
name|i
decl_stmt|,
modifier|*
name|prev
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|i
operator|=
name|idp
operator|->
name|next
init|;
name|i
condition|;
name|prev
operator|=
name|i
operator|,
name|i
operator|=
name|i
operator|->
name|next
control|)
if|if
condition|(
operator|(
name|i
operator|)
operator|->
name|key
operator|==
name|id
condition|)
block|{
if|if
condition|(
operator|!
name|prev
condition|)
name|idp
operator|->
name|next
operator|=
name|i
operator|->
name|next
expr_stmt|;
else|else
name|prev
operator|->
name|next
operator|=
name|i
operator|->
name|next
expr_stmt|;
name|free
argument_list|(
name|i
argument_list|,
name|M_TEMP
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|kvl_free
parameter_list|(
name|struct
name|kvl
modifier|*
name|idp
parameter_list|)
block|{
name|struct
name|kvl
modifier|*
name|i
decl_stmt|,
modifier|*
name|tmp
decl_stmt|;
for|for
control|(
name|i
operator|=
name|idp
operator|->
name|next
init|;
name|i
condition|;
name|i
operator|=
name|tmp
control|)
block|{
name|tmp
operator|=
name|i
operator|->
name|next
expr_stmt|;
name|free
argument_list|(
name|i
argument_list|,
name|M_TEMP
argument_list|)
expr_stmt|;
block|}
name|idp
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

