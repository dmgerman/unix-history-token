begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005 Voltaire Inc.  All rights reserved.  * Copyright (c) 2005 Intel Corporation.  All rights reserved.  *  * This Software is licensed under one of the following licenses:  *  * 1) under the terms of the "Common Public License 1.0" a copy of which is  *    available from the Open Source Initiative, see  *    http://www.opensource.org/licenses/cpl.php.  *  * 2) under the terms of the "The BSD License" a copy of which is  *    available from the Open Source Initiative, see  *    http://www.opensource.org/licenses/bsd-license.php.  *  * 3) under the terms of the "GNU General Public License (GPL) Version 2" a  *    copy of which is available from the Open Source Initiative, see  *    http://www.opensource.org/licenses/gpl-license.php.  *  * Licensee has the right to choose one of the above licenses.  *  * Redistributions of source code must retain the above copyright  * notice and one of the license notices.  *  * Redistributions in binary form must reproduce both the above copyright  * notice, one of the license notices in the documentation  * and/or other materials provided with the distribution.  *  * $FreeBSD$  *  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|IB_ADDR_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|IB_ADDR_H
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/proc.h>
end_include

begin_include
include|#
directive|include
file|<sys/condvar.h>
end_include

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_include
include|#
directive|include
file|<net/ethernet.h>
end_include

begin_include
include|#
directive|include
file|<contrib/rdma/ib_verbs.h>
end_include

begin_define
define|#
directive|define
name|MAX_ADDR_LEN
value|20
end_define

begin_struct
struct|struct
name|rdma_addr_client
block|{
name|int
name|refcount
decl_stmt|;
name|struct
name|cv
name|comp
decl_stmt|;
name|struct
name|mtx
name|lock
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * rdma_addr_register_client - Register an address client.  */
end_comment

begin_function_decl
name|void
name|rdma_addr_register_client
parameter_list|(
name|struct
name|rdma_addr_client
modifier|*
name|client
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * rdma_addr_unregister_client - Deregister an address client.  * @client: Client object to deregister.  */
end_comment

begin_function_decl
name|void
name|rdma_addr_unregister_client
parameter_list|(
name|struct
name|rdma_addr_client
modifier|*
name|client
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|rdma_dev_addr
block|{
name|unsigned
name|char
name|src_dev_addr
index|[
name|MAX_ADDR_LEN
index|]
decl_stmt|;
name|unsigned
name|char
name|dst_dev_addr
index|[
name|MAX_ADDR_LEN
index|]
decl_stmt|;
name|unsigned
name|char
name|broadcast
index|[
name|MAX_ADDR_LEN
index|]
decl_stmt|;
name|enum
name|rdma_node_type
name|dev_type
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * rdma_translate_ip - Translate a local IP address to an RDMA hardware  *   address.  */
end_comment

begin_function_decl
name|int
name|rdma_translate_ip
parameter_list|(
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|,
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * rdma_resolve_ip - Resolve source and destination IP addresses to  *   RDMA hardware addresses.  * @client: Address client associated with request.  * @src_addr: An optional source address to use in the resolution.  If a  *   source address is not provided, a usable address will be returned via  *   the callback.  * @dst_addr: The destination address to resolve.  * @addr: A reference to a data location that will receive the resolved  *   addresses.  The data location must remain valid until the callback has  *   been invoked.  * @timeout_ms: Amount of time to wait for the address resolution to complete.  * @callback: Call invoked once address resolution has completed, timed out,  *   or been canceled.  A status of 0 indicates success.  * @context: User-specified context associated with the call.  */
end_comment

begin_function_decl
name|int
name|rdma_resolve_ip
parameter_list|(
name|struct
name|rdma_addr_client
modifier|*
name|client
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|src_addr
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|dst_addr
parameter_list|,
name|struct
name|rdma_dev_addr
modifier|*
name|addr
parameter_list|,
name|int
name|timeout_ms
parameter_list|,
name|void
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|(
name|int
name|status
parameter_list|,
name|struct
name|sockaddr
modifier|*
name|src_addr
parameter_list|,
name|struct
name|rdma_dev_addr
modifier|*
name|addr
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rdma_addr_cancel
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rdma_copy_addr
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|struct
name|ifnet
modifier|*
name|dev
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|dst_dev_addr
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|ip_addr_size
parameter_list|(
name|struct
name|sockaddr
modifier|*
name|addr
parameter_list|)
block|{
return|return
name|addr
operator|->
name|sa_family
operator|==
name|AF_INET6
condition|?
sizeof|sizeof
argument_list|(
expr|struct
name|sockaddr_in6
argument_list|)
else|:
sizeof|sizeof
argument_list|(
expr|struct
name|sockaddr_in
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u16
name|ib_addr_get_pkey
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|)
block|{
return|return
operator|(
operator|(
name|u16
operator|)
name|dev_addr
operator|->
name|broadcast
index|[
literal|8
index|]
operator|<<
literal|8
operator|)
operator||
operator|(
name|u16
operator|)
name|dev_addr
operator|->
name|broadcast
index|[
literal|9
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ib_addr_set_pkey
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|u16
name|pkey
parameter_list|)
block|{
name|dev_addr
operator|->
name|broadcast
index|[
literal|8
index|]
operator|=
name|pkey
operator|>>
literal|8
expr_stmt|;
name|dev_addr
operator|->
name|broadcast
index|[
literal|9
index|]
operator|=
operator|(
name|unsigned
name|char
operator|)
name|pkey
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ib_addr_get_mgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|gid
argument_list|,
name|dev_addr
operator|->
name|broadcast
operator|+
literal|4
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ib_addr_get_sgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|gid
argument_list|,
name|dev_addr
operator|->
name|src_dev_addr
operator|+
literal|4
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ib_addr_set_sgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|dev_addr
operator|->
name|src_dev_addr
operator|+
literal|4
argument_list|,
name|gid
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ib_addr_get_dgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|gid
argument_list|,
name|dev_addr
operator|->
name|dst_dev_addr
operator|+
literal|4
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ib_addr_set_dgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|dev_addr
operator|->
name|dst_dev_addr
operator|+
literal|4
argument_list|,
name|gid
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|iw_addr_get_sgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|gid
argument_list|,
name|dev_addr
operator|->
name|src_dev_addr
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|iw_addr_get_dgid
parameter_list|(
name|struct
name|rdma_dev_addr
modifier|*
name|dev_addr
parameter_list|,
name|union
name|ib_gid
modifier|*
name|gid
parameter_list|)
block|{
name|memcpy
argument_list|(
name|gid
argument_list|,
name|dev_addr
operator|->
name|dst_dev_addr
argument_list|,
sizeof|sizeof
expr|*
name|gid
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* IB_ADDR_H */
end_comment

end_unit

