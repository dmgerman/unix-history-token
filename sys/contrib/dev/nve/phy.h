begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***************************************************************************\ |*                                                                           *| |*       Copyright 2001-2004 NVIDIA Corporation.  All Rights Reserved.       *| |*                                                                           *| |*     THE INFORMATION CONTAINED HEREIN  IS PROPRIETARY AND CONFIDENTIAL     *| |*     TO NVIDIA, CORPORATION.   USE,  REPRODUCTION OR DISCLOSURE TO ANY     *| |*     THIRD PARTY IS SUBJECT TO WRITTEN PRE-APPROVAL BY NVIDIA, CORP.       *| |*                                                                           *| |*     THE INFORMATION CONTAINED HEREIN IS PROVIDED  "AS IS" WITHOUT         *| |*     EXPRESS OR IMPLIED WARRANTY OF ANY KIND, INCLUDING ALL IMPLIED        *| |*     WARRANTIES OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A     *| |*     PARTICULAR PURPOSE.                                                   *| |*                                                                           *| \***************************************************************************/
end_comment

begin_comment
comment|/*     FILE:   phy.h     DATE:   2/7/00      This file contains the functional interface to the PHY. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PHY_H_
end_ifndef

begin_define
define|#
directive|define
name|_PHY_H_
end_define

begin_comment
comment|//#include "basetype.h"
end_comment

begin_comment
comment|//#include "nvevent.h"
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|DEFAULT_PHY_ADDRESS
value|1
define|#
directive|define
name|HDP_VERSION_STRING
value|"HDR P: $Revision: #23 $"
comment|//
comment|// Defaults for PHY timeout values.
comment|//
define|#
directive|define
name|PHY_POWER_ISOLATION_MS_TIMEOUT_DEFAULT
value|50
define|#
directive|define
name|PHY_RESET_MS_TIMEOUT_DEFAULT
value|50
define|#
directive|define
name|PHY_AUTONEG_MS_TIMEOUT_DEFAULT
value|3000
define|#
directive|define
name|PHY_LINK_UP_MS_TIMEOUT_DEFAULT
value|2400
define|#
directive|define
name|PHY_RDWR_US_TIMEOUT_DEFAULT
value|2048
define|#
directive|define
name|PHY_POWER_DOWN_US_TIMEOUT_DEFAULT
value|500
comment|/////////////////////////////////////////////////////////////////////////
comment|// The phy module knows the values that need to go into the phy registers
comment|// but typically the method of writing those registers is controlled by
comment|// another module (usually the adapter because it is really the hardware
comment|// interface.) Hence, the phy needs routines to call to read and write the
comment|// phy registers. This structure with appropriate routines will be provided
comment|// in the PHY_Open call.
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_READ_PHY
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvData
parameter_list|,
name|NV_UINT32
name|ulPhyAddr
parameter_list|,
name|NV_UINT32
name|ulPhyReg
parameter_list|,
name|NV_UINT32
modifier|*
name|pulValue
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_WRITE_PHY
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvData
parameter_list|,
name|NV_UINT32
name|ulPhyAddr
parameter_list|,
name|NV_UINT32
name|ulPhyReg
parameter_list|,
name|NV_UINT32
name|ulValue
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|PHY_SUPPORT_API
block|{
name|PNV_VOID
name|pADCX
decl_stmt|;
name|PFN_READ_PHY
name|pfnRead
decl_stmt|;
name|PFN_WRITE_PHY
name|pfnWrite
decl_stmt|;
comment|// PFN_EVENT_OCCURED   pfnEventOccurred;
comment|//
comment|// These fields are passed down via the FD.  FD get's them
comment|// from the registry.  They allow one to fine tune the timeout
comment|// values in the PHY.
comment|//
name|NV_UINT32
name|PhyPowerIsolationTimeoutInms
decl_stmt|;
name|NV_UINT32
name|PhyResetTimeoutInms
decl_stmt|;
name|NV_UINT32
name|PhyAutonegotiateTimeoutInms
decl_stmt|;
name|NV_UINT32
name|PhyLinkupTimeoutInms
decl_stmt|;
name|NV_UINT32
name|PhyPowerdownOnCloseInus
decl_stmt|;
block|}
name|PHY_SUPPORT_API
operator|,
typedef|*
name|PPHY_SUPPORT_API
typedef|;
comment|/////////////////////////////////////////////////////////////////////////
comment|/////////////////////////////////////////////////////////////////////////
comment|// The functional typedefs for the PHY Api
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_PHY_INIT
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT32
modifier|*
name|pulLinkState
parameter_list|,
name|NV_UINT32
name|PhyMode
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_PHY_DEINIT
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_PHY_CLOSE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_GET_LINK_SPEED
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_GET_LINK_MODE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_GET_LINK_STATE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT32
modifier|*
name|pulLinkState
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_IS_LINK_INITIALIZING
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_RESET_PHY_INIT_STATE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_FORCE_SPEED_DUPLEX
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT16
name|usSpeed
parameter_list|,
name|NV_UINT8
name|ucForceDpx
parameter_list|,
name|NV_UINT8
name|ucForceMode
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_PHY_POWERDOWN
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_SET_LOW_SPEED_FOR_PM
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|_PHY_API
block|{
comment|// This is the context to pass back in as the first arg on all
comment|// the calls in the API below.
name|PNV_VOID
name|pPHYCX
decl_stmt|;
name|PFN_PHY_INIT
name|pfnInit
decl_stmt|;
name|PFN_PHY_INIT
name|pfnInitFast
decl_stmt|;
name|PFN_PHY_DEINIT
name|pfnDeinit
decl_stmt|;
name|PFN_PHY_CLOSE
name|pfnClose
decl_stmt|;
name|PFN_GET_LINK_SPEED
name|pfnGetLinkSpeed
decl_stmt|;
name|PFN_GET_LINK_MODE
name|pfnGetLinkMode
decl_stmt|;
name|PFN_GET_LINK_STATE
name|pfnGetLinkState
decl_stmt|;
name|PFN_IS_LINK_INITIALIZING
name|pfnIsLinkInitializing
decl_stmt|;
name|PFN_RESET_PHY_INIT_STATE
name|pfnResetPhyInitState
decl_stmt|;
name|PFN_FORCE_SPEED_DUPLEX
name|pfnForceSpeedDuplex
decl_stmt|;
name|PFN_PHY_POWERDOWN
name|pfnPowerdown
decl_stmt|;
name|PFN_SET_LOW_SPEED_FOR_PM
name|pfnSetLowSpeedForPM
decl_stmt|;
block|}
name|PHY_API
operator|,
typedef|*
name|PPHY_API
typedef|;
comment|/////////////////////////////////////////////////////////////////////////
comment|/////////////////////////////////////////////////////////////////////////
comment|// This is the one function in the PHY interface that is publicly
comment|// available. The rest of the interface is returned in the pPhyApi;
comment|// The first argument needs to be cast to a POS_API structure ptr.
comment|// On input the second argument is a ptr to a PPHY_SUPPORT_API.
comment|// On output, the second argument should be treated as a ptr to a
comment|// PPHY_API and set appropriately.
specifier|extern
name|NV_SINT32
name|PHY_Open
parameter_list|(
name|PNV_VOID
name|pvOSApi
parameter_list|,
name|PNV_VOID
name|pPhyApi
parameter_list|,
name|NV_UINT32
modifier|*
name|pulPhyAddr
parameter_list|,
name|NV_UINT32
modifier|*
name|pulPhyConnected
parameter_list|)
function_decl|;
comment|/////////////////////////////////////////////////////////////////////////
comment|/////////////////////////////////////////////////////////////////////////
comment|// Here are the error codes the phy functions can return.
define|#
directive|define
name|PHYERR_NONE
value|0x0000
define|#
directive|define
name|PHYERR_COULD_NOT_ALLOC_CONTEXT
value|0x0001
define|#
directive|define
name|PHYERR_RESET_NEVER_FINISHED
value|0x0002
define|#
directive|define
name|PHYERR_NO_AVAILABLE_LINK_SPEED
value|0x0004
define|#
directive|define
name|PHYERR_INVALID_SETTINGS
value|0x0005
define|#
directive|define
name|PHYERR_READ_FAILED
value|0x0006
define|#
directive|define
name|PHYERR_WRITE_FAILED
value|0x0007
define|#
directive|define
name|PHYERR_NO_PHY
value|0x0008
define|#
directive|define
name|PHYERR_NO_RESOURCE
value|0x0009
define|#
directive|define
name|PHYERR_POWER_ISOLATION_TIMEOUT
value|0x000A
define|#
directive|define
name|PHYERR_POWER_DOWN_TIMEOUT
value|0x000B
define|#
directive|define
name|PHYERR_AUTONEG_TIMEOUT
value|0x000C
define|#
directive|define
name|PHYERR_PHY_LINK_SPEED_UNCHANGED
value|0x000D
define|#
directive|define
name|PHY_INVALID_PHY_ADDR
value|0xFFFF;
comment|/////////////////////////////////////////////////////////////////////////
comment|// This value can be used in the ulPhyLinkSpeed field.
define|#
directive|define
name|PHY_LINK_SPEED_UNKNOWN
value|0x0FFFFFFFF
comment|//
comment|// Values used to configure PHY mode.
comment|//
define|#
directive|define
name|PHY_MODE_MII
value|1
define|#
directive|define
name|PHY_MODE_RGMII
value|2
typedef|typedef
name|NV_VOID
function_decl|(
modifier|*
name|PTIMER_FUNC
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_comment
comment|// extern "C"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|//_PHY_H_
end_comment

end_unit

