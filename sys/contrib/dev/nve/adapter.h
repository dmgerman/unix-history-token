begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***************************************************************************\ |*                                                                           *| |*       Copyright 2001-2004 NVIDIA Corporation.  All Rights Reserved.       *| |*                                                                           *| |*     THE INFORMATION CONTAINED HEREIN  IS PROPRIETARY AND CONFIDENTIAL     *| |*     TO NVIDIA, CORPORATION.   USE,  REPRODUCTION OR DISCLOSURE TO ANY     *| |*     THIRD PARTY IS SUBJECT TO WRITTEN PRE-APPROVAL BY NVIDIA, CORP.       *| |*                                                                           *| |*     THE INFORMATION CONTAINED HEREIN IS PROVIDED  "AS IS" WITHOUT         *| |*     EXPRESS OR IMPLIED WARRANTY OF ANY KIND, INCLUDING ALL IMPLIED        *| |*     WARRANTIES OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A     *| |*     PARTICULAR PURPOSE.                                                   *| |*                                                                           *| \***************************************************************************/
end_comment

begin_comment
comment|/*     FILE:   adapter.h     DATE:   2/7/00      This file contains the hardware interface to the ethernet adapter. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ADAPTER_H_
end_ifndef

begin_define
define|#
directive|define
name|_ADAPTER_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|HDA_VERSION_STRING
value|"HDR A: $Revision: #46 $"
ifdef|#
directive|ifdef
name|MODS_NETWORK_BUILD
ifndef|#
directive|ifndef
name|_DRVAPP_H_
include|#
directive|include
file|"drvapp.h"
endif|#
directive|endif
endif|#
directive|endif
comment|//////////////////////////////////////////////////////////////////
comment|// For the set and get configuration calls.
typedef|typedef
struct|struct
name|_ADAPTER_CONFIG
block|{
name|NV_UINT32
name|ulFlags
decl_stmt|;
block|}
name|ADAPTER_CONFIG
operator|,
typedef|*
name|PADAPTER_CONFIG
typedef|;
comment|//////////////////////////////////////////////////////////////////
typedef|typedef
struct|struct
name|_ADAPTER_WRITE_OFFLOAD
block|{
name|NV_UINT32
name|usBitmask
decl_stmt|;
name|NV_UINT32
name|ulMss
decl_stmt|;
block|}
name|ADAPTER_WRITE_OFFLOAD
typedef|;
comment|//////////////////////////////////////////////////////////////////
comment|// For the ADAPTER_Write1 call.
comment|/* This scatter gather list should be same as defined in ndis.h by MS.    For ULONG_PTR MS header file says that it will be of same size as    pointer. It has been defined to take care of casting between differenet    sizes. */
typedef|typedef
struct|struct
name|_NVSCATTER_GATHER_ELEMENT
block|{
name|NV_UINT32
name|PhysLow
decl_stmt|;
name|NV_UINT32
name|PhysHigh
decl_stmt|;
name|NV_UINT32
name|Length
decl_stmt|;
name|NV_VOID
modifier|*
name|Reserved
decl_stmt|;
block|}
name|NVSCATTER_GATHER_ELEMENT
operator|,
typedef|*
name|PNVSCATTER_GATHER_ELEMENT
typedef|;
ifndef|#
directive|ifndef
name|linux
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4200
name|)
endif|#
directive|endif
typedef|typedef
struct|struct
name|_NVSCATTER_GATHER_LIST
block|{
name|NV_UINT32
name|NumberOfElements
decl_stmt|;
name|NV_VOID
modifier|*
name|Reserved
decl_stmt|;
name|NVSCATTER_GATHER_ELEMENT
name|Elements
index|[
literal|0
index|]
decl_stmt|;
comment|// Made 0 sized element to remove MODS compilation error
comment|// Elements[0] and Elements[] have the same effect.
comment|// sizeof(NVSCATTER_GATHER_LIST) is the same (value of 8) in both cases
comment|// And both lead to Warning 4200 in MSVC
block|}
name|NVSCATTER_GATHER_LIST
operator|,
typedef|*
name|PNVSCATTER_GATHER_LIST
typedef|;
ifndef|#
directive|ifndef
name|linux
pragma|#
directive|pragma
name|warning
name|(
name|default
name|:
name|4200
name|)
endif|#
directive|endif
typedef|typedef
struct|struct
name|_ADAPTER_WRITE_DATA1
block|{
name|NV_UINT32
name|ulTotalLength
decl_stmt|;
name|PNV_VOID
name|pvID
decl_stmt|;
name|NV_UINT8
name|uc8021pPriority
decl_stmt|;
name|ADAPTER_WRITE_OFFLOAD
modifier|*
name|psOffload
decl_stmt|;
name|PNVSCATTER_GATHER_LIST
name|pNVSGL
decl_stmt|;
block|}
name|ADAPTER_WRITE_DATA1
operator|,
typedef|*
name|PADAPTER_WRITE_DATA1
typedef|;
comment|//////////////////////////////////////////////////////////////////
comment|// For the ADAPTER_Write call.
typedef|typedef
struct|struct
name|_ADAPTER_WRITE_ELEMENT
block|{
name|PNV_VOID
name|pPhysical
decl_stmt|;
name|NV_UINT32
name|ulLength
decl_stmt|;
block|}
name|ADAPTER_WRITE_ELEMENT
operator|,
typedef|*
name|PADAPTER_WRITE_ELEMENT
typedef|;
define|#
directive|define
name|ADAPTER_WRITE_OFFLOAD_BP_SEGOFFLOAD
value|0
define|#
directive|define
name|ADAPTER_WRITE_OFFLOAD_BP_IPV4CHECKSUM
value|1
define|#
directive|define
name|ADAPTER_WRITE_OFFLOAD_BP_IPV6CHECKSUM
value|2
define|#
directive|define
name|ADAPTER_WRITE_OFFLOAD_BP_TCPCHECKSUM
value|3
define|#
directive|define
name|ADAPTER_WRITE_OFFLOAD_BP_UDPCHECKSUM
value|4
define|#
directive|define
name|ADAPTER_WRITE_OFFLOAD_BP_IPCHECKSUM
value|5
comment|// pvID is a value that will be passed back into OSAPI.pfnPacketWasSent
comment|// when the transmission completes. if pvID is NULL, the ADAPTER code
comment|// assumes the caller does not want the pfnPacketWasSent callback.
typedef|typedef
struct|struct
name|_ADAPTER_WRITE_DATA
block|{
name|NV_UINT32
name|ulNumberOfElements
decl_stmt|;
name|NV_UINT32
name|ulTotalLength
decl_stmt|;
name|PNV_VOID
name|pvID
decl_stmt|;
name|NV_UINT8
name|uc8021pPriority
decl_stmt|;
name|ADAPTER_WRITE_OFFLOAD
modifier|*
name|psOffload
decl_stmt|;
name|ADAPTER_WRITE_ELEMENT
name|sElement
index|[
literal|100
index|]
decl_stmt|;
block|}
name|ADAPTER_WRITE_DATA
operator|,
typedef|*
name|PADAPTER_WRITE_DATA
typedef|;
comment|//////////////////////////////////////////////////////////////////
comment|//////////////////////////////////////////////////////////////////
comment|// For the ADAPTER_Read call.
typedef|typedef
struct|struct
name|_ADAPTER_READ_ELEMENT
block|{
name|PNV_VOID
name|pPhysical
decl_stmt|;
name|NV_UINT32
name|ulLength
decl_stmt|;
block|}
name|ADAPTER_READ_ELEMENT
operator|,
typedef|*
name|PADAPTER_READ_ELEMENT
typedef|;
typedef|typedef
struct|struct
name|_ADAPTER_READ_OFFLOAD
block|{
name|NV_UINT8
name|ucChecksumStatus
decl_stmt|;
block|}
name|ADAPTER_READ_OFFLOAD
typedef|;
typedef|typedef
struct|struct
name|_ADAPTER_READ_DATA
block|{
name|NV_UINT32
name|ulNumberOfElements
decl_stmt|;
name|NV_UINT32
name|ulTotalLength
decl_stmt|;
name|PNV_VOID
name|pvID
decl_stmt|;
name|NV_UINT32
name|ulFilterMatch
decl_stmt|;
name|ADAPTER_READ_OFFLOAD
name|sOffload
decl_stmt|;
name|ADAPTER_READ_ELEMENT
name|sElement
index|[
literal|10
index|]
decl_stmt|;
block|}
name|ADAPTER_READ_DATA
operator|,
typedef|*
name|PADAPTER_READ_DATA
typedef|;
define|#
directive|define
name|RDFLAG_CHK_NOCHECKSUM
value|0
define|#
directive|define
name|RDFLAG_CHK_IPPASSTCPFAIL
value|1
define|#
directive|define
name|RDFLAG_CHK_IPPASSUDPFAIL
value|2
define|#
directive|define
name|RDFLAG_CHK_IPFAIL
value|3
define|#
directive|define
name|RDFLAG_CHK_IPPASSNOTCPUDP
value|4
define|#
directive|define
name|RDFLAG_CHK_IPPASSTCPPASS
value|5
define|#
directive|define
name|RDFLAG_CHK_IPPASSUDPPASS
value|6
define|#
directive|define
name|RDFLAG_CHK_RESERVED
value|7
comment|// The ulFilterMatch flag can be a logical OR of the following
define|#
directive|define
name|ADREADFL_UNICAST_MATCH
value|0x00000001
define|#
directive|define
name|ADREADFL_MULTICAST_MATCH
value|0x00000002
define|#
directive|define
name|ADREADFL_BROADCAST_MATCH
value|0x00000004
comment|//////////////////////////////////////////////////////////////////
comment|//////////////////////////////////////////////////////////////////
comment|// For the ADAPTER_GetPowerCapabilities call.
typedef|typedef
struct|struct
name|_ADAPTER_POWERCAPS
block|{
name|NV_UINT32
name|ulPowerFlags
decl_stmt|;
name|NV_UINT32
name|ulMagicPacketWakeUpFlags
decl_stmt|;
name|NV_UINT32
name|ulPatternWakeUpFlags
decl_stmt|;
name|NV_UINT32
name|ulLinkChangeWakeUpFlags
decl_stmt|;
name|NV_SINT32
name|iMaxWakeUpPatterns
decl_stmt|;
block|}
name|ADAPTER_POWERCAPS
operator|,
typedef|*
name|PADAPTER_POWERCAPS
typedef|;
comment|// For the ADAPTER_GetPowerState and ADAPTER_SetPowerState call.
typedef|typedef
struct|struct
name|_ADAPTER_POWERSTATE
block|{
name|NV_UINT32
name|ulPowerFlags
decl_stmt|;
name|NV_UINT32
name|ulMagicPacketWakeUpFlags
decl_stmt|;
name|NV_UINT32
name|ulPatternWakeUpFlags
decl_stmt|;
name|NV_UINT32
name|ulLinkChangeWakeUpFlags
decl_stmt|;
block|}
name|ADAPTER_POWERSTATE
operator|,
typedef|*
name|PADAPTER_POWERSTATE
typedef|;
comment|// Each of the flag fields in the POWERCAPS structure above can have
comment|// any of the following bitflags set giving the capabilites of the
comment|// adapter. In the case of the wake up fields, these flags mean that
comment|// wake up can happen from the specified power state.
comment|// For the POWERSTATE structure, the ulPowerFlags field should just
comment|// have one of these bits set to go to that particular power state.
comment|// The WakeUp fields can have one or more of these bits set to indicate
comment|// what states should be woken up from.
define|#
directive|define
name|POWER_STATE_D0
value|0x00000001
define|#
directive|define
name|POWER_STATE_D1
value|0x00000002
define|#
directive|define
name|POWER_STATE_D2
value|0x00000004
define|#
directive|define
name|POWER_STATE_D3
value|0x00000008
define|#
directive|define
name|POWER_STATE_ALL
value|(POWER_STATE_D0 | \                                 POWER_STATE_D1  | \                                 POWER_STATE_D2  | \                                 POWER_STATE_D3)
comment|//////////////////////////////////////////////////////////////////
comment|//////////////////////////////////////////////////////////////////
comment|// The ADAPTER_GetPacketFilterCaps call returns a NV_UINT32 that can
comment|// have the following capability bits set.
define|#
directive|define
name|ACCEPT_UNICAST_PACKETS
value|0x00000001
define|#
directive|define
name|ACCEPT_MULTICAST_PACKETS
value|0x00000002
define|#
directive|define
name|ACCEPT_BROADCAST_PACKETS
value|0x00000004
define|#
directive|define
name|ACCEPT_ALL_PACKETS
value|0x00000008
define|#
directive|define
name|ETH_LENGTH_OF_ADDRESS
value|6
comment|// The ADAPTER_SetPacketFilter call uses this structure to know what
comment|// packet filter to set. The ulPacketFilter field can contain some
comment|// union of the bit flags above. The acMulticastMask array holds a
comment|// 48 bit MAC address mask with a 0 in every bit position that should
comment|// be ignored on compare and a 1 in every bit position that should
comment|// be taken into account when comparing to see if the destination
comment|// address of a packet should be accepted for multicast.
typedef|typedef
struct|struct
name|_PACKET_FILTER
block|{
name|NV_UINT32
name|ulFilterFlags
decl_stmt|;
name|NV_UINT8
name|acMulticastAddress
index|[
name|ETH_LENGTH_OF_ADDRESS
index|]
decl_stmt|;
name|NV_UINT8
name|acMulticastMask
index|[
name|ETH_LENGTH_OF_ADDRESS
index|]
decl_stmt|;
block|}
name|PACKET_FILTER
operator|,
typedef|*
name|PPACKET_FILTER
typedef|;
comment|//////////////////////////////////////////////////////////////////
comment|//////////////////////////////////////////////////////////////////
comment|// A WAKE_UP_PATTERN is a 128-byte pattern that the adapter can
comment|// look for in incoming packets to decide when to wake up.  Higher-
comment|// level protocols can use this to, for example, wake up the
comment|// adapter whenever it sees an IP packet that is addressed to it.
comment|// A pattern consists of 128 bits of byte masks that indicate
comment|// which bytes in the packet are relevant to the pattern, plus
comment|// values for each byte.
define|#
directive|define
name|WAKE_UP_PATTERN_SIZE
value|128
typedef|typedef
struct|struct
name|_WAKE_UP_PATTERN
block|{
name|NV_UINT32
name|aulByteMask
index|[
name|WAKE_UP_PATTERN_SIZE
operator|/
literal|32
index|]
decl_stmt|;
name|NV_UINT8
name|acData
index|[
name|WAKE_UP_PATTERN_SIZE
index|]
decl_stmt|;
block|}
name|WAKE_UP_PATTERN
operator|,
typedef|*
name|PWAKE_UP_PATTERN
typedef|;
comment|//
comment|//
comment|// Adapter offload
comment|//
typedef|typedef
struct|struct
name|_ADAPTER_OFFLOAD
block|{
name|NV_UINT32
name|Type
decl_stmt|;
name|NV_UINT32
name|Value0
decl_stmt|;
block|}
name|ADAPTER_OFFLOAD
operator|,
typedef|*
name|PADAPTER_OFFLOAD
typedef|;
define|#
directive|define
name|ADAPTER_OFFLOAD_VLAN
value|0x00000001
define|#
directive|define
name|ADAPTER_OFFLOAD_IEEE802_1P
value|0x00000002
define|#
directive|define
name|ADAPTER_OFFLOAD_IEEE802_1PQ_PAD
value|0x00000004
comment|//////////////////////////////////////////////////////////////////
comment|//  CMNDATA_OS_ADAPTER
comment|//  Structure common to OS and Adapter layers
comment|//  Used for moving data from the OS layer to the adapter layer through SetCommonData
comment|//  function call from OS layer to Adapter layer
comment|//
typedef|typedef
struct|struct
name|_CMNDATA_OS_ADAPTER
block|{
ifndef|#
directive|ifndef
name|linux
name|ASF_SEC0_BASE
name|sRegSec0Base
decl_stmt|;
endif|#
directive|endif
name|NV_UINT32
name|bFPGA
decl_stmt|;
name|NV_UINT32
name|ulFPGAEepromSize
decl_stmt|;
name|NV_UINT32
name|bChecksumOffloadEnable
decl_stmt|;
name|NV_UINT32
name|ulChecksumOffloadBM
decl_stmt|;
name|NV_UINT32
name|ulChecksumOffloadOS
decl_stmt|;
name|NV_UINT32
name|ulMediaIF
decl_stmt|;
name|NV_UINT32
name|bOemCustomEventRead
decl_stmt|;
comment|// Debug only right now
comment|//!!! Beware mods is relying on the fields blow.
name|NV_UINT32
name|ulWatermarkTFBW
decl_stmt|;
name|NV_UINT32
name|ulBackoffRseed
decl_stmt|;
name|NV_UINT32
name|ulBackoffSlotTime
decl_stmt|;
name|NV_UINT32
name|ulModeRegTxReadCompleteEnable
decl_stmt|;
name|NV_UINT32
name|ulFatalErrorRegister
decl_stmt|;
block|}
name|CMNDATA_OS_ADAPTER
typedef|;
comment|//////////////////////////////////////////////////////////////////
comment|// The functional typedefs for the ADAPTER Api
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_CLOSE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
name|ucIsPowerDown
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_INIT
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT16
name|usForcedSpeed
parameter_list|,
name|NV_UINT8
name|ucForceDpx
parameter_list|,
name|NV_UINT8
name|ucForceMode
parameter_list|,
name|NV_UINT8
name|ucAsyncMode
parameter_list|,
name|NV_UINT32
modifier|*
name|puiLinkState
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_DEINIT
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
name|ucIsPowerDown
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_START
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_STOP
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
name|ucIsPowerDown
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_QUERY_WRITE_SLOTS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_WRITE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|ADAPTER_WRITE_DATA
modifier|*
name|pADWriteData
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_WRITE1
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|ADAPTER_WRITE_DATA1
modifier|*
name|pADWriteData1
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_QUERY_INTERRUPT
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_HANDLE_INTERRUPT
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_DISABLE_INTERRUPTS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ENABLE_INTERRUPTS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_CLEAR_INTERRUPTS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_CLEAR_TX_DESC
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_GET_LINK_SPEED
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_GET_LINK_MODE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_GET_LINK_STATE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT32
modifier|*
name|pulLinkState
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_IS_LINK_INITIALIZING
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_RESET_PHY_INIT_STATE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_GET_TRANSMIT_QUEUE_SIZE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_GET_RECEIVE_QUEUE_SIZE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_GET_STATISTICS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PADAPTER_STATS
name|pADStats
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_GET_POWER_CAPS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PADAPTER_POWERCAPS
name|pADPowerCaps
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_GET_POWER_STATE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PADAPTER_POWERSTATE
name|pADPowerState
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_SET_POWER_STATE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PADAPTER_POWERSTATE
name|pADPowerState
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_SET_LOW_SPEED_FOR_PM
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_GET_PACKET_FILTER_CAPS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_SET_PACKET_FILTER
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PPACKET_FILTER
name|pPacketFilter
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_SET_WAKE_UP_PATTERN
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_SINT32
name|iPattern
parameter_list|,
name|PWAKE_UP_PATTERN
name|pPattern
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ENABLE_WAKE_UP_PATTERN
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_SINT32
name|iPattern
parameter_list|,
name|NV_SINT32
name|iEnable
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_SET_NODE_ADDRESS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
modifier|*
name|pNodeAddress
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_GET_NODE_ADDRESS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
modifier|*
name|pNodeAddress
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_GET_ADAPTER_INFO
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
name|pVoidPtr
parameter_list|,
name|NV_SINT32
name|iType
parameter_list|,
name|NV_SINT32
modifier|*
name|piLength
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_READ_PHY
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT32
name|ulPhyAddr
parameter_list|,
name|NV_UINT32
name|ulPhyReg
parameter_list|,
name|NV_UINT32
modifier|*
name|pulValue
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_WRITE_PHY
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT32
name|ulPhyAddr
parameter_list|,
name|NV_UINT32
name|ulPhyReg
parameter_list|,
name|NV_UINT32
name|ulValue
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_VOID
function_decl|(
modifier|*
name|PFN_ADAPTER_SET_SPPED_DUPLEX
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_REGISTER_OFFLOAD
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PADAPTER_OFFLOAD
name|pOffload
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_DEREGISTER_OFFLOAD
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PADAPTER_OFFLOAD
name|pOffload
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_RX_BUFF_READY
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PMEMORY_BLOCK
name|pMemBlock
parameter_list|,
name|PNV_VOID
name|pvID
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|linux
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_SETUPREGISTERS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_SINT32
name|bInitTime
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_GETSEC0BASEADDRESS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|ASF_SEC0_BASE
modifier|*
modifier|*
name|ppsSec0Base
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_SETSOURCEIPADDRESS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
modifier|*
name|pucSrcIPAddress
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_GETDESTIPADDRESS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
modifier|*
name|pucDestIPAddress
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_SETDESTIPADDRESS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
modifier|*
name|pucDestIPAddress
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_WRITEEEPROMANDSETUPREGISTERS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_BOOLEAN
name|bCompare
parameter_list|,
name|PNV_VOID
name|pucValue
parameter_list|,
name|PNV_VOID
name|pszSec0BaseMember
parameter_list|,
name|NV_UINT16
name|usCount
parameter_list|,
name|NV_UINT32
name|ulAddressOffset
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_ISASFREADY
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|ASF_ASFREADY
modifier|*
name|psASFReady
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_SETDESTMACADDRESS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
modifier|*
name|pucDestMACAddress
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_GETSOURCEMACADDRESS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT8
modifier|*
name|pucSrcMACAddress
parameter_list|)
function_decl|;
typedef|typedef
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ADAPTER_ASF_CHECK_FOR_EEPROM_PRESENCE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
endif|#
directive|endif
typedef|typedef
name|NV_API_CALL
name|NV_VOID
function_decl|(
modifier|*
name|PFN_ADAPTER_SET_COMMONDATA
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|CMNDATA_OS_ADAPTER
modifier|*
name|psOSAdpater
parameter_list|)
function_decl|;
typedef|typedef
name|NV_API_CALL
name|NV_VOID
function_decl|(
modifier|*
name|PFN_ADAPTER_SET_CHECKSUMOFFLOAD
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|NV_UINT32
name|bSet
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|_ADAPTER_API
block|{
comment|// The adapter context
name|PNV_VOID
name|pADCX
decl_stmt|;
comment|// The adapter interface
name|PFN_ADAPTER_CLOSE
name|pfnClose
decl_stmt|;
name|PFN_ADAPTER_INIT
name|pfnInit
decl_stmt|;
name|PFN_ADAPTER_DEINIT
name|pfnDeinit
decl_stmt|;
name|PFN_ADAPTER_START
name|pfnStart
decl_stmt|;
name|PFN_ADAPTER_STOP
name|pfnStop
decl_stmt|;
name|PFN_ADAPTER_QUERY_WRITE_SLOTS
name|pfnQueryWriteSlots
decl_stmt|;
name|PFN_ADAPTER_WRITE
name|pfnWrite
decl_stmt|;
name|PFN_ADAPTER_WRITE1
name|pfnWrite1
decl_stmt|;
name|PFN_ADAPTER_QUERY_INTERRUPT
name|pfnQueryInterrupt
decl_stmt|;
name|PFN_ADAPTER_HANDLE_INTERRUPT
name|pfnHandleInterrupt
decl_stmt|;
name|PFN_ADAPTER_DISABLE_INTERRUPTS
name|pfnDisableInterrupts
decl_stmt|;
name|PFN_ADAPTER_ENABLE_INTERRUPTS
name|pfnEnableInterrupts
decl_stmt|;
name|PFN_ADAPTER_CLEAR_INTERRUPTS
name|pfnClearInterrupts
decl_stmt|;
name|PFN_ADAPTER_CLEAR_TX_DESC
name|pfnClearTxDesc
decl_stmt|;
name|PFN_ADAPTER_GET_LINK_SPEED
name|pfnGetLinkSpeed
decl_stmt|;
name|PFN_ADAPTER_GET_LINK_MODE
name|pfnGetLinkMode
decl_stmt|;
name|PFN_ADAPTER_GET_LINK_STATE
name|pfnGetLinkState
decl_stmt|;
name|PFN_ADAPTER_IS_LINK_INITIALIZING
name|pfnIsLinkInitializing
decl_stmt|;
name|PFN_ADAPTER_RESET_PHY_INIT_STATE
name|pfnResetPhyInitState
decl_stmt|;
name|PFN_ADAPTER_GET_TRANSMIT_QUEUE_SIZE
name|pfnGetTransmitQueueSize
decl_stmt|;
name|PFN_ADAPTER_GET_RECEIVE_QUEUE_SIZE
name|pfnGetReceiveQueueSize
decl_stmt|;
name|PFN_ADAPTER_GET_STATISTICS
name|pfnGetStatistics
decl_stmt|;
name|PFN_ADAPTER_GET_POWER_CAPS
name|pfnGetPowerCaps
decl_stmt|;
name|PFN_ADAPTER_GET_POWER_STATE
name|pfnGetPowerState
decl_stmt|;
name|PFN_ADAPTER_SET_POWER_STATE
name|pfnSetPowerState
decl_stmt|;
name|PFN_ADAPTER_SET_LOW_SPEED_FOR_PM
name|pfnSetLowSpeedForPM
decl_stmt|;
name|PFN_ADAPTER_GET_PACKET_FILTER_CAPS
name|pfnGetPacketFilterCaps
decl_stmt|;
name|PFN_ADAPTER_SET_PACKET_FILTER
name|pfnSetPacketFilter
decl_stmt|;
name|PFN_ADAPTER_SET_WAKE_UP_PATTERN
name|pfnSetWakeUpPattern
decl_stmt|;
name|PFN_ADAPTER_ENABLE_WAKE_UP_PATTERN
name|pfnEnableWakeUpPattern
decl_stmt|;
name|PFN_SET_NODE_ADDRESS
name|pfnSetNodeAddress
decl_stmt|;
name|PFN_GET_NODE_ADDRESS
name|pfnGetNodeAddress
decl_stmt|;
name|PFN_GET_ADAPTER_INFO
name|pfnGetAdapterInfo
decl_stmt|;
name|PFN_ADAPTER_SET_SPPED_DUPLEX
name|pfnSetSpeedDuplex
decl_stmt|;
name|PFN_ADAPTER_READ_PHY
name|pfnReadPhy
decl_stmt|;
name|PFN_ADAPTER_WRITE_PHY
name|pfnWritePhy
decl_stmt|;
name|PFN_REGISTER_OFFLOAD
name|pfnRegisterOffload
decl_stmt|;
name|PFN_DEREGISTER_OFFLOAD
name|pfnDeRegisterOffload
decl_stmt|;
name|PFN_RX_BUFF_READY
name|pfnRxBuffReady
decl_stmt|;
ifndef|#
directive|ifndef
name|linux
name|PFN_ADAPTER_ASF_SETUPREGISTERS
name|pfnASFSetupRegisters
decl_stmt|;
name|PFN_ADAPTER_ASF_GETSEC0BASEADDRESS
name|pfnASFGetSec0BaseAddress
decl_stmt|;
name|PFN_ADAPTER_ASF_SETSOURCEIPADDRESS
name|pfnASFSetSourceIPAddress
decl_stmt|;
name|PFN_ADAPTER_ASF_GETDESTIPADDRESS
name|pfnASFGetDestIPAddress
decl_stmt|;
name|PFN_ADAPTER_ASF_SETDESTIPADDRESS
name|pfnASFSetDestIPAddress
decl_stmt|;
name|PFN_ADAPTER_ASF_WRITEEEPROMANDSETUPREGISTERS
name|pfnASFWriteEEPROMAndSetupRegisters
decl_stmt|;
name|PFN_ADAPTER_ASF_SETDESTMACADDRESS
name|pfnASFSetDestMACAddress
decl_stmt|;
name|PFN_ADAPTER_ASF_GETSOURCEMACADDRESS
name|pfnASFGetSourceMACAddress
decl_stmt|;
name|PFN_ADAPTER_ASF_ISASFREADY
name|pfnASFIsASFReady
decl_stmt|;
name|PFN_ADAPTER_ASF_CHECK_FOR_EEPROM_PRESENCE
name|pfnASFCheckForEepromPresence
decl_stmt|;
endif|#
directive|endif
name|PFN_ADAPTER_SET_COMMONDATA
name|pfnSetCommonData
decl_stmt|;
name|PFN_ADAPTER_SET_CHECKSUMOFFLOAD
name|pfnSetChecksumOffload
decl_stmt|;
block|}
name|ADAPTER_API
operator|,
typedef|*
name|PADAPTER_API
typedef|;
comment|//////////////////////////////////////////////////////////////////
define|#
directive|define
name|MAX_PACKET_TO_ACCUMULATE
value|16
typedef|typedef
struct|struct
name|_ADAPTER_OPEN_PARAMS
block|{
name|PNV_VOID
name|pOSApi
decl_stmt|;
comment|//pointer to OSAPI structure passed from higher layer
name|PNV_VOID
name|pvHardwareBaseAddress
decl_stmt|;
comment|//memory mapped address passed from higher layer
name|NV_UINT32
name|ulPollInterval
decl_stmt|;
comment|//poll interval in micro seconds. Used in polling mode
name|NV_UINT32
name|MaxDpcLoop
decl_stmt|;
comment|//Maximum number of times we loop to in function ADAPTER_HandleInterrupt
name|NV_UINT32
name|MaxRxPkt
decl_stmt|;
comment|//Maximum number of packet we process each time in function UpdateReceiveDescRingData
name|NV_UINT32
name|MaxTxPkt
decl_stmt|;
comment|//Maximum number of packet we process each time in function UpdateTransmitDescRingData
name|NV_UINT32
name|MaxRxPktToAccumulate
decl_stmt|;
comment|//maximum number of rx packet we accumulate in UpdateReceiveDescRingData before
comment|//indicating packets to OS.
name|NV_UINT32
name|SentPacketStatusSuccess
decl_stmt|;
comment|//Status returned from adapter layer to higher layer when packet was sent successfully
name|NV_UINT32
name|SentPacketStatusFailure
decl_stmt|;
comment|////Status returned from adapter layer to higher layer when packet send was unsuccessful
name|NV_UINT32
name|SetForcedModeEveryNthRxPacket
decl_stmt|;
comment|//NOT USED: For experiment with descriptor based interrupt
name|NV_UINT32
name|SetForcedModeEveryNthTxPacket
decl_stmt|;
comment|//NOT USED: For experiment with descriptor based interrupt
name|NV_UINT32
name|RxForcedInterrupt
decl_stmt|;
comment|//NOT USED: For experiment with descriptor based interrupt
name|NV_UINT32
name|TxForcedInterrupt
decl_stmt|;
comment|//NOT USED: For experiment with descriptor based interrupt
name|NV_UINT32
name|DeviceId
decl_stmt|;
comment|//Of MAC
name|NV_UINT32
name|DeviceType
decl_stmt|;
name|NV_UINT32
name|PollIntervalInusForThroughputMode
decl_stmt|;
comment|//Of MAC
name|NV_UINT32
name|bASFEnabled
decl_stmt|;
name|NV_UINT32
name|ulDescriptorVersion
decl_stmt|;
name|NV_UINT32
name|ulMaxPacketSize
decl_stmt|;
define|#
directive|define
name|MEDIA_IF_AUTO
value|0
define|#
directive|define
name|MEDIA_IF_RGMII
value|1
define|#
directive|define
name|MEDIA_IF_MII
value|2
name|NV_UINT32
name|ulMediaIF
decl_stmt|;
name|NV_UINT32
name|PhyPowerIsolationTimeoutInms
decl_stmt|;
name|NV_UINT32
name|PhyResetTimeoutInms
decl_stmt|;
name|NV_UINT32
name|PhyAutonegotiateTimeoutInms
decl_stmt|;
name|NV_UINT32
name|PhyLinkupTimeoutInms
decl_stmt|;
name|NV_UINT32
name|PhyRdWrTimeoutInus
decl_stmt|;
name|NV_UINT32
name|PhyPowerdownOnClose
decl_stmt|;
comment|// Added for Bug 100715
name|NV_UINT32
name|bDisableMIIInterruptAndReadPhyStatus
decl_stmt|;
block|}
name|ADAPTER_OPEN_PARAMS
operator|,
typedef|*
name|PADAPTER_OPEN_PARAMS
typedef|;
comment|//////////////////////////////////////////////////////////////////
comment|// This is the one function in the adapter interface that is publicly
comment|// available. The rest of the interface is returned in the pAdapterApi.
comment|// The first argument needs to be cast to a OSAPI structure pointer.
comment|// The second argument should be cast to a ADPATER_API structure pointer.
name|NV_API_CALL
name|NV_SINT32
name|ADAPTER_Open
parameter_list|(
name|PADAPTER_OPEN_PARAMS
name|pAdapterOpenParams
parameter_list|,
name|PNV_VOID
modifier|*
name|pvpAdapterApi
parameter_list|,
name|NV_UINT32
modifier|*
name|pulPhyAddr
parameter_list|)
function_decl|;
comment|//////////////////////////////////////////////////////////////////
comment|//////////////////////////////////////////////////////////////////
comment|// Here are the error codes the adapter function calls return.
define|#
directive|define
name|ADAPTERERR_NONE
value|0x0000
define|#
directive|define
name|ADAPTERERR_COULD_NOT_ALLOC_CONTEXT
value|0x0001
define|#
directive|define
name|ADAPTERERR_COULD_NOT_CREATE_CONTEXT
value|0x0002
define|#
directive|define
name|ADAPTERERR_COULD_NOT_OPEN_PHY
value|0x0003
define|#
directive|define
name|ADAPTERERR_TRANSMIT_QUEUE_FULL
value|0x0004
define|#
directive|define
name|ADAPTERERR_COULD_NOT_INIT_PHY
value|0x0005
define|#
directive|define
name|ADAPTERERR_PHYS_SIZE_SMALL
value|0x0006
define|#
directive|define
name|ADAPTERERR_ERROR
value|0x0007
comment|// Generic error
comment|//////////////////////////////////////////////////////////////////
comment|// This block moved from myadap.h
comment|// nFlag for Stop/Start ReceiverAndOrTransmitter can be an OR of
comment|// the following two flags
define|#
directive|define
name|AFFECT_RECEIVER
value|0x01
define|#
directive|define
name|AFFECT_TRANSMITTER
value|0x02
define|#
directive|define
name|REDUCE_LENGTH_BY
value|48
define|#
directive|define
name|EXTRA_WRITE_SLOT_TO_REDUCE_PER_SEND
value|4
define|#
directive|define
name|MAX_TX_DESCS
value|256
define|#
directive|define
name|MAX_TX_DESCS_VER2
value|(256 * 4)
typedef|typedef
struct|struct
name|_TX_INFO_ADAP
block|{
name|NV_UINT32
name|NoOfDesc
decl_stmt|;
name|PNV_VOID
name|pvVar2
decl_stmt|;
block|}
name|TX_INFO_ADAP
operator|,
typedef|*
name|PTX_INFO_ADAP
typedef|;
define|#
directive|define
name|WORKAROUND_FOR_MCP3_TX_STALL
ifdef|#
directive|ifdef
name|WORKAROUND_FOR_MCP3_TX_STALL
name|NV_SINT32
name|ADAPTER_WorkaroundTXHang
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|//#define TRACK_INIT_TIME
ifdef|#
directive|ifdef
name|TRACK_INIT_TIME
comment|//This routine is defined in entry.c adapter doesn't link int64.lib
comment|//We defined here so that its easy to use it in phy as well as mswin
define|#
directive|define
name|MAX_PRINT_INDEX
value|32
specifier|extern
name|NV_VOID
name|PrintTime
parameter_list|(
name|NV_UINT32
name|ulIndex
parameter_list|)
function_decl|;
define|#
directive|define
name|PRINT_INIT_TIME
parameter_list|(
name|_a
parameter_list|)
value|PrintTime((_a))
else|#
directive|else
define|#
directive|define
name|PRINT_INIT_TIME
parameter_list|(
name|_a
parameter_list|)
endif|#
directive|endif
comment|// Segmentation offload info
define|#
directive|define
name|DEVCAPS_SEGOL_BP_ENABLE
value|0
define|#
directive|define
name|DEVCAPS_SEGOL_BP_IPOPTIONS
value|1
define|#
directive|define
name|DEVCAPS_SEGOL_BP_TCPOPTIONS
value|2
define|#
directive|define
name|DEVCAPS_SEGOL_BP_SEGSIZE_LO
value|8
define|#
directive|define
name|DEVCAPS_SEGOL_BP_SEGSIZE_HI
value|31
comment|// Checksum offload info
comment|// Byte 0 : V4 TX
define|#
directive|define
name|DEVCAPS_V4_TX_BP_IPOPTIONS
value|0
define|#
directive|define
name|DEVCAPS_V4_TX_BP_TCPOPTIONS
value|1
define|#
directive|define
name|DEVCAPS_V4_TX_BP_TCPCHECKSUM
value|2
define|#
directive|define
name|DEVCAPS_V4_TX_BP_UDPCHECKSUM
value|3
define|#
directive|define
name|DEVCAPS_V4_TX_BP_IPCHECKSUM
value|4
comment|// Byte 0 : V4 RX
define|#
directive|define
name|DEVCAPS_V4_RX_BP_IPOPTIONS
value|8
define|#
directive|define
name|DEVCAPS_V4_RX_BP_TCPOPTIONS
value|9
define|#
directive|define
name|DEVCAPS_V4_RX_BP_TCPCHECKSUM
value|10
define|#
directive|define
name|DEVCAPS_V4_RX_BP_UDPCHECKSUM
value|11
define|#
directive|define
name|DEVCAPS_V4_RX_BP_IPCHECKSUM
value|12
comment|// Byte 1 : V6 TX
define|#
directive|define
name|DEVCAPS_V6_TX_BP_IPOPTIONS
value|16
define|#
directive|define
name|DEVCAPS_V6_TX_BP_TCPOPTIONS
value|17
define|#
directive|define
name|DEVCAPS_V6_TX_BP_TCPCHECKSUM
value|18
define|#
directive|define
name|DEVCAPS_V6_TX_BP_UDPCHECKSUM
value|19
comment|// Byte 2 : V6 RX
define|#
directive|define
name|DEVCAPS_V6_RX_BP_IPOPTIONS
value|24
define|#
directive|define
name|DEVCAPS_V6_RX_BP_TCPOPTIONS
value|25
define|#
directive|define
name|DEVCAPS_V6_RX_BP_TCPCHECKSUM
value|26
define|#
directive|define
name|DEVCAPS_V6_RX_BP_UDPCHECKSUM
value|27
define|#
directive|define
name|DESCR_VER_1
value|1
comment|// MCP1, MCP2 and CK8 descriptor version
define|#
directive|define
name|DESCR_VER_2
value|2
comment|// The decsriptor structure for CK8G
comment|// Get device and vendor IDs from 32 bit DeviceVendorID
define|#
directive|define
name|GET_DEVICEID
parameter_list|(
name|x
parameter_list|)
value|(((x)>> 16)& 0xFFFF)
define|#
directive|define
name|GET_VENDORID
parameter_list|(
name|x
parameter_list|)
value|((x)& 0xFFFF)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_comment
comment|// extern "C"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _ADAPTER_H_
end_comment

end_unit

