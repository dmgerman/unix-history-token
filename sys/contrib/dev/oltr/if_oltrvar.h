begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1998, Larry Lile  * All rights reserved.  *  * For latest sources and information on this driver, please  * go to http://anarchy.stdio.com.  *  * Questions, comments or suggestions should be directed to  * Larry Lile<lile@stdio.com>.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice unmodified, this list of conditions, and the following  *    disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*#define DEBUG_MASK DEBUG_POLL*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DEBUG_MASK
end_ifndef

begin_define
define|#
directive|define
name|DEBUG_MASK
value|0x0000
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|DEBUG_POLL
value|0x0001
end_define

begin_define
define|#
directive|define
name|DEBUG_INT
value|0x0002
end_define

begin_define
define|#
directive|define
name|DEBUG_INIT
value|0x0004
end_define

begin_define
define|#
directive|define
name|DEBUG_FN_ENT
value|0x8000
end_define

begin_define
define|#
directive|define
name|PCI_VENDOR_OLICOM
value|0x108D
end_define

begin_define
define|#
directive|define
name|OLTR_PORT_COUNT
value|0x20
end_define

begin_define
define|#
directive|define
name|MIN3
parameter_list|(
name|A
parameter_list|,
name|B
parameter_list|,
name|C
parameter_list|)
value|(MIN(A, (MIN(B, C))))
end_define

begin_struct
struct|struct
name|oltr_rx_buf
block|{
name|int
name|index
decl_stmt|;
name|char
modifier|*
name|data
decl_stmt|;
name|u_long
name|address
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|oltr_tx_buf
block|{
name|int
name|index
decl_stmt|;
name|char
modifier|*
name|data
decl_stmt|;
name|u_long
name|address
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RING_BUFFER_LEN
value|16
end_define

begin_define
define|#
directive|define
name|RING_BUFFER
parameter_list|(
name|x
parameter_list|)
value|((RING_BUFFER_LEN - 1)& x)
end_define

begin_define
define|#
directive|define
name|RX_BUFFER_LEN
value|2048
end_define

begin_define
define|#
directive|define
name|TX_BUFFER_LEN
value|2048
end_define

begin_struct
struct|struct
name|oltr_softc
block|{
name|struct
name|ifnet
modifier|*
name|ifp
decl_stmt|;
name|struct
name|ifmedia
name|ifmedia
decl_stmt|;
name|void
modifier|*
name|oltr_intrhand
decl_stmt|;
name|int
name|irq_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|irq_res
decl_stmt|;
name|int
name|port_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|port_res
decl_stmt|;
name|int
name|drq_rid
decl_stmt|;
name|struct
name|resource
modifier|*
name|drq_res
decl_stmt|;
name|bus_dma_tag_t
name|bus_tag
decl_stmt|;
name|bus_dma_tag_t
name|mem_tag
decl_stmt|;
name|bus_dmamap_t
name|mem_map
decl_stmt|;
name|bus_addr_t
name|queue_phys
decl_stmt|;
name|char
modifier|*
name|queue_addr
decl_stmt|;
name|int
name|state
decl_stmt|;
define|#
directive|define
name|OL_UNKNOWN
value|0
define|#
directive|define
name|OL_INIT
value|1
define|#
directive|define
name|OL_READY
value|2
define|#
directive|define
name|OL_CLOSING
value|3
define|#
directive|define
name|OL_CLOSED
value|4
define|#
directive|define
name|OL_OPENING
value|5
define|#
directive|define
name|OL_OPEN
value|6
define|#
directive|define
name|OL_PROMISC
value|7
define|#
directive|define
name|OL_DEAD
value|8
name|struct
name|oltr_rx_buf
name|rx_ring
index|[
name|RING_BUFFER_LEN
index|]
decl_stmt|;
name|int
name|tx_head
decl_stmt|,
name|tx_avail
decl_stmt|,
name|tx_frame
decl_stmt|;
name|struct
name|oltr_tx_buf
name|tx_ring
index|[
name|RING_BUFFER_LEN
index|]
decl_stmt|;
name|TRlldTransmit_t
name|frame_ring
index|[
name|RING_BUFFER_LEN
index|]
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|restart
decl_stmt|;
name|TRlldAdapter_t
name|TRlldAdapter
decl_stmt|;
name|unsigned
name|long
name|TRlldAdapter_phys
decl_stmt|;
name|TRlldStatistics_t
name|statistics
decl_stmt|;
name|TRlldStatistics_t
name|current
decl_stmt|;
name|TRlldAdapterConfig_t
name|config
decl_stmt|;
name|u_short
name|AdapterMode
decl_stmt|;
name|u_long
name|GroupAddress
decl_stmt|;
name|u_long
name|FunctionalAddress
decl_stmt|;
name|struct
name|mtx
name|oltr_lock
decl_stmt|;
name|struct
name|callout
name|oltr_poll_timer
decl_stmt|;
comment|/*struct callout	oltr_stat_timer;*/
name|void
modifier|*
name|work_memory
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SELF_TEST_POLLS
value|32
end_define

begin_define
define|#
directive|define
name|OLTR_LOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_lock(&(sc)->oltr_lock)
end_define

begin_define
define|#
directive|define
name|OLTR_UNLOCK
parameter_list|(
name|sc
parameter_list|)
value|mtx_unlock(&(sc)->oltr_lock)
end_define

begin_define
define|#
directive|define
name|OLTR_ASSERT_LOCKED
parameter_list|(
name|sc
parameter_list|)
value|mtx_assert(&(sc)->oltr_lock, MA_OWNED)
end_define

begin_decl_stmt
name|void
name|oltr_poll
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*void oltr_stat 		__P((void *));*/
end_comment

begin_decl_stmt
name|int
name|oltr_attach
name|__P
argument_list|(
operator|(
name|device_t
name|dev
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|oltr_stop
name|__P
argument_list|(
operator|(
expr|struct
name|oltr_softc
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

