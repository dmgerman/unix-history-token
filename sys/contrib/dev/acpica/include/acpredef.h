begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************  *  * Name: acpredef - Information table for ACPI predefined methods and objects  *  *****************************************************************************/
end_comment

begin_comment
comment|/*  * Copyright (C) 2000 - 2012, Intel Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    substantially similar to the "NO WARRANTY" disclaimer below  *    ("Disclaimer") and any redistribution must be conditioned upon  *    including a substantially similar Disclaimer requirement for further  *    binary redistribution.  * 3. Neither the names of the above-listed copyright holders nor the names  *    of any contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * Alternatively, this software may be distributed under the terms of the  * GNU General Public License ("GPL") version 2 as published by the Free  * Software Foundation.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ACPREDEF_H__
end_ifndef

begin_define
define|#
directive|define
name|__ACPREDEF_H__
end_define

begin_comment
comment|/******************************************************************************  *  * Return Package types  *  * 1) PTYPE1 packages do not contain sub-packages.  *  * ACPI_PTYPE1_FIXED: Fixed-length length, 1 or 2 object types:  *      object type  *      count  *      object type  *      count  *  * ACPI_PTYPE1_VAR: Variable-length length:  *      object type (Int/Buf/Ref)  *  * ACPI_PTYPE1_OPTION: Package has some required and some optional elements  *      (Used for _PRW)  *  *  * 2) PTYPE2 packages contain a Variable-length number of sub-packages. Each  *    of the different types describe the contents of each of the sub-packages.  *  * ACPI_PTYPE2: Each subpackage contains 1 or 2 object types:  *      object type  *      count  *      object type  *      count  *      (Used for _ALR,_MLS,_PSS,_TRT,_TSS)  *  * ACPI_PTYPE2_COUNT: Each subpackage has a count as first element:  *      object type  *      (Used for _CSD,_PSD,_TSD)  *  * ACPI_PTYPE2_PKG_COUNT: Count of subpackages at start, 1 or 2 object types:  *      object type  *      count  *      object type  *      count  *      (Used for _CST)  *  * ACPI_PTYPE2_FIXED: Each subpackage is of Fixed-length  *      (Used for _PRT)  *  * ACPI_PTYPE2_MIN: Each subpackage has a Variable-length but minimum length  *      (Used for _HPX)  *  * ACPI_PTYPE2_REV_FIXED: Revision at start, each subpackage is Fixed-length  *      (Used for _ART, _FPS)  *  * ACPI_PTYPE2_FIX_VAR: Each subpackage consists of some fixed-length elements  *      followed by an optional element  *      object type  *      count  *      object type  *      count = 0 (optional)  *      (Used for _DLM)  *  *****************************************************************************/
end_comment

begin_enum
enum|enum
name|AcpiReturnPackageTypes
block|{
name|ACPI_PTYPE1_FIXED
init|=
literal|1
block|,
name|ACPI_PTYPE1_VAR
init|=
literal|2
block|,
name|ACPI_PTYPE1_OPTION
init|=
literal|3
block|,
name|ACPI_PTYPE2
init|=
literal|4
block|,
name|ACPI_PTYPE2_COUNT
init|=
literal|5
block|,
name|ACPI_PTYPE2_PKG_COUNT
init|=
literal|6
block|,
name|ACPI_PTYPE2_FIXED
init|=
literal|7
block|,
name|ACPI_PTYPE2_MIN
init|=
literal|8
block|,
name|ACPI_PTYPE2_REV_FIXED
init|=
literal|9
block|,
name|ACPI_PTYPE2_FIX_VAR
init|=
literal|10
block|}
enum|;
end_enum

begin_ifdef
ifdef|#
directive|ifdef
name|ACPI_CREATE_PREDEFINED_TABLE
end_ifdef

begin_comment
comment|/*  * Predefined method/object information table.  *  * These are the names that can actually be evaluated via AcpiEvaluateObject.  * Not present in this table are the following:  *  *      1) Predefined/Reserved names that are never evaluated via  *         AcpiEvaluateObject:  *              _Lxx and _Exx GPE methods  *              _Qxx EC methods  *              _T_x compiler temporary variables  *  *      2) Predefined names that never actually exist within the AML code:  *              Predefined resource descriptor field names  *  *      3) Predefined names that are implemented within ACPICA:  *              _OSI  *  *      4) Some predefined names that are not documented within the ACPI spec.  *              _WDG, _WED  *  * The main entries in the table each contain the following items:  *  * Name                 - The ACPI reserved name  * ParamCount           - Number of arguments to the method  * ExpectedBtypes       - Allowed type(s) for the return value.  *                        0 means that no return value is expected.  *  * For methods that return packages, the next entry in the table contains  * information about the expected structure of the package. This information  * is saved here (rather than in a separate table) in order to minimize the  * overall size of the stored data.  *  * Note: The additional braces are intended to promote portability.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|ACPI_PREDEFINED_INFO
name|PredefinedNames
index|[]
init|=
block|{
block|{
block|{
literal|"_AC0"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AC1"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AC2"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AC3"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AC4"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AC5"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AC6"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AC7"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AC8"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AC9"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_ADR"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_AEI"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_AL0"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_AL1"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_AL2"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_AL3"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_AL4"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_AL5"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_AL6"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_AL7"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_AL8"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_AL9"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_ALC"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_ALI"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_ALP"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_ALR"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each 2 (Ints) */
block|{
block|{
block|{
name|ACPI_PTYPE2
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|2
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_ALT"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_ART"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (1 Int(rev), n Pkg (2 Ref/11 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE2_REV_FIXED
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|2
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|,
literal|11
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BBN"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_BCL"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Ints) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BCM"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BCT"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_BDN"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_BFS"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BIF"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (9 Int),(4 Str) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|9
block|,
name|ACPI_RTYPE_STRING
block|}
block|,
literal|4
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BIX"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (16 Int),(4 Str) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|16
block|,
name|ACPI_RTYPE_STRING
block|}
block|,
literal|4
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BLT"
block|,
literal|3
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BMA"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_BMC"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BMD"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (5 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|5
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BMS"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_BQC"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_BST"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (4 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|4
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_BTM"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_BTP"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_CBA"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
comment|/* See PCI firmware spec 3.0 */
block|{
block|{
literal|"_CDM"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_CID"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_STRING
operator||
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Ints/Strs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_STRING
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_CLS"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (3 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|3
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_CPC"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Ints/Bufs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_BUFFER
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_CRS"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_CRT"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_CSD"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (1 Int(n), n-1 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE2_COUNT
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_CST"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (1 Int(n), n Pkg (1 Buf/3 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE2_PKG_COUNT
block|,
name|ACPI_RTYPE_BUFFER
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|,
literal|3
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_CWS"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_DCK"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_DCS"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_DDC"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_DDN"
block|,
literal|0
block|,
name|ACPI_RTYPE_STRING
block|}
block|}
block|,
block|{
block|{
literal|"_DEP"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_DGS"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_DIS"
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_DLM"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each (1 Ref, 0/1 Optional Buf/Ref) */
block|{
block|{
block|{
name|ACPI_PTYPE2_FIX_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|1
block|,
name|ACPI_RTYPE_REFERENCE
operator||
name|ACPI_RTYPE_BUFFER
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_DMA"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_DOD"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Ints) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_DOS"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_DSM"
block|,
literal|4
block|,
name|ACPI_RTYPE_ALL
block|}
block|}
block|,
comment|/* Must return a type, but it can be of any type */
block|{
block|{
literal|"_DSS"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_DSW"
block|,
literal|3
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_DTI"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_EC_"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_EDL"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs)*/
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_EJ0"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_EJ1"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_EJ2"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_EJ3"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_EJ4"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_EJD"
block|,
literal|0
block|,
name|ACPI_RTYPE_STRING
block|}
block|}
block|,
block|{
block|{
literal|"_ERR"
block|,
literal|3
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
comment|/* Internal use only, used by ACPICA test suites */
block|{
block|{
literal|"_EVT"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_FDE"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_FDI"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (16 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|16
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_FDM"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_FIF"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (4 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|4
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_FIX"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Ints) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_FPS"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (1 Int(rev), n Pkg (5 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE2_REV_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|5
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_FSL"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_FST"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (3 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|3
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_GAI"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_GCP"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_GHL"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_GLK"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_GPD"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_GPE"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
comment|/* _GPE method, not _GPE scope */
block|{
block|{
literal|"_GRT"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_GSB"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_GTF"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_GTM"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_GTS"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_GWS"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_HID"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_STRING
block|}
block|}
block|,
block|{
block|{
literal|"_HOT"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_HPP"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (4 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|4
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/*      * For _HPX, a single package is returned, containing a Variable-length number      * of sub-packages. Each sub-package contains a PCI record setting.      * There are several different type of record settings, of different      * lengths, but all elements of all settings are Integers.      */
block|{
block|{
literal|"_HPX"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each (var Ints) */
block|{
block|{
block|{
name|ACPI_PTYPE2_MIN
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|5
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_HRV"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_IFT"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
comment|/* See IPMI spec */
block|{
block|{
literal|"_INI"
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_IRC"
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_LCK"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_LID"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_MAT"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_MBM"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (8 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|8
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_MLS"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each (2 Str) */
block|{
block|{
block|{
name|ACPI_PTYPE2
block|,
name|ACPI_RTYPE_STRING
block|,
literal|2
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_MSG"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_MSM"
block|,
literal|4
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_NTT"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_OFF"
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_ON_"
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_OS_"
block|,
literal|0
block|,
name|ACPI_RTYPE_STRING
block|}
block|}
block|,
block|{
block|{
literal|"_OSC"
block|,
literal|4
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_OST"
block|,
literal|3
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PAI"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_PCL"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PCT"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (2 Buf) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_BUFFER
block|,
literal|2
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PDC"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PDL"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_PIC"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PIF"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (3 Int),(3 Str) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|3
block|,
name|ACPI_RTYPE_STRING
block|}
block|,
literal|3
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PLD"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Bufs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_BUFFER
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PMC"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (11 Int),(3 Str) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|11
block|,
name|ACPI_RTYPE_STRING
block|}
block|,
literal|3
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PMD"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PMM"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_PPC"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_PPE"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
comment|/* See dig64 spec */
block|{
block|{
literal|"_PR0"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PR1"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PR2"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PR3"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PRE"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PRL"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PRS"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
comment|/*      * For _PRT, many BIOSs reverse the 3rd and 4th Package elements (Source      * and SourceIndex). This bug is so prevalent that there is code in the      * ACPICA Resource Manager to detect this and switch them back. For now,      * do not allow and issue a warning. To allow this and eliminate the      * warning, add the ACPI_RTYPE_REFERENCE type to the 4th element (index 3)      * in the statement below.      */
block|{
block|{
literal|"_PRT"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each (4): Int,Int,Int/Ref,Int */
block|{
block|{
block|{
name|ACPI_PTYPE2_FIXED
block|,
literal|4
block|,
name|ACPI_RTYPE_INTEGER
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|,
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_REFERENCE
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_PRW"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each: Pkg/Int,Int,[Variable-length Refs] (Pkg is Ref/Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_OPTION
block|,
literal|2
block|,
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_PACKAGE
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PS0"
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PS1"
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PS2"
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PS3"
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PSC"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_PSD"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each (5 Int) with count */
block|{
block|{
block|{
name|ACPI_PTYPE2_COUNT
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PSE"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PSL"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PSR"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_PSS"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each (6 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE2
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|6
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PSV"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_PSW"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PTC"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (2 Buf) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_BUFFER
block|,
literal|2
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PTP"
block|,
literal|2
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_PTS"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PUR"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (2 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|2
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_PXM"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_REG"
block|,
literal|2
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_REV"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_RMV"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_ROM"
block|,
literal|2
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_RTV"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
comment|/*      * For _S0_ through _S5_, the ACPI spec defines a return Package      * containing 1 Integer, but most DSDTs have it wrong - 2,3, or 4 integers.      * Allow this by making the objects "Variable-length length", but all elements      * must be Integers.      */
block|{
block|{
literal|"_S0_"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (1 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|1
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_S1_"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (1 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|1
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_S2_"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (1 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|1
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_S3_"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (1 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|1
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_S4_"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (1 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|1
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_S5_"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (1 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|1
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_S1D"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_S2D"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_S3D"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_S4D"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_S0W"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_S1W"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_S2W"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_S3W"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_S4W"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_SBS"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_SCP"
block|,
literal|0x13
block|,
literal|0
block|}
block|}
block|,
comment|/* Acpi 1.0 allowed 1 arg. Acpi 3.0 expanded to 3 args. Allow both. */
comment|/* Note: the 3-arg definition may be removed for ACPI 4.0 */
block|{
block|{
literal|"_SDD"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_SEG"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_SHL"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_SLI"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_SPD"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_SRS"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_SRT"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_SRV"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
comment|/* See IPMI spec */
block|{
block|{
literal|"_SST"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_STA"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_STM"
block|,
literal|3
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_STP"
block|,
literal|2
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_STR"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_STV"
block|,
literal|2
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_SUB"
block|,
literal|0
block|,
name|ACPI_RTYPE_STRING
block|}
block|}
block|,
block|{
block|{
literal|"_SUN"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_SWS"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TC1"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TC2"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TDL"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TIP"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TIV"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TMP"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TPC"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TPT"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_TRT"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each 2Ref/6Int */
block|{
block|{
block|{
name|ACPI_PTYPE2
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|2
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|,
literal|6
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_TSD"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each 5Int with count */
block|{
block|{
block|{
name|ACPI_PTYPE2_COUNT
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|5
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_TSP"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TSS"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Pkgs) each 5Int */
block|{
block|{
block|{
name|ACPI_PTYPE2
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|5
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_TST"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_TTS"
block|,
literal|1
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_TZD"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Variable-length (Refs) */
block|{
block|{
block|{
name|ACPI_PTYPE1_VAR
block|,
name|ACPI_RTYPE_REFERENCE
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_TZM"
block|,
literal|0
block|,
name|ACPI_RTYPE_REFERENCE
block|}
block|}
block|,
block|{
block|{
literal|"_TZP"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_UID"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_STRING
block|}
block|}
block|,
block|{
block|{
literal|"_UPC"
block|,
literal|0
block|,
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
comment|/* Fixed-length (4 Int) */
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|4
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
block|{
literal|"_UPD"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_UPP"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
block|{
block|{
literal|"_VPO"
block|,
literal|0
block|,
name|ACPI_RTYPE_INTEGER
block|}
block|}
block|,
comment|/* Acpi 1.0 defined _WAK with no return value. Later, it was changed to return a package */
block|{
block|{
literal|"_WAK"
block|,
literal|1
block|,
name|ACPI_RTYPE_NONE
operator||
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_PACKAGE
block|}
block|}
block|,
block|{
block|{
block|{
name|ACPI_PTYPE1_FIXED
block|,
name|ACPI_RTYPE_INTEGER
block|,
literal|2
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Fixed-length (2 Int), but is optional */
comment|/* _WDG/_WED are MS extensions defined by "Windows Instrumentation" */
block|{
block|{
literal|"_WDG"
block|,
literal|0
block|,
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
literal|"_WED"
block|,
literal|1
block|,
name|ACPI_RTYPE_INTEGER
operator||
name|ACPI_RTYPE_STRING
operator||
name|ACPI_RTYPE_BUFFER
block|}
block|}
block|,
block|{
block|{
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
literal|0
block|,
literal|0
block|}
block|}
comment|/* Table terminator */
block|}
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* This is an internally implemented control method, no need to check */
end_comment

begin_comment
unit|{{"_OSI", 1, ACPI_RTYPE_INTEGER}},
comment|/* TBD: */
end_comment

begin_endif
unit|_PRT - currently ignore reversed entries. Attempt to fix here?     Think about possibly fixing package elements like _BIF, etc.
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

