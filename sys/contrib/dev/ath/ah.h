begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002, 2003 Sam Leffler, Errno Consulting, Atheros  * Communications, Inc.  All rights reserved.  *  * Redistribution and use in source and binary forms are permitted  * provided that the following conditions are met:  * 1. The materials contained herein are unmodified and are used  *    unmodified.  * 2. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following NO  *    ''WARRANTY'' disclaimer below (''Disclaimer''), without  *    modification.  * 3. Redistributions in binary form must reproduce at minimum a  *    disclaimer similar to the Disclaimer below and any redistribution  *    must be conditioned upon including a substantially similar  *    Disclaimer requirement for further binary redistribution.  * 4. Neither the names of the above-listed copyright holders nor the  *    names of any contributors may be used to endorse or promote  *    product derived from this software without specific prior written  *    permission.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF NONINFRINGEMENT,  * MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE  * FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGES.  *  * $Id: ah.h,v 1.35 2003/07/21 02:36:53 sam Exp $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ATH_AH_H_
end_ifndef

begin_define
define|#
directive|define
name|_ATH_AH_H_
end_define

begin_comment
comment|/*  * Atheros Hardware Access Layer  *  * Clients of the HAL call ath_hal_attach to obtain a reference to an ath_hal  * structure for use with the device.  Hardware-related operations that  * follow must call back into the HAL through interface, supplying the  * reference as the first parameter.  */
end_comment

begin_include
include|#
directive|include
file|"ah_osdep.h"
end_include

begin_comment
comment|/*  * Status codes that may be returned by the HAL.  Note that  * interfaces that return a status code set it only when an  * error occurs--i.e. you cannot check it for success.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_OK
init|=
literal|0
block|,
comment|/* No error */
name|HAL_ENXIO
block|,
comment|/* No hardware present */
name|HAL_ENOMEM
block|,
comment|/* Memory allocation failed */
name|HAL_EIO
block|,
comment|/* Hardware didn't respond as expected */
name|HAL_EEMAGIC
block|,
comment|/* EEPROM magic number invalid */
name|HAL_EEVERSION
block|,
comment|/* EEPROM version invalid */
name|HAL_EELOCKED
block|,
comment|/* EEPROM unreadable */
name|HAL_EEBADSUM
block|,
comment|/* EEPROM checksum invalid */
name|HAL_EEREAD
block|,
comment|/* EEPROM read problem */
name|HAL_EEBADMAC
block|,
comment|/* EEPROM mac address invalid */
name|HAL_EESIZE
block|,
comment|/* EEPROM size not supported */
name|HAL_EEWRITE
block|,
comment|/* Attempt to change write-locked EEPROM */
name|HAL_EINVAL
block|,
comment|/* Invalid parameter to function */
name|HAL_ENOTSUPP
block|,
comment|/* Hardware revision not supported */
name|HAL_ESELFTEST
block|,
comment|/* Hardware self-test failed */
name|HAL_EINPROGRESS
block|,
comment|/* Operation incomplete */
block|}
name|HAL_STATUS
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|AH_FALSE
init|=
literal|0
block|,
comment|/* NB: lots of code assumes false is zero */
name|AH_TRUE
init|=
literal|1
block|, }
name|HAL_BOOL
typedef|;
end_typedef

begin_comment
comment|/*   * "States" for setting the LED.  These correspond to  * the possible 802.11 operational states and there may  * be a many-to-one mapping between these states and the  * actual hardware states for the LED's (i.e. the hardware  * may have fewer states).  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_LED_INIT
init|=
literal|0
block|,
name|HAL_LED_SCAN
init|=
literal|1
block|,
name|HAL_LED_AUTH
init|=
literal|2
block|,
name|HAL_LED_ASSOC
init|=
literal|3
block|,
name|HAL_LED_RUN
init|=
literal|4
block|}
name|HAL_LED_STATE
typedef|;
end_typedef

begin_comment
comment|/*  * Transmit queue types/numbers.  These are used to tag  * each transmit queue in the hardware and to identify a set  * of transmit queues for operations such as start/stop dma.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_TX_QUEUE_INACTIVE
init|=
literal|0
block|,
comment|/* queue is inactive/unused */
name|HAL_TX_QUEUE_DATA
block|,
comment|/* data xmit q's */
name|HAL_TX_QUEUE_BEACON
block|,
comment|/* beacon xmit q */
name|HAL_TX_QUEUE_CAB
block|,
comment|/* "crap after beacon" xmit q */
name|HAL_TX_QUEUE_PSPOLL
block|,
comment|/* power-save poll xmit q */
block|}
name|HAL_TX_QUEUE
typedef|;
end_typedef

begin_define
define|#
directive|define
name|HAL_NUM_TX_QUEUES
value|10
end_define

begin_comment
comment|/* max possible # of queues */
end_comment

begin_comment
comment|/*  * Transmit packet types.  This belongs in ah_desc.h, but  * is here so we can give a proper type to various parameters  * (and not require everyone include the file).  *  * NB: These values are intentionally assigned for  *     direct use when setting up h/w descriptors.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_PKT_TYPE_NORMAL
init|=
literal|0
block|,
name|HAL_PKT_TYPE_ATIM
init|=
literal|1
block|,
name|HAL_PKT_TYPE_PSPOLL
init|=
literal|2
block|,
name|HAL_PKT_TYPE_BEACON
init|=
literal|3
block|,
name|HAL_PKT_TYPE_PROBE_RESP
init|=
literal|4
block|, }
name|HAL_PKT_TYPE
typedef|;
end_typedef

begin_comment
comment|/* Rx Filter Frame Types */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_RX_FILTER_UCAST
init|=
literal|0x00000001
block|,
comment|/* Allow unicast frames */
name|HAL_RX_FILTER_MCAST
init|=
literal|0x00000002
block|,
comment|/* Allow multicast frames */
name|HAL_RX_FILTER_BCAST
init|=
literal|0x00000004
block|,
comment|/* Allow broadcast frames */
name|HAL_RX_FILTER_CONTROL
init|=
literal|0x00000008
block|,
comment|/* Allow control frames */
name|HAL_RX_FILTER_BEACON
init|=
literal|0x00000010
block|,
comment|/* Allow beacon frames */
name|HAL_RX_FILTER_PROM
init|=
literal|0x00000020
block|,
comment|/* Promiscuous mode */
name|HAL_RX_FILTER_PROBEREQ
init|=
literal|0x00000080
block|,
comment|/* Allow probe request frames */
name|HAL_RX_FILTER_PHYERR
init|=
literal|0x00000100
block|,
comment|/* Allow phy errors */
name|HAL_RX_FILTER_PHYRADAR
init|=
literal|0x00000200
block|,
comment|/* Allow phy radar errors*/
block|}
name|HAL_RX_FILTER
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_PM_UNDEFINED
init|=
literal|0
block|,
name|HAL_PM_AUTO
init|=
literal|1
block|,
name|HAL_PM_AWAKE
init|=
literal|2
block|,
name|HAL_PM_FULL_SLEEP
init|=
literal|3
block|,
name|HAL_PM_NETWORK_SLEEP
init|=
literal|4
block|}
name|HAL_POWER_MODE
typedef|;
end_typedef

begin_comment
comment|/*  * NOTE WELL:  * These are mapped to take advantage of the common locations for many of  * the bits on all of the currently supported MAC chips. This is to make  * the ISR as efficient as possible, while still abstracting HW differences.  * When new hardware breaks this commonality this enumerated type, as well  * as the HAL functions using it, must be modified. All values are directly  * mapped unless commented otherwise.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_INT_RX
init|=
literal|0x00000001
block|,
comment|/* Non-common mapping */
name|HAL_INT_RXDESC
init|=
literal|0x00000002
block|,
name|HAL_INT_RXNOFRM
init|=
literal|0x00000008
block|,
name|HAL_INT_RXEOL
init|=
literal|0x00000010
block|,
name|HAL_INT_RXORN
init|=
literal|0x00000020
block|,
name|HAL_INT_TX
init|=
literal|0x00000040
block|,
comment|/* Non-common mapping */
name|HAL_INT_TXDESC
init|=
literal|0x00000080
block|,
name|HAL_INT_TXURN
init|=
literal|0x00000800
block|,
name|HAL_INT_MIB
init|=
literal|0x00001000
block|,
name|HAL_INT_RXPHY
init|=
literal|0x00004000
block|,
name|HAL_INT_RXKCM
init|=
literal|0x00008000
block|,
name|HAL_INT_SWBA
init|=
literal|0x00010000
block|,
name|HAL_INT_BMISS
init|=
literal|0x00040000
block|,
name|HAL_INT_BNR
init|=
literal|0x00100000
block|,
comment|/* Non-common mapping */
name|HAL_INT_GPIO
init|=
literal|0x01000000
block|,
name|HAL_INT_FATAL
init|=
literal|0x40000000
block|,
comment|/* Non-common mapping */
name|HAL_INT_GLOBAL
init|=
literal|0x80000000
block|,
comment|/* Set/clear IER */
comment|/* Interrupt bits that map directly to ISR/IMR bits */
name|HAL_INT_COMMON
init|=
name|HAL_INT_RXNOFRM
operator||
name|HAL_INT_RXDESC
operator||
name|HAL_INT_RXEOL
operator||
name|HAL_INT_RXORN
operator||
name|HAL_INT_TXURN
operator||
name|HAL_INT_TXDESC
operator||
name|HAL_INT_MIB
operator||
name|HAL_INT_RXPHY
operator||
name|HAL_INT_RXKCM
operator||
name|HAL_INT_SWBA
operator||
name|HAL_INT_BMISS
operator||
name|HAL_INT_GPIO
block|,
name|HAL_INT_NOCARD
init|=
literal|0xffffffff
comment|/* To signal the card was removed */
block|}
name|HAL_INT
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_RFGAIN_INACTIVE
block|,
name|HAL_RFGAIN_READ_REQUESTED
block|,
name|HAL_RFGAIN_NEED_CHANGE
block|}
name|HAL_RFGAIN
typedef|;
end_typedef

begin_comment
comment|/*  * Channels are specified by frequency.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int16_t
name|channel
decl_stmt|;
comment|/* setting in Mhz */
name|u_int16_t
name|channelFlags
decl_stmt|;
comment|/* see below */
block|}
name|HAL_CHANNEL
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CHANNEL_RAD_INT
value|0x0001
end_define

begin_comment
comment|/* Radar interference detected on channel */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_CW_INT
value|0x0002
end_define

begin_comment
comment|/* CW interference detected on channel */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_BUSY
value|0x0004
end_define

begin_comment
comment|/* Busy, occupied or overlap with adjoin chan */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_TURBO
value|0x0010
end_define

begin_comment
comment|/* Turbo Channel */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_CCK
value|0x0020
end_define

begin_comment
comment|/* CCK channel */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_OFDM
value|0x0040
end_define

begin_comment
comment|/* OFDM channel */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_2GHZ
value|0x0080
end_define

begin_comment
comment|/* 2 GHz spectrum channel. */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_5GHZ
value|0x0100
end_define

begin_comment
comment|/* 5 GHz spectrum channel */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_PASSIVE
value|0x0200
end_define

begin_comment
comment|/* Only passive scan allowed in the channel */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_DYN
value|0x0400
end_define

begin_comment
comment|/* dynamic CCK-OFDM channel */
end_comment

begin_define
define|#
directive|define
name|CHANNEL_A
value|(CHANNEL_5GHZ|CHANNEL_OFDM)
end_define

begin_define
define|#
directive|define
name|CHANNEL_B
value|(CHANNEL_2GHZ|CHANNEL_CCK)
end_define

begin_define
define|#
directive|define
name|CHANNEL_PUREG
value|(CHANNEL_2GHZ|CHANNEL_OFDM)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|notdef
end_ifdef

begin_define
define|#
directive|define
name|CHANNEL_G
value|(CHANNEL_2GHZ|CHANNEL_DYN)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CHANNEL_G
value|(CHANNEL_2GHZ|CHANNEL_OFDM)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CHANNEL_T
value|(CHANNEL_5GHZ|CHANNEL_OFDM|CHANNEL_TURBO)
end_define

begin_define
define|#
directive|define
name|CHANNEL_ALL
define|\
value|(CHANNEL_OFDM|CHANNEL_CCK|CHANNEL_5GHZ|CHANNEL_2GHZ|CHANNEL_TURBO)
end_define

begin_define
define|#
directive|define
name|CHANNEL_ALL_NOTURBO
value|(CHANNEL_ALL&~ CHANNEL_TURBO)
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int32_t
name|ackrcv_bad
decl_stmt|;
name|u_int32_t
name|rts_bad
decl_stmt|;
name|u_int32_t
name|rts_good
decl_stmt|;
name|u_int32_t
name|fcs_bad
decl_stmt|;
name|u_int32_t
name|beacons
decl_stmt|;
block|}
name|HAL_MIB_STATS
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int16_t
name|HAL_CTRY_CODE
typedef|;
end_typedef

begin_comment
comment|/* country code */
end_comment

begin_typedef
typedef|typedef
name|u_int16_t
name|HAL_REG_DOMAIN
typedef|;
end_typedef

begin_comment
comment|/* regulatory domain code */
end_comment

begin_enum
enum|enum
block|{
name|CTRY_DEBUG
init|=
literal|0x1ff
block|,
comment|/* debug country code */
name|CTRY_DEFAULT
init|=
literal|0
comment|/* default country code */
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|HAL_MODE_11A
init|=
literal|0x001
block|,
name|HAL_MODE_TURBO
init|=
literal|0x002
block|,
name|HAL_MODE_11B
init|=
literal|0x004
block|,
name|HAL_MODE_PUREG
init|=
literal|0x008
block|,
ifdef|#
directive|ifdef
name|notdef
name|HAL_MODE_11G
init|=
literal|0x010
block|,
else|#
directive|else
name|HAL_MODE_11G
init|=
literal|0x008
block|,
endif|#
directive|endif
name|HAL_MODE_ALL
init|=
literal|0xfff
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int16_t
name|rateCount
decl_stmt|;
name|u_int8_t
name|rateCodeToIndex
index|[
literal|32
index|]
decl_stmt|;
comment|/* back mapping */
struct|struct
block|{
name|u_int8_t
name|valid
decl_stmt|;
comment|/* valid for rate control use */
name|u_int8_t
name|phy
decl_stmt|;
comment|/* CCK/OFDM/XR */
name|u_int16_t
name|rateKbps
decl_stmt|;
comment|/* transfer rate in kbs */
name|u_int8_t
name|rateCode
decl_stmt|;
comment|/* rate for h/w descriptors */
name|u_int8_t
name|shortPreamble
decl_stmt|;
comment|/* mask for enabling short 						 * preamble in CCK rate code */
name|u_int8_t
name|dot11Rate
decl_stmt|;
comment|/* value for supported rates 						 * info element of MLME */
name|u_int8_t
name|controlRate
decl_stmt|;
comment|/* index of next lower basic 						 * rate; used for dur. calcs */
block|}
name|info
index|[
literal|32
index|]
struct|;
block|}
name|HAL_RATE_TABLE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int
name|rs_count
decl_stmt|;
comment|/* number of valid entries */
name|u_int8_t
name|rs_rates
index|[
literal|32
index|]
decl_stmt|;
comment|/* rates */
block|}
name|HAL_RATE_SET
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_ANT_VARIABLE
block|,
comment|/* variable by programming */
name|HAL_ANT_FIXED_A
block|,
comment|/* fixed to 11a frequencies */
name|HAL_ANT_FIXED_B
block|,
comment|/* fixed to 11b frequencies */
block|}
name|HAL_ANT_SETTING
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_M_STA
init|=
literal|1
block|,
comment|/* infrastructure station */
name|HAL_M_IBSS
init|=
literal|0
block|,
comment|/* IBSS (adhoc) station */
name|HAL_M_HOSTAP
init|=
literal|6
block|,
comment|/* Software Access Point */
name|HAL_M_MONITOR
init|=
literal|8
comment|/* Monitor mode */
block|}
name|HAL_OPMODE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|wk_len
decl_stmt|;
name|u_int8_t
name|wk_key
index|[
literal|16
index|]
decl_stmt|;
comment|/* XXX big enough for WEP */
block|}
name|HAL_KEYVAL
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|HAL_CIPHER_WEP
block|,
name|HAL_CIPHER_AES_CCM
block|,
name|HAL_CIPHER_CKIP
block|}
name|HAL_CIPHER
typedef|;
end_typedef

begin_comment
comment|/*  * Per-station beacon timer state.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int32_t
name|bs_nexttbtt
decl_stmt|;
comment|/* next beacon in TU */
name|u_int32_t
name|bs_nextdtim
decl_stmt|;
comment|/* next DTIM in TU */
name|u_int16_t
name|bs_intval
decl_stmt|;
comment|/* beacon interval/period */
name|u_int8_t
name|bs_dtimperiod
decl_stmt|;
name|u_int8_t
name|bs_cfpperiod
decl_stmt|;
comment|/* # of DTIMs between CFPs */
name|u_int16_t
name|bs_cfpmaxduration
decl_stmt|;
comment|/* max CFP duration in TU */
name|u_int16_t
name|bs_cfpduremain
decl_stmt|;
comment|/* remaining CFP duration */
name|u_int16_t
name|bs_timoffset
decl_stmt|;
name|u_int16_t
name|bs_sleepduration
decl_stmt|;
comment|/* max sleep duration */
name|u_int16_t
name|bs_bmissthreshold
decl_stmt|;
comment|/* beacon miss threshold */
block|}
name|HAL_BEACON_STATE
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|ath_desc
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * Hardware Access Layer (HAL) API.  *  * Clients of the HAL call ath_hal_attach to obtain a reference to an  * ath_hal structure for use with the device.  Hardware-related operations  * that follow must call back into the HAL through interface, supplying  * the reference as the first parameter.  */
end_comment

begin_struct
struct|struct
name|ath_hal
block|{
name|u_int32_t
name|ah_magic
decl_stmt|;
comment|/* consistency check magic number */
name|u_int16_t
name|ah_devid
decl_stmt|;
comment|/* PCI device ID */
name|u_int16_t
name|ah_subvendorid
decl_stmt|;
comment|/* PCI subvendor ID */
name|HAL_SOFTC
name|ah_sc
decl_stmt|;
comment|/* back pointer to driver/os state */
name|HAL_BUS_TAG
name|ah_st
decl_stmt|;
comment|/* params for register r+w */
name|HAL_BUS_HANDLE
name|ah_sh
decl_stmt|;
name|HAL_CTRY_CODE
name|ah_countryCode
decl_stmt|;
specifier|const
name|HAL_RATE_TABLE
modifier|*
function_decl|(
modifier|*
name|ah_getRateTable
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|mode
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_detach
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
comment|/* Reset functions */
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_reset
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_OPMODE
parameter_list|,
name|HAL_CHANNEL
modifier|*
parameter_list|,
name|HAL_BOOL
name|bChannelChange
parameter_list|,
name|HAL_STATUS
modifier|*
name|status
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setPCUConfig
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_OPMODE
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_perCalibration
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CHANNEL
modifier|*
parameter_list|)
function_decl|;
comment|/* Transmit functions */
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_updateTxTrigLevel
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_BOOL
name|incTrigLevel
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ah_setupTxQueue
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_TX_QUEUE
name|type
parameter_list|,
name|HAL_BOOL
name|irq
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_releaseTxQueue
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|q
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_resetTxQueue
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|q
parameter_list|)
function_decl|;
name|u_int32_t
function_decl|(
modifier|*
name|ah_getTxDP
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setTxDP
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|u_int32_t
name|txdp
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_startTxDma
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_stopTxDma
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setupTxDesc
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|,
name|u_int
name|pktLen
parameter_list|,
name|u_int
name|hdrLen
parameter_list|,
name|HAL_PKT_TYPE
name|type
parameter_list|,
name|u_int
name|txPower
parameter_list|,
name|u_int
name|txRate0
parameter_list|,
name|u_int
name|txTries0
parameter_list|,
name|u_int
name|keyIx
parameter_list|,
name|u_int
name|antMode
parameter_list|,
name|u_int
name|flags
parameter_list|,
name|u_int
name|rtsctsRate
parameter_list|,
name|u_int
name|rtsctsDuration
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setupXTxDesc
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|,
name|HAL_BOOL
name|shortPreamble
parameter_list|,
name|u_int
name|txRate1
parameter_list|,
name|u_int
name|txTries1
parameter_list|,
name|u_int
name|txRate2
parameter_list|,
name|u_int
name|txTries2
parameter_list|,
name|u_int
name|txRate3
parameter_list|,
name|u_int
name|txTries3
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_fillTxDesc
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|,
name|u_int
name|segLen
parameter_list|,
name|HAL_BOOL
name|firstSeg
parameter_list|,
name|HAL_BOOL
name|lastSeg
parameter_list|)
function_decl|;
name|HAL_STATUS
function_decl|(
modifier|*
name|ah_procTxDesc
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_hasVEOL
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
comment|/* Receive Functions */
name|u_int32_t
function_decl|(
modifier|*
name|ah_getRxDP
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_setRxDP
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
name|rxdp
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_enableReceive
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_stopDmaReceive
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_startPcuReceive
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_stopPcuReceive
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_setMulticastFilter
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
name|filter0
parameter_list|,
name|u_int32_t
name|filter1
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setMulticastFilterIndex
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
name|index
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_clrMulticastFilterIndex
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
name|index
parameter_list|)
function_decl|;
name|u_int32_t
function_decl|(
modifier|*
name|ah_getRxFilter
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_setRxFilter
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setupRxDesc
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|,
name|u_int32_t
name|size
parameter_list|,
name|u_int
name|flags
parameter_list|)
function_decl|;
name|HAL_STATUS
function_decl|(
modifier|*
name|ah_procRxDesc
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|struct
name|ath_desc
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_rxMonitor
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
comment|/* Misc Functions */
name|void
function_decl|(
modifier|*
name|ah_dumpState
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_dumpEeprom
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_dumpRfGain
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_dumpAni
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_getMacAddress
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setRegulatoryDomain
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|,
name|HAL_STATUS
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_setLedState
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_LED_STATE
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_writeAssocid
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|bssid
parameter_list|,
name|u_int16_t
name|assocId
parameter_list|,
name|u_int16_t
name|timOffset
parameter_list|)
function_decl|;
name|u_int32_t
function_decl|(
modifier|*
name|ah_gpioGet
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
name|gpio
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_gpioSetIntr
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
name|u_int32_t
function_decl|(
modifier|*
name|ah_getTsf32
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|u_int64_t
function_decl|(
modifier|*
name|ah_getTsf64
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_resetTsf
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|u_int16_t
function_decl|(
modifier|*
name|ah_getRegDomain
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|u_int
function_decl|(
modifier|*
name|ah_getWirelessModes
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_getRfKill
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|u_int32_t
function_decl|(
modifier|*
name|ah_getRandomSeed
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_detectCardPresent
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_updateMibCounters
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_MIB_STATS
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_isHwCipherSupported
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CIPHER
parameter_list|)
function_decl|;
name|HAL_RFGAIN
function_decl|(
modifier|*
name|ah_getRfGain
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
block|u_int32_t	(*ah_getCurRssi)(struct ath_hal*); 	u_int32_t	(*ah_getDefAntenna)(struct ath_hal*); 	void		(*ah_setDefAntenna)(struct ath_hal*, u_int32_t antenna);
endif|#
directive|endif
comment|/* Key Cache Functions */
name|u_int32_t
function_decl|(
modifier|*
name|ah_getKeyCacheSize
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_resetKeyCacheEntry
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_isKeyCacheEntryValid
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setKeyCacheEntry
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|,
specifier|const
name|HAL_KEYVAL
modifier|*
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setKeyCacheEntryMac
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|)
function_decl|;
comment|/* Power Management Functions */
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_setPowerMode
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_POWER_MODE
name|mode
parameter_list|,
name|int
name|setChip
parameter_list|,
name|u_int16_t
name|sleepDuration
parameter_list|)
function_decl|;
name|HAL_POWER_MODE
function_decl|(
modifier|*
name|ah_getPowerMode
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_queryPSPollSupport
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_initPSPoll
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_enablePSPoll
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_disablePSPoll
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
comment|/* Beacon Management Functions */
name|void
function_decl|(
modifier|*
name|ah_beaconInit
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_OPMODE
parameter_list|,
name|u_int32_t
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_setStationBeaconTimers
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|HAL_BEACON_STATE
modifier|*
parameter_list|,
name|u_int32_t
name|tsf
parameter_list|,
name|u_int32_t
name|dtimCount
parameter_list|,
name|u_int32_t
name|cfpCcount
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ah_resetStationBeaconTimers
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_waitForBeaconDone
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_BUS_ADDR
parameter_list|)
function_decl|;
comment|/* Interrupt functions */
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_isInterruptPending
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|ah_getPendingInterrupts
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_INT
modifier|*
parameter_list|)
function_decl|;
name|HAL_INT
function_decl|(
modifier|*
name|ah_getInterrupts
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
name|HAL_INT
function_decl|(
modifier|*
name|ah_setInterrupts
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_INT
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/*   * Check the PCI vendor ID and device ID against Atheros' values  * and return a printable description for any Atheros hardware.  * AH_NULL is returned if the ID's do not describe Atheros hardware.  */
end_comment

begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|ath_hal_probe
parameter_list|(
name|u_int16_t
name|vendorid
parameter_list|,
name|u_int16_t
name|devid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Attach the HAL for use with the specified device.  The device is  * defined by the PCI device ID.  The caller provides an opaque pointer  * to an upper-layer data structure (HAL_SOFTC) that is stored in the  * HAL state block for later use.  Hardware register accesses are done  * using the specified bus tag and handle.  On successful return a  * reference to a state block is returned that must be supplied in all  * subsequent HAL calls.  Storage associated with this reference is  * dynamically allocated and must be freed by calling the ah_detach  * method when the client is done.  If the attach operation fails a  * null (AH_NULL) reference will be returned and a status code will  * be returned if the status parameter is non-zero.  */
end_comment

begin_function_decl
specifier|extern
name|struct
name|ath_hal
modifier|*
name|ath_hal_attach
parameter_list|(
name|u_int16_t
name|devid
parameter_list|,
name|HAL_SOFTC
parameter_list|,
name|HAL_BUS_TAG
parameter_list|,
name|HAL_BUS_HANDLE
parameter_list|,
name|HAL_STATUS
modifier|*
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Return a list of channels available for use with the hardware.  * The list is based on what the hardware is capable of, the specified  * country code, the modeSelect mask, and whether or not outdoor  * channels are to be permitted.  *  * The channel list is returned in the supplied array.  maxchans  * defines the maximum size of this array.  nchans contains the actual  * number of channels returned.  If a problem occurred or there were  * no channels that met the criteria then AH_FALSE is returned.  */
end_comment

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ath_hal_init_channels
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chans
parameter_list|,
name|u_int
name|maxchans
parameter_list|,
name|u_int
modifier|*
name|nchans
parameter_list|,
name|HAL_CTRY_CODE
name|cc
parameter_list|,
name|u_int16_t
name|modeSelect
parameter_list|,
name|int
name|enableOutdoor
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Return bit mask of wireless modes supported by the hardware.  */
end_comment

begin_function_decl
specifier|extern
name|u_int
name|ath_hal_getwirelessmodes
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CTRY_CODE
name|cc
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Return rate table for specified mode (11a, 11b, 11g, etc).  */
end_comment

begin_function_decl
specifier|extern
specifier|const
name|HAL_RATE_TABLE
modifier|*
name|ath_hal_getratetable
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Calculate the transmit duration of a frame.  */
end_comment

begin_function_decl
specifier|extern
name|u_int16_t
name|ath_hal_computetxtime
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|HAL_RATE_TABLE
modifier|*
name|rates
parameter_list|,
name|u_int32_t
name|frameLen
parameter_list|,
name|u_int16_t
name|rateix
parameter_list|,
name|HAL_BOOL
name|shortPreamble
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Convert between IEEE channel number and channel frequency  * using the specified channel flags; e.g. CHANNEL_2GHZ.  */
end_comment

begin_function_decl
specifier|extern
name|u_int
name|ath_hal_mhz2ieee
parameter_list|(
name|u_int
name|mhz
parameter_list|,
name|u_int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ath_hal_ieee2mhz
parameter_list|(
name|u_int
name|ieee
parameter_list|,
name|u_int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ATH_AH_H_ */
end_comment

end_unit

