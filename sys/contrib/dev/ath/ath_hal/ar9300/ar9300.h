begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2013 Qualcomm Atheros, Inc.  *  * Permission to use, copy, modify, and/or distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH  * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY  * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,  * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM  * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR  * OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR  * PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ATH_AR9300_H_
end_ifndef

begin_define
define|#
directive|define
name|_ATH_AR9300_H_
end_define

begin_include
include|#
directive|include
file|"ah_internal.h"
end_include

begin_include
include|#
directive|include
file|"ah_eeprom.h"
end_include

begin_include
include|#
directive|include
file|"ah_devid.h"
end_include

begin_include
include|#
directive|include
file|"ar9300eep.h"
end_include

begin_comment
comment|/* For Eeprom definitions */
end_comment

begin_include
include|#
directive|include
file|"asf_amem.h"
end_include

begin_define
define|#
directive|define
name|AR9300_MAGIC
value|0x19741014
end_define

begin_comment
comment|/* MAC register values */
end_comment

begin_define
define|#
directive|define
name|INIT_CONFIG_STATUS
value|0x00000000
end_define

begin_define
define|#
directive|define
name|INIT_RSSI_THR
value|0x7
end_define

begin_comment
comment|/* Missed beacon counter initialized to 0x7 (max is 0xff) */
end_comment

begin_define
define|#
directive|define
name|INIT_RSSI_BEACON_WEIGHT
value|8
end_define

begin_comment
comment|/* ave beacon rssi weight (0-16) */
end_comment

begin_comment
comment|/*  * Various fifo fill before Tx start, in 64-byte units  * i.e. put the frame in the air while still DMAing  */
end_comment

begin_define
define|#
directive|define
name|MIN_TX_FIFO_THRESHOLD
value|0x1
end_define

begin_define
define|#
directive|define
name|MAX_TX_FIFO_THRESHOLD
value|(( 4096 / 64) - 1)
end_define

begin_define
define|#
directive|define
name|INIT_TX_FIFO_THRESHOLD
value|MIN_TX_FIFO_THRESHOLD
end_define

begin_define
define|#
directive|define
name|CHANSEL_DIV
value|15
end_define

begin_define
define|#
directive|define
name|FCLK
value|40
end_define

begin_define
define|#
directive|define
name|COEFF
value|((FCLK * 5) / 2)
end_define

begin_define
define|#
directive|define
name|CHANSEL_2G
parameter_list|(
name|_freq
parameter_list|)
value|(((_freq) * 0x10000) / CHANSEL_DIV)
end_define

begin_define
define|#
directive|define
name|CHANSEL_5G
parameter_list|(
name|_freq
parameter_list|)
value|(((_freq) * 0x8000) / CHANSEL_DIV)
end_define

begin_define
define|#
directive|define
name|CHANSEL_5G_DOT5MHZ
value|2188
end_define

begin_comment
comment|/*  * Receive Queue Fifo depth.  */
end_comment

begin_enum
enum|enum
name|RX_FIFO_DEPTH
block|{
name|HAL_HP_RXFIFO_DEPTH
init|=
literal|16
block|,
name|HAL_LP_RXFIFO_DEPTH
init|=
literal|128
block|, }
enum|;
end_enum

begin_comment
comment|/*  * Gain support.  */
end_comment

begin_define
define|#
directive|define
name|NUM_CORNER_FIX_BITS_2133
value|7
end_define

begin_define
define|#
directive|define
name|CCK_OFDM_GAIN_DELTA
value|15
end_define

begin_enum
enum|enum
name|GAIN_PARAMS
block|{
name|GP_TXCLIP
block|,
name|GP_PD90
block|,
name|GP_PD84
block|,
name|GP_GSEL
block|}
enum|;
end_enum

begin_enum
enum|enum
name|GAIN_PARAMS_2133
block|{
name|GP_MIXGAIN_OVR
block|,
name|GP_PWD_138
block|,
name|GP_PWD_137
block|,
name|GP_PWD_136
block|,
name|GP_PWD_132
block|,
name|GP_PWD_131
block|,
name|GP_PWD_130
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|HAL_RESET_POWER_ON
block|,
name|HAL_RESET_WARM
block|,
name|HAL_RESET_COLD
block|, }
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
name|_gain_opt_step
block|{
name|int16_t
name|paramVal
index|[
name|NUM_CORNER_FIX_BITS_2133
index|]
decl_stmt|;
name|int32_t
name|stepGain
decl_stmt|;
name|int8_t
name|stepName
index|[
literal|16
index|]
decl_stmt|;
block|}
name|GAIN_OPTIMIZATION_STEP
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int32_t
name|numStepsInLadder
decl_stmt|;
name|u_int32_t
name|defaultStepNum
decl_stmt|;
name|GAIN_OPTIMIZATION_STEP
name|optStep
index|[
literal|10
index|]
decl_stmt|;
block|}
name|GAIN_OPTIMIZATION_LADDER
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int32_t
name|currStepNum
decl_stmt|;
name|u_int32_t
name|currGain
decl_stmt|;
name|u_int32_t
name|targetGain
decl_stmt|;
name|u_int32_t
name|loTrig
decl_stmt|;
name|u_int32_t
name|hiTrig
decl_stmt|;
name|u_int32_t
name|gainFCorrection
decl_stmt|;
name|u_int32_t
name|active
decl_stmt|;
name|GAIN_OPTIMIZATION_STEP
modifier|*
name|curr_step
decl_stmt|;
block|}
name|GAIN_VALUES
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int16_t
name|synth_center
decl_stmt|;
name|u_int16_t
name|ctl_center
decl_stmt|;
name|u_int16_t
name|ext_center
decl_stmt|;
block|}
name|CHAN_CENTERS
typedef|;
end_typedef

begin_comment
comment|/* RF HAL structures */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|rf_hal_funcs
block|{
name|HAL_BOOL
function_decl|(
modifier|*
name|set_channel
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CHANNEL_INTERNAL
modifier|*
parameter_list|)
function_decl|;
name|HAL_BOOL
function_decl|(
modifier|*
name|get_chip_power_lim
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chans
parameter_list|,
name|u_int32_t
name|nchancs
parameter_list|)
function_decl|;
block|}
name|RF_HAL_FUNCS
typedef|;
end_typedef

begin_struct
struct|struct
name|ar9300_ani_default
block|{
name|u_int16_t
name|m1_thresh_low
decl_stmt|;
name|u_int16_t
name|m2_thresh_low
decl_stmt|;
name|u_int16_t
name|m1_thresh
decl_stmt|;
name|u_int16_t
name|m2_thresh
decl_stmt|;
name|u_int16_t
name|m2_count_thr
decl_stmt|;
name|u_int16_t
name|m2_count_thr_low
decl_stmt|;
name|u_int16_t
name|m1_thresh_low_ext
decl_stmt|;
name|u_int16_t
name|m2_thresh_low_ext
decl_stmt|;
name|u_int16_t
name|m1_thresh_ext
decl_stmt|;
name|u_int16_t
name|m2_thresh_ext
decl_stmt|;
name|u_int16_t
name|firstep
decl_stmt|;
name|u_int16_t
name|firstep_low
decl_stmt|;
name|u_int16_t
name|cycpwr_thr1
decl_stmt|;
name|u_int16_t
name|cycpwr_thr1_ext
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Per-channel ANI state private to the driver.  */
end_comment

begin_struct
struct|struct
name|ar9300_ani_state
block|{
name|HAL_CHANNEL
name|c
decl_stmt|;
name|HAL_BOOL
name|must_restore
decl_stmt|;
name|HAL_BOOL
name|ofdms_turn
decl_stmt|;
name|u_int8_t
name|ofdm_noise_immunity_level
decl_stmt|;
name|u_int8_t
name|cck_noise_immunity_level
decl_stmt|;
name|u_int8_t
name|spur_immunity_level
decl_stmt|;
name|u_int8_t
name|firstep_level
decl_stmt|;
name|u_int8_t
name|ofdm_weak_sig_detect_off
decl_stmt|;
name|u_int8_t
name|mrc_cck_off
decl_stmt|;
comment|/* Thresholds */
name|u_int32_t
name|listen_time
decl_stmt|;
name|u_int32_t
name|ofdm_trig_high
decl_stmt|;
name|u_int32_t
name|ofdm_trig_low
decl_stmt|;
name|int32_t
name|cck_trig_high
decl_stmt|;
name|int32_t
name|cck_trig_low
decl_stmt|;
name|int32_t
name|rssi_thr_low
decl_stmt|;
name|int32_t
name|rssi_thr_high
decl_stmt|;
name|int32_t
name|rssi
decl_stmt|;
comment|/* The current RSSI */
name|u_int32_t
name|tx_frame_count
decl_stmt|;
comment|/* Last tx_frame_count */
name|u_int32_t
name|rx_frame_count
decl_stmt|;
comment|/* Last rx Frame count */
name|u_int32_t
name|cycle_count
decl_stmt|;
comment|/* Last cycle_count (can detect wrap-around) */
name|u_int32_t
name|ofdm_phy_err_count
decl_stmt|;
comment|/* OFDM err count since last reset */
name|u_int32_t
name|cck_phy_err_count
decl_stmt|;
comment|/* CCK err count since last reset */
name|struct
name|ar9300_ani_default
name|ini_def
decl_stmt|;
comment|/* INI default values for ANI registers */
name|HAL_BOOL
name|phy_noise_spur
decl_stmt|;
comment|/* based on OFDM/CCK Phy errors */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|AR9300_ANI_POLLINTERVAL
value|1000
end_define

begin_comment
comment|/* 1000 milliseconds between ANI poll */
end_comment

begin_define
define|#
directive|define
name|AR9300_CHANNEL_SWITCH_TIME_USEC
value|1000
end_define

begin_comment
comment|/* 1 millisecond needed to change channels */
end_comment

begin_define
define|#
directive|define
name|HAL_PROCESS_ANI
value|0x00000001
end_define

begin_comment
comment|/* ANI state setup */
end_comment

begin_define
define|#
directive|define
name|HAL_RADAR_EN
value|0x80000000
end_define

begin_comment
comment|/* Radar detect is capable */
end_comment

begin_define
define|#
directive|define
name|HAL_AR_EN
value|0x40000000
end_define

begin_comment
comment|/* AR detect is capable */
end_comment

begin_define
define|#
directive|define
name|DO_ANI
parameter_list|(
name|ah
parameter_list|)
define|\
value|((AH9300(ah)->ah_proc_phy_err& HAL_PROCESS_ANI))
end_define

begin_struct
struct|struct
name|ar9300_stats
block|{
name|u_int32_t
name|ast_ani_niup
decl_stmt|;
comment|/* ANI increased noise immunity */
name|u_int32_t
name|ast_ani_nidown
decl_stmt|;
comment|/* ANI decreased noise immunity */
name|u_int32_t
name|ast_ani_spurup
decl_stmt|;
comment|/* ANI increased spur immunity */
name|u_int32_t
name|ast_ani_spurdown
decl_stmt|;
comment|/* ANI descreased spur immunity */
name|u_int32_t
name|ast_ani_ofdmon
decl_stmt|;
comment|/* ANI OFDM weak signal detect on */
name|u_int32_t
name|ast_ani_ofdmoff
decl_stmt|;
comment|/* ANI OFDM weak signal detect off */
name|u_int32_t
name|ast_ani_cckhigh
decl_stmt|;
comment|/* ANI CCK weak signal threshold high */
name|u_int32_t
name|ast_ani_ccklow
decl_stmt|;
comment|/* ANI CCK weak signal threshold low */
name|u_int32_t
name|ast_ani_stepup
decl_stmt|;
comment|/* ANI increased first step level */
name|u_int32_t
name|ast_ani_stepdown
decl_stmt|;
comment|/* ANI decreased first step level */
name|u_int32_t
name|ast_ani_ofdmerrs
decl_stmt|;
comment|/* ANI cumulative ofdm phy err count */
name|u_int32_t
name|ast_ani_cckerrs
decl_stmt|;
comment|/* ANI cumulative cck phy err count */
name|u_int32_t
name|ast_ani_reset
decl_stmt|;
comment|/* ANI parameters zero'd for non-STA */
name|u_int32_t
name|ast_ani_lzero
decl_stmt|;
comment|/* ANI listen time forced to zero */
name|u_int32_t
name|ast_ani_lneg
decl_stmt|;
comment|/* ANI listen time calculated< 0 */
name|HAL_MIB_STATS
name|ast_mibstats
decl_stmt|;
comment|/* MIB counter stats */
name|HAL_NODE_STATS
name|ast_nodestats
decl_stmt|;
comment|/* Latest rssi stats from driver */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ar9300_rad_reader
block|{
name|u_int16_t
name|rd_index
decl_stmt|;
name|u_int16_t
name|rd_expSeq
decl_stmt|;
name|u_int32_t
name|rd_resetVal
decl_stmt|;
name|u_int8_t
name|rd_start
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ar9300_rad_writer
block|{
name|u_int16_t
name|wr_index
decl_stmt|;
name|u_int16_t
name|wr_seq
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ar9300_radar_event
block|{
name|u_int32_t
name|re_ts
decl_stmt|;
comment|/* 32 bit time stamp */
name|u_int8_t
name|re_rssi
decl_stmt|;
comment|/* rssi of radar event */
name|u_int8_t
name|re_dur
decl_stmt|;
comment|/* duration of radar pulse */
name|u_int8_t
name|re_chanIndex
decl_stmt|;
comment|/* Channel of event */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ar9300_radar_q_elem
block|{
name|u_int32_t
name|rq_seqNum
decl_stmt|;
name|u_int32_t
name|rq_busy
decl_stmt|;
comment|/* 32 bit to insure atomic read/write */
name|struct
name|ar9300_radar_event
name|rq_event
decl_stmt|;
comment|/* Radar event */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ar9300_radar_q_info
block|{
name|u_int16_t
name|ri_qsize
decl_stmt|;
comment|/* q size */
name|u_int16_t
name|ri_seqSize
decl_stmt|;
comment|/* Size of sequence ring */
name|struct
name|ar9300_rad_reader
name|ri_reader
decl_stmt|;
comment|/* State for the q reader */
name|struct
name|ar9300_rad_writer
name|ri_writer
decl_stmt|;
comment|/* state for the q writer */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|HAL_MAX_ACK_RADAR_DUR
value|511
end_define

begin_define
define|#
directive|define
name|HAL_MAX_NUM_PEAKS
value|3
end_define

begin_define
define|#
directive|define
name|HAL_ARQ_SIZE
value|4096
end_define

begin_comment
comment|/* 8K AR events for buffer size */
end_comment

begin_define
define|#
directive|define
name|HAL_ARQ_SEQSIZE
value|4097
end_define

begin_comment
comment|/* Sequence counter wrap for AR */
end_comment

begin_define
define|#
directive|define
name|HAL_RADARQ_SIZE
value|1024
end_define

begin_comment
comment|/* 1K radar events for buffer size */
end_comment

begin_define
define|#
directive|define
name|HAL_RADARQ_SEQSIZE
value|1025
end_define

begin_comment
comment|/* Sequence counter wrap for radar */
end_comment

begin_define
define|#
directive|define
name|HAL_NUMRADAR_STATES
value|64
end_define

begin_comment
comment|/* Number of radar channels we keep state for */
end_comment

begin_struct
struct|struct
name|ar9300_ar_state
block|{
name|u_int16_t
name|ar_prev_time_stamp
decl_stmt|;
name|u_int32_t
name|ar_prev_width
decl_stmt|;
name|u_int32_t
name|ar_phy_err_count
index|[
name|HAL_MAX_ACK_RADAR_DUR
index|]
decl_stmt|;
name|u_int32_t
name|ar_ack_sum
decl_stmt|;
name|u_int16_t
name|ar_peak_list
index|[
name|HAL_MAX_NUM_PEAKS
index|]
decl_stmt|;
name|u_int32_t
name|ar_packet_threshold
decl_stmt|;
comment|/* Thresh to determine traffic load */
name|u_int32_t
name|ar_par_threshold
decl_stmt|;
comment|/* Thresh to determine peak */
name|u_int32_t
name|ar_radar_rssi
decl_stmt|;
comment|/* Rssi threshold for AR event */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ar9300_radar_state
block|{
name|HAL_CHANNEL_INTERNAL
modifier|*
name|rs_chan
decl_stmt|;
comment|/* Channel info */
name|u_int8_t
name|rs_chan_index
decl_stmt|;
comment|/* Channel index in radar structure */
name|u_int32_t
name|rs_num_radar_events
decl_stmt|;
comment|/* Number of radar events */
name|int32_t
name|rs_firpwr
decl_stmt|;
comment|/* Thresh to check radar sig is gone */
name|u_int32_t
name|rs_radar_rssi
decl_stmt|;
comment|/* Thresh to start radar det (dB) */
name|u_int32_t
name|rs_height
decl_stmt|;
comment|/* Thresh for pulse height (dB)*/
name|u_int32_t
name|rs_pulse_rssi
decl_stmt|;
comment|/* Thresh to check if pulse is gone (dB) */
name|u_int32_t
name|rs_inband
decl_stmt|;
comment|/* Thresh to check if pusle is inband (0.5 dB) */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|uc_receiver_errors
decl_stmt|;
name|u_int8_t
name|uc_bad_tlp_errors
decl_stmt|;
name|u_int8_t
name|uc_bad_dllp_errors
decl_stmt|;
name|u_int8_t
name|uc_replay_timeout_errors
decl_stmt|;
name|u_int8_t
name|uc_replay_number_rollover_errors
decl_stmt|;
block|}
name|ar_pcie_error_moniter_counters
typedef|;
end_typedef

begin_define
define|#
directive|define
name|AR9300_OPFLAGS_11A
value|0x01
end_define

begin_comment
comment|/* if set, allow 11a */
end_comment

begin_define
define|#
directive|define
name|AR9300_OPFLAGS_11G
value|0x02
end_define

begin_comment
comment|/* if set, allow 11g */
end_comment

begin_define
define|#
directive|define
name|AR9300_OPFLAGS_N_5G_HT40
value|0x04
end_define

begin_comment
comment|/* if set, disable 5G HT40 */
end_comment

begin_define
define|#
directive|define
name|AR9300_OPFLAGS_N_2G_HT40
value|0x08
end_define

begin_comment
comment|/* if set, disable 2G HT40 */
end_comment

begin_define
define|#
directive|define
name|AR9300_OPFLAGS_N_5G_HT20
value|0x10
end_define

begin_comment
comment|/* if set, disable 5G HT20 */
end_comment

begin_define
define|#
directive|define
name|AR9300_OPFLAGS_N_2G_HT20
value|0x20
end_define

begin_comment
comment|/* if set, disable 2G HT20 */
end_comment

begin_comment
comment|/*   * For Kite and later chipsets, the following bits are not being programmed in EEPROM  * and so need to be enabled always.  * Bit 0: en_fcc_mid,  Bit 1: en_jap_mid,      Bit 2: en_fcc_dfs_ht40  * Bit 3: en_jap_ht40, Bit 4: en_jap_dfs_ht40  */
end_comment

begin_define
define|#
directive|define
name|AR9300_RDEXT_DEFAULT
value|0x1F
end_define

begin_define
define|#
directive|define
name|AR9300_MAX_CHAINS
value|3
end_define

begin_define
define|#
directive|define
name|AR9300_NUM_CHAINS
parameter_list|(
name|chainmask
parameter_list|)
define|\
value|(((chainmask>> 2)& 1) + ((chainmask>> 1)& 1) + (chainmask& 1))
end_define

begin_define
define|#
directive|define
name|AR9300_CHAIN0_MASK
value|0x1
end_define

begin_define
define|#
directive|define
name|AR9300_CHAIN1_MASK
value|0x2
end_define

begin_define
define|#
directive|define
name|AR9300_CHAIN2_MASK
value|0x4
end_define

begin_comment
comment|/* Support for multiple INIs */
end_comment

begin_struct
struct|struct
name|ar9300_ini_array
block|{
name|u_int32_t
modifier|*
name|ia_array
decl_stmt|;
name|u_int32_t
name|ia_rows
decl_stmt|;
name|u_int32_t
name|ia_columns
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|INIT_INI_ARRAY
parameter_list|(
name|iniarray
parameter_list|,
name|array
parameter_list|,
name|rows
parameter_list|,
name|columns
parameter_list|)
value|do {             \     (iniarray)->ia_array = (u_int32_t *)(array);    \     (iniarray)->ia_rows = (rows);       \     (iniarray)->ia_columns = (columns); \ } while (0)
end_define

begin_define
define|#
directive|define
name|INI_RA
parameter_list|(
name|iniarray
parameter_list|,
name|row
parameter_list|,
name|column
parameter_list|)
value|(((iniarray)->ia_array)[(row) * ((iniarray)->ia_columns) + (column)])
end_define

begin_define
define|#
directive|define
name|INIT_CAL
parameter_list|(
name|_perCal
parameter_list|)
define|\
value|(_perCal)->cal_state = CAL_WAITING;  \     (_perCal)->cal_next = AH_NULL;
end_define

begin_define
define|#
directive|define
name|INSERT_CAL
parameter_list|(
name|_ahp
parameter_list|,
name|_perCal
parameter_list|)
define|\
value|do {                    \     if ((_ahp)->ah_cal_list_last == AH_NULL) {  \         (_ahp)->ah_cal_list = (_ahp)->ah_cal_list_last = (_perCal); \         ((_ahp)->ah_cal_list_last)->cal_next = (_perCal);    \     } else {    \         ((_ahp)->ah_cal_list_last)->cal_next = (_perCal);    \         (_ahp)->ah_cal_list_last = (_perCal);   \         (_perCal)->cal_next = (_ahp)->ah_cal_list;   \     }   \ } while (0)
end_define

begin_typedef
typedef|typedef
enum|enum
name|cal_types
block|{
name|IQ_MISMATCH_CAL
init|=
literal|0x1
block|,
name|TEMP_COMP_CAL
init|=
literal|0x2
block|, }
name|HAL_CAL_TYPES
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|cal_state
block|{
name|CAL_INACTIVE
block|,
name|CAL_WAITING
block|,
name|CAL_RUNNING
block|,
name|CAL_DONE
block|}
name|HAL_CAL_STATE
typedef|;
end_typedef

begin_comment
comment|/* Calibrate state */
end_comment

begin_define
define|#
directive|define
name|MIN_CAL_SAMPLES
value|1
end_define

begin_define
define|#
directive|define
name|MAX_CAL_SAMPLES
value|64
end_define

begin_define
define|#
directive|define
name|INIT_LOG_COUNT
value|5
end_define

begin_define
define|#
directive|define
name|PER_MIN_LOG_COUNT
value|2
end_define

begin_define
define|#
directive|define
name|PER_MAX_LOG_COUNT
value|10
end_define

begin_define
define|#
directive|define
name|AR9300_NUM_BT_WEIGHTS
value|4
end_define

begin_define
define|#
directive|define
name|AR9300_NUM_WLAN_WEIGHTS
value|4
end_define

begin_comment
comment|/* Per Calibration data structure */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|per_cal_data
block|{
name|HAL_CAL_TYPES
name|cal_type
decl_stmt|;
comment|// Type of calibration
name|u_int32_t
name|cal_num_samples
decl_stmt|;
comment|// Number of SW samples to collect
name|u_int32_t
name|cal_count_max
decl_stmt|;
comment|// Number of HW samples to collect
name|void
function_decl|(
modifier|*
name|cal_collect
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
comment|// Accumulator func
name|void
function_decl|(
modifier|*
name|cal_post_proc
function_decl|)
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
comment|// Post-processing func
block|}
name|HAL_PERCAL_DATA
typedef|;
end_typedef

begin_comment
comment|/* List structure for calibration data */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|cal_list
block|{
specifier|const
name|HAL_PERCAL_DATA
modifier|*
name|cal_data
decl_stmt|;
name|HAL_CAL_STATE
name|cal_state
decl_stmt|;
name|struct
name|cal_list
modifier|*
name|cal_next
decl_stmt|;
block|}
name|HAL_CAL_LIST
typedef|;
end_typedef

begin_define
define|#
directive|define
name|AR9300_NUM_CAL_TYPES
value|2
end_define

begin_define
define|#
directive|define
name|AR9300_PAPRD_TABLE_SZ
value|24
end_define

begin_define
define|#
directive|define
name|AR9300_PAPRD_GAIN_TABLE_SZ
value|32
end_define

begin_define
define|#
directive|define
name|AR9382_MAX_GPIO_PIN_NUM
value|(16)
end_define

begin_define
define|#
directive|define
name|AR9382_GPIO_PIN_8_RESERVED
value|(8)
end_define

begin_define
define|#
directive|define
name|AR9382_GPIO_9_INPUT_ONLY
value|(9)
end_define

begin_define
define|#
directive|define
name|AR9382_MAX_GPIO_INPUT_PIN_NUM
value|(13)
end_define

begin_define
define|#
directive|define
name|AR9382_GPIO_PIN_11_RESERVED
value|(11)
end_define

begin_define
define|#
directive|define
name|AR9382_MAX_JTAG_GPIO_PIN_NUM
value|(3)
end_define

begin_comment
comment|/* Paprd tx power adjust data structure */
end_comment

begin_struct
struct|struct
name|ar9300_paprd_pwr_adjust
block|{
name|u_int32_t
name|target_rate
decl_stmt|;
comment|// rate index
name|u_int32_t
name|reg_addr
decl_stmt|;
comment|// register offset
name|u_int32_t
name|reg_mask
decl_stmt|;
comment|// mask of register
name|u_int32_t
name|reg_mask_offset
decl_stmt|;
comment|// mask offset of register
name|u_int32_t
name|sub_db
decl_stmt|;
comment|// offset value unit of dB
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|AR9300_MAX_RATES
value|36
end_define

begin_comment
comment|/* legacy(4) + ofdm(8) + HTSS(8) + HTDS(8) + HTTS(8)*/
end_comment

begin_struct
struct|struct
name|ath_hal_9300
block|{
name|struct
name|ath_hal_private_tables
name|ah_priv
decl_stmt|;
comment|/* base class */
comment|/*      * Information retrieved from EEPROM.      */
name|ar9300_eeprom_t
name|ah_eeprom
decl_stmt|;
name|GAIN_VALUES
name|ah_gain_values
decl_stmt|;
name|u_int8_t
name|ah_macaddr
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|u_int8_t
name|ah_bssid
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|u_int8_t
name|ah_bssid_mask
index|[
name|IEEE80211_ADDR_LEN
index|]
decl_stmt|;
name|u_int16_t
name|ah_assoc_id
decl_stmt|;
comment|/*      * Runtime state.      */
name|u_int32_t
name|ah_mask_reg
decl_stmt|;
comment|/* copy of AR_IMR */
name|u_int32_t
name|ah_mask2Reg
decl_stmt|;
comment|/* copy of AR_IMR_S2 */
name|u_int32_t
name|ah_msi_reg
decl_stmt|;
comment|/* copy of AR_PCIE_MSI */
name|os_atomic_t
name|ah_ier_ref_count
decl_stmt|;
comment|/* reference count for enabling interrupts */
name|struct
name|ar9300_stats
name|ah_stats
decl_stmt|;
comment|/* various statistics */
name|RF_HAL_FUNCS
name|ah_rf_hal
decl_stmt|;
name|u_int32_t
name|ah_tx_desc_mask
decl_stmt|;
comment|/* mask for TXDESC */
name|u_int32_t
name|ah_tx_ok_interrupt_mask
decl_stmt|;
name|u_int32_t
name|ah_tx_err_interrupt_mask
decl_stmt|;
name|u_int32_t
name|ah_tx_desc_interrupt_mask
decl_stmt|;
name|u_int32_t
name|ah_tx_eol_interrupt_mask
decl_stmt|;
name|u_int32_t
name|ah_tx_urn_interrupt_mask
decl_stmt|;
name|HAL_TX_QUEUE_INFO
name|ah_txq
index|[
name|HAL_NUM_TX_QUEUES
index|]
decl_stmt|;
name|HAL_SMPS_MODE
name|ah_sm_power_mode
decl_stmt|;
name|HAL_BOOL
name|ah_chip_full_sleep
decl_stmt|;
name|u_int32_t
name|ah_atim_window
decl_stmt|;
name|HAL_ANT_SETTING
name|ah_diversity_control
decl_stmt|;
comment|/* antenna setting */
name|u_int16_t
name|ah_antenna_switch_swap
decl_stmt|;
comment|/* Controls mapping of OID request */
name|u_int8_t
name|ah_tx_chainmask_cfg
decl_stmt|;
comment|/* chain mask config */
name|u_int8_t
name|ah_rx_chainmask_cfg
decl_stmt|;
name|u_int32_t
name|ah_beacon_rssi_threshold
decl_stmt|;
comment|/* cache beacon rssi threshold */
comment|/* Calibration related fields */
name|HAL_CAL_TYPES
name|ah_supp_cals
decl_stmt|;
name|HAL_CAL_LIST
name|ah_iq_cal_data
decl_stmt|;
comment|/* IQ Cal Data */
name|HAL_CAL_LIST
name|ah_temp_comp_cal_data
decl_stmt|;
comment|/* Temperature Compensation Cal Data */
name|HAL_CAL_LIST
modifier|*
name|ah_cal_list
decl_stmt|;
comment|/* ptr to first cal in list */
name|HAL_CAL_LIST
modifier|*
name|ah_cal_list_last
decl_stmt|;
comment|/* ptr to last cal in list */
name|HAL_CAL_LIST
modifier|*
name|ah_cal_list_curr
decl_stmt|;
comment|/* ptr to current cal */
comment|// IQ Cal aliases
define|#
directive|define
name|ah_total_power_meas_i
value|ah_meas0.unsign
define|#
directive|define
name|ah_total_power_meas_q
value|ah_meas1.unsign
define|#
directive|define
name|ah_total_iq_corr_meas
value|ah_meas2.sign
union|union
block|{
name|u_int32_t
name|unsign
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
name|int32_t
name|sign
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
block|}
name|ah_meas0
union|;
union|union
block|{
name|u_int32_t
name|unsign
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
name|int32_t
name|sign
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
block|}
name|ah_meas1
union|;
union|union
block|{
name|u_int32_t
name|unsign
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
name|int32_t
name|sign
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
block|}
name|ah_meas2
union|;
union|union
block|{
name|u_int32_t
name|unsign
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
name|int32_t
name|sign
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
block|}
name|ah_meas3
union|;
name|u_int16_t
name|ah_cal_samples
decl_stmt|;
comment|/* end - Calibration related fields */
name|u_int32_t
name|ah_tx6_power_in_half_dbm
decl_stmt|;
comment|/* power output for 6Mb tx */
name|u_int32_t
name|ah_sta_id1_defaults
decl_stmt|;
comment|/* STA_ID1 default settings */
name|u_int32_t
name|ah_misc_mode
decl_stmt|;
comment|/* MISC_MODE settings */
name|HAL_BOOL
name|ah_get_plcp_hdr
decl_stmt|;
comment|/* setting about MISC_SEL_EVM */
enum|enum
block|{
name|AUTO_32KHZ
block|,
comment|/* use it if 32kHz crystal present */
name|USE_32KHZ
block|,
comment|/* do it regardless */
name|DONT_USE_32KHZ
block|,
comment|/* don't use it regardless */
block|}
name|ah_enable32k_hz_clock
enum|;
comment|/* whether to sleep at 32kHz */
name|u_int32_t
name|ah_ofdm_tx_power
decl_stmt|;
name|int16_t
name|ah_tx_power_index_offset
decl_stmt|;
name|u_int
name|ah_slot_time
decl_stmt|;
comment|/* user-specified slot time */
name|u_int
name|ah_ack_timeout
decl_stmt|;
comment|/* user-specified ack timeout */
comment|/*      * XXX      * 11g-specific stuff; belongs in the driver.      */
name|u_int8_t
name|ah_g_beacon_rate
decl_stmt|;
comment|/* fixed rate for G beacons */
name|u_int32_t
name|ah_gpio_mask
decl_stmt|;
comment|/* copy of enabled GPIO mask */
name|u_int32_t
name|ah_gpio_cause
decl_stmt|;
comment|/* copy of GPIO cause (sync and async) */
comment|/*      * RF Silent handling; setup according to the EEPROM.      */
name|u_int32_t
name|ah_gpio_select
decl_stmt|;
comment|/* GPIO pin to use */
name|u_int32_t
name|ah_polarity
decl_stmt|;
comment|/* polarity to disable RF */
name|u_int32_t
name|ah_gpio_bit
decl_stmt|;
comment|/* after init, prev value */
name|HAL_BOOL
name|ah_eep_enabled
decl_stmt|;
comment|/* EEPROM bit for capability */
ifdef|#
directive|ifdef
name|ATH_BT_COEX
comment|/*      * Bluetooth coexistence static setup according to the registry      */
name|HAL_BT_MODULE
name|ah_bt_module
decl_stmt|;
comment|/* Bluetooth module identifier */
name|u_int8_t
name|ah_bt_coex_config_type
decl_stmt|;
comment|/* BT coex configuration */
name|u_int8_t
name|ah_bt_active_gpio_select
decl_stmt|;
comment|/* GPIO pin for BT_ACTIVE */
name|u_int8_t
name|ah_bt_priority_gpio_select
decl_stmt|;
comment|/* GPIO pin for BT_PRIORITY */
name|u_int8_t
name|ah_wlan_active_gpio_select
decl_stmt|;
comment|/* GPIO pin for WLAN_ACTIVE */
name|u_int8_t
name|ah_bt_active_polarity
decl_stmt|;
comment|/* Polarity of BT_ACTIVE */
name|HAL_BOOL
name|ah_bt_coex_single_ant
decl_stmt|;
comment|/* Single or dual antenna configuration */
name|u_int8_t
name|ah_bt_wlan_isolation
decl_stmt|;
comment|/* Isolation between BT and WLAN in dB */
comment|/*      * Bluetooth coexistence runtime settings      */
name|HAL_BOOL
name|ah_bt_coex_enabled
decl_stmt|;
comment|/* If Bluetooth coexistence is enabled */
name|u_int32_t
name|ah_bt_coex_mode
decl_stmt|;
comment|/* Register setting for AR_BT_COEX_MODE */
name|u_int32_t
name|ah_bt_coex_bt_weight
index|[
name|AR9300_NUM_BT_WEIGHTS
index|]
decl_stmt|;
comment|/* Register setting for AR_BT_COEX_WEIGHT */
name|u_int32_t
name|ah_bt_coex_wlan_weight
index|[
name|AR9300_NUM_WLAN_WEIGHTS
index|]
decl_stmt|;
comment|/* Register setting for AR_BT_COEX_WEIGHT */
name|u_int32_t
name|ah_bt_coex_mode2
decl_stmt|;
comment|/* Register setting for AR_BT_COEX_MODE2 */
name|u_int32_t
name|ah_bt_coex_flag
decl_stmt|;
comment|/* Special tuning flags for BT coex */
endif|#
directive|endif
comment|/*      * Generic timer support      */
name|u_int32_t
name|ah_avail_gen_timers
decl_stmt|;
comment|/* mask of available timers */
name|u_int32_t
name|ah_intr_gen_timer_trigger
decl_stmt|;
comment|/* generic timer trigger interrupt state */
name|u_int32_t
name|ah_intr_gen_timer_thresh
decl_stmt|;
comment|/* generic timer trigger interrupt state */
name|HAL_BOOL
name|ah_enable_tsf2
decl_stmt|;
comment|/* enable TSF2 for gen timer 8-15. */
comment|/*      * ANI& Radar support.      */
name|u_int32_t
name|ah_proc_phy_err
decl_stmt|;
comment|/* Process Phy errs */
name|u_int32_t
name|ah_ani_period
decl_stmt|;
comment|/* ani update list period */
name|struct
name|ar9300_ani_state
modifier|*
name|ah_curani
decl_stmt|;
comment|/* cached last reference */
name|struct
name|ar9300_ani_state
name|ah_ani
index|[
literal|255
index|]
decl_stmt|;
comment|/* per-channel state */
name|struct
name|ar9300_radar_state
name|ah_radar
index|[
name|HAL_NUMRADAR_STATES
index|]
decl_stmt|;
comment|/* Per-Channel Radar detector state */
name|struct
name|ar9300_radar_q_elem
modifier|*
name|ah_radarq
decl_stmt|;
comment|/* radar event queue */
name|struct
name|ar9300_radar_q_info
name|ah_radarq_info
decl_stmt|;
comment|/* radar event q read/write state */
name|struct
name|ar9300_ar_state
name|ah_ar
decl_stmt|;
comment|/* AR detector state */
name|struct
name|ar9300_radar_q_elem
modifier|*
name|ah_arq
decl_stmt|;
comment|/* AR event queue */
name|struct
name|ar9300_radar_q_info
name|ah_arq_info
decl_stmt|;
comment|/* AR event q read/write state */
comment|/*      * Transmit power state.  Note these are maintained      * here so they can be retrieved by diagnostic tools.      */
name|u_int16_t
name|ah_rates_array
index|[
literal|16
index|]
decl_stmt|;
comment|/*      * Tx queue interrupt state.      */
name|u_int32_t
name|ah_intr_txqs
decl_stmt|;
name|HAL_BOOL
name|ah_intr_mitigation_rx
decl_stmt|;
comment|/* rx Interrupt Mitigation Settings */
name|HAL_BOOL
name|ah_intr_mitigation_tx
decl_stmt|;
comment|/* tx Interrupt Mitigation Settings */
comment|/*      * Extension Channel Rx Clear State      */
name|u_int32_t
name|ah_cycle_count
decl_stmt|;
name|u_int32_t
name|ah_ctl_busy
decl_stmt|;
name|u_int32_t
name|ah_ext_busy
decl_stmt|;
comment|/* HT CWM state */
name|HAL_HT_EXTPROTSPACING
name|ah_ext_prot_spacing
decl_stmt|;
name|u_int8_t
name|ah_tx_chainmask
decl_stmt|;
comment|/* tx chain mask */
name|u_int8_t
name|ah_rx_chainmask
decl_stmt|;
comment|/* rx chain mask */
name|u_int8_t
name|ah_tx_cal_chainmask
decl_stmt|;
comment|/* tx cal chain mask */
name|u_int8_t
name|ah_rx_cal_chainmask
decl_stmt|;
comment|/* rx cal chain mask */
name|int
name|ah_hwp
decl_stmt|;
name|void
modifier|*
name|ah_cal_mem
decl_stmt|;
name|HAL_BOOL
name|ah_emu_eeprom
decl_stmt|;
name|HAL_ANI_CMD
name|ah_ani_function
decl_stmt|;
name|HAL_BOOL
name|ah_rifs_enabled
decl_stmt|;
name|u_int32_t
name|ah_rifs_reg
index|[
literal|11
index|]
decl_stmt|;
name|u_int32_t
name|ah_rifs_sec_cnt
decl_stmt|;
comment|/* open-loop power control */
name|u_int32_t
name|original_gain
index|[
literal|22
index|]
decl_stmt|;
name|int32_t
name|init_pdadc
decl_stmt|;
name|int32_t
name|pdadc_delta
decl_stmt|;
comment|/* cycle counts for beacon stuck diagnostics */
name|u_int32_t
name|ah_cycles
decl_stmt|;
name|u_int32_t
name|ah_rx_clear
decl_stmt|;
name|u_int32_t
name|ah_rx_frame
decl_stmt|;
name|u_int32_t
name|ah_tx_frame
decl_stmt|;
define|#
directive|define
name|BB_HANG_SIG1
value|0
define|#
directive|define
name|BB_HANG_SIG2
value|1
define|#
directive|define
name|BB_HANG_SIG3
value|2
define|#
directive|define
name|BB_HANG_SIG4
value|3
define|#
directive|define
name|MAC_HANG_SIG1
value|4
define|#
directive|define
name|MAC_HANG_SIG2
value|5
comment|/* bb hang detection */
name|int
name|ah_hang
index|[
literal|6
index|]
decl_stmt|;
name|hal_hw_hangs_t
name|ah_hang_wars
decl_stmt|;
comment|/*      * Support for ar9300 multiple INIs      */
name|struct
name|ar9300_ini_array
name|ah_ini_pcie_serdes
decl_stmt|;
name|struct
name|ar9300_ini_array
name|ah_ini_pcie_serdes_low_power
decl_stmt|;
name|struct
name|ar9300_ini_array
name|ah_ini_modes_additional
decl_stmt|;
name|struct
name|ar9300_ini_array
name|ah_ini_modes_additional_40mhz
decl_stmt|;
name|struct
name|ar9300_ini_array
name|ah_ini_modes_rxgain
decl_stmt|;
name|struct
name|ar9300_ini_array
name|ah_ini_modes_rxgain_bounds
decl_stmt|;
name|struct
name|ar9300_ini_array
name|ah_ini_modes_txgain
decl_stmt|;
name|struct
name|ar9300_ini_array
name|ah_ini_japan2484
decl_stmt|;
name|struct
name|ar9300_ini_array
name|ah_ini_radio_post_sys2ant
decl_stmt|;
name|struct
name|ar9300_ini_array
name|ah_ini_BTCOEX_MAX_TXPWR
decl_stmt|;
comment|/*       * New INI format starting with Osprey 2.0 INI.      * Pre, core, post arrays for each sub-system (mac, bb, radio, soc)      */
define|#
directive|define
name|ATH_INI_PRE
value|0
define|#
directive|define
name|ATH_INI_CORE
value|1
define|#
directive|define
name|ATH_INI_POST
value|2
define|#
directive|define
name|ATH_INI_NUM_SPLIT
value|(ATH_INI_POST + 1)
name|struct
name|ar9300_ini_array
name|ah_ini_mac
index|[
name|ATH_INI_NUM_SPLIT
index|]
decl_stmt|;
comment|/* New INI format */
name|struct
name|ar9300_ini_array
name|ah_ini_bb
index|[
name|ATH_INI_NUM_SPLIT
index|]
decl_stmt|;
comment|/* New INI format */
name|struct
name|ar9300_ini_array
name|ah_ini_radio
index|[
name|ATH_INI_NUM_SPLIT
index|]
decl_stmt|;
comment|/* New INI format */
name|struct
name|ar9300_ini_array
name|ah_ini_soc
index|[
name|ATH_INI_NUM_SPLIT
index|]
decl_stmt|;
comment|/* New INI format */
comment|/*       * Added to support DFS postamble array in INI that we need to apply      * in DFS channels      */
name|struct
name|ar9300_ini_array
name|ah_ini_dfs
decl_stmt|;
if|#
directive|if
name|ATH_WOW
name|struct
name|ar9300_ini_array
name|ah_ini_pcie_serdes_wow
decl_stmt|;
comment|/* SerDes values during WOW sleep */
endif|#
directive|endif
comment|/* To indicate EEPROM mapping used */
name|u_int32_t
name|ah_immunity_vals
index|[
literal|6
index|]
decl_stmt|;
name|HAL_BOOL
name|ah_immunity_on
decl_stmt|;
comment|/*      * snap shot of counter register for debug purposes      */
ifdef|#
directive|ifdef
name|AH_DEBUG
name|u_int32_t
name|last_tf
decl_stmt|;
name|u_int32_t
name|last_rf
decl_stmt|;
name|u_int32_t
name|last_rc
decl_stmt|;
name|u_int32_t
name|last_cc
decl_stmt|;
endif|#
directive|endif
name|HAL_BOOL
name|ah_dma_stuck
decl_stmt|;
comment|/* Set to AH_TRUE when RX/TX DMA failed to stop. */
name|u_int32_t
name|nf_tsf32
decl_stmt|;
comment|/* timestamp for NF calibration duration */
name|u_int32_t
name|reg_dmn
decl_stmt|;
comment|/* Regulatory Domain */
name|int16_t
name|twice_antenna_gain
decl_stmt|;
comment|/* Antenna Gain */
name|u_int16_t
name|twice_antenna_reduction
decl_stmt|;
comment|/* Antenna Gain Allowed */
comment|/*      * Upper limit after factoring in the regulatory max, antenna gain and       * multichain factor. No TxBF, CDD or STBC gain factored       */
name|int16_t
name|upper_limit
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
comment|/* adjusted power for descriptor-based TPC for 1, 2, or 3 chains */
name|int16_t
name|txpower
index|[
name|AR9300_MAX_RATES
index|]
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
comment|/* adjusted power for descriptor-based TPC for 1, 2, or 3 chains with STBC*/
name|int16_t
name|txpower_stbc
index|[
name|AR9300_MAX_RATES
index|]
index|[
name|AR9300_MAX_CHAINS
index|]
decl_stmt|;
comment|/* Transmit Status ring support */
name|struct
name|ar9300_txs
modifier|*
name|ts_ring
decl_stmt|;
name|u_int16_t
name|ts_tail
decl_stmt|;
name|u_int16_t
name|ts_size
decl_stmt|;
name|u_int32_t
name|ts_paddr_start
decl_stmt|;
name|u_int32_t
name|ts_paddr_end
decl_stmt|;
comment|/* Receive Buffer size */
define|#
directive|define
name|HAL_RXBUFSIZE_DEFAULT
value|0xfff
name|u_int16_t
name|rx_buf_size
decl_stmt|;
name|u_int32_t
name|ah_wa_reg_val
decl_stmt|;
comment|// Store the permanent value of Reg 0x4004 so we dont have to R/M/W. (We should not be reading this register when in sleep states).
comment|/* Indicate the PLL source clock rate is 25Mhz or not.      * clk_25mhz = 0 by default.      */
name|u_int8_t
name|clk_25mhz
decl_stmt|;
comment|/* For PAPRD uses */
name|u_int16_t
name|small_signal_gain
index|[
name|AH_MAX_CHAINS
index|]
decl_stmt|;
name|u_int32_t
name|pa_table
index|[
name|AH_MAX_CHAINS
index|]
index|[
name|AR9300_PAPRD_TABLE_SZ
index|]
decl_stmt|;
name|u_int32_t
name|paprd_gain_table_entries
index|[
name|AR9300_PAPRD_GAIN_TABLE_SZ
index|]
decl_stmt|;
name|u_int32_t
name|paprd_gain_table_index
index|[
name|AR9300_PAPRD_GAIN_TABLE_SZ
index|]
decl_stmt|;
name|u_int32_t
name|ah_2g_paprd_rate_mask_ht20
decl_stmt|;
comment|/* Copy of eep->modal_header_2g.paprd_rate_mask_ht20 */
name|u_int32_t
name|ah_2g_paprd_rate_mask_ht40
decl_stmt|;
comment|/* Copy of eep->modal_header_2g.paprd_rate_mask_ht40 */
name|u_int32_t
name|ah_5g_paprd_rate_mask_ht20
decl_stmt|;
comment|/* Copy of eep->modal_header_5g.paprd_rate_mask_ht20 */
name|u_int32_t
name|ah_5g_paprd_rate_mask_ht40
decl_stmt|;
comment|/* Copy of eep->modal_header_5g.paprd_rate_mask_ht40 */
name|u_int32_t
name|paprd_training_power
decl_stmt|;
comment|/* For GreenTx use to store the default tx power */
name|u_int8_t
name|ah_default_tx_power
index|[
name|ar9300_rate_size
index|]
decl_stmt|;
name|HAL_BOOL
name|ah_paprd_broken
decl_stmt|;
comment|/* To store offsets of host interface registers */
struct|struct
block|{
name|u_int32_t
name|AR_RC
decl_stmt|;
name|u_int32_t
name|AR_WA
decl_stmt|;
name|u_int32_t
name|AR_PM_STATE
decl_stmt|;
name|u_int32_t
name|AR_H_INFOL
decl_stmt|;
name|u_int32_t
name|AR_H_INFOH
decl_stmt|;
name|u_int32_t
name|AR_PCIE_PM_CTRL
decl_stmt|;
name|u_int32_t
name|AR_HOST_TIMEOUT
decl_stmt|;
name|u_int32_t
name|AR_EEPROM
decl_stmt|;
name|u_int32_t
name|AR_SREV
decl_stmt|;
name|u_int32_t
name|AR_INTR_SYNC_CAUSE
decl_stmt|;
name|u_int32_t
name|AR_INTR_SYNC_CAUSE_CLR
decl_stmt|;
name|u_int32_t
name|AR_INTR_SYNC_ENABLE
decl_stmt|;
name|u_int32_t
name|AR_INTR_ASYNC_MASK
decl_stmt|;
name|u_int32_t
name|AR_INTR_SYNC_MASK
decl_stmt|;
name|u_int32_t
name|AR_INTR_ASYNC_CAUSE_CLR
decl_stmt|;
name|u_int32_t
name|AR_INTR_ASYNC_CAUSE
decl_stmt|;
name|u_int32_t
name|AR_INTR_ASYNC_ENABLE
decl_stmt|;
name|u_int32_t
name|AR_PCIE_SERDES
decl_stmt|;
name|u_int32_t
name|AR_PCIE_SERDES2
decl_stmt|;
name|u_int32_t
name|AR_GPIO_OUT
decl_stmt|;
name|u_int32_t
name|AR_GPIO_IN
decl_stmt|;
name|u_int32_t
name|AR_GPIO_OE_OUT
decl_stmt|;
name|u_int32_t
name|AR_GPIO_OE1_OUT
decl_stmt|;
name|u_int32_t
name|AR_GPIO_INTR_POL
decl_stmt|;
name|u_int32_t
name|AR_GPIO_INPUT_EN_VAL
decl_stmt|;
name|u_int32_t
name|AR_GPIO_INPUT_MUX1
decl_stmt|;
name|u_int32_t
name|AR_GPIO_INPUT_MUX2
decl_stmt|;
name|u_int32_t
name|AR_GPIO_OUTPUT_MUX1
decl_stmt|;
name|u_int32_t
name|AR_GPIO_OUTPUT_MUX2
decl_stmt|;
name|u_int32_t
name|AR_GPIO_OUTPUT_MUX3
decl_stmt|;
name|u_int32_t
name|AR_INPUT_STATE
decl_stmt|;
name|u_int32_t
name|AR_SPARE
decl_stmt|;
name|u_int32_t
name|AR_PCIE_CORE_RESET_EN
decl_stmt|;
name|u_int32_t
name|AR_CLKRUN
decl_stmt|;
name|u_int32_t
name|AR_EEPROM_STATUS_DATA
decl_stmt|;
name|u_int32_t
name|AR_OBS
decl_stmt|;
name|u_int32_t
name|AR_RFSILENT
decl_stmt|;
name|u_int32_t
name|AR_GPIO_PDPU
decl_stmt|;
name|u_int32_t
name|AR_GPIO_DS
decl_stmt|;
name|u_int32_t
name|AR_MISC
decl_stmt|;
name|u_int32_t
name|AR_PCIE_MSI
decl_stmt|;
name|u_int32_t
name|AR_TSF_SNAPSHOT_BT_ACTIVE
decl_stmt|;
name|u_int32_t
name|AR_TSF_SNAPSHOT_BT_PRIORITY
decl_stmt|;
name|u_int32_t
name|AR_TSF_SNAPSHOT_BT_CNTL
decl_stmt|;
name|u_int32_t
name|AR_PCIE_PHY_LATENCY_NFTS_ADJ
decl_stmt|;
name|u_int32_t
name|AR_TDMA_CCA_CNTL
decl_stmt|;
name|u_int32_t
name|AR_TXAPSYNC
decl_stmt|;
name|u_int32_t
name|AR_TXSYNC_INIT_SYNC_TMR
decl_stmt|;
name|u_int32_t
name|AR_INTR_PRIO_SYNC_CAUSE
decl_stmt|;
name|u_int32_t
name|AR_INTR_PRIO_SYNC_ENABLE
decl_stmt|;
name|u_int32_t
name|AR_INTR_PRIO_ASYNC_MASK
decl_stmt|;
name|u_int32_t
name|AR_INTR_PRIO_SYNC_MASK
decl_stmt|;
name|u_int32_t
name|AR_INTR_PRIO_ASYNC_CAUSE
decl_stmt|;
name|u_int32_t
name|AR_INTR_PRIO_ASYNC_ENABLE
decl_stmt|;
block|}
name|ah_hostifregs
struct|;
name|u_int32_t
name|ah_enterprise_mode
decl_stmt|;
name|u_int32_t
name|ah_radar1
decl_stmt|;
name|u_int32_t
name|ah_dc_offset
decl_stmt|;
name|HAL_BOOL
name|ah_hw_green_tx_enable
decl_stmt|;
comment|/* 1:enalbe H/W Green Tx */
name|HAL_BOOL
name|ah_smartantenna_enable
decl_stmt|;
comment|/* 1:enalbe H/W */
name|u_int32_t
name|ah_disable_cck
decl_stmt|;
name|HAL_BOOL
name|ah_lna_div_use_bt_ant_enable
decl_stmt|;
comment|/* 1:enable Rx(LNA) Diversity */
comment|/*      * Different types of memory where the calibration data might be stored.      * All types are searched in Ar9300EepromRestore() in the order flash, eeprom, otp.      * To disable searching a type, set its parameter to 0.      */
name|int
name|try_dram
decl_stmt|;
name|int
name|try_flash
decl_stmt|;
name|int
name|try_eeprom
decl_stmt|;
name|int
name|try_otp
decl_stmt|;
ifdef|#
directive|ifdef
name|ATH_CAL_NAND_FLASH
name|int
name|try_nand
decl_stmt|;
endif|#
directive|endif
comment|/*      * This is where we found the calibration data.      */
name|int
name|calibration_data_source
decl_stmt|;
name|int
name|calibration_data_source_address
decl_stmt|;
comment|/*      * This is where we look for the calibration data. must be set before ath_attach() is called      */
name|int
name|calibration_data_try
decl_stmt|;
name|int
name|calibration_data_try_address
decl_stmt|;
name|u_int8_t
name|tx_iq_cal_enable
range|:
literal|1
decl_stmt|,
name|tx_iq_cal_during_agc_cal
range|:
literal|1
decl_stmt|,
name|tx_cl_cal_enable
range|:
literal|1
decl_stmt|;
if|#
directive|if
name|ATH_SUPPORT_MCI
comment|/* For MCI */
name|HAL_BOOL
name|ah_mci_ready
decl_stmt|;
name|u_int32_t
name|ah_mci_int_raw
decl_stmt|;
name|u_int32_t
name|ah_mci_int_rx_msg
decl_stmt|;
name|u_int32_t
name|ah_mci_rx_status
decl_stmt|;
name|u_int32_t
name|ah_mci_cont_status
decl_stmt|;
name|u_int8_t
name|ah_mci_bt_state
decl_stmt|;
name|u_int32_t
name|ah_mci_gpm_addr
decl_stmt|;
name|u_int8_t
modifier|*
name|ah_mci_gpm_buf
decl_stmt|;
name|u_int32_t
name|ah_mci_gpm_len
decl_stmt|;
name|u_int32_t
name|ah_mci_gpm_idx
decl_stmt|;
name|u_int32_t
name|ah_mci_sched_addr
decl_stmt|;
name|u_int8_t
modifier|*
name|ah_mci_sched_buf
decl_stmt|;
name|u_int8_t
name|ah_mci_coex_major_version_wlan
decl_stmt|;
name|u_int8_t
name|ah_mci_coex_minor_version_wlan
decl_stmt|;
name|u_int8_t
name|ah_mci_coex_major_version_bt
decl_stmt|;
name|u_int8_t
name|ah_mci_coex_minor_version_bt
decl_stmt|;
name|HAL_BOOL
name|ah_mci_coex_bt_version_known
decl_stmt|;
name|HAL_BOOL
name|ah_mci_coex_wlan_channels_update
decl_stmt|;
name|u_int32_t
name|ah_mci_coex_wlan_channels
index|[
literal|4
index|]
decl_stmt|;
name|HAL_BOOL
name|ah_mci_coex_2g5g_update
decl_stmt|;
name|HAL_BOOL
name|ah_mci_coex_is_2g
decl_stmt|;
name|HAL_BOOL
name|ah_mci_query_bt
decl_stmt|;
name|HAL_BOOL
name|ah_mci_unhalt_bt_gpm
decl_stmt|;
comment|/* need send UNHALT */
name|HAL_BOOL
name|ah_mci_halted_bt_gpm
decl_stmt|;
comment|/* HALT sent */
name|HAL_BOOL
name|ah_mci_need_flush_btinfo
decl_stmt|;
name|HAL_BOOL
name|ah_mci_concur_tx_en
decl_stmt|;
name|u_int8_t
name|ah_mci_stomp_low_tx_pri
decl_stmt|;
name|u_int8_t
name|ah_mci_stomp_all_tx_pri
decl_stmt|;
name|u_int8_t
name|ah_mci_stomp_none_tx_pri
decl_stmt|;
name|u_int32_t
name|ah_mci_wlan_cal_seq
decl_stmt|;
name|u_int32_t
name|ah_mci_wlan_cal_done
decl_stmt|;
if|#
directive|if
name|ATH_SUPPORT_AIC
name|HAL_BOOL
name|ah_aic_enabled
decl_stmt|;
name|u_int32_t
name|ah_aic_sram
index|[
name|ATH_AIC_MAX_BT_CHANNEL
index|]
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|/* ATH_SUPPORT_MCI */
name|u_int8_t
name|ah_cac_quiet_enabled
decl_stmt|;
if|#
directive|if
name|ATH_WOW_OFFLOAD
name|u_int32_t
name|ah_mcast_filter_l32_set
decl_stmt|;
name|u_int32_t
name|ah_mcast_filter_u32_set
decl_stmt|;
endif|#
directive|endif
name|HAL_BOOL
name|ah_reduced_self_gen_mask
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|AH9300
parameter_list|(
name|_ah
parameter_list|)
value|((struct ath_hal_9300 *)(_ah))
end_define

begin_define
define|#
directive|define
name|IS_9300_EMU
parameter_list|(
name|ah
parameter_list|)
define|\
value|(AH_PRIVATE(ah)->ah_devid == AR9300_DEVID_EMU_PCIE)
end_define

begin_define
define|#
directive|define
name|ar9300_eep_data_in_flash
parameter_list|(
name|_ah
parameter_list|)
define|\
value|(!(AH_PRIVATE(_ah)->ah_flags& AH_USE_EEPROM))
end_define

begin_define
define|#
directive|define
name|IS_5GHZ_FAST_CLOCK_EN
parameter_list|(
name|_ah
parameter_list|,
name|_c
parameter_list|)
define|\
value|(IS_CHAN_5GHZ(_c)&& \         ((AH_PRIVATE(_ah))->ah_config.ath_hal_fastClockEnable))
end_define

begin_if
if|#
directive|if
name|notyet
end_if

begin_comment
comment|// Need these additional conditions for IS_5GHZ_FAST_CLOCK_EN when we have valid eeprom contents.
end_comment

begin_expr_stmt
operator|&&
expr|\
operator|(
operator|(
name|ar9300_eeprom_get
argument_list|(
name|AH9300
argument_list|(
name|_ah
argument_list|)
argument_list|,
name|EEP_MINOR_REV
argument_list|)
operator|<=
name|AR9300_EEP_MINOR_VER_16
operator|)
operator|||
expr|\
operator|(
name|ar9300_eeprom_get
argument_list|(
name|AH9300
argument_list|(
name|_ah
argument_list|)
argument_list|,
name|EEP_FSTCLK_5G
argument_list|)
operator|)
operator|)
end_expr_stmt

begin_endif
unit|)
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * WAR for bug 6773.  OS_DELAY() does a PIO READ on the PCI bus which allows  * other cards' DMA reads to complete in the middle of our reset.  */
end_comment

begin_define
define|#
directive|define
name|WAR_6773
parameter_list|(
name|x
parameter_list|)
value|do {                \         if ((++(x) % 64) == 0)          \                 OS_DELAY(1);            \ } while (0)
end_define

begin_define
define|#
directive|define
name|REG_WRITE_ARRAY
parameter_list|(
name|iniarray
parameter_list|,
name|column
parameter_list|,
name|regWr
parameter_list|)
value|do {                   \         int r;                                                          \         for (r = 0; r< ((iniarray)->ia_rows); r++) {    \                 OS_REG_WRITE(ah, INI_RA((iniarray), (r), 0), INI_RA((iniarray), r, (column)));\                 WAR_6773(regWr);                                        \         }                                                               \ } while (0)
end_define

begin_define
define|#
directive|define
name|UPPER_5G_SUB_BANDSTART
value|5700
end_define

begin_define
define|#
directive|define
name|MID_5G_SUB_BANDSTART
value|5400
end_define

begin_define
define|#
directive|define
name|TRAINPOWER_DB_OFFSET
value|6
end_define

begin_define
define|#
directive|define
name|AH_PAPRD_GET_SCALE_FACTOR
parameter_list|(
name|_scale
parameter_list|,
name|_eep
parameter_list|,
name|_is2G
parameter_list|,
name|_channel
parameter_list|)
value|do{ if(_is2G) { _scale = (_eep->modal_header_2g.paprd_rate_mask_ht20>>25)&0x7; \                                                                 } else { \                                                                     if(_channel>= UPPER_5G_SUB_BANDSTART){ _scale = (_eep->modal_header_5g.paprd_rate_mask_ht20>>25)&0x7;} \                                                                     else if((UPPER_5G_SUB_BANDSTART< _channel)&& (_channel>= MID_5G_SUB_BANDSTART)) \                                                                         { _scale = (_eep->modal_header_5g.paprd_rate_mask_ht40>>28)&0x7;} \                                                                         else { _scale = (_eep->modal_header_5g.paprd_rate_mask_ht40>>25)&0x7;} } }while(0)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|AH_ASSERT
end_ifdef

begin_define
define|#
directive|define
name|ar9300FeatureNotSupported
parameter_list|(
name|feature
parameter_list|,
name|ah
parameter_list|,
name|func
parameter_list|)
define|\
value|ath_hal_printf(ah, # feature                        \             " not supported but called from %s\n", (func)), \         hal_assert(0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ar9300FeatureNotSupported
parameter_list|(
name|feature
parameter_list|,
name|ah
parameter_list|,
name|func
parameter_list|)
define|\
value|ath_hal_printf(ah, # feature                        \             " not supported but called from %s\n", (func))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* AH_ASSERT */
end_comment

begin_function_decl
specifier|extern
name|void
name|ar9300_detach
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_desc_info
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_DESC_INFO
modifier|*
name|desc_info
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Green Tx, Based on different RSSI of Received Beacon thresholds,   * using different tx power by modified register tx power related values.  * The thresholds are decided by system team.  */
end_comment

begin_define
define|#
directive|define
name|WB225_SW_GREEN_TX_THRES1_DB
value|56
end_define

begin_comment
comment|/* in dB */
end_comment

begin_define
define|#
directive|define
name|WB225_SW_GREEN_TX_THRES2_DB
value|41
end_define

begin_comment
comment|/* in dB */
end_comment

begin_define
define|#
directive|define
name|WB225_OB_CALIBRATION_VALUE
value|5
end_define

begin_comment
comment|/* For Green Tx OLPC Delta                                                         Calibration Offset */
end_comment

begin_define
define|#
directive|define
name|WB225_OB_GREEN_TX_SHORT_VALUE
value|1
end_define

begin_comment
comment|/* For Green Tx OB value                                                         in short distance*/
end_comment

begin_define
define|#
directive|define
name|WB225_OB_GREEN_TX_MIDDLE_VALUE
value|3
end_define

begin_comment
comment|/* For Green Tx OB value                                                         in middle distance */
end_comment

begin_define
define|#
directive|define
name|WB225_OB_GREEN_TX_LONG_VALUE
value|5
end_define

begin_comment
comment|/* For Green Tx OB value                                                         in long distance */
end_comment

begin_define
define|#
directive|define
name|WB225_BBPWRTXRATE9_SW_GREEN_TX_SHORT_VALUE
value|0x06060606
end_define

begin_comment
comment|/* For SwGreen Tx                                                          BB_powertx_rate9 reg                                                         value in short                                                          distance */
end_comment

begin_define
define|#
directive|define
name|WB225_BBPWRTXRATE9_SW_GREEN_TX_MIDDLE_VALUE
value|0x0E0E0E0E
end_define

begin_comment
comment|/* For SwGreen Tx                                                          BB_powertx_rate9 reg                                                         value in middle                                                          distance */
end_comment

begin_comment
comment|/* Tx power for short distacnce in SwGreenTx.*/
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|u_int8_t
name|wb225_sw_gtx_tp_distance_short
index|[
name|ar9300_rate_size
index|]
init|=
block|{
literal|6
block|,
comment|/*ALL_TARGET_LEGACY_6_24*/
literal|6
block|,
comment|/*ALL_TARGET_LEGACY_36*/
literal|6
block|,
comment|/*ALL_TARGET_LEGACY_48*/
literal|4
block|,
comment|/*ALL_TARGET_LEGACY_54*/
literal|6
block|,
comment|/*ALL_TARGET_LEGACY_1L_5L*/
literal|6
block|,
comment|/*ALL_TARGET_LEGACY_5S*/
literal|6
block|,
comment|/*ALL_TARGET_LEGACY_11L*/
literal|6
block|,
comment|/*ALL_TARGET_LEGACY_11S*/
literal|6
block|,
comment|/*ALL_TARGET_HT20_0_8_16*/
literal|6
block|,
comment|/*ALL_TARGET_HT20_1_3_9_11_17_19*/
literal|4
block|,
comment|/*ALL_TARGET_HT20_4*/
literal|4
block|,
comment|/*ALL_TARGET_HT20_5*/
literal|4
block|,
comment|/*ALL_TARGET_HT20_6*/
literal|2
block|,
comment|/*ALL_TARGET_HT20_7*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_12*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_13*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_14*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_15*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_20*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_21*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_22*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_23*/
literal|6
block|,
comment|/*ALL_TARGET_HT40_0_8_16*/
literal|6
block|,
comment|/*ALL_TARGET_HT40_1_3_9_11_17_19*/
literal|4
block|,
comment|/*ALL_TARGET_HT40_4*/
literal|4
block|,
comment|/*ALL_TARGET_HT40_5*/
literal|4
block|,
comment|/*ALL_TARGET_HT40_6*/
literal|2
block|,
comment|/*ALL_TARGET_HT40_7*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_12*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_13*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_14*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_15*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_20*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_21*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_22*/
literal|0
comment|/*ALL_TARGET_HT40_23*/
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Tx power for middle distacnce in SwGreenTx.*/
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|u_int8_t
name|wb225_sw_gtx_tp_distance_middle
index|[
name|ar9300_rate_size
index|]
init|=
block|{
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_6_24*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_36*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_48*/
literal|12
block|,
comment|/*ALL_TARGET_LEGACY_54*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_1L_5L*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_5S*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_11L*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_11S*/
literal|14
block|,
comment|/*ALL_TARGET_HT20_0_8_16*/
literal|14
block|,
comment|/*ALL_TARGET_HT20_1_3_9_11_17_19*/
literal|14
block|,
comment|/*ALL_TARGET_HT20_4*/
literal|14
block|,
comment|/*ALL_TARGET_HT20_5*/
literal|12
block|,
comment|/*ALL_TARGET_HT20_6*/
literal|10
block|,
comment|/*ALL_TARGET_HT20_7*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_12*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_13*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_14*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_15*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_20*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_21*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_22*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_23*/
literal|14
block|,
comment|/*ALL_TARGET_HT40_0_8_16*/
literal|14
block|,
comment|/*ALL_TARGET_HT40_1_3_9_11_17_19*/
literal|14
block|,
comment|/*ALL_TARGET_HT40_4*/
literal|14
block|,
comment|/*ALL_TARGET_HT40_5*/
literal|12
block|,
comment|/*ALL_TARGET_HT40_6*/
literal|10
block|,
comment|/*ALL_TARGET_HT40_7*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_12*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_13*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_14*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_15*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_20*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_21*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_22*/
literal|0
comment|/*ALL_TARGET_HT40_23*/
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* OLPC DeltaCalibration Offset unit in half dB.*/
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|u_int8_t
name|wb225_gtx_olpc_cal_offset
index|[
literal|6
index|]
init|=
block|{
literal|0
block|,
comment|/* OB0*/
literal|16
block|,
comment|/* OB1*/
literal|9
block|,
comment|/* OB2*/
literal|5
block|,
comment|/* OB3*/
literal|2
block|,
comment|/* OB4*/
literal|0
block|,
comment|/* OB5*/
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Definitions for HwGreenTx  */
end_comment

begin_define
define|#
directive|define
name|AR9485_HW_GREEN_TX_THRES1_DB
value|56
end_define

begin_comment
comment|/* in dB */
end_comment

begin_define
define|#
directive|define
name|AR9485_HW_GREEN_TX_THRES2_DB
value|41
end_define

begin_comment
comment|/* in dB */
end_comment

begin_define
define|#
directive|define
name|AR9485_BBPWRTXRATE9_HW_GREEN_TX_SHORT_VALUE
value|0x0C0C0A0A
end_define

begin_comment
comment|/* For HwGreen Tx                                                          BB_powertx_rate9 reg                                                         value in short                                                          distance */
end_comment

begin_define
define|#
directive|define
name|AR9485_BBPWRTXRATE9_HW_GREEN_TX_MIDDLE_VALUE
value|0x10100E0E
end_define

begin_comment
comment|/* For HwGreenTx                                                          BB_powertx_rate9 reg                                                         value in middle                                                          distance */
end_comment

begin_comment
comment|/* Tx power for short distacnce in HwGreenTx.*/
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|u_int8_t
name|ar9485_hw_gtx_tp_distance_short
index|[
name|ar9300_rate_size
index|]
init|=
block|{
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_6_24*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_36*/
literal|8
block|,
comment|/*ALL_TARGET_LEGACY_48*/
literal|2
block|,
comment|/*ALL_TARGET_LEGACY_54*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_1L_5L*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_5S*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_11L*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_11S*/
literal|12
block|,
comment|/*ALL_TARGET_HT20_0_8_16*/
literal|12
block|,
comment|/*ALL_TARGET_HT20_1_3_9_11_17_19*/
literal|12
block|,
comment|/*ALL_TARGET_HT20_4*/
literal|12
block|,
comment|/*ALL_TARGET_HT20_5*/
literal|8
block|,
comment|/*ALL_TARGET_HT20_6*/
literal|2
block|,
comment|/*ALL_TARGET_HT20_7*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_12*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_13*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_14*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_15*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_20*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_21*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_22*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_23*/
literal|10
block|,
comment|/*ALL_TARGET_HT40_0_8_16*/
literal|10
block|,
comment|/*ALL_TARGET_HT40_1_3_9_11_17_19*/
literal|10
block|,
comment|/*ALL_TARGET_HT40_4*/
literal|10
block|,
comment|/*ALL_TARGET_HT40_5*/
literal|6
block|,
comment|/*ALL_TARGET_HT40_6*/
literal|2
block|,
comment|/*ALL_TARGET_HT40_7*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_12*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_13*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_14*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_15*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_20*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_21*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_22*/
literal|0
comment|/*ALL_TARGET_HT40_23*/
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Tx power for middle distacnce in HwGreenTx.*/
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|u_int8_t
name|ar9485_hw_gtx_tp_distance_middle
index|[
name|ar9300_rate_size
index|]
init|=
block|{
literal|18
block|,
comment|/*ALL_TARGET_LEGACY_6_24*/
literal|18
block|,
comment|/*ALL_TARGET_LEGACY_36*/
literal|14
block|,
comment|/*ALL_TARGET_LEGACY_48*/
literal|12
block|,
comment|/*ALL_TARGET_LEGACY_54*/
literal|18
block|,
comment|/*ALL_TARGET_LEGACY_1L_5L*/
literal|18
block|,
comment|/*ALL_TARGET_LEGACY_5S*/
literal|18
block|,
comment|/*ALL_TARGET_LEGACY_11L*/
literal|18
block|,
comment|/*ALL_TARGET_LEGACY_11S*/
literal|16
block|,
comment|/*ALL_TARGET_HT20_0_8_16*/
literal|16
block|,
comment|/*ALL_TARGET_HT20_1_3_9_11_17_19*/
literal|16
block|,
comment|/*ALL_TARGET_HT20_4*/
literal|16
block|,
comment|/*ALL_TARGET_HT20_5*/
literal|14
block|,
comment|/*ALL_TARGET_HT20_6*/
literal|12
block|,
comment|/*ALL_TARGET_HT20_7*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_12*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_13*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_14*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_15*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_20*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_21*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_22*/
literal|0
block|,
comment|/*ALL_TARGET_HT20_23*/
literal|14
block|,
comment|/*ALL_TARGET_HT40_0_8_16*/
literal|14
block|,
comment|/*ALL_TARGET_HT40_1_3_9_11_17_19*/
literal|14
block|,
comment|/*ALL_TARGET_HT40_4*/
literal|14
block|,
comment|/*ALL_TARGET_HT40_5*/
literal|14
block|,
comment|/*ALL_TARGET_HT40_6*/
literal|12
block|,
comment|/*ALL_TARGET_HT40_7*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_12*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_13*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_14*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_15*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_20*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_21*/
literal|0
block|,
comment|/*ALL_TARGET_HT40_22*/
literal|0
comment|/*ALL_TARGET_HT40_23*/
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* MIMO Modes used in TPC calculations */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|AR9300_DEF_MODE
init|=
literal|0
block|,
comment|/* Could be CDD or Direct */
name|AR9300_TXBF_MODE
block|,
name|AR9300_STBC_MODE
block|}
name|AR9300_TXMODES
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|POSEIDON_STORED_REG_OBDB
init|=
literal|0
block|,
comment|/* default OB/DB setting from ini */
name|POSEIDON_STORED_REG_TPC
init|=
literal|1
block|,
comment|/* default txpower value in TPC reg */
name|POSEIDON_STORED_REG_BB_PWRTX_RATE9
init|=
literal|2
block|,
comment|/* default txpower value in                                               *  BB_powertx_rate9 reg                                               */
name|POSEIDON_STORED_REG_SZ
comment|/* Can not add anymore */
block|}
name|POSEIDON_STORED_REGS
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|POSEIDON_STORED_REG_G2_OLPC_OFFSET
init|=
literal|0
block|,
comment|/* default OB/DB setting from ini */
name|POSEIDON_STORED_REG_G2_SZ
comment|/* should not exceed 3 */
block|}
name|POSEIDON_STORED_REGS_G2
typedef|;
end_typedef

begin_if
if|#
directive|if
name|AH_NEED_TX_DATA_SWAP
end_if

begin_if
if|#
directive|if
name|AH_NEED_RX_DATA_SWAP
end_if

begin_define
define|#
directive|define
name|ar9300_init_cfg_reg
parameter_list|(
name|ah
parameter_list|)
value|OS_REG_RMW(ah, AR_CFG, AR_CFG_SWTB | AR_CFG_SWRB,0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ar9300_init_cfg_reg
parameter_list|(
name|ah
parameter_list|)
value|OS_REG_RMW(ah, AR_CFG, AR_CFG_SWTB,0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_elif
elif|#
directive|elif
name|AH_NEED_RX_DATA_SWAP
end_elif

begin_define
define|#
directive|define
name|ar9300_init_cfg_reg
parameter_list|(
name|ah
parameter_list|)
value|OS_REG_RMW(ah, AR_CFG, AR_CFG_SWRB,0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ar9300_init_cfg_reg
parameter_list|(
name|ah
parameter_list|)
value|OS_REG_RMW(ah, AR_CFG, AR_CFG_SWTD | AR_CFG_SWRD,0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_rf_attach
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_STATUS
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_struct_decl
struct_decl|struct
name|ath_hal
struct_decl|;
end_struct_decl

begin_function_decl
specifier|extern
name|struct
name|ath_hal_9300
modifier|*
name|ar9300_new_state
parameter_list|(
name|u_int16_t
name|devid
parameter_list|,
name|HAL_ADAPTER_HANDLE
name|osdev
parameter_list|,
name|HAL_SOFTC
name|sc
parameter_list|,
name|HAL_BUS_TAG
name|st
parameter_list|,
name|HAL_BUS_HANDLE
name|sh
parameter_list|,
name|HAL_BUS_TYPE
name|bustype
parameter_list|,
name|asf_amem_instance_handle
name|amem_handle
parameter_list|,
name|struct
name|hal_reg_parm
modifier|*
name|hal_conf_parm
parameter_list|,
name|HAL_STATUS
modifier|*
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|ath_hal
modifier|*
name|ar9300_attach
parameter_list|(
name|u_int16_t
name|devid
parameter_list|,
name|HAL_ADAPTER_HANDLE
name|osdev
parameter_list|,
name|HAL_SOFTC
name|sc
parameter_list|,
name|HAL_BUS_TAG
name|st
parameter_list|,
name|HAL_BUS_HANDLE
name|sh
parameter_list|,
name|HAL_BUS_TYPE
name|bustype
parameter_list|,
name|asf_amem_instance_handle
name|amem_handle
parameter_list|,
name|struct
name|hal_reg_parm
modifier|*
name|hal_conf_parm
parameter_list|,
name|HAL_STATUS
modifier|*
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_detach
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_read_revisions
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_chip_test
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_get_channel_edges
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int16_t
name|flags
parameter_list|,
name|u_int16_t
modifier|*
name|low
parameter_list|,
name|u_int16_t
modifier|*
name|high
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_fill_capability_info
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_beacon_init
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|next_beacon
parameter_list|,
name|u_int32_t
name|beacon_period
parameter_list|,
name|HAL_OPMODE
name|opmode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_sta_beacon_timers
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|HAL_BEACON_STATE
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_is_interrupt_pending
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_get_pending_interrupts
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_INT
modifier|*
parameter_list|,
name|HAL_INT_TYPE
parameter_list|,
name|u_int8_t
parameter_list|,
name|HAL_BOOL
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_INT
name|ar9300_get_interrupts
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_INT
name|ar9300_set_interrupts
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_INT
name|ints
parameter_list|,
name|HAL_BOOL
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_intr_mitigation_timer
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_INT_MITIGATION
name|reg
parameter_list|,
name|u_int32_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_intr_mitigation_timer
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_INT_MITIGATION
name|reg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_key_cache_size
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_is_key_cache_entry_valid
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int16_t
name|entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_reset_key_cache_entry
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int16_t
name|entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_key_cache_entry_mac
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int16_t
name|entry
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_key_cache_entry
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int16_t
name|entry
parameter_list|,
specifier|const
name|HAL_KEYVAL
modifier|*
name|k
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|mac
parameter_list|,
name|int
name|xor_key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_print_keycache
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_mac_address
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_mac_address
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_bss_id_mask
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
modifier|*
name|mac
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_bss_id_mask
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_select_ant_config
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|cfg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_ant_ctrl_common_get
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|is_2ghz
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_regulatory_domain
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int16_t
name|reg_domain
parameter_list|,
name|HAL_STATUS
modifier|*
name|stats
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar9300_get_wireless_modes
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_enable_rf_kill
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_gpio_cfg_output
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
name|gpio
parameter_list|,
name|HAL_GPIO_OUTPUT_MUX_TYPE
name|signalType
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_gpio_cfg_output_led_off
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
name|gpio
parameter_list|,
name|HAL_GPIO_OUTPUT_MUX_TYPE
name|signalType
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_gpio_cfg_input
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
name|gpio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_gpio_set
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
name|gpio
parameter_list|,
name|u_int32_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_gpio_get
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|gpio
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_gpio_get_intr
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_gpio_set_intr
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
parameter_list|,
name|u_int32_t
name|ilevel
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_gpio_get_polarity
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_gpio_set_polarity
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_gpio_get_mask
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ar9300_gpio_set_mask
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|mask
parameter_list|,
name|u_int32_t
name|pol_map
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_led_state
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_LED_STATE
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_power_led_state
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_network_led_state
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_write_associd
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|bssid
parameter_list|,
name|u_int16_t
name|assoc_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_ppm_get_rssi_dump
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_ppm_arm_trigger
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ar9300_ppm_get_trigger
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_ppm_force
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_ppm_un_force
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_ppm_get_force_state
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_ppm_get_force_state
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_dcs_mode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_dcs_mode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_tsf32
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int64_t
name|ar9300_get_tsf64
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_tsf2_32
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_tsf64
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int64_t
name|tsf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_reset_tsf
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_basic_rate
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_RATE_SET
modifier|*
name|pSet
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_random_seed
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_detect_card_present
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_update_mib_mac_stats
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_mib_mac_stats
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_MIB_STATS
modifier|*
name|stats
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_is_japan_channel_spread_supported
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_cur_rssi
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_rssi_chain0
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar9300_get_def_antenna
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_def_antenna
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|antenna
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_antenna_switch
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_ANT_SETTING
name|settings
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_is_sleep_after_beacon_broken
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_slot_time
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_ack_timeout
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar9300_get_ack_timeout
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_set_quiet
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|period
parameter_list|,
name|u_int32_t
name|duration
parameter_list|,
name|u_int32_t
name|next_start
parameter_list|,
name|HAL_QUIET_FLAG
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_pcu_config
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_get_capability
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CAPABILITY_TYPE
parameter_list|,
name|u_int32_t
parameter_list|,
name|u_int32_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_capability
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CAPABILITY_TYPE
parameter_list|,
name|u_int32_t
parameter_list|,
name|u_int32_t
parameter_list|,
name|HAL_STATUS
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_get_diag_state
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|request
parameter_list|,
specifier|const
name|void
modifier|*
name|args
parameter_list|,
name|u_int32_t
name|argsize
parameter_list|,
name|void
modifier|*
modifier|*
name|result
parameter_list|,
name|u_int32_t
modifier|*
name|resultsize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_desc_info
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_DESC_INFO
modifier|*
name|desc_info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int8_t
name|ar9300_get_11n_ext_busy
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_11n_mac2040
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_HT_MACMODE
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_HT_RXCLEAR
name|ar9300_get_11n_rx_clear
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_11n_rx_clear
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_HT_RXCLEAR
name|rxclear
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_power_mode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_POWER_MODE
name|mode
parameter_list|,
name|int
name|set_chip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_POWER_MODE
name|ar9300_get_power_mode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_power_mode_awake
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|set_chip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_sm_power_mode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_SMPS_MODE
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_config_pci_power_save
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|restore
parameter_list|,
name|int
name|power_off
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_force_tsf_sync
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|bssid
parameter_list|,
name|u_int16_t
name|assoc_id
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|ATH_WOW
end_if

begin_function_decl
specifier|extern
name|void
name|ar9300_wow_apply_pattern
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
modifier|*
name|p_ath_pattern
parameter_list|,
name|u_int8_t
modifier|*
name|p_ath_mask
parameter_list|,
name|int32_t
name|pattern_count
parameter_list|,
name|u_int32_t
name|ath_pattern_len
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|//extern  u_int32_t ar9300_wow_wake_up(struct ath_hal *ah,u_int8_t  *chipPatternBytes);
end_comment

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_wow_wake_up
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|offloadEnable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_wow_enable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|pattern_enable
parameter_list|,
name|u_int32_t
name|timeout_in_seconds
parameter_list|,
name|int
name|clearbssid
parameter_list|,
name|HAL_BOOL
name|offloadEnable
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|ATH_WOW_OFFLOAD
end_if

begin_comment
comment|/* ARP offload */
end_comment

begin_define
define|#
directive|define
name|WOW_OFFLOAD_ARP_INFO_MAX
value|2
end_define

begin_struct
struct|struct
name|hal_wow_offload_arp_info
block|{
name|u_int32_t
name|valid
decl_stmt|;
name|u_int32_t
name|id
decl_stmt|;
name|u_int32_t
name|Flags
decl_stmt|;
union|union
block|{
name|u_int8_t
name|u8
index|[
literal|4
index|]
decl_stmt|;
name|u_int32_t
name|u32
decl_stmt|;
block|}
name|RemoteIPv4Address
union|;
union|union
block|{
name|u_int8_t
name|u8
index|[
literal|4
index|]
decl_stmt|;
name|u_int32_t
name|u32
decl_stmt|;
block|}
name|HostIPv4Address
union|;
union|union
block|{
name|u_int8_t
name|u8
index|[
literal|6
index|]
decl_stmt|;
name|u_int32_t
name|u32
index|[
literal|2
index|]
decl_stmt|;
block|}
name|MacAddress
union|;
block|}
struct|;
end_struct

begin_comment
comment|/* NS offload */
end_comment

begin_define
define|#
directive|define
name|WOW_OFFLOAD_NS_INFO_MAX
value|2
end_define

begin_struct
struct|struct
name|hal_wow_offload_ns_info
block|{
name|u_int32_t
name|valid
decl_stmt|;
name|u_int32_t
name|id
decl_stmt|;
name|u_int32_t
name|Flags
decl_stmt|;
union|union
block|{
name|u_int8_t
name|u8
index|[
literal|16
index|]
decl_stmt|;
name|u_int32_t
name|u32
index|[
literal|4
index|]
decl_stmt|;
block|}
name|RemoteIPv6Address
union|;
union|union
block|{
name|u_int8_t
name|u8
index|[
literal|16
index|]
decl_stmt|;
name|u_int32_t
name|u32
index|[
literal|4
index|]
decl_stmt|;
block|}
name|SolicitedNodeIPv6Address
union|;
union|union
block|{
name|u_int8_t
name|u8
index|[
literal|6
index|]
decl_stmt|;
name|u_int32_t
name|u32
index|[
literal|2
index|]
decl_stmt|;
block|}
name|MacAddress
union|;
union|union
block|{
name|u_int8_t
name|u8
index|[
literal|16
index|]
decl_stmt|;
name|u_int32_t
name|u32
index|[
literal|4
index|]
decl_stmt|;
block|}
name|TargetIPv6Addresses
index|[
literal|2
index|]
union|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|void
name|ar9300_wowoffload_prep
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_wowoffload_post
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_wowoffload_download_rekey_data
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
modifier|*
name|data
parameter_list|,
name|u_int32_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_wowoffload_retrieve_data
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|u_int32_t
name|param
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_wowoffload_download_acer_magic
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|valid
parameter_list|,
name|u_int8_t
modifier|*
name|datap
parameter_list|,
name|u_int32_t
name|bytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_wowoffload_download_acer_swka
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|id
parameter_list|,
name|HAL_BOOL
name|valid
parameter_list|,
name|u_int32_t
name|period
parameter_list|,
name|u_int32_t
name|size
parameter_list|,
name|u_int32_t
modifier|*
name|datap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_wowoffload_download_arp_info
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|id
parameter_list|,
name|u_int32_t
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_wowoffload_download_ns_info
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|id
parameter_list|,
name|u_int32_t
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ATH_WOW_OFFLOAD */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_reset
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_OPMODE
name|opmode
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|,
name|HAL_HT_MACMODE
name|macmode
parameter_list|,
name|u_int8_t
name|txchainmask
parameter_list|,
name|u_int8_t
name|rxchainmask
parameter_list|,
name|HAL_HT_EXTPROTSPACING
name|extprotspacing
parameter_list|,
name|HAL_BOOL
name|b_channel_change
parameter_list|,
name|HAL_STATUS
modifier|*
name|status
parameter_list|,
name|int
name|is_scan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_lean_channel_change
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_OPMODE
name|opmode
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|,
name|HAL_HT_MACMODE
name|macmode
parameter_list|,
name|u_int8_t
name|txchainmask
parameter_list|,
name|u_int8_t
name|rxchainmask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_reset_reg
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_init_pll
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_green_ap_ps_on_off
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int16_t
name|rxMask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int16_t
name|ar9300_is_single_ant_power_save_possible
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_operating_mode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|opmode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_phy_disable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_disable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_chip_reset
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_calibration
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|,
name|u_int8_t
name|rxchainmask
parameter_list|,
name|HAL_BOOL
name|longcal
parameter_list|,
name|HAL_BOOL
modifier|*
name|isIQdone
parameter_list|,
name|int
name|is_scan
parameter_list|,
name|u_int32_t
modifier|*
name|sched_cals
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_reset_cal_valid
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|,
name|HAL_BOOL
modifier|*
name|isIQdone
parameter_list|,
name|u_int32_t
name|cal_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_iq_cal_collect
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|num_chains
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_iq_calibration
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|num_chains
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_temp_comp_cal_collect
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_temp_comp_calibration
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|num_chains
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int16_t
name|ar9300_get_min_cca_pwr
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_upload_noise_floor
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|is2G
parameter_list|,
name|int16_t
name|nfarray
index|[]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_tx_power_limit
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|limit
parameter_list|,
name|u_int16_t
name|extra_txpow
parameter_list|,
name|u_int16_t
name|tpc_in_db
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_chain_noise_floor
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int16_t
modifier|*
name|nf_buf
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|,
name|int
name|is_scan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_load_nf
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int16_t
name|nf
index|[]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_RFGAIN
name|ar9300_get_rfgain
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|HAL_RATE_TABLE
modifier|*
name|ar9300_get_rate_table
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int16_t
name|ar9300_get_rate_txpower
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|mode
parameter_list|,
name|u_int8_t
name|rate_index
parameter_list|,
name|u_int8_t
name|chainmask
parameter_list|,
name|u_int8_t
name|mimo_mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_init_rate_txpower
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|mode
parameter_list|,
name|HAL_CHANNEL_INTERNAL
modifier|*
name|chan
parameter_list|,
name|u_int8_t
name|powerPerRate
index|[]
parameter_list|,
name|u_int8_t
name|chainmask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_adjust_reg_txpower_cdd
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|powerPerRate
index|[]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_reset_tx_status_ring
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_enable_mib_counters
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_disable_mib_counters
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_ani_attach
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_ani_detach
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|ar9300_ani_state
modifier|*
name|ar9300_ani_get_current_state
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|ar9300_stats
modifier|*
name|ar9300_ani_get_current_stats
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_ani_control
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_ANI_CMD
name|cmd
parameter_list|,
name|int
name|param
parameter_list|)
function_decl|;
end_function_decl

begin_struct_decl
struct_decl|struct
name|ath_rx_status
struct_decl|;
end_struct_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_process_mib_intr
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|HAL_NODE_STATS
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_ani_ar_poll
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
specifier|const
name|HAL_NODE_STATS
modifier|*
parameter_list|,
name|HAL_CHANNEL
modifier|*
parameter_list|,
name|HAL_ANISTATS
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_ani_reset
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_BOOL
name|is_scanning
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_ani_init_defaults
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_HT_MACMODE
name|macmode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_enable_tpc
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_rf_gain_cap_apply
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|is2GHz
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_rx_gain_table_apply
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_tx_gain_table_apply
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mat_enable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_dump_keycache
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|n
parameter_list|,
name|u_int32_t
modifier|*
name|entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_ant_ctrl_set_lna_div_use_bt_ant
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|enable
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|AH_SUPPORT_AR9300
end_ifdef

begin_comment
comment|/* BB Panic Watchdog declarations */
end_comment

begin_define
define|#
directive|define
name|HAL_BB_PANIC_WD_TMO
value|25
end_define

begin_comment
comment|/* in ms, 0 to disable */
end_comment

begin_define
define|#
directive|define
name|HAL_BB_PANIC_WD_TMO_HORNET
value|85
end_define

begin_function_decl
specifier|extern
name|void
name|ar9300_config_bb_panic_watchdog
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_handle_bb_panic
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ar9300_get_bb_panic_info
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|hal_bb_panic_info
modifier|*
name|bb_panic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_handle_radar_bb_panic
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|void
name|ar9300_set_hal_reset_reason
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|resetreason
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* DFS declarations */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|ATH_SUPPORT_DFS
end_ifdef

begin_function_decl
specifier|extern
name|void
name|ar9300_check_dfs
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_dfs_found
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|,
name|u_int64_t
name|nolTime
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_enable_dfs
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_PHYERR_PARAM
modifier|*
name|pe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_dfs_thresh
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_PHYERR_PARAM
modifier|*
name|pe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_radar_wait
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|dfs_pulse
modifier|*
name|ar9300_get_dfs_radars
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|dfsdomain
parameter_list|,
name|int
modifier|*
name|numradars
parameter_list|,
name|struct
name|dfs_bin5pulse
modifier|*
modifier|*
name|bin5pulses
parameter_list|,
name|int
modifier|*
name|numb5radars
parameter_list|,
name|HAL_PHYERR_PARAM
modifier|*
name|pe
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_adjust_difs
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_dfs_config_fft
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|is_enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_cac_tx_quiet
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_dfs_cac_war
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|start
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|HAL_CHANNEL
modifier|*
name|ar9300_get_extension_channel
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_is_fast_clock_enabled
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mark_phy_inactive
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Spectral scan declarations */
end_comment

begin_function_decl
specifier|extern
name|void
name|ar9300_configure_spectral_scan
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_SPECTRAL_PARAM
modifier|*
name|ss
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_cca_threshold
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|thresh62
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_spectral_params
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_SPECTRAL_PARAM
modifier|*
name|ss
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_is_spectral_active
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_is_spectral_enabled
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_start_spectral_scan
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_stop_spectral_scan
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_spectral_config
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_restore_spectral_config
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|restoreval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int16_t
name|ar9300_get_ctl_chan_nf
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int16_t
name|ar9300_get_ext_chan_nf
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* End spectral scan declarations */
end_comment

begin_comment
comment|/* Raw ADC capture functions */
end_comment

begin_function_decl
specifier|extern
name|void
name|ar9300_enable_test_addac_mode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_disable_test_addac_mode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_begin_adc_capture
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|auto_agc_gain
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_retrieve_capture_data
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int16_t
name|chain_mask
parameter_list|,
name|int
name|disable_dc_filter
parameter_list|,
name|void
modifier|*
name|sample_buf
parameter_list|,
name|u_int32_t
modifier|*
name|max_samples
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_calc_adc_ref_powers
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|freq_mhz
parameter_list|,
name|int16_t
modifier|*
name|sample_min
parameter_list|,
name|int16_t
modifier|*
name|sample_max
parameter_list|,
name|int32_t
modifier|*
name|chain_ref_pwr
parameter_list|,
name|int
name|num_chain_ref_pwr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_get_min_agc_gain
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|freq_mhz
parameter_list|,
name|int32_t
modifier|*
name|chain_gain
parameter_list|,
name|int
name|num_chain_gain
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_reset_11n
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_OPMODE
name|opmode
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|chan
parameter_list|,
name|HAL_BOOL
name|b_channel_change
parameter_list|,
name|HAL_STATUS
modifier|*
name|status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_coverage_class
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|coverageclass
parameter_list|,
name|int
name|now
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_channel_centers
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL_INTERNAL
modifier|*
name|chan
parameter_list|,
name|CHAN_CENTERS
modifier|*
name|centers
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int16_t
name|ar9300_get_ctl_center
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL_INTERNAL
modifier|*
name|chan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int16_t
name|ar9300_get_ext_center
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL_INTERNAL
modifier|*
name|chan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_mib_cycle_counts_pct
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int32_t
modifier|*
parameter_list|,
name|u_int32_t
modifier|*
parameter_list|,
name|u_int32_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_dma_reg_dump
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_11n_rx_rifs
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_rifs_delay
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_set_smart_antenna
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_detect_bb_hang
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_detect_mac_hang
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|ATH_BT_COEX
end_ifdef

begin_function_decl
specifier|extern
name|void
name|ar9300_set_bt_coex_info
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BT_COEX_INFO
modifier|*
name|btinfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_bt_coex_config
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BT_COEX_CONFIG
modifier|*
name|btconf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_bt_coex_set_qcu_thresh
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|qnum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_bt_coex_set_weights
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|stomp_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_bt_coex_setup_bmiss_thresh
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|thresh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_bt_coex_set_parameter
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|type
parameter_list|,
name|u_int32_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_bt_coex_disable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ar9300_bt_coex_enable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_init_bt_coex
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_bt_active_gpio
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|reg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_get_wlan_active_gpio
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|reg
parameter_list|,
name|u_int32_t
name|bOn
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|int
name|ar9300_alloc_generic_timer
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_GEN_TIMER_DOMAIN
name|tsf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_free_generic_timer
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_start_generic_timer
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|index
parameter_list|,
name|u_int32_t
name|timer_next
parameter_list|,
name|u_int32_t
name|timer_period
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_stop_generic_timer
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_gen_timer_interrupts
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
modifier|*
name|trigger
parameter_list|,
name|u_int32_t
modifier|*
name|thresh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_start_tsf2
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_chk_rssi_update_tx_pwr
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|rssi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_is_skip_paprd_by_greentx
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_control_signals_for_green_tx_mode
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_hwgreentx_set_pal_spare
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_reset_hw_beacon_proc_crc
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int32_t
name|ar9300_get_hw_beacon_rssi
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_hw_beacon_rssi_threshold
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|rssi_threshold
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_reset_hw_beacon_rssi
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_set_hw_beacon_proc
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|on
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_is_ani_noise_spur
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_vow_stats
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_VOWSTATS
modifier|*
name|p_stats
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ar9300_get_spur_info
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
modifier|*
name|enable
parameter_list|,
name|int
name|len
parameter_list|,
name|u_int16_t
modifier|*
name|freq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ar9300_set_spur_info
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|enable
parameter_list|,
name|int
name|len
parameter_list|,
name|u_int16_t
modifier|*
name|freq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_wow_set_gpio_reset_low
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_mib_cycle_counts
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_COUNTERS
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_clear_mib_counters
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* EEPROM interface functions */
end_comment

begin_comment
comment|/* Common Interface functions */
end_comment

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_eeprom_attach
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_eeprom_get
parameter_list|(
name|struct
name|ath_hal_9300
modifier|*
name|ahp
parameter_list|,
name|EEPROM_PARAM
name|param
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_ini_fixup
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|ar9300_eeprom_t
modifier|*
name|p_eep_data
parameter_list|,
name|u_int32_t
name|reg
parameter_list|,
name|u_int32_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_eeprom_set_transmit_power
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|ar9300_eeprom_t
modifier|*
name|p_eep_data
parameter_list|,
name|HAL_CHANNEL_INTERNAL
modifier|*
name|chan
parameter_list|,
name|u_int16_t
name|cfg_ctl
parameter_list|,
name|u_int16_t
name|twice_antenna_reduction
parameter_list|,
name|u_int16_t
name|twice_max_regulatory_power
parameter_list|,
name|u_int16_t
name|power_limit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_eeprom_set_addac
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CHANNEL_INTERNAL
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_eeprom_set_param
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|EEPROM_PARAM
name|param
parameter_list|,
name|u_int32_t
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_eeprom_set_board_values
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|HAL_CHANNEL_INTERNAL
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_eeprom_read_word
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|off
parameter_list|,
name|u_int16_t
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_eeprom_read
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|long
name|address
parameter_list|,
name|u_int8_t
modifier|*
name|buffer
parameter_list|,
name|int
name|many
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_otp_read
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|off
parameter_list|,
name|u_int32_t
modifier|*
name|data
parameter_list|,
name|HAL_BOOL
name|is_wifi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_flash_read
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|off
parameter_list|,
name|u_int16_t
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_flash_write
parameter_list|(
name|struct
name|ath_hal
modifier|*
parameter_list|,
name|u_int
name|off
parameter_list|,
name|u_int16_t
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar9300_eeprom_dump_support
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|void
modifier|*
modifier|*
name|pp_e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int8_t
name|ar9300_eeprom_get_num_ant_config
parameter_list|(
name|struct
name|ath_hal_9300
modifier|*
name|ahp
parameter_list|,
name|HAL_FREQ_BAND
name|freq_band
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_eeprom_get_ant_cfg
parameter_list|(
name|struct
name|ath_hal_9300
modifier|*
name|ahp
parameter_list|,
name|HAL_CHANNEL_INTERNAL
modifier|*
name|chan
parameter_list|,
name|u_int8_t
name|index
parameter_list|,
name|u_int16_t
modifier|*
name|config
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int8_t
modifier|*
name|ar9300_eeprom_get_cust_data
parameter_list|(
name|struct
name|ath_hal_9300
modifier|*
name|ahp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int8_t
modifier|*
name|ar9300_eeprom_get_spur_chans_ptr
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|is_2ghz
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_interference_is_present
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_tuning_caps_apply
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_disp_tpc_tables
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int8_t
modifier|*
name|ar9300_get_tpc_tables
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int8_t
name|ar9300_eeprom_set_tx_gain_cap
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
modifier|*
name|tx_gain_max
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int8_t
name|ar9300_eeprom_tx_gain_table_index_max_apply
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int16_t
name|channel
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Common EEPROM Help function */
end_comment

begin_function_decl
specifier|extern
name|void
name|ar9300_set_immunity
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_get_hw_hangs
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|hal_hw_hangs_t
modifier|*
name|hangs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int
name|ar9300_mac_to_clks
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int
name|clks
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* tx_bf interface */
end_comment

begin_define
define|#
directive|define
name|ar9300_init_txbf
parameter_list|(
name|ah
parameter_list|)
end_define

begin_define
define|#
directive|define
name|ar9300_set_11n_txbf_sounding
parameter_list|(
name|ah
parameter_list|,
name|ds
parameter_list|,
name|series
parameter_list|,
name|cec
parameter_list|,
name|opt
parameter_list|)
end_define

begin_define
define|#
directive|define
name|ar9300_set_11n_txbf_cal
parameter_list|(
name|ah
parameter_list|,
name|ds
parameter_list|,
name|cal_pos
parameter_list|,
name|code_rate
parameter_list|,
name|cec
parameter_list|,
name|opt
parameter_list|)
end_define

begin_define
define|#
directive|define
name|ar9300_txbf_save_cv_from_compress
parameter_list|(   \
name|ah
parameter_list|,
name|key_idx
parameter_list|,
name|mimo_control
parameter_list|,
name|compress_rpt
parameter_list|)
define|\
value|false
end_define

begin_define
define|#
directive|define
name|ar9300_txbf_save_cv_from_non_compress
parameter_list|(   \
name|ah
parameter_list|,
name|key_idx
parameter_list|,
name|mimo_control
parameter_list|,
name|non_compress_rpt
parameter_list|)
define|\
value|false
end_define

begin_define
define|#
directive|define
name|ar9300_txbf_rc_update
parameter_list|(                             \
name|ah
parameter_list|,
name|rx_status
parameter_list|,
name|local_h
parameter_list|,
name|csi_frame
parameter_list|,
name|ness_a
parameter_list|,
name|ness_b
parameter_list|,
name|bw
parameter_list|)
define|\
value|false
end_define

begin_define
define|#
directive|define
name|ar9300_fill_csi_frame
parameter_list|(                         \
name|ah
parameter_list|,
name|rx_status
parameter_list|,
name|bandwidth
parameter_list|,
name|local_h
parameter_list|,
name|csi_frame_body
parameter_list|)
define|\
value|0
end_define

begin_define
define|#
directive|define
name|ar9300_fill_txbf_capabilities
parameter_list|(
name|ah
parameter_list|)
end_define

begin_define
define|#
directive|define
name|ar9300_get_txbf_capabilities
parameter_list|(
name|ah
parameter_list|)
value|NULL
end_define

begin_define
define|#
directive|define
name|ar9300_txbf_set_key
parameter_list|( \
name|ah
parameter_list|,
name|entry
parameter_list|,
name|rx_staggered_sounding
parameter_list|,
name|channel_estimation_cap
parameter_list|,
name|mmss
parameter_list|)
end_define

begin_define
define|#
directive|define
name|ar9300_read_key_cache_mac
parameter_list|(
name|ah
parameter_list|,
name|entry
parameter_list|,
name|mac
parameter_list|)
value|false
end_define

begin_define
define|#
directive|define
name|ar9300_txbf_get_cv_cache_nr
parameter_list|(
name|ah
parameter_list|,
name|key_idx
parameter_list|,
name|nr
parameter_list|)
end_define

begin_define
define|#
directive|define
name|ar9300_set_selfgenrate_limit
parameter_list|(
name|ah
parameter_list|,
name|ts_ratecode
parameter_list|)
end_define

begin_define
define|#
directive|define
name|ar9300_reset_lowest_txrate
parameter_list|(
name|ah
parameter_list|)
end_define

begin_define
define|#
directive|define
name|ar9300_txbf_set_basic_set
parameter_list|(
name|ah
parameter_list|)
end_define

begin_function_decl
specifier|extern
name|void
name|ar9300_crdc_rx_notify
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|struct
name|ath_rx_status
modifier|*
name|rxs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_chain_rssi_diff_compensation
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|ATH_SUPPORT_MCI
end_if

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_bt_coex_set_weights
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|stomp_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_bt_coex_disable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ar9300_mci_bt_coex_enable
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_setup
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|gpm_addr
parameter_list|,
name|void
modifier|*
name|gpm_buf
parameter_list|,
name|u_int16_t
name|len
parameter_list|,
name|u_int32_t
name|sched_addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_remote_reset
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|wait_done
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_send_lna_transfer
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|wait_done
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_send_sys_waking
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|wait_done
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_mci_send_message
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|header
parameter_list|,
name|u_int32_t
name|flag
parameter_list|,
name|u_int32_t
modifier|*
name|payload
parameter_list|,
name|u_int8_t
name|len
parameter_list|,
name|HAL_BOOL
name|wait_done
parameter_list|,
name|HAL_BOOL
name|check_bt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_mci_get_interrupt
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
modifier|*
name|mci_int
parameter_list|,
name|u_int32_t
modifier|*
name|mci_int_rx_msg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_mci_state
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|state_type
parameter_list|,
name|u_int32_t
modifier|*
name|p_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_reset
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|en_int
parameter_list|,
name|HAL_BOOL
name|is_2g
parameter_list|,
name|HAL_BOOL
name|is_full_sleep
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_send_coex_halt_bt_gpm
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|halt
parameter_list|,
name|HAL_BOOL
name|wait_done
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_mute_bt
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_mci_wait_for_gpm
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
name|gpm_type
parameter_list|,
name|u_int8_t
name|gpm_opcode
parameter_list|,
name|int32_t
name|time_out
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_enable_interrupt
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_disable_interrupt
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_detach
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_mci_check_int
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|ints
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_sync_bt_state
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_2g5g_changed
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|is_2g
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_mci_2g5g_switch
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|wait_done
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|ATH_SUPPORT_AIC
end_if

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_aic_calibration
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|u_int32_t
name|ar9300_aic_start_normal
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|extern
name|HAL_STATUS
name|ar9300_set_proxy_sta
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_BOOL
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300_regulatory_domain_override
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int16_t
name|regdmn
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|ATH_ANT_DIV_COMB
end_if

begin_function_decl
specifier|extern
name|void
name|ar9300_ant_div_comb_get_config
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_ANT_COMB_CONFIG
modifier|*
name|div_comb_conf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_ant_div_comb_set_config
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_ANT_COMB_CONFIG
modifier|*
name|div_comb_conf
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ATH_ANT_DIV_COMB */
end_comment

begin_function_decl
specifier|extern
name|void
name|ar9300_disable_phy_restart
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|disable_phy_restart
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_enable_keysearch_always
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|enable
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300ForceVCS
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300SetDfs3StreamFix
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int32_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|HAL_BOOL
name|ar9300Get3StreamSignature
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|ATH_TX99_DIAG
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|ATH_SUPPORT_HTC
end_ifndef

begin_function_decl
specifier|extern
name|void
name|ar9300_tx99_channel_pwr_update
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|HAL_CHANNEL
modifier|*
name|c
parameter_list|,
name|u_int32_t
name|txpower
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_tx99_chainmsk_setup
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|tx_chainmask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_tx99_set_single_carrier
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|int
name|tx_chain_mask
parameter_list|,
name|int
name|chtype
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_tx99_start
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|,
name|u_int8_t
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ar9300_tx99_stop
parameter_list|(
name|struct
name|ath_hal
modifier|*
name|ah
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ATH_SUPPORT_HTC */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ATH_TX99_DIAG */
end_comment

begin_enum
enum|enum
block|{
name|AR9300_COEFF_TX_TYPE
init|=
literal|0
block|,
name|AR9300_COEFF_RX_TYPE
block|}
enum|;
end_enum

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ATH_AR9300_H_ */
end_comment

end_unit

