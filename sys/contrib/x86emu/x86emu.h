begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: x86emu.h,v 1.1 2007/12/01 20:14:10 joerg Exp $	*/
end_comment

begin_comment
comment|/*	$OpenBSD: x86emu.h,v 1.3 2009/06/06 03:45:05 matthieu Exp $ */
end_comment

begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/**************************************************************************** * *  Realmode X86 Emulator Library * *  Copyright (C) 1996-1999 SciTech Software, Inc. *  Copyright (C) David Mosberger-Tang *  Copyright (C) 1999 Egbert Eich *  Copyright (C) 2007 Joerg Sonnenberger * *  ======================================================================== * *  Permission to use, copy, modify, distribute, and sell this software and *  its documentation for any purpose is hereby granted without fee, *  provided that the above copyright notice appear in all copies and that *  both that copyright notice and this permission notice appear in *  supporting documentation, and that the name of the authors not be used *  in advertising or publicity pertaining to distribution of the software *  without specific, written prior permission.  The authors makes no *  representations about the suitability of this software for any purpose. *  It is provided "as is" without express or implied warranty. * *  THE AUTHORS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, *  INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO *  EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, INDIRECT OR *  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF *  USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR *  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR *  PERFORMANCE OF THIS SOFTWARE. * ****************************************************************************/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__X86EMU_X86EMU_H
end_ifndef

begin_define
define|#
directive|define
name|__X86EMU_X86EMU_H
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/systm.h>
end_include

begin_include
include|#
directive|include
file|<machine/setjmp.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<setjmp.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * General EAX, EBX, ECX, EDX type registers.  Note that for  * portability, and speed, the issue of byte swapping is not addressed  * in the registers.  All registers are stored in the default format  * available on the host machine.  The only critical issue is that the  * registers should line up EXACTLY in the same manner as they do in  * the 386.  That is:  *  * EAX& 0xff  === AL  * EAX& 0xffff == AX  *  * etc.  The result is that alot of the calculations can then be  * done using the native instruction set fully.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__BIG_ENDIAN__
end_ifdef

begin_struct
struct|struct
name|x86emu_register32
block|{
name|uint32_t
name|e_reg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|x86emu_register16
block|{
name|uint16_t
name|filler0
decl_stmt|;
name|uint16_t
name|x_reg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|x86emu_register8
block|{
name|uint8_t
name|filler0
decl_stmt|,
name|filler1
decl_stmt|;
name|uint8_t
name|h_reg
decl_stmt|,
name|l_reg
decl_stmt|;
block|}
struct|;
end_struct

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !__BIG_ENDIAN__ */
end_comment

begin_struct
struct|struct
name|x86emu_register32
block|{
name|uint32_t
name|e_reg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|x86emu_register16
block|{
name|uint16_t
name|x_reg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|x86emu_register8
block|{
name|uint8_t
name|l_reg
decl_stmt|,
name|h_reg
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* BIG_ENDIAN */
end_comment

begin_union
union|union
name|x86emu_register
block|{
name|struct
name|x86emu_register32
name|I32_reg
decl_stmt|;
name|struct
name|x86emu_register16
name|I16_reg
decl_stmt|;
name|struct
name|x86emu_register8
name|I8_reg
decl_stmt|;
block|}
union|;
end_union

begin_struct
struct|struct
name|x86emu_regs
block|{
name|uint16_t
name|register_cs
decl_stmt|;
name|uint16_t
name|register_ds
decl_stmt|;
name|uint16_t
name|register_es
decl_stmt|;
name|uint16_t
name|register_fs
decl_stmt|;
name|uint16_t
name|register_gs
decl_stmt|;
name|uint16_t
name|register_ss
decl_stmt|;
name|uint32_t
name|register_flags
decl_stmt|;
name|union
name|x86emu_register
name|register_a
decl_stmt|;
name|union
name|x86emu_register
name|register_b
decl_stmt|;
name|union
name|x86emu_register
name|register_c
decl_stmt|;
name|union
name|x86emu_register
name|register_d
decl_stmt|;
name|union
name|x86emu_register
name|register_sp
decl_stmt|;
name|union
name|x86emu_register
name|register_bp
decl_stmt|;
name|union
name|x86emu_register
name|register_si
decl_stmt|;
name|union
name|x86emu_register
name|register_di
decl_stmt|;
name|union
name|x86emu_register
name|register_ip
decl_stmt|;
comment|/* 	 * MODE contains information on: 	 *  REPE prefix             2 bits  repe,repne 	 *  SEGMENT overrides       5 bits  normal,DS,SS,CS,ES 	 *  Delayed flag set        3 bits  (zero, signed, parity) 	 *  reserved                6 bits 	 *  interrupt #             8 bits  instruction raised interrupt 	 *  BIOS video segregs      4 bits   	 *  Interrupt Pending       1 bits   	 *  Extern interrupt        1 bits 	 *  Halted                  1 bits 	 */
name|uint32_t
name|mode
decl_stmt|;
specifier|volatile
name|int
name|intr
decl_stmt|;
comment|/* mask of pending interrupts */
name|uint8_t
name|intno
decl_stmt|;
name|uint8_t
name|__pad
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|x86emu
block|{
name|char
modifier|*
name|mem_base
decl_stmt|;
name|size_t
name|mem_size
decl_stmt|;
name|void
modifier|*
name|sys_private
decl_stmt|;
name|struct
name|x86emu_regs
name|x86
decl_stmt|;
name|jmp_buf
name|exec_state
decl_stmt|;
name|uint64_t
name|cur_cycles
decl_stmt|;
name|unsigned
name|int
name|cur_mod
range|:
literal|2
decl_stmt|;
name|unsigned
name|int
name|cur_rl
range|:
literal|3
decl_stmt|;
name|unsigned
name|int
name|cur_rh
range|:
literal|3
decl_stmt|;
name|uint32_t
name|cur_offset
decl_stmt|;
name|uint8_t
function_decl|(
modifier|*
name|emu_rdb
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint32_t
name|addr
parameter_list|)
function_decl|;
name|uint16_t
function_decl|(
modifier|*
name|emu_rdw
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint32_t
name|addr
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|emu_rdl
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint32_t
name|addr
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|emu_wrb
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint32_t
name|addr
parameter_list|,
name|uint8_t
name|val
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|emu_wrw
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint32_t
name|addr
parameter_list|,
name|uint16_t
name|val
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|emu_wrl
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint32_t
name|addr
parameter_list|,
name|uint32_t
name|val
parameter_list|)
function_decl|;
name|uint8_t
function_decl|(
modifier|*
name|emu_inb
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint16_t
name|addr
parameter_list|)
function_decl|;
name|uint16_t
function_decl|(
modifier|*
name|emu_inw
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint16_t
name|addr
parameter_list|)
function_decl|;
name|uint32_t
function_decl|(
modifier|*
name|emu_inl
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint16_t
name|addr
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|emu_outb
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint16_t
name|addr
parameter_list|,
name|uint8_t
name|val
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|emu_outw
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint16_t
name|addr
parameter_list|,
name|uint16_t
name|val
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|emu_outl
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint16_t
name|addr
parameter_list|,
name|uint32_t
name|val
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|_x86emu_intrTab
index|[
literal|256
index|]
function_decl|)
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_function_decl
name|__BEGIN_DECLS
name|void
name|x86emu_init_default
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* decode.c */
end_comment

begin_function_decl
name|void
name|x86emu_exec
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|x86emu_exec_call
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|x86emu_exec_intr
parameter_list|(
name|struct
name|x86emu
modifier|*
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|x86emu_halt_sys
argument_list|(
expr|struct
name|x86emu
operator|*
argument_list|)
name|__dead2
decl_stmt|;
end_decl_stmt

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __X86EMU_X86EMU_H */
end_comment

end_unit

