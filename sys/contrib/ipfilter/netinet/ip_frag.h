begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*  * Copyright (C) 1993-2001 by Darren Reed.  *  * See the IPFILTER.LICENCE file for details on licencing.  *  * @(#)ip_frag.h	1.5 3/24/96  * $FreeBSD$  * Id: ip_frag.h,v 2.23.2.1 2004/03/29 16:21:56 darrenr Exp  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IP_FRAG_H__
end_ifndef

begin_define
define|#
directive|define
name|__IP_FRAG_H__
end_define

begin_define
define|#
directive|define
name|IPFT_SIZE
value|257
end_define

begin_typedef
typedef|typedef
struct|struct
name|ipfr
block|{
name|struct
name|ipfr
modifier|*
name|ipfr_hnext
decl_stmt|,
modifier|*
modifier|*
name|ipfr_hprev
decl_stmt|;
name|struct
name|ipfr
modifier|*
name|ipfr_next
decl_stmt|,
modifier|*
modifier|*
name|ipfr_prev
decl_stmt|;
name|void
modifier|*
name|ipfr_data
decl_stmt|;
name|void
modifier|*
name|ipfr_ifp
decl_stmt|;
name|struct
name|in_addr
name|ipfr_src
decl_stmt|;
name|struct
name|in_addr
name|ipfr_dst
decl_stmt|;
name|u_32_t
name|ipfr_optmsk
decl_stmt|;
name|u_short
name|ipfr_secmsk
decl_stmt|;
name|u_short
name|ipfr_auth
decl_stmt|;
name|u_short
name|ipfr_id
decl_stmt|;
name|u_char
name|ipfr_p
decl_stmt|;
name|u_char
name|ipfr_tos
decl_stmt|;
name|u_32_t
name|ipfr_pass
decl_stmt|;
name|u_short
name|ipfr_off
decl_stmt|;
name|u_char
name|ipfr_ttl
decl_stmt|;
name|u_char
name|ipfr_seen0
decl_stmt|;
name|frentry_t
modifier|*
name|ipfr_rule
decl_stmt|;
block|}
name|ipfr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ipfrstat
block|{
name|u_long
name|ifs_exists
decl_stmt|;
comment|/* add& already exists */
name|u_long
name|ifs_nomem
decl_stmt|;
name|u_long
name|ifs_new
decl_stmt|;
name|u_long
name|ifs_hits
decl_stmt|;
name|u_long
name|ifs_expire
decl_stmt|;
name|u_long
name|ifs_inuse
decl_stmt|;
name|u_long
name|ifs_retrans0
decl_stmt|;
name|u_long
name|ifs_short
decl_stmt|;
name|struct
name|ipfr
modifier|*
modifier|*
name|ifs_table
decl_stmt|;
name|struct
name|ipfr
modifier|*
modifier|*
name|ifs_nattab
decl_stmt|;
block|}
name|ipfrstat_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|IPFR_CMPSZ
value|(offsetof(ipfr_t, ipfr_pass) - \ 			 offsetof(ipfr_t, ipfr_ifp))
end_define

begin_decl_stmt
specifier|extern
name|int
name|ipfr_size
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fr_ipfrttl
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fr_frag_lock
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fr_fraginit
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|fr_fragunload
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ipfrstat_t
modifier|*
name|fr_fragstats
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fr_newfrag
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|,
name|u_32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|frentry_t
modifier|*
name|fr_knownfrag
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|,
name|u_32_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fr_nat_newfrag
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|,
name|u_32_t
operator|,
expr|struct
name|nat
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|nat_t
modifier|*
name|fr_nat_knownfrag
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fr_ipid_newfrag
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|,
name|u_32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_32_t
name|fr_ipid_knownfrag
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|fr_forget
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|fr_forgetnat
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|fr_fragclear
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|fr_fragexpire
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|&&
operator|(
operator|(
name|BSD
operator|>=
literal|199306
operator|)
operator|||
name|SOLARIS
operator|||
name|defined
argument_list|(
name|__sgi
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|__osf__
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|(
name|IRIX
operator|>=
literal|60500
operator|)
operator|)
operator|)
end_if

begin_if
if|#
directive|if
name|defined
argument_list|(
name|SOLARIS2
argument_list|)
operator|&&
operator|(
name|SOLARIS2
operator|<
literal|7
operator|)
end_if

begin_decl_stmt
specifier|extern
name|void
name|fr_slowtimer
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|extern
name|void
name|fr_slowtimer
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_if
if|#
directive|if
name|defined
argument_list|(
name|linux
argument_list|)
operator|&&
name|defined
argument_list|(
name|_KERNEL
argument_list|)
end_if

begin_decl_stmt
specifier|extern
name|void
name|fr_slowtimer
name|__P
argument_list|(
operator|(
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|extern
name|int
name|fr_slowtimer
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __IP_FRAG_H__ */
end_comment

end_unit

