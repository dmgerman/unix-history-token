begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * BSD LICENSE  *  * Copyright (c) 2015-2017 Amazon.com, Inc. or its affiliates.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * * Redistributions of source code must retain the above copyright  * notice, this list of conditions and the following disclaimer.  * * Redistributions in binary form must reproduce the above copyright  * notice, this list of conditions and the following disclaimer in  * the documentation and/or other materials provided with the  * distribution.  * * Neither the name of copyright holder nor the names of its  * contributors may be used to endorse or promote products derived  * from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ENA_COM
end_ifndef

begin_define
define|#
directive|define
name|ENA_COM
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|ENA_INTERNAL
end_ifndef

begin_include
include|#
directive|include
file|"ena_plat.h"
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|"ena_plat.h"
end_include

begin_include
include|#
directive|include
file|"ena_includes.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ENA_MAX_NUM_IO_QUEUES
value|128U
end_define

begin_comment
comment|/* We need to queues for each IO (on for Tx and one for Rx) */
end_comment

begin_define
define|#
directive|define
name|ENA_TOTAL_NUM_QUEUES
value|(2 * (ENA_MAX_NUM_IO_QUEUES))
end_define

begin_define
define|#
directive|define
name|ENA_MAX_HANDLERS
value|256
end_define

begin_define
define|#
directive|define
name|ENA_MAX_PHYS_ADDR_SIZE_BITS
value|48
end_define

begin_comment
comment|/* Unit in usec */
end_comment

begin_define
define|#
directive|define
name|ENA_REG_READ_TIMEOUT
value|200000
end_define

begin_define
define|#
directive|define
name|ADMIN_SQ_SIZE
parameter_list|(
name|depth
parameter_list|)
value|((depth) * sizeof(struct ena_admin_aq_entry))
end_define

begin_define
define|#
directive|define
name|ADMIN_CQ_SIZE
parameter_list|(
name|depth
parameter_list|)
value|((depth) * sizeof(struct ena_admin_acq_entry))
end_define

begin_define
define|#
directive|define
name|ADMIN_AENQ_SIZE
parameter_list|(
name|depth
parameter_list|)
value|((depth) * sizeof(struct ena_admin_aenq_entry))
end_define

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/* ENA adaptive interrupt moderation settings */
end_comment

begin_define
define|#
directive|define
name|ENA_INTR_LOWEST_USECS
value|(0)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_LOWEST_PKTS
value|(3)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_LOWEST_BYTES
value|(2 * 1524)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_LOW_USECS
value|(32)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_LOW_PKTS
value|(12)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_LOW_BYTES
value|(16 * 1024)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_MID_USECS
value|(80)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_MID_PKTS
value|(48)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_MID_BYTES
value|(64 * 1024)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_HIGH_USECS
value|(128)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_HIGH_PKTS
value|(96)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_HIGH_BYTES
value|(128 * 1024)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_HIGHEST_USECS
value|(192)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_HIGHEST_PKTS
value|(128)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_HIGHEST_BYTES
value|(192 * 1024)
end_define

begin_define
define|#
directive|define
name|ENA_INTR_INITIAL_TX_INTERVAL_USECS
value|196
end_define

begin_define
define|#
directive|define
name|ENA_INTR_INITIAL_RX_INTERVAL_USECS
value|4
end_define

begin_define
define|#
directive|define
name|ENA_INTR_DELAY_OLD_VALUE_WEIGHT
value|6
end_define

begin_define
define|#
directive|define
name|ENA_INTR_DELAY_NEW_VALUE_WEIGHT
value|4
end_define

begin_define
define|#
directive|define
name|ENA_INTR_MODER_LEVEL_STRIDE
value|1
end_define

begin_define
define|#
directive|define
name|ENA_INTR_BYTE_COUNT_NOT_SUPPORTED
value|0xFFFFFF
end_define

begin_define
define|#
directive|define
name|ENA_HW_HINTS_NO_TIMEOUT
value|0xFFFF
end_define

begin_enum
enum|enum
name|ena_intr_moder_level
block|{
name|ENA_INTR_MODER_LOWEST
init|=
literal|0
block|,
name|ENA_INTR_MODER_LOW
block|,
name|ENA_INTR_MODER_MID
block|,
name|ENA_INTR_MODER_HIGH
block|,
name|ENA_INTR_MODER_HIGHEST
block|,
name|ENA_INTR_MAX_NUM_OF_LEVELS
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ena_intr_moder_entry
block|{
name|unsigned
name|int
name|intr_moder_interval
decl_stmt|;
name|unsigned
name|int
name|pkts_per_interval
decl_stmt|;
name|unsigned
name|int
name|bytes_per_interval
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|queue_direction
block|{
name|ENA_COM_IO_QUEUE_DIRECTION_TX
block|,
name|ENA_COM_IO_QUEUE_DIRECTION_RX
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ena_com_buf
block|{
name|dma_addr_t
name|paddr
decl_stmt|;
comment|/**< Buffer physical address */
name|u16
name|len
decl_stmt|;
comment|/**< Buffer length in bytes */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_rx_buf_info
block|{
name|u16
name|len
decl_stmt|;
name|u16
name|req_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_io_desc_addr
block|{
name|u8
name|__iomem
modifier|*
name|pbuf_dev_addr
decl_stmt|;
comment|/* LLQ address */
name|u8
modifier|*
name|virt_addr
decl_stmt|;
name|dma_addr_t
name|phys_addr
decl_stmt|;
name|ena_mem_handle_t
name|mem_handle
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_tx_meta
block|{
name|u16
name|mss
decl_stmt|;
name|u16
name|l3_hdr_len
decl_stmt|;
name|u16
name|l3_hdr_offset
decl_stmt|;
name|u16
name|l4_hdr_len
decl_stmt|;
comment|/* In words */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_llq_info
block|{
name|bool
name|inline_header
decl_stmt|;
name|u16
name|desc_stride_ctrl
decl_stmt|;
name|u16
name|desc_list_entry_size
decl_stmt|;
name|u16
name|descs_num_before_header
decl_stmt|;
name|u16
name|descs_per_entry
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_io_cq
block|{
name|struct
name|ena_com_io_desc_addr
name|cdesc_addr
decl_stmt|;
name|void
modifier|*
name|bus
decl_stmt|;
comment|/* Interrupt unmask register */
name|u32
name|__iomem
modifier|*
name|unmask_reg
decl_stmt|;
comment|/* The completion queue head doorbell register */
name|u32
name|__iomem
modifier|*
name|cq_head_db_reg
decl_stmt|;
comment|/* numa configuration register (for TPH) */
name|u32
name|__iomem
modifier|*
name|numa_node_cfg_reg
decl_stmt|;
comment|/* The value to write to the above register to unmask 	 * the interrupt of this queue 	 */
name|u32
name|msix_vector
decl_stmt|;
name|enum
name|queue_direction
name|direction
decl_stmt|;
comment|/* holds the number of cdesc of the current packet */
name|u16
name|cur_rx_pkt_cdesc_count
decl_stmt|;
comment|/* save the firt cdesc idx of the current packet */
name|u16
name|cur_rx_pkt_cdesc_start_idx
decl_stmt|;
name|u16
name|q_depth
decl_stmt|;
comment|/* Caller qid */
name|u16
name|qid
decl_stmt|;
comment|/* Device queue index */
name|u16
name|idx
decl_stmt|;
name|u16
name|head
decl_stmt|;
name|u16
name|last_head_update
decl_stmt|;
name|u8
name|phase
decl_stmt|;
name|u8
name|cdesc_entry_size_in_bytes
decl_stmt|;
block|}
name|____cacheline_aligned
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_io_bounce_buffer_control
block|{
name|u8
modifier|*
name|base_buffer
decl_stmt|;
name|u16
name|next_to_use
decl_stmt|;
name|u16
name|buffer_size
decl_stmt|;
name|u16
name|buffers_num
decl_stmt|;
comment|/* Must be a power of 2 */
block|}
struct|;
end_struct

begin_comment
comment|/* This struct is to keep tracking the current location of the next llq entry */
end_comment

begin_struct
struct|struct
name|ena_com_llq_pkt_ctrl
block|{
name|u8
modifier|*
name|curr_bounce_buf
decl_stmt|;
name|u16
name|idx
decl_stmt|;
name|u16
name|descs_left_in_line
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_io_sq
block|{
name|struct
name|ena_com_io_desc_addr
name|desc_addr
decl_stmt|;
name|void
modifier|*
name|bus
decl_stmt|;
name|u32
name|__iomem
modifier|*
name|db_addr
decl_stmt|;
name|u8
name|__iomem
modifier|*
name|header_addr
decl_stmt|;
name|enum
name|queue_direction
name|direction
decl_stmt|;
name|enum
name|ena_admin_placement_policy_type
name|mem_queue_type
decl_stmt|;
name|u32
name|msix_vector
decl_stmt|;
name|struct
name|ena_com_tx_meta
name|cached_tx_meta
decl_stmt|;
name|struct
name|ena_com_llq_info
name|llq_info
decl_stmt|;
name|struct
name|ena_com_llq_pkt_ctrl
name|llq_buf_ctrl
decl_stmt|;
name|struct
name|ena_com_io_bounce_buffer_control
name|bounce_buf_ctrl
decl_stmt|;
name|u16
name|q_depth
decl_stmt|;
name|u16
name|qid
decl_stmt|;
name|u16
name|idx
decl_stmt|;
name|u16
name|tail
decl_stmt|;
name|u16
name|next_to_comp
decl_stmt|;
name|u16
name|llq_last_copy_tail
decl_stmt|;
name|u32
name|tx_max_header_size
decl_stmt|;
name|u8
name|phase
decl_stmt|;
name|u8
name|desc_entry_size
decl_stmt|;
name|u8
name|dma_addr_bits
decl_stmt|;
block|}
name|____cacheline_aligned
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_admin_cq
block|{
name|struct
name|ena_admin_acq_entry
modifier|*
name|entries
decl_stmt|;
name|ena_mem_handle_t
name|mem_handle
decl_stmt|;
name|dma_addr_t
name|dma_addr
decl_stmt|;
name|u16
name|head
decl_stmt|;
name|u8
name|phase
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_admin_sq
block|{
name|struct
name|ena_admin_aq_entry
modifier|*
name|entries
decl_stmt|;
name|ena_mem_handle_t
name|mem_handle
decl_stmt|;
name|dma_addr_t
name|dma_addr
decl_stmt|;
name|u32
name|__iomem
modifier|*
name|db_addr
decl_stmt|;
name|u16
name|head
decl_stmt|;
name|u16
name|tail
decl_stmt|;
name|u8
name|phase
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_stats_admin
block|{
name|u32
name|aborted_cmd
decl_stmt|;
name|u32
name|submitted_cmd
decl_stmt|;
name|u32
name|completed_cmd
decl_stmt|;
name|u32
name|out_of_space
decl_stmt|;
name|u32
name|no_completion
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_admin_queue
block|{
name|void
modifier|*
name|q_dmadev
decl_stmt|;
name|void
modifier|*
name|bus
decl_stmt|;
name|ena_spinlock_t
name|q_lock
decl_stmt|;
comment|/* spinlock for the admin queue */
name|struct
name|ena_comp_ctx
modifier|*
name|comp_ctx
decl_stmt|;
name|u32
name|completion_timeout
decl_stmt|;
name|u16
name|q_depth
decl_stmt|;
name|struct
name|ena_com_admin_cq
name|cq
decl_stmt|;
name|struct
name|ena_com_admin_sq
name|sq
decl_stmt|;
comment|/* Indicate if the admin queue should poll for completion */
name|bool
name|polling
decl_stmt|;
name|u16
name|curr_cmd_id
decl_stmt|;
comment|/* Indicate that the ena was initialized and can 	 * process new admin commands 	 */
name|bool
name|running_state
decl_stmt|;
comment|/* Count the number of outstanding admin commands */
name|ena_atomic32_t
name|outstanding_cmds
decl_stmt|;
name|struct
name|ena_com_stats_admin
name|stats
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|ena_aenq_handlers
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ena_com_aenq
block|{
name|u16
name|head
decl_stmt|;
name|u8
name|phase
decl_stmt|;
name|struct
name|ena_admin_aenq_entry
modifier|*
name|entries
decl_stmt|;
name|dma_addr_t
name|dma_addr
decl_stmt|;
name|ena_mem_handle_t
name|mem_handle
decl_stmt|;
name|u16
name|q_depth
decl_stmt|;
name|struct
name|ena_aenq_handlers
modifier|*
name|aenq_handlers
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_mmio_read
block|{
name|struct
name|ena_admin_ena_mmio_req_read_less_resp
modifier|*
name|read_resp
decl_stmt|;
name|dma_addr_t
name|read_resp_dma_addr
decl_stmt|;
name|ena_mem_handle_t
name|read_resp_mem_handle
decl_stmt|;
name|u32
name|reg_read_to
decl_stmt|;
comment|/* in us */
name|u16
name|seq_num
decl_stmt|;
name|bool
name|readless_supported
decl_stmt|;
comment|/* spin lock to ensure a single outstanding read */
name|ena_spinlock_t
name|lock
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_rss
block|{
comment|/* Indirect table */
name|u16
modifier|*
name|host_rss_ind_tbl
decl_stmt|;
name|struct
name|ena_admin_rss_ind_table_entry
modifier|*
name|rss_ind_tbl
decl_stmt|;
name|dma_addr_t
name|rss_ind_tbl_dma_addr
decl_stmt|;
name|ena_mem_handle_t
name|rss_ind_tbl_mem_handle
decl_stmt|;
name|u16
name|tbl_log_size
decl_stmt|;
comment|/* Hash key */
name|enum
name|ena_admin_hash_functions
name|hash_func
decl_stmt|;
name|struct
name|ena_admin_feature_rss_flow_hash_control
modifier|*
name|hash_key
decl_stmt|;
name|dma_addr_t
name|hash_key_dma_addr
decl_stmt|;
name|ena_mem_handle_t
name|hash_key_mem_handle
decl_stmt|;
name|u32
name|hash_init_val
decl_stmt|;
comment|/* Flow Control */
name|struct
name|ena_admin_feature_rss_hash_control
modifier|*
name|hash_ctrl
decl_stmt|;
name|dma_addr_t
name|hash_ctrl_dma_addr
decl_stmt|;
name|ena_mem_handle_t
name|hash_ctrl_mem_handle
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_host_attribute
block|{
comment|/* Debug area */
name|u8
modifier|*
name|debug_area_virt_addr
decl_stmt|;
name|dma_addr_t
name|debug_area_dma_addr
decl_stmt|;
name|ena_mem_handle_t
name|debug_area_dma_handle
decl_stmt|;
name|u32
name|debug_area_size
decl_stmt|;
comment|/* Host information */
name|struct
name|ena_admin_host_info
modifier|*
name|host_info
decl_stmt|;
name|dma_addr_t
name|host_info_dma_addr
decl_stmt|;
name|ena_mem_handle_t
name|host_info_dma_handle
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Each ena_dev is a PCI function. */
end_comment

begin_struct
struct|struct
name|ena_com_dev
block|{
name|struct
name|ena_com_admin_queue
name|admin_queue
decl_stmt|;
name|struct
name|ena_com_aenq
name|aenq
decl_stmt|;
name|struct
name|ena_com_io_cq
name|io_cq_queues
index|[
name|ENA_TOTAL_NUM_QUEUES
index|]
decl_stmt|;
name|struct
name|ena_com_io_sq
name|io_sq_queues
index|[
name|ENA_TOTAL_NUM_QUEUES
index|]
decl_stmt|;
name|u8
name|__iomem
modifier|*
name|reg_bar
decl_stmt|;
name|void
name|__iomem
modifier|*
name|mem_bar
decl_stmt|;
name|void
modifier|*
name|dmadev
decl_stmt|;
name|void
modifier|*
name|bus
decl_stmt|;
name|enum
name|ena_admin_placement_policy_type
name|tx_mem_queue_type
decl_stmt|;
name|u32
name|tx_max_header_size
decl_stmt|;
name|u16
name|stats_func
decl_stmt|;
comment|/* Selected function for extended statistic dump */
name|u16
name|stats_queue
decl_stmt|;
comment|/* Selected queue for extended statistic dump */
name|struct
name|ena_com_mmio_read
name|mmio_read
decl_stmt|;
name|struct
name|ena_rss
name|rss
decl_stmt|;
name|u32
name|supported_features
decl_stmt|;
name|u32
name|dma_addr_bits
decl_stmt|;
name|struct
name|ena_host_attribute
name|host_attr
decl_stmt|;
name|bool
name|adaptive_coalescing
decl_stmt|;
name|u16
name|intr_delay_resolution
decl_stmt|;
name|u32
name|intr_moder_tx_interval
decl_stmt|;
name|struct
name|ena_intr_moder_entry
modifier|*
name|intr_moder_tbl
decl_stmt|;
name|struct
name|ena_com_llq_info
name|llq_info
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_dev_get_features_ctx
block|{
name|struct
name|ena_admin_queue_feature_desc
name|max_queues
decl_stmt|;
name|struct
name|ena_admin_device_attr_feature_desc
name|dev_attr
decl_stmt|;
name|struct
name|ena_admin_feature_aenq_desc
name|aenq
decl_stmt|;
name|struct
name|ena_admin_feature_offload_desc
name|offload
decl_stmt|;
name|struct
name|ena_admin_ena_hw_hints
name|hw_hints
decl_stmt|;
name|struct
name|ena_admin_feature_llq_desc
name|llq
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_com_create_io_ctx
block|{
name|enum
name|ena_admin_placement_policy_type
name|mem_queue_type
decl_stmt|;
name|enum
name|queue_direction
name|direction
decl_stmt|;
name|int
name|numa_node
decl_stmt|;
name|u32
name|msix_vector
decl_stmt|;
name|u16
name|queue_size
decl_stmt|;
name|u16
name|qid
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|ena_aenq_handler
function_decl|)
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|struct
name|ena_admin_aenq_entry
modifier|*
name|aenq_e
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/* Holds aenq handlers. Indexed by AENQ event group */
end_comment

begin_struct
struct|struct
name|ena_aenq_handlers
block|{
name|ena_aenq_handler
name|handlers
index|[
name|ENA_MAX_HANDLERS
index|]
decl_stmt|;
name|ena_aenq_handler
name|unimplemented_handler
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*****************************************************************************/
end_comment

begin_comment
comment|/*****************************************************************************/
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* ena_com_mmio_reg_read_request_init - Init the mmio reg read mechanism  * @ena_dev: ENA communication layer struct  *  * Initialize the register read mechanism.  *  * @note: This method must be the first stage in the initialization sequence.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_mmio_reg_read_request_init
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_set_mmio_read_mode - Enable/disable the mmio reg read mechanism  * @ena_dev: ENA communication layer struct  * @readless_supported: readless mode (enable/disable)  */
name|void
name|ena_com_set_mmio_read_mode
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|bool
name|readless_supported
parameter_list|)
function_decl|;
comment|/* ena_com_mmio_reg_read_request_write_dev_addr - Write the mmio reg read return  * value physical address.  * @ena_dev: ENA communication layer struct  */
name|void
name|ena_com_mmio_reg_read_request_write_dev_addr
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_mmio_reg_read_request_destroy - Destroy the mmio reg read mechanism  * @ena_dev: ENA communication layer struct  */
name|void
name|ena_com_mmio_reg_read_request_destroy
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_admin_init - Init the admin and the async queues  * @ena_dev: ENA communication layer struct  * @aenq_handlers: Those handlers to be called upon event.  * @init_spinlock: Indicate if this method should init the admin spinlock or  * the spinlock was init before (for example, in a case of FLR).  *  * Initialize the admin submission and completion queues.  * Initialize the asynchronous events notification queues.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_admin_init
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|struct
name|ena_aenq_handlers
modifier|*
name|aenq_handlers
parameter_list|,
name|bool
name|init_spinlock
parameter_list|)
function_decl|;
comment|/* ena_com_admin_destroy - Destroy the admin and the async events queues.  * @ena_dev: ENA communication layer struct  *  * @note: Before calling this method, the caller must validate that the device  * won't send any additional admin completions/aenq.  * To achieve that, a FLR is recommended.  */
name|void
name|ena_com_admin_destroy
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_dev_reset - Perform device FLR to the device.  * @ena_dev: ENA communication layer struct  * @reset_reason: Specify what is the trigger for the reset in case of an error.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_dev_reset
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|enum
name|ena_regs_reset_reason_types
name|reset_reason
parameter_list|)
function_decl|;
comment|/* ena_com_create_io_queue - Create io queue.  * @ena_dev: ENA communication layer struct  * @ctx - create context structure  *  * Create the submission and the completion queues.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_create_io_queue
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|struct
name|ena_com_create_io_ctx
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* ena_com_destroy_io_queue - Destroy IO queue with the queue id - qid.  * @ena_dev: ENA communication layer struct  * @qid - the caller virtual queue id.  */
name|void
name|ena_com_destroy_io_queue
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u16
name|qid
parameter_list|)
function_decl|;
comment|/* ena_com_get_io_handlers - Return the io queue handlers  * @ena_dev: ENA communication layer struct  * @qid - the caller virtual queue id.  * @io_sq - IO submission queue handler  * @io_cq - IO completion queue handler.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_get_io_handlers
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u16
name|qid
parameter_list|,
name|struct
name|ena_com_io_sq
modifier|*
modifier|*
name|io_sq
parameter_list|,
name|struct
name|ena_com_io_cq
modifier|*
modifier|*
name|io_cq
parameter_list|)
function_decl|;
comment|/* ena_com_admin_aenq_enable - ENAble asynchronous event notifications  * @ena_dev: ENA communication layer struct  *  * After this method, aenq event can be received via AENQ.  */
name|void
name|ena_com_admin_aenq_enable
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_set_admin_running_state - Set the state of the admin queue  * @ena_dev: ENA communication layer struct  *  * Change the state of the admin queue (enable/disable)  */
name|void
name|ena_com_set_admin_running_state
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|bool
name|state
parameter_list|)
function_decl|;
comment|/* ena_com_get_admin_running_state - Get the admin queue state  * @ena_dev: ENA communication layer struct  *  * Retrieve the state of the admin queue (enable/disable)  *  * @return - current polling mode (enable/disable)  */
name|bool
name|ena_com_get_admin_running_state
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_set_admin_polling_mode - Set the admin completion queue polling mode  * @ena_dev: ENA communication layer struct  * @polling: ENAble/Disable polling mode  *  * Set the admin completion mode.  */
name|void
name|ena_com_set_admin_polling_mode
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|bool
name|polling
parameter_list|)
function_decl|;
comment|/* ena_com_set_admin_polling_mode - Get the admin completion queue polling mode  * @ena_dev: ENA communication layer struct  *  * Get the admin completion mode.  * If polling mode is on, ena_com_execute_admin_command will perform a  * polling on the admin completion queue for the commands completion,  * otherwise it will wait on wait event.  *  * @return state  */
name|bool
name|ena_com_get_ena_admin_polling_mode
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_admin_q_comp_intr_handler - admin queue interrupt handler  * @ena_dev: ENA communication layer struct  *  * This method go over the admin completion queue and wake up all the pending  * threads that wait on the commands wait event.  *  * @note: Should be called after MSI-X interrupt.  */
name|void
name|ena_com_admin_q_comp_intr_handler
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_aenq_intr_handler - AENQ interrupt handler  * @ena_dev: ENA communication layer struct  *  * This method go over the async event notification queue and call the proper  * aenq handler.  */
name|void
name|ena_com_aenq_intr_handler
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|dev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
comment|/* ena_com_abort_admin_commands - Abort all the outstanding admin commands.  * @ena_dev: ENA communication layer struct  *  * This method aborts all the outstanding admin commands.  * The caller should then call ena_com_wait_for_abort_completion to make sure  * all the commands were completed.  */
name|void
name|ena_com_abort_admin_commands
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_wait_for_abort_completion - Wait for admin commands abort.  * @ena_dev: ENA communication layer struct  *  * This method wait until all the outstanding admin commands will be completed.  */
name|void
name|ena_com_wait_for_abort_completion
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_validate_version - Validate the device parameters  * @ena_dev: ENA communication layer struct  *  * This method validate the device parameters are the same as the saved  * parameters in ena_dev.  * This method is useful after device reset, to validate the device mac address  * and the device offloads are the same as before the reset.  *  * @return - 0 on success negative value otherwise.  */
name|int
name|ena_com_validate_version
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_get_link_params - Retrieve physical link parameters.  * @ena_dev: ENA communication layer struct  * @resp: Link parameters  *  * Retrieve the physical link parameters,  * like speed, auto-negotiation and full duplex support.  *  * @return - 0 on Success negative value otherwise.  */
name|int
name|ena_com_get_link_params
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|struct
name|ena_admin_get_feat_resp
modifier|*
name|resp
parameter_list|)
function_decl|;
comment|/* ena_com_get_dma_width - Retrieve physical dma address width the device  * supports.  * @ena_dev: ENA communication layer struct  *  * Retrieve the maximum physical address bits the device can handle.  *  * @return:> 0 on Success and negative value otherwise.  */
name|int
name|ena_com_get_dma_width
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_set_aenq_config - Set aenq groups configurations  * @ena_dev: ENA communication layer struct  * @groups flag: bit fields flags of enum ena_admin_aenq_group.  *  * Configure which aenq event group the driver would like to receive.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_set_aenq_config
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u32
name|groups_flag
parameter_list|)
function_decl|;
comment|/* ena_com_get_dev_attr_feat - Get device features  * @ena_dev: ENA communication layer struct  * @get_feat_ctx: returned context that contain the get features.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_get_dev_attr_feat
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|struct
name|ena_com_dev_get_features_ctx
modifier|*
name|get_feat_ctx
parameter_list|)
function_decl|;
comment|/* ena_com_get_dev_basic_stats - Get device basic statistics  * @ena_dev: ENA communication layer struct  * @stats: stats return value  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_get_dev_basic_stats
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|struct
name|ena_admin_basic_stats
modifier|*
name|stats
parameter_list|)
function_decl|;
comment|/* ena_com_set_dev_mtu - Configure the device mtu.  * @ena_dev: ENA communication layer struct  * @mtu: mtu value  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_set_dev_mtu
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|int
name|mtu
parameter_list|)
function_decl|;
comment|/* ena_com_get_offload_settings - Retrieve the device offloads capabilities  * @ena_dev: ENA communication layer struct  * @offlad: offload return value  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_get_offload_settings
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|offload
parameter_list|)
function_decl|;
comment|/* ena_com_rss_init - Init RSS  * @ena_dev: ENA communication layer struct  * @log_size: indirection log size  *  * Allocate RSS/RFS resources.  * The caller then can configure rss using ena_com_set_hash_function,  * ena_com_set_hash_ctrl and ena_com_indirect_table_set.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_rss_init
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u16
name|log_size
parameter_list|)
function_decl|;
comment|/* ena_com_rss_destroy - Destroy rss  * @ena_dev: ENA communication layer struct  *  * Free all the RSS/RFS resources.  */
name|void
name|ena_com_rss_destroy
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_fill_hash_function - Fill RSS hash function  * @ena_dev: ENA communication layer struct  * @func: The hash function (Toeplitz or crc)  * @key: Hash key (for toeplitz hash)  * @key_len: key length (max length 10 DW)  * @init_val: initial value for the hash function  *  * Fill the ena_dev resources with the desire hash function, hash key, key_len  * and key initial value (if needed by the hash function).  * To flush the key into the device the caller should call  * ena_com_set_hash_function.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_fill_hash_function
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|enum
name|ena_admin_hash_functions
name|func
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|u16
name|key_len
parameter_list|,
name|u32
name|init_val
parameter_list|)
function_decl|;
comment|/* ena_com_set_hash_function - Flush the hash function and it dependencies to  * the device.  * @ena_dev: ENA communication layer struct  *  * Flush the hash function and it dependencies (key, key length and  * initial value) if needed.  *  * @note: Prior to this method the caller should call ena_com_fill_hash_function  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_set_hash_function
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_get_hash_function - Retrieve the hash function and the hash key  * from the device.  * @ena_dev: ENA communication layer struct  * @func: hash function  * @key: hash key  *  * Retrieve the hash function and the hash key from the device.  *  * @note: If the caller called ena_com_fill_hash_function but didn't flash  * it to the device, the new configuration will be lost.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_get_hash_function
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|enum
name|ena_admin_hash_functions
modifier|*
name|func
parameter_list|,
name|u8
modifier|*
name|key
parameter_list|)
function_decl|;
comment|/* ena_com_fill_hash_ctrl - Fill RSS hash control  * @ena_dev: ENA communication layer struct.  * @proto: The protocol to configure.  * @hash_fields: bit mask of ena_admin_flow_hash_fields  *  * Fill the ena_dev resources with the desire hash control (the ethernet  * fields that take part of the hash) for a specific protocol.  * To flush the hash control to the device, the caller should call  * ena_com_set_hash_ctrl.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_fill_hash_ctrl
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|enum
name|ena_admin_flow_hash_proto
name|proto
parameter_list|,
name|u16
name|hash_fields
parameter_list|)
function_decl|;
comment|/* ena_com_set_hash_ctrl - Flush the hash control resources to the device.  * @ena_dev: ENA communication layer struct  *  * Flush the hash control (the ethernet fields that take part of the hash)  *  * @note: Prior to this method the caller should call ena_com_fill_hash_ctrl.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_set_hash_ctrl
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_get_hash_ctrl - Retrieve the hash control from the device.  * @ena_dev: ENA communication layer struct  * @proto: The protocol to retrieve.  * @fields: bit mask of ena_admin_flow_hash_fields.  *  * Retrieve the hash control from the device.  *  * @note, If the caller called ena_com_fill_hash_ctrl but didn't flash  * it to the device, the new configuration will be lost.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_get_hash_ctrl
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|enum
name|ena_admin_flow_hash_proto
name|proto
parameter_list|,
name|u16
modifier|*
name|fields
parameter_list|)
function_decl|;
comment|/* ena_com_set_default_hash_ctrl - Set the hash control to a default  * configuration.  * @ena_dev: ENA communication layer struct  *  * Fill the ena_dev resources with the default hash control configuration.  * To flush the hash control to the device, the caller should call  * ena_com_set_hash_ctrl.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_set_default_hash_ctrl
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_indirect_table_fill_entry - Fill a single entry in the RSS  * indirection table  * @ena_dev: ENA communication layer struct.  * @entry_idx - indirection table entry.  * @entry_value - redirection value  *  * Fill a single entry of the RSS indirection table in the ena_dev resources.  * To flush the indirection table to the device, the called should call  * ena_com_indirect_table_set.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_indirect_table_fill_entry
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u16
name|entry_idx
parameter_list|,
name|u16
name|entry_value
parameter_list|)
function_decl|;
comment|/* ena_com_indirect_table_set - Flush the indirection table to the device.  * @ena_dev: ENA communication layer struct  *  * Flush the indirection hash control to the device.  * Prior to this method the caller should call ena_com_indirect_table_fill_entry  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_indirect_table_set
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_indirect_table_get - Retrieve the indirection table from the device.  * @ena_dev: ENA communication layer struct  * @ind_tbl: indirection table  *  * Retrieve the RSS indirection table from the device.  *  * @note: If the caller called ena_com_indirect_table_fill_entry but didn't flash  * it to the device, the new configuration will be lost.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_indirect_table_get
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u32
modifier|*
name|ind_tbl
parameter_list|)
function_decl|;
comment|/* ena_com_allocate_host_info - Allocate host info resources.  * @ena_dev: ENA communication layer struct  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_allocate_host_info
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_allocate_debug_area - Allocate debug area.  * @ena_dev: ENA communication layer struct  * @debug_area_size - debug area size.  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_allocate_debug_area
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u32
name|debug_area_size
parameter_list|)
function_decl|;
comment|/* ena_com_delete_debug_area - Free the debug area resources.  * @ena_dev: ENA communication layer struct  *  * Free the allocate debug area.  */
name|void
name|ena_com_delete_debug_area
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_delete_host_info - Free the host info resources.  * @ena_dev: ENA communication layer struct  *  * Free the allocate host info.  */
name|void
name|ena_com_delete_host_info
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_set_host_attributes - Update the device with the host  * attributes (debug area and host info) base address.  * @ena_dev: ENA communication layer struct  *  * @return: 0 on Success and negative value otherwise.  */
name|int
name|ena_com_set_host_attributes
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_create_io_cq - Create io completion queue.  * @ena_dev: ENA communication layer struct  * @io_cq - io completion queue handler   * Create IO completion queue.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_create_io_cq
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|struct
name|ena_com_io_cq
modifier|*
name|io_cq
parameter_list|)
function_decl|;
comment|/* ena_com_destroy_io_cq - Destroy io completion queue.  * @ena_dev: ENA communication layer struct  * @io_cq - io completion queue handler   * Destroy IO completion queue.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_destroy_io_cq
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|struct
name|ena_com_io_cq
modifier|*
name|io_cq
parameter_list|)
function_decl|;
comment|/* ena_com_execute_admin_command - Execute admin command  * @admin_queue: admin queue.  * @cmd: the admin command to execute.  * @cmd_size: the command size.  * @cmd_completion: command completion return value.  * @cmd_comp_size: command completion size.   * Submit an admin command and then wait until the device will return a  * completion.  * The completion will be copyed into cmd_comp.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_execute_admin_command
parameter_list|(
name|struct
name|ena_com_admin_queue
modifier|*
name|admin_queue
parameter_list|,
name|struct
name|ena_admin_aq_entry
modifier|*
name|cmd
parameter_list|,
name|size_t
name|cmd_size
parameter_list|,
name|struct
name|ena_admin_acq_entry
modifier|*
name|cmd_comp
parameter_list|,
name|size_t
name|cmd_comp_size
parameter_list|)
function_decl|;
comment|/* ena_com_init_interrupt_moderation - Init interrupt moderation  * @ena_dev: ENA communication layer struct  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_init_interrupt_moderation
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_destroy_interrupt_moderation - Destroy interrupt moderation resources  * @ena_dev: ENA communication layer struct  */
name|void
name|ena_com_destroy_interrupt_moderation
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_interrupt_moderation_supported - Return if interrupt moderation  * capability is supported by the device.  *  * @return - supported or not.  */
name|bool
name|ena_com_interrupt_moderation_supported
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_config_default_interrupt_moderation_table - Restore the interrupt  * moderation table back to the default parameters.  * @ena_dev: ENA communication layer struct  */
name|void
name|ena_com_config_default_interrupt_moderation_table
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_update_nonadaptive_moderation_interval_tx - Update the  * non-adaptive interval in Tx direction.  * @ena_dev: ENA communication layer struct  * @tx_coalesce_usecs: Interval in usec.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_update_nonadaptive_moderation_interval_tx
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u32
name|tx_coalesce_usecs
parameter_list|)
function_decl|;
comment|/* ena_com_update_nonadaptive_moderation_interval_rx - Update the  * non-adaptive interval in Rx direction.  * @ena_dev: ENA communication layer struct  * @rx_coalesce_usecs: Interval in usec.  *  * @return - 0 on success, negative value on failure.  */
name|int
name|ena_com_update_nonadaptive_moderation_interval_rx
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u32
name|rx_coalesce_usecs
parameter_list|)
function_decl|;
comment|/* ena_com_get_nonadaptive_moderation_interval_tx - Retrieve the  * non-adaptive interval in Tx direction.  * @ena_dev: ENA communication layer struct  *  * @return - interval in usec  */
name|unsigned
name|int
name|ena_com_get_nonadaptive_moderation_interval_tx
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_get_nonadaptive_moderation_interval_rx - Retrieve the  * non-adaptive interval in Rx direction.  * @ena_dev: ENA communication layer struct  *  * @return - interval in usec  */
name|unsigned
name|int
name|ena_com_get_nonadaptive_moderation_interval_rx
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
function_decl|;
comment|/* ena_com_init_intr_moderation_entry - Update a single entry in the interrupt  * moderation table.  * @ena_dev: ENA communication layer struct  * @level: Interrupt moderation table level  * @entry: Entry value  *  * Update a single entry in the interrupt moderation table.  */
name|void
name|ena_com_init_intr_moderation_entry
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|enum
name|ena_intr_moder_level
name|level
parameter_list|,
name|struct
name|ena_intr_moder_entry
modifier|*
name|entry
parameter_list|)
function_decl|;
comment|/* ena_com_get_intr_moderation_entry - Init ena_intr_moder_entry.  * @ena_dev: ENA communication layer struct  * @level: Interrupt moderation table level  * @entry: Entry to fill.  *  * Initialize the entry according to the adaptive interrupt moderation table.  */
name|void
name|ena_com_get_intr_moderation_entry
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|enum
name|ena_intr_moder_level
name|level
parameter_list|,
name|struct
name|ena_intr_moder_entry
modifier|*
name|entry
parameter_list|)
function_decl|;
comment|/* ena_com_config_dev_mode - Configure the placement policy of the device.  * @ena_dev: ENA communication layer struct  * @llq: LLQ feature descriptor, retrieve via ena_com_get_dev_attr_feat.  *  */
name|int
name|ena_com_config_dev_mode
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|struct
name|ena_admin_feature_llq_desc
modifier|*
name|llq
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|bool
name|ena_com_get_adaptive_moderation_enabled
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
block|{
return|return
name|ena_dev
operator|->
name|adaptive_coalescing
return|;
block|}
specifier|static
specifier|inline
name|void
name|ena_com_enable_adaptive_moderation
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
block|{
name|ena_dev
operator|->
name|adaptive_coalescing
operator|=
name|true
expr_stmt|;
block|}
specifier|static
specifier|inline
name|void
name|ena_com_disable_adaptive_moderation
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|)
block|{
name|ena_dev
operator|->
name|adaptive_coalescing
operator|=
name|false
expr_stmt|;
block|}
comment|/* ena_com_calculate_interrupt_delay - Calculate new interrupt delay  * @ena_dev: ENA communication layer struct  * @pkts: Number of packets since the last update  * @bytes: Number of bytes received since the last update.  * @smoothed_interval: Returned interval  * @moder_tbl_idx: Current table level as input update new level as return  * value.  */
specifier|static
specifier|inline
name|void
name|ena_com_calculate_interrupt_delay
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|unsigned
name|int
name|pkts
parameter_list|,
name|unsigned
name|int
name|bytes
parameter_list|,
name|unsigned
name|int
modifier|*
name|smoothed_interval
parameter_list|,
name|unsigned
name|int
modifier|*
name|moder_tbl_idx
parameter_list|)
block|{
name|enum
name|ena_intr_moder_level
name|curr_moder_idx
decl_stmt|,
name|new_moder_idx
decl_stmt|;
name|struct
name|ena_intr_moder_entry
modifier|*
name|curr_moder_entry
decl_stmt|;
name|struct
name|ena_intr_moder_entry
modifier|*
name|pred_moder_entry
decl_stmt|;
name|struct
name|ena_intr_moder_entry
modifier|*
name|new_moder_entry
decl_stmt|;
name|struct
name|ena_intr_moder_entry
modifier|*
name|intr_moder_tbl
init|=
name|ena_dev
operator|->
name|intr_moder_tbl
decl_stmt|;
name|unsigned
name|int
name|interval
decl_stmt|;
comment|/* We apply adaptive moderation on Rx path only. 	 * Tx uses static interrupt moderation. 	 */
if|if
condition|(
operator|!
name|pkts
operator|||
operator|!
name|bytes
condition|)
comment|/* Tx interrupt, or spurious interrupt, 		 * in both cases we just use same delay values 		 */
return|return;
name|curr_moder_idx
operator|=
operator|(
expr|enum
name|ena_intr_moder_level
operator|)
operator|(
operator|*
name|moder_tbl_idx
operator|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|curr_moder_idx
operator|>=
name|ENA_INTR_MAX_NUM_OF_LEVELS
argument_list|)
condition|)
block|{
name|ena_trc_err
argument_list|(
literal|"Wrong moderation index %u\n"
argument_list|,
name|curr_moder_idx
argument_list|)
expr_stmt|;
return|return;
block|}
name|curr_moder_entry
operator|=
operator|&
name|intr_moder_tbl
index|[
name|curr_moder_idx
index|]
expr_stmt|;
name|new_moder_idx
operator|=
name|curr_moder_idx
expr_stmt|;
if|if
condition|(
name|curr_moder_idx
operator|==
name|ENA_INTR_MODER_LOWEST
condition|)
block|{
if|if
condition|(
operator|(
name|pkts
operator|>
name|curr_moder_entry
operator|->
name|pkts_per_interval
operator|)
operator|||
operator|(
name|bytes
operator|>
name|curr_moder_entry
operator|->
name|bytes_per_interval
operator|)
condition|)
name|new_moder_idx
operator|=
operator|(
expr|enum
name|ena_intr_moder_level
operator|)
operator|(
name|curr_moder_idx
operator|+
name|ENA_INTR_MODER_LEVEL_STRIDE
operator|)
expr_stmt|;
block|}
else|else
block|{
name|pred_moder_entry
operator|=
operator|&
name|intr_moder_tbl
index|[
name|curr_moder_idx
operator|-
name|ENA_INTR_MODER_LEVEL_STRIDE
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|pkts
operator|<=
name|pred_moder_entry
operator|->
name|pkts_per_interval
operator|)
operator|||
operator|(
name|bytes
operator|<=
name|pred_moder_entry
operator|->
name|bytes_per_interval
operator|)
condition|)
name|new_moder_idx
operator|=
operator|(
expr|enum
name|ena_intr_moder_level
operator|)
operator|(
name|curr_moder_idx
operator|-
name|ENA_INTR_MODER_LEVEL_STRIDE
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|pkts
operator|>
name|curr_moder_entry
operator|->
name|pkts_per_interval
operator|)
operator|||
operator|(
name|bytes
operator|>
name|curr_moder_entry
operator|->
name|bytes_per_interval
operator|)
condition|)
block|{
if|if
condition|(
name|curr_moder_idx
operator|!=
name|ENA_INTR_MODER_HIGHEST
condition|)
name|new_moder_idx
operator|=
operator|(
expr|enum
name|ena_intr_moder_level
operator|)
operator|(
name|curr_moder_idx
operator|+
name|ENA_INTR_MODER_LEVEL_STRIDE
operator|)
expr_stmt|;
block|}
block|}
name|new_moder_entry
operator|=
operator|&
name|intr_moder_tbl
index|[
name|new_moder_idx
index|]
expr_stmt|;
name|interval
operator|=
name|new_moder_entry
operator|->
name|intr_moder_interval
expr_stmt|;
operator|*
name|smoothed_interval
operator|=
operator|(
operator|(
name|interval
operator|*
name|ENA_INTR_DELAY_NEW_VALUE_WEIGHT
operator|+
name|ENA_INTR_DELAY_OLD_VALUE_WEIGHT
operator|*
operator|(
operator|*
name|smoothed_interval
operator|)
operator|)
operator|+
literal|5
operator|)
operator|/
literal|10
expr_stmt|;
operator|*
name|moder_tbl_idx
operator|=
name|new_moder_idx
expr_stmt|;
block|}
comment|/* ena_com_update_intr_reg - Prepare interrupt register  * @intr_reg: interrupt register to update.  * @rx_delay_interval: Rx interval in usecs  * @tx_delay_interval: Tx interval in usecs  * @unmask: unask enable/disable  *  * Prepare interrupt update register with the supplied parameters.  */
specifier|static
specifier|inline
name|void
name|ena_com_update_intr_reg
parameter_list|(
name|struct
name|ena_eth_io_intr_reg
modifier|*
name|intr_reg
parameter_list|,
name|u32
name|rx_delay_interval
parameter_list|,
name|u32
name|tx_delay_interval
parameter_list|,
name|bool
name|unmask
parameter_list|)
block|{
name|intr_reg
operator|->
name|intr_control
operator|=
literal|0
expr_stmt|;
name|intr_reg
operator|->
name|intr_control
operator||=
name|rx_delay_interval
operator|&
name|ENA_ETH_IO_INTR_REG_RX_INTR_DELAY_MASK
expr_stmt|;
name|intr_reg
operator|->
name|intr_control
operator||=
operator|(
name|tx_delay_interval
operator|<<
name|ENA_ETH_IO_INTR_REG_TX_INTR_DELAY_SHIFT
operator|)
operator|&
name|ENA_ETH_IO_INTR_REG_TX_INTR_DELAY_MASK
expr_stmt|;
if|if
condition|(
name|unmask
condition|)
name|intr_reg
operator|->
name|intr_control
operator||=
name|ENA_ETH_IO_INTR_REG_INTR_UNMASK_MASK
expr_stmt|;
block|}
specifier|static
specifier|inline
name|u8
modifier|*
name|ena_com_get_next_bounce_buffer
parameter_list|(
name|struct
name|ena_com_io_bounce_buffer_control
modifier|*
name|bounce_buf_ctrl
parameter_list|)
block|{
name|u16
name|size
decl_stmt|,
name|buffers_num
decl_stmt|;
name|u8
modifier|*
name|buf
decl_stmt|;
name|size
operator|=
name|bounce_buf_ctrl
operator|->
name|buffer_size
expr_stmt|;
name|buffers_num
operator|=
name|bounce_buf_ctrl
operator|->
name|buffers_num
expr_stmt|;
name|buf
operator|=
name|bounce_buf_ctrl
operator|->
name|base_buffer
operator|+
operator|(
name|bounce_buf_ctrl
operator|->
name|next_to_use
operator|++
operator|&
operator|(
name|buffers_num
operator|-
literal|1
operator|)
operator|)
operator|*
name|size
expr_stmt|;
name|prefetch
argument_list|(
name|bounce_buf_ctrl
operator|->
name|base_buffer
operator|+
operator|(
name|bounce_buf_ctrl
operator|->
name|next_to_use
operator|&
operator|(
name|buffers_num
operator|-
literal|1
operator|)
operator|)
operator|*
name|size
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
ifdef|#
directive|ifdef
name|ENA_EXTENDED_STATS
name|int
name|ena_com_get_dev_extended_stats
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|char
modifier|*
name|buff
parameter_list|,
name|u32
name|len
parameter_list|)
function_decl|;
name|int
name|ena_com_extended_stats_set_func_queue
parameter_list|(
name|struct
name|ena_com_dev
modifier|*
name|ena_dev
parameter_list|,
name|u32
name|funct_queue
parameter_list|)
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !(ENA_COM) */
end_comment

end_unit

