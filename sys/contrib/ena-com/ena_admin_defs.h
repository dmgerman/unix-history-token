begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * BSD LICENSE  *  * Copyright (c) 2015-2017 Amazon.com, Inc. or its affiliates.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * * Redistributions of source code must retain the above copyright  * notice, this list of conditions and the following disclaimer.  * * Redistributions in binary form must reproduce the above copyright  * notice, this list of conditions and the following disclaimer in  * the documentation and/or other materials provided with the  * distribution.  * * Neither the name of copyright holder nor the names of its  * contributors may be used to endorse or promote products derived  * from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ENA_ADMIN_H_
end_ifndef

begin_define
define|#
directive|define
name|_ENA_ADMIN_H_
end_define

begin_enum
enum|enum
name|ena_admin_aq_opcode
block|{
name|ENA_ADMIN_CREATE_SQ
init|=
literal|1
block|,
name|ENA_ADMIN_DESTROY_SQ
init|=
literal|2
block|,
name|ENA_ADMIN_CREATE_CQ
init|=
literal|3
block|,
name|ENA_ADMIN_DESTROY_CQ
init|=
literal|4
block|,
name|ENA_ADMIN_GET_FEATURE
init|=
literal|8
block|,
name|ENA_ADMIN_SET_FEATURE
init|=
literal|9
block|,
name|ENA_ADMIN_GET_STATS
init|=
literal|11
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ena_admin_aq_completion_status
block|{
name|ENA_ADMIN_SUCCESS
init|=
literal|0
block|,
name|ENA_ADMIN_RESOURCE_ALLOCATION_FAILURE
init|=
literal|1
block|,
name|ENA_ADMIN_BAD_OPCODE
init|=
literal|2
block|,
name|ENA_ADMIN_UNSUPPORTED_OPCODE
init|=
literal|3
block|,
name|ENA_ADMIN_MALFORMED_REQUEST
init|=
literal|4
block|,
comment|/* Additional status is provided in ACQ entry extended_status */
name|ENA_ADMIN_ILLEGAL_PARAMETER
init|=
literal|5
block|,
name|ENA_ADMIN_UNKNOWN_ERROR
init|=
literal|6
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ena_admin_aq_feature_id
block|{
name|ENA_ADMIN_DEVICE_ATTRIBUTES
init|=
literal|1
block|,
name|ENA_ADMIN_MAX_QUEUES_NUM
init|=
literal|2
block|,
name|ENA_ADMIN_HW_HINTS
init|=
literal|3
block|,
name|ENA_ADMIN_RSS_HASH_FUNCTION
init|=
literal|10
block|,
name|ENA_ADMIN_STATELESS_OFFLOAD_CONFIG
init|=
literal|11
block|,
name|ENA_ADMIN_RSS_REDIRECTION_TABLE_CONFIG
init|=
literal|12
block|,
name|ENA_ADMIN_MTU
init|=
literal|14
block|,
name|ENA_ADMIN_RSS_HASH_INPUT
init|=
literal|18
block|,
name|ENA_ADMIN_INTERRUPT_MODERATION
init|=
literal|20
block|,
name|ENA_ADMIN_AENQ_CONFIG
init|=
literal|26
block|,
name|ENA_ADMIN_LINK_CONFIG
init|=
literal|27
block|,
name|ENA_ADMIN_HOST_ATTR_CONFIG
init|=
literal|28
block|,
name|ENA_ADMIN_FEATURES_OPCODE_NUM
init|=
literal|32
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ena_admin_placement_policy_type
block|{
comment|/* descriptors and headers are in host memory */
name|ENA_ADMIN_PLACEMENT_POLICY_HOST
init|=
literal|1
block|,
comment|/* descriptors and headers are in device memory (a.k.a Low Latency 	 * Queue) 	 */
name|ENA_ADMIN_PLACEMENT_POLICY_DEV
init|=
literal|3
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ena_admin_link_types
block|{
name|ENA_ADMIN_LINK_SPEED_1G
init|=
literal|0x1
block|,
name|ENA_ADMIN_LINK_SPEED_2_HALF_G
init|=
literal|0x2
block|,
name|ENA_ADMIN_LINK_SPEED_5G
init|=
literal|0x4
block|,
name|ENA_ADMIN_LINK_SPEED_10G
init|=
literal|0x8
block|,
name|ENA_ADMIN_LINK_SPEED_25G
init|=
literal|0x10
block|,
name|ENA_ADMIN_LINK_SPEED_40G
init|=
literal|0x20
block|,
name|ENA_ADMIN_LINK_SPEED_50G
init|=
literal|0x40
block|,
name|ENA_ADMIN_LINK_SPEED_100G
init|=
literal|0x80
block|,
name|ENA_ADMIN_LINK_SPEED_200G
init|=
literal|0x100
block|,
name|ENA_ADMIN_LINK_SPEED_400G
init|=
literal|0x200
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ena_admin_completion_policy_type
block|{
comment|/* completion queue entry for each sq descriptor */
name|ENA_ADMIN_COMPLETION_POLICY_DESC
init|=
literal|0
block|,
comment|/* completion queue entry upon request in sq descriptor */
name|ENA_ADMIN_COMPLETION_POLICY_DESC_ON_DEMAND
init|=
literal|1
block|,
comment|/* current queue head pointer is updated in OS memory upon sq 	 * descriptor request 	 */
name|ENA_ADMIN_COMPLETION_POLICY_HEAD_ON_DEMAND
init|=
literal|2
block|,
comment|/* current queue head pointer is updated in OS memory for each sq 	 * descriptor 	 */
name|ENA_ADMIN_COMPLETION_POLICY_HEAD
init|=
literal|3
block|, }
enum|;
end_enum

begin_comment
comment|/* basic stats return ena_admin_basic_stats while extanded stats return a  * buffer (string format) with additional statistics per queue and per  * device id  */
end_comment

begin_enum
enum|enum
name|ena_admin_get_stats_type
block|{
name|ENA_ADMIN_GET_STATS_TYPE_BASIC
init|=
literal|0
block|,
name|ENA_ADMIN_GET_STATS_TYPE_EXTENDED
init|=
literal|1
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ena_admin_get_stats_scope
block|{
name|ENA_ADMIN_SPECIFIC_QUEUE
init|=
literal|0
block|,
name|ENA_ADMIN_ETH_TRAFFIC
init|=
literal|1
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ena_admin_aq_common_desc
block|{
comment|/* 11:0 : command_id 	 * 15:12 : reserved12 	 */
name|uint16_t
name|command_id
decl_stmt|;
comment|/* as appears in ena_admin_aq_opcode */
name|uint8_t
name|opcode
decl_stmt|;
comment|/* 0 : phase 	 * 1 : ctrl_data - control buffer address valid 	 * 2 : ctrl_data_indirect - control buffer address 	 *    points to list of pages with addresses of control 	 *    buffers 	 * 7:3 : reserved3 	 */
name|uint8_t
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* used in ena_admin_aq_entry. Can point directly to control data, or to a  * page list chunk. Used also at the end of indirect mode page list chunks,  * for chaining.  */
end_comment

begin_struct
struct|struct
name|ena_admin_ctrl_buff_info
block|{
name|uint32_t
name|length
decl_stmt|;
name|struct
name|ena_common_mem_addr
name|address
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_sq
block|{
name|uint16_t
name|sq_idx
decl_stmt|;
comment|/* 4:0 : reserved 	 * 7:5 : sq_direction - 0x1 - Tx; 0x2 - Rx 	 */
name|uint8_t
name|sq_identity
decl_stmt|;
name|uint8_t
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_aq_entry
block|{
name|struct
name|ena_admin_aq_common_desc
name|aq_common_descriptor
decl_stmt|;
union|union
block|{
name|uint32_t
name|inline_data_w1
index|[
literal|3
index|]
decl_stmt|;
name|struct
name|ena_admin_ctrl_buff_info
name|control_buffer
decl_stmt|;
block|}
name|u
union|;
name|uint32_t
name|inline_data_w4
index|[
literal|12
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_acq_common_desc
block|{
comment|/* command identifier to associate it with the aq descriptor 	 * 11:0 : command_id 	 * 15:12 : reserved12 	 */
name|uint16_t
name|command
decl_stmt|;
name|uint8_t
name|status
decl_stmt|;
comment|/* 0 : phase 	 * 7:1 : reserved1 	 */
name|uint8_t
name|flags
decl_stmt|;
name|uint16_t
name|extended_status
decl_stmt|;
comment|/* serves as a hint what AQ entries can be revoked */
name|uint16_t
name|sq_head_indx
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_acq_entry
block|{
name|struct
name|ena_admin_acq_common_desc
name|acq_common_descriptor
decl_stmt|;
name|uint32_t
name|response_specific_data
index|[
literal|14
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_aq_create_sq_cmd
block|{
name|struct
name|ena_admin_aq_common_desc
name|aq_common_descriptor
decl_stmt|;
comment|/* 4:0 : reserved0_w1 	 * 7:5 : sq_direction - 0x1 - Tx, 0x2 - Rx 	 */
name|uint8_t
name|sq_identity
decl_stmt|;
name|uint8_t
name|reserved8_w1
decl_stmt|;
comment|/* 3:0 : placement_policy - Describing where the SQ 	 *    descriptor ring and the SQ packet headers reside: 	 *    0x1 - descriptors and headers are in OS memory, 	 *    0x3 - descriptors and headers in device memory 	 *    (a.k.a Low Latency Queue) 	 * 6:4 : completion_policy - Describing what policy 	 *    to use for generation completion entry (cqe) in 	 *    the CQ associated with this SQ: 0x0 - cqe for each 	 *    sq descriptor, 0x1 - cqe upon request in sq 	 *    descriptor, 0x2 - current queue head pointer is 	 *    updated in OS memory upon sq descriptor request 	 *    0x3 - current queue head pointer is updated in OS 	 *    memory for each sq descriptor 	 * 7 : reserved15_w1 	 */
name|uint8_t
name|sq_caps_2
decl_stmt|;
comment|/* 0 : is_physically_contiguous - Described if the 	 *    queue ring memory is allocated in physical 	 *    contiguous pages or split. 	 * 7:1 : reserved17_w1 	 */
name|uint8_t
name|sq_caps_3
decl_stmt|;
comment|/* associated completion queue id. This CQ must be created prior to 	 *    SQ creation 	 */
name|uint16_t
name|cq_idx
decl_stmt|;
comment|/* submission queue depth in entries */
name|uint16_t
name|sq_depth
decl_stmt|;
comment|/* SQ physical base address in OS memory. This field should not be 	 * used for Low Latency queues. Has to be page aligned. 	 */
name|struct
name|ena_common_mem_addr
name|sq_ba
decl_stmt|;
comment|/* specifies queue head writeback location in OS memory. Valid if 	 * completion_policy is set to completion_policy_head_on_demand or 	 * completion_policy_head. Has to be cache aligned 	 */
name|struct
name|ena_common_mem_addr
name|sq_head_writeback
decl_stmt|;
name|uint32_t
name|reserved0_w7
decl_stmt|;
name|uint32_t
name|reserved0_w8
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ena_admin_sq_direction
block|{
name|ENA_ADMIN_SQ_DIRECTION_TX
init|=
literal|1
block|,
name|ENA_ADMIN_SQ_DIRECTION_RX
init|=
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ena_admin_acq_create_sq_resp_desc
block|{
name|struct
name|ena_admin_acq_common_desc
name|acq_common_desc
decl_stmt|;
name|uint16_t
name|sq_idx
decl_stmt|;
name|uint16_t
name|reserved
decl_stmt|;
comment|/* queue doorbell address as an offset to PCIe MMIO REG BAR */
name|uint32_t
name|sq_doorbell_offset
decl_stmt|;
comment|/* low latency queue ring base address as an offset to PCIe MMIO 	 * LLQ_MEM BAR 	 */
name|uint32_t
name|llq_descriptors_offset
decl_stmt|;
comment|/* low latency queue headers' memory as an offset to PCIe MMIO 	 * LLQ_MEM BAR 	 */
name|uint32_t
name|llq_headers_offset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_aq_destroy_sq_cmd
block|{
name|struct
name|ena_admin_aq_common_desc
name|aq_common_descriptor
decl_stmt|;
name|struct
name|ena_admin_sq
name|sq
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_acq_destroy_sq_resp_desc
block|{
name|struct
name|ena_admin_acq_common_desc
name|acq_common_desc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_aq_create_cq_cmd
block|{
name|struct
name|ena_admin_aq_common_desc
name|aq_common_descriptor
decl_stmt|;
comment|/* 4:0 : reserved5 	 * 5 : interrupt_mode_enabled - if set, cq operates 	 *    in interrupt mode, otherwise - polling 	 * 7:6 : reserved6 	 */
name|uint8_t
name|cq_caps_1
decl_stmt|;
comment|/* 4:0 : cq_entry_size_words - size of CQ entry in 	 *    32-bit words, valid values: 4, 8. 	 * 7:5 : reserved7 	 */
name|uint8_t
name|cq_caps_2
decl_stmt|;
comment|/* completion queue depth in # of entries. must be power of 2 */
name|uint16_t
name|cq_depth
decl_stmt|;
comment|/* msix vector assigned to this cq */
name|uint32_t
name|msix_vector
decl_stmt|;
comment|/* cq physical base address in OS memory. CQ must be physically 	 * contiguous 	 */
name|struct
name|ena_common_mem_addr
name|cq_ba
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_acq_create_cq_resp_desc
block|{
name|struct
name|ena_admin_acq_common_desc
name|acq_common_desc
decl_stmt|;
name|uint16_t
name|cq_idx
decl_stmt|;
comment|/* actual cq depth in number of entries */
name|uint16_t
name|cq_actual_depth
decl_stmt|;
name|uint32_t
name|numa_node_register_offset
decl_stmt|;
name|uint32_t
name|cq_head_db_register_offset
decl_stmt|;
name|uint32_t
name|cq_interrupt_unmask_register_offset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_aq_destroy_cq_cmd
block|{
name|struct
name|ena_admin_aq_common_desc
name|aq_common_descriptor
decl_stmt|;
name|uint16_t
name|cq_idx
decl_stmt|;
name|uint16_t
name|reserved1
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_acq_destroy_cq_resp_desc
block|{
name|struct
name|ena_admin_acq_common_desc
name|acq_common_desc
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* ENA AQ Get Statistics command. Extended statistics are placed in control  * buffer pointed by AQ entry  */
end_comment

begin_struct
struct|struct
name|ena_admin_aq_get_stats_cmd
block|{
name|struct
name|ena_admin_aq_common_desc
name|aq_common_descriptor
decl_stmt|;
union|union
block|{
comment|/* command specific inline data */
name|uint32_t
name|inline_data_w1
index|[
literal|3
index|]
decl_stmt|;
name|struct
name|ena_admin_ctrl_buff_info
name|control_buffer
decl_stmt|;
block|}
name|u
union|;
comment|/* stats type as defined in enum ena_admin_get_stats_type */
name|uint8_t
name|type
decl_stmt|;
comment|/* stats scope defined in enum ena_admin_get_stats_scope */
name|uint8_t
name|scope
decl_stmt|;
name|uint16_t
name|reserved3
decl_stmt|;
comment|/* queue id. used when scope is specific_queue */
name|uint16_t
name|queue_idx
decl_stmt|;
comment|/* device id, value 0xFFFF means mine. only privileged device can get 	 *    stats of other device 	 */
name|uint16_t
name|device_id
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Basic Statistics Command. */
end_comment

begin_struct
struct|struct
name|ena_admin_basic_stats
block|{
name|uint32_t
name|tx_bytes_low
decl_stmt|;
name|uint32_t
name|tx_bytes_high
decl_stmt|;
name|uint32_t
name|tx_pkts_low
decl_stmt|;
name|uint32_t
name|tx_pkts_high
decl_stmt|;
name|uint32_t
name|rx_bytes_low
decl_stmt|;
name|uint32_t
name|rx_bytes_high
decl_stmt|;
name|uint32_t
name|rx_pkts_low
decl_stmt|;
name|uint32_t
name|rx_pkts_high
decl_stmt|;
name|uint32_t
name|rx_drops_low
decl_stmt|;
name|uint32_t
name|rx_drops_high
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_acq_get_stats_resp
block|{
name|struct
name|ena_admin_acq_common_desc
name|acq_common_desc
decl_stmt|;
name|struct
name|ena_admin_basic_stats
name|basic_stats
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_get_set_feature_common_desc
block|{
comment|/* 1:0 : select - 0x1 - current value; 0x3 - default 	 *    value 	 * 7:3 : reserved3 	 */
name|uint8_t
name|flags
decl_stmt|;
comment|/* as appears in ena_admin_aq_feature_id */
name|uint8_t
name|feature_id
decl_stmt|;
name|uint16_t
name|reserved16
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_device_attr_feature_desc
block|{
name|uint32_t
name|impl_id
decl_stmt|;
name|uint32_t
name|device_version
decl_stmt|;
comment|/* bitmap of ena_admin_aq_feature_id */
name|uint32_t
name|supported_features
decl_stmt|;
name|uint32_t
name|reserved3
decl_stmt|;
comment|/* Indicates how many bits are used physical address access. */
name|uint32_t
name|phys_addr_width
decl_stmt|;
comment|/* Indicates how many bits are used virtual address access. */
name|uint32_t
name|virt_addr_width
decl_stmt|;
comment|/* unicast MAC address (in Network byte order) */
name|uint8_t
name|mac_addr
index|[
literal|6
index|]
decl_stmt|;
name|uint8_t
name|reserved7
index|[
literal|2
index|]
decl_stmt|;
name|uint32_t
name|max_mtu
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_queue_feature_desc
block|{
comment|/* including LLQs */
name|uint32_t
name|max_sq_num
decl_stmt|;
name|uint32_t
name|max_sq_depth
decl_stmt|;
name|uint32_t
name|max_cq_num
decl_stmt|;
name|uint32_t
name|max_cq_depth
decl_stmt|;
name|uint32_t
name|max_llq_num
decl_stmt|;
name|uint32_t
name|max_llq_depth
decl_stmt|;
name|uint32_t
name|max_header_size
decl_stmt|;
comment|/* Maximum Descriptors number, including meta descriptor, allowed for 	 *    a single Tx packet 	 */
name|uint16_t
name|max_packet_tx_descs
decl_stmt|;
comment|/* Maximum Descriptors number allowed for a single Rx packet */
name|uint16_t
name|max_packet_rx_descs
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_set_feature_mtu_desc
block|{
comment|/* exclude L2 */
name|uint32_t
name|mtu
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_set_feature_host_attr_desc
block|{
comment|/* host OS info base address in OS memory. host info is 4KB of 	 * physically contiguous 	 */
name|struct
name|ena_common_mem_addr
name|os_info_ba
decl_stmt|;
comment|/* host debug area base address in OS memory. debug area must be 	 * physically contiguous 	 */
name|struct
name|ena_common_mem_addr
name|debug_ba
decl_stmt|;
comment|/* debug area size */
name|uint32_t
name|debug_area_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_feature_intr_moder_desc
block|{
comment|/* interrupt delay granularity in usec */
name|uint16_t
name|intr_delay_resolution
decl_stmt|;
name|uint16_t
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_get_feature_link_desc
block|{
comment|/* Link speed in Mb */
name|uint32_t
name|speed
decl_stmt|;
comment|/* bit field of enum ena_admin_link types */
name|uint32_t
name|supported
decl_stmt|;
comment|/* 0 : autoneg 	 * 1 : duplex - Full Duplex 	 * 31:2 : reserved2 	 */
name|uint32_t
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_feature_aenq_desc
block|{
comment|/* bitmask for AENQ groups the device can report */
name|uint32_t
name|supported_groups
decl_stmt|;
comment|/* bitmask for AENQ groups to report */
name|uint32_t
name|enabled_groups
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_feature_offload_desc
block|{
comment|/* 0 : TX_L3_csum_ipv4 	 * 1 : TX_L4_ipv4_csum_part - The checksum field 	 *    should be initialized with pseudo header checksum 	 * 2 : TX_L4_ipv4_csum_full 	 * 3 : TX_L4_ipv6_csum_part - The checksum field 	 *    should be initialized with pseudo header checksum 	 * 4 : TX_L4_ipv6_csum_full 	 * 5 : tso_ipv4 	 * 6 : tso_ipv6 	 * 7 : tso_ecn 	 */
name|uint32_t
name|tx
decl_stmt|;
comment|/* Receive side supported stateless offload 	 * 0 : RX_L3_csum_ipv4 - IPv4 checksum 	 * 1 : RX_L4_ipv4_csum - TCP/UDP/IPv4 checksum 	 * 2 : RX_L4_ipv6_csum - TCP/UDP/IPv6 checksum 	 * 3 : RX_hash - Hash calculation 	 */
name|uint32_t
name|rx_supported
decl_stmt|;
name|uint32_t
name|rx_enabled
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ena_admin_hash_functions
block|{
name|ENA_ADMIN_TOEPLITZ
init|=
literal|1
block|,
name|ENA_ADMIN_CRC32
init|=
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ena_admin_feature_rss_flow_hash_control
block|{
name|uint32_t
name|keys_num
decl_stmt|;
name|uint32_t
name|reserved
decl_stmt|;
name|uint32_t
name|key
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_feature_rss_flow_hash_function
block|{
comment|/* 7:0 : funcs - bitmask of ena_admin_hash_functions */
name|uint32_t
name|supported_func
decl_stmt|;
comment|/* 7:0 : selected_func - bitmask of 	 *    ena_admin_hash_functions 	 */
name|uint32_t
name|selected_func
decl_stmt|;
comment|/* initial value */
name|uint32_t
name|init_val
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* RSS flow hash protocols */
end_comment

begin_enum
enum|enum
name|ena_admin_flow_hash_proto
block|{
name|ENA_ADMIN_RSS_TCP4
init|=
literal|0
block|,
name|ENA_ADMIN_RSS_UDP4
init|=
literal|1
block|,
name|ENA_ADMIN_RSS_TCP6
init|=
literal|2
block|,
name|ENA_ADMIN_RSS_UDP6
init|=
literal|3
block|,
name|ENA_ADMIN_RSS_IP4
init|=
literal|4
block|,
name|ENA_ADMIN_RSS_IP6
init|=
literal|5
block|,
name|ENA_ADMIN_RSS_IP4_FRAG
init|=
literal|6
block|,
name|ENA_ADMIN_RSS_NOT_IP
init|=
literal|7
block|,
comment|/* TCPv6 with extension header */
name|ENA_ADMIN_RSS_TCP6_EX
init|=
literal|8
block|,
comment|/* IPv6 with extension header */
name|ENA_ADMIN_RSS_IP6_EX
init|=
literal|9
block|,
name|ENA_ADMIN_RSS_PROTO_NUM
init|=
literal|16
block|, }
enum|;
end_enum

begin_comment
comment|/* RSS flow hash fields */
end_comment

begin_enum
enum|enum
name|ena_admin_flow_hash_fields
block|{
comment|/* Ethernet Dest Addr */
name|ENA_ADMIN_RSS_L2_DA
init|=
name|BIT
argument_list|(
literal|0
argument_list|)
block|,
comment|/* Ethernet Src Addr */
name|ENA_ADMIN_RSS_L2_SA
init|=
name|BIT
argument_list|(
literal|1
argument_list|)
block|,
comment|/* ipv4/6 Dest Addr */
name|ENA_ADMIN_RSS_L3_DA
init|=
name|BIT
argument_list|(
literal|2
argument_list|)
block|,
comment|/* ipv4/6 Src Addr */
name|ENA_ADMIN_RSS_L3_SA
init|=
name|BIT
argument_list|(
literal|3
argument_list|)
block|,
comment|/* tcp/udp Dest Port */
name|ENA_ADMIN_RSS_L4_DP
init|=
name|BIT
argument_list|(
literal|4
argument_list|)
block|,
comment|/* tcp/udp Src Port */
name|ENA_ADMIN_RSS_L4_SP
init|=
name|BIT
argument_list|(
literal|5
argument_list|)
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ena_admin_proto_input
block|{
comment|/* flow hash fields (bitwise according to ena_admin_flow_hash_fields) */
name|uint16_t
name|fields
decl_stmt|;
name|uint16_t
name|reserved2
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_feature_rss_hash_control
block|{
name|struct
name|ena_admin_proto_input
name|supported_fields
index|[
name|ENA_ADMIN_RSS_PROTO_NUM
index|]
decl_stmt|;
name|struct
name|ena_admin_proto_input
name|selected_fields
index|[
name|ENA_ADMIN_RSS_PROTO_NUM
index|]
decl_stmt|;
name|struct
name|ena_admin_proto_input
name|reserved2
index|[
name|ENA_ADMIN_RSS_PROTO_NUM
index|]
decl_stmt|;
name|struct
name|ena_admin_proto_input
name|reserved3
index|[
name|ENA_ADMIN_RSS_PROTO_NUM
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_feature_rss_flow_hash_input
block|{
comment|/* supported hash input sorting 	 * 1 : L3_sort - support swap L3 addresses if DA is 	 *    smaller than SA 	 * 2 : L4_sort - support swap L4 ports if DP smaller 	 *    SP 	 */
name|uint16_t
name|supported_input_sort
decl_stmt|;
comment|/* enabled hash input sorting 	 * 1 : enable_L3_sort - enable swap L3 addresses if 	 *    DA smaller than SA 	 * 2 : enable_L4_sort - enable swap L4 ports if DP 	 *    smaller than SP 	 */
name|uint16_t
name|enabled_input_sort
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|ena_admin_os_type
block|{
name|ENA_ADMIN_OS_LINUX
init|=
literal|1
block|,
name|ENA_ADMIN_OS_WIN
init|=
literal|2
block|,
name|ENA_ADMIN_OS_DPDK
init|=
literal|3
block|,
name|ENA_ADMIN_OS_FREEBSD
init|=
literal|4
block|,
name|ENA_ADMIN_OS_IPXE
init|=
literal|5
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ena_admin_host_info
block|{
comment|/* defined in enum ena_admin_os_type */
name|uint32_t
name|os_type
decl_stmt|;
comment|/* os distribution string format */
name|uint8_t
name|os_dist_str
index|[
literal|128
index|]
decl_stmt|;
comment|/* OS distribution numeric format */
name|uint32_t
name|os_dist
decl_stmt|;
comment|/* kernel version string format */
name|uint8_t
name|kernel_ver_str
index|[
literal|32
index|]
decl_stmt|;
comment|/* Kernel version numeric format */
name|uint32_t
name|kernel_ver
decl_stmt|;
comment|/* 7:0 : major 	 * 15:8 : minor 	 * 23:16 : sub_minor 	 */
name|uint32_t
name|driver_version
decl_stmt|;
comment|/* features bitmap */
name|uint32_t
name|supported_network_features
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_rss_ind_table_entry
block|{
name|uint16_t
name|cq_idx
decl_stmt|;
name|uint16_t
name|reserved
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_feature_rss_ind_table
block|{
comment|/* min supported table size (2^min_size) */
name|uint16_t
name|min_size
decl_stmt|;
comment|/* max supported table size (2^max_size) */
name|uint16_t
name|max_size
decl_stmt|;
comment|/* table size (2^size) */
name|uint16_t
name|size
decl_stmt|;
name|uint16_t
name|reserved
decl_stmt|;
comment|/* index of the inline entry. 0xFFFFFFFF means invalid */
name|uint32_t
name|inline_index
decl_stmt|;
comment|/* used for updating single entry, ignored when setting the entire 	 * table through the control buffer. 	 */
name|struct
name|ena_admin_rss_ind_table_entry
name|inline_entry
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* When hint value is 0, driver should use it's own predefined value */
end_comment

begin_struct
struct|struct
name|ena_admin_ena_hw_hints
block|{
comment|/* value in ms */
name|uint16_t
name|mmio_read_timeout
decl_stmt|;
comment|/* value in ms */
name|uint16_t
name|driver_watchdog_timeout
decl_stmt|;
comment|/* Per packet tx completion timeout. value in ms */
name|uint16_t
name|missing_tx_completion_timeout
decl_stmt|;
name|uint16_t
name|missed_tx_completion_count_threshold_to_reset
decl_stmt|;
comment|/* value in ms */
name|uint16_t
name|admin_completion_tx_timeout
decl_stmt|;
name|uint16_t
name|netdev_wd_timeout
decl_stmt|;
name|uint16_t
name|max_tx_sgl_size
decl_stmt|;
name|uint16_t
name|max_rx_sgl_size
decl_stmt|;
name|uint16_t
name|reserved
index|[
literal|8
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_get_feat_cmd
block|{
name|struct
name|ena_admin_aq_common_desc
name|aq_common_descriptor
decl_stmt|;
name|struct
name|ena_admin_ctrl_buff_info
name|control_buffer
decl_stmt|;
name|struct
name|ena_admin_get_set_feature_common_desc
name|feat_common
decl_stmt|;
name|uint32_t
name|raw
index|[
literal|11
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_get_feat_resp
block|{
name|struct
name|ena_admin_acq_common_desc
name|acq_common_desc
decl_stmt|;
union|union
block|{
name|uint32_t
name|raw
index|[
literal|14
index|]
decl_stmt|;
name|struct
name|ena_admin_device_attr_feature_desc
name|dev_attr
decl_stmt|;
name|struct
name|ena_admin_queue_feature_desc
name|max_queue
decl_stmt|;
name|struct
name|ena_admin_feature_aenq_desc
name|aenq
decl_stmt|;
name|struct
name|ena_admin_get_feature_link_desc
name|link
decl_stmt|;
name|struct
name|ena_admin_feature_offload_desc
name|offload
decl_stmt|;
name|struct
name|ena_admin_feature_rss_flow_hash_function
name|flow_hash_func
decl_stmt|;
name|struct
name|ena_admin_feature_rss_flow_hash_input
name|flow_hash_input
decl_stmt|;
name|struct
name|ena_admin_feature_rss_ind_table
name|ind_table
decl_stmt|;
name|struct
name|ena_admin_feature_intr_moder_desc
name|intr_moderation
decl_stmt|;
name|struct
name|ena_admin_ena_hw_hints
name|hw_hints
decl_stmt|;
block|}
name|u
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_set_feat_cmd
block|{
name|struct
name|ena_admin_aq_common_desc
name|aq_common_descriptor
decl_stmt|;
name|struct
name|ena_admin_ctrl_buff_info
name|control_buffer
decl_stmt|;
name|struct
name|ena_admin_get_set_feature_common_desc
name|feat_common
decl_stmt|;
union|union
block|{
name|uint32_t
name|raw
index|[
literal|11
index|]
decl_stmt|;
comment|/* mtu size */
name|struct
name|ena_admin_set_feature_mtu_desc
name|mtu
decl_stmt|;
comment|/* host attributes */
name|struct
name|ena_admin_set_feature_host_attr_desc
name|host_attr
decl_stmt|;
comment|/* AENQ configuration */
name|struct
name|ena_admin_feature_aenq_desc
name|aenq
decl_stmt|;
comment|/* rss flow hash function */
name|struct
name|ena_admin_feature_rss_flow_hash_function
name|flow_hash_func
decl_stmt|;
comment|/* rss flow hash input */
name|struct
name|ena_admin_feature_rss_flow_hash_input
name|flow_hash_input
decl_stmt|;
comment|/* rss indirection table */
name|struct
name|ena_admin_feature_rss_ind_table
name|ind_table
decl_stmt|;
block|}
name|u
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_set_feat_resp
block|{
name|struct
name|ena_admin_acq_common_desc
name|acq_common_desc
decl_stmt|;
union|union
block|{
name|uint32_t
name|raw
index|[
literal|14
index|]
decl_stmt|;
block|}
name|u
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_aenq_common_desc
block|{
name|uint16_t
name|group
decl_stmt|;
name|uint16_t
name|syndrom
decl_stmt|;
comment|/* 0 : phase */
name|uint8_t
name|flags
decl_stmt|;
name|uint8_t
name|reserved1
index|[
literal|3
index|]
decl_stmt|;
name|uint32_t
name|timestamp_low
decl_stmt|;
name|uint32_t
name|timestamp_high
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* asynchronous event notification groups */
end_comment

begin_enum
enum|enum
name|ena_admin_aenq_group
block|{
name|ENA_ADMIN_LINK_CHANGE
init|=
literal|0
block|,
name|ENA_ADMIN_FATAL_ERROR
init|=
literal|1
block|,
name|ENA_ADMIN_WARNING
init|=
literal|2
block|,
name|ENA_ADMIN_NOTIFICATION
init|=
literal|3
block|,
name|ENA_ADMIN_KEEP_ALIVE
init|=
literal|4
block|,
name|ENA_ADMIN_AENQ_GROUPS_NUM
init|=
literal|5
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|ena_admin_aenq_notification_syndrom
block|{
name|ENA_ADMIN_SUSPEND
init|=
literal|0
block|,
name|ENA_ADMIN_RESUME
init|=
literal|1
block|,
name|ENA_ADMIN_UPDATE_HINTS
init|=
literal|2
block|, }
enum|;
end_enum

begin_struct
struct|struct
name|ena_admin_aenq_entry
block|{
name|struct
name|ena_admin_aenq_common_desc
name|aenq_common_desc
decl_stmt|;
comment|/* command specific inline data */
name|uint32_t
name|inline_data_w4
index|[
literal|12
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_aenq_link_change_desc
block|{
name|struct
name|ena_admin_aenq_common_desc
name|aenq_common_desc
decl_stmt|;
comment|/* 0 : link_status */
name|uint32_t
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_aenq_keep_alive_desc
block|{
name|struct
name|ena_admin_aenq_common_desc
name|aenq_common_desc
decl_stmt|;
name|uint32_t
name|rx_drops_low
decl_stmt|;
name|uint32_t
name|rx_drops_high
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ena_admin_ena_mmio_req_read_less_resp
block|{
name|uint16_t
name|req_id
decl_stmt|;
name|uint16_t
name|reg_off
decl_stmt|;
comment|/* value is valid when poll is cleared */
name|uint32_t
name|reg_val
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* aq_common_desc */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_COMMON_DESC_COMMAND_ID_MASK
value|GENMASK(11, 0)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_COMMON_DESC_PHASE_MASK
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_SHIFT
value|1
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_MASK
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_INDIRECT_SHIFT
value|2
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_INDIRECT_MASK
value|BIT(2)
end_define

begin_comment
comment|/* sq */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_SQ_SQ_DIRECTION_SHIFT
value|5
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_SQ_SQ_DIRECTION_MASK
value|GENMASK(7, 5)
end_define

begin_comment
comment|/* acq_common_desc */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_ACQ_COMMON_DESC_COMMAND_ID_MASK
value|GENMASK(11, 0)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_ACQ_COMMON_DESC_PHASE_MASK
value|BIT(0)
end_define

begin_comment
comment|/* aq_create_sq_cmd */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_SQ_DIRECTION_SHIFT
value|5
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_SQ_DIRECTION_MASK
value|GENMASK(7, 5)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_PLACEMENT_POLICY_MASK
value|GENMASK(3, 0)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_COMPLETION_POLICY_SHIFT
value|4
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_COMPLETION_POLICY_MASK
value|GENMASK(6, 4)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_IS_PHYSICALLY_CONTIGUOUS_MASK
value|BIT(0)
end_define

begin_comment
comment|/* aq_create_cq_cmd */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_CREATE_CQ_CMD_INTERRUPT_MODE_ENABLED_SHIFT
value|5
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_CREATE_CQ_CMD_INTERRUPT_MODE_ENABLED_MASK
value|BIT(5)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_AQ_CREATE_CQ_CMD_CQ_ENTRY_SIZE_WORDS_MASK
value|GENMASK(4, 0)
end_define

begin_comment
comment|/* get_set_feature_common_desc */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_GET_SET_FEATURE_COMMON_DESC_SELECT_MASK
value|GENMASK(1, 0)
end_define

begin_comment
comment|/* get_feature_link_desc */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_GET_FEATURE_LINK_DESC_AUTONEG_MASK
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_GET_FEATURE_LINK_DESC_DUPLEX_SHIFT
value|1
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_GET_FEATURE_LINK_DESC_DUPLEX_MASK
value|BIT(1)
end_define

begin_comment
comment|/* feature_offload_desc */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L3_CSUM_IPV4_MASK
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_PART_SHIFT
value|1
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_PART_MASK
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_FULL_SHIFT
value|2
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_FULL_MASK
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_PART_SHIFT
value|3
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_PART_MASK
value|BIT(3)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_FULL_SHIFT
value|4
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_FULL_MASK
value|BIT(4)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV4_SHIFT
value|5
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV4_MASK
value|BIT(5)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV6_SHIFT
value|6
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV6_MASK
value|BIT(6)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_ECN_SHIFT
value|7
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_ECN_MASK
value|BIT(7)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L3_CSUM_IPV4_MASK
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV4_CSUM_SHIFT
value|1
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV4_CSUM_MASK
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV6_CSUM_SHIFT
value|2
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV6_CSUM_MASK
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_HASH_SHIFT
value|3
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_HASH_MASK
value|BIT(3)
end_define

begin_comment
comment|/* feature_rss_flow_hash_function */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_FUNCTION_FUNCS_MASK
value|GENMASK(7, 0)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_FUNCTION_SELECTED_FUNC_MASK
value|GENMASK(7, 0)
end_define

begin_comment
comment|/* feature_rss_flow_hash_input */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L3_SORT_SHIFT
value|1
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L3_SORT_MASK
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L4_SORT_SHIFT
value|2
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L4_SORT_MASK
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L3_SORT_SHIFT
value|1
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L3_SORT_MASK
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L4_SORT_SHIFT
value|2
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L4_SORT_MASK
value|BIT(2)
end_define

begin_comment
comment|/* host_info */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_HOST_INFO_MAJOR_MASK
value|GENMASK(7, 0)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_HOST_INFO_MINOR_SHIFT
value|8
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_HOST_INFO_MINOR_MASK
value|GENMASK(15, 8)
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_HOST_INFO_SUB_MINOR_SHIFT
value|16
end_define

begin_define
define|#
directive|define
name|ENA_ADMIN_HOST_INFO_SUB_MINOR_MASK
value|GENMASK(23, 16)
end_define

begin_comment
comment|/* aenq_common_desc */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_AENQ_COMMON_DESC_PHASE_MASK
value|BIT(0)
end_define

begin_comment
comment|/* aenq_link_change_desc */
end_comment

begin_define
define|#
directive|define
name|ENA_ADMIN_AENQ_LINK_CHANGE_DESC_LINK_STATUS_MASK
value|BIT(0)
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|ENA_DEFS_LINUX_MAINLINE
argument_list|)
end_if

begin_function
specifier|static
specifier|inline
name|uint16_t
name|get_ena_admin_aq_common_desc_command_id
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_common_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|command_id
operator|&
name|ENA_ADMIN_AQ_COMMON_DESC_COMMAND_ID_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_common_desc_command_id
parameter_list|(
name|struct
name|ena_admin_aq_common_desc
modifier|*
name|p
parameter_list|,
name|uint16_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|command_id
operator||=
name|val
operator|&
name|ENA_ADMIN_AQ_COMMON_DESC_COMMAND_ID_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aq_common_desc_phase
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_common_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|flags
operator|&
name|ENA_ADMIN_AQ_COMMON_DESC_PHASE_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_common_desc_phase
parameter_list|(
name|struct
name|ena_admin_aq_common_desc
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|flags
operator||=
name|val
operator|&
name|ENA_ADMIN_AQ_COMMON_DESC_PHASE_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aq_common_desc_ctrl_data
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_common_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|flags
operator|&
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_MASK
operator|)
operator|>>
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_common_desc_ctrl_data
parameter_list|(
name|struct
name|ena_admin_aq_common_desc
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|flags
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_SHIFT
operator|)
operator|&
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aq_common_desc_ctrl_data_indirect
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_common_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|flags
operator|&
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_INDIRECT_MASK
operator|)
operator|>>
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_INDIRECT_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_common_desc_ctrl_data_indirect
parameter_list|(
name|struct
name|ena_admin_aq_common_desc
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|flags
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_INDIRECT_SHIFT
operator|)
operator|&
name|ENA_ADMIN_AQ_COMMON_DESC_CTRL_DATA_INDIRECT_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_sq_sq_direction
parameter_list|(
specifier|const
name|struct
name|ena_admin_sq
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|sq_identity
operator|&
name|ENA_ADMIN_SQ_SQ_DIRECTION_MASK
operator|)
operator|>>
name|ENA_ADMIN_SQ_SQ_DIRECTION_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_sq_sq_direction
parameter_list|(
name|struct
name|ena_admin_sq
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|sq_identity
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_SQ_SQ_DIRECTION_SHIFT
operator|)
operator|&
name|ENA_ADMIN_SQ_SQ_DIRECTION_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint16_t
name|get_ena_admin_acq_common_desc_command_id
parameter_list|(
specifier|const
name|struct
name|ena_admin_acq_common_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|command
operator|&
name|ENA_ADMIN_ACQ_COMMON_DESC_COMMAND_ID_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_acq_common_desc_command_id
parameter_list|(
name|struct
name|ena_admin_acq_common_desc
modifier|*
name|p
parameter_list|,
name|uint16_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|command
operator||=
name|val
operator|&
name|ENA_ADMIN_ACQ_COMMON_DESC_COMMAND_ID_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_acq_common_desc_phase
parameter_list|(
specifier|const
name|struct
name|ena_admin_acq_common_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|flags
operator|&
name|ENA_ADMIN_ACQ_COMMON_DESC_PHASE_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_acq_common_desc_phase
parameter_list|(
name|struct
name|ena_admin_acq_common_desc
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|flags
operator||=
name|val
operator|&
name|ENA_ADMIN_ACQ_COMMON_DESC_PHASE_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aq_create_sq_cmd_sq_direction
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_create_sq_cmd
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|sq_identity
operator|&
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_SQ_DIRECTION_MASK
operator|)
operator|>>
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_SQ_DIRECTION_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_create_sq_cmd_sq_direction
parameter_list|(
name|struct
name|ena_admin_aq_create_sq_cmd
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|sq_identity
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_SQ_DIRECTION_SHIFT
operator|)
operator|&
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_SQ_DIRECTION_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aq_create_sq_cmd_placement_policy
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_create_sq_cmd
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|sq_caps_2
operator|&
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_PLACEMENT_POLICY_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_create_sq_cmd_placement_policy
parameter_list|(
name|struct
name|ena_admin_aq_create_sq_cmd
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|sq_caps_2
operator||=
name|val
operator|&
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_PLACEMENT_POLICY_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aq_create_sq_cmd_completion_policy
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_create_sq_cmd
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|sq_caps_2
operator|&
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_COMPLETION_POLICY_MASK
operator|)
operator|>>
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_COMPLETION_POLICY_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_create_sq_cmd_completion_policy
parameter_list|(
name|struct
name|ena_admin_aq_create_sq_cmd
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|sq_caps_2
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_COMPLETION_POLICY_SHIFT
operator|)
operator|&
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_COMPLETION_POLICY_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aq_create_sq_cmd_is_physically_contiguous
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_create_sq_cmd
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|sq_caps_3
operator|&
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_IS_PHYSICALLY_CONTIGUOUS_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_create_sq_cmd_is_physically_contiguous
parameter_list|(
name|struct
name|ena_admin_aq_create_sq_cmd
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|sq_caps_3
operator||=
name|val
operator|&
name|ENA_ADMIN_AQ_CREATE_SQ_CMD_IS_PHYSICALLY_CONTIGUOUS_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aq_create_cq_cmd_interrupt_mode_enabled
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_create_cq_cmd
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|cq_caps_1
operator|&
name|ENA_ADMIN_AQ_CREATE_CQ_CMD_INTERRUPT_MODE_ENABLED_MASK
operator|)
operator|>>
name|ENA_ADMIN_AQ_CREATE_CQ_CMD_INTERRUPT_MODE_ENABLED_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_create_cq_cmd_interrupt_mode_enabled
parameter_list|(
name|struct
name|ena_admin_aq_create_cq_cmd
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|cq_caps_1
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_AQ_CREATE_CQ_CMD_INTERRUPT_MODE_ENABLED_SHIFT
operator|)
operator|&
name|ENA_ADMIN_AQ_CREATE_CQ_CMD_INTERRUPT_MODE_ENABLED_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aq_create_cq_cmd_cq_entry_size_words
parameter_list|(
specifier|const
name|struct
name|ena_admin_aq_create_cq_cmd
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|cq_caps_2
operator|&
name|ENA_ADMIN_AQ_CREATE_CQ_CMD_CQ_ENTRY_SIZE_WORDS_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aq_create_cq_cmd_cq_entry_size_words
parameter_list|(
name|struct
name|ena_admin_aq_create_cq_cmd
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|cq_caps_2
operator||=
name|val
operator|&
name|ENA_ADMIN_AQ_CREATE_CQ_CMD_CQ_ENTRY_SIZE_WORDS_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_get_set_feature_common_desc_select
parameter_list|(
specifier|const
name|struct
name|ena_admin_get_set_feature_common_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|flags
operator|&
name|ENA_ADMIN_GET_SET_FEATURE_COMMON_DESC_SELECT_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_get_set_feature_common_desc_select
parameter_list|(
name|struct
name|ena_admin_get_set_feature_common_desc
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|flags
operator||=
name|val
operator|&
name|ENA_ADMIN_GET_SET_FEATURE_COMMON_DESC_SELECT_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_get_feature_link_desc_autoneg
parameter_list|(
specifier|const
name|struct
name|ena_admin_get_feature_link_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|flags
operator|&
name|ENA_ADMIN_GET_FEATURE_LINK_DESC_AUTONEG_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_get_feature_link_desc_autoneg
parameter_list|(
name|struct
name|ena_admin_get_feature_link_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|flags
operator||=
name|val
operator|&
name|ENA_ADMIN_GET_FEATURE_LINK_DESC_AUTONEG_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_get_feature_link_desc_duplex
parameter_list|(
specifier|const
name|struct
name|ena_admin_get_feature_link_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|flags
operator|&
name|ENA_ADMIN_GET_FEATURE_LINK_DESC_DUPLEX_MASK
operator|)
operator|>>
name|ENA_ADMIN_GET_FEATURE_LINK_DESC_DUPLEX_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_get_feature_link_desc_duplex
parameter_list|(
name|struct
name|ena_admin_get_feature_link_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|flags
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_GET_FEATURE_LINK_DESC_DUPLEX_SHIFT
operator|)
operator|&
name|ENA_ADMIN_GET_FEATURE_LINK_DESC_DUPLEX_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_TX_L3_csum_ipv4
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|tx
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L3_CSUM_IPV4_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_TX_L3_csum_ipv4
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|tx
operator||=
name|val
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L3_CSUM_IPV4_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_TX_L4_ipv4_csum_part
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|tx
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_PART_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_PART_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_TX_L4_ipv4_csum_part
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|tx
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_PART_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_PART_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_TX_L4_ipv4_csum_full
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|tx
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_FULL_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_FULL_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_TX_L4_ipv4_csum_full
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|tx
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_FULL_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV4_CSUM_FULL_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_TX_L4_ipv6_csum_part
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|tx
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_PART_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_PART_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_TX_L4_ipv6_csum_part
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|tx
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_PART_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_PART_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_TX_L4_ipv6_csum_full
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|tx
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_FULL_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_FULL_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_TX_L4_ipv6_csum_full
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|tx
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_FULL_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TX_L4_IPV6_CSUM_FULL_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_tso_ipv4
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|tx
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV4_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV4_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_tso_ipv4
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|tx
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV4_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV4_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_tso_ipv6
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|tx
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV6_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV6_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_tso_ipv6
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|tx
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV6_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_IPV6_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_tso_ecn
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|tx
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_ECN_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_ECN_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_tso_ecn
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|tx
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_ECN_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_TSO_ECN_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_RX_L3_csum_ipv4
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|rx_supported
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L3_CSUM_IPV4_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_RX_L3_csum_ipv4
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|rx_supported
operator||=
name|val
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L3_CSUM_IPV4_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_RX_L4_ipv4_csum
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|rx_supported
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV4_CSUM_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV4_CSUM_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_RX_L4_ipv4_csum
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|rx_supported
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV4_CSUM_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV4_CSUM_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_RX_L4_ipv6_csum
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|rx_supported
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV6_CSUM_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV6_CSUM_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_RX_L4_ipv6_csum
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|rx_supported
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV6_CSUM_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_L4_IPV6_CSUM_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_offload_desc_RX_hash
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|rx_supported
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_HASH_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_HASH_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_offload_desc_RX_hash
parameter_list|(
name|struct
name|ena_admin_feature_offload_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|rx_supported
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_HASH_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_OFFLOAD_DESC_RX_HASH_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_rss_flow_hash_function_funcs
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_rss_flow_hash_function
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|supported_func
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_FUNCTION_FUNCS_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_rss_flow_hash_function_funcs
parameter_list|(
name|struct
name|ena_admin_feature_rss_flow_hash_function
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|supported_func
operator||=
name|val
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_FUNCTION_FUNCS_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_feature_rss_flow_hash_function_selected_func
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_rss_flow_hash_function
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|selected_func
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_FUNCTION_SELECTED_FUNC_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_rss_flow_hash_function_selected_func
parameter_list|(
name|struct
name|ena_admin_feature_rss_flow_hash_function
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|selected_func
operator||=
name|val
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_FUNCTION_SELECTED_FUNC_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint16_t
name|get_ena_admin_feature_rss_flow_hash_input_L3_sort
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_rss_flow_hash_input
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|supported_input_sort
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L3_SORT_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L3_SORT_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_rss_flow_hash_input_L3_sort
parameter_list|(
name|struct
name|ena_admin_feature_rss_flow_hash_input
modifier|*
name|p
parameter_list|,
name|uint16_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|supported_input_sort
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L3_SORT_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L3_SORT_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint16_t
name|get_ena_admin_feature_rss_flow_hash_input_L4_sort
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_rss_flow_hash_input
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|supported_input_sort
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L4_SORT_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L4_SORT_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_rss_flow_hash_input_L4_sort
parameter_list|(
name|struct
name|ena_admin_feature_rss_flow_hash_input
modifier|*
name|p
parameter_list|,
name|uint16_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|supported_input_sort
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L4_SORT_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_L4_SORT_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint16_t
name|get_ena_admin_feature_rss_flow_hash_input_enable_L3_sort
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_rss_flow_hash_input
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|enabled_input_sort
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L3_SORT_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L3_SORT_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_rss_flow_hash_input_enable_L3_sort
parameter_list|(
name|struct
name|ena_admin_feature_rss_flow_hash_input
modifier|*
name|p
parameter_list|,
name|uint16_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|enabled_input_sort
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L3_SORT_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L3_SORT_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint16_t
name|get_ena_admin_feature_rss_flow_hash_input_enable_L4_sort
parameter_list|(
specifier|const
name|struct
name|ena_admin_feature_rss_flow_hash_input
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|enabled_input_sort
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L4_SORT_MASK
operator|)
operator|>>
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L4_SORT_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_feature_rss_flow_hash_input_enable_L4_sort
parameter_list|(
name|struct
name|ena_admin_feature_rss_flow_hash_input
modifier|*
name|p
parameter_list|,
name|uint16_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|enabled_input_sort
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L4_SORT_SHIFT
operator|)
operator|&
name|ENA_ADMIN_FEATURE_RSS_FLOW_HASH_INPUT_ENABLE_L4_SORT_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_host_info_major
parameter_list|(
specifier|const
name|struct
name|ena_admin_host_info
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|driver_version
operator|&
name|ENA_ADMIN_HOST_INFO_MAJOR_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_host_info_major
parameter_list|(
name|struct
name|ena_admin_host_info
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|driver_version
operator||=
name|val
operator|&
name|ENA_ADMIN_HOST_INFO_MAJOR_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_host_info_minor
parameter_list|(
specifier|const
name|struct
name|ena_admin_host_info
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|driver_version
operator|&
name|ENA_ADMIN_HOST_INFO_MINOR_MASK
operator|)
operator|>>
name|ENA_ADMIN_HOST_INFO_MINOR_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_host_info_minor
parameter_list|(
name|struct
name|ena_admin_host_info
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|driver_version
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_HOST_INFO_MINOR_SHIFT
operator|)
operator|&
name|ENA_ADMIN_HOST_INFO_MINOR_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_host_info_sub_minor
parameter_list|(
specifier|const
name|struct
name|ena_admin_host_info
modifier|*
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|->
name|driver_version
operator|&
name|ENA_ADMIN_HOST_INFO_SUB_MINOR_MASK
operator|)
operator|>>
name|ENA_ADMIN_HOST_INFO_SUB_MINOR_SHIFT
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_host_info_sub_minor
parameter_list|(
name|struct
name|ena_admin_host_info
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|driver_version
operator||=
operator|(
name|val
operator|<<
name|ENA_ADMIN_HOST_INFO_SUB_MINOR_SHIFT
operator|)
operator|&
name|ENA_ADMIN_HOST_INFO_SUB_MINOR_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint8_t
name|get_ena_admin_aenq_common_desc_phase
parameter_list|(
specifier|const
name|struct
name|ena_admin_aenq_common_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|flags
operator|&
name|ENA_ADMIN_AENQ_COMMON_DESC_PHASE_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aenq_common_desc_phase
parameter_list|(
name|struct
name|ena_admin_aenq_common_desc
modifier|*
name|p
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|flags
operator||=
name|val
operator|&
name|ENA_ADMIN_AENQ_COMMON_DESC_PHASE_MASK
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|get_ena_admin_aenq_link_change_desc_link_status
parameter_list|(
specifier|const
name|struct
name|ena_admin_aenq_link_change_desc
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
operator|->
name|flags
operator|&
name|ENA_ADMIN_AENQ_LINK_CHANGE_DESC_LINK_STATUS_MASK
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|set_ena_admin_aenq_link_change_desc_link_status
parameter_list|(
name|struct
name|ena_admin_aenq_link_change_desc
modifier|*
name|p
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|p
operator|->
name|flags
operator||=
name|val
operator|&
name|ENA_ADMIN_AENQ_LINK_CHANGE_DESC_LINK_STATUS_MASK
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined(ENA_DEFS_LINUX_MAINLINE) */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*_ENA_ADMIN_H_ */
end_comment

end_unit

