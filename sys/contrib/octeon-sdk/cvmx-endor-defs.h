begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2012  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-endor-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon endor.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision: 69515 $<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_ENDOR_DEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_ENDOR_DEFS_H__
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_AUTO_CLK_GATE
value|CVMX_ENDOR_ADMA_AUTO_CLK_GATE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_AUTO_CLK_GATE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_AUTO_CLK_GATE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844004ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_AUTO_CLK_GATE
value|(CVMX_ADD_IO_SEG(0x00010F0000844004ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_AXIERR_INTR
value|CVMX_ENDOR_ADMA_AXIERR_INTR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_AXIERR_INTR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_AXIERR_INTR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844044ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_AXIERR_INTR
value|(CVMX_ADD_IO_SEG(0x00010F0000844044ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_AXI_RSPCODE
value|CVMX_ENDOR_ADMA_AXI_RSPCODE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_AXI_RSPCODE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_AXI_RSPCODE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844050ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_AXI_RSPCODE
value|(CVMX_ADD_IO_SEG(0x00010F0000844050ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_AXI_SIGNAL
value|CVMX_ENDOR_ADMA_AXI_SIGNAL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_AXI_SIGNAL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_AXI_SIGNAL not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844084ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_AXI_SIGNAL
value|(CVMX_ADD_IO_SEG(0x00010F0000844084ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMADONE_INTR
value|CVMX_ENDOR_ADMA_DMADONE_INTR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_DMADONE_INTR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_DMADONE_INTR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844040ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMADONE_INTR
value|(CVMX_ADD_IO_SEG(0x00010F0000844040ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_DMAX_ADDR_HI
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_DMAX_ADDR_HI(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000084410Cull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMAX_ADDR_HI
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F000084410Cull) + ((offset)& 7) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_DMAX_ADDR_LO
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_DMAX_ADDR_LO(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844108ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMAX_ADDR_LO
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000844108ull) + ((offset)& 7) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_DMAX_CFG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_DMAX_CFG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844100ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMAX_CFG
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000844100ull) + ((offset)& 7) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_DMAX_SIZE
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_DMAX_SIZE(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844104ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMAX_SIZE
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000844104ull) + ((offset)& 7) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMA_PRIORITY
value|CVMX_ENDOR_ADMA_DMA_PRIORITY_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_DMA_PRIORITY_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_DMA_PRIORITY not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844080ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMA_PRIORITY
value|(CVMX_ADD_IO_SEG(0x00010F0000844080ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMA_RESET
value|CVMX_ENDOR_ADMA_DMA_RESET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_DMA_RESET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_DMA_RESET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844008ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_DMA_RESET
value|(CVMX_ADD_IO_SEG(0x00010F0000844008ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_INTR_DIS
value|CVMX_ENDOR_ADMA_INTR_DIS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_INTR_DIS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_INTR_DIS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000084404Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_INTR_DIS
value|(CVMX_ADD_IO_SEG(0x00010F000084404Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_INTR_ENB
value|CVMX_ENDOR_ADMA_INTR_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_INTR_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_INTR_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844048ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_INTR_ENB
value|(CVMX_ADD_IO_SEG(0x00010F0000844048ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_MODULE_STATUS
value|CVMX_ENDOR_ADMA_MODULE_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_ADMA_MODULE_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_ADMA_MODULE_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844000ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_ADMA_MODULE_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000844000ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_CNTL_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_CNTL_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008201E4ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_CNTL_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008201E4ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_CNTL_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_CNTL_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008201E0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_CNTL_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008201E0ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_INDEX_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_INDEX_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008201A4ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_INDEX_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008201A4ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_INDEX_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_INDEX_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008201A0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_INDEX_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008201A0ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_MISC_IDX_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_MISC_IDX_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820134ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_MISC_IDX_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820134ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_MISC_IDX_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_MISC_IDX_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820114ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_MISC_IDX_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820114ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_MISC_MASK_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_MISC_MASK_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820034ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_MISC_MASK_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820034ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_MISC_MASK_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_MISC_MASK_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820014ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_MISC_MASK_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820014ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_MISC_RINT
value|CVMX_ENDOR_INTC_MISC_RINT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_MISC_RINT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_MISC_RINT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820194ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_MISC_RINT
value|(CVMX_ADD_IO_SEG(0x00010F0000820194ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_MISC_STATUS_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_MISC_STATUS_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008200B4ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_MISC_STATUS_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008200B4ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_MISC_STATUS_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_MISC_STATUS_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820094ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_MISC_STATUS_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820094ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RDQ_IDX_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RDQ_IDX_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000082012Cull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RDQ_IDX_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F000082012Cull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RDQ_IDX_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RDQ_IDX_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000082010Cull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RDQ_IDX_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F000082010Cull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RDQ_MASK_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RDQ_MASK_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000082002Cull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RDQ_MASK_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F000082002Cull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RDQ_MASK_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RDQ_MASK_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000082000Cull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RDQ_MASK_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F000082000Cull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RDQ_RINT
value|CVMX_ENDOR_INTC_RDQ_RINT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RDQ_RINT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RDQ_RINT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000082018Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RDQ_RINT
value|(CVMX_ADD_IO_SEG(0x00010F000082018Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RDQ_STATUS_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RDQ_STATUS_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008200ACull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RDQ_STATUS_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008200ACull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RDQ_STATUS_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RDQ_STATUS_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000082008Cull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RDQ_STATUS_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F000082008Cull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RD_IDX_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RD_IDX_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820124ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RD_IDX_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820124ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RD_IDX_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RD_IDX_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820104ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RD_IDX_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820104ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RD_MASK_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RD_MASK_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820024ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RD_MASK_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820024ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RD_MASK_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RD_MASK_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820004ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RD_MASK_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820004ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RD_RINT
value|CVMX_ENDOR_INTC_RD_RINT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RD_RINT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RD_RINT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820184ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RD_RINT
value|(CVMX_ADD_IO_SEG(0x00010F0000820184ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RD_STATUS_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RD_STATUS_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008200A4ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RD_STATUS_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008200A4ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_RD_STATUS_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_RD_STATUS_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820084ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_RD_STATUS_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820084ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_STAT_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_STAT_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008201C4ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_STAT_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008201C4ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_STAT_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_STAT_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008201C0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_STAT_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008201C0ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SWCLR
value|CVMX_ENDOR_INTC_SWCLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_SWCLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_SWCLR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820204ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SWCLR
value|(CVMX_ADD_IO_SEG(0x00010F0000820204ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SWSET
value|CVMX_ENDOR_INTC_SWSET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_SWSET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_SWSET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820200ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SWSET
value|(CVMX_ADD_IO_SEG(0x00010F0000820200ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_SW_IDX_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_SW_IDX_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820130ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SW_IDX_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820130ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_SW_IDX_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_SW_IDX_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820110ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SW_IDX_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820110ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_SW_MASK_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_SW_MASK_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820030ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SW_MASK_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820030ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_SW_MASK_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_SW_MASK_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820010ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SW_MASK_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820010ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SW_RINT
value|CVMX_ENDOR_INTC_SW_RINT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_SW_RINT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_SW_RINT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820190ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SW_RINT
value|(CVMX_ADD_IO_SEG(0x00010F0000820190ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_SW_STATUS_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_SW_STATUS_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008200B0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SW_STATUS_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008200B0ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_SW_STATUS_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_SW_STATUS_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820090ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_SW_STATUS_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820090ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WRQ_IDX_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WRQ_IDX_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820128ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WRQ_IDX_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820128ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WRQ_IDX_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WRQ_IDX_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820108ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WRQ_IDX_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820108ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WRQ_MASK_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WRQ_MASK_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820028ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WRQ_MASK_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820028ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WRQ_MASK_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WRQ_MASK_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820008ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WRQ_MASK_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820008ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WRQ_RINT
value|CVMX_ENDOR_INTC_WRQ_RINT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WRQ_RINT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WRQ_RINT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820188ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WRQ_RINT
value|(CVMX_ADD_IO_SEG(0x00010F0000820188ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WRQ_STATUS_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WRQ_STATUS_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008200A8ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WRQ_STATUS_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008200A8ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WRQ_STATUS_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WRQ_STATUS_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820088ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WRQ_STATUS_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820088ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WR_IDX_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WR_IDX_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820120ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WR_IDX_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820120ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WR_IDX_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WR_IDX_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820100ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WR_IDX_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820100ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WR_MASK_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WR_MASK_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820020ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WR_MASK_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820020ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WR_MASK_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WR_MASK_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WR_MASK_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820000ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WR_RINT
value|CVMX_ENDOR_INTC_WR_RINT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WR_RINT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WR_RINT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820180ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WR_RINT
value|(CVMX_ADD_IO_SEG(0x00010F0000820180ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WR_STATUS_HIX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WR_STATUS_HIX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008200A0ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WR_STATUS_HIX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F00008200A0ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_INTC_WR_STATUS_LOX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_INTC_WR_STATUS_LOX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000820080ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|64
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_INTC_WR_STATUS_LOX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000820080ull) + ((offset)& 1) * 64)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR0
value|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832054ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR0
value|(CVMX_ADD_IO_SEG(0x00010F0000832054ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR1
value|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000083205Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR1
value|(CVMX_ADD_IO_SEG(0x00010F000083205Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR2
value|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR2 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832064ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR2
value|(CVMX_ADD_IO_SEG(0x00010F0000832064ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR3
value|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR3 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000083206Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_END_ADDR3
value|(CVMX_ADD_IO_SEG(0x00010F000083206Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR0
value|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832050ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR0
value|(CVMX_ADD_IO_SEG(0x00010F0000832050ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR1
value|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832058ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR1
value|(CVMX_ADD_IO_SEG(0x00010F0000832058ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR2
value|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR2 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832060ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR2
value|(CVMX_ADD_IO_SEG(0x00010F0000832060ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR3
value|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR3 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832068ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_CBUF_START_ADDR3
value|(CVMX_ADD_IO_SEG(0x00010F0000832068ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_CLEAR
value|CVMX_ENDOR_OFS_HMM_INTR_CLEAR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_INTR_CLEAR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_INTR_CLEAR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832018ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_CLEAR
value|(CVMX_ADD_IO_SEG(0x00010F0000832018ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_ENB
value|CVMX_ENDOR_OFS_HMM_INTR_ENB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_INTR_ENB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_INTR_ENB not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000083201Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_ENB
value|(CVMX_ADD_IO_SEG(0x00010F000083201Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_RSTATUS
value|CVMX_ENDOR_OFS_HMM_INTR_RSTATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_INTR_RSTATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_INTR_RSTATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832014ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_RSTATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000832014ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_STATUS
value|CVMX_ENDOR_OFS_HMM_INTR_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_INTR_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_INTR_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000832010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_TEST
value|CVMX_ENDOR_OFS_HMM_INTR_TEST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_INTR_TEST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_INTR_TEST not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832020ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_INTR_TEST
value|(CVMX_ADD_IO_SEG(0x00010F0000832020ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_MODE
value|CVMX_ENDOR_OFS_HMM_MODE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_MODE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_MODE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832004ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_MODE
value|(CVMX_ADD_IO_SEG(0x00010F0000832004ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_START_ADDR0
value|CVMX_ENDOR_OFS_HMM_START_ADDR0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_START_ADDR0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_START_ADDR0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832030ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_START_ADDR0
value|(CVMX_ADD_IO_SEG(0x00010F0000832030ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_START_ADDR1
value|CVMX_ENDOR_OFS_HMM_START_ADDR1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_START_ADDR1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_START_ADDR1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832034ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_START_ADDR1
value|(CVMX_ADD_IO_SEG(0x00010F0000832034ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_START_ADDR2
value|CVMX_ENDOR_OFS_HMM_START_ADDR2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_START_ADDR2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_START_ADDR2 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832038ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_START_ADDR2
value|(CVMX_ADD_IO_SEG(0x00010F0000832038ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_START_ADDR3
value|CVMX_ENDOR_OFS_HMM_START_ADDR3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_START_ADDR3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_START_ADDR3 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000083203Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_START_ADDR3
value|(CVMX_ADD_IO_SEG(0x00010F000083203Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_STATUS
value|CVMX_ENDOR_OFS_HMM_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832000ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000832000ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_XFER_CNT
value|CVMX_ENDOR_OFS_HMM_XFER_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_XFER_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_XFER_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000083202Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_XFER_CNT
value|(CVMX_ADD_IO_SEG(0x00010F000083202Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_XFER_Q_STATUS
value|CVMX_ENDOR_OFS_HMM_XFER_Q_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_XFER_Q_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_XFER_Q_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000083200Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_XFER_Q_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F000083200Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_XFER_START
value|CVMX_ENDOR_OFS_HMM_XFER_START_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_OFS_HMM_XFER_START_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_OFS_HMM_XFER_START not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000832028ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_OFS_HMM_XFER_START
value|(CVMX_ADD_IO_SEG(0x00010F0000832028ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_1PPS_GEN_CFG
value|CVMX_ENDOR_RFIF_1PPS_GEN_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_1PPS_GEN_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_1PPS_GEN_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680CCull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_1PPS_GEN_CFG
value|(CVMX_ADD_IO_SEG(0x00010F00008680CCull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_1PPS_SAMPLE_CNT_OFFSET
value|CVMX_ENDOR_RFIF_1PPS_SAMPLE_CNT_OFFSET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_1PPS_SAMPLE_CNT_OFFSET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_1PPS_SAMPLE_CNT_OFFSET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868104ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_1PPS_SAMPLE_CNT_OFFSET
value|(CVMX_ADD_IO_SEG(0x00010F0000868104ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_1PPS_VERIF_GEN_EN
value|CVMX_ENDOR_RFIF_1PPS_VERIF_GEN_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_1PPS_VERIF_GEN_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_1PPS_VERIF_GEN_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868110ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_1PPS_VERIF_GEN_EN
value|(CVMX_ADD_IO_SEG(0x00010F0000868110ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_1PPS_VERIF_SCNT
value|CVMX_ENDOR_RFIF_1PPS_VERIF_SCNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_1PPS_VERIF_SCNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_1PPS_VERIF_SCNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868114ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_1PPS_VERIF_SCNT
value|(CVMX_ADD_IO_SEG(0x00010F0000868114ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_CONF
value|CVMX_ENDOR_RFIF_CONF_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_CONF_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_CONF not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_CONF
value|(CVMX_ADD_IO_SEG(0x00010F0000868010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_CONF2
value|CVMX_ENDOR_RFIF_CONF2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_CONF2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_CONF2 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000086801Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_CONF2
value|(CVMX_ADD_IO_SEG(0x00010F000086801Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_DSP1_GPIO
value|CVMX_ENDOR_RFIF_DSP1_GPIO_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_DSP1_GPIO_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_DSP1_GPIO not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008684C0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_DSP1_GPIO
value|(CVMX_ADD_IO_SEG(0x00010F00008684C0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_DSP_RX_HIS
value|CVMX_ENDOR_RFIF_DSP_RX_HIS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_DSP_RX_HIS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_DSP_RX_HIS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000086840Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_DSP_RX_HIS
value|(CVMX_ADD_IO_SEG(0x00010F000086840Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_DSP_RX_ISM
value|CVMX_ENDOR_RFIF_DSP_RX_ISM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_DSP_RX_ISM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_DSP_RX_ISM not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868400ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_DSP_RX_ISM
value|(CVMX_ADD_IO_SEG(0x00010F0000868400ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_FIRS_ENABLE
value|CVMX_ENDOR_RFIF_FIRS_ENABLE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_FIRS_ENABLE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_FIRS_ENABLE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008684C4ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_FIRS_ENABLE
value|(CVMX_ADD_IO_SEG(0x00010F00008684C4ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_FRAME_CNT
value|CVMX_ENDOR_RFIF_FRAME_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_FRAME_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_FRAME_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868030ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_FRAME_CNT
value|(CVMX_ADD_IO_SEG(0x00010F0000868030ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_FRAME_L
value|CVMX_ENDOR_RFIF_FRAME_L_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_FRAME_L_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_FRAME_L not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868014ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_FRAME_L
value|(CVMX_ADD_IO_SEG(0x00010F0000868014ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_GPIO_X
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_GPIO_X(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868418ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_GPIO_X
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000868418ull) + ((offset)& 3) * 4)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_MAX_SAMPLE_ADJ
value|CVMX_ENDOR_RFIF_MAX_SAMPLE_ADJ_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_MAX_SAMPLE_ADJ_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_MAX_SAMPLE_ADJ not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680DCull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_MAX_SAMPLE_ADJ
value|(CVMX_ADD_IO_SEG(0x00010F00008680DCull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_MIN_SAMPLE_ADJ
value|CVMX_ENDOR_RFIF_MIN_SAMPLE_ADJ_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_MIN_SAMPLE_ADJ_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_MIN_SAMPLE_ADJ not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680E0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_MIN_SAMPLE_ADJ
value|(CVMX_ADD_IO_SEG(0x00010F00008680E0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_NUM_RX_WIN
value|CVMX_ENDOR_RFIF_NUM_RX_WIN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_NUM_RX_WIN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_NUM_RX_WIN not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868018ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_NUM_RX_WIN
value|(CVMX_ADD_IO_SEG(0x00010F0000868018ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_PWM_ENABLE
value|CVMX_ENDOR_RFIF_PWM_ENABLE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_PWM_ENABLE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_PWM_ENABLE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868180ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_PWM_ENABLE
value|(CVMX_ADD_IO_SEG(0x00010F0000868180ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_PWM_HIGH_TIME
value|CVMX_ENDOR_RFIF_PWM_HIGH_TIME_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_PWM_HIGH_TIME_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_PWM_HIGH_TIME not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868184ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_PWM_HIGH_TIME
value|(CVMX_ADD_IO_SEG(0x00010F0000868184ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_PWM_LOW_TIME
value|CVMX_ENDOR_RFIF_PWM_LOW_TIME_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_PWM_LOW_TIME_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_PWM_LOW_TIME not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868188ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_PWM_LOW_TIME
value|(CVMX_ADD_IO_SEG(0x00010F0000868188ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RD_TIMER64_LSB
value|CVMX_ENDOR_RFIF_RD_TIMER64_LSB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RD_TIMER64_LSB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RD_TIMER64_LSB not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008681ACull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RD_TIMER64_LSB
value|(CVMX_ADD_IO_SEG(0x00010F00008681ACull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RD_TIMER64_MSB
value|CVMX_ENDOR_RFIF_RD_TIMER64_MSB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RD_TIMER64_MSB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RD_TIMER64_MSB not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008681B0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RD_TIMER64_MSB
value|(CVMX_ADD_IO_SEG(0x00010F00008681B0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_REAL_TIME_TIMER
value|CVMX_ENDOR_RFIF_REAL_TIME_TIMER_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_REAL_TIME_TIMER_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_REAL_TIME_TIMER not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680C8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_REAL_TIME_TIMER
value|(CVMX_ADD_IO_SEG(0x00010F00008680C8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RF_CLK_TIMER
value|CVMX_ENDOR_RFIF_RF_CLK_TIMER_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RF_CLK_TIMER_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RF_CLK_TIMER not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868194ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RF_CLK_TIMER
value|(CVMX_ADD_IO_SEG(0x00010F0000868194ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RF_CLK_TIMER_EN
value|CVMX_ENDOR_RFIF_RF_CLK_TIMER_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RF_CLK_TIMER_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RF_CLK_TIMER_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868198ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RF_CLK_TIMER_EN
value|(CVMX_ADD_IO_SEG(0x00010F0000868198ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_CORRECT_ADJ
value|CVMX_ENDOR_RFIF_RX_CORRECT_ADJ_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_CORRECT_ADJ_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_CORRECT_ADJ not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680E8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_CORRECT_ADJ
value|(CVMX_ADD_IO_SEG(0x00010F00008680E8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_DIV_STATUS
value|CVMX_ENDOR_RFIF_RX_DIV_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_DIV_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_DIV_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868004ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_DIV_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000868004ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_FIFO_CNT
value|CVMX_ENDOR_RFIF_RX_FIFO_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_FIFO_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_FIFO_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868500ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_FIFO_CNT
value|(CVMX_ADD_IO_SEG(0x00010F0000868500ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_IF_CFG
value|CVMX_ENDOR_RFIF_RX_IF_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_IF_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_IF_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868038ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_IF_CFG
value|(CVMX_ADD_IO_SEG(0x00010F0000868038ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_LEAD_LAG
value|CVMX_ENDOR_RFIF_RX_LEAD_LAG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_LEAD_LAG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_LEAD_LAG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868020ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_LEAD_LAG
value|(CVMX_ADD_IO_SEG(0x00010F0000868020ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_LOAD_CFG
value|CVMX_ENDOR_RFIF_RX_LOAD_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_LOAD_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_LOAD_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868508ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_LOAD_CFG
value|(CVMX_ADD_IO_SEG(0x00010F0000868508ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_OFFSET
value|CVMX_ENDOR_RFIF_RX_OFFSET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_OFFSET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_OFFSET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680D4ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_OFFSET
value|(CVMX_ADD_IO_SEG(0x00010F00008680D4ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_OFFSET_ADJ_SCNT
value|CVMX_ENDOR_RFIF_RX_OFFSET_ADJ_SCNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_OFFSET_ADJ_SCNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_OFFSET_ADJ_SCNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868108ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_OFFSET_ADJ_SCNT
value|(CVMX_ADD_IO_SEG(0x00010F0000868108ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_STATUS
value|CVMX_ENDOR_RFIF_RX_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868000ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000868000ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_SYNC_SCNT
value|CVMX_ENDOR_RFIF_RX_SYNC_SCNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_SYNC_SCNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_SYNC_SCNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680C4ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_SYNC_SCNT
value|(CVMX_ADD_IO_SEG(0x00010F00008680C4ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_SYNC_VALUE
value|CVMX_ENDOR_RFIF_RX_SYNC_VALUE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_SYNC_VALUE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_SYNC_VALUE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680C0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_SYNC_VALUE
value|(CVMX_ADD_IO_SEG(0x00010F00008680C0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_TH
value|CVMX_ENDOR_RFIF_RX_TH_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_TH_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_TH not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868410ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_TH
value|(CVMX_ADD_IO_SEG(0x00010F0000868410ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_TRANSFER_SIZE
value|CVMX_ENDOR_RFIF_RX_TRANSFER_SIZE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_TRANSFER_SIZE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_TRANSFER_SIZE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000086850Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_TRANSFER_SIZE
value|(CVMX_ADD_IO_SEG(0x00010F000086850Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_W_EX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_W_EX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868084ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_W_EX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000868084ull) + ((offset)& 3) * 4)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_RX_W_SX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_RX_W_SX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868044ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_RX_W_SX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000868044ull) + ((offset)& 3) * 4)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SAMPLE_ADJ_CFG
value|CVMX_ENDOR_RFIF_SAMPLE_ADJ_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SAMPLE_ADJ_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SAMPLE_ADJ_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680E4ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SAMPLE_ADJ_CFG
value|(CVMX_ADD_IO_SEG(0x00010F00008680E4ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SAMPLE_ADJ_ERROR
value|CVMX_ENDOR_RFIF_SAMPLE_ADJ_ERROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SAMPLE_ADJ_ERROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SAMPLE_ADJ_ERROR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868100ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SAMPLE_ADJ_ERROR
value|(CVMX_ADD_IO_SEG(0x00010F0000868100ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SAMPLE_CNT
value|CVMX_ENDOR_RFIF_SAMPLE_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SAMPLE_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SAMPLE_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868028ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SAMPLE_CNT
value|(CVMX_ADD_IO_SEG(0x00010F0000868028ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SKIP_FRM_CNT_BITS
value|CVMX_ENDOR_RFIF_SKIP_FRM_CNT_BITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SKIP_FRM_CNT_BITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SKIP_FRM_CNT_BITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868444ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SKIP_FRM_CNT_BITS
value|(CVMX_ADD_IO_SEG(0x00010F0000868444ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_CMDSX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_CMDSX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868800ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_CMDSX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000868800ull) + ((offset)& 63) * 4)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_CMD_ATTRX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_CMD_ATTRX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868A00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_CMD_ATTRX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000868A00ull) + ((offset)& 63) * 4)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_CONF0
value|CVMX_ENDOR_RFIF_SPI_CONF0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_CONF0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_CONF0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868428ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_CONF0
value|(CVMX_ADD_IO_SEG(0x00010F0000868428ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_CONF1
value|CVMX_ENDOR_RFIF_SPI_CONF1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_CONF1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_CONF1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000086842Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_CONF1
value|(CVMX_ADD_IO_SEG(0x00010F000086842Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_CTRL
value|CVMX_ENDOR_RFIF_SPI_CTRL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_CTRL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_CTRL not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000866008ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_CTRL
value|(CVMX_ADD_IO_SEG(0x00010F0000866008ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_DINX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|63
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_DINX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868900ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_DINX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000868900ull) + ((offset)& 63) * 4)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_RX_DATA
value|CVMX_ENDOR_RFIF_SPI_RX_DATA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_RX_DATA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_RX_DATA not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000866000ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_RX_DATA
value|(CVMX_ADD_IO_SEG(0x00010F0000866000ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_STATUS
value|CVMX_ENDOR_RFIF_SPI_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000866010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000866010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_TX_DATA
value|CVMX_ENDOR_RFIF_SPI_TX_DATA_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_TX_DATA_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_TX_DATA not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000866004ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_TX_DATA
value|(CVMX_ADD_IO_SEG(0x00010F0000866004ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_SPI_X_LL
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_SPI_X_LL(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868430ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_SPI_X_LL
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000868430ull) + ((offset)& 3) * 4)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TIMER64_CFG
value|CVMX_ENDOR_RFIF_TIMER64_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TIMER64_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TIMER64_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008681A0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TIMER64_CFG
value|(CVMX_ADD_IO_SEG(0x00010F00008681A0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TIMER64_EN
value|CVMX_ENDOR_RFIF_TIMER64_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TIMER64_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TIMER64_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000086819Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TIMER64_EN
value|(CVMX_ADD_IO_SEG(0x00010F000086819Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TTI_SCNT_INTX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TTI_SCNT_INTX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868140ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TTI_SCNT_INTX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000868140ull) + ((offset)& 7) * 4)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_CLR
value|CVMX_ENDOR_RFIF_TTI_SCNT_INT_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TTI_SCNT_INT_CLR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868118ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_CLR
value|(CVMX_ADD_IO_SEG(0x00010F0000868118ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_EN
value|CVMX_ENDOR_RFIF_TTI_SCNT_INT_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TTI_SCNT_INT_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868124ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_EN
value|(CVMX_ADD_IO_SEG(0x00010F0000868124ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_MAP
value|CVMX_ENDOR_RFIF_TTI_SCNT_INT_MAP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_MAP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TTI_SCNT_INT_MAP not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868120ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_MAP
value|(CVMX_ADD_IO_SEG(0x00010F0000868120ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_STAT
value|CVMX_ENDOR_RFIF_TTI_SCNT_INT_STAT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_STAT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TTI_SCNT_INT_STAT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000086811Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TTI_SCNT_INT_STAT
value|(CVMX_ADD_IO_SEG(0x00010F000086811Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_DIV_STATUS
value|CVMX_ENDOR_RFIF_TX_DIV_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TX_DIV_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TX_DIV_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000086800Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_DIV_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F000086800Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_IF_CFG
value|CVMX_ENDOR_RFIF_TX_IF_CFG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TX_IF_CFG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TX_IF_CFG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868034ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_IF_CFG
value|(CVMX_ADD_IO_SEG(0x00010F0000868034ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_LEAD_LAG
value|CVMX_ENDOR_RFIF_TX_LEAD_LAG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TX_LEAD_LAG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TX_LEAD_LAG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868024ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_LEAD_LAG
value|(CVMX_ADD_IO_SEG(0x00010F0000868024ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_OFFSET
value|CVMX_ENDOR_RFIF_TX_OFFSET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TX_OFFSET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TX_OFFSET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008680D8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_OFFSET
value|(CVMX_ADD_IO_SEG(0x00010F00008680D8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_OFFSET_ADJ_SCNT
value|CVMX_ENDOR_RFIF_TX_OFFSET_ADJ_SCNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TX_OFFSET_ADJ_SCNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TX_OFFSET_ADJ_SCNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000086810Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_OFFSET_ADJ_SCNT
value|(CVMX_ADD_IO_SEG(0x00010F000086810Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_STATUS
value|CVMX_ENDOR_RFIF_TX_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TX_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TX_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868008ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000868008ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_TH
value|CVMX_ENDOR_RFIF_TX_TH_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_TX_TH_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_TX_TH not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868414ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_TX_TH
value|(CVMX_ADD_IO_SEG(0x00010F0000868414ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_WIN_EN
value|CVMX_ENDOR_RFIF_WIN_EN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_WIN_EN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_WIN_EN not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000868040ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_WIN_EN
value|(CVMX_ADD_IO_SEG(0x00010F0000868040ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_WIN_UPD_SCNT
value|CVMX_ENDOR_RFIF_WIN_UPD_SCNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_WIN_UPD_SCNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_WIN_UPD_SCNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000086803Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_WIN_UPD_SCNT
value|(CVMX_ADD_IO_SEG(0x00010F000086803Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_WR_TIMER64_LSB
value|CVMX_ENDOR_RFIF_WR_TIMER64_LSB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_WR_TIMER64_LSB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_WR_TIMER64_LSB not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008681A4ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_WR_TIMER64_LSB
value|(CVMX_ADD_IO_SEG(0x00010F00008681A4ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_WR_TIMER64_MSB
value|CVMX_ENDOR_RFIF_WR_TIMER64_MSB_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RFIF_WR_TIMER64_MSB_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RFIF_WR_TIMER64_MSB not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008681A8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RFIF_WR_TIMER64_MSB
value|(CVMX_ADD_IO_SEG(0x00010F00008681A8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB0_CLR
value|CVMX_ENDOR_RSTCLK_CLKENB0_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_CLKENB0_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_CLKENB0_CLR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844428ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB0_CLR
value|(CVMX_ADD_IO_SEG(0x00010F0000844428ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB0_SET
value|CVMX_ENDOR_RSTCLK_CLKENB0_SET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_CLKENB0_SET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_CLKENB0_SET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844424ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB0_SET
value|(CVMX_ADD_IO_SEG(0x00010F0000844424ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB0_STATE
value|CVMX_ENDOR_RSTCLK_CLKENB0_STATE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_CLKENB0_STATE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_CLKENB0_STATE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844420ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB0_STATE
value|(CVMX_ADD_IO_SEG(0x00010F0000844420ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB1_CLR
value|CVMX_ENDOR_RSTCLK_CLKENB1_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_CLKENB1_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_CLKENB1_CLR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844438ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB1_CLR
value|(CVMX_ADD_IO_SEG(0x00010F0000844438ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB1_SET
value|CVMX_ENDOR_RSTCLK_CLKENB1_SET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_CLKENB1_SET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_CLKENB1_SET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844434ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB1_SET
value|(CVMX_ADD_IO_SEG(0x00010F0000844434ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB1_STATE
value|CVMX_ENDOR_RSTCLK_CLKENB1_STATE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_CLKENB1_STATE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_CLKENB1_STATE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844430ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_CLKENB1_STATE
value|(CVMX_ADD_IO_SEG(0x00010F0000844430ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_DSPSTALL_CLR
value|CVMX_ENDOR_RSTCLK_DSPSTALL_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_DSPSTALL_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_DSPSTALL_CLR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844448ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_DSPSTALL_CLR
value|(CVMX_ADD_IO_SEG(0x00010F0000844448ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_DSPSTALL_SET
value|CVMX_ENDOR_RSTCLK_DSPSTALL_SET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_DSPSTALL_SET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_DSPSTALL_SET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844444ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_DSPSTALL_SET
value|(CVMX_ADD_IO_SEG(0x00010F0000844444ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_DSPSTALL_STATE
value|CVMX_ENDOR_RSTCLK_DSPSTALL_STATE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_DSPSTALL_STATE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_DSPSTALL_STATE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844440ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_DSPSTALL_STATE
value|(CVMX_ADD_IO_SEG(0x00010F0000844440ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR0_CLRMASK
value|CVMX_ENDOR_RSTCLK_INTR0_CLRMASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_INTR0_CLRMASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_INTR0_CLRMASK not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844598ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR0_CLRMASK
value|(CVMX_ADD_IO_SEG(0x00010F0000844598ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR0_MASK
value|CVMX_ENDOR_RSTCLK_INTR0_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_INTR0_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_INTR0_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844590ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR0_MASK
value|(CVMX_ADD_IO_SEG(0x00010F0000844590ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR0_SETMASK
value|CVMX_ENDOR_RSTCLK_INTR0_SETMASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_INTR0_SETMASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_INTR0_SETMASK not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844594ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR0_SETMASK
value|(CVMX_ADD_IO_SEG(0x00010F0000844594ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR0_STATUS
value|CVMX_ENDOR_RSTCLK_INTR0_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_INTR0_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_INTR0_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F000084459Cull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR0_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F000084459Cull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR1_CLRMASK
value|CVMX_ENDOR_RSTCLK_INTR1_CLRMASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_INTR1_CLRMASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_INTR1_CLRMASK not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008445A8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR1_CLRMASK
value|(CVMX_ADD_IO_SEG(0x00010F00008445A8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR1_MASK
value|CVMX_ENDOR_RSTCLK_INTR1_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_INTR1_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_INTR1_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008445A0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR1_MASK
value|(CVMX_ADD_IO_SEG(0x00010F00008445A0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR1_SETMASK
value|CVMX_ENDOR_RSTCLK_INTR1_SETMASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_INTR1_SETMASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_INTR1_SETMASK not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008445A4ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR1_SETMASK
value|(CVMX_ADD_IO_SEG(0x00010F00008445A4ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR1_STATUS
value|CVMX_ENDOR_RSTCLK_INTR1_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_INTR1_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_INTR1_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008445ACull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_INTR1_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F00008445ACull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_PHY_CONFIG
value|CVMX_ENDOR_RSTCLK_PHY_CONFIG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_PHY_CONFIG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_PHY_CONFIG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844450ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_PHY_CONFIG
value|(CVMX_ADD_IO_SEG(0x00010F0000844450ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_PROC_MON
value|CVMX_ENDOR_RSTCLK_PROC_MON_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_PROC_MON_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_PROC_MON not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008445B0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_PROC_MON
value|(CVMX_ADD_IO_SEG(0x00010F00008445B0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_PROC_MON_COUNT
value|CVMX_ENDOR_RSTCLK_PROC_MON_COUNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_PROC_MON_COUNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_PROC_MON_COUNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F00008445B4ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_PROC_MON_COUNT
value|(CVMX_ADD_IO_SEG(0x00010F00008445B4ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET0_CLR
value|CVMX_ENDOR_RSTCLK_RESET0_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_RESET0_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_RESET0_CLR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844408ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET0_CLR
value|(CVMX_ADD_IO_SEG(0x00010F0000844408ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET0_SET
value|CVMX_ENDOR_RSTCLK_RESET0_SET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_RESET0_SET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_RESET0_SET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844404ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET0_SET
value|(CVMX_ADD_IO_SEG(0x00010F0000844404ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET0_STATE
value|CVMX_ENDOR_RSTCLK_RESET0_STATE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_RESET0_STATE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_RESET0_STATE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844400ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET0_STATE
value|(CVMX_ADD_IO_SEG(0x00010F0000844400ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET1_CLR
value|CVMX_ENDOR_RSTCLK_RESET1_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_RESET1_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_RESET1_CLR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844418ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET1_CLR
value|(CVMX_ADD_IO_SEG(0x00010F0000844418ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET1_SET
value|CVMX_ENDOR_RSTCLK_RESET1_SET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_RESET1_SET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_RESET1_SET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844414ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET1_SET
value|(CVMX_ADD_IO_SEG(0x00010F0000844414ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET1_STATE
value|CVMX_ENDOR_RSTCLK_RESET1_STATE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_RESET1_STATE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_RESET1_STATE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844410ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_RESET1_STATE
value|(CVMX_ADD_IO_SEG(0x00010F0000844410ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_SW_INTR_CLR
value|CVMX_ENDOR_RSTCLK_SW_INTR_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_SW_INTR_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_SW_INTR_CLR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844588ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_SW_INTR_CLR
value|(CVMX_ADD_IO_SEG(0x00010F0000844588ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_SW_INTR_SET
value|CVMX_ENDOR_RSTCLK_SW_INTR_SET_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_SW_INTR_SET_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_SW_INTR_SET not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844584ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_SW_INTR_SET
value|(CVMX_ADD_IO_SEG(0x00010F0000844584ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_SW_INTR_STATUS
value|CVMX_ENDOR_RSTCLK_SW_INTR_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_SW_INTR_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_SW_INTR_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844580ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_SW_INTR_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000844580ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_CTL
value|CVMX_ENDOR_RSTCLK_TIMER_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_TIMER_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_TIMER_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844500ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_CTL
value|(CVMX_ADD_IO_SEG(0x00010F0000844500ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_INTR_CLR
value|CVMX_ENDOR_RSTCLK_TIMER_INTR_CLR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_TIMER_INTR_CLR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_TIMER_INTR_CLR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844534ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_INTR_CLR
value|(CVMX_ADD_IO_SEG(0x00010F0000844534ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_INTR_STATUS
value|CVMX_ENDOR_RSTCLK_TIMER_INTR_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_TIMER_INTR_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_TIMER_INTR_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844530ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_INTR_STATUS
value|(CVMX_ADD_IO_SEG(0x00010F0000844530ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_MAX
value|CVMX_ENDOR_RSTCLK_TIMER_MAX_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_TIMER_MAX_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_TIMER_MAX not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844508ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_MAX
value|(CVMX_ADD_IO_SEG(0x00010F0000844508ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_VALUE
value|CVMX_ENDOR_RSTCLK_TIMER_VALUE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_TIMER_VALUE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_TIMER_VALUE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844504ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMER_VALUE
value|(CVMX_ADD_IO_SEG(0x00010F0000844504ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_TIMEX_THRD
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_TIMEX_THRD(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844510ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|4
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_TIMEX_THRD
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010F0000844510ull) + ((offset)& 7) * 4)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_VERSION
value|CVMX_ENDOR_RSTCLK_VERSION_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ENDOR_RSTCLK_VERSION_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ENDOR_RSTCLK_VERSION not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010F0000844570ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ENDOR_RSTCLK_VERSION
value|(CVMX_ADD_IO_SEG(0x00010F0000844570ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_endor_adma_auto_clk_gate  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_auto_clk_gate
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_auto_clk_gate_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|auto_gate
range|:
literal|1
decl_stmt|;
comment|/**< 1==enable auto-clock-gating */
else|#
directive|else
name|uint32_t
name|auto_gate
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_auto_clk_gate_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_auto_clk_gate
name|cvmx_endor_adma_auto_clk_gate_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_axi_rspcode  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_axi_rspcode
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_axi_rspcode_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
name|uint32_t
name|ch7_axi_rspcode
range|:
literal|2
decl_stmt|;
comment|/**< dma \#7 AXI response code */
name|uint32_t
name|ch6_axi_rspcode
range|:
literal|2
decl_stmt|;
comment|/**< dma \#6 AXI response code */
name|uint32_t
name|ch5_axi_rspcode
range|:
literal|2
decl_stmt|;
comment|/**< dma \#5 AXI response code */
name|uint32_t
name|ch4_axi_rspcode
range|:
literal|2
decl_stmt|;
comment|/**< dma \#4 AXI response code */
name|uint32_t
name|ch3_axi_rspcode
range|:
literal|2
decl_stmt|;
comment|/**< dma \#3 AXI response code */
name|uint32_t
name|ch2_axi_rspcode
range|:
literal|2
decl_stmt|;
comment|/**< dma \#2 AXI response code */
name|uint32_t
name|ch1_axi_rspcode
range|:
literal|2
decl_stmt|;
comment|/**< dma \#1 AXI response code */
name|uint32_t
name|ch0_axi_rspcode
range|:
literal|2
decl_stmt|;
comment|/**< dma \#0 AXI response code */
else|#
directive|else
name|uint32_t
name|ch0_axi_rspcode
range|:
literal|2
decl_stmt|;
name|uint32_t
name|ch1_axi_rspcode
range|:
literal|2
decl_stmt|;
name|uint32_t
name|ch2_axi_rspcode
range|:
literal|2
decl_stmt|;
name|uint32_t
name|ch3_axi_rspcode
range|:
literal|2
decl_stmt|;
name|uint32_t
name|ch4_axi_rspcode
range|:
literal|2
decl_stmt|;
name|uint32_t
name|ch5_axi_rspcode
range|:
literal|2
decl_stmt|;
name|uint32_t
name|ch6_axi_rspcode
range|:
literal|2
decl_stmt|;
name|uint32_t
name|ch7_axi_rspcode
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_axi_rspcode_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_axi_rspcode
name|cvmx_endor_adma_axi_rspcode_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_axi_signal  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_axi_signal
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_axi_signal_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_25_31
range|:
literal|7
decl_stmt|;
name|uint32_t
name|awcobuf
range|:
literal|1
decl_stmt|;
comment|/**< ADMA_COBUF */
name|uint32_t
name|reserved_10_23
range|:
literal|14
decl_stmt|;
name|uint32_t
name|awlock
range|:
literal|2
decl_stmt|;
comment|/**< ADMA_AWLOCK */
name|uint32_t
name|reserved_2_7
range|:
literal|6
decl_stmt|;
name|uint32_t
name|arlock
range|:
literal|2
decl_stmt|;
comment|/**< ADMA_ARLOCK */
else|#
directive|else
name|uint32_t
name|arlock
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved_2_7
range|:
literal|6
decl_stmt|;
name|uint32_t
name|awlock
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved_10_23
range|:
literal|14
decl_stmt|;
name|uint32_t
name|awcobuf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_25_31
range|:
literal|7
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_axi_signal_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_axi_signal
name|cvmx_endor_adma_axi_signal_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_axierr_intr  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_axierr_intr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_axierr_intr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|axi_err_int
range|:
literal|1
decl_stmt|;
comment|/**< AXI Error interrupt */
else|#
directive|else
name|uint32_t
name|axi_err_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_axierr_intr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_axierr_intr
name|cvmx_endor_adma_axierr_intr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_dma#_addr_hi  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_dmax_addr_hi
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_dmax_addr_hi_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|hi_addr
range|:
literal|8
decl_stmt|;
comment|/**< dma low address[63:32] */
else|#
directive|else
name|uint32_t
name|hi_addr
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_dmax_addr_hi_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_dmax_addr_hi
name|cvmx_endor_adma_dmax_addr_hi_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_dma#_addr_lo  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_dmax_addr_lo
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_dmax_addr_lo_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|lo_addr
range|:
literal|32
decl_stmt|;
comment|/**< dma low address[31:0] */
else|#
directive|else
name|uint32_t
name|lo_addr
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_dmax_addr_lo_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_dmax_addr_lo
name|cvmx_endor_adma_dmax_addr_lo_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_dma#_cfg  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_dmax_cfg
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_dmax_cfg_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_25_31
range|:
literal|7
decl_stmt|;
name|uint32_t
name|endian
range|:
literal|1
decl_stmt|;
comment|/**< 0==byte-swap, 1==word */
name|uint32_t
name|reserved_18_23
range|:
literal|6
decl_stmt|;
name|uint32_t
name|hmm_ofs
range|:
literal|2
decl_stmt|;
comment|/**< HMM memory byte offset */
name|uint32_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint32_t
name|awcache_lbm
range|:
literal|1
decl_stmt|;
comment|/**< AWCACHE last burst mode, 1==force 0 on the last write data */
name|uint32_t
name|awcache
range|:
literal|4
decl_stmt|;
comment|/**< ADMA_AWCACHE */
name|uint32_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint32_t
name|bst_bound
range|:
literal|1
decl_stmt|;
comment|/**< burst boundary (0==4kB, 1==128 byte) */
name|uint32_t
name|max_bstlen
range|:
literal|1
decl_stmt|;
comment|/**< maximum burst length(0==8 dword) */
name|uint32_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint32_t
name|enable
range|:
literal|1
decl_stmt|;
comment|/**< 1 == dma enable */
else|#
directive|else
name|uint32_t
name|enable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint32_t
name|max_bstlen
range|:
literal|1
decl_stmt|;
name|uint32_t
name|bst_bound
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint32_t
name|awcache
range|:
literal|4
decl_stmt|;
name|uint32_t
name|awcache_lbm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint32_t
name|hmm_ofs
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved_18_23
range|:
literal|6
decl_stmt|;
name|uint32_t
name|endian
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_25_31
range|:
literal|7
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_dmax_cfg_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_dmax_cfg
name|cvmx_endor_adma_dmax_cfg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_dma#_size  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_dmax_size
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_dmax_size_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint32_t
name|dma_size
range|:
literal|18
decl_stmt|;
comment|/**< dma transfer byte size */
else|#
directive|else
name|uint32_t
name|dma_size
range|:
literal|18
decl_stmt|;
name|uint32_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_dmax_size_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_dmax_size
name|cvmx_endor_adma_dmax_size_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_dma_priority  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_dma_priority
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_dma_priority_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|rdma_rr_prty
range|:
literal|1
decl_stmt|;
comment|/**< 1 == round-robin for DMA read channel */
name|uint32_t
name|wdma_rr_prty
range|:
literal|1
decl_stmt|;
comment|/**< 1 == round-robin for DMA write channel */
name|uint32_t
name|wdma_fix_prty
range|:
literal|4
decl_stmt|;
comment|/**< dma fixed priority */
else|#
directive|else
name|uint32_t
name|wdma_fix_prty
range|:
literal|4
decl_stmt|;
name|uint32_t
name|wdma_rr_prty
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rdma_rr_prty
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_dma_priority_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_dma_priority
name|cvmx_endor_adma_dma_priority_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_dma_reset  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_dma_reset
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_dma_reset_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|dma_ch_reset
range|:
literal|8
decl_stmt|;
comment|/**< dma channel reset */
else|#
directive|else
name|uint32_t
name|dma_ch_reset
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_dma_reset_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_dma_reset
name|cvmx_endor_adma_dma_reset_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_dmadone_intr  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_dmadone_intr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_dmadone_intr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|dma_ch_done
range|:
literal|8
decl_stmt|;
comment|/**< done-interrupt status of the DMA channel */
else|#
directive|else
name|uint32_t
name|dma_ch_done
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_dmadone_intr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_dmadone_intr
name|cvmx_endor_adma_dmadone_intr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_intr_dis  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_intr_dis
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_intr_dis_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_17_31
range|:
literal|15
decl_stmt|;
name|uint32_t
name|axierr_intr_dis
range|:
literal|1
decl_stmt|;
comment|/**< AXI Error interrupt disable (1==enable) */
name|uint32_t
name|dmadone_intr_dis
range|:
literal|16
decl_stmt|;
comment|/**< dma done interrupt disable (1==enable) */
else|#
directive|else
name|uint32_t
name|dmadone_intr_dis
range|:
literal|16
decl_stmt|;
name|uint32_t
name|axierr_intr_dis
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_17_31
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_intr_dis_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_intr_dis
name|cvmx_endor_adma_intr_dis_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_intr_enb  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_intr_enb
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_intr_enb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_17_31
range|:
literal|15
decl_stmt|;
name|uint32_t
name|axierr_intr_enb
range|:
literal|1
decl_stmt|;
comment|/**< AXI Error interrupt enable (1==enable) */
name|uint32_t
name|dmadone_intr_enb
range|:
literal|16
decl_stmt|;
comment|/**< dma done interrupt enable (1==enable) */
else|#
directive|else
name|uint32_t
name|dmadone_intr_enb
range|:
literal|16
decl_stmt|;
name|uint32_t
name|axierr_intr_enb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_17_31
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_intr_enb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_intr_enb
name|cvmx_endor_adma_intr_enb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_adma_module_status  */
end_comment

begin_union
union|union
name|cvmx_endor_adma_module_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_adma_module_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
name|uint32_t
name|non_dmardch_stt
range|:
literal|1
decl_stmt|;
comment|/**< non-DMA read channel status */
name|uint32_t
name|non_dmawrch_stt
range|:
literal|1
decl_stmt|;
comment|/**< non-DMA write channel status (1==transfer in progress) */
name|uint32_t
name|dma_ch_stt
range|:
literal|14
decl_stmt|;
comment|/**< dma channel status (1==transfer in progress)                                                          blah, blah */
else|#
directive|else
name|uint32_t
name|dma_ch_stt
range|:
literal|14
decl_stmt|;
name|uint32_t
name|non_dmawrch_stt
range|:
literal|1
decl_stmt|;
name|uint32_t
name|non_dmardch_stt
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_adma_module_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_adma_module_status
name|cvmx_endor_adma_module_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_cntl_hi#  *  * ENDOR_INTC_CNTL_HI - Interrupt Enable HI  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_cntl_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_cntl_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|enab
range|:
literal|1
decl_stmt|;
comment|/**< Interrupt Enable */
else|#
directive|else
name|uint32_t
name|enab
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_cntl_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_cntl_hix
name|cvmx_endor_intc_cntl_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_cntl_lo#  *  * ENDOR_INTC_CNTL_LO - Interrupt Enable LO  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_cntl_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_cntl_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|enab
range|:
literal|1
decl_stmt|;
comment|/**< Interrupt Enable */
else|#
directive|else
name|uint32_t
name|enab
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_cntl_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_cntl_lox
name|cvmx_endor_intc_cntl_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_index_hi#  *  * ENDOR_INTC_INDEX_HI - Overall Index HI  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_index_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_index_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_9_31
range|:
literal|23
decl_stmt|;
name|uint32_t
name|index
range|:
literal|9
decl_stmt|;
comment|/**< Overall Interrup Index */
else|#
directive|else
name|uint32_t
name|index
range|:
literal|9
decl_stmt|;
name|uint32_t
name|reserved_9_31
range|:
literal|23
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_index_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_index_hix
name|cvmx_endor_intc_index_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_index_lo#  *  * ENDOR_INTC_INDEX_LO - Overall Index LO  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_index_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_index_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_9_31
range|:
literal|23
decl_stmt|;
name|uint32_t
name|index
range|:
literal|9
decl_stmt|;
comment|/**< Overall Interrup Index */
else|#
directive|else
name|uint32_t
name|index
range|:
literal|9
decl_stmt|;
name|uint32_t
name|reserved_9_31
range|:
literal|23
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_index_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_index_lox
name|cvmx_endor_intc_index_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_misc_idx_hi#  *  * ENDOR_INTC_MISC_IDX_HI - Misc Group Index HI  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_misc_idx_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_misc_idx_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Misc Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_misc_idx_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_misc_idx_hix
name|cvmx_endor_intc_misc_idx_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_misc_idx_lo#  *  * ENDOR_INTC_MISC_IDX_LO - Misc Group Index LO  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_misc_idx_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_misc_idx_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Misc Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_misc_idx_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_misc_idx_lox
name|cvmx_endor_intc_misc_idx_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_misc_mask_hi#  *  * ENDOR_INTC_MISC_MASK_HI = Interrupt MISC Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_misc_mask_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_misc_mask_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
comment|/**< RX PPS Sync Done */
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
comment|/**< RX SPI Event Skipped */
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 3 */
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 2 */
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 1 */
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 0 */
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
comment|/**< RX Start RX */
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
comment|/**< RX Start Frame */
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO flags asserted */
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO Threshhold reached */
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO flags asserted */
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO Threshhold reached */
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
comment|/**< TTI Timer Interrupt */
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
comment|/**< AXI Bus Error */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< RFSPI Interrupt */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR HAB Interrupt */
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
comment|/**< 3G Encoder HAB Interrupt */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder HAB Interrupt */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder HAB Interrupt */
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Read Done */
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Interrupt */
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
comment|/**< DFTDMP HAB Interrupt */
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
comment|/**< RACH HAB Interrupt */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE HAB Interrupt */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_misc_mask_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_misc_mask_hix
name|cvmx_endor_intc_misc_mask_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_misc_mask_lo#  *  * ENDOR_INTC_MISC_MASK_LO = Interrupt MISC Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_misc_mask_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_misc_mask_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
comment|/**< RX PPS Sync Done */
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
comment|/**< RX SPI Event Skipped */
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 3 */
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 2 */
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 1 */
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 0 */
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
comment|/**< RX Start RX */
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
comment|/**< RX Start Frame */
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO flags asserted */
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO Threshhold reached */
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO flags asserted */
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO Threshhold reached */
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
comment|/**< TTI Timer Interrupt */
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
comment|/**< AXI Bus Error */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< RFSPI Interrupt */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR HAB Interrupt */
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
comment|/**< 3G Encoder HAB Interrupt */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder HAB Interrupt */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder HAB Interrupt */
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Read Done */
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Interrupt */
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
comment|/**< DFTDMP HAB Interrupt */
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
comment|/**< RACH HAB Interrupt */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE HAB Interrupt */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_misc_mask_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_misc_mask_lox
name|cvmx_endor_intc_misc_mask_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_misc_rint  *  * ENDOR_INTC_MISC_RINT - MISC Raw Interrupt Status  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_misc_rint
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_misc_rint_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
comment|/**< RX PPS Sync Done */
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
comment|/**< RX SPI Event Skipped */
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 3 */
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 2 */
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 1 */
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 0 */
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
comment|/**< RX Start RX */
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
comment|/**< RX Start Frame */
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO flags asserted */
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO Threshhold reached */
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO flags asserted */
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO Threshhold reached */
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
comment|/**< TTI Timer Interrupt */
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
comment|/**< AXI Bus Error */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< RFSPI Interrupt */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR HAB Interrupt */
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
comment|/**< 3G Encoder HAB Interrupt */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder HAB Interrupt */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder HAB Interrupt */
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Read Done */
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Interrupt */
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
comment|/**< DFTDMP HAB Interrupt */
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
comment|/**< RACH HAB Interrupt */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE HAB Interrupt */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_misc_rint_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_misc_rint
name|cvmx_endor_intc_misc_rint_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_misc_status_hi#  *  * ENDOR_INTC_MISC_STATUS_HI = Interrupt MISC Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_misc_status_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_misc_status_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
comment|/**< RX PPS Sync Done */
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
comment|/**< RX SPI Event Skipped */
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 3 */
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 2 */
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 1 */
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 0 */
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
comment|/**< RX Start RX */
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
comment|/**< RX Start Frame */
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO flags asserted */
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO Threshhold reached */
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO flags asserted */
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO Threshhold reached */
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
comment|/**< TTI Timer Interrupt */
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
comment|/**< AXI Bus Error */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< RFSPI Interrupt */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR HAB Interrupt */
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
comment|/**< 3G Encoder HAB Interrupt */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder HAB Interrupt */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder HAB Interrupt */
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Read Done */
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Interrupt */
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
comment|/**< DFTDMP HAB Interrupt */
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
comment|/**< RACH HAB Interrupt */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE HAB Interrupt */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_misc_status_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_misc_status_hix
name|cvmx_endor_intc_misc_status_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_misc_status_lo#  *  * ENDOR_INTC_MISC_STATUS_LO = Interrupt MISC Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_misc_status_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_misc_status_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
comment|/**< RX PPS Sync Done */
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
comment|/**< RX SPI Event Skipped */
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 3 */
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 2 */
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 1 */
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
comment|/**< SPI Transfer Done Event 0 */
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
comment|/**< RX Start RX */
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
comment|/**< RX Start Frame */
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO flags asserted */
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV FIFO Threshhold reached */
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO flags asserted */
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
comment|/**< RX FIFO Threshhold reached */
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
comment|/**< TTI Timer Interrupt */
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
comment|/**< AXI Bus Error */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< RFSPI Interrupt */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR HAB Interrupt */
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
comment|/**< 3G Encoder HAB Interrupt */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder HAB Interrupt */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder HAB Interrupt */
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Read Done */
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< TURBO Decoder HAB Interrupt */
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
comment|/**< DFTDMP HAB Interrupt */
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
comment|/**< RACH HAB Interrupt */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE HAB Interrupt */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rach
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_done
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_rddone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|h3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_berr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tti_timer
range|:
literal|8
decl_stmt|;
name|uint32_t
name|rf_rx_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffthresh
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rxd_ffflag
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_stframe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_strx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_spi3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_spiskip
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rf_rx_ppssync
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_misc_status_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_misc_status_lox
name|cvmx_endor_intc_misc_status_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rd_idx_hi#  *  * ENDOR_INTC_RD_IDX_HI - Read Done Group Index HI  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rd_idx_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rd_idx_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Read Done Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rd_idx_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rd_idx_hix
name|cvmx_endor_intc_rd_idx_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rd_idx_lo#  *  * ENDOR_INTC_RD_IDX_LO - Read Done Group Index LO  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rd_idx_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rd_idx_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Read Done Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rd_idx_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rd_idx_lox
name|cvmx_endor_intc_rd_idx_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rd_mask_hi#  *  * ENDOR_INTC_RD_MASK_HI = Interrupt Read Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rd_mask_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rd_mask_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rd_mask_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rd_mask_hix
name|cvmx_endor_intc_rd_mask_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rd_mask_lo#  *  * ENDOR_INTC_RD_MASK_LO = Interrupt Read Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rd_mask_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rd_mask_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rd_mask_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rd_mask_lox
name|cvmx_endor_intc_rd_mask_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rd_rint  *  * ENDOR_INTC_RD_RINT - Read Done Group Raw Interrupt Status  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rd_rint
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rd_rint_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rd_rint_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rd_rint
name|cvmx_endor_intc_rd_rint_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rd_status_hi#  *  * ENDOR_INTC_RD_STATUS_HI = Interrupt Read Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rd_status_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rd_status_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rd_status_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rd_status_hix
name|cvmx_endor_intc_rd_status_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rd_status_lo#  *  * ENDOR_INTC_RD_STATUS_LO = Interrupt Read Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rd_status_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rd_status_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rd_status_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rd_status_lox
name|cvmx_endor_intc_rd_status_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rdq_idx_hi#  *  * ENDOR_INTC_RDQ_IDX_HI - Read Queue Done Group Index HI  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rdq_idx_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rdq_idx_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Read Queue Done Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rdq_idx_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rdq_idx_hix
name|cvmx_endor_intc_rdq_idx_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rdq_idx_lo#  *  * ENDOR_INTC_RDQ_IDX_LO - Read Queue Done Group Index LO  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rdq_idx_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rdq_idx_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Read Queue Done Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rdq_idx_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rdq_idx_lox
name|cvmx_endor_intc_rdq_idx_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rdq_mask_hi#  *  * ENDOR_INTC_RDQ_MASK_HI = Interrupt Read Queue Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rdq_mask_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rdq_mask_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rdq_mask_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rdq_mask_hix
name|cvmx_endor_intc_rdq_mask_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rdq_mask_lo#  *  * ENDOR_INTC_RDQ_MASK_LO = Interrupt Read Queue Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rdq_mask_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rdq_mask_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rdq_mask_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rdq_mask_lox
name|cvmx_endor_intc_rdq_mask_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rdq_rint  *  * ENDOR_INTC_RDQ_RINT - Read Queue Done Group Raw Interrupt Status  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rdq_rint
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rdq_rint_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rdq_rint_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rdq_rint
name|cvmx_endor_intc_rdq_rint_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rdq_status_hi#  *  * ENDOR_INTC_RDQ_STATUS_HI = Interrupt Read Queue Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rdq_status_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rdq_status_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rdq_status_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rdq_status_hix
name|cvmx_endor_intc_rdq_status_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_rdq_status_lo#  *  * ENDOR_INTC_RDQ_STATUS_LO = Interrupt Read Queue Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_rdq_status_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_rdq_status_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Read Done */
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Read Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< TX to PHY Read Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Read Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to PHY Read Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Read Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Read Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to PHY Read Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Read Done */
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_RM Read Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Read Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Read Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Read Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Read Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Read Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Read Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Read Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Read Done */
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
comment|/**< RACH Read Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_rm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_rdq_status_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_rdq_status_lox
name|cvmx_endor_intc_rdq_status_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_stat_hi#  *  * ENDOR_INTC_STAT_HI - Grouped Interrupt Status HI  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_stat_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_stat_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|misc
range|:
literal|1
decl_stmt|;
comment|/**< Misc Group Interrupt */
name|uint32_t
name|sw
range|:
literal|1
decl_stmt|;
comment|/**< SW Group Interrupt */
name|uint32_t
name|wrqdone
range|:
literal|1
decl_stmt|;
comment|/**< Write  Queue Done Group Interrupt */
name|uint32_t
name|rdqdone
range|:
literal|1
decl_stmt|;
comment|/**< Read  Queue Done Group Interrupt */
name|uint32_t
name|rddone
range|:
literal|1
decl_stmt|;
comment|/**< Read  Done Group Interrupt */
name|uint32_t
name|wrdone
range|:
literal|1
decl_stmt|;
comment|/**< Write Done Group Interrupt */
else|#
directive|else
name|uint32_t
name|wrdone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rddone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rdqdone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|wrqdone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|sw
range|:
literal|1
decl_stmt|;
name|uint32_t
name|misc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_stat_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_stat_hix
name|cvmx_endor_intc_stat_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_stat_lo#  *  * ENDOR_INTC_STAT_LO - Grouped Interrupt Status LO  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_stat_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_stat_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|misc
range|:
literal|1
decl_stmt|;
comment|/**< Misc Group Interrupt */
name|uint32_t
name|sw
range|:
literal|1
decl_stmt|;
comment|/**< SW Group Interrupt */
name|uint32_t
name|wrqdone
range|:
literal|1
decl_stmt|;
comment|/**< Write  Queue Done Group Interrupt */
name|uint32_t
name|rdqdone
range|:
literal|1
decl_stmt|;
comment|/**< Read  Queue Done Group Interrupt */
name|uint32_t
name|rddone
range|:
literal|1
decl_stmt|;
comment|/**< Read  Done Group Interrupt */
name|uint32_t
name|wrdone
range|:
literal|1
decl_stmt|;
comment|/**< Write Done Group Interrupt */
else|#
directive|else
name|uint32_t
name|wrdone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rddone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rdqdone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|wrqdone
range|:
literal|1
decl_stmt|;
name|uint32_t
name|sw
range|:
literal|1
decl_stmt|;
name|uint32_t
name|misc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_stat_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_stat_lox
name|cvmx_endor_intc_stat_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_sw_idx_hi#  *  * ENDOR_INTC_SW_IDX_HI - SW Group Index HI  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_sw_idx_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_sw_idx_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< SW Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_sw_idx_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_sw_idx_hix
name|cvmx_endor_intc_sw_idx_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_sw_idx_lo#  *  * ENDOR_INTC_SW_IDX_LO - SW Group Index LO  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_sw_idx_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_sw_idx_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< SW Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_sw_idx_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_sw_idx_lox
name|cvmx_endor_intc_sw_idx_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_sw_mask_hi#  *  * ENDOR_INTC_SW_MASK_HI = Interrupt SW Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_sw_mask_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_sw_mask_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_sw_mask_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_sw_mask_hix
name|cvmx_endor_intc_sw_mask_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_sw_mask_lo#  *  * ENDOR_INTC_SW_MASK_LO = Interrupt SW Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_sw_mask_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_sw_mask_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_sw_mask_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_sw_mask_lox
name|cvmx_endor_intc_sw_mask_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_sw_rint  *  * ENDOR_INTC_SW_RINT - SW Raw Interrupt Status  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_sw_rint
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_sw_rint_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_sw_rint_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_sw_rint
name|cvmx_endor_intc_sw_rint_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_sw_status_hi#  *  * ENDOR_INTC_SW_STATUS_HI = Interrupt SW Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_sw_status_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_sw_status_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_sw_status_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_sw_status_hix
name|cvmx_endor_intc_sw_status_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_sw_status_lo#  *  * ENDOR_INTC_SW_STATUS_LO = Interrupt SW Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_sw_status_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_sw_status_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
comment|/**< ULFE Read Done */
else|#
directive|else
name|uint32_t
name|swint
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_sw_status_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_sw_status_lox
name|cvmx_endor_intc_sw_status_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_swclr  *  * ENDOR_INTC_SWCLR- SW Interrupt Clear  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_swclr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_swclr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|clr
range|:
literal|32
decl_stmt|;
comment|/**< Clear SW Interrupt bit */
else|#
directive|else
name|uint32_t
name|clr
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_swclr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_swclr
name|cvmx_endor_intc_swclr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_swset  *  * ENDOR_INTC_SWSET - SW Interrupt Set  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_swset
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_swset_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|set
range|:
literal|32
decl_stmt|;
comment|/**< Set SW Interrupt bit */
else|#
directive|else
name|uint32_t
name|set
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_swset_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_swset
name|cvmx_endor_intc_swset_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wr_idx_hi#  *  * ENDOR_INTC_WR_IDX_HI - Write Done Group Index HI  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wr_idx_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wr_idx_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Write Done Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wr_idx_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wr_idx_hix
name|cvmx_endor_intc_wr_idx_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wr_idx_lo#  *  * ENDOR_INTC_WR_IDX_LO - Write Done Group Index LO  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wr_idx_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wr_idx_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Write Done Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wr_idx_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wr_idx_lox
name|cvmx_endor_intc_wr_idx_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wr_mask_hi#  *  * ENDOR_INTC_WR_MASK_HI = Interrupt Write Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wr_mask_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wr_mask_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Write Done */
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Write Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Write Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Write Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Write Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Write Done */
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wr_mask_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wr_mask_hix
name|cvmx_endor_intc_wr_mask_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wr_mask_lo#  *  * ENDOR_INTC_WR_MASK_LO = Interrupt Write Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wr_mask_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wr_mask_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Write Done */
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Write Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Write Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Write Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Write Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Write Done */
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wr_mask_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wr_mask_lox
name|cvmx_endor_intc_wr_mask_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wr_rint  *  * ENDOR_INTC_WR_RINT - Write Done Group Raw Interrupt Status  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wr_rint
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wr_rint_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Write Done */
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Write Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Write Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Write Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Write Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Write Done */
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wr_rint_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wr_rint
name|cvmx_endor_intc_wr_rint_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wr_status_hi#  *  * ENDOR_INTC_WR_STATUS_HI = Interrupt Write Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wr_status_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wr_status_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Write Done */
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Write Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Write Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Write Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Write Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Write Done */
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wr_status_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wr_status_hix
name|cvmx_endor_intc_wr_status_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wr_status_lo#  *  * ENDOR_INTC_WR_STATUS_LO = Interrupt Write Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wr_status_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wr_status_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_1 Write Done */
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
comment|/**< RFIF_0 Write Done */
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
comment|/**< HARQ to Host Write Done */
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
comment|/**< RX1 to Host Write Done */
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
comment|/**< RX0 to Host Write Done */
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
comment|/**< TX to Host Write Done */
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_tx
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axi_rx1_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_rfif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_29_31
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wr_status_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wr_status_lox
name|cvmx_endor_intc_wr_status_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wrq_idx_hi#  *  * ENDOR_INTC_WRQ_IDX_HI - Write Queue Done Group Index HI  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wrq_idx_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wrq_idx_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Write Queue Done Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wrq_idx_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wrq_idx_hix
name|cvmx_endor_intc_wrq_idx_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wrq_idx_lo#  *  * ENDOR_INTC_WRQ_IDX_LO - Write Queue Done Group Index LO  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wrq_idx_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wrq_idx_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
comment|/**< Write Queue Done Group Interrupt Index */
else|#
directive|else
name|uint32_t
name|grpidx
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wrq_idx_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wrq_idx_lox
name|cvmx_endor_intc_wrq_idx_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wrq_mask_hi#  *  * ENDOR_INTC_WRQ_MASK_HI = Interrupt Write Queue Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wrq_mask_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wrq_mask_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wrq_mask_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wrq_mask_hix
name|cvmx_endor_intc_wrq_mask_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wrq_mask_lo#  *  * ENDOR_INTC_WRQ_MASK_LO = Interrupt Write Queue Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wrq_mask_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wrq_mask_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wrq_mask_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wrq_mask_lox
name|cvmx_endor_intc_wrq_mask_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wrq_rint  *  * ENDOR_INTC_WRQ_RINT - Write Queue Done Group Raw Interrupt Status  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wrq_rint
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wrq_rint_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wrq_rint_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wrq_rint
name|cvmx_endor_intc_wrq_rint_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wrq_status_hi#  *  * ENDOR_INTC_WRQ_STATUS_HI = Interrupt Write Queue Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wrq_status_hix
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wrq_status_hix_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wrq_status_hix_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wrq_status_hix
name|cvmx_endor_intc_wrq_status_hix_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_intc_wrq_status_lo#  *  * ENDOR_INTC_WRQ_STATUS_LO = Interrupt Write Queue Done Group Mask  *  */
end_comment

begin_union
union|union
name|cvmx_endor_intc_wrq_status_lox
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_intc_wrq_status_lox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
comment|/**< TX Instr Write Done */
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to TX Write Done */
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to TX Write Done */
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX1 Instr Write Done */
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
comment|/**< Host to HARQ Write Done */
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX1 Write Done */
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX1 Write Done */
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
comment|/**< RX0 Instr Write Done */
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
comment|/**< PHY to RX0 Write Done */
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
comment|/**< Host to RX0 Write Done */
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_1 Write Done */
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
comment|/**< IFFTPAPR_0 Write Done */
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder CCH Write Done */
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB1 Write Done */
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
comment|/**< LTE Encoder TB0 Write Done */
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
comment|/**< Viterbi Decoder Write Done */
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder HARQ Write Done */
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Soft Bits Write Done */
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
comment|/**< Turbo Decoder Write Done */
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
comment|/**< DFT/Demapper Write Done */
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
comment|/**< RACH_1 Write Done */
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
comment|/**< RACH_0 Write Done */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< ULFE Write Done */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachsnif_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdm
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_sb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbo_hq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vitbdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_tb1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc_cch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr_1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_harq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_ext
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3_instr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_intc_wrq_status_lox_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_intc_wrq_status_lox
name|cvmx_endor_intc_wrq_status_lox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_cbuf_end_addr0  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_cbuf_end_addr0
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_cbuf_end_addr0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_cbuf_end_addr0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_cbuf_end_addr0
name|cvmx_endor_ofs_hmm_cbuf_end_addr0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_cbuf_end_addr1  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_cbuf_end_addr1
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_cbuf_end_addr1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_cbuf_end_addr1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_cbuf_end_addr1
name|cvmx_endor_ofs_hmm_cbuf_end_addr1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_cbuf_end_addr2  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_cbuf_end_addr2
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_cbuf_end_addr2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_cbuf_end_addr2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_cbuf_end_addr2
name|cvmx_endor_ofs_hmm_cbuf_end_addr2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_cbuf_end_addr3  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_cbuf_end_addr3
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_cbuf_end_addr3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_cbuf_end_addr3_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_cbuf_end_addr3
name|cvmx_endor_ofs_hmm_cbuf_end_addr3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_cbuf_start_addr0  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_cbuf_start_addr0
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_cbuf_start_addr0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_cbuf_start_addr0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_cbuf_start_addr0
name|cvmx_endor_ofs_hmm_cbuf_start_addr0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_cbuf_start_addr1  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_cbuf_start_addr1
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_cbuf_start_addr1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_cbuf_start_addr1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_cbuf_start_addr1
name|cvmx_endor_ofs_hmm_cbuf_start_addr1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_cbuf_start_addr2  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_cbuf_start_addr2
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_cbuf_start_addr2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_cbuf_start_addr2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_cbuf_start_addr2
name|cvmx_endor_ofs_hmm_cbuf_start_addr2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_cbuf_start_addr3  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_cbuf_start_addr3
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_cbuf_start_addr3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_cbuf_start_addr3_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_cbuf_start_addr3
name|cvmx_endor_ofs_hmm_cbuf_start_addr3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_intr_clear  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_intr_clear
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_intr_clear_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_intr_clear_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_intr_clear
name|cvmx_endor_ofs_hmm_intr_clear_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_intr_enb  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_intr_enb
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_intr_enb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_intr_enb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_intr_enb
name|cvmx_endor_ofs_hmm_intr_enb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_intr_rstatus  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_intr_rstatus
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_intr_rstatus_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_intr_rstatus_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_intr_rstatus
name|cvmx_endor_ofs_hmm_intr_rstatus_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_intr_status  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_intr_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_intr_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_intr_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_intr_status
name|cvmx_endor_ofs_hmm_intr_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_intr_test  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_intr_test
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_intr_test_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|xfer_complete
range|:
literal|1
decl_stmt|;
name|uint32_t
name|xfer_q_empty
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_intr_test_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_intr_test
name|cvmx_endor_ofs_hmm_intr_test_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_mode  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_mode
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_mode_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|itlv_bufmode
range|:
literal|2
decl_stmt|;
comment|/**< interleave buffer : 0==1:1, 1==2:1, 2==4:1 */
name|uint32_t
name|reserved_2_3
range|:
literal|2
decl_stmt|;
name|uint32_t
name|mem_clr_enb
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|auto_clk_enb
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|auto_clk_enb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mem_clr_enb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_2_3
range|:
literal|2
decl_stmt|;
name|uint32_t
name|itlv_bufmode
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_mode_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_mode
name|cvmx_endor_ofs_hmm_mode_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_start_addr0  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_start_addr0
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_start_addr0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_start_addr0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_start_addr0
name|cvmx_endor_ofs_hmm_start_addr0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_start_addr1  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_start_addr1
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_start_addr1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_start_addr1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_start_addr1
name|cvmx_endor_ofs_hmm_start_addr1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_start_addr2  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_start_addr2
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_start_addr2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_start_addr2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_start_addr2
name|cvmx_endor_ofs_hmm_start_addr2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_start_addr3  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_start_addr3
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_start_addr3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|addr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_start_addr3_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_start_addr3
name|cvmx_endor_ofs_hmm_start_addr3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_status  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_0_31
range|:
literal|32
decl_stmt|;
else|#
directive|else
name|uint32_t
name|reserved_0_31
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_status
name|cvmx_endor_ofs_hmm_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_xfer_cnt  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_xfer_cnt
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_xfer_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|xfer_comp_intr
range|:
literal|1
decl_stmt|;
comment|/**< transfer complete interrupt. */
name|uint32_t
name|slice_mode
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|cbuf_mode
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|reserved_16_28
range|:
literal|13
decl_stmt|;
name|uint32_t
name|wordcnt
range|:
literal|16
decl_stmt|;
comment|/**< word count. */
else|#
directive|else
name|uint32_t
name|wordcnt
range|:
literal|16
decl_stmt|;
name|uint32_t
name|reserved_16_28
range|:
literal|13
decl_stmt|;
name|uint32_t
name|cbuf_mode
range|:
literal|1
decl_stmt|;
name|uint32_t
name|slice_mode
range|:
literal|1
decl_stmt|;
name|uint32_t
name|xfer_comp_intr
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_xfer_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_xfer_cnt
name|cvmx_endor_ofs_hmm_xfer_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_xfer_q_status  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_xfer_q_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_xfer_q_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|status
range|:
literal|32
decl_stmt|;
comment|/**< number of slots to queue buffer transaction. */
else|#
directive|else
name|uint32_t
name|status
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_xfer_q_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_xfer_q_status
name|cvmx_endor_ofs_hmm_xfer_q_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_ofs_hmm_xfer_start  */
end_comment

begin_union
union|union
name|cvmx_endor_ofs_hmm_xfer_start
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_ofs_hmm_xfer_start_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|start
range|:
literal|1
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|start
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_ofs_hmm_xfer_start_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_ofs_hmm_xfer_start
name|cvmx_endor_ofs_hmm_xfer_start_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_1pps_gen_cfg  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_1pps_gen_cfg
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_1pps_gen_cfg_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
comment|/**< Enable 1PPS Generation and Tracking                                                          - 0: 1PPS signal not tracked or generated                                                          - 1: 1PPS signal generated and tracked */
else|#
directive|else
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_1pps_gen_cfg_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_1pps_gen_cfg
name|cvmx_endor_rfif_1pps_gen_cfg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_1pps_sample_cnt_offset  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_1pps_sample_cnt_offset
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_1pps_sample_cnt_offset_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|offset
range|:
literal|20
decl_stmt|;
comment|/**< This register holds the sample count at which the 1PPS                                                          was received.                                                          Upon reset, the sample counter starts at 0 when the                                                          first 1PPS is received and then increments to wrap                                                          around at FRAME_L-1. At each subsequent 1PPS, a                                                          snapshot of the sample counter is taken and the count                                                          is made available via this register. This enables                                                          software to monitor the RF clock drift relative to                                                          the 1PPS. */
else|#
directive|else
name|uint32_t
name|offset
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_1pps_sample_cnt_offset_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_1pps_sample_cnt_offset
name|cvmx_endor_rfif_1pps_sample_cnt_offset_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_1pps_verif_gen_en  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_1pps_verif_gen_en
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_1pps_verif_gen_en_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
comment|/**< 1PPS generation for verification purposes                                                          - 0: Disabled (default)                                                          - 1: Enabled                                                           Note the external 1PPS is not considered, when this bit                                                           is set to 1. */
else|#
directive|else
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_1pps_verif_gen_en_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_1pps_verif_gen_en
name|cvmx_endor_rfif_1pps_verif_gen_en_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_1pps_verif_scnt  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_1pps_verif_scnt
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_1pps_verif_scnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
comment|/**< Sample count at which the 1PPS is generated for                                                          verification purposes. */
else|#
directive|else
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_1pps_verif_scnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_1pps_verif_scnt
name|cvmx_endor_rfif_1pps_verif_scnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_conf  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_conf
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_conf_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint32_t
name|loopback
range|:
literal|1
decl_stmt|;
comment|/**< FDD loop back mode                                                          - 0: Not in loopback mode(default)                                                          - 1: loops back the tx ouput to the rx input inside the                                                           rf_if */
name|uint32_t
name|mol
range|:
literal|1
decl_stmt|;
comment|/**< Manual Override Lock */
name|uint32_t
name|upd_style
range|:
literal|1
decl_stmt|;
comment|/**< TX and RX Windows parameters update style (default:0)                                                          - 0: updated as written to the register (on the fly)                                                           (not fully verified but kept in case limitations are                                                           found with the other update scheme.)                                                          - 1: updated at the specified time by registers 00F and                                                           90F.                                                           Note the frame length is updated after the last TX                                                           window.                                                          - 1: eNB, enables using 1PPS synchronization scheme. */
name|uint32_t
name|diversity
range|:
literal|1
decl_stmt|;
comment|/**< RX diversity disable (Used to support FDD SISO with CLK                                                           4X)                                                          - 0: Data gets written to the diversity FIFO in MIMO mode                                                           (default).                                                          - 1: No data written to the diversity FIFO in MIMO mode. */
name|uint32_t
name|duplex
range|:
literal|1
decl_stmt|;
comment|/**< Division Duplex Mode                                                          - 0: TDD (default)                                                          - 1: FDD */
name|uint32_t
name|prod_type
range|:
literal|1
decl_stmt|;
comment|/**< Product Type                                                          - 0: UE (default), enables using sync and timing advance                                                           synchronization schemes. */
name|uint32_t
name|txnrx_ctrl
range|:
literal|1
decl_stmt|;
comment|/**< RFIC IF TXnRX signal pulse control. Changing the value                                                          of this bit generates a pulse on the TXNRX signal of                                                          the RFIC interface. This feature is enabled when bit                                                          9 has already been asserted. */
name|uint32_t
name|ena_ctrl
range|:
literal|1
decl_stmt|;
comment|/**< RFIC IF ENABLE signal pulse control. Changing the value                                                          of this bit generates a pulse on the ENABLE signal of                                                          the RFIC interface. This feature is enabled when bit 9                                                          has already been asserted. */
name|uint32_t
name|man_ctrl
range|:
literal|1
decl_stmt|;
comment|/**< RF IC Manual Control Enable. Setting this bit to 1                                                          enables manual control of the TXNRX and ENABLE signals.                                                          When set to 0 (default), the TXNRX and ENABLE signals                                                          are automatically controlled when opening and closing                                                          RX/TX windows. The manual mode is used to initialize                                                          the RFIC in alert mode. */
name|uint32_t
name|dsp_rx_int_en
range|:
literal|1
decl_stmt|;
comment|/**< DSP RX interrupt mask enable                                                          - 0: DSP RX receives interrupts                                                          - 1: DSP RX doesn't receive interrupts, needs to poll                                                           ISRs */
name|uint32_t
name|adi_en
range|:
literal|1
decl_stmt|;
comment|/**< ADI enable signal pulsed or leveled behavior                                                          - 0: pulsed                                                          - 1: leveled */
name|uint32_t
name|clr_fifo_of
range|:
literal|1
decl_stmt|;
comment|/**< Clear RX FIFO overflow flag. */
name|uint32_t
name|clr_fifo_ur
range|:
literal|1
decl_stmt|;
comment|/**< Clear RX FIFO under run flag. */
name|uint32_t
name|wavesat_mode
range|:
literal|1
decl_stmt|;
comment|/**< AD9361 wavesat mode, where enable becomes rx_control                                                           and txnrx becomes tx_control. The wavesat mode permits                                                           an independent control of the rx and tx data flows.                                                          - 0: wavesat mode                                                          - 1: regular mode */
name|uint32_t
name|flush
range|:
literal|1
decl_stmt|;
comment|/**< Flush RX FIFO auto clear register. */
name|uint32_t
name|inv
range|:
literal|1
decl_stmt|;
comment|/**< Data inversion (bit 0 becomes bit 11, bit 1 becomes 10) */
name|uint32_t
name|mode
range|:
literal|1
decl_stmt|;
comment|/**< 0: SISO 1: MIMO */
name|uint32_t
name|enable
range|:
literal|1
decl_stmt|;
comment|/**< 1=enable, 0=disabled */
else|#
directive|else
name|uint32_t
name|enable
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mode
range|:
literal|1
decl_stmt|;
name|uint32_t
name|inv
range|:
literal|1
decl_stmt|;
name|uint32_t
name|flush
range|:
literal|1
decl_stmt|;
name|uint32_t
name|wavesat_mode
range|:
literal|1
decl_stmt|;
name|uint32_t
name|clr_fifo_ur
range|:
literal|1
decl_stmt|;
name|uint32_t
name|clr_fifo_of
range|:
literal|1
decl_stmt|;
name|uint32_t
name|adi_en
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dsp_rx_int_en
range|:
literal|1
decl_stmt|;
name|uint32_t
name|man_ctrl
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ena_ctrl
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txnrx_ctrl
range|:
literal|1
decl_stmt|;
name|uint32_t
name|prod_type
range|:
literal|1
decl_stmt|;
name|uint32_t
name|duplex
range|:
literal|1
decl_stmt|;
name|uint32_t
name|diversity
range|:
literal|1
decl_stmt|;
name|uint32_t
name|upd_style
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mol
range|:
literal|1
decl_stmt|;
name|uint32_t
name|loopback
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_conf_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_conf
name|cvmx_endor_rfif_conf_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_conf2  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_conf2
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_conf2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_3_31
range|:
literal|29
decl_stmt|;
name|uint32_t
name|latency
range|:
literal|1
decl_stmt|;
comment|/**< RF DATA variable latency                                                          - 0: fixed latency (prior to AD9163)                                                          - 1: variable latency (starting with the AD9361) */
name|uint32_t
name|iq_cfg
range|:
literal|1
decl_stmt|;
comment|/**< IQ port configuration                                                          - 0: Single port (10Mhz BW and less)                                                          - 1: Dual ports (more then 10Mhz BW) */
name|uint32_t
name|behavior
range|:
literal|1
decl_stmt|;
comment|/**< RX and TX FRAME signals behavior:                                                          - 0: Pulsed every frame                                                          - 1: Leveled during the whole RX and TX periods */
else|#
directive|else
name|uint32_t
name|behavior
range|:
literal|1
decl_stmt|;
name|uint32_t
name|iq_cfg
range|:
literal|1
decl_stmt|;
name|uint32_t
name|latency
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_3_31
range|:
literal|29
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_conf2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_conf2
name|cvmx_endor_rfif_conf2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_dsp1_gpio  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_dsp1_gpio
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_dsp1_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
name|uint32_t
name|val
range|:
literal|4
decl_stmt|;
comment|/**< Values to output to the DSP1_GPIO ports */
else|#
directive|else
name|uint32_t
name|val
range|:
literal|4
decl_stmt|;
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_dsp1_gpio_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_dsp1_gpio
name|cvmx_endor_rfif_dsp1_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_dsp_rx_his  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_dsp_rx_his
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_dsp_rx_his_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_0_31
range|:
literal|32
decl_stmt|;
else|#
directive|else
name|uint32_t
name|reserved_0_31
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_dsp_rx_his_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_dsp_rx_his
name|cvmx_endor_rfif_dsp_rx_his_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_dsp_rx_ism  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_dsp_rx_ism
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_dsp_rx_ism_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|ena
range|:
literal|8
decl_stmt|;
comment|/**< Enable interrupt bits. Set to each bit to 1 to enable                                                          the interrupts listed in the table below. The default                                                          value is 0x0. */
name|uint32_t
name|reserved_0_15
range|:
literal|16
decl_stmt|;
else|#
directive|else
name|uint32_t
name|reserved_0_15
range|:
literal|16
decl_stmt|;
name|uint32_t
name|ena
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_dsp_rx_ism_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_dsp_rx_ism
name|cvmx_endor_rfif_dsp_rx_ism_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_firs_enable  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_firs_enable
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_firs_enable_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
name|uint32_t
name|tx_div_fil
range|:
literal|1
decl_stmt|;
comment|/**< TX DIV filtering control bit                                                          - 0: TX DIV filtering disabled                                                          - 1: TX DIV filtering enabled */
name|uint32_t
name|tx_fil
range|:
literal|1
decl_stmt|;
comment|/**< TX filtering control bit                                                          - 0: TX filtering disabled                                                          - 1: TX filtering enabled */
name|uint32_t
name|rx_dif_fil
range|:
literal|1
decl_stmt|;
comment|/**< RX DIV filtering control bit                                                          - 0: RX DIV filtering disabled                                                          - 1: RX DIV filtering enabled */
name|uint32_t
name|rx_fil
range|:
literal|1
decl_stmt|;
comment|/**< RX filtering control bit                                                          - 0: RX filtering disabled                                                          - 1: RX filtering enabled */
else|#
directive|else
name|uint32_t
name|rx_fil
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx_dif_fil
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tx_fil
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tx_div_fil
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_firs_enable_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_firs_enable
name|cvmx_endor_rfif_firs_enable_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_frame_cnt  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_frame_cnt
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_frame_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
comment|/**< Frame count (value wraps around 2**16) */
else|#
directive|else
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_frame_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_frame_cnt
name|cvmx_endor_rfif_frame_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_frame_l  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_frame_l
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_frame_l_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|length
range|:
literal|20
decl_stmt|;
comment|/**< Frame length in terms of RF clock cycles:                                                          RFIC in single port modes                                                          TDD SISO ? FRAME_L = num_samples                                                          TDD MIMO ? FRAME_L = num_samples * 2                                                          FDD SISO ? FRAME_L = num_samples * 2                                                          FDD MIMO ? FRAME_L = num_samples * 4                                                          RFIC in dual ports modes                                                          TDD SISO ? FRAME_L = num_samples * 0.5                                                          TDD MIMO ? FRAME_L = num_samples                                                          FDD SISO ? FRAME_L = num_samples                                                          FDD MIMO ? FRAME_L = num_samples * 2 */
else|#
directive|else
name|uint32_t
name|length
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_frame_l_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_frame_l
name|cvmx_endor_rfif_frame_l_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_gpio_#  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_gpio_x
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_gpio_x_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|fall_val
range|:
literal|11
decl_stmt|;
comment|/**< Signed value (lead/lag) on falling edge of level signal */
name|uint32_t
name|rise_val
range|:
literal|11
decl_stmt|;
comment|/**< Signed value (lead/lag) on rising edge of level signal */
name|uint32_t
name|src
range|:
literal|2
decl_stmt|;
comment|/**< Signal active high source:                                                          - 00: idle                                                          - 01: RX                                                          - 10: TX                                                          - 11: idle */
else|#
directive|else
name|uint32_t
name|src
range|:
literal|2
decl_stmt|;
name|uint32_t
name|rise_val
range|:
literal|11
decl_stmt|;
name|uint32_t
name|fall_val
range|:
literal|11
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_gpio_x_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_gpio_x
name|cvmx_endor_rfif_gpio_x_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_max_sample_adj  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_max_sample_adj
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_max_sample_adj_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_10_31
range|:
literal|22
decl_stmt|;
name|uint32_t
name|num
range|:
literal|10
decl_stmt|;
comment|/**< Indicates the maximum number of samples that can be                                                          adjusted per frame. Note the value to be programmed                                                          varies with the mode of operation as follow:                                                          MAX_SAMPLE_ADJ  = num_samples*MIMO*FDD*DP                                                          Where:                                                          MIMO = 2 in MIMO mode and 1 otherwise.                                                          FDD = 2 in FDD mode and 1 otherwise.                                                          DP = 0.5 in RF IF Dual Port mode, 1 otherwise. */
else|#
directive|else
name|uint32_t
name|num
range|:
literal|10
decl_stmt|;
name|uint32_t
name|reserved_10_31
range|:
literal|22
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_max_sample_adj_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_max_sample_adj
name|cvmx_endor_rfif_max_sample_adj_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_min_sample_adj  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_min_sample_adj
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_min_sample_adj_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_10_31
range|:
literal|22
decl_stmt|;
name|uint32_t
name|num
range|:
literal|10
decl_stmt|;
comment|/**< Indicates the minimum number of samples that can be                                                          adjusted per frame. Note the value to be programmed                                                          varies with the mode of operation as follow:                                                          MIN_SAMPLE_ADJ  = num_samples*MIMO*FDD*DP                                                          Where:                                                          MIMO = 2 in MIMO mode and 1 otherwise.                                                          FDD = 2 in FDD mode and 1 otherwise.                                                          DP = 0.5 in RF IF Dual Port mode, 1 otherwise. */
else|#
directive|else
name|uint32_t
name|num
range|:
literal|10
decl_stmt|;
name|uint32_t
name|reserved_10_31
range|:
literal|22
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_min_sample_adj_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_min_sample_adj
name|cvmx_endor_rfif_min_sample_adj_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_num_rx_win  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_num_rx_win
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_num_rx_win_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_3_31
range|:
literal|29
decl_stmt|;
name|uint32_t
name|num
range|:
literal|3
decl_stmt|;
comment|/**< Number of RX windows                                                          - 0: No RX window                                                          - 1: One RX window                                                           - ...                                                          - 4: Four RX windows                                                           Other: Not defined */
else|#
directive|else
name|uint32_t
name|num
range|:
literal|3
decl_stmt|;
name|uint32_t
name|reserved_3_31
range|:
literal|29
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_num_rx_win_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_num_rx_win
name|cvmx_endor_rfif_num_rx_win_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_pwm_enable  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_pwm_enable
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_pwm_enable_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
comment|/**< PWM signal generation enable:                                                          - 1: PWM enabled                                                          - 0: PWM disabled (default) */
else|#
directive|else
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_pwm_enable_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_pwm_enable
name|cvmx_endor_rfif_pwm_enable_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_pwm_high_time  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_pwm_high_time
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_pwm_high_time_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|hi_time
range|:
literal|24
decl_stmt|;
comment|/**< PWM high time. The default is 0h00FFFF cycles. Program                                                          to n for n+1 high cycles. */
else|#
directive|else
name|uint32_t
name|hi_time
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_pwm_high_time_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_pwm_high_time
name|cvmx_endor_rfif_pwm_high_time_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_pwm_low_time  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_pwm_low_time
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_pwm_low_time_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|lo_time
range|:
literal|24
decl_stmt|;
comment|/**< PWM low time. The default is 0h00FFFF cycles. Program                                                          to n for n+1 low cycles. */
else|#
directive|else
name|uint32_t
name|lo_time
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_pwm_low_time_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_pwm_low_time
name|cvmx_endor_rfif_pwm_low_time_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rd_timer64_lsb  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rd_timer64_lsb
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rd_timer64_lsb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|val
range|:
literal|32
decl_stmt|;
comment|/**< 64-bit timer initial value of the 32 LSB.                                                          Note the value written in WR_TIMER64_LSB is not                                                          propagating until the timer64 is enabled. */
else|#
directive|else
name|uint32_t
name|val
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rd_timer64_lsb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rd_timer64_lsb
name|cvmx_endor_rfif_rd_timer64_lsb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rd_timer64_msb  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rd_timer64_msb
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rd_timer64_msb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|val
range|:
literal|32
decl_stmt|;
comment|/**< 64-bit timer initial value of the 32 MSB.                                                          Note the value written in WR_TIMER64_MSB is not                                                          propagating until the timer64 is enabled. */
else|#
directive|else
name|uint32_t
name|val
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rd_timer64_msb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rd_timer64_msb
name|cvmx_endor_rfif_rd_timer64_msb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_real_time_timer  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_real_time_timer
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_real_time_timer_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|timer
range|:
literal|32
decl_stmt|;
comment|/**< The full 32 bits of the real time timer fed from a core                                                          clock based counter. */
else|#
directive|else
name|uint32_t
name|timer
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_real_time_timer_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_real_time_timer
name|cvmx_endor_rfif_real_time_timer_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rf_clk_timer  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rf_clk_timer
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rf_clk_timer_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|timer
range|:
literal|32
decl_stmt|;
comment|/**< Timer running off the RF CLK.                                                          1- The counter is disabled by default;                                                          2- The counter is enabled by writing 1 to register 066;                                                          3- The counter waits for the 1PPS to start incrementing                                                          4- The 1PPS is received and the counter starts                                                          incrementing;                                                          5- The counter is reset after receiving the 30th 1PPS                                                          (after 30 seconds);                                                          6- The counter keeps incrementing and is reset as in 5,                                                          unless it is disabled. */
else|#
directive|else
name|uint32_t
name|timer
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rf_clk_timer_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rf_clk_timer
name|cvmx_endor_rfif_rf_clk_timer_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rf_clk_timer_en  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rf_clk_timer_en
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rf_clk_timer_en_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
comment|/**< RF CLK based timer enable                                                          - 0: Disabled                                                          - 1: Enabled */
else|#
directive|else
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rf_clk_timer_en_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rf_clk_timer_en
name|cvmx_endor_rfif_rf_clk_timer_en_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_correct_adj  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_correct_adj
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_correct_adj_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
name|uint32_t
name|offset
range|:
literal|4
decl_stmt|;
comment|/**< Indicates the sample counter offset for the last sample                                                          flag insertion, which determines when the rx samples                                                          are dropped or added. This register can take values                                                          from 0 to 15 and should be configured as follow:                                                          4, when MIN_SAMPLE_ADJ = 1                                                          5 , when MIN_SAMPLE_ADJ = 2                                                          6 , when MIN_SAMPLE_ADJ = 4 */
else|#
directive|else
name|uint32_t
name|offset
range|:
literal|4
decl_stmt|;
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_correct_adj_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_correct_adj
name|cvmx_endor_rfif_rx_correct_adj_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_div_status  *  * Notes:  * In TDD Mode, bits 15:12 are DDR state machine status.  *  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_div_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_div_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
name|uint32_t
name|rfic_ena
range|:
literal|1
decl_stmt|;
comment|/**< RFIC enabled (in alert state) */
name|uint32_t
name|sync_late
range|:
literal|1
decl_stmt|;
comment|/**< Sync late (Used for UE products). */
name|uint32_t
name|reserved_19_20
range|:
literal|2
decl_stmt|;
name|uint32_t
name|thresh_rch
range|:
literal|1
decl_stmt|;
comment|/**< Threshold Reached (RX/RX_div/TX) */
name|uint32_t
name|fifo_of
range|:
literal|1
decl_stmt|;
comment|/**< FIFO overflow */
name|uint32_t
name|fifo_ur
range|:
literal|1
decl_stmt|;
comment|/**< FIFO underrun */
name|uint32_t
name|tx_sm
range|:
literal|2
decl_stmt|;
comment|/**< TX state machine status */
name|uint32_t
name|rx_sm
range|:
literal|2
decl_stmt|;
comment|/**< RX state machine status */
name|uint32_t
name|hab_req_sm
range|:
literal|4
decl_stmt|;
comment|/**< HAB request manager SM                                                          - 0: idle                                                          - 1: wait_cs                                                          - 2: Term                                                          - 3: rd_fifo(RX)/ write fifo(TX)                                                          - 4: wait_th                                                           Others: not used */
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
else|#
directive|else
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
name|uint32_t
name|hab_req_sm
range|:
literal|4
decl_stmt|;
name|uint32_t
name|rx_sm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|tx_sm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|fifo_ur
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fifo_of
range|:
literal|1
decl_stmt|;
name|uint32_t
name|thresh_rch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_19_20
range|:
literal|2
decl_stmt|;
name|uint32_t
name|sync_late
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfic_ena
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_div_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_div_status
name|cvmx_endor_rfif_rx_div_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_fifo_cnt  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_fifo_cnt
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_fifo_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint32_t
name|cnt
range|:
literal|13
decl_stmt|;
comment|/**< RX FIFO fill level. This register can take values                                                          between 0 and 5136. */
else|#
directive|else
name|uint32_t
name|cnt
range|:
literal|13
decl_stmt|;
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_fifo_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_fifo_cnt
name|cvmx_endor_rfif_rx_fifo_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_if_cfg  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_if_cfg
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_if_cfg_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|eorl
range|:
literal|1
decl_stmt|;
comment|/**< Early or Late TX_FRAME                                                          - 0: The TX_FRAME asserts after the tx_lead and deasserts                                                           before the tx_lag                                                          - 1: The TX_FRAME asserts (3:0) cycles after the                                                           TX_ON/ENABLE and deasserts (3:0) cycles after the                                                           TX_ON/ENABLE signal. */
name|uint32_t
name|half_lat
range|:
literal|1
decl_stmt|;
comment|/**< Half cycle latency                                                          - 0: Captures I and Q on the falling and rising edge of                                                           the clock respectively.                                                          - 1: Captures I and Q on the rising and falling edge of                                                           the clock respectively. */
name|uint32_t
name|cap_lat
range|:
literal|4
decl_stmt|;
comment|/**< Enable to capture latency                                                           The data from the RF IC starts and stops being captured                                                           a number of cycles after the enable pulse.                                                          - 0: Invalid                                                          - 1: One cycle latency                                                          - 2: Two cycles of latency                                                          - 3: Three cycles of latency                                                           - ...                                                           - 15: Seven cycles of latency */
else|#
directive|else
name|uint32_t
name|cap_lat
range|:
literal|4
decl_stmt|;
name|uint32_t
name|half_lat
range|:
literal|1
decl_stmt|;
name|uint32_t
name|eorl
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_if_cfg_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_if_cfg
name|cvmx_endor_rfif_rx_if_cfg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_lead_lag  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_lead_lag
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_lead_lag_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|lag
range|:
literal|12
decl_stmt|;
comment|/**< unsigned value (lag) on end of window */
name|uint32_t
name|lead
range|:
literal|12
decl_stmt|;
comment|/**< unsigned value (lead) on beginning of window */
else|#
directive|else
name|uint32_t
name|lead
range|:
literal|12
decl_stmt|;
name|uint32_t
name|lag
range|:
literal|12
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_lead_lag_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_lead_lag
name|cvmx_endor_rfif_rx_lead_lag_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_load_cfg  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_load_cfg
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_load_cfg_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint32_t
name|hidden
range|:
literal|1
decl_stmt|;
comment|/**< Hidden bit set to 1 during synthesis                                                          (set_case_analysis) if only one destination can be                                                          programmed at a time. In this case there is no need to                                                          gate the VLD with the RDYs, to ease timing closure. */
name|uint32_t
name|reserved_9_11
range|:
literal|3
decl_stmt|;
name|uint32_t
name|alt_ant
range|:
literal|1
decl_stmt|;
comment|/**< Send data alternating antenna 0 (first) and antenna 1                                                          (second) data on the RX HMI interface when set to 1.                                                          By default, only the data from antenna 0 is sent on                                                          this interface. */
name|uint32_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint32_t
name|exe3
range|:
literal|1
decl_stmt|;
comment|/**< Setting this bit to 1 indicates the RF_IF to load                                                          and execute the programmed DMA transfer size (register                                                          RX_TRANSFER_SIZE) from the FIFO to destination 3. */
name|uint32_t
name|exe2
range|:
literal|1
decl_stmt|;
comment|/**< Setting this bit to 1 indicates the RF_IF to load                                                          and execute the programmed DMA transfer size (register                                                          RX_TRANSFER_SIZE) from the FIFO to destination 2. */
name|uint32_t
name|exe1
range|:
literal|1
decl_stmt|;
comment|/**< Setting this bit to 1 indicates the RF_IF to load                                                          and execute the programmed DMA transfer size (register                                                          RX_TRANSFER_SIZE) from the FIFO to destination 1. */
else|#
directive|else
name|uint32_t
name|exe1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|exe2
range|:
literal|1
decl_stmt|;
name|uint32_t
name|exe3
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint32_t
name|alt_ant
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_9_11
range|:
literal|3
decl_stmt|;
name|uint32_t
name|hidden
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_load_cfg_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_load_cfg
name|cvmx_endor_rfif_rx_load_cfg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_offset  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_offset
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_offset_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|offset
range|:
literal|20
decl_stmt|;
comment|/**< Indicates the number of RF clock cycles after the                                                          GPS/ETH 1PPS is received before the start of the RX                                                          frame. See description Figure 44. */
else|#
directive|else
name|uint32_t
name|offset
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_offset_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_offset
name|cvmx_endor_rfif_rx_offset_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_offset_adj_scnt  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_offset_adj_scnt
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_offset_adj_scnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
comment|/**< Indicates the RX sample count at which the 1PPS                                                          incremental adjustments will be applied. */
else|#
directive|else
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_offset_adj_scnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_offset_adj_scnt
name|cvmx_endor_rfif_rx_offset_adj_scnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_status  *  * Notes:  * In TDD Mode, bits 15:12 are DDR state machine status.  *  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
name|uint32_t
name|rfic_ena
range|:
literal|1
decl_stmt|;
comment|/**< RFIC enabled (in alert state) */
name|uint32_t
name|sync_late
range|:
literal|1
decl_stmt|;
comment|/**< Sync late (Used for UE products). */
name|uint32_t
name|reserved_19_20
range|:
literal|2
decl_stmt|;
name|uint32_t
name|thresh_rch
range|:
literal|1
decl_stmt|;
comment|/**< Threshold Reached (RX/RX_div/TX) */
name|uint32_t
name|fifo_of
range|:
literal|1
decl_stmt|;
comment|/**< FIFO overflow */
name|uint32_t
name|fifo_ur
range|:
literal|1
decl_stmt|;
comment|/**< FIFO underrun */
name|uint32_t
name|tx_sm
range|:
literal|2
decl_stmt|;
comment|/**< TX state machine status */
name|uint32_t
name|rx_sm
range|:
literal|2
decl_stmt|;
comment|/**< RX state machine status */
name|uint32_t
name|hab_req_sm
range|:
literal|4
decl_stmt|;
comment|/**< HAB request manager SM                                                          - 0: idle                                                          - 1: wait_cs                                                          - 2: Term                                                          - 3: rd_fifo(RX)/ write fifo(TX)                                                          - 4: wait_th                                                           Others: not used */
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
else|#
directive|else
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
name|uint32_t
name|hab_req_sm
range|:
literal|4
decl_stmt|;
name|uint32_t
name|rx_sm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|tx_sm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|fifo_ur
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fifo_of
range|:
literal|1
decl_stmt|;
name|uint32_t
name|thresh_rch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_19_20
range|:
literal|2
decl_stmt|;
name|uint32_t
name|sync_late
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfic_ena
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_status
name|cvmx_endor_rfif_rx_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_sync_scnt  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_sync_scnt
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_sync_scnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
comment|/**< Sample count at which the start of frame reference will                                                          be modified as described with register 0x30. */
else|#
directive|else
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_sync_scnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_sync_scnt
name|cvmx_endor_rfif_rx_sync_scnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_sync_value  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_sync_value
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_sync_value_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|val
range|:
literal|20
decl_stmt|;
comment|/**< RX Synchronization offset value. This register                                                          indicates the sample number at which the start of frame                                                          must be moved to. This value must be smaller than                                                          FRAME_L, but it cannot be negative. See below how the                                                          sample count gets updated based on registers 0x30 and                                                          0x31 at sample count RX_SYNC_VALUE.                                                          If RX_SYNC_SCNT>= RX_SYNC_VALUE                                                          sample_count = RX_SYNC_SCNT ? RX_SYNC_VALUE + 1                                                          Else                                                          sample_count = RX_SYNC_SCNT + FRAME_L ?                                                          RX_SYNC_VALUE + 1                                                          Note this is not used for eNB products, only for UE                                                          products.                                                          Note this register is cleared after the correction is                                                          applied. */
else|#
directive|else
name|uint32_t
name|val
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_sync_value_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_sync_value
name|cvmx_endor_rfif_rx_sync_value_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_th  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_th
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_th_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_12_31
range|:
literal|20
decl_stmt|;
name|uint32_t
name|thr
range|:
literal|12
decl_stmt|;
comment|/**< FIFO level reached before granting a RX DMA request.                                                          This RX FIFO fill level threshold can be used                                                          in two ways:                                                               1- When the FIFO fill level reaches the threshold,                                                          there is enough data in the FIFO to start the data                                                          transfer, so it grants a DMA transfer from the RX FIFO                                                          to the HAB's memory.                                                               2- It can also be used to generate an interrupt to                                                          the DSP when the FIFO threshold is reached. */
else|#
directive|else
name|uint32_t
name|thr
range|:
literal|12
decl_stmt|;
name|uint32_t
name|reserved_12_31
range|:
literal|20
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_th_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_th
name|cvmx_endor_rfif_rx_th_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_transfer_size  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_transfer_size
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_transfer_size_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint32_t
name|size
range|:
literal|13
decl_stmt|;
comment|/**< Indicates the size of the DMA data transfer from the                                                          rf_if RX FIFO out via the HMI IF.                                                          The DMA transfers to the HAB1 and HAB2 */
else|#
directive|else
name|uint32_t
name|size
range|:
literal|13
decl_stmt|;
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_transfer_size_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_transfer_size
name|cvmx_endor_rfif_rx_transfer_size_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_w_e#  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_w_ex
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_w_ex_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|end_cnt
range|:
literal|20
decl_stmt|;
comment|/**< End count for each of the 4 RX windows. The maximum                                                          value should be FRAME_L, unless the window must stay                                                          opened for ever. */
else|#
directive|else
name|uint32_t
name|end_cnt
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_w_ex_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_w_ex
name|cvmx_endor_rfif_rx_w_ex_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_rx_w_s#  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_rx_w_sx
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_rx_w_sx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|start_pnt
range|:
literal|20
decl_stmt|;
comment|/**< Start points for each of the 4 RX windows                                                          Some restrictions applies to the start and end values:                                                          1- The first RX window must always start at the sample                                                          count 0.                                                          2- The other start point must be greater than rx_lead,                                                          refer to 0x008.                                                          3- All start point values must be smaller than the                                                          endpoints in TDD mode.                                                          4- RX windows have priorities over TX windows in TDD                                                          mode.                                                          5- There must be a minimum of 7 samples between                                                          closing a window and opening a new one. However, it is                                                          recommended to leave a 10 samples gap. Note that this                                                          number could increase with different RF ICs used. */
else|#
directive|else
name|uint32_t
name|start_pnt
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_rx_w_sx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_rx_w_sx
name|cvmx_endor_rfif_rx_w_sx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_sample_adj_cfg  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_sample_adj_cfg
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_sample_adj_cfg_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|adj
range|:
literal|1
decl_stmt|;
comment|/**< Indicates whether samples must be removed from the                                                           beginning or the end of the frame.                                                          - 1: add/remove samples from the beginning of the frame                                                          - 0: add/remove samples from the end of the frame                                                           (default) */
else|#
directive|else
name|uint32_t
name|adj
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_sample_adj_cfg_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_sample_adj_cfg
name|cvmx_endor_rfif_sample_adj_cfg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_sample_adj_error  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_sample_adj_error
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_sample_adj_error_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|offset
range|:
literal|32
decl_stmt|;
comment|/**< Count of the number of times the TX FIFO did not have                                                          enough IQ samples to be dropped for a TX timing                                                          adjustment.                                                          0-7 = TX FIFO sample adjustment error                                                          - 16:23 = TX DIV sample adjustment error */
else|#
directive|else
name|uint32_t
name|offset
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_sample_adj_error_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_sample_adj_error
name|cvmx_endor_rfif_sample_adj_error_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_sample_cnt  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_sample_cnt
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_sample_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
comment|/**< Sample count modulo FRAME_L. The start of frame is                                                          aligned with count 0. */
else|#
directive|else
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_sample_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_sample_cnt
name|cvmx_endor_rfif_sample_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_skip_frm_cnt_bits  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_skip_frm_cnt_bits
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_skip_frm_cnt_bits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
name|uint32_t
name|bits
range|:
literal|2
decl_stmt|;
comment|/**< Indicates the number of sample count bits to skip, in                                                           order to reduce the sample count update frequency and                                                           permit a reliable clock crossing from the RF to the                                                           HAB clock domain.                                                          - 0: No bits are skipped                                                           - ...                                                          - 3: 3 bits are skipped */
else|#
directive|else
name|uint32_t
name|bits
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved_2_31
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_skip_frm_cnt_bits_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_skip_frm_cnt_bits
name|cvmx_endor_rfif_skip_frm_cnt_bits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_#_ll  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_x_ll
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_x_ll_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|num
range|:
literal|20
decl_stmt|;
comment|/**< SPI event X start sample count */
else|#
directive|else
name|uint32_t
name|num
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_x_ll_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_x_ll
name|cvmx_endor_rfif_spi_x_ll_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_cmd_attr#  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_cmd_attrx
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_cmd_attrx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
name|uint32_t
name|slave
range|:
literal|1
decl_stmt|;
comment|/**< Slave select (in case there are 2 ADI chips)                                                          - 0: slave 1                                                          - 1: slave 2 */
name|uint32_t
name|bytes
range|:
literal|1
decl_stmt|;
comment|/**< Number of data bytes transfer                                                          - 0: 1 byte transfer mode                                                          - 1: 2 bytes transfer mode */
name|uint32_t
name|gen_int
range|:
literal|1
decl_stmt|;
comment|/**< Generate an interrupt upon the SPI event completion:                                                          - 0: no interrupt generated  1: interrupt generated */
name|uint32_t
name|rw
range|:
literal|1
decl_stmt|;
comment|/**< r/w: r:0 ; w:1. */
else|#
directive|else
name|uint32_t
name|rw
range|:
literal|1
decl_stmt|;
name|uint32_t
name|gen_int
range|:
literal|1
decl_stmt|;
name|uint32_t
name|bytes
range|:
literal|1
decl_stmt|;
name|uint32_t
name|slave
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_cmd_attrx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_cmd_attrx
name|cvmx_endor_rfif_spi_cmd_attrx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_cmds#  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_cmdsx
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_cmdsx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|word
range|:
literal|24
decl_stmt|;
comment|/**< Spi command word. */
else|#
directive|else
name|uint32_t
name|word
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_cmdsx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_cmdsx
name|cvmx_endor_rfif_spi_cmdsx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_conf0  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_conf0
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_conf0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|num_cmds3
range|:
literal|6
decl_stmt|;
comment|/**< Number of SPI cmds to transfer for event 3 */
name|uint32_t
name|num_cmds2
range|:
literal|6
decl_stmt|;
comment|/**< Number of SPI cmds to transfer for event 2 */
name|uint32_t
name|num_cmds1
range|:
literal|6
decl_stmt|;
comment|/**< Number of SPI cmds to transfer for event 1 */
name|uint32_t
name|num_cmds0
range|:
literal|6
decl_stmt|;
comment|/**< Number of SPI cmds to transfer for event 0 */
else|#
directive|else
name|uint32_t
name|num_cmds0
range|:
literal|6
decl_stmt|;
name|uint32_t
name|num_cmds1
range|:
literal|6
decl_stmt|;
name|uint32_t
name|num_cmds2
range|:
literal|6
decl_stmt|;
name|uint32_t
name|num_cmds3
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_conf0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_conf0
name|cvmx_endor_rfif_spi_conf0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_conf1  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_conf1
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_conf1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|start3
range|:
literal|6
decl_stmt|;
comment|/**< SPI commands start address for event 3 */
name|uint32_t
name|start2
range|:
literal|6
decl_stmt|;
comment|/**< SPI commands start address for event 2 */
name|uint32_t
name|start1
range|:
literal|6
decl_stmt|;
comment|/**< SPI commands start address for event 1 */
name|uint32_t
name|start0
range|:
literal|6
decl_stmt|;
comment|/**< SPI commands start address for event 0 */
else|#
directive|else
name|uint32_t
name|start0
range|:
literal|6
decl_stmt|;
name|uint32_t
name|start1
range|:
literal|6
decl_stmt|;
name|uint32_t
name|start2
range|:
literal|6
decl_stmt|;
name|uint32_t
name|start3
range|:
literal|6
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_conf1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_conf1
name|cvmx_endor_rfif_spi_conf1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_ctrl  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_ctrl
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_ctrl_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|ctrl
range|:
literal|32
decl_stmt|;
comment|/**< Control */
else|#
directive|else
name|uint32_t
name|ctrl
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_ctrl_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_ctrl
name|cvmx_endor_rfif_spi_ctrl_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_din#  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_dinx
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_dinx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
name|uint32_t
name|data
range|:
literal|16
decl_stmt|;
comment|/**< Data read back from spi commands. */
else|#
directive|else
name|uint32_t
name|data
range|:
literal|16
decl_stmt|;
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_dinx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_dinx
name|cvmx_endor_rfif_spi_dinx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_rx_data  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_rx_data
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_rx_data_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|rd_data
range|:
literal|32
decl_stmt|;
comment|/**< SPI Read Data */
else|#
directive|else
name|uint32_t
name|rd_data
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_rx_data_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_rx_data
name|cvmx_endor_rfif_spi_rx_data_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_status  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_12_31
range|:
literal|20
decl_stmt|;
name|uint32_t
name|sr_state
range|:
literal|4
decl_stmt|;
comment|/**< SPI State Machine                                                          1 : INIT                                                          2 : IDLE                                                          3 : WAIT_FIFO                                                          4 : READ_FIFO                                                          5 : LOAD_SR                                                          6 : SHIFT_SR                                                          7 : WAIT_CLK                                                          8 : WAIT_FOR_SS */
name|uint32_t
name|rx_fifo_lvl
range|:
literal|4
decl_stmt|;
comment|/**< Level of RX FIFO */
name|uint32_t
name|tx_fifo_lvl
range|:
literal|4
decl_stmt|;
comment|/**< Level of TX FIFO */
else|#
directive|else
name|uint32_t
name|tx_fifo_lvl
range|:
literal|4
decl_stmt|;
name|uint32_t
name|rx_fifo_lvl
range|:
literal|4
decl_stmt|;
name|uint32_t
name|sr_state
range|:
literal|4
decl_stmt|;
name|uint32_t
name|reserved_12_31
range|:
literal|20
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_status
name|cvmx_endor_rfif_spi_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_spi_tx_data  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_spi_tx_data
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_spi_tx_data_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|write
range|:
literal|1
decl_stmt|;
comment|/**< When set, execute write. Otherwise, read. */
name|uint32_t
name|reserved_25_30
range|:
literal|6
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|9
decl_stmt|;
comment|/**< SPI Address */
name|uint32_t
name|data
range|:
literal|8
decl_stmt|;
comment|/**< SPI Data */
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
else|#
directive|else
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
name|uint32_t
name|data
range|:
literal|8
decl_stmt|;
name|uint32_t
name|addr
range|:
literal|9
decl_stmt|;
name|uint32_t
name|reserved_25_30
range|:
literal|6
decl_stmt|;
name|uint32_t
name|write
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_spi_tx_data_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_spi_tx_data
name|cvmx_endor_rfif_spi_tx_data_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_timer64_cfg  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_timer64_cfg
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_timer64_cfg_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|clks
range|:
literal|8
decl_stmt|;
comment|/**< 7-0: Number of rf clock cycles per 64-bit timer                                                          increment. Set to n for n+1 cycles (default=0x7F for                                                          128 cycles).  The valid range for the register is 3 to                                                          255. */
else|#
directive|else
name|uint32_t
name|clks
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_timer64_cfg_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_timer64_cfg
name|cvmx_endor_rfif_timer64_cfg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_timer64_en  *  * Notes:  * This is how the 64-bit timer works:  * 1- Configuration  *     - Write counter LSB (reg:0x69)  *     - Write counter MSB (reg:0x6A)  *     - Write config (reg:0x68)  * 2- Enable the counter  * 3- Wait for the 1PPS  * 4- Start incrementing the counter every n+1 rf clock cycles  * 5- Read the MSB and LSB registers (reg:0x6B and 0x6C)  *  * 6- There is no 64-bit snapshot mechanism. Software has to consider the  *    32 LSB might rollover and increment the 32 MSB between the LSB and the  *    MSB reads. You may want to use the following concatenation recipe:  *  * a) Read the 32 MSB (MSB1)  * b) Read the 32 LSB  * c) Read the 32 MSB again (MSB2)  * d) Concatenate the 32 MSB an 32 LSB  *      -If both 32 MSB are equal or LSB(31)=1, concatenate MSB1 and LSB  *      -Else concatenate the MSB2 and LSB  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_timer64_en
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_timer64_en_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
comment|/**< Enable for the 64-bit rf clock based timer.                                                          - 0: Disabled                                                          - 1: Enabled */
else|#
directive|else
name|uint32_t
name|ena
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_1_31
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_timer64_en_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_timer64_en
name|cvmx_endor_rfif_timer64_en_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tti_scnt_int#  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tti_scnt_intx
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tti_scnt_intx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|intr
range|:
literal|20
decl_stmt|;
comment|/**< TTI Sample Count Interrupt:                                                          Indicates the sample count of the selected reference                                                          counter at which to generate an interrupt. */
else|#
directive|else
name|uint32_t
name|intr
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tti_scnt_intx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tti_scnt_intx
name|cvmx_endor_rfif_tti_scnt_intx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tti_scnt_int_clr  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tti_scnt_int_clr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tti_scnt_int_clr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|cnt
range|:
literal|8
decl_stmt|;
comment|/**< TTI Sample Count Interrupt Status register:                                                          Writing 0x1 to clear the TTI_SCNT_INT_STAT(0), writing                                                          0x2 to clear the TTI_SCNT_INT_STAT(1) and so on. */
else|#
directive|else
name|uint32_t
name|cnt
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tti_scnt_int_clr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tti_scnt_int_clr
name|cvmx_endor_rfif_tti_scnt_int_clr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tti_scnt_int_en  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tti_scnt_int_en
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tti_scnt_int_en_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|ena
range|:
literal|8
decl_stmt|;
comment|/**< TTI Sample Counter Interrupt Enable:                                                          Bit 0: 1  Enables TTI_SCNT_INT_0                                                          Bit 1: 1 Enables TTI_SCNT_INT_1                                                          - ...                                                          Bit 7: 1  Enables TTI_SCNT_INT_7                                                          Note these interrupts are disabled by default (=0x00). */
else|#
directive|else
name|uint32_t
name|ena
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tti_scnt_int_en_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tti_scnt_int_en
name|cvmx_endor_rfif_tti_scnt_int_en_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tti_scnt_int_map  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tti_scnt_int_map
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tti_scnt_int_map_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|map
range|:
literal|8
decl_stmt|;
comment|/**< TTI Sample Count Interrupt Mapping to a Reference                                                          Counter:                                                          Indicates the reference counter the TTI Sample Count                                                          Interrupts must be generated from. A value of 0                                                          indicates the RX reference counter (default) and a                                                          value of 1 indicates the TX reference counter. The                                                          bit 0 is associated with TTI_SCNT_INT_0, the bit 1                                                          is associated with TTI_SCNT_INT_1 and so on.                                                          Note that This register has not effect in TDD mode,                                                          only in FDD mode. */
else|#
directive|else
name|uint32_t
name|map
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tti_scnt_int_map_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tti_scnt_int_map
name|cvmx_endor_rfif_tti_scnt_int_map_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tti_scnt_int_stat  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tti_scnt_int_stat
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tti_scnt_int_stat_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|cnt
range|:
literal|8
decl_stmt|;
comment|/**< TTI Sample Count Interrupt Status register:                                                          Indicates if a TTI_SCNT_INT_X occurred (1) or not (0).                                                          The bit 0 is associated with TTI_SCNT_INT_0 and so on                                                          incrementally. Writing a 1 will clear the interrupt                                                          bit. */
else|#
directive|else
name|uint32_t
name|cnt
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tti_scnt_int_stat_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tti_scnt_int_stat
name|cvmx_endor_rfif_tti_scnt_int_stat_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tx_div_status  *  * Notes:  * In TDD Mode, bits 15:12 are DDR state machine status.  *  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tx_div_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tx_div_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
name|uint32_t
name|rfic_ena
range|:
literal|1
decl_stmt|;
comment|/**< RFIC enabled (in alert state) */
name|uint32_t
name|sync_late
range|:
literal|1
decl_stmt|;
comment|/**< Sync late (Used for UE products). */
name|uint32_t
name|reserved_19_20
range|:
literal|2
decl_stmt|;
name|uint32_t
name|thresh_rch
range|:
literal|1
decl_stmt|;
comment|/**< Threshold Reached (RX/RX_div/TX) */
name|uint32_t
name|fifo_of
range|:
literal|1
decl_stmt|;
comment|/**< FIFO overflow */
name|uint32_t
name|fifo_ur
range|:
literal|1
decl_stmt|;
comment|/**< FIFO underrun */
name|uint32_t
name|tx_sm
range|:
literal|2
decl_stmt|;
comment|/**< TX state machine status */
name|uint32_t
name|rx_sm
range|:
literal|2
decl_stmt|;
comment|/**< RX state machine status */
name|uint32_t
name|hab_req_sm
range|:
literal|4
decl_stmt|;
comment|/**< HAB request manager SM                                                          - 0: idle                                                          - 1: wait_cs                                                          - 2: Term                                                          - 3: rd_fifo(RX)/ write fifo(TX)                                                          - 4: wait_th                                                           Others: not used */
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
else|#
directive|else
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
name|uint32_t
name|hab_req_sm
range|:
literal|4
decl_stmt|;
name|uint32_t
name|rx_sm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|tx_sm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|fifo_ur
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fifo_of
range|:
literal|1
decl_stmt|;
name|uint32_t
name|thresh_rch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_19_20
range|:
literal|2
decl_stmt|;
name|uint32_t
name|sync_late
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfic_ena
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tx_div_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tx_div_status
name|cvmx_endor_rfif_tx_div_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tx_if_cfg  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tx_if_cfg
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tx_if_cfg_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
name|uint32_t
name|mode
range|:
literal|1
decl_stmt|;
comment|/**< TX communication mode                                                          - 0: TX SISO (default)                                                          - 1: TX MIMO */
name|uint32_t
name|dis_sch
range|:
literal|1
decl_stmt|;
comment|/**< Disabled antenna driving scheme (TX SISO/RX MIMO                                                           feature only)                                                          - 0: Constant 0 for debugging (default)                                                          - 1: Same as previous cycle to minimize IO switching */
name|uint32_t
name|antenna
range|:
literal|2
decl_stmt|;
comment|/**< Transmit on antenna A and/or B (TX SISO/RX MIMO                                                           feature only)                                                          - 0: Transmit on antenna A (default)                                                          - 1: Transmit on antenna B                                                          - 2: Transmit on A and B                                                          - 3: Reserved */
else|#
directive|else
name|uint32_t
name|antenna
range|:
literal|2
decl_stmt|;
name|uint32_t
name|dis_sch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|mode
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tx_if_cfg_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tx_if_cfg
name|cvmx_endor_rfif_tx_if_cfg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tx_lead_lag  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tx_lead_lag
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tx_lead_lag_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|lag
range|:
literal|12
decl_stmt|;
comment|/**< unsigned value (lag) on end of window */
name|uint32_t
name|lead
range|:
literal|12
decl_stmt|;
comment|/**< unsigned value (lead) on beginning of window */
else|#
directive|else
name|uint32_t
name|lead
range|:
literal|12
decl_stmt|;
name|uint32_t
name|lag
range|:
literal|12
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tx_lead_lag_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tx_lead_lag
name|cvmx_endor_rfif_tx_lead_lag_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tx_offset  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tx_offset
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tx_offset_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|offset
range|:
literal|20
decl_stmt|;
comment|/**< Indicates the number of RF clock cycles after the                                                          GPS/ETH 1PPS is received before the start of the RX                                                          frame. See description Figure 44. */
else|#
directive|else
name|uint32_t
name|offset
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tx_offset_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tx_offset
name|cvmx_endor_rfif_tx_offset_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tx_offset_adj_scnt  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tx_offset_adj_scnt
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tx_offset_adj_scnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
comment|/**< Indicates the TX sample count at which the 1PPS                                                          incremental adjustments will be applied. */
else|#
directive|else
name|uint32_t
name|cnt
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tx_offset_adj_scnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tx_offset_adj_scnt
name|cvmx_endor_rfif_tx_offset_adj_scnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tx_status  *  * Notes:  * In TDD Mode, bits 15:12 are DDR state machine status.  *  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tx_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tx_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
name|uint32_t
name|rfic_ena
range|:
literal|1
decl_stmt|;
comment|/**< RFIC enabled (in alert state) */
name|uint32_t
name|sync_late
range|:
literal|1
decl_stmt|;
comment|/**< Sync late (Used for UE products). */
name|uint32_t
name|reserved_19_20
range|:
literal|2
decl_stmt|;
name|uint32_t
name|thresh_rch
range|:
literal|1
decl_stmt|;
comment|/**< Threshold Reached (RX/RX_div/TX) */
name|uint32_t
name|fifo_of
range|:
literal|1
decl_stmt|;
comment|/**< FIFO overflow */
name|uint32_t
name|fifo_ur
range|:
literal|1
decl_stmt|;
comment|/**< FIFO underrun */
name|uint32_t
name|tx_sm
range|:
literal|2
decl_stmt|;
comment|/**< TX state machine status */
name|uint32_t
name|rx_sm
range|:
literal|2
decl_stmt|;
comment|/**< RX state machine status */
name|uint32_t
name|hab_req_sm
range|:
literal|4
decl_stmt|;
comment|/**< HAB request manager SM                                                          - 0: idle                                                          - 1: wait_cs                                                          - 2: Term                                                          - 3: rd_fifo(RX)/ write fifo(TX)                                                          - 4: wait_th                                                           Others: not used */
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
else|#
directive|else
name|uint32_t
name|reserved_0_7
range|:
literal|8
decl_stmt|;
name|uint32_t
name|hab_req_sm
range|:
literal|4
decl_stmt|;
name|uint32_t
name|rx_sm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|tx_sm
range|:
literal|2
decl_stmt|;
name|uint32_t
name|fifo_ur
range|:
literal|1
decl_stmt|;
name|uint32_t
name|fifo_of
range|:
literal|1
decl_stmt|;
name|uint32_t
name|thresh_rch
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_19_20
range|:
literal|2
decl_stmt|;
name|uint32_t
name|sync_late
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfic_ena
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_23_31
range|:
literal|9
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tx_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tx_status
name|cvmx_endor_rfif_tx_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_tx_th  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_tx_th
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_tx_th_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_12_31
range|:
literal|20
decl_stmt|;
name|uint32_t
name|thr
range|:
literal|12
decl_stmt|;
comment|/**< FIFO level reached before granting a TX DMA request.                                                          This TX FIFO fill level threshold can be used                                                          in two ways:                                                               1- When the FIFO fill level reaches the threshold,                                                          there is enough data in the FIFO to start the data                                                          transfer, so it grants a DMA transfer from the TX FIFO                                                          to the HAB's memory.                                                               2- It can also be used to generate an interrupt to                                                          the DSP when the FIFO threshold is reached. */
else|#
directive|else
name|uint32_t
name|thr
range|:
literal|12
decl_stmt|;
name|uint32_t
name|reserved_12_31
range|:
literal|20
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_tx_th_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_tx_th
name|cvmx_endor_rfif_tx_th_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_win_en  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_win_en
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_win_en_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
name|uint32_t
name|enable
range|:
literal|4
decl_stmt|;
comment|/**< Receive windows enable (all enabled by default)                                                          Bit 0: 1 window 1 enabled, 0 window 1 disabled                                                          - ...                                                          Bit 3: 1 window 3 enabled, 0 window 3 disabled.                                                          Bits 23-4: not used */
else|#
directive|else
name|uint32_t
name|enable
range|:
literal|4
decl_stmt|;
name|uint32_t
name|reserved_4_31
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_win_en_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_win_en
name|cvmx_endor_rfif_win_en_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_win_upd_scnt  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_win_upd_scnt
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_win_upd_scnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
name|uint32_t
name|scnt
range|:
literal|20
decl_stmt|;
comment|/**< Receive window update sample count. This is the count                                                          at which the following registers newly programmed value                                                          will take effect. RX_WIN_EN(3-0), RX_W_S (19-0),                                                          RX_W_E(19-0), NUM_RX_WIN(3-0),  FRAME_L(19-0),                                                          RX_LEAD_LAG(23-0) */
else|#
directive|else
name|uint32_t
name|scnt
range|:
literal|20
decl_stmt|;
name|uint32_t
name|reserved_20_31
range|:
literal|12
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_win_upd_scnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_win_upd_scnt
name|cvmx_endor_rfif_win_upd_scnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_wr_timer64_lsb  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_wr_timer64_lsb
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_wr_timer64_lsb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|val
range|:
literal|32
decl_stmt|;
comment|/**< 64-bit timer initial value of the 32 LSB. */
else|#
directive|else
name|uint32_t
name|val
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_wr_timer64_lsb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_wr_timer64_lsb
name|cvmx_endor_rfif_wr_timer64_lsb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rfif_wr_timer64_msb  */
end_comment

begin_union
union|union
name|cvmx_endor_rfif_wr_timer64_msb
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rfif_wr_timer64_msb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|val
range|:
literal|32
decl_stmt|;
comment|/**< 64-bit timer initial value of the 32 MSB. */
else|#
directive|else
name|uint32_t
name|val
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rfif_wr_timer64_msb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rfif_wr_timer64_msb
name|cvmx_endor_rfif_wr_timer64_msb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_clkenb0_clr  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_clkenb0_clr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_clkenb0_clr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_clkenb0_clr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_clkenb0_clr
name|cvmx_endor_rstclk_clkenb0_clr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_clkenb0_set  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_clkenb0_set
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_clkenb0_set_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_clkenb0_set_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_clkenb0_set
name|cvmx_endor_rstclk_clkenb0_set_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_clkenb0_state  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_clkenb0_state
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_clkenb0_state_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_clkenb0_state_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_clkenb0_state
name|cvmx_endor_rstclk_clkenb0_state_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_clkenb1_clr  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_clkenb1_clr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_clkenb1_clr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_clkenb1_clr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_clkenb1_clr
name|cvmx_endor_rstclk_clkenb1_clr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_clkenb1_set  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_clkenb1_set
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_clkenb1_set_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_clkenb1_set_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_clkenb1_set
name|cvmx_endor_rstclk_clkenb1_set_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_clkenb1_state  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_clkenb1_state
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_clkenb1_state_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_clkenb1_state_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_clkenb1_state
name|cvmx_endor_rstclk_clkenb1_state_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_dspstall_clr  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_dspstall_clr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_dspstall_clr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|txdsp1
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|txdsp0
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1dsp1
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1dsp0
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0dsp1
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0dsp0
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|rx0dsp0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx0dsp1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1dsp0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1dsp1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txdsp0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txdsp1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_dspstall_clr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_dspstall_clr
name|cvmx_endor_rstclk_dspstall_clr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_dspstall_set  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_dspstall_set
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_dspstall_set_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|txdsp1
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|txdsp0
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1dsp1
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1dsp0
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0dsp1
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0dsp0
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|rx0dsp0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx0dsp1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1dsp0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1dsp1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txdsp0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txdsp1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_dspstall_set_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_dspstall_set
name|cvmx_endor_rstclk_dspstall_set_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_dspstall_state  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_dspstall_state
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_dspstall_state_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|txdsp1
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|txdsp0
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1dsp1
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1dsp0
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0dsp1
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0dsp0
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|rx0dsp0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx0dsp1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1dsp0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1dsp1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txdsp0
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txdsp1
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_dspstall_state_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_dspstall_state
name|cvmx_endor_rstclk_dspstall_state_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_intr0_clrmask  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_intr0_clrmask
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_intr0_clrmask_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_intr0_clrmask_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_intr0_clrmask
name|cvmx_endor_rstclk_intr0_clrmask_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_intr0_mask  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_intr0_mask
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_intr0_mask_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_intr0_mask_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_intr0_mask
name|cvmx_endor_rstclk_intr0_mask_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_intr0_setmask  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_intr0_setmask
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_intr0_setmask_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_intr0_setmask_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_intr0_setmask
name|cvmx_endor_rstclk_intr0_setmask_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_intr0_status  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_intr0_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_intr0_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_intr0_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_intr0_status
name|cvmx_endor_rstclk_intr0_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_intr1_clrmask  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_intr1_clrmask
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_intr1_clrmask_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_intr1_clrmask_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_intr1_clrmask
name|cvmx_endor_rstclk_intr1_clrmask_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_intr1_mask  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_intr1_mask
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_intr1_mask_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_intr1_mask_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_intr1_mask
name|cvmx_endor_rstclk_intr1_mask_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_intr1_setmask  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_intr1_setmask
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_intr1_setmask_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_intr1_setmask_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_intr1_setmask
name|cvmx_endor_rstclk_intr1_setmask_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_intr1_status  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_intr1_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_intr1_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_intr1_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_intr1_status
name|cvmx_endor_rstclk_intr1_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_phy_config  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_phy_config
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_phy_config_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
name|uint32_t
name|t3smem_initenb
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|t3imem_initenb
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|t2smem_initenb
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|t2imem_initenb
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|t1smem_initenb
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|t1imem_initenb
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|t1imem_initenb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t1smem_initenb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2imem_initenb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t2smem_initenb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3imem_initenb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|t3smem_initenb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_6_31
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_phy_config_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_phy_config
name|cvmx_endor_rstclk_phy_config_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_proc_mon  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_proc_mon
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_proc_mon_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint32_t
name|transistor_sel
range|:
literal|2
decl_stmt|;
comment|/**< 01==RVT, 10==HVT. */
name|uint32_t
name|ringosc_count
range|:
literal|16
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|ringosc_count
range|:
literal|16
decl_stmt|;
name|uint32_t
name|transistor_sel
range|:
literal|2
decl_stmt|;
name|uint32_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_proc_mon_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_proc_mon
name|cvmx_endor_rstclk_proc_mon_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_proc_mon_count  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_proc_mon_count
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_proc_mon_count_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|count
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|count
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_proc_mon_count_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_proc_mon_count
name|cvmx_endor_rstclk_proc_mon_count_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_reset0_clr  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_reset0_clr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_reset0_clr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_reset0_clr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_reset0_clr
name|cvmx_endor_rstclk_reset0_clr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_reset0_set  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_reset0_set
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_reset0_set_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_reset0_set_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_reset0_set
name|cvmx_endor_rstclk_reset0_set_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_reset0_state  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_reset0_state
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_reset0_state_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|ulfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rachfe
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx0seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|dftdmap
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rx1seq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbophy
range|:
literal|1
decl_stmt|;
name|uint32_t
name|turbodsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|vdec
range|:
literal|1
decl_stmt|;
name|uint32_t
name|lteenc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|ifftpapr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|v3genc
range|:
literal|1
decl_stmt|;
name|uint32_t
name|txseq
range|:
literal|1
decl_stmt|;
name|uint32_t
name|axidma
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_reset0_state_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_reset0_state
name|cvmx_endor_rstclk_reset0_state_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_reset1_clr  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_reset1_clr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_reset1_clr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_reset1_clr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_reset1_clr
name|cvmx_endor_rstclk_reset1_clr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_reset1_set  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_reset1_set
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_reset1_set_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_reset1_set_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_reset1_set
name|cvmx_endor_rstclk_reset1_set_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_reset1_state  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_reset1_state
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_reset1_state_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|rfif_rf
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfif_hab
range|:
literal|1
decl_stmt|;
name|uint32_t
name|rfspi
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile1dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile2dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|tile3dsp
range|:
literal|1
decl_stmt|;
name|uint32_t
name|token
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_7_31
range|:
literal|25
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_reset1_state_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_reset1_state
name|cvmx_endor_rstclk_reset1_state_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_sw_intr_clr  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_sw_intr_clr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_sw_intr_clr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_sw_intr_clr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_sw_intr_clr
name|cvmx_endor_rstclk_sw_intr_clr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_sw_intr_set  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_sw_intr_set
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_sw_intr_set_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_sw_intr_set_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_sw_intr_set
name|cvmx_endor_rstclk_sw_intr_set_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_sw_intr_status  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_sw_intr_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_sw_intr_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|sw_intr
range|:
literal|24
decl_stmt|;
name|uint32_t
name|timer_intr
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_sw_intr_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_sw_intr_status
name|cvmx_endor_rstclk_sw_intr_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_time#_thrd  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_timex_thrd
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_timex_thrd_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
name|uint32_t
name|value
range|:
literal|24
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|value
range|:
literal|24
decl_stmt|;
name|uint32_t
name|reserved_24_31
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_timex_thrd_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_timex_thrd
name|cvmx_endor_rstclk_timex_thrd_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_timer_ctl  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_timer_ctl
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_timer_ctl_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
name|uint32_t
name|intr_enb
range|:
literal|8
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint32_t
name|enb
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|cont
range|:
literal|1
decl_stmt|;
comment|/**< abc */
name|uint32_t
name|clr
range|:
literal|1
decl_stmt|;
comment|/**< abc */
else|#
directive|else
name|uint32_t
name|clr
range|:
literal|1
decl_stmt|;
name|uint32_t
name|cont
range|:
literal|1
decl_stmt|;
name|uint32_t
name|enb
range|:
literal|1
decl_stmt|;
name|uint32_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint32_t
name|intr_enb
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_timer_ctl_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_timer_ctl
name|cvmx_endor_rstclk_timer_ctl_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_timer_intr_clr  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_timer_intr_clr
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_timer_intr_clr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|clr
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|clr
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_timer_intr_clr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_timer_intr_clr
name|cvmx_endor_rstclk_timer_intr_clr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_timer_intr_status  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_timer_intr_status
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_timer_intr_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
name|uint32_t
name|status
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|status
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_8_31
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_timer_intr_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_timer_intr_status
name|cvmx_endor_rstclk_timer_intr_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_timer_max  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_timer_max
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_timer_max_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_timer_max_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_timer_max
name|cvmx_endor_rstclk_timer_max_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_timer_value  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_timer_value
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_timer_value_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|value
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_timer_value_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_timer_value
name|cvmx_endor_rstclk_timer_value_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_endor_rstclk_version  */
end_comment

begin_union
union|union
name|cvmx_endor_rstclk_version
block|{
name|uint32_t
name|u32
decl_stmt|;
struct|struct
name|cvmx_endor_rstclk_version_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
name|uint32_t
name|major
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
name|uint32_t
name|minor
range|:
literal|8
decl_stmt|;
comment|/**< reserved. */
else|#
directive|else
name|uint32_t
name|minor
range|:
literal|8
decl_stmt|;
name|uint32_t
name|major
range|:
literal|8
decl_stmt|;
name|uint32_t
name|reserved_16_31
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_endor_rstclk_version_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_endor_rstclk_version
name|cvmx_endor_rstclk_version_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

