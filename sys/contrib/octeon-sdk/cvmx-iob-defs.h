begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2012  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-iob-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon iob.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_IOB_DEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_IOB_DEFS_H__
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_BIST_STATUS
value|(CVMX_ADD_IO_SEG(0x00011800F00007F8ull))
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_CTL_STATUS
value|(CVMX_ADD_IO_SEG(0x00011800F0000050ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_DWB_PRI_CNT
value|CVMX_IOB_DWB_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_DWB_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_DWB_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000028ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_DWB_PRI_CNT
value|(CVMX_ADD_IO_SEG(0x00011800F0000028ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_IOB_FAU_TIMEOUT
value|(CVMX_ADD_IO_SEG(0x00011800F0000000ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_I2C_PRI_CNT
value|CVMX_IOB_I2C_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_I2C_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_I2C_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_I2C_PRI_CNT
value|(CVMX_ADD_IO_SEG(0x00011800F0000010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_IOB_INB_CONTROL_MATCH
value|(CVMX_ADD_IO_SEG(0x00011800F0000078ull))
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_INB_CONTROL_MATCH_ENB
value|(CVMX_ADD_IO_SEG(0x00011800F0000088ull))
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_INB_DATA_MATCH
value|(CVMX_ADD_IO_SEG(0x00011800F0000070ull))
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_INB_DATA_MATCH_ENB
value|(CVMX_ADD_IO_SEG(0x00011800F0000080ull))
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_INT_ENB
value|(CVMX_ADD_IO_SEG(0x00011800F0000060ull))
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_INT_SUM
value|(CVMX_ADD_IO_SEG(0x00011800F0000058ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_N2C_L2C_PRI_CNT
value|CVMX_IOB_N2C_L2C_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_N2C_L2C_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_N2C_L2C_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000020ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_N2C_L2C_PRI_CNT
value|(CVMX_ADD_IO_SEG(0x00011800F0000020ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_N2C_RSP_PRI_CNT
value|CVMX_IOB_N2C_RSP_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_N2C_RSP_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_N2C_RSP_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000008ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_N2C_RSP_PRI_CNT
value|(CVMX_ADD_IO_SEG(0x00011800F0000008ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_COM_PRI_CNT
value|CVMX_IOB_OUTB_COM_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_COM_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_OUTB_COM_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000040ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_COM_PRI_CNT
value|(CVMX_ADD_IO_SEG(0x00011800F0000040ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_CONTROL_MATCH
value|(CVMX_ADD_IO_SEG(0x00011800F0000098ull))
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_CONTROL_MATCH_ENB
value|(CVMX_ADD_IO_SEG(0x00011800F00000A8ull))
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_DATA_MATCH
value|(CVMX_ADD_IO_SEG(0x00011800F0000090ull))
end_define

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_DATA_MATCH_ENB
value|(CVMX_ADD_IO_SEG(0x00011800F00000A0ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_FPA_PRI_CNT
value|CVMX_IOB_OUTB_FPA_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_FPA_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_OUTB_FPA_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000048ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_FPA_PRI_CNT
value|(CVMX_ADD_IO_SEG(0x00011800F0000048ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_REQ_PRI_CNT
value|CVMX_IOB_OUTB_REQ_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_OUTB_REQ_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_OUTB_REQ_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000038ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_OUTB_REQ_PRI_CNT
value|(CVMX_ADD_IO_SEG(0x00011800F0000038ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_P2C_REQ_PRI_CNT
value|CVMX_IOB_P2C_REQ_PRI_CNT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_P2C_REQ_PRI_CNT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_P2C_REQ_PRI_CNT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000018ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_P2C_REQ_PRI_CNT
value|(CVMX_ADD_IO_SEG(0x00011800F0000018ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_PKT_ERR
value|CVMX_IOB_PKT_ERR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_PKT_ERR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN5XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_PKT_ERR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000068ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_PKT_ERR
value|(CVMX_ADD_IO_SEG(0x00011800F0000068ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_CMB_CREDITS
value|CVMX_IOB_TO_CMB_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_CMB_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_CMB_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F00000B0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_CMB_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F00000B0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_00_CREDITS
value|CVMX_IOB_TO_NCB_DID_00_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_00_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_00_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000800ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_00_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F0000800ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_111_CREDITS
value|CVMX_IOB_TO_NCB_DID_111_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_111_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_111_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000B78ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_111_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F0000B78ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_223_CREDITS
value|CVMX_IOB_TO_NCB_DID_223_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_223_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_223_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000EF8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_223_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F0000EF8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_24_CREDITS
value|CVMX_IOB_TO_NCB_DID_24_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_24_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_24_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F00008C0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_24_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F00008C0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_32_CREDITS
value|CVMX_IOB_TO_NCB_DID_32_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_32_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_32_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000900ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_32_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F0000900ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_40_CREDITS
value|CVMX_IOB_TO_NCB_DID_40_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_40_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_40_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000940ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_40_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F0000940ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_55_CREDITS
value|CVMX_IOB_TO_NCB_DID_55_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_55_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_55_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F00009B8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_55_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F00009B8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_64_CREDITS
value|CVMX_IOB_TO_NCB_DID_64_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_64_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_64_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000A00ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_64_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F0000A00ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_79_CREDITS
value|CVMX_IOB_TO_NCB_DID_79_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_79_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_79_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000A78ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_79_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F0000A78ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_96_CREDITS
value|CVMX_IOB_TO_NCB_DID_96_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_96_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_96_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000B00ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_96_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F0000B00ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_98_CREDITS
value|CVMX_IOB_TO_NCB_DID_98_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB_TO_NCB_DID_98_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB_TO_NCB_DID_98_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0000B10ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB_TO_NCB_DID_98_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F0000B10ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_iob_bist_status  *  * IOB_BIST_STATUS = BIST Status of IOB Memories  *  * The result of the BIST run on the IOB memories.  */
end_comment

begin_union
union|union
name|cvmx_iob_bist_status
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_bist_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|ibd
range|:
literal|1
decl_stmt|;
comment|/**< ibd_bist_mem0_status */
name|uint64_t
name|icd
range|:
literal|1
decl_stmt|;
comment|/**< icd_ncb_fifo_bist_status */
else|#
directive|else
name|uint64_t
name|icd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_iob_bist_status_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_18_63
range|:
literal|46
decl_stmt|;
name|uint64_t
name|icnrcb
range|:
literal|1
decl_stmt|;
comment|/**< Reserved */
name|uint64_t
name|icr0
range|:
literal|1
decl_stmt|;
comment|/**< Reserved */
name|uint64_t
name|icr1
range|:
literal|1
decl_stmt|;
comment|/**< Reserved */
name|uint64_t
name|icnr1
range|:
literal|1
decl_stmt|;
comment|/**< Reserved */
name|uint64_t
name|icnr0
range|:
literal|1
decl_stmt|;
comment|/**< icnr_reg_mem0_bist_status */
name|uint64_t
name|ibdr0
range|:
literal|1
decl_stmt|;
comment|/**< ibdr_bist_req_fifo0_status */
name|uint64_t
name|ibdr1
range|:
literal|1
decl_stmt|;
comment|/**< ibdr_bist_req_fifo1_status */
name|uint64_t
name|ibr0
range|:
literal|1
decl_stmt|;
comment|/**< ibr_bist_rsp_fifo0_status */
name|uint64_t
name|ibr1
range|:
literal|1
decl_stmt|;
comment|/**< ibr_bist_rsp_fifo1_status */
name|uint64_t
name|icnrt
range|:
literal|1
decl_stmt|;
comment|/**< Reserved */
name|uint64_t
name|ibrq0
range|:
literal|1
decl_stmt|;
comment|/**< ibrq_bist_req_fifo0_status */
name|uint64_t
name|ibrq1
range|:
literal|1
decl_stmt|;
comment|/**< ibrq_bist_req_fifo1_status */
name|uint64_t
name|icrn0
range|:
literal|1
decl_stmt|;
comment|/**< icr_ncb_bist_mem0_status */
name|uint64_t
name|icrn1
range|:
literal|1
decl_stmt|;
comment|/**< icr_ncb_bist_mem1_status */
name|uint64_t
name|icrp0
range|:
literal|1
decl_stmt|;
comment|/**< icr_pko_bist_mem0_status */
name|uint64_t
name|icrp1
range|:
literal|1
decl_stmt|;
comment|/**< icr_pko_bist_mem1_status */
name|uint64_t
name|ibd
range|:
literal|1
decl_stmt|;
comment|/**< ibd_bist_mem0_status */
name|uint64_t
name|icd
range|:
literal|1
decl_stmt|;
comment|/**< icd_ncb_fifo_bist_status */
else|#
directive|else
name|uint64_t
name|icd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrp1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrp0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrn1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrn0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibrq1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibrq0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnrt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibdr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibdr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnrcb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_18_63
range|:
literal|46
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn30xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_iob_bist_status_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_23_63
range|:
literal|41
decl_stmt|;
name|uint64_t
name|xmdfif
range|:
literal|1
decl_stmt|;
comment|/**< xmdfif_bist_status */
name|uint64_t
name|xmcfif
range|:
literal|1
decl_stmt|;
comment|/**< xmcfif_bist_status */
name|uint64_t
name|iorfif
range|:
literal|1
decl_stmt|;
comment|/**< iorfif_bist_status */
name|uint64_t
name|rsdfif
range|:
literal|1
decl_stmt|;
comment|/**< rsdfif_bist_status */
name|uint64_t
name|iocfif
range|:
literal|1
decl_stmt|;
comment|/**< iocfif_bist_status */
name|uint64_t
name|icnrcb
range|:
literal|1
decl_stmt|;
comment|/**< icnr_cb_reg_fifo_bist_status */
name|uint64_t
name|icr0
range|:
literal|1
decl_stmt|;
comment|/**< icr_bist_req_fifo0_status */
name|uint64_t
name|icr1
range|:
literal|1
decl_stmt|;
comment|/**< icr_bist_req_fifo1_status */
name|uint64_t
name|icnr1
range|:
literal|1
decl_stmt|;
comment|/**< Reserved */
name|uint64_t
name|icnr0
range|:
literal|1
decl_stmt|;
comment|/**< icnr_reg_mem0_bist_status */
name|uint64_t
name|ibdr0
range|:
literal|1
decl_stmt|;
comment|/**< ibdr_bist_req_fifo0_status */
name|uint64_t
name|ibdr1
range|:
literal|1
decl_stmt|;
comment|/**< ibdr_bist_req_fifo1_status */
name|uint64_t
name|ibr0
range|:
literal|1
decl_stmt|;
comment|/**< ibr_bist_rsp_fifo0_status */
name|uint64_t
name|ibr1
range|:
literal|1
decl_stmt|;
comment|/**< ibr_bist_rsp_fifo1_status */
name|uint64_t
name|icnrt
range|:
literal|1
decl_stmt|;
comment|/**< icnr_tag_cb_reg_fifo_bist_status */
name|uint64_t
name|ibrq0
range|:
literal|1
decl_stmt|;
comment|/**< ibrq_bist_req_fifo0_status */
name|uint64_t
name|ibrq1
range|:
literal|1
decl_stmt|;
comment|/**< ibrq_bist_req_fifo1_status */
name|uint64_t
name|icrn0
range|:
literal|1
decl_stmt|;
comment|/**< icr_ncb_bist_mem0_status */
name|uint64_t
name|icrn1
range|:
literal|1
decl_stmt|;
comment|/**< icr_ncb_bist_mem1_status */
name|uint64_t
name|icrp0
range|:
literal|1
decl_stmt|;
comment|/**< icr_pko_bist_mem0_status */
name|uint64_t
name|icrp1
range|:
literal|1
decl_stmt|;
comment|/**< icr_pko_bist_mem1_status */
name|uint64_t
name|ibd
range|:
literal|1
decl_stmt|;
comment|/**< ibd_bist_mem0_status */
name|uint64_t
name|icd
range|:
literal|1
decl_stmt|;
comment|/**< icd_ncb_fifo_bist_status */
else|#
directive|else
name|uint64_t
name|icd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrp1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrp0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrn1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrn0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibrq1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibrq0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnrt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibdr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibdr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnrcb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iocfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rsdfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iorfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmcfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmdfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_23_63
range|:
literal|41
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_iob_bist_status_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn61xx
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_iob_bist_status_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_18_63
range|:
literal|46
decl_stmt|;
name|uint64_t
name|xmdfif
range|:
literal|1
decl_stmt|;
comment|/**< xmdfif_bist_status */
name|uint64_t
name|xmcfif
range|:
literal|1
decl_stmt|;
comment|/**< xmcfif_bist_status */
name|uint64_t
name|iorfif
range|:
literal|1
decl_stmt|;
comment|/**< iorfif_bist_status */
name|uint64_t
name|rsdfif
range|:
literal|1
decl_stmt|;
comment|/**< rsdfif_bist_status */
name|uint64_t
name|iocfif
range|:
literal|1
decl_stmt|;
comment|/**< iocfif_bist_status */
name|uint64_t
name|icnrcb
range|:
literal|1
decl_stmt|;
comment|/**< icnr_cb_reg_fifo_bist_status */
name|uint64_t
name|icr0
range|:
literal|1
decl_stmt|;
comment|/**< icr_bist_req_fifo0_status */
name|uint64_t
name|icr1
range|:
literal|1
decl_stmt|;
comment|/**< icr_bist_req_fifo1_status */
name|uint64_t
name|icnr0
range|:
literal|1
decl_stmt|;
comment|/**< icnr_reg_mem0_bist_status */
name|uint64_t
name|ibr0
range|:
literal|1
decl_stmt|;
comment|/**< ibr_bist_rsp_fifo0_status */
name|uint64_t
name|ibr1
range|:
literal|1
decl_stmt|;
comment|/**< ibr_bist_rsp_fifo1_status */
name|uint64_t
name|icnrt
range|:
literal|1
decl_stmt|;
comment|/**< icnr_tag_cb_reg_fifo_bist_status */
name|uint64_t
name|ibrq0
range|:
literal|1
decl_stmt|;
comment|/**< ibrq_bist_req_fifo0_status */
name|uint64_t
name|ibrq1
range|:
literal|1
decl_stmt|;
comment|/**< ibrq_bist_req_fifo1_status */
name|uint64_t
name|icrn0
range|:
literal|1
decl_stmt|;
comment|/**< icr_ncb_bist_mem0_status */
name|uint64_t
name|icrn1
range|:
literal|1
decl_stmt|;
comment|/**< icr_ncb_bist_mem1_status */
name|uint64_t
name|ibd
range|:
literal|1
decl_stmt|;
comment|/**< ibd_bist_mem0_status */
name|uint64_t
name|icd
range|:
literal|1
decl_stmt|;
comment|/**< icd_ncb_fifo_bist_status */
else|#
directive|else
name|uint64_t
name|icd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrn1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrn0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibrq1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibrq0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnrt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ibr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icr1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icr0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icnrcb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iocfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rsdfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iorfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmcfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmdfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_18_63
range|:
literal|46
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_iob_bist_status_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_bist_status_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_bist_status
name|cvmx_iob_bist_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_ctl_status  *  * IOB Control Status = IOB Control and Status Register  *  * Provides control for IOB functions.  */
end_comment

begin_union
union|union
name|cvmx_iob_ctl_status
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_ctl_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|fif_dly
range|:
literal|1
decl_stmt|;
comment|/**< Delay async FIFO counts to be used when clock ratio                                                          is greater then 3:1. Writes should be followed by an                                                          immediate read. */
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
comment|/**< IBC XMC PUSH EARLY */
name|uint64_t
name|reserved_5_5
range|:
literal|1
decl_stmt|;
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the outbound bus to the inb pattern                                                          matchers. PASS2 FIELD. */
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the inbound bus to the inb pattern                                                          matchers. PASS2 FIELD. */
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU for the PKO.                                                          '0' is for big-endian and '1' is for little-endian. */
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the DWB function of the IOB. */
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU. '0' is for                                                          big-endian and '1' is for little-endian. */
else|#
directive|else
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_5_5
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
name|uint64_t
name|fif_dly
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_iob_ctl_status_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_5_63
range|:
literal|59
decl_stmt|;
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the outbound bus to the inb pattern                                                          matchers. */
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the inbound bus to the inb pattern                                                          matchers. */
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU for the PKO.                                                          '0' is for big-endian and '1' is for little-endian. */
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the DWB function of the IOB. */
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU. '0' is for                                                          big-endian and '1' is for little-endian. */
else|#
directive|else
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_5_63
range|:
literal|59
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_iob_ctl_status_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_ctl_status_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_ctl_status_cn30xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_ctl_status_cn30xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_iob_ctl_status_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|rr_mode
range|:
literal|1
decl_stmt|;
comment|/**< When set to '1' will enable Round-Robin mode of next                                                          transaction that could arbitrate for the XMB. */
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the outbound bus to the inb pattern                                                          matchers. PASS2 FIELD. */
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the inbound bus to the inb pattern                                                          matchers. PASS2 FIELD. */
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU for the PKO.                                                          '0' is for big-endian and '1' is for little-endian. */
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the DWB function of the IOB. */
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU. '0' is for                                                          big-endian and '1' is for little-endian. */
else|#
directive|else
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rr_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_iob_ctl_status_cn30xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_ctl_status_cn30xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_ctl_status_cn30xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_ctl_status_cn30xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_ctl_status_cn30xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_iob_ctl_status_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|fif_dly
range|:
literal|1
decl_stmt|;
comment|/**< Delay async FIFO counts to be used when clock ratio                                                          is greater then 3:1. Writes should be followed by an                                                          immediate read. */
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
comment|/**< IBC XMC PUSH EARLY */
name|uint64_t
name|rr_mode
range|:
literal|1
decl_stmt|;
comment|/**< When set to '1' will enable Round-Robin mode of next                                                          transaction that could arbitrate for the XMB. */
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the outbound bus to the inb pattern                                                          matchers. PASS2 FIELD. */
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the inbound bus to the inb pattern                                                          matchers. PASS2 FIELD. */
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU for the PKO.                                                          '0' is for big-endian and '1' is for little-endian. */
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the DWB function of the IOB. */
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU. '0' is for                                                          big-endian and '1' is for little-endian. */
else|#
directive|else
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rr_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
name|uint64_t
name|fif_dly
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_iob_ctl_status_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
comment|/**< IBC XMC PUSH EARLY */
name|uint64_t
name|rr_mode
range|:
literal|1
decl_stmt|;
comment|/**< When set to '1' will enable Round-Robin mode of next                                                          transaction that could arbitrate for the XMB. */
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the outbound bus to the inb pattern                                                          matchers. PASS2 FIELD. */
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the inbound bus to the inb pattern                                                          matchers. PASS2 FIELD. */
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU for the PKO.                                                          '0' is for big-endian and '1' is for little-endian. */
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the DWB function of the IOB. */
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU. '0' is for                                                          big-endian and '1' is for little-endian. */
else|#
directive|else
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rr_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_iob_ctl_status_cn63xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_ctl_status_cn61xx
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_iob_ctl_status_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|fif_dly
range|:
literal|1
decl_stmt|;
comment|/**< Delay async FIFO counts to be used when clock ratio                                                          is greater then 3:1. Writes should be followed by an                                                          immediate read. */
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
comment|/**< IBC XMC PUSH EARLY */
name|uint64_t
name|rsvr5
range|:
literal|1
decl_stmt|;
comment|/**< Reserved */
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the outbound bus to the inb pattern                                                          matchers. */
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
comment|/**< Was a match on the inbound bus to the inb pattern                                                          matchers. */
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU for the PKO.                                                          '0' is for big-endian and '1' is for little-endian. */
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the DWB function of the IOB. */
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
comment|/**< Toggles the endian style of the FAU. '0' is for                                                          big-endian and '1' is for little-endian. */
else|#
directive|else
name|uint64_t
name|fau_end
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|inb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|outb_mat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rsvr5
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
name|uint64_t
name|fif_dly
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_iob_ctl_status_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_ctl_status_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_ctl_status
name|cvmx_iob_ctl_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_dwb_pri_cnt  *  * DWB To CMB Priority Counter = Don't Write Back to CMB Priority Counter Enable and Timer Value  *  * Enables and supplies the timeout count for raising the priority of Don't Write Back request to the L2C.  */
end_comment

begin_union
union|union
name|cvmx_iob_dwb_pri_cnt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_dwb_pri_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the raising of CMB access priority                                                          when CNT_VAL is reached. */
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
comment|/**< Number of core clocks to wait before raising                                                          the priority for access to CMB. */
else|#
directive|else
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_dwb_pri_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_dwb_pri_cnt
name|cvmx_iob_dwb_pri_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_fau_timeout  *  * FAU Timeout = Fetch and Add Unit Tag-Switch Timeout  *  * How many clokc ticks the FAU unit will wait for a tag-switch before timeing out.  * for Queue 0.  */
end_comment

begin_union
union|union
name|cvmx_iob_fau_timeout
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_fau_timeout_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
name|uint64_t
name|tout_enb
range|:
literal|1
decl_stmt|;
comment|/**< The enable for the FAU timeout feature.                                                          '1' will enable the timeout, '0' will disable. */
name|uint64_t
name|tout_val
range|:
literal|12
decl_stmt|;
comment|/**< When a tag request arrives from the PP a timer is                                                          started associate with that PP. The timer which                                                          increments every 256 eclks is compared to TOUT_VAL.                                                          When the two are equal the IOB will flag the tag                                                          request to complete as a time-out tag operation.                                                          The 256 count timer used to increment the PP                                                          associated timer is always running so the first                                                          increment of the PP associated timer may occur any                                                          where within the first 256 eclks.  Note that '0'                                                          is an illegal value. */
else|#
directive|else
name|uint64_t
name|tout_val
range|:
literal|12
decl_stmt|;
name|uint64_t
name|tout_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_fau_timeout_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_fau_timeout
name|cvmx_iob_fau_timeout_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_i2c_pri_cnt  *  * IPD To CMB Store Priority Counter = IPD to CMB Store Priority Counter Enable and Timer Value  *  * Enables and supplies the timeout count for raising the priority of IPD Store access to the CMB.  */
end_comment

begin_union
union|union
name|cvmx_iob_i2c_pri_cnt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_i2c_pri_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the raising of CMB access priority                                                          when CNT_VAL is reached. */
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
comment|/**< Number of core clocks to wait before raising                                                          the priority for access to CMB. */
else|#
directive|else
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_i2c_pri_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_i2c_pri_cnt
name|cvmx_iob_i2c_pri_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_inb_control_match  *  * IOB_INB_CONTROL_MATCH = IOB Inbound Control Match  *  * Match pattern for the inbound control to set the INB_MATCH_BIT. PASS-2 Register  */
end_comment

begin_union
union|union
name|cvmx_iob_inb_control_match
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_inb_control_match_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_29_63
range|:
literal|35
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|8
decl_stmt|;
comment|/**< Pattern to match on the inbound NCB. */
name|uint64_t
name|opc
range|:
literal|4
decl_stmt|;
comment|/**< Pattern to match on the inbound NCB. */
name|uint64_t
name|dst
range|:
literal|9
decl_stmt|;
comment|/**< Pattern to match on the inbound NCB. */
name|uint64_t
name|src
range|:
literal|8
decl_stmt|;
comment|/**< Pattern to match on the inbound NCB. */
else|#
directive|else
name|uint64_t
name|src
range|:
literal|8
decl_stmt|;
name|uint64_t
name|dst
range|:
literal|9
decl_stmt|;
name|uint64_t
name|opc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_29_63
range|:
literal|35
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_inb_control_match
name|cvmx_iob_inb_control_match_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_inb_control_match_enb  *  * IOB_INB_CONTROL_MATCH_ENB = IOB Inbound Control Match Enable  *  * Enables the match of the corresponding bit in the IOB_INB_CONTROL_MATCH reister. PASS-2 Register  */
end_comment

begin_union
union|union
name|cvmx_iob_inb_control_match_enb
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_inb_control_match_enb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_29_63
range|:
literal|35
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|8
decl_stmt|;
comment|/**< Pattern to match on the inbound NCB. */
name|uint64_t
name|opc
range|:
literal|4
decl_stmt|;
comment|/**< Pattern to match on the inbound NCB. */
name|uint64_t
name|dst
range|:
literal|9
decl_stmt|;
comment|/**< Pattern to match on the inbound NCB. */
name|uint64_t
name|src
range|:
literal|8
decl_stmt|;
comment|/**< Pattern to match on the inbound NCB. */
else|#
directive|else
name|uint64_t
name|src
range|:
literal|8
decl_stmt|;
name|uint64_t
name|dst
range|:
literal|9
decl_stmt|;
name|uint64_t
name|opc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_29_63
range|:
literal|35
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_control_match_enb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_inb_control_match_enb
name|cvmx_iob_inb_control_match_enb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_inb_data_match  *  * IOB_INB_DATA_MATCH = IOB Inbound Data Match  *  * Match pattern for the inbound data to set the INB_MATCH_BIT. PASS-2 Register  */
end_comment

begin_union
union|union
name|cvmx_iob_inb_data_match
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_inb_data_match_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
comment|/**< Pattern to match on the inbound NCB. */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_inb_data_match
name|cvmx_iob_inb_data_match_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_inb_data_match_enb  *  * IOB_INB_DATA_MATCH_ENB = IOB Inbound Data Match Enable  *  * Enables the match of the corresponding bit in the IOB_INB_DATA_MATCH reister. PASS-2 Register  */
end_comment

begin_union
union|union
name|cvmx_iob_inb_data_match_enb
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_inb_data_match_enb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
comment|/**< Bit to enable match of. */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_inb_data_match_enb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_inb_data_match_enb
name|cvmx_iob_inb_data_match_enb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_int_enb  *  * IOB_INT_ENB = IOB's Interrupt Enable  *  * The IOB's interrupt enable register. This is a PASS-2 register.  */
end_comment

begin_union
union|union
name|cvmx_iob_int_enb
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_int_enb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|p_dat
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 5 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
name|uint64_t
name|np_dat
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 4 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
name|uint64_t
name|p_eop
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 3 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
name|uint64_t
name|p_sop
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 2 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
name|uint64_t
name|np_eop
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 1 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
name|uint64_t
name|np_sop
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 0 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
else|#
directive|else
name|uint64_t
name|np_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|np_eop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_eop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|np_dat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_dat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_iob_int_enb_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|p_eop
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 3 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
name|uint64_t
name|p_sop
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 2 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
name|uint64_t
name|np_eop
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 1 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
name|uint64_t
name|np_sop
range|:
literal|1
decl_stmt|;
comment|/**< When set (1) and bit 0 of the IOB_INT_SUM                                                          register is asserted the IOB will assert an                                                          interrupt. */
else|#
directive|else
name|uint64_t
name|np_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|np_eop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_eop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_iob_int_enb_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_cn30xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_iob_int_enb_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_iob_int_enb_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_enb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_int_enb
name|cvmx_iob_int_enb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_int_sum  *  * IOB_INT_SUM = IOB's Interrupt Summary Register  *  * Contains the diffrent interrupt summary bits of the IOB. This is a PASS-2 register.  */
end_comment

begin_union
union|union
name|cvmx_iob_int_sum
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_int_sum_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|p_dat
range|:
literal|1
decl_stmt|;
comment|/**< Set when a data arrives before a SOP for the same                                                          port for a passthrough packet.                                                          The first detected error associated with bits [5:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
name|uint64_t
name|np_dat
range|:
literal|1
decl_stmt|;
comment|/**< Set when a data arrives before a SOP for the same                                                          port for a non-passthrough packet.                                                          The first detected error associated with bits [5:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
name|uint64_t
name|p_eop
range|:
literal|1
decl_stmt|;
comment|/**< Set when a EOP is followed by an EOP for the same                                                          port for a passthrough packet.                                                          The first detected error associated with bits [5:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
name|uint64_t
name|p_sop
range|:
literal|1
decl_stmt|;
comment|/**< Set when a SOP is followed by an SOP for the same                                                          port for a passthrough packet.                                                          The first detected error associated with bits [5:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
name|uint64_t
name|np_eop
range|:
literal|1
decl_stmt|;
comment|/**< Set when a EOP is followed by an EOP for the same                                                          port for a non-passthrough packet.                                                          The first detected error associated with bits [5:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
name|uint64_t
name|np_sop
range|:
literal|1
decl_stmt|;
comment|/**< Set when a SOP is followed by an SOP for the same                                                          port for a non-passthrough packet.                                                          The first detected error associated with bits [5:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
else|#
directive|else
name|uint64_t
name|np_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|np_eop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_eop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|np_dat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_dat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_iob_int_sum_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|p_eop
range|:
literal|1
decl_stmt|;
comment|/**< Set when a EOP is followed by an EOP for the same                                                          port for a passthrough packet.                                                          The first detected error associated with bits [3:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
name|uint64_t
name|p_sop
range|:
literal|1
decl_stmt|;
comment|/**< Set when a SOP is followed by an SOP for the same                                                          port for a passthrough packet.                                                          The first detected error associated with bits [3:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
name|uint64_t
name|np_eop
range|:
literal|1
decl_stmt|;
comment|/**< Set when a EOP is followed by an EOP for the same                                                          port for a non-passthrough packet.                                                          The first detected error associated with bits [3:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
name|uint64_t
name|np_sop
range|:
literal|1
decl_stmt|;
comment|/**< Set when a SOP is followed by an SOP for the same                                                          port for a non-passthrough packet.                                                          The first detected error associated with bits [3:0]                                                          of this register will only be set here. A new bit                                                          can be set when the previous reported bit is cleared. */
else|#
directive|else
name|uint64_t
name|np_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|np_eop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p_eop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_iob_int_sum_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_cn30xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_iob_int_sum_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_iob_int_sum_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_int_sum_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_int_sum
name|cvmx_iob_int_sum_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_n2c_l2c_pri_cnt  *  * NCB To CMB L2C Priority Counter = NCB to CMB L2C Priority Counter Enable and Timer Value  *  * Enables and supplies the timeout count for raising the priority of NCB Store/Load access to the CMB.  */
end_comment

begin_union
union|union
name|cvmx_iob_n2c_l2c_pri_cnt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the raising of CMB access priority                                                          when CNT_VAL is reached. */
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
comment|/**< Number of core clocks to wait before raising                                                          the priority for access to CMB. */
else|#
directive|else
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_l2c_pri_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_n2c_l2c_pri_cnt
name|cvmx_iob_n2c_l2c_pri_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_n2c_rsp_pri_cnt  *  * NCB To CMB Response Priority Counter = NCB to CMB Response Priority Counter Enable and Timer Value  *  * Enables and supplies the timeout count for raising the priority of NCB Responses access to the CMB.  */
end_comment

begin_union
union|union
name|cvmx_iob_n2c_rsp_pri_cnt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the raising of CMB access priority                                                          when CNT_VAL is reached. */
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
comment|/**< Number of core clocks to wait before raising                                                          the priority for access to CMB. */
else|#
directive|else
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_n2c_rsp_pri_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_n2c_rsp_pri_cnt
name|cvmx_iob_n2c_rsp_pri_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_outb_com_pri_cnt  *  * Commit To NCB Priority Counter = Commit to NCB Priority Counter Enable and Timer Value  *  * Enables and supplies the timeout count for raising the priority of Commit request to the Outbound NCB.  */
end_comment

begin_union
union|union
name|cvmx_iob_outb_com_pri_cnt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_outb_com_pri_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the raising of NCB access priority                                                          when CNT_VAL is reached. */
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
comment|/**< Number of core clocks to wait before raising                                                          the priority for access to NCB. */
else|#
directive|else
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_com_pri_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_outb_com_pri_cnt
name|cvmx_iob_outb_com_pri_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_outb_control_match  *  * IOB_OUTB_CONTROL_MATCH = IOB Outbound Control Match  *  * Match pattern for the outbound control to set the OUTB_MATCH_BIT. PASS-2 Register  */
end_comment

begin_union
union|union
name|cvmx_iob_outb_control_match
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_outb_control_match_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_26_63
range|:
literal|38
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|8
decl_stmt|;
comment|/**< Pattern to match on the outbound NCB. */
name|uint64_t
name|eot
range|:
literal|1
decl_stmt|;
comment|/**< Pattern to match on the outbound NCB. */
name|uint64_t
name|dst
range|:
literal|8
decl_stmt|;
comment|/**< Pattern to match on the outbound NCB. */
name|uint64_t
name|src
range|:
literal|9
decl_stmt|;
comment|/**< Pattern to match on the outbound NCB. */
else|#
directive|else
name|uint64_t
name|src
range|:
literal|9
decl_stmt|;
name|uint64_t
name|dst
range|:
literal|8
decl_stmt|;
name|uint64_t
name|eot
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_26_63
range|:
literal|38
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_outb_control_match
name|cvmx_iob_outb_control_match_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_outb_control_match_enb  *  * IOB_OUTB_CONTROL_MATCH_ENB = IOB Outbound Control Match Enable  *  * Enables the match of the corresponding bit in the IOB_OUTB_CONTROL_MATCH reister. PASS-2 Register  */
end_comment

begin_union
union|union
name|cvmx_iob_outb_control_match_enb
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_outb_control_match_enb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_26_63
range|:
literal|38
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|8
decl_stmt|;
comment|/**< Pattern to match on the outbound NCB. */
name|uint64_t
name|eot
range|:
literal|1
decl_stmt|;
comment|/**< Pattern to match on the outbound NCB. */
name|uint64_t
name|dst
range|:
literal|8
decl_stmt|;
comment|/**< Pattern to match on the outbound NCB. */
name|uint64_t
name|src
range|:
literal|9
decl_stmt|;
comment|/**< Pattern to match on the outbound NCB. */
else|#
directive|else
name|uint64_t
name|src
range|:
literal|9
decl_stmt|;
name|uint64_t
name|dst
range|:
literal|8
decl_stmt|;
name|uint64_t
name|eot
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_26_63
range|:
literal|38
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_control_match_enb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_outb_control_match_enb
name|cvmx_iob_outb_control_match_enb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_outb_data_match  *  * IOB_OUTB_DATA_MATCH = IOB Outbound Data Match  *  * Match pattern for the outbound data to set the OUTB_MATCH_BIT. PASS-2 Register  */
end_comment

begin_union
union|union
name|cvmx_iob_outb_data_match
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_outb_data_match_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
comment|/**< Pattern to match on the outbound NCB. */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_outb_data_match
name|cvmx_iob_outb_data_match_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_outb_data_match_enb  *  * IOB_OUTB_DATA_MATCH_ENB = IOB Outbound Data Match Enable  *  * Enables the match of the corresponding bit in the IOB_OUTB_DATA_MATCH reister. PASS-2 Register  */
end_comment

begin_union
union|union
name|cvmx_iob_outb_data_match_enb
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_outb_data_match_enb_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
comment|/**< Bit to enable match of. */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_data_match_enb_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_outb_data_match_enb
name|cvmx_iob_outb_data_match_enb_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_outb_fpa_pri_cnt  *  * FPA To NCB Priority Counter = FPA Returns to NCB Priority Counter Enable and Timer Value  *  * Enables and supplies the timeout count for raising the priority of FPA Rreturn Page request to the Outbound NCB.  */
end_comment

begin_union
union|union
name|cvmx_iob_outb_fpa_pri_cnt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the raising of NCB access priority                                                          when CNT_VAL is reached. */
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
comment|/**< Number of core clocks to wait before raising                                                          the priority for access to NCB. */
else|#
directive|else
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_fpa_pri_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_outb_fpa_pri_cnt
name|cvmx_iob_outb_fpa_pri_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_outb_req_pri_cnt  *  * Request To NCB Priority Counter = Request to NCB Priority Counter Enable and Timer Value  *  * Enables and supplies the timeout count for raising the priority of Request transfers to the Outbound NCB.  */
end_comment

begin_union
union|union
name|cvmx_iob_outb_req_pri_cnt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_outb_req_pri_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the raising of NCB access priority                                                          when CNT_VAL is reached. */
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
comment|/**< Number of core clocks to wait before raising                                                          the priority for access to NCB. */
else|#
directive|else
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_outb_req_pri_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_outb_req_pri_cnt
name|cvmx_iob_outb_req_pri_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_p2c_req_pri_cnt  *  * PKO To CMB Response Priority Counter = PKO to CMB Response Priority Counter Enable and Timer Value  *  * Enables and supplies the timeout count for raising the priority of PKO Load access to the CMB.  */
end_comment

begin_union
union|union
name|cvmx_iob_p2c_req_pri_cnt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_p2c_req_pri_cnt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
comment|/**< Enables the raising of CMB access priority                                                          when CNT_VAL is reached. */
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
comment|/**< Number of core clocks to wait before raising                                                          the priority for access to CMB. */
else|#
directive|else
name|uint64_t
name|cnt_val
range|:
literal|15
decl_stmt|;
name|uint64_t
name|cnt_enb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_p2c_req_pri_cnt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_p2c_req_pri_cnt
name|cvmx_iob_p2c_req_pri_cnt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_pkt_err  *  * IOB_PKT_ERR = IOB Packet Error Register  *  * Provides status about the failing packet recevie error. This is a PASS-2 register.  */
end_comment

begin_union
union|union
name|cvmx_iob_pkt_err
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_pkt_err_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|vport
range|:
literal|6
decl_stmt|;
comment|/**< When IOB_INT_SUM[3:0] bit is set, this field                                                          latches the failing vport associate with the                                                          IOB_INT_SUM[3:0] bit set. */
name|uint64_t
name|port
range|:
literal|6
decl_stmt|;
comment|/**< When IOB_INT_SUM[3:0] bit is set, this field                                                          latches the failing port associate with the                                                          IOB_INT_SUM[3:0] bit set. */
else|#
directive|else
name|uint64_t
name|port
range|:
literal|6
decl_stmt|;
name|uint64_t
name|vport
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_iob_pkt_err_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|port
range|:
literal|6
decl_stmt|;
comment|/**< When IOB_INT_SUM[3:0] bit is set, this field                                                          latches the failing port associate with the                                                          IOB_INT_SUM[3:0] bit set. */
else|#
directive|else
name|uint64_t
name|port
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_cn30xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_iob_pkt_err_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_pkt_err
name|cvmx_iob_pkt_err_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_cmb_credits  *  * IOB_TO_CMB_CREDITS = IOB To CMB Credits  *  * Controls the number of reads and writes that may be outstanding to the L2C (via the CMB).  */
end_comment

begin_union
union|union
name|cvmx_iob_to_cmb_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_cmb_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|ncb_rd
range|:
literal|3
decl_stmt|;
comment|/**< Number of NCB reads that can be out to L2C where                                                          0 == 8-credits. */
name|uint64_t
name|ncb_wr
range|:
literal|3
decl_stmt|;
comment|/**< Number of NCB/PKI writes that can be out to L2C                                                          where 0 == 8-credits. */
else|#
directive|else
name|uint64_t
name|ncb_wr
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ncb_rd
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_iob_to_cmb_credits_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
name|uint64_t
name|pko_rd
range|:
literal|3
decl_stmt|;
comment|/**< Number of PKO reads that can be out to L2C where                                                          0 == 8-credits. */
name|uint64_t
name|ncb_rd
range|:
literal|3
decl_stmt|;
comment|/**< Number of NCB reads that can be out to L2C where                                                          0 == 8-credits. */
name|uint64_t
name|ncb_wr
range|:
literal|3
decl_stmt|;
comment|/**< Number of NCB/PKI writes that can be out to L2C                                                          where 0 == 8-credits. */
else|#
directive|else
name|uint64_t
name|ncb_wr
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ncb_rd
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pko_rd
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_iob_to_cmb_credits_cn52xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_iob_to_cmb_credits_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_iob_to_cmb_credits_cn52xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_iob_to_cmb_credits_cn52xx
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_iob_to_cmb_credits_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|3
decl_stmt|;
comment|/**< Number of DWBs  that can be out to L2C where                                                          0 == 8-credits. */
name|uint64_t
name|ncb_rd
range|:
literal|3
decl_stmt|;
comment|/**< Number of NCB reads that can be out to L2C where                                                          0 == 8-credits. */
name|uint64_t
name|ncb_wr
range|:
literal|3
decl_stmt|;
comment|/**< Number of NCB/PKI writes that can be out to L2C                                                          where 0 == 8-credits. */
else|#
directive|else
name|uint64_t
name|ncb_wr
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ncb_rd
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_iob_to_cmb_credits_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_iob_to_cmb_credits_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_cmb_credits
name|cvmx_iob_to_cmb_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_00_credits  *  * IOB_TO_NCB_DID_00_CREDITS = IOB NCB DID 00 Credits  *  * Number of credits for NCB DID 00.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_00_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_00_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_00_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_00_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_00_credits
name|cvmx_iob_to_ncb_did_00_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_111_credits  *  * IOB_TO_NCB_DID_111_CREDITS = IOB NCB DID 111 Credits  *  * Number of credits for NCB DID 111.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_111_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_111_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_111_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_111_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_111_credits
name|cvmx_iob_to_ncb_did_111_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_223_credits  *  * IOB_TO_NCB_DID_223_CREDITS = IOB NCB DID 223 Credits  *  * Number of credits for NCB DID 223.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_223_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_223_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_223_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_223_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_223_credits
name|cvmx_iob_to_ncb_did_223_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_24_credits  *  * IOB_TO_NCB_DID_24_CREDITS = IOB NCB DID 24 Credits  *  * Number of credits for NCB DID 24.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_24_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_24_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_24_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_24_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_24_credits
name|cvmx_iob_to_ncb_did_24_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_32_credits  *  * IOB_TO_NCB_DID_32_CREDITS = IOB NCB DID 32 Credits  *  * Number of credits for NCB DID 32.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_32_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_32_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_32_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_32_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_32_credits
name|cvmx_iob_to_ncb_did_32_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_40_credits  *  * IOB_TO_NCB_DID_40_CREDITS = IOB NCB DID 40 Credits  *  * Number of credits for NCB DID 40.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_40_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_40_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_40_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_40_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_40_credits
name|cvmx_iob_to_ncb_did_40_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_55_credits  *  * IOB_TO_NCB_DID_55_CREDITS = IOB NCB DID 55 Credits  *  * Number of credits for NCB DID 55.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_55_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_55_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_55_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_55_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_55_credits
name|cvmx_iob_to_ncb_did_55_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_64_credits  *  * IOB_TO_NCB_DID_64_CREDITS = IOB NCB DID 64 Credits  *  * Number of credits for NCB DID 64.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_64_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_64_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_64_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_64_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_64_credits
name|cvmx_iob_to_ncb_did_64_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_79_credits  *  * IOB_TO_NCB_DID_79_CREDITS = IOB NCB DID 79 Credits  *  * Number of credits for NCB DID 79.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_79_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_79_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_79_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_79_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_79_credits
name|cvmx_iob_to_ncb_did_79_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_96_credits  *  * IOB_TO_NCB_DID_96_CREDITS = IOB NCB DID 96 Credits  *  * Number of credits for NCB DID 96.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_96_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_96_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_96_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_96_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_96_credits
name|cvmx_iob_to_ncb_did_96_credits_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob_to_ncb_did_98_credits  *  * IOB_TO_NCB_DID_98_CREDITS = IOB NCB DID 96 Credits  *  * Number of credits for NCB DID 98.  */
end_comment

begin_union
union|union
name|cvmx_iob_to_ncb_did_98_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob_to_ncb_did_98_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
comment|/**< Number of credits for DID. Writing this field will                                                          casuse the credits to be set to the value written.                                                          Reading this field will give the number of credits                                                          PRESENTLY available. */
else|#
directive|else
name|uint64_t
name|crd
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob_to_ncb_did_98_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob_to_ncb_did_98_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob_to_ncb_did_98_credits
name|cvmx_iob_to_ncb_did_98_credits_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

