begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * This file contains defines for the SPI interface   *<hr>$Revision: 49448 $<hr>  *  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_SPI_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_SPI_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|CVMX_BUILD_FOR_LINUX_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|"cvmx-gmxx-defs.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* CSR typedefs have been moved to cvmx-spi-defs.h */
typedef|typedef
enum|enum
block|{
name|CVMX_SPI_MODE_UNKNOWN
init|=
literal|0
block|,
name|CVMX_SPI_MODE_TX_HALFPLEX
init|=
literal|1
block|,
name|CVMX_SPI_MODE_RX_HALFPLEX
init|=
literal|2
block|,
name|CVMX_SPI_MODE_DUPLEX
init|=
literal|3
block|}
name|cvmx_spi_mode_t
typedef|;
comment|/** Callbacks structure to customize SPI4 initialization sequence */
typedef|typedef
struct|struct
block|{
comment|/** Called to reset SPI4 DLL */
name|int
function_decl|(
modifier|*
name|reset_cb
function_decl|)
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|)
function_decl|;
comment|/** Called to setup calendar */
name|int
function_decl|(
modifier|*
name|calendar_setup_cb
function_decl|)
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|num_ports
parameter_list|)
function_decl|;
comment|/** Called for Tx and Rx clock detection */
name|int
function_decl|(
modifier|*
name|clock_detect_cb
function_decl|)
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
comment|/** Called to perform link training */
name|int
function_decl|(
modifier|*
name|training_cb
function_decl|)
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
comment|/** Called for calendar data synchronization */
name|int
function_decl|(
modifier|*
name|calendar_sync_cb
function_decl|)
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
comment|/** Called when interface is up */
name|int
function_decl|(
modifier|*
name|interface_up_cb
function_decl|)
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|)
function_decl|;
block|}
name|cvmx_spi_callbacks_t
typedef|;
comment|/**  * Return true if the supplied interface is configured for SPI  *  * @param interface Interface to check  * @return True if interface is SPI  */
specifier|static
specifier|inline
name|int
name|cvmx_spi_is_spi_interface
parameter_list|(
name|int
name|interface
parameter_list|)
block|{
name|uint64_t
name|gmxState
init|=
name|cvmx_read_csr
argument_list|(
name|CVMX_GMXX_INF_MODE
argument_list|(
name|interface
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|gmxState
operator|&
literal|0x2
operator|)
operator|&&
operator|(
name|gmxState
operator|&
literal|0x1
operator|)
operator|)
return|;
block|}
comment|/**  * Initialize and start the SPI interface.  *  * @param interface The identifier of the packet interface to configure and  *                  use as a SPI interface.  * @param mode      The operating mode for the SPI interface. The interface  *                  can operate as a full duplex (both Tx and Rx data paths  *                  active) or as a halfplex (either the Tx data path is  *                  active or the Rx data path is active, but not both).  * @param timeout   Timeout to wait for clock synchronization in seconds  * @param num_ports Number of SPI ports to configure  *  * @return Zero on success, negative of failure.  */
specifier|extern
name|int
name|cvmx_spi_start_interface
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|timeout
parameter_list|,
name|int
name|num_ports
parameter_list|)
function_decl|;
comment|/**  * This routine restarts the SPI interface after it has lost synchronization  * with its corespondant system.  *  * @param interface The identifier of the packet interface to configure and  *                  use as a SPI interface.  * @param mode      The operating mode for the SPI interface. The interface  *                  can operate as a full duplex (both Tx and Rx data paths  *                  active) or as a halfplex (either the Tx data path is  *                  active or the Rx data path is active, but not both).  * @param timeout   Timeout to wait for clock synchronization in seconds  * @return Zero on success, negative of failure.  */
specifier|extern
name|int
name|cvmx_spi_restart_interface
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
comment|/**  * Return non-zero if the SPI interface has a SPI4000 attached  *  * @param interface SPI interface the SPI4000 is connected to  *  * @return  */
specifier|extern
name|int
name|cvmx_spi4000_is_present
parameter_list|(
name|int
name|interface
parameter_list|)
function_decl|;
comment|/**  * Initialize the SPI4000 for use  *  * @param interface SPI interface the SPI4000 is connected to  */
specifier|extern
name|int
name|cvmx_spi4000_initialize
parameter_list|(
name|int
name|interface
parameter_list|)
function_decl|;
comment|/**  * Poll all the SPI4000 port and check its speed  *  * @param interface Interface the SPI4000 is on  * @param port      Port to poll (0-9)  * @return Status of the port. 0=down. All other values the port is up.  */
specifier|extern
name|cvmx_gmxx_rxx_rx_inbnd_t
name|cvmx_spi4000_check_speed
parameter_list|(
name|int
name|interface
parameter_list|,
name|int
name|port
parameter_list|)
function_decl|;
comment|/**  * Get current SPI4 initialization callbacks  *  * @param callbacks  Pointer to the callbacks structure.to fill  *  * @return Pointer to cvmx_spi_callbacks_t structure.  */
specifier|extern
name|void
name|cvmx_spi_get_callbacks
parameter_list|(
name|cvmx_spi_callbacks_t
modifier|*
name|callbacks
parameter_list|)
function_decl|;
comment|/**  * Set new SPI4 initialization callbacks  *  * @param new_callbacks  Pointer to an updated callbacks structure.  */
specifier|extern
name|void
name|cvmx_spi_set_callbacks
parameter_list|(
name|cvmx_spi_callbacks_t
modifier|*
name|new_callbacks
parameter_list|)
function_decl|;
comment|/**  * Callback to perform SPI4 reset  *  * @param interface The identifier of the packet interface to configure and  *                  use as a SPI interface.  * @param mode      The operating mode for the SPI interface. The interface  *                  can operate as a full duplex (both Tx and Rx data paths  *                  active) or as a halfplex (either the Tx data path is  *                  active or the Rx data path is active, but not both).  * @return Zero on success, non-zero error code on failure (will cause SPI initialization to abort)  */
specifier|extern
name|int
name|cvmx_spi_reset_cb
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|)
function_decl|;
comment|/**  * Callback to setup calendar and miscellaneous settings before clock detection  *  * @param interface The identifier of the packet interface to configure and  *                  use as a SPI interface.  * @param mode      The operating mode for the SPI interface. The interface  *                  can operate as a full duplex (both Tx and Rx data paths  *                  active) or as a halfplex (either the Tx data path is  *                  active or the Rx data path is active, but not both).  * @param num_ports Number of ports to configure on SPI  *  * @return Zero on success, non-zero error code on failure (will cause SPI initialization to abort)  */
specifier|extern
name|int
name|cvmx_spi_calendar_setup_cb
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|num_ports
parameter_list|)
function_decl|;
comment|/**  * Callback to perform clock detection  *  * @param interface The identifier of the packet interface to configure and  *                  use as a SPI interface.  * @param mode      The operating mode for the SPI interface. The interface  *                  can operate as a full duplex (both Tx and Rx data paths  *                  active) or as a halfplex (either the Tx data path is  *                  active or the Rx data path is active, but not both).  * @param timeout   Timeout to wait for clock synchronization in seconds  * @return Zero on success, non-zero error code on failure (will cause SPI initialization to abort)  */
specifier|extern
name|int
name|cvmx_spi_clock_detect_cb
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
comment|/**  * Callback to perform link training  *  * @param interface The identifier of the packet interface to configure and  *                  use as a SPI interface.  * @param mode      The operating mode for the SPI interface. The interface  *                  can operate as a full duplex (both Tx and Rx data paths  *                  active) or as a halfplex (either the Tx data path is  *                  active or the Rx data path is active, but not both).  * @param timeout   Timeout to wait for link to be trained (in seconds)  * @return Zero on success, non-zero error code on failure (will cause SPI initialization to abort)  */
specifier|extern
name|int
name|cvmx_spi_training_cb
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
comment|/**  * Callback to perform calendar data synchronization  *  * @param interface The identifier of the packet interface to configure and  *                  use as a SPI interface.  * @param mode      The operating mode for the SPI interface. The interface  *                  can operate as a full duplex (both Tx and Rx data paths  *                  active) or as a halfplex (either the Tx data path is  *                  active or the Rx data path is active, but not both).  * @param timeout   Timeout to wait for calendar data in seconds  * @return Zero on success, non-zero error code on failure (will cause SPI initialization to abort)  */
specifier|extern
name|int
name|cvmx_spi_calendar_sync_cb
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
comment|/**  * Callback to handle interface up  *  * @param interface The identifier of the packet interface to configure and  *                  use as a SPI interface.  * @param mode      The operating mode for the SPI interface. The interface  *                  can operate as a full duplex (both Tx and Rx data paths  *                  active) or as a halfplex (either the Tx data path is  *                  active or the Rx data path is active, but not both).  * @return Zero on success, non-zero error code on failure (will cause SPI initialization to abort)  */
specifier|extern
name|int
name|cvmx_spi_interface_up_cb
parameter_list|(
name|int
name|interface
parameter_list|,
name|cvmx_spi_mode_t
name|mode
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_SPI_H__ */
end_comment

end_unit

