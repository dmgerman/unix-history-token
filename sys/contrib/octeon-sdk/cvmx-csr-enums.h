begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  * Definitions for enumerations used with Octeon CSRs.  *  *<hr>$Revision: 52004 $<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_CSR_ENUMS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_CSR_ENUMS_H__
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|CVMX_IPD_OPC_MODE_STT
init|=
literal|0LL
block|,
comment|/* All blocks DRAM, not cached in L2 */
name|CVMX_IPD_OPC_MODE_STF
init|=
literal|1LL
block|,
comment|/* All blocks into L2 */
name|CVMX_IPD_OPC_MODE_STF1_STT
init|=
literal|2LL
block|,
comment|/* 1st block L2, rest DRAM */
name|CVMX_IPD_OPC_MODE_STF2_STT
init|=
literal|3LL
comment|/* 1st, 2nd blocks L2, rest DRAM */
block|}
name|cvmx_ipd_mode_t
typedef|;
end_typedef

begin_comment
comment|/**  * Enumeration representing the amount of packet processing  * and validation performed by the input hardware.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CVMX_PIP_PORT_CFG_MODE_NONE
init|=
literal|0ull
block|,
comment|/**< Packet input doesn't perform any                                             processing of the input packet. */
name|CVMX_PIP_PORT_CFG_MODE_SKIPL2
init|=
literal|1ull
block|,
comment|/**< Full packet processing is performed                                             with pointer starting at the L2                                             (ethernet MAC) header. */
name|CVMX_PIP_PORT_CFG_MODE_SKIPIP
init|=
literal|2ull
comment|/**< Input packets are assumed to be IP.                                             Results from non IP packets is                                             undefined. Pointers reference the                                             beginning of the IP header. */
block|}
name|cvmx_pip_port_parse_mode_t
typedef|;
end_typedef

begin_comment
comment|/**  * This enumeration controls how a QoS watcher matches a packet.  *  * @deprecated  This enumeration was used with cvmx_pip_config_watcher which has  *              been deprecated.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CVMX_PIP_QOS_WATCH_DISABLE
init|=
literal|0ull
block|,
comment|/**< QoS watcher is diabled */
name|CVMX_PIP_QOS_WATCH_PROTNH
init|=
literal|1ull
block|,
comment|/**< QoS watcher will match based on the IP protocol */
name|CVMX_PIP_QOS_WATCH_TCP
init|=
literal|2ull
block|,
comment|/**< QoS watcher will match TCP packets to a specific destination port */
name|CVMX_PIP_QOS_WATCH_UDP
init|=
literal|3ull
comment|/**< QoS watcher will match UDP packets to a specific destination port */
block|}
name|cvmx_pip_qos_watch_types
typedef|;
end_typedef

begin_comment
comment|/**  * This enumeration is used in PIP tag config to control how  * POW tags are generated by the hardware.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CVMX_PIP_TAG_MODE_TUPLE
init|=
literal|0ull
block|,
comment|/**< Always use tuple tag algorithm. This is the only mode supported on Pass 1 */
name|CVMX_PIP_TAG_MODE_MASK
init|=
literal|1ull
block|,
comment|/**< Always use mask tag algorithm */
name|CVMX_PIP_TAG_MODE_IP_OR_MASK
init|=
literal|2ull
block|,
comment|/**< If packet is IP, use tuple else use mask */
name|CVMX_PIP_TAG_MODE_TUPLE_XOR_MASK
init|=
literal|3ull
comment|/**< tuple XOR mask */
block|}
name|cvmx_pip_tag_mode_t
typedef|;
end_typedef

begin_comment
comment|/**  * Tag type definitions  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CVMX_POW_TAG_TYPE_ORDERED
init|=
literal|0L
block|,
comment|/**< Tag ordering is maintained */
name|CVMX_POW_TAG_TYPE_ATOMIC
init|=
literal|1L
block|,
comment|/**< Tag ordering is maintained, and at most one PP has the tag */
name|CVMX_POW_TAG_TYPE_NULL
init|=
literal|2L
block|,
comment|/**< The work queue entry from the order                                             - NEVER tag switch from NULL to NULL */
name|CVMX_POW_TAG_TYPE_NULL_NULL
init|=
literal|3L
comment|/**< A tag switch to NULL, and there is no space reserved in POW                                             - NEVER tag switch to NULL_NULL                                             - NEVER tag switch from NULL_NULL                                             - NULL_NULL is entered at the beginning of time and on a deschedule.                                             - NULL_NULL can be exited by a new work request. A NULL_SWITCH load can also switch the state to NULL */
block|}
name|cvmx_pow_tag_type_t
typedef|;
end_typedef

begin_comment
comment|/**  * LCR bits 0 and 1 control the number of bits per character. See the following table for encodings:  *  * - 00 = 5 bits (bits 0-4 sent)  * - 01 = 6 bits (bits 0-5 sent)  * - 10 = 7 bits (bits 0-6 sent)  * - 11 = 8 bits (all bits sent)  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CVMX_UART_BITS5
init|=
literal|0
block|,
name|CVMX_UART_BITS6
init|=
literal|1
block|,
name|CVMX_UART_BITS7
init|=
literal|2
block|,
name|CVMX_UART_BITS8
init|=
literal|3
block|}
name|cvmx_uart_bits_t
typedef|;
end_typedef

begin_comment
comment|/**  * Interrupt   Priority   Interrupt         Interrupt                                       Interrupt  * ID          Level      Type              Source                                          Reset By  * ---------------------------------------------------------------------------------------------------------------------------------  * 0001        -          None              None                                            -  *  * 0110        Highest    Receiver Line     Overrun, parity, or framing errors or break     Reading the Line Status Register  *                        Status            interrupt  *  * 0100        Second     Received Data     Receiver data available (FIFOs disabled) or     Reading the Receiver Buffer Register  *                        Available         RX FIFO trigger level reached (FIFOs            (FIFOs disabled) or the FIFO drops below  *                                          enabled)                                        the trigger level (FIFOs enabled)  *  * 1100        Second     Character         No characters in or out of the RX FIFO          Reading the Receiver Buffer Register  *                        Timeout           during the last 4 character times and there  *                        Indication        is at least 1 character in it during this  *                                          time  *  * 0010        Third      Transmitter       Transmitter Holding Register Empty              Reading the Interrupt Identity Register  *                        Holding           (Programmable THRE Mode disabled) or TX         (if source of interrupt) or writing into  *                        Register          FIFO at or below threshold (Programmable        THR (FIFOs or THRE Mode disabled) or TX  *                        Empty             THRE Mode enabled)                              FIFO above threshold (FIFOs and THRE  *                                                                                          Mode enabled)  *  * 0000        Fourth     Modem Status      Clear To Send (CTS) or Data Set Ready (DSR)     Reading the Modem Status Register  *                        Changed           or Ring Indicator (RI) or Data Center  *                                          Detect (DCD) changed  *  * 0111        Fifth      Busy Detect       Software has tried to write to the Line         Reading the UART Status Register  *                        Indication        Control Register while the BUSY bit of the  *                                          UART Status Register was set  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|CVMX_UART_IID_NONE
init|=
literal|1
block|,
name|CVMX_UART_IID_RX_ERROR
init|=
literal|6
block|,
name|CVMX_UART_IID_RX_DATA
init|=
literal|4
block|,
name|CVMX_UART_IID_RX_TIMEOUT
init|=
literal|12
block|,
name|CVMX_UART_IID_TX_EMPTY
init|=
literal|2
block|,
name|CVMX_UART_IID_MODEM
init|=
literal|0
block|,
name|CVMX_UART_IID_BUSY
init|=
literal|7
block|}
name|cvmx_uart_iid_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_CSR_ENUMS_H__ */
end_comment

end_unit

