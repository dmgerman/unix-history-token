begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * This file provides prototypes for the memory management library functions.  * Two different allocators are provided: an arena based allocator that is derived from a  * modified version of ptmalloc2 (used in glibc), and a zone allocator for allocating fixed  * size memory blocks.  *  *<hr>$Revision: 52004 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_MALLOC_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_MALLOC_H__
end_define

begin_include
include|#
directive|include
file|"cvmx-spinlock.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|malloc_state
struct_decl|;
comment|/* forward declaration */
typedef|typedef
name|struct
name|malloc_state
modifier|*
name|cvmx_arena_list_t
typedef|;
ifndef|#
directive|ifndef
name|CVMX_BUILD_FOR_LINUX_USER
comment|/**  * Creates an arena from the memory region specified and adds it  * to the supplied arena list.  *  * @param arena_list Pointer to an arena list to add new arena to.  *                   If NULL, new list is created.  * @param ptr        pointer to memory region to create arena from  *  * @param size       Size of memory region available at ptr in bytes.  *  * @return -1 on Failure  *         0 on success  */
name|int
name|cvmx_add_arena
parameter_list|(
name|cvmx_arena_list_t
modifier|*
name|arena_list
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
comment|/**  * allocate buffer from an arena list  *  * @param arena_list arena list to allocate buffer from  * @param size       size of buffer to allocate (in bytes)  *  * @return pointer to buffer or NULL if allocation failed  */
name|void
modifier|*
name|cvmx_malloc
parameter_list|(
name|cvmx_arena_list_t
name|arena_list
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
comment|/**  * Allocate zero initialized buffer  *  * @param arena_list arena list to allocate from  * @param n          number of elements  * @param elem_size  size of elementes  *  * @return pointer to (n*elem_size) byte zero initialized buffer or NULL  *         on allocation failure  */
name|void
modifier|*
name|cvmx_calloc
parameter_list|(
name|cvmx_arena_list_t
name|arena_list
parameter_list|,
name|size_t
name|n
parameter_list|,
name|size_t
name|elem_size
parameter_list|)
function_decl|;
comment|/**  * attempt to increase the size of an already allocated buffer  * This function may allocate a new buffer and copy  * the data if current buffer can't be extended.  *  * @param arena_list arena list to allocate from  * @param ptr        pointer to buffer to extend  * @param size       new buffer size  *  * @return pointer to expanded buffer (may differ from ptr)  *         or NULL on failure  */
name|void
modifier|*
name|cvmx_realloc
parameter_list|(
name|cvmx_arena_list_t
name|arena_list
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
comment|/**  * allocate a buffer with a specified alignment  *  * @param arena_list arena list to allocate from  * @param alignment  alignment of buffer.  Must be a power of 2  * @param bytes      size of buffer in bytes  *  * @return pointer to buffer on success  *         NULL on failure  */
name|void
modifier|*
name|cvmx_memalign
parameter_list|(
name|cvmx_arena_list_t
name|arena_list
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|size_t
name|bytes
parameter_list|)
function_decl|;
comment|/**  * free a previously allocated buffer  *  * @param ptr    pointer of buffer to deallocate  */
name|void
name|cvmx_free
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
endif|#
directive|endif
define|#
directive|define
name|CVMX_ZONE_OVERHEAD
value|(64)
comment|/** Zone allocator definitions  *  */
struct|struct
name|cvmx_zone
block|{
name|cvmx_spinlock_t
name|lock
decl_stmt|;
name|char
modifier|*
name|baseptr
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|void
modifier|*
name|freelist
decl_stmt|;
name|uint32_t
name|num_elem
decl_stmt|;
name|uint32_t
name|elem_size
decl_stmt|;
name|uint32_t
name|align
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|cvmx_zone
modifier|*
name|cvmx_zone_t
typedef|;
specifier|static
specifier|inline
name|uint32_t
name|cvmx_zone_size
parameter_list|(
name|cvmx_zone_t
name|zone
parameter_list|)
block|{
return|return
operator|(
name|zone
operator|->
name|elem_size
operator|)
return|;
block|}
specifier|static
specifier|inline
name|char
modifier|*
name|cvmx_zone_name
parameter_list|(
name|cvmx_zone_t
name|zone
parameter_list|)
block|{
return|return
operator|(
name|zone
operator|->
name|name
operator|)
return|;
block|}
ifndef|#
directive|ifndef
name|CVMX_BUILD_FOR_LINUX_USER
comment|/**  * Creates a memory zone for efficient allocation/deallocation of  * fixed size memory blocks from a specified memory region.  *  * @param name      name of zone.  * @param elem_size size of blocks that will be requested from zone  * @param num_elem  number of elements to allocate  * @param mem_ptr   pointer to memory to allocate zone from  * @param mem_size  size of memory region available  *                  (must be at least elem_size * num_elem + CVMX_ZONE_OVERHEAD bytes)  * @param flags     flags for zone.  Currently unused.  *  * @return pointer to zone on success or  *         NULL on failure  */
name|cvmx_zone_t
name|cvmx_zone_create_from_addr
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|uint32_t
name|elem_size
parameter_list|,
name|uint32_t
name|num_elem
parameter_list|,
name|void
modifier|*
name|mem_ptr
parameter_list|,
name|uint64_t
name|mem_size
parameter_list|,
name|uint32_t
name|flags
parameter_list|)
function_decl|;
comment|/**  * Creates a memory zone for efficient allocation/deallocation of  * fixed size memory blocks from a previously initialized arena list.  *  * @param name       name of zone.  * @param elem_size  size of blocks that will be requested from zone  * @param num_elem   number of elements to allocate  * @param align      alignment of buffers (must be power of 2)  *                   Elements are allocated contiguously, so the buffer size  *                   must be a multiple of the requested alignment for all  *                   buffers to have the requested alignment.  * @param arena_list arena list to allocate memory from  * @param flags      flags for zone.  Currently unused.  *  * @return pointer to zone on success or  *         NULL on failure  */
name|cvmx_zone_t
name|cvmx_zone_create_from_arena
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|uint32_t
name|elem_size
parameter_list|,
name|uint32_t
name|num_elem
parameter_list|,
name|uint32_t
name|align
parameter_list|,
name|cvmx_arena_list_t
name|arena_list
parameter_list|,
name|uint32_t
name|flags
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/**  * Allocate a buffer from a memory zone  *  * @param zone   zone to allocate buffer from  * @param flags  flags (currently unused)  *  * @return pointer to buffer or NULL on failure  */
name|void
modifier|*
name|cvmx_zone_alloc
parameter_list|(
name|cvmx_zone_t
name|zone
parameter_list|,
name|uint32_t
name|flags
parameter_list|)
function_decl|;
comment|/**  * Free a previously allocated buffer  *  * @param zone   zone that buffer was allocated from  * @param ptr    pointer to buffer to be freed  */
name|void
name|cvmx_zone_free
parameter_list|(
name|cvmx_zone_t
name|zone
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __CVMX_MALLOC_H__
end_comment

end_unit

