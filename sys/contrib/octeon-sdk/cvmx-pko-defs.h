begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2012  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-pko-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon pko.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_PKO_DEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_PKO_DEFS_H__
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_COUNT0
value|(CVMX_ADD_IO_SEG(0x0001180050001080ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_COUNT1
value|(CVMX_ADD_IO_SEG(0x0001180050001088ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG0
value|(CVMX_ADD_IO_SEG(0x0001180050001100ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG1
value|(CVMX_ADD_IO_SEG(0x0001180050001108ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG10
value|(CVMX_ADD_IO_SEG(0x0001180050001150ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG11
value|(CVMX_ADD_IO_SEG(0x0001180050001158ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG12
value|(CVMX_ADD_IO_SEG(0x0001180050001160ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG13
value|(CVMX_ADD_IO_SEG(0x0001180050001168ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG14
value|CVMX_PKO_MEM_DEBUG14_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_DEBUG14_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_DEBUG14 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001170ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG14
value|(CVMX_ADD_IO_SEG(0x0001180050001170ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG2
value|(CVMX_ADD_IO_SEG(0x0001180050001110ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG3
value|(CVMX_ADD_IO_SEG(0x0001180050001118ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG4
value|(CVMX_ADD_IO_SEG(0x0001180050001120ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG5
value|(CVMX_ADD_IO_SEG(0x0001180050001128ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG6
value|(CVMX_ADD_IO_SEG(0x0001180050001130ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG7
value|(CVMX_ADD_IO_SEG(0x0001180050001138ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG8
value|(CVMX_ADD_IO_SEG(0x0001180050001140ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_DEBUG9
value|(CVMX_ADD_IO_SEG(0x0001180050001148ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_IPORT_PTRS
value|CVMX_PKO_MEM_IPORT_PTRS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_IPORT_PTRS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_IPORT_PTRS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001030ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_IPORT_PTRS
value|(CVMX_ADD_IO_SEG(0x0001180050001030ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_IPORT_QOS
value|CVMX_PKO_MEM_IPORT_QOS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_IPORT_QOS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_IPORT_QOS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001038ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_IPORT_QOS
value|(CVMX_ADD_IO_SEG(0x0001180050001038ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_IQUEUE_PTRS
value|CVMX_PKO_MEM_IQUEUE_PTRS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_IQUEUE_PTRS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_IQUEUE_PTRS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001040ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_IQUEUE_PTRS
value|(CVMX_ADD_IO_SEG(0x0001180050001040ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_IQUEUE_QOS
value|CVMX_PKO_MEM_IQUEUE_QOS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_IQUEUE_QOS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_IQUEUE_QOS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001048ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_IQUEUE_QOS
value|(CVMX_ADD_IO_SEG(0x0001180050001048ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_PTRS
value|CVMX_PKO_MEM_PORT_PTRS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_PORT_PTRS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_PORT_PTRS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_PTRS
value|(CVMX_ADD_IO_SEG(0x0001180050001010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_QOS
value|CVMX_PKO_MEM_PORT_QOS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_PORT_QOS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_PORT_QOS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001018ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_QOS
value|(CVMX_ADD_IO_SEG(0x0001180050001018ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_RATE0
value|CVMX_PKO_MEM_PORT_RATE0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_PORT_RATE0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_PORT_RATE0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001020ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_RATE0
value|(CVMX_ADD_IO_SEG(0x0001180050001020ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_RATE1
value|CVMX_PKO_MEM_PORT_RATE1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_PORT_RATE1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_PORT_RATE1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001028ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_PORT_RATE1
value|(CVMX_ADD_IO_SEG(0x0001180050001028ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_QUEUE_PTRS
value|CVMX_PKO_MEM_QUEUE_PTRS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_QUEUE_PTRS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN5XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_QUEUE_PTRS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001000ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_QUEUE_PTRS
value|(CVMX_ADD_IO_SEG(0x0001180050001000ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_QUEUE_QOS
value|CVMX_PKO_MEM_QUEUE_QOS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_QUEUE_QOS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN5XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_QUEUE_QOS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001008ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_QUEUE_QOS
value|(CVMX_ADD_IO_SEG(0x0001180050001008ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_THROTTLE_INT
value|CVMX_PKO_MEM_THROTTLE_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_THROTTLE_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_THROTTLE_INT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001058ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_THROTTLE_INT
value|(CVMX_ADD_IO_SEG(0x0001180050001058ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_THROTTLE_PIPE
value|CVMX_PKO_MEM_THROTTLE_PIPE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_MEM_THROTTLE_PIPE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_MEM_THROTTLE_PIPE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050001050ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_MEM_THROTTLE_PIPE
value|(CVMX_ADD_IO_SEG(0x0001180050001050ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_PKO_REG_BIST_RESULT
value|(CVMX_ADD_IO_SEG(0x0001180050000080ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_REG_CMD_BUF
value|(CVMX_ADD_IO_SEG(0x0001180050000010ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_CRC_CTLX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_CRC_CTLX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000028ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_CRC_CTLX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001180050000028ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_CRC_ENABLE
value|CVMX_PKO_REG_CRC_ENABLE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_CRC_ENABLE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_CRC_ENABLE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000020ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_CRC_ENABLE
value|(CVMX_ADD_IO_SEG(0x0001180050000020ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_CRC_IVX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_CRC_IVX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000038ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_CRC_IVX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001180050000038ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG0
value|(CVMX_ADD_IO_SEG(0x0001180050000098ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG1
value|CVMX_PKO_REG_DEBUG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_DEBUG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN5XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_DEBUG1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800500000A0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG1
value|(CVMX_ADD_IO_SEG(0x00011800500000A0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG2
value|CVMX_PKO_REG_DEBUG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_DEBUG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN5XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_DEBUG2 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800500000A8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG2
value|(CVMX_ADD_IO_SEG(0x00011800500000A8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG3
value|CVMX_PKO_REG_DEBUG3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_DEBUG3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN5XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_DEBUG3 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800500000B0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG3
value|(CVMX_ADD_IO_SEG(0x00011800500000B0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG4
value|CVMX_PKO_REG_DEBUG4_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_DEBUG4_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_DEBUG4 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800500000B8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_DEBUG4
value|(CVMX_ADD_IO_SEG(0x00011800500000B8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ENGINE_INFLIGHT
value|CVMX_PKO_REG_ENGINE_INFLIGHT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_ENGINE_INFLIGHT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_ENGINE_INFLIGHT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000050ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ENGINE_INFLIGHT
value|(CVMX_ADD_IO_SEG(0x0001180050000050ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ENGINE_INFLIGHT1
value|CVMX_PKO_REG_ENGINE_INFLIGHT1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_ENGINE_INFLIGHT1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_ENGINE_INFLIGHT1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000318ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ENGINE_INFLIGHT1
value|(CVMX_ADD_IO_SEG(0x0001180050000318ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_ENGINE_STORAGEX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_ENGINE_STORAGEX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000300ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ENGINE_STORAGEX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001180050000300ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ENGINE_THRESH
value|CVMX_PKO_REG_ENGINE_THRESH_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_ENGINE_THRESH_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_ENGINE_THRESH not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000058ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ENGINE_THRESH
value|(CVMX_ADD_IO_SEG(0x0001180050000058ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_PKO_REG_ERROR
value|(CVMX_ADD_IO_SEG(0x0001180050000088ull))
end_define

begin_define
define|#
directive|define
name|CVMX_PKO_REG_FLAGS
value|(CVMX_ADD_IO_SEG(0x0001180050000000ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_GMX_PORT_MODE
value|CVMX_PKO_REG_GMX_PORT_MODE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_GMX_PORT_MODE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN5XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_GMX_PORT_MODE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000018ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_GMX_PORT_MODE
value|(CVMX_ADD_IO_SEG(0x0001180050000018ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_PKO_REG_INT_MASK
value|(CVMX_ADD_IO_SEG(0x0001180050000090ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_LOOPBACK_BPID
value|CVMX_PKO_REG_LOOPBACK_BPID_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_LOOPBACK_BPID_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_LOOPBACK_BPID not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000118ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_LOOPBACK_BPID
value|(CVMX_ADD_IO_SEG(0x0001180050000118ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_LOOPBACK_PKIND
value|CVMX_PKO_REG_LOOPBACK_PKIND_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_LOOPBACK_PKIND_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_LOOPBACK_PKIND not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000068ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_LOOPBACK_PKIND
value|(CVMX_ADD_IO_SEG(0x0001180050000068ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_MIN_PKT
value|CVMX_PKO_REG_MIN_PKT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_MIN_PKT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_MIN_PKT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000070ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_MIN_PKT
value|(CVMX_ADD_IO_SEG(0x0001180050000070ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_PREEMPT
value|CVMX_PKO_REG_PREEMPT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_PREEMPT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_PREEMPT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000110ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_PREEMPT
value|(CVMX_ADD_IO_SEG(0x0001180050000110ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_PKO_REG_QUEUE_MODE
value|(CVMX_ADD_IO_SEG(0x0001180050000048ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_QUEUE_PREEMPT
value|CVMX_PKO_REG_QUEUE_PREEMPT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_QUEUE_PREEMPT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_QUEUE_PREEMPT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000108ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_QUEUE_PREEMPT
value|(CVMX_ADD_IO_SEG(0x0001180050000108ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_QUEUE_PTRS1
value|CVMX_PKO_REG_QUEUE_PTRS1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_QUEUE_PTRS1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN5XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_QUEUE_PTRS1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000100ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_QUEUE_PTRS1
value|(CVMX_ADD_IO_SEG(0x0001180050000100ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_PKO_REG_READ_IDX
value|(CVMX_ADD_IO_SEG(0x0001180050000008ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_THROTTLE
value|CVMX_PKO_REG_THROTTLE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_THROTTLE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_THROTTLE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000078ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_THROTTLE
value|(CVMX_ADD_IO_SEG(0x0001180050000078ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_PKO_REG_TIMESTAMP
value|CVMX_PKO_REG_TIMESTAMP_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PKO_REG_TIMESTAMP_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PKO_REG_TIMESTAMP not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180050000060ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PKO_REG_TIMESTAMP
value|(CVMX_ADD_IO_SEG(0x0001180050000060ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_pko_mem_count0  *  * Notes:  * Total number of packets seen by PKO, per port  * A write to this address will clear the entry whose index is specified as COUNT[5:0].  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_count0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_count0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|count
range|:
literal|32
decl_stmt|;
comment|/**< Total number of packets seen by PKO */
else|#
directive|else
name|uint64_t
name|count
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_count0
name|cvmx_pko_mem_count0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_count1  *  * Notes:  * Total number of bytes seen by PKO, per port  * A write to this address will clear the entry whose index is specified as COUNT[5:0].  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_count1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_count1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_48_63
range|:
literal|16
decl_stmt|;
name|uint64_t
name|count
range|:
literal|48
decl_stmt|;
comment|/**< Total number of bytes seen by PKO */
else|#
directive|else
name|uint64_t
name|count
range|:
literal|48
decl_stmt|;
name|uint64_t
name|reserved_48_63
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_count1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_count1
name|cvmx_pko_mem_count1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug0  *  * Notes:  * Internal per-port state intended for debug use only - pko_prt_psb.cmnd[63:0]  * This CSR is a memory of 12 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|fau
range|:
literal|28
decl_stmt|;
comment|/**< Fetch and add command words */
name|uint64_t
name|cmd
range|:
literal|14
decl_stmt|;
comment|/**< Command word */
name|uint64_t
name|segs
range|:
literal|6
decl_stmt|;
comment|/**< Number of segments/gather size */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Packet length in bytes */
else|#
directive|else
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|segs
range|:
literal|6
decl_stmt|;
name|uint64_t
name|cmd
range|:
literal|14
decl_stmt|;
name|uint64_t
name|fau
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug0
name|cvmx_pko_mem_debug0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug1  *  * Notes:  * Internal per-port state intended for debug use only - pko_prt_psb.curr[63:0]  * This CSR is a memory of 12 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
comment|/**< "I"  value used for free operation */
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
comment|/**< Back value used for free operation */
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
comment|/**< Pool value used for free operation */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Size in bytes */
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
comment|/**< Data pointer */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug1
name|cvmx_pko_mem_debug1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug10  *  * Notes:  * Internal per-port state intended for debug use only - pko.dat.ptr.ptrs1, pko.dat.ptr.ptrs2  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug10
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug10_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug10_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|fau
range|:
literal|28
decl_stmt|;
comment|/**< Fetch and add command words */
name|uint64_t
name|cmd
range|:
literal|14
decl_stmt|;
comment|/**< Command word */
name|uint64_t
name|segs
range|:
literal|6
decl_stmt|;
comment|/**< Number of segments/gather size */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Packet length in bytes */
else|#
directive|else
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|segs
range|:
literal|6
decl_stmt|;
name|uint64_t
name|cmd
range|:
literal|14
decl_stmt|;
name|uint64_t
name|fau
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug10_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug10_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ptrs1
range|:
literal|17
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|reserved_17_31
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ptrs2
range|:
literal|17
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|ptrs2
range|:
literal|17
decl_stmt|;
name|uint64_t
name|reserved_17_31
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ptrs1
range|:
literal|17
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug10_cn50xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug10
name|cvmx_pko_mem_debug10_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug11  *  * Notes:  * Internal per-port state intended for debug use only - pko.out.sta.state[22:0]  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug11
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug11_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
comment|/**< "I"  value used for free operation */
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
comment|/**< Back value used for free operation */
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
comment|/**< Pool value used for free operation */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Size in bytes */
name|uint64_t
name|reserved_0_39
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_39
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug11_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
comment|/**< "I"  value used for free operation */
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
comment|/**< Back value used for free operation */
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
comment|/**< Pool value used for free operation */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Size in bytes */
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
comment|/**< Data pointer */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug11_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug11_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_23_63
range|:
literal|41
decl_stmt|;
name|uint64_t
name|maj
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|uid
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|sop
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|len
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|chk
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|cnt
range|:
literal|13
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|mod
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|mod
range|:
literal|3
decl_stmt|;
name|uint64_t
name|cnt
range|:
literal|13
decl_stmt|;
name|uint64_t
name|chk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|len
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|uid
range|:
literal|3
decl_stmt|;
name|uint64_t
name|maj
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_23_63
range|:
literal|41
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug11_cn50xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug11
name|cvmx_pko_mem_debug11_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug12  *  * Notes:  * Internal per-port state intended for debug use only - pko.out.ctl.cmnd[63:0]  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug12
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug12_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug12_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
comment|/**< WorkQ data or Store0 pointer */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug12_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug12_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|fau
range|:
literal|28
decl_stmt|;
comment|/**< Fetch and add command words */
name|uint64_t
name|cmd
range|:
literal|14
decl_stmt|;
comment|/**< Command word */
name|uint64_t
name|segs
range|:
literal|6
decl_stmt|;
comment|/**< Number of segments/gather size */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Packet length in bytes */
else|#
directive|else
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|segs
range|:
literal|6
decl_stmt|;
name|uint64_t
name|cmd
range|:
literal|14
decl_stmt|;
name|uint64_t
name|fau
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug12_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|state
range|:
literal|64
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|state
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_pko_mem_debug12_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug12_cn50xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug12
name|cvmx_pko_mem_debug12_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug13  *  * Notes:  * Internal per-port state intended for debug use only - pko.out.ctl.head[63:0]  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug13
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug13_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug13_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_51_63
range|:
literal|13
decl_stmt|;
name|uint64_t
name|widx
range|:
literal|17
decl_stmt|;
comment|/**< PDB widx */
name|uint64_t
name|ridx2
range|:
literal|17
decl_stmt|;
comment|/**< PDB ridx2 */
name|uint64_t
name|widx2
range|:
literal|17
decl_stmt|;
comment|/**< PDB widx2 */
else|#
directive|else
name|uint64_t
name|widx2
range|:
literal|17
decl_stmt|;
name|uint64_t
name|ridx2
range|:
literal|17
decl_stmt|;
name|uint64_t
name|widx
range|:
literal|17
decl_stmt|;
name|uint64_t
name|reserved_51_63
range|:
literal|13
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug13_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug13_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
comment|/**< "I"  value used for free operation */
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
comment|/**< Back value used for free operation */
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
comment|/**< Pool value used for free operation */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Size in bytes */
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
comment|/**< Data pointer */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug13_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|state
range|:
literal|64
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|state
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_pko_mem_debug13_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug13_cn50xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug13
name|cvmx_pko_mem_debug13_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug14  *  * Notes:  * Internal per-port state intended for debug use only - pko.prt.psb.save[63:0]  * This CSR is a memory of 132 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug14
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug14_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug14_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
name|uint64_t
name|ridx
range|:
literal|17
decl_stmt|;
comment|/**< PDB ridx */
else|#
directive|else
name|uint64_t
name|ridx
range|:
literal|17
decl_stmt|;
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug14_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug14_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug14_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug14_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
comment|/**< Command words */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_mem_debug14_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug14_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug14_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug14_cn52xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug14_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug14_cn52xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug14_cn52xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug14_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug14
name|cvmx_pko_mem_debug14_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug2  *  * Notes:  * Internal per-port state intended for debug use only - pko_prt_psb.head[63:0]  * This CSR is a memory of 12 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
comment|/**< "I"  value used for free operation */
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
comment|/**< Back value used for free operation */
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
comment|/**< Pool value used for free operation */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Size in bytes */
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
comment|/**< Data pointer */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug2
name|cvmx_pko_mem_debug2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug3  *  * Notes:  * Internal per-port state intended for debug use only - pko_prt_psb.resp[63:0]  * This CSR is a memory of 12 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug3_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
comment|/**< "I"  value used for free operation */
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
comment|/**< Back value used for free operation */
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
comment|/**< Pool value used for free operation */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Size in bytes */
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
comment|/**< Data pointer */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|back
range|:
literal|4
decl_stmt|;
name|uint64_t
name|i
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug3_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug3_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
comment|/**< WorkQ data or Store0 pointer */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug3_cn50xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug3
name|cvmx_pko_mem_debug3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug4  *  * Notes:  * Internal per-port state intended for debug use only - pko_prt_psb.state[63:0]  * This CSR is a memory of 12 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug4_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
comment|/**< WorkQ data or Store0 pointer */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug4_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug4_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|cmnd_segs
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|cmnd_siz
range|:
literal|16
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|cmnd_off
range|:
literal|6
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|uid
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|dread_sop
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|init_dwrite
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|chk_once
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|chk_mode
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|active
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qcb_ridx
range|:
literal|5
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qid_off_max
range|:
literal|4
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qid_off
range|:
literal|4
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qid_base
range|:
literal|8
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|wait
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|minor
range|:
literal|2
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|major
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|major
range|:
literal|3
decl_stmt|;
name|uint64_t
name|minor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|wait
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qid_base
range|:
literal|8
decl_stmt|;
name|uint64_t
name|qid_off
range|:
literal|4
decl_stmt|;
name|uint64_t
name|qid_off_max
range|:
literal|4
decl_stmt|;
name|uint64_t
name|qcb_ridx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|active
range|:
literal|1
decl_stmt|;
name|uint64_t
name|chk_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|chk_once
range|:
literal|1
decl_stmt|;
name|uint64_t
name|init_dwrite
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dread_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|uid
range|:
literal|3
decl_stmt|;
name|uint64_t
name|cmnd_off
range|:
literal|6
decl_stmt|;
name|uint64_t
name|cmnd_siz
range|:
literal|16
decl_stmt|;
name|uint64_t
name|cmnd_segs
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
struct|struct
name|cvmx_pko_mem_debug4_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|curr_siz
range|:
literal|8
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|curr_off
range|:
literal|16
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|cmnd_segs
range|:
literal|6
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|cmnd_siz
range|:
literal|16
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|cmnd_off
range|:
literal|6
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|uid
range|:
literal|2
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|dread_sop
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|init_dwrite
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|chk_once
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|chk_mode
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|wait
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|minor
range|:
literal|2
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|major
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|major
range|:
literal|3
decl_stmt|;
name|uint64_t
name|minor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|wait
range|:
literal|1
decl_stmt|;
name|uint64_t
name|chk_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|chk_once
range|:
literal|1
decl_stmt|;
name|uint64_t
name|init_dwrite
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dread_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|uid
range|:
literal|2
decl_stmt|;
name|uint64_t
name|cmnd_off
range|:
literal|6
decl_stmt|;
name|uint64_t
name|cmnd_siz
range|:
literal|16
decl_stmt|;
name|uint64_t
name|cmnd_segs
range|:
literal|6
decl_stmt|;
name|uint64_t
name|curr_off
range|:
literal|16
decl_stmt|;
name|uint64_t
name|curr_siz
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug4_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug4
name|cvmx_pko_mem_debug4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug5  *  * Notes:  * Internal per-port state intended for debug use only - pko_prt_psb.state[127:64]  * This CSR is a memory of 12 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug5
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug5_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug5_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|dwri_mod
range|:
literal|1
decl_stmt|;
comment|/**< Dwrite mod */
name|uint64_t
name|dwri_sop
range|:
literal|1
decl_stmt|;
comment|/**< Dwrite sop needed */
name|uint64_t
name|dwri_len
range|:
literal|1
decl_stmt|;
comment|/**< Dwrite len */
name|uint64_t
name|dwri_cnt
range|:
literal|13
decl_stmt|;
comment|/**< Dwrite count */
name|uint64_t
name|cmnd_siz
range|:
literal|16
decl_stmt|;
comment|/**< Copy of cmnd.size */
name|uint64_t
name|uid
range|:
literal|1
decl_stmt|;
comment|/**< UID */
name|uint64_t
name|xfer_wor
range|:
literal|1
decl_stmt|;
comment|/**< Transfer work needed */
name|uint64_t
name|xfer_dwr
range|:
literal|1
decl_stmt|;
comment|/**< Transfer dwrite needed */
name|uint64_t
name|cbuf_fre
range|:
literal|1
decl_stmt|;
comment|/**< Cbuf needs free */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|chk_mode
range|:
literal|1
decl_stmt|;
comment|/**< Checksum mode */
name|uint64_t
name|active
range|:
literal|1
decl_stmt|;
comment|/**< Port is active */
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< Current QOS round */
name|uint64_t
name|qcb_ridx
range|:
literal|5
decl_stmt|;
comment|/**< Buffer read  index for QCB */
name|uint64_t
name|qid_off
range|:
literal|3
decl_stmt|;
comment|/**< Offset to be added to QID_BASE for current queue */
name|uint64_t
name|qid_base
range|:
literal|7
decl_stmt|;
comment|/**< Absolute QID of the queue array base =&QUEUES[0] */
name|uint64_t
name|wait
range|:
literal|1
decl_stmt|;
comment|/**< State wait when set */
name|uint64_t
name|minor
range|:
literal|2
decl_stmt|;
comment|/**< State minor code */
name|uint64_t
name|major
range|:
literal|4
decl_stmt|;
comment|/**< State major code */
else|#
directive|else
name|uint64_t
name|major
range|:
literal|4
decl_stmt|;
name|uint64_t
name|minor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|wait
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qid_base
range|:
literal|7
decl_stmt|;
name|uint64_t
name|qid_off
range|:
literal|3
decl_stmt|;
name|uint64_t
name|qcb_ridx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|active
range|:
literal|1
decl_stmt|;
name|uint64_t
name|chk_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|cbuf_fre
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xfer_dwr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xfer_wor
range|:
literal|1
decl_stmt|;
name|uint64_t
name|uid
range|:
literal|1
decl_stmt|;
name|uint64_t
name|cmnd_siz
range|:
literal|16
decl_stmt|;
name|uint64_t
name|dwri_cnt
range|:
literal|13
decl_stmt|;
name|uint64_t
name|dwri_len
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwri_sop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwri_mod
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug5_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug5_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug5_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug5_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|curr_ptr
range|:
literal|29
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|curr_siz
range|:
literal|16
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|curr_off
range|:
literal|16
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|cmnd_segs
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|cmnd_segs
range|:
literal|3
decl_stmt|;
name|uint64_t
name|curr_off
range|:
literal|16
decl_stmt|;
name|uint64_t
name|curr_siz
range|:
literal|16
decl_stmt|;
name|uint64_t
name|curr_ptr
range|:
literal|29
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
struct|struct
name|cvmx_pko_mem_debug5_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|nxt_inflt
range|:
literal|6
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|curr_ptr
range|:
literal|40
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|curr_siz
range|:
literal|8
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|curr_siz
range|:
literal|8
decl_stmt|;
name|uint64_t
name|curr_ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|nxt_inflt
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_mem_debug5_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug5_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug5_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug5_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug5_cn50xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug5_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|major_3
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|nxt_inflt
range|:
literal|6
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|curr_ptr
range|:
literal|40
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|curr_siz
range|:
literal|8
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|curr_siz
range|:
literal|8
decl_stmt|;
name|uint64_t
name|curr_ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|nxt_inflt
range|:
literal|6
decl_stmt|;
name|uint64_t
name|major_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_pko_mem_debug5_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug5_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug5_cn61xx
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug5_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_57_63
range|:
literal|7
decl_stmt|;
name|uint64_t
name|uid_2
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|major_3
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|nxt_inflt
range|:
literal|6
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|curr_ptr
range|:
literal|40
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|curr_siz
range|:
literal|8
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|curr_siz
range|:
literal|8
decl_stmt|;
name|uint64_t
name|curr_ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|nxt_inflt
range|:
literal|6
decl_stmt|;
name|uint64_t
name|major_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|uid_2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_63
range|:
literal|7
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_pko_mem_debug5_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug5_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug5
name|cvmx_pko_mem_debug5_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug6  *  * Notes:  * Internal per-port state intended for debug use only - pko_prt_psb.port[63:0]  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug6
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug6_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_37_63
range|:
literal|27
decl_stmt|;
name|uint64_t
name|qid_offres
range|:
literal|4
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qid_offths
range|:
literal|4
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|preempted
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|active
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|statc
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qcb_ridx
range|:
literal|5
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qid_offmax
range|:
literal|4
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|reserved_0_11
range|:
literal|12
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_11
range|:
literal|12
decl_stmt|;
name|uint64_t
name|qid_offmax
range|:
literal|4
decl_stmt|;
name|uint64_t
name|qcb_ridx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|statc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|active
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preempted
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qid_offths
range|:
literal|4
decl_stmt|;
name|uint64_t
name|qid_offres
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_37_63
range|:
literal|27
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug6_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|qid_offm
range|:
literal|3
decl_stmt|;
comment|/**< Qid offset max */
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Static port when set */
name|uint64_t
name|work_min
range|:
literal|3
decl_stmt|;
comment|/**< Work minor */
name|uint64_t
name|dwri_chk
range|:
literal|1
decl_stmt|;
comment|/**< Dwrite checksum mode */
name|uint64_t
name|dwri_uid
range|:
literal|1
decl_stmt|;
comment|/**< Dwrite UID */
name|uint64_t
name|dwri_mod
range|:
literal|2
decl_stmt|;
comment|/**< Dwrite mod */
else|#
directive|else
name|uint64_t
name|dwri_mod
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dwri_uid
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwri_chk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|work_min
range|:
literal|3
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qid_offm
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug6_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug6_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|curr_ptr
range|:
literal|11
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|curr_ptr
range|:
literal|11
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
struct|struct
name|cvmx_pko_mem_debug6_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_37_63
range|:
literal|27
decl_stmt|;
name|uint64_t
name|qid_offres
range|:
literal|4
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qid_offths
range|:
literal|4
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|preempted
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|active
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|statc
range|:
literal|1
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qcb_ridx
range|:
literal|5
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qid_offmax
range|:
literal|4
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qid_off
range|:
literal|4
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|qid_base
range|:
literal|8
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|qid_base
range|:
literal|8
decl_stmt|;
name|uint64_t
name|qid_off
range|:
literal|4
decl_stmt|;
name|uint64_t
name|qid_offmax
range|:
literal|4
decl_stmt|;
name|uint64_t
name|qcb_ridx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|statc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|active
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preempted
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qid_offths
range|:
literal|4
decl_stmt|;
name|uint64_t
name|qid_offres
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_37_63
range|:
literal|27
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug6_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug6
name|cvmx_pko_mem_debug6_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug7  *  * Notes:  * Internal per-queue state intended for debug use only - pko_prt_qsb.state[63:0]  * This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug7
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug7_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug7_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_58_63
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|9
decl_stmt|;
comment|/**< Calculated DWB count used for free operation */
name|uint64_t
name|start
range|:
literal|33
decl_stmt|;
comment|/**< Calculated start address used for free operation */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< Packet length in bytes */
else|#
directive|else
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|start
range|:
literal|33
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|9
decl_stmt|;
name|uint64_t
name|reserved_58_63
range|:
literal|6
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug7_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug7_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|qos
range|:
literal|5
decl_stmt|;
comment|/**< QOS mask to enable the queue when set */
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
comment|/**< This queue is the last (tail) in the queue array */
name|uint64_t
name|buf_siz
range|:
literal|13
decl_stmt|;
comment|/**< Command buffer remaining size in words */
name|uint64_t
name|buf_ptr
range|:
literal|33
decl_stmt|;
comment|/**< Command word pointer */
name|uint64_t
name|qcb_widx
range|:
literal|6
decl_stmt|;
comment|/**< Buffer write index for QCB */
name|uint64_t
name|qcb_ridx
range|:
literal|6
decl_stmt|;
comment|/**< Buffer read  index for QCB */
else|#
directive|else
name|uint64_t
name|qcb_ridx
range|:
literal|6
decl_stmt|;
name|uint64_t
name|qcb_widx
range|:
literal|6
decl_stmt|;
name|uint64_t
name|buf_ptr
range|:
literal|33
decl_stmt|;
name|uint64_t
name|buf_siz
range|:
literal|13
decl_stmt|;
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qos
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug7_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< QOS mask to enable the queue when set */
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
comment|/**< This queue is the last (tail) in the queue array */
name|uint64_t
name|buf_siz
range|:
literal|13
decl_stmt|;
comment|/**< Command buffer remaining size in words */
name|uint64_t
name|buf_ptr
range|:
literal|33
decl_stmt|;
comment|/**< Command word pointer */
name|uint64_t
name|qcb_widx
range|:
literal|7
decl_stmt|;
comment|/**< Buffer write index for QCB */
name|uint64_t
name|qcb_ridx
range|:
literal|7
decl_stmt|;
comment|/**< Buffer read  index for QCB */
else|#
directive|else
name|uint64_t
name|qcb_ridx
range|:
literal|7
decl_stmt|;
name|uint64_t
name|qcb_widx
range|:
literal|7
decl_stmt|;
name|uint64_t
name|buf_ptr
range|:
literal|33
decl_stmt|;
name|uint64_t
name|buf_siz
range|:
literal|13
decl_stmt|;
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_pko_mem_debug7_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug7_cn50xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug7
name|cvmx_pko_mem_debug7_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug8  *  * Notes:  * Internal per-queue state intended for debug use only - pko_prt_qsb.state[91:64]  * This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug8
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug8_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
comment|/**< This queue is the last (tail) in the queue array */
name|uint64_t
name|buf_siz
range|:
literal|13
decl_stmt|;
comment|/**< Command buffer remaining size in words */
name|uint64_t
name|reserved_0_44
range|:
literal|45
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_44
range|:
literal|45
decl_stmt|;
name|uint64_t
name|buf_siz
range|:
literal|13
decl_stmt|;
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug8_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|qos
range|:
literal|5
decl_stmt|;
comment|/**< QOS mask to enable the queue when set */
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
comment|/**< This queue is the last (tail) in the queue array */
name|uint64_t
name|buf_siz
range|:
literal|13
decl_stmt|;
comment|/**< Command buffer remaining size in words */
name|uint64_t
name|buf_ptr
range|:
literal|33
decl_stmt|;
comment|/**< Command word pointer */
name|uint64_t
name|qcb_widx
range|:
literal|6
decl_stmt|;
comment|/**< Buffer write index for QCB */
name|uint64_t
name|qcb_ridx
range|:
literal|6
decl_stmt|;
comment|/**< Buffer read  index for QCB */
else|#
directive|else
name|uint64_t
name|qcb_ridx
range|:
literal|6
decl_stmt|;
name|uint64_t
name|qcb_widx
range|:
literal|6
decl_stmt|;
name|uint64_t
name|buf_ptr
range|:
literal|33
decl_stmt|;
name|uint64_t
name|buf_siz
range|:
literal|13
decl_stmt|;
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qos
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug8_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug8_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug8_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug8_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_28_63
range|:
literal|36
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
comment|/**< Doorbell count */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Static priority */
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
comment|/**< Static tail */
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
comment|/**< Static priority */
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< QOS mask to enable the queue when set */
else|#
directive|else
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
name|uint64_t
name|reserved_28_63
range|:
literal|36
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
struct|struct
name|cvmx_pko_mem_debug8_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_29_63
range|:
literal|35
decl_stmt|;
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
comment|/**< Preempter */
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
comment|/**< Doorbell count */
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
comment|/**< Preemptee */
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Static priority */
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
comment|/**< Static tail */
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
comment|/**< Static priority */
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< QOS mask to enable the queue when set */
else|#
directive|else
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_29_63
range|:
literal|35
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_mem_debug8_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug8_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug8_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug8_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug8_cn50xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug8_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_42_63
range|:
literal|22
decl_stmt|;
name|uint64_t
name|qid_qqos
range|:
literal|8
decl_stmt|;
comment|/**< QOS_MASK */
name|uint64_t
name|reserved_33_33
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qid_idx
range|:
literal|4
decl_stmt|;
comment|/**< IDX */
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
comment|/**< Preempter */
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
comment|/**< Doorbell count */
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
comment|/**< Preemptee */
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Static priority */
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
comment|/**< Static tail */
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
comment|/**< Static priority */
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< QOS mask to enable the queue when set */
else|#
directive|else
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qid_idx
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_33_33
range|:
literal|1
decl_stmt|;
name|uint64_t
name|qid_qqos
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_42_63
range|:
literal|22
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_pko_mem_debug8_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug8_cn52xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug8_cn61xx
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug8_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_37_63
range|:
literal|27
decl_stmt|;
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
comment|/**< Preempter */
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
comment|/**< Doorbell count */
name|uint64_t
name|reserved_9_15
range|:
literal|7
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
comment|/**< Preemptee */
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Static priority */
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
comment|/**< Static tail */
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
comment|/**< Static priority */
name|uint64_t
name|qos
range|:
literal|5
decl_stmt|;
comment|/**< QOS mask to enable the queue when set */
else|#
directive|else
name|uint64_t
name|qos
range|:
literal|5
decl_stmt|;
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_9_15
range|:
literal|7
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_63
range|:
literal|27
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_pko_mem_debug8_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug8_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug8
name|cvmx_pko_mem_debug8_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_debug9  *  * Notes:  * Internal per-port state intended for debug use only - pko.dat.ptr.ptrs0, pko.dat.ptr.ptrs3  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_debug9
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug9_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ptrs0
range|:
literal|17
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|reserved_0_31
range|:
literal|32
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_31
range|:
literal|32
decl_stmt|;
name|uint64_t
name|ptrs0
range|:
literal|17
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_debug9_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_28_63
range|:
literal|36
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
comment|/**< Doorbell count */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
comment|/**< reads as zero (S_TAIL cannot be read) */
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
comment|/**< reads as zero (STATIC_Q cannot be read) */
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< QOS mask to enable the queue when set */
else|#
directive|else
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
name|uint64_t
name|reserved_28_63
range|:
literal|36
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_mem_debug9_cn30xx
name|cn31xx
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug9_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_28_63
range|:
literal|36
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
comment|/**< Doorbell count */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Static priority (port) */
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
comment|/**< Static tail */
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
comment|/**< Static priority */
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
comment|/**< QOS mask to enable the queue when set */
else|#
directive|else
name|uint64_t
name|qos
range|:
literal|3
decl_stmt|;
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|20
decl_stmt|;
name|uint64_t
name|reserved_28_63
range|:
literal|36
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_pko_mem_debug9_cn38xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_mem_debug9_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ptrs0
range|:
literal|17
decl_stmt|;
comment|/**< Internal state */
name|uint64_t
name|reserved_17_31
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ptrs3
range|:
literal|17
decl_stmt|;
comment|/**< Internal state */
else|#
directive|else
name|uint64_t
name|ptrs3
range|:
literal|17
decl_stmt|;
name|uint64_t
name|reserved_17_31
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ptrs0
range|:
literal|17
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_debug9_cn50xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_debug9
name|cvmx_pko_mem_debug9_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_iport_ptrs  *  * Notes:  * This CSR is a memory of 128 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  The index to this CSR is an IPORT.  A read of any  * entry that has not been previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_iport_ptrs
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_iport_ptrs_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_63_63
range|:
literal|1
decl_stmt|;
name|uint64_t
name|crc
range|:
literal|1
decl_stmt|;
comment|/**< Set if this IPID uses CRC */
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Set if this IPID has static priority */
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
comment|/**< Mask to control priority across 8 QOS rounds */
name|uint64_t
name|min_pkt
range|:
literal|3
decl_stmt|;
comment|/**< Min packet size specified by PKO_REG_MIN_PKT[MIN_PKT] */
name|uint64_t
name|reserved_31_49
range|:
literal|19
decl_stmt|;
name|uint64_t
name|pipe
range|:
literal|7
decl_stmt|;
comment|/**< The PKO pipe or loopback port                                                          When INT != PIP/IPD:                                                           PIPE is the PKO pipe to which this port is mapped                                                           All used PKO-internal ports that map to the same                                                           PIPE must also map to the same INT and EID in                                                           this case.                                                          When INT == PIP/IPD:                                                           PIPE must be in the range                                                                   0..PKO_REG_LOOPBACK[NUM_PORTS]-1                                                           in this case and selects one of the loopback                                                           ports. */
name|uint64_t
name|reserved_21_23
range|:
literal|3
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|5
decl_stmt|;
comment|/**< The interface to which this port is mapped                                                          All used PKO-internal ports that map to the same EID                                                          must also map to the same INT. All used PKO-internal                                                          ports that map to the same INT must also map to the                                                          same EID.                                                          Encoding:                                                            0 = GMX0 XAUI/DXAUI/RXAUI0 or SGMII0                                                            1 = GMX0 SGMII1                                                            2 = GMX0 SGMII2                                                            3 = GMX0 SGMII3                                                            4 = GMX1 RXAUI                                                            8 = GMX2 XAUI/DXAUI or SGMII0                                                            9 = GMX2 SGMII1                                                           10 = GMX2 SGMII2                                                           11 = GMX2 SGMII3                                                           12 = GMX3 XAUI/DXAUI or SGMII0                                                           13 = GMX3 SGMII1                                                           14 = GMX3 SGMII2                                                           15 = GMX3 SGMII3                                                           16 = GMX4 XAUI/DXAUI or SGMII0                                                           17 = GMX4 SGMII1                                                           18 = GMX4 SGMII2                                                           19 = GMX4 SGMII3                                                           28 = ILK interface 0                                                           29 = ILK interface 1                                                           30 = DPI                                                           31 = PIP/IPD                                                           others = reserved */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|eid
range|:
literal|5
decl_stmt|;
comment|/**< Engine ID to which this port is mapped                                                          EID==31 can be used with unused PKO-internal ports.                                                          Otherwise, 0-19 are legal EID values. */
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipid
range|:
literal|7
decl_stmt|;
comment|/**< PKO-internal Port ID to be accessed */
else|#
directive|else
name|uint64_t
name|ipid
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|eid
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_21_23
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pipe
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_31_49
range|:
literal|19
decl_stmt|;
name|uint64_t
name|min_pkt
range|:
literal|3
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|crc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_63_63
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_iport_ptrs_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_iport_ptrs_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_iport_ptrs
name|cvmx_pko_mem_iport_ptrs_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_iport_qos  *  * Notes:  * Sets the QOS mask, per port.  These QOS_MASK bits are logically and physically the same QOS_MASK  * bits in PKO_MEM_IPORT_PTRS.  This CSR address allows the QOS_MASK bits to be written during PKO  * operation without affecting any other port state.  The engine to which port PID is mapped is engine  * EID.  Note that the port to engine mapping must be the same as was previously programmed via the  * PKO_MEM_IPORT_PTRS CSR.  * This CSR is a memory of 128 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  The index to this CSR is an IPORT.  A read of  * any entry that has not been previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_iport_qos
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_iport_qos_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_61_63
range|:
literal|3
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
comment|/**< Mask to control priority across 8 QOS rounds */
name|uint64_t
name|reserved_13_52
range|:
literal|40
decl_stmt|;
name|uint64_t
name|eid
range|:
literal|5
decl_stmt|;
comment|/**< Engine ID to which this port is mapped */
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipid
range|:
literal|7
decl_stmt|;
comment|/**< PKO-internal Port ID */
else|#
directive|else
name|uint64_t
name|ipid
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|eid
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_52
range|:
literal|40
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_61_63
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_iport_qos_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_iport_qos_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_iport_qos
name|cvmx_pko_mem_iport_qos_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_iqueue_ptrs  *  * Notes:  * Sets the queue to port mapping and the initial command buffer pointer, per queue.  Unused queues must  * set BUF_PTR=0.  Each queue may map to at most one port.  No more than 32 queues may map to a port.  * The set of queues that is mapped to a port must be a contiguous array of queues.  The port to which  * queue QID is mapped is port IPID.  The index of queue QID in port IPID's queue list is IDX.  The last  * queue in port IPID's queue array must have its TAIL bit set.  * STATIC_Q marks queue QID as having static priority.  STATIC_P marks the port IPID to which QID is  * mapped as having at least one queue with static priority.  If any QID that maps to IPID has static  * priority, then all QID that map to IPID must have STATIC_P set.  Queues marked as static priority  * must be contiguous and begin at IDX 0.  The last queue that is marked as having static priority  * must have its S_TAIL bit set.  * This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  The index to this CSR is an IQUEUE.  A read of any  * entry that has not been previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_iqueue_ptrs
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_iqueue_ptrs_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
comment|/**< Set if this QID is the tail of the static queues */
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Set if any QID in this IPID has static priority */
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
comment|/**< Set if this QID has static priority */
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
comment|/**< Mask to control priority across 8 QOS rounds */
name|uint64_t
name|buf_ptr
range|:
literal|31
decl_stmt|;
comment|/**< Command buffer pointer[37:7] */
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
comment|/**< Set if this QID is the tail of the queue array */
name|uint64_t
name|index
range|:
literal|5
decl_stmt|;
comment|/**< Index (distance from head) in the queue array */
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipid
range|:
literal|7
decl_stmt|;
comment|/**< PKO-Internal Port ID to which this queue is mapped */
name|uint64_t
name|qid
range|:
literal|8
decl_stmt|;
comment|/**< Queue ID */
else|#
directive|else
name|uint64_t
name|qid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|ipid
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|index
range|:
literal|5
decl_stmt|;
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|buf_ptr
range|:
literal|31
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_iqueue_ptrs_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_iqueue_ptrs_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_iqueue_ptrs
name|cvmx_pko_mem_iqueue_ptrs_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_iqueue_qos  *  * Notes:  * Sets the QOS mask, per queue.  These QOS_MASK bits are logically and physically the same QOS_MASK  * bits in PKO_MEM_IQUEUE_PTRS.  This CSR address allows the QOS_MASK bits to be written during PKO  * operation without affecting any other queue state.  The port to which queue QID is mapped is port  * IPID.  Note that the queue to port mapping must be the same as was previously programmed via the  * PKO_MEM_IQUEUE_PTRS CSR.  * This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  The index to this CSR is an IQUEUE.  A read of any  * entry that has not been previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_iqueue_qos
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_iqueue_qos_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_61_63
range|:
literal|3
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
comment|/**< Mask to control priority across 8 QOS rounds */
name|uint64_t
name|reserved_15_52
range|:
literal|38
decl_stmt|;
name|uint64_t
name|ipid
range|:
literal|7
decl_stmt|;
comment|/**< PKO-Internal Port ID to which this queue is mapped */
name|uint64_t
name|qid
range|:
literal|8
decl_stmt|;
comment|/**< Queue ID */
else|#
directive|else
name|uint64_t
name|qid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|ipid
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_15_52
range|:
literal|38
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_61_63
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_iqueue_qos_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_iqueue_qos_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_iqueue_qos
name|cvmx_pko_mem_iqueue_qos_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_port_ptrs  *  * Notes:  * Sets the port to engine mapping, per port.  Ports marked as static priority need not be contiguous,  * but they must be the lowest numbered PIDs mapped to this EID and must have QOS_MASK=0xff.  If EID==8  * or EID==9, then PID[1:0] is used to direct the packet to the correct port on that interface.  * EID==15 can be used for unused PKO-internal ports.  * BP_PORT==63 means that the PKO-internal port is not backpressured.  * BP_PORTs are assumed to belong to an interface as follows:  *   46<= BP_PORT< 48 -> srio       interface 3  *   44<= BP_PORT< 46 -> srio       interface 2  *   42<= BP_PORT< 44 -> srio       interface 1  *   40<= BP_PORT< 42 -> srio       interface 0  *   36<= BP_PORT< 40 -> loopback   interface  *   32<= BP_PORT< 36 -> PCIe       interface  *   0<= BP_PORT< 16 -> SGMII/Xaui interface 0  *  * Note that the SRIO interfaces do not actually provide backpressure.  Thus, ports that use  * 40<= BP_PORT< 48 for backpressure will never be backpressured.  *  * The reset configuration is the following:  *   PID EID(ext port) BP_PORT QOS_MASK STATIC_P  *   -------------------------------------------  *     0   0( 0)             0     0xff        0  *     1   1( 1)             1     0xff        0  *     2   2( 2)             2     0xff        0  *     3   3( 3)             3     0xff        0  *     4   0( 0)             4     0xff        0  *     5   1( 1)             5     0xff        0  *     6   2( 2)             6     0xff        0  *     7   3( 3)             7     0xff        0  *     8   0( 0)             8     0xff        0  *     9   1( 1)             9     0xff        0  *    10   2( 2)            10     0xff        0  *    11   3( 3)            11     0xff        0  *    12   0( 0)            12     0xff        0  *    13   1( 1)            13     0xff        0  *    14   2( 2)            14     0xff        0  *    15   3( 3)            15     0xff        0  *   -------------------------------------------  *    16   4(16)            16     0xff        0  *    17   5(17)            17     0xff        0  *    18   6(18)            18     0xff        0  *    19   7(19)            19     0xff        0  *    20   4(16)            20     0xff        0  *    21   5(17)            21     0xff        0  *    22   6(18)            22     0xff        0  *    23   7(19)            23     0xff        0  *    24   4(16)            24     0xff        0  *    25   5(17)            25     0xff        0  *    26   6(18)            26     0xff        0  *    27   7(19)            27     0xff        0  *    28   4(16)            28     0xff        0  *    29   5(17)            29     0xff        0  *    30   6(18)            30     0xff        0  *    31   7(19)            31     0xff        0  *   -------------------------------------------  *    32   8(32)            32     0xff        0  *    33   8(33)            33     0xff        0  *    34   8(34)            34     0xff        0  *    35   8(35)            35     0xff        0  *   -------------------------------------------  *    36   9(36)            36     0xff        0  *    37   9(37)            37     0xff        0  *    38   9(38)            38     0xff        0  *    39   9(39)            39     0xff        0  *  * This CSR is a memory of 48 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_port_ptrs
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_port_ptrs_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_62_63
range|:
literal|2
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Set if this PID has static priority */
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
comment|/**< Mask to control priority across 8 QOS rounds */
name|uint64_t
name|reserved_16_52
range|:
literal|37
decl_stmt|;
name|uint64_t
name|bp_port
range|:
literal|6
decl_stmt|;
comment|/**< PID listens to BP_PORT for per-packet backpressure                                                          Legal BP_PORTs: 0-15, 32-47, 63 (63 means no BP) */
name|uint64_t
name|eid
range|:
literal|4
decl_stmt|;
comment|/**< Engine ID to which this port is mapped                                                          Legal EIDs: 0-3, 8-13, 15 (15 only if port not used) */
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
comment|/**< Port ID[5:0] */
else|#
directive|else
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
name|uint64_t
name|eid
range|:
literal|4
decl_stmt|;
name|uint64_t
name|bp_port
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_16_52
range|:
literal|37
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_63
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_port_ptrs_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_ptrs_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_ptrs_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_ptrs_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_ptrs_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_ptrs_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_ptrs_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_ptrs_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_ptrs_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_port_ptrs
name|cvmx_pko_mem_port_ptrs_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_port_qos  *  * Notes:  * Sets the QOS mask, per port.  These QOS_MASK bits are logically and physically the same QOS_MASK  * bits in PKO_MEM_PORT_PTRS.  This CSR address allows the QOS_MASK bits to be written during PKO  * operation without affecting any other port state.  The engine to which port PID is mapped is engine  * EID.  Note that the port to engine mapping must be the same as was previously programmed via the  * PKO_MEM_PORT_PTRS CSR.  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_port_qos
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_port_qos_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_61_63
range|:
literal|3
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
comment|/**< Mask to control priority across 8 QOS rounds */
name|uint64_t
name|reserved_10_52
range|:
literal|43
decl_stmt|;
name|uint64_t
name|eid
range|:
literal|4
decl_stmt|;
comment|/**< Engine ID to which this port is mapped                                                          Legal EIDs: 0-3, 8-11 */
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
comment|/**< Port ID[5:0] */
else|#
directive|else
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
name|uint64_t
name|eid
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_10_52
range|:
literal|43
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_61_63
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_port_qos_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_qos_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_qos_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_qos_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_qos_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_qos_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_qos_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_qos_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_qos_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_port_qos
name|cvmx_pko_mem_port_qos_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_port_rate0  *  * Notes:  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_port_rate0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_port_rate0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_51_63
range|:
literal|13
decl_stmt|;
name|uint64_t
name|rate_word
range|:
literal|19
decl_stmt|;
comment|/**< Rate limiting adder per 8 byte */
name|uint64_t
name|rate_pkt
range|:
literal|24
decl_stmt|;
comment|/**< Rate limiting adder per packet */
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pid
range|:
literal|7
decl_stmt|;
comment|/**< Port ID[5:0] */
else|#
directive|else
name|uint64_t
name|pid
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rate_pkt
range|:
literal|24
decl_stmt|;
name|uint64_t
name|rate_word
range|:
literal|19
decl_stmt|;
name|uint64_t
name|reserved_51_63
range|:
literal|13
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_port_rate0_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_51_63
range|:
literal|13
decl_stmt|;
name|uint64_t
name|rate_word
range|:
literal|19
decl_stmt|;
comment|/**< Rate limiting adder per 8 byte */
name|uint64_t
name|rate_pkt
range|:
literal|24
decl_stmt|;
comment|/**< Rate limiting adder per packet */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
comment|/**< Port ID[5:0] */
else|#
directive|else
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|rate_pkt
range|:
literal|24
decl_stmt|;
name|uint64_t
name|rate_word
range|:
literal|19
decl_stmt|;
name|uint64_t
name|reserved_51_63
range|:
literal|13
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_mem_port_rate0_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate0_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate0_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate0_cn52xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate0_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate0_cn52xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate0_cn52xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate0_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate0_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate0_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_port_rate0
name|cvmx_pko_mem_port_rate0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_port_rate1  *  * Notes:  * Writing PKO_MEM_PORT_RATE1[PID,RATE_LIM] has the side effect of setting the corresponding  * accumulator to zero.  * This CSR is a memory of 44 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_port_rate1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_port_rate1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|rate_lim
range|:
literal|24
decl_stmt|;
comment|/**< Rate limiting accumulator limit */
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pid
range|:
literal|7
decl_stmt|;
comment|/**< Port ID[5:0] */
else|#
directive|else
name|uint64_t
name|pid
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rate_lim
range|:
literal|24
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_mem_port_rate1_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|rate_lim
range|:
literal|24
decl_stmt|;
comment|/**< Rate limiting accumulator limit */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
comment|/**< Port ID[5:0] */
else|#
directive|else
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|rate_lim
range|:
literal|24
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_mem_port_rate1_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate1_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate1_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate1_cn52xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate1_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate1_cn52xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate1_cn52xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate1_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_port_rate1_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_port_rate1
name|cvmx_pko_mem_port_rate1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_queue_ptrs  *  * Notes:  * Sets the queue to port mapping and the initial command buffer pointer, per queue  * Each queue may map to at most one port.  No more than 16 queues may map to a port.  The set of  * queues that is mapped to a port must be a contiguous array of queues.  The port to which queue QID  * is mapped is port PID.  The index of queue QID in port PID's queue list is IDX.  The last queue in  * port PID's queue array must have its TAIL bit set.  Unused queues must be mapped to port 63.  * STATIC_Q marks queue QID as having static priority.  STATIC_P marks the port PID to which QID is  * mapped as having at least one queue with static priority.  If any QID that maps to PID has static  * priority, then all QID that map to PID must have STATIC_P set.  Queues marked as static priority  * must be contiguous and begin at IDX 0.  The last queue that is marked as having static priority  * must have its S_TAIL bit set.  * This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_queue_ptrs
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_queue_ptrs_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
comment|/**< Set if this QID is the tail of the static queues */
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
comment|/**< Set if any QID in this PID has static priority */
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
comment|/**< Set if this QID has static priority */
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
comment|/**< Mask to control priority across 8 QOS rounds */
name|uint64_t
name|buf_ptr
range|:
literal|36
decl_stmt|;
comment|/**< Command buffer pointer,<23:17> MBZ */
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
comment|/**< Set if this QID is the tail of the queue array */
name|uint64_t
name|index
range|:
literal|3
decl_stmt|;
comment|/**< Index[2:0] (distance from head) in the queue array */
name|uint64_t
name|port
range|:
literal|6
decl_stmt|;
comment|/**< Port ID to which this queue is mapped */
name|uint64_t
name|queue
range|:
literal|7
decl_stmt|;
comment|/**< Queue ID[6:0] */
else|#
directive|else
name|uint64_t
name|queue
range|:
literal|7
decl_stmt|;
name|uint64_t
name|port
range|:
literal|6
decl_stmt|;
name|uint64_t
name|index
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tail
range|:
literal|1
decl_stmt|;
name|uint64_t
name|buf_ptr
range|:
literal|36
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|static_q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|static_p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|s_tail
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_ptrs_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_queue_ptrs
name|cvmx_pko_mem_queue_ptrs_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_queue_qos  *  * Notes:  * Sets the QOS mask, per queue.  These QOS_MASK bits are logically and physically the same QOS_MASK  * bits in PKO_MEM_QUEUE_PTRS.  This CSR address allows the QOS_MASK bits to be written during PKO  * operation without affecting any other queue state.  The port to which queue QID is mapped is port  * PID.  Note that the queue to port mapping must be the same as was previously programmed via the  * PKO_MEM_QUEUE_PTRS CSR.  * This CSR is a memory of 256 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_queue_qos
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_queue_qos_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_61_63
range|:
literal|3
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
comment|/**< Mask to control priority across 8 QOS rounds */
name|uint64_t
name|reserved_13_52
range|:
literal|40
decl_stmt|;
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
comment|/**< Port ID to which this queue is mapped */
name|uint64_t
name|qid
range|:
literal|7
decl_stmt|;
comment|/**< Queue ID */
else|#
directive|else
name|uint64_t
name|qid
range|:
literal|7
decl_stmt|;
name|uint64_t
name|pid
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_13_52
range|:
literal|40
decl_stmt|;
name|uint64_t
name|qos_mask
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_61_63
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_queue_qos_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_queue_qos
name|cvmx_pko_mem_queue_qos_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_throttle_int  *  * Notes:  * Writing PACKET and WORD with 0 resets both counts for INT to 0 rather than add 0.  * Otherwise, writes to this CSR add to the existing WORD/PACKET counts for the interface INT.  *  * PKO tracks the number of (8-byte) WORD's and PACKET's in-flight (sum total in both PKO  * and the interface MAC) on the interface. (When PKO first selects a packet from a PKO queue, it  * increments the counts appropriately. When the interface MAC has (largely) completed sending  * the words/packet, PKO decrements the count appropriately.) When PKO_REG_FLAGS[ENA_THROTTLE]  * is set and the most-significant bit of the WORD or packet count for a interface is set,  * PKO will not transfer any packets over the interface. Software can limit the amount of  * packet data and/or the number of packets that OCTEON can send out the chip after receiving backpressure  * from the interface/pipe via these per-pipe throttle counts when PKO_REG_FLAGS[ENA_THROTTLE]=1.  * For example, to limit the number of packets outstanding in the interface to N, preset PACKET for  * the pipe to the value 0x20-N (0x20 is the smallest PACKET value with the most-significant bit set).  *  * This CSR is a memory of 32 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  The index to this CSR is an INTERFACE.  A read of any  * entry that has not been previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_throttle_int
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_throttle_int_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_47_63
range|:
literal|17
decl_stmt|;
name|uint64_t
name|word
range|:
literal|15
decl_stmt|;
comment|/**< On a write, the amount to add to the interface                                                          throttle word count selected by INT. On a read,                                                          returns the current value of the interface throttle                                                          word count selected by PKO_REG_READ_IDX[IDX]. */
name|uint64_t
name|reserved_14_31
range|:
literal|18
decl_stmt|;
name|uint64_t
name|packet
range|:
literal|6
decl_stmt|;
comment|/**< On a write, the amount to add to the interface                                                          throttle packet count selected by INT. On a read,                                                          returns the current value of the interface throttle                                                          packet count selected by PKO_REG_READ_IDX[IDX]. */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|5
decl_stmt|;
comment|/**< Selected interface for writes. Undefined on a read.                                                          See PKO_MEM_IPORT_PTRS[INT] for encoding. */
else|#
directive|else
name|uint64_t
name|intr
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|packet
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_14_31
range|:
literal|18
decl_stmt|;
name|uint64_t
name|word
range|:
literal|15
decl_stmt|;
name|uint64_t
name|reserved_47_63
range|:
literal|17
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_throttle_int_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_throttle_int_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_throttle_int
name|cvmx_pko_mem_throttle_int_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_mem_throttle_pipe  *  * Notes:  * Writing PACKET and WORD with 0 resets both counts for PIPE to 0 rather than add 0.  * Otherwise, writes to this CSR add to the existing WORD/PACKET counts for the PKO pipe PIPE.  *  * PKO tracks the number of (8-byte) WORD's and PACKET's in-flight (sum total in both PKO  * and the interface MAC) on the pipe. (When PKO first selects a packet from a PKO queue, it  * increments the counts appropriately. When the interface MAC has (largely) completed sending  * the words/packet, PKO decrements the count appropriately.) When PKO_REG_FLAGS[ENA_THROTTLE]  * is set and the most-significant bit of the WORD or packet count for a PKO pipe is set,  * PKO will not transfer any packets over the PKO pipe. Software can limit the amount of  * packet data and/or the number of packets that OCTEON can send out the chip after receiving backpressure  * from the interface/pipe via these per-pipe throttle counts when PKO_REG_FLAGS[ENA_THROTTLE]=1.  * For example, to limit the number of packets outstanding in the pipe to N, preset PACKET for  * the pipe to the value 0x20-N (0x20 is the smallest PACKET value with the most-significant bit set).  *  * This CSR is a memory of 128 entries, and thus, the PKO_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  The index to this CSR is a PIPE.  A read of any  * entry that has not been previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_pko_mem_throttle_pipe
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_mem_throttle_pipe_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_47_63
range|:
literal|17
decl_stmt|;
name|uint64_t
name|word
range|:
literal|15
decl_stmt|;
comment|/**< On a write, the amount to add to the pipe throttle                                                          word count selected by PIPE. On a read, returns                                                          the current value of the pipe throttle word count                                                          selected by PKO_REG_READ_IDX[IDX]. */
name|uint64_t
name|reserved_14_31
range|:
literal|18
decl_stmt|;
name|uint64_t
name|packet
range|:
literal|6
decl_stmt|;
comment|/**< On a write, the amount to add to the pipe throttle                                                          packet count selected by PIPE. On a read, returns                                                          the current value of the pipe throttle packet count                                                          selected by PKO_REG_READ_IDX[IDX]. */
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pipe
range|:
literal|7
decl_stmt|;
comment|/**< Selected PKO pipe for writes. Undefined on a read. */
else|#
directive|else
name|uint64_t
name|pipe
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|packet
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_14_31
range|:
literal|18
decl_stmt|;
name|uint64_t
name|word
range|:
literal|15
decl_stmt|;
name|uint64_t
name|reserved_47_63
range|:
literal|17
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_mem_throttle_pipe_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_mem_throttle_pipe_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_mem_throttle_pipe
name|cvmx_pko_mem_throttle_pipe_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_bist_result  *  * Notes:  * Access to the internal BiST results  * Each bit is the BiST result of an individual memory (per bit, 0=pass and 1=fail).  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_bist_result
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_bist_result_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_63
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_reg_bist_result_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_27_63
range|:
literal|37
decl_stmt|;
name|uint64_t
name|psb2
range|:
literal|5
decl_stmt|;
comment|/**< BiST result of the PSB   memories (0=pass, !0=fail) */
name|uint64_t
name|count
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of the COUNT memories (0=pass, !0=fail) */
name|uint64_t
name|rif
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of the RIF   memories (0=pass, !0=fail) */
name|uint64_t
name|wif
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of the WIF   memories (0=pass, !0=fail) */
name|uint64_t
name|ncb
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of the NCB   memories (0=pass, !0=fail) */
name|uint64_t
name|out
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of the OUT   memories (0=pass, !0=fail) */
name|uint64_t
name|crc
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of the CRC   memories (0=pass, !0=fail) */
name|uint64_t
name|chk
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of the CHK   memories (0=pass, !0=fail) */
name|uint64_t
name|qsb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of the QSB   memories (0=pass, !0=fail) */
name|uint64_t
name|qcb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of the QCB   memories (0=pass, !0=fail) */
name|uint64_t
name|pdb
range|:
literal|4
decl_stmt|;
comment|/**< BiST result of the PDB   memories (0=pass, !0=fail) */
name|uint64_t
name|psb
range|:
literal|7
decl_stmt|;
comment|/**< BiST result of the PSB   memories (0=pass, !0=fail) */
else|#
directive|else
name|uint64_t
name|psb
range|:
literal|7
decl_stmt|;
name|uint64_t
name|pdb
range|:
literal|4
decl_stmt|;
name|uint64_t
name|qcb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|qsb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|chk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|crc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ncb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|count
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psb2
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_27_63
range|:
literal|37
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_reg_bist_result_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_reg_bist_result_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_33_63
range|:
literal|31
decl_stmt|;
name|uint64_t
name|csr
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of CSR      memories (0=pass, !0=fail) */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of IOB      memories (0=pass, !0=fail) */
name|uint64_t
name|out_crc
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_CRC  memories (0=pass, !0=fail) */
name|uint64_t
name|out_ctl
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of OUT_CTL  memories (0=pass, !0=fail) */
name|uint64_t
name|out_sta
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_STA  memories (0=pass, !0=fail) */
name|uint64_t
name|out_wif
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_WIF  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_chk
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of PRT_CHK  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_nxt
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of PRT_NXT  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_psb
range|:
literal|6
decl_stmt|;
comment|/**< BiST result of PRT_PSB  memories (0=pass, !0=fail) */
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of NCB_INB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_qcb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of PRT_QCB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_qsb
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of PRT_QSB  memories (0=pass, !0=fail) */
name|uint64_t
name|dat_dat
range|:
literal|4
decl_stmt|;
comment|/**< BiST result of DAT_DAT  memories (0=pass, !0=fail) */
name|uint64_t
name|dat_ptr
range|:
literal|4
decl_stmt|;
comment|/**< BiST result of DAT_PTR  memories (0=pass, !0=fail) */
else|#
directive|else
name|uint64_t
name|dat_ptr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|dat_dat
range|:
literal|4
decl_stmt|;
name|uint64_t
name|prt_qsb
range|:
literal|3
decl_stmt|;
name|uint64_t
name|prt_qcb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_psb
range|:
literal|6
decl_stmt|;
name|uint64_t
name|prt_nxt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_chk
range|:
literal|3
decl_stmt|;
name|uint64_t
name|out_wif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_sta
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_ctl
range|:
literal|3
decl_stmt|;
name|uint64_t
name|out_crc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|csr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_63
range|:
literal|31
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
struct|struct
name|cvmx_pko_reg_bist_result_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_35_63
range|:
literal|29
decl_stmt|;
name|uint64_t
name|csr
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of CSR      memories (0=pass, !0=fail) */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of IOB      memories (0=pass, !0=fail) */
name|uint64_t
name|out_dat
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_DAT  memories (0=pass, !0=fail) */
name|uint64_t
name|out_ctl
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of OUT_CTL  memories (0=pass, !0=fail) */
name|uint64_t
name|out_sta
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_STA  memories (0=pass, !0=fail) */
name|uint64_t
name|out_wif
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_WIF  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_chk
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of PRT_CHK  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_nxt
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of PRT_NXT  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_psb
range|:
literal|8
decl_stmt|;
comment|/**< BiST result of PRT_PSB  memories (0=pass, !0=fail) */
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of NCB_INB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_qcb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of PRT_QCB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_qsb
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of PRT_QSB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_ctl
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of PRT_CTL  memories (0=pass, !0=fail) */
name|uint64_t
name|dat_dat
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of DAT_DAT  memories (0=pass, !0=fail) */
name|uint64_t
name|dat_ptr
range|:
literal|4
decl_stmt|;
comment|/**< BiST result of DAT_PTR  memories (0=pass, !0=fail) */
else|#
directive|else
name|uint64_t
name|dat_ptr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|dat_dat
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_ctl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_qsb
range|:
literal|3
decl_stmt|;
name|uint64_t
name|prt_qcb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_psb
range|:
literal|8
decl_stmt|;
name|uint64_t
name|prt_nxt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_chk
range|:
literal|3
decl_stmt|;
name|uint64_t
name|out_wif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_sta
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_ctl
range|:
literal|3
decl_stmt|;
name|uint64_t
name|out_dat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|csr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_35_63
range|:
literal|29
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_reg_bist_result_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn52xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn52xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_bist_result_cn52xx
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_pko_reg_bist_result_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
name|uint64_t
name|crc
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of CRC      memories (0=pass, !0=fail) */
name|uint64_t
name|csr
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of CSR      memories (0=pass, !0=fail) */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of IOB      memories (0=pass, !0=fail) */
name|uint64_t
name|out_dat
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_DAT  memories (0=pass, !0=fail) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_ctl
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of OUT_CTL  memories (0=pass, !0=fail) */
name|uint64_t
name|out_sta
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_STA  memories (0=pass, !0=fail) */
name|uint64_t
name|out_wif
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_WIF  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_chk
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of PRT_CHK  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_nxt
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of PRT_NXT  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_psb7
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of PRT_PSB  memories (0=pass, !0=fail) */
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_psb
range|:
literal|6
decl_stmt|;
comment|/**< BiST result of PRT_PSB  memories (0=pass, !0=fail) */
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of NCB_INB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_qcb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of PRT_QCB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_qsb
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of PRT_QSB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_ctl
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of PRT_CTL  memories (0=pass, !0=fail) */
name|uint64_t
name|dat_dat
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of DAT_DAT  memories (0=pass, !0=fail) */
name|uint64_t
name|dat_ptr
range|:
literal|4
decl_stmt|;
comment|/**< BiST result of DAT_PTR  memories (0=pass, !0=fail) */
else|#
directive|else
name|uint64_t
name|dat_ptr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|dat_dat
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_ctl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_qsb
range|:
literal|3
decl_stmt|;
name|uint64_t
name|prt_qcb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_psb
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_psb7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_nxt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_chk
range|:
literal|3
decl_stmt|;
name|uint64_t
name|out_wif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_sta
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_ctl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_dat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|csr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|crc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
struct|struct
name|cvmx_pko_reg_bist_result_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_35_63
range|:
literal|29
decl_stmt|;
name|uint64_t
name|csr
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of CSR      memories (0=pass, !0=fail) */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of IOB      memories (0=pass, !0=fail) */
name|uint64_t
name|out_dat
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_DAT  memories (0=pass, !0=fail) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_ctl
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of OUT_CTL  memories (0=pass, !0=fail) */
name|uint64_t
name|out_sta
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_STA  memories (0=pass, !0=fail) */
name|uint64_t
name|out_wif
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of OUT_WIF  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_chk
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of PRT_CHK  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_nxt
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of PRT_NXT  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_psb7
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of PRT_PSB  memories (0=pass, !0=fail) */
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_psb
range|:
literal|6
decl_stmt|;
comment|/**< BiST result of PRT_PSB  memories (0=pass, !0=fail) */
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of NCB_INB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_qcb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of PRT_QCB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_qsb
range|:
literal|3
decl_stmt|;
comment|/**< BiST result of PRT_QSB  memories (0=pass, !0=fail) */
name|uint64_t
name|prt_ctl
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of PRT_CTL  memories (0=pass, !0=fail) */
name|uint64_t
name|dat_dat
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of DAT_DAT  memories (0=pass, !0=fail) */
name|uint64_t
name|dat_ptr
range|:
literal|4
decl_stmt|;
comment|/**< BiST result of DAT_PTR  memories (0=pass, !0=fail) */
else|#
directive|else
name|uint64_t
name|dat_ptr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|dat_dat
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_ctl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_qsb
range|:
literal|3
decl_stmt|;
name|uint64_t
name|prt_qcb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|prt_psb
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_psb7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_nxt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|prt_chk
range|:
literal|3
decl_stmt|;
name|uint64_t
name|out_wif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_sta
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_ctl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|out_dat
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|csr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_35_63
range|:
literal|29
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
name|struct
name|cvmx_pko_reg_bist_result_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_bist_result
name|cvmx_pko_reg_bist_result_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_cmd_buf  *  * Notes:  * Sets the command buffer parameters  * The size of the command buffer segments is measured in uint64s.  The pool specifies (1 of 8 free  * lists to be used when freeing command buffer segments.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_cmd_buf
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_cmd_buf_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_23_63
range|:
literal|41
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
comment|/**< Free list used to free command buffer segments */
name|uint64_t
name|reserved_13_19
range|:
literal|7
decl_stmt|;
name|uint64_t
name|size
range|:
literal|13
decl_stmt|;
comment|/**< Number of uint64s per command buffer segment */
else|#
directive|else
name|uint64_t
name|size
range|:
literal|13
decl_stmt|;
name|uint64_t
name|reserved_13_19
range|:
literal|7
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_23_63
range|:
literal|41
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_cmd_buf_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_cmd_buf
name|cvmx_pko_reg_cmd_buf_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_crc_ctl#  *  * Notes:  * Controls datapath reflection when calculating CRC  *  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_crc_ctlx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_crc_ctlx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|invres
range|:
literal|1
decl_stmt|;
comment|/**< Invert the result */
name|uint64_t
name|refin
range|:
literal|1
decl_stmt|;
comment|/**< Reflect the bits in each byte.                                                           Byte order does not change.                                                          - 0: CRC is calculated MSB to LSB                                                          - 1: CRC is calculated MLB to MSB */
else|#
directive|else
name|uint64_t
name|refin
range|:
literal|1
decl_stmt|;
name|uint64_t
name|invres
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_crc_ctlx_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_crc_ctlx_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_reg_crc_ctlx_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_crc_ctlx_s
name|cn58xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_crc_ctlx
name|cvmx_pko_reg_crc_ctlx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_crc_enable  *  * Notes:  * Enables CRC for the GMX ports.  *  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_crc_enable
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_crc_enable_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|enable
range|:
literal|32
decl_stmt|;
comment|/**< Mask for ports 31-0 to enable CRC                                                          Mask bit==0 means CRC not enabled                                                          Mask bit==1 means CRC     enabled                                                          Note that CRC should be enabled only when using SPI4.2 */
else|#
directive|else
name|uint64_t
name|enable
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_crc_enable_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_crc_enable_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_reg_crc_enable_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_crc_enable_s
name|cn58xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_crc_enable
name|cvmx_pko_reg_crc_enable_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_crc_iv#  *  * Notes:  * Determines the IV used by the CRC algorithm  * * PKO_CRC_IV  *  PKO_CRC_IV controls the initial state of the CRC algorithm.  Octane can  *  support a wide range of CRC algorithms and as such, the IV must be  *  carefully constructed to meet the specific algorithm.  The code below  *  determines the value to program into Octane based on the algorthim's IV  *  and width.  In the case of Octane, the width should always be 32.  *  *  PKO_CRC_IV0 sets the IV for ports 0-15 while PKO_CRC_IV1 sets the IV for  *  ports 16-31.  *  *   @verbatim  *   unsigned octane_crc_iv(unsigned algorithm_iv, unsigned poly, unsigned w)  *   [  *     int i;  *     int doit;  *     unsigned int current_val = algorithm_iv;  *  *     for(i = 0; i< w; i++) [  *       doit = current_val& 0x1;  *  *       if(doit) current_val ^= poly;  *       assert(!(current_val& 0x1));  *  *       current_val = (current_val>> 1) | (doit<< (w-1));  *     ]  *  *     return current_val;  *   ]  *   @endverbatim  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_crc_ivx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_crc_ivx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|iv
range|:
literal|32
decl_stmt|;
comment|/**< IV used by the CRC algorithm.  Default is FCS32. */
else|#
directive|else
name|uint64_t
name|iv
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_crc_ivx_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_crc_ivx_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_reg_crc_ivx_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_crc_ivx_s
name|cn58xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_crc_ivx
name|cvmx_pko_reg_crc_ivx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_debug0  *  * Notes:  * Note that this CSR is present only in chip revisions beginning with pass2.  *  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_debug0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_debug0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
comment|/**< Various assertion checks */
else|#
directive|else
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_reg_debug0_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
name|uint64_t
name|asserts
range|:
literal|17
decl_stmt|;
comment|/**< Various assertion checks */
else|#
directive|else
name|uint64_t
name|asserts
range|:
literal|17
decl_stmt|;
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_reg_debug0_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_cn30xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_debug0
name|cvmx_pko_reg_debug0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_debug1  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_debug1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_debug1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
comment|/**< Various assertion checks */
else|#
directive|else
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_debug1
name|cvmx_pko_reg_debug1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_debug2  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_debug2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_debug2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
comment|/**< Various assertion checks */
else|#
directive|else
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_debug2
name|cvmx_pko_reg_debug2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_debug3  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_debug3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_debug3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
comment|/**< Various assertion checks */
else|#
directive|else
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug3_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_debug3
name|cvmx_pko_reg_debug3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_debug4  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_debug4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_debug4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
comment|/**< Various assertion checks */
else|#
directive|else
name|uint64_t
name|asserts
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_debug4_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_debug4_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_debug4
name|cvmx_pko_reg_debug4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_engine_inflight  *  * Notes:  * Sets the maximum number of inflight packets, per engine.  Values greater than 4 are illegal.  * Setting an engine's value to 0 effectively stops the engine.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_engine_inflight
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_engine_inflight_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|engine15
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine15 */
name|uint64_t
name|engine14
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine14 */
name|uint64_t
name|engine13
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine13 */
name|uint64_t
name|engine12
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine12 */
name|uint64_t
name|engine11
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine11 */
name|uint64_t
name|engine10
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine10 */
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine9 */
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine8 */
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine7 */
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine6 */
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine5 */
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine4 */
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine3 */
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine2 */
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine1 */
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine0 */
else|#
directive|else
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine10
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine11
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine12
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine13
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine14
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine15
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_reg_engine_inflight_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_40_63
range|:
literal|24
decl_stmt|;
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine9 */
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine8 */
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
comment|/**< MBZ */
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
comment|/**< MBZ */
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
comment|/**< MBZ */
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
comment|/**< MBZ */
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine3 */
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine2 */
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine1 */
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine0 */
else|#
directive|else
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_40_63
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_reg_engine_inflight_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_inflight_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_inflight_cn52xx
name|cn56xxp1
decl_stmt|;
struct|struct
name|cvmx_pko_reg_engine_inflight_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|engine13
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine13 */
name|uint64_t
name|engine12
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine12 */
name|uint64_t
name|engine11
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine11 */
name|uint64_t
name|engine10
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine10 */
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine9 */
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine8 */
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine7 */
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine6 */
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine5 */
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine4 */
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine3 */
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine2 */
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine1 */
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine0 */
else|#
directive|else
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine10
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine11
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine12
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine13
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_pko_reg_engine_inflight_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_48_63
range|:
literal|16
decl_stmt|;
name|uint64_t
name|engine11
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine11 */
name|uint64_t
name|engine10
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine10 */
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine9 */
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine8 */
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
comment|/**< MBZ */
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
comment|/**< MBZ */
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
comment|/**< MBZ */
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
comment|/**< MBZ */
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine3 */
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine2 */
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine1 */
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine0 */
else|#
directive|else
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine10
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine11
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_48_63
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_pko_reg_engine_inflight_cn63xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_inflight_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_inflight_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_inflight_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_inflight_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_engine_inflight
name|cvmx_pko_reg_engine_inflight_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_engine_inflight1  *  * Notes:  * Sets the maximum number of inflight packets, per engine.  Values greater than 8 are illegal.  * Setting an engine's value to 0 effectively stops the engine.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_engine_inflight1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_engine_inflight1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|engine19
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine19 */
name|uint64_t
name|engine18
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine18 */
name|uint64_t
name|engine17
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine17 */
name|uint64_t
name|engine16
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight packets for engine16 */
else|#
directive|else
name|uint64_t
name|engine16
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine17
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine18
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine19
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_engine_inflight1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_inflight1_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_engine_inflight1
name|cvmx_pko_reg_engine_inflight1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_engine_storage#  *  * Notes:  * The PKO has 40KB of local storage, consisting of 20, 2KB chunks.  Up to 15 contiguous chunks may be mapped per engine.  * The total of all mapped storage must not exceed 40KB.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_engine_storagex
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_engine_storagex_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|engine15
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 15.                                                          ENGINE15 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine14
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 14.                                                          ENGINE14 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine13
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 13.                                                          ENGINE13 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine12
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 12.                                                          ENGINE12 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine11
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 11.                                                          ENGINE11 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine10
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 10.                                                          ENGINE10 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 9.                                                          ENGINE9 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 8.                                                          ENGINE8 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 7.                                                          ENGINE7 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 6.                                                          ENGINE6 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 5.                                                          ENGINE5 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 4.                                                          ENGINE4 does not exist and is reserved in                                                          PKO_REG_ENGINE_STORAGE1. */
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 3. */
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 2. */
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 1. */
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
comment|/**< Number of contiguous 2KB chunks allocated to                                                          engine (X * 16) + 0. */
else|#
directive|else
name|uint64_t
name|engine0
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine1
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine2
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine4
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine5
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine6
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine8
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine9
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine10
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine11
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine12
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine13
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine14
range|:
literal|4
decl_stmt|;
name|uint64_t
name|engine15
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_engine_storagex_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_storagex_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_engine_storagex
name|cvmx_pko_reg_engine_storagex_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_engine_thresh  *  * Notes:  * When not enabled, packet data may be sent as soon as it is written into PKO's internal buffers.  * When enabled and the packet fits entirely in the PKO's internal buffer, none of the packet data will  * be sent until all of it has been written into the PKO's internal buffer.  Note that a packet is  * considered to fit entirely only if the packet's size is<= BUFFER_SIZE-8.  When enabled and the  * packet does not fit entirely in the PKO's internal buffer, none of the packet data will be sent until  * at least BUFFER_SIZE-256 bytes of the packet have been written into the PKO's internal buffer  * (note that BUFFER_SIZE is a function of PKO_REG_GMX_PORT_MODE above)  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_engine_thresh
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_engine_thresh_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|20
decl_stmt|;
comment|/**< Mask[n]=0 disables packet send threshold for engine n                                                          Mask[n]=1 enables  packet send threshold for engine n  $PR       NS */
else|#
directive|else
name|uint64_t
name|mask
range|:
literal|20
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_reg_engine_thresh_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|10
decl_stmt|;
comment|/**< Mask[n]=0 disables packet send threshold for eng n                                                          Mask[n]=1 enables  packet send threshold for eng n     $PR       NS                                                          Mask[n] MBZ for n = 4-7, as engines 4-7 dont exist */
else|#
directive|else
name|uint64_t
name|mask
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_pko_reg_engine_thresh_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_thresh_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_thresh_cn52xx
name|cn56xxp1
decl_stmt|;
struct|struct
name|cvmx_pko_reg_engine_thresh_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_14_63
range|:
literal|50
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|14
decl_stmt|;
comment|/**< Mask[n]=0 disables packet send threshold for engine n                                                          Mask[n]=1 enables  packet send threshold for engine n  $PR       NS */
else|#
directive|else
name|uint64_t
name|mask
range|:
literal|14
decl_stmt|;
name|uint64_t
name|reserved_14_63
range|:
literal|50
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_pko_reg_engine_thresh_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|mask
range|:
literal|12
decl_stmt|;
comment|/**< Mask[n]=0 disables packet send threshold for engine n                                                          Mask[n]=1 enables  packet send threshold for engine n  $PR       NS                                                          Mask[n] MBZ for n = 4-7, as engines 4-7 dont exist */
else|#
directive|else
name|uint64_t
name|mask
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_pko_reg_engine_thresh_cn63xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_thresh_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_thresh_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_thresh_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_engine_thresh_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_engine_thresh
name|cvmx_pko_reg_engine_thresh_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_error  *  * Notes:  * Note that this CSR is present only in chip revisions beginning with pass2.  *  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_error
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_error_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|loopback
range|:
literal|1
decl_stmt|;
comment|/**< A packet was sent to an illegal loopback port */
name|uint64_t
name|currzero
range|:
literal|1
decl_stmt|;
comment|/**< A packet data pointer has size=0 */
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< A doorbell count has overflowed */
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
comment|/**< Read parity error at port data buffer */
else|#
directive|else
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|currzero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|loopback
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_reg_error_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< A doorbell count has overflowed */
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
comment|/**< Read parity error at port data buffer */
else|#
directive|else
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_reg_error_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_reg_error_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
name|uint64_t
name|currzero
range|:
literal|1
decl_stmt|;
comment|/**< A packet data pointer has size=0 */
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< A doorbell count has overflowed */
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
comment|/**< Read parity error at port data buffer */
else|#
directive|else
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|currzero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_error_cn50xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_error
name|cvmx_pko_reg_error_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_flags  *  * Notes:  * When set, ENA_PKO enables the PKO picker and places the PKO in normal operation.  When set, ENA_DWB  * enables the use of DontWriteBacks during the buffer freeing operations.  When not set, STORE_BE inverts  * bits[2:0] of the STORE0 byte write address.  When set, RESET causes a 4-cycle reset pulse to the  * entire box.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_flags
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_flags_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
name|uint64_t
name|dis_perf3
range|:
literal|1
decl_stmt|;
comment|/**< Set to disable inactive queue QOS skipping */
name|uint64_t
name|dis_perf2
range|:
literal|1
decl_stmt|;
comment|/**< Set to disable inactive queue skipping */
name|uint64_t
name|dis_perf1
range|:
literal|1
decl_stmt|;
comment|/**< Set to disable command word prefetching */
name|uint64_t
name|dis_perf0
range|:
literal|1
decl_stmt|;
comment|/**< Set to disable read performance optimizations */
name|uint64_t
name|ena_throttle
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable the PKO picker throttle logic                                                          When ENA_THROTTLE=1 and the most-significant                                                          bit of any of the pipe or interface, word or                                                          packet throttle count is set, then PKO will                                                          not output any packets to the interface/pipe.                                                          See PKO_MEM_THROTTLE_PIPE and                                                          PKO_MEM_THROTTLE_INT. */
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
comment|/**< Reset oneshot pulse */
name|uint64_t
name|store_be
range|:
literal|1
decl_stmt|;
comment|/**< Force STORE0 byte write address to big endian */
name|uint64_t
name|ena_dwb
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable DontWriteBacks */
name|uint64_t
name|ena_pko
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable the PKO picker */
else|#
directive|else
name|uint64_t
name|ena_pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ena_dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_be
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ena_throttle
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dis_perf0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dis_perf1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dis_perf2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dis_perf3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_reg_flags_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
comment|/**< Reset oneshot pulse */
name|uint64_t
name|store_be
range|:
literal|1
decl_stmt|;
comment|/**< Force STORE0 byte write address to big endian */
name|uint64_t
name|ena_dwb
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable DontWriteBacks */
name|uint64_t
name|ena_pko
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable the PKO picker */
else|#
directive|else
name|uint64_t
name|ena_pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ena_dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_be
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_pko_reg_flags_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
name|uint64_t
name|dis_perf3
range|:
literal|1
decl_stmt|;
comment|/**< Set to disable inactive queue QOS skipping */
name|uint64_t
name|dis_perf2
range|:
literal|1
decl_stmt|;
comment|/**< Set to disable inactive queue skipping */
name|uint64_t
name|reserved_4_6
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
comment|/**< Reset oneshot pulse */
name|uint64_t
name|store_be
range|:
literal|1
decl_stmt|;
comment|/**< Force STORE0 byte write address to big endian */
name|uint64_t
name|ena_dwb
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable DontWriteBacks */
name|uint64_t
name|ena_pko
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable the PKO picker */
else|#
directive|else
name|uint64_t
name|ena_pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ena_dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_be
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_4_6
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dis_perf2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dis_perf3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn30xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_flags_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_pko_reg_flags_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|dis_perf1
range|:
literal|1
decl_stmt|;
comment|/**< Set to disable command word prefetching */
name|uint64_t
name|dis_perf0
range|:
literal|1
decl_stmt|;
comment|/**< Set to disable read performance optimizations */
name|uint64_t
name|ena_throttle
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable the PKO picker throttle logic                                                          When ENA_THROTTLE=1 and the most-significant                                                          bit of any of the pipe or interface, word or                                                          packet throttle count is set, then PKO will                                                          not output any packets to the interface/pipe.                                                          See PKO_MEM_THROTTLE_PIPE and                                                          PKO_MEM_THROTTLE_INT. */
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
comment|/**< Reset oneshot pulse */
name|uint64_t
name|store_be
range|:
literal|1
decl_stmt|;
comment|/**< Force STORE0 byte write address to big endian */
name|uint64_t
name|ena_dwb
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable DontWriteBacks */
name|uint64_t
name|ena_pko
range|:
literal|1
decl_stmt|;
comment|/**< Set to enable the PKO picker */
else|#
directive|else
name|uint64_t
name|ena_pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ena_dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_be
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ena_throttle
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dis_perf0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dis_perf1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
name|struct
name|cvmx_pko_reg_flags_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_flags
name|cvmx_pko_reg_flags_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_gmx_port_mode  *  * Notes:  * The system has a total of 4 + 4 + 4 + 4 + 4 ports and 4 + 4 + 1 + 1 + 1 + 1 engines (GM0 + GM1 + PCI + LOOP + SRIO0 + SRIO1 + SRIO2 + SRIO3).  * This CSR sets the number of GMX0/GMX1 ports and amount of local storage per engine.  * It has no effect on the number of ports or amount of local storage per engine for PCI, LOOP,  * SRIO0, SRIO1, SRIO2, or SRIO3.  When all GMX ports are used (MODE0=2), each GMX engine has 2.5kB of local  * storage.  Increasing the value of MODEn by 1 decreases the number of GMX ports by a power of 2 and  * increases the local storage per PKO GMX engine by a power of 2.  If one of the modes is 5, then only  * one of interfaces GM0 or GM1 is present and the storage per engine of the existing interface is  * doubled.  Modes 0 and 1 are illegal and, if selected, are treated as mode 2.  *  * MODE[n] GM[n] PCI   LOOP  GM[n]                      PCI            LOOP           SRIO[n]  *         ports ports ports storage/engine             storage/engine storage/engine storage/engine  * 0       4     4     4     ( 2.5kB<< (MODE[1-n]==5)) 2.5kB          2.5kB          2.5kB  * 1       4     4     4     ( 2.5kB<< (MODE[1-n]==5)) 2.5kB          2.5kB          2.5kB  * 2       4     4     4     ( 2.5kB<< (MODE[1-n]==5)) 2.5kB          2.5kB          2.5kB  * 3       2     4     4     ( 5.0kB<< (MODE[1-n]==5)) 2.5kB          2.5kB          2.5kB  * 4       1     4     4     (10.0kB<< (MODE[1-n]==5)) 2.5kB          2.5kB          2.5kB  * 5       0     4     4     (   0kB                  ) 2.5kB          2.5kB          2.5kB  * where 0<= n<= 1  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_gmx_port_mode
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_gmx_port_mode_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|mode1
range|:
literal|3
decl_stmt|;
comment|/**< # of GM1 ports = 16>> MODE0, 0<= MODE0<= 4 */
name|uint64_t
name|mode0
range|:
literal|3
decl_stmt|;
comment|/**< # of GM0 ports = 16>> MODE0, 0<= MODE0<= 4 */
else|#
directive|else
name|uint64_t
name|mode0
range|:
literal|3
decl_stmt|;
name|uint64_t
name|mode1
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_gmx_port_mode_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_gmx_port_mode
name|cvmx_pko_reg_gmx_port_mode_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_int_mask  *  * Notes:  * When a mask bit is set, the corresponding interrupt is enabled.  *  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_int_mask
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_int_mask_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|loopback
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to PKO_REG_ERROR[3] above */
name|uint64_t
name|currzero
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to PKO_REG_ERROR[2] above */
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to PKO_REG_ERROR[1] above */
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to PKO_REG_ERROR[0] above */
else|#
directive|else
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|currzero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|loopback
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_pko_reg_int_mask_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to PKO_REG_ERROR[1] above */
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to PKO_REG_ERROR[0] above */
else|#
directive|else
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_pko_reg_int_mask_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_pko_reg_int_mask_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
name|uint64_t
name|currzero
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to PKO_REG_ERROR[2] above */
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to PKO_REG_ERROR[1] above */
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to PKO_REG_ERROR[0] above */
else|#
directive|else
name|uint64_t
name|parity
range|:
literal|1
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|currzero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_int_mask_cn50xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_int_mask
name|cvmx_pko_reg_int_mask_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_loopback_bpid  *  * Notes:  * None.  *  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_loopback_bpid
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_loopback_bpid_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
name|uint64_t
name|bpid7
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 7 backpressure-ID */
name|uint64_t
name|reserved_52_52
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid6
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 6 backpressure-ID */
name|uint64_t
name|reserved_45_45
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid5
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 5 backpressure-ID */
name|uint64_t
name|reserved_38_38
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid4
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 4 backpressure-ID */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid3
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 3 backpressure-ID */
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid2
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 2 backpressure-ID */
name|uint64_t
name|reserved_17_17
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid1
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 1 backpressure-ID */
name|uint64_t
name|reserved_10_10
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid0
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 0 backpressure-ID */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|bpid0
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_10
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid1
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_17_17
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid2
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid3
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid4
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_38_38
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid5
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_45_45
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid6
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_52_52
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bpid7
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_loopback_bpid_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_loopback_bpid_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_loopback_bpid
name|cvmx_pko_reg_loopback_bpid_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_loopback_pkind  *  * Notes:  * None.  *  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_loopback_pkind
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_loopback_pkind_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
name|uint64_t
name|pkind7
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 7 port-kind */
name|uint64_t
name|reserved_52_52
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind6
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 6 port-kind */
name|uint64_t
name|reserved_45_45
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind5
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 5 port-kind */
name|uint64_t
name|reserved_38_38
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind4
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 4 port-kind */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind3
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 3 port-kind */
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind2
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 2 port-kind */
name|uint64_t
name|reserved_17_17
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind1
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 1 port-kind */
name|uint64_t
name|reserved_10_10
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind0
range|:
literal|6
decl_stmt|;
comment|/**< Loopback port 0 port-kind */
name|uint64_t
name|num_ports
range|:
literal|4
decl_stmt|;
comment|/**< Number of loopback ports, 0<= NUM_PORTS<= 8 */
else|#
directive|else
name|uint64_t
name|num_ports
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pkind0
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_10
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind1
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_17_17
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind2
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind3
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind4
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_38_38
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind5
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_45_45
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind6
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_52_52
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkind7
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_loopback_pkind_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_loopback_pkind_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_loopback_pkind
name|cvmx_pko_reg_loopback_pkind_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_min_pkt  *  * Notes:  * This CSR is used with PKO_MEM_IPORT_PTRS[MIN_PKT] to select the minimum packet size.  Packets whose  * size in bytes< (SIZEn+1) are zero-padded to (SIZEn+1) bytes.  Note that this does not include CRC bytes.  * SIZE0=0 is read-only and is used when no padding is desired.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_min_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_min_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|size7
range|:
literal|8
decl_stmt|;
comment|/**< Minimum packet size-1 in bytes                                NS */
name|uint64_t
name|size6
range|:
literal|8
decl_stmt|;
comment|/**< Minimum packet size-1 in bytes                                NS */
name|uint64_t
name|size5
range|:
literal|8
decl_stmt|;
comment|/**< Minimum packet size-1 in bytes                                NS */
name|uint64_t
name|size4
range|:
literal|8
decl_stmt|;
comment|/**< Minimum packet size-1 in bytes                                NS */
name|uint64_t
name|size3
range|:
literal|8
decl_stmt|;
comment|/**< Minimum packet size-1 in bytes                                NS */
name|uint64_t
name|size2
range|:
literal|8
decl_stmt|;
comment|/**< Minimum packet size-1 in bytes                                NS */
name|uint64_t
name|size1
range|:
literal|8
decl_stmt|;
comment|/**< Minimum packet size-1 in bytes                                NS */
name|uint64_t
name|size0
range|:
literal|8
decl_stmt|;
comment|/**< Minimum packet size-1 in bytes                                NS */
else|#
directive|else
name|uint64_t
name|size0
range|:
literal|8
decl_stmt|;
name|uint64_t
name|size1
range|:
literal|8
decl_stmt|;
name|uint64_t
name|size2
range|:
literal|8
decl_stmt|;
name|uint64_t
name|size3
range|:
literal|8
decl_stmt|;
name|uint64_t
name|size4
range|:
literal|8
decl_stmt|;
name|uint64_t
name|size5
range|:
literal|8
decl_stmt|;
name|uint64_t
name|size6
range|:
literal|8
decl_stmt|;
name|uint64_t
name|size7
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_min_pkt_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_min_pkt_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_min_pkt
name|cvmx_pko_reg_min_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_preempt  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_preempt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_preempt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|min_size
range|:
literal|16
decl_stmt|;
comment|/**< Threshhold for packet preemption, measured in bytes.                                                          Only packets which have at least MIN_SIZE bytes                                                          remaining to be read can be preempted. */
else|#
directive|else
name|uint64_t
name|min_size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_preempt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_preempt
name|cvmx_pko_reg_preempt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_queue_mode  *  * Notes:  * Sets the number of queues and amount of local storage per queue  * The system has a total of 256 queues and (256*8) words of local command storage.  This CSR sets the  * number of queues that are used.  Increasing the value of MODE by 1 decreases the number of queues  * by a power of 2 and increases the local storage per queue by a power of 2.  * MODEn queues storage/queue  * 0     256     64B ( 8 words)  * 1     128    128B (16 words)  * 2      64    256B (32 words)  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_queue_mode
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_queue_mode_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|mode
range|:
literal|2
decl_stmt|;
comment|/**< # of queues = 256>> MODE, 0<= MODE<=2 */
else|#
directive|else
name|uint64_t
name|mode
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_mode_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_queue_mode
name|cvmx_pko_reg_queue_mode_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_queue_preempt  *  * Notes:  * Per QID, setting both PREEMPTER=1 and PREEMPTEE=1 is illegal and sets only PREEMPTER=1.  * This CSR is used with PKO_MEM_QUEUE_PTRS and PKO_REG_QUEUE_PTRS1.  When programming queues, the  * programming sequence must first write PKO_REG_QUEUE_PREEMPT, then PKO_REG_QUEUE_PTRS1 and then  * PKO_MEM_QUEUE_PTRS for each queue.  Preemption is supported only on queues that are ultimately  * mapped to engines 0-7.  It is illegal to set preemptee or preempter for a queue that is ultimately  * mapped to engines 8-11.  *  * Also, PKO_REG_ENGINE_INFLIGHT must be at least 2 for any engine on which preemption is enabled.  *  * See the descriptions of PKO_MEM_QUEUE_PTRS for further explanation of queue programming.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_queue_preempt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_queue_preempt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
comment|/**< Allow this QID to be preempted.                                                          0=cannot be preempted, 1=can be preempted */
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
comment|/**< Preempts the servicing of packet on PID to                                                          allow this QID immediate servicing.  0=do not cause                                                          preemption, 1=cause preemption.  Per PID, at most                                                          1 QID can have this bit set. */
else|#
directive|else
name|uint64_t
name|preempter
range|:
literal|1
decl_stmt|;
name|uint64_t
name|preemptee
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_preempt_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_queue_preempt
name|cvmx_pko_reg_queue_preempt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_queue_ptrs1  *  * Notes:  * This CSR is used with PKO_MEM_QUEUE_PTRS and PKO_MEM_QUEUE_QOS to allow access to queues 128-255  * and to allow up mapping of up to 16 queues per port.  When programming queues 128-255, the  * programming sequence must first write PKO_REG_QUEUE_PTRS1 and then write PKO_MEM_QUEUE_PTRS or  * PKO_MEM_QUEUE_QOS for each queue.  * See the descriptions of PKO_MEM_QUEUE_PTRS and PKO_MEM_QUEUE_QOS for further explanation of queue  * programming.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_queue_ptrs1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_queue_ptrs1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|idx3
range|:
literal|1
decl_stmt|;
comment|/**< [3] of Index (distance from head) in the queue array */
name|uint64_t
name|qid7
range|:
literal|1
decl_stmt|;
comment|/**< [7] of Queue ID */
else|#
directive|else
name|uint64_t
name|qid7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|idx3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_queue_ptrs1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_queue_ptrs1
name|cvmx_pko_reg_queue_ptrs1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_read_idx  *  * Notes:  * Provides the read index during a CSR read operation to any of the CSRs that are physically stored  * as memories.  The names of these CSRs begin with the prefix "PKO_MEM_".  * IDX[7:0] is the read index.  INC[7:0] is an increment that is added to IDX[7:0] after any CSR read.  * The intended use is to initially write this CSR such that IDX=0 and INC=1.  Then, the entire  * contents of a CSR memory can be read with consecutive CSR read commands.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_read_idx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_read_idx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|inc
range|:
literal|8
decl_stmt|;
comment|/**< Increment to add to current index for next index */
name|uint64_t
name|index
range|:
literal|8
decl_stmt|;
comment|/**< Index to use for next memory CSR read */
else|#
directive|else
name|uint64_t
name|index
range|:
literal|8
decl_stmt|;
name|uint64_t
name|inc
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_read_idx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_read_idx
name|cvmx_pko_reg_read_idx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_throttle  *  * Notes:  * This CSR is used with PKO_MEM_THROTTLE_PIPE and PKO_MEM_THROTTLE_INT.  INT_MASK corresponds to the  * interfaces listed in the description for PKO_MEM_IPORT_PTRS[INT].  Set INT_MASK[N] to enable the  * updating of PKO_MEM_THROTTLE_PIPE and PKO_MEM_THROTTLE_INT counts for packets destined for  * interface N.  INT_MASK has no effect on the updates caused by CSR writes to PKO_MEM_THROTTLE_PIPE  * and PKO_MEM_THROTTLE_INT.  Note that this does not disable the throttle logic, just the updating of  * the interface counts.  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_throttle
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_throttle_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|int_mask
range|:
literal|32
decl_stmt|;
comment|/**< Mask to enable THROTTLE count updates per interface           NS */
else|#
directive|else
name|uint64_t
name|int_mask
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_throttle_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_throttle_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_throttle
name|cvmx_pko_reg_throttle_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pko_reg_timestamp  *  * Notes:  * None.  *  */
end_comment

begin_union
union|union
name|cvmx_pko_reg_timestamp
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pko_reg_timestamp_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|wqe_word
range|:
literal|4
decl_stmt|;
comment|/**< Specifies the 8-byte word in the WQE to which a PTP                                                          timestamp is written.  Values 0 and 1 are illegal. */
else|#
directive|else
name|uint64_t
name|wqe_word
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pko_reg_timestamp_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_timestamp_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_timestamp_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_timestamp_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_timestamp_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_pko_reg_timestamp_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_pko_reg_timestamp_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pko_reg_timestamp
name|cvmx_pko_reg_timestamp_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

