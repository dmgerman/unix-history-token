begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  *  Copyright (c) 2003-2008 Cavium Networks (support@cavium.com). All rights  *  reserved.  *  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions are  *  met:  *  *      * Redistributions of source code must retain the above copyright  *        notice, this list of conditions and the following disclaimer.  *  *      * Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials provided  *        with the distribution.  *  *      * Neither the name of Cavium Networks nor the names of  *        its contributors may be used to endorse or promote products  *        derived from this software without specific prior written  *        permission.  *  *  TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  *  AND WITH ALL FAULTS AND CAVIUM NETWORKS MAKES NO PROMISES, REPRESENTATIONS  *  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH  *  RESPECT TO THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY  *  REPRESENTATION OR DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT  *  DEFECTS, AND CAVIUM SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES  *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR  *  PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET  *  POSSESSION OR CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT  *  OF USE OR PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  *  *  *  For any questions regarding licensing please contact marketing@caviumnetworks.com  *  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * General Purpose IO interface.  *  *<hr>$Revision: 41586 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_GPIO_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_GPIO_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* CSR typedefs have been moved to cvmx-csr-*.h */
comment|/**  * Clear the interrupt rising edge detector for the supplied  * pins in the mask. Chips which have more than 16 GPIO pins  * can't use them for interrupts.  *  * @param clear_mask Mask of pins to clear  */
specifier|static
specifier|inline
name|void
name|cvmx_gpio_interrupt_clear
parameter_list|(
name|uint16_t
name|clear_mask
parameter_list|)
block|{
name|cvmx_gpio_int_clr_t
name|gpio_int_clr
decl_stmt|;
name|gpio_int_clr
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|gpio_int_clr
operator|.
name|s
operator|.
name|type
operator|=
name|clear_mask
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_GPIO_INT_CLR
argument_list|,
name|gpio_int_clr
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/**  * GPIO Read Data  *  * @return Status of the GPIO pins  */
specifier|static
specifier|inline
name|uint32_t
name|cvmx_gpio_read
parameter_list|(
name|void
parameter_list|)
block|{
name|cvmx_gpio_rx_dat_t
name|gpio_rx_dat
decl_stmt|;
name|gpio_rx_dat
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_GPIO_RX_DAT
argument_list|)
expr_stmt|;
return|return
name|gpio_rx_dat
operator|.
name|s
operator|.
name|dat
return|;
block|}
comment|/**  * GPIO Clear pin  *  * @param clear_mask Bit mask to indicate which bits to drive to '0'.  */
specifier|static
specifier|inline
name|void
name|cvmx_gpio_clear
parameter_list|(
name|uint32_t
name|clear_mask
parameter_list|)
block|{
name|cvmx_gpio_tx_clr_t
name|gpio_tx_clr
decl_stmt|;
name|gpio_tx_clr
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|gpio_tx_clr
operator|.
name|s
operator|.
name|clr
operator|=
name|clear_mask
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_GPIO_TX_CLR
argument_list|,
name|gpio_tx_clr
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/**  * GPIO Set pin  *  * @param set_mask Bit mask to indicate which bits to drive to '1'.  */
specifier|static
specifier|inline
name|void
name|cvmx_gpio_set
parameter_list|(
name|uint32_t
name|set_mask
parameter_list|)
block|{
name|cvmx_gpio_tx_set_t
name|gpio_tx_set
decl_stmt|;
name|gpio_tx_set
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|gpio_tx_set
operator|.
name|s
operator|.
name|set
operator|=
name|set_mask
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_GPIO_TX_SET
argument_list|,
name|gpio_tx_set
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

