begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2011  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Interface to the CN63XX, CN68XX hardware HFA engine.  *  *<hr>$Revision: 49448 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_HFA_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_HFA_H__
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|CVMX_BUILD_FOR_LINUX_USER
end_ifndef

begin_include
include|#
directive|include
file|"cvmx-llm.h"
end_include

begin_include
include|#
directive|include
file|"cvmx-wqe.h"
end_include

begin_include
include|#
directive|include
file|"cvmx-fpa.h"
end_include

begin_include
include|#
directive|include
file|"cvmx-bootmem.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|CVMX_BUILD_FOR_LINUX_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<asm/octeon/cvmx.h>
end_include

begin_include
include|#
directive|include
file|<asm/octeon/cvmx-config.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|CVMX_ENABLE_DFA_FUNCTIONS
end_ifdef

begin_comment
comment|/* DFA queue cmd buffers */
end_comment

begin_define
define|#
directive|define
name|CVMX_FPA_DFA_POOL
value|(4)
end_define

begin_comment
comment|/**< DFA command buffers */
end_comment

begin_define
define|#
directive|define
name|CVMX_FPA_DFA_POOL_SIZE
value|(2 * CVMX_CACHE_LINE_SIZE)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|"executive-config.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|CVMX_ENABLE_DFA_FUNCTIONS
end_ifdef

begin_include
include|#
directive|include
file|"cvmx-config.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ENABLE_DEPRECATED
end_define

begin_comment
comment|/* Set to enable the old 18/36 bit names */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|CVMX_DFA_ITYPE_MEMLOAD
value|0x0
define|#
directive|define
name|CVMX_DFA_ITYPE_CACHELOAD
value|0x1
define|#
directive|define
name|CVMX_DFA_ITYPE_GRAPHFREE
value|0x3
define|#
directive|define
name|CVMX_DFA_ITYPE_GRAPHWALK
value|0x4
typedef|typedef
union|union
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|size
range|:
literal|24
decl_stmt|;
name|uint64_t
name|addr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|addr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
block|}
name|cvmx_dfa_gather_entry_t
typedef|;
typedef|typedef
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|f1
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
name|uint64_t
name|snode
range|:
literal|27
decl_stmt|;
name|uint64_t
name|gather_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|little_endian
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_full
range|:
literal|1
decl_stmt|;
name|uint64_t
name|load_through
range|:
literal|1
decl_stmt|;
name|uint64_t
name|small
range|:
literal|1
decl_stmt|;
name|uint64_t
name|itype
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|2
decl_stmt|;
name|uint64_t
name|mbase
range|:
literal|22
decl_stmt|;
else|#
directive|else
name|uint64_t
name|mbase
range|:
literal|22
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|2
decl_stmt|;
name|uint64_t
name|itype
range|:
literal|3
decl_stmt|;
name|uint64_t
name|small
range|:
literal|1
decl_stmt|;
name|uint64_t
name|load_through
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_full
range|:
literal|1
decl_stmt|;
name|uint64_t
name|little_endian
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gather_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|snode
range|:
literal|27
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
name|uint64_t
name|f1
range|:
literal|3
decl_stmt|;
endif|#
directive|endif
block|}
name|walk
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused4
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dbase
range|:
literal|9
decl_stmt|;
name|uint64_t
name|unused3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|cbase
range|:
literal|14
decl_stmt|;
name|uint64_t
name|gather_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|little_endian
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_full
range|:
literal|1
decl_stmt|;
name|uint64_t
name|load_through
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unused2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|itype
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dsize
range|:
literal|10
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pgid
range|:
literal|6
decl_stmt|;
else|#
directive|else
name|uint64_t
name|pgid
range|:
literal|6
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dsize
range|:
literal|10
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|6
decl_stmt|;
name|uint64_t
name|itype
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|load_through
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_full
range|:
literal|1
decl_stmt|;
name|uint64_t
name|little_endian
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gather_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|cbase
range|:
literal|14
decl_stmt|;
name|uint64_t
name|unused3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dbase
range|:
literal|9
decl_stmt|;
name|uint64_t
name|unused4
range|:
literal|7
decl_stmt|;
endif|#
directive|endif
block|}
name|cload
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused2
range|:
literal|32
decl_stmt|;
name|uint64_t
name|gather_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|little_endian
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_full
range|:
literal|1
decl_stmt|;
name|uint64_t
name|load_through
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|itype
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|2
decl_stmt|;
name|uint64_t
name|mbase
range|:
literal|22
decl_stmt|;
else|#
directive|else
name|uint64_t
name|mbase
range|:
literal|22
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|2
decl_stmt|;
name|uint64_t
name|itype
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|load_through
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_full
range|:
literal|1
decl_stmt|;
name|uint64_t
name|little_endian
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gather_mode
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unused2
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|mload
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused2
range|:
literal|34
decl_stmt|;
name|uint64_t
name|store_full
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
name|uint64_t
name|itype
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|24
decl_stmt|;
else|#
directive|else
name|uint64_t
name|unused0
range|:
literal|24
decl_stmt|;
name|uint64_t
name|itype
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
name|uint64_t
name|store_full
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unused2
range|:
literal|34
decl_stmt|;
endif|#
directive|endif
block|}
name|free
struct|;
block|}
name|cvmx_dfa_word0_t
typedef|;
typedef|typedef
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rmax
range|:
literal|16
decl_stmt|;
name|uint64_t
name|f2
range|:
literal|8
decl_stmt|;
name|uint64_t
name|rptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|rptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|f2
range|:
literal|8
decl_stmt|;
name|uint64_t
name|rmax
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|walk
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused1
range|:
literal|13
decl_stmt|;
name|uint64_t
name|rmax
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|8
decl_stmt|;
name|uint64_t
name|rptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|rptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|8
decl_stmt|;
name|uint64_t
name|rmax
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|13
decl_stmt|;
endif|#
directive|endif
block|}
name|cload
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused1
range|:
literal|4
decl_stmt|;
name|uint64_t
name|rmax
range|:
literal|12
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|8
decl_stmt|;
name|uint64_t
name|rptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|rptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|8
decl_stmt|;
name|uint64_t
name|rmax
range|:
literal|12
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
block|}
name|mload
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused
range|:
literal|24
decl_stmt|;
name|uint64_t
name|rptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|rptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|24
decl_stmt|;
endif|#
directive|endif
block|}
name|free
struct|;
block|}
name|cvmx_dfa_word1_t
typedef|;
typedef|typedef
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|dlen
range|:
literal|16
decl_stmt|;
name|uint64_t
name|srepl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|2
decl_stmt|;
name|uint64_t
name|clmsk
range|:
literal|4
decl_stmt|;
name|uint64_t
name|dptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|dptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|clmsk
range|:
literal|4
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|2
decl_stmt|;
name|uint64_t
name|srepl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dlen
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|walk
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|dlen
range|:
literal|16
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|4
decl_stmt|;
name|uint64_t
name|clmsk
range|:
literal|4
decl_stmt|;
name|uint64_t
name|dptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|dptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|clmsk
range|:
literal|4
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|4
decl_stmt|;
name|uint64_t
name|dlen
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|cload
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|dlen
range|:
literal|16
decl_stmt|;
name|uint64_t
name|repl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|2
decl_stmt|;
name|uint64_t
name|clmsk
range|:
literal|4
decl_stmt|;
name|uint64_t
name|dptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|dptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|clmsk
range|:
literal|4
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|2
decl_stmt|;
name|uint64_t
name|repl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dlen
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|mload
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused1
range|:
literal|20
decl_stmt|;
name|uint64_t
name|clmsk
range|:
literal|4
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|unused0
range|:
literal|40
decl_stmt|;
name|uint64_t
name|clmsk
range|:
literal|4
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|20
decl_stmt|;
endif|#
directive|endif
block|}
name|free
struct|;
block|}
name|cvmx_dfa_word2_t
typedef|;
typedef|typedef
union|union
block|{
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
name|uint64_t
name|vgid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|5
decl_stmt|;
name|uint64_t
name|f3
range|:
literal|9
decl_stmt|;
name|uint64_t
name|wqptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|wqptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|f3
range|:
literal|9
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|5
decl_stmt|;
name|uint64_t
name|vgid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|walk
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
name|uint64_t
name|vgid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|7
decl_stmt|;
name|uint64_t
name|f4
range|:
literal|7
decl_stmt|;
name|uint64_t
name|wqptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|wqptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|f4
range|:
literal|7
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|7
decl_stmt|;
name|uint64_t
name|vgid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|cload
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
name|uint64_t
name|vgid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|7
decl_stmt|;
name|uint64_t
name|f4
range|:
literal|7
decl_stmt|;
name|uint64_t
name|wqptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|wqptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|f4
range|:
literal|7
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|7
decl_stmt|;
name|uint64_t
name|vgid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|mload
struct|;
struct|struct
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
name|uint64_t
name|vgid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wqptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|wqptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|unused0
range|:
literal|14
decl_stmt|;
name|uint64_t
name|vgid
range|:
literal|8
decl_stmt|;
name|uint64_t
name|unused1
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|free
struct|;
block|}
name|cvmx_dfa_word3_t
typedef|;
typedef|typedef
union|union
block|{
name|uint64_t
name|u64
index|[
literal|4
index|]
decl_stmt|;
struct|struct
block|{
name|cvmx_dfa_word0_t
name|word0
decl_stmt|;
name|cvmx_dfa_word1_t
name|word1
decl_stmt|;
name|cvmx_dfa_word2_t
name|word2
decl_stmt|;
name|cvmx_dfa_word3_t
name|word3
decl_stmt|;
block|}
struct|;
block|}
name|cvmx_dfa_command_t
typedef|;
ifdef|#
directive|ifdef
name|CVMX_ENABLE_DFA_FUNCTIONS
comment|/**  * Initialize the DFA hardware before use  * Returns 0 on success, -1 on failure  */
name|int
name|cvmx_hfa_initialize
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Shutdown and cleanup resources used by the DFA  */
name|int
name|cvmx_hfa_shutdown
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Submit a command to the HFA block  *  * @param command HFA command to submit  *  * @return Zero on success, negative on failure  */
name|int
name|cvmx_hfa_submit
parameter_list|(
name|cvmx_dfa_command_t
modifier|*
name|command
parameter_list|)
function_decl|;
comment|/**  * Allocate a block of memory from the free list that was passed  * to the application by the bootloader.  *   * @param size      Size in bytes of block to allocate  * @param alignment Alignment required - must be power of 2  *  *  @return pointer to block of memory, NULL on error   */
name|void
modifier|*
name|hfa_bootmem_alloc
parameter_list|(
name|uint64_t
name|size
parameter_list|,
name|uint64_t
name|alignment
parameter_list|)
function_decl|;
comment|/**  * Frees a block to the bootmem allocator list.    *  * @param ptr  	   address of block  (memory pointer (void*))  * @param size     size of block in bytes.  *  * @return 1 on success,  *         0 on failure  *  */
name|int
name|hfa_bootmem_free
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_HFA_H__ */
end_comment

end_unit

