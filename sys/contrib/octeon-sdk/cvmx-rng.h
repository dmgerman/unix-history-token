begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Function and structure definitions for random number generator hardware  *  *<hr>$Revision: 70030 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CMVX_RNG_H__
end_ifndef

begin_define
define|#
directive|define
name|__CMVX_RNG_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|CVMX_RNG_LOAD_ADDRESS
value|CVMX_ADD_IO_SEG(cvmx_build_io_address(CVMX_OCT_DID_RNG, 0))
comment|/**  * Structure describing the data format used for IOBDMA stores to the RNG.  */
typedef|typedef
union|union
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
block|{
name|uint64_t
name|scraddr
range|:
literal|8
decl_stmt|;
comment|/**< the (64-bit word) location in scratchpad to write to (if len != 0) */
name|uint64_t
name|len
range|:
literal|8
decl_stmt|;
comment|/**< the number of words in the response (0 => no response) */
name|uint64_t
name|did
range|:
literal|5
decl_stmt|;
comment|/**< the ID of the device on the non-coherent bus */
name|uint64_t
name|subdid
range|:
literal|3
decl_stmt|;
comment|/**< the sub ID of the device on the non-coherent bus */
name|uint64_t
name|addr
range|:
literal|40
decl_stmt|;
comment|/**< the address that will appear in the first tick on the NCB bus */
block|}
name|s
struct|;
block|}
name|cvmx_rng_iobdma_data_t
typedef|;
comment|/**  * Enables the random number generator. Must be called before RNG is used  */
specifier|static
specifier|inline
name|void
name|cvmx_rng_enable
parameter_list|(
name|void
parameter_list|)
block|{
name|cvmx_rnm_ctl_status_t
name|rnm_ctl_status
decl_stmt|;
name|rnm_ctl_status
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_RNM_CTL_STATUS
argument_list|)
expr_stmt|;
name|rnm_ctl_status
operator|.
name|s
operator|.
name|ent_en
operator|=
literal|1
expr_stmt|;
name|rnm_ctl_status
operator|.
name|s
operator|.
name|rng_en
operator|=
literal|1
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_RNM_CTL_STATUS
argument_list|,
name|rnm_ctl_status
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/**  * Reads 8 bits of random data from Random number generator  *  * @return random data  */
specifier|static
specifier|inline
name|uint8_t
name|cvmx_rng_get_random8
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|cvmx_read64_uint8
argument_list|(
name|CVMX_RNG_LOAD_ADDRESS
argument_list|)
return|;
block|}
comment|/**  * Reads 16 bits of random data from Random number generator  *  * @return random data  */
specifier|static
specifier|inline
name|uint16_t
name|cvmx_rng_get_random16
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|cvmx_read64_uint16
argument_list|(
name|CVMX_RNG_LOAD_ADDRESS
argument_list|)
return|;
block|}
comment|/**  * Reads 32 bits of random data from Random number generator  *  * @return random data  */
specifier|static
specifier|inline
name|uint32_t
name|cvmx_rng_get_random32
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|cvmx_read64_uint32
argument_list|(
name|CVMX_RNG_LOAD_ADDRESS
argument_list|)
return|;
block|}
comment|/**  * Reads 64 bits of random data from Random number generator  *  * @return random data  */
specifier|static
specifier|inline
name|uint64_t
name|cvmx_rng_get_random64
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|cvmx_read64_uint64
argument_list|(
name|CVMX_RNG_LOAD_ADDRESS
argument_list|)
return|;
block|}
comment|/**  * Requests random data from the RNG block asynchronously using and IOBDMA operation.  * The random data will be written into the cores  * local memory at the specified address.  A SYNCIOBDMA  * operation should be issued to stall for completion of the write.  *  * @param scr_addr  Address in scratch memory to put the result  *                  MUST be a multiple of 8 bytes  * @param num_bytes Number of bytes of random data to write at  *                  scr_addr  *                  MUST be a multiple of 8 bytes  *  * @return 0 on success  *         1 on error  */
specifier|static
specifier|inline
name|int
name|cvmx_rng_request_random_async
parameter_list|(
name|uint64_t
name|scr_addr
parameter_list|,
name|uint64_t
name|num_bytes
parameter_list|)
block|{
name|cvmx_rng_iobdma_data_t
name|data
decl_stmt|;
if|if
condition|(
name|num_bytes
operator|&
literal|0x7
operator|||
name|scr_addr
operator|&
literal|0x7
condition|)
return|return
operator|(
literal|1
operator|)
return|;
name|data
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
comment|/* scr_addr must be 8 byte aligned */
name|data
operator|.
name|s
operator|.
name|scraddr
operator|=
name|scr_addr
operator|>>
literal|3
expr_stmt|;
name|data
operator|.
name|s
operator|.
name|len
operator|=
name|num_bytes
operator|>>
literal|3
expr_stmt|;
name|data
operator|.
name|s
operator|.
name|did
operator|=
name|CVMX_OCT_DID_RNG
expr_stmt|;
name|cvmx_send_single
argument_list|(
name|data
operator|.
name|u64
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  __CMVX_RNG_H__  */
end_comment

end_unit

